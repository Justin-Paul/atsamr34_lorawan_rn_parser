
APPS_ENDDEVICE_DEMO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001e650  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001e650  0001e650  0002e650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  0001e658  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000309c8  2**0
                  CONTENTS
  4 .bss          0000247c  200009c8  0001f020  000309c8  2**3
                  ALLOC
  5 .stack        00002004  20002e44  0002149c  000309c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007d298  00000000  00000000  00030a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c3db  00000000  00000000  000add14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b565  00000000  00000000  000ba0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001888  00000000  00000000  000d5654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ea8  00000000  00000000  000d6edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000305b5  00000000  00000000  000d8d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030588  00000000  00000000  00109339  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b36f8  00000000  00000000  001398c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000058e8  00000000  00000000  001ecfbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 4e 00 20 29 53 00 00 25 53 00 00 25 53 00 00     HN. )S..%S..%S..
	...
      2c:	25 53 00 00 00 00 00 00 00 00 00 00 25 53 00 00     %S..........%S..
      3c:	25 53 00 00 25 53 00 00 25 53 00 00 0d 36 00 00     %S..%S..%S...6..
      4c:	a5 2d 00 00 25 53 00 00 25 53 00 00 25 53 00 00     .-..%S..%S..%S..
      5c:	25 53 00 00 99 3a 00 00 a9 3a 00 00 b9 3a 00 00     %S...:...:...:..
      6c:	c9 3a 00 00 d9 3a 00 00 e9 3a 00 00 25 53 00 00     .:...:...:..%S..
      7c:	25 53 00 00 25 53 00 00 e1 4e 00 00 f1 4e 00 00     %S..%S...N...N..
      8c:	01 4f 00 00 11 4f 00 00 21 4f 00 00 f1 2a 00 00     .O...O..!O...*..
      9c:	25 53 00 00 25 53 00 00 25 53 00 00 25 53 00 00     %S..%S..%S..%S..
      ac:	25 53 00 00 00 00 00 00                             %S......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	0001e658 	.word	0x0001e658

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	0001e658 	.word	0x0001e658
     10c:	0001e658 	.word	0x0001e658
     110:	00000000 	.word	0x00000000

00000114 <parser_serial_data_handler>:
};

char aParserData[PARSER_MAX_DATA_LEN];

void parser_serial_data_handler(void)
{
     114:	b510      	push	{r4, lr}
    int rxChar;
   /* verify if there was any character received*/
    if((-1) != (rxChar = sio2host_getchar_nowait()))
     116:	4b05      	ldr	r3, [pc, #20]	; (12c <parser_serial_data_handler+0x18>)
     118:	4798      	blx	r3
     11a:	1c43      	adds	r3, r0, #1
     11c:	d005      	beq.n	12a <parser_serial_data_handler+0x16>
    {
        Parser_RxAddChar( (uint8_t)rxChar );
     11e:	b2c0      	uxtb	r0, r0
     120:	4b03      	ldr	r3, [pc, #12]	; (130 <parser_serial_data_handler+0x1c>)
     122:	4798      	blx	r3
        SYSTEM_PostTask(APP_TASK_ID);
     124:	2010      	movs	r0, #16
     126:	4b03      	ldr	r3, [pc, #12]	; (134 <parser_serial_data_handler+0x20>)
     128:	4798      	blx	r3
    }
}
     12a:	bd10      	pop	{r4, pc}
     12c:	000057ad 	.word	0x000057ad
     130:	00002451 	.word	0x00002451
     134:	0000d1c9 	.word	0x0000d1c9

00000138 <Parser_Init>:

void Parser_Init(void)
{
     138:	b510      	push	{r4, lr}
     13a:	b086      	sub	sp, #24
    Parser_RxClearBuffer();
     13c:	4b08      	ldr	r3, [pc, #32]	; (160 <Parser_Init+0x28>)
     13e:	4798      	blx	r3
    /* Initialize LoRaWAN stack */
    Parser_LorawanInit();
     140:	4b08      	ldr	r3, [pc, #32]	; (164 <Parser_Init+0x2c>)
     142:	4798      	blx	r3
	
	{
		PdsFileMarks_t appFileMarks;
		appFileMarks.fileMarkListAddr = appPdsFileOps;
     144:	ab02      	add	r3, sp, #8
		appFileMarks.numItems = (uint8_t)(PDS_APP_FILEID_MAX_VALUE & 0x00FF);
     146:	2201      	movs	r2, #1
     148:	711a      	strb	r2, [r3, #4]
		appFileMarks.itemListAddr = appPdsFileItemList;
		appFileMarks.fIDcb = NULL;
     14a:	2200      	movs	r2, #0
		PDS_RegFile(PDS_FILE_APP_DATA1_13_IDX, appFileMarks);
     14c:	9200      	str	r2, [sp, #0]
     14e:	4906      	ldr	r1, [pc, #24]	; (168 <Parser_Init+0x30>)
     150:	9a03      	ldr	r2, [sp, #12]
     152:	4b06      	ldr	r3, [pc, #24]	; (16c <Parser_Init+0x34>)
     154:	200c      	movs	r0, #12
     156:	4c06      	ldr	r4, [pc, #24]	; (170 <Parser_Init+0x38>)
     158:	47a0      	blx	r4
	}
}
     15a:	b006      	add	sp, #24
     15c:	bd10      	pop	{r4, pc}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	000023c9 	.word	0x000023c9
     164:	00000791 	.word	0x00000791
     168:	200011c4 	.word	0x200011c4
     16c:	20000000 	.word	0x20000000
     170:	0000c0e9 	.word	0x0000c0e9

00000174 <Parser_Main>:

void Parser_Main (void)
{
     174:	b5f0      	push	{r4, r5, r6, r7, lr}
     176:	46de      	mov	lr, fp
     178:	4657      	mov	r7, sl
     17a:	464e      	mov	r6, r9
     17c:	4645      	mov	r5, r8
     17e:	b5e0      	push	{r5, r6, r7, lr}
     180:	b08b      	sub	sp, #44	; 0x2c
    uint8_t cmdTotalNb;
    uint8_t startCmdSize = gParserStartCmdSize;
     182:	4b87      	ldr	r3, [pc, #540]	; (3a0 <Parser_Main+0x22c>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	4698      	mov	r8, r3
    const parserCmdEntry_t* pStartCmd = gpParserStartCmd;
     188:	4b86      	ldr	r3, [pc, #536]	; (3a4 <Parser_Main+0x230>)
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	9301      	str	r3, [sp, #4]
    uint8_t savedCmdIdx;
    parserCmdEntry_t tempCmd;

    /* verify if there was any character received */
    int rxChar;
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     18e:	4c86      	ldr	r4, [pc, #536]	; (3a8 <Parser_Main+0x234>)
    {
        Parser_RxAddChar( (uint8_t)rxChar );
     190:	4d86      	ldr	r5, [pc, #536]	; (3ac <Parser_Main+0x238>)
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     192:	e001      	b.n	198 <Parser_Main+0x24>
        Parser_RxAddChar( (uint8_t)rxChar );
     194:	b2c0      	uxtb	r0, r0
     196:	47a8      	blx	r5
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     198:	47a0      	blx	r4
     19a:	1c43      	adds	r3, r0, #1
     19c:	d1fa      	bne.n	194 <Parser_Main+0x20>
    }

    /* Verify if an entire command is received */
    if(mRxParserCmd.bCmdStatus)
     19e:	4b84      	ldr	r3, [pc, #528]	; (3b0 <Parser_Main+0x23c>)
     1a0:	4a84      	ldr	r2, [pc, #528]	; (3b4 <Parser_Main+0x240>)
     1a2:	5cd3      	ldrb	r3, [r2, r3]
     1a4:	2b00      	cmp	r3, #0
     1a6:	d04f      	beq.n	248 <Parser_Main+0xd4>
    {
        cmdTotalNb = mRxParserCmd.crtWordIdx + 1;
     1a8:	4b83      	ldr	r3, [pc, #524]	; (3b8 <Parser_Main+0x244>)
     1aa:	5cd3      	ldrb	r3, [r2, r3]
     1ac:	3301      	adds	r3, #1
     1ae:	b2db      	uxtb	r3, r3
     1b0:	469a      	mov	sl, r3
        crtWordIdx = 0;

        while(cmdTotalNb)
     1b2:	2b00      	cmp	r3, #0
     1b4:	d046      	beq.n	244 <Parser_Main+0xd0>
     1b6:	2300      	movs	r3, #0
     1b8:	469b      	mov	fp, r3

    /* Validate and find the group command */
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    {
        parserCmdEntry = *(pParserCmd + cmdCtr);
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     1ba:	4691      	mov	r9, r2
     1bc:	4f7f      	ldr	r7, [pc, #508]	; (3bc <Parser_Main+0x248>)
     1be:	4646      	mov	r6, r8
     1c0:	46d8      	mov	r8, fp
     1c2:	46d3      	mov	fp, sl
     1c4:	e01a      	b.n	1fc <Parser_Main+0x88>
     1c6:	4656      	mov	r6, sl
            /* Command found */
            break;
        }
    }

    if(cmdCtr < nbParserCmd)
     1c8:	42a6      	cmp	r6, r4
     1ca:	d800      	bhi.n	1ce <Parser_Main+0x5a>
     1cc:	e0e1      	b.n	392 <Parser_Main+0x21e>
    {
        if(parserCmdEntry.pNextParserCmd == NULL)
     1ce:	9b00      	ldr	r3, [sp, #0]
     1d0:	685b      	ldr	r3, [r3, #4]
     1d2:	9303      	str	r3, [sp, #12]
     1d4:	2b00      	cmp	r3, #0
     1d6:	d03e      	beq.n	256 <Parser_Main+0xe2>
                tempCmd = *(pStartCmd + savedCmdIdx);
     1d8:	0124      	lsls	r4, r4, #4
     1da:	9b01      	ldr	r3, [sp, #4]
     1dc:	469c      	mov	ip, r3
     1de:	4464      	add	r4, ip
                crtWordIdx ++;
     1e0:	4643      	mov	r3, r8
     1e2:	3301      	adds	r3, #1
     1e4:	b2db      	uxtb	r3, r3
     1e6:	4698      	mov	r8, r3
                cmdTotalNb --;
     1e8:	465b      	mov	r3, fp
     1ea:	3b01      	subs	r3, #1
     1ec:	b2db      	uxtb	r3, r3
     1ee:	469b      	mov	fp, r3
                startCmdSize = tempCmd.nextParserCmdSize;
     1f0:	7b26      	ldrb	r6, [r4, #12]
                pStartCmd = tempCmd.pNextParserCmd;
     1f2:	6863      	ldr	r3, [r4, #4]
     1f4:	9301      	str	r3, [sp, #4]
        while(cmdTotalNb)
     1f6:	465b      	mov	r3, fp
     1f8:	2b00      	cmp	r3, #0
     1fa:	d023      	beq.n	244 <Parser_Main+0xd0>
    parserCmdInfo.pReplyCmd = (char*)gapParserStatus[INVALID_PARAM_IDX]; /* Reply with error by default */;
     1fc:	4b70      	ldr	r3, [pc, #448]	; (3c0 <Parser_Main+0x24c>)
     1fe:	9309      	str	r3, [sp, #36]	; 0x24
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
     200:	2e00      	cmp	r6, #0
     202:	d100      	bne.n	206 <Parser_Main+0x92>
     204:	e0c3      	b.n	38e <Parser_Main+0x21a>
     206:	9d01      	ldr	r5, [sp, #4]
     208:	2400      	movs	r4, #0
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     20a:	4643      	mov	r3, r8
     20c:	9302      	str	r3, [sp, #8]
     20e:	331d      	adds	r3, #29
     210:	33ff      	adds	r3, #255	; 0xff
     212:	005b      	lsls	r3, r3, #1
     214:	444b      	add	r3, r9
     216:	3302      	adds	r3, #2
     218:	46b2      	mov	sl, r6
     21a:	001e      	movs	r6, r3
        parserCmdEntry = *(pParserCmd + cmdCtr);
     21c:	9500      	str	r5, [sp, #0]
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     21e:	8831      	ldrh	r1, [r6, #0]
     220:	4449      	add	r1, r9
     222:	6828      	ldr	r0, [r5, #0]
     224:	47b8      	blx	r7
     226:	2800      	cmp	r0, #0
     228:	d0cd      	beq.n	1c6 <Parser_Main+0x52>
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
     22a:	3401      	adds	r4, #1
     22c:	b2e4      	uxtb	r4, r4
     22e:	3510      	adds	r5, #16
     230:	4554      	cmp	r4, sl
     232:	d1f3      	bne.n	21c <Parser_Main+0xa8>
            /* DO not send a reply yet */
            parserCmdInfo.pReplyCmd = NULL;
        }
    }

    if(parserCmdInfo.pReplyCmd)
     234:	4c62      	ldr	r4, [pc, #392]	; (3c0 <Parser_Main+0x24c>)
    {
        Parser_TxAddReply(parserCmdInfo.pReplyCmd, strlen(parserCmdInfo.pReplyCmd));
     236:	0020      	movs	r0, r4
     238:	4b62      	ldr	r3, [pc, #392]	; (3c4 <Parser_Main+0x250>)
     23a:	4798      	blx	r3
     23c:	b281      	uxth	r1, r0
     23e:	0020      	movs	r0, r4
     240:	4b61      	ldr	r3, [pc, #388]	; (3c8 <Parser_Main+0x254>)
     242:	4798      	blx	r3
        Parser_RxClearBuffer();
     244:	4b61      	ldr	r3, [pc, #388]	; (3cc <Parser_Main+0x258>)
     246:	4798      	blx	r3
}
     248:	b00b      	add	sp, #44	; 0x2c
     24a:	bc3c      	pop	{r2, r3, r4, r5}
     24c:	4690      	mov	r8, r2
     24e:	4699      	mov	r9, r3
     250:	46a2      	mov	sl, r4
     252:	46ab      	mov	fp, r5
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
     256:	46c3      	mov	fp, r8
        parserCmdEntry = *(pParserCmd + cmdCtr);
     258:	9b00      	ldr	r3, [sp, #0]
     25a:	689c      	ldr	r4, [r3, #8]
            if(parserCmdEntry.pActionCbFct)
     25c:	2c00      	cmp	r4, #0
     25e:	d100      	bne.n	262 <Parser_Main+0xee>
     260:	e099      	b.n	396 <Parser_Main+0x222>
        parserCmdEntry = *(pParserCmd + cmdCtr);
     262:	7b5a      	ldrb	r2, [r3, #13]
                if((mRxParserCmd.crtWordIdx - rxCmdIdx) == parserCmdEntry.flags)
     264:	4b54      	ldr	r3, [pc, #336]	; (3b8 <Parser_Main+0x244>)
     266:	4953      	ldr	r1, [pc, #332]	; (3b4 <Parser_Main+0x240>)
     268:	5ccb      	ldrb	r3, [r1, r3]
     26a:	9902      	ldr	r1, [sp, #8]
     26c:	1a5b      	subs	r3, r3, r1
     26e:	4293      	cmp	r3, r2
     270:	d001      	beq.n	276 <Parser_Main+0x102>
    if(parserCmdInfo.pReplyCmd)
     272:	4c53      	ldr	r4, [pc, #332]	; (3c0 <Parser_Main+0x24c>)
     274:	e7df      	b.n	236 <Parser_Main+0xc2>
                    if(parserCmdEntry.flags > 0)
     276:	2a00      	cmp	r2, #0
     278:	d015      	beq.n	2a6 <Parser_Main+0x132>
                    uint8_t iCtr = rxCmdIdx + 1;
     27a:	4643      	mov	r3, r8
     27c:	3301      	adds	r3, #1
     27e:	b2db      	uxtb	r3, r3
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     280:	4e4c      	ldr	r6, [pc, #304]	; (3b4 <Parser_Main+0x240>)
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     282:	0035      	movs	r5, r6
     284:	484c      	ldr	r0, [pc, #304]	; (3b8 <Parser_Main+0x244>)
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     286:	1c59      	adds	r1, r3, #1
     288:	b2c9      	uxtb	r1, r1
     28a:	3311      	adds	r3, #17
     28c:	33ff      	adds	r3, #255	; 0xff
     28e:	005b      	lsls	r3, r3, #1
     290:	18f3      	adds	r3, r6, r3
     292:	88db      	ldrh	r3, [r3, #6]
     294:	b29b      	uxth	r3, r3
     296:	2b00      	cmp	r3, #0
     298:	d100      	bne.n	29c <Parser_Main+0x128>
     29a:	e07e      	b.n	39a <Parser_Main+0x226>
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     29c:	5c2a      	ldrb	r2, [r5, r0]
     29e:	b2d2      	uxtb	r2, r2
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     2a0:	000b      	movs	r3, r1
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     2a2:	4291      	cmp	r1, r2
     2a4:	d9ef      	bls.n	286 <Parser_Main+0x112>
                        memset(&parserCmdInfo, 0, sizeof(parserCmdInfo_t));
     2a6:	2218      	movs	r2, #24
     2a8:	2100      	movs	r1, #0
     2aa:	a804      	add	r0, sp, #16
     2ac:	4b48      	ldr	r3, [pc, #288]	; (3d0 <Parser_Main+0x25c>)
     2ae:	4798      	blx	r3
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
     2b0:	465a      	mov	r2, fp
     2b2:	465b      	mov	r3, fp
     2b4:	3301      	adds	r3, #1
     2b6:	2b09      	cmp	r3, #9
     2b8:	d957      	bls.n	36a <Parser_Main+0x1f6>
                        if((rxCmdIdx + 2U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 2U] > 0U))
     2ba:	1c93      	adds	r3, r2, #2
     2bc:	2b09      	cmp	r3, #9
     2be:	d810      	bhi.n	2e2 <Parser_Main+0x16e>
     2c0:	3311      	adds	r3, #17
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	005b      	lsls	r3, r3, #1
     2c6:	493b      	ldr	r1, [pc, #236]	; (3b4 <Parser_Main+0x240>)
     2c8:	18cb      	adds	r3, r1, r3
     2ca:	88db      	ldrh	r3, [r3, #6]
     2cc:	b29b      	uxth	r3, r3
     2ce:	2b00      	cmp	r3, #0
     2d0:	d007      	beq.n	2e2 <Parser_Main+0x16e>
                            parserCmdInfo.pParam2 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 2]]);
     2d2:	9b02      	ldr	r3, [sp, #8]
     2d4:	331f      	adds	r3, #31
     2d6:	33ff      	adds	r3, #255	; 0xff
     2d8:	005b      	lsls	r3, r3, #1
     2da:	18cb      	adds	r3, r1, r3
     2dc:	885b      	ldrh	r3, [r3, #2]
     2de:	18c9      	adds	r1, r1, r3
     2e0:	9105      	str	r1, [sp, #20]
                        if((rxCmdIdx + 3U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 3U] > 0U))
     2e2:	1cd3      	adds	r3, r2, #3
     2e4:	2b09      	cmp	r3, #9
     2e6:	d810      	bhi.n	30a <Parser_Main+0x196>
     2e8:	3311      	adds	r3, #17
     2ea:	33ff      	adds	r3, #255	; 0xff
     2ec:	005b      	lsls	r3, r3, #1
     2ee:	4931      	ldr	r1, [pc, #196]	; (3b4 <Parser_Main+0x240>)
     2f0:	18cb      	adds	r3, r1, r3
     2f2:	88db      	ldrh	r3, [r3, #6]
     2f4:	b29b      	uxth	r3, r3
     2f6:	2b00      	cmp	r3, #0
     2f8:	d007      	beq.n	30a <Parser_Main+0x196>
                            parserCmdInfo.pParam3 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 3]]);
     2fa:	9b02      	ldr	r3, [sp, #8]
     2fc:	3320      	adds	r3, #32
     2fe:	33ff      	adds	r3, #255	; 0xff
     300:	005b      	lsls	r3, r3, #1
     302:	18cb      	adds	r3, r1, r3
     304:	885b      	ldrh	r3, [r3, #2]
     306:	18c9      	adds	r1, r1, r3
     308:	9106      	str	r1, [sp, #24]
                        if((rxCmdIdx + 4U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 4U] > 0U))
     30a:	1d13      	adds	r3, r2, #4
     30c:	2b09      	cmp	r3, #9
     30e:	d810      	bhi.n	332 <Parser_Main+0x1be>
     310:	3311      	adds	r3, #17
     312:	33ff      	adds	r3, #255	; 0xff
     314:	005b      	lsls	r3, r3, #1
     316:	4927      	ldr	r1, [pc, #156]	; (3b4 <Parser_Main+0x240>)
     318:	18cb      	adds	r3, r1, r3
     31a:	88db      	ldrh	r3, [r3, #6]
     31c:	b29b      	uxth	r3, r3
     31e:	2b00      	cmp	r3, #0
     320:	d007      	beq.n	332 <Parser_Main+0x1be>
                            parserCmdInfo.pParam4 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 4]]);
     322:	9b02      	ldr	r3, [sp, #8]
     324:	3321      	adds	r3, #33	; 0x21
     326:	33ff      	adds	r3, #255	; 0xff
     328:	005b      	lsls	r3, r3, #1
     32a:	18cb      	adds	r3, r1, r3
     32c:	885b      	ldrh	r3, [r3, #2]
     32e:	18c9      	adds	r1, r1, r3
     330:	9107      	str	r1, [sp, #28]
                        if((rxCmdIdx + 5U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 5U] > 0U))
     332:	3205      	adds	r2, #5
     334:	2a09      	cmp	r2, #9
     336:	d811      	bhi.n	35c <Parser_Main+0x1e8>
     338:	3211      	adds	r2, #17
     33a:	32ff      	adds	r2, #255	; 0xff
     33c:	0052      	lsls	r2, r2, #1
     33e:	4b1d      	ldr	r3, [pc, #116]	; (3b4 <Parser_Main+0x240>)
     340:	189a      	adds	r2, r3, r2
     342:	88d3      	ldrh	r3, [r2, #6]
     344:	b29b      	uxth	r3, r3
     346:	2b00      	cmp	r3, #0
     348:	d008      	beq.n	35c <Parser_Main+0x1e8>
                            parserCmdInfo.pParam5 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 5]]);
     34a:	4a1a      	ldr	r2, [pc, #104]	; (3b4 <Parser_Main+0x240>)
     34c:	9b02      	ldr	r3, [sp, #8]
     34e:	3322      	adds	r3, #34	; 0x22
     350:	33ff      	adds	r3, #255	; 0xff
     352:	005b      	lsls	r3, r3, #1
     354:	18d3      	adds	r3, r2, r3
     356:	885b      	ldrh	r3, [r3, #2]
     358:	18d2      	adds	r2, r2, r3
     35a:	9208      	str	r2, [sp, #32]
                        parserCmdEntry.pActionCbFct(&parserCmdInfo);
     35c:	a804      	add	r0, sp, #16
     35e:	47a0      	blx	r4
    if(parserCmdInfo.pReplyCmd)
     360:	9c09      	ldr	r4, [sp, #36]	; 0x24
     362:	2c00      	cmp	r4, #0
     364:	d000      	beq.n	368 <Parser_Main+0x1f4>
     366:	e766      	b.n	236 <Parser_Main+0xc2>
     368:	e76c      	b.n	244 <Parser_Main+0xd0>
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
     36a:	3311      	adds	r3, #17
     36c:	33ff      	adds	r3, #255	; 0xff
     36e:	005b      	lsls	r3, r3, #1
     370:	4910      	ldr	r1, [pc, #64]	; (3b4 <Parser_Main+0x240>)
     372:	18cb      	adds	r3, r1, r3
     374:	88db      	ldrh	r3, [r3, #6]
     376:	b29b      	uxth	r3, r3
     378:	2b00      	cmp	r3, #0
     37a:	d09e      	beq.n	2ba <Parser_Main+0x146>
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
     37c:	9b02      	ldr	r3, [sp, #8]
     37e:	331e      	adds	r3, #30
     380:	33ff      	adds	r3, #255	; 0xff
     382:	005b      	lsls	r3, r3, #1
     384:	18cb      	adds	r3, r1, r3
     386:	885b      	ldrh	r3, [r3, #2]
     388:	18c9      	adds	r1, r1, r3
     38a:	9104      	str	r1, [sp, #16]
     38c:	e795      	b.n	2ba <Parser_Main+0x146>
    if(parserCmdInfo.pReplyCmd)
     38e:	4c0c      	ldr	r4, [pc, #48]	; (3c0 <Parser_Main+0x24c>)
     390:	e751      	b.n	236 <Parser_Main+0xc2>
     392:	4c0b      	ldr	r4, [pc, #44]	; (3c0 <Parser_Main+0x24c>)
     394:	e74f      	b.n	236 <Parser_Main+0xc2>
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <Parser_Main+0x24c>)
     398:	e74d      	b.n	236 <Parser_Main+0xc2>
     39a:	4c09      	ldr	r4, [pc, #36]	; (3c0 <Parser_Main+0x24c>)
     39c:	e74b      	b.n	236 <Parser_Main+0xc2>
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	0001c94a 	.word	0x0001c94a
     3a4:	20000008 	.word	0x20000008
     3a8:	000057ad 	.word	0x000057ad
     3ac:	00002451 	.word	0x00002451
     3b0:	0000024e 	.word	0x0000024e
     3b4:	20001dd8 	.word	0x20001dd8
     3b8:	0000024f 	.word	0x0000024f
     3bc:	00017a7d 	.word	0x00017a7d
     3c0:	0001c93c 	.word	0x0001c93c
     3c4:	00017b05 	.word	0x00017b05
     3c8:	00002415 	.word	0x00002415
     3cc:	000023c9 	.word	0x000023c9
     3d0:	00017715 	.word	0x00017715

000003d4 <Parser_GetSwVersion>:
{
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	0004      	movs	r4, r0
    memcpy(pBuffData, HW_STR, sizeof(HW_STR));
     3d8:	220b      	movs	r2, #11
     3da:	490d      	ldr	r1, [pc, #52]	; (410 <Parser_GetSwVersion+0x3c>)
     3dc:	4d0d      	ldr	r5, [pc, #52]	; (414 <Parser_GetSwVersion+0x40>)
     3de:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) - 1] = ' ';
     3e0:	2620      	movs	r6, #32
     3e2:	72a6      	strb	r6, [r4, #10]
    memcpy(&pBuffData[sizeof(HW_STR)], VER_STR, sizeof(VER_STR));
     3e4:	0020      	movs	r0, r4
     3e6:	300b      	adds	r0, #11
     3e8:	2210      	movs	r2, #16
     3ea:	490b      	ldr	r1, [pc, #44]	; (418 <Parser_GetSwVersion+0x44>)
     3ec:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) - 1] = ' ';
     3ee:	76a6      	strb	r6, [r4, #26]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR)], __DATE__, sizeof(__DATE__));
     3f0:	0020      	movs	r0, r4
     3f2:	301b      	adds	r0, #27
     3f4:	220c      	movs	r2, #12
     3f6:	4909      	ldr	r1, [pc, #36]	; (41c <Parser_GetSwVersion+0x48>)
     3f8:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) - 1] = ' ';
     3fa:	2326      	movs	r3, #38	; 0x26
     3fc:	54e6      	strb	r6, [r4, r3]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__)], __TIME__, sizeof(__TIME__));
     3fe:	0020      	movs	r0, r4
     400:	3027      	adds	r0, #39	; 0x27
     402:	2209      	movs	r2, #9
     404:	4906      	ldr	r1, [pc, #24]	; (420 <Parser_GetSwVersion+0x4c>)
     406:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) + sizeof(__TIME__)] = '\0';
     408:	2200      	movs	r2, #0
     40a:	2330      	movs	r3, #48	; 0x30
     40c:	54e2      	strb	r2, [r4, r3]
}
     40e:	bd70      	pop	{r4, r5, r6, pc}
     410:	0001c908 	.word	0x0001c908
     414:	00017691 	.word	0x00017691
     418:	0001c914 	.word	0x0001c914
     41c:	0001c924 	.word	0x0001c924
     420:	0001c930 	.word	0x0001c930

00000424 <ParserJoinData>:
	
	appHandle = NULL;
}

static void ParserJoinData(StackRetStatus_t status)
{
     424:	b510      	push	{r4, lr}
    uint8_t statusIdx = JOIN_DENY_STR_IDX;

    //TODO: make sure this does not interfere with the receiving commands

    //This is called every time the join process is finished
    if(LORAWAN_SUCCESS == status)
     426:	2808      	cmp	r0, #8
     428:	d012      	beq.n	450 <ParserJoinData+0x2c>
    {
        //Sucessful join
        statusIdx = JOIN_ACCEPT_STR_IDX;
    }
	else if (LORAWAN_NO_CHANNELS_FOUND == status)
     42a:	2810      	cmp	r0, #16
     42c:	d012      	beq.n	454 <ParserJoinData+0x30>
	{
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
	}
	else if (LORAWAN_TX_TIMEOUT == status)
     42e:	281b      	cmp	r0, #27
     430:	d012      	beq.n	458 <ParserJoinData+0x34>
	{
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
	}
	else if (LORAWAN_MIC_ERROR == status)
	{
		statusIdx = JOIN_MIC_ERROR_STR_IDX;
     432:	3818      	subs	r0, #24
     434:	4243      	negs	r3, r0
     436:	4158      	adcs	r0, r3
     438:	0080      	lsls	r0, r0, #2
	}
				
    Parser_TxAddReply((char*)gapParseJoinStatus[statusIdx], strlen((char*)gapParseJoinStatus[statusIdx]));
     43a:	0080      	lsls	r0, r0, #2
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <ParserJoinData+0x38>)
     43e:	58c4      	ldr	r4, [r0, r3]
     440:	0020      	movs	r0, r4
     442:	4b07      	ldr	r3, [pc, #28]	; (460 <ParserJoinData+0x3c>)
     444:	4798      	blx	r3
     446:	b281      	uxth	r1, r0
     448:	0020      	movs	r0, r4
     44a:	4b06      	ldr	r3, [pc, #24]	; (464 <ParserJoinData+0x40>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
        statusIdx = JOIN_ACCEPT_STR_IDX;
     450:	2001      	movs	r0, #1
     452:	e7f2      	b.n	43a <ParserJoinData+0x16>
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
     454:	2002      	movs	r0, #2
     456:	e7f0      	b.n	43a <ParserJoinData+0x16>
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
     458:	2003      	movs	r0, #3
     45a:	e7ee      	b.n	43a <ParserJoinData+0x16>
     45c:	0001d52c 	.word	0x0001d52c
     460:	00017b05 	.word	0x00017b05
     464:	00002415 	.word	0x00002415

00000468 <ParserAppData>:
{
     468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (data->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
     46a:	780b      	ldrb	r3, [r1, #0]
     46c:	2b02      	cmp	r3, #2
     46e:	d003      	beq.n	478 <ParserAppData+0x10>
    else if(data->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
     470:	2b04      	cmp	r3, #4
     472:	d100      	bne.n	476 <ParserAppData+0xe>
     474:	e09c      	b.n	5b0 <ParserAppData+0x148>
}
     476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch(status)
     478:	7b4b      	ldrb	r3, [r1, #13]
     47a:	3b08      	subs	r3, #8
     47c:	b2da      	uxtb	r2, r3
     47e:	2a16      	cmp	r2, #22
     480:	d8f9      	bhi.n	476 <ParserAppData+0xe>
     482:	0093      	lsls	r3, r2, #2
     484:	4a97      	ldr	r2, [pc, #604]	; (6e4 <ParserAppData+0x27c>)
     486:	58d3      	ldr	r3, [r2, r3]
     488:	469f      	mov	pc, r3
        uint8_t dataLength = data->param.rxData.dataLength;
     48a:	7b0d      	ldrb	r5, [r1, #12]
                if((dataLength > 0U) && (NULL != pData))
     48c:	2d00      	cmp	r5, #0
     48e:	d030      	beq.n	4f2 <ParserAppData+0x8a>
        uint8_t *pData = data->param.rxData.pData;
     490:	688e      	ldr	r6, [r1, #8]
                if((dataLength > 0U) && (NULL != pData))
     492:	2e00      	cmp	r6, #0
     494:	d02d      	beq.n	4f2 <ParserAppData+0x8a>
                    strcpy(aParserData, gapParserRxStatus[MAC_RX_DATA_STR_IDX]);
     496:	4c94      	ldr	r4, [pc, #592]	; (6e8 <ParserAppData+0x280>)
     498:	2208      	movs	r2, #8
     49a:	4994      	ldr	r1, [pc, #592]	; (6ec <ParserAppData+0x284>)
     49c:	0020      	movs	r0, r4
     49e:	4b94      	ldr	r3, [pc, #592]	; (6f0 <ParserAppData+0x288>)
     4a0:	4798      	blx	r3
                    dataLen = strlen(aParserData);
     4a2:	0020      	movs	r0, r4
     4a4:	4f93      	ldr	r7, [pc, #588]	; (6f4 <ParserAppData+0x28c>)
     4a6:	47b8      	blx	r7
                    itoa( *pData, &aParserData[dataLen],10);
     4a8:	0401      	lsls	r1, r0, #16
     4aa:	0c09      	lsrs	r1, r1, #16
     4ac:	1909      	adds	r1, r1, r4
     4ae:	7830      	ldrb	r0, [r6, #0]
     4b0:	220a      	movs	r2, #10
     4b2:	4b91      	ldr	r3, [pc, #580]	; (6f8 <ParserAppData+0x290>)
     4b4:	4798      	blx	r3
                    dataLen = strlen(aParserData);
     4b6:	0020      	movs	r0, r4
     4b8:	47b8      	blx	r7
                    aParserData[dataLen] = ' ';
     4ba:	0403      	lsls	r3, r0, #16
     4bc:	0c1b      	lsrs	r3, r3, #16
     4be:	2220      	movs	r2, #32
     4c0:	54e2      	strb	r2, [r4, r3]
                    dataLen ++;
     4c2:	3001      	adds	r0, #1
     4c4:	b280      	uxth	r0, r0
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
     4c6:	1902      	adds	r2, r0, r4
     4c8:	1c71      	adds	r1, r6, #1
                    maxDataLenToTx = ((dataLength - 1) <= ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1))) ? (dataLength - 1) : ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1));
     4ca:	4b8c      	ldr	r3, [pc, #560]	; (6fc <ParserAppData+0x294>)
     4cc:	1a1b      	subs	r3, r3, r0
     4ce:	03db      	lsls	r3, r3, #15
     4d0:	3d01      	subs	r5, #1
     4d2:	0c1b      	lsrs	r3, r3, #16
     4d4:	42ab      	cmp	r3, r5
     4d6:	dd00      	ble.n	4da <ParserAppData+0x72>
     4d8:	002b      	movs	r3, r5
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
     4da:	b2d8      	uxtb	r0, r3
     4dc:	4b88      	ldr	r3, [pc, #544]	; (700 <ParserAppData+0x298>)
     4de:	4798      	blx	r3
                    Parser_TxAddReply(aParserData, strlen(aParserData));
     4e0:	4c81      	ldr	r4, [pc, #516]	; (6e8 <ParserAppData+0x280>)
     4e2:	0020      	movs	r0, r4
     4e4:	4b83      	ldr	r3, [pc, #524]	; (6f4 <ParserAppData+0x28c>)
     4e6:	4798      	blx	r3
     4e8:	b281      	uxth	r1, r0
     4ea:	0020      	movs	r0, r4
     4ec:	4b85      	ldr	r3, [pc, #532]	; (704 <ParserAppData+0x29c>)
     4ee:	4798      	blx	r3
     4f0:	e7c1      	b.n	476 <ParserAppData+0xe>
                    Parser_TxAddReply((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX], strlen((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX]));
     4f2:	210c      	movs	r1, #12
     4f4:	4884      	ldr	r0, [pc, #528]	; (708 <ParserAppData+0x2a0>)
     4f6:	4b83      	ldr	r3, [pc, #524]	; (704 <ParserAppData+0x29c>)
     4f8:	4798      	blx	r3
     4fa:	e7bc      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
     4fc:	2109      	movs	r1, #9
     4fe:	4883      	ldr	r0, [pc, #524]	; (70c <ParserAppData+0x2a4>)
     500:	4b80      	ldr	r3, [pc, #512]	; (704 <ParserAppData+0x29c>)
     502:	4798      	blx	r3
				break;
     504:	e7b7      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
     506:	210d      	movs	r1, #13
     508:	4881      	ldr	r0, [pc, #516]	; (710 <ParserAppData+0x2a8>)
     50a:	4b7e      	ldr	r3, [pc, #504]	; (704 <ParserAppData+0x29c>)
     50c:	4798      	blx	r3
				break;
     50e:	e7b2      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
     510:	210d      	movs	r1, #13
     512:	4880      	ldr	r0, [pc, #512]	; (714 <ParserAppData+0x2ac>)
     514:	4b7b      	ldr	r3, [pc, #492]	; (704 <ParserAppData+0x29c>)
     516:	4798      	blx	r3
				break;
     518:	e7ad      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
     51a:	2106      	movs	r1, #6
     51c:	487e      	ldr	r0, [pc, #504]	; (718 <ParserAppData+0x2b0>)
     51e:	4b79      	ldr	r3, [pc, #484]	; (704 <ParserAppData+0x29c>)
     520:	4798      	blx	r3
				break;
     522:	e7a8      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
     524:	211e      	movs	r1, #30
     526:	487d      	ldr	r0, [pc, #500]	; (71c <ParserAppData+0x2b4>)
     528:	4b76      	ldr	r3, [pc, #472]	; (704 <ParserAppData+0x29c>)
     52a:	4798      	blx	r3
				break;
     52c:	e7a3      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
     52e:	210d      	movs	r1, #13
     530:	487b      	ldr	r0, [pc, #492]	; (720 <ParserAppData+0x2b8>)
     532:	4b74      	ldr	r3, [pc, #464]	; (704 <ParserAppData+0x29c>)
     534:	4798      	blx	r3
				break;
     536:	e79e      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
     538:	2109      	movs	r1, #9
     53a:	487a      	ldr	r0, [pc, #488]	; (724 <ParserAppData+0x2bc>)
     53c:	4b71      	ldr	r3, [pc, #452]	; (704 <ParserAppData+0x29c>)
     53e:	4798      	blx	r3
				break;
     540:	e799      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
     542:	210d      	movs	r1, #13
     544:	4878      	ldr	r0, [pc, #480]	; (728 <ParserAppData+0x2c0>)
     546:	4b6f      	ldr	r3, [pc, #444]	; (704 <ParserAppData+0x29c>)
     548:	4798      	blx	r3
				break;
     54a:	e794      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
     54c:	2115      	movs	r1, #21
     54e:	4877      	ldr	r0, [pc, #476]	; (72c <ParserAppData+0x2c4>)
     550:	4b6c      	ldr	r3, [pc, #432]	; (704 <ParserAppData+0x29c>)
     552:	4798      	blx	r3
				break;
     554:	e78f      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
     556:	210a      	movs	r1, #10
     558:	4875      	ldr	r0, [pc, #468]	; (730 <ParserAppData+0x2c8>)
     55a:	4b6a      	ldr	r3, [pc, #424]	; (704 <ParserAppData+0x29c>)
     55c:	4798      	blx	r3
				break;
     55e:	e78a      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
     560:	2111      	movs	r1, #17
     562:	4874      	ldr	r0, [pc, #464]	; (734 <ParserAppData+0x2cc>)
     564:	4b67      	ldr	r3, [pc, #412]	; (704 <ParserAppData+0x29c>)
     566:	4798      	blx	r3
				break;
     568:	e785      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
     56a:	210a      	movs	r1, #10
     56c:	4872      	ldr	r0, [pc, #456]	; (738 <ParserAppData+0x2d0>)
     56e:	4b65      	ldr	r3, [pc, #404]	; (704 <ParserAppData+0x29c>)
     570:	4798      	blx	r3
				break;
     572:	e780      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
     574:	2104      	movs	r1, #4
     576:	4871      	ldr	r0, [pc, #452]	; (73c <ParserAppData+0x2d4>)
     578:	4b62      	ldr	r3, [pc, #392]	; (704 <ParserAppData+0x29c>)
     57a:	4798      	blx	r3
				break;
     57c:	e77b      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
     57e:	2107      	movs	r1, #7
     580:	486f      	ldr	r0, [pc, #444]	; (740 <ParserAppData+0x2d8>)
     582:	4b60      	ldr	r3, [pc, #384]	; (704 <ParserAppData+0x29c>)
     584:	4798      	blx	r3
				break;
     586:	e776      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
     588:	2110      	movs	r1, #16
     58a:	486e      	ldr	r0, [pc, #440]	; (744 <ParserAppData+0x2dc>)
     58c:	4b5d      	ldr	r3, [pc, #372]	; (704 <ParserAppData+0x29c>)
     58e:	4798      	blx	r3
				break;
     590:	e771      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
     592:	2114      	movs	r1, #20
     594:	486c      	ldr	r0, [pc, #432]	; (748 <ParserAppData+0x2e0>)
     596:	4b5b      	ldr	r3, [pc, #364]	; (704 <ParserAppData+0x29c>)
     598:	4798      	blx	r3
				break;
     59a:	e76c      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
     59c:	210f      	movs	r1, #15
     59e:	486b      	ldr	r0, [pc, #428]	; (74c <ParserAppData+0x2e4>)
     5a0:	4b58      	ldr	r3, [pc, #352]	; (704 <ParserAppData+0x29c>)
     5a2:	4798      	blx	r3
				break;	
     5a4:	e767      	b.n	476 <ParserAppData+0xe>
           		Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
     5a6:	210e      	movs	r1, #14
     5a8:	4869      	ldr	r0, [pc, #420]	; (750 <ParserAppData+0x2e8>)
     5aa:	4b56      	ldr	r3, [pc, #344]	; (704 <ParserAppData+0x29c>)
     5ac:	4798      	blx	r3
           		break;
     5ae:	e762      	b.n	476 <ParserAppData+0xe>
        switch(data->param.transCmpl.status)
     5b0:	790b      	ldrb	r3, [r1, #4]
     5b2:	2b1e      	cmp	r3, #30
     5b4:	d900      	bls.n	5b8 <ParserAppData+0x150>
     5b6:	e75e      	b.n	476 <ParserAppData+0xe>
     5b8:	009b      	lsls	r3, r3, #2
     5ba:	4a66      	ldr	r2, [pc, #408]	; (754 <ParserAppData+0x2ec>)
     5bc:	58d3      	ldr	r3, [r2, r3]
     5be:	469f      	mov	pc, r3
		        Parser_TxAddReply((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX]));
     5c0:	2109      	movs	r1, #9
     5c2:	4865      	ldr	r0, [pc, #404]	; (758 <ParserAppData+0x2f0>)
     5c4:	4b4f      	ldr	r3, [pc, #316]	; (704 <ParserAppData+0x29c>)
     5c6:	4798      	blx	r3
	        break;
     5c8:	e755      	b.n	476 <ParserAppData+0xe>
		        Parser_TxAddReply((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX]));
     5ca:	210b      	movs	r1, #11
     5cc:	4863      	ldr	r0, [pc, #396]	; (75c <ParserAppData+0x2f4>)
     5ce:	4b4d      	ldr	r3, [pc, #308]	; (704 <ParserAppData+0x29c>)
     5d0:	4798      	blx	r3
	        break;
     5d2:	e750      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX]));
     5d4:	210d      	movs	r1, #13
     5d6:	4862      	ldr	r0, [pc, #392]	; (760 <ParserAppData+0x2f8>)
     5d8:	4b4a      	ldr	r3, [pc, #296]	; (704 <ParserAppData+0x29c>)
     5da:	4798      	blx	r3
			    break;
     5dc:	e74b      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX]));
     5de:	2110      	movs	r1, #16
     5e0:	4860      	ldr	r0, [pc, #384]	; (764 <ParserAppData+0x2fc>)
     5e2:	4b48      	ldr	r3, [pc, #288]	; (704 <ParserAppData+0x29c>)
     5e4:	4798      	blx	r3
				break;
     5e6:	e746      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX]));
     5e8:	210a      	movs	r1, #10
     5ea:	485f      	ldr	r0, [pc, #380]	; (768 <ParserAppData+0x300>)
     5ec:	4b45      	ldr	r3, [pc, #276]	; (704 <ParserAppData+0x29c>)
     5ee:	4798      	blx	r3
				break;				
     5f0:	e741      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX]));
     5f2:	210f      	movs	r1, #15
     5f4:	485d      	ldr	r0, [pc, #372]	; (76c <ParserAppData+0x304>)
     5f6:	4b43      	ldr	r3, [pc, #268]	; (704 <ParserAppData+0x29c>)
     5f8:	4798      	blx	r3
				break;
     5fa:	e73c      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX]));
     5fc:	2111      	movs	r1, #17
     5fe:	485c      	ldr	r0, [pc, #368]	; (770 <ParserAppData+0x308>)
     600:	4b40      	ldr	r3, [pc, #256]	; (704 <ParserAppData+0x29c>)
     602:	4798      	blx	r3
				break;
     604:	e737      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX]));
     606:	210a      	movs	r1, #10
     608:	485a      	ldr	r0, [pc, #360]	; (774 <ParserAppData+0x30c>)
     60a:	4b3e      	ldr	r3, [pc, #248]	; (704 <ParserAppData+0x29c>)
     60c:	4798      	blx	r3
				break;
     60e:	e732      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX]));
     610:	2112      	movs	r1, #18
     612:	4859      	ldr	r0, [pc, #356]	; (778 <ParserAppData+0x310>)
     614:	4b3b      	ldr	r3, [pc, #236]	; (704 <ParserAppData+0x29c>)
     616:	4798      	blx	r3
				break;
     618:	e72d      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX]));
     61a:	2110      	movs	r1, #16
     61c:	4857      	ldr	r0, [pc, #348]	; (77c <ParserAppData+0x314>)
     61e:	4b39      	ldr	r3, [pc, #228]	; (704 <ParserAppData+0x29c>)
     620:	4798      	blx	r3
				break;
     622:	e728      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX]));
     624:	2112      	movs	r1, #18
     626:	4856      	ldr	r0, [pc, #344]	; (780 <ParserAppData+0x318>)
     628:	4b36      	ldr	r3, [pc, #216]	; (704 <ParserAppData+0x29c>)
     62a:	4798      	blx	r3
				break;
     62c:	e723      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
     62e:	2109      	movs	r1, #9
     630:	4836      	ldr	r0, [pc, #216]	; (70c <ParserAppData+0x2a4>)
     632:	4b34      	ldr	r3, [pc, #208]	; (704 <ParserAppData+0x29c>)
     634:	4798      	blx	r3
				break;
     636:	e71e      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
     638:	210d      	movs	r1, #13
     63a:	4835      	ldr	r0, [pc, #212]	; (710 <ParserAppData+0x2a8>)
     63c:	4b31      	ldr	r3, [pc, #196]	; (704 <ParserAppData+0x29c>)
     63e:	4798      	blx	r3
				break;
     640:	e719      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
     642:	210d      	movs	r1, #13
     644:	4833      	ldr	r0, [pc, #204]	; (714 <ParserAppData+0x2ac>)
     646:	4b2f      	ldr	r3, [pc, #188]	; (704 <ParserAppData+0x29c>)
     648:	4798      	blx	r3
				break;
     64a:	e714      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
     64c:	2106      	movs	r1, #6
     64e:	4832      	ldr	r0, [pc, #200]	; (718 <ParserAppData+0x2b0>)
     650:	4b2c      	ldr	r3, [pc, #176]	; (704 <ParserAppData+0x29c>)
     652:	4798      	blx	r3
				break;
     654:	e70f      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
     656:	211e      	movs	r1, #30
     658:	4830      	ldr	r0, [pc, #192]	; (71c <ParserAppData+0x2b4>)
     65a:	4b2a      	ldr	r3, [pc, #168]	; (704 <ParserAppData+0x29c>)
     65c:	4798      	blx	r3
				break;
     65e:	e70a      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
     660:	210d      	movs	r1, #13
     662:	482f      	ldr	r0, [pc, #188]	; (720 <ParserAppData+0x2b8>)
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <ParserAppData+0x29c>)
     666:	4798      	blx	r3
				break;
     668:	e705      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
     66a:	2109      	movs	r1, #9
     66c:	482d      	ldr	r0, [pc, #180]	; (724 <ParserAppData+0x2bc>)
     66e:	4b25      	ldr	r3, [pc, #148]	; (704 <ParserAppData+0x29c>)
     670:	4798      	blx	r3
				break;
     672:	e700      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
     674:	210d      	movs	r1, #13
     676:	482c      	ldr	r0, [pc, #176]	; (728 <ParserAppData+0x2c0>)
     678:	4b22      	ldr	r3, [pc, #136]	; (704 <ParserAppData+0x29c>)
     67a:	4798      	blx	r3
				break;
     67c:	e6fb      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
     67e:	2115      	movs	r1, #21
     680:	482a      	ldr	r0, [pc, #168]	; (72c <ParserAppData+0x2c4>)
     682:	4b20      	ldr	r3, [pc, #128]	; (704 <ParserAppData+0x29c>)
     684:	4798      	blx	r3
				break;
     686:	e6f6      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
     688:	210a      	movs	r1, #10
     68a:	4829      	ldr	r0, [pc, #164]	; (730 <ParserAppData+0x2c8>)
     68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <ParserAppData+0x29c>)
     68e:	4798      	blx	r3
				break;
     690:	e6f1      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
     692:	2111      	movs	r1, #17
     694:	4827      	ldr	r0, [pc, #156]	; (734 <ParserAppData+0x2cc>)
     696:	4b1b      	ldr	r3, [pc, #108]	; (704 <ParserAppData+0x29c>)
     698:	4798      	blx	r3
				break;
     69a:	e6ec      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
     69c:	210a      	movs	r1, #10
     69e:	4826      	ldr	r0, [pc, #152]	; (738 <ParserAppData+0x2d0>)
     6a0:	4b18      	ldr	r3, [pc, #96]	; (704 <ParserAppData+0x29c>)
     6a2:	4798      	blx	r3
				break;
     6a4:	e6e7      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
     6a6:	2104      	movs	r1, #4
     6a8:	4824      	ldr	r0, [pc, #144]	; (73c <ParserAppData+0x2d4>)
     6aa:	4b16      	ldr	r3, [pc, #88]	; (704 <ParserAppData+0x29c>)
     6ac:	4798      	blx	r3
				break;
     6ae:	e6e2      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
     6b0:	2107      	movs	r1, #7
     6b2:	4823      	ldr	r0, [pc, #140]	; (740 <ParserAppData+0x2d8>)
     6b4:	4b13      	ldr	r3, [pc, #76]	; (704 <ParserAppData+0x29c>)
     6b6:	4798      	blx	r3
				break;
     6b8:	e6dd      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
     6ba:	2110      	movs	r1, #16
     6bc:	4821      	ldr	r0, [pc, #132]	; (744 <ParserAppData+0x2dc>)
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <ParserAppData+0x29c>)
     6c0:	4798      	blx	r3
				break;
     6c2:	e6d8      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
     6c4:	2114      	movs	r1, #20
     6c6:	4820      	ldr	r0, [pc, #128]	; (748 <ParserAppData+0x2e0>)
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <ParserAppData+0x29c>)
     6ca:	4798      	blx	r3
				break;
     6cc:	e6d3      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
     6ce:	210f      	movs	r1, #15
     6d0:	481e      	ldr	r0, [pc, #120]	; (74c <ParserAppData+0x2e4>)
     6d2:	4b0c      	ldr	r3, [pc, #48]	; (704 <ParserAppData+0x29c>)
     6d4:	4798      	blx	r3
				break;
     6d6:	e6ce      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
     6d8:	210e      	movs	r1, #14
     6da:	481d      	ldr	r0, [pc, #116]	; (750 <ParserAppData+0x2e8>)
     6dc:	4b09      	ldr	r3, [pc, #36]	; (704 <ParserAppData+0x29c>)
     6de:	4798      	blx	r3
}
     6e0:	e6c9      	b.n	476 <ParserAppData+0xe>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	0001d204 	.word	0x0001d204
     6e8:	20000fac 	.word	0x20000fac
     6ec:	0001d2dc 	.word	0x0001d2dc
     6f0:	00017691 	.word	0x00017691
     6f4:	00017b05 	.word	0x00017b05
     6f8:	00017619 	.word	0x00017619
     6fc:	00000212 	.word	0x00000212
     700:	0000260d 	.word	0x0000260d
     704:	00002415 	.word	0x00002415
     708:	0001d2e4 	.word	0x0001d2e4
     70c:	0001d2f4 	.word	0x0001d2f4
     710:	0001c93c 	.word	0x0001c93c
     714:	0001d300 	.word	0x0001d300
     718:	0001d310 	.word	0x0001d310
     71c:	0001d318 	.word	0x0001d318
     720:	0001d338 	.word	0x0001d338
     724:	0001d348 	.word	0x0001d348
     728:	0001d354 	.word	0x0001d354
     72c:	0001d364 	.word	0x0001d364
     730:	0001d37c 	.word	0x0001d37c
     734:	0001d388 	.word	0x0001d388
     738:	0001d39c 	.word	0x0001d39c
     73c:	0001d3a8 	.word	0x0001d3a8
     740:	0001d3b0 	.word	0x0001d3b0
     744:	0001d3b8 	.word	0x0001d3b8
     748:	0001d3cc 	.word	0x0001d3cc
     74c:	0001d3e4 	.word	0x0001d3e4
     750:	0001d3f4 	.word	0x0001d3f4
     754:	0001d260 	.word	0x0001d260
     758:	0001d404 	.word	0x0001d404
     75c:	0001d410 	.word	0x0001d410
     760:	0001d41c 	.word	0x0001d41c
     764:	0001d42c 	.word	0x0001d42c
     768:	0001d440 	.word	0x0001d440
     76c:	0001d44c 	.word	0x0001d44c
     770:	0001d45c 	.word	0x0001d45c
     774:	0001d470 	.word	0x0001d470
     778:	0001d47c 	.word	0x0001d47c
     77c:	0001d490 	.word	0x0001d490
     780:	0001d4a4 	.word	0x0001d4a4

00000784 <Parser_SetConfiguredJoinParameters>:
    gParserConfiguredJoinParameters.value = val;
     784:	4b01      	ldr	r3, [pc, #4]	; (78c <Parser_SetConfiguredJoinParameters+0x8>)
     786:	8018      	strh	r0, [r3, #0]
}
     788:	4770      	bx	lr
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	20001dc8 	.word	0x20001dc8

00000790 <Parser_LorawanInit>:
{
     790:	b510      	push	{r4, lr}
    LORAWAN_Init(ParserAppData, ParserJoinData);
     792:	4904      	ldr	r1, [pc, #16]	; (7a4 <Parser_LorawanInit+0x14>)
     794:	4804      	ldr	r0, [pc, #16]	; (7a8 <Parser_LorawanInit+0x18>)
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <Parser_LorawanInit+0x1c>)
     798:	4798      	blx	r3
    gParserConfiguredJoinParameters.value = 0x00;
     79a:	2200      	movs	r2, #0
     79c:	4b04      	ldr	r3, [pc, #16]	; (7b0 <Parser_LorawanInit+0x20>)
     79e:	801a      	strh	r2, [r3, #0]
}
     7a0:	bd10      	pop	{r4, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	00000425 	.word	0x00000425
     7a8:	00000469 	.word	0x00000469
     7ac:	0000e08d 	.word	0x0000e08d
     7b0:	20001dc8 	.word	0x20001dc8

000007b4 <Parser_LoraReset>:
{
     7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b6:	46d6      	mov	lr, sl
     7b8:	4647      	mov	r7, r8
     7ba:	b580      	push	{r7, lr}
     7bc:	b085      	sub	sp, #20
     7be:	0007      	movs	r7, r0
     7c0:	4d2f      	ldr	r5, [pc, #188]	; (880 <Parser_LoraReset+0xcc>)
     7c2:	2400      	movs	r4, #0
	    if(0 == stricmp(pParserCmdInfo->pParam1, gapParseIsmBand[iCount]))
     7c4:	4b2f      	ldr	r3, [pc, #188]	; (884 <Parser_LoraReset+0xd0>)
     7c6:	469a      	mov	sl, r3
     7c8:	b2e3      	uxtb	r3, r4
     7ca:	4698      	mov	r8, r3
     7cc:	9401      	str	r4, [sp, #4]
     7ce:	682e      	ldr	r6, [r5, #0]
     7d0:	0031      	movs	r1, r6
     7d2:	6838      	ldr	r0, [r7, #0]
     7d4:	47d0      	blx	sl
     7d6:	2800      	cmp	r0, #0
     7d8:	d00d      	beq.n	7f6 <Parser_LoraReset+0x42>
     7da:	3401      	adds	r4, #1
     7dc:	3504      	adds	r5, #4
    for(iCount = 0; iCount < sizeof(gapParseIsmBand)/sizeof(gapParseIsmBand[0]); iCount++)
     7de:	2c10      	cmp	r4, #16
     7e0:	d1f2      	bne.n	7c8 <Parser_LoraReset+0x14>
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     7e2:	3c06      	subs	r4, #6
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     7e4:	00a4      	lsls	r4, r4, #2
     7e6:	4b28      	ldr	r3, [pc, #160]	; (888 <Parser_LoraReset+0xd4>)
     7e8:	58e3      	ldr	r3, [r4, r3]
     7ea:	617b      	str	r3, [r7, #20]
}
     7ec:	b005      	add	sp, #20
     7ee:	bc0c      	pop	{r2, r3}
     7f0:	4690      	mov	r8, r2
     7f2:	469a      	mov	sl, r3
     7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t supportedBands = 0;
     7f6:	ab02      	add	r3, sp, #8
     7f8:	1d9c      	adds	r4, r3, #6
     7fa:	2300      	movs	r3, #0
     7fc:	8023      	strh	r3, [r4, #0]
			LORAWAN_GetAttr(SUPPORTED_BANDS,NULL,&supportedBands);
     7fe:	0022      	movs	r2, r4
     800:	2100      	movs	r1, #0
     802:	3035      	adds	r0, #53	; 0x35
     804:	4b21      	ldr	r3, [pc, #132]	; (88c <Parser_LoraReset+0xd8>)
     806:	4798      	blx	r3
			if(((1 << iCount) & supportedBands) == 0)
     808:	8823      	ldrh	r3, [r4, #0]
     80a:	9a01      	ldr	r2, [sp, #4]
     80c:	4113      	asrs	r3, r2
     80e:	07db      	lsls	r3, r3, #31
     810:	d405      	bmi.n	81e <Parser_LoraReset+0x6a>
				printf("Band %s not supported\r\n",gapParseIsmBand[iCount]);
     812:	0031      	movs	r1, r6
     814:	481e      	ldr	r0, [pc, #120]	; (890 <Parser_LoraReset+0xdc>)
     816:	4b1f      	ldr	r3, [pc, #124]	; (894 <Parser_LoraReset+0xe0>)
     818:	4798      	blx	r3
				status = LORAWAN_UNSUPPORTED_BAND;
     81a:	2416      	movs	r4, #22
				break;
     81c:	e7e2      	b.n	7e4 <Parser_LoraReset+0x30>
			if(PDS_IsRestorable())
     81e:	4b1e      	ldr	r3, [pc, #120]	; (898 <Parser_LoraReset+0xe4>)
     820:	4798      	blx	r3
     822:	2800      	cmp	r0, #0
     824:	d018      	beq.n	858 <Parser_LoraReset+0xa4>
				uint8_t prevBand = 0xFF;
     826:	ab02      	add	r3, sp, #8
     828:	1d5c      	adds	r4, r3, #5
     82a:	23ff      	movs	r3, #255	; 0xff
     82c:	7023      	strb	r3, [r4, #0]
				PDS_RestoreAll();
     82e:	4b1b      	ldr	r3, [pc, #108]	; (89c <Parser_LoraReset+0xe8>)
     830:	4798      	blx	r3
				LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
     832:	0022      	movs	r2, r4
     834:	2100      	movs	r1, #0
     836:	2024      	movs	r0, #36	; 0x24
     838:	4b14      	ldr	r3, [pc, #80]	; (88c <Parser_LoraReset+0xd8>)
     83a:	4798      	blx	r3
				if(prevBand != iCount)
     83c:	7823      	ldrb	r3, [r4, #0]
     83e:	4543      	cmp	r3, r8
     840:	d013      	beq.n	86a <Parser_LoraReset+0xb6>
					PDS_DeleteAll();
     842:	4b17      	ldr	r3, [pc, #92]	; (8a0 <Parser_LoraReset+0xec>)
     844:	4798      	blx	r3
				status = LORAWAN_Reset(iCount);
     846:	4640      	mov	r0, r8
     848:	4b16      	ldr	r3, [pc, #88]	; (8a4 <Parser_LoraReset+0xf0>)
     84a:	4798      	blx	r3
     84c:	0004      	movs	r4, r0
				if(isSwitchReq == true && status == LORAWAN_SUCCESS)
     84e:	2808      	cmp	r0, #8
     850:	d10f      	bne.n	872 <Parser_LoraReset+0xbe>
					PDS_StoreAll();
     852:	4b15      	ldr	r3, [pc, #84]	; (8a8 <Parser_LoraReset+0xf4>)
     854:	4798      	blx	r3
     856:	e00e      	b.n	876 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
     858:	4640      	mov	r0, r8
     85a:	4b12      	ldr	r3, [pc, #72]	; (8a4 <Parser_LoraReset+0xf0>)
     85c:	4798      	blx	r3
     85e:	0004      	movs	r4, r0
				if(status == LORAWAN_SUCCESS)
     860:	2808      	cmp	r0, #8
     862:	d108      	bne.n	876 <Parser_LoraReset+0xc2>
				    PDS_StoreAll();					
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <Parser_LoraReset+0xf4>)
     866:	4798      	blx	r3
     868:	e005      	b.n	876 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
     86a:	4640      	mov	r0, r8
     86c:	4b0d      	ldr	r3, [pc, #52]	; (8a4 <Parser_LoraReset+0xf0>)
     86e:	4798      	blx	r3
     870:	0004      	movs	r4, r0
					PDS_RestoreAll();
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <Parser_LoraReset+0xe8>)
     874:	4798      	blx	r3
		    gParserConfiguredJoinParameters.value = 0x00;		    
     876:	2200      	movs	r2, #0
     878:	4b0c      	ldr	r3, [pc, #48]	; (8ac <Parser_LoraReset+0xf8>)
     87a:	801a      	strh	r2, [r3, #0]
		    break;
     87c:	e7b2      	b.n	7e4 <Parser_LoraReset+0x30>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	0001d4ec 	.word	0x0001d4ec
     884:	00002785 	.word	0x00002785
     888:	0001d560 	.word	0x0001d560
     88c:	0000f489 	.word	0x0000f489
     890:	0001d4c4 	.word	0x0001d4c4
     894:	000177a9 	.word	0x000177a9
     898:	0000bf35 	.word	0x0000bf35
     89c:	0000bf99 	.word	0x0000bf99
     8a0:	0000bf7d 	.word	0x0000bf7d
     8a4:	000119b5 	.word	0x000119b5
     8a8:	0000c085 	.word	0x0000c085
     8ac:	20001dc8 	.word	0x20001dc8

000008b0 <Parser_LoraJoin>:
{
     8b0:	b510      	push	{r4, lr}
     8b2:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParseJoinMode[OTAA_STR_IDX], gapParseJoinMode[ABP_STR_IDX]);
     8b4:	4a08      	ldr	r2, [pc, #32]	; (8d8 <Parser_LoraJoin+0x28>)
     8b6:	4909      	ldr	r1, [pc, #36]	; (8dc <Parser_LoraJoin+0x2c>)
     8b8:	6800      	ldr	r0, [r0, #0]
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <Parser_LoraJoin+0x30>)
     8bc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     8be:	230a      	movs	r3, #10
    if(validationVal < 2U)
     8c0:	2801      	cmp	r0, #1
     8c2:	d904      	bls.n	8ce <Parser_LoraJoin+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     8c4:	009b      	lsls	r3, r3, #2
     8c6:	4a07      	ldr	r2, [pc, #28]	; (8e4 <Parser_LoraJoin+0x34>)
     8c8:	589b      	ldr	r3, [r3, r2]
     8ca:	6163      	str	r3, [r4, #20]
}
     8cc:	bd10      	pop	{r4, pc}
        status = LORAWAN_Join(validationVal);
     8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <Parser_LoraJoin+0x38>)
     8d0:	4798      	blx	r3
     8d2:	0003      	movs	r3, r0
     8d4:	e7f6      	b.n	8c4 <Parser_LoraJoin+0x14>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	0001d4b8 	.word	0x0001d4b8
     8dc:	0001d4bc 	.word	0x0001d4bc
     8e0:	00002849 	.word	0x00002849
     8e4:	0001d560 	.word	0x0001d560
     8e8:	0000f085 	.word	0x0000f085

000008ec <Parser_LoraSend>:
{    
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	b085      	sub	sp, #20
     8f0:	0007      	movs	r7, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
     8f2:	6880      	ldr	r0, [r0, #8]
     8f4:	4b1d      	ldr	r3, [pc, #116]	; (96c <Parser_LoraSend+0x80>)
     8f6:	4798      	blx	r3
     8f8:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParserSendMode[UNCNF_STR_IDX], gapParserSendMode[CNF_STR_IDX]);
     8fa:	4a1d      	ldr	r2, [pc, #116]	; (970 <Parser_LoraSend+0x84>)
     8fc:	491d      	ldr	r1, [pc, #116]	; (974 <Parser_LoraSend+0x88>)
     8fe:	6838      	ldr	r0, [r7, #0]
     900:	4b1d      	ldr	r3, [pc, #116]	; (978 <Parser_LoraSend+0x8c>)
     902:	4798      	blx	r3
     904:	9001      	str	r0, [sp, #4]
     906:	0006      	movs	r6, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     908:	ab02      	add	r3, sp, #8
     90a:	1dd9      	adds	r1, r3, #7
     90c:	6878      	ldr	r0, [r7, #4]
     90e:	4b1b      	ldr	r3, [pc, #108]	; (97c <Parser_LoraSend+0x90>)
     910:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     912:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     914:	2800      	cmp	r0, #0
     916:	d005      	beq.n	924 <Parser_LoraSend+0x38>
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
     918:	b2a4      	uxth	r4, r4
    uint16_t  dataLen = asciiDataLen >> 1;
     91a:	0865      	lsrs	r5, r4, #1
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     91c:	2dff      	cmp	r5, #255	; 0xff
     91e:	d801      	bhi.n	924 <Parser_LoraSend+0x38>
     920:	2e01      	cmp	r6, #1
     922:	d905      	bls.n	930 <Parser_LoraSend+0x44>
        pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     924:	009b      	lsls	r3, r3, #2
     926:	4a16      	ldr	r2, [pc, #88]	; (980 <Parser_LoraSend+0x94>)
     928:	589b      	ldr	r3, [r3, r2]
     92a:	617b      	str	r3, [r7, #20]
}
     92c:	b005      	add	sp, #20
     92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
     930:	68b8      	ldr	r0, [r7, #8]
     932:	4b14      	ldr	r3, [pc, #80]	; (984 <Parser_LoraSend+0x98>)
     934:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     936:	230a      	movs	r3, #10
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
     938:	2800      	cmp	r0, #0
     93a:	d0f3      	beq.n	924 <Parser_LoraSend+0x38>
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam3, (uint8_t *)aParserData);
     93c:	4a12      	ldr	r2, [pc, #72]	; (988 <Parser_LoraSend+0x9c>)
     93e:	68b9      	ldr	r1, [r7, #8]
     940:	0020      	movs	r0, r4
     942:	4b12      	ldr	r3, [pc, #72]	; (98c <Parser_LoraSend+0xa0>)
     944:	4798      	blx	r3
        if(asciiDataLen % 2 == 1)
     946:	07e3      	lsls	r3, r4, #31
     948:	d500      	bpl.n	94c <Parser_LoraSend+0x60>
            dataLen += 1;
     94a:	3501      	adds	r5, #1
        parser_data.confirmed = validationVal;
     94c:	4810      	ldr	r0, [pc, #64]	; (990 <Parser_LoraSend+0xa4>)
     94e:	466b      	mov	r3, sp
     950:	791b      	ldrb	r3, [r3, #4]
     952:	7003      	strb	r3, [r0, #0]
        parser_data.port = portValue;
     954:	ab02      	add	r3, sp, #8
     956:	3307      	adds	r3, #7
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	7043      	strb	r3, [r0, #1]
        parser_data.buffer = aParserData;
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <Parser_LoraSend+0x9c>)
     95e:	6043      	str	r3, [r0, #4]
        parser_data.bufferLength = (uint8_t)dataLen;
     960:	7205      	strb	r5, [r0, #8]
        status = LORAWAN_Send(&parser_data);
     962:	4b0c      	ldr	r3, [pc, #48]	; (994 <Parser_LoraSend+0xa8>)
     964:	4798      	blx	r3
     966:	0003      	movs	r3, r0
     968:	e7dc      	b.n	924 <Parser_LoraSend+0x38>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00017b05 	.word	0x00017b05
     970:	0001d4e0 	.word	0x0001d4e0
     974:	0001d4e4 	.word	0x0001d4e4
     978:	00002849 	.word	0x00002849
     97c:	0000266d 	.word	0x0000266d
     980:	0001d560 	.word	0x0001d560
     984:	000025d9 	.word	0x000025d9
     988:	20000fac 	.word	0x20000fac
     98c:	000028e1 	.word	0x000028e1
     990:	20001dcc 	.word	0x20001dcc
     994:	0000e265 	.word	0x0000e265

00000998 <Parser_LoraSetCrtDataRate>:
{
     998:	b510      	push	{r4, lr}
     99a:	b082      	sub	sp, #8
     99c:	0004      	movs	r4, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
     99e:	466b      	mov	r3, sp
     9a0:	1dd9      	adds	r1, r3, #7
     9a2:	6800      	ldr	r0, [r0, #0]
     9a4:	4b08      	ldr	r3, [pc, #32]	; (9c8 <Parser_LoraSetCrtDataRate+0x30>)
     9a6:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     9a8:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
     9aa:	2800      	cmp	r0, #0
     9ac:	d105      	bne.n	9ba <Parser_LoraSetCrtDataRate+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     9ae:	009b      	lsls	r3, r3, #2
     9b0:	4a06      	ldr	r2, [pc, #24]	; (9cc <Parser_LoraSetCrtDataRate+0x34>)
     9b2:	589b      	ldr	r3, [r3, r2]
     9b4:	6163      	str	r3, [r4, #20]
}
     9b6:	b002      	add	sp, #8
     9b8:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CURRENT_DATARATE,&datarate);
     9ba:	466b      	mov	r3, sp
     9bc:	1dd9      	adds	r1, r3, #7
     9be:	2007      	movs	r0, #7
     9c0:	4b03      	ldr	r3, [pc, #12]	; (9d0 <Parser_LoraSetCrtDataRate+0x38>)
     9c2:	4798      	blx	r3
     9c4:	0003      	movs	r3, r0
     9c6:	e7f2      	b.n	9ae <Parser_LoraSetCrtDataRate+0x16>
     9c8:	0000266d 	.word	0x0000266d
     9cc:	0001d560 	.word	0x0001d560
     9d0:	00011439 	.word	0x00011439

000009d4 <Parser_LoraGetCrtDataRate>:
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	b082      	sub	sp, #8
     9d8:	0006      	movs	r6, r0
	LORAWAN_GetAttr(CURRENT_DATARATE,NULL,&crtDatarate);
     9da:	466b      	mov	r3, sp
     9dc:	1ddd      	adds	r5, r3, #7
     9de:	002a      	movs	r2, r5
     9e0:	2100      	movs	r1, #0
     9e2:	2007      	movs	r0, #7
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <Parser_LoraGetCrtDataRate+0x28>)
     9e6:	4798      	blx	r3
 	itoa(crtDatarate, aParserData, 10U);
     9e8:	4c05      	ldr	r4, [pc, #20]	; (a00 <Parser_LoraGetCrtDataRate+0x2c>)
     9ea:	7828      	ldrb	r0, [r5, #0]
     9ec:	220a      	movs	r2, #10
     9ee:	0021      	movs	r1, r4
     9f0:	4b04      	ldr	r3, [pc, #16]	; (a04 <Parser_LoraGetCrtDataRate+0x30>)
     9f2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     9f4:	6174      	str	r4, [r6, #20]
}
     9f6:	b002      	add	sp, #8
     9f8:	bd70      	pop	{r4, r5, r6, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	0000f489 	.word	0x0000f489
     a00:	20000fac 	.word	0x20000fac
     a04:	00017619 	.word	0x00017619

00000a08 <Parser_LoraSetAdr>:
{
     a08:	b510      	push	{r4, lr}
     a0a:	b082      	sub	sp, #8
     a0c:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
     a0e:	6800      	ldr	r0, [r0, #0]
     a10:	4b09      	ldr	r3, [pc, #36]	; (a38 <Parser_LoraSetAdr+0x30>)
     a12:	4798      	blx	r3
     a14:	466b      	mov	r3, sp
     a16:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     a18:	230a      	movs	r3, #10
    if(validationVal < 2U)
     a1a:	2801      	cmp	r0, #1
     a1c:	d905      	bls.n	a2a <Parser_LoraSetAdr+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     a1e:	009b      	lsls	r3, r3, #2
     a20:	4a06      	ldr	r2, [pc, #24]	; (a3c <Parser_LoraSetAdr+0x34>)
     a22:	589b      	ldr	r3, [r3, r2]
     a24:	6163      	str	r3, [r4, #20]
}
     a26:	b002      	add	sp, #8
     a28:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(ADR,&validationVal);
     a2a:	466b      	mov	r3, sp
     a2c:	1dd9      	adds	r1, r3, #7
     a2e:	2006      	movs	r0, #6
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <Parser_LoraSetAdr+0x38>)
     a32:	4798      	blx	r3
     a34:	0003      	movs	r3, r0
     a36:	e7f2      	b.n	a1e <Parser_LoraSetAdr+0x16>
     a38:	00002815 	.word	0x00002815
     a3c:	0001d560 	.word	0x0001d560
     a40:	00011439 	.word	0x00011439

00000a44 <Parser_LoraGetAdr>:
{
     a44:	b530      	push	{r4, r5, lr}
     a46:	b083      	sub	sp, #12
     a48:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ADR,NULL,&adrEnabled);
     a4a:	466b      	mov	r3, sp
     a4c:	1ddc      	adds	r4, r3, #7
     a4e:	0022      	movs	r2, r4
     a50:	2100      	movs	r1, #0
     a52:	2006      	movs	r0, #6
     a54:	4b04      	ldr	r3, [pc, #16]	; (a68 <Parser_LoraGetAdr+0x24>)
     a56:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[adrEnabled];
     a58:	7823      	ldrb	r3, [r4, #0]
     a5a:	009b      	lsls	r3, r3, #2
     a5c:	4a03      	ldr	r2, [pc, #12]	; (a6c <Parser_LoraGetAdr+0x28>)
     a5e:	589b      	ldr	r3, [r3, r2]
     a60:	616b      	str	r3, [r5, #20]
}
     a62:	b003      	add	sp, #12
     a64:	bd30      	pop	{r4, r5, pc}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	0000f489 	.word	0x0000f489
     a6c:	0001d540 	.word	0x0001d540

00000a70 <Parser_LoraSetDevAddr>:
{
     a70:	b510      	push	{r4, lr}
     a72:	b082      	sub	sp, #8
     a74:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     a76:	6800      	ldr	r0, [r0, #0]
     a78:	4b14      	ldr	r3, [pc, #80]	; (acc <Parser_LoraSetDevAddr+0x5c>)
     a7a:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     a7c:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     a7e:	2800      	cmp	r0, #0
     a80:	d105      	bne.n	a8e <Parser_LoraSetDevAddr+0x1e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     a82:	009b      	lsls	r3, r3, #2
     a84:	4a12      	ldr	r2, [pc, #72]	; (ad0 <Parser_LoraSetDevAddr+0x60>)
     a86:	589b      	ldr	r3, [r3, r2]
     a88:	6163      	str	r3, [r4, #20]
}
     a8a:	b002      	add	sp, #8
     a8c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
     a8e:	aa01      	add	r2, sp, #4
     a90:	6821      	ldr	r1, [r4, #0]
     a92:	2008      	movs	r0, #8
     a94:	4b0f      	ldr	r3, [pc, #60]	; (ad4 <Parser_LoraSetDevAddr+0x64>)
     a96:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     a98:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
     a9a:	2800      	cmp	r0, #0
     a9c:	d0f1      	beq.n	a82 <Parser_LoraSetDevAddr+0x12>
            devAddr += ((uint32_t)tempBuff[2]) << 8;
     a9e:	aa01      	add	r2, sp, #4
     aa0:	7893      	ldrb	r3, [r2, #2]
     aa2:	021b      	lsls	r3, r3, #8
            devAddr += ((uint32_t)tempBuff[1]) << 16;
     aa4:	7851      	ldrb	r1, [r2, #1]
     aa6:	0409      	lsls	r1, r1, #16
     aa8:	185b      	adds	r3, r3, r1
            devAddr = (uint32_t)tempBuff[3];
     aaa:	78d1      	ldrb	r1, [r2, #3]
            devAddr += ((uint32_t)tempBuff[1]) << 16;
     aac:	185b      	adds	r3, r3, r1
            devAddr += ((uint32_t)tempBuff[0]) << 24;
     aae:	7812      	ldrb	r2, [r2, #0]
     ab0:	0612      	lsls	r2, r2, #24
     ab2:	189b      	adds	r3, r3, r2
     ab4:	9300      	str	r3, [sp, #0]
            statusIdx = LORAWAN_SetAttr (DEV_ADDR,&devAddr);
     ab6:	4669      	mov	r1, sp
     ab8:	2002      	movs	r0, #2
     aba:	4b07      	ldr	r3, [pc, #28]	; (ad8 <Parser_LoraSetDevAddr+0x68>)
     abc:	4798      	blx	r3
     abe:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.devaddr = 1;
     ac0:	4906      	ldr	r1, [pc, #24]	; (adc <Parser_LoraSetDevAddr+0x6c>)
     ac2:	780a      	ldrb	r2, [r1, #0]
     ac4:	2008      	movs	r0, #8
     ac6:	4302      	orrs	r2, r0
     ac8:	700a      	strb	r2, [r1, #0]
     aca:	e7da      	b.n	a82 <Parser_LoraSetDevAddr+0x12>
     acc:	000025d9 	.word	0x000025d9
     ad0:	0001d560 	.word	0x0001d560
     ad4:	000028e1 	.word	0x000028e1
     ad8:	00011439 	.word	0x00011439
     adc:	20001dc8 	.word	0x20001dc8

00000ae0 <Parser_LoraGetDevAddr>:
{
     ae0:	b530      	push	{r4, r5, lr}
     ae2:	b083      	sub	sp, #12
     ae4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddr);
     ae6:	aa01      	add	r2, sp, #4
     ae8:	2100      	movs	r1, #0
     aea:	2002      	movs	r0, #2
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <Parser_LoraGetDevAddr+0x34>)
     aee:	4798      	blx	r3
    tempBuff[3] = (uint8_t)devAddr;
     af0:	9b01      	ldr	r3, [sp, #4]
     af2:	466a      	mov	r2, sp
     af4:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(devAddr >> 8);
     af6:	0a1a      	lsrs	r2, r3, #8
     af8:	4669      	mov	r1, sp
     afa:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(devAddr >> 16);
     afc:	0c1a      	lsrs	r2, r3, #16
     afe:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(devAddr >> 24);
     b00:	0e1b      	lsrs	r3, r3, #24
     b02:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
     b04:	4c04      	ldr	r4, [pc, #16]	; (b18 <Parser_LoraGetDevAddr+0x38>)
     b06:	0022      	movs	r2, r4
     b08:	2004      	movs	r0, #4
     b0a:	4b04      	ldr	r3, [pc, #16]	; (b1c <Parser_LoraGetDevAddr+0x3c>)
     b0c:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
     b0e:	616c      	str	r4, [r5, #20]
}
     b10:	b003      	add	sp, #12
     b12:	bd30      	pop	{r4, r5, pc}
     b14:	0000f489 	.word	0x0000f489
     b18:	20000fac 	.word	0x20000fac
     b1c:	0000260d 	.word	0x0000260d

00000b20 <Parser_LoraSetDevEui>:
{
     b20:	b510      	push	{r4, lr}
     b22:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     b24:	6800      	ldr	r0, [r0, #0]
     b26:	4b0e      	ldr	r3, [pc, #56]	; (b60 <Parser_LoraSetDevEui+0x40>)
     b28:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     b2a:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     b2c:	2800      	cmp	r0, #0
     b2e:	d104      	bne.n	b3a <Parser_LoraSetDevEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     b30:	009b      	lsls	r3, r3, #2
     b32:	4a0c      	ldr	r2, [pc, #48]	; (b64 <Parser_LoraSetDevEui+0x44>)
     b34:	589b      	ldr	r3, [r3, r2]
     b36:	6163      	str	r3, [r4, #20]
}
     b38:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     b3a:	4a0b      	ldr	r2, [pc, #44]	; (b68 <Parser_LoraSetDevEui+0x48>)
     b3c:	6821      	ldr	r1, [r4, #0]
     b3e:	2010      	movs	r0, #16
     b40:	4b0a      	ldr	r3, [pc, #40]	; (b6c <Parser_LoraSetDevEui+0x4c>)
     b42:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     b44:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     b46:	2800      	cmp	r0, #0
     b48:	d0f2      	beq.n	b30 <Parser_LoraSetDevEui+0x10>
            statusIdx = LORAWAN_SetAttr (DEV_EUI,aParserData);
     b4a:	4907      	ldr	r1, [pc, #28]	; (b68 <Parser_LoraSetDevEui+0x48>)
     b4c:	2000      	movs	r0, #0
     b4e:	4b08      	ldr	r3, [pc, #32]	; (b70 <Parser_LoraSetDevEui+0x50>)
     b50:	4798      	blx	r3
     b52:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.deveui = 1;
     b54:	4907      	ldr	r1, [pc, #28]	; (b74 <Parser_LoraSetDevEui+0x54>)
     b56:	780a      	ldrb	r2, [r1, #0]
     b58:	2001      	movs	r0, #1
     b5a:	4302      	orrs	r2, r0
     b5c:	700a      	strb	r2, [r1, #0]
     b5e:	e7e7      	b.n	b30 <Parser_LoraSetDevEui+0x10>
     b60:	000025d9 	.word	0x000025d9
     b64:	0001d560 	.word	0x0001d560
     b68:	20000fac 	.word	0x20000fac
     b6c:	000028e1 	.word	0x000028e1
     b70:	00011439 	.word	0x00011439
     b74:	20001dc8 	.word	0x20001dc8

00000b78 <Parser_LoraGetDevEui>:
{
     b78:	b530      	push	{r4, r5, lr}
     b7a:	b083      	sub	sp, #12
     b7c:	0005      	movs	r5, r0
    LORAWAN_GetAttr (DEV_EUI, NULL, aDevEui);
     b7e:	466a      	mov	r2, sp
     b80:	2100      	movs	r1, #0
     b82:	2000      	movs	r0, #0
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <Parser_LoraGetDevEui+0x24>)
     b86:	4798      	blx	r3
	Parser_IntArrayToHexAscii(DEV_EUI_LEN, aDevEui, aParserData);
     b88:	4c05      	ldr	r4, [pc, #20]	; (ba0 <Parser_LoraGetDevEui+0x28>)
     b8a:	0022      	movs	r2, r4
     b8c:	4669      	mov	r1, sp
     b8e:	2008      	movs	r0, #8
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <Parser_LoraGetDevEui+0x2c>)
     b92:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     b94:	616c      	str	r4, [r5, #20]
}
     b96:	b003      	add	sp, #12
     b98:	bd30      	pop	{r4, r5, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	0000f489 	.word	0x0000f489
     ba0:	20000fac 	.word	0x20000fac
     ba4:	0000260d 	.word	0x0000260d

00000ba8 <Parser_LoraSetJoinEui>:
{
     ba8:	b510      	push	{r4, lr}
     baa:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     bac:	6800      	ldr	r0, [r0, #0]
     bae:	4b0e      	ldr	r3, [pc, #56]	; (be8 <Parser_LoraSetJoinEui+0x40>)
     bb0:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     bb2:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     bb4:	2800      	cmp	r0, #0
     bb6:	d104      	bne.n	bc2 <Parser_LoraSetJoinEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     bb8:	009b      	lsls	r3, r3, #2
     bba:	4a0c      	ldr	r2, [pc, #48]	; (bec <Parser_LoraSetJoinEui+0x44>)
     bbc:	589b      	ldr	r3, [r3, r2]
     bbe:	6163      	str	r3, [r4, #20]
}
     bc0:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     bc2:	4a0b      	ldr	r2, [pc, #44]	; (bf0 <Parser_LoraSetJoinEui+0x48>)
     bc4:	6821      	ldr	r1, [r4, #0]
     bc6:	2010      	movs	r0, #16
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <Parser_LoraSetJoinEui+0x4c>)
     bca:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     bcc:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     bce:	2800      	cmp	r0, #0
     bd0:	d0f2      	beq.n	bb8 <Parser_LoraSetJoinEui+0x10>
            statusIdx = LORAWAN_SetAttr(JOIN_EUI,aParserData);
     bd2:	4907      	ldr	r1, [pc, #28]	; (bf0 <Parser_LoraSetJoinEui+0x48>)
     bd4:	2001      	movs	r0, #1
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <Parser_LoraSetJoinEui+0x50>)
     bd8:	4798      	blx	r3
     bda:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.joineui = 1;          
     bdc:	4907      	ldr	r1, [pc, #28]	; (bfc <Parser_LoraSetJoinEui+0x54>)
     bde:	780a      	ldrb	r2, [r1, #0]
     be0:	2002      	movs	r0, #2
     be2:	4302      	orrs	r2, r0
     be4:	700a      	strb	r2, [r1, #0]
     be6:	e7e7      	b.n	bb8 <Parser_LoraSetJoinEui+0x10>
     be8:	000025d9 	.word	0x000025d9
     bec:	0001d560 	.word	0x0001d560
     bf0:	20000fac 	.word	0x20000fac
     bf4:	000028e1 	.word	0x000028e1
     bf8:	00011439 	.word	0x00011439
     bfc:	20001dc8 	.word	0x20001dc8

00000c00 <Parser_LoraGetJoinEui>:
{
     c00:	b530      	push	{r4, r5, lr}
     c02:	b083      	sub	sp, #12
     c04:	0005      	movs	r5, r0
    LORAWAN_GetAttr(JOIN_EUI, NULL, aJoinEui);
     c06:	466a      	mov	r2, sp
     c08:	2100      	movs	r1, #0
     c0a:	2001      	movs	r0, #1
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <Parser_LoraGetJoinEui+0x24>)
     c0e:	4798      	blx	r3
	Parser_IntArrayToHexAscii(JOIN_EUI_LEN, aJoinEui, aParserData);
     c10:	4c05      	ldr	r4, [pc, #20]	; (c28 <Parser_LoraGetJoinEui+0x28>)
     c12:	0022      	movs	r2, r4
     c14:	4669      	mov	r1, sp
     c16:	2008      	movs	r0, #8
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <Parser_LoraGetJoinEui+0x2c>)
     c1a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     c1c:	616c      	str	r4, [r5, #20]
}
     c1e:	b003      	add	sp, #12
     c20:	bd30      	pop	{r4, r5, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	0000f489 	.word	0x0000f489
     c28:	20000fac 	.word	0x20000fac
     c2c:	0000260d 	.word	0x0000260d

00000c30 <Parser_LoraSetNwkSKey>:
{
     c30:	b510      	push	{r4, lr}
     c32:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c34:	6800      	ldr	r0, [r0, #0]
     c36:	4b0e      	ldr	r3, [pc, #56]	; (c70 <Parser_LoraSetNwkSKey+0x40>)
     c38:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c3a:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c3c:	2800      	cmp	r0, #0
     c3e:	d104      	bne.n	c4a <Parser_LoraSetNwkSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     c40:	009b      	lsls	r3, r3, #2
     c42:	4a0c      	ldr	r2, [pc, #48]	; (c74 <Parser_LoraSetNwkSKey+0x44>)
     c44:	589b      	ldr	r3, [r3, r2]
     c46:	6163      	str	r3, [r4, #20]
}
     c48:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     c4a:	4a0b      	ldr	r2, [pc, #44]	; (c78 <Parser_LoraSetNwkSKey+0x48>)
     c4c:	6821      	ldr	r1, [r4, #0]
     c4e:	2020      	movs	r0, #32
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <Parser_LoraSetNwkSKey+0x4c>)
     c52:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c54:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     c56:	2800      	cmp	r0, #0
     c58:	d0f2      	beq.n	c40 <Parser_LoraSetNwkSKey+0x10>
            statusIdx = LORAWAN_SetAttr(NWKS_KEY,aParserData);
     c5a:	4907      	ldr	r1, [pc, #28]	; (c78 <Parser_LoraSetNwkSKey+0x48>)
     c5c:	2004      	movs	r0, #4
     c5e:	4b08      	ldr	r3, [pc, #32]	; (c80 <Parser_LoraSetNwkSKey+0x50>)
     c60:	4798      	blx	r3
     c62:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.nwkskey = 1;
     c64:	4907      	ldr	r1, [pc, #28]	; (c84 <Parser_LoraSetNwkSKey+0x54>)
     c66:	780a      	ldrb	r2, [r1, #0]
     c68:	2010      	movs	r0, #16
     c6a:	4302      	orrs	r2, r0
     c6c:	700a      	strb	r2, [r1, #0]
     c6e:	e7e7      	b.n	c40 <Parser_LoraSetNwkSKey+0x10>
     c70:	000025d9 	.word	0x000025d9
     c74:	0001d560 	.word	0x0001d560
     c78:	20000fac 	.word	0x20000fac
     c7c:	000028e1 	.word	0x000028e1
     c80:	00011439 	.word	0x00011439
     c84:	20001dc8 	.word	0x20001dc8

00000c88 <Parser_LoraSetAppSKey>:
{
     c88:	b510      	push	{r4, lr}
     c8a:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c8c:	6800      	ldr	r0, [r0, #0]
     c8e:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <Parser_LoraSetAppSKey+0x40>)
     c90:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c92:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c94:	2800      	cmp	r0, #0
     c96:	d104      	bne.n	ca2 <Parser_LoraSetAppSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     c98:	009b      	lsls	r3, r3, #2
     c9a:	4a0c      	ldr	r2, [pc, #48]	; (ccc <Parser_LoraSetAppSKey+0x44>)
     c9c:	589b      	ldr	r3, [r3, r2]
     c9e:	6163      	str	r3, [r4, #20]
}
     ca0:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     ca2:	4a0b      	ldr	r2, [pc, #44]	; (cd0 <Parser_LoraSetAppSKey+0x48>)
     ca4:	6821      	ldr	r1, [r4, #0]
     ca6:	2020      	movs	r0, #32
     ca8:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <Parser_LoraSetAppSKey+0x4c>)
     caa:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     cac:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     cae:	2800      	cmp	r0, #0
     cb0:	d0f2      	beq.n	c98 <Parser_LoraSetAppSKey+0x10>
            statusIdx = LORAWAN_SetAttr(APPS_KEY, aParserData);
     cb2:	4907      	ldr	r1, [pc, #28]	; (cd0 <Parser_LoraSetAppSKey+0x48>)
     cb4:	2005      	movs	r0, #5
     cb6:	4b08      	ldr	r3, [pc, #32]	; (cd8 <Parser_LoraSetAppSKey+0x50>)
     cb8:	4798      	blx	r3
     cba:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appskey = 1;
     cbc:	4907      	ldr	r1, [pc, #28]	; (cdc <Parser_LoraSetAppSKey+0x54>)
     cbe:	780a      	ldrb	r2, [r1, #0]
     cc0:	2020      	movs	r0, #32
     cc2:	4302      	orrs	r2, r0
     cc4:	700a      	strb	r2, [r1, #0]
     cc6:	e7e7      	b.n	c98 <Parser_LoraSetAppSKey+0x10>
     cc8:	000025d9 	.word	0x000025d9
     ccc:	0001d560 	.word	0x0001d560
     cd0:	20000fac 	.word	0x20000fac
     cd4:	000028e1 	.word	0x000028e1
     cd8:	00011439 	.word	0x00011439
     cdc:	20001dc8 	.word	0x20001dc8

00000ce0 <Parser_LoraSetAppKey>:
{
     ce0:	b510      	push	{r4, lr}
     ce2:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     ce4:	6800      	ldr	r0, [r0, #0]
     ce6:	4b0e      	ldr	r3, [pc, #56]	; (d20 <Parser_LoraSetAppKey+0x40>)
     ce8:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     cea:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     cec:	2800      	cmp	r0, #0
     cee:	d104      	bne.n	cfa <Parser_LoraSetAppKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     cf0:	009b      	lsls	r3, r3, #2
     cf2:	4a0c      	ldr	r2, [pc, #48]	; (d24 <Parser_LoraSetAppKey+0x44>)
     cf4:	589b      	ldr	r3, [r3, r2]
     cf6:	6163      	str	r3, [r4, #20]
}
     cf8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     cfa:	4a0b      	ldr	r2, [pc, #44]	; (d28 <Parser_LoraSetAppKey+0x48>)
     cfc:	6821      	ldr	r1, [r4, #0]
     cfe:	2020      	movs	r0, #32
     d00:	4b0a      	ldr	r3, [pc, #40]	; (d2c <Parser_LoraSetAppKey+0x4c>)
     d02:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     d04:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     d06:	2800      	cmp	r0, #0
     d08:	d0f2      	beq.n	cf0 <Parser_LoraSetAppKey+0x10>
             statusIdx = LORAWAN_SetAttr(APP_KEY,aParserData);
     d0a:	4907      	ldr	r1, [pc, #28]	; (d28 <Parser_LoraSetAppKey+0x48>)
     d0c:	2003      	movs	r0, #3
     d0e:	4b08      	ldr	r3, [pc, #32]	; (d30 <Parser_LoraSetAppKey+0x50>)
     d10:	4798      	blx	r3
     d12:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appkey = 1;
     d14:	4907      	ldr	r1, [pc, #28]	; (d34 <Parser_LoraSetAppKey+0x54>)
     d16:	780a      	ldrb	r2, [r1, #0]
     d18:	2004      	movs	r0, #4
     d1a:	4302      	orrs	r2, r0
     d1c:	700a      	strb	r2, [r1, #0]
     d1e:	e7e7      	b.n	cf0 <Parser_LoraSetAppKey+0x10>
     d20:	000025d9 	.word	0x000025d9
     d24:	0001d560 	.word	0x0001d560
     d28:	20000fac 	.word	0x20000fac
     d2c:	000028e1 	.word	0x000028e1
     d30:	00011439 	.word	0x00011439
     d34:	20001dc8 	.word	0x20001dc8

00000d38 <Parser_LoraSetChannelFreq>:
{
     d38:	b530      	push	{r4, r5, lr}
     d3a:	b085      	sub	sp, #20
     d3c:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
     d3e:	220a      	movs	r2, #10
     d40:	2100      	movs	r1, #0
     d42:	6840      	ldr	r0, [r0, #4]
     d44:	4b14      	ldr	r3, [pc, #80]	; (d98 <Parser_LoraSetChannelFreq+0x60>)
     d46:	4798      	blx	r3
     d48:	0005      	movs	r5, r0
    ChannelParameters_t ch_params = {0};
     d4a:	2208      	movs	r2, #8
     d4c:	2100      	movs	r1, #0
     d4e:	a801      	add	r0, sp, #4
     d50:	4b12      	ldr	r3, [pc, #72]	; (d9c <Parser_LoraSetChannelFreq+0x64>)
     d52:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d54:	210f      	movs	r1, #15
     d56:	4469      	add	r1, sp
     d58:	6820      	ldr	r0, [r4, #0]
     d5a:	4b11      	ldr	r3, [pc, #68]	; (da0 <Parser_LoraSetChannelFreq+0x68>)
     d5c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     d5e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d60:	2800      	cmp	r0, #0
     d62:	d105      	bne.n	d70 <Parser_LoraSetChannelFreq+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     d64:	009b      	lsls	r3, r3, #2
     d66:	4a0f      	ldr	r2, [pc, #60]	; (da4 <Parser_LoraSetChannelFreq+0x6c>)
     d68:	589b      	ldr	r3, [r3, r2]
     d6a:	6163      	str	r3, [r4, #20]
}
     d6c:	b005      	add	sp, #20
     d6e:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
     d70:	2201      	movs	r2, #1
     d72:	4252      	negs	r2, r2
     d74:	210a      	movs	r1, #10
     d76:	6860      	ldr	r0, [r4, #4]
     d78:	4b0b      	ldr	r3, [pc, #44]	; (da8 <Parser_LoraSetChannelFreq+0x70>)
     d7a:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     d7c:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d7e:	2800      	cmp	r0, #0
     d80:	d0f0      	beq.n	d64 <Parser_LoraSetChannelFreq+0x2c>
        ch_params.channelId = channelId;
     d82:	a901      	add	r1, sp, #4
     d84:	3305      	adds	r3, #5
     d86:	446b      	add	r3, sp
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.frequency = (uint32_t)freq;
     d8c:	604d      	str	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_FREQUENCY,&ch_params);
     d8e:	201b      	movs	r0, #27
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <Parser_LoraSetChannelFreq+0x74>)
     d92:	4798      	blx	r3
     d94:	0003      	movs	r3, r0
     d96:	e7e5      	b.n	d64 <Parser_LoraSetChannelFreq+0x2c>
     d98:	00017e11 	.word	0x00017e11
     d9c:	00017715 	.word	0x00017715
     da0:	0000266d 	.word	0x0000266d
     da4:	0001d560 	.word	0x0001d560
     da8:	00002741 	.word	0x00002741
     dac:	00011439 	.word	0x00011439

00000db0 <Parser_LoraGetChannelFreq>:
{
     db0:	b530      	push	{r4, r5, lr}
     db2:	b083      	sub	sp, #12
     db4:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     db6:	4b0d      	ldr	r3, [pc, #52]	; (dec <Parser_LoraGetChannelFreq+0x3c>)
     db8:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
     dba:	466b      	mov	r3, sp
     dbc:	1cd9      	adds	r1, r3, #3
     dbe:	6800      	ldr	r0, [r0, #0]
     dc0:	4b0b      	ldr	r3, [pc, #44]	; (df0 <Parser_LoraGetChannelFreq+0x40>)
     dc2:	4798      	blx	r3
     dc4:	2800      	cmp	r0, #0
     dc6:	d101      	bne.n	dcc <Parser_LoraGetChannelFreq+0x1c>
}
     dc8:	b003      	add	sp, #12
     dca:	bd30      	pop	{r4, r5, pc}
        status = LORAWAN_GetAttr(CH_PARAM_FREQUENCY,&channelId,&freq);
     dcc:	aa01      	add	r2, sp, #4
     dce:	466b      	mov	r3, sp
     dd0:	1cd9      	adds	r1, r3, #3
     dd2:	201b      	movs	r0, #27
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <Parser_LoraGetChannelFreq+0x44>)
     dd6:	4798      	blx	r3
		if(status == LORAWAN_SUCCESS)
     dd8:	2808      	cmp	r0, #8
     dda:	d1f5      	bne.n	dc8 <Parser_LoraGetChannelFreq+0x18>
			ultoa(aParserData, freq, 10U);
     ddc:	4d06      	ldr	r5, [pc, #24]	; (df8 <Parser_LoraGetChannelFreq+0x48>)
     dde:	220a      	movs	r2, #10
     de0:	9901      	ldr	r1, [sp, #4]
     de2:	0028      	movs	r0, r5
     de4:	4b05      	ldr	r3, [pc, #20]	; (dfc <Parser_LoraGetChannelFreq+0x4c>)
     de6:	4798      	blx	r3
			pParserCmdInfo->pReplyCmd = aParserData;	
     de8:	6165      	str	r5, [r4, #20]
}
     dea:	e7ed      	b.n	dc8 <Parser_LoraGetChannelFreq+0x18>
     dec:	0001c93c 	.word	0x0001c93c
     df0:	0000266d 	.word	0x0000266d
     df4:	0000f489 	.word	0x0000f489
     df8:	20000fac 	.word	0x20000fac
     dfc:	000026c5 	.word	0x000026c5

00000e00 <Parser_LoraSetSubBandStatus>:
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	46ce      	mov	lr, r9
     e04:	b500      	push	{lr}
     e06:	b086      	sub	sp, #24
     e08:	0006      	movs	r6, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
     e0a:	6840      	ldr	r0, [r0, #4]
     e0c:	4b23      	ldr	r3, [pc, #140]	; (e9c <Parser_LoraSetSubBandStatus+0x9c>)
     e0e:	4798      	blx	r3
     e10:	9001      	str	r0, [sp, #4]
     e12:	0005      	movs	r5, r0
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     e14:	210f      	movs	r1, #15
     e16:	ab02      	add	r3, sp, #8
     e18:	469c      	mov	ip, r3
     e1a:	4461      	add	r1, ip
     e1c:	6830      	ldr	r0, [r6, #0]
     e1e:	4b20      	ldr	r3, [pc, #128]	; (ea0 <Parser_LoraSetSubBandStatus+0xa0>)
     e20:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     e22:	230a      	movs	r3, #10
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     e24:	2800      	cmp	r0, #0
     e26:	d001      	beq.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
     e28:	2d01      	cmp	r5, #1
     e2a:	d907      	bls.n	e3c <Parser_LoraSetSubBandStatus+0x3c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     e2c:	009b      	lsls	r3, r3, #2
     e2e:	4a1d      	ldr	r2, [pc, #116]	; (ea4 <Parser_LoraSetSubBandStatus+0xa4>)
     e30:	589b      	ldr	r3, [r3, r2]
     e32:	6173      	str	r3, [r6, #20]
}
     e34:	b006      	add	sp, #24
     e36:	bc04      	pop	{r2}
     e38:	4691      	mov	r9, r2
     e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (subBandId >= 1) && 
     e3c:	3305      	adds	r3, #5
     e3e:	aa02      	add	r2, sp, #8
     e40:	4694      	mov	ip, r2
     e42:	4463      	add	r3, ip
     e44:	781a      	ldrb	r2, [r3, #0]
            (validationVal < 2U) && 
     e46:	1e51      	subs	r1, r2, #1
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     e48:	230a      	movs	r3, #10
            (validationVal < 2U) && 
     e4a:	2907      	cmp	r1, #7
     e4c:	d8ee      	bhi.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     e4e:	00cc      	lsls	r4, r1, #3
     e50:	b2e4      	uxtb	r4, r4
     e52:	00d3      	lsls	r3, r2, #3
     e54:	3b01      	subs	r3, #1
     e56:	429c      	cmp	r4, r3
     e58:	dc14      	bgt.n	e84 <Parser_LoraSetSubBandStatus+0x84>
			   ch_params.channelId = i;
     e5a:	af03      	add	r7, sp, #12
			   ch_params.channelAttr.status = validationVal;
     e5c:	1e6b      	subs	r3, r5, #1
     e5e:	419d      	sbcs	r5, r3
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e60:	4b11      	ldr	r3, [pc, #68]	; (ea8 <Parser_LoraSetSubBandStatus+0xa8>)
     e62:	4699      	mov	r9, r3
			   ch_params.channelId = i;
     e64:	703c      	strb	r4, [r7, #0]
			   ch_params.channelAttr.status = validationVal;
     e66:	713d      	strb	r5, [r7, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e68:	0039      	movs	r1, r7
     e6a:	201d      	movs	r0, #29
     e6c:	47c8      	blx	r9
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     e6e:	3401      	adds	r4, #1
     e70:	b2e4      	uxtb	r4, r4
     e72:	230f      	movs	r3, #15
     e74:	aa02      	add	r2, sp, #8
     e76:	4694      	mov	ip, r2
     e78:	4463      	add	r3, ip
     e7a:	781a      	ldrb	r2, [r3, #0]
     e7c:	00d3      	lsls	r3, r2, #3
     e7e:	3b01      	subs	r3, #1
     e80:	429c      	cmp	r4, r3
     e82:	ddef      	ble.n	e64 <Parser_LoraSetSubBandStatus+0x64>
               ch_params.channelId = (63 + subBandId);
     e84:	a903      	add	r1, sp, #12
     e86:	323f      	adds	r2, #63	; 0x3f
     e88:	700a      	strb	r2, [r1, #0]
               ch_params.channelAttr.status = validationVal;
     e8a:	9a01      	ldr	r2, [sp, #4]
     e8c:	1e53      	subs	r3, r2, #1
     e8e:	419a      	sbcs	r2, r3
     e90:	710a      	strb	r2, [r1, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e92:	201d      	movs	r0, #29
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <Parser_LoraSetSubBandStatus+0xa8>)
     e96:	4798      	blx	r3
     e98:	0003      	movs	r3, r0
     e9a:	e7c7      	b.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
     e9c:	00002815 	.word	0x00002815
     ea0:	0000266d 	.word	0x0000266d
     ea4:	0001d560 	.word	0x0001d560
     ea8:	00011439 	.word	0x00011439

00000eac <Parser_LoraGetSubBandStatus>:
{
     eac:	b5f0      	push	{r4, r5, r6, r7, lr}
     eae:	46c6      	mov	lr, r8
     eb0:	b500      	push	{lr}
     eb2:	b082      	sub	sp, #8
     eb4:	0006      	movs	r6, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     eb6:	4b23      	ldr	r3, [pc, #140]	; (f44 <Parser_LoraGetSubBandStatus+0x98>)
     eb8:	6143      	str	r3, [r0, #20]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     eba:	466b      	mov	r3, sp
     ebc:	1dd9      	adds	r1, r3, #7
     ebe:	6800      	ldr	r0, [r0, #0]
     ec0:	4b21      	ldr	r3, [pc, #132]	; (f48 <Parser_LoraGetSubBandStatus+0x9c>)
     ec2:	4798      	blx	r3
     ec4:	2800      	cmp	r0, #0
     ec6:	d030      	beq.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
            (subBandId >= 1) && 
     ec8:	466b      	mov	r3, sp
     eca:	79da      	ldrb	r2, [r3, #7]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     ecc:	1e53      	subs	r3, r2, #1
     ece:	2b07      	cmp	r3, #7
     ed0:	d82b      	bhi.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     ed2:	00dc      	lsls	r4, r3, #3
     ed4:	b2e4      	uxtb	r4, r4
     ed6:	00d3      	lsls	r3, r2, #3
     ed8:	3b01      	subs	r3, #1
     eda:	429c      	cmp	r4, r3
     edc:	dc1b      	bgt.n	f16 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
     ede:	466b      	mov	r3, sp
     ee0:	1ddd      	adds	r5, r3, #7
     ee2:	4f1a      	ldr	r7, [pc, #104]	; (f4c <Parser_LoraGetSubBandStatus+0xa0>)
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     ee4:	4b1a      	ldr	r3, [pc, #104]	; (f50 <Parser_LoraGetSubBandStatus+0xa4>)
     ee6:	4698      	mov	r8, r3
     ee8:	e006      	b.n	ef8 <Parser_LoraGetSubBandStatus+0x4c>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     eea:	3401      	adds	r4, #1
     eec:	b2e4      	uxtb	r4, r4
     eee:	782a      	ldrb	r2, [r5, #0]
     ef0:	00d3      	lsls	r3, r2, #3
     ef2:	3b01      	subs	r3, #1
     ef4:	429c      	cmp	r4, r3
     ef6:	dc0e      	bgt.n	f16 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
     ef8:	466b      	mov	r3, sp
     efa:	1d9a      	adds	r2, r3, #6
     efc:	0029      	movs	r1, r5
     efe:	201d      	movs	r0, #29
     f00:	47b8      	blx	r7
     f02:	2808      	cmp	r0, #8
     f04:	d1f1      	bne.n	eea <Parser_LoraGetSubBandStatus+0x3e>
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     f06:	466b      	mov	r3, sp
     f08:	3306      	adds	r3, #6
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	009b      	lsls	r3, r3, #2
     f0e:	4642      	mov	r2, r8
     f10:	589b      	ldr	r3, [r3, r2]
     f12:	6173      	str	r3, [r6, #20]
     f14:	e7e9      	b.n	eea <Parser_LoraGetSubBandStatus+0x3e>
             uint8_t chId = 63 + subBandId;
     f16:	466b      	mov	r3, sp
     f18:	1d59      	adds	r1, r3, #5
     f1a:	323f      	adds	r2, #63	; 0x3f
     f1c:	700a      	strb	r2, [r1, #0]
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &chId, &chStatus) == LORAWAN_SUCCESS)
     f1e:	1d9a      	adds	r2, r3, #6
     f20:	201d      	movs	r0, #29
     f22:	4b0a      	ldr	r3, [pc, #40]	; (f4c <Parser_LoraGetSubBandStatus+0xa0>)
     f24:	4798      	blx	r3
     f26:	2808      	cmp	r0, #8
     f28:	d003      	beq.n	f32 <Parser_LoraGetSubBandStatus+0x86>
}
     f2a:	b002      	add	sp, #8
     f2c:	bc04      	pop	{r2}
     f2e:	4690      	mov	r8, r2
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     f32:	466b      	mov	r3, sp
     f34:	3306      	adds	r3, #6
     f36:	781b      	ldrb	r3, [r3, #0]
     f38:	009b      	lsls	r3, r3, #2
     f3a:	4a05      	ldr	r2, [pc, #20]	; (f50 <Parser_LoraGetSubBandStatus+0xa4>)
     f3c:	589b      	ldr	r3, [r3, r2]
     f3e:	6173      	str	r3, [r6, #20]
}
     f40:	e7f3      	b.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	0001c93c 	.word	0x0001c93c
     f48:	0000266d 	.word	0x0000266d
     f4c:	0000f489 	.word	0x0000f489
     f50:	0001d540 	.word	0x0001d540

00000f54 <Parser_LoraSetChannelStatus>:
{
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	b084      	sub	sp, #16
     f58:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
     f5a:	2208      	movs	r2, #8
     f5c:	2100      	movs	r1, #0
     f5e:	a801      	add	r0, sp, #4
     f60:	4b11      	ldr	r3, [pc, #68]	; (fa8 <Parser_LoraSetChannelStatus+0x54>)
     f62:	4798      	blx	r3
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
     f64:	6860      	ldr	r0, [r4, #4]
     f66:	4b11      	ldr	r3, [pc, #68]	; (fac <Parser_LoraSetChannelStatus+0x58>)
     f68:	4798      	blx	r3
     f6a:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
     f6c:	210f      	movs	r1, #15
     f6e:	4469      	add	r1, sp
     f70:	6820      	ldr	r0, [r4, #0]
     f72:	4b0f      	ldr	r3, [pc, #60]	; (fb0 <Parser_LoraSetChannelStatus+0x5c>)
     f74:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     f76:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
     f78:	2800      	cmp	r0, #0
     f7a:	d001      	beq.n	f80 <Parser_LoraSetChannelStatus+0x2c>
     f7c:	2d01      	cmp	r5, #1
     f7e:	d905      	bls.n	f8c <Parser_LoraSetChannelStatus+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     f80:	009b      	lsls	r3, r3, #2
     f82:	4a0c      	ldr	r2, [pc, #48]	; (fb4 <Parser_LoraSetChannelStatus+0x60>)
     f84:	589b      	ldr	r3, [r3, r2]
     f86:	6163      	str	r3, [r4, #20]
}
     f88:	b004      	add	sp, #16
     f8a:	bd70      	pop	{r4, r5, r6, pc}
        ch_params.channelId = channelId;
     f8c:	a901      	add	r1, sp, #4
     f8e:	3305      	adds	r3, #5
     f90:	446b      	add	r3, sp
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.status = validationVal;
     f96:	1e6b      	subs	r3, r5, #1
     f98:	419d      	sbcs	r5, r3
     f9a:	710d      	strb	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_STATUS,&ch_params);
     f9c:	201d      	movs	r0, #29
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <Parser_LoraSetChannelStatus+0x64>)
     fa0:	4798      	blx	r3
     fa2:	0003      	movs	r3, r0
     fa4:	e7ec      	b.n	f80 <Parser_LoraSetChannelStatus+0x2c>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	00017715 	.word	0x00017715
     fac:	00002815 	.word	0x00002815
     fb0:	0000266d 	.word	0x0000266d
     fb4:	0001d560 	.word	0x0001d560
     fb8:	00011439 	.word	0x00011439

00000fbc <Parser_LoraGetChannelStatus>:
{
     fbc:	b510      	push	{r4, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     fc2:	4b0d      	ldr	r3, [pc, #52]	; (ff8 <Parser_LoraGetChannelStatus+0x3c>)
     fc4:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
     fc6:	466b      	mov	r3, sp
     fc8:	1d99      	adds	r1, r3, #6
     fca:	6800      	ldr	r0, [r0, #0]
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <Parser_LoraGetChannelStatus+0x40>)
     fce:	4798      	blx	r3
     fd0:	2800      	cmp	r0, #0
     fd2:	d101      	bne.n	fd8 <Parser_LoraGetChannelStatus+0x1c>
}
     fd4:	b002      	add	sp, #8
     fd6:	bd10      	pop	{r4, pc}
        if(LORAWAN_GetAttr(CH_PARAM_STATUS,&channelId,&chStatus) == LORAWAN_SUCCESS)
     fd8:	466b      	mov	r3, sp
     fda:	1dda      	adds	r2, r3, #7
     fdc:	1d99      	adds	r1, r3, #6
     fde:	201d      	movs	r0, #29
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <Parser_LoraGetChannelStatus+0x44>)
     fe2:	4798      	blx	r3
     fe4:	2808      	cmp	r0, #8
     fe6:	d1f5      	bne.n	fd4 <Parser_LoraGetChannelStatus+0x18>
			pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     fe8:	466b      	mov	r3, sp
     fea:	3307      	adds	r3, #7
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	009b      	lsls	r3, r3, #2
     ff0:	4a04      	ldr	r2, [pc, #16]	; (1004 <Parser_LoraGetChannelStatus+0x48>)
     ff2:	589b      	ldr	r3, [r3, r2]
     ff4:	6163      	str	r3, [r4, #20]
}
     ff6:	e7ed      	b.n	fd4 <Parser_LoraGetChannelStatus+0x18>
     ff8:	0001c93c 	.word	0x0001c93c
     ffc:	0000266d 	.word	0x0000266d
    1000:	0000f489 	.word	0x0000f489
    1004:	0001d540 	.word	0x0001d540

00001008 <Parser_LoraSetDatarateRange>:
{
    1008:	b510      	push	{r4, lr}
    100a:	b084      	sub	sp, #16
    100c:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    100e:	2208      	movs	r2, #8
    1010:	2100      	movs	r1, #0
    1012:	a801      	add	r0, sp, #4
    1014:	4b1c      	ldr	r3, [pc, #112]	; (1088 <Parser_LoraSetDatarateRange+0x80>)
    1016:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1018:	210f      	movs	r1, #15
    101a:	4469      	add	r1, sp
    101c:	6820      	ldr	r0, [r4, #0]
    101e:	4b1b      	ldr	r3, [pc, #108]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    1020:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1022:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1024:	2800      	cmp	r0, #0
    1026:	d105      	bne.n	1034 <Parser_LoraSetDatarateRange+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1028:	009b      	lsls	r3, r3, #2
    102a:	4a19      	ldr	r2, [pc, #100]	; (1090 <Parser_LoraSetDatarateRange+0x88>)
    102c:	589b      	ldr	r3, [r3, r2]
    102e:	6163      	str	r3, [r4, #20]
}
    1030:	b004      	add	sp, #16
    1032:	bd10      	pop	{r4, pc}
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    1034:	210e      	movs	r1, #14
    1036:	4469      	add	r1, sp
    1038:	6860      	ldr	r0, [r4, #4]
    103a:	4b14      	ldr	r3, [pc, #80]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    103c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    103e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1040:	2800      	cmp	r0, #0
    1042:	d0f1      	beq.n	1028 <Parser_LoraSetDatarateRange+0x20>
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    1044:	210d      	movs	r1, #13
    1046:	4469      	add	r1, sp
    1048:	68a0      	ldr	r0, [r4, #8]
    104a:	4b10      	ldr	r3, [pc, #64]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    104c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    104e:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    1050:	2800      	cmp	r0, #0
    1052:	d0e9      	beq.n	1028 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    1054:	3304      	adds	r3, #4
    1056:	446b      	add	r3, sp
    1058:	7818      	ldrb	r0, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    105a:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    105c:	280f      	cmp	r0, #15
    105e:	d8e3      	bhi.n	1028 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    1060:	3303      	adds	r3, #3
    1062:	446b      	add	r3, sp
    1064:	781a      	ldrb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1066:	230a      	movs	r3, #10
       minDr < 16 && maxDr < 16)
    1068:	2a0f      	cmp	r2, #15
    106a:	d8dd      	bhi.n	1028 <Parser_LoraSetDatarateRange+0x20>
        ch_params.channelId = channelId;
    106c:	a901      	add	r1, sp, #4
    106e:	3305      	adds	r3, #5
    1070:	446b      	add	r3, sp
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.dataRange = ((maxDr << 4) | minDr);
    1076:	0112      	lsls	r2, r2, #4
    1078:	4302      	orrs	r2, r0
    107a:	710a      	strb	r2, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_DR_RANGE, &ch_params);
    107c:	201c      	movs	r0, #28
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <Parser_LoraSetDatarateRange+0x8c>)
    1080:	4798      	blx	r3
    1082:	0003      	movs	r3, r0
    1084:	e7d0      	b.n	1028 <Parser_LoraSetDatarateRange+0x20>
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00017715 	.word	0x00017715
    108c:	0000266d 	.word	0x0000266d
    1090:	0001d560 	.word	0x0001d560
    1094:	00011439 	.word	0x00011439

00001098 <Parser_LoraGetDatarateRange>:
{
    1098:	b5f0      	push	{r4, r5, r6, r7, lr}
    109a:	b083      	sub	sp, #12
    109c:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    109e:	4b15      	ldr	r3, [pc, #84]	; (10f4 <Parser_LoraGetDatarateRange+0x5c>)
    10a0:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    10a2:	466b      	mov	r3, sp
    10a4:	1dd9      	adds	r1, r3, #7
    10a6:	6800      	ldr	r0, [r0, #0]
    10a8:	4b13      	ldr	r3, [pc, #76]	; (10f8 <Parser_LoraGetDatarateRange+0x60>)
    10aa:	4798      	blx	r3
    10ac:	2800      	cmp	r0, #0
    10ae:	d101      	bne.n	10b4 <Parser_LoraGetDatarateRange+0x1c>
}
    10b0:	b003      	add	sp, #12
    10b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LORAWAN_GetAttr(CH_PARAM_DR_RANGE,&channelId,&drRange) == LORAWAN_SUCCESS)
    10b4:	466b      	mov	r3, sp
    10b6:	1d9a      	adds	r2, r3, #6
    10b8:	1dd9      	adds	r1, r3, #7
    10ba:	201c      	movs	r0, #28
    10bc:	4b0f      	ldr	r3, [pc, #60]	; (10fc <Parser_LoraGetDatarateRange+0x64>)
    10be:	4798      	blx	r3
    10c0:	2808      	cmp	r0, #8
    10c2:	d1f5      	bne.n	10b0 <Parser_LoraGetDatarateRange+0x18>
			minDr = drRange & 0x0F;
    10c4:	466b      	mov	r3, sp
    10c6:	799e      	ldrb	r6, [r3, #6]
			itoa(minDr, aParserData, 10U);
    10c8:	4d0d      	ldr	r5, [pc, #52]	; (1100 <Parser_LoraGetDatarateRange+0x68>)
    10ca:	3007      	adds	r0, #7
    10cc:	4030      	ands	r0, r6
    10ce:	220a      	movs	r2, #10
    10d0:	0029      	movs	r1, r5
    10d2:	4f0c      	ldr	r7, [pc, #48]	; (1104 <Parser_LoraGetDatarateRange+0x6c>)
    10d4:	47b8      	blx	r7
			crtIdx = strlen(aParserData);
    10d6:	0028      	movs	r0, r5
    10d8:	4b0b      	ldr	r3, [pc, #44]	; (1108 <Parser_LoraGetDatarateRange+0x70>)
    10da:	4798      	blx	r3
			aParserData[crtIdx] = ' ';
    10dc:	0403      	lsls	r3, r0, #16
    10de:	0c1b      	lsrs	r3, r3, #16
    10e0:	2220      	movs	r2, #32
    10e2:	54ea      	strb	r2, [r5, r3]
			crtIdx ++;
    10e4:	3001      	adds	r0, #1
			itoa(maxDr, &aParserData[crtIdx], 10U);
    10e6:	b281      	uxth	r1, r0
    10e8:	1949      	adds	r1, r1, r5
    10ea:	0930      	lsrs	r0, r6, #4
    10ec:	3a16      	subs	r2, #22
    10ee:	47b8      	blx	r7
			pParserCmdInfo->pReplyCmd = aParserData;
    10f0:	6165      	str	r5, [r4, #20]
}
    10f2:	e7dd      	b.n	10b0 <Parser_LoraGetDatarateRange+0x18>
    10f4:	0001c93c 	.word	0x0001c93c
    10f8:	0000266d 	.word	0x0000266d
    10fc:	0000f489 	.word	0x0000f489
    1100:	20000fac 	.word	0x20000fac
    1104:	00017619 	.word	0x00017619
    1108:	00017b05 	.word	0x00017b05

0000110c <Parser_LoraSetTxPower>:
{
    110c:	b510      	push	{r4, lr}
    110e:	b082      	sub	sp, #8
    1110:	0004      	movs	r4, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    1112:	466b      	mov	r3, sp
    1114:	1d9a      	adds	r2, r3, #6
    1116:	2100      	movs	r1, #0
    1118:	2024      	movs	r0, #36	; 0x24
    111a:	4b0b      	ldr	r3, [pc, #44]	; (1148 <Parser_LoraSetTxPower+0x3c>)
    111c:	4798      	blx	r3
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPowerIdx)))
    111e:	466b      	mov	r3, sp
    1120:	1dd9      	adds	r1, r3, #7
    1122:	6820      	ldr	r0, [r4, #0]
    1124:	4b09      	ldr	r3, [pc, #36]	; (114c <Parser_LoraSetTxPower+0x40>)
    1126:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1128:	230a      	movs	r3, #10
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPowerIdx)))
    112a:	2800      	cmp	r0, #0
    112c:	d105      	bne.n	113a <Parser_LoraSetTxPower+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    112e:	009b      	lsls	r3, r3, #2
    1130:	4a07      	ldr	r2, [pc, #28]	; (1150 <Parser_LoraSetTxPower+0x44>)
    1132:	589b      	ldr	r3, [r3, r2]
    1134:	6163      	str	r3, [r4, #20]
}
    1136:	b002      	add	sp, #8
    1138:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(TX_POWER,&txPowerIdx);
    113a:	466b      	mov	r3, sp
    113c:	1dd9      	adds	r1, r3, #7
    113e:	2008      	movs	r0, #8
    1140:	4b04      	ldr	r3, [pc, #16]	; (1154 <Parser_LoraSetTxPower+0x48>)
    1142:	4798      	blx	r3
    1144:	0003      	movs	r3, r0
    1146:	e7f2      	b.n	112e <Parser_LoraSetTxPower+0x22>
    1148:	0000f489 	.word	0x0000f489
    114c:	0000266d 	.word	0x0000266d
    1150:	0001d560 	.word	0x0001d560
    1154:	00011439 	.word	0x00011439

00001158 <Parser_LoraGetTxPower>:
{
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	b082      	sub	sp, #8
    115c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(TX_POWER,NULL,&txPowerIdx);
    115e:	466b      	mov	r3, sp
    1160:	1ddd      	adds	r5, r3, #7
    1162:	002a      	movs	r2, r5
    1164:	2100      	movs	r1, #0
    1166:	2008      	movs	r0, #8
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <Parser_LoraGetTxPower+0x28>)
    116a:	4798      	blx	r3
    itoa( txPowerIdx, aParserData, 10);
    116c:	4c05      	ldr	r4, [pc, #20]	; (1184 <Parser_LoraGetTxPower+0x2c>)
    116e:	7828      	ldrb	r0, [r5, #0]
    1170:	220a      	movs	r2, #10
    1172:	0021      	movs	r1, r4
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <Parser_LoraGetTxPower+0x30>)
    1176:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1178:	6174      	str	r4, [r6, #20]
}
    117a:	b002      	add	sp, #8
    117c:	bd70      	pop	{r4, r5, r6, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	0000f489 	.word	0x0000f489
    1184:	20000fac 	.word	0x20000fac
    1188:	00017619 	.word	0x00017619

0000118c <Parser_LoraPause>:
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	0005      	movs	r5, r0
    resumeInterval = LORAWAN_Pause();
    1190:	4b04      	ldr	r3, [pc, #16]	; (11a4 <Parser_LoraPause+0x18>)
    1192:	4798      	blx	r3
    1194:	0001      	movs	r1, r0
    ultoa(aParserData, resumeInterval, 10);
    1196:	4c04      	ldr	r4, [pc, #16]	; (11a8 <Parser_LoraPause+0x1c>)
    1198:	220a      	movs	r2, #10
    119a:	0020      	movs	r0, r4
    119c:	4b03      	ldr	r3, [pc, #12]	; (11ac <Parser_LoraPause+0x20>)
    119e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    11a0:	616c      	str	r4, [r5, #20]
}
    11a2:	bd70      	pop	{r4, r5, r6, pc}
    11a4:	0000e3a1 	.word	0x0000e3a1
    11a8:	20000fac 	.word	0x20000fac
    11ac:	000026c5 	.word	0x000026c5

000011b0 <Parser_LoraResume>:
{
    11b0:	b510      	push	{r4, lr}
    11b2:	0004      	movs	r4, r0
    LORAWAN_Resume();
    11b4:	4b02      	ldr	r3, [pc, #8]	; (11c0 <Parser_LoraResume+0x10>)
    11b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    11b8:	4b02      	ldr	r3, [pc, #8]	; (11c4 <Parser_LoraResume+0x14>)
    11ba:	6163      	str	r3, [r4, #20]
}
    11bc:	bd10      	pop	{r4, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	0000e465 	.word	0x0000e465
    11c4:	0001d4dc 	.word	0x0001d4dc

000011c8 <Parser_LoraSave>:
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    11c8:	4b01      	ldr	r3, [pc, #4]	; (11d0 <Parser_LoraSave+0x8>)
    11ca:	6143      	str	r3, [r0, #20]
}
    11cc:	4770      	bx	lr
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	0001d4dc 	.word	0x0001d4dc

000011d4 <Parser_LoraSetRx2WindowParams>:
{
    11d4:	b530      	push	{r4, r5, lr}
    11d6:	b085      	sub	sp, #20
    11d8:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    11da:	220a      	movs	r2, #10
    11dc:	2100      	movs	r1, #0
    11de:	6840      	ldr	r0, [r0, #4]
    11e0:	4b12      	ldr	r3, [pc, #72]	; (122c <Parser_LoraSetRx2WindowParams+0x58>)
    11e2:	4798      	blx	r3
    11e4:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    11e6:	210f      	movs	r1, #15
    11e8:	4469      	add	r1, sp
    11ea:	6820      	ldr	r0, [r4, #0]
    11ec:	4b10      	ldr	r3, [pc, #64]	; (1230 <Parser_LoraSetRx2WindowParams+0x5c>)
    11ee:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    11f0:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    11f2:	2800      	cmp	r0, #0
    11f4:	d105      	bne.n	1202 <Parser_LoraSetRx2WindowParams+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    11f6:	009b      	lsls	r3, r3, #2
    11f8:	4a0e      	ldr	r2, [pc, #56]	; (1234 <Parser_LoraSetRx2WindowParams+0x60>)
    11fa:	589b      	ldr	r3, [r3, r2]
    11fc:	6163      	str	r3, [r4, #20]
}
    11fe:	b005      	add	sp, #20
    1200:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    1202:	2201      	movs	r2, #1
    1204:	4252      	negs	r2, r2
    1206:	210a      	movs	r1, #10
    1208:	6860      	ldr	r0, [r4, #4]
    120a:	4b0b      	ldr	r3, [pc, #44]	; (1238 <Parser_LoraSetRx2WindowParams+0x64>)
    120c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    120e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    1210:	2800      	cmp	r0, #0
    1212:	d0f0      	beq.n	11f6 <Parser_LoraSetRx2WindowParams+0x22>
        rx2Params.dataRate = datarate;
    1214:	a901      	add	r1, sp, #4
    1216:	3305      	adds	r3, #5
    1218:	446b      	add	r3, sp
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	710b      	strb	r3, [r1, #4]
        rx2Params.frequency = freq;
    121e:	9501      	str	r5, [sp, #4]
        status = LORAWAN_SetAttr(RX2_WINDOW_PARAMS,&rx2Params);
    1220:	2015      	movs	r0, #21
    1222:	4b06      	ldr	r3, [pc, #24]	; (123c <Parser_LoraSetRx2WindowParams+0x68>)
    1224:	4798      	blx	r3
    1226:	0003      	movs	r3, r0
    1228:	e7e5      	b.n	11f6 <Parser_LoraSetRx2WindowParams+0x22>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00017e11 	.word	0x00017e11
    1230:	0000266d 	.word	0x0000266d
    1234:	0001d560 	.word	0x0001d560
    1238:	00002741 	.word	0x00002741
    123c:	00011439 	.word	0x00011439

00001240 <Parser_LoraGetRx2WindowParams>:
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	b083      	sub	sp, #12
    1244:	0004      	movs	r4, r0
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    1246:	4b11      	ldr	r3, [pc, #68]	; (128c <Parser_LoraGetRx2WindowParams+0x4c>)
    1248:	6143      	str	r3, [r0, #20]
    if(LORAWAN_GetAttr(RX2_WINDOW_PARAMS, NULL, &rx2Params) == LORAWAN_SUCCESS)
    124a:	466a      	mov	r2, sp
    124c:	2100      	movs	r1, #0
    124e:	2015      	movs	r0, #21
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <Parser_LoraGetRx2WindowParams+0x50>)
    1252:	4798      	blx	r3
    1254:	2808      	cmp	r0, #8
    1256:	d001      	beq.n	125c <Parser_LoraGetRx2WindowParams+0x1c>
}
    1258:	b003      	add	sp, #12
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		freq = rx2Params.frequency;
    125c:	9f00      	ldr	r7, [sp, #0]
		ultoa(aParserData, datarate, 10U);
    125e:	466b      	mov	r3, sp
    1260:	7919      	ldrb	r1, [r3, #4]
    1262:	4d0c      	ldr	r5, [pc, #48]	; (1294 <Parser_LoraGetRx2WindowParams+0x54>)
    1264:	220a      	movs	r2, #10
    1266:	0028      	movs	r0, r5
    1268:	4e0b      	ldr	r6, [pc, #44]	; (1298 <Parser_LoraGetRx2WindowParams+0x58>)
    126a:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    126c:	0028      	movs	r0, r5
    126e:	4b0b      	ldr	r3, [pc, #44]	; (129c <Parser_LoraGetRx2WindowParams+0x5c>)
    1270:	4798      	blx	r3
		aParserData[dataLen ++] = ' ';
    1272:	23ff      	movs	r3, #255	; 0xff
    1274:	4003      	ands	r3, r0
    1276:	2220      	movs	r2, #32
    1278:	54ea      	strb	r2, [r5, r3]
    127a:	3001      	adds	r0, #1
		ultoa(&aParserData[dataLen], freq, 10U);
    127c:	b2c0      	uxtb	r0, r0
    127e:	1940      	adds	r0, r0, r5
    1280:	3a16      	subs	r2, #22
    1282:	0039      	movs	r1, r7
    1284:	47b0      	blx	r6
		pParserCmdInfo->pReplyCmd = aParserData;
    1286:	6165      	str	r5, [r4, #20]
}
    1288:	e7e6      	b.n	1258 <Parser_LoraGetRx2WindowParams+0x18>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	0001c93c 	.word	0x0001c93c
    1290:	0000f489 	.word	0x0000f489
    1294:	20000fac 	.word	0x20000fac
    1298:	000026c5 	.word	0x000026c5
    129c:	00017b05 	.word	0x00017b05

000012a0 <Parser_LoraSetLbt>:
{
    12a0:	b530      	push	{r4, r5, lr}
    12a2:	b083      	sub	sp, #12
    12a4:	0004      	movs	r4, r0
	lorawanLBTParams.lbtScanPeriod = atoi(pParserCmdInfo->pParam1);
    12a6:	6800      	ldr	r0, [r0, #0]
    12a8:	4d0f      	ldr	r5, [pc, #60]	; (12e8 <Parser_LoraSetLbt+0x48>)
    12aa:	47a8      	blx	r5
    12ac:	466b      	mov	r3, sp
    12ae:	8018      	strh	r0, [r3, #0]
	lorawanLBTParams.lbtThreshold = atoi(pParserCmdInfo->pParam2);
    12b0:	6860      	ldr	r0, [r4, #4]
    12b2:	47a8      	blx	r5
    12b4:	466b      	mov	r3, sp
    12b6:	8058      	strh	r0, [r3, #2]
	lorawanLBTParams.maxRetryChannels = atoi(pParserCmdInfo->pParam3);
    12b8:	68a0      	ldr	r0, [r4, #8]
    12ba:	47a8      	blx	r5
    12bc:	466b      	mov	r3, sp
    12be:	8098      	strh	r0, [r3, #4]
	lorawanLBTParams.lbtNumOfSamples = atoi(pParserCmdInfo->pParam4);
    12c0:	68e0      	ldr	r0, [r4, #12]
    12c2:	47a8      	blx	r5
    12c4:	466b      	mov	r3, sp
    12c6:	7198      	strb	r0, [r3, #6]
	lorawanLBTParams.lbtTransmitOn = atoi(pParserCmdInfo->pParam5);
    12c8:	6920      	ldr	r0, [r4, #16]
    12ca:	47a8      	blx	r5
    12cc:	1e43      	subs	r3, r0, #1
    12ce:	4198      	sbcs	r0, r3
    12d0:	466b      	mov	r3, sp
    12d2:	71d8      	strb	r0, [r3, #7]
	status = LORAWAN_SetAttr(LORAWAN_LBT_PARAMS, &lorawanLBTParams);
    12d4:	4669      	mov	r1, sp
    12d6:	2028      	movs	r0, #40	; 0x28
    12d8:	4b04      	ldr	r3, [pc, #16]	; (12ec <Parser_LoraSetLbt+0x4c>)
    12da:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    12dc:	0080      	lsls	r0, r0, #2
    12de:	4b04      	ldr	r3, [pc, #16]	; (12f0 <Parser_LoraSetLbt+0x50>)
    12e0:	58c3      	ldr	r3, [r0, r3]
    12e2:	6163      	str	r3, [r4, #20]
}
    12e4:	b003      	add	sp, #12
    12e6:	bd30      	pop	{r4, r5, pc}
    12e8:	00017595 	.word	0x00017595
    12ec:	00011439 	.word	0x00011439
    12f0:	0001d560 	.word	0x0001d560

000012f4 <Parser_LoraGetLbt>:
{
    12f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f6:	46ce      	mov	lr, r9
    12f8:	4647      	mov	r7, r8
    12fa:	b580      	push	{r7, lr}
    12fc:	b083      	sub	sp, #12
    12fe:	0005      	movs	r5, r0
	status = LORAWAN_GetAttr(LORAWAN_LBT_PARAMS, NULL, &lorawanLBTParams);
    1300:	466a      	mov	r2, sp
    1302:	2100      	movs	r1, #0
    1304:	2028      	movs	r0, #40	; 0x28
    1306:	4b27      	ldr	r3, [pc, #156]	; (13a4 <Parser_LoraGetLbt+0xb0>)
    1308:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    130a:	0082      	lsls	r2, r0, #2
    130c:	4b26      	ldr	r3, [pc, #152]	; (13a8 <Parser_LoraGetLbt+0xb4>)
    130e:	58d3      	ldr	r3, [r2, r3]
    1310:	616b      	str	r3, [r5, #20]
	if (LORAWAN_SUCCESS == status)
    1312:	2808      	cmp	r0, #8
    1314:	d004      	beq.n	1320 <Parser_LoraGetLbt+0x2c>
}
    1316:	b003      	add	sp, #12
    1318:	bc0c      	pop	{r2, r3}
    131a:	4690      	mov	r8, r2
    131c:	4699      	mov	r9, r3
    131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ultoa(aParserData, lorawanLBTParams.lbtScanPeriod, 10U);
    1320:	466b      	mov	r3, sp
    1322:	8819      	ldrh	r1, [r3, #0]
    1324:	4c21      	ldr	r4, [pc, #132]	; (13ac <Parser_LoraGetLbt+0xb8>)
    1326:	220a      	movs	r2, #10
    1328:	0020      	movs	r0, r4
    132a:	4e21      	ldr	r6, [pc, #132]	; (13b0 <Parser_LoraGetLbt+0xbc>)
    132c:	47b0      	blx	r6
        dataLen = strlen(aParserData);
    132e:	0020      	movs	r0, r4
    1330:	4b20      	ldr	r3, [pc, #128]	; (13b4 <Parser_LoraGetLbt+0xc0>)
    1332:	4699      	mov	r9, r3
    1334:	4798      	blx	r3
        aParserData[dataLen ++] = ' ';
    1336:	27ff      	movs	r7, #255	; 0xff
    1338:	003b      	movs	r3, r7
    133a:	4003      	ands	r3, r0
    133c:	2220      	movs	r2, #32
    133e:	4690      	mov	r8, r2
    1340:	54e2      	strb	r2, [r4, r3]
    1342:	3001      	adds	r0, #1
		itoa(lorawanLBTParams.lbtThreshold, &aParserData[dataLen], 10U);
    1344:	b2c1      	uxtb	r1, r0
    1346:	1909      	adds	r1, r1, r4
    1348:	466b      	mov	r3, sp
    134a:	2002      	movs	r0, #2
    134c:	5e18      	ldrsh	r0, [r3, r0]
    134e:	220a      	movs	r2, #10
    1350:	4b19      	ldr	r3, [pc, #100]	; (13b8 <Parser_LoraGetLbt+0xc4>)
    1352:	4798      	blx	r3
		dataLen = strlen(aParserData);
    1354:	0020      	movs	r0, r4
    1356:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    1358:	003b      	movs	r3, r7
    135a:	4003      	ands	r3, r0
    135c:	4642      	mov	r2, r8
    135e:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    1360:	466b      	mov	r3, sp
    1362:	8899      	ldrh	r1, [r3, #4]
        aParserData[dataLen ++] = ' ';
    1364:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    1366:	b2c0      	uxtb	r0, r0
    1368:	1900      	adds	r0, r0, r4
    136a:	220a      	movs	r2, #10
    136c:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    136e:	0020      	movs	r0, r4
    1370:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    1372:	003b      	movs	r3, r7
    1374:	4003      	ands	r3, r0
    1376:	4642      	mov	r2, r8
    1378:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    137a:	466b      	mov	r3, sp
    137c:	7999      	ldrb	r1, [r3, #6]
        aParserData[dataLen ++] = ' ';
    137e:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    1380:	b2c0      	uxtb	r0, r0
    1382:	1900      	adds	r0, r0, r4
    1384:	220a      	movs	r2, #10
    1386:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    1388:	0020      	movs	r0, r4
    138a:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    138c:	4007      	ands	r7, r0
    138e:	4643      	mov	r3, r8
    1390:	55e3      	strb	r3, [r4, r7]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    1392:	466b      	mov	r3, sp
    1394:	79d9      	ldrb	r1, [r3, #7]
        aParserData[dataLen ++] = ' ';
    1396:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    1398:	b2c0      	uxtb	r0, r0
    139a:	1900      	adds	r0, r0, r4
    139c:	220a      	movs	r2, #10
    139e:	47b0      	blx	r6
        pParserCmdInfo->pReplyCmd = aParserData;
    13a0:	616c      	str	r4, [r5, #20]
}
    13a2:	e7b8      	b.n	1316 <Parser_LoraGetLbt+0x22>
    13a4:	0000f489 	.word	0x0000f489
    13a8:	0001d560 	.word	0x0001d560
    13ac:	20000fac 	.word	0x20000fac
    13b0:	000026c5 	.word	0x000026c5
    13b4:	00017b05 	.word	0x00017b05
    13b8:	00017619 	.word	0x00017619

000013bc <Parser_LoraForceEnable>:
{
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
    LORAWAN_ForceEnable();
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <Parser_LoraForceEnable+0x10>)
    13c2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    13c4:	4b02      	ldr	r3, [pc, #8]	; (13d0 <Parser_LoraForceEnable+0x14>)
    13c6:	6163      	str	r3, [r4, #20]
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	0000e565 	.word	0x0000e565
    13d0:	0001d4dc 	.word	0x0001d4dc

000013d4 <Parser_LoraSetUplinkCounter>:
{
    13d4:	b510      	push	{r4, lr}
    13d6:	b082      	sub	sp, #8
    13d8:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    13da:	220a      	movs	r2, #10
    13dc:	2100      	movs	r1, #0
    13de:	6800      	ldr	r0, [r0, #0]
    13e0:	4b0b      	ldr	r3, [pc, #44]	; (1410 <Parser_LoraSetUplinkCounter+0x3c>)
    13e2:	4798      	blx	r3
    13e4:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    13e6:	2201      	movs	r2, #1
    13e8:	4252      	negs	r2, r2
    13ea:	210a      	movs	r1, #10
    13ec:	6820      	ldr	r0, [r4, #0]
    13ee:	4b09      	ldr	r3, [pc, #36]	; (1414 <Parser_LoraSetUplinkCounter+0x40>)
    13f0:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    13f2:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    13f4:	2800      	cmp	r0, #0
    13f6:	d105      	bne.n	1404 <Parser_LoraSetUplinkCounter+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	4a07      	ldr	r2, [pc, #28]	; (1418 <Parser_LoraSetUplinkCounter+0x44>)
    13fc:	589b      	ldr	r3, [r3, r2]
    13fe:	6163      	str	r3, [r4, #20]
}
    1400:	b002      	add	sp, #8
    1402:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(UPLINK_COUNTER, &param1Value);       
    1404:	a901      	add	r1, sp, #4
    1406:	200a      	movs	r0, #10
    1408:	4b04      	ldr	r3, [pc, #16]	; (141c <Parser_LoraSetUplinkCounter+0x48>)
    140a:	4798      	blx	r3
    140c:	0003      	movs	r3, r0
    140e:	e7f3      	b.n	13f8 <Parser_LoraSetUplinkCounter+0x24>
    1410:	00017e11 	.word	0x00017e11
    1414:	00002741 	.word	0x00002741
    1418:	0001d560 	.word	0x0001d560
    141c:	00011439 	.word	0x00011439

00001420 <Parser_LoraSetDownlinkCounter>:
{
    1420:	b510      	push	{r4, lr}
    1422:	b082      	sub	sp, #8
    1424:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    1426:	220a      	movs	r2, #10
    1428:	2100      	movs	r1, #0
    142a:	6800      	ldr	r0, [r0, #0]
    142c:	4b0b      	ldr	r3, [pc, #44]	; (145c <Parser_LoraSetDownlinkCounter+0x3c>)
    142e:	4798      	blx	r3
    1430:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1432:	2201      	movs	r2, #1
    1434:	4252      	negs	r2, r2
    1436:	210a      	movs	r1, #10
    1438:	6820      	ldr	r0, [r4, #0]
    143a:	4b09      	ldr	r3, [pc, #36]	; (1460 <Parser_LoraSetDownlinkCounter+0x40>)
    143c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    143e:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1440:	2800      	cmp	r0, #0
    1442:	d105      	bne.n	1450 <Parser_LoraSetDownlinkCounter+0x30>
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1444:	009b      	lsls	r3, r3, #2
    1446:	4a07      	ldr	r2, [pc, #28]	; (1464 <Parser_LoraSetDownlinkCounter+0x44>)
    1448:	589b      	ldr	r3, [r3, r2]
    144a:	6163      	str	r3, [r4, #20]
}
    144c:	b002      	add	sp, #8
    144e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(DOWNLINK_COUNTER, &param1Value);   
    1450:	a901      	add	r1, sp, #4
    1452:	200b      	movs	r0, #11
    1454:	4b04      	ldr	r3, [pc, #16]	; (1468 <Parser_LoraSetDownlinkCounter+0x48>)
    1456:	4798      	blx	r3
    1458:	0003      	movs	r3, r0
    145a:	e7f3      	b.n	1444 <Parser_LoraSetDownlinkCounter+0x24>
    145c:	00017e11 	.word	0x00017e11
    1460:	00002741 	.word	0x00002741
    1464:	0001d560 	.word	0x0001d560
    1468:	00011439 	.word	0x00011439

0000146c <Parser_LoraSetSyncWord>:
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146e:	0004      	movs	r4, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam1);
    1470:	6805      	ldr	r5, [r0, #0]
    1472:	0028      	movs	r0, r5
    1474:	4b10      	ldr	r3, [pc, #64]	; (14b8 <Parser_LoraSetSyncWord+0x4c>)
    1476:	4798      	blx	r3
    1478:	0006      	movs	r6, r0
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    147a:	0028      	movs	r0, r5
    147c:	4b0f      	ldr	r3, [pc, #60]	; (14bc <Parser_LoraSetSyncWord+0x50>)
    147e:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1480:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    1482:	2800      	cmp	r0, #0
    1484:	d006      	beq.n	1494 <Parser_LoraSetSyncWord+0x28>
    1486:	6827      	ldr	r7, [r4, #0]
    1488:	0038      	movs	r0, r7
    148a:	4b0b      	ldr	r3, [pc, #44]	; (14b8 <Parser_LoraSetSyncWord+0x4c>)
    148c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    148e:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    1490:	2802      	cmp	r0, #2
    1492:	d004      	beq.n	149e <Parser_LoraSetSyncWord+0x32>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1494:	009b      	lsls	r3, r3, #2
    1496:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <Parser_LoraSetSyncWord+0x54>)
    1498:	589b      	ldr	r3, [r3, r2]
    149a:	6163      	str	r3, [r4, #20]
}
    149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam1, (uint8_t *)aParserData);
    149e:	4d09      	ldr	r5, [pc, #36]	; (14c4 <Parser_LoraSetSyncWord+0x58>)
    14a0:	b2b0      	uxth	r0, r6
    14a2:	002a      	movs	r2, r5
    14a4:	0039      	movs	r1, r7
    14a6:	4b08      	ldr	r3, [pc, #32]	; (14c8 <Parser_LoraSetSyncWord+0x5c>)
    14a8:	4798      	blx	r3
        status = LORAWAN_SetAttr(SYNC_WORD,aParserData);    
    14aa:	0029      	movs	r1, r5
    14ac:	2009      	movs	r0, #9
    14ae:	4b07      	ldr	r3, [pc, #28]	; (14cc <Parser_LoraSetSyncWord+0x60>)
    14b0:	4798      	blx	r3
    14b2:	0003      	movs	r3, r0
    14b4:	e7ee      	b.n	1494 <Parser_LoraSetSyncWord+0x28>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	00017b05 	.word	0x00017b05
    14bc:	000025d9 	.word	0x000025d9
    14c0:	0001d560 	.word	0x0001d560
    14c4:	20000fac 	.word	0x20000fac
    14c8:	000028e1 	.word	0x000028e1
    14cc:	00011439 	.word	0x00011439

000014d0 <Parser_LoraGetSyncWord>:
{
    14d0:	b530      	push	{r4, r5, lr}
    14d2:	b083      	sub	sp, #12
    14d4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(SYNC_WORD, NULL, &syncWord);
    14d6:	466b      	mov	r3, sp
    14d8:	1dda      	adds	r2, r3, #7
    14da:	2100      	movs	r1, #0
    14dc:	2009      	movs	r0, #9
    14de:	4b06      	ldr	r3, [pc, #24]	; (14f8 <Parser_LoraGetSyncWord+0x28>)
    14e0:	4798      	blx	r3
    Parser_IntArrayToHexAscii(1, &syncWord, aParserData);
    14e2:	4c06      	ldr	r4, [pc, #24]	; (14fc <Parser_LoraGetSyncWord+0x2c>)
    14e4:	0022      	movs	r2, r4
    14e6:	466b      	mov	r3, sp
    14e8:	1dd9      	adds	r1, r3, #7
    14ea:	2001      	movs	r0, #1
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <Parser_LoraGetSyncWord+0x30>)
    14ee:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    14f0:	616c      	str	r4, [r5, #20]
}
    14f2:	b003      	add	sp, #12
    14f4:	bd30      	pop	{r4, r5, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	0000f489 	.word	0x0000f489
    14fc:	20000fac 	.word	0x20000fac
    1500:	0000260d 	.word	0x0000260d

00001504 <Parser_LoraGetUplinkCounter>:
{
    1504:	b530      	push	{r4, r5, lr}
    1506:	b083      	sub	sp, #12
    1508:	0005      	movs	r5, r0
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &ctr);
    150a:	aa01      	add	r2, sp, #4
    150c:	2100      	movs	r1, #0
    150e:	200a      	movs	r0, #10
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <Parser_LoraGetUplinkCounter+0x24>)
    1512:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    1514:	4c05      	ldr	r4, [pc, #20]	; (152c <Parser_LoraGetUplinkCounter+0x28>)
    1516:	220a      	movs	r2, #10
    1518:	9901      	ldr	r1, [sp, #4]
    151a:	0020      	movs	r0, r4
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <Parser_LoraGetUplinkCounter+0x2c>)
    151e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1520:	616c      	str	r4, [r5, #20]
}
    1522:	b003      	add	sp, #12
    1524:	bd30      	pop	{r4, r5, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	0000f489 	.word	0x0000f489
    152c:	20000fac 	.word	0x20000fac
    1530:	000026c5 	.word	0x000026c5

00001534 <Parser_LoraGetDownlinkCounter>:
{
    1534:	b530      	push	{r4, r5, lr}
    1536:	b083      	sub	sp, #12
    1538:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &ctr);
    153a:	aa01      	add	r2, sp, #4
    153c:	2100      	movs	r1, #0
    153e:	200b      	movs	r0, #11
    1540:	4b05      	ldr	r3, [pc, #20]	; (1558 <Parser_LoraGetDownlinkCounter+0x24>)
    1542:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    1544:	4c05      	ldr	r4, [pc, #20]	; (155c <Parser_LoraGetDownlinkCounter+0x28>)
    1546:	220a      	movs	r2, #10
    1548:	9901      	ldr	r1, [sp, #4]
    154a:	0020      	movs	r0, r4
    154c:	4b04      	ldr	r3, [pc, #16]	; (1560 <Parser_LoraGetDownlinkCounter+0x2c>)
    154e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1550:	616c      	str	r4, [r5, #20]
}
    1552:	b003      	add	sp, #12
    1554:	bd30      	pop	{r4, r5, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	0000f489 	.word	0x0000f489
    155c:	20000fac 	.word	0x20000fac
    1560:	000026c5 	.word	0x000026c5

00001564 <Parser_LoraLinkCheck>:
{
    1564:	b510      	push	{r4, lr}
    1566:	b082      	sub	sp, #8
    1568:	0004      	movs	r4, r0
    uint16_t period = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    156a:	220a      	movs	r2, #10
    156c:	2100      	movs	r1, #0
    156e:	6800      	ldr	r0, [r0, #0]
    1570:	4b0c      	ldr	r3, [pc, #48]	; (15a4 <Parser_LoraLinkCheck+0x40>)
    1572:	4798      	blx	r3
    1574:	466b      	mov	r3, sp
    1576:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    1578:	4a0b      	ldr	r2, [pc, #44]	; (15a8 <Parser_LoraLinkCheck+0x44>)
    157a:	2105      	movs	r1, #5
    157c:	6820      	ldr	r0, [r4, #0]
    157e:	4b0b      	ldr	r3, [pc, #44]	; (15ac <Parser_LoraLinkCheck+0x48>)
    1580:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1582:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    1584:	2800      	cmp	r0, #0
    1586:	d105      	bne.n	1594 <Parser_LoraLinkCheck+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1588:	009b      	lsls	r3, r3, #2
    158a:	4a09      	ldr	r2, [pc, #36]	; (15b0 <Parser_LoraLinkCheck+0x4c>)
    158c:	589b      	ldr	r3, [r3, r2]
    158e:	6163      	str	r3, [r4, #20]
}
    1590:	b002      	add	sp, #8
    1592:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(LINK_CHECK_PERIOD,&period);      
    1594:	466b      	mov	r3, sp
    1596:	1d99      	adds	r1, r3, #6
    1598:	2019      	movs	r0, #25
    159a:	4b06      	ldr	r3, [pc, #24]	; (15b4 <Parser_LoraLinkCheck+0x50>)
    159c:	4798      	blx	r3
    159e:	0003      	movs	r3, r0
    15a0:	e7f2      	b.n	1588 <Parser_LoraLinkCheck+0x24>
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	00017e11 	.word	0x00017e11
    15a8:	0000ffff 	.word	0x0000ffff
    15ac:	00002741 	.word	0x00002741
    15b0:	0001d560 	.word	0x0001d560
    15b4:	00011439 	.word	0x00011439

000015b8 <Parser_LoraGetAggregatedDutyCycle>:
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	0006      	movs	r6, r0
    LORAWAN_GetAttr(AGGREGATED_DUTYCYCLE, NULL, &aggregatedDutyCycle);
    15be:	466b      	mov	r3, sp
    15c0:	1d9d      	adds	r5, r3, #6
    15c2:	002a      	movs	r2, r5
    15c4:	2100      	movs	r1, #0
    15c6:	2020      	movs	r0, #32
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    15ca:	4798      	blx	r3
    utoa(aggregatedDutyCycle, aParserData,  10);
    15cc:	4c05      	ldr	r4, [pc, #20]	; (15e4 <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    15ce:	8828      	ldrh	r0, [r5, #0]
    15d0:	220a      	movs	r2, #10
    15d2:	0021      	movs	r1, r4
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <Parser_LoraGetAggregatedDutyCycle+0x30>)
    15d6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    15d8:	6174      	str	r4, [r6, #20]
}
    15da:	b002      	add	sp, #8
    15dc:	bd70      	pop	{r4, r5, r6, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	0000f489 	.word	0x0000f489
    15e4:	20000fac 	.word	0x20000fac
    15e8:	00017ec9 	.word	0x00017ec9

000015ec <Parser_LoraSetAggregatedDutyCycle>:
{
    15ec:	b510      	push	{r4, lr}
    15ee:	b082      	sub	sp, #8
    15f0:	0004      	movs	r4, r0
    uint16_t aggregatedDutyCycle = atoi(pParserCmdInfo->pParam1);
    15f2:	6800      	ldr	r0, [r0, #0]
    15f4:	4b0c      	ldr	r3, [pc, #48]	; (1628 <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    15f6:	4798      	blx	r3
    15f8:	466b      	mov	r3, sp
    15fa:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    15fc:	22ff      	movs	r2, #255	; 0xff
    15fe:	2102      	movs	r1, #2
    1600:	6820      	ldr	r0, [r4, #0]
    1602:	4b0a      	ldr	r3, [pc, #40]	; (162c <Parser_LoraSetAggregatedDutyCycle+0x40>)
    1604:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1606:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    1608:	2800      	cmp	r0, #0
    160a:	d105      	bne.n	1618 <Parser_LoraSetAggregatedDutyCycle+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    160c:	009b      	lsls	r3, r3, #2
    160e:	4a08      	ldr	r2, [pc, #32]	; (1630 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    1610:	589b      	ldr	r3, [r3, r2]
    1612:	6163      	str	r3, [r4, #20]
}
    1614:	b002      	add	sp, #8
    1616:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(AGGREGATED_DUTYCYCLE,&aggregatedDutyCycle);
    1618:	466b      	mov	r3, sp
    161a:	1d99      	adds	r1, r3, #6
    161c:	2020      	movs	r0, #32
    161e:	4b05      	ldr	r3, [pc, #20]	; (1634 <Parser_LoraSetAggregatedDutyCycle+0x48>)
    1620:	4798      	blx	r3
    1622:	0003      	movs	r3, r0
    1624:	e7f2      	b.n	160c <Parser_LoraSetAggregatedDutyCycle+0x20>
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	00017595 	.word	0x00017595
    162c:	00002741 	.word	0x00002741
    1630:	0001d560 	.word	0x0001d560
    1634:	00011439 	.word	0x00011439

00001638 <Parser_LoraSetCryptoDevEnabled>:
{
    1638:	b510      	push	{r4, lr}
    163a:	b082      	sub	sp, #8
    163c:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    163e:	6800      	ldr	r0, [r0, #0]
    1640:	4b09      	ldr	r3, [pc, #36]	; (1668 <Parser_LoraSetCryptoDevEnabled+0x30>)
    1642:	4798      	blx	r3
    1644:	466b      	mov	r3, sp
    1646:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    1648:	230a      	movs	r3, #10
	if (validationVal < 2U)
    164a:	2801      	cmp	r0, #1
    164c:	d905      	bls.n	165a <Parser_LoraSetCryptoDevEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    164e:	009b      	lsls	r3, r3, #2
    1650:	4a06      	ldr	r2, [pc, #24]	; (166c <Parser_LoraSetCryptoDevEnabled+0x34>)
    1652:	589b      	ldr	r3, [r3, r2]
    1654:	6163      	str	r3, [r4, #20]
}
    1656:	b002      	add	sp, #8
    1658:	bd10      	pop	{r4, pc}
		returnVal = LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &validationVal);
    165a:	466b      	mov	r3, sp
    165c:	1dd9      	adds	r1, r3, #7
    165e:	2040      	movs	r0, #64	; 0x40
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <Parser_LoraSetCryptoDevEnabled+0x38>)
    1662:	4798      	blx	r3
    1664:	0003      	movs	r3, r0
    1666:	e7f2      	b.n	164e <Parser_LoraSetCryptoDevEnabled+0x16>
    1668:	00002815 	.word	0x00002815
    166c:	0001d560 	.word	0x0001d560
    1670:	00011439 	.word	0x00011439

00001674 <Parser_LoraGetMacStatus>:
{
    1674:	b530      	push	{r4, r5, lr}
    1676:	b083      	sub	sp, #12
    1678:	0005      	movs	r5, r0
    LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &macStatusMask);
    167a:	aa01      	add	r2, sp, #4
    167c:	2100      	movs	r1, #0
    167e:	2021      	movs	r0, #33	; 0x21
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <Parser_LoraGetMacStatus+0x34>)
    1682:	4798      	blx	r3
    tempBuff[3] = (uint8_t)macStatusMask;
    1684:	9b01      	ldr	r3, [sp, #4]
    1686:	466a      	mov	r2, sp
    1688:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(macStatusMask >> 8);
    168a:	0a1a      	lsrs	r2, r3, #8
    168c:	4669      	mov	r1, sp
    168e:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(macStatusMask >> 16);
    1690:	0c1a      	lsrs	r2, r3, #16
    1692:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(macStatusMask >> 24);    
    1694:	0e1b      	lsrs	r3, r3, #24
    1696:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    1698:	4c04      	ldr	r4, [pc, #16]	; (16ac <Parser_LoraGetMacStatus+0x38>)
    169a:	0022      	movs	r2, r4
    169c:	2004      	movs	r0, #4
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <Parser_LoraGetMacStatus+0x3c>)
    16a0:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    16a2:	616c      	str	r4, [r5, #20]
}
    16a4:	b003      	add	sp, #12
    16a6:	bd30      	pop	{r4, r5, pc}
    16a8:	0000f489 	.word	0x0000f489
    16ac:	20000fac 	.word	0x20000fac
    16b0:	0000260d 	.word	0x0000260d

000016b4 <Parser_LoraSetBatLevel>:
{
    16b4:	b510      	push	{r4, lr}
    16b6:	b082      	sub	sp, #8
    16b8:	0004      	movs	r4, r0
    uint8_t batLevel = atoi(pParserCmdInfo->pParam1);
    16ba:	6800      	ldr	r0, [r0, #0]
    16bc:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <Parser_LoraSetBatLevel+0x3c>)
    16be:	4798      	blx	r3
    16c0:	466b      	mov	r3, sp
    16c2:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    16c4:	22ff      	movs	r2, #255	; 0xff
    16c6:	2103      	movs	r1, #3
    16c8:	6820      	ldr	r0, [r4, #0]
    16ca:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <Parser_LoraSetBatLevel+0x40>)
    16cc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    16ce:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    16d0:	2800      	cmp	r0, #0
    16d2:	d105      	bne.n	16e0 <Parser_LoraSetBatLevel+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    16d4:	009b      	lsls	r3, r3, #2
    16d6:	4a08      	ldr	r2, [pc, #32]	; (16f8 <Parser_LoraSetBatLevel+0x44>)
    16d8:	589b      	ldr	r3, [r3, r2]
    16da:	6163      	str	r3, [r4, #20]
}
    16dc:	b002      	add	sp, #8
    16de:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(BATTERY, &batLevel);
    16e0:	466b      	mov	r3, sp
    16e2:	1dd9      	adds	r1, r3, #7
    16e4:	2018      	movs	r0, #24
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <Parser_LoraSetBatLevel+0x48>)
    16e8:	4798      	blx	r3
    16ea:	0003      	movs	r3, r0
    16ec:	e7f2      	b.n	16d4 <Parser_LoraSetBatLevel+0x20>
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00017595 	.word	0x00017595
    16f4:	00002741 	.word	0x00002741
    16f8:	0001d560 	.word	0x0001d560
    16fc:	00011439 	.word	0x00011439

00001700 <Parser_LoraSetReTxNb>:
{
    1700:	b510      	push	{r4, lr}
    1702:	b082      	sub	sp, #8
    1704:	0004      	movs	r4, r0
    uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    1706:	6800      	ldr	r0, [r0, #0]
    1708:	4b0c      	ldr	r3, [pc, #48]	; (173c <Parser_LoraSetReTxNb+0x3c>)
    170a:	4798      	blx	r3
    170c:	466b      	mov	r3, sp
    170e:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    1710:	22ff      	movs	r2, #255	; 0xff
    1712:	2103      	movs	r1, #3
    1714:	6820      	ldr	r0, [r4, #0]
    1716:	4b0a      	ldr	r3, [pc, #40]	; (1740 <Parser_LoraSetReTxNb+0x40>)
    1718:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    171a:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    171c:	2800      	cmp	r0, #0
    171e:	d105      	bne.n	172c <Parser_LoraSetReTxNb+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1720:	009b      	lsls	r3, r3, #2
    1722:	4a08      	ldr	r2, [pc, #32]	; (1744 <Parser_LoraSetReTxNb+0x44>)
    1724:	589b      	ldr	r3, [r3, r2]
    1726:	6163      	str	r3, [r4, #20]
}
    1728:	b002      	add	sp, #8
    172a:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CNF_RETRANSMISSION_NUM,&reTxNb);
    172c:	466b      	mov	r3, sp
    172e:	1dd9      	adds	r1, r3, #7
    1730:	2013      	movs	r0, #19
    1732:	4b05      	ldr	r3, [pc, #20]	; (1748 <Parser_LoraSetReTxNb+0x48>)
    1734:	4798      	blx	r3
    1736:	0003      	movs	r3, r0
    1738:	e7f2      	b.n	1720 <Parser_LoraSetReTxNb+0x20>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00017595 	.word	0x00017595
    1740:	00002741 	.word	0x00002741
    1744:	0001d560 	.word	0x0001d560
    1748:	00011439 	.word	0x00011439

0000174c <Parser_LoraSetRepsNb>:
{
    174c:	b510      	push	{r4, lr}
    174e:	b082      	sub	sp, #8
    1750:	0004      	movs	r4, r0
	uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    1752:	6800      	ldr	r0, [r0, #0]
    1754:	4b0c      	ldr	r3, [pc, #48]	; (1788 <Parser_LoraSetRepsNb+0x3c>)
    1756:	4798      	blx	r3
    1758:	466b      	mov	r3, sp
    175a:	71d8      	strb	r0, [r3, #7]
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    175c:	22ff      	movs	r2, #255	; 0xff
    175e:	2103      	movs	r1, #3
    1760:	6820      	ldr	r0, [r4, #0]
    1762:	4b0a      	ldr	r3, [pc, #40]	; (178c <Parser_LoraSetRepsNb+0x40>)
    1764:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1766:	230a      	movs	r3, #10
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    1768:	2800      	cmp	r0, #0
    176a:	d105      	bne.n	1778 <Parser_LoraSetRepsNb+0x2c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    176c:	009b      	lsls	r3, r3, #2
    176e:	4a08      	ldr	r2, [pc, #32]	; (1790 <Parser_LoraSetRepsNb+0x44>)
    1770:	589b      	ldr	r3, [r3, r2]
    1772:	6163      	str	r3, [r4, #20]
}
    1774:	b002      	add	sp, #8
    1776:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(UNCNF_REPETITION_NUM,&reTxNb);
    1778:	466b      	mov	r3, sp
    177a:	1dd9      	adds	r1, r3, #7
    177c:	2014      	movs	r0, #20
    177e:	4b05      	ldr	r3, [pc, #20]	; (1794 <Parser_LoraSetRepsNb+0x48>)
    1780:	4798      	blx	r3
    1782:	0003      	movs	r3, r0
    1784:	e7f2      	b.n	176c <Parser_LoraSetRepsNb+0x20>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	00017595 	.word	0x00017595
    178c:	00002741 	.word	0x00002741
    1790:	0001d560 	.word	0x0001d560
    1794:	00011439 	.word	0x00011439

00001798 <Parser_LoraGetReTxNb>:
{
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	b082      	sub	sp, #8
    179c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(CNF_RETRANSMISSION_NUM, NULL, &reTxNb);
    179e:	466b      	mov	r3, sp
    17a0:	1ddd      	adds	r5, r3, #7
    17a2:	002a      	movs	r2, r5
    17a4:	2100      	movs	r1, #0
    17a6:	2013      	movs	r0, #19
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <Parser_LoraGetReTxNb+0x28>)
    17aa:	4798      	blx	r3
    utoa(reTxNb, aParserData, 10);
    17ac:	4c05      	ldr	r4, [pc, #20]	; (17c4 <Parser_LoraGetReTxNb+0x2c>)
    17ae:	7828      	ldrb	r0, [r5, #0]
    17b0:	220a      	movs	r2, #10
    17b2:	0021      	movs	r1, r4
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <Parser_LoraGetReTxNb+0x30>)
    17b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    17b8:	6174      	str	r4, [r6, #20]
}
    17ba:	b002      	add	sp, #8
    17bc:	bd70      	pop	{r4, r5, r6, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	0000f489 	.word	0x0000f489
    17c4:	20000fac 	.word	0x20000fac
    17c8:	00017ec9 	.word	0x00017ec9

000017cc <Parser_LoraGetRepsNb>:
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	0006      	movs	r6, r0
	LORAWAN_GetAttr(UNCNF_REPETITION_NUM, NULL, &reTxNb);
    17d2:	466b      	mov	r3, sp
    17d4:	1ddd      	adds	r5, r3, #7
    17d6:	002a      	movs	r2, r5
    17d8:	2100      	movs	r1, #0
    17da:	2014      	movs	r0, #20
    17dc:	4b05      	ldr	r3, [pc, #20]	; (17f4 <Parser_LoraGetRepsNb+0x28>)
    17de:	4798      	blx	r3
	utoa(reTxNb, aParserData, 10);
    17e0:	4c05      	ldr	r4, [pc, #20]	; (17f8 <Parser_LoraGetRepsNb+0x2c>)
    17e2:	7828      	ldrb	r0, [r5, #0]
    17e4:	220a      	movs	r2, #10
    17e6:	0021      	movs	r1, r4
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <Parser_LoraGetRepsNb+0x30>)
    17ea:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    17ec:	6174      	str	r4, [r6, #20]
}
    17ee:	b002      	add	sp, #8
    17f0:	bd70      	pop	{r4, r5, r6, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	0000f489 	.word	0x0000f489
    17f8:	20000fac 	.word	0x20000fac
    17fc:	00017ec9 	.word	0x00017ec9

00001800 <Parser_LoraGetLinkCheckMargin>:
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	b082      	sub	sp, #8
    1804:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_MARGIN, NULL, &mrgn);
    1806:	466b      	mov	r3, sp
    1808:	1ddd      	adds	r5, r3, #7
    180a:	002a      	movs	r2, r5
    180c:	2100      	movs	r1, #0
    180e:	2022      	movs	r0, #34	; 0x22
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <Parser_LoraGetLinkCheckMargin+0x28>)
    1812:	4798      	blx	r3
    utoa(mrgn, aParserData,  10);
    1814:	4c05      	ldr	r4, [pc, #20]	; (182c <Parser_LoraGetLinkCheckMargin+0x2c>)
    1816:	7828      	ldrb	r0, [r5, #0]
    1818:	220a      	movs	r2, #10
    181a:	0021      	movs	r1, r4
    181c:	4b04      	ldr	r3, [pc, #16]	; (1830 <Parser_LoraGetLinkCheckMargin+0x30>)
    181e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1820:	6174      	str	r4, [r6, #20]
}
    1822:	b002      	add	sp, #8
    1824:	bd70      	pop	{r4, r5, r6, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	0000f489 	.word	0x0000f489
    182c:	20000fac 	.word	0x20000fac
    1830:	00017ec9 	.word	0x00017ec9

00001834 <Parser_LoraGetLinkCheckGwCnt>:
{
    1834:	b570      	push	{r4, r5, r6, lr}
    1836:	b082      	sub	sp, #8
    1838:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_GWCNT, NULL, &gwCnt);
    183a:	466b      	mov	r3, sp
    183c:	1ddd      	adds	r5, r3, #7
    183e:	002a      	movs	r2, r5
    1840:	2100      	movs	r1, #0
    1842:	2023      	movs	r0, #35	; 0x23
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <Parser_LoraGetLinkCheckGwCnt+0x28>)
    1846:	4798      	blx	r3
    utoa(gwCnt, aParserData, 10);
    1848:	4c05      	ldr	r4, [pc, #20]	; (1860 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    184a:	7828      	ldrb	r0, [r5, #0]
    184c:	220a      	movs	r2, #10
    184e:	0021      	movs	r1, r4
    1850:	4b04      	ldr	r3, [pc, #16]	; (1864 <Parser_LoraGetLinkCheckGwCnt+0x30>)
    1852:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1854:	6174      	str	r4, [r6, #20]
}
    1856:	b002      	add	sp, #8
    1858:	bd70      	pop	{r4, r5, r6, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	0000f489 	.word	0x0000f489
    1860:	20000fac 	.word	0x20000fac
    1864:	00017ec9 	.word	0x00017ec9

00001868 <Parser_LoraSetAutoReply>:
{
    1868:	b510      	push	{r4, lr}
    186a:	b082      	sub	sp, #8
    186c:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    186e:	6800      	ldr	r0, [r0, #0]
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <Parser_LoraSetAutoReply+0x30>)
    1872:	4798      	blx	r3
    1874:	466b      	mov	r3, sp
    1876:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1878:	230a      	movs	r3, #10
    if(validationVal < 2U)
    187a:	2801      	cmp	r0, #1
    187c:	d905      	bls.n	188a <Parser_LoraSetAutoReply+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    187e:	009b      	lsls	r3, r3, #2
    1880:	4a06      	ldr	r2, [pc, #24]	; (189c <Parser_LoraSetAutoReply+0x34>)
    1882:	589b      	ldr	r3, [r3, r2]
    1884:	6163      	str	r3, [r4, #20]
}
    1886:	b002      	add	sp, #8
    1888:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(AUTOREPLY, &validationVal);      
    188a:	466b      	mov	r3, sp
    188c:	1dd9      	adds	r1, r3, #7
    188e:	2017      	movs	r0, #23
    1890:	4b03      	ldr	r3, [pc, #12]	; (18a0 <Parser_LoraSetAutoReply+0x38>)
    1892:	4798      	blx	r3
    1894:	0003      	movs	r3, r0
    1896:	e7f2      	b.n	187e <Parser_LoraSetAutoReply+0x16>
    1898:	00002815 	.word	0x00002815
    189c:	0001d560 	.word	0x0001d560
    18a0:	00011439 	.word	0x00011439

000018a4 <Parser_LoraGetAutoReply>:
{
    18a4:	b530      	push	{r4, r5, lr}
    18a6:	b083      	sub	sp, #12
    18a8:	0005      	movs	r5, r0
    LORAWAN_GetAttr(AUTOREPLY, NULL, &arEnabled);
    18aa:	466b      	mov	r3, sp
    18ac:	1ddc      	adds	r4, r3, #7
    18ae:	0022      	movs	r2, r4
    18b0:	2100      	movs	r1, #0
    18b2:	2017      	movs	r0, #23
    18b4:	4b04      	ldr	r3, [pc, #16]	; (18c8 <Parser_LoraGetAutoReply+0x24>)
    18b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[arEnabled];
    18b8:	7823      	ldrb	r3, [r4, #0]
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	4a03      	ldr	r2, [pc, #12]	; (18cc <Parser_LoraGetAutoReply+0x28>)
    18be:	589b      	ldr	r3, [r3, r2]
    18c0:	616b      	str	r3, [r5, #20]
}
    18c2:	b003      	add	sp, #12
    18c4:	bd30      	pop	{r4, r5, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	0000f489 	.word	0x0000f489
    18cc:	0001d540 	.word	0x0001d540

000018d0 <Parser_LoraSetRxDelay1>:
{
    18d0:	b510      	push	{r4, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	0004      	movs	r4, r0
    uint16_t rxDelay1 = atoi(pParserCmdInfo->pParam1);
    18d6:	6800      	ldr	r0, [r0, #0]
    18d8:	4b0c      	ldr	r3, [pc, #48]	; (190c <Parser_LoraSetRxDelay1+0x3c>)
    18da:	4798      	blx	r3
    18dc:	466b      	mov	r3, sp
    18de:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    18e0:	4a0b      	ldr	r2, [pc, #44]	; (1910 <Parser_LoraSetRxDelay1+0x40>)
    18e2:	2105      	movs	r1, #5
    18e4:	6820      	ldr	r0, [r4, #0]
    18e6:	4b0b      	ldr	r3, [pc, #44]	; (1914 <Parser_LoraSetRxDelay1+0x44>)
    18e8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    18ea:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    18ec:	2800      	cmp	r0, #0
    18ee:	d105      	bne.n	18fc <Parser_LoraSetRxDelay1+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    18f0:	009b      	lsls	r3, r3, #2
    18f2:	4a09      	ldr	r2, [pc, #36]	; (1918 <Parser_LoraSetRxDelay1+0x48>)
    18f4:	589b      	ldr	r3, [r3, r2]
    18f6:	6163      	str	r3, [r4, #20]
}
    18f8:	b002      	add	sp, #8
    18fa:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(RX_DELAY1,&rxDelay1);        
    18fc:	466b      	mov	r3, sp
    18fe:	1d99      	adds	r1, r3, #6
    1900:	200c      	movs	r0, #12
    1902:	4b06      	ldr	r3, [pc, #24]	; (191c <Parser_LoraSetRxDelay1+0x4c>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    1908:	e7f2      	b.n	18f0 <Parser_LoraSetRxDelay1+0x20>
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00017595 	.word	0x00017595
    1910:	0000ffff 	.word	0x0000ffff
    1914:	00002741 	.word	0x00002741
    1918:	0001d560 	.word	0x0001d560
    191c:	00011439 	.word	0x00011439

00001920 <Parser_LoraGetRxDelay1>:
{
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	b082      	sub	sp, #8
    1924:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY1,NULL,&rxDelay1);
    1926:	466b      	mov	r3, sp
    1928:	1d9d      	adds	r5, r3, #6
    192a:	002a      	movs	r2, r5
    192c:	2100      	movs	r1, #0
    192e:	200c      	movs	r0, #12
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <Parser_LoraGetRxDelay1+0x28>)
    1932:	4798      	blx	r3
    utoa(rxDelay1, aParserData, 10);
    1934:	4c05      	ldr	r4, [pc, #20]	; (194c <Parser_LoraGetRxDelay1+0x2c>)
    1936:	8828      	ldrh	r0, [r5, #0]
    1938:	220a      	movs	r2, #10
    193a:	0021      	movs	r1, r4
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <Parser_LoraGetRxDelay1+0x30>)
    193e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1940:	6174      	str	r4, [r6, #20]
}
    1942:	b002      	add	sp, #8
    1944:	bd70      	pop	{r4, r5, r6, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	0000f489 	.word	0x0000f489
    194c:	20000fac 	.word	0x20000fac
    1950:	00017ec9 	.word	0x00017ec9

00001954 <Parser_LoraGetRxDelay2>:
{
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	b082      	sub	sp, #8
    1958:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY2, NULL, &rxDelay2);
    195a:	466b      	mov	r3, sp
    195c:	1d9d      	adds	r5, r3, #6
    195e:	002a      	movs	r2, r5
    1960:	2100      	movs	r1, #0
    1962:	201f      	movs	r0, #31
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <Parser_LoraGetRxDelay2+0x28>)
    1966:	4798      	blx	r3
    utoa(rxDelay2, aParserData, 10);
    1968:	4c05      	ldr	r4, [pc, #20]	; (1980 <Parser_LoraGetRxDelay2+0x2c>)
    196a:	8828      	ldrh	r0, [r5, #0]
    196c:	220a      	movs	r2, #10
    196e:	0021      	movs	r1, r4
    1970:	4b04      	ldr	r3, [pc, #16]	; (1984 <Parser_LoraGetRxDelay2+0x30>)
    1972:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1974:	6174      	str	r4, [r6, #20]
}
    1976:	b002      	add	sp, #8
    1978:	bd70      	pop	{r4, r5, r6, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	0000f489 	.word	0x0000f489
    1980:	20000fac 	.word	0x20000fac
    1984:	00017ec9 	.word	0x00017ec9

00001988 <Parser_LoraGetIsm>:
{
    1988:	b530      	push	{r4, r5, lr}
    198a:	b083      	sub	sp, #12
    198c:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    198e:	466b      	mov	r3, sp
    1990:	1ddc      	adds	r4, r3, #7
    1992:	0022      	movs	r2, r4
    1994:	2100      	movs	r1, #0
    1996:	2024      	movs	r0, #36	; 0x24
    1998:	4b04      	ldr	r3, [pc, #16]	; (19ac <Parser_LoraGetIsm+0x24>)
    199a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseIsmBand[ismBand];
    199c:	7823      	ldrb	r3, [r4, #0]
    199e:	009b      	lsls	r3, r3, #2
    19a0:	4a03      	ldr	r2, [pc, #12]	; (19b0 <Parser_LoraGetIsm+0x28>)
    19a2:	589b      	ldr	r3, [r3, r2]
    19a4:	616b      	str	r3, [r5, #20]
}
    19a6:	b003      	add	sp, #12
    19a8:	bd30      	pop	{r4, r5, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	0000f489 	.word	0x0000f489
    19b0:	0001d4ec 	.word	0x0001d4ec

000019b4 <Parser_LoraSetClass>:
{
    19b4:	b510      	push	{r4, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	0004      	movs	r4, r0
	if ((pParserCmdInfo->pParam1[0] == 'A') || (pParserCmdInfo->pParam1[0] == 'a'))
    19ba:	6803      	ldr	r3, [r0, #0]
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	2220      	movs	r2, #32
    19c0:	4393      	bics	r3, r2
    19c2:	2b41      	cmp	r3, #65	; 0x41
    19c4:	d008      	beq.n	19d8 <Parser_LoraSetClass+0x24>
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    19c6:	200a      	movs	r0, #10
	else if ((pParserCmdInfo->pParam1[0] == 'C') || (pParserCmdInfo->pParam1[0] == 'c'))
    19c8:	2b43      	cmp	r3, #67	; 0x43
    19ca:	d00d      	beq.n	19e8 <Parser_LoraSetClass+0x34>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    19cc:	0080      	lsls	r0, r0, #2
    19ce:	4b0a      	ldr	r3, [pc, #40]	; (19f8 <Parser_LoraSetClass+0x44>)
    19d0:	58c3      	ldr	r3, [r0, r3]
    19d2:	6163      	str	r3, [r4, #20]
}
    19d4:	b002      	add	sp, #8
    19d6:	bd10      	pop	{r4, pc}
		edClass = CLASS_A;
    19d8:	466b      	mov	r3, sp
    19da:	1dd9      	adds	r1, r3, #7
    19dc:	2301      	movs	r3, #1
    19de:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    19e0:	201a      	movs	r0, #26
    19e2:	4b06      	ldr	r3, [pc, #24]	; (19fc <Parser_LoraSetClass+0x48>)
    19e4:	4798      	blx	r3
    19e6:	e7f1      	b.n	19cc <Parser_LoraSetClass+0x18>
		edClass = CLASS_C;
    19e8:	466b      	mov	r3, sp
    19ea:	1dd9      	adds	r1, r3, #7
    19ec:	2304      	movs	r3, #4
    19ee:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    19f0:	3010      	adds	r0, #16
    19f2:	4b02      	ldr	r3, [pc, #8]	; (19fc <Parser_LoraSetClass+0x48>)
    19f4:	4798      	blx	r3
    19f6:	e7e9      	b.n	19cc <Parser_LoraSetClass+0x18>
    19f8:	0001d560 	.word	0x0001d560
    19fc:	00011439 	.word	0x00011439

00001a00 <Parser_LoraGetClass>:
{
    1a00:	b530      	push	{r4, r5, lr}
    1a02:	b083      	sub	sp, #12
    1a04:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    1a06:	466b      	mov	r3, sp
    1a08:	1ddc      	adds	r4, r3, #7
    1a0a:	0022      	movs	r2, r4
    1a0c:	2100      	movs	r1, #0
    1a0e:	201a      	movs	r0, #26
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <Parser_LoraGetClass+0x3c>)
    1a12:	4798      	blx	r3
	switch (edClass)
    1a14:	7823      	ldrb	r3, [r4, #0]
    1a16:	2b02      	cmp	r3, #2
    1a18:	d005      	beq.n	1a26 <Parser_LoraGetClass+0x26>
    1a1a:	2b04      	cmp	r3, #4
    1a1c:	d00a      	beq.n	1a34 <Parser_LoraGetClass+0x34>
    1a1e:	2b01      	cmp	r3, #1
    1a20:	d00a      	beq.n	1a38 <Parser_LoraGetClass+0x38>
			index = 3;
    1a22:	2303      	movs	r3, #3
		break;
    1a24:	e000      	b.n	1a28 <Parser_LoraGetClass+0x28>
			index = 1;
    1a26:	2301      	movs	r3, #1
	pParserCmdInfo->pReplyCmd = (char *)gapParserEdClass[index];
    1a28:	009b      	lsls	r3, r3, #2
    1a2a:	4a05      	ldr	r2, [pc, #20]	; (1a40 <Parser_LoraGetClass+0x40>)
    1a2c:	589b      	ldr	r3, [r3, r2]
    1a2e:	616b      	str	r3, [r5, #20]
}
    1a30:	b003      	add	sp, #12
    1a32:	bd30      	pop	{r4, r5, pc}
			index = 2;
    1a34:	2302      	movs	r3, #2
		break;
    1a36:	e7f7      	b.n	1a28 <Parser_LoraGetClass+0x28>
			index = 0;
    1a38:	2300      	movs	r3, #0
    1a3a:	e7f5      	b.n	1a28 <Parser_LoraGetClass+0x28>
    1a3c:	0000f489 	.word	0x0000f489
    1a40:	0001d550 	.word	0x0001d550

00001a44 <Parser_LoraGetSupportedEdClass>:
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b083      	sub	sp, #12
    1a48:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS_SUPPORTED, NULL, &edClassSupported);
    1a4a:	466b      	mov	r3, sp
    1a4c:	1ddc      	adds	r4, r3, #7
    1a4e:	0022      	movs	r2, r4
    1a50:	2100      	movs	r1, #0
    1a52:	2025      	movs	r0, #37	; 0x25
    1a54:	4b11      	ldr	r3, [pc, #68]	; (1a9c <Parser_LoraGetSupportedEdClass+0x58>)
    1a56:	4798      	blx	r3
	if ((CLASS_A | CLASS_B) == edClassSupported)
    1a58:	7823      	ldrb	r3, [r4, #0]
    1a5a:	2b03      	cmp	r3, #3
    1a5c:	d00a      	beq.n	1a74 <Parser_LoraGetSupportedEdClass+0x30>
	else if  ((CLASS_A | CLASS_C) == edClassSupported)
    1a5e:	2b05      	cmp	r3, #5
    1a60:	d012      	beq.n	1a88 <Parser_LoraGetSupportedEdClass+0x44>
		aParserData[0] = 'A';
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a64:	2241      	movs	r2, #65	; 0x41
    1a66:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '\0';
    1a68:	2200      	movs	r2, #0
    1a6a:	705a      	strb	r2, [r3, #1]
 	pParserCmdInfo->pReplyCmd = aParserData;
    1a6c:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a6e:	616b      	str	r3, [r5, #20]
}
    1a70:	b003      	add	sp, #12
    1a72:	bd30      	pop	{r4, r5, pc}
		aParserData[0] = 'A';
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a76:	2241      	movs	r2, #65	; 0x41
    1a78:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    1a7a:	3a1b      	subs	r2, #27
    1a7c:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'B';
    1a7e:	321c      	adds	r2, #28
    1a80:	709a      	strb	r2, [r3, #2]
		aParserData[3] = '\0';
    1a82:	2200      	movs	r2, #0
    1a84:	70da      	strb	r2, [r3, #3]
    1a86:	e7f1      	b.n	1a6c <Parser_LoraGetSupportedEdClass+0x28>
		aParserData[0] = 'A';
    1a88:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a8a:	2241      	movs	r2, #65	; 0x41
    1a8c:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    1a8e:	3a1b      	subs	r2, #27
    1a90:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'C';
    1a92:	321d      	adds	r2, #29
    1a94:	709a      	strb	r2, [r3, #2]
	    aParserData[3] = '\0';
    1a96:	2200      	movs	r2, #0
    1a98:	70da      	strb	r2, [r3, #3]
    1a9a:	e7e7      	b.n	1a6c <Parser_LoraGetSupportedEdClass+0x28>
    1a9c:	0000f489 	.word	0x0000f489
    1aa0:	20000fac 	.word	0x20000fac

00001aa4 <Parser_LoraSetMcast>:
{
    1aa4:	b530      	push	{r4, r5, lr}
    1aa6:	b083      	sub	sp, #12
    1aa8:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    1aaa:	6800      	ldr	r0, [r0, #0]
    1aac:	4b0c      	ldr	r3, [pc, #48]	; (1ae0 <Parser_LoraSetMcast+0x3c>)
    1aae:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    1ab0:	230a      	movs	r3, #10
	if (validationVal < 2U)
    1ab2:	2801      	cmp	r0, #1
    1ab4:	d905      	bls.n	1ac2 <Parser_LoraSetMcast+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    1ab6:	009b      	lsls	r3, r3, #2
    1ab8:	4a0a      	ldr	r2, [pc, #40]	; (1ae4 <Parser_LoraSetMcast+0x40>)
    1aba:	589b      	ldr	r3, [r3, r2]
    1abc:	6163      	str	r3, [r4, #20]
}
    1abe:	b003      	add	sp, #12
    1ac0:	bd30      	pop	{r4, r5, pc}
		mcastStatus.status = validationVal;
    1ac2:	ad01      	add	r5, sp, #4
    1ac4:	1e43      	subs	r3, r0, #1
    1ac6:	4198      	sbcs	r0, r3
    1ac8:	7068      	strb	r0, [r5, #1]
		mcastStatus.groupId = atoi(pParserCmdInfo->pParam2);
    1aca:	6860      	ldr	r0, [r4, #4]
    1acc:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <Parser_LoraSetMcast+0x44>)
    1ace:	4798      	blx	r3
    1ad0:	7028      	strb	r0, [r5, #0]
		returnVal = LORAWAN_SetMulticastParam(MCAST_ENABLE, &mcastStatus);
    1ad2:	0029      	movs	r1, r5
    1ad4:	2029      	movs	r0, #41	; 0x29
    1ad6:	4b05      	ldr	r3, [pc, #20]	; (1aec <Parser_LoraSetMcast+0x48>)
    1ad8:	4798      	blx	r3
    1ada:	0003      	movs	r3, r0
    1adc:	e7eb      	b.n	1ab6 <Parser_LoraSetMcast+0x12>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	00002815 	.word	0x00002815
    1ae4:	0001d560 	.word	0x0001d560
    1ae8:	00017595 	.word	0x00017595
    1aec:	00012015 	.word	0x00012015

00001af0 <Parser_LoraGetMcast>:
{
    1af0:	b510      	push	{r4, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1af6:	6800      	ldr	r0, [r0, #0]
    1af8:	4b0c      	ldr	r3, [pc, #48]	; (1b2c <Parser_LoraGetMcast+0x3c>)
    1afa:	4798      	blx	r3
    1afc:	466b      	mov	r3, sp
    1afe:	1d99      	adds	r1, r3, #6
    1b00:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_ENABLE, &groupId, &mcastStatus);
    1b02:	1dda      	adds	r2, r3, #7
    1b04:	2029      	movs	r0, #41	; 0x29
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <Parser_LoraGetMcast+0x40>)
    1b08:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1b0a:	2808      	cmp	r0, #8
    1b0c:	d005      	beq.n	1b1a <Parser_LoraGetMcast+0x2a>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1b0e:	0080      	lsls	r0, r0, #2
    1b10:	4b08      	ldr	r3, [pc, #32]	; (1b34 <Parser_LoraGetMcast+0x44>)
    1b12:	58c3      	ldr	r3, [r0, r3]
    1b14:	6163      	str	r3, [r4, #20]
}
    1b16:	b002      	add	sp, #8
    1b18:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[mcastStatus];
    1b1a:	466b      	mov	r3, sp
    1b1c:	3307      	adds	r3, #7
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4a05      	ldr	r2, [pc, #20]	; (1b38 <Parser_LoraGetMcast+0x48>)
    1b24:	589b      	ldr	r3, [r3, r2]
    1b26:	6163      	str	r3, [r4, #20]
    1b28:	e7f5      	b.n	1b16 <Parser_LoraGetMcast+0x26>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00017595 	.word	0x00017595
    1b30:	0000f489 	.word	0x0000f489
    1b34:	0001d560 	.word	0x0001d560
    1b38:	0001d540 	.word	0x0001d540

00001b3c <Parser_LoraGetMcastDownCounter>:
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	b082      	sub	sp, #8
    1b40:	0005      	movs	r5, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1b42:	6800      	ldr	r0, [r0, #0]
    1b44:	4b0c      	ldr	r3, [pc, #48]	; (1b78 <Parser_LoraGetMcastDownCounter+0x3c>)
    1b46:	4798      	blx	r3
    1b48:	466b      	mov	r3, sp
    1b4a:	1cd9      	adds	r1, r3, #3
    1b4c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_FCNT_DOWN, &groupId, &ctr);
    1b4e:	aa01      	add	r2, sp, #4
    1b50:	202d      	movs	r0, #45	; 0x2d
    1b52:	4b0a      	ldr	r3, [pc, #40]	; (1b7c <Parser_LoraGetMcastDownCounter+0x40>)
    1b54:	4798      	blx	r3
    1b56:	0004      	movs	r4, r0
	ultoa(aParserData, ctr, 10U);
    1b58:	220a      	movs	r2, #10
    1b5a:	9901      	ldr	r1, [sp, #4]
    1b5c:	4808      	ldr	r0, [pc, #32]	; (1b80 <Parser_LoraGetMcastDownCounter+0x44>)
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <Parser_LoraGetMcastDownCounter+0x48>)
    1b60:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1b62:	2c08      	cmp	r4, #8
    1b64:	d005      	beq.n	1b72 <Parser_LoraGetMcastDownCounter+0x36>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1b66:	00a4      	lsls	r4, r4, #2
    1b68:	4b07      	ldr	r3, [pc, #28]	; (1b88 <Parser_LoraGetMcastDownCounter+0x4c>)
    1b6a:	58e3      	ldr	r3, [r4, r3]
    1b6c:	616b      	str	r3, [r5, #20]
}
    1b6e:	b002      	add	sp, #8
    1b70:	bd70      	pop	{r4, r5, r6, pc}
		pParserCmdInfo->pReplyCmd = aParserData;
    1b72:	4b03      	ldr	r3, [pc, #12]	; (1b80 <Parser_LoraGetMcastDownCounter+0x44>)
    1b74:	616b      	str	r3, [r5, #20]
    1b76:	e7fa      	b.n	1b6e <Parser_LoraGetMcastDownCounter+0x32>
    1b78:	00017595 	.word	0x00017595
    1b7c:	0000f489 	.word	0x0000f489
    1b80:	20000fac 	.word	0x20000fac
    1b84:	000026c5 	.word	0x000026c5
    1b88:	0001d560 	.word	0x0001d560

00001b8c <Parser_LoraSetMcastDevAddr>:
{
    1b8c:	b530      	push	{r4, r5, lr}
    1b8e:	b085      	sub	sp, #20
    1b90:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1b92:	6800      	ldr	r0, [r0, #0]
    1b94:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <Parser_LoraSetMcastDevAddr+0x68>)
    1b96:	4798      	blx	r3
	int8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1b98:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d105      	bne.n	1baa <Parser_LoraSetMcastDevAddr+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1b9e:	009b      	lsls	r3, r3, #2
    1ba0:	4a15      	ldr	r2, [pc, #84]	; (1bf8 <Parser_LoraSetMcastDevAddr+0x6c>)
    1ba2:	589b      	ldr	r3, [r3, r2]
    1ba4:	6163      	str	r3, [r4, #20]
}
    1ba6:	b005      	add	sp, #20
    1ba8:	bd30      	pop	{r4, r5, pc}
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    1baa:	aa03      	add	r2, sp, #12
    1bac:	6821      	ldr	r1, [r4, #0]
    1bae:	2008      	movs	r0, #8
    1bb0:	4b12      	ldr	r3, [pc, #72]	; (1bfc <Parser_LoraSetMcastDevAddr+0x70>)
    1bb2:	4798      	blx	r3
	int8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1bb4:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    1bb6:	2800      	cmp	r0, #0
    1bb8:	d0f1      	beq.n	1b9e <Parser_LoraSetMcastDevAddr+0x12>
			devMultiAddr = (uint32_t)tempBuff[3];
    1bba:	aa03      	add	r2, sp, #12
    1bbc:	78d0      	ldrb	r0, [r2, #3]
			devMultiAddr += ((uint32_t)tempBuff[2]) << 8;
    1bbe:	7893      	ldrb	r3, [r2, #2]
    1bc0:	021b      	lsls	r3, r3, #8
			devMultiAddr += ((uint32_t)tempBuff[1]) << 16;
    1bc2:	7851      	ldrb	r1, [r2, #1]
    1bc4:	0409      	lsls	r1, r1, #16
    1bc6:	185b      	adds	r3, r3, r1
    1bc8:	181b      	adds	r3, r3, r0
			addr.mcast_dev_addr = devMultiAddr;
    1bca:	ad01      	add	r5, sp, #4
			devMultiAddr += ((uint32_t)tempBuff[0]) << 24;
    1bcc:	7812      	ldrb	r2, [r2, #0]
    1bce:	0612      	lsls	r2, r2, #24
    1bd0:	18d3      	adds	r3, r2, r3
			addr.mcast_dev_addr = devMultiAddr;
    1bd2:	9302      	str	r3, [sp, #8]
			addr.groupId = atoi(pParserCmdInfo->pParam2);
    1bd4:	6860      	ldr	r0, [r4, #4]
    1bd6:	4b0a      	ldr	r3, [pc, #40]	; (1c00 <Parser_LoraSetMcastDevAddr+0x74>)
    1bd8:	4798      	blx	r3
    1bda:	7028      	strb	r0, [r5, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_GROUP_ADDR, &addr);
    1bdc:	0029      	movs	r1, r5
    1bde:	202a      	movs	r0, #42	; 0x2a
    1be0:	4b08      	ldr	r3, [pc, #32]	; (1c04 <Parser_LoraSetMcastDevAddr+0x78>)
    1be2:	4798      	blx	r3
    1be4:	b243      	sxtb	r3, r0
			gParserConfiguredJoinParameters.flags.mcastdevaddr = 1;
    1be6:	4908      	ldr	r1, [pc, #32]	; (1c08 <Parser_LoraSetMcastDevAddr+0x7c>)
    1be8:	780a      	ldrb	r2, [r1, #0]
    1bea:	2040      	movs	r0, #64	; 0x40
    1bec:	4302      	orrs	r2, r0
    1bee:	700a      	strb	r2, [r1, #0]
    1bf0:	e7d5      	b.n	1b9e <Parser_LoraSetMcastDevAddr+0x12>
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	000025d9 	.word	0x000025d9
    1bf8:	0001d560 	.word	0x0001d560
    1bfc:	000028e1 	.word	0x000028e1
    1c00:	00017595 	.word	0x00017595
    1c04:	00012015 	.word	0x00012015
    1c08:	20001dc8 	.word	0x20001dc8

00001c0c <Parser_LoraGetMcastDevAddr>:
{
    1c0c:	b530      	push	{r4, r5, lr}
    1c0e:	b085      	sub	sp, #20
    1c10:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1c12:	6800      	ldr	r0, [r0, #0]
    1c14:	4b10      	ldr	r3, [pc, #64]	; (1c58 <Parser_LoraGetMcastDevAddr+0x4c>)
    1c16:	4798      	blx	r3
    1c18:	466b      	mov	r3, sp
    1c1a:	1dd9      	adds	r1, r3, #7
    1c1c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_GROUP_ADDR, &groupId, &devMultiAddr);
    1c1e:	aa03      	add	r2, sp, #12
    1c20:	202a      	movs	r0, #42	; 0x2a
    1c22:	4b0e      	ldr	r3, [pc, #56]	; (1c5c <Parser_LoraGetMcastDevAddr+0x50>)
    1c24:	4798      	blx	r3
	tempBuff[3] = (uint8_t)devMultiAddr;
    1c26:	9b03      	ldr	r3, [sp, #12]
    1c28:	aa02      	add	r2, sp, #8
    1c2a:	70d3      	strb	r3, [r2, #3]
	tempBuff[2] = (uint8_t)(devMultiAddr >> 8);
    1c2c:	0a19      	lsrs	r1, r3, #8
    1c2e:	7091      	strb	r1, [r2, #2]
	tempBuff[1] = (uint8_t)(devMultiAddr >> 16);
    1c30:	0c19      	lsrs	r1, r3, #16
    1c32:	7051      	strb	r1, [r2, #1]
	tempBuff[0] = (uint8_t)(devMultiAddr >> 24);
    1c34:	0e1b      	lsrs	r3, r3, #24
    1c36:	7013      	strb	r3, [r2, #0]
	if (status == LORAWAN_SUCCESS)
    1c38:	2808      	cmp	r0, #8
    1c3a:	d005      	beq.n	1c48 <Parser_LoraGetMcastDevAddr+0x3c>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1c3c:	0080      	lsls	r0, r0, #2
    1c3e:	4b08      	ldr	r3, [pc, #32]	; (1c60 <Parser_LoraGetMcastDevAddr+0x54>)
    1c40:	58c3      	ldr	r3, [r0, r3]
    1c42:	6163      	str	r3, [r4, #20]
}
    1c44:	b005      	add	sp, #20
    1c46:	bd30      	pop	{r4, r5, pc}
		Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    1c48:	4d06      	ldr	r5, [pc, #24]	; (1c64 <Parser_LoraGetMcastDevAddr+0x58>)
    1c4a:	002a      	movs	r2, r5
    1c4c:	a902      	add	r1, sp, #8
    1c4e:	3804      	subs	r0, #4
    1c50:	4b05      	ldr	r3, [pc, #20]	; (1c68 <Parser_LoraGetMcastDevAddr+0x5c>)
    1c52:	4798      	blx	r3
		pParserCmdInfo->pReplyCmd = aParserData;
    1c54:	6165      	str	r5, [r4, #20]
    1c56:	e7f5      	b.n	1c44 <Parser_LoraGetMcastDevAddr+0x38>
    1c58:	00017595 	.word	0x00017595
    1c5c:	0000f489 	.word	0x0000f489
    1c60:	0001d560 	.word	0x0001d560
    1c64:	20000fac 	.word	0x20000fac
    1c68:	0000260d 	.word	0x0000260d

00001c6c <Parser_LoraSetMcastNwksKey>:
{
    1c6c:	b510      	push	{r4, lr}
    1c6e:	b086      	sub	sp, #24
    1c70:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1c72:	6800      	ldr	r0, [r0, #0]
    1c74:	4b11      	ldr	r3, [pc, #68]	; (1cbc <Parser_LoraSetMcastNwksKey+0x50>)
    1c76:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1c78:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d105      	bne.n	1c8a <Parser_LoraSetMcastNwksKey+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1c7e:	009b      	lsls	r3, r3, #2
    1c80:	4a0f      	ldr	r2, [pc, #60]	; (1cc0 <Parser_LoraSetMcastNwksKey+0x54>)
    1c82:	589b      	ldr	r3, [r3, r2]
    1c84:	6163      	str	r3, [r4, #20]
}
    1c86:	b006      	add	sp, #24
    1c88:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    1c8a:	466b      	mov	r3, sp
    1c8c:	1d5a      	adds	r2, r3, #5
    1c8e:	6821      	ldr	r1, [r4, #0]
    1c90:	2020      	movs	r0, #32
    1c92:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <Parser_LoraSetMcastNwksKey+0x58>)
    1c94:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1c96:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    1c98:	2800      	cmp	r0, #0
    1c9a:	d0f0      	beq.n	1c7e <Parser_LoraSetMcastNwksKey+0x12>
			key.groupId = atoi(pParserCmdInfo->pParam2);
    1c9c:	6860      	ldr	r0, [r4, #4]
    1c9e:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <Parser_LoraSetMcastNwksKey+0x5c>)
    1ca0:	4798      	blx	r3
    1ca2:	a901      	add	r1, sp, #4
    1ca4:	7008      	strb	r0, [r1, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_NWKS_KEY, &key);
    1ca6:	202b      	movs	r0, #43	; 0x2b
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <Parser_LoraSetMcastNwksKey+0x60>)
    1caa:	4798      	blx	r3
    1cac:	0003      	movs	r3, r0
			gParserConfiguredJoinParameters.flags.mcastnwkskey = 1;
    1cae:	4908      	ldr	r1, [pc, #32]	; (1cd0 <Parser_LoraSetMcastNwksKey+0x64>)
    1cb0:	7808      	ldrb	r0, [r1, #0]
    1cb2:	2280      	movs	r2, #128	; 0x80
    1cb4:	4252      	negs	r2, r2
    1cb6:	4302      	orrs	r2, r0
    1cb8:	700a      	strb	r2, [r1, #0]
    1cba:	e7e0      	b.n	1c7e <Parser_LoraSetMcastNwksKey+0x12>
    1cbc:	000025d9 	.word	0x000025d9
    1cc0:	0001d560 	.word	0x0001d560
    1cc4:	000028e1 	.word	0x000028e1
    1cc8:	00017595 	.word	0x00017595
    1ccc:	00012015 	.word	0x00012015
    1cd0:	20001dc8 	.word	0x20001dc8

00001cd4 <Parser_LoraSetMcastAppsKey>:
{
    1cd4:	b510      	push	{r4, lr}
    1cd6:	b086      	sub	sp, #24
    1cd8:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1cda:	6800      	ldr	r0, [r0, #0]
    1cdc:	4b11      	ldr	r3, [pc, #68]	; (1d24 <Parser_LoraSetMcastAppsKey+0x50>)
    1cde:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1ce0:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d105      	bne.n	1cf2 <Parser_LoraSetMcastAppsKey+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1ce6:	009b      	lsls	r3, r3, #2
    1ce8:	4a0f      	ldr	r2, [pc, #60]	; (1d28 <Parser_LoraSetMcastAppsKey+0x54>)
    1cea:	589b      	ldr	r3, [r3, r2]
    1cec:	6163      	str	r3, [r4, #20]
}
    1cee:	b006      	add	sp, #24
    1cf0:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    1cf2:	466b      	mov	r3, sp
    1cf4:	1d5a      	adds	r2, r3, #5
    1cf6:	6821      	ldr	r1, [r4, #0]
    1cf8:	2020      	movs	r0, #32
    1cfa:	4b0c      	ldr	r3, [pc, #48]	; (1d2c <Parser_LoraSetMcastAppsKey+0x58>)
    1cfc:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1cfe:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    1d00:	2800      	cmp	r0, #0
    1d02:	d0f0      	beq.n	1ce6 <Parser_LoraSetMcastAppsKey+0x12>
			key.groupId = atoi(pParserCmdInfo->pParam2);			
    1d04:	6860      	ldr	r0, [r4, #4]
    1d06:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <Parser_LoraSetMcastAppsKey+0x5c>)
    1d08:	4798      	blx	r3
    1d0a:	a901      	add	r1, sp, #4
    1d0c:	7008      	strb	r0, [r1, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_APPS_KEY, &key);
    1d0e:	202c      	movs	r0, #44	; 0x2c
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <Parser_LoraSetMcastAppsKey+0x60>)
    1d12:	4798      	blx	r3
    1d14:	0003      	movs	r3, r0
			gParserConfiguredJoinParameters.flags.mcastappskey = 1;
    1d16:	4908      	ldr	r1, [pc, #32]	; (1d38 <Parser_LoraSetMcastAppsKey+0x64>)
    1d18:	784a      	ldrb	r2, [r1, #1]
    1d1a:	2001      	movs	r0, #1
    1d1c:	4302      	orrs	r2, r0
    1d1e:	704a      	strb	r2, [r1, #1]
    1d20:	e7e1      	b.n	1ce6 <Parser_LoraSetMcastAppsKey+0x12>
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	000025d9 	.word	0x000025d9
    1d28:	0001d560 	.word	0x0001d560
    1d2c:	000028e1 	.word	0x000028e1
    1d30:	00017595 	.word	0x00017595
    1d34:	00012015 	.word	0x00012015
    1d38:	20001dc8 	.word	0x20001dc8

00001d3c <Parser_LoraSetMcastFreq>:
{
    1d3c:	b510      	push	{r4, lr}
    1d3e:	b082      	sub	sp, #8
    1d40:	0004      	movs	r4, r0
	key.dlFrequency = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    1d42:	220a      	movs	r2, #10
    1d44:	2100      	movs	r1, #0
    1d46:	6800      	ldr	r0, [r0, #0]
    1d48:	4b10      	ldr	r3, [pc, #64]	; (1d8c <Parser_LoraSetMcastFreq+0x50>)
    1d4a:	4798      	blx	r3
    1d4c:	9001      	str	r0, [sp, #4]
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1d4e:	2201      	movs	r2, #1
    1d50:	4252      	negs	r2, r2
    1d52:	210a      	movs	r1, #10
    1d54:	6820      	ldr	r0, [r4, #0]
    1d56:	4b0e      	ldr	r3, [pc, #56]	; (1d90 <Parser_LoraSetMcastFreq+0x54>)
    1d58:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1d5a:	230a      	movs	r3, #10
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1d5c:	2800      	cmp	r0, #0
    1d5e:	d105      	bne.n	1d6c <Parser_LoraSetMcastFreq+0x30>
	 pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1d60:	009b      	lsls	r3, r3, #2
    1d62:	4a0c      	ldr	r2, [pc, #48]	; (1d94 <Parser_LoraSetMcastFreq+0x58>)
    1d64:	589b      	ldr	r3, [r3, r2]
    1d66:	6163      	str	r3, [r4, #20]
}
    1d68:	b002      	add	sp, #8
    1d6a:	bd10      	pop	{r4, pc}
		  key.groupId = atoi(pParserCmdInfo->pParam2);
    1d6c:	6860      	ldr	r0, [r4, #4]
    1d6e:	4b0a      	ldr	r3, [pc, #40]	; (1d98 <Parser_LoraSetMcastFreq+0x5c>)
    1d70:	4798      	blx	r3
    1d72:	466b      	mov	r3, sp
    1d74:	7018      	strb	r0, [r3, #0]
		  statusIdx = LORAWAN_SetMulticastParam(MCAST_FREQUENCY,(void*)&key);
    1d76:	4669      	mov	r1, sp
    1d78:	2030      	movs	r0, #48	; 0x30
    1d7a:	4b08      	ldr	r3, [pc, #32]	; (1d9c <Parser_LoraSetMcastFreq+0x60>)
    1d7c:	4798      	blx	r3
    1d7e:	0003      	movs	r3, r0
		  gParserConfiguredJoinParameters.flags.mcastfreq = 1;
    1d80:	4907      	ldr	r1, [pc, #28]	; (1da0 <Parser_LoraSetMcastFreq+0x64>)
    1d82:	784a      	ldrb	r2, [r1, #1]
    1d84:	2002      	movs	r0, #2
    1d86:	4302      	orrs	r2, r0
    1d88:	704a      	strb	r2, [r1, #1]
    1d8a:	e7e9      	b.n	1d60 <Parser_LoraSetMcastFreq+0x24>
    1d8c:	00017e11 	.word	0x00017e11
    1d90:	00002741 	.word	0x00002741
    1d94:	0001d560 	.word	0x0001d560
    1d98:	00017595 	.word	0x00017595
    1d9c:	00012015 	.word	0x00012015
    1da0:	20001dc8 	.word	0x20001dc8

00001da4 <Parser_LoraGetMcastFreq>:
{
    1da4:	b570      	push	{r4, r5, r6, lr}
    1da6:	b082      	sub	sp, #8
    1da8:	0005      	movs	r5, r0
  uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1daa:	6800      	ldr	r0, [r0, #0]
    1dac:	4b0c      	ldr	r3, [pc, #48]	; (1de0 <Parser_LoraGetMcastFreq+0x3c>)
    1dae:	4798      	blx	r3
    1db0:	466b      	mov	r3, sp
    1db2:	1cd9      	adds	r1, r3, #3
    1db4:	7008      	strb	r0, [r1, #0]
  status = LORAWAN_GetAttr(MCAST_FREQUENCY,&groupId,&freq);
    1db6:	aa01      	add	r2, sp, #4
    1db8:	2030      	movs	r0, #48	; 0x30
    1dba:	4b0a      	ldr	r3, [pc, #40]	; (1de4 <Parser_LoraGetMcastFreq+0x40>)
    1dbc:	4798      	blx	r3
    1dbe:	0004      	movs	r4, r0
  ultoa(aParserData, freq, 10U);
    1dc0:	220a      	movs	r2, #10
    1dc2:	9901      	ldr	r1, [sp, #4]
    1dc4:	4808      	ldr	r0, [pc, #32]	; (1de8 <Parser_LoraGetMcastFreq+0x44>)
    1dc6:	4b09      	ldr	r3, [pc, #36]	; (1dec <Parser_LoraGetMcastFreq+0x48>)
    1dc8:	4798      	blx	r3
  if(status == LORAWAN_SUCCESS)
    1dca:	2c08      	cmp	r4, #8
    1dcc:	d005      	beq.n	1dda <Parser_LoraGetMcastFreq+0x36>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1dce:	00a4      	lsls	r4, r4, #2
    1dd0:	4b07      	ldr	r3, [pc, #28]	; (1df0 <Parser_LoraGetMcastFreq+0x4c>)
    1dd2:	58e3      	ldr	r3, [r4, r3]
    1dd4:	616b      	str	r3, [r5, #20]
}
    1dd6:	b002      	add	sp, #8
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
	  pParserCmdInfo->pReplyCmd = aParserData;
    1dda:	4b03      	ldr	r3, [pc, #12]	; (1de8 <Parser_LoraGetMcastFreq+0x44>)
    1ddc:	616b      	str	r3, [r5, #20]
    1dde:	e7fa      	b.n	1dd6 <Parser_LoraGetMcastFreq+0x32>
    1de0:	00017595 	.word	0x00017595
    1de4:	0000f489 	.word	0x0000f489
    1de8:	20000fac 	.word	0x20000fac
    1dec:	000026c5 	.word	0x000026c5
    1df0:	0001d560 	.word	0x0001d560

00001df4 <Parser_LoraSetMcastDr>:
{
    1df4:	b510      	push	{r4, lr}
    1df6:	b082      	sub	sp, #8
    1df8:	0004      	movs	r4, r0
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    1dfa:	466b      	mov	r3, sp
    1dfc:	1d59      	adds	r1, r3, #5
    1dfe:	6800      	ldr	r0, [r0, #0]
    1e00:	4b0a      	ldr	r3, [pc, #40]	; (1e2c <Parser_LoraSetMcastDr+0x38>)
    1e02:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1e04:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    1e06:	2800      	cmp	r0, #0
    1e08:	d105      	bne.n	1e16 <Parser_LoraSetMcastDr+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1e0a:	009b      	lsls	r3, r3, #2
    1e0c:	4a08      	ldr	r2, [pc, #32]	; (1e30 <Parser_LoraSetMcastDr+0x3c>)
    1e0e:	589b      	ldr	r3, [r3, r2]
    1e10:	6163      	str	r3, [r4, #20]
}
    1e12:	b002      	add	sp, #8
    1e14:	bd10      	pop	{r4, pc}
		key.groupId = atoi(pParserCmdInfo->pParam2);
    1e16:	6860      	ldr	r0, [r4, #4]
    1e18:	4b06      	ldr	r3, [pc, #24]	; (1e34 <Parser_LoraSetMcastDr+0x40>)
    1e1a:	4798      	blx	r3
    1e1c:	a901      	add	r1, sp, #4
    1e1e:	7008      	strb	r0, [r1, #0]
		statusIdx = LORAWAN_SetMulticastParam(MCAST_DATARATE,&key);
    1e20:	2031      	movs	r0, #49	; 0x31
    1e22:	4b05      	ldr	r3, [pc, #20]	; (1e38 <Parser_LoraSetMcastDr+0x44>)
    1e24:	4798      	blx	r3
    1e26:	0003      	movs	r3, r0
    1e28:	e7ef      	b.n	1e0a <Parser_LoraSetMcastDr+0x16>
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	0000266d 	.word	0x0000266d
    1e30:	0001d560 	.word	0x0001d560
    1e34:	00017595 	.word	0x00017595
    1e38:	00012015 	.word	0x00012015

00001e3c <Parser_LoraGetMcastDr>:
{
    1e3c:	b530      	push	{r4, r5, lr}
    1e3e:	b083      	sub	sp, #12
    1e40:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1e42:	6800      	ldr	r0, [r0, #0]
    1e44:	4b0c      	ldr	r3, [pc, #48]	; (1e78 <Parser_LoraGetMcastDr+0x3c>)
    1e46:	4798      	blx	r3
    1e48:	466b      	mov	r3, sp
    1e4a:	1d99      	adds	r1, r3, #6
    1e4c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_DATARATE,&groupId,&dr);
    1e4e:	1dda      	adds	r2, r3, #7
    1e50:	2031      	movs	r0, #49	; 0x31
    1e52:	4b0a      	ldr	r3, [pc, #40]	; (1e7c <Parser_LoraGetMcastDr+0x40>)
    1e54:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1e56:	2808      	cmp	r0, #8
    1e58:	d005      	beq.n	1e66 <Parser_LoraGetMcastDr+0x2a>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];	
    1e5a:	0080      	lsls	r0, r0, #2
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <Parser_LoraGetMcastDr+0x44>)
    1e5e:	58c3      	ldr	r3, [r0, r3]
    1e60:	6163      	str	r3, [r4, #20]
}
    1e62:	b003      	add	sp, #12
    1e64:	bd30      	pop	{r4, r5, pc}
	   itoa(dr, aParserData, 10U);
    1e66:	4d07      	ldr	r5, [pc, #28]	; (1e84 <Parser_LoraGetMcastDr+0x48>)
    1e68:	466b      	mov	r3, sp
    1e6a:	79d8      	ldrb	r0, [r3, #7]
    1e6c:	220a      	movs	r2, #10
    1e6e:	0029      	movs	r1, r5
    1e70:	4b05      	ldr	r3, [pc, #20]	; (1e88 <Parser_LoraGetMcastDr+0x4c>)
    1e72:	4798      	blx	r3
	   pParserCmdInfo->pReplyCmd = aParserData;
    1e74:	6165      	str	r5, [r4, #20]
    1e76:	e7f4      	b.n	1e62 <Parser_LoraGetMcastDr+0x26>
    1e78:	00017595 	.word	0x00017595
    1e7c:	0000f489 	.word	0x0000f489
    1e80:	0001d560 	.word	0x0001d560
    1e84:	20000fac 	.word	0x20000fac
    1e88:	00017619 	.word	0x00017619

00001e8c <Parser_LoraGetMacLastPacketRssi>:

void Parser_LoraGetMacLastPacketRssi(parserCmdInfo_t* pParserCmdInfo)
{
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	b082      	sub	sp, #8
    1e90:	0006      	movs	r6, r0
	int16_t rssi;

	LORAWAN_GetAttr(LAST_PACKET_RSSI, NULL, &rssi);
    1e92:	466b      	mov	r3, sp
    1e94:	1d9d      	adds	r5, r3, #6
    1e96:	002a      	movs	r2, r5
    1e98:	2100      	movs	r1, #0
    1e9a:	2036      	movs	r0, #54	; 0x36
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <Parser_LoraGetMacLastPacketRssi+0x28>)
    1e9e:	4798      	blx	r3
	itoa(rssi,aParserData, 10U);
    1ea0:	4c05      	ldr	r4, [pc, #20]	; (1eb8 <Parser_LoraGetMacLastPacketRssi+0x2c>)
    1ea2:	2300      	movs	r3, #0
    1ea4:	5ee8      	ldrsh	r0, [r5, r3]
    1ea6:	220a      	movs	r2, #10
    1ea8:	0021      	movs	r1, r4
    1eaa:	4b04      	ldr	r3, [pc, #16]	; (1ebc <Parser_LoraGetMacLastPacketRssi+0x30>)
    1eac:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;
    1eae:	6174      	str	r4, [r6, #20]
}
    1eb0:	b002      	add	sp, #8
    1eb2:	bd70      	pop	{r4, r5, r6, pc}
    1eb4:	0000f489 	.word	0x0000f489
    1eb8:	20000fac 	.word	0x20000fac
    1ebc:	00017619 	.word	0x00017619

00001ec0 <Parser_LoraGetIsFpending>:
void Parser_LoraGetIsFpending(parserCmdInfo_t* pParserCmdInfo)
{
    1ec0:	b530      	push	{r4, r5, lr}
    1ec2:	b083      	sub	sp, #12
    1ec4:	0005      	movs	r5, r0
	bool isFpending;

	LORAWAN_GetAttr(IS_FPENDING, NULL, &isFpending);
    1ec6:	466b      	mov	r3, sp
    1ec8:	1ddc      	adds	r4, r3, #7
    1eca:	0022      	movs	r2, r4
    1ecc:	2100      	movs	r1, #0
    1ece:	2037      	movs	r0, #55	; 0x37
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <Parser_LoraGetIsFpending+0x24>)
    1ed2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[isFpending];
    1ed4:	7823      	ldrb	r3, [r4, #0]
    1ed6:	009b      	lsls	r3, r3, #2
    1ed8:	4a03      	ldr	r2, [pc, #12]	; (1ee8 <Parser_LoraGetIsFpending+0x28>)
    1eda:	589b      	ldr	r3, [r3, r2]
    1edc:	616b      	str	r3, [r5, #20]
}
    1ede:	b003      	add	sp, #12
    1ee0:	bd30      	pop	{r4, r5, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	0000f489 	.word	0x0000f489
    1ee8:	0001d548 	.word	0x0001d548

00001eec <Parser_LoraGetMacDlAckReqd>:
void Parser_LoraGetMacDlAckReqd(parserCmdInfo_t* pParserCmdInfo)
{
    1eec:	b530      	push	{r4, r5, lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	0005      	movs	r5, r0
	uint8_t req;

	LORAWAN_GetAttr(DL_ACK_REQD, NULL, &req);
    1ef2:	466b      	mov	r3, sp
    1ef4:	1ddc      	adds	r4, r3, #7
    1ef6:	0022      	movs	r2, r4
    1ef8:	2100      	movs	r1, #0
    1efa:	2038      	movs	r0, #56	; 0x38
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <Parser_LoraGetMacDlAckReqd+0x24>)
    1efe:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[req];
    1f00:	7823      	ldrb	r3, [r4, #0]
    1f02:	009b      	lsls	r3, r3, #2
    1f04:	4a03      	ldr	r2, [pc, #12]	; (1f14 <Parser_LoraGetMacDlAckReqd+0x28>)
    1f06:	589b      	ldr	r3, [r3, r2]
    1f08:	616b      	str	r3, [r5, #20]
	
}
    1f0a:	b003      	add	sp, #12
    1f0c:	bd30      	pop	{r4, r5, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	0000f489 	.word	0x0000f489
    1f14:	0001d548 	.word	0x0001d548

00001f18 <Parser_LoraGetMacLastChId>:
void Parser_LoraGetMacLastChId(parserCmdInfo_t* pParserCmdInfo)
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	b082      	sub	sp, #8
    1f1c:	0006      	movs	r6, r0
	uint8_t id;

	LORAWAN_GetAttr(LAST_CH_ID, NULL, &id);
    1f1e:	466b      	mov	r3, sp
    1f20:	1ddd      	adds	r5, r3, #7
    1f22:	002a      	movs	r2, r5
    1f24:	2100      	movs	r1, #0
    1f26:	2039      	movs	r0, #57	; 0x39
    1f28:	4b05      	ldr	r3, [pc, #20]	; (1f40 <Parser_LoraGetMacLastChId+0x28>)
    1f2a:	4798      	blx	r3
	utoa(id, aParserData,  10U);
    1f2c:	4c05      	ldr	r4, [pc, #20]	; (1f44 <Parser_LoraGetMacLastChId+0x2c>)
    1f2e:	7828      	ldrb	r0, [r5, #0]
    1f30:	220a      	movs	r2, #10
    1f32:	0021      	movs	r1, r4
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <Parser_LoraGetMacLastChId+0x30>)
    1f36:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f38:	6174      	str	r4, [r6, #20]
}
    1f3a:	b002      	add	sp, #8
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	0000f489 	.word	0x0000f489
    1f44:	20000fac 	.word	0x20000fac
    1f48:	00017ec9 	.word	0x00017ec9

00001f4c <Parser_LoraGetMacPendingDutyCycle>:
void Parser_LoraGetMacPendingDutyCycle(parserCmdInfo_t* pParserCmdInfo)
{
    1f4c:	b530      	push	{r4, r5, lr}
    1f4e:	b083      	sub	sp, #12
    1f50:	0005      	movs	r5, r0
	uint32_t value;

	LORAWAN_GetAttr(PENDING_DUTY_CYCLE_TIME, NULL, &value);
    1f52:	aa01      	add	r2, sp, #4
    1f54:	2100      	movs	r1, #0
    1f56:	203a      	movs	r0, #58	; 0x3a
    1f58:	4b05      	ldr	r3, [pc, #20]	; (1f70 <Parser_LoraGetMacPendingDutyCycle+0x24>)
    1f5a:	4798      	blx	r3
	utoa(value, aParserData,  10U);
    1f5c:	4c05      	ldr	r4, [pc, #20]	; (1f74 <Parser_LoraGetMacPendingDutyCycle+0x28>)
    1f5e:	220a      	movs	r2, #10
    1f60:	0021      	movs	r1, r4
    1f62:	9801      	ldr	r0, [sp, #4]
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    1f66:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f68:	616c      	str	r4, [r5, #20]
}
    1f6a:	b003      	add	sp, #12
    1f6c:	bd30      	pop	{r4, r5, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	0000f489 	.word	0x0000f489
    1f74:	20000fac 	.word	0x20000fac
    1f78:	00017ec9 	.word	0x00017ec9

00001f7c <Parser_LoraGetMacCnfRetryCnt>:
void Parser_LoraGetMacCnfRetryCnt(parserCmdInfo_t* pParserCmdInfo)
{
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	0006      	movs	r6, r0
	uint8_t ctr;

	LORAWAN_GetAttr(RETRY_COUNTER_CNF, NULL, &ctr);
    1f82:	466b      	mov	r3, sp
    1f84:	1ddd      	adds	r5, r3, #7
    1f86:	002a      	movs	r2, r5
    1f88:	2100      	movs	r1, #0
    1f8a:	203b      	movs	r0, #59	; 0x3b
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <Parser_LoraGetMacCnfRetryCnt+0x28>)
    1f8e:	4798      	blx	r3
	utoa(ctr, aParserData,  10U);
    1f90:	4c05      	ldr	r4, [pc, #20]	; (1fa8 <Parser_LoraGetMacCnfRetryCnt+0x2c>)
    1f92:	7828      	ldrb	r0, [r5, #0]
    1f94:	220a      	movs	r2, #10
    1f96:	0021      	movs	r1, r4
    1f98:	4b04      	ldr	r3, [pc, #16]	; (1fac <Parser_LoraGetMacCnfRetryCnt+0x30>)
    1f9a:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f9c:	6174      	str	r4, [r6, #20]
}
    1f9e:	b002      	add	sp, #8
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	0000f489 	.word	0x0000f489
    1fa8:	20000fac 	.word	0x20000fac
    1fac:	00017ec9 	.word	0x00017ec9

00001fb0 <Parser_LoraGetMacUncnfRetryCnt>:
void Parser_LoraGetMacUncnfRetryCnt(parserCmdInfo_t* pParserCmdInfo)
{
    1fb0:	b570      	push	{r4, r5, r6, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	0006      	movs	r6, r0
	uint8_t ctr;

	LORAWAN_GetAttr(RETRY_COUNTER_UNCNF, NULL, &ctr);
    1fb6:	466b      	mov	r3, sp
    1fb8:	1ddd      	adds	r5, r3, #7
    1fba:	002a      	movs	r2, r5
    1fbc:	2100      	movs	r1, #0
    1fbe:	203c      	movs	r0, #60	; 0x3c
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <Parser_LoraGetMacUncnfRetryCnt+0x28>)
    1fc2:	4798      	blx	r3
	utoa(ctr, aParserData,  10U);
    1fc4:	4c05      	ldr	r4, [pc, #20]	; (1fdc <Parser_LoraGetMacUncnfRetryCnt+0x2c>)
    1fc6:	7828      	ldrb	r0, [r5, #0]
    1fc8:	220a      	movs	r2, #10
    1fca:	0021      	movs	r1, r4
    1fcc:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <Parser_LoraGetMacUncnfRetryCnt+0x30>)
    1fce:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1fd0:	6174      	str	r4, [r6, #20]
}
    1fd2:	b002      	add	sp, #8
    1fd4:	bd70      	pop	{r4, r5, r6, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	0000f489 	.word	0x0000f489
    1fdc:	20000fac 	.word	0x20000fac
    1fe0:	00017ec9 	.word	0x00017ec9

00001fe4 <Parser_LoraGetMacNextPayloadSize>:
void Parser_LoraGetMacNextPayloadSize(parserCmdInfo_t* pParserCmdInfo)
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    1fe6:	b082      	sub	sp, #8
    1fe8:	0006      	movs	r6, r0
	uint16_t size;

	LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &size);
    1fea:	466b      	mov	r3, sp
    1fec:	1d9d      	adds	r5, r3, #6
    1fee:	002a      	movs	r2, r5
    1ff0:	2100      	movs	r1, #0
    1ff2:	203d      	movs	r0, #61	; 0x3d
    1ff4:	4b05      	ldr	r3, [pc, #20]	; (200c <STACK_SIZE+0xc>)
    1ff6:	4798      	blx	r3
	utoa(size, aParserData,  10U);
    1ff8:	4c05      	ldr	r4, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffa:	8828      	ldrh	r0, [r5, #0]
    1ffc:	220a      	movs	r2, #10
    1ffe:	0021      	movs	r1, r4
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    2004:	6174      	str	r4, [r6, #20]
}
    2006:	b002      	add	sp, #8
    2008:	bd70      	pop	{r4, r5, r6, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	0000f489 	.word	0x0000f489
    2010:	20000fac 	.word	0x20000fac
    2014:	00017ec9 	.word	0x00017ec9

00002018 <Parser_LoraGetJoindutycycleremaining>:

void Parser_LoraGetJoindutycycleremaining(parserCmdInfo_t* pParserCmdInfo)
{
    2018:	b530      	push	{r4, r5, lr}
    201a:	b083      	sub	sp, #12
    201c:	0005      	movs	r5, r0
	uint32_t remainingtime;
	LORAWAN_GetAttr(PENDING_JOIN_DUTY_CYCLE_TIME,NULL, &remainingtime);
    201e:	aa01      	add	r2, sp, #4
    2020:	2100      	movs	r1, #0
    2022:	203e      	movs	r0, #62	; 0x3e
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <Parser_LoraGetJoindutycycleremaining+0x24>)
    2026:	4798      	blx	r3
	utoa(remainingtime, aParserData, 10U);
    2028:	4c05      	ldr	r4, [pc, #20]	; (2040 <Parser_LoraGetJoindutycycleremaining+0x28>)
    202a:	220a      	movs	r2, #10
    202c:	0021      	movs	r1, r4
    202e:	9801      	ldr	r0, [sp, #4]
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <Parser_LoraGetJoindutycycleremaining+0x2c>)
    2032:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2034:	616c      	str	r4, [r5, #20]
}
    2036:	b003      	add	sp, #12
    2038:	bd30      	pop	{r4, r5, pc}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	0000f489 	.word	0x0000f489
    2040:	20000fac 	.word	0x20000fac
    2044:	00017ec9 	.word	0x00017ec9

00002048 <Parser_LoraSetJoinBackoff>:

void Parser_LoraSetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    2048:	b510      	push	{r4, lr}
    204a:	b082      	sub	sp, #8
    204c:	0004      	movs	r4, r0
	uint8_t validationVal;
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
	bool joinBackoffEnable;

	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    204e:	6800      	ldr	r0, [r0, #0]
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <Parser_LoraSetJoinBackoff+0x34>)
    2052:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    2054:	230a      	movs	r3, #10
	if (validationVal < 2U)
    2056:	2801      	cmp	r0, #1
    2058:	d905      	bls.n	2066 <Parser_LoraSetJoinBackoff+0x1e>
	{
		joinBackoffEnable = validationVal;
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
	}
	
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    205a:	009b      	lsls	r3, r3, #2
    205c:	4a08      	ldr	r2, [pc, #32]	; (2080 <Parser_LoraSetJoinBackoff+0x38>)
    205e:	589b      	ldr	r3, [r3, r2]
    2060:	6163      	str	r3, [r4, #20]
}
    2062:	b002      	add	sp, #8
    2064:	bd10      	pop	{r4, pc}
		joinBackoffEnable = validationVal;
    2066:	466b      	mov	r3, sp
    2068:	1dd9      	adds	r1, r3, #7
    206a:	1e43      	subs	r3, r0, #1
    206c:	4198      	sbcs	r0, r3
    206e:	7008      	strb	r0, [r1, #0]
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    2070:	2034      	movs	r0, #52	; 0x34
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <Parser_LoraSetJoinBackoff+0x3c>)
    2074:	4798      	blx	r3
    2076:	0003      	movs	r3, r0
    2078:	e7ef      	b.n	205a <Parser_LoraSetJoinBackoff+0x12>
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	00002815 	.word	0x00002815
    2080:	0001d560 	.word	0x0001d560
    2084:	00011439 	.word	0x00011439

00002088 <Parser_LoraSetMaxFcntPdsUpdtVal>:

void Parser_LoraSetMaxFcntPdsUpdtVal(parserCmdInfo_t* pParserCmdInfo)
{
    2088:	b510      	push	{r4, lr}
    208a:	b082      	sub	sp, #8
    208c:	0004      	movs	r4, r0
	uint8_t status = LORAWAN_INVALID_PARAMETER;
	uint8_t fcnt;

	// Parameter validation
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    208e:	466b      	mov	r3, sp
    2090:	1dd9      	adds	r1, r3, #7
    2092:	6800      	ldr	r0, [r0, #0]
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    2096:	4798      	blx	r3
	uint8_t status = LORAWAN_INVALID_PARAMETER;
    2098:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    209a:	2800      	cmp	r0, #0
    209c:	d105      	bne.n	20aa <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
	{
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
	}

	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    209e:	009b      	lsls	r3, r3, #2
    20a0:	4a06      	ldr	r2, [pc, #24]	; (20bc <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    20a2:	589b      	ldr	r3, [r3, r2]
    20a4:	6163      	str	r3, [r4, #20]
}
    20a6:	b002      	add	sp, #8
    20a8:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
    20aa:	466b      	mov	r3, sp
    20ac:	1dd9      	adds	r1, r3, #7
    20ae:	203f      	movs	r0, #63	; 0x3f
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    20b2:	4798      	blx	r3
    20b4:	0003      	movs	r3, r0
    20b6:	e7f2      	b.n	209e <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    20b8:	0000266d 	.word	0x0000266d
    20bc:	0001d560 	.word	0x0001d560
    20c0:	00011439 	.word	0x00011439

000020c4 <Parser_LoraGetJoinBackoff>:

void Parser_LoraGetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    20c4:	b510      	push	{r4, lr}
    20c6:	b082      	sub	sp, #8
    20c8:	0004      	movs	r4, r0
	bool joinBackoffEnable ;
	StackRetStatus_t status;

	status = LORAWAN_GetAttr(JOIN_BACKOFF_ENABLE, NULL, &joinBackoffEnable);
    20ca:	466b      	mov	r3, sp
    20cc:	1dda      	adds	r2, r3, #7
    20ce:	2100      	movs	r1, #0
    20d0:	2034      	movs	r0, #52	; 0x34
    20d2:	4b09      	ldr	r3, [pc, #36]	; (20f8 <Parser_LoraGetJoinBackoff+0x34>)
    20d4:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    20d6:	2808      	cmp	r0, #8
    20d8:	d005      	beq.n	20e6 <Parser_LoraGetJoinBackoff+0x22>
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
	}
	else
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    20da:	0080      	lsls	r0, r0, #2
    20dc:	4b07      	ldr	r3, [pc, #28]	; (20fc <Parser_LoraGetJoinBackoff+0x38>)
    20de:	58c3      	ldr	r3, [r0, r3]
    20e0:	6163      	str	r3, [r4, #20]
	}
    20e2:	b002      	add	sp, #8
    20e4:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
    20e6:	466b      	mov	r3, sp
    20e8:	3307      	adds	r3, #7
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	009b      	lsls	r3, r3, #2
    20ee:	4a04      	ldr	r2, [pc, #16]	; (2100 <Parser_LoraGetJoinBackoff+0x3c>)
    20f0:	589b      	ldr	r3, [r3, r2]
    20f2:	6163      	str	r3, [r4, #20]
    20f4:	e7f5      	b.n	20e2 <Parser_LoraGetJoinBackoff+0x1e>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0000f489 	.word	0x0000f489
    20fc:	0001d560 	.word	0x0001d560
    2100:	0001d540 	.word	0x0001d540

00002104 <parserSleepCallback>:
/*********************************************************************//**
\brief	Callback function of parser to power manager.
\param[in]	sleptDuration - duration for which sleep is done
*************************************************************************/
static void parserSleepCallback(uint32_t sleptDuration)
{
    2104:	b510      	push	{r4, lr}
    2106:	0004      	movs	r4, r0
	HAL_Radio_resources_init();
    2108:	4b04      	ldr	r3, [pc, #16]	; (211c <parserSleepCallback+0x18>)
    210a:	4798      	blx	r3
	sio2host_init();
    210c:	4b04      	ldr	r3, [pc, #16]	; (2120 <parserSleepCallback+0x1c>)
    210e:	4798      	blx	r3
	printf("\nsleep_ok %ld ms\n\r", sleptDuration);
    2110:	0021      	movs	r1, r4
    2112:	4804      	ldr	r0, [pc, #16]	; (2124 <parserSleepCallback+0x20>)
    2114:	4b04      	ldr	r3, [pc, #16]	; (2128 <parserSleepCallback+0x24>)
    2116:	4798      	blx	r3
}
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	00005a95 	.word	0x00005a95
    2120:	00005535 	.word	0x00005535
    2124:	0001d70c 	.word	0x0001d70c
    2128:	000177a9 	.word	0x000177a9

0000212c <extint_callback>:
{
    212c:	b510      	push	{r4, lr}
	PMM_Wakeup();
    212e:	4b09      	ldr	r3, [pc, #36]	; (2154 <extint_callback+0x28>)
    2130:	4798      	blx	r3
	if(SleepEnabled)
    2132:	4b09      	ldr	r3, [pc, #36]	; (2158 <extint_callback+0x2c>)
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	2b00      	cmp	r3, #0
    2138:	d100      	bne.n	213c <extint_callback+0x10>
}
    213a:	bd10      	pop	{r4, pc}
	    HAL_Radio_resources_init();
    213c:	4b07      	ldr	r3, [pc, #28]	; (215c <extint_callback+0x30>)
    213e:	4798      	blx	r3
		sio2host_init();
    2140:	4b07      	ldr	r3, [pc, #28]	; (2160 <extint_callback+0x34>)
    2142:	4798      	blx	r3
		printf("\nExiting Sleep\n\r");
    2144:	4807      	ldr	r0, [pc, #28]	; (2164 <extint_callback+0x38>)
    2146:	4b08      	ldr	r3, [pc, #32]	; (2168 <extint_callback+0x3c>)
    2148:	4798      	blx	r3
		SleepEnabled = false;
    214a:	2200      	movs	r2, #0
    214c:	4b02      	ldr	r3, [pc, #8]	; (2158 <extint_callback+0x2c>)
    214e:	701a      	strb	r2, [r3, #0]
}
    2150:	e7f3      	b.n	213a <extint_callback+0xe>
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	00005de1 	.word	0x00005de1
    2158:	200009e4 	.word	0x200009e4
    215c:	00005a95 	.word	0x00005a95
    2160:	00005535 	.word	0x00005535
    2164:	0001d6ec 	.word	0x0001d6ec
    2168:	000177a9 	.word	0x000177a9

0000216c <Parser_SystemGetHwEui>:
{
    216c:	b530      	push	{r4, r5, lr}
    216e:	b083      	sub	sp, #12
    2170:	0005      	movs	r5, r0
    System_GetExternalEui(aDevEui);
    2172:	4668      	mov	r0, sp
    2174:	4b05      	ldr	r3, [pc, #20]	; (218c <Parser_SystemGetHwEui+0x20>)
    2176:	4798      	blx	r3
    Parser_IntArrayToHexAscii(8, aDevEui, aParserData);
    2178:	4c05      	ldr	r4, [pc, #20]	; (2190 <Parser_SystemGetHwEui+0x24>)
    217a:	0022      	movs	r2, r4
    217c:	4669      	mov	r1, sp
    217e:	2008      	movs	r0, #8
    2180:	4b04      	ldr	r3, [pc, #16]	; (2194 <Parser_SystemGetHwEui+0x28>)
    2182:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2184:	616c      	str	r4, [r5, #20]
}
    2186:	b003      	add	sp, #12
    2188:	bd30      	pop	{r4, r5, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00005d91 	.word	0x00005d91
    2190:	20000fac 	.word	0x20000fac
    2194:	0000260d 	.word	0x0000260d

00002198 <Parser_SystemGetVer>:
{
    2198:	b570      	push	{r4, r5, r6, lr}
    219a:	0005      	movs	r5, r0
	Parser_GetSwVersion(aParserData);
    219c:	4c02      	ldr	r4, [pc, #8]	; (21a8 <Parser_SystemGetVer+0x10>)
    219e:	0020      	movs	r0, r4
    21a0:	4b02      	ldr	r3, [pc, #8]	; (21ac <Parser_SystemGetVer+0x14>)
    21a2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    21a4:	616c      	str	r4, [r5, #20]
}
    21a6:	bd70      	pop	{r4, r5, r6, pc}
    21a8:	20000fac 	.word	0x20000fac
    21ac:	000003d5 	.word	0x000003d5

000021b0 <Parser_SystemGetCustomParam>:
{
    21b0:	b570      	push	{r4, r5, r6, lr}
    21b2:	0005      	movs	r5, r0
	PDS_RESTORE(PDS_APP_CUSTOMPARAMETER) ;
    21b4:	2100      	movs	r1, #0
    21b6:	200c      	movs	r0, #12
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <Parser_SystemGetCustomParam+0x20>)
    21ba:	4798      	blx	r3
	utoa(pdsAppCustomParameter, aParserData,  10U);
    21bc:	4c05      	ldr	r4, [pc, #20]	; (21d4 <Parser_SystemGetCustomParam+0x24>)
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <Parser_SystemGetCustomParam+0x28>)
    21c0:	6818      	ldr	r0, [r3, #0]
    21c2:	220a      	movs	r2, #10
    21c4:	0021      	movs	r1, r4
    21c6:	4b05      	ldr	r3, [pc, #20]	; (21dc <Parser_SystemGetCustomParam+0x2c>)
    21c8:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    21ca:	616c      	str	r4, [r5, #20]
}
    21cc:	bd70      	pop	{r4, r5, r6, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	0000be69 	.word	0x0000be69
    21d4:	20000fac 	.word	0x20000fac
    21d8:	200011c0 	.word	0x200011c0
    21dc:	00017ec9 	.word	0x00017ec9

000021e0 <Parser_SystemSetCustomParam>:
{
    21e0:	b510      	push	{r4, lr}
    21e2:	0004      	movs	r4, r0
	pdsAppCustomParameter = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10);
    21e4:	220a      	movs	r2, #10
    21e6:	2100      	movs	r1, #0
    21e8:	6800      	ldr	r0, [r0, #0]
    21ea:	4b0e      	ldr	r3, [pc, #56]	; (2224 <Parser_SystemSetCustomParam+0x44>)
    21ec:	4798      	blx	r3
    21ee:	4b0e      	ldr	r3, [pc, #56]	; (2228 <Parser_SystemSetCustomParam+0x48>)
    21f0:	6018      	str	r0, [r3, #0]
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    21f2:	2201      	movs	r2, #1
    21f4:	4252      	negs	r2, r2
    21f6:	210a      	movs	r1, #10
    21f8:	6820      	ldr	r0, [r4, #0]
    21fa:	4b0c      	ldr	r3, [pc, #48]	; (222c <Parser_SystemSetCustomParam+0x4c>)
    21fc:	4798      	blx	r3
	StackRetStatus_t status = INVALID_PARAM_IDX ;
    21fe:	2301      	movs	r3, #1
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2200:	2800      	cmp	r0, #0
    2202:	d104      	bne.n	220e <Parser_SystemSetCustomParam+0x2e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserSysStatus[status] ;
    2204:	009b      	lsls	r3, r3, #2
    2206:	4a0a      	ldr	r2, [pc, #40]	; (2230 <Parser_SystemSetCustomParam+0x50>)
    2208:	589b      	ldr	r3, [r3, r2]
    220a:	6163      	str	r3, [r4, #20]
}
    220c:	bd10      	pop	{r4, pc}
		printf("\r\n%ld\r\n", pdsAppCustomParameter) ;
    220e:	4b06      	ldr	r3, [pc, #24]	; (2228 <Parser_SystemSetCustomParam+0x48>)
    2210:	6819      	ldr	r1, [r3, #0]
    2212:	4808      	ldr	r0, [pc, #32]	; (2234 <Parser_SystemSetCustomParam+0x54>)
    2214:	4b08      	ldr	r3, [pc, #32]	; (2238 <Parser_SystemSetCustomParam+0x58>)
    2216:	4798      	blx	r3
		PDS_STORE(PDS_APP_CUSTOMPARAMETER) ;
    2218:	2100      	movs	r1, #0
    221a:	200c      	movs	r0, #12
    221c:	4b07      	ldr	r3, [pc, #28]	; (223c <Parser_SystemSetCustomParam+0x5c>)
    221e:	4798      	blx	r3
		status = OK_STATUS_IDX ;
    2220:	2300      	movs	r3, #0
    2222:	e7ef      	b.n	2204 <Parser_SystemSetCustomParam+0x24>
    2224:	00017e11 	.word	0x00017e11
    2228:	200011c0 	.word	0x200011c0
    222c:	00002741 	.word	0x00002741
    2230:	0001d700 	.word	0x0001d700
    2234:	0001d6d0 	.word	0x0001d6d0
    2238:	000177a9 	.word	0x000177a9
    223c:	0000be05 	.word	0x0000be05

00002240 <Parser_SystemReboot>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2240:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2244:	4a03      	ldr	r2, [pc, #12]	; (2254 <Parser_SystemReboot+0x14>)
    2246:	4b04      	ldr	r3, [pc, #16]	; (2258 <Parser_SystemReboot+0x18>)
    2248:	60da      	str	r2, [r3, #12]
    224a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	e7fd      	b.n	224e <Parser_SystemReboot+0xe>
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	05fa0004 	.word	0x05fa0004
    2258:	e000ed00 	.word	0xe000ed00

0000225c <Parser_SystemFactReset>:
{
    225c:	b510      	push	{r4, lr}
	PDS_DeleteAll();
    225e:	4b05      	ldr	r3, [pc, #20]	; (2274 <Parser_SystemFactReset+0x18>)
    2260:	4798      	blx	r3
    2262:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2266:	4a04      	ldr	r2, [pc, #16]	; (2278 <Parser_SystemFactReset+0x1c>)
    2268:	4b04      	ldr	r3, [pc, #16]	; (227c <Parser_SystemFactReset+0x20>)
    226a:	60da      	str	r2, [r3, #12]
    226c:	f3bf 8f4f 	dsb	sy
    __NOP();
    2270:	46c0      	nop			; (mov r8, r8)
    2272:	e7fd      	b.n	2270 <Parser_SystemFactReset+0x14>
    2274:	0000bf7d 	.word	0x0000bf7d
    2278:	05fa0004 	.word	0x05fa0004
    227c:	e000ed00 	.word	0xe000ed00

00002280 <Parser_SystemSleep>:
{
    2280:	b530      	push	{r4, r5, lr}
    2282:	b085      	sub	sp, #20
    2284:	0004      	movs	r4, r0
    PMM_SleepReq_t sleepRequest = {
    2286:	ab01      	add	r3, sp, #4
    2288:	2200      	movs	r2, #0
    228a:	9201      	str	r2, [sp, #4]
    228c:	21ff      	movs	r1, #255	; 0xff
    228e:	7119      	strb	r1, [r3, #4]
    2290:	9203      	str	r2, [sp, #12]
    uint32_t sleepDuration = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2292:	320a      	adds	r2, #10
    2294:	2100      	movs	r1, #0
    2296:	6840      	ldr	r0, [r0, #4]
    2298:	4b24      	ldr	r3, [pc, #144]	; (232c <Parser_SystemSleep+0xac>)
    229a:	4798      	blx	r3
    229c:	0005      	movs	r5, r0
		if(0 == stricmp(pParserCmdInfo->pParam1, gapParseSleepMode[iCount]))
    229e:	4924      	ldr	r1, [pc, #144]	; (2330 <Parser_SystemSleep+0xb0>)
    22a0:	6820      	ldr	r0, [r4, #0]
    22a2:	4b24      	ldr	r3, [pc, #144]	; (2334 <Parser_SystemSleep+0xb4>)
    22a4:	4798      	blx	r3
    22a6:	2800      	cmp	r0, #0
    22a8:	d009      	beq.n	22be <Parser_SystemSleep+0x3e>
    22aa:	4923      	ldr	r1, [pc, #140]	; (2338 <Parser_SystemSleep+0xb8>)
    22ac:	6820      	ldr	r0, [r4, #0]
    22ae:	4b21      	ldr	r3, [pc, #132]	; (2334 <Parser_SystemSleep+0xb4>)
    22b0:	4798      	blx	r3
    22b2:	2800      	cmp	r0, #0
    22b4:	d038      	beq.n	2328 <Parser_SystemSleep+0xa8>
        pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[INVALID_PARAM_IDX];
    22b6:	4b21      	ldr	r3, [pc, #132]	; (233c <Parser_SystemSleep+0xbc>)
    22b8:	6163      	str	r3, [r4, #20]
}
    22ba:	b005      	add	sp, #20
    22bc:	bd30      	pop	{r4, r5, pc}
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    22be:	2200      	movs	r2, #0
    if ( (1 /* invalid range */ < sleepModeValue) || \
    22c0:	491f      	ldr	r1, [pc, #124]	; (2340 <Parser_SystemSleep+0xc0>)
    22c2:	4b20      	ldr	r3, [pc, #128]	; (2344 <Parser_SystemSleep+0xc4>)
    22c4:	18eb      	adds	r3, r5, r3
    22c6:	428b      	cmp	r3, r1
    22c8:	d8f5      	bhi.n	22b6 <Parser_SystemSleep+0x36>
        sleepRequest.sleepTimeMs = sleepDuration;
    22ca:	9501      	str	r5, [sp, #4]
        sleepRequest.pmmWakeupCallback = parserSleepCallback;
    22cc:	4b1e      	ldr	r3, [pc, #120]	; (2348 <Parser_SystemSleep+0xc8>)
    22ce:	9303      	str	r3, [sp, #12]
        sleepRequest.sleep_mode = ( 0 /* standby */ == sleepModeValue ) ? SLEEP_MODE_STANDBY : SLEEP_MODE_BACKUP;
    22d0:	0013      	movs	r3, r2
    22d2:	1e5a      	subs	r2, r3, #1
    22d4:	4193      	sbcs	r3, r2
    22d6:	3301      	adds	r3, #1
    22d8:	aa01      	add	r2, sp, #4
    22da:	7113      	strb	r3, [r2, #4]
    SleepEnabled = true;
    22dc:	2201      	movs	r2, #1
    22de:	4b1b      	ldr	r3, [pc, #108]	; (234c <Parser_SystemSleep+0xcc>)
    22e0:	701a      	strb	r2, [r3, #0]
    if ( LORAWAN_ReadyToSleep( deviceResetsForWakeup ) )
    22e2:	4b1b      	ldr	r3, [pc, #108]	; (2350 <Parser_SystemSleep+0xd0>)
    22e4:	7818      	ldrb	r0, [r3, #0]
    22e6:	4b1b      	ldr	r3, [pc, #108]	; (2354 <Parser_SystemSleep+0xd4>)
    22e8:	4798      	blx	r3
    22ea:	2800      	cmp	r0, #0
    22ec:	d0e5      	beq.n	22ba <Parser_SystemSleep+0x3a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    22ee:	2300      	movs	r3, #0
    22f0:	466a      	mov	r2, sp
    22f2:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    22f4:	3301      	adds	r3, #1
    22f6:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    22f8:	7093      	strb	r3, [r2, #2]
#ifdef HOST_SERCOM_PAD0_PIN
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    22fa:	4669      	mov	r1, sp
    22fc:	2004      	movs	r0, #4
    22fe:	4d16      	ldr	r5, [pc, #88]	; (2358 <Parser_SystemSleep+0xd8>)
    2300:	47a8      	blx	r5
#endif
#ifdef HOST_SERCOM_PAD1_PIN
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    2302:	4669      	mov	r1, sp
    2304:	2005      	movs	r0, #5
    2306:	47a8      	blx	r5
#endif
	/* Disable UART module */
	sio2host_deinit();
    2308:	4b14      	ldr	r3, [pc, #80]	; (235c <Parser_SystemSleep+0xdc>)
    230a:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    230c:	4b14      	ldr	r3, [pc, #80]	; (2360 <Parser_SystemSleep+0xe0>)
    230e:	4798      	blx	r3
        if ( PMM_SLEEP_REQ_DENIED == PMM_Sleep( &sleepRequest ) )
    2310:	a801      	add	r0, sp, #4
    2312:	4b14      	ldr	r3, [pc, #80]	; (2364 <Parser_SystemSleep+0xe4>)
    2314:	4798      	blx	r3
    2316:	2800      	cmp	r0, #0
    2318:	d1cf      	bne.n	22ba <Parser_SystemSleep+0x3a>
            HAL_Radio_resources_init();
    231a:	4b13      	ldr	r3, [pc, #76]	; (2368 <Parser_SystemSleep+0xe8>)
    231c:	4798      	blx	r3
            sio2host_init();
    231e:	4b13      	ldr	r3, [pc, #76]	; (236c <Parser_SystemSleep+0xec>)
    2320:	4798      	blx	r3
            pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[ERR_STATUS_IDX];
    2322:	4b13      	ldr	r3, [pc, #76]	; (2370 <Parser_SystemSleep+0xf0>)
    2324:	6163      	str	r3, [r4, #20]
    2326:	e7c8      	b.n	22ba <Parser_SystemSleep+0x3a>
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    2328:	2201      	movs	r2, #1
    232a:	e7c9      	b.n	22c0 <Parser_SystemSleep+0x40>
    232c:	00017e11 	.word	0x00017e11
    2330:	0001d6d8 	.word	0x0001d6d8
    2334:	00002785 	.word	0x00002785
    2338:	0001d6e0 	.word	0x0001d6e0
    233c:	0001c93c 	.word	0x0001c93c
    2340:	07cebbc8 	.word	0x07cebbc8
    2344:	fffffc18 	.word	0xfffffc18
    2348:	00002105 	.word	0x00002105
    234c:	200009e4 	.word	0x200009e4
    2350:	200009e5 	.word	0x200009e5
    2354:	00012021 	.word	0x00012021
    2358:	00003301 	.word	0x00003301
    235c:	00005681 	.word	0x00005681
    2360:	00005ab9 	.word	0x00005ab9
    2364:	00005e65 	.word	0x00005e65
    2368:	00005a95 	.word	0x00005a95
    236c:	00005535 	.word	0x00005535
    2370:	0001d6e8 	.word	0x0001d6e8

00002374 <configure_extint>:
{
    2374:	b510      	push	{r4, lr}
    2376:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&eint_chan_conf);
    2378:	ac01      	add	r4, sp, #4
    237a:	0020      	movs	r0, r4
    237c:	4b07      	ldr	r3, [pc, #28]	; (239c <configure_extint+0x28>)
    237e:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    2380:	231c      	movs	r3, #28
    2382:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    2384:	2300      	movs	r3, #0
    2386:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    2388:	3302      	adds	r3, #2
    238a:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    238c:	3b01      	subs	r3, #1
    238e:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    2390:	0021      	movs	r1, r4
    2392:	2008      	movs	r0, #8
    2394:	4b02      	ldr	r3, [pc, #8]	; (23a0 <configure_extint+0x2c>)
    2396:	4798      	blx	r3
}
    2398:	b004      	add	sp, #16
    239a:	bd10      	pop	{r4, pc}
    239c:	00002e99 	.word	0x00002e99
    23a0:	00002ead 	.word	0x00002ead

000023a4 <configure_eic_callback>:
{
    23a4:	b510      	push	{r4, lr}
	extint_register_callback(
    23a6:	2200      	movs	r2, #0
    23a8:	2108      	movs	r1, #8
    23aa:	4804      	ldr	r0, [pc, #16]	; (23bc <configure_eic_callback+0x18>)
    23ac:	4b04      	ldr	r3, [pc, #16]	; (23c0 <configure_eic_callback+0x1c>)
    23ae:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    23b0:	2100      	movs	r1, #0
    23b2:	2008      	movs	r0, #8
    23b4:	4b03      	ldr	r3, [pc, #12]	; (23c4 <configure_eic_callback+0x20>)
    23b6:	4798      	blx	r3
}
    23b8:	bd10      	pop	{r4, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	0000212d 	.word	0x0000212d
    23c0:	00002d59 	.word	0x00002d59
    23c4:	00002d85 	.word	0x00002d85

000023c8 <Parser_RxClearBuffer>:
    "invalid_param",
    "err"
};

void Parser_RxClearBuffer(void)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    mRxParserCmd.bCmdStatus = 0;
    23ca:	4c0b      	ldr	r4, [pc, #44]	; (23f8 <Parser_RxClearBuffer+0x30>)
    23cc:	2300      	movs	r3, #0
    23ce:	4a0b      	ldr	r2, [pc, #44]	; (23fc <Parser_RxClearBuffer+0x34>)
    23d0:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtWordIdx = 0;
    23d2:	4a0b      	ldr	r2, [pc, #44]	; (2400 <Parser_RxClearBuffer+0x38>)
    23d4:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtCmdPos = 0;
    23d6:	3201      	adds	r2, #1
    23d8:	52a3      	strh	r3, [r4, r2]
    mRxParserCmd.crtWordPos = 0;
    23da:	4a0a      	ldr	r2, [pc, #40]	; (2404 <Parser_RxClearBuffer+0x3c>)
    23dc:	52a3      	strh	r3, [r4, r2]
    
    memset((_PTR)mRxParserCmd.wordLen, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    23de:	4b0a      	ldr	r3, [pc, #40]	; (2408 <Parser_RxClearBuffer+0x40>)
    23e0:	18e0      	adds	r0, r4, r3
    23e2:	2214      	movs	r2, #20
    23e4:	2100      	movs	r1, #0
    23e6:	4d09      	ldr	r5, [pc, #36]	; (240c <Parser_RxClearBuffer+0x44>)
    23e8:	47a8      	blx	r5
    memset((_PTR)mRxParserCmd.wordStartPos, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    23ea:	4b09      	ldr	r3, [pc, #36]	; (2410 <Parser_RxClearBuffer+0x48>)
    23ec:	18e0      	adds	r0, r4, r3
    23ee:	2214      	movs	r2, #20
    23f0:	2100      	movs	r1, #0
    23f2:	47a8      	blx	r5
}
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	20001dd8 	.word	0x20001dd8
    23fc:	0000024e 	.word	0x0000024e
    2400:	0000024f 	.word	0x0000024f
    2404:	00000252 	.word	0x00000252
    2408:	00000226 	.word	0x00000226
    240c:	00017715 	.word	0x00017715
    2410:	0000023a 	.word	0x0000023a

00002414 <Parser_TxAddReply>:
    }

}

void Parser_TxAddReply(char* pReplyStr, uint16_t replyStrLen)
{
    2414:	b570      	push	{r4, r5, r6, lr}
    2416:	0005      	movs	r5, r0
    2418:	1e0c      	subs	r4, r1, #0
    uint16_t iCtr = replyStrLen;
	
	/* Check if the length of UART String is can be fit in SIO2HOST TX Buffer */
	while(0 != iCtr)
    241a:	d00f      	beq.n	243c <Parser_TxAddReply+0x28>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
			iCtr = 0;
		}
		else
		{
			sio2host_tx((uint8_t *)pReplyStr, BYTE_VALUE_LEN);
    241c:	4e0a      	ldr	r6, [pc, #40]	; (2448 <Parser_TxAddReply+0x34>)
    241e:	e007      	b.n	2430 <Parser_TxAddReply+0x1c>
    2420:	21ff      	movs	r1, #255	; 0xff
    2422:	0028      	movs	r0, r5
    2424:	47b0      	blx	r6
			iCtr -= BYTE_VALUE_LEN;
    2426:	3cff      	subs	r4, #255	; 0xff
    2428:	b2a4      	uxth	r4, r4
			pReplyStr = pReplyStr + BYTE_VALUE_LEN;
    242a:	35ff      	adds	r5, #255	; 0xff
	while(0 != iCtr)
    242c:	2c00      	cmp	r4, #0
    242e:	d005      	beq.n	243c <Parser_TxAddReply+0x28>
		if(BYTE_VALUE_LEN >= iCtr)
    2430:	2cff      	cmp	r4, #255	; 0xff
    2432:	d8f5      	bhi.n	2420 <Parser_TxAddReply+0xc>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
    2434:	b2e1      	uxtb	r1, r4
    2436:	0028      	movs	r0, r5
    2438:	4b03      	ldr	r3, [pc, #12]	; (2448 <Parser_TxAddReply+0x34>)
    243a:	4798      	blx	r3
		}
	}
	
    /* Put the delimiter string in UART */
	sio2host_tx((uint8_t *)gpParserLineDelim,strlen(gpParserLineDelim));
    243c:	2102      	movs	r1, #2
    243e:	4803      	ldr	r0, [pc, #12]	; (244c <Parser_TxAddReply+0x38>)
    2440:	4b01      	ldr	r3, [pc, #4]	; (2448 <Parser_TxAddReply+0x34>)
    2442:	4798      	blx	r3
	
}
    2444:	bd70      	pop	{r4, r5, r6, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	000056ed 	.word	0x000056ed
    244c:	0001d720 	.word	0x0001d720

00002450 <Parser_RxAddChar>:
{
    2450:	b570      	push	{r4, r5, r6, lr}
    if(rxChar == '\b')
    2452:	2808      	cmp	r0, #8
    2454:	d047      	beq.n	24e6 <Parser_RxAddChar+0x96>
    if(mRxParserCmd.crtCmdPos < PARSER_DEF_CMD_MAX_LEN - 1)
    2456:	2394      	movs	r3, #148	; 0x94
    2458:	009b      	lsls	r3, r3, #2
    245a:	4a58      	ldr	r2, [pc, #352]	; (25bc <Parser_RxAddChar+0x16c>)
    245c:	5ad3      	ldrh	r3, [r2, r3]
    245e:	b29b      	uxth	r3, r3
    2460:	2289      	movs	r2, #137	; 0x89
    2462:	0092      	lsls	r2, r2, #2
    2464:	4293      	cmp	r3, r2
    2466:	d900      	bls.n	246a <Parser_RxAddChar+0x1a>
    2468:	e0a1      	b.n	25ae <Parser_RxAddChar+0x15e>
        if(rxChar == ' ')
    246a:	2820      	cmp	r0, #32
    246c:	d100      	bne.n	2470 <Parser_RxAddChar+0x20>
    246e:	e073      	b.n	2558 <Parser_RxAddChar+0x108>
            mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = rxChar;
    2470:	4b52      	ldr	r3, [pc, #328]	; (25bc <Parser_RxAddChar+0x16c>)
    2472:	2194      	movs	r1, #148	; 0x94
    2474:	0089      	lsls	r1, r1, #2
    2476:	5a5a      	ldrh	r2, [r3, r1]
    2478:	b292      	uxth	r2, r2
    247a:	1c54      	adds	r4, r2, #1
    247c:	b2a4      	uxth	r4, r4
    247e:	525c      	strh	r4, [r3, r1]
    2480:	5498      	strb	r0, [r3, r2]
            mRxParserCmd.crtWordPos ++;
    2482:	484f      	ldr	r0, [pc, #316]	; (25c0 <Parser_RxAddChar+0x170>)
    2484:	5a1a      	ldrh	r2, [r3, r0]
    2486:	3201      	adds	r2, #1
    2488:	b292      	uxth	r2, r2
    248a:	521a      	strh	r2, [r3, r0]
            if(mRxParserCmd.crtCmdPos >= strlen(gpParserLineDelim))
    248c:	5a5b      	ldrh	r3, [r3, r1]
    248e:	b29b      	uxth	r3, r3
    2490:	2b01      	cmp	r3, #1
    2492:	d959      	bls.n	2548 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    2494:	4a49      	ldr	r2, [pc, #292]	; (25bc <Parser_RxAddChar+0x16c>)
    2496:	5a53      	ldrh	r3, [r2, r1]
    2498:	3b02      	subs	r3, #2
    249a:	5cd3      	ldrb	r3, [r2, r3]
                for(iCount = strlen(gpParserLineDelim); (iCount > 0U) && bIsEndLine; iCount --)
    249c:	2b0d      	cmp	r3, #13
    249e:	d153      	bne.n	2548 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    24a0:	5a53      	ldrh	r3, [r2, r1]
    24a2:	3b01      	subs	r3, #1
    24a4:	5cd3      	ldrb	r3, [r2, r3]
            if(bIsEndLine)
    24a6:	2b0a      	cmp	r3, #10
    24a8:	d14e      	bne.n	2548 <Parser_RxAddChar+0xf8>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - strlen(gpParserLineDelim)] = '\0';
    24aa:	0013      	movs	r3, r2
    24ac:	000c      	movs	r4, r1
    24ae:	5a52      	ldrh	r2, [r2, r1]
    24b0:	3a02      	subs	r2, #2
    24b2:	2100      	movs	r1, #0
    24b4:	5499      	strb	r1, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos - strlen(gpParserLineDelim);
    24b6:	4d43      	ldr	r5, [pc, #268]	; (25c4 <Parser_RxAddChar+0x174>)
    24b8:	5d5a      	ldrb	r2, [r3, r5]
    24ba:	5a19      	ldrh	r1, [r3, r0]
    24bc:	3902      	subs	r1, #2
    24be:	b289      	uxth	r1, r1
    24c0:	3211      	adds	r2, #17
    24c2:	32ff      	adds	r2, #255	; 0xff
    24c4:	0052      	lsls	r2, r2, #1
    24c6:	189a      	adds	r2, r3, r2
    24c8:	80d1      	strh	r1, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos;
    24ca:	5d5a      	ldrb	r2, [r3, r5]
    24cc:	5b19      	ldrh	r1, [r3, r4]
    24ce:	5a18      	ldrh	r0, [r3, r0]
    24d0:	1a09      	subs	r1, r1, r0
    24d2:	b289      	uxth	r1, r1
    24d4:	321d      	adds	r2, #29
    24d6:	32ff      	adds	r2, #255	; 0xff
    24d8:	0052      	lsls	r2, r2, #1
    24da:	189a      	adds	r2, r3, r2
    24dc:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.bCmdStatus = 1;
    24de:	2101      	movs	r1, #1
    24e0:	4a39      	ldr	r2, [pc, #228]	; (25c8 <Parser_RxAddChar+0x178>)
    24e2:	5499      	strb	r1, [r3, r2]
    24e4:	e030      	b.n	2548 <Parser_RxAddChar+0xf8>
        if(mRxParserCmd.crtCmdPos > 0U)
    24e6:	2394      	movs	r3, #148	; 0x94
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	4a34      	ldr	r2, [pc, #208]	; (25bc <Parser_RxAddChar+0x16c>)
    24ec:	5ad3      	ldrh	r3, [r2, r3]
    24ee:	b29b      	uxth	r3, r3
    24f0:	2b00      	cmp	r3, #0
    24f2:	d029      	beq.n	2548 <Parser_RxAddChar+0xf8>
            if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - 1] == '\0')
    24f4:	2394      	movs	r3, #148	; 0x94
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	5ad3      	ldrh	r3, [r2, r3]
    24fa:	3b01      	subs	r3, #1
    24fc:	5cd3      	ldrb	r3, [r2, r3]
    24fe:	2b00      	cmp	r3, #0
    2500:	d123      	bne.n	254a <Parser_RxAddChar+0xfa>
                mRxParserCmd.crtWordIdx --;
    2502:	0013      	movs	r3, r2
    2504:	492f      	ldr	r1, [pc, #188]	; (25c4 <Parser_RxAddChar+0x174>)
    2506:	5c52      	ldrb	r2, [r2, r1]
    2508:	3a01      	subs	r2, #1
    250a:	b2d2      	uxtb	r2, r2
    250c:	545a      	strb	r2, [r3, r1]
                mRxParserCmd.crtWordPos = mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx];
    250e:	5c5a      	ldrb	r2, [r3, r1]
    2510:	3211      	adds	r2, #17
    2512:	32ff      	adds	r2, #255	; 0xff
    2514:	0052      	lsls	r2, r2, #1
    2516:	189a      	adds	r2, r3, r2
    2518:	88d2      	ldrh	r2, [r2, #6]
    251a:	b292      	uxth	r2, r2
    251c:	4828      	ldr	r0, [pc, #160]	; (25c0 <Parser_RxAddChar+0x170>)
    251e:	521a      	strh	r2, [r3, r0]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = 0U;
    2520:	5c5a      	ldrb	r2, [r3, r1]
    2522:	3211      	adds	r2, #17
    2524:	32ff      	adds	r2, #255	; 0xff
    2526:	0052      	lsls	r2, r2, #1
    2528:	189a      	adds	r2, r3, r2
    252a:	2000      	movs	r0, #0
    252c:	80d0      	strh	r0, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = 0U;
    252e:	5c5a      	ldrb	r2, [r3, r1]
    2530:	321d      	adds	r2, #29
    2532:	32ff      	adds	r2, #255	; 0xff
    2534:	0052      	lsls	r2, r2, #1
    2536:	189b      	adds	r3, r3, r2
    2538:	8058      	strh	r0, [r3, #2]
            mRxParserCmd.crtCmdPos --;
    253a:	4920      	ldr	r1, [pc, #128]	; (25bc <Parser_RxAddChar+0x16c>)
    253c:	2294      	movs	r2, #148	; 0x94
    253e:	0092      	lsls	r2, r2, #2
    2540:	5a8b      	ldrh	r3, [r1, r2]
    2542:	3b01      	subs	r3, #1
    2544:	b29b      	uxth	r3, r3
    2546:	528b      	strh	r3, [r1, r2]
}
    2548:	bd70      	pop	{r4, r5, r6, pc}
                mRxParserCmd.crtWordPos --;
    254a:	491c      	ldr	r1, [pc, #112]	; (25bc <Parser_RxAddChar+0x16c>)
    254c:	4a1c      	ldr	r2, [pc, #112]	; (25c0 <Parser_RxAddChar+0x170>)
    254e:	5a8b      	ldrh	r3, [r1, r2]
    2550:	3b01      	subs	r3, #1
    2552:	b29b      	uxth	r3, r3
    2554:	528b      	strh	r3, [r1, r2]
    2556:	e7f0      	b.n	253a <Parser_RxAddChar+0xea>
            if(mRxParserCmd.crtWordIdx < PARSER_DEF_CMD_MAX_IDX - 1)
    2558:	4b1a      	ldr	r3, [pc, #104]	; (25c4 <Parser_RxAddChar+0x174>)
    255a:	4a18      	ldr	r2, [pc, #96]	; (25bc <Parser_RxAddChar+0x16c>)
    255c:	5cd3      	ldrb	r3, [r2, r3]
    255e:	b2db      	uxtb	r3, r3
    2560:	2b08      	cmp	r3, #8
    2562:	d824      	bhi.n	25ae <Parser_RxAddChar+0x15e>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = '\0';
    2564:	0013      	movs	r3, r2
    2566:	2194      	movs	r1, #148	; 0x94
    2568:	0089      	lsls	r1, r1, #2
    256a:	5a52      	ldrh	r2, [r2, r1]
    256c:	b292      	uxth	r2, r2
    256e:	1c50      	adds	r0, r2, #1
    2570:	b280      	uxth	r0, r0
    2572:	5258      	strh	r0, [r3, r1]
    2574:	2500      	movs	r5, #0
    2576:	549d      	strb	r5, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos;
    2578:	4812      	ldr	r0, [pc, #72]	; (25c4 <Parser_RxAddChar+0x174>)
    257a:	5c1a      	ldrb	r2, [r3, r0]
    257c:	4c10      	ldr	r4, [pc, #64]	; (25c0 <Parser_RxAddChar+0x170>)
    257e:	5b1e      	ldrh	r6, [r3, r4]
    2580:	b2b6      	uxth	r6, r6
    2582:	3211      	adds	r2, #17
    2584:	32ff      	adds	r2, #255	; 0xff
    2586:	0052      	lsls	r2, r2, #1
    2588:	189a      	adds	r2, r3, r2
    258a:	80d6      	strh	r6, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos - 1;
    258c:	5c1a      	ldrb	r2, [r3, r0]
    258e:	5a59      	ldrh	r1, [r3, r1]
    2590:	5b1e      	ldrh	r6, [r3, r4]
    2592:	3901      	subs	r1, #1
    2594:	1b89      	subs	r1, r1, r6
    2596:	b289      	uxth	r1, r1
    2598:	321d      	adds	r2, #29
    259a:	32ff      	adds	r2, #255	; 0xff
    259c:	0052      	lsls	r2, r2, #1
    259e:	189a      	adds	r2, r3, r2
    25a0:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.crtWordIdx ++;
    25a2:	5c1a      	ldrb	r2, [r3, r0]
    25a4:	3201      	adds	r2, #1
    25a6:	b2d2      	uxtb	r2, r2
    25a8:	541a      	strb	r2, [r3, r0]
                mRxParserCmd.crtWordPos = 0;
    25aa:	531d      	strh	r5, [r3, r4]
    25ac:	e7cc      	b.n	2548 <Parser_RxAddChar+0xf8>
        Parser_RxClearBuffer();
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <Parser_RxAddChar+0x17c>)
    25b0:	4798      	blx	r3
        Parser_TxAddReply((char*)gapParserTspStatus[ERR_STATUS_IDX], strlen(gapParserTspStatus[ERR_STATUS_IDX]));
    25b2:	2103      	movs	r1, #3
    25b4:	4806      	ldr	r0, [pc, #24]	; (25d0 <Parser_RxAddChar+0x180>)
    25b6:	4b07      	ldr	r3, [pc, #28]	; (25d4 <Parser_RxAddChar+0x184>)
    25b8:	4798      	blx	r3
    25ba:	e7c5      	b.n	2548 <Parser_RxAddChar+0xf8>
    25bc:	20001dd8 	.word	0x20001dd8
    25c0:	00000252 	.word	0x00000252
    25c4:	0000024f 	.word	0x0000024f
    25c8:	0000024e 	.word	0x0000024e
    25cc:	000023c9 	.word	0x000023c9
    25d0:	0001d6e8 	.word	0x0001d6e8
    25d4:	00002415 	.word	0x00002415

000025d8 <Validate_HexValue>:
    "off",
    "on"
};

bool Validate_HexValue(void* pValue)
 {
    25d8:	b570      	push	{r4, r5, r6, lr}
    bool flag = true;
    char* character;

    for(character = pValue; *character; character++)
    25da:	7803      	ldrb	r3, [r0, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d00e      	beq.n	25fe <Validate_HexValue+0x26>
    25e0:	0004      	movs	r4, r0
    {
        if(isxdigit(*character) == 0)
    25e2:	4e09      	ldr	r6, [pc, #36]	; (2608 <Validate_HexValue+0x30>)
    25e4:	2544      	movs	r5, #68	; 0x44
    25e6:	47b0      	blx	r6
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	18c0      	adds	r0, r0, r3
    25ec:	7843      	ldrb	r3, [r0, #1]
    25ee:	421d      	tst	r5, r3
    25f0:	d007      	beq.n	2602 <Validate_HexValue+0x2a>
    for(character = pValue; *character; character++)
    25f2:	3401      	adds	r4, #1
    25f4:	7823      	ldrb	r3, [r4, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1f5      	bne.n	25e6 <Validate_HexValue+0xe>
    bool flag = true;
    25fa:	2001      	movs	r0, #1
    25fc:	e002      	b.n	2604 <Validate_HexValue+0x2c>
    25fe:	2001      	movs	r0, #1
    2600:	e000      	b.n	2604 <Validate_HexValue+0x2c>
        {
            flag = false;
    2602:	2000      	movs	r0, #0
            break;
        }
    }

    return flag;
}
    2604:	bd70      	pop	{r4, r5, r6, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	00017649 	.word	0x00017649

0000260c <Parser_IntArrayToHexAscii>:

    return retValue;
}

void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, char* pOutHexAscii)
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	46ce      	mov	lr, r9
    2610:	4647      	mov	r7, r8
    2612:	b580      	push	{r7, lr}
    2614:	b083      	sub	sp, #12
    2616:	4680      	mov	r8, r0
    2618:	9201      	str	r2, [sp, #4]
    uint8_t iCtr = 0U;

    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    261a:	2800      	cmp	r0, #0
    261c:	d019      	beq.n	2652 <Parser_IntArrayToHexAscii+0x46>
    261e:	000c      	movs	r4, r1
    2620:	0015      	movs	r5, r2
    2622:	1e47      	subs	r7, r0, #1
    2624:	b2ff      	uxtb	r7, r7
    2626:	3701      	adds	r7, #1
    2628:	19cf      	adds	r7, r1, r7
    {
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    262a:	4e0f      	ldr	r6, [pc, #60]	; (2668 <Parser_IntArrayToHexAscii+0x5c>)

        if(pInArray[iCtr] <= 15)
        {
            /* Special treatment for figures [0..9]  */
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
            pOutHexAscii[iCtr << 1] = '0';
    262c:	2330      	movs	r3, #48	; 0x30
    262e:	4699      	mov	r9, r3
    2630:	e003      	b.n	263a <Parser_IntArrayToHexAscii+0x2e>
    2632:	3401      	adds	r4, #1
    2634:	3502      	adds	r5, #2
    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    2636:	42bc      	cmp	r4, r7
    2638:	d00b      	beq.n	2652 <Parser_IntArrayToHexAscii+0x46>
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    263a:	7820      	ldrb	r0, [r4, #0]
    263c:	2210      	movs	r2, #16
    263e:	0029      	movs	r1, r5
    2640:	47b0      	blx	r6
        if(pInArray[iCtr] <= 15)
    2642:	7823      	ldrb	r3, [r4, #0]
    2644:	2b0f      	cmp	r3, #15
    2646:	d8f4      	bhi.n	2632 <Parser_IntArrayToHexAscii+0x26>
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
    2648:	782b      	ldrb	r3, [r5, #0]
    264a:	706b      	strb	r3, [r5, #1]
            pOutHexAscii[iCtr << 1] = '0';
    264c:	464b      	mov	r3, r9
    264e:	702b      	strb	r3, [r5, #0]
    2650:	e7ef      	b.n	2632 <Parser_IntArrayToHexAscii+0x26>
        }
    }

    pOutHexAscii[(iCtr << 1)] = '\0';
    2652:	4643      	mov	r3, r8
    2654:	005b      	lsls	r3, r3, #1
    2656:	2200      	movs	r2, #0
    2658:	9901      	ldr	r1, [sp, #4]
    265a:	54ca      	strb	r2, [r1, r3]
}
    265c:	b003      	add	sp, #12
    265e:	bc0c      	pop	{r2, r3}
    2660:	4690      	mov	r8, r2
    2662:	4699      	mov	r9, r3
    2664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	00017619 	.word	0x00017619

0000266c <Validate_Uint8DecAsciiValue>:

bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	b083      	sub	sp, #12
    2670:	0004      	movs	r4, r0
    2672:	9101      	str	r1, [sp, #4]
    bool flag = false;
    char* character;
    uint16_t valueLen = strlen(pValue);
    2674:	4b10      	ldr	r3, [pc, #64]	; (26b8 <Validate_Uint8DecAsciiValue+0x4c>)
    2676:	4798      	blx	r3
    2678:	0006      	movs	r6, r0
    int32_t value = atoi(pValue);
    267a:	0020      	movs	r0, r4
    267c:	4b0f      	ldr	r3, [pc, #60]	; (26bc <Validate_Uint8DecAsciiValue+0x50>)
    267e:	4798      	blx	r3
    2680:	0007      	movs	r7, r0

    // Maximum 3 ascii characters 0-> 255
    if((valueLen <= 3U) && (value >= 0) && (value <= 255))
    2682:	b2b6      	uxth	r6, r6
    2684:	2e03      	cmp	r6, #3
    2686:	d814      	bhi.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
    2688:	28ff      	cmp	r0, #255	; 0xff
    268a:	d812      	bhi.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
    {
        flag = true;

        for(character = pValue; *character; character++)
    268c:	7823      	ldrb	r3, [r4, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d00b      	beq.n	26aa <Validate_Uint8DecAsciiValue+0x3e>
        {
            if(isdigit(*character) == 0)
    2692:	4d0b      	ldr	r5, [pc, #44]	; (26c0 <Validate_Uint8DecAsciiValue+0x54>)
    2694:	2604      	movs	r6, #4
    2696:	47a8      	blx	r5
    2698:	7823      	ldrb	r3, [r4, #0]
    269a:	18c0      	adds	r0, r0, r3
    269c:	7843      	ldrb	r3, [r0, #1]
    269e:	421e      	tst	r6, r3
    26a0:	d007      	beq.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
        for(character = pValue; *character; character++)
    26a2:	3401      	adds	r4, #1
    26a4:	7823      	ldrb	r3, [r4, #0]
    26a6:	2b00      	cmp	r3, #0
    26a8:	d1f5      	bne.n	2696 <Validate_Uint8DecAsciiValue+0x2a>
        }
    }

    if(flag)
    {
        *pDecValue = (uint8_t)value;
    26aa:	9b01      	ldr	r3, [sp, #4]
    26ac:	701f      	strb	r7, [r3, #0]
    26ae:	2001      	movs	r0, #1
    26b0:	e000      	b.n	26b4 <Validate_Uint8DecAsciiValue+0x48>
        for(character = pValue; *character; character++)
    26b2:	2000      	movs	r0, #0
    }

    return flag;
}
    26b4:	b003      	add	sp, #12
    26b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b8:	00017b05 	.word	0x00017b05
    26bc:	00017595 	.word	0x00017595
    26c0:	00017649 	.word	0x00017649

000026c4 <ultoa>:

/*
 * \brief Converts String to Un-singed Long Integer
 */ 
char * ultoa(char * str, unsigned long num,  int radix)
{
    26c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c6:	46d6      	mov	lr, sl
    26c8:	b500      	push	{lr}
    26ca:	b08e      	sub	sp, #56	; 0x38
    26cc:	9003      	str	r0, [sp, #12]
    26ce:	000c      	movs	r4, r1
    26d0:	9201      	str	r2, [sp, #4]
    26d2:	2500      	movs	r5, #0
   int digit;
   int str_loc = 0;

   /*construct a backward string of the number. */
   do {
	   digit = (unsigned long)num % radix;
    26d4:	4b18      	ldr	r3, [pc, #96]	; (2738 <ultoa+0x74>)
    26d6:	469a      	mov	sl, r3
	   if (digit < 10)
	   temp[temp_loc++] = digit + '0';
	   else
	   temp[temp_loc++] = digit - 10 + 'A';
    26d8:	af05      	add	r7, sp, #20
	   num = ((unsigned long)num) / radix;
    26da:	4e18      	ldr	r6, [pc, #96]	; (273c <ultoa+0x78>)
    26dc:	e009      	b.n	26f2 <ultoa+0x2e>
	   temp[temp_loc++] = digit - 10 + 'A';
    26de:	3137      	adds	r1, #55	; 0x37
    26e0:	55e9      	strb	r1, [r5, r7]
	   num = ((unsigned long)num) / radix;
    26e2:	9901      	ldr	r1, [sp, #4]
    26e4:	0020      	movs	r0, r4
    26e6:	47b0      	blx	r6
    26e8:	0004      	movs	r4, r0
    26ea:	1c6b      	adds	r3, r5, #1
   } while ((unsigned long)num > 0);
    26ec:	2800      	cmp	r0, #0
    26ee:	d009      	beq.n	2704 <ultoa+0x40>
    26f0:	001d      	movs	r5, r3
    26f2:	9502      	str	r5, [sp, #8]
	   digit = (unsigned long)num % radix;
    26f4:	9901      	ldr	r1, [sp, #4]
    26f6:	0020      	movs	r0, r4
    26f8:	47d0      	blx	sl
	   if (digit < 10)
    26fa:	2909      	cmp	r1, #9
    26fc:	dcef      	bgt.n	26de <ultoa+0x1a>
	   temp[temp_loc++] = digit + '0';
    26fe:	3130      	adds	r1, #48	; 0x30
    2700:	55e9      	strb	r1, [r5, r7]
    2702:	e7ee      	b.n	26e2 <ultoa+0x1e>

   temp_loc--;


   /* now reverse the string. */
   while ( temp_loc >=0 ) {
    2704:	9b02      	ldr	r3, [sp, #8]
    2706:	2b00      	cmp	r3, #0
    2708:	db14      	blt.n	2734 <ultoa+0x70>
    270a:	ab05      	add	r3, sp, #20
    270c:	195b      	adds	r3, r3, r5
    270e:	9a03      	ldr	r2, [sp, #12]
    2710:	a904      	add	r1, sp, #16
    2712:	1cc8      	adds	r0, r1, #3
	   /* while there are still chars */
	   str[str_loc++] = temp[temp_loc--];
    2714:	7819      	ldrb	r1, [r3, #0]
    2716:	7011      	strb	r1, [r2, #0]
    2718:	3b01      	subs	r3, #1
    271a:	3201      	adds	r2, #1
   while ( temp_loc >=0 ) {
    271c:	4283      	cmp	r3, r0
    271e:	d1f9      	bne.n	2714 <ultoa+0x50>
    2720:	9e02      	ldr	r6, [sp, #8]
    2722:	3601      	adds	r6, #1
   }
   /* add null termination. */
   str[str_loc] = 0; 
    2724:	2300      	movs	r3, #0
    2726:	9a03      	ldr	r2, [sp, #12]
    2728:	5593      	strb	r3, [r2, r6]

   return str;
}
    272a:	0010      	movs	r0, r2
    272c:	b00e      	add	sp, #56	; 0x38
    272e:	bc04      	pop	{r2}
    2730:	4692      	mov	sl, r2
    2732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   while ( temp_loc >=0 ) {
    2734:	2600      	movs	r6, #0
    2736:	e7f5      	b.n	2724 <ultoa+0x60>
    2738:	00014615 	.word	0x00014615
    273c:	00014509 	.word	0x00014509

00002740 <Validate_UintDecAsciiValue>:
{
    2740:	b570      	push	{r4, r5, r6, lr}
    2742:	b084      	sub	sp, #16
    2744:	0005      	movs	r5, r0
    2746:	0016      	movs	r6, r2
    unsigned long value = strtoul(pValue, NULL, 10);
    2748:	220a      	movs	r2, #10
    274a:	2100      	movs	r1, #0
    274c:	4b0a      	ldr	r3, [pc, #40]	; (2778 <Validate_UintDecAsciiValue+0x38>)
    274e:	4798      	blx	r3
    2750:	0004      	movs	r4, r0
    ultoa(buf, value, 10U);
    2752:	220a      	movs	r2, #10
    2754:	0001      	movs	r1, r0
    2756:	a801      	add	r0, sp, #4
    2758:	4b08      	ldr	r3, [pc, #32]	; (277c <Validate_UintDecAsciiValue+0x3c>)
    275a:	4798      	blx	r3
    if (0 != strcmp((char*)pValue, buf))
    275c:	a901      	add	r1, sp, #4
    275e:	0028      	movs	r0, r5
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <Validate_UintDecAsciiValue+0x40>)
    2762:	4798      	blx	r3
    2764:	0003      	movs	r3, r0
        flag = false;
    2766:	2000      	movs	r0, #0
    if (value > maxValue)
    2768:	42b4      	cmp	r4, r6
    276a:	d901      	bls.n	2770 <Validate_UintDecAsciiValue+0x30>
}
    276c:	b004      	add	sp, #16
    276e:	bd70      	pop	{r4, r5, r6, pc}
    if (0 != strcmp((char*)pValue, buf))
    2770:	4258      	negs	r0, r3
    2772:	4158      	adcs	r0, r3
    2774:	b2c0      	uxtb	r0, r0
    2776:	e7f9      	b.n	276c <Validate_UintDecAsciiValue+0x2c>
    2778:	00017e11 	.word	0x00017e11
    277c:	000026c5 	.word	0x000026c5
    2780:	00017a7d 	.word	0x00017a7d

00002784 <stricmp>:

/*
 * \brief Compare Strings without Case Sensitivity
 */ 
int stricmp( char *s1, const char *s2 )
{
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	46de      	mov	lr, fp
    2788:	4657      	mov	r7, sl
    278a:	464e      	mov	r6, r9
    278c:	b5c0      	push	{r6, r7, lr}
    278e:	b082      	sub	sp, #8
    2790:	0004      	movs	r4, r0
    2792:	000e      	movs	r6, r1
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    2794:	2800      	cmp	r0, #0
    2796:	d006      	beq.n	27a6 <stricmp+0x22>
	if (s2 == NULL) return *s1;
    2798:	2900      	cmp	r1, #0
    279a:	d009      	beq.n	27b0 <stricmp+0x2c>

	char c1, c2;
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    279c:	4b1c      	ldr	r3, [pc, #112]	; (2810 <stricmp+0x8c>)
    279e:	469b      	mov	fp, r3
    27a0:	2703      	movs	r7, #3
    27a2:	469a      	mov	sl, r3
    27a4:	e011      	b.n	27ca <stricmp+0x46>
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    27a6:	2900      	cmp	r1, #0
    27a8:	d02f      	beq.n	280a <stricmp+0x86>
    27aa:	7808      	ldrb	r0, [r1, #0]
    27ac:	4240      	negs	r0, r0
    27ae:	e026      	b.n	27fe <stricmp+0x7a>
	if (s2 == NULL) return *s1;
    27b0:	7800      	ldrb	r0, [r0, #0]
    27b2:	e024      	b.n	27fe <stricmp+0x7a>
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    27b4:	3520      	adds	r5, #32
    27b6:	9501      	str	r5, [sp, #4]
    27b8:	e00f      	b.n	27da <stricmp+0x56>
    27ba:	b2d3      	uxtb	r3, r2
    27bc:	4599      	cmp	r9, r3
    27be:	d119      	bne.n	27f4 <stricmp+0x70>
	{
		if (*s1 == '\0') break;
    27c0:	7823      	ldrb	r3, [r4, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d016      	beq.n	27f4 <stricmp+0x70>
		++s1; ++s2;
    27c6:	3401      	adds	r4, #1
    27c8:	3601      	adds	r6, #1
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    27ca:	7825      	ldrb	r5, [r4, #0]
    27cc:	47d8      	blx	fp
    27ce:	1940      	adds	r0, r0, r5
    27d0:	7843      	ldrb	r3, [r0, #1]
    27d2:	403b      	ands	r3, r7
    27d4:	9501      	str	r5, [sp, #4]
    27d6:	2b01      	cmp	r3, #1
    27d8:	d0ec      	beq.n	27b4 <stricmp+0x30>
    27da:	466b      	mov	r3, sp
    27dc:	791b      	ldrb	r3, [r3, #4]
    27de:	4699      	mov	r9, r3
    27e0:	7835      	ldrb	r5, [r6, #0]
    27e2:	47d0      	blx	sl
    27e4:	1940      	adds	r0, r0, r5
    27e6:	7843      	ldrb	r3, [r0, #1]
    27e8:	403b      	ands	r3, r7
    27ea:	002a      	movs	r2, r5
    27ec:	2b01      	cmp	r3, #1
    27ee:	d1e4      	bne.n	27ba <stricmp+0x36>
    27f0:	3220      	adds	r2, #32
    27f2:	e7e2      	b.n	27ba <stricmp+0x36>
	}

	return c1 - c2;
    27f4:	20ff      	movs	r0, #255	; 0xff
    27f6:	9f01      	ldr	r7, [sp, #4]
    27f8:	4007      	ands	r7, r0
    27fa:	4010      	ands	r0, r2
    27fc:	1a38      	subs	r0, r7, r0
}
    27fe:	b002      	add	sp, #8
    2800:	bc1c      	pop	{r2, r3, r4}
    2802:	4691      	mov	r9, r2
    2804:	469a      	mov	sl, r3
    2806:	46a3      	mov	fp, r4
    2808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    280a:	2000      	movs	r0, #0
    280c:	e7f7      	b.n	27fe <stricmp+0x7a>
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	00017649 	.word	0x00017649

00002814 <Validate_OnOffAsciiValue>:
{
    2814:	b510      	push	{r4, lr}
    2816:	0004      	movs	r4, r0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    2818:	4908      	ldr	r1, [pc, #32]	; (283c <Validate_OnOffAsciiValue+0x28>)
    281a:	4b09      	ldr	r3, [pc, #36]	; (2840 <Validate_OnOffAsciiValue+0x2c>)
    281c:	4798      	blx	r3
        result = OFF_STR_IDX;
    281e:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    2820:	2800      	cmp	r0, #0
    2822:	d101      	bne.n	2828 <Validate_OnOffAsciiValue+0x14>
}
    2824:	0018      	movs	r0, r3
    2826:	bd10      	pop	{r4, pc}
    else if (0U == stricmp(pValue, gapParseOnOff[ON_STR_IDX]))
    2828:	4906      	ldr	r1, [pc, #24]	; (2844 <Validate_OnOffAsciiValue+0x30>)
    282a:	0020      	movs	r0, r4
    282c:	4b04      	ldr	r3, [pc, #16]	; (2840 <Validate_OnOffAsciiValue+0x2c>)
    282e:	4798      	blx	r3
        result = ON_STR_IDX;
    2830:	0003      	movs	r3, r0
    2832:	1e58      	subs	r0, r3, #1
    2834:	4183      	sbcs	r3, r0
    2836:	3301      	adds	r3, #1
    2838:	e7f4      	b.n	2824 <Validate_OnOffAsciiValue+0x10>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	0001d6b4 	.word	0x0001d6b4
    2840:	00002785 	.word	0x00002785
    2844:	0001d6b8 	.word	0x0001d6b8

00002848 <Validate_Str1Str2AsciiValue>:
{
    2848:	b570      	push	{r4, r5, r6, lr}
    284a:	0004      	movs	r4, r0
    284c:	0015      	movs	r5, r2
    if(0U == stricmp(pValue, pStr1))
    284e:	4b08      	ldr	r3, [pc, #32]	; (2870 <Validate_Str1Str2AsciiValue+0x28>)
    2850:	4798      	blx	r3
        result = FIRST_STR_IDX;
    2852:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, pStr1))
    2854:	2800      	cmp	r0, #0
    2856:	d101      	bne.n	285c <Validate_Str1Str2AsciiValue+0x14>
}
    2858:	0018      	movs	r0, r3
    285a:	bd70      	pop	{r4, r5, r6, pc}
    else if (0U == stricmp(pValue, pStr2))
    285c:	0029      	movs	r1, r5
    285e:	0020      	movs	r0, r4
    2860:	4b03      	ldr	r3, [pc, #12]	; (2870 <Validate_Str1Str2AsciiValue+0x28>)
    2862:	4798      	blx	r3
        result = SECOND_STR_IDX;
    2864:	0003      	movs	r3, r0
    2866:	1e58      	subs	r0, r3, #1
    2868:	4183      	sbcs	r3, r0
    286a:	3301      	adds	r3, #1
    286c:	e7f4      	b.n	2858 <Validate_Str1Str2AsciiValue+0x10>
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	00002785 	.word	0x00002785

00002874 <xtoi>:

/*
 * \brief Converts the input string consisting of hexadecimal digits into an integer value
 */ 
int xtoi(char *c)
{
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	46ce      	mov	lr, r9
    2878:	4647      	mov	r7, r8
    287a:	b580      	push	{r7, lr}
    287c:	0007      	movs	r7, r0
  size_t szlen = strlen(c);
    287e:	4b16      	ldr	r3, [pc, #88]	; (28d8 <xtoi+0x64>)
    2880:	4798      	blx	r3
  int idx, ptr, factor,result =0;

  if(szlen > 0){
    2882:	3801      	subs	r0, #1
  int idx, ptr, factor,result =0;
    2884:	2600      	movs	r6, #0
  if(szlen > 0){
    2886:	2807      	cmp	r0, #7
    2888:	d821      	bhi.n	28ce <xtoi+0x5a>
    if(szlen > 8) return 0;
    result = 0;
    factor = 1;

    for(idx = szlen-1; idx >= 0; --idx){
    288a:	1e04      	subs	r4, r0, #0
    288c:	db1c      	blt.n	28c8 <xtoi+0x54>
    288e:	2501      	movs	r5, #1
    if(isxdigit( *(c+idx))){
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <xtoi+0x68>)
    2892:	4699      	mov	r9, r3
    2894:	2344      	movs	r3, #68	; 0x44
    2896:	4698      	mov	r8, r3
    2898:	e00a      	b.n	28b0 <xtoi+0x3c>
	if( *(c + idx) >= 97){
	  ptr = ( *(c + idx) - 97) + 10;
	}else if( *(c + idx) >= 65){
	  ptr = ( *(c + idx) - 65) + 10;
	}else{
	  ptr = *(c + idx) - 48;
    289a:	001a      	movs	r2, r3
    289c:	3a30      	subs	r2, #48	; 0x30
	}else if( *(c + idx) >= 65){
    289e:	2b40      	cmp	r3, #64	; 0x40
    28a0:	d901      	bls.n	28a6 <xtoi+0x32>
	  ptr = ( *(c + idx) - 65) + 10;
    28a2:	3b37      	subs	r3, #55	; 0x37
    28a4:	001a      	movs	r2, r3
	}
	result += (ptr * factor);
    28a6:	436a      	muls	r2, r5
    28a8:	18b6      	adds	r6, r6, r2
	factor *= 16;
    28aa:	012d      	lsls	r5, r5, #4
    for(idx = szlen-1; idx >= 0; --idx){
    28ac:	3c01      	subs	r4, #1
    28ae:	d40e      	bmi.n	28ce <xtoi+0x5a>
    if(isxdigit( *(c+idx))){
    28b0:	47c8      	blx	r9
    28b2:	5d3b      	ldrb	r3, [r7, r4]
    28b4:	18c0      	adds	r0, r0, r3
    28b6:	7842      	ldrb	r2, [r0, #1]
    28b8:	4641      	mov	r1, r8
    28ba:	4211      	tst	r1, r2
    28bc:	d006      	beq.n	28cc <xtoi+0x58>
	if( *(c + idx) >= 97){
    28be:	2b60      	cmp	r3, #96	; 0x60
    28c0:	d9eb      	bls.n	289a <xtoi+0x26>
	  ptr = ( *(c + idx) - 97) + 10;
    28c2:	3b57      	subs	r3, #87	; 0x57
    28c4:	001a      	movs	r2, r3
    28c6:	e7ee      	b.n	28a6 <xtoi+0x32>
    result = 0;
    28c8:	2600      	movs	r6, #0
    28ca:	e000      	b.n	28ce <xtoi+0x5a>
    }else{
		return 4;
    28cc:	2604      	movs	r6, #4
    }
    }
  }

  return result;
    28ce:	0030      	movs	r0, r6
    28d0:	bc0c      	pop	{r2, r3}
    28d2:	4690      	mov	r8, r2
    28d4:	4699      	mov	r9, r3
    28d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d8:	00017b05 	.word	0x00017b05
    28dc:	00017649 	.word	0x00017649

000028e0 <Parser_HexAsciiToInt>:
{
    28e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28e2:	46de      	mov	lr, fp
    28e4:	4657      	mov	r7, sl
    28e6:	464e      	mov	r6, r9
    28e8:	4645      	mov	r5, r8
    28ea:	b5e0      	push	{r5, r6, r7, lr}
    28ec:	b083      	sub	sp, #12
    28ee:	0004      	movs	r4, r0
    28f0:	000f      	movs	r7, r1
    28f2:	4690      	mov	r8, r2
    uint16_t rxHexAsciiLen = strlen(pInHexAscii);
    28f4:	0008      	movs	r0, r1
    28f6:	4b1f      	ldr	r3, [pc, #124]	; (2974 <Parser_HexAsciiToInt+0x94>)
    28f8:	4798      	blx	r3
    28fa:	b283      	uxth	r3, r0
    uint16_t jCtr = rxHexAsciiLen >> 1;
    28fc:	085d      	lsrs	r5, r3, #1
    if(rxHexAsciiLen % 2 == 0)
    28fe:	07da      	lsls	r2, r3, #31
    2900:	d401      	bmi.n	2906 <Parser_HexAsciiToInt+0x26>
        jCtr --;
    2902:	3d01      	subs	r5, #1
    2904:	b2ad      	uxth	r5, r5
    uint8_t retValue = 0;
    2906:	2000      	movs	r0, #0
    if(hexAsciiLen == rxHexAsciiLen)
    2908:	42a3      	cmp	r3, r4
    290a:	d006      	beq.n	291a <Parser_HexAsciiToInt+0x3a>
}
    290c:	b003      	add	sp, #12
    290e:	bc3c      	pop	{r2, r3, r4, r5}
    2910:	4690      	mov	r8, r2
    2912:	4699      	mov	r9, r3
    2914:	46a2      	mov	sl, r4
    2916:	46ab      	mov	fp, r5
    2918:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(rxHexAsciiLen > 0)
    291a:	2c00      	cmp	r4, #0
    291c:	d027      	beq.n	296e <Parser_HexAsciiToInt+0x8e>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    291e:	ae01      	add	r6, sp, #4
            tempBuff[iCtr] = '\0';
    2920:	2300      	movs	r3, #0
    2922:	469a      	mov	sl, r3
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    2924:	4b14      	ldr	r3, [pc, #80]	; (2978 <Parser_HexAsciiToInt+0x98>)
    2926:	4699      	mov	r9, r3
    2928:	e013      	b.n	2952 <Parser_HexAsciiToInt+0x72>
                tempBuff[iCtr] = '0';
    292a:	2330      	movs	r3, #48	; 0x30
    292c:	7033      	strb	r3, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    292e:	193b      	adds	r3, r7, r4
    2930:	3b01      	subs	r3, #1
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen --;
    2936:	3c01      	subs	r4, #1
    2938:	b2a4      	uxth	r4, r4
            tempBuff[iCtr] = '\0';
    293a:	4653      	mov	r3, sl
    293c:	70b3      	strb	r3, [r6, #2]
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    293e:	46ab      	mov	fp, r5
    2940:	44c3      	add	fp, r8
    2942:	0030      	movs	r0, r6
    2944:	47c8      	blx	r9
    2946:	465b      	mov	r3, fp
    2948:	7018      	strb	r0, [r3, #0]
            jCtr --;
    294a:	3d01      	subs	r5, #1
    294c:	b2ad      	uxth	r5, r5
        while(rxHexAsciiLen > 0)
    294e:	2c00      	cmp	r4, #0
    2950:	d00b      	beq.n	296a <Parser_HexAsciiToInt+0x8a>
            if(rxHexAsciiLen >= 2U)
    2952:	2c01      	cmp	r4, #1
    2954:	d9e9      	bls.n	292a <Parser_HexAsciiToInt+0x4a>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    2956:	193b      	adds	r3, r7, r4
    2958:	1e9a      	subs	r2, r3, #2
    295a:	7812      	ldrb	r2, [r2, #0]
    295c:	7032      	strb	r2, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    295e:	3b01      	subs	r3, #1
    2960:	781b      	ldrb	r3, [r3, #0]
    2962:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen -= 2U;
    2964:	3c02      	subs	r4, #2
    2966:	b2a4      	uxth	r4, r4
    2968:	e7e7      	b.n	293a <Parser_HexAsciiToInt+0x5a>
        retValue = 1;
    296a:	2001      	movs	r0, #1
    296c:	e7ce      	b.n	290c <Parser_HexAsciiToInt+0x2c>
    296e:	2001      	movs	r0, #1
    2970:	e7cc      	b.n	290c <Parser_HexAsciiToInt+0x2c>
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	00017b05 	.word	0x00017b05
    2978:	00002875 	.word	0x00002875

0000297c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    297c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    297e:	2000      	movs	r0, #0
    2980:	4b08      	ldr	r3, [pc, #32]	; (29a4 <delay_init+0x28>)
    2982:	4798      	blx	r3
    2984:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2986:	4c08      	ldr	r4, [pc, #32]	; (29a8 <delay_init+0x2c>)
    2988:	21fa      	movs	r1, #250	; 0xfa
    298a:	0089      	lsls	r1, r1, #2
    298c:	47a0      	blx	r4
    298e:	4b07      	ldr	r3, [pc, #28]	; (29ac <delay_init+0x30>)
    2990:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2992:	4907      	ldr	r1, [pc, #28]	; (29b0 <delay_init+0x34>)
    2994:	0028      	movs	r0, r5
    2996:	47a0      	blx	r4
    2998:	4b06      	ldr	r3, [pc, #24]	; (29b4 <delay_init+0x38>)
    299a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    299c:	2205      	movs	r2, #5
    299e:	4b06      	ldr	r3, [pc, #24]	; (29b8 <delay_init+0x3c>)
    29a0:	601a      	str	r2, [r3, #0]
}
    29a2:	bd70      	pop	{r4, r5, r6, pc}
    29a4:	00004c11 	.word	0x00004c11
    29a8:	00014509 	.word	0x00014509
    29ac:	2000000c 	.word	0x2000000c
    29b0:	000f4240 	.word	0x000f4240
    29b4:	20000010 	.word	0x20000010
    29b8:	e000e010 	.word	0xe000e010

000029bc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    29bc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <delay_cycles_us+0x24>)
    29c0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    29c2:	4a08      	ldr	r2, [pc, #32]	; (29e4 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    29c4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29c6:	2180      	movs	r1, #128	; 0x80
    29c8:	0249      	lsls	r1, r1, #9
	while (n--) {
    29ca:	3801      	subs	r0, #1
    29cc:	d307      	bcc.n	29de <delay_cycles_us+0x22>
	if (n > 0) {
    29ce:	2c00      	cmp	r4, #0
    29d0:	d0fb      	beq.n	29ca <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    29d2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29d4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29d6:	6813      	ldr	r3, [r2, #0]
    29d8:	420b      	tst	r3, r1
    29da:	d0fc      	beq.n	29d6 <delay_cycles_us+0x1a>
    29dc:	e7f5      	b.n	29ca <delay_cycles_us+0xe>
	}
}
    29de:	bd30      	pop	{r4, r5, pc}
    29e0:	20000010 	.word	0x20000010
    29e4:	e000e010 	.word	0xe000e010

000029e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    29e8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    29ea:	4b08      	ldr	r3, [pc, #32]	; (2a0c <delay_cycles_ms+0x24>)
    29ec:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    29ee:	4a08      	ldr	r2, [pc, #32]	; (2a10 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    29f0:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29f2:	2180      	movs	r1, #128	; 0x80
    29f4:	0249      	lsls	r1, r1, #9
	while (n--) {
    29f6:	3801      	subs	r0, #1
    29f8:	d307      	bcc.n	2a0a <delay_cycles_ms+0x22>
	if (n > 0) {
    29fa:	2c00      	cmp	r4, #0
    29fc:	d0fb      	beq.n	29f6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    29fe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2a00:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2a02:	6813      	ldr	r3, [r2, #0]
    2a04:	420b      	tst	r3, r1
    2a06:	d0fc      	beq.n	2a02 <delay_cycles_ms+0x1a>
    2a08:	e7f5      	b.n	29f6 <delay_cycles_ms+0xe>
	}
}
    2a0a:	bd30      	pop	{r4, r5, pc}
    2a0c:	2000000c 	.word	0x2000000c
    2a10:	e000e010 	.word	0xe000e010

00002a14 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2a14:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <cpu_irq_enter_critical+0x34>)
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d106      	bne.n	2a2a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a1c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2a20:	2b00      	cmp	r3, #0
    2a22:	d007      	beq.n	2a34 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a24:	2200      	movs	r2, #0
    2a26:	4b09      	ldr	r3, [pc, #36]	; (2a4c <cpu_irq_enter_critical+0x38>)
    2a28:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a2a:	4a07      	ldr	r2, [pc, #28]	; (2a48 <cpu_irq_enter_critical+0x34>)
    2a2c:	6813      	ldr	r3, [r2, #0]
    2a2e:	3301      	adds	r3, #1
    2a30:	6013      	str	r3, [r2, #0]
}
    2a32:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2a34:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2a36:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a3a:	2200      	movs	r2, #0
    2a3c:	4b04      	ldr	r3, [pc, #16]	; (2a50 <cpu_irq_enter_critical+0x3c>)
    2a3e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a40:	3201      	adds	r2, #1
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <cpu_irq_enter_critical+0x38>)
    2a44:	701a      	strb	r2, [r3, #0]
    2a46:	e7f0      	b.n	2a2a <cpu_irq_enter_critical+0x16>
    2a48:	200009e8 	.word	0x200009e8
    2a4c:	200009ec 	.word	0x200009ec
    2a50:	20000014 	.word	0x20000014

00002a54 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a54:	4b08      	ldr	r3, [pc, #32]	; (2a78 <cpu_irq_leave_critical+0x24>)
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	3a01      	subs	r2, #1
    2a5a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d109      	bne.n	2a76 <cpu_irq_leave_critical+0x22>
    2a62:	4b06      	ldr	r3, [pc, #24]	; (2a7c <cpu_irq_leave_critical+0x28>)
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d005      	beq.n	2a76 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a6a:	2201      	movs	r2, #1
    2a6c:	4b04      	ldr	r3, [pc, #16]	; (2a80 <cpu_irq_leave_critical+0x2c>)
    2a6e:	701a      	strb	r2, [r3, #0]
    2a70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a74:	b662      	cpsie	i
	}
}
    2a76:	4770      	bx	lr
    2a78:	200009e8 	.word	0x200009e8
    2a7c:	200009ec 	.word	0x200009ec
    2a80:	20000014 	.word	0x20000014

00002a84 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a86:	46c6      	mov	lr, r8
    2a88:	b500      	push	{lr}
    2a8a:	b082      	sub	sp, #8
    2a8c:	ac01      	add	r4, sp, #4
    2a8e:	2501      	movs	r5, #1
    2a90:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2a92:	2300      	movs	r3, #0
    2a94:	4698      	mov	r8, r3
    2a96:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2a98:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2a9a:	0021      	movs	r1, r4
    2a9c:	2013      	movs	r0, #19
    2a9e:	4e12      	ldr	r6, [pc, #72]	; (2ae8 <system_board_init+0x64>)
    2aa0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2aa2:	4f12      	ldr	r7, [pc, #72]	; (2aec <system_board_init+0x68>)
    2aa4:	2380      	movs	r3, #128	; 0x80
    2aa6:	031b      	lsls	r3, r3, #12
    2aa8:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2aaa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    2aac:	0021      	movs	r1, r4
    2aae:	2012      	movs	r0, #18
    2ab0:	47b0      	blx	r6
    2ab2:	2380      	movs	r3, #128	; 0x80
    2ab4:	02db      	lsls	r3, r3, #11
    2ab6:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ab8:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    2aba:	0021      	movs	r1, r4
    2abc:	200d      	movs	r0, #13
    2abe:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ac0:	2380      	movs	r3, #128	; 0x80
    2ac2:	019b      	lsls	r3, r3, #6
    2ac4:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ac6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    2ac8:	0021      	movs	r1, r4
    2aca:	2009      	movs	r0, #9
    2acc:	47b0      	blx	r6
    2ace:	2380      	movs	r3, #128	; 0x80
    2ad0:	009b      	lsls	r3, r3, #2
    2ad2:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2ad4:	4643      	mov	r3, r8
    2ad6:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2ad8:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2ada:	0021      	movs	r1, r4
    2adc:	201c      	movs	r0, #28
    2ade:	47b0      	blx	r6
		
}
    2ae0:	b002      	add	sp, #8
    2ae2:	bc04      	pop	{r2}
    2ae4:	4690      	mov	r8, r2
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	00003301 	.word	0x00003301
    2aec:	40002800 	.word	0x40002800

00002af0 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    2af0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2af2:	4b2f      	ldr	r3, [pc, #188]	; (2bb0 <ADC_Handler+0xc0>)
    2af4:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2af6:	6823      	ldr	r3, [r4, #0]
    2af8:	799a      	ldrb	r2, [r3, #6]
    2afa:	795d      	ldrb	r5, [r3, #5]
    2afc:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    2afe:	07ea      	lsls	r2, r5, #31
    2b00:	d52a      	bpl.n	2b58 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2b02:	2201      	movs	r2, #1
    2b04:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    2b06:	6962      	ldr	r2, [r4, #20]
    2b08:	1c93      	adds	r3, r2, #2
    2b0a:	6163      	str	r3, [r4, #20]
    2b0c:	6823      	ldr	r3, [r4, #0]
    2b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2b10:	b29b      	uxth	r3, r3
    2b12:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    2b14:	8b23      	ldrh	r3, [r4, #24]
    2b16:	3b01      	subs	r3, #1
    2b18:	b29b      	uxth	r3, r3
    2b1a:	8323      	strh	r3, [r4, #24]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d015      	beq.n	2b4c <ADC_Handler+0x5c>
			if (module->software_trigger == true
    2b20:	7f63      	ldrb	r3, [r4, #29]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d018      	beq.n	2b58 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    2b26:	6822      	ldr	r2, [r4, #0]
    2b28:	79d3      	ldrb	r3, [r2, #7]
    2b2a:	b25b      	sxtb	r3, r3
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	db13      	blt.n	2b58 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    2b30:	8c13      	ldrh	r3, [r2, #32]
    2b32:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	d1fb      	bne.n	2b30 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2b38:	7e13      	ldrb	r3, [r2, #24]
    2b3a:	2102      	movs	r1, #2
    2b3c:	430b      	orrs	r3, r1
    2b3e:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    2b40:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    2b42:	8c13      	ldrh	r3, [r2, #32]
    2b44:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2b46:	2b00      	cmp	r3, #0
    2b48:	d1fb      	bne.n	2b42 <ADC_Handler+0x52>
    2b4a:	e005      	b.n	2b58 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2b4c:	2301      	movs	r3, #1
    2b4e:	6822      	ldr	r2, [r4, #0]
    2b50:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    2b52:	7f23      	ldrb	r3, [r4, #28]
    2b54:	2b05      	cmp	r3, #5
    2b56:	d016      	beq.n	2b86 <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    2b58:	076b      	lsls	r3, r5, #29
    2b5a:	d508      	bpl.n	2b6e <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2b5c:	2304      	movs	r3, #4
    2b5e:	6822      	ldr	r2, [r4, #0]
    2b60:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2b62:	7ee3      	ldrb	r3, [r4, #27]
    2b64:	079b      	lsls	r3, r3, #30
    2b66:	d502      	bpl.n	2b6e <ADC_Handler+0x7e>
    2b68:	7ea3      	ldrb	r3, [r4, #26]
    2b6a:	079b      	lsls	r3, r3, #30
    2b6c:	d417      	bmi.n	2b9e <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2b6e:	07ab      	lsls	r3, r5, #30
    2b70:	d508      	bpl.n	2b84 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2b72:	2302      	movs	r3, #2
    2b74:	6822      	ldr	r2, [r4, #0]
    2b76:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2b78:	7ee3      	ldrb	r3, [r4, #27]
    2b7a:	075b      	lsls	r3, r3, #29
    2b7c:	d502      	bpl.n	2b84 <ADC_Handler+0x94>
    2b7e:	7ea3      	ldrb	r3, [r4, #26]
    2b80:	075b      	lsls	r3, r3, #29
    2b82:	d410      	bmi.n	2ba6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    2b84:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    2b86:	2300      	movs	r3, #0
    2b88:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    2b8a:	7ee3      	ldrb	r3, [r4, #27]
    2b8c:	07db      	lsls	r3, r3, #31
    2b8e:	d5e3      	bpl.n	2b58 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2b90:	7ea3      	ldrb	r3, [r4, #26]
    2b92:	07db      	lsls	r3, r3, #31
    2b94:	d5e0      	bpl.n	2b58 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2b96:	0020      	movs	r0, r4
    2b98:	68a3      	ldr	r3, [r4, #8]
    2b9a:	4798      	blx	r3
    2b9c:	e7dc      	b.n	2b58 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2b9e:	0020      	movs	r0, r4
    2ba0:	68e3      	ldr	r3, [r4, #12]
    2ba2:	4798      	blx	r3
    2ba4:	e7e3      	b.n	2b6e <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2ba6:	6923      	ldr	r3, [r4, #16]
    2ba8:	0020      	movs	r0, r4
    2baa:	4798      	blx	r3
}
    2bac:	e7ea      	b.n	2b84 <ADC_Handler+0x94>
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	2000202c 	.word	0x2000202c

00002bb4 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    2bb4:	2301      	movs	r3, #1
    2bb6:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    2bb8:	2300      	movs	r3, #0
    2bba:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    2bbc:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    2bbe:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    2bc0:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    2bc2:	220f      	movs	r2, #15
    2bc4:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    2bc6:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    2bc8:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    2bca:	7203      	strb	r3, [r0, #8]
}
    2bcc:	4770      	bx	lr

00002bce <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    2bce:	6802      	ldr	r2, [r0, #0]
    2bd0:	6813      	ldr	r3, [r2, #0]
    2bd2:	2102      	movs	r1, #2
    2bd4:	430b      	orrs	r3, r1
    2bd6:	6013      	str	r3, [r2, #0]

}
    2bd8:	4770      	bx	lr

00002bda <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    2bda:	2303      	movs	r3, #3
    2bdc:	6802      	ldr	r2, [r0, #0]
    2bde:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    2be0:	6802      	ldr	r2, [r0, #0]
    2be2:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    2be4:	6802      	ldr	r2, [r0, #0]
    2be6:	6813      	ldr	r3, [r2, #0]
    2be8:	2102      	movs	r1, #2
    2bea:	438b      	bics	r3, r1
    2bec:	6013      	str	r3, [r2, #0]
}
    2bee:	4770      	bx	lr

00002bf0 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	0004      	movs	r4, r0
    2bf4:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    2bf6:	78d3      	ldrb	r3, [r2, #3]
    2bf8:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    2bfa:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    2bfc:	7853      	ldrb	r3, [r2, #1]
    2bfe:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    2c00:	7913      	ldrb	r3, [r2, #4]
    2c02:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    2c04:	7813      	ldrb	r3, [r2, #0]
    2c06:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    2c08:	7891      	ldrb	r1, [r2, #2]
    2c0a:	02c9      	lsls	r1, r1, #11
    2c0c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    2c0e:	7851      	ldrb	r1, [r2, #1]
    2c10:	0209      	lsls	r1, r1, #8
    2c12:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    2c14:	78d1      	ldrb	r1, [r2, #3]
    2c16:	0089      	lsls	r1, r1, #2
    2c18:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    2c1a:	7911      	ldrb	r1, [r2, #4]
    2c1c:	0149      	lsls	r1, r1, #5
    2c1e:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    2c20:	7991      	ldrb	r1, [r2, #6]
    2c22:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    2c24:	79d0      	ldrb	r0, [r2, #7]
    2c26:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    2c28:	4301      	orrs	r1, r0
    2c2a:	7a10      	ldrb	r0, [r2, #8]
    2c2c:	0300      	lsls	r0, r0, #12
    2c2e:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    2c30:	7952      	ldrb	r2, [r2, #5]
    2c32:	0412      	lsls	r2, r2, #16
    2c34:	20f0      	movs	r0, #240	; 0xf0
    2c36:	0300      	lsls	r0, r0, #12
    2c38:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    2c3a:	430a      	orrs	r2, r1
    2c3c:	4313      	orrs	r3, r2
    2c3e:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    2c40:	682b      	ldr	r3, [r5, #0]
    2c42:	079b      	lsls	r3, r3, #30
    2c44:	d401      	bmi.n	2c4a <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    2c46:	602e      	str	r6, [r5, #0]
	}
}
    2c48:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    2c4a:	0020      	movs	r0, r4
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <aes_set_config+0x6c>)
    2c4e:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    2c50:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    2c52:	0020      	movs	r0, r4
    2c54:	4b02      	ldr	r3, [pc, #8]	; (2c60 <aes_set_config+0x70>)
    2c56:	4798      	blx	r3
    2c58:	e7f6      	b.n	2c48 <aes_set_config+0x58>
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00002bdb 	.word	0x00002bdb
    2c60:	00002bcf 	.word	0x00002bcf

00002c64 <aes_init>:
{
    2c64:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2c66:	4c05      	ldr	r4, [pc, #20]	; (2c7c <aes_init+0x18>)
    2c68:	69e5      	ldr	r5, [r4, #28]
    2c6a:	2380      	movs	r3, #128	; 0x80
    2c6c:	019b      	lsls	r3, r3, #6
    2c6e:	432b      	orrs	r3, r5
    2c70:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    2c72:	2301      	movs	r3, #1
    2c74:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    2c76:	4b02      	ldr	r3, [pc, #8]	; (2c80 <aes_init+0x1c>)
    2c78:	4798      	blx	r3
}
    2c7a:	bd70      	pop	{r4, r5, r6, pc}
    2c7c:	40000400 	.word	0x40000400
    2c80:	00002bf1 	.word	0x00002bf1

00002c84 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    2c84:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    2c86:	7943      	ldrb	r3, [r0, #5]
    2c88:	2b01      	cmp	r3, #1
    2c8a:	d005      	beq.n	2c98 <aes_write_key+0x14>
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d010      	beq.n	2cb2 <aes_write_key+0x2e>
    2c90:	2b02      	cmp	r3, #2
    2c92:	d10d      	bne.n	2cb0 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    2c94:	2508      	movs	r5, #8
    2c96:	e000      	b.n	2c9a <aes_write_key+0x16>
		key_length = 6;
    2c98:	2506      	movs	r5, #6
{
    2c9a:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    2c9c:	c910      	ldmia	r1!, {r4}
    2c9e:	1c9a      	adds	r2, r3, #2
    2ca0:	0092      	lsls	r2, r2, #2
    2ca2:	6806      	ldr	r6, [r0, #0]
    2ca4:	46b4      	mov	ip, r6
    2ca6:	4462      	add	r2, ip
    2ca8:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    2caa:	3301      	adds	r3, #1
    2cac:	42ab      	cmp	r3, r5
    2cae:	d3f5      	bcc.n	2c9c <aes_write_key+0x18>
		key++;
	}
}
    2cb0:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    2cb2:	2504      	movs	r5, #4
    2cb4:	e7f1      	b.n	2c9a <aes_write_key+0x16>
	...

00002cb8 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    2cb8:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    2cba:	2300      	movs	r3, #0
    2cbc:	6802      	ldr	r2, [r0, #0]
    2cbe:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    2cc0:	4b0f      	ldr	r3, [pc, #60]	; (2d00 <aes_write_input_data+0x48>)
    2cc2:	6842      	ldr	r2, [r0, #4]
    2cc4:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    2cc6:	4a0f      	ldr	r2, [pc, #60]	; (2d04 <aes_write_input_data+0x4c>)
    2cc8:	4293      	cmp	r3, r2
    2cca:	d00a      	beq.n	2ce2 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    2ccc:	7903      	ldrb	r3, [r0, #4]
    2cce:	2b03      	cmp	r3, #3
    2cd0:	d00e      	beq.n	2cf0 <aes_write_input_data+0x38>
    2cd2:	000c      	movs	r4, r1
    2cd4:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    2cd6:	6803      	ldr	r3, [r0, #0]
    2cd8:	c904      	ldmia	r1!, {r2}
    2cda:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    2cdc:	428c      	cmp	r4, r1
    2cde:	d1fa      	bne.n	2cd6 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    2ce0:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    2ce2:	6803      	ldr	r3, [r0, #0]
    2ce4:	680a      	ldr	r2, [r1, #0]
    2ce6:	639a      	str	r2, [r3, #56]	; 0x38
    2ce8:	6803      	ldr	r3, [r0, #0]
    2cea:	684a      	ldr	r2, [r1, #4]
    2cec:	639a      	str	r2, [r3, #56]	; 0x38
    2cee:	e7f7      	b.n	2ce0 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    2cf0:	7983      	ldrb	r3, [r0, #6]
    2cf2:	3b02      	subs	r3, #2
    2cf4:	2b01      	cmp	r3, #1
    2cf6:	d8ec      	bhi.n	2cd2 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    2cf8:	6803      	ldr	r3, [r0, #0]
    2cfa:	680a      	ldr	r2, [r1, #0]
    2cfc:	639a      	str	r2, [r3, #56]	; 0x38
    2cfe:	e7ef      	b.n	2ce0 <aes_write_input_data+0x28>
    2d00:	00ff00ff 	.word	0x00ff00ff
    2d04:	00010003 	.word	0x00010003

00002d08 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    2d08:	2300      	movs	r3, #0
    2d0a:	6802      	ldr	r2, [r0, #0]
    2d0c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    2d0e:	4b10      	ldr	r3, [pc, #64]	; (2d50 <aes_read_output_data+0x48>)
    2d10:	6842      	ldr	r2, [r0, #4]
    2d12:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    2d14:	4a0f      	ldr	r2, [pc, #60]	; (2d54 <aes_read_output_data+0x4c>)
    2d16:	4293      	cmp	r3, r2
    2d18:	d00a      	beq.n	2d30 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    2d1a:	7903      	ldrb	r3, [r0, #4]
    2d1c:	2b03      	cmp	r3, #3
    2d1e:	d00e      	beq.n	2d3e <aes_read_output_data+0x36>
    2d20:	000a      	movs	r2, r1
    2d22:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    2d24:	6803      	ldr	r3, [r0, #0]
    2d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d28:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    2d2a:	428a      	cmp	r2, r1
    2d2c:	d1fa      	bne.n	2d24 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    2d2e:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    2d30:	6803      	ldr	r3, [r0, #0]
    2d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d34:	600b      	str	r3, [r1, #0]
    2d36:	6803      	ldr	r3, [r0, #0]
    2d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d3a:	604b      	str	r3, [r1, #4]
    2d3c:	e7f7      	b.n	2d2e <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    2d3e:	7983      	ldrb	r3, [r0, #6]
    2d40:	3b02      	subs	r3, #2
    2d42:	2b01      	cmp	r3, #1
    2d44:	d8ec      	bhi.n	2d20 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    2d46:	6803      	ldr	r3, [r0, #0]
    2d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d4a:	600b      	str	r3, [r1, #0]
    2d4c:	e7ef      	b.n	2d2e <aes_read_output_data+0x26>
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	00ff00ff 	.word	0x00ff00ff
    2d54:	00010003 	.word	0x00010003

00002d58 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d58:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2d5a:	2a00      	cmp	r2, #0
    2d5c:	d001      	beq.n	2d62 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2d5e:	0018      	movs	r0, r3
    2d60:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    2d62:	008b      	lsls	r3, r1, #2
    2d64:	4a06      	ldr	r2, [pc, #24]	; (2d80 <extint_register_callback+0x28>)
    2d66:	589b      	ldr	r3, [r3, r2]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d003      	beq.n	2d74 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2d6c:	4283      	cmp	r3, r0
    2d6e:	d005      	beq.n	2d7c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    2d70:	231d      	movs	r3, #29
    2d72:	e7f4      	b.n	2d5e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    2d74:	0089      	lsls	r1, r1, #2
    2d76:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    2d78:	2300      	movs	r3, #0
    2d7a:	e7f0      	b.n	2d5e <extint_register_callback+0x6>
		return STATUS_OK;
    2d7c:	2300      	movs	r3, #0
    2d7e:	e7ee      	b.n	2d5e <extint_register_callback+0x6>
    2d80:	20002034 	.word	0x20002034

00002d84 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d84:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2d86:	2900      	cmp	r1, #0
    2d88:	d001      	beq.n	2d8e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    2d8a:	0018      	movs	r0, r3
    2d8c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2d8e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    2d90:	281f      	cmp	r0, #31
    2d92:	d800      	bhi.n	2d96 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    2d94:	4a02      	ldr	r2, [pc, #8]	; (2da0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    2d96:	2301      	movs	r3, #1
    2d98:	4083      	lsls	r3, r0
    2d9a:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    2d9c:	2300      	movs	r3, #0
    2d9e:	e7f4      	b.n	2d8a <extint_chan_enable_callback+0x6>
    2da0:	40002400 	.word	0x40002400

00002da4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2da4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2da6:	2200      	movs	r2, #0
    2da8:	4b10      	ldr	r3, [pc, #64]	; (2dec <EIC_Handler+0x48>)
    2daa:	701a      	strb	r2, [r3, #0]
    2dac:	2300      	movs	r3, #0
    2dae:	4910      	ldr	r1, [pc, #64]	; (2df0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2db0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2db2:	4e10      	ldr	r6, [pc, #64]	; (2df4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2db4:	4c0d      	ldr	r4, [pc, #52]	; (2dec <EIC_Handler+0x48>)
    2db6:	e00a      	b.n	2dce <EIC_Handler+0x2a>
		return eics[eic_index];
    2db8:	490d      	ldr	r1, [pc, #52]	; (2df0 <EIC_Handler+0x4c>)
    2dba:	e008      	b.n	2dce <EIC_Handler+0x2a>
    2dbc:	7823      	ldrb	r3, [r4, #0]
    2dbe:	3301      	adds	r3, #1
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	7023      	strb	r3, [r4, #0]
    2dc4:	2b0f      	cmp	r3, #15
    2dc6:	d810      	bhi.n	2dea <EIC_Handler+0x46>
		return NULL;
    2dc8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2dca:	2b1f      	cmp	r3, #31
    2dcc:	d9f4      	bls.n	2db8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2dce:	0028      	movs	r0, r5
    2dd0:	4018      	ands	r0, r3
    2dd2:	2201      	movs	r2, #1
    2dd4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2dd6:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    2dd8:	4210      	tst	r0, r2
    2dda:	d0ef      	beq.n	2dbc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2ddc:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2dde:	009b      	lsls	r3, r3, #2
    2de0:	599b      	ldr	r3, [r3, r6]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d0ea      	beq.n	2dbc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2de6:	4798      	blx	r3
    2de8:	e7e8      	b.n	2dbc <EIC_Handler+0x18>
			}
		}
	}
}
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	20002030 	.word	0x20002030
    2df0:	40002400 	.word	0x40002400
    2df4:	20002034 	.word	0x20002034

00002df8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2df8:	4a06      	ldr	r2, [pc, #24]	; (2e14 <_extint_enable+0x1c>)
    2dfa:	7813      	ldrb	r3, [r2, #0]
    2dfc:	2102      	movs	r1, #2
    2dfe:	430b      	orrs	r3, r1
    2e00:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e02:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e04:	6853      	ldr	r3, [r2, #4]
    2e06:	4219      	tst	r1, r3
    2e08:	d1fc      	bne.n	2e04 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e0a:	6853      	ldr	r3, [r2, #4]
    2e0c:	4218      	tst	r0, r3
    2e0e:	d1f9      	bne.n	2e04 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2e10:	4770      	bx	lr
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	40002400 	.word	0x40002400

00002e18 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    2e18:	4a06      	ldr	r2, [pc, #24]	; (2e34 <_extint_disable+0x1c>)
    2e1a:	7813      	ldrb	r3, [r2, #0]
    2e1c:	2102      	movs	r1, #2
    2e1e:	438b      	bics	r3, r1
    2e20:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e22:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e24:	6853      	ldr	r3, [r2, #4]
    2e26:	4219      	tst	r1, r3
    2e28:	d1fc      	bne.n	2e24 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e2a:	6853      	ldr	r3, [r2, #4]
    2e2c:	4218      	tst	r0, r3
    2e2e:	d1f9      	bne.n	2e24 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2e30:	4770      	bx	lr
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	40002400 	.word	0x40002400

00002e38 <_system_extint_init>:
{
    2e38:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    2e3a:	4a12      	ldr	r2, [pc, #72]	; (2e84 <_system_extint_init+0x4c>)
    2e3c:	6951      	ldr	r1, [r2, #20]
    2e3e:	2380      	movs	r3, #128	; 0x80
    2e40:	009b      	lsls	r3, r3, #2
    2e42:	430b      	orrs	r3, r1
    2e44:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    2e46:	4a10      	ldr	r2, [pc, #64]	; (2e88 <_system_extint_init+0x50>)
    2e48:	7813      	ldrb	r3, [r2, #0]
    2e4a:	2101      	movs	r1, #1
    2e4c:	430b      	orrs	r3, r1
    2e4e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e50:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e52:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e54:	6853      	ldr	r3, [r2, #4]
    2e56:	4219      	tst	r1, r3
    2e58:	d1fc      	bne.n	2e54 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e5a:	6853      	ldr	r3, [r2, #4]
    2e5c:	4218      	tst	r0, r3
    2e5e:	d1f9      	bne.n	2e54 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    2e60:	4a09      	ldr	r2, [pc, #36]	; (2e88 <_system_extint_init+0x50>)
    2e62:	7813      	ldrb	r3, [r2, #0]
    2e64:	2110      	movs	r1, #16
    2e66:	430b      	orrs	r3, r1
    2e68:	7013      	strb	r3, [r2, #0]
    2e6a:	4b08      	ldr	r3, [pc, #32]	; (2e8c <_system_extint_init+0x54>)
    2e6c:	0019      	movs	r1, r3
    2e6e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2e70:	2200      	movs	r2, #0
    2e72:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2e74:	428b      	cmp	r3, r1
    2e76:	d1fc      	bne.n	2e72 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e78:	2208      	movs	r2, #8
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <_system_extint_init+0x58>)
    2e7c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2e7e:	4b05      	ldr	r3, [pc, #20]	; (2e94 <_system_extint_init+0x5c>)
    2e80:	4798      	blx	r3
}
    2e82:	bd10      	pop	{r4, pc}
    2e84:	40000400 	.word	0x40000400
    2e88:	40002400 	.word	0x40002400
    2e8c:	20002034 	.word	0x20002034
    2e90:	e000e100 	.word	0xe000e100
    2e94:	00002df9 	.word	0x00002df9

00002e98 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2e98:	2300      	movs	r3, #0
    2e9a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2e9c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2e9e:	2201      	movs	r2, #1
    2ea0:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    2ea2:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2ea4:	3201      	adds	r2, #1
    2ea6:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    2ea8:	7243      	strb	r3, [r0, #9]
}
    2eaa:	4770      	bx	lr

00002eac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	b083      	sub	sp, #12
    2eb0:	0005      	movs	r5, r0
    2eb2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    2eb4:	4b1c      	ldr	r3, [pc, #112]	; (2f28 <extint_chan_set_config+0x7c>)
    2eb6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2eb8:	a901      	add	r1, sp, #4
    2eba:	2300      	movs	r3, #0
    2ebc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2ebe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2ec0:	7923      	ldrb	r3, [r4, #4]
    2ec2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2ec4:	7a23      	ldrb	r3, [r4, #8]
    2ec6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2ec8:	7820      	ldrb	r0, [r4, #0]
    2eca:	4b18      	ldr	r3, [pc, #96]	; (2f2c <extint_chan_set_config+0x80>)
    2ecc:	4798      	blx	r3
		return NULL;
    2ece:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2ed0:	2d1f      	cmp	r5, #31
    2ed2:	d800      	bhi.n	2ed6 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    2ed4:	4916      	ldr	r1, [pc, #88]	; (2f30 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2ed6:	2207      	movs	r2, #7
    2ed8:	402a      	ands	r2, r5
    2eda:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2edc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2ede:	7aa3      	ldrb	r3, [r4, #10]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d001      	beq.n	2ee8 <extint_chan_set_config+0x3c>
    2ee4:	2308      	movs	r3, #8
    2ee6:	431f      	orrs	r7, r3
    2ee8:	08eb      	lsrs	r3, r5, #3
    2eea:	009b      	lsls	r3, r3, #2
    2eec:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2eee:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2ef0:	260f      	movs	r6, #15
    2ef2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2ef4:	43b0      	bics	r0, r6
			(new_config << config_pos);
    2ef6:	4097      	lsls	r7, r2
    2ef8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2efa:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    2efc:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    2efe:	7a63      	ldrb	r3, [r4, #9]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d10b      	bne.n	2f1c <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    2f04:	698a      	ldr	r2, [r1, #24]
    2f06:	2301      	movs	r3, #1
    2f08:	40ab      	lsls	r3, r5
    2f0a:	43db      	mvns	r3, r3
    2f0c:	041b      	lsls	r3, r3, #16
    2f0e:	0c1b      	lsrs	r3, r3, #16
    2f10:	4013      	ands	r3, r2
    2f12:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    2f14:	4b07      	ldr	r3, [pc, #28]	; (2f34 <extint_chan_set_config+0x88>)
    2f16:	4798      	blx	r3
}
    2f18:	b003      	add	sp, #12
    2f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    2f1c:	698a      	ldr	r2, [r1, #24]
    2f1e:	2301      	movs	r3, #1
    2f20:	40ab      	lsls	r3, r5
    2f22:	4313      	orrs	r3, r2
    2f24:	618b      	str	r3, [r1, #24]
    2f26:	e7f5      	b.n	2f14 <extint_chan_set_config+0x68>
    2f28:	00002e19 	.word	0x00002e19
    2f2c:	00004de9 	.word	0x00004de9
    2f30:	40002400 	.word	0x40002400
    2f34:	00002df9 	.word	0x00002df9

00002f38 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2f38:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    2f3a:	4a1e      	ldr	r2, [pc, #120]	; (2fb4 <nvm_set_config+0x7c>)
    2f3c:	6993      	ldr	r3, [r2, #24]
    2f3e:	2104      	movs	r1, #4
    2f40:	430b      	orrs	r3, r1
    2f42:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f44:	4b1c      	ldr	r3, [pc, #112]	; (2fb8 <nvm_set_config+0x80>)
    2f46:	2220      	movs	r2, #32
    2f48:	32ff      	adds	r2, #255	; 0xff
    2f4a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2f4c:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    2f4e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    2f50:	07d2      	lsls	r2, r2, #31
    2f52:	d401      	bmi.n	2f58 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    2f54:	0018      	movs	r0, r3
    2f56:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2f58:	7803      	ldrb	r3, [r0, #0]
    2f5a:	021b      	lsls	r3, r3, #8
    2f5c:	22c0      	movs	r2, #192	; 0xc0
    2f5e:	0092      	lsls	r2, r2, #2
    2f60:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2f62:	7841      	ldrb	r1, [r0, #1]
    2f64:	01c9      	lsls	r1, r1, #7
    2f66:	22ff      	movs	r2, #255	; 0xff
    2f68:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2f6a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2f6c:	7881      	ldrb	r1, [r0, #2]
    2f6e:	0049      	lsls	r1, r1, #1
    2f70:	221e      	movs	r2, #30
    2f72:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2f74:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2f76:	78c2      	ldrb	r2, [r0, #3]
    2f78:	0492      	lsls	r2, r2, #18
    2f7a:	2180      	movs	r1, #128	; 0x80
    2f7c:	02c9      	lsls	r1, r1, #11
    2f7e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2f80:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2f82:	7902      	ldrb	r2, [r0, #4]
    2f84:	0412      	lsls	r2, r2, #16
    2f86:	21c0      	movs	r1, #192	; 0xc0
    2f88:	0289      	lsls	r1, r1, #10
    2f8a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2f8c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    2f8e:	4a0a      	ldr	r2, [pc, #40]	; (2fb8 <nvm_set_config+0x80>)
    2f90:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2f92:	6893      	ldr	r3, [r2, #8]
    2f94:	035b      	lsls	r3, r3, #13
    2f96:	0f5b      	lsrs	r3, r3, #29
    2f98:	4908      	ldr	r1, [pc, #32]	; (2fbc <nvm_set_config+0x84>)
    2f9a:	2408      	movs	r4, #8
    2f9c:	409c      	lsls	r4, r3
    2f9e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2fa0:	6893      	ldr	r3, [r2, #8]
    2fa2:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2fa4:	7843      	ldrb	r3, [r0, #1]
    2fa6:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2fa8:	8b13      	ldrh	r3, [r2, #24]
    2faa:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    2fac:	0fdb      	lsrs	r3, r3, #31
    2fae:	011b      	lsls	r3, r3, #4
    2fb0:	e7d0      	b.n	2f54 <nvm_set_config+0x1c>
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	40000400 	.word	0x40000400
    2fb8:	41004000 	.word	0x41004000
    2fbc:	200009f0 	.word	0x200009f0

00002fc0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2fc0:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2fc2:	4a30      	ldr	r2, [pc, #192]	; (3084 <nvm_execute_command+0xc4>)
    2fc4:	8814      	ldrh	r4, [r2, #0]
    2fc6:	8853      	ldrh	r3, [r2, #2]
    2fc8:	4363      	muls	r3, r4
    2fca:	428b      	cmp	r3, r1
    2fcc:	d20b      	bcs.n	2fe6 <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2fce:	2280      	movs	r2, #128	; 0x80
    2fd0:	0192      	lsls	r2, r2, #6
    2fd2:	4b2d      	ldr	r3, [pc, #180]	; (3088 <nvm_execute_command+0xc8>)
    2fd4:	18cb      	adds	r3, r1, r3
    2fd6:	4293      	cmp	r3, r2
    2fd8:	d905      	bls.n	2fe6 <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    2fda:	4c2c      	ldr	r4, [pc, #176]	; (308c <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    2fdc:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    2fde:	4a2c      	ldr	r2, [pc, #176]	; (3090 <nvm_execute_command+0xd0>)
    2fe0:	188a      	adds	r2, r1, r2
    2fe2:	42a2      	cmp	r2, r4
    2fe4:	d80e      	bhi.n	3004 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2fe6:	4b2b      	ldr	r3, [pc, #172]	; (3094 <nvm_execute_command+0xd4>)
    2fe8:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2fea:	2280      	movs	r2, #128	; 0x80
    2fec:	02d2      	lsls	r2, r2, #11
    2fee:	4322      	orrs	r2, r4
    2ff0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ff2:	2220      	movs	r2, #32
    2ff4:	32ff      	adds	r2, #255	; 0xff
    2ff6:	831a      	strh	r2, [r3, #24]
    2ff8:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2ffa:	07db      	lsls	r3, r3, #31
    2ffc:	d404      	bmi.n	3008 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2ffe:	4b25      	ldr	r3, [pc, #148]	; (3094 <nvm_execute_command+0xd4>)
    3000:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    3002:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    3004:	0018      	movs	r0, r3
    3006:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    3008:	2845      	cmp	r0, #69	; 0x45
    300a:	d829      	bhi.n	3060 <nvm_execute_command+0xa0>
    300c:	0083      	lsls	r3, r0, #2
    300e:	4a22      	ldr	r2, [pc, #136]	; (3098 <nvm_execute_command+0xd8>)
    3010:	58d3      	ldr	r3, [r2, r3]
    3012:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3014:	4b1f      	ldr	r3, [pc, #124]	; (3094 <nvm_execute_command+0xd4>)
    3016:	8b1b      	ldrh	r3, [r3, #24]
    3018:	05db      	lsls	r3, r3, #23
    301a:	d503      	bpl.n	3024 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    301c:	4b1d      	ldr	r3, [pc, #116]	; (3094 <nvm_execute_command+0xd4>)
    301e:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    3020:	2310      	movs	r3, #16
    3022:	e7ef      	b.n	3004 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    3024:	0889      	lsrs	r1, r1, #2
    3026:	0049      	lsls	r1, r1, #1
    3028:	4b1a      	ldr	r3, [pc, #104]	; (3094 <nvm_execute_command+0xd4>)
    302a:	61d9      	str	r1, [r3, #28]
			break;
    302c:	e003      	b.n	3036 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    302e:	0889      	lsrs	r1, r1, #2
    3030:	0049      	lsls	r1, r1, #1
    3032:	4b18      	ldr	r3, [pc, #96]	; (3094 <nvm_execute_command+0xd4>)
    3034:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    3036:	23fd      	movs	r3, #253	; 0xfd
    3038:	0005      	movs	r5, r0
    303a:	3d1a      	subs	r5, #26
    303c:	401d      	ands	r5, r3
    303e:	d013      	beq.n	3068 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    3040:	23a5      	movs	r3, #165	; 0xa5
    3042:	021b      	lsls	r3, r3, #8
    3044:	4318      	orrs	r0, r3
    3046:	4b13      	ldr	r3, [pc, #76]	; (3094 <nvm_execute_command+0xd4>)
    3048:	8018      	strh	r0, [r3, #0]
    304a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    304c:	2201      	movs	r2, #1
    304e:	7d0b      	ldrb	r3, [r1, #20]
    3050:	4213      	tst	r3, r2
    3052:	d0fc      	beq.n	304e <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    3054:	2d00      	cmp	r5, #0
    3056:	d00f      	beq.n	3078 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <nvm_execute_command+0xd4>)
    305a:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    305c:	2300      	movs	r3, #0
    305e:	e7d1      	b.n	3004 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    3060:	4b0c      	ldr	r3, [pc, #48]	; (3094 <nvm_execute_command+0xd4>)
    3062:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    3064:	2317      	movs	r3, #23
    3066:	e7cd      	b.n	3004 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    3068:	4b0a      	ldr	r3, [pc, #40]	; (3094 <nvm_execute_command+0xd4>)
    306a:	6859      	ldr	r1, [r3, #4]
    306c:	2280      	movs	r2, #128	; 0x80
    306e:	02d2      	lsls	r2, r2, #11
    3070:	430a      	orrs	r2, r1
    3072:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    3074:	685b      	ldr	r3, [r3, #4]
    3076:	e7e3      	b.n	3040 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    3078:	4a06      	ldr	r2, [pc, #24]	; (3094 <nvm_execute_command+0xd4>)
    307a:	6853      	ldr	r3, [r2, #4]
    307c:	4907      	ldr	r1, [pc, #28]	; (309c <nvm_execute_command+0xdc>)
    307e:	400b      	ands	r3, r1
    3080:	6053      	str	r3, [r2, #4]
    3082:	e7e9      	b.n	3058 <nvm_execute_command+0x98>
    3084:	200009f0 	.word	0x200009f0
    3088:	ff7fc000 	.word	0xff7fc000
    308c:	00001fff 	.word	0x00001fff
    3090:	ffc00000 	.word	0xffc00000
    3094:	41004000 	.word	0x41004000
    3098:	0001d724 	.word	0x0001d724
    309c:	fffbffff 	.word	0xfffbffff

000030a0 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    30a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    30a2:	4b2f      	ldr	r3, [pc, #188]	; (3160 <nvm_write_buffer+0xc0>)
    30a4:	881c      	ldrh	r4, [r3, #0]
    30a6:	885b      	ldrh	r3, [r3, #2]
    30a8:	4363      	muls	r3, r4
	if (destination_address >
    30aa:	4283      	cmp	r3, r0
    30ac:	d207      	bcs.n	30be <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    30ae:	4e2d      	ldr	r6, [pc, #180]	; (3164 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    30b0:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    30b2:	4b2d      	ldr	r3, [pc, #180]	; (3168 <nvm_write_buffer+0xc8>)
    30b4:	18c3      	adds	r3, r0, r3
    30b6:	42b3      	cmp	r3, r6
    30b8:	d806      	bhi.n	30c8 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    30ba:	2601      	movs	r6, #1
    30bc:	e000      	b.n	30c0 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    30be:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    30c0:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    30c2:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    30c4:	4218      	tst	r0, r3
    30c6:	d001      	beq.n	30cc <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    30c8:	0028      	movs	r0, r5
    30ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    30cc:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    30ce:	4294      	cmp	r4, r2
    30d0:	d3fa      	bcc.n	30c8 <nvm_write_buffer+0x28>
    30d2:	4b26      	ldr	r3, [pc, #152]	; (316c <nvm_write_buffer+0xcc>)
    30d4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    30d6:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    30d8:	07db      	lsls	r3, r3, #31
    30da:	d5f5      	bpl.n	30c8 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    30dc:	4c24      	ldr	r4, [pc, #144]	; (3170 <nvm_write_buffer+0xd0>)
    30de:	4b23      	ldr	r3, [pc, #140]	; (316c <nvm_write_buffer+0xcc>)
    30e0:	801c      	strh	r4, [r3, #0]
    30e2:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    30e4:	2401      	movs	r4, #1
    30e6:	7d2b      	ldrb	r3, [r5, #20]
    30e8:	4223      	tst	r3, r4
    30ea:	d0fc      	beq.n	30e6 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    30ec:	2420      	movs	r4, #32
    30ee:	34ff      	adds	r4, #255	; 0xff
    30f0:	4b1e      	ldr	r3, [pc, #120]	; (316c <nvm_write_buffer+0xcc>)
    30f2:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    30f4:	2a00      	cmp	r2, #0
    30f6:	d02c      	beq.n	3152 <nvm_write_buffer+0xb2>
    30f8:	2301      	movs	r3, #1
    30fa:	0005      	movs	r5, r0
    30fc:	439d      	bics	r5, r3
    30fe:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    3100:	1e54      	subs	r4, r2, #1
    3102:	46a4      	mov	ip, r4
    3104:	e009      	b.n	311a <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    3106:	18cf      	adds	r7, r1, r3
    3108:	787f      	ldrb	r7, [r7, #1]
    310a:	023f      	lsls	r7, r7, #8
    310c:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    310e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    3110:	3302      	adds	r3, #2
    3112:	b29b      	uxth	r3, r3
    3114:	3502      	adds	r5, #2
    3116:	429a      	cmp	r2, r3
    3118:	d904      	bls.n	3124 <nvm_write_buffer+0x84>
		data = buffer[i];
    311a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    311c:	4563      	cmp	r3, ip
    311e:	dbf2      	blt.n	3106 <nvm_write_buffer+0x66>
		data = buffer[i];
    3120:	b2a4      	uxth	r4, r4
    3122:	e7f4      	b.n	310e <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3124:	4b0e      	ldr	r3, [pc, #56]	; (3160 <nvm_write_buffer+0xc0>)
    3126:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3128:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    312a:	2b00      	cmp	r3, #0
    312c:	d1cc      	bne.n	30c8 <nvm_write_buffer+0x28>
    312e:	2a3f      	cmp	r2, #63	; 0x3f
    3130:	d8ca      	bhi.n	30c8 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    3132:	2e00      	cmp	r6, #0
    3134:	d106      	bne.n	3144 <nvm_write_buffer+0xa4>
    3136:	2200      	movs	r2, #0
    3138:	0001      	movs	r1, r0
    313a:	2004      	movs	r0, #4
    313c:	4b0d      	ldr	r3, [pc, #52]	; (3174 <nvm_write_buffer+0xd4>)
    313e:	4798      	blx	r3
    3140:	0005      	movs	r5, r0
    3142:	e7c1      	b.n	30c8 <nvm_write_buffer+0x28>
    3144:	2200      	movs	r2, #0
    3146:	0001      	movs	r1, r0
    3148:	201c      	movs	r0, #28
    314a:	4b0a      	ldr	r3, [pc, #40]	; (3174 <nvm_write_buffer+0xd4>)
    314c:	4798      	blx	r3
    314e:	0005      	movs	r5, r0
    3150:	e7ba      	b.n	30c8 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3152:	4b03      	ldr	r3, [pc, #12]	; (3160 <nvm_write_buffer+0xc0>)
    3154:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3156:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3158:	2b00      	cmp	r3, #0
    315a:	d0ea      	beq.n	3132 <nvm_write_buffer+0x92>
    315c:	e7b4      	b.n	30c8 <nvm_write_buffer+0x28>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	200009f0 	.word	0x200009f0
    3164:	00001fff 	.word	0x00001fff
    3168:	ffc00000 	.word	0xffc00000
    316c:	41004000 	.word	0x41004000
    3170:	ffffa544 	.word	0xffffa544
    3174:	00002fc1 	.word	0x00002fc1

00003178 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    3178:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    317a:	4b1b      	ldr	r3, [pc, #108]	; (31e8 <nvm_read_buffer+0x70>)
    317c:	881c      	ldrh	r4, [r3, #0]
    317e:	885b      	ldrh	r3, [r3, #2]
    3180:	4363      	muls	r3, r4
	if (source_address >
    3182:	4283      	cmp	r3, r0
    3184:	d205      	bcs.n	3192 <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3186:	4e19      	ldr	r6, [pc, #100]	; (31ec <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3188:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    318a:	4b19      	ldr	r3, [pc, #100]	; (31f0 <nvm_read_buffer+0x78>)
    318c:	18c3      	adds	r3, r0, r3
    318e:	42b3      	cmp	r3, r6
    3190:	d803      	bhi.n	319a <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    3192:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    3194:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    3196:	4218      	tst	r0, r3
    3198:	d001      	beq.n	319e <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    319a:	0028      	movs	r0, r5
    319c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    319e:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    31a0:	4294      	cmp	r4, r2
    31a2:	d3fa      	bcc.n	319a <nvm_read_buffer+0x22>
    31a4:	4b13      	ldr	r3, [pc, #76]	; (31f4 <nvm_read_buffer+0x7c>)
    31a6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    31a8:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    31aa:	07db      	lsls	r3, r3, #31
    31ac:	d5f5      	bpl.n	319a <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    31ae:	2420      	movs	r4, #32
    31b0:	34ff      	adds	r4, #255	; 0xff
    31b2:	4b10      	ldr	r3, [pc, #64]	; (31f4 <nvm_read_buffer+0x7c>)
    31b4:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    31b6:	2a00      	cmp	r2, #0
    31b8:	d014      	beq.n	31e4 <nvm_read_buffer+0x6c>
    31ba:	2301      	movs	r3, #1
    31bc:	4398      	bics	r0, r3
    31be:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    31c0:	1e56      	subs	r6, r2, #1
    31c2:	e004      	b.n	31ce <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    31c4:	3302      	adds	r3, #2
    31c6:	b29b      	uxth	r3, r3
    31c8:	3002      	adds	r0, #2
    31ca:	429a      	cmp	r2, r3
    31cc:	d908      	bls.n	31e0 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    31ce:	8804      	ldrh	r4, [r0, #0]
    31d0:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    31d2:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    31d4:	42b3      	cmp	r3, r6
    31d6:	daf5      	bge.n	31c4 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    31d8:	18cd      	adds	r5, r1, r3
    31da:	0a24      	lsrs	r4, r4, #8
    31dc:	706c      	strb	r4, [r5, #1]
    31de:	e7f1      	b.n	31c4 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    31e0:	2500      	movs	r5, #0
    31e2:	e7da      	b.n	319a <nvm_read_buffer+0x22>
    31e4:	2500      	movs	r5, #0
    31e6:	e7d8      	b.n	319a <nvm_read_buffer+0x22>
    31e8:	200009f0 	.word	0x200009f0
    31ec:	00001fff 	.word	0x00001fff
    31f0:	ffc00000 	.word	0xffc00000
    31f4:	41004000 	.word	0x41004000

000031f8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    31f8:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    31fa:	4a22      	ldr	r2, [pc, #136]	; (3284 <nvm_erase_row+0x8c>)
    31fc:	8813      	ldrh	r3, [r2, #0]
    31fe:	8852      	ldrh	r2, [r2, #2]
    3200:	435a      	muls	r2, r3
	if (row_address >
    3202:	4282      	cmp	r2, r0
    3204:	d207      	bcs.n	3216 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3206:	4c20      	ldr	r4, [pc, #128]	; (3288 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3208:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    320a:	4920      	ldr	r1, [pc, #128]	; (328c <nvm_erase_row+0x94>)
    320c:	1841      	adds	r1, r0, r1
    320e:	42a1      	cmp	r1, r4
    3210:	d807      	bhi.n	3222 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    3212:	2401      	movs	r4, #1
    3214:	e000      	b.n	3218 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    3216:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    3218:	009b      	lsls	r3, r3, #2
    321a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    321c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    321e:	4218      	tst	r0, r3
    3220:	d001      	beq.n	3226 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    3222:	0010      	movs	r0, r2
    3224:	bd10      	pop	{r4, pc}
    3226:	4b1a      	ldr	r3, [pc, #104]	; (3290 <nvm_erase_row+0x98>)
    3228:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    322a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    322c:	07db      	lsls	r3, r3, #31
    322e:	d5f8      	bpl.n	3222 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3230:	4b17      	ldr	r3, [pc, #92]	; (3290 <nvm_erase_row+0x98>)
    3232:	2220      	movs	r2, #32
    3234:	32ff      	adds	r2, #255	; 0xff
    3236:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3238:	0880      	lsrs	r0, r0, #2
    323a:	0040      	lsls	r0, r0, #1
    323c:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    323e:	2c00      	cmp	r4, #0
    3240:	d01b      	beq.n	327a <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    3242:	6859      	ldr	r1, [r3, #4]
    3244:	2280      	movs	r2, #128	; 0x80
    3246:	02d2      	lsls	r2, r2, #11
    3248:	430a      	orrs	r2, r1
    324a:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    324c:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    324e:	4a11      	ldr	r2, [pc, #68]	; (3294 <nvm_erase_row+0x9c>)
    3250:	801a      	strh	r2, [r3, #0]
    3252:	490f      	ldr	r1, [pc, #60]	; (3290 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    3254:	2201      	movs	r2, #1
    3256:	7d0b      	ldrb	r3, [r1, #20]
    3258:	4213      	tst	r3, r2
    325a:	d0fc      	beq.n	3256 <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    325c:	2c00      	cmp	r4, #0
    325e:	d004      	beq.n	326a <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    3260:	4a0b      	ldr	r2, [pc, #44]	; (3290 <nvm_erase_row+0x98>)
    3262:	6853      	ldr	r3, [r2, #4]
    3264:	490c      	ldr	r1, [pc, #48]	; (3298 <nvm_erase_row+0xa0>)
    3266:	400b      	ands	r3, r1
    3268:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    326a:	4b09      	ldr	r3, [pc, #36]	; (3290 <nvm_erase_row+0x98>)
    326c:	8b1a      	ldrh	r2, [r3, #24]
    326e:	201c      	movs	r0, #28
    3270:	4002      	ands	r2, r0
	return STATUS_OK;
    3272:	1e50      	subs	r0, r2, #1
    3274:	4182      	sbcs	r2, r0
    3276:	0092      	lsls	r2, r2, #2
    3278:	e7d3      	b.n	3222 <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    327a:	4a08      	ldr	r2, [pc, #32]	; (329c <nvm_erase_row+0xa4>)
    327c:	4b04      	ldr	r3, [pc, #16]	; (3290 <nvm_erase_row+0x98>)
    327e:	801a      	strh	r2, [r3, #0]
    3280:	e7e7      	b.n	3252 <nvm_erase_row+0x5a>
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	200009f0 	.word	0x200009f0
    3288:	00001fff 	.word	0x00001fff
    328c:	ffc00000 	.word	0xffc00000
    3290:	41004000 	.word	0x41004000
    3294:	ffffa51a 	.word	0xffffa51a
    3298:	fffbffff 	.word	0xfffbffff
    329c:	ffffa502 	.word	0xffffa502

000032a0 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    32a0:	4b15      	ldr	r3, [pc, #84]	; (32f8 <nvm_get_parameters+0x58>)
    32a2:	2220      	movs	r2, #32
    32a4:	32ff      	adds	r2, #255	; 0xff
    32a6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    32a8:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    32aa:	0359      	lsls	r1, r3, #13
    32ac:	0f49      	lsrs	r1, r1, #29
    32ae:	3a18      	subs	r2, #24
    32b0:	3aff      	subs	r2, #255	; 0xff
    32b2:	408a      	lsls	r2, r1
	parameters->page_size =
    32b4:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    32b6:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    32b8:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    32ba:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    32bc:	4b0f      	ldr	r3, [pc, #60]	; (32fc <nvm_get_parameters+0x5c>)
    32be:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    32c0:	065b      	lsls	r3, r3, #25
    32c2:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    32c4:	2b07      	cmp	r3, #7
    32c6:	d010      	beq.n	32ea <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    32c8:	2206      	movs	r2, #6
    32ca:	1ad2      	subs	r2, r2, r3
    32cc:	2304      	movs	r3, #4
    32ce:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    32d0:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    32d2:	4b0a      	ldr	r3, [pc, #40]	; (32fc <nvm_get_parameters+0x5c>)
    32d4:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    32da:	2b07      	cmp	r3, #7
    32dc:	d008      	beq.n	32f0 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    32de:	2207      	movs	r2, #7
    32e0:	1ad2      	subs	r2, r2, r3
    32e2:	2304      	movs	r3, #4
    32e4:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    32e6:	6083      	str	r3, [r0, #8]
	}
}
    32e8:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    32ea:	2300      	movs	r3, #0
    32ec:	6043      	str	r3, [r0, #4]
    32ee:	e7f0      	b.n	32d2 <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    32f0:	2300      	movs	r3, #0
    32f2:	6083      	str	r3, [r0, #8]
    32f4:	e7f8      	b.n	32e8 <nvm_get_parameters+0x48>
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	41004000 	.word	0x41004000
    32fc:	00804000 	.word	0x00804000

00003300 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3300:	b500      	push	{lr}
    3302:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3304:	ab01      	add	r3, sp, #4
    3306:	2280      	movs	r2, #128	; 0x80
    3308:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    330a:	780a      	ldrb	r2, [r1, #0]
    330c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    330e:	784a      	ldrb	r2, [r1, #1]
    3310:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3312:	788a      	ldrb	r2, [r1, #2]
    3314:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3316:	0019      	movs	r1, r3
    3318:	4b01      	ldr	r3, [pc, #4]	; (3320 <port_pin_set_config+0x20>)
    331a:	4798      	blx	r3
}
    331c:	b003      	add	sp, #12
    331e:	bd00      	pop	{pc}
    3320:	00004de9 	.word	0x00004de9

00003324 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3324:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    3326:	6918      	ldr	r0, [r3, #16]
    3328:	1e43      	subs	r3, r0, #1
    332a:	4198      	sbcs	r0, r3
    332c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    332e:	4770      	bx	lr

00003330 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    3330:	b570      	push	{r4, r5, r6, lr}
    3332:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3334:	6806      	ldr	r6, [r0, #0]
    3336:	2204      	movs	r2, #4
    3338:	4b08      	ldr	r3, [pc, #32]	; (335c <rtc_count_enable+0x2c>)
    333a:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    333c:	4d08      	ldr	r5, [pc, #32]	; (3360 <rtc_count_enable+0x30>)
    333e:	0020      	movs	r0, r4
    3340:	47a8      	blx	r5
    3342:	2800      	cmp	r0, #0
    3344:	d1fb      	bne.n	333e <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    3346:	8833      	ldrh	r3, [r6, #0]
    3348:	2202      	movs	r2, #2
    334a:	4313      	orrs	r3, r2
    334c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    334e:	4d04      	ldr	r5, [pc, #16]	; (3360 <rtc_count_enable+0x30>)
    3350:	0020      	movs	r0, r4
    3352:	47a8      	blx	r5
    3354:	2800      	cmp	r0, #0
    3356:	d1fb      	bne.n	3350 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    3358:	bd70      	pop	{r4, r5, r6, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	e000e100 	.word	0xe000e100
    3360:	00003325 	.word	0x00003325

00003364 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3368:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    336a:	2104      	movs	r1, #4
    336c:	2380      	movs	r3, #128	; 0x80
    336e:	4a0a      	ldr	r2, [pc, #40]	; (3398 <rtc_count_disable+0x34>)
    3370:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    3372:	4d0a      	ldr	r5, [pc, #40]	; (339c <rtc_count_disable+0x38>)
    3374:	0020      	movs	r0, r4
    3376:	47a8      	blx	r5
    3378:	2800      	cmp	r0, #0
    337a:	d1fb      	bne.n	3374 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    337c:	4b08      	ldr	r3, [pc, #32]	; (33a0 <rtc_count_disable+0x3c>)
    337e:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    3380:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    3382:	8833      	ldrh	r3, [r6, #0]
    3384:	2202      	movs	r2, #2
    3386:	4393      	bics	r3, r2
    3388:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    338a:	4d04      	ldr	r5, [pc, #16]	; (339c <rtc_count_disable+0x38>)
    338c:	0020      	movs	r0, r4
    338e:	47a8      	blx	r5
    3390:	2800      	cmp	r0, #0
    3392:	d1fb      	bne.n	338c <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	e000e100 	.word	0xe000e100
    339c:	00003325 	.word	0x00003325
    33a0:	ffff81ff 	.word	0xffff81ff

000033a4 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    33a4:	b570      	push	{r4, r5, r6, lr}
    33a6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33a8:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <rtc_count_reset+0x30>)
    33ac:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    33ae:	2300      	movs	r3, #0
    33b0:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    33b2:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    33b4:	4d08      	ldr	r5, [pc, #32]	; (33d8 <rtc_count_reset+0x34>)
    33b6:	0020      	movs	r0, r4
    33b8:	47a8      	blx	r5
    33ba:	2800      	cmp	r0, #0
    33bc:	d1fb      	bne.n	33b6 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    33be:	8833      	ldrh	r3, [r6, #0]
    33c0:	2201      	movs	r2, #1
    33c2:	4313      	orrs	r3, r2
    33c4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    33c6:	4d04      	ldr	r5, [pc, #16]	; (33d8 <rtc_count_reset+0x34>)
    33c8:	0020      	movs	r0, r4
    33ca:	47a8      	blx	r5
    33cc:	2800      	cmp	r0, #0
    33ce:	d1fb      	bne.n	33c8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	00003365 	.word	0x00003365
    33d8:	00003325 	.word	0x00003325

000033dc <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33de:	0004      	movs	r4, r0
    33e0:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33e2:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    33e4:	4d0c      	ldr	r5, [pc, #48]	; (3418 <rtc_count_set_count+0x3c>)
    33e6:	0020      	movs	r0, r4
    33e8:	47a8      	blx	r5
    33ea:	2800      	cmp	r0, #0
    33ec:	d1fb      	bne.n	33e6 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    33ee:	7923      	ldrb	r3, [r4, #4]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d009      	beq.n	3408 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    33f4:	2017      	movs	r0, #23
	switch(module->mode){
    33f6:	2b01      	cmp	r3, #1
    33f8:	d105      	bne.n	3406 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    33fa:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    33fc:	4d06      	ldr	r5, [pc, #24]	; (3418 <rtc_count_set_count+0x3c>)
    33fe:	0020      	movs	r0, r4
    3400:	47a8      	blx	r5
    3402:	2800      	cmp	r0, #0
    3404:	d1fb      	bne.n	33fe <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    3406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    3408:	4b04      	ldr	r3, [pc, #16]	; (341c <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    340a:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    340c:	429e      	cmp	r6, r3
    340e:	d8fa      	bhi.n	3406 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    3410:	b2b6      	uxth	r6, r6
    3412:	833e      	strh	r6, [r7, #24]
			break;
    3414:	e7f2      	b.n	33fc <rtc_count_set_count+0x20>
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	00003325 	.word	0x00003325
    341c:	0000ffff 	.word	0x0000ffff

00003420 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3424:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    3426:	4d08      	ldr	r5, [pc, #32]	; (3448 <rtc_count_get_count+0x28>)
    3428:	0020      	movs	r0, r4
    342a:	47a8      	blx	r5
    342c:	2800      	cmp	r0, #0
    342e:	d1fb      	bne.n	3428 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    3430:	7923      	ldrb	r3, [r4, #4]
    3432:	2b00      	cmp	r3, #0
    3434:	d004      	beq.n	3440 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    3436:	2000      	movs	r0, #0
	switch (module->mode) {
    3438:	2b01      	cmp	r3, #1
    343a:	d100      	bne.n	343e <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    343c:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    343e:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    3440:	8b30      	ldrh	r0, [r6, #24]
    3442:	b280      	uxth	r0, r0
			break;
    3444:	e7fb      	b.n	343e <rtc_count_get_count+0x1e>
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	00003325 	.word	0x00003325

0000344c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    344c:	b5f0      	push	{r4, r5, r6, r7, lr}
    344e:	b083      	sub	sp, #12
    3450:	0004      	movs	r4, r0
    3452:	9101      	str	r1, [sp, #4]
    3454:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3456:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    3458:	4f13      	ldr	r7, [pc, #76]	; (34a8 <rtc_count_set_compare+0x5c>)
    345a:	0020      	movs	r0, r4
    345c:	47b8      	blx	r7
    345e:	2800      	cmp	r0, #0
    3460:	d1fb      	bne.n	345a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    3462:	7923      	ldrb	r3, [r4, #4]
    3464:	2b00      	cmp	r3, #0
    3466:	d00e      	beq.n	3486 <rtc_count_set_compare+0x3a>
    3468:	2b01      	cmp	r3, #1
    346a:	d119      	bne.n	34a0 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    346c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    346e:	2d01      	cmp	r5, #1
    3470:	d817      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    3472:	3508      	adds	r5, #8
    3474:	00ad      	lsls	r5, r5, #2
    3476:	9b01      	ldr	r3, [sp, #4]
    3478:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    347a:	4d0b      	ldr	r5, [pc, #44]	; (34a8 <rtc_count_set_compare+0x5c>)
    347c:	0020      	movs	r0, r4
    347e:	47a8      	blx	r5
    3480:	2800      	cmp	r0, #0
    3482:	d1fb      	bne.n	347c <rtc_count_set_compare+0x30>
    3484:	e00d      	b.n	34a2 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    3486:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    3488:	2d02      	cmp	r5, #2
    348a:	d80a      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    348c:	4b07      	ldr	r3, [pc, #28]	; (34ac <rtc_count_set_compare+0x60>)
    348e:	9a01      	ldr	r2, [sp, #4]
    3490:	429a      	cmp	r2, r3
    3492:	d806      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    3494:	466b      	mov	r3, sp
    3496:	889b      	ldrh	r3, [r3, #4]
    3498:	3510      	adds	r5, #16
    349a:	006d      	lsls	r5, r5, #1
    349c:	53ab      	strh	r3, [r5, r6]
			break;
    349e:	e7ec      	b.n	347a <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    34a0:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    34a2:	b003      	add	sp, #12
    34a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	00003325 	.word	0x00003325
    34ac:	0000ffff 	.word	0x0000ffff

000034b0 <rtc_count_init>:
{
    34b0:	b570      	push	{r4, r5, r6, lr}
    34b2:	0004      	movs	r4, r0
    34b4:	0015      	movs	r5, r2
	module->hw = hw;
    34b6:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    34b8:	4a1f      	ldr	r2, [pc, #124]	; (3538 <rtc_count_init+0x88>)
    34ba:	6951      	ldr	r1, [r2, #20]
    34bc:	2380      	movs	r3, #128	; 0x80
    34be:	005b      	lsls	r3, r3, #1
    34c0:	430b      	orrs	r3, r1
    34c2:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    34c4:	2205      	movs	r2, #5
    34c6:	4b1d      	ldr	r3, [pc, #116]	; (353c <rtc_count_init+0x8c>)
    34c8:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    34ca:	4b1d      	ldr	r3, [pc, #116]	; (3540 <rtc_count_init+0x90>)
    34cc:	4798      	blx	r3
	module->mode                = config->mode;
    34ce:	78ab      	ldrb	r3, [r5, #2]
    34d0:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    34d2:	4b1c      	ldr	r3, [pc, #112]	; (3544 <rtc_count_init+0x94>)
    34d4:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    34d6:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    34d8:	792b      	ldrb	r3, [r5, #4]
    34da:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    34dc:	8829      	ldrh	r1, [r5, #0]
    34de:	430b      	orrs	r3, r1
    34e0:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    34e2:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    34e4:	78ab      	ldrb	r3, [r5, #2]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d013      	beq.n	3512 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    34ea:	2017      	movs	r0, #23
	switch (config->mode) {
    34ec:	2b01      	cmp	r3, #1
    34ee:	d10f      	bne.n	3510 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    34f0:	8813      	ldrh	r3, [r2, #0]
    34f2:	b29b      	uxth	r3, r3
    34f4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    34f6:	78eb      	ldrb	r3, [r5, #3]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d003      	beq.n	3504 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    34fc:	8813      	ldrh	r3, [r2, #0]
    34fe:	2180      	movs	r1, #128	; 0x80
    3500:	430b      	orrs	r3, r1
    3502:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    3504:	68a9      	ldr	r1, [r5, #8]
    3506:	2200      	movs	r2, #0
    3508:	0020      	movs	r0, r4
    350a:	4b0f      	ldr	r3, [pc, #60]	; (3548 <rtc_count_init+0x98>)
    350c:	4798      	blx	r3
	return STATUS_OK;
    350e:	2000      	movs	r0, #0
}
    3510:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    3512:	8813      	ldrh	r3, [r2, #0]
    3514:	2104      	movs	r1, #4
    3516:	430b      	orrs	r3, r1
    3518:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    351a:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    351c:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    351e:	2b00      	cmp	r3, #0
    3520:	d1f6      	bne.n	3510 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    3522:	2200      	movs	r2, #0
    3524:	68a9      	ldr	r1, [r5, #8]
    3526:	0020      	movs	r0, r4
    3528:	4e07      	ldr	r6, [pc, #28]	; (3548 <rtc_count_init+0x98>)
    352a:	47b0      	blx	r6
    352c:	68e9      	ldr	r1, [r5, #12]
    352e:	2201      	movs	r2, #1
    3530:	0020      	movs	r0, r4
    3532:	47b0      	blx	r6
	return STATUS_OK;
    3534:	2000      	movs	r0, #0
    3536:	e7eb      	b.n	3510 <rtc_count_init+0x60>
    3538:	40000400 	.word	0x40000400
    353c:	40001000 	.word	0x40001000
    3540:	000033a5 	.word	0x000033a5
    3544:	20002074 	.word	0x20002074
    3548:	0000344d 	.word	0x0000344d

0000354c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    354c:	2a0a      	cmp	r2, #10
    354e:	d009      	beq.n	3564 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    3550:	2a07      	cmp	r2, #7
    3552:	d907      	bls.n	3564 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    3554:	7903      	ldrb	r3, [r0, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d010      	beq.n	357c <rtc_count_register_callback+0x30>
    355a:	2b01      	cmp	r3, #1
    355c:	d112      	bne.n	3584 <rtc_count_register_callback+0x38>
    355e:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    3560:	2a09      	cmp	r2, #9
    3562:	d809      	bhi.n	3578 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    3564:	1c93      	adds	r3, r2, #2
    3566:	009b      	lsls	r3, r3, #2
    3568:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    356a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    356c:	2101      	movs	r1, #1
    356e:	4091      	lsls	r1, r2
    3570:	430b      	orrs	r3, r1
    3572:	b29b      	uxth	r3, r3
    3574:	8683      	strh	r3, [r0, #52]	; 0x34
    3576:	2300      	movs	r3, #0
	}

	return status;
}
    3578:	0018      	movs	r0, r3
    357a:	4770      	bx	lr
    357c:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    357e:	2a0a      	cmp	r2, #10
    3580:	d8fa      	bhi.n	3578 <rtc_count_register_callback+0x2c>
    3582:	e7ef      	b.n	3564 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    3584:	2317      	movs	r3, #23
    3586:	e7f7      	b.n	3578 <rtc_count_register_callback+0x2c>

00003588 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    3588:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    358a:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    358c:	290a      	cmp	r1, #10
    358e:	d011      	beq.n	35b4 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    3590:	2907      	cmp	r1, #7
    3592:	d912      	bls.n	35ba <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    3594:	2380      	movs	r3, #128	; 0x80
    3596:	005b      	lsls	r3, r3, #1
    3598:	000c      	movs	r4, r1
    359a:	3c08      	subs	r4, #8
    359c:	40a3      	lsls	r3, r4
    359e:	24c0      	movs	r4, #192	; 0xc0
    35a0:	00a4      	lsls	r4, r4, #2
    35a2:	4023      	ands	r3, r4
    35a4:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    35a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    35a8:	2201      	movs	r2, #1
    35aa:	408a      	lsls	r2, r1
    35ac:	4313      	orrs	r3, r2
    35ae:	b29b      	uxth	r3, r3
    35b0:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    35b2:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    35b4:	4b04      	ldr	r3, [pc, #16]	; (35c8 <rtc_count_enable_callback+0x40>)
    35b6:	8153      	strh	r3, [r2, #10]
    35b8:	e7f5      	b.n	35a6 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    35ba:	2401      	movs	r4, #1
    35bc:	408c      	lsls	r4, r1
    35be:	23ff      	movs	r3, #255	; 0xff
    35c0:	4023      	ands	r3, r4
    35c2:	8153      	strh	r3, [r2, #10]
    35c4:	e7ef      	b.n	35a6 <rtc_count_enable_callback+0x1e>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	ffff8000 	.word	0xffff8000

000035cc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    35cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35ce:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    35d0:	290a      	cmp	r1, #10
    35d2:	d010      	beq.n	35f6 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    35d4:	2907      	cmp	r1, #7
    35d6:	d911      	bls.n	35fc <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    35d8:	2380      	movs	r3, #128	; 0x80
    35da:	005b      	lsls	r3, r3, #1
    35dc:	000c      	movs	r4, r1
    35de:	3c08      	subs	r4, #8
    35e0:	40a3      	lsls	r3, r4
    35e2:	24c0      	movs	r4, #192	; 0xc0
    35e4:	00a4      	lsls	r4, r4, #2
    35e6:	4023      	ands	r3, r4
    35e8:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    35ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    35ec:	2201      	movs	r2, #1
    35ee:	408a      	lsls	r2, r1
    35f0:	4393      	bics	r3, r2
    35f2:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    35f4:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    35f6:	4b04      	ldr	r3, [pc, #16]	; (3608 <rtc_count_disable_callback+0x3c>)
    35f8:	8113      	strh	r3, [r2, #8]
    35fa:	e7f6      	b.n	35ea <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    35fc:	2401      	movs	r4, #1
    35fe:	408c      	lsls	r4, r1
    3600:	23ff      	movs	r3, #255	; 0xff
    3602:	4023      	ands	r3, r4
    3604:	8113      	strh	r3, [r2, #8]
    3606:	e7f0      	b.n	35ea <rtc_count_disable_callback+0x1e>
    3608:	ffff8000 	.word	0xffff8000

0000360c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    360e:	46de      	mov	lr, fp
    3610:	4657      	mov	r7, sl
    3612:	464e      	mov	r6, r9
    3614:	4645      	mov	r5, r8
    3616:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    3618:	4b2b      	ldr	r3, [pc, #172]	; (36c8 <RTC_Handler+0xbc>)
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    361e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    3620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    3622:	4652      	mov	r2, sl
    3624:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    3626:	401a      	ands	r2, r3
    3628:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    362a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    362c:	8973      	ldrh	r3, [r6, #10]
    362e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    3630:	b21a      	sxth	r2, r3
    3632:	2a00      	cmp	r2, #0
    3634:	db08      	blt.n	3648 <RTC_Handler+0x3c>
    3636:	27ff      	movs	r7, #255	; 0xff
    3638:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    363a:	d02a      	beq.n	3692 <RTC_Handler+0x86>
    363c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    363e:	2301      	movs	r3, #1
    3640:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3642:	33fe      	adds	r3, #254	; 0xfe
    3644:	469b      	mov	fp, r3
    3646:	e014      	b.n	3672 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    3648:	4643      	mov	r3, r8
    364a:	055b      	lsls	r3, r3, #21
    364c:	d407      	bmi.n	365e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    364e:	4b1f      	ldr	r3, [pc, #124]	; (36cc <RTC_Handler+0xc0>)
    3650:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    3652:	bc3c      	pop	{r2, r3, r4, r5}
    3654:	4690      	mov	r8, r2
    3656:	4699      	mov	r9, r3
    3658:	46a2      	mov	sl, r4
    365a:	46ab      	mov	fp, r5
    365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    365e:	4653      	mov	r3, sl
    3660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3662:	4798      	blx	r3
    3664:	e7f3      	b.n	364e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3666:	465b      	mov	r3, fp
    3668:	401d      	ands	r5, r3
    366a:	81b5      	strh	r5, [r6, #12]
    366c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    366e:	2c08      	cmp	r4, #8
    3670:	d0ef      	beq.n	3652 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    3672:	0023      	movs	r3, r4
    3674:	464d      	mov	r5, r9
    3676:	40a5      	lsls	r5, r4
    3678:	422f      	tst	r7, r5
    367a:	d0f4      	beq.n	3666 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    367c:	4642      	mov	r2, r8
    367e:	4122      	asrs	r2, r4
    3680:	4649      	mov	r1, r9
    3682:	4211      	tst	r1, r2
    3684:	d0ef      	beq.n	3666 <RTC_Handler+0x5a>
				module->callbacks[i]();
    3686:	3302      	adds	r3, #2
    3688:	009b      	lsls	r3, r3, #2
    368a:	4652      	mov	r2, sl
    368c:	589b      	ldr	r3, [r3, r2]
    368e:	4798      	blx	r3
    3690:	e7e9      	b.n	3666 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    3692:	05da      	lsls	r2, r3, #23
    3694:	d50a      	bpl.n	36ac <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    3696:	4643      	mov	r3, r8
    3698:	05db      	lsls	r3, r3, #23
    369a:	d403      	bmi.n	36a4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    369c:	2380      	movs	r3, #128	; 0x80
    369e:	005b      	lsls	r3, r3, #1
    36a0:	81b3      	strh	r3, [r6, #12]
    36a2:	e7d6      	b.n	3652 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    36a4:	4653      	mov	r3, sl
    36a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36a8:	4798      	blx	r3
    36aa:	e7f7      	b.n	369c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    36ac:	059b      	lsls	r3, r3, #22
    36ae:	d5d0      	bpl.n	3652 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    36b0:	4643      	mov	r3, r8
    36b2:	059b      	lsls	r3, r3, #22
    36b4:	d403      	bmi.n	36be <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    36b6:	2380      	movs	r3, #128	; 0x80
    36b8:	009b      	lsls	r3, r3, #2
    36ba:	81b3      	strh	r3, [r6, #12]
}
    36bc:	e7c9      	b.n	3652 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    36be:	4653      	mov	r3, sl
    36c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36c2:	4798      	blx	r3
    36c4:	e7f7      	b.n	36b6 <RTC_Handler+0xaa>
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	20002074 	.word	0x20002074
    36cc:	ffff8000 	.word	0xffff8000

000036d0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	46de      	mov	lr, fp
    36d4:	4657      	mov	r7, sl
    36d6:	464e      	mov	r6, r9
    36d8:	4645      	mov	r5, r8
    36da:	b5e0      	push	{r5, r6, r7, lr}
    36dc:	b087      	sub	sp, #28
    36de:	4680      	mov	r8, r0
    36e0:	9104      	str	r1, [sp, #16]
    36e2:	0016      	movs	r6, r2
    36e4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    36e6:	2200      	movs	r2, #0
    36e8:	2300      	movs	r3, #0
    36ea:	2100      	movs	r1, #0
    36ec:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    36ee:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    36f0:	2001      	movs	r0, #1
    36f2:	0021      	movs	r1, r4
    36f4:	9600      	str	r6, [sp, #0]
    36f6:	9701      	str	r7, [sp, #4]
    36f8:	465c      	mov	r4, fp
    36fa:	9403      	str	r4, [sp, #12]
    36fc:	4644      	mov	r4, r8
    36fe:	9405      	str	r4, [sp, #20]
    3700:	e013      	b.n	372a <long_division+0x5a>
    3702:	2420      	movs	r4, #32
    3704:	1a64      	subs	r4, r4, r1
    3706:	0005      	movs	r5, r0
    3708:	40e5      	lsrs	r5, r4
    370a:	46a8      	mov	r8, r5
    370c:	e014      	b.n	3738 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    370e:	9c00      	ldr	r4, [sp, #0]
    3710:	9d01      	ldr	r5, [sp, #4]
    3712:	1b12      	subs	r2, r2, r4
    3714:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3716:	465c      	mov	r4, fp
    3718:	464d      	mov	r5, r9
    371a:	432c      	orrs	r4, r5
    371c:	46a3      	mov	fp, r4
    371e:	9c03      	ldr	r4, [sp, #12]
    3720:	4645      	mov	r5, r8
    3722:	432c      	orrs	r4, r5
    3724:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    3726:	3901      	subs	r1, #1
    3728:	d325      	bcc.n	3776 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    372a:	2420      	movs	r4, #32
    372c:	4264      	negs	r4, r4
    372e:	190c      	adds	r4, r1, r4
    3730:	d4e7      	bmi.n	3702 <long_division+0x32>
    3732:	0005      	movs	r5, r0
    3734:	40a5      	lsls	r5, r4
    3736:	46a8      	mov	r8, r5
    3738:	0004      	movs	r4, r0
    373a:	408c      	lsls	r4, r1
    373c:	46a1      	mov	r9, r4
		r = r << 1;
    373e:	1892      	adds	r2, r2, r2
    3740:	415b      	adcs	r3, r3
    3742:	0014      	movs	r4, r2
    3744:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3746:	9e05      	ldr	r6, [sp, #20]
    3748:	464f      	mov	r7, r9
    374a:	403e      	ands	r6, r7
    374c:	46b4      	mov	ip, r6
    374e:	9e04      	ldr	r6, [sp, #16]
    3750:	4647      	mov	r7, r8
    3752:	403e      	ands	r6, r7
    3754:	46b2      	mov	sl, r6
    3756:	4666      	mov	r6, ip
    3758:	4657      	mov	r7, sl
    375a:	433e      	orrs	r6, r7
    375c:	d003      	beq.n	3766 <long_division+0x96>
			r |= 0x01;
    375e:	0006      	movs	r6, r0
    3760:	4326      	orrs	r6, r4
    3762:	0032      	movs	r2, r6
    3764:	002b      	movs	r3, r5
		if (r >= d) {
    3766:	9c00      	ldr	r4, [sp, #0]
    3768:	9d01      	ldr	r5, [sp, #4]
    376a:	429d      	cmp	r5, r3
    376c:	d8db      	bhi.n	3726 <long_division+0x56>
    376e:	d1ce      	bne.n	370e <long_division+0x3e>
    3770:	4294      	cmp	r4, r2
    3772:	d8d8      	bhi.n	3726 <long_division+0x56>
    3774:	e7cb      	b.n	370e <long_division+0x3e>
    3776:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    3778:	4658      	mov	r0, fp
    377a:	0019      	movs	r1, r3
    377c:	b007      	add	sp, #28
    377e:	bc3c      	pop	{r2, r3, r4, r5}
    3780:	4690      	mov	r8, r2
    3782:	4699      	mov	r9, r3
    3784:	46a2      	mov	sl, r4
    3786:	46ab      	mov	fp, r5
    3788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000378a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    378a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    378c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    378e:	2340      	movs	r3, #64	; 0x40
    3790:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3792:	4281      	cmp	r1, r0
    3794:	d202      	bcs.n	379c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3796:	0018      	movs	r0, r3
    3798:	bd10      	pop	{r4, pc}
		baud_calculated++;
    379a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    379c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    379e:	1c63      	adds	r3, r4, #1
    37a0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    37a2:	4288      	cmp	r0, r1
    37a4:	d9f9      	bls.n	379a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37a6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    37a8:	2cff      	cmp	r4, #255	; 0xff
    37aa:	d8f4      	bhi.n	3796 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    37ac:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    37ae:	2300      	movs	r3, #0
    37b0:	e7f1      	b.n	3796 <_sercom_get_sync_baud_val+0xc>
	...

000037b4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    37b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37b6:	b083      	sub	sp, #12
    37b8:	000f      	movs	r7, r1
    37ba:	0016      	movs	r6, r2
    37bc:	aa08      	add	r2, sp, #32
    37be:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    37c0:	0004      	movs	r4, r0
    37c2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37c4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    37c6:	42bc      	cmp	r4, r7
    37c8:	d902      	bls.n	37d0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    37ca:	0010      	movs	r0, r2
    37cc:	b003      	add	sp, #12
    37ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    37d0:	2b00      	cmp	r3, #0
    37d2:	d114      	bne.n	37fe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    37d4:	0002      	movs	r2, r0
    37d6:	0008      	movs	r0, r1
    37d8:	2100      	movs	r1, #0
    37da:	4c19      	ldr	r4, [pc, #100]	; (3840 <_sercom_get_async_baud_val+0x8c>)
    37dc:	47a0      	blx	r4
    37de:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    37e0:	003a      	movs	r2, r7
    37e2:	2300      	movs	r3, #0
    37e4:	2000      	movs	r0, #0
    37e6:	4c17      	ldr	r4, [pc, #92]	; (3844 <_sercom_get_async_baud_val+0x90>)
    37e8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    37ea:	2200      	movs	r2, #0
    37ec:	2301      	movs	r3, #1
    37ee:	1a12      	subs	r2, r2, r0
    37f0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    37f2:	0c12      	lsrs	r2, r2, #16
    37f4:	041b      	lsls	r3, r3, #16
    37f6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    37f8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    37fa:	2200      	movs	r2, #0
    37fc:	e7e5      	b.n	37ca <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    37fe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3800:	2b01      	cmp	r3, #1
    3802:	d1f9      	bne.n	37f8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    3804:	000a      	movs	r2, r1
    3806:	2300      	movs	r3, #0
    3808:	2100      	movs	r1, #0
    380a:	4c0d      	ldr	r4, [pc, #52]	; (3840 <_sercom_get_async_baud_val+0x8c>)
    380c:	47a0      	blx	r4
    380e:	0002      	movs	r2, r0
    3810:	000b      	movs	r3, r1
    3812:	9200      	str	r2, [sp, #0]
    3814:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    3816:	0038      	movs	r0, r7
    3818:	2100      	movs	r1, #0
    381a:	4c0a      	ldr	r4, [pc, #40]	; (3844 <_sercom_get_async_baud_val+0x90>)
    381c:	47a0      	blx	r4
    381e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    3820:	2380      	movs	r3, #128	; 0x80
    3822:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3824:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    3826:	4298      	cmp	r0, r3
    3828:	d8cf      	bhi.n	37ca <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    382a:	0f79      	lsrs	r1, r7, #29
    382c:	00f8      	lsls	r0, r7, #3
    382e:	9a00      	ldr	r2, [sp, #0]
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3834:	00ea      	lsls	r2, r5, #3
    3836:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    3838:	b2d2      	uxtb	r2, r2
    383a:	0352      	lsls	r2, r2, #13
    383c:	432a      	orrs	r2, r5
    383e:	e7db      	b.n	37f8 <_sercom_get_async_baud_val+0x44>
    3840:	00014925 	.word	0x00014925
    3844:	000036d1 	.word	0x000036d1

00003848 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3848:	b510      	push	{r4, lr}
    384a:	b082      	sub	sp, #8
    384c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    384e:	4b0e      	ldr	r3, [pc, #56]	; (3888 <sercom_set_gclk_generator+0x40>)
    3850:	781b      	ldrb	r3, [r3, #0]
    3852:	2b00      	cmp	r3, #0
    3854:	d007      	beq.n	3866 <sercom_set_gclk_generator+0x1e>
    3856:	2900      	cmp	r1, #0
    3858:	d105      	bne.n	3866 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    385a:	4b0b      	ldr	r3, [pc, #44]	; (3888 <sercom_set_gclk_generator+0x40>)
    385c:	785b      	ldrb	r3, [r3, #1]
    385e:	4283      	cmp	r3, r0
    3860:	d010      	beq.n	3884 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3862:	201d      	movs	r0, #29
    3864:	e00c      	b.n	3880 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3866:	a901      	add	r1, sp, #4
    3868:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    386a:	2011      	movs	r0, #17
    386c:	4b07      	ldr	r3, [pc, #28]	; (388c <sercom_set_gclk_generator+0x44>)
    386e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3870:	2011      	movs	r0, #17
    3872:	4b07      	ldr	r3, [pc, #28]	; (3890 <sercom_set_gclk_generator+0x48>)
    3874:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3876:	4b04      	ldr	r3, [pc, #16]	; (3888 <sercom_set_gclk_generator+0x40>)
    3878:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    387a:	2201      	movs	r2, #1
    387c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    387e:	2000      	movs	r0, #0
}
    3880:	b002      	add	sp, #8
    3882:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3884:	2000      	movs	r0, #0
    3886:	e7fb      	b.n	3880 <sercom_set_gclk_generator+0x38>
    3888:	200009f8 	.word	0x200009f8
    388c:	00004ced 	.word	0x00004ced
    3890:	00004c7d 	.word	0x00004c7d

00003894 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3894:	4b3c      	ldr	r3, [pc, #240]	; (3988 <_sercom_get_default_pad+0xf4>)
    3896:	4298      	cmp	r0, r3
    3898:	d032      	beq.n	3900 <_sercom_get_default_pad+0x6c>
    389a:	d90a      	bls.n	38b2 <_sercom_get_default_pad+0x1e>
    389c:	4b3b      	ldr	r3, [pc, #236]	; (398c <_sercom_get_default_pad+0xf8>)
    389e:	4298      	cmp	r0, r3
    38a0:	d04e      	beq.n	3940 <_sercom_get_default_pad+0xac>
    38a2:	4b3b      	ldr	r3, [pc, #236]	; (3990 <_sercom_get_default_pad+0xfc>)
    38a4:	4298      	cmp	r0, r3
    38a6:	d055      	beq.n	3954 <_sercom_get_default_pad+0xc0>
    38a8:	4b3a      	ldr	r3, [pc, #232]	; (3994 <_sercom_get_default_pad+0x100>)
    38aa:	4298      	cmp	r0, r3
    38ac:	d038      	beq.n	3920 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    38ae:	2000      	movs	r0, #0
}
    38b0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    38b2:	2384      	movs	r3, #132	; 0x84
    38b4:	05db      	lsls	r3, r3, #23
    38b6:	4298      	cmp	r0, r3
    38b8:	d00c      	beq.n	38d4 <_sercom_get_default_pad+0x40>
    38ba:	4b37      	ldr	r3, [pc, #220]	; (3998 <_sercom_get_default_pad+0x104>)
    38bc:	4298      	cmp	r0, r3
    38be:	d1f6      	bne.n	38ae <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38c0:	2901      	cmp	r1, #1
    38c2:	d017      	beq.n	38f4 <_sercom_get_default_pad+0x60>
    38c4:	2900      	cmp	r1, #0
    38c6:	d057      	beq.n	3978 <_sercom_get_default_pad+0xe4>
    38c8:	2902      	cmp	r1, #2
    38ca:	d015      	beq.n	38f8 <_sercom_get_default_pad+0x64>
    38cc:	2903      	cmp	r1, #3
    38ce:	d015      	beq.n	38fc <_sercom_get_default_pad+0x68>
	return 0;
    38d0:	2000      	movs	r0, #0
    38d2:	e7ed      	b.n	38b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38d4:	2901      	cmp	r1, #1
    38d6:	d007      	beq.n	38e8 <_sercom_get_default_pad+0x54>
    38d8:	2900      	cmp	r1, #0
    38da:	d04b      	beq.n	3974 <_sercom_get_default_pad+0xe0>
    38dc:	2902      	cmp	r1, #2
    38de:	d005      	beq.n	38ec <_sercom_get_default_pad+0x58>
    38e0:	2903      	cmp	r1, #3
    38e2:	d005      	beq.n	38f0 <_sercom_get_default_pad+0x5c>
	return 0;
    38e4:	2000      	movs	r0, #0
    38e6:	e7e3      	b.n	38b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38e8:	482c      	ldr	r0, [pc, #176]	; (399c <_sercom_get_default_pad+0x108>)
    38ea:	e7e1      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    38ec:	482c      	ldr	r0, [pc, #176]	; (39a0 <_sercom_get_default_pad+0x10c>)
    38ee:	e7df      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    38f0:	482c      	ldr	r0, [pc, #176]	; (39a4 <_sercom_get_default_pad+0x110>)
    38f2:	e7dd      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    38f4:	482c      	ldr	r0, [pc, #176]	; (39a8 <_sercom_get_default_pad+0x114>)
    38f6:	e7db      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    38f8:	482c      	ldr	r0, [pc, #176]	; (39ac <_sercom_get_default_pad+0x118>)
    38fa:	e7d9      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    38fc:	482c      	ldr	r0, [pc, #176]	; (39b0 <_sercom_get_default_pad+0x11c>)
    38fe:	e7d7      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3900:	2901      	cmp	r1, #1
    3902:	d007      	beq.n	3914 <_sercom_get_default_pad+0x80>
    3904:	2900      	cmp	r1, #0
    3906:	d039      	beq.n	397c <_sercom_get_default_pad+0xe8>
    3908:	2902      	cmp	r1, #2
    390a:	d005      	beq.n	3918 <_sercom_get_default_pad+0x84>
    390c:	2903      	cmp	r1, #3
    390e:	d005      	beq.n	391c <_sercom_get_default_pad+0x88>
	return 0;
    3910:	2000      	movs	r0, #0
    3912:	e7cd      	b.n	38b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3914:	4827      	ldr	r0, [pc, #156]	; (39b4 <_sercom_get_default_pad+0x120>)
    3916:	e7cb      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3918:	4827      	ldr	r0, [pc, #156]	; (39b8 <_sercom_get_default_pad+0x124>)
    391a:	e7c9      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    391c:	4827      	ldr	r0, [pc, #156]	; (39bc <_sercom_get_default_pad+0x128>)
    391e:	e7c7      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3920:	2901      	cmp	r1, #1
    3922:	d007      	beq.n	3934 <_sercom_get_default_pad+0xa0>
    3924:	2900      	cmp	r1, #0
    3926:	d02b      	beq.n	3980 <_sercom_get_default_pad+0xec>
    3928:	2902      	cmp	r1, #2
    392a:	d005      	beq.n	3938 <_sercom_get_default_pad+0xa4>
    392c:	2903      	cmp	r1, #3
    392e:	d005      	beq.n	393c <_sercom_get_default_pad+0xa8>
	return 0;
    3930:	2000      	movs	r0, #0
    3932:	e7bd      	b.n	38b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3934:	4822      	ldr	r0, [pc, #136]	; (39c0 <_sercom_get_default_pad+0x12c>)
    3936:	e7bb      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3938:	4822      	ldr	r0, [pc, #136]	; (39c4 <_sercom_get_default_pad+0x130>)
    393a:	e7b9      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    393c:	4822      	ldr	r0, [pc, #136]	; (39c8 <_sercom_get_default_pad+0x134>)
    393e:	e7b7      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3940:	2902      	cmp	r1, #2
    3942:	d003      	beq.n	394c <_sercom_get_default_pad+0xb8>
    3944:	2903      	cmp	r1, #3
    3946:	d003      	beq.n	3950 <_sercom_get_default_pad+0xbc>
    3948:	2000      	movs	r0, #0
    394a:	e7b1      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    394c:	481f      	ldr	r0, [pc, #124]	; (39cc <_sercom_get_default_pad+0x138>)
    394e:	e7af      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3950:	481f      	ldr	r0, [pc, #124]	; (39d0 <_sercom_get_default_pad+0x13c>)
    3952:	e7ad      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3954:	2901      	cmp	r1, #1
    3956:	d007      	beq.n	3968 <_sercom_get_default_pad+0xd4>
    3958:	2900      	cmp	r1, #0
    395a:	d013      	beq.n	3984 <_sercom_get_default_pad+0xf0>
    395c:	2902      	cmp	r1, #2
    395e:	d005      	beq.n	396c <_sercom_get_default_pad+0xd8>
    3960:	2903      	cmp	r1, #3
    3962:	d005      	beq.n	3970 <_sercom_get_default_pad+0xdc>
	return 0;
    3964:	2000      	movs	r0, #0
    3966:	e7a3      	b.n	38b0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3968:	481a      	ldr	r0, [pc, #104]	; (39d4 <_sercom_get_default_pad+0x140>)
    396a:	e7a1      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    396c:	481a      	ldr	r0, [pc, #104]	; (39d8 <_sercom_get_default_pad+0x144>)
    396e:	e79f      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3970:	481a      	ldr	r0, [pc, #104]	; (39dc <_sercom_get_default_pad+0x148>)
    3972:	e79d      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3974:	481a      	ldr	r0, [pc, #104]	; (39e0 <_sercom_get_default_pad+0x14c>)
    3976:	e79b      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3978:	2003      	movs	r0, #3
    397a:	e799      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    397c:	4819      	ldr	r0, [pc, #100]	; (39e4 <_sercom_get_default_pad+0x150>)
    397e:	e797      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3980:	4819      	ldr	r0, [pc, #100]	; (39e8 <_sercom_get_default_pad+0x154>)
    3982:	e795      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3984:	4819      	ldr	r0, [pc, #100]	; (39ec <_sercom_get_default_pad+0x158>)
    3986:	e793      	b.n	38b0 <_sercom_get_default_pad+0x1c>
    3988:	42000800 	.word	0x42000800
    398c:	42001000 	.word	0x42001000
    3990:	43000400 	.word	0x43000400
    3994:	42000c00 	.word	0x42000c00
    3998:	42000400 	.word	0x42000400
    399c:	00050003 	.word	0x00050003
    39a0:	00060003 	.word	0x00060003
    39a4:	00070003 	.word	0x00070003
    39a8:	00010003 	.word	0x00010003
    39ac:	001e0003 	.word	0x001e0003
    39b0:	001f0003 	.word	0x001f0003
    39b4:	00090003 	.word	0x00090003
    39b8:	000a0003 	.word	0x000a0003
    39bc:	000b0003 	.word	0x000b0003
    39c0:	00110003 	.word	0x00110003
    39c4:	00120003 	.word	0x00120003
    39c8:	00130003 	.word	0x00130003
    39cc:	000e0003 	.word	0x000e0003
    39d0:	000f0003 	.word	0x000f0003
    39d4:	00170003 	.word	0x00170003
    39d8:	00180003 	.word	0x00180003
    39dc:	00190003 	.word	0x00190003
    39e0:	00040003 	.word	0x00040003
    39e4:	00080003 	.word	0x00080003
    39e8:	00100003 	.word	0x00100003
    39ec:	00160003 	.word	0x00160003

000039f0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    39f0:	b530      	push	{r4, r5, lr}
    39f2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    39f4:	4b0b      	ldr	r3, [pc, #44]	; (3a24 <_sercom_get_sercom_inst_index+0x34>)
    39f6:	466a      	mov	r2, sp
    39f8:	cb32      	ldmia	r3!, {r1, r4, r5}
    39fa:	c232      	stmia	r2!, {r1, r4, r5}
    39fc:	cb32      	ldmia	r3!, {r1, r4, r5}
    39fe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3a00:	9b00      	ldr	r3, [sp, #0]
    3a02:	4283      	cmp	r3, r0
    3a04:	d00b      	beq.n	3a1e <_sercom_get_sercom_inst_index+0x2e>
    3a06:	2301      	movs	r3, #1
    3a08:	009a      	lsls	r2, r3, #2
    3a0a:	4669      	mov	r1, sp
    3a0c:	5852      	ldr	r2, [r2, r1]
    3a0e:	4282      	cmp	r2, r0
    3a10:	d006      	beq.n	3a20 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a12:	3301      	adds	r3, #1
    3a14:	2b06      	cmp	r3, #6
    3a16:	d1f7      	bne.n	3a08 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3a18:	2000      	movs	r0, #0
}
    3a1a:	b007      	add	sp, #28
    3a1c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a1e:	2300      	movs	r3, #0
			return i;
    3a20:	b2d8      	uxtb	r0, r3
    3a22:	e7fa      	b.n	3a1a <_sercom_get_sercom_inst_index+0x2a>
    3a24:	0001d83c 	.word	0x0001d83c

00003a28 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3a28:	4770      	bx	lr
	...

00003a2c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3a2e:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <_sercom_set_handler+0x2c>)
    3a30:	781b      	ldrb	r3, [r3, #0]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d10c      	bne.n	3a50 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3a36:	4f09      	ldr	r7, [pc, #36]	; (3a5c <_sercom_set_handler+0x30>)
    3a38:	4e09      	ldr	r6, [pc, #36]	; (3a60 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3a3a:	4d0a      	ldr	r5, [pc, #40]	; (3a64 <_sercom_set_handler+0x38>)
    3a3c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3a3e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3a40:	195a      	adds	r2, r3, r5
    3a42:	6014      	str	r4, [r2, #0]
    3a44:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a46:	2b18      	cmp	r3, #24
    3a48:	d1f9      	bne.n	3a3e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3a4a:	2201      	movs	r2, #1
    3a4c:	4b02      	ldr	r3, [pc, #8]	; (3a58 <_sercom_set_handler+0x2c>)
    3a4e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3a50:	0080      	lsls	r0, r0, #2
    3a52:	4b02      	ldr	r3, [pc, #8]	; (3a5c <_sercom_set_handler+0x30>)
    3a54:	50c1      	str	r1, [r0, r3]
}
    3a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a58:	200009fa 	.word	0x200009fa
    3a5c:	200009fc 	.word	0x200009fc
    3a60:	00003a29 	.word	0x00003a29
    3a64:	20002078 	.word	0x20002078

00003a68 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3a68:	b500      	push	{lr}
    3a6a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3a6c:	2308      	movs	r3, #8
    3a6e:	466a      	mov	r2, sp
    3a70:	7013      	strb	r3, [r2, #0]
    3a72:	3301      	adds	r3, #1
    3a74:	7053      	strb	r3, [r2, #1]
    3a76:	3301      	adds	r3, #1
    3a78:	7093      	strb	r3, [r2, #2]
    3a7a:	3301      	adds	r3, #1
    3a7c:	70d3      	strb	r3, [r2, #3]
    3a7e:	3301      	adds	r3, #1
    3a80:	7113      	strb	r3, [r2, #4]
    3a82:	3301      	adds	r3, #1
    3a84:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3a86:	4b03      	ldr	r3, [pc, #12]	; (3a94 <_sercom_get_interrupt_vector+0x2c>)
    3a88:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3a8a:	466b      	mov	r3, sp
    3a8c:	5618      	ldrsb	r0, [r3, r0]
}
    3a8e:	b003      	add	sp, #12
    3a90:	bd00      	pop	{pc}
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	000039f1 	.word	0x000039f1

00003a98 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3a98:	b510      	push	{r4, lr}
    3a9a:	4b02      	ldr	r3, [pc, #8]	; (3aa4 <SERCOM0_Handler+0xc>)
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	2000      	movs	r0, #0
    3aa0:	4798      	blx	r3
    3aa2:	bd10      	pop	{r4, pc}
    3aa4:	200009fc 	.word	0x200009fc

00003aa8 <SERCOM1_Handler>:
    3aa8:	b510      	push	{r4, lr}
    3aaa:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <SERCOM1_Handler+0xc>)
    3aac:	685b      	ldr	r3, [r3, #4]
    3aae:	2001      	movs	r0, #1
    3ab0:	4798      	blx	r3
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	200009fc 	.word	0x200009fc

00003ab8 <SERCOM2_Handler>:
    3ab8:	b510      	push	{r4, lr}
    3aba:	4b02      	ldr	r3, [pc, #8]	; (3ac4 <SERCOM2_Handler+0xc>)
    3abc:	689b      	ldr	r3, [r3, #8]
    3abe:	2002      	movs	r0, #2
    3ac0:	4798      	blx	r3
    3ac2:	bd10      	pop	{r4, pc}
    3ac4:	200009fc 	.word	0x200009fc

00003ac8 <SERCOM3_Handler>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	4b02      	ldr	r3, [pc, #8]	; (3ad4 <SERCOM3_Handler+0xc>)
    3acc:	68db      	ldr	r3, [r3, #12]
    3ace:	2003      	movs	r0, #3
    3ad0:	4798      	blx	r3
    3ad2:	bd10      	pop	{r4, pc}
    3ad4:	200009fc 	.word	0x200009fc

00003ad8 <SERCOM4_Handler>:
    3ad8:	b510      	push	{r4, lr}
    3ada:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <SERCOM4_Handler+0xc>)
    3adc:	691b      	ldr	r3, [r3, #16]
    3ade:	2004      	movs	r0, #4
    3ae0:	4798      	blx	r3
    3ae2:	bd10      	pop	{r4, pc}
    3ae4:	200009fc 	.word	0x200009fc

00003ae8 <SERCOM5_Handler>:
    3ae8:	b510      	push	{r4, lr}
    3aea:	4b02      	ldr	r3, [pc, #8]	; (3af4 <SERCOM5_Handler+0xc>)
    3aec:	695b      	ldr	r3, [r3, #20]
    3aee:	2005      	movs	r0, #5
    3af0:	4798      	blx	r3
    3af2:	bd10      	pop	{r4, pc}
    3af4:	200009fc 	.word	0x200009fc

00003af8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3afa:	46d6      	mov	lr, sl
    3afc:	464f      	mov	r7, r9
    3afe:	4646      	mov	r6, r8
    3b00:	b5c0      	push	{r6, r7, lr}
    3b02:	b08a      	sub	sp, #40	; 0x28
    3b04:	0006      	movs	r6, r0
    3b06:	000f      	movs	r7, r1
    3b08:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3b0a:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3b0c:	680b      	ldr	r3, [r1, #0]
    3b0e:	079b      	lsls	r3, r3, #30
    3b10:	d40a      	bmi.n	3b28 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3b12:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3b14:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3b16:	07db      	lsls	r3, r3, #31
    3b18:	d400      	bmi.n	3b1c <spi_init+0x24>
    3b1a:	e097      	b.n	3c4c <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3b1c:	b00a      	add	sp, #40	; 0x28
    3b1e:	bc1c      	pop	{r2, r3, r4}
    3b20:	4690      	mov	r8, r2
    3b22:	4699      	mov	r9, r3
    3b24:	46a2      	mov	sl, r4
    3b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    3b28:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b2a:	9305      	str	r3, [sp, #20]
    3b2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3b2e:	9306      	str	r3, [sp, #24]
    3b30:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3b32:	9307      	str	r3, [sp, #28]
    3b34:	6b53      	ldr	r3, [r2, #52]	; 0x34
    3b36:	9308      	str	r3, [sp, #32]
    3b38:	2500      	movs	r5, #0
    3b3a:	e00a      	b.n	3b52 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3b3c:	0038      	movs	r0, r7
    3b3e:	4b9a      	ldr	r3, [pc, #616]	; (3da8 <spi_init+0x2b0>)
    3b40:	4798      	blx	r3
    3b42:	e00e      	b.n	3b62 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3b44:	230f      	movs	r3, #15
    3b46:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    3b48:	4581      	cmp	r9, r0
    3b4a:	d130      	bne.n	3bae <spi_init+0xb6>
    3b4c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b4e:	2d04      	cmp	r5, #4
    3b50:	d031      	beq.n	3bb6 <spi_init+0xbe>
    3b52:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3b54:	00ab      	lsls	r3, r5, #2
    3b56:	aa02      	add	r2, sp, #8
    3b58:	200c      	movs	r0, #12
    3b5a:	1812      	adds	r2, r2, r0
    3b5c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3b5e:	2800      	cmp	r0, #0
    3b60:	d0ec      	beq.n	3b3c <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    3b62:	1c43      	adds	r3, r0, #1
    3b64:	d0f2      	beq.n	3b4c <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    3b66:	0401      	lsls	r1, r0, #16
    3b68:	0c0b      	lsrs	r3, r1, #16
    3b6a:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    3b6c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    3b6e:	b2c3      	uxtb	r3, r0
    3b70:	469c      	mov	ip, r3
		return NULL;
    3b72:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3b74:	0602      	lsls	r2, r0, #24
    3b76:	d405      	bmi.n	3b84 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    3b78:	4663      	mov	r3, ip
    3b7a:	095b      	lsrs	r3, r3, #5
    3b7c:	01db      	lsls	r3, r3, #7
    3b7e:	4a8b      	ldr	r2, [pc, #556]	; (3dac <spi_init+0x2b4>)
    3b80:	4690      	mov	r8, r2
    3b82:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    3b84:	221f      	movs	r2, #31
    3b86:	4660      	mov	r0, ip
    3b88:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3b8a:	1898      	adds	r0, r3, r2
    3b8c:	3040      	adds	r0, #64	; 0x40
    3b8e:	7800      	ldrb	r0, [r0, #0]
    3b90:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    3b92:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3b94:	4651      	mov	r1, sl
    3b96:	07c9      	lsls	r1, r1, #31
    3b98:	d5d6      	bpl.n	3b48 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3b9a:	0852      	lsrs	r2, r2, #1
    3b9c:	189b      	adds	r3, r3, r2
    3b9e:	3330      	adds	r3, #48	; 0x30
    3ba0:	7818      	ldrb	r0, [r3, #0]
    3ba2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    3ba4:	4663      	mov	r3, ip
    3ba6:	07db      	lsls	r3, r3, #31
    3ba8:	d5cc      	bpl.n	3b44 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3baa:	0900      	lsrs	r0, r0, #4
    3bac:	e7cc      	b.n	3b48 <spi_init+0x50>
			module->hw = NULL;
    3bae:	2300      	movs	r3, #0
    3bb0:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    3bb2:	201c      	movs	r0, #28
    3bb4:	e7b2      	b.n	3b1c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    3bb6:	2011      	movs	r0, #17
    3bb8:	4b7d      	ldr	r3, [pc, #500]	; (3db0 <spi_init+0x2b8>)
    3bba:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3bbc:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    3bbe:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    3bc0:	2a01      	cmp	r2, #1
    3bc2:	d026      	beq.n	3c12 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    3bc4:	6863      	ldr	r3, [r4, #4]
    3bc6:	68a2      	ldr	r2, [r4, #8]
    3bc8:	4313      	orrs	r3, r2
    3bca:	68e2      	ldr	r2, [r4, #12]
    3bcc:	4313      	orrs	r3, r2
    3bce:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    3bd0:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    3bd2:	7c61      	ldrb	r1, [r4, #17]
    3bd4:	2900      	cmp	r1, #0
    3bd6:	d001      	beq.n	3bdc <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3bd8:	2180      	movs	r1, #128	; 0x80
    3bda:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    3bdc:	7ca1      	ldrb	r1, [r4, #18]
    3bde:	2900      	cmp	r1, #0
    3be0:	d002      	beq.n	3be8 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3be2:	2180      	movs	r1, #128	; 0x80
    3be4:	0289      	lsls	r1, r1, #10
    3be6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    3be8:	7ce1      	ldrb	r1, [r4, #19]
    3bea:	2900      	cmp	r1, #0
    3bec:	d002      	beq.n	3bf4 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3bee:	2180      	movs	r1, #128	; 0x80
    3bf0:	0089      	lsls	r1, r1, #2
    3bf2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    3bf4:	7d21      	ldrb	r1, [r4, #20]
    3bf6:	2900      	cmp	r1, #0
    3bf8:	d002      	beq.n	3c00 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3bfa:	2180      	movs	r1, #128	; 0x80
    3bfc:	0189      	lsls	r1, r1, #6
    3bfe:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    3c00:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    3c02:	2002      	movs	r0, #2
    3c04:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    3c06:	428b      	cmp	r3, r1
    3c08:	d017      	beq.n	3c3a <spi_init+0x142>
	module->hw = NULL;
    3c0a:	2300      	movs	r3, #0
    3c0c:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    3c0e:	201c      	movs	r0, #28
    3c10:	e784      	b.n	3b1c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    3c12:	aa04      	add	r2, sp, #16
    3c14:	0001      	movs	r1, r0
    3c16:	69a0      	ldr	r0, [r4, #24]
    3c18:	4b66      	ldr	r3, [pc, #408]	; (3db4 <spi_init+0x2bc>)
    3c1a:	4798      	blx	r3
    3c1c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3c1e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3c20:	2b00      	cmp	r3, #0
    3c22:	d000      	beq.n	3c26 <spi_init+0x12e>
    3c24:	e77a      	b.n	3b1c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3c26:	7b3b      	ldrb	r3, [r7, #12]
    3c28:	b2db      	uxtb	r3, r3
    3c2a:	aa04      	add	r2, sp, #16
    3c2c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    3c2e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3c30:	429a      	cmp	r2, r3
    3c32:	d000      	beq.n	3c36 <spi_init+0x13e>
    3c34:	e772      	b.n	3b1c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    3c36:	350c      	adds	r5, #12
    3c38:	e7c4      	b.n	3bc4 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    3c3a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    3c3c:	4293      	cmp	r3, r2
    3c3e:	d1e4      	bne.n	3c0a <spi_init+0x112>
		module->mode           = config->mode;
    3c40:	7823      	ldrb	r3, [r4, #0]
    3c42:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    3c44:	7c23      	ldrb	r3, [r4, #16]
    3c46:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    3c48:	2000      	movs	r0, #0
    3c4a:	e767      	b.n	3b1c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3c4c:	0008      	movs	r0, r1
    3c4e:	4b5a      	ldr	r3, [pc, #360]	; (3db8 <spi_init+0x2c0>)
    3c50:	4798      	blx	r3
	if (sercom_index == 5) {
    3c52:	2805      	cmp	r0, #5
    3c54:	d100      	bne.n	3c58 <spi_init+0x160>
    3c56:	e09f      	b.n	3d98 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3c58:	0003      	movs	r3, r0
    3c5a:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    3c5c:	4957      	ldr	r1, [pc, #348]	; (3dbc <spi_init+0x2c4>)
    3c5e:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3c60:	2201      	movs	r2, #1
    3c62:	4082      	lsls	r2, r0
    3c64:	432a      	orrs	r2, r5
    3c66:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    3c68:	a909      	add	r1, sp, #36	; 0x24
    3c6a:	2524      	movs	r5, #36	; 0x24
    3c6c:	5d62      	ldrb	r2, [r4, r5]
    3c6e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3c70:	b2db      	uxtb	r3, r3
    3c72:	9301      	str	r3, [sp, #4]
    3c74:	0018      	movs	r0, r3
    3c76:	4b52      	ldr	r3, [pc, #328]	; (3dc0 <spi_init+0x2c8>)
    3c78:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3c7a:	9801      	ldr	r0, [sp, #4]
    3c7c:	4b51      	ldr	r3, [pc, #324]	; (3dc4 <spi_init+0x2cc>)
    3c7e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3c80:	5d60      	ldrb	r0, [r4, r5]
    3c82:	2100      	movs	r1, #0
    3c84:	4b50      	ldr	r3, [pc, #320]	; (3dc8 <spi_init+0x2d0>)
    3c86:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3c88:	7823      	ldrb	r3, [r4, #0]
    3c8a:	2b01      	cmp	r3, #1
    3c8c:	d019      	beq.n	3cc2 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c8e:	6833      	ldr	r3, [r6, #0]
    3c90:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3c92:	ab04      	add	r3, sp, #16
    3c94:	2280      	movs	r2, #128	; 0x80
    3c96:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3c98:	2200      	movs	r2, #0
    3c9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3c9c:	2101      	movs	r1, #1
    3c9e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3ca0:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3ca2:	7823      	ldrb	r3, [r4, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d101      	bne.n	3cac <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3ca8:	ab04      	add	r3, sp, #16
    3caa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cae:	9305      	str	r3, [sp, #20]
    3cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3cb2:	9306      	str	r3, [sp, #24]
    3cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3cb6:	9307      	str	r3, [sp, #28]
    3cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3cba:	9308      	str	r3, [sp, #32]
    3cbc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3cbe:	ad05      	add	r5, sp, #20
    3cc0:	e011      	b.n	3ce6 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3cc2:	683b      	ldr	r3, [r7, #0]
    3cc4:	220c      	movs	r2, #12
    3cc6:	4313      	orrs	r3, r2
    3cc8:	603b      	str	r3, [r7, #0]
    3cca:	e7e0      	b.n	3c8e <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3ccc:	4640      	mov	r0, r8
    3cce:	4b36      	ldr	r3, [pc, #216]	; (3da8 <spi_init+0x2b0>)
    3cd0:	4798      	blx	r3
    3cd2:	e00d      	b.n	3cf0 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3cd4:	a904      	add	r1, sp, #16
    3cd6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3cd8:	0c00      	lsrs	r0, r0, #16
    3cda:	b2c0      	uxtb	r0, r0
    3cdc:	4b3b      	ldr	r3, [pc, #236]	; (3dcc <spi_init+0x2d4>)
    3cde:	4798      	blx	r3
    3ce0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3ce2:	2f04      	cmp	r7, #4
    3ce4:	d007      	beq.n	3cf6 <spi_init+0x1fe>
    3ce6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ce8:	00bb      	lsls	r3, r7, #2
    3cea:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    3cec:	2800      	cmp	r0, #0
    3cee:	d0ed      	beq.n	3ccc <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    3cf0:	1c43      	adds	r3, r0, #1
    3cf2:	d1ef      	bne.n	3cd4 <spi_init+0x1dc>
    3cf4:	e7f4      	b.n	3ce0 <spi_init+0x1e8>
	module->mode             = config->mode;
    3cf6:	7823      	ldrb	r3, [r4, #0]
    3cf8:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    3cfa:	7c23      	ldrb	r3, [r4, #16]
    3cfc:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    3cfe:	7ca3      	ldrb	r3, [r4, #18]
    3d00:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3d02:	7d23      	ldrb	r3, [r4, #20]
    3d04:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    3d06:	2200      	movs	r2, #0
    3d08:	ab02      	add	r3, sp, #8
    3d0a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3d0c:	7823      	ldrb	r3, [r4, #0]
    3d0e:	2b01      	cmp	r3, #1
    3d10:	d02a      	beq.n	3d68 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    3d12:	6863      	ldr	r3, [r4, #4]
    3d14:	68a2      	ldr	r2, [r4, #8]
    3d16:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    3d18:	68e2      	ldr	r2, [r4, #12]
    3d1a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3d1c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3d1e:	7c62      	ldrb	r2, [r4, #17]
    3d20:	2a00      	cmp	r2, #0
    3d22:	d103      	bne.n	3d2c <spi_init+0x234>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3d24:	4a2a      	ldr	r2, [pc, #168]	; (3dd0 <spi_init+0x2d8>)
    3d26:	7892      	ldrb	r2, [r2, #2]
    3d28:	0792      	lsls	r2, r2, #30
    3d2a:	d501      	bpl.n	3d30 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3d2c:	2280      	movs	r2, #128	; 0x80
    3d2e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3d30:	7ca2      	ldrb	r2, [r4, #18]
    3d32:	2a00      	cmp	r2, #0
    3d34:	d002      	beq.n	3d3c <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3d36:	2280      	movs	r2, #128	; 0x80
    3d38:	0292      	lsls	r2, r2, #10
    3d3a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    3d3c:	7ce2      	ldrb	r2, [r4, #19]
    3d3e:	2a00      	cmp	r2, #0
    3d40:	d002      	beq.n	3d48 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3d42:	2280      	movs	r2, #128	; 0x80
    3d44:	0092      	lsls	r2, r2, #2
    3d46:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    3d48:	7d22      	ldrb	r2, [r4, #20]
    3d4a:	2a00      	cmp	r2, #0
    3d4c:	d002      	beq.n	3d54 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3d4e:	2280      	movs	r2, #128	; 0x80
    3d50:	0192      	lsls	r2, r2, #6
    3d52:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    3d54:	4642      	mov	r2, r8
    3d56:	6812      	ldr	r2, [r2, #0]
    3d58:	4313      	orrs	r3, r2
    3d5a:	4642      	mov	r2, r8
    3d5c:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3d5e:	6853      	ldr	r3, [r2, #4]
    3d60:	430b      	orrs	r3, r1
    3d62:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    3d64:	2000      	movs	r0, #0
    3d66:	e6d9      	b.n	3b1c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3d68:	6830      	ldr	r0, [r6, #0]
    3d6a:	4b13      	ldr	r3, [pc, #76]	; (3db8 <spi_init+0x2c0>)
    3d6c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3d6e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3d70:	b2c0      	uxtb	r0, r0
    3d72:	4b0f      	ldr	r3, [pc, #60]	; (3db0 <spi_init+0x2b8>)
    3d74:	4798      	blx	r3
    3d76:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3d78:	ab02      	add	r3, sp, #8
    3d7a:	1d9a      	adds	r2, r3, #6
    3d7c:	69a0      	ldr	r0, [r4, #24]
    3d7e:	4b0d      	ldr	r3, [pc, #52]	; (3db4 <spi_init+0x2bc>)
    3d80:	4798      	blx	r3
    3d82:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3d84:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3d86:	2b00      	cmp	r3, #0
    3d88:	d000      	beq.n	3d8c <spi_init+0x294>
    3d8a:	e6c7      	b.n	3b1c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    3d8c:	ab02      	add	r3, sp, #8
    3d8e:	3306      	adds	r3, #6
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	4642      	mov	r2, r8
    3d94:	7313      	strb	r3, [r2, #12]
    3d96:	e7bc      	b.n	3d12 <spi_init+0x21a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    3d98:	4a08      	ldr	r2, [pc, #32]	; (3dbc <spi_init+0x2c4>)
    3d9a:	6a13      	ldr	r3, [r2, #32]
    3d9c:	2102      	movs	r1, #2
    3d9e:	430b      	orrs	r3, r1
    3da0:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    3da2:	2318      	movs	r3, #24
    3da4:	e760      	b.n	3c68 <spi_init+0x170>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00003895 	.word	0x00003895
    3dac:	40002800 	.word	0x40002800
    3db0:	00004d11 	.word	0x00004d11
    3db4:	0000378b 	.word	0x0000378b
    3db8:	000039f1 	.word	0x000039f1
    3dbc:	40000400 	.word	0x40000400
    3dc0:	00004ced 	.word	0x00004ced
    3dc4:	00004c7d 	.word	0x00004c7d
    3dc8:	00003849 	.word	0x00003849
    3dcc:	00004de9 	.word	0x00004de9
    3dd0:	41002000 	.word	0x41002000

00003dd4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3dd4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3dd6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3dd8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3dda:	2c01      	cmp	r4, #1
    3ddc:	d001      	beq.n	3de2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3dde:	0018      	movs	r0, r3
    3de0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    3de2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    3de4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    3de6:	2c00      	cmp	r4, #0
    3de8:	d1f9      	bne.n	3dde <spi_select_slave+0xa>
		if (select) {
    3dea:	2a00      	cmp	r2, #0
    3dec:	d058      	beq.n	3ea0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3dee:	784b      	ldrb	r3, [r1, #1]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d044      	beq.n	3e7e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3df4:	6803      	ldr	r3, [r0, #0]
    3df6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3df8:	07db      	lsls	r3, r3, #31
    3dfa:	d410      	bmi.n	3e1e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3dfc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3dfe:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3e00:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3e02:	2900      	cmp	r1, #0
    3e04:	d104      	bne.n	3e10 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3e06:	0953      	lsrs	r3, r2, #5
    3e08:	01db      	lsls	r3, r3, #7
    3e0a:	492e      	ldr	r1, [pc, #184]	; (3ec4 <spi_select_slave+0xf0>)
    3e0c:	468c      	mov	ip, r1
    3e0e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e10:	211f      	movs	r1, #31
    3e12:	4011      	ands	r1, r2
    3e14:	2201      	movs	r2, #1
    3e16:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3e18:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3e1a:	2305      	movs	r3, #5
    3e1c:	e7df      	b.n	3dde <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3e1e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3e20:	09d4      	lsrs	r4, r2, #7
		return NULL;
    3e22:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3e24:	2c00      	cmp	r4, #0
    3e26:	d104      	bne.n	3e32 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3e28:	0953      	lsrs	r3, r2, #5
    3e2a:	01db      	lsls	r3, r3, #7
    3e2c:	4c25      	ldr	r4, [pc, #148]	; (3ec4 <spi_select_slave+0xf0>)
    3e2e:	46a4      	mov	ip, r4
    3e30:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e32:	241f      	movs	r4, #31
    3e34:	4014      	ands	r4, r2
    3e36:	2201      	movs	r2, #1
    3e38:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    3e3a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e3c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e3e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3e40:	07d2      	lsls	r2, r2, #31
    3e42:	d501      	bpl.n	3e48 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e44:	788a      	ldrb	r2, [r1, #2]
    3e46:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    3e48:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    3e4a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    3e4c:	2a00      	cmp	r2, #0
    3e4e:	d1c6      	bne.n	3dde <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e50:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    3e52:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e54:	7e13      	ldrb	r3, [r2, #24]
    3e56:	420b      	tst	r3, r1
    3e58:	d0fc      	beq.n	3e54 <spi_select_slave+0x80>
    3e5a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    3e5c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3e5e:	0749      	lsls	r1, r1, #29
    3e60:	d5bd      	bpl.n	3dde <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e62:	8b53      	ldrh	r3, [r2, #26]
    3e64:	075b      	lsls	r3, r3, #29
    3e66:	d501      	bpl.n	3e6c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e68:	2304      	movs	r3, #4
    3e6a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e6c:	7983      	ldrb	r3, [r0, #6]
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d002      	beq.n	3e78 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e72:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e74:	2300      	movs	r3, #0
    3e76:	e7b2      	b.n	3dde <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e7a:	2300      	movs	r3, #0
    3e7c:	e7af      	b.n	3dde <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3e7e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3e80:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3e82:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3e84:	2900      	cmp	r1, #0
    3e86:	d104      	bne.n	3e92 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    3e88:	0953      	lsrs	r3, r2, #5
    3e8a:	01db      	lsls	r3, r3, #7
    3e8c:	490d      	ldr	r1, [pc, #52]	; (3ec4 <spi_select_slave+0xf0>)
    3e8e:	468c      	mov	ip, r1
    3e90:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e92:	211f      	movs	r1, #31
    3e94:	4011      	ands	r1, r2
    3e96:	2201      	movs	r2, #1
    3e98:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3e9a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3e9c:	2300      	movs	r3, #0
    3e9e:	e79e      	b.n	3dde <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    3ea0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3ea2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3ea4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3ea6:	2900      	cmp	r1, #0
    3ea8:	d104      	bne.n	3eb4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3eaa:	0953      	lsrs	r3, r2, #5
    3eac:	01db      	lsls	r3, r3, #7
    3eae:	4905      	ldr	r1, [pc, #20]	; (3ec4 <spi_select_slave+0xf0>)
    3eb0:	468c      	mov	ip, r1
    3eb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3eb4:	211f      	movs	r1, #31
    3eb6:	4011      	ands	r1, r2
    3eb8:	2201      	movs	r2, #1
    3eba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3ebc:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3ebe:	2300      	movs	r3, #0
    3ec0:	e78d      	b.n	3dde <spi_select_slave+0xa>
    3ec2:	46c0      	nop			; (mov r8, r8)
    3ec4:	40002800 	.word	0x40002800

00003ec8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eca:	46de      	mov	lr, fp
    3ecc:	4657      	mov	r7, sl
    3ece:	464e      	mov	r6, r9
    3ed0:	4645      	mov	r5, r8
    3ed2:	b5e0      	push	{r5, r6, r7, lr}
    3ed4:	b091      	sub	sp, #68	; 0x44
    3ed6:	0005      	movs	r5, r0
    3ed8:	000c      	movs	r4, r1
    3eda:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3edc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ede:	0008      	movs	r0, r1
    3ee0:	4bc4      	ldr	r3, [pc, #784]	; (41f4 <usart_init+0x32c>)
    3ee2:	4798      	blx	r3
    3ee4:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3ee6:	2805      	cmp	r0, #5
    3ee8:	d00d      	beq.n	3f06 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3eea:	0007      	movs	r7, r0
    3eec:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    3eee:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ef0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3ef2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ef4:	07c9      	lsls	r1, r1, #31
    3ef6:	d509      	bpl.n	3f0c <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3ef8:	b011      	add	sp, #68	; 0x44
    3efa:	bc3c      	pop	{r2, r3, r4, r5}
    3efc:	4690      	mov	r8, r2
    3efe:	4699      	mov	r9, r3
    3f00:	46a2      	mov	sl, r4
    3f02:	46ab      	mov	fp, r5
    3f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3f06:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3f08:	2301      	movs	r3, #1
    3f0a:	e7f1      	b.n	3ef0 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3f0c:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    3f0e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3f10:	0789      	lsls	r1, r1, #30
    3f12:	d4f1      	bmi.n	3ef8 <usart_init+0x30>
	if (sercom_index == 5) {
    3f14:	2a05      	cmp	r2, #5
    3f16:	d049      	beq.n	3fac <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    3f18:	49b7      	ldr	r1, [pc, #732]	; (41f8 <usart_init+0x330>)
    3f1a:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    3f1c:	2201      	movs	r2, #1
    3f1e:	409a      	lsls	r2, r3
    3f20:	0013      	movs	r3, r2
    3f22:	4303      	orrs	r3, r0
    3f24:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    3f26:	a90f      	add	r1, sp, #60	; 0x3c
    3f28:	232d      	movs	r3, #45	; 0x2d
    3f2a:	4698      	mov	r8, r3
    3f2c:	5cf3      	ldrb	r3, [r6, r3]
    3f2e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f30:	b2ff      	uxtb	r7, r7
    3f32:	0038      	movs	r0, r7
    3f34:	4bb1      	ldr	r3, [pc, #708]	; (41fc <usart_init+0x334>)
    3f36:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f38:	0038      	movs	r0, r7
    3f3a:	4bb1      	ldr	r3, [pc, #708]	; (4200 <usart_init+0x338>)
    3f3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f3e:	4643      	mov	r3, r8
    3f40:	5cf0      	ldrb	r0, [r6, r3]
    3f42:	2100      	movs	r1, #0
    3f44:	4baf      	ldr	r3, [pc, #700]	; (4204 <usart_init+0x33c>)
    3f46:	4798      	blx	r3
	module->character_size = config->character_size;
    3f48:	7af3      	ldrb	r3, [r6, #11]
    3f4a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3f4c:	2324      	movs	r3, #36	; 0x24
    3f4e:	5cf3      	ldrb	r3, [r6, r3]
    3f50:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f52:	2325      	movs	r3, #37	; 0x25
    3f54:	5cf3      	ldrb	r3, [r6, r3]
    3f56:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3f58:	7ef3      	ldrb	r3, [r6, #27]
    3f5a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f5c:	7f33      	ldrb	r3, [r6, #28]
    3f5e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f60:	682b      	ldr	r3, [r5, #0]
    3f62:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f64:	0018      	movs	r0, r3
    3f66:	4ba3      	ldr	r3, [pc, #652]	; (41f4 <usart_init+0x32c>)
    3f68:	4798      	blx	r3
	if (sercom_index == 5) {
    3f6a:	2805      	cmp	r0, #5
    3f6c:	d026      	beq.n	3fbc <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f6e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    3f70:	2200      	movs	r2, #0
    3f72:	230e      	movs	r3, #14
    3f74:	a906      	add	r1, sp, #24
    3f76:	468c      	mov	ip, r1
    3f78:	4463      	add	r3, ip
    3f7a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3f7c:	8a32      	ldrh	r2, [r6, #16]
    3f7e:	9202      	str	r2, [sp, #8]
    3f80:	2380      	movs	r3, #128	; 0x80
    3f82:	01db      	lsls	r3, r3, #7
    3f84:	429a      	cmp	r2, r3
    3f86:	d100      	bne.n	3f8a <usart_init+0xc2>
    3f88:	e0a7      	b.n	40da <usart_init+0x212>
    3f8a:	d919      	bls.n	3fc0 <usart_init+0xf8>
    3f8c:	23c0      	movs	r3, #192	; 0xc0
    3f8e:	01db      	lsls	r3, r3, #7
    3f90:	9a02      	ldr	r2, [sp, #8]
    3f92:	429a      	cmp	r2, r3
    3f94:	d100      	bne.n	3f98 <usart_init+0xd0>
    3f96:	e09b      	b.n	40d0 <usart_init+0x208>
    3f98:	2380      	movs	r3, #128	; 0x80
    3f9a:	021b      	lsls	r3, r3, #8
    3f9c:	429a      	cmp	r2, r3
    3f9e:	d000      	beq.n	3fa2 <usart_init+0xda>
    3fa0:	e123      	b.n	41ea <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3fa2:	2303      	movs	r3, #3
    3fa4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3fa6:	2300      	movs	r3, #0
    3fa8:	9307      	str	r3, [sp, #28]
    3faa:	e012      	b.n	3fd2 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    3fac:	4992      	ldr	r1, [pc, #584]	; (41f8 <usart_init+0x330>)
    3fae:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    3fb0:	3a04      	subs	r2, #4
    3fb2:	409a      	lsls	r2, r3
    3fb4:	0013      	movs	r3, r2
    3fb6:	4303      	orrs	r3, r0
    3fb8:	620b      	str	r3, [r1, #32]
    3fba:	e7b4      	b.n	3f26 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3fbc:	2018      	movs	r0, #24
    3fbe:	e7d7      	b.n	3f70 <usart_init+0xa8>
	switch (config->sample_rate) {
    3fc0:	2380      	movs	r3, #128	; 0x80
    3fc2:	019b      	lsls	r3, r3, #6
    3fc4:	429a      	cmp	r2, r3
    3fc6:	d000      	beq.n	3fca <usart_init+0x102>
    3fc8:	e10f      	b.n	41ea <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3fca:	2310      	movs	r3, #16
    3fcc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3fce:	3b0f      	subs	r3, #15
    3fd0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3fd2:	6833      	ldr	r3, [r6, #0]
    3fd4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3fd6:	68f3      	ldr	r3, [r6, #12]
    3fd8:	469b      	mov	fp, r3
		config->sample_adjustment |
    3fda:	6973      	ldr	r3, [r6, #20]
    3fdc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3fde:	7e33      	ldrb	r3, [r6, #24]
    3fe0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3fe2:	2326      	movs	r3, #38	; 0x26
    3fe4:	5cf3      	ldrb	r3, [r6, r3]
    3fe6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3fe8:	6873      	ldr	r3, [r6, #4]
    3fea:	4699      	mov	r9, r3
	switch (transfer_mode)
    3fec:	2b00      	cmp	r3, #0
    3fee:	d100      	bne.n	3ff2 <usart_init+0x12a>
    3ff0:	e09b      	b.n	412a <usart_init+0x262>
    3ff2:	2380      	movs	r3, #128	; 0x80
    3ff4:	055b      	lsls	r3, r3, #21
    3ff6:	4599      	cmp	r9, r3
    3ff8:	d104      	bne.n	4004 <usart_init+0x13c>
			if (!config->use_external_clock) {
    3ffa:	2327      	movs	r3, #39	; 0x27
    3ffc:	5cf3      	ldrb	r3, [r6, r3]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d100      	bne.n	4004 <usart_init+0x13c>
    4002:	e080      	b.n	4106 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    4004:	7e73      	ldrb	r3, [r6, #25]
    4006:	2b00      	cmp	r3, #0
    4008:	d002      	beq.n	4010 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    400a:	7eb3      	ldrb	r3, [r6, #26]
    400c:	4642      	mov	r2, r8
    400e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    4010:	230e      	movs	r3, #14
    4012:	aa06      	add	r2, sp, #24
    4014:	4694      	mov	ip, r2
    4016:	4463      	add	r3, ip
    4018:	881b      	ldrh	r3, [r3, #0]
    401a:	4642      	mov	r2, r8
    401c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    401e:	9b05      	ldr	r3, [sp, #20]
    4020:	465a      	mov	r2, fp
    4022:	4313      	orrs	r3, r2
    4024:	9a03      	ldr	r2, [sp, #12]
    4026:	4313      	orrs	r3, r2
    4028:	464a      	mov	r2, r9
    402a:	4313      	orrs	r3, r2
    402c:	9f02      	ldr	r7, [sp, #8]
    402e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4030:	9b04      	ldr	r3, [sp, #16]
    4032:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4034:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4036:	4653      	mov	r3, sl
    4038:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    403a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    403c:	2327      	movs	r3, #39	; 0x27
    403e:	5cf3      	ldrb	r3, [r6, r3]
    4040:	2b00      	cmp	r3, #0
    4042:	d101      	bne.n	4048 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4044:	3304      	adds	r3, #4
    4046:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4048:	7e73      	ldrb	r3, [r6, #25]
    404a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    404c:	7f32      	ldrb	r2, [r6, #28]
    404e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4050:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4052:	7f72      	ldrb	r2, [r6, #29]
    4054:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4056:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4058:	2224      	movs	r2, #36	; 0x24
    405a:	5cb2      	ldrb	r2, [r6, r2]
    405c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    405e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4060:	2225      	movs	r2, #37	; 0x25
    4062:	5cb2      	ldrb	r2, [r6, r2]
    4064:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4066:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4068:	7ab1      	ldrb	r1, [r6, #10]
    406a:	7af2      	ldrb	r2, [r6, #11]
    406c:	4311      	orrs	r1, r2
    406e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4070:	8933      	ldrh	r3, [r6, #8]
    4072:	2bff      	cmp	r3, #255	; 0xff
    4074:	d07d      	beq.n	4172 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4076:	2280      	movs	r2, #128	; 0x80
    4078:	0452      	lsls	r2, r2, #17
    407a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    407c:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    407e:	232c      	movs	r3, #44	; 0x2c
    4080:	5cf3      	ldrb	r3, [r6, r3]
    4082:	2b00      	cmp	r3, #0
    4084:	d103      	bne.n	408e <usart_init+0x1c6>
    4086:	4b60      	ldr	r3, [pc, #384]	; (4208 <usart_init+0x340>)
    4088:	789b      	ldrb	r3, [r3, #2]
    408a:	079b      	lsls	r3, r3, #30
    408c:	d501      	bpl.n	4092 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    408e:	2380      	movs	r3, #128	; 0x80
    4090:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4092:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4094:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4096:	2b00      	cmp	r3, #0
    4098:	d1fc      	bne.n	4094 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    409a:	4643      	mov	r3, r8
    409c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    409e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    40a0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    40a2:	2b00      	cmp	r3, #0
    40a4:	d1fc      	bne.n	40a0 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    40a6:	4643      	mov	r3, r8
    40a8:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    40aa:	ab0e      	add	r3, sp, #56	; 0x38
    40ac:	2280      	movs	r2, #128	; 0x80
    40ae:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40b0:	2200      	movs	r2, #0
    40b2:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    40b4:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    40b6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    40b8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    40ba:	930a      	str	r3, [sp, #40]	; 0x28
    40bc:	6b73      	ldr	r3, [r6, #52]	; 0x34
    40be:	930b      	str	r3, [sp, #44]	; 0x2c
    40c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    40c2:	930c      	str	r3, [sp, #48]	; 0x30
    40c4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    40c6:	9302      	str	r3, [sp, #8]
    40c8:	930d      	str	r3, [sp, #52]	; 0x34
    40ca:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    40cc:	ae0a      	add	r6, sp, #40	; 0x28
    40ce:	e05e      	b.n	418e <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40d0:	2308      	movs	r3, #8
    40d2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    40d4:	3b07      	subs	r3, #7
    40d6:	9307      	str	r3, [sp, #28]
    40d8:	e77b      	b.n	3fd2 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    40da:	6833      	ldr	r3, [r6, #0]
    40dc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    40de:	68f3      	ldr	r3, [r6, #12]
    40e0:	469b      	mov	fp, r3
		config->sample_adjustment |
    40e2:	6973      	ldr	r3, [r6, #20]
    40e4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    40e6:	7e33      	ldrb	r3, [r6, #24]
    40e8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    40ea:	2326      	movs	r3, #38	; 0x26
    40ec:	5cf3      	ldrb	r3, [r6, r3]
    40ee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    40f0:	6873      	ldr	r3, [r6, #4]
    40f2:	4699      	mov	r9, r3
	switch (transfer_mode)
    40f4:	2b00      	cmp	r3, #0
    40f6:	d014      	beq.n	4122 <usart_init+0x25a>
    40f8:	2380      	movs	r3, #128	; 0x80
    40fa:	055b      	lsls	r3, r3, #21
    40fc:	4599      	cmp	r9, r3
    40fe:	d100      	bne.n	4102 <usart_init+0x23a>
    4100:	e77b      	b.n	3ffa <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    4102:	2000      	movs	r0, #0
    4104:	e020      	b.n	4148 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4106:	6a33      	ldr	r3, [r6, #32]
    4108:	001f      	movs	r7, r3
    410a:	b2c0      	uxtb	r0, r0
    410c:	4b3f      	ldr	r3, [pc, #252]	; (420c <usart_init+0x344>)
    410e:	4798      	blx	r3
    4110:	0001      	movs	r1, r0
    4112:	220e      	movs	r2, #14
    4114:	ab06      	add	r3, sp, #24
    4116:	469c      	mov	ip, r3
    4118:	4462      	add	r2, ip
    411a:	0038      	movs	r0, r7
    411c:	4b3c      	ldr	r3, [pc, #240]	; (4210 <usart_init+0x348>)
    411e:	4798      	blx	r3
    4120:	e012      	b.n	4148 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4122:	2308      	movs	r3, #8
    4124:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4126:	2300      	movs	r3, #0
    4128:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    412a:	2327      	movs	r3, #39	; 0x27
    412c:	5cf3      	ldrb	r3, [r6, r3]
    412e:	2b00      	cmp	r3, #0
    4130:	d00e      	beq.n	4150 <usart_init+0x288>
				status_code =
    4132:	9b06      	ldr	r3, [sp, #24]
    4134:	9300      	str	r3, [sp, #0]
    4136:	9b07      	ldr	r3, [sp, #28]
    4138:	220e      	movs	r2, #14
    413a:	a906      	add	r1, sp, #24
    413c:	468c      	mov	ip, r1
    413e:	4462      	add	r2, ip
    4140:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4142:	6a30      	ldr	r0, [r6, #32]
    4144:	4f33      	ldr	r7, [pc, #204]	; (4214 <usart_init+0x34c>)
    4146:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4148:	2800      	cmp	r0, #0
    414a:	d000      	beq.n	414e <usart_init+0x286>
    414c:	e6d4      	b.n	3ef8 <usart_init+0x30>
    414e:	e759      	b.n	4004 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    4150:	6a33      	ldr	r3, [r6, #32]
    4152:	001f      	movs	r7, r3
    4154:	b2c0      	uxtb	r0, r0
    4156:	4b2d      	ldr	r3, [pc, #180]	; (420c <usart_init+0x344>)
    4158:	4798      	blx	r3
    415a:	0001      	movs	r1, r0
				status_code =
    415c:	9b06      	ldr	r3, [sp, #24]
    415e:	9300      	str	r3, [sp, #0]
    4160:	9b07      	ldr	r3, [sp, #28]
    4162:	220e      	movs	r2, #14
    4164:	a806      	add	r0, sp, #24
    4166:	4684      	mov	ip, r0
    4168:	4462      	add	r2, ip
    416a:	0038      	movs	r0, r7
    416c:	4f29      	ldr	r7, [pc, #164]	; (4214 <usart_init+0x34c>)
    416e:	47b8      	blx	r7
    4170:	e7ea      	b.n	4148 <usart_init+0x280>
		if(config->lin_slave_enable) {
    4172:	7ef3      	ldrb	r3, [r6, #27]
    4174:	2b00      	cmp	r3, #0
    4176:	d082      	beq.n	407e <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4178:	2380      	movs	r3, #128	; 0x80
    417a:	04db      	lsls	r3, r3, #19
    417c:	431f      	orrs	r7, r3
    417e:	e77e      	b.n	407e <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4180:	0020      	movs	r0, r4
    4182:	4b25      	ldr	r3, [pc, #148]	; (4218 <usart_init+0x350>)
    4184:	4798      	blx	r3
    4186:	e007      	b.n	4198 <usart_init+0x2d0>
    4188:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    418a:	2f04      	cmp	r7, #4
    418c:	d00d      	beq.n	41aa <usart_init+0x2e2>
    418e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4190:	00bb      	lsls	r3, r7, #2
    4192:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4194:	2800      	cmp	r0, #0
    4196:	d0f3      	beq.n	4180 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    4198:	1c43      	adds	r3, r0, #1
    419a:	d0f5      	beq.n	4188 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    419c:	a90e      	add	r1, sp, #56	; 0x38
    419e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    41a0:	0c00      	lsrs	r0, r0, #16
    41a2:	b2c0      	uxtb	r0, r0
    41a4:	4b1d      	ldr	r3, [pc, #116]	; (421c <usart_init+0x354>)
    41a6:	4798      	blx	r3
    41a8:	e7ee      	b.n	4188 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    41aa:	2300      	movs	r3, #0
    41ac:	60eb      	str	r3, [r5, #12]
    41ae:	612b      	str	r3, [r5, #16]
    41b0:	616b      	str	r3, [r5, #20]
    41b2:	61ab      	str	r3, [r5, #24]
    41b4:	61eb      	str	r3, [r5, #28]
    41b6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    41b8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    41ba:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    41bc:	2200      	movs	r2, #0
    41be:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    41c0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    41c2:	3330      	adds	r3, #48	; 0x30
    41c4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    41c6:	3301      	adds	r3, #1
    41c8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    41ca:	3301      	adds	r3, #1
    41cc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    41ce:	3301      	adds	r3, #1
    41d0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    41d2:	6828      	ldr	r0, [r5, #0]
    41d4:	4b07      	ldr	r3, [pc, #28]	; (41f4 <usart_init+0x32c>)
    41d6:	4798      	blx	r3
    41d8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    41da:	4911      	ldr	r1, [pc, #68]	; (4220 <usart_init+0x358>)
    41dc:	4b11      	ldr	r3, [pc, #68]	; (4224 <usart_init+0x35c>)
    41de:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    41e0:	00a4      	lsls	r4, r4, #2
    41e2:	4b11      	ldr	r3, [pc, #68]	; (4228 <usart_init+0x360>)
    41e4:	50e5      	str	r5, [r4, r3]
	return status_code;
    41e6:	2000      	movs	r0, #0
    41e8:	e686      	b.n	3ef8 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    41ea:	2310      	movs	r3, #16
    41ec:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    41ee:	2300      	movs	r3, #0
    41f0:	9307      	str	r3, [sp, #28]
    41f2:	e6ee      	b.n	3fd2 <usart_init+0x10a>
    41f4:	000039f1 	.word	0x000039f1
    41f8:	40000400 	.word	0x40000400
    41fc:	00004ced 	.word	0x00004ced
    4200:	00004c7d 	.word	0x00004c7d
    4204:	00003849 	.word	0x00003849
    4208:	41002000 	.word	0x41002000
    420c:	00004d11 	.word	0x00004d11
    4210:	0000378b 	.word	0x0000378b
    4214:	000037b5 	.word	0x000037b5
    4218:	00003895 	.word	0x00003895
    421c:	00004de9 	.word	0x00004de9
    4220:	00004411 	.word	0x00004411
    4224:	00003a2d 	.word	0x00003a2d
    4228:	20002078 	.word	0x20002078

0000422c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    422c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    422e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4230:	2a00      	cmp	r2, #0
    4232:	d101      	bne.n	4238 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4234:	0018      	movs	r0, r3
    4236:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4238:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    423a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    423c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    423e:	2a00      	cmp	r2, #0
    4240:	d1f8      	bne.n	4234 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4242:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    4244:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4246:	2102      	movs	r1, #2
    4248:	7e13      	ldrb	r3, [r2, #24]
    424a:	420b      	tst	r3, r1
    424c:	d0fc      	beq.n	4248 <usart_write_wait+0x1c>
	return STATUS_OK;
    424e:	2300      	movs	r3, #0
    4250:	e7f0      	b.n	4234 <usart_write_wait+0x8>

00004252 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4252:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4254:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4256:	2a00      	cmp	r2, #0
    4258:	d101      	bne.n	425e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    425a:	0018      	movs	r0, r3
    425c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    425e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4260:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4262:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4264:	2a00      	cmp	r2, #0
    4266:	d1f8      	bne.n	425a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4268:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    426a:	7e10      	ldrb	r0, [r2, #24]
    426c:	0740      	lsls	r0, r0, #29
    426e:	d5f4      	bpl.n	425a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4270:	8b53      	ldrh	r3, [r2, #26]
    4272:	b2db      	uxtb	r3, r3
	if (error_code) {
    4274:	0698      	lsls	r0, r3, #26
    4276:	d01d      	beq.n	42b4 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4278:	0798      	lsls	r0, r3, #30
    427a:	d503      	bpl.n	4284 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    427c:	2302      	movs	r3, #2
    427e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4280:	3318      	adds	r3, #24
    4282:	e7ea      	b.n	425a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4284:	0758      	lsls	r0, r3, #29
    4286:	d503      	bpl.n	4290 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4288:	2304      	movs	r3, #4
    428a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    428c:	331a      	adds	r3, #26
    428e:	e7e4      	b.n	425a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4290:	07d8      	lsls	r0, r3, #31
    4292:	d503      	bpl.n	429c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4294:	2301      	movs	r3, #1
    4296:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4298:	3312      	adds	r3, #18
    429a:	e7de      	b.n	425a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    429c:	06d8      	lsls	r0, r3, #27
    429e:	d503      	bpl.n	42a8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    42a0:	2310      	movs	r3, #16
    42a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    42a4:	3332      	adds	r3, #50	; 0x32
    42a6:	e7d8      	b.n	425a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    42a8:	069b      	lsls	r3, r3, #26
    42aa:	d503      	bpl.n	42b4 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    42ac:	2320      	movs	r3, #32
    42ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    42b0:	3321      	adds	r3, #33	; 0x21
    42b2:	e7d2      	b.n	425a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    42b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    42b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    42b8:	2300      	movs	r3, #0
    42ba:	e7ce      	b.n	425a <usart_read_wait+0x8>

000042bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    42bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42be:	46ce      	mov	lr, r9
    42c0:	4647      	mov	r7, r8
    42c2:	b580      	push	{r7, lr}
    42c4:	b083      	sub	sp, #12
    42c6:	0005      	movs	r5, r0
    42c8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    42ca:	2017      	movs	r0, #23
	if (length == 0) {
    42cc:	2a00      	cmp	r2, #0
    42ce:	d104      	bne.n	42da <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    42d0:	b003      	add	sp, #12
    42d2:	bc0c      	pop	{r2, r3}
    42d4:	4690      	mov	r8, r2
    42d6:	4699      	mov	r9, r3
    42d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    42da:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    42dc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    42de:	2b00      	cmp	r3, #0
    42e0:	d0f6      	beq.n	42d0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    42e2:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    42e4:	3a01      	subs	r2, #1
    42e6:	b293      	uxth	r3, r2
    42e8:	4699      	mov	r9, r3
    42ea:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    42ec:	2701      	movs	r7, #1
	while (length--) {
    42ee:	4b20      	ldr	r3, [pc, #128]	; (4370 <usart_write_buffer_wait+0xb4>)
    42f0:	4698      	mov	r8, r3
    42f2:	e011      	b.n	4318 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    42f4:	1c73      	adds	r3, r6, #1
    42f6:	b29b      	uxth	r3, r3
    42f8:	9a01      	ldr	r2, [sp, #4]
    42fa:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    42fc:	796a      	ldrb	r2, [r5, #5]
    42fe:	2a01      	cmp	r2, #1
    4300:	d017      	beq.n	4332 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    4302:	b289      	uxth	r1, r1
    4304:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    4306:	0028      	movs	r0, r5
    4308:	4b1a      	ldr	r3, [pc, #104]	; (4374 <usart_write_buffer_wait+0xb8>)
    430a:	4798      	blx	r3
	while (length--) {
    430c:	464b      	mov	r3, r9
    430e:	3b01      	subs	r3, #1
    4310:	b29b      	uxth	r3, r3
    4312:	4699      	mov	r9, r3
    4314:	4543      	cmp	r3, r8
    4316:	d013      	beq.n	4340 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    4318:	7e23      	ldrb	r3, [r4, #24]
    431a:	423b      	tst	r3, r7
    431c:	d1ea      	bne.n	42f4 <usart_write_buffer_wait+0x38>
    431e:	4b14      	ldr	r3, [pc, #80]	; (4370 <usart_write_buffer_wait+0xb4>)
    4320:	7e22      	ldrb	r2, [r4, #24]
    4322:	423a      	tst	r2, r7
    4324:	d1e6      	bne.n	42f4 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    4326:	2b01      	cmp	r3, #1
    4328:	d019      	beq.n	435e <usart_write_buffer_wait+0xa2>
    432a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    432c:	2b00      	cmp	r3, #0
    432e:	d1f7      	bne.n	4320 <usart_write_buffer_wait+0x64>
    4330:	e7e0      	b.n	42f4 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4332:	3602      	adds	r6, #2
    4334:	b2b6      	uxth	r6, r6
    4336:	9a01      	ldr	r2, [sp, #4]
    4338:	5cd3      	ldrb	r3, [r2, r3]
    433a:	021b      	lsls	r3, r3, #8
    433c:	4319      	orrs	r1, r3
    433e:	e7e2      	b.n	4306 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    4340:	7e23      	ldrb	r3, [r4, #24]
    4342:	079b      	lsls	r3, r3, #30
    4344:	d40d      	bmi.n	4362 <usart_write_buffer_wait+0xa6>
    4346:	4b0a      	ldr	r3, [pc, #40]	; (4370 <usart_write_buffer_wait+0xb4>)
    4348:	2102      	movs	r1, #2
    434a:	7e22      	ldrb	r2, [r4, #24]
    434c:	420a      	tst	r2, r1
    434e:	d10a      	bne.n	4366 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    4350:	2b01      	cmp	r3, #1
    4352:	d00a      	beq.n	436a <usart_write_buffer_wait+0xae>
    4354:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4356:	2b00      	cmp	r3, #0
    4358:	d1f7      	bne.n	434a <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    435a:	2000      	movs	r0, #0
    435c:	e7b8      	b.n	42d0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    435e:	2012      	movs	r0, #18
    4360:	e7b6      	b.n	42d0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    4362:	2000      	movs	r0, #0
    4364:	e7b4      	b.n	42d0 <usart_write_buffer_wait+0x14>
    4366:	2000      	movs	r0, #0
    4368:	e7b2      	b.n	42d0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    436a:	2012      	movs	r0, #18
    436c:	e7b0      	b.n	42d0 <usart_write_buffer_wait+0x14>
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	0000ffff 	.word	0x0000ffff
    4374:	0000422d 	.word	0x0000422d

00004378 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4378:	b5f0      	push	{r4, r5, r6, r7, lr}
    437a:	46d6      	mov	lr, sl
    437c:	b500      	push	{lr}
    437e:	b084      	sub	sp, #16
    4380:	0004      	movs	r4, r0
    4382:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4384:	2017      	movs	r0, #23
	if (length == 0) {
    4386:	2a00      	cmp	r2, #0
    4388:	d103      	bne.n	4392 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    438a:	b004      	add	sp, #16
    438c:	bc04      	pop	{r2}
    438e:	4692      	mov	sl, r2
    4390:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4392:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    4394:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    4396:	2b00      	cmp	r3, #0
    4398:	d0f7      	beq.n	438a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    439a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    439c:	3a01      	subs	r2, #1
    439e:	b293      	uxth	r3, r2
    43a0:	469a      	mov	sl, r3
    43a2:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    43a4:	2704      	movs	r7, #4
    43a6:	e019      	b.n	43dc <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    43a8:	2300      	movs	r3, #0
    43aa:	aa02      	add	r2, sp, #8
    43ac:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    43ae:	1d91      	adds	r1, r2, #6
    43b0:	0020      	movs	r0, r4
    43b2:	4b15      	ldr	r3, [pc, #84]	; (4408 <usart_read_buffer_wait+0x90>)
    43b4:	4798      	blx	r3
		if (retval != STATUS_OK) {
    43b6:	2800      	cmp	r0, #0
    43b8:	d1e7      	bne.n	438a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    43ba:	1c69      	adds	r1, r5, #1
    43bc:	b289      	uxth	r1, r1
    43be:	ab02      	add	r3, sp, #8
    43c0:	88db      	ldrh	r3, [r3, #6]
    43c2:	9a01      	ldr	r2, [sp, #4]
    43c4:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43c6:	7962      	ldrb	r2, [r4, #5]
    43c8:	2a01      	cmp	r2, #1
    43ca:	d014      	beq.n	43f6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    43cc:	000d      	movs	r5, r1
	while (length--) {
    43ce:	4653      	mov	r3, sl
    43d0:	3b01      	subs	r3, #1
    43d2:	b29b      	uxth	r3, r3
    43d4:	469a      	mov	sl, r3
    43d6:	4b0d      	ldr	r3, [pc, #52]	; (440c <usart_read_buffer_wait+0x94>)
    43d8:	459a      	cmp	sl, r3
    43da:	d0d6      	beq.n	438a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    43dc:	7e33      	ldrb	r3, [r6, #24]
    43de:	423b      	tst	r3, r7
    43e0:	d1e2      	bne.n	43a8 <usart_read_buffer_wait+0x30>
    43e2:	4b0a      	ldr	r3, [pc, #40]	; (440c <usart_read_buffer_wait+0x94>)
    43e4:	7e32      	ldrb	r2, [r6, #24]
    43e6:	423a      	tst	r2, r7
    43e8:	d1de      	bne.n	43a8 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    43ea:	2b01      	cmp	r3, #1
    43ec:	d009      	beq.n	4402 <usart_read_buffer_wait+0x8a>
    43ee:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    43f0:	2b00      	cmp	r3, #0
    43f2:	d1f7      	bne.n	43e4 <usart_read_buffer_wait+0x6c>
    43f4:	e7d8      	b.n	43a8 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    43f6:	3502      	adds	r5, #2
    43f8:	b2ad      	uxth	r5, r5
    43fa:	0a1b      	lsrs	r3, r3, #8
    43fc:	9a01      	ldr	r2, [sp, #4]
    43fe:	5453      	strb	r3, [r2, r1]
    4400:	e7e5      	b.n	43ce <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    4402:	2012      	movs	r0, #18
    4404:	e7c1      	b.n	438a <usart_read_buffer_wait+0x12>
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	00004253 	.word	0x00004253
    440c:	0000ffff 	.word	0x0000ffff

00004410 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4412:	0080      	lsls	r0, r0, #2
    4414:	4b62      	ldr	r3, [pc, #392]	; (45a0 <_usart_interrupt_handler+0x190>)
    4416:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4418:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    441a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    441c:	2b00      	cmp	r3, #0
    441e:	d1fc      	bne.n	441a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4420:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4422:	7da6      	ldrb	r6, [r4, #22]
    4424:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4426:	2330      	movs	r3, #48	; 0x30
    4428:	5ceb      	ldrb	r3, [r5, r3]
    442a:	2231      	movs	r2, #49	; 0x31
    442c:	5caf      	ldrb	r7, [r5, r2]
    442e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4430:	07f3      	lsls	r3, r6, #31
    4432:	d522      	bpl.n	447a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4434:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4436:	b29b      	uxth	r3, r3
    4438:	2b00      	cmp	r3, #0
    443a:	d01c      	beq.n	4476 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    443c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    443e:	7813      	ldrb	r3, [r2, #0]
    4440:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4442:	1c51      	adds	r1, r2, #1
    4444:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4446:	7969      	ldrb	r1, [r5, #5]
    4448:	2901      	cmp	r1, #1
    444a:	d00e      	beq.n	446a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    444c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    444e:	05db      	lsls	r3, r3, #23
    4450:	0ddb      	lsrs	r3, r3, #23
    4452:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4454:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4456:	3b01      	subs	r3, #1
    4458:	b29b      	uxth	r3, r3
    445a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    445c:	2b00      	cmp	r3, #0
    445e:	d10c      	bne.n	447a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4460:	3301      	adds	r3, #1
    4462:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4464:	3301      	adds	r3, #1
    4466:	75a3      	strb	r3, [r4, #22]
    4468:	e007      	b.n	447a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    446a:	7851      	ldrb	r1, [r2, #1]
    446c:	0209      	lsls	r1, r1, #8
    446e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4470:	3202      	adds	r2, #2
    4472:	62aa      	str	r2, [r5, #40]	; 0x28
    4474:	e7eb      	b.n	444e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4476:	2301      	movs	r3, #1
    4478:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    447a:	07b3      	lsls	r3, r6, #30
    447c:	d506      	bpl.n	448c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    447e:	2302      	movs	r3, #2
    4480:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4482:	2200      	movs	r2, #0
    4484:	3331      	adds	r3, #49	; 0x31
    4486:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4488:	07fb      	lsls	r3, r7, #31
    448a:	d41a      	bmi.n	44c2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    448c:	0773      	lsls	r3, r6, #29
    448e:	d565      	bpl.n	455c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4490:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4492:	b29b      	uxth	r3, r3
    4494:	2b00      	cmp	r3, #0
    4496:	d05f      	beq.n	4558 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4498:	8b63      	ldrh	r3, [r4, #26]
    449a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    449c:	071a      	lsls	r2, r3, #28
    449e:	d414      	bmi.n	44ca <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    44a0:	223f      	movs	r2, #63	; 0x3f
    44a2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    44a4:	2b00      	cmp	r3, #0
    44a6:	d034      	beq.n	4512 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    44a8:	079a      	lsls	r2, r3, #30
    44aa:	d511      	bpl.n	44d0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    44ac:	221a      	movs	r2, #26
    44ae:	2332      	movs	r3, #50	; 0x32
    44b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    44b2:	3b30      	subs	r3, #48	; 0x30
    44b4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    44b6:	077b      	lsls	r3, r7, #29
    44b8:	d550      	bpl.n	455c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    44ba:	0028      	movs	r0, r5
    44bc:	696b      	ldr	r3, [r5, #20]
    44be:	4798      	blx	r3
    44c0:	e04c      	b.n	455c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    44c2:	0028      	movs	r0, r5
    44c4:	68eb      	ldr	r3, [r5, #12]
    44c6:	4798      	blx	r3
    44c8:	e7e0      	b.n	448c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    44ca:	2237      	movs	r2, #55	; 0x37
    44cc:	4013      	ands	r3, r2
    44ce:	e7e9      	b.n	44a4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    44d0:	075a      	lsls	r2, r3, #29
    44d2:	d505      	bpl.n	44e0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    44d4:	221e      	movs	r2, #30
    44d6:	2332      	movs	r3, #50	; 0x32
    44d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    44da:	3b2e      	subs	r3, #46	; 0x2e
    44dc:	8363      	strh	r3, [r4, #26]
    44de:	e7ea      	b.n	44b6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    44e0:	07da      	lsls	r2, r3, #31
    44e2:	d505      	bpl.n	44f0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    44e4:	2213      	movs	r2, #19
    44e6:	2332      	movs	r3, #50	; 0x32
    44e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    44ea:	3b31      	subs	r3, #49	; 0x31
    44ec:	8363      	strh	r3, [r4, #26]
    44ee:	e7e2      	b.n	44b6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    44f0:	06da      	lsls	r2, r3, #27
    44f2:	d505      	bpl.n	4500 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    44f4:	2242      	movs	r2, #66	; 0x42
    44f6:	2332      	movs	r3, #50	; 0x32
    44f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    44fa:	3b22      	subs	r3, #34	; 0x22
    44fc:	8363      	strh	r3, [r4, #26]
    44fe:	e7da      	b.n	44b6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4500:	2220      	movs	r2, #32
    4502:	421a      	tst	r2, r3
    4504:	d0d7      	beq.n	44b6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4506:	3221      	adds	r2, #33	; 0x21
    4508:	2332      	movs	r3, #50	; 0x32
    450a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    450c:	3b12      	subs	r3, #18
    450e:	8363      	strh	r3, [r4, #26]
    4510:	e7d1      	b.n	44b6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4512:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4514:	05db      	lsls	r3, r3, #23
    4516:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4518:	b2da      	uxtb	r2, r3
    451a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    451c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    451e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4520:	1c51      	adds	r1, r2, #1
    4522:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4524:	7969      	ldrb	r1, [r5, #5]
    4526:	2901      	cmp	r1, #1
    4528:	d010      	beq.n	454c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    452a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    452c:	3b01      	subs	r3, #1
    452e:	b29b      	uxth	r3, r3
    4530:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4532:	2b00      	cmp	r3, #0
    4534:	d112      	bne.n	455c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4536:	3304      	adds	r3, #4
    4538:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    453a:	2200      	movs	r2, #0
    453c:	332e      	adds	r3, #46	; 0x2e
    453e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4540:	07bb      	lsls	r3, r7, #30
    4542:	d50b      	bpl.n	455c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4544:	0028      	movs	r0, r5
    4546:	692b      	ldr	r3, [r5, #16]
    4548:	4798      	blx	r3
    454a:	e007      	b.n	455c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    454c:	0a1b      	lsrs	r3, r3, #8
    454e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4552:	3301      	adds	r3, #1
    4554:	626b      	str	r3, [r5, #36]	; 0x24
    4556:	e7e8      	b.n	452a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4558:	2304      	movs	r3, #4
    455a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    455c:	06f3      	lsls	r3, r6, #27
    455e:	d504      	bpl.n	456a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4560:	2310      	movs	r3, #16
    4562:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4564:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4566:	06fb      	lsls	r3, r7, #27
    4568:	d40e      	bmi.n	4588 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    456a:	06b3      	lsls	r3, r6, #26
    456c:	d504      	bpl.n	4578 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    456e:	2320      	movs	r3, #32
    4570:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4572:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4574:	073b      	lsls	r3, r7, #28
    4576:	d40b      	bmi.n	4590 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4578:	0733      	lsls	r3, r6, #28
    457a:	d504      	bpl.n	4586 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    457c:	2308      	movs	r3, #8
    457e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4580:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4582:	06bb      	lsls	r3, r7, #26
    4584:	d408      	bmi.n	4598 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4588:	0028      	movs	r0, r5
    458a:	69eb      	ldr	r3, [r5, #28]
    458c:	4798      	blx	r3
    458e:	e7ec      	b.n	456a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4590:	0028      	movs	r0, r5
    4592:	69ab      	ldr	r3, [r5, #24]
    4594:	4798      	blx	r3
    4596:	e7ef      	b.n	4578 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4598:	6a2b      	ldr	r3, [r5, #32]
    459a:	0028      	movs	r0, r5
    459c:	4798      	blx	r3
}
    459e:	e7f2      	b.n	4586 <_usart_interrupt_handler+0x176>
    45a0:	20002078 	.word	0x20002078

000045a4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    45a4:	b510      	push	{r4, lr}
	switch (clock_source) {
    45a6:	2808      	cmp	r0, #8
    45a8:	d803      	bhi.n	45b2 <system_clock_source_get_hz+0xe>
    45aa:	0080      	lsls	r0, r0, #2
    45ac:	4b1c      	ldr	r3, [pc, #112]	; (4620 <system_clock_source_get_hz+0x7c>)
    45ae:	581b      	ldr	r3, [r3, r0]
    45b0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    45b2:	2000      	movs	r0, #0
    45b4:	e032      	b.n	461c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    45b6:	4b1b      	ldr	r3, [pc, #108]	; (4624 <system_clock_source_get_hz+0x80>)
    45b8:	6918      	ldr	r0, [r3, #16]
    45ba:	e02f      	b.n	461c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    45bc:	4b1a      	ldr	r3, [pc, #104]	; (4628 <system_clock_source_get_hz+0x84>)
    45be:	7d18      	ldrb	r0, [r3, #20]
    45c0:	0700      	lsls	r0, r0, #28
    45c2:	0f80      	lsrs	r0, r0, #30
    45c4:	1c43      	adds	r3, r0, #1
    45c6:	4819      	ldr	r0, [pc, #100]	; (462c <system_clock_source_get_hz+0x88>)
    45c8:	4358      	muls	r0, r3
    45ca:	e027      	b.n	461c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    45cc:	4b15      	ldr	r3, [pc, #84]	; (4624 <system_clock_source_get_hz+0x80>)
    45ce:	6958      	ldr	r0, [r3, #20]
    45d0:	e024      	b.n	461c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    45d2:	4b14      	ldr	r3, [pc, #80]	; (4624 <system_clock_source_get_hz+0x80>)
    45d4:	681b      	ldr	r3, [r3, #0]
			return 0;
    45d6:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    45d8:	079b      	lsls	r3, r3, #30
    45da:	d51f      	bpl.n	461c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    45dc:	4912      	ldr	r1, [pc, #72]	; (4628 <system_clock_source_get_hz+0x84>)
    45de:	2280      	movs	r2, #128	; 0x80
    45e0:	0052      	lsls	r2, r2, #1
    45e2:	68cb      	ldr	r3, [r1, #12]
    45e4:	4213      	tst	r3, r2
    45e6:	d0fc      	beq.n	45e2 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    45e8:	4b0e      	ldr	r3, [pc, #56]	; (4624 <system_clock_source_get_hz+0x80>)
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	075b      	lsls	r3, r3, #29
    45ee:	d401      	bmi.n	45f4 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    45f0:	480f      	ldr	r0, [pc, #60]	; (4630 <system_clock_source_get_hz+0x8c>)
    45f2:	e013      	b.n	461c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    45f4:	2000      	movs	r0, #0
    45f6:	4b0f      	ldr	r3, [pc, #60]	; (4634 <system_clock_source_get_hz+0x90>)
    45f8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    45fa:	4b0a      	ldr	r3, [pc, #40]	; (4624 <system_clock_source_get_hz+0x80>)
    45fc:	689b      	ldr	r3, [r3, #8]
    45fe:	041b      	lsls	r3, r3, #16
    4600:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    4602:	4358      	muls	r0, r3
    4604:	e00a      	b.n	461c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    4606:	2328      	movs	r3, #40	; 0x28
    4608:	4a07      	ldr	r2, [pc, #28]	; (4628 <system_clock_source_get_hz+0x84>)
    460a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    460c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    460e:	079b      	lsls	r3, r3, #30
    4610:	d504      	bpl.n	461c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    4612:	4b04      	ldr	r3, [pc, #16]	; (4624 <system_clock_source_get_hz+0x80>)
    4614:	68d8      	ldr	r0, [r3, #12]
    4616:	e001      	b.n	461c <system_clock_source_get_hz+0x78>
		return 32768UL;
    4618:	2080      	movs	r0, #128	; 0x80
    461a:	0200      	lsls	r0, r0, #8
	}
}
    461c:	bd10      	pop	{r4, pc}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	0001d854 	.word	0x0001d854
    4624:	20000a14 	.word	0x20000a14
    4628:	40000c00 	.word	0x40000c00
    462c:	003d0900 	.word	0x003d0900
    4630:	02dc6c00 	.word	0x02dc6c00
    4634:	00004d11 	.word	0x00004d11

00004638 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    4638:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    463a:	4c0b      	ldr	r4, [pc, #44]	; (4668 <system_clock_source_osc16m_set_config+0x30>)
    463c:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    463e:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4640:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    4642:	7802      	ldrb	r2, [r0, #0]
    4644:	2103      	movs	r1, #3
    4646:	4011      	ands	r1, r2
    4648:	0089      	lsls	r1, r1, #2
    464a:	220c      	movs	r2, #12
    464c:	4393      	bics	r3, r2
    464e:	430b      	orrs	r3, r1
    4650:	3a0b      	subs	r2, #11
    4652:	4032      	ands	r2, r6
    4654:	0192      	lsls	r2, r2, #6
    4656:	2140      	movs	r1, #64	; 0x40
    4658:	438b      	bics	r3, r1
    465a:	4313      	orrs	r3, r2
    465c:	01ed      	lsls	r5, r5, #7
    465e:	227f      	movs	r2, #127	; 0x7f
    4660:	4013      	ands	r3, r2
    4662:	432b      	orrs	r3, r5
    4664:	7523      	strb	r3, [r4, #20]
}
    4666:	bd70      	pop	{r4, r5, r6, pc}
    4668:	40000c00 	.word	0x40000c00

0000466c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    466e:	46d6      	mov	lr, sl
    4670:	464f      	mov	r7, r9
    4672:	4646      	mov	r6, r8
    4674:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    4676:	4b20      	ldr	r3, [pc, #128]	; (46f8 <system_clock_source_xosc32k_set_config+0x8c>)
    4678:	469a      	mov	sl, r3
    467a:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    467c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    467e:	7801      	ldrb	r1, [r0, #0]
    4680:	424c      	negs	r4, r1
    4682:	414c      	adcs	r4, r1
    4684:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    4686:	7881      	ldrb	r1, [r0, #2]
    4688:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    468a:	78c1      	ldrb	r1, [r0, #3]
    468c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    468e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4690:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    4692:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4694:	6840      	ldr	r0, [r0, #4]
    4696:	4919      	ldr	r1, [pc, #100]	; (46fc <system_clock_source_xosc32k_set_config+0x90>)
    4698:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    469a:	2101      	movs	r1, #1
    469c:	4648      	mov	r0, r9
    469e:	0080      	lsls	r0, r0, #2
    46a0:	2204      	movs	r2, #4
    46a2:	4393      	bics	r3, r2
    46a4:	4303      	orrs	r3, r0
    46a6:	4640      	mov	r0, r8
    46a8:	4008      	ands	r0, r1
    46aa:	00c0      	lsls	r0, r0, #3
    46ac:	3204      	adds	r2, #4
    46ae:	4393      	bics	r3, r2
    46b0:	4303      	orrs	r3, r0
    46b2:	4660      	mov	r0, ip
    46b4:	4008      	ands	r0, r1
    46b6:	0100      	lsls	r0, r0, #4
    46b8:	3208      	adds	r2, #8
    46ba:	4393      	bics	r3, r2
    46bc:	4303      	orrs	r3, r0
    46be:	400f      	ands	r7, r1
    46c0:	01bf      	lsls	r7, r7, #6
    46c2:	2040      	movs	r0, #64	; 0x40
    46c4:	4383      	bics	r3, r0
    46c6:	433b      	orrs	r3, r7
    46c8:	400e      	ands	r6, r1
    46ca:	01f6      	lsls	r6, r6, #7
    46cc:	3040      	adds	r0, #64	; 0x40
    46ce:	4383      	bics	r3, r0
    46d0:	4333      	orrs	r3, r6
    46d2:	3879      	subs	r0, #121	; 0x79
    46d4:	4005      	ands	r5, r0
    46d6:	022d      	lsls	r5, r5, #8
    46d8:	4809      	ldr	r0, [pc, #36]	; (4700 <system_clock_source_xosc32k_set_config+0x94>)
    46da:	4003      	ands	r3, r0
    46dc:	432b      	orrs	r3, r5
    46de:	4021      	ands	r1, r4
    46e0:	0309      	lsls	r1, r1, #12
    46e2:	4808      	ldr	r0, [pc, #32]	; (4704 <system_clock_source_xosc32k_set_config+0x98>)
    46e4:	4003      	ands	r3, r0
    46e6:	430b      	orrs	r3, r1
    46e8:	4652      	mov	r2, sl
    46ea:	6153      	str	r3, [r2, #20]
}
    46ec:	bc1c      	pop	{r2, r3, r4}
    46ee:	4690      	mov	r8, r2
    46f0:	4699      	mov	r9, r3
    46f2:	46a2      	mov	sl, r4
    46f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	40001000 	.word	0x40001000
    46fc:	20000a14 	.word	0x20000a14
    4700:	fffff8ff 	.word	0xfffff8ff
    4704:	ffffefff 	.word	0xffffefff

00004708 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4708:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    470a:	7a83      	ldrb	r3, [r0, #10]
    470c:	069b      	lsls	r3, r3, #26
    470e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    4710:	8982      	ldrh	r2, [r0, #12]
    4712:	0592      	lsls	r2, r2, #22
    4714:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4716:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4718:	491a      	ldr	r1, [pc, #104]	; (4784 <system_clock_source_dfll_set_config+0x7c>)
    471a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    471c:	7a03      	ldrb	r3, [r0, #8]
    471e:	7a42      	ldrb	r2, [r0, #9]
    4720:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4722:	8882      	ldrh	r2, [r0, #4]
    4724:	88c4      	ldrh	r4, [r0, #6]
    4726:	4322      	orrs	r2, r4
    4728:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    472a:	7842      	ldrb	r2, [r0, #1]
    472c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    472e:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    4730:	7882      	ldrb	r2, [r0, #2]
    4732:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    4734:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4736:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4738:	7803      	ldrb	r3, [r0, #0]
    473a:	2b04      	cmp	r3, #4
    473c:	d011      	beq.n	4762 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    473e:	2b20      	cmp	r3, #32
    4740:	d10e      	bne.n	4760 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4742:	7b83      	ldrb	r3, [r0, #14]
    4744:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    4746:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4748:	4313      	orrs	r3, r2
    474a:	8a02      	ldrh	r2, [r0, #16]
    474c:	0412      	lsls	r2, r2, #16
    474e:	490e      	ldr	r1, [pc, #56]	; (4788 <system_clock_source_dfll_set_config+0x80>)
    4750:	400a      	ands	r2, r1
    4752:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4754:	4a0b      	ldr	r2, [pc, #44]	; (4784 <system_clock_source_dfll_set_config+0x7c>)
    4756:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4758:	6811      	ldr	r1, [r2, #0]
    475a:	4b0c      	ldr	r3, [pc, #48]	; (478c <system_clock_source_dfll_set_config+0x84>)
    475c:	430b      	orrs	r3, r1
    475e:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    4760:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4762:	7b83      	ldrb	r3, [r0, #14]
    4764:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    4766:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4768:	4313      	orrs	r3, r2
    476a:	8a02      	ldrh	r2, [r0, #16]
    476c:	0412      	lsls	r2, r2, #16
    476e:	4906      	ldr	r1, [pc, #24]	; (4788 <system_clock_source_dfll_set_config+0x80>)
    4770:	400a      	ands	r2, r1
    4772:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4774:	4a03      	ldr	r2, [pc, #12]	; (4784 <system_clock_source_dfll_set_config+0x7c>)
    4776:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4778:	6813      	ldr	r3, [r2, #0]
    477a:	2104      	movs	r1, #4
    477c:	430b      	orrs	r3, r1
    477e:	6013      	str	r3, [r2, #0]
    4780:	e7ee      	b.n	4760 <system_clock_source_dfll_set_config+0x58>
    4782:	46c0      	nop			; (mov r8, r8)
    4784:	20000a14 	.word	0x20000a14
    4788:	03ff0000 	.word	0x03ff0000
    478c:	00000424 	.word	0x00000424

00004790 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4790:	2808      	cmp	r0, #8
    4792:	d803      	bhi.n	479c <system_clock_source_enable+0xc>
    4794:	0080      	lsls	r0, r0, #2
    4796:	4b29      	ldr	r3, [pc, #164]	; (483c <system_clock_source_enable+0xac>)
    4798:	581b      	ldr	r3, [r3, r0]
    479a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    479c:	2017      	movs	r0, #23
    479e:	e04b      	b.n	4838 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    47a0:	4a27      	ldr	r2, [pc, #156]	; (4840 <system_clock_source_enable+0xb0>)
    47a2:	7d13      	ldrb	r3, [r2, #20]
    47a4:	2102      	movs	r1, #2
    47a6:	430b      	orrs	r3, r1
    47a8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    47aa:	2000      	movs	r0, #0
    47ac:	e044      	b.n	4838 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    47ae:	4a25      	ldr	r2, [pc, #148]	; (4844 <system_clock_source_enable+0xb4>)
    47b0:	6993      	ldr	r3, [r2, #24]
    47b2:	2102      	movs	r1, #2
    47b4:	430b      	orrs	r3, r1
    47b6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    47b8:	2000      	movs	r0, #0
		break;
    47ba:	e03d      	b.n	4838 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    47bc:	4a20      	ldr	r2, [pc, #128]	; (4840 <system_clock_source_enable+0xb0>)
    47be:	8a13      	ldrh	r3, [r2, #16]
    47c0:	2102      	movs	r1, #2
    47c2:	430b      	orrs	r3, r1
    47c4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    47c6:	2000      	movs	r0, #0
		break;
    47c8:	e036      	b.n	4838 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    47ca:	4a1e      	ldr	r2, [pc, #120]	; (4844 <system_clock_source_enable+0xb4>)
    47cc:	6953      	ldr	r3, [r2, #20]
    47ce:	2102      	movs	r1, #2
    47d0:	430b      	orrs	r3, r1
    47d2:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    47d4:	2000      	movs	r0, #0
		break;
    47d6:	e02f      	b.n	4838 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    47d8:	491b      	ldr	r1, [pc, #108]	; (4848 <system_clock_source_enable+0xb8>)
    47da:	680b      	ldr	r3, [r1, #0]
    47dc:	2202      	movs	r2, #2
    47de:	4313      	orrs	r3, r2
    47e0:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    47e2:	4b17      	ldr	r3, [pc, #92]	; (4840 <system_clock_source_enable+0xb0>)
    47e4:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    47e6:	0019      	movs	r1, r3
    47e8:	32fe      	adds	r2, #254	; 0xfe
    47ea:	68cb      	ldr	r3, [r1, #12]
    47ec:	4213      	tst	r3, r2
    47ee:	d0fc      	beq.n	47ea <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    47f0:	4a15      	ldr	r2, [pc, #84]	; (4848 <system_clock_source_enable+0xb8>)
    47f2:	6891      	ldr	r1, [r2, #8]
    47f4:	4b12      	ldr	r3, [pc, #72]	; (4840 <system_clock_source_enable+0xb0>)
    47f6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    47f8:	6852      	ldr	r2, [r2, #4]
    47fa:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    47fc:	2200      	movs	r2, #0
    47fe:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    4800:	0019      	movs	r1, r3
    4802:	3201      	adds	r2, #1
    4804:	32ff      	adds	r2, #255	; 0xff
    4806:	68cb      	ldr	r3, [r1, #12]
    4808:	4213      	tst	r3, r2
    480a:	d0fc      	beq.n	4806 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    480c:	4b0e      	ldr	r3, [pc, #56]	; (4848 <system_clock_source_enable+0xb8>)
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	b29b      	uxth	r3, r3
    4812:	4a0b      	ldr	r2, [pc, #44]	; (4840 <system_clock_source_enable+0xb0>)
    4814:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    4816:	2000      	movs	r0, #0
    4818:	e00e      	b.n	4838 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    481a:	4909      	ldr	r1, [pc, #36]	; (4840 <system_clock_source_enable+0xb0>)
    481c:	2228      	movs	r2, #40	; 0x28
    481e:	5c8b      	ldrb	r3, [r1, r2]
    4820:	2002      	movs	r0, #2
    4822:	4303      	orrs	r3, r0
    4824:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    4826:	0008      	movs	r0, r1
    4828:	2138      	movs	r1, #56	; 0x38
    482a:	3a26      	subs	r2, #38	; 0x26
    482c:	5c43      	ldrb	r3, [r0, r1]
    482e:	4213      	tst	r3, r2
    4830:	d1fc      	bne.n	482c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    4832:	2000      	movs	r0, #0
    4834:	e000      	b.n	4838 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    4836:	2000      	movs	r0, #0
}
    4838:	4770      	bx	lr
    483a:	46c0      	nop			; (mov r8, r8)
    483c:	0001d878 	.word	0x0001d878
    4840:	40000c00 	.word	0x40000c00
    4844:	40001000 	.word	0x40001000
    4848:	20000a14 	.word	0x20000a14

0000484c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    484c:	2808      	cmp	r0, #8
    484e:	d832      	bhi.n	48b6 <system_clock_source_disable+0x6a>
    4850:	0080      	lsls	r0, r0, #2
    4852:	4b1a      	ldr	r3, [pc, #104]	; (48bc <system_clock_source_disable+0x70>)
    4854:	581b      	ldr	r3, [r3, r0]
    4856:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    4858:	4a19      	ldr	r2, [pc, #100]	; (48c0 <system_clock_source_disable+0x74>)
    485a:	7d13      	ldrb	r3, [r2, #20]
    485c:	2102      	movs	r1, #2
    485e:	438b      	bics	r3, r1
    4860:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4862:	2000      	movs	r0, #0
}
    4864:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    4866:	4a17      	ldr	r2, [pc, #92]	; (48c4 <system_clock_source_disable+0x78>)
    4868:	6993      	ldr	r3, [r2, #24]
    486a:	2102      	movs	r1, #2
    486c:	438b      	bics	r3, r1
    486e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    4870:	2000      	movs	r0, #0
		break;
    4872:	e7f7      	b.n	4864 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    4874:	4a12      	ldr	r2, [pc, #72]	; (48c0 <system_clock_source_disable+0x74>)
    4876:	8a13      	ldrh	r3, [r2, #16]
    4878:	2102      	movs	r1, #2
    487a:	438b      	bics	r3, r1
    487c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    487e:	2000      	movs	r0, #0
		break;
    4880:	e7f0      	b.n	4864 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    4882:	4a10      	ldr	r2, [pc, #64]	; (48c4 <system_clock_source_disable+0x78>)
    4884:	6953      	ldr	r3, [r2, #20]
    4886:	2102      	movs	r1, #2
    4888:	438b      	bics	r3, r1
    488a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    488c:	2000      	movs	r0, #0
		break;
    488e:	e7e9      	b.n	4864 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    4890:	4b0d      	ldr	r3, [pc, #52]	; (48c8 <system_clock_source_disable+0x7c>)
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	2102      	movs	r1, #2
    4896:	438a      	bics	r2, r1
    4898:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    489a:	681b      	ldr	r3, [r3, #0]
    489c:	b29b      	uxth	r3, r3
    489e:	4a08      	ldr	r2, [pc, #32]	; (48c0 <system_clock_source_disable+0x74>)
    48a0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    48a2:	2000      	movs	r0, #0
		break;
    48a4:	e7de      	b.n	4864 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    48a6:	4906      	ldr	r1, [pc, #24]	; (48c0 <system_clock_source_disable+0x74>)
    48a8:	2228      	movs	r2, #40	; 0x28
    48aa:	5c8b      	ldrb	r3, [r1, r2]
    48ac:	2002      	movs	r0, #2
    48ae:	4383      	bics	r3, r0
    48b0:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    48b2:	2000      	movs	r0, #0
		break;
    48b4:	e7d6      	b.n	4864 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    48b6:	2017      	movs	r0, #23
    48b8:	e7d4      	b.n	4864 <system_clock_source_disable+0x18>
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	0001d89c 	.word	0x0001d89c
    48c0:	40000c00 	.word	0x40000c00
    48c4:	40001000 	.word	0x40001000
    48c8:	20000a14 	.word	0x20000a14

000048cc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    48cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ce:	46ce      	mov	lr, r9
    48d0:	4647      	mov	r7, r8
    48d2:	b580      	push	{r7, lr}
    48d4:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    48d6:	2280      	movs	r2, #128	; 0x80
    48d8:	0052      	lsls	r2, r2, #1
    48da:	4b76      	ldr	r3, [pc, #472]	; (4ab4 <system_clock_init+0x1e8>)
    48dc:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    48de:	3afd      	subs	r2, #253	; 0xfd
    48e0:	4b75      	ldr	r3, [pc, #468]	; (4ab8 <system_clock_init+0x1ec>)
    48e2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    48e4:	4a75      	ldr	r2, [pc, #468]	; (4abc <system_clock_init+0x1f0>)
    48e6:	6853      	ldr	r3, [r2, #4]
    48e8:	211e      	movs	r1, #30
    48ea:	438b      	bics	r3, r1
    48ec:	391a      	subs	r1, #26
    48ee:	430b      	orrs	r3, r1
    48f0:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    48f2:	2380      	movs	r3, #128	; 0x80
    48f4:	05db      	lsls	r3, r3, #23
    48f6:	789b      	ldrb	r3, [r3, #2]
    48f8:	2b02      	cmp	r3, #2
    48fa:	d00f      	beq.n	491c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    48fc:	2380      	movs	r3, #128	; 0x80
    48fe:	05db      	lsls	r3, r3, #23
    4900:	789b      	ldrb	r3, [r3, #2]
    4902:	b25b      	sxtb	r3, r3
    4904:	2b00      	cmp	r3, #0
    4906:	db09      	blt.n	491c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    4908:	2380      	movs	r3, #128	; 0x80
    490a:	05db      	lsls	r3, r3, #23
    490c:	2201      	movs	r2, #1
    490e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    4910:	3201      	adds	r2, #1
    4912:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    4914:	001a      	movs	r2, r3
    4916:	7993      	ldrb	r3, [r2, #6]
    4918:	2b00      	cmp	r3, #0
    491a:	d0fc      	beq.n	4916 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    491c:	a809      	add	r0, sp, #36	; 0x24
    491e:	2300      	movs	r3, #0
    4920:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    4922:	2280      	movs	r2, #128	; 0x80
    4924:	0212      	lsls	r2, r2, #8
    4926:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    4928:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    492a:	2201      	movs	r2, #1
    492c:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    492e:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    4930:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4932:	3203      	adds	r2, #3
    4934:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4936:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4938:	4b61      	ldr	r3, [pc, #388]	; (4ac0 <system_clock_init+0x1f4>)
    493a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    493c:	2005      	movs	r0, #5
    493e:	4b61      	ldr	r3, [pc, #388]	; (4ac4 <system_clock_init+0x1f8>)
    4940:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    4942:	4961      	ldr	r1, [pc, #388]	; (4ac8 <system_clock_init+0x1fc>)
    4944:	2201      	movs	r2, #1
    4946:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4948:	421a      	tst	r2, r3
    494a:	d0fc      	beq.n	4946 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    494c:	a901      	add	r1, sp, #4
    494e:	2501      	movs	r5, #1
    4950:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    4952:	2400      	movs	r4, #0
    4954:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4956:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    4958:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    495a:	2303      	movs	r3, #3
    495c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    495e:	2000      	movs	r0, #0
    4960:	4b5a      	ldr	r3, [pc, #360]	; (4acc <system_clock_init+0x200>)
    4962:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    4964:	2006      	movs	r0, #6
    4966:	4b5a      	ldr	r3, [pc, #360]	; (4ad0 <system_clock_init+0x204>)
    4968:	4798      	blx	r3
	config->run_in_standby  = false;
    496a:	466b      	mov	r3, sp
    496c:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    496e:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    4970:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    4972:	4668      	mov	r0, sp
    4974:	4b57      	ldr	r3, [pc, #348]	; (4ad4 <system_clock_init+0x208>)
    4976:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    4978:	2006      	movs	r0, #6
    497a:	4b52      	ldr	r3, [pc, #328]	; (4ac4 <system_clock_init+0x1f8>)
    497c:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    497e:	494d      	ldr	r1, [pc, #308]	; (4ab4 <system_clock_init+0x1e8>)
    4980:	2210      	movs	r2, #16
    4982:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    4984:	421a      	tst	r2, r3
    4986:	d0fc      	beq.n	4982 <system_clock_init+0xb6>
	config->division_factor    = 1;
    4988:	a901      	add	r1, sp, #4
    498a:	2301      	movs	r3, #1
    498c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    498e:	2400      	movs	r4, #0
    4990:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    4992:	3305      	adds	r3, #5
    4994:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    4996:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    4998:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    499a:	2000      	movs	r0, #0
    499c:	4b4b      	ldr	r3, [pc, #300]	; (4acc <system_clock_init+0x200>)
    499e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    49a0:	ab04      	add	r3, sp, #16
    49a2:	2200      	movs	r2, #0
    49a4:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    49a6:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    49a8:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    49aa:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    49ac:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    49ae:	213f      	movs	r1, #63	; 0x3f
    49b0:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    49b2:	393b      	subs	r1, #59	; 0x3b
    49b4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    49b6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    49b8:	4b47      	ldr	r3, [pc, #284]	; (4ad8 <system_clock_init+0x20c>)
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    49be:	2b3f      	cmp	r3, #63	; 0x3f
    49c0:	d100      	bne.n	49c4 <system_clock_init+0xf8>
    49c2:	e074      	b.n	4aae <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    49c4:	a804      	add	r0, sp, #16
    49c6:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    49c8:	23b7      	movs	r3, #183	; 0xb7
    49ca:	00db      	lsls	r3, r3, #3
    49cc:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    49ce:	2307      	movs	r3, #7
    49d0:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    49d2:	3338      	adds	r3, #56	; 0x38
    49d4:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    49d6:	4b41      	ldr	r3, [pc, #260]	; (4adc <system_clock_init+0x210>)
    49d8:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    49da:	4b41      	ldr	r3, [pc, #260]	; (4ae0 <system_clock_init+0x214>)
    49dc:	4798      	blx	r3
	config->division_factor    = 1;
    49de:	ac01      	add	r4, sp, #4
    49e0:	2601      	movs	r6, #1
    49e2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    49e4:	2500      	movs	r5, #0
    49e6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    49e8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    49ea:	2305      	movs	r3, #5
    49ec:	4699      	mov	r9, r3
    49ee:	7023      	strb	r3, [r4, #0]
    49f0:	7226      	strb	r6, [r4, #8]
    49f2:	0021      	movs	r1, r4
    49f4:	2001      	movs	r0, #1
    49f6:	4b35      	ldr	r3, [pc, #212]	; (4acc <system_clock_init+0x200>)
    49f8:	4698      	mov	r8, r3
    49fa:	4798      	blx	r3
    49fc:	2001      	movs	r0, #1
    49fe:	4f39      	ldr	r7, [pc, #228]	; (4ae4 <system_clock_init+0x218>)
    4a00:	47b8      	blx	r7
	config->high_when_disabled = false;
    4a02:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    4a04:	2306      	movs	r3, #6
    4a06:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4a08:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4a0a:	7265      	strb	r5, [r4, #9]
    4a0c:	464b      	mov	r3, r9
    4a0e:	6063      	str	r3, [r4, #4]
    4a10:	0021      	movs	r1, r4
    4a12:	2002      	movs	r0, #2
    4a14:	47c0      	blx	r8
    4a16:	2002      	movs	r0, #2
    4a18:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4a1a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4a1c:	0021      	movs	r1, r4
    4a1e:	2000      	movs	r0, #0
    4a20:	4b31      	ldr	r3, [pc, #196]	; (4ae8 <system_clock_init+0x21c>)
    4a22:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    4a24:	2000      	movs	r0, #0
    4a26:	4b31      	ldr	r3, [pc, #196]	; (4aec <system_clock_init+0x220>)
    4a28:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4a2a:	2007      	movs	r0, #7
    4a2c:	4b25      	ldr	r3, [pc, #148]	; (4ac4 <system_clock_init+0x1f8>)
    4a2e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    4a30:	4920      	ldr	r1, [pc, #128]	; (4ab4 <system_clock_init+0x1e8>)
    4a32:	22d0      	movs	r2, #208	; 0xd0
    4a34:	0112      	lsls	r2, r2, #4
    4a36:	68cb      	ldr	r3, [r1, #12]
    4a38:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4a3a:	4293      	cmp	r3, r2
    4a3c:	d1fb      	bne.n	4a36 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    4a3e:	4c2c      	ldr	r4, [pc, #176]	; (4af0 <system_clock_init+0x224>)
    4a40:	2301      	movs	r3, #1
    4a42:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    4a44:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    4a46:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    4a48:	a901      	add	r1, sp, #4
    4a4a:	2300      	movs	r3, #0
    4a4c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4a4e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4a50:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4a52:	3307      	adds	r3, #7
    4a54:	700b      	strb	r3, [r1, #0]
    4a56:	3b01      	subs	r3, #1
    4a58:	604b      	str	r3, [r1, #4]
    4a5a:	2000      	movs	r0, #0
    4a5c:	4b1b      	ldr	r3, [pc, #108]	; (4acc <system_clock_init+0x200>)
    4a5e:	4798      	blx	r3
    4a60:	2000      	movs	r0, #0
    4a62:	4b20      	ldr	r3, [pc, #128]	; (4ae4 <system_clock_init+0x218>)
    4a64:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    4a66:	2000      	movs	r0, #0
    4a68:	4b22      	ldr	r3, [pc, #136]	; (4af4 <system_clock_init+0x228>)
    4a6a:	4798      	blx	r3
    4a6c:	7921      	ldrb	r1, [r4, #4]
    4a6e:	b2c9      	uxtb	r1, r1
    4a70:	4b21      	ldr	r3, [pc, #132]	; (4af8 <system_clock_init+0x22c>)
    4a72:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    4a74:	4b21      	ldr	r3, [pc, #132]	; (4afc <system_clock_init+0x230>)
    4a76:	4298      	cmp	r0, r3
    4a78:	d814      	bhi.n	4aa4 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    4a7a:	2380      	movs	r3, #128	; 0x80
    4a7c:	05db      	lsls	r3, r3, #23
    4a7e:	789b      	ldrb	r3, [r3, #2]
    4a80:	2b00      	cmp	r3, #0
    4a82:	d00f      	beq.n	4aa4 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    4a84:	2380      	movs	r3, #128	; 0x80
    4a86:	05db      	lsls	r3, r3, #23
    4a88:	789b      	ldrb	r3, [r3, #2]
    4a8a:	b25b      	sxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	db09      	blt.n	4aa4 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    4a90:	2380      	movs	r3, #128	; 0x80
    4a92:	05db      	lsls	r3, r3, #23
    4a94:	2201      	movs	r2, #1
    4a96:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    4a98:	2200      	movs	r2, #0
    4a9a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    4a9c:	001a      	movs	r2, r3
    4a9e:	7993      	ldrb	r3, [r2, #6]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d0fc      	beq.n	4a9e <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    4aa4:	b00d      	add	sp, #52	; 0x34
    4aa6:	bc0c      	pop	{r2, r3}
    4aa8:	4690      	mov	r8, r2
    4aaa:	4699      	mov	r9, r3
    4aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4aae:	3b20      	subs	r3, #32
    4ab0:	e788      	b.n	49c4 <system_clock_init+0xf8>
    4ab2:	46c0      	nop			; (mov r8, r8)
    4ab4:	40000c00 	.word	0x40000c00
    4ab8:	40001400 	.word	0x40001400
    4abc:	41004000 	.word	0x41004000
    4ac0:	0000466d 	.word	0x0000466d
    4ac4:	00004791 	.word	0x00004791
    4ac8:	40001000 	.word	0x40001000
    4acc:	00004b25 	.word	0x00004b25
    4ad0:	0000484d 	.word	0x0000484d
    4ad4:	00004639 	.word	0x00004639
    4ad8:	00806020 	.word	0x00806020
    4adc:	00004709 	.word	0x00004709
    4ae0:	00004b01 	.word	0x00004b01
    4ae4:	00004bd1 	.word	0x00004bd1
    4ae8:	00004ced 	.word	0x00004ced
    4aec:	00004c7d 	.word	0x00004c7d
    4af0:	40000400 	.word	0x40000400
    4af4:	00004c11 	.word	0x00004c11
    4af8:	00014509 	.word	0x00014509
    4afc:	00b71b00 	.word	0x00b71b00

00004b00 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    4b00:	4a06      	ldr	r2, [pc, #24]	; (4b1c <system_gclk_init+0x1c>)
    4b02:	6953      	ldr	r3, [r2, #20]
    4b04:	2140      	movs	r1, #64	; 0x40
    4b06:	430b      	orrs	r3, r1
    4b08:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    4b0a:	2201      	movs	r2, #1
    4b0c:	4b04      	ldr	r3, [pc, #16]	; (4b20 <system_gclk_init+0x20>)
    4b0e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    4b10:	0019      	movs	r1, r3
    4b12:	780b      	ldrb	r3, [r1, #0]
    4b14:	4213      	tst	r3, r2
    4b16:	d1fc      	bne.n	4b12 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4b18:	4770      	bx	lr
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	40000400 	.word	0x40000400
    4b20:	40001800 	.word	0x40001800

00004b24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4b28:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4b2a:	784b      	ldrb	r3, [r1, #1]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d002      	beq.n	4b36 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4b30:	2380      	movs	r3, #128	; 0x80
    4b32:	00db      	lsls	r3, r3, #3
    4b34:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4b36:	7a4b      	ldrb	r3, [r1, #9]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d002      	beq.n	4b42 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4b3c:	2380      	movs	r3, #128	; 0x80
    4b3e:	011b      	lsls	r3, r3, #4
    4b40:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4b42:	6848      	ldr	r0, [r1, #4]
    4b44:	2801      	cmp	r0, #1
    4b46:	d90f      	bls.n	4b68 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4b48:	1e43      	subs	r3, r0, #1
    4b4a:	4218      	tst	r0, r3
    4b4c:	d131      	bne.n	4bb2 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4b4e:	2802      	cmp	r0, #2
    4b50:	d92d      	bls.n	4bae <system_gclk_gen_set_config+0x8a>
    4b52:	2302      	movs	r3, #2
    4b54:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4b56:	3201      	adds	r2, #1
						mask <<= 1) {
    4b58:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4b5a:	4298      	cmp	r0, r3
    4b5c:	d8fb      	bhi.n	4b56 <system_gclk_gen_set_config+0x32>
    4b5e:	2380      	movs	r3, #128	; 0x80
    4b60:	015b      	lsls	r3, r3, #5
    4b62:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    4b64:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4b66:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4b68:	7a0b      	ldrb	r3, [r1, #8]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d002      	beq.n	4b74 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4b6e:	2380      	movs	r3, #128	; 0x80
    4b70:	019b      	lsls	r3, r3, #6
    4b72:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4b74:	2604      	movs	r6, #4
    4b76:	40a6      	lsls	r6, r4
    4b78:	4911      	ldr	r1, [pc, #68]	; (4bc0 <system_gclk_gen_set_config+0x9c>)
    4b7a:	4a12      	ldr	r2, [pc, #72]	; (4bc4 <system_gclk_gen_set_config+0xa0>)
    4b7c:	684b      	ldr	r3, [r1, #4]
    4b7e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    4b80:	421e      	tst	r6, r3
    4b82:	d1fb      	bne.n	4b7c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    4b84:	4b10      	ldr	r3, [pc, #64]	; (4bc8 <system_gclk_gen_set_config+0xa4>)
    4b86:	4798      	blx	r3
    4b88:	00a4      	lsls	r4, r4, #2
    4b8a:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <system_gclk_gen_set_config+0x9c>)
    4b8c:	469c      	mov	ip, r3
    4b8e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    4b90:	6a22      	ldr	r2, [r4, #32]
    4b92:	2380      	movs	r3, #128	; 0x80
    4b94:	005b      	lsls	r3, r3, #1
    4b96:	401a      	ands	r2, r3
    4b98:	432a      	orrs	r2, r5
    4b9a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4b9c:	4661      	mov	r1, ip
    4b9e:	4a09      	ldr	r2, [pc, #36]	; (4bc4 <system_gclk_gen_set_config+0xa0>)
    4ba0:	684b      	ldr	r3, [r1, #4]
    4ba2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    4ba4:	421e      	tst	r6, r3
    4ba6:	d1fb      	bne.n	4ba0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    4ba8:	4b08      	ldr	r3, [pc, #32]	; (4bcc <system_gclk_gen_set_config+0xa8>)
    4baa:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    4bac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4bae:	2200      	movs	r2, #0
    4bb0:	e7d5      	b.n	4b5e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    4bb2:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4bb4:	2380      	movs	r3, #128	; 0x80
    4bb6:	009b      	lsls	r3, r3, #2
    4bb8:	4318      	orrs	r0, r3
    4bba:	4305      	orrs	r5, r0
    4bbc:	e7d4      	b.n	4b68 <system_gclk_gen_set_config+0x44>
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40001800 	.word	0x40001800
    4bc4:	000007fc 	.word	0x000007fc
    4bc8:	00002a15 	.word	0x00002a15
    4bcc:	00002a55 	.word	0x00002a55

00004bd0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4bd0:	b510      	push	{r4, lr}
    4bd2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4bd4:	2204      	movs	r2, #4
    4bd6:	4082      	lsls	r2, r0
    4bd8:	4809      	ldr	r0, [pc, #36]	; (4c00 <system_gclk_gen_enable+0x30>)
    4bda:	490a      	ldr	r1, [pc, #40]	; (4c04 <system_gclk_gen_enable+0x34>)
    4bdc:	6843      	ldr	r3, [r0, #4]
    4bde:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    4be0:	421a      	tst	r2, r3
    4be2:	d1fb      	bne.n	4bdc <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    4be4:	4b08      	ldr	r3, [pc, #32]	; (4c08 <system_gclk_gen_enable+0x38>)
    4be6:	4798      	blx	r3
    4be8:	00a4      	lsls	r4, r4, #2
    4bea:	4b05      	ldr	r3, [pc, #20]	; (4c00 <system_gclk_gen_enable+0x30>)
    4bec:	469c      	mov	ip, r3
    4bee:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    4bf0:	6a22      	ldr	r2, [r4, #32]
    4bf2:	2380      	movs	r3, #128	; 0x80
    4bf4:	005b      	lsls	r3, r3, #1
    4bf6:	4313      	orrs	r3, r2
    4bf8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    4bfa:	4b04      	ldr	r3, [pc, #16]	; (4c0c <system_gclk_gen_enable+0x3c>)
    4bfc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4bfe:	bd10      	pop	{r4, pc}
    4c00:	40001800 	.word	0x40001800
    4c04:	000007fc 	.word	0x000007fc
    4c08:	00002a15 	.word	0x00002a15
    4c0c:	00002a55 	.word	0x00002a55

00004c10 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c12:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4c14:	2204      	movs	r2, #4
    4c16:	4082      	lsls	r2, r0
    4c18:	4812      	ldr	r0, [pc, #72]	; (4c64 <system_gclk_gen_get_hz+0x54>)
    4c1a:	4913      	ldr	r1, [pc, #76]	; (4c68 <system_gclk_gen_get_hz+0x58>)
    4c1c:	6843      	ldr	r3, [r0, #4]
    4c1e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    4c20:	421a      	tst	r2, r3
    4c22:	d1fb      	bne.n	4c1c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    4c24:	4b11      	ldr	r3, [pc, #68]	; (4c6c <system_gclk_gen_get_hz+0x5c>)
    4c26:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    4c28:	4f0e      	ldr	r7, [pc, #56]	; (4c64 <system_gclk_gen_get_hz+0x54>)
    4c2a:	3408      	adds	r4, #8
    4c2c:	00a4      	lsls	r4, r4, #2
    4c2e:	59e0      	ldr	r0, [r4, r7]
    4c30:	0700      	lsls	r0, r0, #28
    4c32:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4c34:	4b0e      	ldr	r3, [pc, #56]	; (4c70 <system_gclk_gen_get_hz+0x60>)
    4c36:	4798      	blx	r3
    4c38:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    4c3a:	59e5      	ldr	r5, [r4, r7]
    4c3c:	04ed      	lsls	r5, r5, #19
    4c3e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    4c40:	59e4      	ldr	r4, [r4, r7]
    4c42:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4c44:	4b0b      	ldr	r3, [pc, #44]	; (4c74 <system_gclk_gen_get_hz+0x64>)
    4c46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4c48:	2d00      	cmp	r5, #0
    4c4a:	d107      	bne.n	4c5c <system_gclk_gen_get_hz+0x4c>
    4c4c:	2c01      	cmp	r4, #1
    4c4e:	d907      	bls.n	4c60 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    4c50:	0021      	movs	r1, r4
    4c52:	0030      	movs	r0, r6
    4c54:	4b08      	ldr	r3, [pc, #32]	; (4c78 <system_gclk_gen_get_hz+0x68>)
    4c56:	4798      	blx	r3
    4c58:	0006      	movs	r6, r0
    4c5a:	e001      	b.n	4c60 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4c5c:	3401      	adds	r4, #1
    4c5e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    4c60:	0030      	movs	r0, r6
    4c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c64:	40001800 	.word	0x40001800
    4c68:	000007fc 	.word	0x000007fc
    4c6c:	00002a15 	.word	0x00002a15
    4c70:	000045a5 	.word	0x000045a5
    4c74:	00002a55 	.word	0x00002a55
    4c78:	00014509 	.word	0x00014509

00004c7c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4c7c:	b510      	push	{r4, lr}
    4c7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4c80:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <system_gclk_chan_enable+0x2c>)
    4c82:	4798      	blx	r3
    4c84:	00a0      	lsls	r0, r4, #2
    4c86:	4b09      	ldr	r3, [pc, #36]	; (4cac <system_gclk_chan_enable+0x30>)
    4c88:	469c      	mov	ip, r3
    4c8a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    4c8c:	2280      	movs	r2, #128	; 0x80
    4c8e:	5883      	ldr	r3, [r0, r2]
    4c90:	2140      	movs	r1, #64	; 0x40
    4c92:	430b      	orrs	r3, r1
    4c94:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    4c96:	3140      	adds	r1, #64	; 0x40
    4c98:	3a40      	subs	r2, #64	; 0x40
    4c9a:	5843      	ldr	r3, [r0, r1]
    4c9c:	421a      	tst	r2, r3
    4c9e:	d0fc      	beq.n	4c9a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    4ca0:	4b03      	ldr	r3, [pc, #12]	; (4cb0 <system_gclk_chan_enable+0x34>)
    4ca2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	00002a15 	.word	0x00002a15
    4cac:	40001800 	.word	0x40001800
    4cb0:	00002a55 	.word	0x00002a55

00004cb4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4cb4:	b510      	push	{r4, lr}
    4cb6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4cb8:	4b09      	ldr	r3, [pc, #36]	; (4ce0 <system_gclk_chan_disable+0x2c>)
    4cba:	4798      	blx	r3
    4cbc:	00a0      	lsls	r0, r4, #2
    4cbe:	4b09      	ldr	r3, [pc, #36]	; (4ce4 <system_gclk_chan_disable+0x30>)
    4cc0:	469c      	mov	ip, r3
    4cc2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    4cc4:	2280      	movs	r2, #128	; 0x80
    4cc6:	5883      	ldr	r3, [r0, r2]
    4cc8:	2140      	movs	r1, #64	; 0x40
    4cca:	438b      	bics	r3, r1
    4ccc:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    4cce:	3140      	adds	r1, #64	; 0x40
    4cd0:	3a40      	subs	r2, #64	; 0x40
    4cd2:	5843      	ldr	r3, [r0, r1]
    4cd4:	421a      	tst	r2, r3
    4cd6:	d1fc      	bne.n	4cd2 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <system_gclk_chan_disable+0x34>)
    4cda:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    4cdc:	bd10      	pop	{r4, pc}
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	00002a15 	.word	0x00002a15
    4ce4:	40001800 	.word	0x40001800
    4ce8:	00002a55 	.word	0x00002a55

00004cec <system_gclk_chan_set_config>:
{
    4cec:	b570      	push	{r4, r5, r6, lr}
    4cee:	0004      	movs	r4, r0
    4cf0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    4cf2:	4b05      	ldr	r3, [pc, #20]	; (4d08 <system_gclk_chan_set_config+0x1c>)
    4cf4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4cf6:	782a      	ldrb	r2, [r5, #0]
    4cf8:	230f      	movs	r3, #15
    4cfa:	4013      	ands	r3, r2
    4cfc:	3420      	adds	r4, #32
    4cfe:	00a4      	lsls	r4, r4, #2
    4d00:	4a02      	ldr	r2, [pc, #8]	; (4d0c <system_gclk_chan_set_config+0x20>)
    4d02:	50a3      	str	r3, [r4, r2]
}
    4d04:	bd70      	pop	{r4, r5, r6, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	00004cb5 	.word	0x00004cb5
    4d0c:	40001800 	.word	0x40001800

00004d10 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4d10:	b510      	push	{r4, lr}
    4d12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4d14:	4b06      	ldr	r3, [pc, #24]	; (4d30 <system_gclk_chan_get_hz+0x20>)
    4d16:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    4d18:	3420      	adds	r4, #32
    4d1a:	00a4      	lsls	r4, r4, #2
    4d1c:	4b05      	ldr	r3, [pc, #20]	; (4d34 <system_gclk_chan_get_hz+0x24>)
    4d1e:	58e4      	ldr	r4, [r4, r3]
    4d20:	0724      	lsls	r4, r4, #28
    4d22:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4d24:	4b04      	ldr	r3, [pc, #16]	; (4d38 <system_gclk_chan_get_hz+0x28>)
    4d26:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4d28:	0020      	movs	r0, r4
    4d2a:	4b04      	ldr	r3, [pc, #16]	; (4d3c <system_gclk_chan_get_hz+0x2c>)
    4d2c:	4798      	blx	r3
}
    4d2e:	bd10      	pop	{r4, pc}
    4d30:	00002a15 	.word	0x00002a15
    4d34:	40001800 	.word	0x40001800
    4d38:	00002a55 	.word	0x00002a55
    4d3c:	00004c11 	.word	0x00004c11

00004d40 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4d40:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4d42:	78d3      	ldrb	r3, [r2, #3]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d135      	bne.n	4db4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4d48:	7813      	ldrb	r3, [r2, #0]
    4d4a:	2b80      	cmp	r3, #128	; 0x80
    4d4c:	d029      	beq.n	4da2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4d4e:	061b      	lsls	r3, r3, #24
    4d50:	2480      	movs	r4, #128	; 0x80
    4d52:	0264      	lsls	r4, r4, #9
    4d54:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4d56:	7854      	ldrb	r4, [r2, #1]
    4d58:	2502      	movs	r5, #2
    4d5a:	43ac      	bics	r4, r5
    4d5c:	d106      	bne.n	4d6c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4d5e:	7894      	ldrb	r4, [r2, #2]
    4d60:	2c00      	cmp	r4, #0
    4d62:	d120      	bne.n	4da6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4d64:	2480      	movs	r4, #128	; 0x80
    4d66:	02a4      	lsls	r4, r4, #10
    4d68:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4d6a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d6c:	7854      	ldrb	r4, [r2, #1]
    4d6e:	3c01      	subs	r4, #1
    4d70:	2c01      	cmp	r4, #1
    4d72:	d91c      	bls.n	4dae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4d74:	040d      	lsls	r5, r1, #16
    4d76:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4d78:	24a0      	movs	r4, #160	; 0xa0
    4d7a:	05e4      	lsls	r4, r4, #23
    4d7c:	432c      	orrs	r4, r5
    4d7e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d80:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4d82:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4d84:	24d0      	movs	r4, #208	; 0xd0
    4d86:	0624      	lsls	r4, r4, #24
    4d88:	432c      	orrs	r4, r5
    4d8a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d8c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4d8e:	78d4      	ldrb	r4, [r2, #3]
    4d90:	2c00      	cmp	r4, #0
    4d92:	d122      	bne.n	4dda <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4d94:	035b      	lsls	r3, r3, #13
    4d96:	d51c      	bpl.n	4dd2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4d98:	7893      	ldrb	r3, [r2, #2]
    4d9a:	2b01      	cmp	r3, #1
    4d9c:	d01e      	beq.n	4ddc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4d9e:	6141      	str	r1, [r0, #20]
    4da0:	e017      	b.n	4dd2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4da2:	2300      	movs	r3, #0
    4da4:	e7d7      	b.n	4d56 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4da6:	24c0      	movs	r4, #192	; 0xc0
    4da8:	02e4      	lsls	r4, r4, #11
    4daa:	4323      	orrs	r3, r4
    4dac:	e7dd      	b.n	4d6a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4dae:	4c0d      	ldr	r4, [pc, #52]	; (4de4 <_system_pinmux_config+0xa4>)
    4db0:	4023      	ands	r3, r4
    4db2:	e7df      	b.n	4d74 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4db4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4db6:	040c      	lsls	r4, r1, #16
    4db8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4dba:	23a0      	movs	r3, #160	; 0xa0
    4dbc:	05db      	lsls	r3, r3, #23
    4dbe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dc0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4dc2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4dc4:	23d0      	movs	r3, #208	; 0xd0
    4dc6:	061b      	lsls	r3, r3, #24
    4dc8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4dcc:	78d3      	ldrb	r3, [r2, #3]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d103      	bne.n	4dda <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4dd2:	7853      	ldrb	r3, [r2, #1]
    4dd4:	3b01      	subs	r3, #1
    4dd6:	2b01      	cmp	r3, #1
    4dd8:	d902      	bls.n	4de0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4dda:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4ddc:	6181      	str	r1, [r0, #24]
    4dde:	e7f8      	b.n	4dd2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4de0:	6081      	str	r1, [r0, #8]
}
    4de2:	e7fa      	b.n	4dda <_system_pinmux_config+0x9a>
    4de4:	fffbffff 	.word	0xfffbffff

00004de8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4de8:	b510      	push	{r4, lr}
    4dea:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    4dec:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4dee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4df0:	2900      	cmp	r1, #0
    4df2:	d104      	bne.n	4dfe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4df4:	0943      	lsrs	r3, r0, #5
    4df6:	01db      	lsls	r3, r3, #7
    4df8:	4905      	ldr	r1, [pc, #20]	; (4e10 <system_pinmux_pin_set_config+0x28>)
    4dfa:	468c      	mov	ip, r1
    4dfc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4dfe:	241f      	movs	r4, #31
    4e00:	4020      	ands	r0, r4
    4e02:	2101      	movs	r1, #1
    4e04:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4e06:	0018      	movs	r0, r3
    4e08:	4b02      	ldr	r3, [pc, #8]	; (4e14 <system_pinmux_pin_set_config+0x2c>)
    4e0a:	4798      	blx	r3
}
    4e0c:	bd10      	pop	{r4, pc}
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	40002800 	.word	0x40002800
    4e14:	00004d41 	.word	0x00004d41

00004e18 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4e18:	4770      	bx	lr
	...

00004e1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4e1c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4e1e:	4b05      	ldr	r3, [pc, #20]	; (4e34 <system_init+0x18>)
    4e20:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4e22:	4b05      	ldr	r3, [pc, #20]	; (4e38 <system_init+0x1c>)
    4e24:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4e26:	4b05      	ldr	r3, [pc, #20]	; (4e3c <system_init+0x20>)
    4e28:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4e2a:	4b05      	ldr	r3, [pc, #20]	; (4e40 <system_init+0x24>)
    4e2c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4e2e:	4b05      	ldr	r3, [pc, #20]	; (4e44 <system_init+0x28>)
    4e30:	4798      	blx	r3
}
    4e32:	bd10      	pop	{r4, pc}
    4e34:	000048cd 	.word	0x000048cd
    4e38:	00002a85 	.word	0x00002a85
    4e3c:	00004e19 	.word	0x00004e19
    4e40:	00002e39 	.word	0x00002e39
    4e44:	00004e19 	.word	0x00004e19

00004e48 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4e48:	1c93      	adds	r3, r2, #2
    4e4a:	009b      	lsls	r3, r3, #2
    4e4c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    4e4e:	2a02      	cmp	r2, #2
    4e50:	d009      	beq.n	4e66 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4e52:	2a03      	cmp	r2, #3
    4e54:	d00c      	beq.n	4e70 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4e56:	2301      	movs	r3, #1
    4e58:	4093      	lsls	r3, r2
    4e5a:	001a      	movs	r2, r3
    4e5c:	7e03      	ldrb	r3, [r0, #24]
    4e5e:	4313      	orrs	r3, r2
    4e60:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    4e62:	2000      	movs	r0, #0
    4e64:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    4e66:	7e03      	ldrb	r3, [r0, #24]
    4e68:	2210      	movs	r2, #16
    4e6a:	4313      	orrs	r3, r2
    4e6c:	7603      	strb	r3, [r0, #24]
    4e6e:	e7f8      	b.n	4e62 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    4e70:	7e03      	ldrb	r3, [r0, #24]
    4e72:	2220      	movs	r2, #32
    4e74:	4313      	orrs	r3, r2
    4e76:	7603      	strb	r3, [r0, #24]
    4e78:	e7f3      	b.n	4e62 <tc_register_callback+0x1a>
	...

00004e7c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4e7c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4e7e:	0080      	lsls	r0, r0, #2
    4e80:	4b16      	ldr	r3, [pc, #88]	; (4edc <_tc_interrupt_handler+0x60>)
    4e82:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4e84:	6823      	ldr	r3, [r4, #0]
    4e86:	7a9d      	ldrb	r5, [r3, #10]
    4e88:	7e22      	ldrb	r2, [r4, #24]
    4e8a:	7e63      	ldrb	r3, [r4, #25]
    4e8c:	4013      	ands	r3, r2
    4e8e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4e90:	07eb      	lsls	r3, r5, #31
    4e92:	d406      	bmi.n	4ea2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4e94:	07ab      	lsls	r3, r5, #30
    4e96:	d40b      	bmi.n	4eb0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4e98:	06eb      	lsls	r3, r5, #27
    4e9a:	d410      	bmi.n	4ebe <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4e9c:	06ab      	lsls	r3, r5, #26
    4e9e:	d415      	bmi.n	4ecc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4ea0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4ea2:	0020      	movs	r0, r4
    4ea4:	68a3      	ldr	r3, [r4, #8]
    4ea6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4ea8:	2301      	movs	r3, #1
    4eaa:	6822      	ldr	r2, [r4, #0]
    4eac:	7293      	strb	r3, [r2, #10]
    4eae:	e7f1      	b.n	4e94 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4eb0:	0020      	movs	r0, r4
    4eb2:	68e3      	ldr	r3, [r4, #12]
    4eb4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4eb6:	2302      	movs	r3, #2
    4eb8:	6822      	ldr	r2, [r4, #0]
    4eba:	7293      	strb	r3, [r2, #10]
    4ebc:	e7ec      	b.n	4e98 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4ebe:	0020      	movs	r0, r4
    4ec0:	6923      	ldr	r3, [r4, #16]
    4ec2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4ec4:	2310      	movs	r3, #16
    4ec6:	6822      	ldr	r2, [r4, #0]
    4ec8:	7293      	strb	r3, [r2, #10]
    4eca:	e7e7      	b.n	4e9c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4ecc:	0020      	movs	r0, r4
    4ece:	6963      	ldr	r3, [r4, #20]
    4ed0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4ed2:	6823      	ldr	r3, [r4, #0]
    4ed4:	2220      	movs	r2, #32
    4ed6:	729a      	strb	r2, [r3, #10]
}
    4ed8:	e7e2      	b.n	4ea0 <_tc_interrupt_handler+0x24>
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	20002090 	.word	0x20002090

00004ee0 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4ee0:	b510      	push	{r4, lr}
    4ee2:	2000      	movs	r0, #0
    4ee4:	4b01      	ldr	r3, [pc, #4]	; (4eec <TC0_Handler+0xc>)
    4ee6:	4798      	blx	r3
    4ee8:	bd10      	pop	{r4, pc}
    4eea:	46c0      	nop			; (mov r8, r8)
    4eec:	00004e7d 	.word	0x00004e7d

00004ef0 <TC1_Handler>:
    4ef0:	b510      	push	{r4, lr}
    4ef2:	2001      	movs	r0, #1
    4ef4:	4b01      	ldr	r3, [pc, #4]	; (4efc <TC1_Handler+0xc>)
    4ef6:	4798      	blx	r3
    4ef8:	bd10      	pop	{r4, pc}
    4efa:	46c0      	nop			; (mov r8, r8)
    4efc:	00004e7d 	.word	0x00004e7d

00004f00 <TC2_Handler>:
    4f00:	b510      	push	{r4, lr}
    4f02:	2002      	movs	r0, #2
    4f04:	4b01      	ldr	r3, [pc, #4]	; (4f0c <TC2_Handler+0xc>)
    4f06:	4798      	blx	r3
    4f08:	bd10      	pop	{r4, pc}
    4f0a:	46c0      	nop			; (mov r8, r8)
    4f0c:	00004e7d 	.word	0x00004e7d

00004f10 <TC3_Handler>:
    4f10:	b510      	push	{r4, lr}
    4f12:	2003      	movs	r0, #3
    4f14:	4b01      	ldr	r3, [pc, #4]	; (4f1c <TC3_Handler+0xc>)
    4f16:	4798      	blx	r3
    4f18:	bd10      	pop	{r4, pc}
    4f1a:	46c0      	nop			; (mov r8, r8)
    4f1c:	00004e7d 	.word	0x00004e7d

00004f20 <TC4_Handler>:
    4f20:	b510      	push	{r4, lr}
    4f22:	2004      	movs	r0, #4
    4f24:	4b01      	ldr	r3, [pc, #4]	; (4f2c <TC4_Handler+0xc>)
    4f26:	4798      	blx	r3
    4f28:	bd10      	pop	{r4, pc}
    4f2a:	46c0      	nop			; (mov r8, r8)
    4f2c:	00004e7d 	.word	0x00004e7d

00004f30 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4f30:	b530      	push	{r4, r5, lr}
    4f32:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4f34:	a901      	add	r1, sp, #4
    4f36:	4b0c      	ldr	r3, [pc, #48]	; (4f68 <_tc_get_inst_index+0x38>)
    4f38:	000a      	movs	r2, r1
    4f3a:	cb32      	ldmia	r3!, {r1, r4, r5}
    4f3c:	c232      	stmia	r2!, {r1, r4, r5}
    4f3e:	cb12      	ldmia	r3!, {r1, r4}
    4f40:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    4f42:	9b01      	ldr	r3, [sp, #4]
    4f44:	4298      	cmp	r0, r3
    4f46:	d00b      	beq.n	4f60 <_tc_get_inst_index+0x30>
    4f48:	2301      	movs	r3, #1
    4f4a:	a901      	add	r1, sp, #4
    4f4c:	009a      	lsls	r2, r3, #2
    4f4e:	5852      	ldr	r2, [r2, r1]
    4f50:	4282      	cmp	r2, r0
    4f52:	d006      	beq.n	4f62 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4f54:	3301      	adds	r3, #1
    4f56:	2b05      	cmp	r3, #5
    4f58:	d1f8      	bne.n	4f4c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4f5a:	2000      	movs	r0, #0
}
    4f5c:	b007      	add	sp, #28
    4f5e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4f60:	2300      	movs	r3, #0
			return i;
    4f62:	b2d8      	uxtb	r0, r3
    4f64:	e7fa      	b.n	4f5c <_tc_get_inst_index+0x2c>
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	0001d8e8 	.word	0x0001d8e8

00004f6c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6e:	46c6      	mov	lr, r8
    4f70:	b500      	push	{lr}
    4f72:	b08e      	sub	sp, #56	; 0x38
    4f74:	0004      	movs	r4, r0
    4f76:	000d      	movs	r5, r1
    4f78:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4f7a:	0008      	movs	r0, r1
    4f7c:	4bae      	ldr	r3, [pc, #696]	; (5238 <tc_init+0x2cc>)
    4f7e:	4798      	blx	r3
    4f80:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    4f82:	ab0c      	add	r3, sp, #48	; 0x30
    4f84:	221b      	movs	r2, #27
    4f86:	701a      	strb	r2, [r3, #0]
    4f88:	705a      	strb	r2, [r3, #1]
    4f8a:	3201      	adds	r2, #1
    4f8c:	709a      	strb	r2, [r3, #2]
    4f8e:	70da      	strb	r2, [r3, #3]
    4f90:	3201      	adds	r2, #1
    4f92:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    4f94:	a902      	add	r1, sp, #8
    4f96:	4ba9      	ldr	r3, [pc, #676]	; (523c <tc_init+0x2d0>)
    4f98:	3314      	adds	r3, #20
    4f9a:	000a      	movs	r2, r1
    4f9c:	cb83      	ldmia	r3!, {r0, r1, r7}
    4f9e:	c283      	stmia	r2!, {r0, r1, r7}
    4fa0:	cb83      	ldmia	r3!, {r0, r1, r7}
    4fa2:	c283      	stmia	r2!, {r0, r1, r7}
    4fa4:	cb83      	ldmia	r3!, {r0, r1, r7}
    4fa6:	c283      	stmia	r2!, {r0, r1, r7}
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    4fac:	2300      	movs	r3, #0
    4fae:	60a3      	str	r3, [r4, #8]
    4fb0:	60e3      	str	r3, [r4, #12]
    4fb2:	6123      	str	r3, [r4, #16]
    4fb4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4fb6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    4fb8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    4fba:	4643      	mov	r3, r8
    4fbc:	009a      	lsls	r2, r3, #2
    4fbe:	4ba0      	ldr	r3, [pc, #640]	; (5240 <tc_init+0x2d4>)
    4fc0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4fc2:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    4fc4:	2334      	movs	r3, #52	; 0x34
    4fc6:	5cf3      	ldrb	r3, [r6, r3]
    4fc8:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4fca:	78f3      	ldrb	r3, [r6, #3]
    4fcc:	2b08      	cmp	r3, #8
    4fce:	d008      	beq.n	4fe2 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    4fd0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4fd2:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    4fd4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4fd6:	07db      	lsls	r3, r3, #31
    4fd8:	d508      	bpl.n	4fec <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    4fda:	b00e      	add	sp, #56	; 0x38
    4fdc:	bc04      	pop	{r2}
    4fde:	4690      	mov	r8, r2
    4fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4fe2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4fe4:	4642      	mov	r2, r8
    4fe6:	07d2      	lsls	r2, r2, #31
    4fe8:	d4f7      	bmi.n	4fda <tc_init+0x6e>
    4fea:	e7f1      	b.n	4fd0 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4fec:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    4fee:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4ff0:	079b      	lsls	r3, r3, #30
    4ff2:	d4f2      	bmi.n	4fda <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4ff4:	682b      	ldr	r3, [r5, #0]
    4ff6:	079b      	lsls	r3, r3, #30
    4ff8:	d4ef      	bmi.n	4fda <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    4ffa:	7c33      	ldrb	r3, [r6, #16]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d112      	bne.n	5026 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    5000:	7f33      	ldrb	r3, [r6, #28]
    5002:	2b00      	cmp	r3, #0
    5004:	d11b      	bne.n	503e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    5006:	4643      	mov	r3, r8
    5008:	005a      	lsls	r2, r3, #1
    500a:	a902      	add	r1, sp, #8
    500c:	1c53      	adds	r3, r2, #1
    500e:	009b      	lsls	r3, r3, #2
    5010:	5858      	ldr	r0, [r3, r1]
    5012:	4643      	mov	r3, r8
    5014:	00db      	lsls	r3, r3, #3
    5016:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    5018:	b2d9      	uxtb	r1, r3
    501a:	2904      	cmp	r1, #4
    501c:	d823      	bhi.n	5066 <tc_init+0xfa>
    501e:	008b      	lsls	r3, r1, #2
    5020:	4988      	ldr	r1, [pc, #544]	; (5244 <tc_init+0x2d8>)
    5022:	58cb      	ldr	r3, [r1, r3]
    5024:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5026:	a901      	add	r1, sp, #4
    5028:	2301      	movs	r3, #1
    502a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    502c:	2200      	movs	r2, #0
    502e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    5030:	7e32      	ldrb	r2, [r6, #24]
    5032:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5034:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5036:	7d30      	ldrb	r0, [r6, #20]
    5038:	4b83      	ldr	r3, [pc, #524]	; (5248 <tc_init+0x2dc>)
    503a:	4798      	blx	r3
    503c:	e7e0      	b.n	5000 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    503e:	a901      	add	r1, sp, #4
    5040:	2301      	movs	r3, #1
    5042:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5044:	2200      	movs	r2, #0
    5046:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5048:	3224      	adds	r2, #36	; 0x24
    504a:	18b2      	adds	r2, r6, r2
    504c:	7812      	ldrb	r2, [r2, #0]
    504e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5050:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5052:	331f      	adds	r3, #31
    5054:	18f3      	adds	r3, r6, r3
    5056:	7818      	ldrb	r0, [r3, #0]
    5058:	4b7b      	ldr	r3, [pc, #492]	; (5248 <tc_init+0x2dc>)
    505a:	4798      	blx	r3
    505c:	e7d3      	b.n	5006 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    505e:	497b      	ldr	r1, [pc, #492]	; (524c <tc_init+0x2e0>)
    5060:	694b      	ldr	r3, [r1, #20]
    5062:	4318      	orrs	r0, r3
    5064:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5066:	78f3      	ldrb	r3, [r6, #3]
    5068:	2b08      	cmp	r3, #8
    506a:	d100      	bne.n	506e <tc_init+0x102>
    506c:	e086      	b.n	517c <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    506e:	7833      	ldrb	r3, [r6, #0]
    5070:	466a      	mov	r2, sp
    5072:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5074:	ab0c      	add	r3, sp, #48	; 0x30
    5076:	4642      	mov	r2, r8
    5078:	5c9f      	ldrb	r7, [r3, r2]
    507a:	4669      	mov	r1, sp
    507c:	0038      	movs	r0, r7
    507e:	4b74      	ldr	r3, [pc, #464]	; (5250 <tc_init+0x2e4>)
    5080:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5082:	0038      	movs	r0, r7
    5084:	4b73      	ldr	r3, [pc, #460]	; (5254 <tc_init+0x2e8>)
    5086:	4798      	blx	r3
			(uint32_t)config->counter_size |
    5088:	78f3      	ldrb	r3, [r6, #3]
    508a:	79f2      	ldrb	r2, [r6, #7]
    508c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    508e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    5090:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    5092:	7a72      	ldrb	r2, [r6, #9]
    5094:	2a00      	cmp	r2, #0
    5096:	d002      	beq.n	509e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    5098:	2280      	movs	r2, #128	; 0x80
    509a:	0252      	lsls	r2, r2, #9
    509c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    509e:	7ab2      	ldrb	r2, [r6, #10]
    50a0:	2a00      	cmp	r2, #0
    50a2:	d002      	beq.n	50aa <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    50a4:	2280      	movs	r2, #128	; 0x80
    50a6:	0292      	lsls	r2, r2, #10
    50a8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    50aa:	7af2      	ldrb	r2, [r6, #11]
    50ac:	2a00      	cmp	r2, #0
    50ae:	d002      	beq.n	50b6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    50b0:	2280      	movs	r2, #128	; 0x80
    50b2:	0352      	lsls	r2, r2, #13
    50b4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    50b6:	7b32      	ldrb	r2, [r6, #12]
    50b8:	2a00      	cmp	r2, #0
    50ba:	d002      	beq.n	50c2 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    50bc:	2280      	movs	r2, #128	; 0x80
    50be:	0392      	lsls	r2, r2, #14
    50c0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    50c2:	7871      	ldrb	r1, [r6, #1]
    50c4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    50c6:	78b2      	ldrb	r2, [r6, #2]
    50c8:	01d2      	lsls	r2, r2, #7
    50ca:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    50cc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    50ce:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    50d0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    50d2:	2b00      	cmp	r3, #0
    50d4:	d1fc      	bne.n	50d0 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    50d6:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    50d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    50da:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    50dc:	2b00      	cmp	r3, #0
    50de:	d1fc      	bne.n	50da <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    50e0:	79b3      	ldrb	r3, [r6, #6]
    50e2:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    50e4:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    50e6:	1e4b      	subs	r3, r1, #1
    50e8:	4199      	sbcs	r1, r3
    50ea:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    50ec:	7bb3      	ldrb	r3, [r6, #14]
    50ee:	2b00      	cmp	r3, #0
    50f0:	d001      	beq.n	50f6 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    50f2:	2301      	movs	r3, #1
    50f4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    50f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    50f8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    50fa:	2b00      	cmp	r3, #0
    50fc:	d1fc      	bne.n	50f8 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    50fe:	33ff      	adds	r3, #255	; 0xff
    5100:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    5102:	2900      	cmp	r1, #0
    5104:	d004      	beq.n	5110 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5106:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5108:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    510a:	2b00      	cmp	r3, #0
    510c:	d1fc      	bne.n	5108 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    510e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    5110:	7a33      	ldrb	r3, [r6, #8]
    5112:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5114:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5116:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5118:	2b00      	cmp	r3, #0
    511a:	d1fc      	bne.n	5116 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    511c:	7923      	ldrb	r3, [r4, #4]
    511e:	2b04      	cmp	r3, #4
    5120:	d059      	beq.n	51d6 <tc_init+0x26a>
    5122:	2b08      	cmp	r3, #8
    5124:	d074      	beq.n	5210 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    5126:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    5128:	2b00      	cmp	r3, #0
    512a:	d000      	beq.n	512e <tc_init+0x1c2>
    512c:	e755      	b.n	4fda <tc_init+0x6e>
    512e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5130:	2b00      	cmp	r3, #0
    5132:	d1fc      	bne.n	512e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    5134:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    5136:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5138:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    513a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    513c:	2b00      	cmp	r3, #0
    513e:	d1fc      	bne.n	513a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    5140:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5142:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5144:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5146:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5148:	2b00      	cmp	r3, #0
    514a:	d1fc      	bne.n	5146 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    514c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    514e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    5150:	2000      	movs	r0, #0
    5152:	e742      	b.n	4fda <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    5154:	493d      	ldr	r1, [pc, #244]	; (524c <tc_init+0x2e0>)
    5156:	698b      	ldr	r3, [r1, #24]
    5158:	4318      	orrs	r0, r3
    515a:	6188      	str	r0, [r1, #24]
    515c:	e783      	b.n	5066 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    515e:	493b      	ldr	r1, [pc, #236]	; (524c <tc_init+0x2e0>)
    5160:	69cb      	ldr	r3, [r1, #28]
    5162:	4318      	orrs	r0, r3
    5164:	61c8      	str	r0, [r1, #28]
    5166:	e77e      	b.n	5066 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    5168:	4938      	ldr	r1, [pc, #224]	; (524c <tc_init+0x2e0>)
    516a:	6a0b      	ldr	r3, [r1, #32]
    516c:	4318      	orrs	r0, r3
    516e:	6208      	str	r0, [r1, #32]
    5170:	e779      	b.n	5066 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    5172:	4b36      	ldr	r3, [pc, #216]	; (524c <tc_init+0x2e0>)
    5174:	6a59      	ldr	r1, [r3, #36]	; 0x24
    5176:	4308      	orrs	r0, r1
    5178:	6258      	str	r0, [r3, #36]	; 0x24
    517a:	e774      	b.n	5066 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    517c:	4643      	mov	r3, r8
    517e:	3301      	adds	r3, #1
    5180:	2b04      	cmp	r3, #4
    5182:	dd00      	ble.n	5186 <tc_init+0x21a>
    5184:	e773      	b.n	506e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    5186:	ab02      	add	r3, sp, #8
    5188:	1cd1      	adds	r1, r2, #3
    518a:	0089      	lsls	r1, r1, #2
    518c:	58c9      	ldr	r1, [r1, r3]
    518e:	3202      	adds	r2, #2
    5190:	0092      	lsls	r2, r2, #2
    5192:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    5194:	b2da      	uxtb	r2, r3
    5196:	2a04      	cmp	r2, #4
    5198:	d900      	bls.n	519c <tc_init+0x230>
    519a:	e768      	b.n	506e <tc_init+0x102>
    519c:	0093      	lsls	r3, r2, #2
    519e:	4a2e      	ldr	r2, [pc, #184]	; (5258 <tc_init+0x2ec>)
    51a0:	58d3      	ldr	r3, [r2, r3]
    51a2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    51a4:	4a29      	ldr	r2, [pc, #164]	; (524c <tc_init+0x2e0>)
    51a6:	6953      	ldr	r3, [r2, #20]
    51a8:	4319      	orrs	r1, r3
    51aa:	6151      	str	r1, [r2, #20]
    51ac:	e75f      	b.n	506e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    51ae:	4a27      	ldr	r2, [pc, #156]	; (524c <tc_init+0x2e0>)
    51b0:	6993      	ldr	r3, [r2, #24]
    51b2:	4319      	orrs	r1, r3
    51b4:	6191      	str	r1, [r2, #24]
    51b6:	e75a      	b.n	506e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    51b8:	4a24      	ldr	r2, [pc, #144]	; (524c <tc_init+0x2e0>)
    51ba:	69d3      	ldr	r3, [r2, #28]
    51bc:	4319      	orrs	r1, r3
    51be:	61d1      	str	r1, [r2, #28]
    51c0:	e755      	b.n	506e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    51c2:	4a22      	ldr	r2, [pc, #136]	; (524c <tc_init+0x2e0>)
    51c4:	6a13      	ldr	r3, [r2, #32]
    51c6:	4319      	orrs	r1, r3
    51c8:	6211      	str	r1, [r2, #32]
    51ca:	e750      	b.n	506e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    51cc:	4b1f      	ldr	r3, [pc, #124]	; (524c <tc_init+0x2e0>)
    51ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    51d0:	4311      	orrs	r1, r2
    51d2:	6259      	str	r1, [r3, #36]	; 0x24
    51d4:	e74b      	b.n	506e <tc_init+0x102>
    51d6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    51d8:	2b00      	cmp	r3, #0
    51da:	d1fc      	bne.n	51d6 <tc_init+0x26a>
					config->counter_8_bit.value;
    51dc:	3328      	adds	r3, #40	; 0x28
    51de:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    51e0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    51e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    51e4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    51e6:	2b00      	cmp	r3, #0
    51e8:	d1fc      	bne.n	51e4 <tc_init+0x278>
					config->counter_8_bit.period;
    51ea:	3329      	adds	r3, #41	; 0x29
    51ec:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    51ee:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    51f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    51f2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    51f4:	2b00      	cmp	r3, #0
    51f6:	d1fc      	bne.n	51f2 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    51f8:	332a      	adds	r3, #42	; 0x2a
    51fa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    51fc:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    51fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5200:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5202:	2b00      	cmp	r3, #0
    5204:	d1fc      	bne.n	5200 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    5206:	332b      	adds	r3, #43	; 0x2b
    5208:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    520a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    520c:	2000      	movs	r0, #0
    520e:	e6e4      	b.n	4fda <tc_init+0x6e>
    5210:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5212:	2b00      	cmp	r3, #0
    5214:	d1fc      	bne.n	5210 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    5216:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5218:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    521a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    521c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    521e:	2b00      	cmp	r3, #0
    5220:	d1fc      	bne.n	521c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    5222:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5224:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5226:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5228:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    522a:	2b00      	cmp	r3, #0
    522c:	d1fc      	bne.n	5228 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    522e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5230:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    5232:	2000      	movs	r0, #0
    5234:	e6d1      	b.n	4fda <tc_init+0x6e>
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	00004f31 	.word	0x00004f31
    523c:	0001d8e8 	.word	0x0001d8e8
    5240:	20002090 	.word	0x20002090
    5244:	0001d8c0 	.word	0x0001d8c0
    5248:	00004de9 	.word	0x00004de9
    524c:	40000400 	.word	0x40000400
    5250:	00004ced 	.word	0x00004ced
    5254:	00004c7d 	.word	0x00004c7d
    5258:	0001d8d4 	.word	0x0001d8d4

0000525c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    525c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    525e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5260:	2b00      	cmp	r3, #0
    5262:	d1fc      	bne.n	525e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    5264:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5266:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5268:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    526a:	2b00      	cmp	r3, #0
    526c:	d1fc      	bne.n	5268 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    526e:	3380      	adds	r3, #128	; 0x80
    5270:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5272:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5274:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5276:	2b00      	cmp	r3, #0
    5278:	d1fc      	bne.n	5274 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    527a:	7903      	ldrb	r3, [r0, #4]
    527c:	2b04      	cmp	r3, #4
    527e:	d005      	beq.n	528c <tc_get_count_value+0x30>
    5280:	2b08      	cmp	r3, #8
    5282:	d009      	beq.n	5298 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    5284:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    5286:	2b00      	cmp	r3, #0
    5288:	d003      	beq.n	5292 <tc_get_count_value+0x36>
}
    528a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    528c:	7d10      	ldrb	r0, [r2, #20]
    528e:	b2c0      	uxtb	r0, r0
    5290:	e7fb      	b.n	528a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5292:	8a90      	ldrh	r0, [r2, #20]
    5294:	b280      	uxth	r0, r0
    5296:	e7f8      	b.n	528a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    5298:	6950      	ldr	r0, [r2, #20]
    529a:	e7f6      	b.n	528a <tc_get_count_value+0x2e>

0000529c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    529c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    529e:	6804      	ldr	r4, [r0, #0]
    52a0:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    52a2:	2b00      	cmp	r3, #0
    52a4:	d1fc      	bne.n	52a0 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    52a6:	7903      	ldrb	r3, [r0, #4]
    52a8:	2b04      	cmp	r3, #4
    52aa:	d006      	beq.n	52ba <tc_set_compare_value+0x1e>
    52ac:	2b08      	cmp	r3, #8
    52ae:	d028      	beq.n	5302 <tc_set_compare_value+0x66>
    52b0:	2b00      	cmp	r3, #0
    52b2:	d013      	beq.n	52dc <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    52b4:	2317      	movs	r3, #23
}
    52b6:	0018      	movs	r0, r3
    52b8:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    52ba:	2317      	movs	r3, #23
			if (channel_index <
    52bc:	2901      	cmp	r1, #1
    52be:	d8fa      	bhi.n	52b6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    52c0:	7e83      	ldrb	r3, [r0, #26]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d005      	beq.n	52d2 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    52c6:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    52c8:	1861      	adds	r1, r4, r1
    52ca:	3130      	adds	r1, #48	; 0x30
    52cc:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    52ce:	2300      	movs	r3, #0
    52d0:	e7f1      	b.n	52b6 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    52d2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    52d4:	1864      	adds	r4, r4, r1
    52d6:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    52d8:	2300      	movs	r3, #0
    52da:	e7ec      	b.n	52b6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    52dc:	2317      	movs	r3, #23
			if (channel_index <
    52de:	2901      	cmp	r1, #1
    52e0:	d8e9      	bhi.n	52b6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    52e2:	7e83      	ldrb	r3, [r0, #26]
    52e4:	2b00      	cmp	r3, #0
    52e6:	d005      	beq.n	52f4 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    52e8:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    52ea:	3118      	adds	r1, #24
    52ec:	0049      	lsls	r1, r1, #1
    52ee:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    52f0:	2300      	movs	r3, #0
    52f2:	e7e0      	b.n	52b6 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    52f4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    52f6:	310c      	adds	r1, #12
    52f8:	0049      	lsls	r1, r1, #1
    52fa:	1864      	adds	r4, r4, r1
    52fc:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    52fe:	2300      	movs	r3, #0
    5300:	e7d9      	b.n	52b6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    5302:	2317      	movs	r3, #23
			if (channel_index <
    5304:	2901      	cmp	r1, #1
    5306:	d8d6      	bhi.n	52b6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5308:	7e83      	ldrb	r3, [r0, #26]
    530a:	2b00      	cmp	r3, #0
    530c:	d105      	bne.n	531a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    530e:	3106      	adds	r1, #6
    5310:	0089      	lsls	r1, r1, #2
    5312:	1864      	adds	r4, r4, r1
    5314:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    5316:	2300      	movs	r3, #0
    5318:	e7cd      	b.n	52b6 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    531a:	310c      	adds	r1, #12
    531c:	0089      	lsls	r1, r1, #2
    531e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    5320:	2300      	movs	r3, #0
    5322:	e7c8      	b.n	52b6 <tc_set_compare_value+0x1a>

00005324 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5324:	e7fe      	b.n	5324 <Dummy_Handler>
	...

00005328 <Reset_Handler>:
{
    5328:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    532a:	4a1a      	ldr	r2, [pc, #104]	; (5394 <Reset_Handler+0x6c>)
    532c:	4b1a      	ldr	r3, [pc, #104]	; (5398 <Reset_Handler+0x70>)
    532e:	429a      	cmp	r2, r3
    5330:	d011      	beq.n	5356 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5332:	001a      	movs	r2, r3
    5334:	4b19      	ldr	r3, [pc, #100]	; (539c <Reset_Handler+0x74>)
    5336:	429a      	cmp	r2, r3
    5338:	d20d      	bcs.n	5356 <Reset_Handler+0x2e>
    533a:	4a19      	ldr	r2, [pc, #100]	; (53a0 <Reset_Handler+0x78>)
    533c:	3303      	adds	r3, #3
    533e:	1a9b      	subs	r3, r3, r2
    5340:	089b      	lsrs	r3, r3, #2
    5342:	3301      	adds	r3, #1
    5344:	009b      	lsls	r3, r3, #2
    5346:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5348:	4813      	ldr	r0, [pc, #76]	; (5398 <Reset_Handler+0x70>)
    534a:	4912      	ldr	r1, [pc, #72]	; (5394 <Reset_Handler+0x6c>)
    534c:	588c      	ldr	r4, [r1, r2]
    534e:	5084      	str	r4, [r0, r2]
    5350:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5352:	429a      	cmp	r2, r3
    5354:	d1fa      	bne.n	534c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5356:	4a13      	ldr	r2, [pc, #76]	; (53a4 <Reset_Handler+0x7c>)
    5358:	4b13      	ldr	r3, [pc, #76]	; (53a8 <Reset_Handler+0x80>)
    535a:	429a      	cmp	r2, r3
    535c:	d20a      	bcs.n	5374 <Reset_Handler+0x4c>
    535e:	43d3      	mvns	r3, r2
    5360:	4911      	ldr	r1, [pc, #68]	; (53a8 <Reset_Handler+0x80>)
    5362:	185b      	adds	r3, r3, r1
    5364:	2103      	movs	r1, #3
    5366:	438b      	bics	r3, r1
    5368:	3304      	adds	r3, #4
    536a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    536c:	2100      	movs	r1, #0
    536e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5370:	4293      	cmp	r3, r2
    5372:	d1fc      	bne.n	536e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5374:	4a0d      	ldr	r2, [pc, #52]	; (53ac <Reset_Handler+0x84>)
    5376:	21ff      	movs	r1, #255	; 0xff
    5378:	4b0d      	ldr	r3, [pc, #52]	; (53b0 <Reset_Handler+0x88>)
    537a:	438b      	bics	r3, r1
    537c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    537e:	4a0d      	ldr	r2, [pc, #52]	; (53b4 <Reset_Handler+0x8c>)
    5380:	6853      	ldr	r3, [r2, #4]
    5382:	397f      	subs	r1, #127	; 0x7f
    5384:	430b      	orrs	r3, r1
    5386:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5388:	4b0b      	ldr	r3, [pc, #44]	; (53b8 <Reset_Handler+0x90>)
    538a:	4798      	blx	r3
        main();
    538c:	4b0b      	ldr	r3, [pc, #44]	; (53bc <Reset_Handler+0x94>)
    538e:	4798      	blx	r3
    5390:	e7fe      	b.n	5390 <Reset_Handler+0x68>
    5392:	46c0      	nop			; (mov r8, r8)
    5394:	0001e658 	.word	0x0001e658
    5398:	20000000 	.word	0x20000000
    539c:	200009c8 	.word	0x200009c8
    53a0:	20000004 	.word	0x20000004
    53a4:	200009c8 	.word	0x200009c8
    53a8:	20002e44 	.word	0x20002e44
    53ac:	e000ed00 	.word	0xe000ed00
    53b0:	00000000 	.word	0x00000000
    53b4:	41004000 	.word	0x41004000
    53b8:	000175a1 	.word	0x000175a1
    53bc:	0000d7a9 	.word	0x0000d7a9

000053c0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	46c6      	mov	lr, r8
    53c4:	b500      	push	{lr}
    53c6:	000c      	movs	r4, r1
    53c8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    53ca:	2800      	cmp	r0, #0
    53cc:	d10f      	bne.n	53ee <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    53ce:	2a00      	cmp	r2, #0
    53d0:	dd11      	ble.n	53f6 <_read+0x36>
    53d2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    53d4:	4e09      	ldr	r6, [pc, #36]	; (53fc <_read+0x3c>)
    53d6:	4d0a      	ldr	r5, [pc, #40]	; (5400 <_read+0x40>)
    53d8:	6830      	ldr	r0, [r6, #0]
    53da:	0021      	movs	r1, r4
    53dc:	682b      	ldr	r3, [r5, #0]
    53de:	4798      	blx	r3
		ptr++;
    53e0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    53e2:	42bc      	cmp	r4, r7
    53e4:	d1f8      	bne.n	53d8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    53e6:	4640      	mov	r0, r8
    53e8:	bc04      	pop	{r2}
    53ea:	4690      	mov	r8, r2
    53ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    53ee:	2301      	movs	r3, #1
    53f0:	425b      	negs	r3, r3
    53f2:	4698      	mov	r8, r3
    53f4:	e7f7      	b.n	53e6 <_read+0x26>
	for (; len > 0; --len) {
    53f6:	4680      	mov	r8, r0
    53f8:	e7f5      	b.n	53e6 <_read+0x26>
    53fa:	46c0      	nop			; (mov r8, r8)
    53fc:	200020ac 	.word	0x200020ac
    5400:	200020a4 	.word	0x200020a4

00005404 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5404:	b5f0      	push	{r4, r5, r6, r7, lr}
    5406:	46c6      	mov	lr, r8
    5408:	b500      	push	{lr}
    540a:	000e      	movs	r6, r1
    540c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    540e:	3801      	subs	r0, #1
    5410:	2802      	cmp	r0, #2
    5412:	d810      	bhi.n	5436 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5414:	2a00      	cmp	r2, #0
    5416:	d011      	beq.n	543c <_write+0x38>
    5418:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    541a:	4b0c      	ldr	r3, [pc, #48]	; (544c <_write+0x48>)
    541c:	4698      	mov	r8, r3
    541e:	4f0c      	ldr	r7, [pc, #48]	; (5450 <_write+0x4c>)
    5420:	4643      	mov	r3, r8
    5422:	6818      	ldr	r0, [r3, #0]
    5424:	5d31      	ldrb	r1, [r6, r4]
    5426:	683b      	ldr	r3, [r7, #0]
    5428:	4798      	blx	r3
    542a:	2800      	cmp	r0, #0
    542c:	db08      	blt.n	5440 <_write+0x3c>
			return -1;
		}
		++nChars;
    542e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    5430:	42a5      	cmp	r5, r4
    5432:	d1f5      	bne.n	5420 <_write+0x1c>
    5434:	e006      	b.n	5444 <_write+0x40>
		return -1;
    5436:	2401      	movs	r4, #1
    5438:	4264      	negs	r4, r4
    543a:	e003      	b.n	5444 <_write+0x40>
	for (; len != 0; --len) {
    543c:	0014      	movs	r4, r2
    543e:	e001      	b.n	5444 <_write+0x40>
			return -1;
    5440:	2401      	movs	r4, #1
    5442:	4264      	negs	r4, r4
	}
	return nChars;
}
    5444:	0020      	movs	r0, r4
    5446:	bc04      	pop	{r2}
    5448:	4690      	mov	r8, r2
    544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    544c:	200020ac 	.word	0x200020ac
    5450:	200020a8 	.word	0x200020a8

00005454 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5454:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5456:	4a06      	ldr	r2, [pc, #24]	; (5470 <_sbrk+0x1c>)
    5458:	6812      	ldr	r2, [r2, #0]
    545a:	2a00      	cmp	r2, #0
    545c:	d004      	beq.n	5468 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    545e:	4a04      	ldr	r2, [pc, #16]	; (5470 <_sbrk+0x1c>)
    5460:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5462:	18c3      	adds	r3, r0, r3
    5464:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5466:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5468:	4902      	ldr	r1, [pc, #8]	; (5474 <_sbrk+0x20>)
    546a:	4a01      	ldr	r2, [pc, #4]	; (5470 <_sbrk+0x1c>)
    546c:	6011      	str	r1, [r2, #0]
    546e:	e7f6      	b.n	545e <_sbrk+0xa>
    5470:	20000a2c 	.word	0x20000a2c
    5474:	20004e48 	.word	0x20004e48

00005478 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5478:	2001      	movs	r0, #1
    547a:	4240      	negs	r0, r0
    547c:	4770      	bx	lr

0000547e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    547e:	2380      	movs	r3, #128	; 0x80
    5480:	019b      	lsls	r3, r3, #6
    5482:	604b      	str	r3, [r1, #4]

	return 0;
}
    5484:	2000      	movs	r0, #0
    5486:	4770      	bx	lr

00005488 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5488:	2001      	movs	r0, #1
    548a:	4770      	bx	lr

0000548c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    548c:	2000      	movs	r0, #0
    548e:	4770      	bx	lr

00005490 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	b082      	sub	sp, #8
    5494:	0005      	movs	r5, r0
    5496:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5498:	2200      	movs	r2, #0
    549a:	466b      	mov	r3, sp
    549c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    549e:	4c06      	ldr	r4, [pc, #24]	; (54b8 <usart_serial_getchar+0x28>)
    54a0:	466b      	mov	r3, sp
    54a2:	1d99      	adds	r1, r3, #6
    54a4:	0028      	movs	r0, r5
    54a6:	47a0      	blx	r4
    54a8:	2800      	cmp	r0, #0
    54aa:	d1f9      	bne.n	54a0 <usart_serial_getchar+0x10>

	*c = temp;
    54ac:	466b      	mov	r3, sp
    54ae:	3306      	adds	r3, #6
    54b0:	881b      	ldrh	r3, [r3, #0]
    54b2:	7033      	strb	r3, [r6, #0]
}
    54b4:	b002      	add	sp, #8
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	00004253 	.word	0x00004253

000054bc <usart_serial_putchar>:
{
    54bc:	b570      	push	{r4, r5, r6, lr}
    54be:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    54c0:	b28c      	uxth	r4, r1
    54c2:	4e03      	ldr	r6, [pc, #12]	; (54d0 <usart_serial_putchar+0x14>)
    54c4:	0021      	movs	r1, r4
    54c6:	0028      	movs	r0, r5
    54c8:	47b0      	blx	r6
    54ca:	2800      	cmp	r0, #0
    54cc:	d1fa      	bne.n	54c4 <usart_serial_putchar+0x8>
}
    54ce:	bd70      	pop	{r4, r5, r6, pc}
    54d0:	0000422d 	.word	0x0000422d

000054d4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    54d4:	b510      	push	{r4, lr}
    54d6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    54d8:	466b      	mov	r3, sp
    54da:	1ddc      	adds	r4, r3, #7
    54dc:	2201      	movs	r2, #1
    54de:	0021      	movs	r1, r4
    54e0:	480f      	ldr	r0, [pc, #60]	; (5520 <USART_HOST_ISR_VECT+0x4c>)
    54e2:	4b10      	ldr	r3, [pc, #64]	; (5524 <USART_HOST_ISR_VECT+0x50>)
    54e4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    54e6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    54e8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    54ec:	2200      	movs	r2, #0
    54ee:	4b0e      	ldr	r3, [pc, #56]	; (5528 <USART_HOST_ISR_VECT+0x54>)
    54f0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    54f2:	4b0e      	ldr	r3, [pc, #56]	; (552c <USART_HOST_ISR_VECT+0x58>)
    54f4:	781b      	ldrb	r3, [r3, #0]
    54f6:	7821      	ldrb	r1, [r4, #0]
    54f8:	4a0d      	ldr	r2, [pc, #52]	; (5530 <USART_HOST_ISR_VECT+0x5c>)
    54fa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    54fc:	2b7f      	cmp	r3, #127	; 0x7f
    54fe:	d00a      	beq.n	5516 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    5500:	3301      	adds	r3, #1
    5502:	4a0a      	ldr	r2, [pc, #40]	; (552c <USART_HOST_ISR_VECT+0x58>)
    5504:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    5506:	2201      	movs	r2, #1
    5508:	4b07      	ldr	r3, [pc, #28]	; (5528 <USART_HOST_ISR_VECT+0x54>)
    550a:	701a      	strb	r2, [r3, #0]
    550c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5510:	b662      	cpsie	i
}
    5512:	b002      	add	sp, #8
    5514:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    5516:	2200      	movs	r2, #0
    5518:	4b04      	ldr	r3, [pc, #16]	; (552c <USART_HOST_ISR_VECT+0x58>)
    551a:	701a      	strb	r2, [r3, #0]
    551c:	e7f3      	b.n	5506 <USART_HOST_ISR_VECT+0x32>
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	20000a30 	.word	0x20000a30
    5524:	00004379 	.word	0x00004379
    5528:	20000014 	.word	0x20000014
    552c:	20000ae5 	.word	0x20000ae5
    5530:	20000a64 	.word	0x20000a64

00005534 <sio2host_init>:
{
    5534:	b5f0      	push	{r4, r5, r6, r7, lr}
    5536:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5538:	2380      	movs	r3, #128	; 0x80
    553a:	05db      	lsls	r3, r3, #23
    553c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    553e:	2300      	movs	r3, #0
    5540:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    5542:	22ff      	movs	r2, #255	; 0xff
    5544:	4669      	mov	r1, sp
    5546:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5548:	2200      	movs	r2, #0
    554a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    554c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    554e:	2401      	movs	r4, #1
    5550:	2124      	movs	r1, #36	; 0x24
    5552:	4668      	mov	r0, sp
    5554:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    5556:	3101      	adds	r1, #1
    5558:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    555a:	3101      	adds	r1, #1
    555c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    555e:	3101      	adds	r1, #1
    5560:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    5562:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5564:	3105      	adds	r1, #5
    5566:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5568:	3101      	adds	r1, #1
    556a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    556c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    556e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5570:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5572:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5574:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5576:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    5578:	2313      	movs	r3, #19
    557a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    557c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    557e:	2380      	movs	r3, #128	; 0x80
    5580:	035b      	lsls	r3, r3, #13
    5582:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    5584:	4b2f      	ldr	r3, [pc, #188]	; (5644 <sio2host_init+0x110>)
    5586:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    5588:	4b2f      	ldr	r3, [pc, #188]	; (5648 <sio2host_init+0x114>)
    558a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    558c:	2301      	movs	r3, #1
    558e:	425b      	negs	r3, r3
    5590:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    5592:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    5594:	23e1      	movs	r3, #225	; 0xe1
    5596:	025b      	lsls	r3, r3, #9
    5598:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    559a:	4d2c      	ldr	r5, [pc, #176]	; (564c <sio2host_init+0x118>)
    559c:	4b2c      	ldr	r3, [pc, #176]	; (5650 <sio2host_init+0x11c>)
    559e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    55a0:	4a2c      	ldr	r2, [pc, #176]	; (5654 <sio2host_init+0x120>)
    55a2:	4b2d      	ldr	r3, [pc, #180]	; (5658 <sio2host_init+0x124>)
    55a4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    55a6:	4a2d      	ldr	r2, [pc, #180]	; (565c <sio2host_init+0x128>)
    55a8:	4b2d      	ldr	r3, [pc, #180]	; (5660 <sio2host_init+0x12c>)
    55aa:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    55ac:	466a      	mov	r2, sp
    55ae:	2184      	movs	r1, #132	; 0x84
    55b0:	05c9      	lsls	r1, r1, #23
    55b2:	0028      	movs	r0, r5
    55b4:	4b2b      	ldr	r3, [pc, #172]	; (5664 <sio2host_init+0x130>)
    55b6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    55b8:	4f2b      	ldr	r7, [pc, #172]	; (5668 <sio2host_init+0x134>)
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	6898      	ldr	r0, [r3, #8]
    55be:	2100      	movs	r1, #0
    55c0:	4e2a      	ldr	r6, [pc, #168]	; (566c <sio2host_init+0x138>)
    55c2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    55c4:	683b      	ldr	r3, [r7, #0]
    55c6:	6858      	ldr	r0, [r3, #4]
    55c8:	2100      	movs	r1, #0
    55ca:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    55cc:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    55ce:	0030      	movs	r0, r6
    55d0:	4b27      	ldr	r3, [pc, #156]	; (5670 <sio2host_init+0x13c>)
    55d2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    55d4:	231f      	movs	r3, #31
    55d6:	4018      	ands	r0, r3
    55d8:	4084      	lsls	r4, r0
    55da:	4b26      	ldr	r3, [pc, #152]	; (5674 <sio2host_init+0x140>)
    55dc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    55de:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    55e0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    55e2:	2b00      	cmp	r3, #0
    55e4:	d1fc      	bne.n	55e0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    55e6:	6833      	ldr	r3, [r6, #0]
    55e8:	2202      	movs	r2, #2
    55ea:	4313      	orrs	r3, r2
    55ec:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    55ee:	4b17      	ldr	r3, [pc, #92]	; (564c <sio2host_init+0x118>)
    55f0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    55f2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    55f4:	2a00      	cmp	r2, #0
    55f6:	d1fc      	bne.n	55f2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    55f8:	6859      	ldr	r1, [r3, #4]
    55fa:	2280      	movs	r2, #128	; 0x80
    55fc:	0252      	lsls	r2, r2, #9
    55fe:	430a      	orrs	r2, r1
    5600:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    5602:	2101      	movs	r1, #1
    5604:	4a11      	ldr	r2, [pc, #68]	; (564c <sio2host_init+0x118>)
    5606:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    5608:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    560a:	2a00      	cmp	r2, #0
    560c:	d1fc      	bne.n	5608 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    560e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5610:	2a00      	cmp	r2, #0
    5612:	d1fc      	bne.n	560e <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    5614:	6859      	ldr	r1, [r3, #4]
    5616:	2280      	movs	r2, #128	; 0x80
    5618:	0292      	lsls	r2, r2, #10
    561a:	430a      	orrs	r2, r1
    561c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    561e:	2101      	movs	r1, #1
    5620:	4a0a      	ldr	r2, [pc, #40]	; (564c <sio2host_init+0x118>)
    5622:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    5624:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5626:	2a00      	cmp	r2, #0
    5628:	d1fc      	bne.n	5624 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    562a:	4913      	ldr	r1, [pc, #76]	; (5678 <sio2host_init+0x144>)
    562c:	2000      	movs	r0, #0
    562e:	4b13      	ldr	r3, [pc, #76]	; (567c <sio2host_init+0x148>)
    5630:	4798      	blx	r3
    5632:	2204      	movs	r2, #4
    5634:	2384      	movs	r3, #132	; 0x84
    5636:	05db      	lsls	r3, r3, #23
    5638:	759a      	strb	r2, [r3, #22]
    563a:	32fc      	adds	r2, #252	; 0xfc
    563c:	4b0d      	ldr	r3, [pc, #52]	; (5674 <sio2host_init+0x140>)
    563e:	601a      	str	r2, [r3, #0]
}
    5640:	b011      	add	sp, #68	; 0x44
    5642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5644:	00040003 	.word	0x00040003
    5648:	00050003 	.word	0x00050003
    564c:	20000a30 	.word	0x20000a30
    5650:	200020ac 	.word	0x200020ac
    5654:	000054bd 	.word	0x000054bd
    5658:	200020a8 	.word	0x200020a8
    565c:	00005491 	.word	0x00005491
    5660:	200020a4 	.word	0x200020a4
    5664:	00003ec9 	.word	0x00003ec9
    5668:	20000018 	.word	0x20000018
    566c:	000178c9 	.word	0x000178c9
    5670:	00003a69 	.word	0x00003a69
    5674:	e000e100 	.word	0xe000e100
    5678:	000054d5 	.word	0x000054d5
    567c:	00003a2d 	.word	0x00003a2d

00005680 <sio2host_deinit>:
{
    5680:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    5682:	4d15      	ldr	r5, [pc, #84]	; (56d8 <sio2host_deinit+0x58>)
    5684:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5686:	0020      	movs	r0, r4
    5688:	4b14      	ldr	r3, [pc, #80]	; (56dc <sio2host_deinit+0x5c>)
    568a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    568c:	231f      	movs	r3, #31
    568e:	4018      	ands	r0, r3
    5690:	3b1e      	subs	r3, #30
    5692:	4083      	lsls	r3, r0
    5694:	2280      	movs	r2, #128	; 0x80
    5696:	4912      	ldr	r1, [pc, #72]	; (56e0 <sio2host_deinit+0x60>)
    5698:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    569a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    569c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    569e:	2b00      	cmp	r3, #0
    56a0:	d1fc      	bne.n	569c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    56a2:	6823      	ldr	r3, [r4, #0]
    56a4:	2202      	movs	r2, #2
    56a6:	4393      	bics	r3, r2
    56a8:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    56aa:	4b0b      	ldr	r3, [pc, #44]	; (56d8 <sio2host_deinit+0x58>)
    56ac:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    56ae:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    56b0:	2a00      	cmp	r2, #0
    56b2:	d1fc      	bne.n	56ae <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    56b4:	685a      	ldr	r2, [r3, #4]
    56b6:	490b      	ldr	r1, [pc, #44]	; (56e4 <sio2host_deinit+0x64>)
    56b8:	400a      	ands	r2, r1
    56ba:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    56bc:	2100      	movs	r1, #0
    56be:	4a06      	ldr	r2, [pc, #24]	; (56d8 <sio2host_deinit+0x58>)
    56c0:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    56c2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    56c4:	2a00      	cmp	r2, #0
    56c6:	d1fc      	bne.n	56c2 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    56c8:	685a      	ldr	r2, [r3, #4]
    56ca:	4907      	ldr	r1, [pc, #28]	; (56e8 <sio2host_deinit+0x68>)
    56cc:	400a      	ands	r2, r1
    56ce:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    56d0:	2200      	movs	r2, #0
    56d2:	4b01      	ldr	r3, [pc, #4]	; (56d8 <sio2host_deinit+0x58>)
    56d4:	719a      	strb	r2, [r3, #6]
}
    56d6:	bd70      	pop	{r4, r5, r6, pc}
    56d8:	20000a30 	.word	0x20000a30
    56dc:	00003a69 	.word	0x00003a69
    56e0:	e000e100 	.word	0xe000e100
    56e4:	fffeffff 	.word	0xfffeffff
    56e8:	fffdffff 	.word	0xfffdffff

000056ec <sio2host_tx>:
{
    56ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ee:	b083      	sub	sp, #12
    56f0:	0006      	movs	r6, r0
    56f2:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    56f4:	466b      	mov	r3, sp
    56f6:	889d      	ldrh	r5, [r3, #4]
    56f8:	4c05      	ldr	r4, [pc, #20]	; (5710 <sio2host_tx+0x24>)
    56fa:	4f06      	ldr	r7, [pc, #24]	; (5714 <sio2host_tx+0x28>)
    56fc:	002a      	movs	r2, r5
    56fe:	0031      	movs	r1, r6
    5700:	0020      	movs	r0, r4
    5702:	47b8      	blx	r7
	} while (status != STATUS_OK);
    5704:	2800      	cmp	r0, #0
    5706:	d1f9      	bne.n	56fc <sio2host_tx+0x10>
}
    5708:	9801      	ldr	r0, [sp, #4]
    570a:	b003      	add	sp, #12
    570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	20000a30 	.word	0x20000a30
    5714:	000042bd 	.word	0x000042bd

00005718 <sio2host_rx>:
{
    5718:	b570      	push	{r4, r5, r6, lr}
    571a:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    571c:	4b1f      	ldr	r3, [pc, #124]	; (579c <sio2host_rx+0x84>)
    571e:	781c      	ldrb	r4, [r3, #0]
    5720:	4b1f      	ldr	r3, [pc, #124]	; (57a0 <sio2host_rx+0x88>)
    5722:	781b      	ldrb	r3, [r3, #0]
    5724:	429c      	cmp	r4, r3
    5726:	d319      	bcc.n	575c <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    5728:	1ae3      	subs	r3, r4, r3
    572a:	481e      	ldr	r0, [pc, #120]	; (57a4 <sio2host_rx+0x8c>)
    572c:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    572e:	4b1d      	ldr	r3, [pc, #116]	; (57a4 <sio2host_rx+0x8c>)
    5730:	7818      	ldrb	r0, [r3, #0]
    5732:	2800      	cmp	r0, #0
    5734:	d031      	beq.n	579a <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    5736:	b243      	sxtb	r3, r0
    5738:	2b00      	cmp	r3, #0
    573a:	db15      	blt.n	5768 <sio2host_rx+0x50>
    573c:	1c03      	adds	r3, r0, #0
    573e:	4288      	cmp	r0, r1
    5740:	d900      	bls.n	5744 <sio2host_rx+0x2c>
    5742:	1c0b      	adds	r3, r1, #0
    5744:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    5746:	2800      	cmp	r0, #0
    5748:	d027      	beq.n	579a <sio2host_rx+0x82>
    574a:	4b15      	ldr	r3, [pc, #84]	; (57a0 <sio2host_rx+0x88>)
    574c:	781b      	ldrb	r3, [r3, #0]
    574e:	1e44      	subs	r4, r0, #1
    5750:	b2e4      	uxtb	r4, r4
    5752:	3401      	adds	r4, #1
    5754:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    5756:	4d14      	ldr	r5, [pc, #80]	; (57a8 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    5758:	2600      	movs	r6, #0
    575a:	e014      	b.n	5786 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    575c:	0020      	movs	r0, r4
    575e:	3880      	subs	r0, #128	; 0x80
    5760:	1ac3      	subs	r3, r0, r3
    5762:	4810      	ldr	r0, [pc, #64]	; (57a4 <sio2host_rx+0x8c>)
    5764:	7003      	strb	r3, [r0, #0]
    5766:	e7e2      	b.n	572e <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    5768:	4b0d      	ldr	r3, [pc, #52]	; (57a0 <sio2host_rx+0x88>)
    576a:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    576c:	2080      	movs	r0, #128	; 0x80
    576e:	4b0d      	ldr	r3, [pc, #52]	; (57a4 <sio2host_rx+0x8c>)
    5770:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    5772:	b24b      	sxtb	r3, r1
    5774:	2b00      	cmp	r3, #0
    5776:	db01      	blt.n	577c <sio2host_rx+0x64>
    5778:	0008      	movs	r0, r1
    577a:	e7e4      	b.n	5746 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    577c:	2080      	movs	r0, #128	; 0x80
    577e:	e7e4      	b.n	574a <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    5780:	0033      	movs	r3, r6
	while (max_length > 0) {
    5782:	4294      	cmp	r4, r2
    5784:	d007      	beq.n	5796 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    5786:	5ce9      	ldrb	r1, [r5, r3]
    5788:	7011      	strb	r1, [r2, #0]
		data++;
    578a:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    578c:	2b7f      	cmp	r3, #127	; 0x7f
    578e:	d0f7      	beq.n	5780 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    5790:	3301      	adds	r3, #1
    5792:	b2db      	uxtb	r3, r3
    5794:	e7f5      	b.n	5782 <sio2host_rx+0x6a>
    5796:	4a02      	ldr	r2, [pc, #8]	; (57a0 <sio2host_rx+0x88>)
    5798:	7013      	strb	r3, [r2, #0]
}
    579a:	bd70      	pop	{r4, r5, r6, pc}
    579c:	20000ae5 	.word	0x20000ae5
    57a0:	20000ae4 	.word	0x20000ae4
    57a4:	20000ae6 	.word	0x20000ae6
    57a8:	20000a64 	.word	0x20000a64

000057ac <sio2host_getchar_nowait>:
{
    57ac:	b500      	push	{lr}
    57ae:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    57b0:	2101      	movs	r1, #1
    57b2:	466b      	mov	r3, sp
    57b4:	1dd8      	adds	r0, r3, #7
    57b6:	4b05      	ldr	r3, [pc, #20]	; (57cc <sio2host_getchar_nowait+0x20>)
    57b8:	4798      	blx	r3
	if (back >= 1) {
    57ba:	2800      	cmp	r0, #0
    57bc:	dd03      	ble.n	57c6 <sio2host_getchar_nowait+0x1a>
		return c;
    57be:	466b      	mov	r3, sp
    57c0:	79d8      	ldrb	r0, [r3, #7]
}
    57c2:	b003      	add	sp, #12
    57c4:	bd00      	pop	{pc}
		return (-1);
    57c6:	2001      	movs	r0, #1
    57c8:	4240      	negs	r0, r0
    57ca:	e7fa      	b.n	57c2 <sio2host_getchar_nowait+0x16>
    57cc:	00005719 	.word	0x00005719

000057d0 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    57d0:	4b13      	ldr	r3, [pc, #76]	; (5820 <HAL_SPISend+0x50>)
    57d2:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    57d4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57d6:	7e1a      	ldrb	r2, [r3, #24]
    57d8:	420a      	tst	r2, r1
    57da:	d0fc      	beq.n	57d6 <HAL_SPISend+0x6>
    57dc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    57de:	07d2      	lsls	r2, r2, #31
    57e0:	d500      	bpl.n	57e4 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    57e2:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    57e4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    57e6:	7e1a      	ldrb	r2, [r3, #24]
    57e8:	420a      	tst	r2, r1
    57ea:	d0fc      	beq.n	57e6 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    57ec:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    57ee:	7e1a      	ldrb	r2, [r3, #24]
    57f0:	420a      	tst	r2, r1
    57f2:	d0fc      	beq.n	57ee <HAL_SPISend+0x1e>
    57f4:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    57f6:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    57f8:	0752      	lsls	r2, r2, #29
    57fa:	d50a      	bpl.n	5812 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    57fc:	8b5a      	ldrh	r2, [r3, #26]
    57fe:	0752      	lsls	r2, r2, #29
    5800:	d501      	bpl.n	5806 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5802:	2204      	movs	r2, #4
    5804:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5806:	4a06      	ldr	r2, [pc, #24]	; (5820 <HAL_SPISend+0x50>)
    5808:	7992      	ldrb	r2, [r2, #6]
    580a:	2a01      	cmp	r2, #1
    580c:	d003      	beq.n	5816 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    580e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5810:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    5812:	b2c0      	uxtb	r0, r0
}
    5814:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5816:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5818:	05c0      	lsls	r0, r0, #23
    581a:	0dc0      	lsrs	r0, r0, #23
    581c:	e7f9      	b.n	5812 <HAL_SPISend+0x42>
    581e:	46c0      	nop			; (mov r8, r8)
    5820:	20000af4 	.word	0x20000af4

00005824 <HAL_ResetPinMakeOutput>:
{
    5824:	b500      	push	{lr}
    5826:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    5828:	a901      	add	r1, sp, #4
    582a:	2301      	movs	r3, #1
    582c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    582e:	2200      	movs	r2, #0
    5830:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5832:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    5834:	202f      	movs	r0, #47	; 0x2f
    5836:	4b02      	ldr	r3, [pc, #8]	; (5840 <HAL_ResetPinMakeOutput+0x1c>)
    5838:	4798      	blx	r3
}
    583a:	b003      	add	sp, #12
    583c:	bd00      	pop	{pc}
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	00003301 	.word	0x00003301

00005844 <HAL_RadioDIO2Callback>:
{
    5844:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    5846:	4b05      	ldr	r3, [pc, #20]	; (585c <HAL_RadioDIO2Callback+0x18>)
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	2b00      	cmp	r3, #0
    584c:	d004      	beq.n	5858 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    584e:	4b04      	ldr	r3, [pc, #16]	; (5860 <HAL_RadioDIO2Callback+0x1c>)
    5850:	4798      	blx	r3
    interruptHandlerDio2();
    5852:	4b02      	ldr	r3, [pc, #8]	; (585c <HAL_RadioDIO2Callback+0x18>)
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	4798      	blx	r3
}
    5858:	bd10      	pop	{r4, pc}
    585a:	46c0      	nop			; (mov r8, r8)
    585c:	20000af0 	.word	0x20000af0
    5860:	00005de1 	.word	0x00005de1

00005864 <HAL_RadioDIO1Callback>:
{
    5864:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    5866:	4b05      	ldr	r3, [pc, #20]	; (587c <HAL_RadioDIO1Callback+0x18>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d004      	beq.n	5878 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    586e:	4b04      	ldr	r3, [pc, #16]	; (5880 <HAL_RadioDIO1Callback+0x1c>)
    5870:	4798      	blx	r3
    interruptHandlerDio1();
    5872:	4b02      	ldr	r3, [pc, #8]	; (587c <HAL_RadioDIO1Callback+0x18>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	4798      	blx	r3
}
    5878:	bd10      	pop	{r4, pc}
    587a:	46c0      	nop			; (mov r8, r8)
    587c:	20000aec 	.word	0x20000aec
    5880:	00005de1 	.word	0x00005de1

00005884 <HAL_RadioDIO0Callback>:
{
    5884:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    5886:	4b05      	ldr	r3, [pc, #20]	; (589c <HAL_RadioDIO0Callback+0x18>)
    5888:	681b      	ldr	r3, [r3, #0]
    588a:	2b00      	cmp	r3, #0
    588c:	d004      	beq.n	5898 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    588e:	4b04      	ldr	r3, [pc, #16]	; (58a0 <HAL_RadioDIO0Callback+0x1c>)
    5890:	4798      	blx	r3
    interruptHandlerDio0();
    5892:	4b02      	ldr	r3, [pc, #8]	; (589c <HAL_RadioDIO0Callback+0x18>)
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	4798      	blx	r3
}
    5898:	bd10      	pop	{r4, pc}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	20000ae8 	.word	0x20000ae8
    58a0:	00005de1 	.word	0x00005de1

000058a4 <HAL_SPICSAssert>:
{
    58a4:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    58a6:	2201      	movs	r2, #1
    58a8:	4902      	ldr	r1, [pc, #8]	; (58b4 <HAL_SPICSAssert+0x10>)
    58aa:	4803      	ldr	r0, [pc, #12]	; (58b8 <HAL_SPICSAssert+0x14>)
    58ac:	4b03      	ldr	r3, [pc, #12]	; (58bc <HAL_SPICSAssert+0x18>)
    58ae:	4798      	blx	r3
}
    58b0:	bd10      	pop	{r4, pc}
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	200020b0 	.word	0x200020b0
    58b8:	20000af4 	.word	0x20000af4
    58bc:	00003dd5 	.word	0x00003dd5

000058c0 <HAL_SPICSDeassert>:
{
    58c0:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    58c2:	2200      	movs	r2, #0
    58c4:	4902      	ldr	r1, [pc, #8]	; (58d0 <HAL_SPICSDeassert+0x10>)
    58c6:	4803      	ldr	r0, [pc, #12]	; (58d4 <HAL_SPICSDeassert+0x14>)
    58c8:	4b03      	ldr	r3, [pc, #12]	; (58d8 <HAL_SPICSDeassert+0x18>)
    58ca:	4798      	blx	r3
}
    58cc:	bd10      	pop	{r4, pc}
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	200020b0 	.word	0x200020b0
    58d4:	20000af4 	.word	0x20000af4
    58d8:	00003dd5 	.word	0x00003dd5

000058dc <HAL_RadioInit>:
{
    58dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58de:	46d6      	mov	lr, sl
    58e0:	464f      	mov	r7, r9
    58e2:	4646      	mov	r6, r8
    58e4:	b5c0      	push	{r6, r7, lr}
    58e6:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    58e8:	ac01      	add	r4, sp, #4
    58ea:	2601      	movs	r6, #1
    58ec:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    58ee:	2500      	movs	r5, #0
    58f0:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    58f2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    58f4:	0021      	movs	r1, r4
    58f6:	2052      	movs	r0, #82	; 0x52
    58f8:	4f52      	ldr	r7, [pc, #328]	; (5a44 <HAL_RadioInit+0x168>)
    58fa:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    58fc:	0021      	movs	r1, r4
    58fe:	203e      	movs	r0, #62	; 0x3e
    5900:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    5902:	0021      	movs	r1, r4
    5904:	203f      	movs	r0, #63	; 0x3f
    5906:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    5908:	0021      	movs	r1, r4
    590a:	202f      	movs	r0, #47	; 0x2f
    590c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    590e:	2280      	movs	r2, #128	; 0x80
    5910:	02d2      	lsls	r2, r2, #11
    5912:	4b4d      	ldr	r3, [pc, #308]	; (5a48 <HAL_RadioInit+0x16c>)
    5914:	619a      	str	r2, [r3, #24]
    5916:	4b4d      	ldr	r3, [pc, #308]	; (5a4c <HAL_RadioInit+0x170>)
    5918:	2280      	movs	r2, #128	; 0x80
    591a:	05d2      	lsls	r2, r2, #23
    591c:	619a      	str	r2, [r3, #24]
    591e:	2280      	movs	r2, #128	; 0x80
    5920:	0612      	lsls	r2, r2, #24
    5922:	619a      	str	r2, [r3, #24]
    5924:	2280      	movs	r2, #128	; 0x80
    5926:	0212      	lsls	r2, r2, #8
    5928:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    592a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    592c:	0021      	movs	r1, r4
    592e:	2053      	movs	r0, #83	; 0x53
    5930:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    5932:	ac02      	add	r4, sp, #8
    5934:	0020      	movs	r0, r4
    5936:	4b46      	ldr	r3, [pc, #280]	; (5a50 <HAL_RadioInit+0x174>)
    5938:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    593a:	2330      	movs	r3, #48	; 0x30
    593c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    593e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    5940:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    5942:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    5944:	0021      	movs	r1, r4
    5946:	2000      	movs	r0, #0
    5948:	4b42      	ldr	r3, [pc, #264]	; (5a54 <HAL_RadioInit+0x178>)
    594a:	469a      	mov	sl, r3
    594c:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    594e:	2200      	movs	r2, #0
    5950:	2100      	movs	r1, #0
    5952:	4841      	ldr	r0, [pc, #260]	; (5a58 <HAL_RadioInit+0x17c>)
    5954:	4b41      	ldr	r3, [pc, #260]	; (5a5c <HAL_RadioInit+0x180>)
    5956:	4699      	mov	r9, r3
    5958:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    595a:	2100      	movs	r1, #0
    595c:	2000      	movs	r0, #0
    595e:	4b40      	ldr	r3, [pc, #256]	; (5a60 <HAL_RadioInit+0x184>)
    5960:	4698      	mov	r8, r3
    5962:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    5964:	230b      	movs	r3, #11
    5966:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    5968:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    596a:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    596c:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    596e:	0021      	movs	r1, r4
    5970:	200b      	movs	r0, #11
    5972:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5974:	2200      	movs	r2, #0
    5976:	210b      	movs	r1, #11
    5978:	483a      	ldr	r0, [pc, #232]	; (5a64 <HAL_RadioInit+0x188>)
    597a:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    597c:	2100      	movs	r1, #0
    597e:	200b      	movs	r0, #11
    5980:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    5982:	230c      	movs	r3, #12
    5984:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    5986:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    5988:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    598a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    598c:	0021      	movs	r1, r4
    598e:	200c      	movs	r0, #12
    5990:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5992:	2200      	movs	r2, #0
    5994:	210c      	movs	r1, #12
    5996:	4834      	ldr	r0, [pc, #208]	; (5a68 <HAL_RadioInit+0x18c>)
    5998:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    599a:	2100      	movs	r1, #0
    599c:	200c      	movs	r0, #12
    599e:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    59a0:	4b32      	ldr	r3, [pc, #200]	; (5a6c <HAL_RadioInit+0x190>)
    59a2:	4698      	mov	r8, r3
    59a4:	233f      	movs	r3, #63	; 0x3f
    59a6:	4642      	mov	r2, r8
    59a8:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    59aa:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    59ac:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    59ae:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    59b0:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    59b2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    59b4:	0021      	movs	r1, r4
    59b6:	203f      	movs	r0, #63	; 0x3f
    59b8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    59ba:	4643      	mov	r3, r8
    59bc:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    59be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    59c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    59c2:	2900      	cmp	r1, #0
    59c4:	d104      	bne.n	59d0 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    59c6:	0953      	lsrs	r3, r2, #5
    59c8:	01db      	lsls	r3, r3, #7
    59ca:	4929      	ldr	r1, [pc, #164]	; (5a70 <HAL_RadioInit+0x194>)
    59cc:	468c      	mov	ip, r1
    59ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59d0:	211f      	movs	r1, #31
    59d2:	4011      	ands	r1, r2
    59d4:	2201      	movs	r2, #1
    59d6:	0010      	movs	r0, r2
    59d8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    59da:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    59dc:	ac02      	add	r4, sp, #8
    59de:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    59e0:	2300      	movs	r3, #0
    59e2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    59e4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    59e6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    59e8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    59ea:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    59ec:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    59ee:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    59f0:	3223      	adds	r2, #35	; 0x23
    59f2:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    59f4:	3a18      	subs	r2, #24
    59f6:	2100      	movs	r1, #0
    59f8:	a808      	add	r0, sp, #32
    59fa:	4b1e      	ldr	r3, [pc, #120]	; (5a74 <HAL_RadioInit+0x198>)
    59fc:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    59fe:	4b1e      	ldr	r3, [pc, #120]	; (5a78 <HAL_RadioInit+0x19c>)
    5a00:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    5a02:	2380      	movs	r3, #128	; 0x80
    5a04:	025b      	lsls	r3, r3, #9
    5a06:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    5a08:	4b1c      	ldr	r3, [pc, #112]	; (5a7c <HAL_RadioInit+0x1a0>)
    5a0a:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    5a0c:	2301      	movs	r3, #1
    5a0e:	425b      	negs	r3, r3
    5a10:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    5a12:	4b1b      	ldr	r3, [pc, #108]	; (5a80 <HAL_RadioInit+0x1a4>)
    5a14:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    5a16:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <HAL_RadioInit+0x1a8>)
    5a18:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    5a1a:	4d1b      	ldr	r5, [pc, #108]	; (5a88 <HAL_RadioInit+0x1ac>)
    5a1c:	0022      	movs	r2, r4
    5a1e:	491b      	ldr	r1, [pc, #108]	; (5a8c <HAL_RadioInit+0x1b0>)
    5a20:	0028      	movs	r0, r5
    5a22:	4b1b      	ldr	r3, [pc, #108]	; (5a90 <HAL_RadioInit+0x1b4>)
    5a24:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a26:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5a28:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d1fc      	bne.n	5a28 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5a2e:	6813      	ldr	r3, [r2, #0]
    5a30:	2102      	movs	r1, #2
    5a32:	430b      	orrs	r3, r1
    5a34:	6013      	str	r3, [r2, #0]
}
    5a36:	b010      	add	sp, #64	; 0x40
    5a38:	bc1c      	pop	{r2, r3, r4}
    5a3a:	4690      	mov	r8, r2
    5a3c:	4699      	mov	r9, r3
    5a3e:	46a2      	mov	sl, r4
    5a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a42:	46c0      	nop			; (mov r8, r8)
    5a44:	00003301 	.word	0x00003301
    5a48:	40002900 	.word	0x40002900
    5a4c:	40002880 	.word	0x40002880
    5a50:	00002e99 	.word	0x00002e99
    5a54:	00002ead 	.word	0x00002ead
    5a58:	00005885 	.word	0x00005885
    5a5c:	00002d59 	.word	0x00002d59
    5a60:	00002d85 	.word	0x00002d85
    5a64:	00005865 	.word	0x00005865
    5a68:	00005845 	.word	0x00005845
    5a6c:	200020b0 	.word	0x200020b0
    5a70:	40002800 	.word	0x40002800
    5a74:	00017715 	.word	0x00017715
    5a78:	001e8480 	.word	0x001e8480
    5a7c:	00530005 	.word	0x00530005
    5a80:	003e0005 	.word	0x003e0005
    5a84:	00520005 	.word	0x00520005
    5a88:	20000af4 	.word	0x20000af4
    5a8c:	42001000 	.word	0x42001000
    5a90:	00003af9 	.word	0x00003af9

00005a94 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a94:	4b07      	ldr	r3, [pc, #28]	; (5ab4 <HAL_Radio_resources_init+0x20>)
    5a96:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    5a98:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d1fc      	bne.n	5a98 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5a9e:	6813      	ldr	r3, [r2, #0]
    5aa0:	2102      	movs	r1, #2
    5aa2:	430b      	orrs	r3, r1
    5aa4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5aa6:	4b03      	ldr	r3, [pc, #12]	; (5ab4 <HAL_Radio_resources_init+0x20>)
    5aa8:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    5aaa:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    5aac:	2b00      	cmp	r3, #0
    5aae:	d1fc      	bne.n	5aaa <HAL_Radio_resources_init+0x16>
}
    5ab0:	4770      	bx	lr
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	20000af4 	.word	0x20000af4

00005ab8 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ab8:	4b06      	ldr	r3, [pc, #24]	; (5ad4 <HAL_RadioDeInit+0x1c>)
    5aba:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    5abc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d1fc      	bne.n	5abc <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5ac2:	338f      	adds	r3, #143	; 0x8f
    5ac4:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    5ac6:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5ac8:	6813      	ldr	r3, [r2, #0]
    5aca:	2102      	movs	r1, #2
    5acc:	438b      	bics	r3, r1
    5ace:	6013      	str	r3, [r2, #0]
}
    5ad0:	4770      	bx	lr
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	20000af4 	.word	0x20000af4

00005ad8 <RADIO_Reset>:
{
    5ad8:	b570      	push	{r4, r5, r6, lr}
    5ada:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    5adc:	4c0a      	ldr	r4, [pc, #40]	; (5b08 <RADIO_Reset+0x30>)
    5ade:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    5ae0:	4d0a      	ldr	r5, [pc, #40]	; (5b0c <RADIO_Reset+0x34>)
    5ae2:	2680      	movs	r6, #128	; 0x80
    5ae4:	0236      	lsls	r6, r6, #8
    5ae6:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    5ae8:	2001      	movs	r0, #1
    5aea:	4b09      	ldr	r3, [pc, #36]	; (5b10 <RADIO_Reset+0x38>)
    5aec:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    5aee:	a901      	add	r1, sp, #4
    5af0:	2300      	movs	r3, #0
    5af2:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5af4:	2201      	movs	r2, #1
    5af6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5af8:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    5afa:	202f      	movs	r0, #47	; 0x2f
    5afc:	4b05      	ldr	r3, [pc, #20]	; (5b14 <RADIO_Reset+0x3c>)
    5afe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    5b00:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    5b02:	47a0      	blx	r4
}
    5b04:	b002      	add	sp, #8
    5b06:	bd70      	pop	{r4, r5, r6, pc}
    5b08:	00005825 	.word	0x00005825
    5b0c:	40002880 	.word	0x40002880
    5b10:	00005d75 	.word	0x00005d75
    5b14:	00003301 	.word	0x00003301

00005b18 <RADIO_RegisterWrite>:
{
    5b18:	b570      	push	{r4, r5, r6, lr}
    5b1a:	0004      	movs	r4, r0
    5b1c:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    5b1e:	4b05      	ldr	r3, [pc, #20]	; (5b34 <RADIO_RegisterWrite+0x1c>)
    5b20:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    5b22:	2080      	movs	r0, #128	; 0x80
    5b24:	4320      	orrs	r0, r4
    5b26:	4c04      	ldr	r4, [pc, #16]	; (5b38 <RADIO_RegisterWrite+0x20>)
    5b28:	47a0      	blx	r4
	HAL_SPISend(value);
    5b2a:	0028      	movs	r0, r5
    5b2c:	47a0      	blx	r4
	HAL_SPICSDeassert();
    5b2e:	4b03      	ldr	r3, [pc, #12]	; (5b3c <RADIO_RegisterWrite+0x24>)
    5b30:	4798      	blx	r3
}
    5b32:	bd70      	pop	{r4, r5, r6, pc}
    5b34:	000058a5 	.word	0x000058a5
    5b38:	000057d1 	.word	0x000057d1
    5b3c:	000058c1 	.word	0x000058c1

00005b40 <RADIO_RegisterRead>:
{
    5b40:	b510      	push	{r4, lr}
    5b42:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    5b44:	4b06      	ldr	r3, [pc, #24]	; (5b60 <RADIO_RegisterRead+0x20>)
    5b46:	4798      	blx	r3
	HAL_SPISend(reg);
    5b48:	207f      	movs	r0, #127	; 0x7f
    5b4a:	4020      	ands	r0, r4
    5b4c:	4c05      	ldr	r4, [pc, #20]	; (5b64 <RADIO_RegisterRead+0x24>)
    5b4e:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    5b50:	20ff      	movs	r0, #255	; 0xff
    5b52:	47a0      	blx	r4
    5b54:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    5b56:	4b04      	ldr	r3, [pc, #16]	; (5b68 <RADIO_RegisterRead+0x28>)
    5b58:	4798      	blx	r3
}
    5b5a:	0020      	movs	r0, r4
    5b5c:	bd10      	pop	{r4, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	000058a5 	.word	0x000058a5
    5b64:	000057d1 	.word	0x000057d1
    5b68:	000058c1 	.word	0x000058c1

00005b6c <RADIO_FrameWrite>:
{
    5b6c:	b570      	push	{r4, r5, r6, lr}
    5b6e:	0004      	movs	r4, r0
    5b70:	000e      	movs	r6, r1
    5b72:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    5b74:	4b0a      	ldr	r3, [pc, #40]	; (5ba0 <RADIO_FrameWrite+0x34>)
    5b76:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    5b78:	2080      	movs	r0, #128	; 0x80
    5b7a:	4320      	orrs	r0, r4
    5b7c:	4b09      	ldr	r3, [pc, #36]	; (5ba4 <RADIO_FrameWrite+0x38>)
    5b7e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    5b80:	2d00      	cmp	r5, #0
    5b82:	d00a      	beq.n	5b9a <RADIO_FrameWrite+0x2e>
    5b84:	0034      	movs	r4, r6
    5b86:	3d01      	subs	r5, #1
    5b88:	b2ed      	uxtb	r5, r5
    5b8a:	3501      	adds	r5, #1
    5b8c:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    5b8e:	4e05      	ldr	r6, [pc, #20]	; (5ba4 <RADIO_FrameWrite+0x38>)
    5b90:	7820      	ldrb	r0, [r4, #0]
    5b92:	47b0      	blx	r6
    5b94:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    5b96:	42ac      	cmp	r4, r5
    5b98:	d1fa      	bne.n	5b90 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    5b9a:	4b03      	ldr	r3, [pc, #12]	; (5ba8 <RADIO_FrameWrite+0x3c>)
    5b9c:	4798      	blx	r3
}
    5b9e:	bd70      	pop	{r4, r5, r6, pc}
    5ba0:	000058a5 	.word	0x000058a5
    5ba4:	000057d1 	.word	0x000057d1
    5ba8:	000058c1 	.word	0x000058c1

00005bac <RADIO_FrameRead>:
{
    5bac:	b570      	push	{r4, r5, r6, lr}
    5bae:	0004      	movs	r4, r0
    5bb0:	000e      	movs	r6, r1
    5bb2:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    5bb4:	4b0a      	ldr	r3, [pc, #40]	; (5be0 <RADIO_FrameRead+0x34>)
    5bb6:	4798      	blx	r3
    HAL_SPISend(offset);
    5bb8:	0020      	movs	r0, r4
    5bba:	4b0a      	ldr	r3, [pc, #40]	; (5be4 <RADIO_FrameRead+0x38>)
    5bbc:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    5bbe:	2d00      	cmp	r5, #0
    5bc0:	d00b      	beq.n	5bda <RADIO_FrameRead+0x2e>
    5bc2:	0034      	movs	r4, r6
    5bc4:	3d01      	subs	r5, #1
    5bc6:	b2ed      	uxtb	r5, r5
    5bc8:	3501      	adds	r5, #1
    5bca:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    5bcc:	4e05      	ldr	r6, [pc, #20]	; (5be4 <RADIO_FrameRead+0x38>)
    5bce:	20ff      	movs	r0, #255	; 0xff
    5bd0:	47b0      	blx	r6
    5bd2:	7020      	strb	r0, [r4, #0]
    5bd4:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    5bd6:	42ac      	cmp	r4, r5
    5bd8:	d1f9      	bne.n	5bce <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    5bda:	4b03      	ldr	r3, [pc, #12]	; (5be8 <RADIO_FrameRead+0x3c>)
    5bdc:	4798      	blx	r3
}
    5bde:	bd70      	pop	{r4, r5, r6, pc}
    5be0:	000058a5 	.word	0x000058a5
    5be4:	000057d1 	.word	0x000057d1
    5be8:	000058c1 	.word	0x000058c1

00005bec <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    5bec:	2802      	cmp	r0, #2
    5bee:	d007      	beq.n	5c00 <HAL_RegisterDioInterruptHandler+0x14>
    5bf0:	2804      	cmp	r0, #4
    5bf2:	d008      	beq.n	5c06 <HAL_RegisterDioInterruptHandler+0x1a>
    5bf4:	2801      	cmp	r0, #1
    5bf6:	d000      	beq.n	5bfa <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    5bf8:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    5bfa:	4b04      	ldr	r3, [pc, #16]	; (5c0c <HAL_RegisterDioInterruptHandler+0x20>)
    5bfc:	6019      	str	r1, [r3, #0]
      break;
    5bfe:	e7fb      	b.n	5bf8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    5c00:	4b03      	ldr	r3, [pc, #12]	; (5c10 <HAL_RegisterDioInterruptHandler+0x24>)
    5c02:	6019      	str	r1, [r3, #0]
      break;
    5c04:	e7f8      	b.n	5bf8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    5c06:	4b03      	ldr	r3, [pc, #12]	; (5c14 <HAL_RegisterDioInterruptHandler+0x28>)
    5c08:	6019      	str	r1, [r3, #0]
}
    5c0a:	e7f5      	b.n	5bf8 <HAL_RegisterDioInterruptHandler+0xc>
    5c0c:	20000ae8 	.word	0x20000ae8
    5c10:	20000aec 	.word	0x20000aec
    5c14:	20000af0 	.word	0x20000af0

00005c18 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    5c18:	2801      	cmp	r0, #1
    5c1a:	d00a      	beq.n	5c32 <HAL_EnableRFCtrl+0x1a>
    5c1c:	2900      	cmp	r1, #0
    5c1e:	d008      	beq.n	5c32 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    5c20:	2802      	cmp	r0, #2
    5c22:	d10a      	bne.n	5c3a <HAL_EnableRFCtrl+0x22>
    5c24:	2901      	cmp	r1, #1
    5c26:	d108      	bne.n	5c3a <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    5c28:	2280      	movs	r2, #128	; 0x80
    5c2a:	0192      	lsls	r2, r2, #6
    5c2c:	4b03      	ldr	r3, [pc, #12]	; (5c3c <HAL_EnableRFCtrl+0x24>)
    5c2e:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    5c30:	e003      	b.n	5c3a <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    5c32:	2280      	movs	r2, #128	; 0x80
    5c34:	0192      	lsls	r2, r2, #6
    5c36:	4b01      	ldr	r3, [pc, #4]	; (5c3c <HAL_EnableRFCtrl+0x24>)
    5c38:	619a      	str	r2, [r3, #24]
    5c3a:	4770      	bx	lr
    5c3c:	40002800 	.word	0x40002800

00005c40 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    5c40:	2801      	cmp	r0, #1
    5c42:	d001      	beq.n	5c48 <HAL_DisableRFCtrl+0x8>
    5c44:	2900      	cmp	r1, #0
    5c46:	d103      	bne.n	5c50 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    5c48:	2280      	movs	r2, #128	; 0x80
    5c4a:	0192      	lsls	r2, r2, #6
    5c4c:	4b01      	ldr	r3, [pc, #4]	; (5c54 <HAL_DisableRFCtrl+0x14>)
    5c4e:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    5c50:	4770      	bx	lr
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	40002800 	.word	0x40002800

00005c58 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    5c58:	2002      	movs	r0, #2
    5c5a:	4770      	bx	lr

00005c5c <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    5c5c:	2000      	movs	r0, #0
    5c5e:	4770      	bx	lr

00005c60 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    5c60:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    5c62:	2280      	movs	r2, #128	; 0x80
    5c64:	0092      	lsls	r2, r2, #2
    5c66:	4b03      	ldr	r3, [pc, #12]	; (5c74 <HAL_TCXOPowerOn+0x14>)
    5c68:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    5c6a:	2002      	movs	r0, #2
    5c6c:	4b02      	ldr	r3, [pc, #8]	; (5c78 <HAL_TCXOPowerOn+0x18>)
    5c6e:	4798      	blx	r3
#endif
}
    5c70:	bd10      	pop	{r4, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	40002800 	.word	0x40002800
    5c78:	000029e9 	.word	0x000029e9

00005c7c <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    5c7c:	2280      	movs	r2, #128	; 0x80
    5c7e:	0092      	lsls	r2, r2, #2
    5c80:	4b01      	ldr	r3, [pc, #4]	; (5c88 <HAL_TCXOPowerOff+0xc>)
    5c82:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    5c84:	4770      	bx	lr
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	40002800 	.word	0x40002800

00005c8c <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    5c8c:	2801      	cmp	r0, #1
    5c8e:	d002      	beq.n	5c96 <HAL_Sleep+0xa>
    5c90:	2802      	cmp	r0, #2
    5c92:	d00c      	beq.n	5cae <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    5c94:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    5c96:	2204      	movs	r2, #4
    5c98:	2380      	movs	r3, #128	; 0x80
    5c9a:	05db      	lsls	r3, r3, #23
    5c9c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    5c9e:	001a      	movs	r2, r3
    5ca0:	7853      	ldrb	r3, [r2, #1]
    5ca2:	2b04      	cmp	r3, #4
    5ca4:	d1fc      	bne.n	5ca0 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    5ca6:	f3bf 8f4f 	dsb	sy
	__WFI();
    5caa:	bf30      	wfi
    5cac:	e7f2      	b.n	5c94 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    5cae:	2205      	movs	r2, #5
    5cb0:	2380      	movs	r3, #128	; 0x80
    5cb2:	05db      	lsls	r3, r3, #23
    5cb4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    5cb6:	001a      	movs	r2, r3
    5cb8:	7853      	ldrb	r3, [r2, #1]
    5cba:	2b05      	cmp	r3, #5
    5cbc:	d1fc      	bne.n	5cb8 <HAL_Sleep+0x2c>
    5cbe:	f3bf 8f4f 	dsb	sy
	__WFI();
    5cc2:	bf30      	wfi
    5cc4:	e7e6      	b.n	5c94 <HAL_Sleep+0x8>
	...

00005cc8 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    5cc8:	b510      	push	{r4, lr}
    5cca:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    5ccc:	2201      	movs	r2, #1
    5cce:	466b      	mov	r3, sp
    5cd0:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    5cd2:	2300      	movs	r3, #0
    5cd4:	4669      	mov	r1, sp
    5cd6:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    5cd8:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    5cda:	466a      	mov	r2, sp
    5cdc:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    5cde:	3b01      	subs	r3, #1
    5ce0:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    5ce2:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    5ce4:	4c04      	ldr	r4, [pc, #16]	; (5cf8 <SleepTimerInit+0x30>)
    5ce6:	4905      	ldr	r1, [pc, #20]	; (5cfc <SleepTimerInit+0x34>)
    5ce8:	0020      	movs	r0, r4
    5cea:	4b05      	ldr	r3, [pc, #20]	; (5d00 <SleepTimerInit+0x38>)
    5cec:	4798      	blx	r3
	rtc_count_enable(&rtc);
    5cee:	0020      	movs	r0, r4
    5cf0:	4b04      	ldr	r3, [pc, #16]	; (5d04 <SleepTimerInit+0x3c>)
    5cf2:	4798      	blx	r3
}
    5cf4:	b004      	add	sp, #16
    5cf6:	bd10      	pop	{r4, pc}
    5cf8:	200020b4 	.word	0x200020b4
    5cfc:	40002000 	.word	0x40002000
    5d00:	000034b1 	.word	0x000034b1
    5d04:	00003331 	.word	0x00003331

00005d08 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    5d08:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    5d0a:	4802      	ldr	r0, [pc, #8]	; (5d14 <SleepTimerGetElapsedTime+0xc>)
    5d0c:	4b02      	ldr	r3, [pc, #8]	; (5d18 <SleepTimerGetElapsedTime+0x10>)
    5d0e:	4798      	blx	r3
}
    5d10:	bd10      	pop	{r4, pc}
    5d12:	46c0      	nop			; (mov r8, r8)
    5d14:	200020b4 	.word	0x200020b4
    5d18:	00003421 	.word	0x00003421

00005d1c <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    5d1c:	b570      	push	{r4, r5, r6, lr}
    5d1e:	0005      	movs	r5, r0
    5d20:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    5d22:	4c0a      	ldr	r4, [pc, #40]	; (5d4c <SleepTimerStart+0x30>)
    5d24:	2100      	movs	r1, #0
    5d26:	0020      	movs	r0, r4
    5d28:	4b09      	ldr	r3, [pc, #36]	; (5d50 <SleepTimerStart+0x34>)
    5d2a:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    5d2c:	2208      	movs	r2, #8
    5d2e:	0031      	movs	r1, r6
    5d30:	0020      	movs	r0, r4
    5d32:	4b08      	ldr	r3, [pc, #32]	; (5d54 <SleepTimerStart+0x38>)
    5d34:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    5d36:	2200      	movs	r2, #0
    5d38:	0029      	movs	r1, r5
    5d3a:	0020      	movs	r0, r4
    5d3c:	4b06      	ldr	r3, [pc, #24]	; (5d58 <SleepTimerStart+0x3c>)
    5d3e:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    5d40:	2108      	movs	r1, #8
    5d42:	0020      	movs	r0, r4
    5d44:	4b05      	ldr	r3, [pc, #20]	; (5d5c <SleepTimerStart+0x40>)
    5d46:	4798      	blx	r3
}
    5d48:	bd70      	pop	{r4, r5, r6, pc}
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	200020b4 	.word	0x200020b4
    5d50:	000033dd 	.word	0x000033dd
    5d54:	0000354d 	.word	0x0000354d
    5d58:	0000344d 	.word	0x0000344d
    5d5c:	00003589 	.word	0x00003589

00005d60 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    5d60:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    5d62:	2108      	movs	r1, #8
    5d64:	4801      	ldr	r0, [pc, #4]	; (5d6c <SleepTimerStop+0xc>)
    5d66:	4b02      	ldr	r3, [pc, #8]	; (5d70 <SleepTimerStop+0x10>)
    5d68:	4798      	blx	r3
}
    5d6a:	bd10      	pop	{r4, pc}
    5d6c:	200020b4 	.word	0x200020b4
    5d70:	000035cd 	.word	0x000035cd

00005d74 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    5d74:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    5d76:	2800      	cmp	r0, #0
    5d78:	d103      	bne.n	5d82 <SystemBlockingWaitMs+0xe>
    5d7a:	2001      	movs	r0, #1
    5d7c:	4b02      	ldr	r3, [pc, #8]	; (5d88 <SystemBlockingWaitMs+0x14>)
    5d7e:	4798      	blx	r3
#endif
}
    5d80:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    5d82:	4b02      	ldr	r3, [pc, #8]	; (5d8c <SystemBlockingWaitMs+0x18>)
    5d84:	4798      	blx	r3
    5d86:	e7fb      	b.n	5d80 <SystemBlockingWaitMs+0xc>
    5d88:	000029bd 	.word	0x000029bd
    5d8c:	000029e9 	.word	0x000029e9

00005d90 <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    5d90:	b510      	push	{r4, lr}
    5d92:	b082      	sub	sp, #8
    5d94:	466a      	mov	r2, sp
    5d96:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <System_GetExternalEui+0x30>)
#elif (BOARD == WLR089_XPLAINED_PRO && defined(__WLR089U0__) && MODULE_EUI_READ == 1)

	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t moduleDevEUI[8] ;
	for (i = 0; i < 8; i += 2, j++)
    5d98:	4c0a      	ldr	r4, [pc, #40]	; (5dc4 <System_GetExternalEui+0x34>)
	{
		moduleDevEUI[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    5d9a:	8819      	ldrh	r1, [r3, #0]
    5d9c:	7011      	strb	r1, [r2, #0]
		moduleDevEUI[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    5d9e:	8819      	ldrh	r1, [r3, #0]
    5da0:	0a09      	lsrs	r1, r1, #8
    5da2:	7051      	strb	r1, [r2, #1]
    5da4:	3302      	adds	r3, #2
    5da6:	3202      	adds	r2, #2
	for (i = 0; i < 8; i += 2, j++)
    5da8:	42a3      	cmp	r3, r4
    5daa:	d1f6      	bne.n	5d9a <System_GetExternalEui+0xa>
    5dac:	2300      	movs	r3, #0
	}
	for (i= 0; i < 8; i++)
	{
		*id = moduleDevEUI[i] ;
    5dae:	466a      	mov	r2, sp
    5db0:	5c9a      	ldrb	r2, [r3, r2]
    5db2:	54c2      	strb	r2, [r0, r3]
    5db4:	3301      	adds	r3, #1
	for (i= 0; i < 8; i++)
    5db6:	2b08      	cmp	r3, #8
    5db8:	d1f9      	bne.n	5dae <System_GetExternalEui+0x1e>
		id++ ;
	}

#endif
#endif
}
    5dba:	b002      	add	sp, #8
    5dbc:	bd10      	pop	{r4, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	0080400a 	.word	0x0080400a
    5dc4:	00804012 	.word	0x00804012

00005dc8 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    5dc8:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    5dca:	4b01      	ldr	r3, [pc, #4]	; (5dd0 <system_enter_critical_section+0x8>)
    5dcc:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    5dce:	bd10      	pop	{r4, pc}
    5dd0:	00002a15 	.word	0x00002a15

00005dd4 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    5dd4:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    5dd6:	4b01      	ldr	r3, [pc, #4]	; (5ddc <system_leave_critical_section+0x8>)
    5dd8:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    5dda:	bd10      	pop	{r4, pc}
    5ddc:	00002a55 	.word	0x00002a55

00005de0 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    5de0:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    5de2:	4b16      	ldr	r3, [pc, #88]	; (5e3c <PMM_Wakeup+0x5c>)
    5de4:	781b      	ldrb	r3, [r3, #0]
    5de6:	2b01      	cmp	r3, #1
    5de8:	d000      	beq.n	5dec <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    5dea:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    5dec:	2200      	movs	r2, #0
    5dee:	4b13      	ldr	r3, [pc, #76]	; (5e3c <PMM_Wakeup+0x5c>)
    5df0:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    5df2:	4b13      	ldr	r3, [pc, #76]	; (5e40 <PMM_Wakeup+0x60>)
    5df4:	4798      	blx	r3
    5df6:	4b13      	ldr	r3, [pc, #76]	; (5e44 <PMM_Wakeup+0x64>)
    5df8:	4798      	blx	r3
    5dfa:	4913      	ldr	r1, [pc, #76]	; (5e48 <PMM_Wakeup+0x68>)
    5dfc:	4b13      	ldr	r3, [pc, #76]	; (5e4c <PMM_Wakeup+0x6c>)
    5dfe:	4798      	blx	r3
    5e00:	4b13      	ldr	r3, [pc, #76]	; (5e50 <PMM_Wakeup+0x70>)
    5e02:	4798      	blx	r3
    5e04:	0004      	movs	r4, r0
    5e06:	000d      	movs	r5, r1
        SleepTimerStop();
    5e08:	4b12      	ldr	r3, [pc, #72]	; (5e54 <PMM_Wakeup+0x74>)
    5e0a:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    5e0c:	0020      	movs	r0, r4
    5e0e:	0029      	movs	r1, r5
    5e10:	4b11      	ldr	r3, [pc, #68]	; (5e58 <PMM_Wakeup+0x78>)
    5e12:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    5e14:	4b11      	ldr	r3, [pc, #68]	; (5e5c <PMM_Wakeup+0x7c>)
    5e16:	681b      	ldr	r3, [r3, #0]
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d0e6      	beq.n	5dea <PMM_Wakeup+0xa>
    5e1c:	689e      	ldr	r6, [r3, #8]
    5e1e:	2e00      	cmp	r6, #0
    5e20:	d0e3      	beq.n	5dea <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    5e22:	22fa      	movs	r2, #250	; 0xfa
    5e24:	0092      	lsls	r2, r2, #2
    5e26:	2300      	movs	r3, #0
    5e28:	0020      	movs	r0, r4
    5e2a:	0029      	movs	r1, r5
    5e2c:	4c0c      	ldr	r4, [pc, #48]	; (5e60 <PMM_Wakeup+0x80>)
    5e2e:	47a0      	blx	r4
    5e30:	47b0      	blx	r6
            sleepReq = NULL;
    5e32:	2200      	movs	r2, #0
    5e34:	4b09      	ldr	r3, [pc, #36]	; (5e5c <PMM_Wakeup+0x7c>)
    5e36:	601a      	str	r2, [r3, #0]
}
    5e38:	e7d7      	b.n	5dea <PMM_Wakeup+0xa>
    5e3a:	46c0      	nop			; (mov r8, r8)
    5e3c:	20000b00 	.word	0x20000b00
    5e40:	00005d09 	.word	0x00005d09
    5e44:	00015901 	.word	0x00015901
    5e48:	41f423d7 	.word	0x41f423d7
    5e4c:	000152a9 	.word	0x000152a9
    5e50:	000149e5 	.word	0x000149e5
    5e54:	00005d61 	.word	0x00005d61
    5e58:	0000d029 	.word	0x0000d029
    5e5c:	20000b04 	.word	0x20000b04
    5e60:	000148e5 	.word	0x000148e5

00005e64 <PMM_Sleep>:
{
    5e64:	b570      	push	{r4, r5, r6, lr}
    5e66:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    5e68:	d055      	beq.n	5f16 <PMM_Sleep+0xb2>
    5e6a:	4b2c      	ldr	r3, [pc, #176]	; (5f1c <PMM_Sleep+0xb8>)
    5e6c:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5e6e:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    5e70:	2b00      	cmp	r3, #0
    5e72:	d000      	beq.n	5e76 <PMM_Sleep+0x12>
}
    5e74:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    5e76:	4b2a      	ldr	r3, [pc, #168]	; (5f20 <PMM_Sleep+0xbc>)
    5e78:	4798      	blx	r3
    5e7a:	0003      	movs	r3, r0
            return status;
    5e7c:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d0f8      	beq.n	5e74 <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    5e82:	6823      	ldr	r3, [r4, #0]
    5e84:	4a27      	ldr	r2, [pc, #156]	; (5f24 <PMM_Sleep+0xc0>)
    5e86:	4694      	mov	ip, r2
    5e88:	4463      	add	r3, ip
        if ( false == canSleep )
    5e8a:	4a27      	ldr	r2, [pc, #156]	; (5f28 <PMM_Sleep+0xc4>)
    5e8c:	4293      	cmp	r3, r2
    5e8e:	d8f1      	bhi.n	5e74 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    5e90:	7923      	ldrb	r3, [r4, #4]
    5e92:	2b02      	cmp	r3, #2
    5e94:	d021      	beq.n	5eda <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    5e96:	2b01      	cmp	r3, #1
    5e98:	d025      	beq.n	5ee6 <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    5e9a:	2501      	movs	r5, #1
    5e9c:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    5e9e:	4b20      	ldr	r3, [pc, #128]	; (5f20 <PMM_Sleep+0xbc>)
    5ea0:	4798      	blx	r3
    5ea2:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5ea4:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    5ea6:	2b00      	cmp	r3, #0
    5ea8:	d0e4      	beq.n	5e74 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    5eaa:	4b20      	ldr	r3, [pc, #128]	; (5f2c <PMM_Sleep+0xc8>)
    5eac:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    5eae:	0028      	movs	r0, r5
    5eb0:	380a      	subs	r0, #10
    5eb2:	4b1f      	ldr	r3, [pc, #124]	; (5f30 <PMM_Sleep+0xcc>)
    5eb4:	4798      	blx	r3
    5eb6:	491f      	ldr	r1, [pc, #124]	; (5f34 <PMM_Sleep+0xd0>)
    5eb8:	4b1f      	ldr	r3, [pc, #124]	; (5f38 <PMM_Sleep+0xd4>)
    5eba:	4798      	blx	r3
    5ebc:	4b1f      	ldr	r3, [pc, #124]	; (5f3c <PMM_Sleep+0xd8>)
    5ebe:	4798      	blx	r3
    5ec0:	491f      	ldr	r1, [pc, #124]	; (5f40 <PMM_Sleep+0xdc>)
    5ec2:	4b20      	ldr	r3, [pc, #128]	; (5f44 <PMM_Sleep+0xe0>)
    5ec4:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    5ec6:	2201      	movs	r2, #1
    5ec8:	4b14      	ldr	r3, [pc, #80]	; (5f1c <PMM_Sleep+0xb8>)
    5eca:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    5ecc:	4b1e      	ldr	r3, [pc, #120]	; (5f48 <PMM_Sleep+0xe4>)
    5ece:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    5ed0:	7920      	ldrb	r0, [r4, #4]
    5ed2:	4b1e      	ldr	r3, [pc, #120]	; (5f4c <PMM_Sleep+0xe8>)
    5ed4:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    5ed6:	2001      	movs	r0, #1
    5ed8:	e7cc      	b.n	5e74 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    5eda:	4b1d      	ldr	r3, [pc, #116]	; (5f50 <PMM_Sleep+0xec>)
    5edc:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    5ede:	1c43      	adds	r3, r0, #1
    5ee0:	d017      	beq.n	5f12 <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5ee2:	2000      	movs	r0, #0
    5ee4:	e7c6      	b.n	5e74 <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    5ee6:	4b1a      	ldr	r3, [pc, #104]	; (5f50 <PMM_Sleep+0xec>)
    5ee8:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    5eea:	1c43      	adds	r3, r0, #1
    5eec:	d00b      	beq.n	5f06 <PMM_Sleep+0xa2>
    5eee:	21fa      	movs	r1, #250	; 0xfa
    5ef0:	0089      	lsls	r1, r1, #2
    5ef2:	4b18      	ldr	r3, [pc, #96]	; (5f54 <PMM_Sleep+0xf0>)
    5ef4:	4798      	blx	r3
    5ef6:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    5ef8:	4a0a      	ldr	r2, [pc, #40]	; (5f24 <PMM_Sleep+0xc0>)
    5efa:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    5efc:	4a0a      	ldr	r2, [pc, #40]	; (5f28 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5efe:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    5f00:	4291      	cmp	r1, r2
    5f02:	d8b7      	bhi.n	5e74 <PMM_Sleep+0x10>
    5f04:	e000      	b.n	5f08 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    5f06:	4b14      	ldr	r3, [pc, #80]	; (5f58 <PMM_Sleep+0xf4>)
    5f08:	6825      	ldr	r5, [r4, #0]
    5f0a:	429d      	cmp	r5, r3
    5f0c:	d9c7      	bls.n	5e9e <PMM_Sleep+0x3a>
    5f0e:	001d      	movs	r5, r3
    5f10:	e7c5      	b.n	5e9e <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    5f12:	6825      	ldr	r5, [r4, #0]
    5f14:	e7c3      	b.n	5e9e <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5f16:	2000      	movs	r0, #0
    5f18:	e7ac      	b.n	5e74 <PMM_Sleep+0x10>
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	20000b00 	.word	0x20000b00
    5f20:	0000d1ed 	.word	0x0000d1ed
    5f24:	fffffc18 	.word	0xfffffc18
    5f28:	07cebbc8 	.word	0x07cebbc8
    5f2c:	0000cff5 	.word	0x0000cff5
    5f30:	00015901 	.word	0x00015901
    5f34:	42031375 	.word	0x42031375
    5f38:	000152a9 	.word	0x000152a9
    5f3c:	00014979 	.word	0x00014979
    5f40:	00005de1 	.word	0x00005de1
    5f44:	00005d1d 	.word	0x00005d1d
    5f48:	20000b04 	.word	0x20000b04
    5f4c:	00005c8d 	.word	0x00005c8d
    5f50:	0000cd31 	.word	0x0000cd31
    5f54:	00014509 	.word	0x00014509
    5f58:	07cebfb0 	.word	0x07cebfb0

00005f5c <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    5f5c:	4770      	bx	lr
	...

00005f60 <InitDefault923Channels>:
{
    5f60:	b570      	push	{r4, r5, r6, lr}
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels923) );
    5f62:	4c39      	ldr	r4, [pc, #228]	; (6048 <InitDefault923Channels+0xe8>)
    5f64:	7920      	ldrb	r0, [r4, #4]
    5f66:	7963      	ldrb	r3, [r4, #5]
    5f68:	021b      	lsls	r3, r3, #8
    5f6a:	4303      	orrs	r3, r0
    5f6c:	79a0      	ldrb	r0, [r4, #6]
    5f6e:	0400      	lsls	r0, r0, #16
    5f70:	4303      	orrs	r3, r0
    5f72:	79e0      	ldrb	r0, [r4, #7]
    5f74:	0600      	lsls	r0, r0, #24
    5f76:	4318      	orrs	r0, r3
    5f78:	2204      	movs	r2, #4
    5f7a:	2100      	movs	r1, #0
    5f7c:	4e33      	ldr	r6, [pc, #204]	; (604c <InitDefault923Channels+0xec>)
    5f7e:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923) );
    5f80:	7a20      	ldrb	r0, [r4, #8]
    5f82:	7a63      	ldrb	r3, [r4, #9]
    5f84:	021b      	lsls	r3, r3, #8
    5f86:	4303      	orrs	r3, r0
    5f88:	7aa0      	ldrb	r0, [r4, #10]
    5f8a:	0400      	lsls	r0, r0, #16
    5f8c:	4303      	orrs	r3, r0
    5f8e:	7ae0      	ldrb	r0, [r4, #11]
    5f90:	0600      	lsls	r0, r0, #24
    5f92:	4318      	orrs	r0, r3
    5f94:	2218      	movs	r2, #24
    5f96:	2100      	movs	r1, #0
    5f98:	47b0      	blx	r6
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    5f9a:	7920      	ldrb	r0, [r4, #4]
    5f9c:	7963      	ldrb	r3, [r4, #5]
    5f9e:	021b      	lsls	r3, r3, #8
    5fa0:	4303      	orrs	r3, r0
    5fa2:	79a0      	ldrb	r0, [r4, #6]
    5fa4:	0400      	lsls	r0, r0, #16
    5fa6:	4303      	orrs	r3, r0
    5fa8:	79e0      	ldrb	r0, [r4, #7]
    5faa:	0600      	lsls	r0, r0, #24
    5fac:	4318      	orrs	r0, r3
    5fae:	2204      	movs	r2, #4
    5fb0:	4927      	ldr	r1, [pc, #156]	; (6050 <InitDefault923Channels+0xf0>)
    5fb2:	4d28      	ldr	r5, [pc, #160]	; (6054 <InitDefault923Channels+0xf4>)
    5fb4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    5fb6:	7a20      	ldrb	r0, [r4, #8]
    5fb8:	7a63      	ldrb	r3, [r4, #9]
    5fba:	021b      	lsls	r3, r3, #8
    5fbc:	4303      	orrs	r3, r0
    5fbe:	7aa0      	ldrb	r0, [r4, #10]
    5fc0:	0400      	lsls	r0, r0, #16
    5fc2:	4303      	orrs	r3, r0
    5fc4:	7ae0      	ldrb	r0, [r4, #11]
    5fc6:	0600      	lsls	r0, r0, #24
    5fc8:	4318      	orrs	r0, r3
    5fca:	2218      	movs	r2, #24
    5fcc:	4922      	ldr	r1, [pc, #136]	; (6058 <InitDefault923Channels+0xf8>)
    5fce:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams923) );
    5fd0:	7b20      	ldrb	r0, [r4, #12]
    5fd2:	7b63      	ldrb	r3, [r4, #13]
    5fd4:	021b      	lsls	r3, r3, #8
    5fd6:	4303      	orrs	r3, r0
    5fd8:	7ba0      	ldrb	r0, [r4, #14]
    5fda:	0400      	lsls	r0, r0, #16
    5fdc:	4303      	orrs	r3, r0
    5fde:	7be0      	ldrb	r0, [r4, #15]
    5fe0:	0600      	lsls	r0, r0, #24
    5fe2:	4318      	orrs	r0, r3
    5fe4:	220c      	movs	r2, #12
    5fe6:	2100      	movs	r1, #0
    5fe8:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    5fea:	7b20      	ldrb	r0, [r4, #12]
    5fec:	7b63      	ldrb	r3, [r4, #13]
    5fee:	021b      	lsls	r3, r3, #8
    5ff0:	4303      	orrs	r3, r0
    5ff2:	7ba0      	ldrb	r0, [r4, #14]
    5ff4:	0400      	lsls	r0, r0, #16
    5ff6:	4303      	orrs	r3, r0
    5ff8:	7be0      	ldrb	r0, [r4, #15]
    5ffa:	0600      	lsls	r0, r0, #24
    5ffc:	4318      	orrs	r0, r3
    5ffe:	220c      	movs	r2, #12
    6000:	4916      	ldr	r1, [pc, #88]	; (605c <InitDefault923Channels+0xfc>)
    6002:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    6004:	0020      	movs	r0, r4
    6006:	30af      	adds	r0, #175	; 0xaf
    6008:	30ff      	adds	r0, #255	; 0xff
    600a:	2202      	movs	r2, #2
    600c:	4914      	ldr	r1, [pc, #80]	; (6060 <InitDefault923Channels+0x100>)
    600e:	47a8      	blx	r5
	for (i = 2; i < RegParams.maxChannels; i++)
    6010:	232a      	movs	r3, #42	; 0x2a
    6012:	56e3      	ldrsb	r3, [r4, r3]
    6014:	2b02      	cmp	r3, #2
    6016:	dd15      	ble.n	6044 <InitDefault923Channels+0xe4>
    6018:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    601a:	480b      	ldr	r0, [pc, #44]	; (6048 <InitDefault923Channels+0xe8>)
    601c:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    601e:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6020:	7902      	ldrb	r2, [r0, #4]
    6022:	7941      	ldrb	r1, [r0, #5]
    6024:	0209      	lsls	r1, r1, #8
    6026:	4311      	orrs	r1, r2
    6028:	7982      	ldrb	r2, [r0, #6]
    602a:	0412      	lsls	r2, r2, #16
    602c:	4311      	orrs	r1, r2
    602e:	79c2      	ldrb	r2, [r0, #7]
    6030:	0612      	lsls	r2, r2, #24
    6032:	430a      	orrs	r2, r1
    6034:	0059      	lsls	r1, r3, #1
    6036:	188a      	adds	r2, r1, r2
    6038:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    603a:	3301      	adds	r3, #1
    603c:	b2db      	uxtb	r3, r3
    603e:	5702      	ldrsb	r2, [r0, r4]
    6040:	4293      	cmp	r3, r2
    6042:	dbed      	blt.n	6020 <InitDefault923Channels+0xc0>
}
    6044:	bd70      	pop	{r4, r5, r6, pc}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	20002310 	.word	0x20002310
    604c:	00017715 	.word	0x00017715
    6050:	0001d93c 	.word	0x0001d93c
    6054:	00017691 	.word	0x00017691
    6058:	0001d924 	.word	0x0001d924
    605c:	0001d984 	.word	0x0001d984
    6060:	0001d980 	.word	0x0001d980

00006064 <LORAReg_InitAS>:
{
    6064:	b5f0      	push	{r4, r5, r6, r7, lr}
    6066:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    6068:	4b78      	ldr	r3, [pc, #480]	; (624c <LORAReg_InitAS+0x1e8>)
    606a:	2103      	movs	r1, #3
    606c:	2226      	movs	r2, #38	; 0x26
    606e:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    6070:	2510      	movs	r5, #16
    6072:	3204      	adds	r2, #4
    6074:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    6076:	3902      	subs	r1, #2
    6078:	3a01      	subs	r2, #1
    607a:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    607c:	3a02      	subs	r2, #2
    607e:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6080:	001a      	movs	r2, r3
    6082:	3284      	adds	r2, #132	; 0x84
    6084:	2400      	movs	r4, #0
    6086:	711a      	strb	r2, [r3, #4]
    6088:	0a16      	lsrs	r6, r2, #8
    608a:	715e      	strb	r6, [r3, #5]
    608c:	0c16      	lsrs	r6, r2, #16
    608e:	719e      	strb	r6, [r3, #6]
    6090:	0e12      	lsrs	r2, r2, #24
    6092:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6094:	001a      	movs	r2, r3
    6096:	3244      	adds	r2, #68	; 0x44
    6098:	701a      	strb	r2, [r3, #0]
    609a:	0a16      	lsrs	r6, r2, #8
    609c:	705e      	strb	r6, [r3, #1]
    609e:	0c16      	lsrs	r6, r2, #16
    60a0:	709e      	strb	r6, [r3, #2]
    60a2:	0e12      	lsrs	r2, r2, #24
    60a4:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    60a6:	001a      	movs	r2, r3
    60a8:	32a4      	adds	r2, #164	; 0xa4
    60aa:	721a      	strb	r2, [r3, #8]
    60ac:	0a16      	lsrs	r6, r2, #8
    60ae:	725e      	strb	r6, [r3, #9]
    60b0:	0c16      	lsrs	r6, r2, #16
    60b2:	729e      	strb	r6, [r3, #10]
    60b4:	0e12      	lsrs	r2, r2, #24
    60b6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    60b8:	001a      	movs	r2, r3
    60ba:	3265      	adds	r2, #101	; 0x65
    60bc:	32ff      	adds	r2, #255	; 0xff
    60be:	741a      	strb	r2, [r3, #16]
    60c0:	0a16      	lsrs	r6, r2, #8
    60c2:	745e      	strb	r6, [r3, #17]
    60c4:	0c16      	lsrs	r6, r2, #16
    60c6:	749e      	strb	r6, [r3, #18]
    60c8:	0e12      	lsrs	r2, r2, #24
    60ca:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    60cc:	001a      	movs	r2, r3
    60ce:	3235      	adds	r2, #53	; 0x35
    60d0:	751a      	strb	r2, [r3, #20]
    60d2:	0a16      	lsrs	r6, r2, #8
    60d4:	755e      	strb	r6, [r3, #21]
    60d6:	0c16      	lsrs	r6, r2, #16
    60d8:	759e      	strb	r6, [r3, #22]
    60da:	0e12      	lsrs	r2, r2, #24
    60dc:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    60de:	001a      	movs	r2, r3
    60e0:	323e      	adds	r2, #62	; 0x3e
    60e2:	761a      	strb	r2, [r3, #24]
    60e4:	0a16      	lsrs	r6, r2, #8
    60e6:	765e      	strb	r6, [r3, #25]
    60e8:	0c16      	lsrs	r6, r2, #16
    60ea:	769e      	strb	r6, [r3, #26]
    60ec:	0e12      	lsrs	r2, r2, #24
    60ee:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    60f0:	001a      	movs	r2, r3
    60f2:	32c5      	adds	r2, #197	; 0xc5
    60f4:	32ff      	adds	r2, #255	; 0xff
    60f6:	731a      	strb	r2, [r3, #12]
    60f8:	0a16      	lsrs	r6, r2, #8
    60fa:	735e      	strb	r6, [r3, #13]
    60fc:	0c16      	lsrs	r6, r2, #16
    60fe:	739e      	strb	r6, [r3, #14]
    6100:	0e12      	lsrs	r2, r2, #24
    6102:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    6104:	2202      	movs	r2, #2
    6106:	2622      	movs	r6, #34	; 0x22
    6108:	559a      	strb	r2, [r3, r6]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    610a:	3601      	adds	r6, #1
    610c:	559a      	strb	r2, [r3, r6]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    610e:	2600      	movs	r6, #0
    6110:	771e      	strb	r6, [r3, #28]
    6112:	3e16      	subs	r6, #22
    6114:	775e      	strb	r6, [r3, #29]
    6116:	361c      	adds	r6, #28
    6118:	779e      	strb	r6, [r3, #30]
    611a:	3631      	adds	r6, #49	; 0x31
    611c:	77de      	strb	r6, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    611e:	3e16      	subs	r6, #22
    6120:	559a      	strb	r2, [r3, r6]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    6122:	2732      	movs	r7, #50	; 0x32
    6124:	3e01      	subs	r6, #1
    6126:	559f      	strb	r7, [r3, r6]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    6128:	3e19      	subs	r6, #25
    612a:	3f0e      	subs	r7, #14
    612c:	55de      	strb	r6, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    612e:	3701      	adds	r7, #1
    6130:	55dc      	strb	r4, [r3, r7]
	RegParams.Rx1DrOffset = 7;
    6132:	3707      	adds	r7, #7
    6134:	55de      	strb	r6, [r3, r7]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    6136:	3701      	adds	r7, #1
    6138:	55de      	strb	r6, [r3, r7]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AS;
    613a:	3627      	adds	r6, #39	; 0x27
    613c:	5599      	strb	r1, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    613e:	3127      	adds	r1, #39	; 0x27
    6140:	545d      	strb	r5, [r3, r1]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    6142:	21c2      	movs	r1, #194	; 0xc2
    6144:	31ff      	adds	r1, #255	; 0xff
    6146:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    6148:	4a41      	ldr	r2, [pc, #260]	; (6250 <LORAReg_InitAS+0x1ec>)
    614a:	7815      	ldrb	r5, [r2, #0]
    614c:	3959      	subs	r1, #89	; 0x59
    614e:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    6150:	7855      	ldrb	r5, [r2, #1]
    6152:	392b      	subs	r1, #43	; 0x2b
    6154:	39ff      	subs	r1, #255	; 0xff
    6156:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    6158:	7891      	ldrb	r1, [r2, #2]
    615a:	223d      	movs	r2, #61	; 0x3d
    615c:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    615e:	001a      	movs	r2, r3
    6160:	3239      	adds	r2, #57	; 0x39
    6162:	2100      	movs	r1, #0
    6164:	7011      	strb	r1, [r2, #0]
    6166:	7051      	strb	r1, [r2, #1]
    6168:	7091      	strb	r1, [r2, #2]
    616a:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    616c:	2243      	movs	r2, #67	; 0x43
    616e:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    6170:	001a      	movs	r2, r3
    6172:	323f      	adds	r2, #63	; 0x3f
    6174:	7011      	strb	r1, [r2, #0]
    6176:	7051      	strb	r1, [r2, #1]
    6178:	7091      	strb	r1, [r2, #2]
    617a:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    617c:	21c4      	movs	r1, #196	; 0xc4
    617e:	31ff      	adds	r1, #255	; 0xff
    6180:	5c5a      	ldrb	r2, [r3, r1]
    6182:	2401      	movs	r4, #1
    6184:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    6186:	2402      	movs	r4, #2
    6188:	4322      	orrs	r2, r4
    618a:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    618c:	222f      	movs	r2, #47	; 0x2f
    618e:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6190:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    6192:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6194:	2808      	cmp	r0, #8
    6196:	d91b      	bls.n	61d0 <LORAReg_InitAS+0x16c>
	if(!initialized)
    6198:	4b2e      	ldr	r3, [pc, #184]	; (6254 <LORAReg_InitAS+0x1f0>)
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	2b00      	cmp	r3, #0
    619e:	d102      	bne.n	61a6 <LORAReg_InitAS+0x142>
		initialized = true;
    61a0:	2201      	movs	r2, #1
    61a2:	4b2c      	ldr	r3, [pc, #176]	; (6254 <LORAReg_InitAS+0x1f0>)
    61a4:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    61a6:	4b2c      	ldr	r3, [pc, #176]	; (6258 <LORAReg_InitAS+0x1f4>)
    61a8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    61aa:	4b2c      	ldr	r3, [pc, #176]	; (625c <LORAReg_InitAS+0x1f8>)
    61ac:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    61ae:	4b2c      	ldr	r3, [pc, #176]	; (6260 <LORAReg_InitAS+0x1fc>)
    61b0:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    61b2:	4b26      	ldr	r3, [pc, #152]	; (624c <LORAReg_InitAS+0x1e8>)
    61b4:	4a2b      	ldr	r2, [pc, #172]	; (6264 <LORAReg_InitAS+0x200>)
    61b6:	5c9a      	ldrb	r2, [r3, r2]
    61b8:	2185      	movs	r1, #133	; 0x85
    61ba:	0089      	lsls	r1, r1, #2
    61bc:	5c58      	ldrb	r0, [r3, r1]
    61be:	0200      	lsls	r0, r0, #8
    61c0:	4310      	orrs	r0, r2
    61c2:	b2c1      	uxtb	r1, r0
    61c4:	0a00      	lsrs	r0, r0, #8
    61c6:	4b28      	ldr	r3, [pc, #160]	; (6268 <LORAReg_InitAS+0x204>)
    61c8:	4798      	blx	r3
}
    61ca:	0020      	movs	r0, r4
    61cc:	b007      	add	sp, #28
    61ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault923Channels ();
    61d0:	4b26      	ldr	r3, [pc, #152]	; (626c <LORAReg_InitAS+0x208>)
    61d2:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    61d4:	4c1d      	ldr	r4, [pc, #116]	; (624c <LORAReg_InitAS+0x1e8>)
    61d6:	2210      	movs	r2, #16
    61d8:	23e1      	movs	r3, #225	; 0xe1
    61da:	005b      	lsls	r3, r3, #1
    61dc:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    61de:	7820      	ldrb	r0, [r4, #0]
    61e0:	7863      	ldrb	r3, [r4, #1]
    61e2:	021b      	lsls	r3, r3, #8
    61e4:	4303      	orrs	r3, r0
    61e6:	78a0      	ldrb	r0, [r4, #2]
    61e8:	0400      	lsls	r0, r0, #16
    61ea:	4303      	orrs	r3, r0
    61ec:	78e0      	ldrb	r0, [r4, #3]
    61ee:	0600      	lsls	r0, r0, #24
    61f0:	4318      	orrs	r0, r3
    61f2:	3230      	adds	r2, #48	; 0x30
    61f4:	491e      	ldr	r1, [pc, #120]	; (6270 <LORAReg_InitAS+0x20c>)
    61f6:	4b1f      	ldr	r3, [pc, #124]	; (6274 <LORAReg_InitAS+0x210>)
    61f8:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    61fa:	2304      	movs	r3, #4
    61fc:	2104      	movs	r1, #4
    61fe:	2283      	movs	r2, #131	; 0x83
    6200:	0092      	lsls	r2, r2, #2
    6202:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    6204:	2100      	movs	r1, #0
    6206:	4a1c      	ldr	r2, [pc, #112]	; (6278 <LORAReg_InitAS+0x214>)
    6208:	54a1      	strb	r1, [r4, r2]
    620a:	18a2      	adds	r2, r4, r2
    620c:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    620e:	3101      	adds	r1, #1
    6210:	4a1a      	ldr	r2, [pc, #104]	; (627c <LORAReg_InitAS+0x218>)
    6212:	54a1      	strb	r1, [r4, r2]
    6214:	18a2      	adds	r2, r4, r2
    6216:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    6218:	3101      	adds	r1, #1
    621a:	4a12      	ldr	r2, [pc, #72]	; (6264 <LORAReg_InitAS+0x200>)
    621c:	54a1      	strb	r1, [r4, r2]
    621e:	18a2      	adds	r2, r4, r2
    6220:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6222:	2200      	movs	r2, #0
    6224:	4b16      	ldr	r3, [pc, #88]	; (6280 <LORAReg_InitAS+0x21c>)
    6226:	54e2      	strb	r2, [r4, r3]
    6228:	469c      	mov	ip, r3
    622a:	4464      	add	r4, ip
    622c:	2300      	movs	r3, #0
    622e:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    6230:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    6232:	3203      	adds	r2, #3
    6234:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    6236:	4a13      	ldr	r2, [pc, #76]	; (6284 <LORAReg_InitAS+0x220>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    6238:	9200      	str	r2, [sp, #0]
    623a:	4913      	ldr	r1, [pc, #76]	; (6288 <LORAReg_InitAS+0x224>)
    623c:	9a03      	ldr	r2, [sp, #12]
    623e:	4b13      	ldr	r3, [pc, #76]	; (628c <LORAReg_InitAS+0x228>)
    6240:	2004      	movs	r0, #4
    6242:	4c13      	ldr	r4, [pc, #76]	; (6290 <LORAReg_InitAS+0x22c>)
    6244:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6246:	2408      	movs	r4, #8
    6248:	e7a6      	b.n	6198 <LORAReg_InitAS+0x134>
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	20002310 	.word	0x20002310
    6250:	2000230c 	.word	0x2000230c
    6254:	20000b08 	.word	0x20000b08
    6258:	0000aaa5 	.word	0x0000aaa5
    625c:	0000b1d5 	.word	0x0000b1d5
    6260:	0000b4a9 	.word	0x0000b4a9
    6264:	00000213 	.word	0x00000213
    6268:	0000be05 	.word	0x0000be05
    626c:	00005f61 	.word	0x00005f61
    6270:	0001d940 	.word	0x0001d940
    6274:	00017691 	.word	0x00017691
    6278:	0000020f 	.word	0x0000020f
    627c:	00000211 	.word	0x00000211
    6280:	0000020d 	.word	0x0000020d
    6284:	00005f5d 	.word	0x00005f5d
    6288:	200020ec 	.word	0x200020ec
    628c:	0001d990 	.word	0x0001d990
    6290:	0000c0e9 	.word	0x0000c0e9

00006294 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    6294:	4770      	bx	lr
	...

00006298 <LORAReg_InitAU>:
{
    6298:	b5f0      	push	{r4, r5, r6, r7, lr}
    629a:	46de      	mov	lr, fp
    629c:	4657      	mov	r7, sl
    629e:	464e      	mov	r6, r9
    62a0:	4645      	mov	r5, r8
    62a2:	b5e0      	push	{r5, r6, r7, lr}
    62a4:	b087      	sub	sp, #28
    62a6:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    62a8:	4c7d      	ldr	r4, [pc, #500]	; (64a0 <LORAReg_InitAU+0x208>)
    62aa:	2103      	movs	r1, #3
    62ac:	2326      	movs	r3, #38	; 0x26
    62ae:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    62b0:	3145      	adds	r1, #69	; 0x45
    62b2:	3304      	adds	r3, #4
    62b4:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    62b6:	3941      	subs	r1, #65	; 0x41
    62b8:	3b03      	subs	r3, #3
    62ba:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    62bc:	0020      	movs	r0, r4
    62be:	30b4      	adds	r0, #180	; 0xb4
    62c0:	2600      	movs	r6, #0
    62c2:	7120      	strb	r0, [r4, #4]
    62c4:	0a03      	lsrs	r3, r0, #8
    62c6:	7163      	strb	r3, [r4, #5]
    62c8:	0c03      	lsrs	r3, r0, #16
    62ca:	71a3      	strb	r3, [r4, #6]
    62cc:	0e03      	lsrs	r3, r0, #24
    62ce:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    62d0:	2344      	movs	r3, #68	; 0x44
    62d2:	4698      	mov	r8, r3
    62d4:	44a0      	add	r8, r4
    62d6:	4643      	mov	r3, r8
    62d8:	7023      	strb	r3, [r4, #0]
    62da:	4643      	mov	r3, r8
    62dc:	0a1b      	lsrs	r3, r3, #8
    62de:	7063      	strb	r3, [r4, #1]
    62e0:	4643      	mov	r3, r8
    62e2:	0c1b      	lsrs	r3, r3, #16
    62e4:	70a3      	strb	r3, [r4, #2]
    62e6:	4643      	mov	r3, r8
    62e8:	0e1b      	lsrs	r3, r3, #24
    62ea:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    62ec:	2321      	movs	r3, #33	; 0x21
    62ee:	25ff      	movs	r5, #255	; 0xff
    62f0:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    62f2:	3df7      	subs	r5, #247	; 0xf7
    62f4:	2708      	movs	r7, #8
    62f6:	3301      	adds	r3, #1
    62f8:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    62fa:	3301      	adds	r3, #1
    62fc:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    62fe:	3b83      	subs	r3, #131	; 0x83
    6300:	469c      	mov	ip, r3
    6302:	7723      	strb	r3, [r4, #28]
    6304:	2370      	movs	r3, #112	; 0x70
    6306:	7763      	strb	r3, [r4, #29]
    6308:	77a7      	strb	r7, [r4, #30]
    630a:	3b39      	subs	r3, #57	; 0x39
    630c:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    630e:	3301      	adds	r3, #1
    6310:	4699      	mov	r9, r3
    6312:	3b18      	subs	r3, #24
    6314:	464a      	mov	r2, r9
    6316:	54e2      	strb	r2, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    6318:	2224      	movs	r2, #36	; 0x24
    631a:	3b1a      	subs	r3, #26
    631c:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    631e:	3201      	adds	r2, #1
    6320:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    6322:	321b      	adds	r2, #27
    6324:	4692      	mov	sl, r2
    6326:	3215      	adds	r2, #21
    6328:	32ff      	adds	r2, #255	; 0xff
    632a:	4653      	mov	r3, sl
    632c:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    632e:	2356      	movs	r3, #86	; 0x56
    6330:	33ff      	adds	r3, #255	; 0xff
    6332:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    6334:	3b05      	subs	r3, #5
    6336:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    6338:	2352      	movs	r3, #82	; 0x52
    633a:	33ff      	adds	r3, #255	; 0xff
    633c:	3a4f      	subs	r2, #79	; 0x4f
    633e:	3aff      	subs	r2, #255	; 0xff
    6340:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    6342:	3301      	adds	r3, #1
    6344:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    6346:	3b46      	subs	r3, #70	; 0x46
    6348:	3bff      	subs	r3, #255	; 0xff
    634a:	4699      	mov	r9, r3
    634c:	2354      	movs	r3, #84	; 0x54
    634e:	33ff      	adds	r3, #255	; 0xff
    6350:	464a      	mov	r2, r9
    6352:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    6354:	3303      	adds	r3, #3
    6356:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    6358:	2300      	movs	r3, #0
    635a:	4699      	mov	r9, r3
    635c:	3345      	adds	r3, #69	; 0x45
    635e:	33ff      	adds	r3, #255	; 0xff
    6360:	464a      	mov	r2, r9
    6362:	54e2      	strb	r2, [r4, r3]
    6364:	0023      	movs	r3, r4
    6366:	3345      	adds	r3, #69	; 0x45
    6368:	33ff      	adds	r3, #255	; 0xff
    636a:	2228      	movs	r2, #40	; 0x28
    636c:	4252      	negs	r2, r2
    636e:	705a      	strb	r2, [r3, #1]
    6370:	2274      	movs	r2, #116	; 0x74
    6372:	4252      	negs	r2, r2
    6374:	709a      	strb	r2, [r3, #2]
    6376:	2236      	movs	r2, #54	; 0x36
    6378:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    637a:	2360      	movs	r3, #96	; 0x60
    637c:	4699      	mov	r9, r3
    637e:	33e8      	adds	r3, #232	; 0xe8
    6380:	464a      	mov	r2, r9
    6382:	54e2      	strb	r2, [r4, r3]
    6384:	0023      	movs	r3, r4
    6386:	3349      	adds	r3, #73	; 0x49
    6388:	33ff      	adds	r3, #255	; 0xff
    638a:	227a      	movs	r2, #122	; 0x7a
    638c:	4252      	negs	r2, r2
    638e:	705a      	strb	r2, [r3, #1]
    6390:	2269      	movs	r2, #105	; 0x69
    6392:	4252      	negs	r2, r2
    6394:	709a      	strb	r2, [r3, #2]
    6396:	2236      	movs	r2, #54	; 0x36
    6398:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    639a:	23a6      	movs	r3, #166	; 0xa6
    639c:	005b      	lsls	r3, r3, #1
    639e:	4662      	mov	r2, ip
    63a0:	54e2      	strb	r2, [r4, r3]
    63a2:	0023      	movs	r3, r4
    63a4:	334d      	adds	r3, #77	; 0x4d
    63a6:	33ff      	adds	r3, #255	; 0xff
    63a8:	2270      	movs	r2, #112	; 0x70
    63aa:	705a      	strb	r2, [r3, #1]
    63ac:	709f      	strb	r7, [r3, #2]
    63ae:	2237      	movs	r2, #55	; 0x37
    63b0:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    63b2:	0023      	movs	r3, r4
    63b4:	3335      	adds	r3, #53	; 0x35
    63b6:	7523      	strb	r3, [r4, #20]
    63b8:	0a1a      	lsrs	r2, r3, #8
    63ba:	7562      	strb	r2, [r4, #21]
    63bc:	0c1a      	lsrs	r2, r3, #16
    63be:	75a2      	strb	r2, [r4, #22]
    63c0:	0e1b      	lsrs	r3, r3, #24
    63c2:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    63c4:	0023      	movs	r3, r4
    63c6:	333e      	adds	r3, #62	; 0x3e
    63c8:	7623      	strb	r3, [r4, #24]
    63ca:	0a1a      	lsrs	r2, r3, #8
    63cc:	7662      	strb	r2, [r4, #25]
    63ce:	0c1a      	lsrs	r2, r3, #16
    63d0:	76a2      	strb	r2, [r4, #26]
    63d2:	0e1b      	lsrs	r3, r3, #24
    63d4:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    63d6:	2305      	movs	r3, #5
    63d8:	469c      	mov	ip, r3
    63da:	3327      	adds	r3, #39	; 0x27
    63dc:	4662      	mov	r2, ip
    63de:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    63e0:	3b22      	subs	r3, #34	; 0x22
    63e2:	469c      	mov	ip, r3
    63e4:	3323      	adds	r3, #35	; 0x23
    63e6:	4662      	mov	r2, ip
    63e8:	54e2      	strb	r2, [r4, r3]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AU;
    63ea:	3301      	adds	r3, #1
    63ec:	54e1      	strb	r1, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    63ee:	3117      	adds	r1, #23
    63f0:	3b06      	subs	r3, #6
    63f2:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    63f4:	3331      	adds	r3, #49	; 0x31
    63f6:	33ff      	adds	r3, #255	; 0xff
    63f8:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    63fa:	4b2a      	ldr	r3, [pc, #168]	; (64a4 <LORAReg_InitAU+0x20c>)
    63fc:	781a      	ldrb	r2, [r3, #0]
    63fe:	3120      	adds	r1, #32
    6400:	5462      	strb	r2, [r4, r1]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    6402:	7859      	ldrb	r1, [r3, #1]
    6404:	233d      	movs	r3, #61	; 0x3d
    6406:	54e1      	strb	r1, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    6408:	0023      	movs	r3, r4
    640a:	3339      	adds	r3, #57	; 0x39
    640c:	2100      	movs	r1, #0
    640e:	7019      	strb	r1, [r3, #0]
    6410:	7059      	strb	r1, [r3, #1]
    6412:	7099      	strb	r1, [r3, #2]
    6414:	70d9      	strb	r1, [r3, #3]
	RegParams.joinbccount =0;
    6416:	2343      	movs	r3, #67	; 0x43
    6418:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    641a:	0023      	movs	r3, r4
    641c:	333f      	adds	r3, #63	; 0x3f
    641e:	7019      	strb	r1, [r3, #0]
    6420:	7059      	strb	r1, [r3, #1]
    6422:	7099      	strb	r1, [r3, #2]
    6424:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    6426:	232f      	movs	r3, #47	; 0x2f
    6428:	465a      	mov	r2, fp
    642a:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    642c:	2290      	movs	r2, #144	; 0x90
    642e:	491e      	ldr	r1, [pc, #120]	; (64a8 <LORAReg_InitAU+0x210>)
    6430:	4b1e      	ldr	r3, [pc, #120]	; (64ac <LORAReg_InitAU+0x214>)
    6432:	4699      	mov	r9, r3
    6434:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    6436:	2270      	movs	r2, #112	; 0x70
    6438:	491d      	ldr	r1, [pc, #116]	; (64b0 <LORAReg_InitAU+0x218>)
    643a:	4640      	mov	r0, r8
    643c:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    643e:	2358      	movs	r3, #88	; 0x58
    6440:	33ff      	adds	r3, #255	; 0xff
    6442:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    6444:	33b5      	adds	r3, #181	; 0xb5
    6446:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    6448:	2200      	movs	r2, #0
    644a:	4b1a      	ldr	r3, [pc, #104]	; (64b4 <LORAReg_InitAU+0x21c>)
    644c:	54e2      	strb	r2, [r4, r3]
    644e:	18e3      	adds	r3, r4, r3
    6450:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    6452:	4b19      	ldr	r3, [pc, #100]	; (64b8 <LORAReg_InitAU+0x220>)
    6454:	54e2      	strb	r2, [r4, r3]
    6456:	18e3      	adds	r3, r4, r3
    6458:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    645a:	4b18      	ldr	r3, [pc, #96]	; (64bc <LORAReg_InitAU+0x224>)
    645c:	54e2      	strb	r2, [r4, r3]
    645e:	18e3      	adds	r3, r4, r3
    6460:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    6462:	3201      	adds	r2, #1
    6464:	4b16      	ldr	r3, [pc, #88]	; (64c0 <LORAReg_InitAU+0x228>)
    6466:	54e2      	strb	r2, [r4, r3]
    6468:	469c      	mov	ip, r3
    646a:	4464      	add	r4, ip
    646c:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    646e:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    6470:	3201      	adds	r2, #1
    6472:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    6474:	4a13      	ldr	r2, [pc, #76]	; (64c4 <LORAReg_InitAU+0x22c>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    6476:	9200      	str	r2, [sp, #0]
    6478:	4913      	ldr	r1, [pc, #76]	; (64c8 <LORAReg_InitAU+0x230>)
    647a:	9a03      	ldr	r2, [sp, #12]
    647c:	4b13      	ldr	r3, [pc, #76]	; (64cc <LORAReg_InitAU+0x234>)
    647e:	2008      	movs	r0, #8
    6480:	4c13      	ldr	r4, [pc, #76]	; (64d0 <LORAReg_InitAU+0x238>)
    6482:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    6484:	4b13      	ldr	r3, [pc, #76]	; (64d4 <LORAReg_InitAU+0x23c>)
    6486:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    6488:	4b13      	ldr	r3, [pc, #76]	; (64d8 <LORAReg_InitAU+0x240>)
    648a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    648c:	4b13      	ldr	r3, [pc, #76]	; (64dc <LORAReg_InitAU+0x244>)
    648e:	4798      	blx	r3
}
    6490:	2008      	movs	r0, #8
    6492:	b007      	add	sp, #28
    6494:	bc3c      	pop	{r2, r3, r4, r5}
    6496:	4690      	mov	r8, r2
    6498:	4699      	mov	r9, r3
    649a:	46a2      	mov	sl, r4
    649c:	46ab      	mov	fp, r5
    649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64a0:	20002310 	.word	0x20002310
    64a4:	2000230c 	.word	0x2000230c
    64a8:	0001d9a8 	.word	0x0001d9a8
    64ac:	00017691 	.word	0x00017691
    64b0:	0001da38 	.word	0x0001da38
    64b4:	0000020f 	.word	0x0000020f
    64b8:	00000211 	.word	0x00000211
    64bc:	00000213 	.word	0x00000213
    64c0:	0000020d 	.word	0x0000020d
    64c4:	00006295 	.word	0x00006295
    64c8:	200020f0 	.word	0x200020f0
    64cc:	0001daa8 	.word	0x0001daa8
    64d0:	0000c0e9 	.word	0x0000c0e9
    64d4:	0000abed 	.word	0x0000abed
    64d8:	0000b241 	.word	0x0000b241
    64dc:	0000b51d 	.word	0x0000b51d

000064e0 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    64e0:	4770      	bx	lr
	...

000064e4 <InitDefault868Channels>:
{
    64e4:	b570      	push	{r4, r5, r6, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    64e6:	4c39      	ldr	r4, [pc, #228]	; (65cc <InitDefault868Channels+0xe8>)
    64e8:	7920      	ldrb	r0, [r4, #4]
    64ea:	7963      	ldrb	r3, [r4, #5]
    64ec:	021b      	lsls	r3, r3, #8
    64ee:	4303      	orrs	r3, r0
    64f0:	79a0      	ldrb	r0, [r4, #6]
    64f2:	0400      	lsls	r0, r0, #16
    64f4:	4303      	orrs	r3, r0
    64f6:	79e0      	ldrb	r0, [r4, #7]
    64f8:	0600      	lsls	r0, r0, #24
    64fa:	4318      	orrs	r0, r3
    64fc:	2206      	movs	r2, #6
    64fe:	2100      	movs	r1, #0
    6500:	4e33      	ldr	r6, [pc, #204]	; (65d0 <InitDefault868Channels+0xec>)
    6502:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    6504:	7920      	ldrb	r0, [r4, #4]
    6506:	7963      	ldrb	r3, [r4, #5]
    6508:	021b      	lsls	r3, r3, #8
    650a:	4303      	orrs	r3, r0
    650c:	79a0      	ldrb	r0, [r4, #6]
    650e:	0400      	lsls	r0, r0, #16
    6510:	4303      	orrs	r3, r0
    6512:	79e0      	ldrb	r0, [r4, #7]
    6514:	0600      	lsls	r0, r0, #24
    6516:	4318      	orrs	r0, r3
    6518:	2206      	movs	r2, #6
    651a:	492e      	ldr	r1, [pc, #184]	; (65d4 <InitDefault868Channels+0xf0>)
    651c:	4d2e      	ldr	r5, [pc, #184]	; (65d8 <InitDefault868Channels+0xf4>)
    651e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    6520:	7a20      	ldrb	r0, [r4, #8]
    6522:	7a63      	ldrb	r3, [r4, #9]
    6524:	021b      	lsls	r3, r3, #8
    6526:	4303      	orrs	r3, r0
    6528:	7aa0      	ldrb	r0, [r4, #10]
    652a:	0400      	lsls	r0, r0, #16
    652c:	4303      	orrs	r3, r0
    652e:	7ae0      	ldrb	r0, [r4, #11]
    6530:	0600      	lsls	r0, r0, #24
    6532:	4318      	orrs	r0, r3
    6534:	2224      	movs	r2, #36	; 0x24
    6536:	2100      	movs	r1, #0
    6538:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    653a:	7a20      	ldrb	r0, [r4, #8]
    653c:	7a63      	ldrb	r3, [r4, #9]
    653e:	021b      	lsls	r3, r3, #8
    6540:	4303      	orrs	r3, r0
    6542:	7aa0      	ldrb	r0, [r4, #10]
    6544:	0400      	lsls	r0, r0, #16
    6546:	4303      	orrs	r3, r0
    6548:	7ae0      	ldrb	r0, [r4, #11]
    654a:	0600      	lsls	r0, r0, #24
    654c:	4318      	orrs	r0, r3
    654e:	2224      	movs	r2, #36	; 0x24
    6550:	4922      	ldr	r1, [pc, #136]	; (65dc <InitDefault868Channels+0xf8>)
    6552:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    6554:	7b20      	ldrb	r0, [r4, #12]
    6556:	7b63      	ldrb	r3, [r4, #13]
    6558:	021b      	lsls	r3, r3, #8
    655a:	4303      	orrs	r3, r0
    655c:	7ba0      	ldrb	r0, [r4, #14]
    655e:	0400      	lsls	r0, r0, #16
    6560:	4303      	orrs	r3, r0
    6562:	7be0      	ldrb	r0, [r4, #15]
    6564:	0600      	lsls	r0, r0, #24
    6566:	4318      	orrs	r0, r3
    6568:	2248      	movs	r2, #72	; 0x48
    656a:	2100      	movs	r1, #0
    656c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    656e:	7b20      	ldrb	r0, [r4, #12]
    6570:	7b63      	ldrb	r3, [r4, #13]
    6572:	021b      	lsls	r3, r3, #8
    6574:	4303      	orrs	r3, r0
    6576:	7ba0      	ldrb	r0, [r4, #14]
    6578:	0400      	lsls	r0, r0, #16
    657a:	4303      	orrs	r3, r0
    657c:	7be0      	ldrb	r0, [r4, #15]
    657e:	0600      	lsls	r0, r0, #24
    6580:	4318      	orrs	r0, r3
    6582:	2248      	movs	r2, #72	; 0x48
    6584:	4916      	ldr	r1, [pc, #88]	; (65e0 <InitDefault868Channels+0xfc>)
    6586:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    6588:	0020      	movs	r0, r4
    658a:	30af      	adds	r0, #175	; 0xaf
    658c:	30ff      	adds	r0, #255	; 0xff
    658e:	220c      	movs	r2, #12
    6590:	4914      	ldr	r1, [pc, #80]	; (65e4 <InitDefault868Channels+0x100>)
    6592:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    6594:	232a      	movs	r3, #42	; 0x2a
    6596:	56e3      	ldrsb	r3, [r4, r3]
    6598:	2b03      	cmp	r3, #3
    659a:	dd15      	ble.n	65c8 <InitDefault868Channels+0xe4>
    659c:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    659e:	480b      	ldr	r0, [pc, #44]	; (65cc <InitDefault868Channels+0xe8>)
    65a0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    65a2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    65a4:	7902      	ldrb	r2, [r0, #4]
    65a6:	7941      	ldrb	r1, [r0, #5]
    65a8:	0209      	lsls	r1, r1, #8
    65aa:	4311      	orrs	r1, r2
    65ac:	7982      	ldrb	r2, [r0, #6]
    65ae:	0412      	lsls	r2, r2, #16
    65b0:	4311      	orrs	r1, r2
    65b2:	79c2      	ldrb	r2, [r0, #7]
    65b4:	0612      	lsls	r2, r2, #24
    65b6:	430a      	orrs	r2, r1
    65b8:	0059      	lsls	r1, r3, #1
    65ba:	188a      	adds	r2, r1, r2
    65bc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    65be:	3301      	adds	r3, #1
    65c0:	b2db      	uxtb	r3, r3
    65c2:	5702      	ldrsb	r2, [r0, r4]
    65c4:	4293      	cmp	r3, r2
    65c6:	dbed      	blt.n	65a4 <InitDefault868Channels+0xc0>
}
    65c8:	bd70      	pop	{r4, r5, r6, pc}
    65ca:	46c0      	nop			; (mov r8, r8)
    65cc:	20002310 	.word	0x20002310
    65d0:	00017715 	.word	0x00017715
    65d4:	0001db08 	.word	0x0001db08
    65d8:	00017691 	.word	0x00017691
    65dc:	0001dadc 	.word	0x0001dadc
    65e0:	0001db68 	.word	0x0001db68
    65e4:	0001db50 	.word	0x0001db50

000065e8 <InitDefault433Channels>:
{
    65e8:	b570      	push	{r4, r5, r6, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    65ea:	4c36      	ldr	r4, [pc, #216]	; (66c4 <InitDefault433Channels+0xdc>)
    65ec:	7920      	ldrb	r0, [r4, #4]
    65ee:	7963      	ldrb	r3, [r4, #5]
    65f0:	021b      	lsls	r3, r3, #8
    65f2:	4303      	orrs	r3, r0
    65f4:	79a0      	ldrb	r0, [r4, #6]
    65f6:	0400      	lsls	r0, r0, #16
    65f8:	4303      	orrs	r3, r0
    65fa:	79e0      	ldrb	r0, [r4, #7]
    65fc:	0600      	lsls	r0, r0, #24
    65fe:	4318      	orrs	r0, r3
    6600:	2206      	movs	r2, #6
    6602:	2100      	movs	r1, #0
    6604:	4e30      	ldr	r6, [pc, #192]	; (66c8 <InitDefault433Channels+0xe0>)
    6606:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    6608:	7920      	ldrb	r0, [r4, #4]
    660a:	7963      	ldrb	r3, [r4, #5]
    660c:	021b      	lsls	r3, r3, #8
    660e:	4303      	orrs	r3, r0
    6610:	79a0      	ldrb	r0, [r4, #6]
    6612:	0400      	lsls	r0, r0, #16
    6614:	4303      	orrs	r3, r0
    6616:	79e0      	ldrb	r0, [r4, #7]
    6618:	0600      	lsls	r0, r0, #24
    661a:	4318      	orrs	r0, r3
    661c:	2206      	movs	r2, #6
    661e:	492b      	ldr	r1, [pc, #172]	; (66cc <InitDefault433Channels+0xe4>)
    6620:	4d2b      	ldr	r5, [pc, #172]	; (66d0 <InitDefault433Channels+0xe8>)
    6622:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    6624:	7a20      	ldrb	r0, [r4, #8]
    6626:	7a63      	ldrb	r3, [r4, #9]
    6628:	021b      	lsls	r3, r3, #8
    662a:	4303      	orrs	r3, r0
    662c:	7aa0      	ldrb	r0, [r4, #10]
    662e:	0400      	lsls	r0, r0, #16
    6630:	4303      	orrs	r3, r0
    6632:	7ae0      	ldrb	r0, [r4, #11]
    6634:	0600      	lsls	r0, r0, #24
    6636:	4318      	orrs	r0, r3
    6638:	2224      	movs	r2, #36	; 0x24
    663a:	2100      	movs	r1, #0
    663c:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    663e:	7a20      	ldrb	r0, [r4, #8]
    6640:	7a63      	ldrb	r3, [r4, #9]
    6642:	021b      	lsls	r3, r3, #8
    6644:	4303      	orrs	r3, r0
    6646:	7aa0      	ldrb	r0, [r4, #10]
    6648:	0400      	lsls	r0, r0, #16
    664a:	4303      	orrs	r3, r0
    664c:	7ae0      	ldrb	r0, [r4, #11]
    664e:	0600      	lsls	r0, r0, #24
    6650:	4318      	orrs	r0, r3
    6652:	2224      	movs	r2, #36	; 0x24
    6654:	491f      	ldr	r1, [pc, #124]	; (66d4 <InitDefault433Channels+0xec>)
    6656:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    6658:	7b20      	ldrb	r0, [r4, #12]
    665a:	7b63      	ldrb	r3, [r4, #13]
    665c:	021b      	lsls	r3, r3, #8
    665e:	4303      	orrs	r3, r0
    6660:	7ba0      	ldrb	r0, [r4, #14]
    6662:	0400      	lsls	r0, r0, #16
    6664:	4303      	orrs	r3, r0
    6666:	7be0      	ldrb	r0, [r4, #15]
    6668:	0600      	lsls	r0, r0, #24
    666a:	4318      	orrs	r0, r3
    666c:	220c      	movs	r2, #12
    666e:	2100      	movs	r1, #0
    6670:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    6672:	7b20      	ldrb	r0, [r4, #12]
    6674:	7b63      	ldrb	r3, [r4, #13]
    6676:	021b      	lsls	r3, r3, #8
    6678:	4303      	orrs	r3, r0
    667a:	7ba0      	ldrb	r0, [r4, #14]
    667c:	0400      	lsls	r0, r0, #16
    667e:	4303      	orrs	r3, r0
    6680:	7be0      	ldrb	r0, [r4, #15]
    6682:	0600      	lsls	r0, r0, #24
    6684:	4318      	orrs	r0, r3
    6686:	220c      	movs	r2, #12
    6688:	4913      	ldr	r1, [pc, #76]	; (66d8 <InitDefault433Channels+0xf0>)
    668a:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    668c:	232a      	movs	r3, #42	; 0x2a
    668e:	56e3      	ldrsb	r3, [r4, r3]
    6690:	2b03      	cmp	r3, #3
    6692:	dd15      	ble.n	66c0 <InitDefault433Channels+0xd8>
    6694:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6696:	480b      	ldr	r0, [pc, #44]	; (66c4 <InitDefault433Channels+0xdc>)
    6698:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    669a:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    669c:	7902      	ldrb	r2, [r0, #4]
    669e:	7941      	ldrb	r1, [r0, #5]
    66a0:	0209      	lsls	r1, r1, #8
    66a2:	4311      	orrs	r1, r2
    66a4:	7982      	ldrb	r2, [r0, #6]
    66a6:	0412      	lsls	r2, r2, #16
    66a8:	4311      	orrs	r1, r2
    66aa:	79c2      	ldrb	r2, [r0, #7]
    66ac:	0612      	lsls	r2, r2, #24
    66ae:	430a      	orrs	r2, r1
    66b0:	0059      	lsls	r1, r3, #1
    66b2:	188a      	adds	r2, r1, r2
    66b4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    66b6:	3301      	adds	r3, #1
    66b8:	b2db      	uxtb	r3, r3
    66ba:	5702      	ldrsb	r2, [r0, r4]
    66bc:	4293      	cmp	r3, r2
    66be:	dbed      	blt.n	669c <InitDefault433Channels+0xb4>
}
    66c0:	bd70      	pop	{r4, r5, r6, pc}
    66c2:	46c0      	nop			; (mov r8, r8)
    66c4:	20002310 	.word	0x20002310
    66c8:	00017715 	.word	0x00017715
    66cc:	0001db00 	.word	0x0001db00
    66d0:	00017691 	.word	0x00017691
    66d4:	0001dab8 	.word	0x0001dab8
    66d8:	0001db5c 	.word	0x0001db5c

000066dc <LORAReg_InitEU>:
{
    66dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    66de:	46c6      	mov	lr, r8
    66e0:	b500      	push	{lr}
    66e2:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    66e4:	4b7b      	ldr	r3, [pc, #492]	; (68d4 <LORAReg_InitEU+0x1f8>)
    66e6:	2103      	movs	r1, #3
    66e8:	2226      	movs	r2, #38	; 0x26
    66ea:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    66ec:	2510      	movs	r5, #16
    66ee:	3204      	adds	r2, #4
    66f0:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    66f2:	2406      	movs	r4, #6
    66f4:	3a01      	subs	r2, #1
    66f6:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    66f8:	2601      	movs	r6, #1
    66fa:	3a02      	subs	r2, #2
    66fc:	549e      	strb	r6, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    66fe:	001a      	movs	r2, r3
    6700:	3284      	adds	r2, #132	; 0x84
    6702:	2400      	movs	r4, #0
    6704:	711a      	strb	r2, [r3, #4]
    6706:	0a17      	lsrs	r7, r2, #8
    6708:	715f      	strb	r7, [r3, #5]
    670a:	0c17      	lsrs	r7, r2, #16
    670c:	719f      	strb	r7, [r3, #6]
    670e:	0e12      	lsrs	r2, r2, #24
    6710:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6712:	001a      	movs	r2, r3
    6714:	3244      	adds	r2, #68	; 0x44
    6716:	701a      	strb	r2, [r3, #0]
    6718:	0a17      	lsrs	r7, r2, #8
    671a:	705f      	strb	r7, [r3, #1]
    671c:	0c17      	lsrs	r7, r2, #16
    671e:	709f      	strb	r7, [r3, #2]
    6720:	0e12      	lsrs	r2, r2, #24
    6722:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    6724:	001a      	movs	r2, r3
    6726:	32c5      	adds	r2, #197	; 0xc5
    6728:	32ff      	adds	r2, #255	; 0xff
    672a:	731a      	strb	r2, [r3, #12]
    672c:	0a17      	lsrs	r7, r2, #8
    672e:	735f      	strb	r7, [r3, #13]
    6730:	0c17      	lsrs	r7, r2, #16
    6732:	739f      	strb	r7, [r3, #14]
    6734:	0e12      	lsrs	r2, r2, #24
    6736:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6738:	001a      	movs	r2, r3
    673a:	32a4      	adds	r2, #164	; 0xa4
    673c:	721a      	strb	r2, [r3, #8]
    673e:	0a17      	lsrs	r7, r2, #8
    6740:	725f      	strb	r7, [r3, #9]
    6742:	0c17      	lsrs	r7, r2, #16
    6744:	729f      	strb	r7, [r3, #10]
    6746:	0e12      	lsrs	r2, r2, #24
    6748:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    674a:	001a      	movs	r2, r3
    674c:	3265      	adds	r2, #101	; 0x65
    674e:	32ff      	adds	r2, #255	; 0xff
    6750:	741a      	strb	r2, [r3, #16]
    6752:	0a17      	lsrs	r7, r2, #8
    6754:	745f      	strb	r7, [r3, #17]
    6756:	0c17      	lsrs	r7, r2, #16
    6758:	749f      	strb	r7, [r3, #18]
    675a:	0e12      	lsrs	r2, r2, #24
    675c:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    675e:	001a      	movs	r2, r3
    6760:	3235      	adds	r2, #53	; 0x35
    6762:	751a      	strb	r2, [r3, #20]
    6764:	0a17      	lsrs	r7, r2, #8
    6766:	755f      	strb	r7, [r3, #21]
    6768:	0c17      	lsrs	r7, r2, #16
    676a:	759f      	strb	r7, [r3, #22]
    676c:	0e12      	lsrs	r2, r2, #24
    676e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    6770:	001a      	movs	r2, r3
    6772:	323e      	adds	r2, #62	; 0x3e
    6774:	761a      	strb	r2, [r3, #24]
    6776:	0a17      	lsrs	r7, r2, #8
    6778:	765f      	strb	r7, [r3, #25]
    677a:	0c17      	lsrs	r7, r2, #16
    677c:	769f      	strb	r7, [r3, #26]
    677e:	0e12      	lsrs	r2, r2, #24
    6780:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    6782:	2221      	movs	r2, #33	; 0x21
    6784:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    6786:	2722      	movs	r7, #34	; 0x22
    6788:	3a01      	subs	r2, #1
    678a:	549f      	strb	r7, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    678c:	3a19      	subs	r2, #25
    678e:	4690      	mov	r8, r2
    6790:	3702      	adds	r7, #2
    6792:	55da      	strb	r2, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    6794:	3701      	adds	r7, #1
    6796:	55dc      	strb	r4, [r3, r7]
	RegParams.Rx1DrOffset = 5;
    6798:	3f20      	subs	r7, #32
    679a:	46bc      	mov	ip, r7
    679c:	3727      	adds	r7, #39	; 0x27
    679e:	4662      	mov	r2, ip
    67a0:	55da      	strb	r2, [r3, r7]
	RegParams.maxTxPwrIndx = 7;
    67a2:	3701      	adds	r7, #1
    67a4:	4642      	mov	r2, r8
    67a6:	55da      	strb	r2, [r3, r7]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_EU;
    67a8:	222e      	movs	r2, #46	; 0x2e
    67aa:	549e      	strb	r6, [r3, r2]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    67ac:	22c2      	movs	r2, #194	; 0xc2
    67ae:	32ff      	adds	r2, #255	; 0xff
    67b0:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    67b2:	3a9a      	subs	r2, #154	; 0x9a
    67b4:	3aff      	subs	r2, #255	; 0xff
    67b6:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    67b8:	4a47      	ldr	r2, [pc, #284]	; (68d8 <LORAReg_InitEU+0x1fc>)
    67ba:	7815      	ldrb	r5, [r2, #0]
    67bc:	3166      	adds	r1, #102	; 0x66
    67be:	31ff      	adds	r1, #255	; 0xff
    67c0:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    67c2:	7855      	ldrb	r5, [r2, #1]
    67c4:	392b      	subs	r1, #43	; 0x2b
    67c6:	39ff      	subs	r1, #255	; 0xff
    67c8:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    67ca:	7891      	ldrb	r1, [r2, #2]
    67cc:	223d      	movs	r2, #61	; 0x3d
    67ce:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    67d0:	001a      	movs	r2, r3
    67d2:	3239      	adds	r2, #57	; 0x39
    67d4:	2100      	movs	r1, #0
    67d6:	7011      	strb	r1, [r2, #0]
    67d8:	7051      	strb	r1, [r2, #1]
    67da:	7091      	strb	r1, [r2, #2]
    67dc:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    67de:	2243      	movs	r2, #67	; 0x43
    67e0:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    67e2:	001a      	movs	r2, r3
    67e4:	323f      	adds	r2, #63	; 0x3f
    67e6:	7011      	strb	r1, [r2, #0]
    67e8:	7051      	strb	r1, [r2, #1]
    67ea:	7091      	strb	r1, [r2, #2]
    67ec:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    67ee:	222f      	movs	r2, #47	; 0x2f
    67f0:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    67f2:	2800      	cmp	r0, #0
    67f4:	d007      	beq.n	6806 <LORAReg_InitEU+0x12a>
		return UNSUPPORTED_BAND;
    67f6:	23c7      	movs	r3, #199	; 0xc7
	else if(ismBand == ISM_EU433)
    67f8:	2801      	cmp	r0, #1
    67fa:	d058      	beq.n	68ae <LORAReg_InitEU+0x1d2>
}
    67fc:	0018      	movs	r0, r3
    67fe:	b00a      	add	sp, #40	; 0x28
    6800:	bc04      	pop	{r2}
    6802:	4690      	mov	r8, r2
    6804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault868Channels ();
    6806:	4b35      	ldr	r3, [pc, #212]	; (68dc <LORAReg_InitEU+0x200>)
    6808:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    680a:	4b32      	ldr	r3, [pc, #200]	; (68d4 <LORAReg_InitEU+0x1f8>)
    680c:	2200      	movs	r2, #0
    680e:	2122      	movs	r1, #34	; 0x22
    6810:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    6812:	3101      	adds	r1, #1
    6814:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    6816:	3208      	adds	r2, #8
    6818:	771a      	strb	r2, [r3, #28]
    681a:	3a22      	subs	r2, #34	; 0x22
    681c:	775a      	strb	r2, [r3, #29]
    681e:	3a13      	subs	r2, #19
    6820:	779a      	strb	r2, [r3, #30]
    6822:	3260      	adds	r2, #96	; 0x60
    6824:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    6826:	3920      	subs	r1, #32
    6828:	32da      	adds	r2, #218	; 0xda
    682a:	32ff      	adds	r2, #255	; 0xff
    682c:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    682e:	2100      	movs	r1, #0
    6830:	4a2b      	ldr	r2, [pc, #172]	; (68e0 <LORAReg_InitEU+0x204>)
    6832:	5499      	strb	r1, [r3, r2]
    6834:	189a      	adds	r2, r3, r2
    6836:	2103      	movs	r1, #3
    6838:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    683a:	2100      	movs	r1, #0
    683c:	4a29      	ldr	r2, [pc, #164]	; (68e4 <LORAReg_InitEU+0x208>)
    683e:	5499      	strb	r1, [r3, r2]
    6840:	189a      	adds	r2, r3, r2
    6842:	310b      	adds	r1, #11
    6844:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    6846:	2100      	movs	r1, #0
    6848:	4a27      	ldr	r2, [pc, #156]	; (68e8 <LORAReg_InitEU+0x20c>)
    684a:	5499      	strb	r1, [r3, r2]
    684c:	189a      	adds	r2, r3, r2
    684e:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6850:	4a26      	ldr	r2, [pc, #152]	; (68ec <LORAReg_InitEU+0x210>)
    6852:	5499      	strb	r1, [r3, r2]
    6854:	4694      	mov	ip, r2
    6856:	4463      	add	r3, ip
    6858:	2200      	movs	r2, #0
    685a:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    685c:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    685e:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    6860:	4d23      	ldr	r5, [pc, #140]	; (68f0 <LORAReg_InitEU+0x214>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    6862:	9500      	str	r5, [sp, #0]
    6864:	4923      	ldr	r1, [pc, #140]	; (68f4 <LORAReg_InitEU+0x218>)
    6866:	9a03      	ldr	r2, [sp, #12]
    6868:	4b23      	ldr	r3, [pc, #140]	; (68f8 <LORAReg_InitEU+0x21c>)
    686a:	2003      	movs	r0, #3
    686c:	4c23      	ldr	r4, [pc, #140]	; (68fc <LORAReg_InitEU+0x220>)
    686e:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    6870:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    6872:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    6874:	9500      	str	r5, [sp, #0]
    6876:	4922      	ldr	r1, [pc, #136]	; (6900 <LORAReg_InitEU+0x224>)
    6878:	9a07      	ldr	r2, [sp, #28]
    687a:	4b22      	ldr	r3, [pc, #136]	; (6904 <LORAReg_InitEU+0x228>)
    687c:	200b      	movs	r0, #11
    687e:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    6880:	4a14      	ldr	r2, [pc, #80]	; (68d4 <LORAReg_InitEU+0x1f8>)
    6882:	7810      	ldrb	r0, [r2, #0]
    6884:	7853      	ldrb	r3, [r2, #1]
    6886:	021b      	lsls	r3, r3, #8
    6888:	4303      	orrs	r3, r0
    688a:	7890      	ldrb	r0, [r2, #2]
    688c:	0400      	lsls	r0, r0, #16
    688e:	4303      	orrs	r3, r0
    6890:	78d0      	ldrb	r0, [r2, #3]
    6892:	0600      	lsls	r0, r0, #24
    6894:	4318      	orrs	r0, r3
    6896:	2240      	movs	r2, #64	; 0x40
    6898:	491b      	ldr	r1, [pc, #108]	; (6908 <LORAReg_InitEU+0x22c>)
    689a:	4b1c      	ldr	r3, [pc, #112]	; (690c <LORAReg_InitEU+0x230>)
    689c:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    689e:	4b1c      	ldr	r3, [pc, #112]	; (6910 <LORAReg_InitEU+0x234>)
    68a0:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    68a2:	4b1c      	ldr	r3, [pc, #112]	; (6914 <LORAReg_InitEU+0x238>)
    68a4:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    68a6:	4b1c      	ldr	r3, [pc, #112]	; (6918 <LORAReg_InitEU+0x23c>)
    68a8:	4798      	blx	r3
	return status;
    68aa:	2308      	movs	r3, #8
    68ac:	e7a6      	b.n	67fc <LORAReg_InitEU+0x120>
		InitDefault433Channels ();
    68ae:	4b1b      	ldr	r3, [pc, #108]	; (691c <LORAReg_InitEU+0x240>)
    68b0:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    68b2:	4b08      	ldr	r3, [pc, #32]	; (68d4 <LORAReg_InitEU+0x1f8>)
    68b4:	2105      	movs	r1, #5
    68b6:	2222      	movs	r2, #34	; 0x22
    68b8:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    68ba:	2100      	movs	r1, #0
    68bc:	3201      	adds	r2, #1
    68be:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    68c0:	3a93      	subs	r2, #147	; 0x93
    68c2:	771a      	strb	r2, [r3, #28]
    68c4:	3241      	adds	r2, #65	; 0x41
    68c6:	775a      	strb	r2, [r3, #29]
    68c8:	3a02      	subs	r2, #2
    68ca:	779a      	strb	r2, [r3, #30]
    68cc:	324a      	adds	r2, #74	; 0x4a
    68ce:	77da      	strb	r2, [r3, #31]
    68d0:	e7d6      	b.n	6880 <LORAReg_InitEU+0x1a4>
    68d2:	46c0      	nop			; (mov r8, r8)
    68d4:	20002310 	.word	0x20002310
    68d8:	2000230c 	.word	0x2000230c
    68dc:	000064e5 	.word	0x000064e5
    68e0:	0000020f 	.word	0x0000020f
    68e4:	00000211 	.word	0x00000211
    68e8:	00000213 	.word	0x00000213
    68ec:	0000020d 	.word	0x0000020d
    68f0:	000064e1 	.word	0x000064e1
    68f4:	200020f4 	.word	0x200020f4
    68f8:	0001dbb0 	.word	0x0001dbb0
    68fc:	0000c0e9 	.word	0x0000c0e9
    6900:	200020f8 	.word	0x200020f8
    6904:	0001dbb8 	.word	0x0001dbb8
    6908:	0001db10 	.word	0x0001db10
    690c:	00017691 	.word	0x00017691
    6910:	0000a95d 	.word	0x0000a95d
    6914:	0000b16d 	.word	0x0000b16d
    6918:	0000b43d 	.word	0x0000b43d
    691c:	000065e9 	.word	0x000065e9

00006920 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    6920:	4770      	bx	lr
	...

00006924 <LORAReg_InitIN>:
{
    6924:	b570      	push	{r4, r5, r6, lr}
    6926:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    6928:	4b71      	ldr	r3, [pc, #452]	; (6af0 <LORAReg_InitIN+0x1cc>)
    692a:	2503      	movs	r5, #3
    692c:	2226      	movs	r2, #38	; 0x26
    692e:	549d      	strb	r5, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    6930:	2110      	movs	r1, #16
    6932:	3204      	adds	r2, #4
    6934:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    6936:	2401      	movs	r4, #1
    6938:	3a01      	subs	r2, #1
    693a:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    693c:	3a02      	subs	r2, #2
    693e:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6940:	001a      	movs	r2, r3
    6942:	3284      	adds	r2, #132	; 0x84
    6944:	2100      	movs	r1, #0
    6946:	711a      	strb	r2, [r3, #4]
    6948:	0a16      	lsrs	r6, r2, #8
    694a:	715e      	strb	r6, [r3, #5]
    694c:	0c16      	lsrs	r6, r2, #16
    694e:	719e      	strb	r6, [r3, #6]
    6950:	0e12      	lsrs	r2, r2, #24
    6952:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6954:	001a      	movs	r2, r3
    6956:	3244      	adds	r2, #68	; 0x44
    6958:	701a      	strb	r2, [r3, #0]
    695a:	0a16      	lsrs	r6, r2, #8
    695c:	705e      	strb	r6, [r3, #1]
    695e:	0c16      	lsrs	r6, r2, #16
    6960:	709e      	strb	r6, [r3, #2]
    6962:	0e12      	lsrs	r2, r2, #24
    6964:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6966:	001a      	movs	r2, r3
    6968:	32a4      	adds	r2, #164	; 0xa4
    696a:	721a      	strb	r2, [r3, #8]
    696c:	0a16      	lsrs	r6, r2, #8
    696e:	725e      	strb	r6, [r3, #9]
    6970:	0c16      	lsrs	r6, r2, #16
    6972:	729e      	strb	r6, [r3, #10]
    6974:	0e12      	lsrs	r2, r2, #24
    6976:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    6978:	001a      	movs	r2, r3
    697a:	3265      	adds	r2, #101	; 0x65
    697c:	32ff      	adds	r2, #255	; 0xff
    697e:	741a      	strb	r2, [r3, #16]
    6980:	0a16      	lsrs	r6, r2, #8
    6982:	745e      	strb	r6, [r3, #17]
    6984:	0c16      	lsrs	r6, r2, #16
    6986:	749e      	strb	r6, [r3, #18]
    6988:	0e12      	lsrs	r2, r2, #24
    698a:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    698c:	001a      	movs	r2, r3
    698e:	3235      	adds	r2, #53	; 0x35
    6990:	751a      	strb	r2, [r3, #20]
    6992:	0a16      	lsrs	r6, r2, #8
    6994:	755e      	strb	r6, [r3, #21]
    6996:	0c16      	lsrs	r6, r2, #16
    6998:	759e      	strb	r6, [r3, #22]
    699a:	0e12      	lsrs	r2, r2, #24
    699c:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    699e:	001a      	movs	r2, r3
    69a0:	323e      	adds	r2, #62	; 0x3e
    69a2:	761a      	strb	r2, [r3, #24]
    69a4:	0a16      	lsrs	r6, r2, #8
    69a6:	765e      	strb	r6, [r3, #25]
    69a8:	0c16      	lsrs	r6, r2, #16
    69aa:	769e      	strb	r6, [r3, #26]
    69ac:	0e12      	lsrs	r2, r2, #24
    69ae:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    69b0:	2222      	movs	r2, #34	; 0x22
    69b2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    69b4:	2602      	movs	r6, #2
    69b6:	3201      	adds	r2, #1
    69b8:	549e      	strb	r6, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    69ba:	3a33      	subs	r2, #51	; 0x33
    69bc:	771a      	strb	r2, [r3, #28]
    69be:	3a70      	subs	r2, #112	; 0x70
    69c0:	775a      	strb	r2, [r3, #29]
    69c2:	3226      	adds	r2, #38	; 0x26
    69c4:	779a      	strb	r2, [r3, #30]
    69c6:	328d      	adds	r2, #141	; 0x8d
    69c8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    69ca:	3a12      	subs	r2, #18
    69cc:	549d      	strb	r5, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    69ce:	362e      	adds	r6, #46	; 0x2e
    69d0:	3a01      	subs	r2, #1
    69d2:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    69d4:	3a19      	subs	r2, #25
    69d6:	3e0c      	subs	r6, #12
    69d8:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    69da:	3601      	adds	r6, #1
    69dc:	5599      	strb	r1, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    69de:	26c2      	movs	r6, #194	; 0xc2
    69e0:	36ff      	adds	r6, #255	; 0xff
    69e2:	559d      	strb	r5, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    69e4:	3529      	adds	r5, #41	; 0x29
    69e6:	555a      	strb	r2, [r3, r5]
	RegParams.maxTxPwrIndx = 10;
    69e8:	3d22      	subs	r5, #34	; 0x22
    69ea:	3226      	adds	r2, #38	; 0x26
    69ec:	549d      	strb	r5, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_IN;
    69ee:	3201      	adds	r2, #1
    69f0:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    69f2:	341d      	adds	r4, #29
    69f4:	3a06      	subs	r2, #6
    69f6:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    69f8:	4c3e      	ldr	r4, [pc, #248]	; (6af4 <LORAReg_InitIN+0x1d0>)
    69fa:	7825      	ldrb	r5, [r4, #0]
    69fc:	3215      	adds	r2, #21
    69fe:	549d      	strb	r5, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    6a00:	001a      	movs	r2, r3
    6a02:	3239      	adds	r2, #57	; 0x39
    6a04:	2500      	movs	r5, #0
    6a06:	7015      	strb	r5, [r2, #0]
    6a08:	7055      	strb	r5, [r2, #1]
    6a0a:	7095      	strb	r5, [r2, #2]
    6a0c:	70d5      	strb	r5, [r2, #3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    6a0e:	7864      	ldrb	r4, [r4, #1]
    6a10:	223e      	movs	r2, #62	; 0x3e
    6a12:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    6a14:	3205      	adds	r2, #5
    6a16:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    6a18:	001a      	movs	r2, r3
    6a1a:	323f      	adds	r2, #63	; 0x3f
    6a1c:	7011      	strb	r1, [r2, #0]
    6a1e:	7051      	strb	r1, [r2, #1]
    6a20:	7091      	strb	r1, [r2, #2]
    6a22:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    6a24:	222f      	movs	r2, #47	; 0x2f
    6a26:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    6a28:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    6a2a:	280f      	cmp	r0, #15
    6a2c:	d008      	beq.n	6a40 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    6a2e:	4b32      	ldr	r3, [pc, #200]	; (6af8 <LORAReg_InitIN+0x1d4>)
    6a30:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    6a32:	4b32      	ldr	r3, [pc, #200]	; (6afc <LORAReg_InitIN+0x1d8>)
    6a34:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    6a36:	4b32      	ldr	r3, [pc, #200]	; (6b00 <LORAReg_InitIN+0x1dc>)
    6a38:	4798      	blx	r3
}
    6a3a:	0020      	movs	r0, r4
    6a3c:	b006      	add	sp, #24
    6a3e:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    6a40:	001c      	movs	r4, r3
    6a42:	0018      	movs	r0, r3
    6a44:	3084      	adds	r0, #132	; 0x84
    6a46:	3a29      	subs	r2, #41	; 0x29
    6a48:	492e      	ldr	r1, [pc, #184]	; (6b04 <LORAReg_InitIN+0x1e0>)
    6a4a:	4d2f      	ldr	r5, [pc, #188]	; (6b08 <LORAReg_InitIN+0x1e4>)
    6a4c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    6a4e:	0020      	movs	r0, r4
    6a50:	30a4      	adds	r0, #164	; 0xa4
    6a52:	2224      	movs	r2, #36	; 0x24
    6a54:	492d      	ldr	r1, [pc, #180]	; (6b0c <LORAReg_InitIN+0x1e8>)
    6a56:	47a8      	blx	r5
    6a58:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6a5a:	4925      	ldr	r1, [pc, #148]	; (6af0 <LORAReg_InitIN+0x1cc>)
    6a5c:	24ff      	movs	r4, #255	; 0xff
    6a5e:	790b      	ldrb	r3, [r1, #4]
    6a60:	794a      	ldrb	r2, [r1, #5]
    6a62:	0212      	lsls	r2, r2, #8
    6a64:	431a      	orrs	r2, r3
    6a66:	798b      	ldrb	r3, [r1, #6]
    6a68:	041b      	lsls	r3, r3, #16
    6a6a:	431a      	orrs	r2, r3
    6a6c:	79cb      	ldrb	r3, [r1, #7]
    6a6e:	061b      	lsls	r3, r3, #24
    6a70:	4313      	orrs	r3, r2
    6a72:	181b      	adds	r3, r3, r0
    6a74:	705c      	strb	r4, [r3, #1]
    6a76:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    6a78:	2820      	cmp	r0, #32
    6a7a:	d1f0      	bne.n	6a5e <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    6a7c:	4c1c      	ldr	r4, [pc, #112]	; (6af0 <LORAReg_InitIN+0x1cc>)
    6a7e:	221e      	movs	r2, #30
    6a80:	23e1      	movs	r3, #225	; 0xe1
    6a82:	005b      	lsls	r3, r3, #1
    6a84:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    6a86:	7820      	ldrb	r0, [r4, #0]
    6a88:	7863      	ldrb	r3, [r4, #1]
    6a8a:	021b      	lsls	r3, r3, #8
    6a8c:	4303      	orrs	r3, r0
    6a8e:	78a0      	ldrb	r0, [r4, #2]
    6a90:	0400      	lsls	r0, r0, #16
    6a92:	4303      	orrs	r3, r0
    6a94:	78e0      	ldrb	r0, [r4, #3]
    6a96:	0600      	lsls	r0, r0, #24
    6a98:	4318      	orrs	r0, r3
    6a9a:	3222      	adds	r2, #34	; 0x22
    6a9c:	491c      	ldr	r1, [pc, #112]	; (6b10 <LORAReg_InitIN+0x1ec>)
    6a9e:	4b1a      	ldr	r3, [pc, #104]	; (6b08 <LORAReg_InitIN+0x1e4>)
    6aa0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    6aa2:	2306      	movs	r3, #6
    6aa4:	2106      	movs	r1, #6
    6aa6:	2283      	movs	r2, #131	; 0x83
    6aa8:	0092      	lsls	r2, r2, #2
    6aaa:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    6aac:	2100      	movs	r1, #0
    6aae:	4a19      	ldr	r2, [pc, #100]	; (6b14 <LORAReg_InitIN+0x1f0>)
    6ab0:	54a1      	strb	r1, [r4, r2]
    6ab2:	18a2      	adds	r2, r4, r2
    6ab4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    6ab6:	3101      	adds	r1, #1
    6ab8:	4a17      	ldr	r2, [pc, #92]	; (6b18 <LORAReg_InitIN+0x1f4>)
    6aba:	54a1      	strb	r1, [r4, r2]
    6abc:	18a2      	adds	r2, r4, r2
    6abe:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    6ac0:	2200      	movs	r2, #0
    6ac2:	4b16      	ldr	r3, [pc, #88]	; (6b1c <LORAReg_InitIN+0x1f8>)
    6ac4:	54e2      	strb	r2, [r4, r3]
    6ac6:	18e3      	adds	r3, r4, r3
    6ac8:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6aca:	4b15      	ldr	r3, [pc, #84]	; (6b20 <LORAReg_InitIN+0x1fc>)
    6acc:	54e2      	strb	r2, [r4, r3]
    6ace:	469c      	mov	ip, r3
    6ad0:	4464      	add	r4, ip
    6ad2:	2300      	movs	r3, #0
    6ad4:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    6ad6:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    6ad8:	3202      	adds	r2, #2
    6ada:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    6adc:	4a11      	ldr	r2, [pc, #68]	; (6b24 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    6ade:	9200      	str	r2, [sp, #0]
    6ae0:	4911      	ldr	r1, [pc, #68]	; (6b28 <LORAReg_InitIN+0x204>)
    6ae2:	9a03      	ldr	r2, [sp, #12]
    6ae4:	4b11      	ldr	r3, [pc, #68]	; (6b2c <LORAReg_InitIN+0x208>)
    6ae6:	2006      	movs	r0, #6
    6ae8:	4c11      	ldr	r4, [pc, #68]	; (6b30 <LORAReg_InitIN+0x20c>)
    6aea:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6aec:	2408      	movs	r4, #8
    6aee:	e79e      	b.n	6a2e <LORAReg_InitIN+0x10a>
    6af0:	20002310 	.word	0x20002310
    6af4:	2000230c 	.word	0x2000230c
    6af8:	0000ad29 	.word	0x0000ad29
    6afc:	0000b2ad 	.word	0x0000b2ad
    6b00:	0000b571 	.word	0x0000b571
    6b04:	0001dbe4 	.word	0x0001dbe4
    6b08:	00017691 	.word	0x00017691
    6b0c:	0001dbc0 	.word	0x0001dbc0
    6b10:	0001dbec 	.word	0x0001dbec
    6b14:	0000020f 	.word	0x0000020f
    6b18:	00000211 	.word	0x00000211
    6b1c:	00000213 	.word	0x00000213
    6b20:	0000020d 	.word	0x0000020d
    6b24:	00006921 	.word	0x00006921
    6b28:	200020fc 	.word	0x200020fc
    6b2c:	0001dc2c 	.word	0x0001dc2c
    6b30:	0000c0e9 	.word	0x0000c0e9

00006b34 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    6b34:	4770      	bx	lr
	...

00006b38 <InitDefault920Channels>:
{
    6b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    6b3a:	4c40      	ldr	r4, [pc, #256]	; (6c3c <InitDefault920Channels+0x104>)
    6b3c:	7920      	ldrb	r0, [r4, #4]
    6b3e:	7963      	ldrb	r3, [r4, #5]
    6b40:	021b      	lsls	r3, r3, #8
    6b42:	4303      	orrs	r3, r0
    6b44:	79a0      	ldrb	r0, [r4, #6]
    6b46:	0400      	lsls	r0, r0, #16
    6b48:	4303      	orrs	r3, r0
    6b4a:	79e0      	ldrb	r0, [r4, #7]
    6b4c:	0600      	lsls	r0, r0, #24
    6b4e:	4318      	orrs	r0, r3
    6b50:	2204      	movs	r2, #4
    6b52:	2100      	movs	r1, #0
    6b54:	4e3a      	ldr	r6, [pc, #232]	; (6c40 <InitDefault920Channels+0x108>)
    6b56:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    6b58:	7a20      	ldrb	r0, [r4, #8]
    6b5a:	7a63      	ldrb	r3, [r4, #9]
    6b5c:	021b      	lsls	r3, r3, #8
    6b5e:	4303      	orrs	r3, r0
    6b60:	7aa0      	ldrb	r0, [r4, #10]
    6b62:	0400      	lsls	r0, r0, #16
    6b64:	4303      	orrs	r3, r0
    6b66:	7ae0      	ldrb	r0, [r4, #11]
    6b68:	0600      	lsls	r0, r0, #24
    6b6a:	4318      	orrs	r0, r3
    6b6c:	2218      	movs	r2, #24
    6b6e:	2100      	movs	r1, #0
    6b70:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    6b72:	7920      	ldrb	r0, [r4, #4]
    6b74:	7963      	ldrb	r3, [r4, #5]
    6b76:	021b      	lsls	r3, r3, #8
    6b78:	4303      	orrs	r3, r0
    6b7a:	79a0      	ldrb	r0, [r4, #6]
    6b7c:	0400      	lsls	r0, r0, #16
    6b7e:	4303      	orrs	r3, r0
    6b80:	79e0      	ldrb	r0, [r4, #7]
    6b82:	0600      	lsls	r0, r0, #24
    6b84:	4318      	orrs	r0, r3
    6b86:	2204      	movs	r2, #4
    6b88:	492e      	ldr	r1, [pc, #184]	; (6c44 <InitDefault920Channels+0x10c>)
    6b8a:	4d2f      	ldr	r5, [pc, #188]	; (6c48 <InitDefault920Channels+0x110>)
    6b8c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    6b8e:	7a20      	ldrb	r0, [r4, #8]
    6b90:	7a63      	ldrb	r3, [r4, #9]
    6b92:	021b      	lsls	r3, r3, #8
    6b94:	4303      	orrs	r3, r0
    6b96:	7aa0      	ldrb	r0, [r4, #10]
    6b98:	0400      	lsls	r0, r0, #16
    6b9a:	4303      	orrs	r3, r0
    6b9c:	7ae0      	ldrb	r0, [r4, #11]
    6b9e:	0600      	lsls	r0, r0, #24
    6ba0:	4318      	orrs	r0, r3
    6ba2:	2218      	movs	r2, #24
    6ba4:	4929      	ldr	r1, [pc, #164]	; (6c4c <InitDefault920Channels+0x114>)
    6ba6:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    6ba8:	7b20      	ldrb	r0, [r4, #12]
    6baa:	7b63      	ldrb	r3, [r4, #13]
    6bac:	021b      	lsls	r3, r3, #8
    6bae:	4303      	orrs	r3, r0
    6bb0:	7ba0      	ldrb	r0, [r4, #14]
    6bb2:	0400      	lsls	r0, r0, #16
    6bb4:	4303      	orrs	r3, r0
    6bb6:	7be0      	ldrb	r0, [r4, #15]
    6bb8:	0600      	lsls	r0, r0, #24
    6bba:	4318      	orrs	r0, r3
    6bbc:	2218      	movs	r2, #24
    6bbe:	2100      	movs	r1, #0
    6bc0:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    6bc2:	7b20      	ldrb	r0, [r4, #12]
    6bc4:	7b63      	ldrb	r3, [r4, #13]
    6bc6:	021b      	lsls	r3, r3, #8
    6bc8:	4303      	orrs	r3, r0
    6bca:	7ba0      	ldrb	r0, [r4, #14]
    6bcc:	0400      	lsls	r0, r0, #16
    6bce:	4303      	orrs	r3, r0
    6bd0:	7be0      	ldrb	r0, [r4, #15]
    6bd2:	0600      	lsls	r0, r0, #24
    6bd4:	4318      	orrs	r0, r3
    6bd6:	2218      	movs	r2, #24
    6bd8:	491d      	ldr	r1, [pc, #116]	; (6c50 <InitDefault920Channels+0x118>)
    6bda:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    6bdc:	0020      	movs	r0, r4
    6bde:	30af      	adds	r0, #175	; 0xaf
    6be0:	30ff      	adds	r0, #255	; 0xff
    6be2:	2204      	movs	r2, #4
    6be4:	491b      	ldr	r1, [pc, #108]	; (6c54 <InitDefault920Channels+0x11c>)
    6be6:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    6be8:	232a      	movs	r3, #42	; 0x2a
    6bea:	56e3      	ldrsb	r3, [r4, r3]
    6bec:	2b02      	cmp	r3, #2
    6bee:	dd1f      	ble.n	6c30 <InitDefault920Channels+0xf8>
    6bf0:	2302      	movs	r3, #2
    6bf2:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6bf4:	4911      	ldr	r1, [pc, #68]	; (6c3c <InitDefault920Channels+0x104>)
    6bf6:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6bf8:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    6bfa:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6bfc:	7908      	ldrb	r0, [r1, #4]
    6bfe:	794c      	ldrb	r4, [r1, #5]
    6c00:	0224      	lsls	r4, r4, #8
    6c02:	4304      	orrs	r4, r0
    6c04:	7988      	ldrb	r0, [r1, #6]
    6c06:	0400      	lsls	r0, r0, #16
    6c08:	4304      	orrs	r4, r0
    6c0a:	79c8      	ldrb	r0, [r1, #7]
    6c0c:	0600      	lsls	r0, r0, #24
    6c0e:	4320      	orrs	r0, r4
    6c10:	0054      	lsls	r4, r2, #1
    6c12:	1820      	adds	r0, r4, r0
    6c14:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6c16:	3358      	adds	r3, #88	; 0x58
    6c18:	009b      	lsls	r3, r3, #2
    6c1a:	18cb      	adds	r3, r1, r3
    6c1c:	725d      	strb	r5, [r3, #9]
    6c1e:	729d      	strb	r5, [r3, #10]
    6c20:	72dd      	strb	r5, [r3, #11]
    6c22:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    6c24:	3201      	adds	r2, #1
    6c26:	b2d2      	uxtb	r2, r2
    6c28:	0013      	movs	r3, r2
    6c2a:	5788      	ldrsb	r0, [r1, r6]
    6c2c:	4282      	cmp	r2, r0
    6c2e:	dbe5      	blt.n	6bfc <InitDefault920Channels+0xc4>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    6c30:	21ff      	movs	r1, #255	; 0xff
    6c32:	2330      	movs	r3, #48	; 0x30
    6c34:	4a01      	ldr	r2, [pc, #4]	; (6c3c <InitDefault920Channels+0x104>)
    6c36:	54d1      	strb	r1, [r2, r3]
}
    6c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	20002310 	.word	0x20002310
    6c40:	00017715 	.word	0x00017715
    6c44:	0001dc54 	.word	0x0001dc54
    6c48:	00017691 	.word	0x00017691
    6c4c:	0001dc3c 	.word	0x0001dc3c
    6c50:	0001dc9c 	.word	0x0001dc9c
    6c54:	0001dc98 	.word	0x0001dc98

00006c58 <LORAReg_InitJP>:
{
    6c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c5a:	46d6      	mov	lr, sl
    6c5c:	464f      	mov	r7, r9
    6c5e:	4646      	mov	r6, r8
    6c60:	b5c0      	push	{r6, r7, lr}
    6c62:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    6c64:	4b7b      	ldr	r3, [pc, #492]	; (6e54 <LORAReg_InitJP+0x1fc>)
    6c66:	2103      	movs	r1, #3
    6c68:	2226      	movs	r2, #38	; 0x26
    6c6a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    6c6c:	3a16      	subs	r2, #22
    6c6e:	4691      	mov	r9, r2
    6c70:	321a      	adds	r2, #26
    6c72:	4649      	mov	r1, r9
    6c74:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    6c76:	2102      	movs	r1, #2
    6c78:	3a01      	subs	r2, #1
    6c7a:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    6c7c:	2601      	movs	r6, #1
    6c7e:	3a02      	subs	r2, #2
    6c80:	549e      	strb	r6, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6c82:	001a      	movs	r2, r3
    6c84:	3284      	adds	r2, #132	; 0x84
    6c86:	2400      	movs	r4, #0
    6c88:	46a2      	mov	sl, r4
    6c8a:	711a      	strb	r2, [r3, #4]
    6c8c:	0a17      	lsrs	r7, r2, #8
    6c8e:	715f      	strb	r7, [r3, #5]
    6c90:	0c17      	lsrs	r7, r2, #16
    6c92:	719f      	strb	r7, [r3, #6]
    6c94:	0e12      	lsrs	r2, r2, #24
    6c96:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6c98:	001a      	movs	r2, r3
    6c9a:	3244      	adds	r2, #68	; 0x44
    6c9c:	701a      	strb	r2, [r3, #0]
    6c9e:	0a17      	lsrs	r7, r2, #8
    6ca0:	705f      	strb	r7, [r3, #1]
    6ca2:	0c17      	lsrs	r7, r2, #16
    6ca4:	709f      	strb	r7, [r3, #2]
    6ca6:	0e12      	lsrs	r2, r2, #24
    6ca8:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    6caa:	001a      	movs	r2, r3
    6cac:	32c5      	adds	r2, #197	; 0xc5
    6cae:	32ff      	adds	r2, #255	; 0xff
    6cb0:	731a      	strb	r2, [r3, #12]
    6cb2:	0a17      	lsrs	r7, r2, #8
    6cb4:	735f      	strb	r7, [r3, #13]
    6cb6:	0c17      	lsrs	r7, r2, #16
    6cb8:	739f      	strb	r7, [r3, #14]
    6cba:	0e12      	lsrs	r2, r2, #24
    6cbc:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6cbe:	001a      	movs	r2, r3
    6cc0:	32a4      	adds	r2, #164	; 0xa4
    6cc2:	721a      	strb	r2, [r3, #8]
    6cc4:	0a17      	lsrs	r7, r2, #8
    6cc6:	725f      	strb	r7, [r3, #9]
    6cc8:	0c17      	lsrs	r7, r2, #16
    6cca:	729f      	strb	r7, [r3, #10]
    6ccc:	0e12      	lsrs	r2, r2, #24
    6cce:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    6cd0:	001a      	movs	r2, r3
    6cd2:	3265      	adds	r2, #101	; 0x65
    6cd4:	32ff      	adds	r2, #255	; 0xff
    6cd6:	741a      	strb	r2, [r3, #16]
    6cd8:	0a17      	lsrs	r7, r2, #8
    6cda:	745f      	strb	r7, [r3, #17]
    6cdc:	0c17      	lsrs	r7, r2, #16
    6cde:	749f      	strb	r7, [r3, #18]
    6ce0:	0e12      	lsrs	r2, r2, #24
    6ce2:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    6ce4:	001a      	movs	r2, r3
    6ce6:	3235      	adds	r2, #53	; 0x35
    6ce8:	751a      	strb	r2, [r3, #20]
    6cea:	0a17      	lsrs	r7, r2, #8
    6cec:	755f      	strb	r7, [r3, #21]
    6cee:	0c17      	lsrs	r7, r2, #16
    6cf0:	759f      	strb	r7, [r3, #22]
    6cf2:	0e12      	lsrs	r2, r2, #24
    6cf4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    6cf6:	001a      	movs	r2, r3
    6cf8:	323e      	adds	r2, #62	; 0x3e
    6cfa:	761a      	strb	r2, [r3, #24]
    6cfc:	0a17      	lsrs	r7, r2, #8
    6cfe:	765f      	strb	r7, [r3, #25]
    6d00:	0c17      	lsrs	r7, r2, #16
    6d02:	769f      	strb	r7, [r3, #26]
    6d04:	0e12      	lsrs	r2, r2, #24
    6d06:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    6d08:	2222      	movs	r2, #34	; 0x22
    6d0a:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    6d0c:	3201      	adds	r2, #1
    6d0e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    6d10:	2200      	movs	r2, #0
    6d12:	771a      	strb	r2, [r3, #28]
    6d14:	3a16      	subs	r2, #22
    6d16:	775a      	strb	r2, [r3, #29]
    6d18:	321c      	adds	r2, #28
    6d1a:	779a      	strb	r2, [r3, #30]
    6d1c:	3231      	adds	r2, #49	; 0x31
    6d1e:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    6d20:	3a16      	subs	r2, #22
    6d22:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    6d24:	2736      	movs	r7, #54	; 0x36
    6d26:	3a01      	subs	r2, #1
    6d28:	549f      	strb	r7, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    6d2a:	3a19      	subs	r2, #25
    6d2c:	3f12      	subs	r7, #18
    6d2e:	55da      	strb	r2, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    6d30:	3701      	adds	r7, #1
    6d32:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    6d34:	3f20      	subs	r7, #32
    6d36:	24df      	movs	r4, #223	; 0xdf
    6d38:	0064      	lsls	r4, r4, #1
    6d3a:	551f      	strb	r7, [r3, r4]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    6d3c:	3c0f      	subs	r4, #15
    6d3e:	3cff      	subs	r4, #255	; 0xff
    6d40:	46a0      	mov	r8, r4
    6d42:	24c0      	movs	r4, #192	; 0xc0
    6d44:	34ff      	adds	r4, #255	; 0xff
    6d46:	4645      	mov	r5, r8
    6d48:	551d      	strb	r5, [r3, r4]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    6d4a:	3401      	adds	r4, #1
    6d4c:	551f      	strb	r7, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    6d4e:	27c2      	movs	r7, #194	; 0xc2
    6d50:	37ff      	adds	r7, #255	; 0xff
    6d52:	55d9      	strb	r1, [r3, r7]
	RegParams.Rx1DrOffset = 7;
    6d54:	312a      	adds	r1, #42	; 0x2a
    6d56:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    6d58:	3101      	adds	r1, #1
    6d5a:	545a      	strb	r2, [r3, r1]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_JP;
    6d5c:	3227      	adds	r2, #39	; 0x27
    6d5e:	549e      	strb	r6, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    6d60:	3a06      	subs	r2, #6
    6d62:	4649      	mov	r1, r9
    6d64:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    6d66:	4a3c      	ldr	r2, [pc, #240]	; (6e58 <LORAReg_InitJP+0x200>)
    6d68:	7815      	ldrb	r5, [r2, #0]
    6d6a:	21ae      	movs	r1, #174	; 0xae
    6d6c:	31ff      	adds	r1, #255	; 0xff
    6d6e:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    6d70:	7855      	ldrb	r5, [r2, #1]
    6d72:	3945      	subs	r1, #69	; 0x45
    6d74:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    6d76:	7895      	ldrb	r5, [r2, #2]
    6d78:	392b      	subs	r1, #43	; 0x2b
    6d7a:	39ff      	subs	r1, #255	; 0xff
    6d7c:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    6d7e:	78d1      	ldrb	r1, [r2, #3]
    6d80:	223d      	movs	r2, #61	; 0x3d
    6d82:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    6d84:	001a      	movs	r2, r3
    6d86:	3239      	adds	r2, #57	; 0x39
    6d88:	2100      	movs	r1, #0
    6d8a:	7011      	strb	r1, [r2, #0]
    6d8c:	7051      	strb	r1, [r2, #1]
    6d8e:	7091      	strb	r1, [r2, #2]
    6d90:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    6d92:	2243      	movs	r2, #67	; 0x43
    6d94:	4651      	mov	r1, sl
    6d96:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    6d98:	001a      	movs	r2, r3
    6d9a:	323f      	adds	r2, #63	; 0x3f
    6d9c:	2100      	movs	r1, #0
    6d9e:	7011      	strb	r1, [r2, #0]
    6da0:	7051      	strb	r1, [r2, #1]
    6da2:	7091      	strb	r1, [r2, #2]
    6da4:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    6da6:	21c4      	movs	r1, #196	; 0xc4
    6da8:	31ff      	adds	r1, #255	; 0xff
    6daa:	5c5a      	ldrb	r2, [r3, r1]
    6dac:	2401      	movs	r4, #1
    6dae:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    6db0:	2402      	movs	r4, #2
    6db2:	4322      	orrs	r2, r4
    6db4:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    6db6:	222f      	movs	r2, #47	; 0x2f
    6db8:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    6dba:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    6dbc:	2805      	cmp	r0, #5
    6dbe:	d00c      	beq.n	6dda <LORAReg_InitJP+0x182>
    LORAREG_InitGetAttrFnPtrsJP();
    6dc0:	4b26      	ldr	r3, [pc, #152]	; (6e5c <LORAReg_InitJP+0x204>)
    6dc2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    6dc4:	4b26      	ldr	r3, [pc, #152]	; (6e60 <LORAReg_InitJP+0x208>)
    6dc6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    6dc8:	4b26      	ldr	r3, [pc, #152]	; (6e64 <LORAReg_InitJP+0x20c>)
    6dca:	4798      	blx	r3
}
    6dcc:	0020      	movs	r0, r4
    6dce:	b006      	add	sp, #24
    6dd0:	bc1c      	pop	{r2, r3, r4}
    6dd2:	4690      	mov	r8, r2
    6dd4:	4699      	mov	r9, r3
    6dd6:	46a2      	mov	sl, r4
    6dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault920Channels();
    6dda:	4b23      	ldr	r3, [pc, #140]	; (6e68 <LORAReg_InitJP+0x210>)
    6ddc:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    6dde:	4c1d      	ldr	r4, [pc, #116]	; (6e54 <LORAReg_InitJP+0x1fc>)
    6de0:	2210      	movs	r2, #16
    6de2:	23e1      	movs	r3, #225	; 0xe1
    6de4:	005b      	lsls	r3, r3, #1
    6de6:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    6de8:	7820      	ldrb	r0, [r4, #0]
    6dea:	7863      	ldrb	r3, [r4, #1]
    6dec:	021b      	lsls	r3, r3, #8
    6dee:	4303      	orrs	r3, r0
    6df0:	78a0      	ldrb	r0, [r4, #2]
    6df2:	0400      	lsls	r0, r0, #16
    6df4:	4303      	orrs	r3, r0
    6df6:	78e0      	ldrb	r0, [r4, #3]
    6df8:	0600      	lsls	r0, r0, #24
    6dfa:	4318      	orrs	r0, r3
    6dfc:	3230      	adds	r2, #48	; 0x30
    6dfe:	491b      	ldr	r1, [pc, #108]	; (6e6c <LORAReg_InitJP+0x214>)
    6e00:	4b1b      	ldr	r3, [pc, #108]	; (6e70 <LORAReg_InitJP+0x218>)
    6e02:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    6e04:	2307      	movs	r3, #7
    6e06:	2107      	movs	r1, #7
    6e08:	2283      	movs	r2, #131	; 0x83
    6e0a:	0092      	lsls	r2, r2, #2
    6e0c:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    6e0e:	2100      	movs	r1, #0
    6e10:	4a18      	ldr	r2, [pc, #96]	; (6e74 <LORAReg_InitJP+0x21c>)
    6e12:	54a1      	strb	r1, [r4, r2]
    6e14:	18a2      	adds	r2, r4, r2
    6e16:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    6e18:	3101      	adds	r1, #1
    6e1a:	4a17      	ldr	r2, [pc, #92]	; (6e78 <LORAReg_InitJP+0x220>)
    6e1c:	54a1      	strb	r1, [r4, r2]
    6e1e:	18a2      	adds	r2, r4, r2
    6e20:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    6e22:	2200      	movs	r2, #0
    6e24:	4b15      	ldr	r3, [pc, #84]	; (6e7c <LORAReg_InitJP+0x224>)
    6e26:	54e2      	strb	r2, [r4, r3]
    6e28:	18e3      	adds	r3, r4, r3
    6e2a:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6e2c:	4b14      	ldr	r3, [pc, #80]	; (6e80 <LORAReg_InitJP+0x228>)
    6e2e:	54e2      	strb	r2, [r4, r3]
    6e30:	469c      	mov	ip, r3
    6e32:	4464      	add	r4, ip
    6e34:	2300      	movs	r3, #0
    6e36:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    6e38:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    6e3a:	3202      	adds	r2, #2
    6e3c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    6e3e:	4a11      	ldr	r2, [pc, #68]	; (6e84 <LORAReg_InitJP+0x22c>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    6e40:	9200      	str	r2, [sp, #0]
    6e42:	4911      	ldr	r1, [pc, #68]	; (6e88 <LORAReg_InitJP+0x230>)
    6e44:	9a03      	ldr	r2, [sp, #12]
    6e46:	4b11      	ldr	r3, [pc, #68]	; (6e8c <LORAReg_InitJP+0x234>)
    6e48:	2007      	movs	r0, #7
    6e4a:	4c11      	ldr	r4, [pc, #68]	; (6e90 <LORAReg_InitJP+0x238>)
    6e4c:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6e4e:	2408      	movs	r4, #8
    6e50:	e7b6      	b.n	6dc0 <LORAReg_InitJP+0x168>
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	20002310 	.word	0x20002310
    6e58:	2000230c 	.word	0x2000230c
    6e5c:	0000ae5d 	.word	0x0000ae5d
    6e60:	0000b315 	.word	0x0000b315
    6e64:	0000b5d5 	.word	0x0000b5d5
    6e68:	00006b39 	.word	0x00006b39
    6e6c:	0001dc58 	.word	0x0001dc58
    6e70:	00017691 	.word	0x00017691
    6e74:	0000020f 	.word	0x0000020f
    6e78:	00000211 	.word	0x00000211
    6e7c:	00000213 	.word	0x00000213
    6e80:	0000020d 	.word	0x0000020d
    6e84:	00006b35 	.word	0x00006b35
    6e88:	20002100 	.word	0x20002100
    6e8c:	0001dcb4 	.word	0x0001dcb4
    6e90:	0000c0e9 	.word	0x0000c0e9

00006e94 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    6e94:	4770      	bx	lr
	...

00006e98 <InitDefault920ChannelsKR>:
{
    6e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e9a:	46d6      	mov	lr, sl
    6e9c:	464f      	mov	r7, r9
    6e9e:	4646      	mov	r6, r8
    6ea0:	b5c0      	push	{r6, r7, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    6ea2:	4c46      	ldr	r4, [pc, #280]	; (6fbc <InitDefault920ChannelsKR+0x124>)
    6ea4:	7920      	ldrb	r0, [r4, #4]
    6ea6:	7963      	ldrb	r3, [r4, #5]
    6ea8:	021b      	lsls	r3, r3, #8
    6eaa:	4303      	orrs	r3, r0
    6eac:	79a0      	ldrb	r0, [r4, #6]
    6eae:	0400      	lsls	r0, r0, #16
    6eb0:	4303      	orrs	r3, r0
    6eb2:	79e0      	ldrb	r0, [r4, #7]
    6eb4:	0600      	lsls	r0, r0, #24
    6eb6:	4318      	orrs	r0, r3
    6eb8:	2206      	movs	r2, #6
    6eba:	2100      	movs	r1, #0
    6ebc:	4d40      	ldr	r5, [pc, #256]	; (6fc0 <InitDefault920ChannelsKR+0x128>)
    6ebe:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    6ec0:	7a20      	ldrb	r0, [r4, #8]
    6ec2:	7a63      	ldrb	r3, [r4, #9]
    6ec4:	021b      	lsls	r3, r3, #8
    6ec6:	4303      	orrs	r3, r0
    6ec8:	7aa0      	ldrb	r0, [r4, #10]
    6eca:	0400      	lsls	r0, r0, #16
    6ecc:	4303      	orrs	r3, r0
    6ece:	7ae0      	ldrb	r0, [r4, #11]
    6ed0:	0600      	lsls	r0, r0, #24
    6ed2:	4318      	orrs	r0, r3
    6ed4:	2224      	movs	r2, #36	; 0x24
    6ed6:	2100      	movs	r1, #0
    6ed8:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    6eda:	7920      	ldrb	r0, [r4, #4]
    6edc:	7963      	ldrb	r3, [r4, #5]
    6ede:	021b      	lsls	r3, r3, #8
    6ee0:	4303      	orrs	r3, r0
    6ee2:	79a0      	ldrb	r0, [r4, #6]
    6ee4:	0400      	lsls	r0, r0, #16
    6ee6:	4303      	orrs	r3, r0
    6ee8:	79e0      	ldrb	r0, [r4, #7]
    6eea:	0600      	lsls	r0, r0, #24
    6eec:	4318      	orrs	r0, r3
    6eee:	2206      	movs	r2, #6
    6ef0:	4934      	ldr	r1, [pc, #208]	; (6fc4 <InitDefault920ChannelsKR+0x12c>)
    6ef2:	4d35      	ldr	r5, [pc, #212]	; (6fc8 <InitDefault920ChannelsKR+0x130>)
    6ef4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    6ef6:	7a20      	ldrb	r0, [r4, #8]
    6ef8:	7a63      	ldrb	r3, [r4, #9]
    6efa:	021b      	lsls	r3, r3, #8
    6efc:	4303      	orrs	r3, r0
    6efe:	7aa0      	ldrb	r0, [r4, #10]
    6f00:	0400      	lsls	r0, r0, #16
    6f02:	4303      	orrs	r3, r0
    6f04:	7ae0      	ldrb	r0, [r4, #11]
    6f06:	0600      	lsls	r0, r0, #24
    6f08:	4318      	orrs	r0, r3
    6f0a:	2224      	movs	r2, #36	; 0x24
    6f0c:	492f      	ldr	r1, [pc, #188]	; (6fcc <InitDefault920ChannelsKR+0x134>)
    6f0e:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    6f10:	232a      	movs	r3, #42	; 0x2a
    6f12:	56e3      	ldrsb	r3, [r4, r3]
    6f14:	2b03      	cmp	r3, #3
    6f16:	dd48      	ble.n	6faa <InitDefault920ChannelsKR+0x112>
    6f18:	2103      	movs	r1, #3
    6f1a:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6f1c:	4b27      	ldr	r3, [pc, #156]	; (6fbc <InitDefault920ChannelsKR+0x124>)
    6f1e:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    6f20:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    6f22:	22e1      	movs	r2, #225	; 0xe1
    6f24:	0052      	lsls	r2, r2, #1
    6f26:	4690      	mov	r8, r2
    6f28:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    6f2a:	3a99      	subs	r2, #153	; 0x99
    6f2c:	3aff      	subs	r2, #255	; 0xff
    6f2e:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6f30:	0042      	lsls	r2, r0, #1
    6f32:	791c      	ldrb	r4, [r3, #4]
    6f34:	46a1      	mov	r9, r4
    6f36:	795c      	ldrb	r4, [r3, #5]
    6f38:	0224      	lsls	r4, r4, #8
    6f3a:	464f      	mov	r7, r9
    6f3c:	4327      	orrs	r7, r4
    6f3e:	799c      	ldrb	r4, [r3, #6]
    6f40:	0424      	lsls	r4, r4, #16
    6f42:	4327      	orrs	r7, r4
    6f44:	79dc      	ldrb	r4, [r3, #7]
    6f46:	0624      	lsls	r4, r4, #24
    6f48:	433c      	orrs	r4, r7
    6f4a:	18a4      	adds	r4, r4, r2
    6f4c:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    6f4e:	791c      	ldrb	r4, [r3, #4]
    6f50:	46a1      	mov	r9, r4
    6f52:	795c      	ldrb	r4, [r3, #5]
    6f54:	0224      	lsls	r4, r4, #8
    6f56:	464f      	mov	r7, r9
    6f58:	4327      	orrs	r7, r4
    6f5a:	799c      	ldrb	r4, [r3, #6]
    6f5c:	0424      	lsls	r4, r4, #16
    6f5e:	4327      	orrs	r7, r4
    6f60:	79dc      	ldrb	r4, [r3, #7]
    6f62:	0624      	lsls	r4, r4, #24
    6f64:	433c      	orrs	r4, r7
    6f66:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    6f68:	7a1c      	ldrb	r4, [r3, #8]
    6f6a:	46a1      	mov	r9, r4
    6f6c:	7a5c      	ldrb	r4, [r3, #9]
    6f6e:	0224      	lsls	r4, r4, #8
    6f70:	464f      	mov	r7, r9
    6f72:	4327      	orrs	r7, r4
    6f74:	7a9c      	ldrb	r4, [r3, #10]
    6f76:	0424      	lsls	r4, r4, #16
    6f78:	4327      	orrs	r7, r4
    6f7a:	7adc      	ldrb	r4, [r3, #11]
    6f7c:	0624      	lsls	r4, r4, #24
    6f7e:	433c      	orrs	r4, r7
    6f80:	1812      	adds	r2, r2, r0
    6f82:	0092      	lsls	r2, r2, #2
    6f84:	1912      	adds	r2, r2, r4
    6f86:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    6f88:	4642      	mov	r2, r8
    6f8a:	4664      	mov	r4, ip
    6f8c:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6f8e:	3158      	adds	r1, #88	; 0x58
    6f90:	0089      	lsls	r1, r1, #2
    6f92:	1859      	adds	r1, r3, r1
    6f94:	724d      	strb	r5, [r1, #9]
    6f96:	728d      	strb	r5, [r1, #10]
    6f98:	72cd      	strb	r5, [r1, #11]
    6f9a:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    6f9c:	3001      	adds	r0, #1
    6f9e:	b2c0      	uxtb	r0, r0
    6fa0:	0001      	movs	r1, r0
    6fa2:	4652      	mov	r2, sl
    6fa4:	569a      	ldrsb	r2, [r3, r2]
    6fa6:	4290      	cmp	r0, r2
    6fa8:	dbc2      	blt.n	6f30 <InitDefault920ChannelsKR+0x98>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    6faa:	21ff      	movs	r1, #255	; 0xff
    6fac:	2330      	movs	r3, #48	; 0x30
    6fae:	4a03      	ldr	r2, [pc, #12]	; (6fbc <InitDefault920ChannelsKR+0x124>)
    6fb0:	54d1      	strb	r1, [r2, r3]
}
    6fb2:	bc1c      	pop	{r2, r3, r4}
    6fb4:	4690      	mov	r8, r2
    6fb6:	4699      	mov	r9, r3
    6fb8:	46a2      	mov	sl, r4
    6fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fbc:	20002310 	.word	0x20002310
    6fc0:	00017715 	.word	0x00017715
    6fc4:	0001dce8 	.word	0x0001dce8
    6fc8:	00017691 	.word	0x00017691
    6fcc:	0001dcc4 	.word	0x0001dcc4

00006fd0 <LORAReg_InitKR>:
{
    6fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fd2:	46c6      	mov	lr, r8
    6fd4:	b500      	push	{lr}
    6fd6:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    6fd8:	4b7b      	ldr	r3, [pc, #492]	; (71c8 <LORAReg_InitKR+0x1f8>)
    6fda:	2503      	movs	r5, #3
    6fdc:	2226      	movs	r2, #38	; 0x26
    6fde:	549d      	strb	r5, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    6fe0:	2110      	movs	r1, #16
    6fe2:	3204      	adds	r2, #4
    6fe4:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    6fe6:	2401      	movs	r4, #1
    6fe8:	3a01      	subs	r2, #1
    6fea:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    6fec:	3a02      	subs	r2, #2
    6fee:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6ff0:	001a      	movs	r2, r3
    6ff2:	3284      	adds	r2, #132	; 0x84
    6ff4:	2100      	movs	r1, #0
    6ff6:	711a      	strb	r2, [r3, #4]
    6ff8:	0a16      	lsrs	r6, r2, #8
    6ffa:	715e      	strb	r6, [r3, #5]
    6ffc:	0c16      	lsrs	r6, r2, #16
    6ffe:	719e      	strb	r6, [r3, #6]
    7000:	0e12      	lsrs	r2, r2, #24
    7002:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    7004:	001a      	movs	r2, r3
    7006:	3244      	adds	r2, #68	; 0x44
    7008:	701a      	strb	r2, [r3, #0]
    700a:	0a16      	lsrs	r6, r2, #8
    700c:	705e      	strb	r6, [r3, #1]
    700e:	0c16      	lsrs	r6, r2, #16
    7010:	709e      	strb	r6, [r3, #2]
    7012:	0e12      	lsrs	r2, r2, #24
    7014:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    7016:	001a      	movs	r2, r3
    7018:	32a4      	adds	r2, #164	; 0xa4
    701a:	721a      	strb	r2, [r3, #8]
    701c:	0a16      	lsrs	r6, r2, #8
    701e:	725e      	strb	r6, [r3, #9]
    7020:	0c16      	lsrs	r6, r2, #16
    7022:	729e      	strb	r6, [r3, #10]
    7024:	0e12      	lsrs	r2, r2, #24
    7026:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7028:	001a      	movs	r2, r3
    702a:	3265      	adds	r2, #101	; 0x65
    702c:	32ff      	adds	r2, #255	; 0xff
    702e:	741a      	strb	r2, [r3, #16]
    7030:	0a16      	lsrs	r6, r2, #8
    7032:	745e      	strb	r6, [r3, #17]
    7034:	0c16      	lsrs	r6, r2, #16
    7036:	749e      	strb	r6, [r3, #18]
    7038:	0e12      	lsrs	r2, r2, #24
    703a:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    703c:	001a      	movs	r2, r3
    703e:	3235      	adds	r2, #53	; 0x35
    7040:	751a      	strb	r2, [r3, #20]
    7042:	0a16      	lsrs	r6, r2, #8
    7044:	755e      	strb	r6, [r3, #21]
    7046:	0c16      	lsrs	r6, r2, #16
    7048:	759e      	strb	r6, [r3, #22]
    704a:	0e12      	lsrs	r2, r2, #24
    704c:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    704e:	001a      	movs	r2, r3
    7050:	323e      	adds	r2, #62	; 0x3e
    7052:	761a      	strb	r2, [r3, #24]
    7054:	0a16      	lsrs	r6, r2, #8
    7056:	765e      	strb	r6, [r3, #25]
    7058:	0c16      	lsrs	r6, r2, #16
    705a:	769e      	strb	r6, [r3, #26]
    705c:	0e12      	lsrs	r2, r2, #24
    705e:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    7060:	2222      	movs	r2, #34	; 0x22
    7062:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    7064:	3201      	adds	r2, #1
    7066:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    7068:	3a43      	subs	r2, #67	; 0x43
    706a:	771a      	strb	r2, [r3, #28]
    706c:	3233      	adds	r2, #51	; 0x33
    706e:	775a      	strb	r2, [r3, #29]
    7070:	3a20      	subs	r2, #32
    7072:	779a      	strb	r2, [r3, #30]
    7074:	3243      	adds	r2, #67	; 0x43
    7076:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    7078:	3a15      	subs	r2, #21
    707a:	549d      	strb	r5, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    707c:	2634      	movs	r6, #52	; 0x34
    707e:	3a01      	subs	r2, #1
    7080:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    7082:	3a1b      	subs	r2, #27
    7084:	4690      	mov	r8, r2
    7086:	3e10      	subs	r6, #16
    7088:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    708a:	3601      	adds	r6, #1
    708c:	5599      	strb	r1, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    708e:	3e1b      	subs	r6, #27
    7090:	27df      	movs	r7, #223	; 0xdf
    7092:	007f      	lsls	r7, r7, #1
    7094:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    7096:	3fff      	subs	r7, #255	; 0xff
    7098:	46bc      	mov	ip, r7
    709a:	27c0      	movs	r7, #192	; 0xc0
    709c:	37ff      	adds	r7, #255	; 0xff
    709e:	4662      	mov	r2, ip
    70a0:	55da      	strb	r2, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    70a2:	3701      	adds	r7, #1
    70a4:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    70a6:	26c2      	movs	r6, #194	; 0xc2
    70a8:	36ff      	adds	r6, #255	; 0xff
    70aa:	559d      	strb	r5, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    70ac:	3529      	adds	r5, #41	; 0x29
    70ae:	4642      	mov	r2, r8
    70b0:	555a      	strb	r2, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    70b2:	3d25      	subs	r5, #37	; 0x25
    70b4:	222d      	movs	r2, #45	; 0x2d
    70b6:	549d      	strb	r5, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_KR;
    70b8:	3201      	adds	r2, #1
    70ba:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    70bc:	340d      	adds	r4, #13
    70be:	3a06      	subs	r2, #6
    70c0:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    70c2:	4a42      	ldr	r2, [pc, #264]	; (71cc <LORAReg_InitKR+0x1fc>)
    70c4:	7815      	ldrb	r5, [r2, #0]
    70c6:	24ae      	movs	r4, #174	; 0xae
    70c8:	34ff      	adds	r4, #255	; 0xff
    70ca:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    70cc:	7855      	ldrb	r5, [r2, #1]
    70ce:	3c70      	subs	r4, #112	; 0x70
    70d0:	3cff      	subs	r4, #255	; 0xff
    70d2:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    70d4:	7894      	ldrb	r4, [r2, #2]
    70d6:	223d      	movs	r2, #61	; 0x3d
    70d8:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    70da:	001a      	movs	r2, r3
    70dc:	3239      	adds	r2, #57	; 0x39
    70de:	2400      	movs	r4, #0
    70e0:	7014      	strb	r4, [r2, #0]
    70e2:	7054      	strb	r4, [r2, #1]
    70e4:	7094      	strb	r4, [r2, #2]
    70e6:	70d4      	strb	r4, [r2, #3]
	RegParams.joinbccount =0;
    70e8:	2243      	movs	r2, #67	; 0x43
    70ea:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    70ec:	001a      	movs	r2, r3
    70ee:	323f      	adds	r2, #63	; 0x3f
    70f0:	7011      	strb	r1, [r2, #0]
    70f2:	7051      	strb	r1, [r2, #1]
    70f4:	7091      	strb	r1, [r2, #2]
    70f6:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    70f8:	222f      	movs	r2, #47	; 0x2f
    70fa:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    70fc:	34c7      	adds	r4, #199	; 0xc7
	if(ismBand == ISM_KR920)
    70fe:	2804      	cmp	r0, #4
    7100:	d00a      	beq.n	7118 <LORAReg_InitKR+0x148>
    LORAREG_InitGetAttrFnPtrsKR();
    7102:	4b33      	ldr	r3, [pc, #204]	; (71d0 <LORAReg_InitKR+0x200>)
    7104:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    7106:	4b33      	ldr	r3, [pc, #204]	; (71d4 <LORAReg_InitKR+0x204>)
    7108:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    710a:	4b33      	ldr	r3, [pc, #204]	; (71d8 <LORAReg_InitKR+0x208>)
    710c:	4798      	blx	r3
}
    710e:	0020      	movs	r0, r4
    7110:	b006      	add	sp, #24
    7112:	bc04      	pop	{r2}
    7114:	4690      	mov	r8, r2
    7116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault920ChannelsKR();
    7118:	4b30      	ldr	r3, [pc, #192]	; (71dc <LORAReg_InitKR+0x20c>)
    711a:	4798      	blx	r3
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    711c:	4c2a      	ldr	r4, [pc, #168]	; (71c8 <LORAReg_InitKR+0x1f8>)
    711e:	7820      	ldrb	r0, [r4, #0]
    7120:	7863      	ldrb	r3, [r4, #1]
    7122:	021b      	lsls	r3, r3, #8
    7124:	4303      	orrs	r3, r0
    7126:	78a0      	ldrb	r0, [r4, #2]
    7128:	0400      	lsls	r0, r0, #16
    712a:	4303      	orrs	r3, r0
    712c:	78e0      	ldrb	r0, [r4, #3]
    712e:	0600      	lsls	r0, r0, #24
    7130:	4318      	orrs	r0, r3
    7132:	2230      	movs	r2, #48	; 0x30
    7134:	492a      	ldr	r1, [pc, #168]	; (71e0 <LORAReg_InitKR+0x210>)
    7136:	4b2b      	ldr	r3, [pc, #172]	; (71e4 <LORAReg_InitKR+0x214>)
    7138:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    713a:	2325      	movs	r3, #37	; 0x25
    713c:	5ce3      	ldrb	r3, [r4, r3]
    713e:	2b00      	cmp	r3, #0
    7140:	dd19      	ble.n	7176 <LORAReg_InitKR+0x1a6>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    7142:	4a21      	ldr	r2, [pc, #132]	; (71c8 <LORAReg_InitKR+0x1f8>)
    7144:	7811      	ldrb	r1, [r2, #0]
    7146:	7853      	ldrb	r3, [r2, #1]
    7148:	021b      	lsls	r3, r3, #8
    714a:	430b      	orrs	r3, r1
    714c:	7891      	ldrb	r1, [r2, #2]
    714e:	0409      	lsls	r1, r1, #16
    7150:	430b      	orrs	r3, r1
    7152:	78d1      	ldrb	r1, [r2, #3]
    7154:	0609      	lsls	r1, r1, #24
    7156:	4319      	orrs	r1, r3
    7158:	2300      	movs	r3, #0
    715a:	3ec1      	subs	r6, #193	; 0xc1
    715c:	3eff      	subs	r6, #255	; 0xff
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    715e:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    7160:	0014      	movs	r4, r2
    7162:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    7164:	00da      	lsls	r2, r3, #3
    7166:	188a      	adds	r2, r1, r2
    7168:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    716a:	7195      	strb	r5, [r2, #6]
    716c:	3301      	adds	r3, #1
    716e:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    7170:	5c22      	ldrb	r2, [r4, r0]
    7172:	4293      	cmp	r3, r2
    7174:	dbf6      	blt.n	7164 <LORAReg_InitKR+0x194>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    7176:	4b14      	ldr	r3, [pc, #80]	; (71c8 <LORAReg_InitKR+0x1f8>)
    7178:	2205      	movs	r2, #5
    717a:	2005      	movs	r0, #5
    717c:	2183      	movs	r1, #131	; 0x83
    717e:	0089      	lsls	r1, r1, #2
    7180:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    7182:	2000      	movs	r0, #0
    7184:	4918      	ldr	r1, [pc, #96]	; (71e8 <LORAReg_InitKR+0x218>)
    7186:	5458      	strb	r0, [r3, r1]
    7188:	1859      	adds	r1, r3, r1
    718a:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    718c:	3001      	adds	r0, #1
    718e:	4917      	ldr	r1, [pc, #92]	; (71ec <LORAReg_InitKR+0x21c>)
    7190:	5458      	strb	r0, [r3, r1]
    7192:	1859      	adds	r1, r3, r1
    7194:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    7196:	2100      	movs	r1, #0
    7198:	4a15      	ldr	r2, [pc, #84]	; (71f0 <LORAReg_InitKR+0x220>)
    719a:	5499      	strb	r1, [r3, r2]
    719c:	189a      	adds	r2, r3, r2
    719e:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    71a0:	4a14      	ldr	r2, [pc, #80]	; (71f4 <LORAReg_InitKR+0x224>)
    71a2:	5499      	strb	r1, [r3, r2]
    71a4:	4694      	mov	ip, r2
    71a6:	4463      	add	r3, ip
    71a8:	2200      	movs	r2, #0
    71aa:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    71ac:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    71ae:	3202      	adds	r2, #2
    71b0:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    71b2:	4a11      	ldr	r2, [pc, #68]	; (71f8 <LORAReg_InitKR+0x228>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    71b4:	9200      	str	r2, [sp, #0]
    71b6:	4911      	ldr	r1, [pc, #68]	; (71fc <LORAReg_InitKR+0x22c>)
    71b8:	9a03      	ldr	r2, [sp, #12]
    71ba:	4b11      	ldr	r3, [pc, #68]	; (7200 <LORAReg_InitKR+0x230>)
    71bc:	3004      	adds	r0, #4
    71be:	4c11      	ldr	r4, [pc, #68]	; (7204 <LORAReg_InitKR+0x234>)
    71c0:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    71c2:	2408      	movs	r4, #8
    71c4:	e79d      	b.n	7102 <LORAReg_InitKR+0x132>
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	20002310 	.word	0x20002310
    71cc:	2000230c 	.word	0x2000230c
    71d0:	0000afb9 	.word	0x0000afb9
    71d4:	0000b381 	.word	0x0000b381
    71d8:	0000b655 	.word	0x0000b655
    71dc:	00006e99 	.word	0x00006e99
    71e0:	0001dcf0 	.word	0x0001dcf0
    71e4:	00017691 	.word	0x00017691
    71e8:	0000020f 	.word	0x0000020f
    71ec:	00000211 	.word	0x00000211
    71f0:	00000213 	.word	0x00000213
    71f4:	0000020d 	.word	0x0000020d
    71f8:	00006e95 	.word	0x00006e95
    71fc:	20002104 	.word	0x20002104
    7200:	0001dd20 	.word	0x0001dd20
    7204:	0000c0e9 	.word	0x0000c0e9

00007208 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    7208:	4770      	bx	lr
	...

0000720c <LORAReg_InitNA>:
{
    720c:	b5f0      	push	{r4, r5, r6, r7, lr}
    720e:	46de      	mov	lr, fp
    7210:	4657      	mov	r7, sl
    7212:	464e      	mov	r6, r9
    7214:	4645      	mov	r5, r8
    7216:	b5e0      	push	{r5, r6, r7, lr}
    7218:	b089      	sub	sp, #36	; 0x24
    721a:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    721c:	4c7c      	ldr	r4, [pc, #496]	; (7410 <LORAReg_InitNA+0x204>)
    721e:	2702      	movs	r7, #2
    7220:	2302      	movs	r3, #2
    7222:	469b      	mov	fp, r3
    7224:	2326      	movs	r3, #38	; 0x26
    7226:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    7228:	2248      	movs	r2, #72	; 0x48
    722a:	3304      	adds	r3, #4
    722c:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    722e:	3b03      	subs	r3, #3
    7230:	3a41      	subs	r2, #65	; 0x41
    7232:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    7234:	221e      	movs	r2, #30
    7236:	3301      	adds	r3, #1
    7238:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    723a:	0023      	movs	r3, r4
    723c:	33b4      	adds	r3, #180	; 0xb4
    723e:	0018      	movs	r0, r3
    7240:	2500      	movs	r5, #0
    7242:	7123      	strb	r3, [r4, #4]
    7244:	0a1b      	lsrs	r3, r3, #8
    7246:	7163      	strb	r3, [r4, #5]
    7248:	0c03      	lsrs	r3, r0, #16
    724a:	71a3      	strb	r3, [r4, #6]
    724c:	0e03      	lsrs	r3, r0, #24
    724e:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    7250:	0026      	movs	r6, r4
    7252:	3644      	adds	r6, #68	; 0x44
    7254:	7026      	strb	r6, [r4, #0]
    7256:	0a33      	lsrs	r3, r6, #8
    7258:	7063      	strb	r3, [r4, #1]
    725a:	0c33      	lsrs	r3, r6, #16
    725c:	70a3      	strb	r3, [r4, #2]
    725e:	0e33      	lsrs	r3, r6, #24
    7260:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    7262:	2321      	movs	r3, #33	; 0x21
    7264:	32e1      	adds	r2, #225	; 0xe1
    7266:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    7268:	3add      	subs	r2, #221	; 0xdd
    726a:	3b17      	subs	r3, #23
    726c:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    726e:	3a1a      	subs	r2, #26
    7270:	2108      	movs	r1, #8
    7272:	468c      	mov	ip, r1
    7274:	2123      	movs	r1, #35	; 0x23
    7276:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    7278:	3983      	subs	r1, #131	; 0x83
    727a:	4688      	mov	r8, r1
    727c:	7721      	strb	r1, [r4, #28]
    727e:	2170      	movs	r1, #112	; 0x70
    7280:	7761      	strb	r1, [r4, #29]
    7282:	4661      	mov	r1, ip
    7284:	77a1      	strb	r1, [r4, #30]
    7286:	2137      	movs	r1, #55	; 0x37
    7288:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    728a:	2138      	movs	r1, #56	; 0x38
    728c:	468a      	mov	sl, r1
    728e:	3918      	subs	r1, #24
    7290:	4653      	mov	r3, sl
    7292:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    7294:	2304      	movs	r3, #4
    7296:	4699      	mov	r9, r3
    7298:	3320      	adds	r3, #32
    729a:	4649      	mov	r1, r9
    729c:	54e1      	strb	r1, [r4, r3]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    729e:	3301      	adds	r3, #1
    72a0:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    72a2:	3330      	adds	r3, #48	; 0x30
    72a4:	33ff      	adds	r3, #255	; 0xff
    72a6:	2140      	movs	r1, #64	; 0x40
    72a8:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    72aa:	2356      	movs	r3, #86	; 0x56
    72ac:	33ff      	adds	r3, #255	; 0xff
    72ae:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    72b0:	3b05      	subs	r3, #5
    72b2:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    72b4:	2352      	movs	r3, #82	; 0x52
    72b6:	33ff      	adds	r3, #255	; 0xff
    72b8:	4649      	mov	r1, r9
    72ba:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    72bc:	3301      	adds	r3, #1
    72be:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    72c0:	3b46      	subs	r3, #70	; 0x46
    72c2:	3bff      	subs	r3, #255	; 0xff
    72c4:	2254      	movs	r2, #84	; 0x54
    72c6:	32ff      	adds	r2, #255	; 0xff
    72c8:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    72ca:	3203      	adds	r2, #3
    72cc:	230a      	movs	r3, #10
    72ce:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    72d0:	0022      	movs	r2, r4
    72d2:	3235      	adds	r2, #53	; 0x35
    72d4:	7522      	strb	r2, [r4, #20]
    72d6:	0a13      	lsrs	r3, r2, #8
    72d8:	7563      	strb	r3, [r4, #21]
    72da:	0c13      	lsrs	r3, r2, #16
    72dc:	75a3      	strb	r3, [r4, #22]
    72de:	0e12      	lsrs	r2, r2, #24
    72e0:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    72e2:	0022      	movs	r2, r4
    72e4:	323e      	adds	r2, #62	; 0x3e
    72e6:	7622      	strb	r2, [r4, #24]
    72e8:	0a13      	lsrs	r3, r2, #8
    72ea:	7663      	strb	r3, [r4, #25]
    72ec:	0c13      	lsrs	r3, r2, #16
    72ee:	76a3      	strb	r3, [r4, #26]
    72f0:	0e12      	lsrs	r2, r2, #24
    72f2:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    72f4:	2360      	movs	r3, #96	; 0x60
    72f6:	22a2      	movs	r2, #162	; 0xa2
    72f8:	0052      	lsls	r2, r2, #1
    72fa:	54a3      	strb	r3, [r4, r2]
    72fc:	0022      	movs	r2, r4
    72fe:	3245      	adds	r2, #69	; 0x45
    7300:	32ff      	adds	r2, #255	; 0xff
    7302:	2301      	movs	r3, #1
    7304:	7053      	strb	r3, [r2, #1]
    7306:	2338      	movs	r3, #56	; 0x38
    7308:	425b      	negs	r3, r3
    730a:	7093      	strb	r3, [r2, #2]
    730c:	2335      	movs	r3, #53	; 0x35
    730e:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    7310:	2340      	movs	r3, #64	; 0x40
    7312:	425b      	negs	r3, r3
    7314:	22a4      	movs	r2, #164	; 0xa4
    7316:	0052      	lsls	r2, r2, #1
    7318:	54a3      	strb	r3, [r4, r2]
    731a:	0022      	movs	r2, r4
    731c:	3249      	adds	r2, #73	; 0x49
    731e:	32ff      	adds	r2, #255	; 0xff
    7320:	2351      	movs	r3, #81	; 0x51
    7322:	425b      	negs	r3, r3
    7324:	7053      	strb	r3, [r2, #1]
    7326:	232e      	movs	r3, #46	; 0x2e
    7328:	425b      	negs	r3, r3
    732a:	7093      	strb	r3, [r2, #2]
    732c:	2335      	movs	r3, #53	; 0x35
    732e:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    7330:	22a6      	movs	r2, #166	; 0xa6
    7332:	0052      	lsls	r2, r2, #1
    7334:	4643      	mov	r3, r8
    7336:	54a3      	strb	r3, [r4, r2]
    7338:	0022      	movs	r2, r4
    733a:	324d      	adds	r2, #77	; 0x4d
    733c:	32ff      	adds	r2, #255	; 0xff
    733e:	2370      	movs	r3, #112	; 0x70
    7340:	7053      	strb	r3, [r2, #1]
    7342:	4663      	mov	r3, ip
    7344:	7093      	strb	r3, [r2, #2]
    7346:	2337      	movs	r3, #55	; 0x37
    7348:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    734a:	2303      	movs	r3, #3
    734c:	222c      	movs	r2, #44	; 0x2c
    734e:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    7350:	3201      	adds	r2, #1
    7352:	230a      	movs	r3, #10
    7354:	54a3      	strb	r3, [r4, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_NA;
    7356:	232e      	movs	r3, #46	; 0x2e
    7358:	3a26      	subs	r2, #38	; 0x26
    735a:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    735c:	332b      	adds	r3, #43	; 0x2b
    735e:	33ff      	adds	r3, #255	; 0xff
    7360:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    7362:	4b2c      	ldr	r3, [pc, #176]	; (7414 <LORAReg_InitNA+0x208>)
    7364:	7819      	ldrb	r1, [r3, #0]
    7366:	223e      	movs	r2, #62	; 0x3e
    7368:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    736a:	785a      	ldrb	r2, [r3, #1]
    736c:	233d      	movs	r3, #61	; 0x3d
    736e:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    7370:	0023      	movs	r3, r4
    7372:	3339      	adds	r3, #57	; 0x39
    7374:	2200      	movs	r2, #0
    7376:	701a      	strb	r2, [r3, #0]
    7378:	705a      	strb	r2, [r3, #1]
    737a:	709a      	strb	r2, [r3, #2]
    737c:	70da      	strb	r2, [r3, #3]
	RegParams.joinbccount =0;
    737e:	2343      	movs	r3, #67	; 0x43
    7380:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    7382:	0023      	movs	r3, r4
    7384:	333f      	adds	r3, #63	; 0x3f
    7386:	701a      	strb	r2, [r3, #0]
    7388:	705a      	strb	r2, [r3, #1]
    738a:	709a      	strb	r2, [r3, #2]
    738c:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    738e:	232f      	movs	r3, #47	; 0x2f
    7390:	466a      	mov	r2, sp
    7392:	7b12      	ldrb	r2, [r2, #12]
    7394:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    7396:	2290      	movs	r2, #144	; 0x90
    7398:	491f      	ldr	r1, [pc, #124]	; (7418 <LORAReg_InitNA+0x20c>)
    739a:	4b20      	ldr	r3, [pc, #128]	; (741c <LORAReg_InitNA+0x210>)
    739c:	4698      	mov	r8, r3
    739e:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    73a0:	2270      	movs	r2, #112	; 0x70
    73a2:	491f      	ldr	r1, [pc, #124]	; (7420 <LORAReg_InitNA+0x214>)
    73a4:	0030      	movs	r0, r6
    73a6:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    73a8:	2358      	movs	r3, #88	; 0x58
    73aa:	33ff      	adds	r3, #255	; 0xff
    73ac:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    73ae:	33b5      	adds	r3, #181	; 0xb5
    73b0:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    73b2:	2200      	movs	r2, #0
    73b4:	4b1b      	ldr	r3, [pc, #108]	; (7424 <LORAReg_InitNA+0x218>)
    73b6:	54e2      	strb	r2, [r4, r3]
    73b8:	18e3      	adds	r3, r4, r3
    73ba:	465a      	mov	r2, fp
    73bc:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    73be:	2200      	movs	r2, #0
    73c0:	4b19      	ldr	r3, [pc, #100]	; (7428 <LORAReg_InitNA+0x21c>)
    73c2:	54e2      	strb	r2, [r4, r3]
    73c4:	18e3      	adds	r3, r4, r3
    73c6:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    73c8:	4b18      	ldr	r3, [pc, #96]	; (742c <LORAReg_InitNA+0x220>)
    73ca:	54e2      	strb	r2, [r4, r3]
    73cc:	18e3      	adds	r3, r4, r3
    73ce:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    73d0:	4b17      	ldr	r3, [pc, #92]	; (7430 <LORAReg_InitNA+0x224>)
    73d2:	2201      	movs	r2, #1
    73d4:	54e2      	strb	r2, [r4, r3]
    73d6:	469c      	mov	ip, r3
    73d8:	4464      	add	r4, ip
    73da:	465b      	mov	r3, fp
    73dc:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    73de:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    73e0:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    73e2:	4a14      	ldr	r2, [pc, #80]	; (7434 <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    73e4:	9200      	str	r2, [sp, #0]
    73e6:	4914      	ldr	r1, [pc, #80]	; (7438 <LORAReg_InitNA+0x22c>)
    73e8:	9a05      	ldr	r2, [sp, #20]
    73ea:	4b14      	ldr	r3, [pc, #80]	; (743c <LORAReg_InitNA+0x230>)
    73ec:	2002      	movs	r0, #2
    73ee:	4c14      	ldr	r4, [pc, #80]	; (7440 <LORAReg_InitNA+0x234>)
    73f0:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    73f2:	4b14      	ldr	r3, [pc, #80]	; (7444 <LORAReg_InitNA+0x238>)
    73f4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    73f6:	4b14      	ldr	r3, [pc, #80]	; (7448 <LORAReg_InitNA+0x23c>)
    73f8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    73fa:	4b14      	ldr	r3, [pc, #80]	; (744c <LORAReg_InitNA+0x240>)
    73fc:	4798      	blx	r3
}
    73fe:	2008      	movs	r0, #8
    7400:	b009      	add	sp, #36	; 0x24
    7402:	bc3c      	pop	{r2, r3, r4, r5}
    7404:	4690      	mov	r8, r2
    7406:	4699      	mov	r9, r3
    7408:	46a2      	mov	sl, r4
    740a:	46ab      	mov	fp, r5
    740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    740e:	46c0      	nop			; (mov r8, r8)
    7410:	20002310 	.word	0x20002310
    7414:	2000230c 	.word	0x2000230c
    7418:	0001dd30 	.word	0x0001dd30
    741c:	00017691 	.word	0x00017691
    7420:	0001ddc0 	.word	0x0001ddc0
    7424:	0000020f 	.word	0x0000020f
    7428:	00000211 	.word	0x00000211
    742c:	00000213 	.word	0x00000213
    7430:	0000020d 	.word	0x0000020d
    7434:	00007209 	.word	0x00007209
    7438:	20002108 	.word	0x20002108
    743c:	0001de30 	.word	0x0001de30
    7440:	0000c0e9 	.word	0x0000c0e9
    7444:	0000a821 	.word	0x0000a821
    7448:	0000b101 	.word	0x0000b101
    744c:	0000b3e9 	.word	0x0000b3e9

00007450 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7450:	2015      	movs	r0, #21
    7452:	4770      	bx	lr

00007454 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7454:	2015      	movs	r0, #21
    7456:	4770      	bx	lr

00007458 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    7458:	232a      	movs	r3, #42	; 0x2a
    745a:	4902      	ldr	r1, [pc, #8]	; (7464 <LORAREG_GetAttr_MaxChannel+0xc>)
    745c:	5ccb      	ldrb	r3, [r1, r3]
    745e:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7460:	2008      	movs	r0, #8
    7462:	4770      	bx	lr
    7464:	20002310 	.word	0x20002310

00007468 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    7468:	4905      	ldr	r1, [pc, #20]	; (7480 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    746a:	2321      	movs	r3, #33	; 0x21
    746c:	5cc8      	ldrb	r0, [r1, r3]
    746e:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    7470:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7472:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    7474:	2bff      	cmp	r3, #255	; 0xff
    7476:	d000      	beq.n	747a <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    7478:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    747a:	3002      	adds	r0, #2
    747c:	e7fc      	b.n	7478 <LORAREG_GetAttr_MinNewChIndex+0x10>
    747e:	46c0      	nop			; (mov r8, r8)
    7480:	20002310 	.word	0x20002310

00007484 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    7484:	2322      	movs	r3, #34	; 0x22
    7486:	4902      	ldr	r1, [pc, #8]	; (7490 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    7488:	5ccb      	ldrb	r3, [r1, r3]
    748a:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    748c:	2008      	movs	r0, #8
    748e:	4770      	bx	lr
    7490:	20002310 	.word	0x20002310

00007494 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    7494:	2323      	movs	r3, #35	; 0x23
    7496:	4902      	ldr	r1, [pc, #8]	; (74a0 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    7498:	5ccb      	ldrb	r3, [r1, r3]
    749a:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    749c:	2008      	movs	r0, #8
    749e:	4770      	bx	lr
    74a0:	20002310 	.word	0x20002310

000074a4 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    74a4:	2320      	movs	r3, #32
    74a6:	4902      	ldr	r1, [pc, #8]	; (74b0 <LORAREG_GetAttr_RegFeatures+0xc>)
    74a8:	5ccb      	ldrb	r3, [r1, r3]
    74aa:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    74ac:	2008      	movs	r0, #8
    74ae:	4770      	bx	lr
    74b0:	20002310 	.word	0x20002310

000074b4 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    74b4:	b530      	push	{r4, r5, lr}
    74b6:	b083      	sub	sp, #12
    74b8:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    74ba:	780c      	ldrb	r4, [r1, #0]
    74bc:	a901      	add	r1, sp, #4
    74be:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    74c0:	2301      	movs	r3, #1
    74c2:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    74c4:	4b0d      	ldr	r3, [pc, #52]	; (74fc <LORAREG_GetAttr_DataRange+0x48>)
    74c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    74c8:	2015      	movs	r0, #21
    74ca:	4798      	blx	r3
    74cc:	2808      	cmp	r0, #8
    74ce:	d004      	beq.n	74da <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    74d0:	23ff      	movs	r3, #255	; 0xff
    74d2:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    74d4:	200a      	movs	r0, #10
	}
	return result;
}
    74d6:	b003      	add	sp, #12
    74d8:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    74da:	4909      	ldr	r1, [pc, #36]	; (7500 <LORAREG_GetAttr_DataRange+0x4c>)
    74dc:	790b      	ldrb	r3, [r1, #4]
    74de:	794a      	ldrb	r2, [r1, #5]
    74e0:	0212      	lsls	r2, r2, #8
    74e2:	4313      	orrs	r3, r2
    74e4:	798a      	ldrb	r2, [r1, #6]
    74e6:	0412      	lsls	r2, r2, #16
    74e8:	431a      	orrs	r2, r3
    74ea:	79cb      	ldrb	r3, [r1, #7]
    74ec:	061b      	lsls	r3, r3, #24
    74ee:	431a      	orrs	r2, r3
    74f0:	0063      	lsls	r3, r4, #1
    74f2:	189b      	adds	r3, r3, r2
    74f4:	785b      	ldrb	r3, [r3, #1]
    74f6:	702b      	strb	r3, [r5, #0]
    74f8:	e7ed      	b.n	74d6 <LORAREG_GetAttr_DataRange+0x22>
    74fa:	46c0      	nop			; (mov r8, r8)
    74fc:	20000cf4 	.word	0x20000cf4
    7500:	20002310 	.word	0x20002310

00007504 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    7504:	b530      	push	{r4, r5, lr}
    7506:	b083      	sub	sp, #12
    7508:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    750a:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    750c:	a901      	add	r1, sp, #4
    750e:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7510:	2301      	movs	r3, #1
    7512:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    7514:	4b0c      	ldr	r3, [pc, #48]	; (7548 <LORAREG_GetAttr_ChIdStatus+0x44>)
    7516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7518:	2015      	movs	r0, #21
    751a:	4798      	blx	r3
    751c:	2808      	cmp	r0, #8
    751e:	d004      	beq.n	752a <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    7520:	2300      	movs	r3, #0
    7522:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    7524:	200a      	movs	r0, #10
	}
	return result;
}
    7526:	b003      	add	sp, #12
    7528:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    752a:	4908      	ldr	r1, [pc, #32]	; (754c <LORAREG_GetAttr_ChIdStatus+0x48>)
    752c:	790a      	ldrb	r2, [r1, #4]
    752e:	794b      	ldrb	r3, [r1, #5]
    7530:	021b      	lsls	r3, r3, #8
    7532:	4313      	orrs	r3, r2
    7534:	798a      	ldrb	r2, [r1, #6]
    7536:	0412      	lsls	r2, r2, #16
    7538:	4313      	orrs	r3, r2
    753a:	79ca      	ldrb	r2, [r1, #7]
    753c:	0612      	lsls	r2, r2, #24
    753e:	431a      	orrs	r2, r3
    7540:	0064      	lsls	r4, r4, #1
    7542:	5ca3      	ldrb	r3, [r4, r2]
    7544:	702b      	strb	r3, [r5, #0]
    7546:	e7ee      	b.n	7526 <LORAREG_GetAttr_ChIdStatus+0x22>
    7548:	20000cf4 	.word	0x20000cf4
    754c:	20002310 	.word	0x20002310

00007550 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    7550:	2301      	movs	r3, #1
    7552:	425b      	negs	r3, r3
    7554:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7556:	200a      	movs	r0, #10
    7558:	4770      	bx	lr

0000755a <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    755a:	2301      	movs	r3, #1
    755c:	425b      	negs	r3, r3
    755e:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7560:	200a      	movs	r0, #10
    7562:	4770      	bx	lr

00007564 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    7564:	23fa      	movs	r3, #250	; 0xfa
    7566:	009b      	lsls	r3, r3, #2
    7568:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    756a:	2008      	movs	r0, #8
    756c:	4770      	bx	lr

0000756e <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    756e:	23fa      	movs	r3, #250	; 0xfa
    7570:	00db      	lsls	r3, r3, #3
    7572:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7574:	2008      	movs	r0, #8
    7576:	4770      	bx	lr

00007578 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    7578:	4b01      	ldr	r3, [pc, #4]	; (7580 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    757a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    757c:	2008      	movs	r0, #8
    757e:	4770      	bx	lr
    7580:	00001388 	.word	0x00001388

00007584 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    7584:	4b01      	ldr	r3, [pc, #4]	; (758c <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    7586:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7588:	2008      	movs	r0, #8
    758a:	4770      	bx	lr
    758c:	00001770 	.word	0x00001770

00007590 <LORAREG_GetAttr_MacAdrAckDelay>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    7590:	2320      	movs	r3, #32
    7592:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7594:	2008      	movs	r0, #8
    7596:	4770      	bx	lr

00007598 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    7598:	2340      	movs	r3, #64	; 0x40
    759a:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    759c:	2008      	movs	r0, #8
    759e:	4770      	bx	lr

000075a0 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    75a0:	2327      	movs	r3, #39	; 0x27
    75a2:	4902      	ldr	r1, [pc, #8]	; (75ac <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    75a4:	5ccb      	ldrb	r3, [r1, r3]
    75a6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    75a8:	2008      	movs	r0, #8
    75aa:	4770      	bx	lr
    75ac:	20002310 	.word	0x20002310

000075b0 <LORAREG_GetAttr_DefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_DefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.defTxPwrIndx;
    75b0:	232e      	movs	r3, #46	; 0x2e
    75b2:	4902      	ldr	r1, [pc, #8]	; (75bc <LORAREG_GetAttr_DefTxPwr+0xc>)
    75b4:	5ccb      	ldrb	r3, [r1, r3]
    75b6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    75b8:	2008      	movs	r0, #8
    75ba:	4770      	bx	lr
    75bc:	20002310 	.word	0x20002310

000075c0 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    75c0:	2326      	movs	r3, #38	; 0x26
    75c2:	4902      	ldr	r1, [pc, #8]	; (75cc <LORAREG_GetAttr_RegDefTxDR+0xc>)
    75c4:	5ccb      	ldrb	r3, [r1, r3]
    75c6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    75c8:	2008      	movs	r0, #8
    75ca:	4770      	bx	lr
    75cc:	20002310 	.word	0x20002310

000075d0 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    75d0:	2330      	movs	r3, #48	; 0x30
    75d2:	4902      	ldr	r1, [pc, #8]	; (75dc <LORAREG_GetAttr_CurChIndx+0xc>)
    75d4:	5ccb      	ldrb	r3, [r1, r3]
    75d6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    75d8:	2008      	movs	r0, #8
    75da:	4770      	bx	lr
    75dc:	20002310 	.word	0x20002310

000075e0 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    75e0:	4b09      	ldr	r3, [pc, #36]	; (7608 <LORAREG_GetAttr_DefLBTParams+0x28>)
    75e2:	21e0      	movs	r1, #224	; 0xe0
    75e4:	0049      	lsls	r1, r1, #1
    75e6:	5c59      	ldrb	r1, [r3, r1]
    75e8:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    75ea:	21df      	movs	r1, #223	; 0xdf
    75ec:	0049      	lsls	r1, r1, #1
    75ee:	5c59      	ldrb	r1, [r3, r1]
    75f0:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    75f2:	21c0      	movs	r1, #192	; 0xc0
    75f4:	31ff      	adds	r1, #255	; 0xff
    75f6:	565b      	ldrsb	r3, [r3, r1]
    75f8:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    75fa:	2301      	movs	r3, #1
    75fc:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    75fe:	3304      	adds	r3, #4
    7600:	8093      	strh	r3, [r2, #4]
	return 0;
}
    7602:	2000      	movs	r0, #0
    7604:	4770      	bx	lr
    7606:	46c0      	nop			; (mov r8, r8)
    7608:	20002310 	.word	0x20002310

0000760c <LORAREG_GetAttr_FreqT1>:
{
    760c:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    760e:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    7610:	212a      	movs	r1, #42	; 0x2a
    7612:	4820      	ldr	r0, [pc, #128]	; (7694 <LORAREG_GetAttr_FreqT1+0x88>)
    7614:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7616:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    7618:	428b      	cmp	r3, r1
    761a:	dc3a      	bgt.n	7692 <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    761c:	304b      	adds	r0, #75	; 0x4b
    761e:	30ff      	adds	r0, #255	; 0xff
    7620:	4c1c      	ldr	r4, [pc, #112]	; (7694 <LORAREG_GetAttr_FreqT1+0x88>)
    7622:	5c24      	ldrb	r4, [r4, r0]
    7624:	42a3      	cmp	r3, r4
    7626:	d31c      	bcc.n	7662 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    7628:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    762a:	428b      	cmp	r3, r1
    762c:	da31      	bge.n	7692 <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    762e:	1b1b      	subs	r3, r3, r4
    7630:	4919      	ldr	r1, [pc, #100]	; (7698 <LORAREG_GetAttr_FreqT1+0x8c>)
    7632:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7634:	4c17      	ldr	r4, [pc, #92]	; (7694 <LORAREG_GetAttr_FreqT1+0x88>)
    7636:	21a4      	movs	r1, #164	; 0xa4
    7638:	0049      	lsls	r1, r1, #1
    763a:	5c61      	ldrb	r1, [r4, r1]
    763c:	204a      	movs	r0, #74	; 0x4a
    763e:	30ff      	adds	r0, #255	; 0xff
    7640:	5c20      	ldrb	r0, [r4, r0]
    7642:	0200      	lsls	r0, r0, #8
    7644:	4301      	orrs	r1, r0
    7646:	20a5      	movs	r0, #165	; 0xa5
    7648:	0040      	lsls	r0, r0, #1
    764a:	5c20      	ldrb	r0, [r4, r0]
    764c:	0400      	lsls	r0, r0, #16
    764e:	4308      	orrs	r0, r1
    7650:	214c      	movs	r1, #76	; 0x4c
    7652:	31ff      	adds	r1, #255	; 0xff
    7654:	5c61      	ldrb	r1, [r4, r1]
    7656:	0609      	lsls	r1, r1, #24
    7658:	4301      	orrs	r1, r0
    765a:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    765c:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    765e:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    7660:	e017      	b.n	7692 <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7662:	4c0c      	ldr	r4, [pc, #48]	; (7694 <LORAREG_GetAttr_FreqT1+0x88>)
    7664:	21a2      	movs	r1, #162	; 0xa2
    7666:	0049      	lsls	r1, r1, #1
    7668:	5c61      	ldrb	r1, [r4, r1]
    766a:	2046      	movs	r0, #70	; 0x46
    766c:	30ff      	adds	r0, #255	; 0xff
    766e:	5c20      	ldrb	r0, [r4, r0]
    7670:	0200      	lsls	r0, r0, #8
    7672:	4308      	orrs	r0, r1
    7674:	21a3      	movs	r1, #163	; 0xa3
    7676:	0049      	lsls	r1, r1, #1
    7678:	5c61      	ldrb	r1, [r4, r1]
    767a:	0409      	lsls	r1, r1, #16
    767c:	4308      	orrs	r0, r1
    767e:	2148      	movs	r1, #72	; 0x48
    7680:	31ff      	adds	r1, #255	; 0xff
    7682:	5c61      	ldrb	r1, [r4, r1]
    7684:	0609      	lsls	r1, r1, #24
    7686:	4301      	orrs	r1, r0
    7688:	4804      	ldr	r0, [pc, #16]	; (769c <LORAREG_GetAttr_FreqT1+0x90>)
    768a:	4343      	muls	r3, r0
    768c:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    768e:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7690:	2008      	movs	r0, #8
}
    7692:	bd30      	pop	{r4, r5, pc}
    7694:	20002310 	.word	0x20002310
    7698:	00186a00 	.word	0x00186a00
    769c:	00030d40 	.word	0x00030d40

000076a0 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    76a0:	780a      	ldrb	r2, [r1, #0]
    76a2:	2352      	movs	r3, #82	; 0x52
    76a4:	33ff      	adds	r3, #255	; 0xff
    76a6:	4903      	ldr	r1, [pc, #12]	; (76b4 <ValidateDataRateTxT1+0x14>)
    76a8:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76aa:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    76ac:	429a      	cmp	r2, r3
    76ae:	d900      	bls.n	76b2 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    76b0:	3002      	adds	r0, #2
	}
	
	return result;
}
    76b2:	4770      	bx	lr
    76b4:	20002310 	.word	0x20002310

000076b8 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    76b8:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    76ba:	2224      	movs	r2, #36	; 0x24
    76bc:	4908      	ldr	r1, [pc, #32]	; (76e0 <ValidateDataRateTxT2+0x28>)
    76be:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    76c0:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    76c2:	429a      	cmp	r2, r3
    76c4:	d30a      	bcc.n	76dc <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    76c6:	22c4      	movs	r2, #196	; 0xc4
    76c8:	32ff      	adds	r2, #255	; 0xff
    76ca:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76cc:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    76ce:	07d2      	lsls	r2, r2, #31
    76d0:	d504      	bpl.n	76dc <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    76d2:	2222      	movs	r2, #34	; 0x22
    76d4:	5c8a      	ldrb	r2, [r1, r2]
    76d6:	429a      	cmp	r2, r3
    76d8:	d900      	bls.n	76dc <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    76da:	3002      	adds	r0, #2
	}
	
	return result;
}
    76dc:	4770      	bx	lr
    76de:	46c0      	nop			; (mov r8, r8)
    76e0:	20002310 	.word	0x20002310

000076e4 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    76e4:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    76e6:	2254      	movs	r2, #84	; 0x54
    76e8:	32ff      	adds	r2, #255	; 0xff
    76ea:	4906      	ldr	r1, [pc, #24]	; (7704 <ValidateDataRateRxT1+0x20>)
    76ec:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    76ee:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    76f0:	429a      	cmp	r2, r3
    76f2:	d306      	bcc.n	7702 <ValidateDataRateRxT1+0x1e>
    76f4:	22a9      	movs	r2, #169	; 0xa9
    76f6:	0052      	lsls	r2, r2, #1
    76f8:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76fa:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    76fc:	429a      	cmp	r2, r3
    76fe:	d900      	bls.n	7702 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7700:	3002      	adds	r0, #2
	}
	return result;
}
    7702:	4770      	bx	lr
    7704:	20002310 	.word	0x20002310

00007708 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7708:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    770a:	2224      	movs	r2, #36	; 0x24
    770c:	4908      	ldr	r1, [pc, #32]	; (7730 <ValidateDataRateRxT2+0x28>)
    770e:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    7710:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    7712:	429a      	cmp	r2, r3
    7714:	d30a      	bcc.n	772c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7716:	22c4      	movs	r2, #196	; 0xc4
    7718:	32ff      	adds	r2, #255	; 0xff
    771a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    771c:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    771e:	0792      	lsls	r2, r2, #30
    7720:	d504      	bpl.n	772c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7722:	2222      	movs	r2, #34	; 0x22
    7724:	5c8a      	ldrb	r2, [r1, r2]
    7726:	429a      	cmp	r2, r3
    7728:	d900      	bls.n	772c <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    772a:	3002      	adds	r0, #2
	}

	return result;
}
    772c:	4770      	bx	lr
    772e:	46c0      	nop			; (mov r8, r8)
    7730:	20002310 	.word	0x20002310

00007734 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    7734:	780a      	ldrb	r2, [r1, #0]
    7736:	232a      	movs	r3, #42	; 0x2a
    7738:	4903      	ldr	r1, [pc, #12]	; (7748 <ValidateChannelId+0x14>)
    773a:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    773c:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    773e:	429a      	cmp	r2, r3
    7740:	db00      	blt.n	7744 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    7742:	3002      	adds	r0, #2
    }
	
    return result;
}
    7744:	4770      	bx	lr
    7746:	46c0      	nop			; (mov r8, r8)
    7748:	20002310 	.word	0x20002310

0000774c <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    774c:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    774e:	222a      	movs	r2, #42	; 0x2a
    7750:	4808      	ldr	r0, [pc, #32]	; (7774 <ValidateChannelIdT2+0x28>)
    7752:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    7754:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7756:	4293      	cmp	r3, r2
    7758:	da0a      	bge.n	7770 <ValidateChannelIdT2+0x24>
    775a:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    775c:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    775e:	2a00      	cmp	r2, #0
    7760:	d106      	bne.n	7770 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    7762:	22c2      	movs	r2, #194	; 0xc2
    7764:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7766:	4903      	ldr	r1, [pc, #12]	; (7774 <ValidateChannelIdT2+0x28>)
    7768:	5c8a      	ldrb	r2, [r1, r2]
    776a:	429a      	cmp	r2, r3
    776c:	d900      	bls.n	7770 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    776e:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    7770:	4770      	bx	lr
    7772:	46c0      	nop			; (mov r8, r8)
    7774:	20002310 	.word	0x20002310

00007778 <LORAREG_GetAttr_DutyCycleT2>:
{
    7778:	b530      	push	{r4, r5, lr}
    777a:	b083      	sub	sp, #12
    777c:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    777e:	780d      	ldrb	r5, [r1, #0]
    7780:	a901      	add	r1, sp, #4
    7782:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    7784:	2301      	movs	r3, #1
    7786:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7788:	2015      	movs	r0, #21
    778a:	4b0b      	ldr	r3, [pc, #44]	; (77b8 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    778c:	4798      	blx	r3
    778e:	2808      	cmp	r0, #8
    7790:	d002      	beq.n	7798 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    7792:	200a      	movs	r0, #10
}
    7794:	b003      	add	sp, #12
    7796:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    7798:	4a08      	ldr	r2, [pc, #32]	; (77bc <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    779a:	006b      	lsls	r3, r5, #1
    779c:	195b      	adds	r3, r3, r5
    779e:	009b      	lsls	r3, r3, #2
    77a0:	18d3      	adds	r3, r2, r3
    77a2:	33ac      	adds	r3, #172	; 0xac
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	33d4      	adds	r3, #212	; 0xd4
    77a8:	005b      	lsls	r3, r3, #1
    77aa:	18d2      	adds	r2, r2, r3
    77ac:	7991      	ldrb	r1, [r2, #6]
    77ae:	79d3      	ldrb	r3, [r2, #7]
    77b0:	021b      	lsls	r3, r3, #8
    77b2:	430b      	orrs	r3, r1
    77b4:	8023      	strh	r3, [r4, #0]
    77b6:	e7ed      	b.n	7794 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    77b8:	0000774d 	.word	0x0000774d
    77bc:	20002310 	.word	0x20002310

000077c0 <LORAREG_GetAttr_MinMaxDr>:
{
    77c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77c2:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    77c4:	4b21      	ldr	r3, [pc, #132]	; (784c <LORAREG_GetAttr_MinMaxDr+0x8c>)
    77c6:	2124      	movs	r1, #36	; 0x24
    77c8:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    77ca:	3101      	adds	r1, #1
    77cc:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    77ce:	3105      	adds	r1, #5
    77d0:	565e      	ldrsb	r6, [r3, r1]
    77d2:	2e00      	cmp	r6, #0
    77d4:	dd28      	ble.n	7828 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    77d6:	0019      	movs	r1, r3
    77d8:	791d      	ldrb	r5, [r3, #4]
    77da:	795b      	ldrb	r3, [r3, #5]
    77dc:	021b      	lsls	r3, r3, #8
    77de:	432b      	orrs	r3, r5
    77e0:	798d      	ldrb	r5, [r1, #6]
    77e2:	042d      	lsls	r5, r5, #16
    77e4:	432b      	orrs	r3, r5
    77e6:	79cd      	ldrb	r5, [r1, #7]
    77e8:	062d      	lsls	r5, r5, #24
    77ea:	431d      	orrs	r5, r3
    77ec:	2100      	movs	r1, #0
    77ee:	e00b      	b.n	7808 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    77f0:	7843      	ldrb	r3, [r0, #1]
    77f2:	091b      	lsrs	r3, r3, #4
    77f4:	42bb      	cmp	r3, r7
    77f6:	dd03      	ble.n	7800 <LORAREG_GetAttr_MinMaxDr+0x40>
    77f8:	7800      	ldrb	r0, [r0, #0]
    77fa:	2800      	cmp	r0, #0
    77fc:	d000      	beq.n	7800 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    77fe:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    7800:	3101      	adds	r1, #1
    7802:	b2c9      	uxtb	r1, r1
    7804:	42b1      	cmp	r1, r6
    7806:	da0f      	bge.n	7828 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    7808:	0048      	lsls	r0, r1, #1
    780a:	1828      	adds	r0, r5, r0
    780c:	7843      	ldrb	r3, [r0, #1]
    780e:	071b      	lsls	r3, r3, #28
    7810:	0f1b      	lsrs	r3, r3, #28
    7812:	42a3      	cmp	r3, r4
    7814:	daec      	bge.n	77f0 <LORAREG_GetAttr_MinMaxDr+0x30>
    7816:	7802      	ldrb	r2, [r0, #0]
    7818:	2a00      	cmp	r2, #0
    781a:	d0f1      	beq.n	7800 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    781c:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    781e:	7843      	ldrb	r3, [r0, #1]
    7820:	091b      	lsrs	r3, r3, #4
    7822:	42bb      	cmp	r3, r7
    7824:	dceb      	bgt.n	77fe <LORAREG_GetAttr_MinMaxDr+0x3e>
    7826:	e7eb      	b.n	7800 <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    7828:	23c4      	movs	r3, #196	; 0xc4
    782a:	33ff      	adds	r3, #255	; 0xff
    782c:	4907      	ldr	r1, [pc, #28]	; (784c <LORAREG_GetAttr_MinMaxDr+0x8c>)
    782e:	5ccb      	ldrb	r3, [r1, r3]
    7830:	07db      	lsls	r3, r3, #31
    7832:	d506      	bpl.n	7842 <LORAREG_GetAttr_MinMaxDr+0x82>
    7834:	232f      	movs	r3, #47	; 0x2f
    7836:	5cc9      	ldrb	r1, [r1, r3]
    7838:	4b05      	ldr	r3, [pc, #20]	; (7850 <LORAREG_GetAttr_MinMaxDr+0x90>)
    783a:	410b      	asrs	r3, r1
    783c:	07db      	lsls	r3, r3, #31
    783e:	d500      	bpl.n	7842 <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    7840:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    7842:	4663      	mov	r3, ip
    7844:	701c      	strb	r4, [r3, #0]
    7846:	705f      	strb	r7, [r3, #1]
}
    7848:	2008      	movs	r0, #8
    784a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    784c:	20002310 	.word	0x20002310
    7850:	00007fe0 	.word	0x00007fe0

00007854 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    7854:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    7856:	2b05      	cmp	r3, #5
    7858:	d004      	beq.n	7864 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    785a:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    785c:	2b07      	cmp	r3, #7
    785e:	d900      	bls.n	7862 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    7860:	3002      	adds	r0, #2
    }

    return result;
}
    7862:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    7864:	200a      	movs	r0, #10
    7866:	e7fc      	b.n	7862 <ValidateChannelMaskCntl+0xe>

00007868 <ValidateTxPower>:
 *		   LORAWAN_INVALID_PARAMETER If the Transmit Power is not supported
 */
static StackRetStatus_t ValidateTxPower (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
    7868:	780b      	ldrb	r3, [r1, #0]
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
    if (0xf != txPowerNew)
    786a:	2b0f      	cmp	r3, #15
    786c:	d007      	beq.n	787e <ValidateTxPower+0x16>
    { /* 0xF means keep the current settings & ignore this cmd */
	    if (txPowerNew > RegParams.maxTxPwrIndx)
    786e:	222d      	movs	r2, #45	; 0x2d
    7870:	4904      	ldr	r1, [pc, #16]	; (7884 <ValidateTxPower+0x1c>)
    7872:	568a      	ldrsb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7874:	2008      	movs	r0, #8
	    if (txPowerNew > RegParams.maxTxPwrIndx)
    7876:	4293      	cmp	r3, r2
    7878:	dd00      	ble.n	787c <ValidateTxPower+0x14>
	    {
		    result = LORAWAN_INVALID_PARAMETER;
    787a:	3002      	adds	r0, #2
	    }
    }    

	return result;
}
    787c:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    787e:	2008      	movs	r0, #8
    7880:	e7fc      	b.n	787c <ValidateTxPower+0x14>
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	20002310 	.word	0x20002310

00007888 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    7888:	2008      	movs	r0, #8
    788a:	4770      	bx	lr

0000788c <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    788c:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    788e:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    7890:	2900      	cmp	r1, #0
    7892:	d020      	beq.n	78d6 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    7894:	232a      	movs	r3, #42	; 0x2a
    7896:	4a11      	ldr	r2, [pc, #68]	; (78dc <ValidateChannelMaskT2+0x50>)
    7898:	56d0      	ldrsb	r0, [r2, r3]
    789a:	2800      	cmp	r0, #0
    789c:	dd1b      	ble.n	78d6 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    789e:	7a14      	ldrb	r4, [r2, #8]
    78a0:	7a53      	ldrb	r3, [r2, #9]
    78a2:	021b      	lsls	r3, r3, #8
    78a4:	4323      	orrs	r3, r4
    78a6:	7a94      	ldrb	r4, [r2, #10]
    78a8:	0424      	lsls	r4, r4, #16
    78aa:	4323      	orrs	r3, r4
    78ac:	7ad4      	ldrb	r4, [r2, #11]
    78ae:	0624      	lsls	r4, r4, #24
    78b0:	431c      	orrs	r4, r3
    78b2:	2300      	movs	r3, #0
    78b4:	2503      	movs	r5, #3
    78b6:	e004      	b.n	78c2 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    78b8:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    78ba:	3301      	adds	r3, #1
    78bc:	b2db      	uxtb	r3, r3
    78be:	4283      	cmp	r3, r0
    78c0:	da09      	bge.n	78d6 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    78c2:	2900      	cmp	r1, #0
    78c4:	d0f8      	beq.n	78b8 <ValidateChannelMaskT2+0x2c>
    78c6:	005a      	lsls	r2, r3, #1
    78c8:	18d2      	adds	r2, r2, r3
    78ca:	0092      	lsls	r2, r2, #2
    78cc:	18a2      	adds	r2, r4, r2
    78ce:	7ad2      	ldrb	r2, [r2, #11]
    78d0:	402a      	ands	r2, r5
    78d2:	2a03      	cmp	r2, #3
    78d4:	d0f0      	beq.n	78b8 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    78d6:	2008      	movs	r0, #8
    78d8:	bd30      	pop	{r4, r5, pc}
    78da:	46c0      	nop			; (mov r8, r8)
    78dc:	20002310 	.word	0x20002310

000078e0 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    78e0:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    78e2:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    78e4:	2b00      	cmp	r3, #0
    78e6:	d002      	beq.n	78ee <ValidateChannelMaskCntlT2+0xe>
    78e8:	2b06      	cmp	r3, #6
    78ea:	d001      	beq.n	78f0 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    78ec:	3002      	adds	r0, #2
    }
	return result;
}
    78ee:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    78f0:	2008      	movs	r0, #8
    78f2:	e7fc      	b.n	78ee <ValidateChannelMaskCntlT2+0xe>

000078f4 <ValidateChMaskChCntlT2>:
{
    78f4:	b510      	push	{r4, lr}
    78f6:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    78f8:	ac01      	add	r4, sp, #4
    78fa:	2204      	movs	r2, #4
    78fc:	0020      	movs	r0, r4
    78fe:	4b0f      	ldr	r3, [pc, #60]	; (793c <ValidateChMaskChCntlT2+0x48>)
    7900:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    7902:	8863      	ldrh	r3, [r4, #2]
    7904:	2b00      	cmp	r3, #0
    7906:	d104      	bne.n	7912 <ValidateChMaskChCntlT2+0x1e>
    7908:	ab01      	add	r3, sp, #4
    790a:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    790c:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    790e:	2a00      	cmp	r2, #0
    7910:	d007      	beq.n	7922 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    7912:	466b      	mov	r3, sp
    7914:	1d99      	adds	r1, r3, #6
    7916:	201a      	movs	r0, #26
    7918:	4b09      	ldr	r3, [pc, #36]	; (7940 <ValidateChMaskChCntlT2+0x4c>)
    791a:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    791c:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    791e:	2808      	cmp	r0, #8
    7920:	d002      	beq.n	7928 <ValidateChMaskChCntlT2+0x34>
}
    7922:	0018      	movs	r0, r3
    7924:	b002      	add	sp, #8
    7926:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    7928:	a901      	add	r1, sp, #4
    792a:	3013      	adds	r0, #19
    792c:	4b05      	ldr	r3, [pc, #20]	; (7944 <ValidateChMaskChCntlT2+0x50>)
    792e:	4798      	blx	r3
    7930:	0003      	movs	r3, r0
    7932:	2808      	cmp	r0, #8
    7934:	d0f5      	beq.n	7922 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    7936:	230a      	movs	r3, #10
    7938:	e7f3      	b.n	7922 <ValidateChMaskChCntlT2+0x2e>
    793a:	46c0      	nop			; (mov r8, r8)
    793c:	00017691 	.word	0x00017691
    7940:	0000788d 	.word	0x0000788d
    7944:	000078e1 	.word	0x000078e1

00007948 <ValidateDataRate>:
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRate (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7948:	780b      	ldrb	r3, [r1, #0]

    if (0xf != dataRate)
    794a:	2b0f      	cmp	r3, #15
    794c:	d007      	beq.n	795e <ValidateDataRate+0x16>
    { /* 0xF means keep the current settings & ignore this cmd */
        if ( dataRate > RegParams.minDataRate )
    794e:	2224      	movs	r2, #36	; 0x24
    7950:	4904      	ldr	r1, [pc, #16]	; (7964 <ValidateDataRate+0x1c>)
    7952:	5c8a      	ldrb	r2, [r1, r2]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    7954:	2008      	movs	r0, #8
        if ( dataRate > RegParams.minDataRate )
    7956:	429a      	cmp	r2, r3
    7958:	d200      	bcs.n	795c <ValidateDataRate+0x14>
        {
            result = LORAWAN_INVALID_PARAMETER;
    795a:	3002      	adds	r0, #2
        }        
    }

    return result;
}
    795c:	4770      	bx	lr
    StackRetStatus_t result = LORAWAN_SUCCESS;
    795e:	2008      	movs	r0, #8
    7960:	e7fc      	b.n	795c <ValidateDataRate+0x14>
    7962:	46c0      	nop			; (mov r8, r8)
    7964:	20002310 	.word	0x20002310

00007968 <LORAREG_GetAttr_SpreadFactorT2>:
{
    7968:	b570      	push	{r4, r5, r6, lr}
    796a:	000c      	movs	r4, r1
    796c:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    796e:	200f      	movs	r0, #15
    7970:	4b0b      	ldr	r3, [pc, #44]	; (79a0 <LORAREG_GetAttr_SpreadFactorT2+0x38>)
    7972:	4798      	blx	r3
    7974:	2808      	cmp	r0, #8
    7976:	d001      	beq.n	797c <LORAREG_GetAttr_SpreadFactorT2+0x14>
		result =  LORAWAN_INVALID_PARAMETER;
    7978:	200a      	movs	r0, #10
}
    797a:	bd70      	pop	{r4, r5, r6, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    797c:	4909      	ldr	r1, [pc, #36]	; (79a4 <LORAREG_GetAttr_SpreadFactorT2+0x3c>)
    797e:	780b      	ldrb	r3, [r1, #0]
    7980:	784a      	ldrb	r2, [r1, #1]
    7982:	0212      	lsls	r2, r2, #8
    7984:	4313      	orrs	r3, r2
    7986:	788a      	ldrb	r2, [r1, #2]
    7988:	0412      	lsls	r2, r2, #16
    798a:	431a      	orrs	r2, r3
    798c:	78cb      	ldrb	r3, [r1, #3]
    798e:	061b      	lsls	r3, r3, #24
    7990:	431a      	orrs	r2, r3
    7992:	7823      	ldrb	r3, [r4, #0]
    7994:	00db      	lsls	r3, r3, #3
    7996:	189b      	adds	r3, r3, r2
    7998:	795b      	ldrb	r3, [r3, #5]
    799a:	702b      	strb	r3, [r5, #0]
    799c:	e7ed      	b.n	797a <LORAREG_GetAttr_SpreadFactorT2+0x12>
    799e:	46c0      	nop			; (mov r8, r8)
    79a0:	00007949 	.word	0x00007949
    79a4:	20002310 	.word	0x20002310

000079a8 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    79a8:	b570      	push	{r4, r5, r6, lr}
    79aa:	000c      	movs	r4, r1
    79ac:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79ae:	200f      	movs	r0, #15
    79b0:	4b0b      	ldr	r3, [pc, #44]	; (79e0 <LORAREG_GetAttr_BandwidthAttrT2+0x38>)
    79b2:	4798      	blx	r3
    79b4:	2808      	cmp	r0, #8
    79b6:	d001      	beq.n	79bc <LORAREG_GetAttr_BandwidthAttrT2+0x14>
		result = LORAWAN_INVALID_PARAMETER;
    79b8:	200a      	movs	r0, #10
}
    79ba:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    79bc:	4909      	ldr	r1, [pc, #36]	; (79e4 <LORAREG_GetAttr_BandwidthAttrT2+0x3c>)
    79be:	780b      	ldrb	r3, [r1, #0]
    79c0:	784a      	ldrb	r2, [r1, #1]
    79c2:	0212      	lsls	r2, r2, #8
    79c4:	4313      	orrs	r3, r2
    79c6:	788a      	ldrb	r2, [r1, #2]
    79c8:	0412      	lsls	r2, r2, #16
    79ca:	431a      	orrs	r2, r3
    79cc:	78cb      	ldrb	r3, [r1, #3]
    79ce:	061b      	lsls	r3, r3, #24
    79d0:	431a      	orrs	r2, r3
    79d2:	7823      	ldrb	r3, [r4, #0]
    79d4:	00db      	lsls	r3, r3, #3
    79d6:	189b      	adds	r3, r3, r2
    79d8:	799b      	ldrb	r3, [r3, #6]
    79da:	702b      	strb	r3, [r5, #0]
    79dc:	e7ed      	b.n	79ba <LORAREG_GetAttr_BandwidthAttrT2+0x12>
    79de:	46c0      	nop			; (mov r8, r8)
    79e0:	00007949 	.word	0x00007949
    79e4:	20002310 	.word	0x20002310

000079e8 <LORAREG_GetAttr_ModulationAttrT2>:
{
    79e8:	b570      	push	{r4, r5, r6, lr}
    79ea:	000c      	movs	r4, r1
    79ec:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79ee:	200f      	movs	r0, #15
    79f0:	4b0b      	ldr	r3, [pc, #44]	; (7a20 <LORAREG_GetAttr_ModulationAttrT2+0x38>)
    79f2:	4798      	blx	r3
    79f4:	2808      	cmp	r0, #8
    79f6:	d001      	beq.n	79fc <LORAREG_GetAttr_ModulationAttrT2+0x14>
		result = LORAWAN_INVALID_PARAMETER;
    79f8:	200a      	movs	r0, #10
}
    79fa:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    79fc:	4909      	ldr	r1, [pc, #36]	; (7a24 <LORAREG_GetAttr_ModulationAttrT2+0x3c>)
    79fe:	780b      	ldrb	r3, [r1, #0]
    7a00:	784a      	ldrb	r2, [r1, #1]
    7a02:	0212      	lsls	r2, r2, #8
    7a04:	4313      	orrs	r3, r2
    7a06:	788a      	ldrb	r2, [r1, #2]
    7a08:	0412      	lsls	r2, r2, #16
    7a0a:	431a      	orrs	r2, r3
    7a0c:	78cb      	ldrb	r3, [r1, #3]
    7a0e:	061b      	lsls	r3, r3, #24
    7a10:	431a      	orrs	r2, r3
    7a12:	7823      	ldrb	r3, [r4, #0]
    7a14:	00db      	lsls	r3, r3, #3
    7a16:	189b      	adds	r3, r3, r2
    7a18:	79db      	ldrb	r3, [r3, #7]
    7a1a:	702b      	strb	r3, [r5, #0]
    7a1c:	e7ed      	b.n	79fa <LORAREG_GetAttr_ModulationAttrT2+0x12>
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	00007949 	.word	0x00007949
    7a24:	20002310 	.word	0x20002310

00007a28 <LORAREG_GetAttr_MaxPayloadT2>:
{
    7a28:	b570      	push	{r4, r5, r6, lr}
    7a2a:	000c      	movs	r4, r1
    7a2c:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a2e:	200f      	movs	r0, #15
    7a30:	4b0b      	ldr	r3, [pc, #44]	; (7a60 <LORAREG_GetAttr_MaxPayloadT2+0x38>)
    7a32:	4798      	blx	r3
    7a34:	2808      	cmp	r0, #8
    7a36:	d001      	beq.n	7a3c <LORAREG_GetAttr_MaxPayloadT2+0x14>
		result =  LORAWAN_INVALID_PARAMETER;
    7a38:	200a      	movs	r0, #10
}
    7a3a:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7a3c:	4909      	ldr	r1, [pc, #36]	; (7a64 <LORAREG_GetAttr_MaxPayloadT2+0x3c>)
    7a3e:	780b      	ldrb	r3, [r1, #0]
    7a40:	784a      	ldrb	r2, [r1, #1]
    7a42:	0212      	lsls	r2, r2, #8
    7a44:	4313      	orrs	r3, r2
    7a46:	788a      	ldrb	r2, [r1, #2]
    7a48:	0412      	lsls	r2, r2, #16
    7a4a:	431a      	orrs	r2, r3
    7a4c:	78cb      	ldrb	r3, [r1, #3]
    7a4e:	061b      	lsls	r3, r3, #24
    7a50:	431a      	orrs	r2, r3
    7a52:	7823      	ldrb	r3, [r4, #0]
    7a54:	00db      	lsls	r3, r3, #3
    7a56:	189b      	adds	r3, r3, r2
    7a58:	789b      	ldrb	r3, [r3, #2]
    7a5a:	702b      	strb	r3, [r5, #0]
    7a5c:	e7ed      	b.n	7a3a <LORAREG_GetAttr_MaxPayloadT2+0x12>
    7a5e:	46c0      	nop			; (mov r8, r8)
    7a60:	00007949 	.word	0x00007949
    7a64:	20002310 	.word	0x20002310

00007a68 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7a68:	b570      	push	{r4, r5, r6, lr}
    7a6a:	000c      	movs	r4, r1
    7a6c:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a6e:	200f      	movs	r0, #15
    7a70:	4b0b      	ldr	r3, [pc, #44]	; (7aa0 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7a72:	4798      	blx	r3
    7a74:	2808      	cmp	r0, #8
    7a76:	d001      	beq.n	7a7c <LORAREG_GetAttr_RxWindowOffsetT2+0x14>
		return LORAWAN_INVALID_PARAMETER;
    7a78:	200a      	movs	r0, #10
}
    7a7a:	bd70      	pop	{r4, r5, r6, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7a7c:	4909      	ldr	r1, [pc, #36]	; (7aa4 <LORAREG_GetAttr_RxWindowOffsetT2+0x3c>)
    7a7e:	780b      	ldrb	r3, [r1, #0]
    7a80:	784a      	ldrb	r2, [r1, #1]
    7a82:	0212      	lsls	r2, r2, #8
    7a84:	4313      	orrs	r3, r2
    7a86:	788a      	ldrb	r2, [r1, #2]
    7a88:	0412      	lsls	r2, r2, #16
    7a8a:	431a      	orrs	r2, r3
    7a8c:	78cb      	ldrb	r3, [r1, #3]
    7a8e:	061b      	lsls	r3, r3, #24
    7a90:	431a      	orrs	r2, r3
    7a92:	7823      	ldrb	r3, [r4, #0]
    7a94:	00db      	lsls	r3, r3, #3
    7a96:	189b      	adds	r3, r3, r2
    7a98:	791b      	ldrb	r3, [r3, #4]
    7a9a:	b25b      	sxtb	r3, r3
    7a9c:	702b      	strb	r3, [r5, #0]
	return result;
    7a9e:	e7ec      	b.n	7a7a <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
    7aa0:	00007949 	.word	0x00007949
    7aa4:	20002310 	.word	0x20002310

00007aa8 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    7aa8:	b570      	push	{r4, r5, r6, lr}
    7aaa:	000d      	movs	r5, r1
    7aac:	0014      	movs	r4, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7aae:	200f      	movs	r0, #15
    7ab0:	4b0c      	ldr	r3, [pc, #48]	; (7ae4 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7ab2:	4798      	blx	r3
    7ab4:	2808      	cmp	r0, #8
    7ab6:	d001      	beq.n	7abc <LORAREG_GetAttr_RxWindowSizeT2+0x14>
		return LORAWAN_INVALID_PARAMETER;
    7ab8:	200a      	movs	r0, #10
}
    7aba:	bd70      	pop	{r4, r5, r6, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    7abc:	490a      	ldr	r1, [pc, #40]	; (7ae8 <LORAREG_GetAttr_RxWindowSizeT2+0x40>)
    7abe:	780b      	ldrb	r3, [r1, #0]
    7ac0:	784a      	ldrb	r2, [r1, #1]
    7ac2:	0212      	lsls	r2, r2, #8
    7ac4:	4313      	orrs	r3, r2
    7ac6:	788a      	ldrb	r2, [r1, #2]
    7ac8:	0412      	lsls	r2, r2, #16
    7aca:	431a      	orrs	r2, r3
    7acc:	78cb      	ldrb	r3, [r1, #3]
    7ace:	061b      	lsls	r3, r3, #24
    7ad0:	431a      	orrs	r2, r3
    7ad2:	782b      	ldrb	r3, [r5, #0]
    7ad4:	00db      	lsls	r3, r3, #3
    7ad6:	5c99      	ldrb	r1, [r3, r2]
    7ad8:	189b      	adds	r3, r3, r2
    7ada:	785b      	ldrb	r3, [r3, #1]
    7adc:	021b      	lsls	r3, r3, #8
    7ade:	430b      	orrs	r3, r1
    7ae0:	8023      	strh	r3, [r4, #0]
	return result;
    7ae2:	e7ea      	b.n	7aba <LORAREG_GetAttr_RxWindowSizeT2+0x12>
    7ae4:	00007949 	.word	0x00007949
    7ae8:	20002310 	.word	0x20002310

00007aec <LORAREG_GetAttr_MaxPayloadT3>:
{
    7aec:	b570      	push	{r4, r5, r6, lr}
    7aee:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7af0:	780c      	ldrb	r4, [r1, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7af2:	200f      	movs	r0, #15
    7af4:	4b15      	ldr	r3, [pc, #84]	; (7b4c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7af6:	4798      	blx	r3
    7af8:	2808      	cmp	r0, #8
    7afa:	d000      	beq.n	7afe <LORAREG_GetAttr_MaxPayloadT3+0x12>
		result =  LORAWAN_INVALID_PARAMETER;
    7afc:	200a      	movs	r0, #10
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    7afe:	23c4      	movs	r3, #196	; 0xc4
    7b00:	33ff      	adds	r3, #255	; 0xff
    7b02:	4a13      	ldr	r2, [pc, #76]	; (7b50 <LORAREG_GetAttr_MaxPayloadT3+0x64>)
    7b04:	5cd3      	ldrb	r3, [r2, r3]
    7b06:	07db      	lsls	r3, r3, #31
    7b08:	d40f      	bmi.n	7b2a <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7b0a:	4911      	ldr	r1, [pc, #68]	; (7b50 <LORAREG_GetAttr_MaxPayloadT3+0x64>)
    7b0c:	780b      	ldrb	r3, [r1, #0]
    7b0e:	784a      	ldrb	r2, [r1, #1]
    7b10:	0212      	lsls	r2, r2, #8
    7b12:	431a      	orrs	r2, r3
    7b14:	788b      	ldrb	r3, [r1, #2]
    7b16:	041b      	lsls	r3, r3, #16
    7b18:	431a      	orrs	r2, r3
    7b1a:	78cb      	ldrb	r3, [r1, #3]
    7b1c:	061b      	lsls	r3, r3, #24
    7b1e:	4313      	orrs	r3, r2
    7b20:	00e4      	lsls	r4, r4, #3
    7b22:	18e4      	adds	r4, r4, r3
    7b24:	78a3      	ldrb	r3, [r4, #2]
    7b26:	702b      	strb	r3, [r5, #0]
}
    7b28:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    7b2a:	0011      	movs	r1, r2
    7b2c:	7813      	ldrb	r3, [r2, #0]
    7b2e:	7852      	ldrb	r2, [r2, #1]
    7b30:	0212      	lsls	r2, r2, #8
    7b32:	431a      	orrs	r2, r3
    7b34:	788b      	ldrb	r3, [r1, #2]
    7b36:	041b      	lsls	r3, r3, #16
    7b38:	431a      	orrs	r2, r3
    7b3a:	78cb      	ldrb	r3, [r1, #3]
    7b3c:	061b      	lsls	r3, r3, #24
    7b3e:	4313      	orrs	r3, r2
    7b40:	00e4      	lsls	r4, r4, #3
    7b42:	18e3      	adds	r3, r4, r3
    7b44:	78db      	ldrb	r3, [r3, #3]
    7b46:	702b      	strb	r3, [r5, #0]
    7b48:	e7ee      	b.n	7b28 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
    7b4a:	46c0      	nop			; (mov r8, r8)
    7b4c:	00007949 	.word	0x00007949
    7b50:	20002310 	.word	0x20002310

00007b54 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    7b54:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    7b56:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    7b58:	232a      	movs	r3, #42	; 0x2a
    7b5a:	4a14      	ldr	r2, [pc, #80]	; (7bac <ValidateSupportedDr+0x58>)
    7b5c:	56d4      	ldrsb	r4, [r2, r3]
    7b5e:	2c00      	cmp	r4, #0
    7b60:	dd22      	ble.n	7ba8 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7b62:	7910      	ldrb	r0, [r2, #4]
    7b64:	7953      	ldrb	r3, [r2, #5]
    7b66:	021b      	lsls	r3, r3, #8
    7b68:	4303      	orrs	r3, r0
    7b6a:	7990      	ldrb	r0, [r2, #6]
    7b6c:	0400      	lsls	r0, r0, #16
    7b6e:	4303      	orrs	r3, r0
    7b70:	79d0      	ldrb	r0, [r2, #7]
    7b72:	0600      	lsls	r0, r0, #24
    7b74:	4318      	orrs	r0, r3
    7b76:	2300      	movs	r3, #0
    7b78:	002e      	movs	r6, r5
    7b7a:	e003      	b.n	7b84 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    7b7c:	3301      	adds	r3, #1
    7b7e:	b2db      	uxtb	r3, r3
    7b80:	42a3      	cmp	r3, r4
    7b82:	da0f      	bge.n	7ba4 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7b84:	005a      	lsls	r2, r3, #1
    7b86:	1882      	adds	r2, r0, r2
    7b88:	7811      	ldrb	r1, [r2, #0]
    7b8a:	2900      	cmp	r1, #0
    7b8c:	d0f6      	beq.n	7b7c <ValidateSupportedDr+0x28>
    7b8e:	7851      	ldrb	r1, [r2, #1]
    7b90:	0709      	lsls	r1, r1, #28
    7b92:	0f09      	lsrs	r1, r1, #28
    7b94:	428d      	cmp	r5, r1
    7b96:	dbf1      	blt.n	7b7c <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    7b98:	7852      	ldrb	r2, [r2, #1]
    7b9a:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7b9c:	4296      	cmp	r6, r2
    7b9e:	dced      	bgt.n	7b7c <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    7ba0:	2008      	movs	r0, #8
    7ba2:	e000      	b.n	7ba6 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7ba4:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    7ba6:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7ba8:	200a      	movs	r0, #10
    7baa:	e7fc      	b.n	7ba6 <ValidateSupportedDr+0x52>
    7bac:	20002310 	.word	0x20002310

00007bb0 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    7bb0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7bb2:	6808      	ldr	r0, [r1, #0]
    7bb4:	4b07      	ldr	r3, [pc, #28]	; (7bd4 <ValidateRxFreqT1+0x24>)
    7bb6:	469c      	mov	ip, r3
    7bb8:	4460      	add	r0, ip
    7bba:	4a07      	ldr	r2, [pc, #28]	; (7bd8 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    7bbc:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7bbe:	4290      	cmp	r0, r2
    7bc0:	d806      	bhi.n	7bd0 <ValidateRxFreqT1+0x20>
    7bc2:	4906      	ldr	r1, [pc, #24]	; (7bdc <ValidateRxFreqT1+0x2c>)
    7bc4:	4b06      	ldr	r3, [pc, #24]	; (7be0 <ValidateRxFreqT1+0x30>)
    7bc6:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7bc8:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7bca:	2900      	cmp	r1, #0
    7bcc:	d000      	beq.n	7bd0 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    7bce:	3302      	adds	r3, #2
	}
	return result;
}
    7bd0:	0018      	movs	r0, r3
    7bd2:	bd10      	pop	{r4, pc}
    7bd4:	c8f78f60 	.word	0xc8f78f60
    7bd8:	00401640 	.word	0x00401640
    7bdc:	000927c0 	.word	0x000927c0
    7be0:	00014615 	.word	0x00014615

00007be4 <ValidateDataRangeT2>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRangeT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
    7be4:	b530      	push	{r4, r5, lr}
    7be6:	b083      	sub	sp, #12
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValUpdateDrange_t val_drange;
	uint8_t dataRateMin, dataRateMax;
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7be8:	784c      	ldrb	r4, [r1, #1]
	
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7bea:	250f      	movs	r5, #15
    7bec:	4025      	ands	r5, r4
    7bee:	466b      	mov	r3, sp
    7bf0:	1dd9      	adds	r1, r3, #7
    7bf2:	700d      	strb	r5, [r1, #0]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7bf4:	0924      	lsrs	r4, r4, #4
    7bf6:	719c      	strb	r4, [r3, #6]
	
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    7bf8:	200f      	movs	r0, #15
    7bfa:	4b0b      	ldr	r3, [pc, #44]	; (7c28 <ValidateDataRangeT2+0x44>)
    7bfc:	4798      	blx	r3
	   || (dataRateMax < dataRateMin) )
	{
		retVal = LORAWAN_INVALID_PARAMETER;
    7bfe:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    7c00:	2808      	cmp	r0, #8
    7c02:	d002      	beq.n	7c0a <ValidateDataRangeT2+0x26>
	}
	return retVal;
}
    7c04:	0018      	movs	r0, r3
    7c06:	b003      	add	sp, #12
    7c08:	bd30      	pop	{r4, r5, pc}
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    7c0a:	466b      	mov	r3, sp
    7c0c:	1d99      	adds	r1, r3, #6
    7c0e:	3007      	adds	r0, #7
    7c10:	4b05      	ldr	r3, [pc, #20]	; (7c28 <ValidateDataRangeT2+0x44>)
    7c12:	4798      	blx	r3
    7c14:	0003      	movs	r3, r0
    7c16:	2808      	cmp	r0, #8
    7c18:	d001      	beq.n	7c1e <ValidateDataRangeT2+0x3a>
		retVal = LORAWAN_INVALID_PARAMETER;
    7c1a:	230a      	movs	r3, #10
    7c1c:	e7f2      	b.n	7c04 <ValidateDataRangeT2+0x20>
	   || (dataRateMax < dataRateMin) )
    7c1e:	42a5      	cmp	r5, r4
    7c20:	d9f0      	bls.n	7c04 <ValidateDataRangeT2+0x20>
		retVal = LORAWAN_INVALID_PARAMETER;
    7c22:	3302      	adds	r3, #2
    7c24:	e7ee      	b.n	7c04 <ValidateDataRangeT2+0x20>
    7c26:	46c0      	nop			; (mov r8, r8)
    7c28:	00007949 	.word	0x00007949

00007c2c <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    7c2c:	780a      	ldrb	r2, [r1, #0]
    7c2e:	232c      	movs	r3, #44	; 0x2c
    7c30:	4903      	ldr	r1, [pc, #12]	; (7c40 <ValidateRx1DataRateOffset+0x14>)
    7c32:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    7c34:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    7c36:	429a      	cmp	r2, r3
    7c38:	dc00      	bgt.n	7c3c <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    7c3a:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    7c3c:	4770      	bx	lr
    7c3e:	46c0      	nop			; (mov r8, r8)
    7c40:	20002310 	.word	0x20002310

00007c44 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    7c44:	b530      	push	{r4, r5, lr}
    7c46:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    7c48:	2329      	movs	r3, #41	; 0x29
    7c4a:	4a19      	ldr	r2, [pc, #100]	; (7cb0 <getSubBandId+0x6c>)
    7c4c:	5cd5      	ldrb	r5, [r2, r3]
    7c4e:	2d00      	cmp	r5, #0
    7c50:	d02c      	beq.n	7cac <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    7c52:	0011      	movs	r1, r2
    7c54:	7b13      	ldrb	r3, [r2, #12]
    7c56:	7b52      	ldrb	r2, [r2, #13]
    7c58:	0212      	lsls	r2, r2, #8
    7c5a:	431a      	orrs	r2, r3
    7c5c:	7b8b      	ldrb	r3, [r1, #14]
    7c5e:	041b      	lsls	r3, r3, #16
    7c60:	431a      	orrs	r2, r3
    7c62:	7bcb      	ldrb	r3, [r1, #15]
    7c64:	061b      	lsls	r3, r3, #24
    7c66:	4313      	orrs	r3, r2
    7c68:	2000      	movs	r0, #0
    7c6a:	e004      	b.n	7c76 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    7c6c:	3001      	adds	r0, #1
    7c6e:	b2c0      	uxtb	r0, r0
    7c70:	330c      	adds	r3, #12
    7c72:	42a8      	cmp	r0, r5
    7c74:	d018      	beq.n	7ca8 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    7c76:	781a      	ldrb	r2, [r3, #0]
    7c78:	7859      	ldrb	r1, [r3, #1]
    7c7a:	0209      	lsls	r1, r1, #8
    7c7c:	4311      	orrs	r1, r2
    7c7e:	789a      	ldrb	r2, [r3, #2]
    7c80:	0412      	lsls	r2, r2, #16
    7c82:	4311      	orrs	r1, r2
    7c84:	78da      	ldrb	r2, [r3, #3]
    7c86:	0612      	lsls	r2, r2, #24
    7c88:	430a      	orrs	r2, r1
    7c8a:	42a2      	cmp	r2, r4
    7c8c:	d8ee      	bhi.n	7c6c <getSubBandId+0x28>
    7c8e:	791a      	ldrb	r2, [r3, #4]
    7c90:	7959      	ldrb	r1, [r3, #5]
    7c92:	0209      	lsls	r1, r1, #8
    7c94:	4311      	orrs	r1, r2
    7c96:	799a      	ldrb	r2, [r3, #6]
    7c98:	0412      	lsls	r2, r2, #16
    7c9a:	4311      	orrs	r1, r2
    7c9c:	79da      	ldrb	r2, [r3, #7]
    7c9e:	0612      	lsls	r2, r2, #24
    7ca0:	430a      	orrs	r2, r1
    7ca2:	4294      	cmp	r4, r2
    7ca4:	d8e2      	bhi.n	7c6c <getSubBandId+0x28>
    7ca6:	e000      	b.n	7caa <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    7ca8:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    7caa:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    7cac:	20ff      	movs	r0, #255	; 0xff
    7cae:	e7fc      	b.n	7caa <getSubBandId+0x66>
    7cb0:	20002310 	.word	0x20002310

00007cb4 <ValidateFreq>:
{
    7cb4:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    7cb6:	6808      	ldr	r0, [r1, #0]
    7cb8:	4b04      	ldr	r3, [pc, #16]	; (7ccc <ValidateFreq+0x18>)
    7cba:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7cbc:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    7cbe:	28ff      	cmp	r0, #255	; 0xff
    7cc0:	d001      	beq.n	7cc6 <ValidateFreq+0x12>
}
    7cc2:	0018      	movs	r0, r3
    7cc4:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    7cc6:	3302      	adds	r3, #2
    7cc8:	e7fb      	b.n	7cc2 <ValidateFreq+0xe>
    7cca:	46c0      	nop			; (mov r8, r8)
    7ccc:	00007c45 	.word	0x00007c45

00007cd0 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    7cd0:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    7cd2:	222f      	movs	r2, #47	; 0x2f
    7cd4:	4919      	ldr	r1, [pc, #100]	; (7d3c <ValidateFrequencyAS+0x6c>)
    7cd6:	5c8a      	ldrb	r2, [r1, r2]
    7cd8:	1f91      	subs	r1, r2, #6
    7cda:	2903      	cmp	r1, #3
    7cdc:	d808      	bhi.n	7cf0 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    7cde:	4a18      	ldr	r2, [pc, #96]	; (7d40 <ValidateFrequencyAS+0x70>)
    7ce0:	4694      	mov	ip, r2
    7ce2:	4463      	add	r3, ip
    7ce4:	4a17      	ldr	r2, [pc, #92]	; (7d44 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ce6:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    7ce8:	4293      	cmp	r3, r2
    7cea:	d900      	bls.n	7cee <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    7cec:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    7cee:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    7cf0:	2a0a      	cmp	r2, #10
    7cf2:	d011      	beq.n	7d18 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    7cf4:	2a0b      	cmp	r2, #11
    7cf6:	d018      	beq.n	7d2a <ValidateFrequencyAS+0x5a>
    7cf8:	0011      	movs	r1, r2
    7cfa:	390d      	subs	r1, #13
    7cfc:	2901      	cmp	r1, #1
    7cfe:	d914      	bls.n	7d2a <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    7d00:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    7d02:	2a0c      	cmp	r2, #12
    7d04:	d1f3      	bne.n	7cee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7d06:	4a10      	ldr	r2, [pc, #64]	; (7d48 <ValidateFrequencyAS+0x78>)
    7d08:	4694      	mov	ip, r2
    7d0a:	4463      	add	r3, ip
    7d0c:	4a0f      	ldr	r2, [pc, #60]	; (7d4c <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d0e:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7d10:	4293      	cmp	r3, r2
    7d12:	d9ec      	bls.n	7cee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7d14:	3002      	adds	r0, #2
    7d16:	e7ea      	b.n	7cee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7d18:	4a0d      	ldr	r2, [pc, #52]	; (7d50 <ValidateFrequencyAS+0x80>)
    7d1a:	4694      	mov	ip, r2
    7d1c:	4463      	add	r3, ip
    7d1e:	4a0d      	ldr	r2, [pc, #52]	; (7d54 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d20:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7d22:	4293      	cmp	r3, r2
    7d24:	d9e3      	bls.n	7cee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7d26:	3002      	adds	r0, #2
    7d28:	e7e1      	b.n	7cee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    7d2a:	4a0b      	ldr	r2, [pc, #44]	; (7d58 <ValidateFrequencyAS+0x88>)
    7d2c:	4694      	mov	ip, r2
    7d2e:	4463      	add	r3, ip
    7d30:	4a0a      	ldr	r2, [pc, #40]	; (7d5c <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d32:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    7d34:	4293      	cmp	r3, r2
    7d36:	d9da      	bls.n	7cee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7d38:	3002      	adds	r0, #2
    7d3a:	e7d8      	b.n	7cee <ValidateFrequencyAS+0x1e>
    7d3c:	20002310 	.word	0x20002310
    7d40:	c8fc2340 	.word	0xc8fc2340
    7d44:	001e8480 	.word	0x001e8480
    7d48:	c90b6580 	.word	0xc90b6580
    7d4c:	005b8d80 	.word	0x005b8d80
    7d50:	c9763540 	.word	0xc9763540
    7d54:	00c65d40 	.word	0x00c65d40
    7d58:	c929ea00 	.word	0xc929ea00
    7d5c:	004c4b40 	.word	0x004c4b40

00007d60 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    7d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    7d62:	780c      	ldrb	r4, [r1, #0]
    7d64:	784a      	ldrb	r2, [r1, #1]
    7d66:	0791      	lsls	r1, r2, #30
    7d68:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    7d6a:	4e11      	ldr	r6, [pc, #68]	; (7db0 <setTxParams+0x50>)
    7d6c:	25c4      	movs	r5, #196	; 0xc4
    7d6e:	35ff      	adds	r5, #255	; 0xff
    7d70:	2001      	movs	r0, #1
    7d72:	4002      	ands	r2, r0
    7d74:	5d73      	ldrb	r3, [r6, r5]
    7d76:	2701      	movs	r7, #1
    7d78:	43bb      	bics	r3, r7
    7d7a:	4313      	orrs	r3, r2
    7d7c:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    7d7e:	4218      	tst	r0, r3
    7d80:	d111      	bne.n	7da6 <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    7d82:	2000      	movs	r0, #0
    7d84:	2325      	movs	r3, #37	; 0x25
    7d86:	4a0a      	ldr	r2, [pc, #40]	; (7db0 <setTxParams+0x50>)
    7d88:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    7d8a:	4a09      	ldr	r2, [pc, #36]	; (7db0 <setTxParams+0x50>)
    7d8c:	20c4      	movs	r0, #196	; 0xc4
    7d8e:	30ff      	adds	r0, #255	; 0xff
    7d90:	0049      	lsls	r1, r1, #1
    7d92:	5c13      	ldrb	r3, [r2, r0]
    7d94:	2502      	movs	r5, #2
    7d96:	43ab      	bics	r3, r5
    7d98:	430b      	orrs	r3, r1
    7d9a:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    7d9c:	2328      	movs	r3, #40	; 0x28
    7d9e:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    7da0:	38bc      	subs	r0, #188	; 0xbc
    7da2:	38ff      	subs	r0, #255	; 0xff
    7da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    7da6:	3001      	adds	r0, #1
    7da8:	2325      	movs	r3, #37	; 0x25
    7daa:	54f0      	strb	r0, [r6, r3]
    7dac:	e7ed      	b.n	7d8a <setTxParams+0x2a>
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	20002310 	.word	0x20002310

00007db4 <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    7db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    7db6:	232a      	movs	r3, #42	; 0x2a
    7db8:	4a17      	ldr	r2, [pc, #92]	; (7e18 <setChlistDefaultState+0x64>)
    7dba:	5cd3      	ldrb	r3, [r2, r3]
    7dbc:	2b7f      	cmp	r3, #127	; 0x7f
    7dbe:	d829      	bhi.n	7e14 <setChlistDefaultState+0x60>
    7dc0:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    7dc2:	4815      	ldr	r0, [pc, #84]	; (7e18 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    7dc4:	0004      	movs	r4, r0
    7dc6:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    7dc8:	0006      	movs	r6, r0
    7dca:	252a      	movs	r5, #42	; 0x2a
    7dcc:	e004      	b.n	7dd8 <setChlistDefaultState+0x24>
    7dce:	3201      	adds	r2, #1
    7dd0:	b2d2      	uxtb	r2, r2
    7dd2:	5773      	ldrsb	r3, [r6, r5]
    7dd4:	429a      	cmp	r2, r3
    7dd6:	dc1d      	bgt.n	7e14 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    7dd8:	7a03      	ldrb	r3, [r0, #8]
    7dda:	7a41      	ldrb	r1, [r0, #9]
    7ddc:	0209      	lsls	r1, r1, #8
    7dde:	430b      	orrs	r3, r1
    7de0:	7a81      	ldrb	r1, [r0, #10]
    7de2:	0409      	lsls	r1, r1, #16
    7de4:	4319      	orrs	r1, r3
    7de6:	7ac3      	ldrb	r3, [r0, #11]
    7de8:	061b      	lsls	r3, r3, #24
    7dea:	4319      	orrs	r1, r3
    7dec:	0053      	lsls	r3, r2, #1
    7dee:	189b      	adds	r3, r3, r2
    7df0:	009b      	lsls	r3, r3, #2
    7df2:	185b      	adds	r3, r3, r1
    7df4:	7a5b      	ldrb	r3, [r3, #9]
    7df6:	2b00      	cmp	r3, #0
    7df8:	d1e9      	bne.n	7dce <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    7dfa:	7923      	ldrb	r3, [r4, #4]
    7dfc:	7961      	ldrb	r1, [r4, #5]
    7dfe:	0209      	lsls	r1, r1, #8
    7e00:	4319      	orrs	r1, r3
    7e02:	79a3      	ldrb	r3, [r4, #6]
    7e04:	041b      	lsls	r3, r3, #16
    7e06:	4319      	orrs	r1, r3
    7e08:	79e3      	ldrb	r3, [r4, #7]
    7e0a:	061b      	lsls	r3, r3, #24
    7e0c:	430b      	orrs	r3, r1
    7e0e:	0051      	lsls	r1, r2, #1
    7e10:	54cf      	strb	r7, [r1, r3]
    7e12:	e7dc      	b.n	7dce <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    7e14:	2008      	movs	r0, #8
    7e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e18:	20002310 	.word	0x20002310

00007e1c <SearchAvailableChannel1>:
{
    7e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e1e:	46de      	mov	lr, fp
    7e20:	4657      	mov	r7, sl
    7e22:	464e      	mov	r6, r9
    7e24:	4645      	mov	r5, r8
    7e26:	b5e0      	push	{r5, r6, r7, lr}
    7e28:	b0af      	sub	sp, #188	; 0xbc
    7e2a:	000d      	movs	r5, r1
    7e2c:	0017      	movs	r7, r2
    7e2e:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    7e30:	2290      	movs	r2, #144	; 0x90
    7e32:	2100      	movs	r1, #0
    7e34:	a80a      	add	r0, sp, #40	; 0x28
    7e36:	4b77      	ldr	r3, [pc, #476]	; (8014 <SearchAvailableChannel1+0x1f8>)
    7e38:	4798      	blx	r3
	if(transmissionType == false)
    7e3a:	2d00      	cmp	r5, #0
    7e3c:	d01a      	beq.n	7e74 <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    7e3e:	4b76      	ldr	r3, [pc, #472]	; (8018 <SearchAvailableChannel1+0x1fc>)
    7e40:	2230      	movs	r2, #48	; 0x30
    7e42:	5c9a      	ldrb	r2, [r3, r2]
    7e44:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    7e46:	22ac      	movs	r2, #172	; 0xac
    7e48:	0052      	lsls	r2, r2, #1
    7e4a:	5c9a      	ldrb	r2, [r3, r2]
    7e4c:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    7e4e:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    7e50:	7919      	ldrb	r1, [r3, #4]
    7e52:	795a      	ldrb	r2, [r3, #5]
    7e54:	0212      	lsls	r2, r2, #8
    7e56:	4311      	orrs	r1, r2
    7e58:	799a      	ldrb	r2, [r3, #6]
    7e5a:	0412      	lsls	r2, r2, #16
    7e5c:	430a      	orrs	r2, r1
    7e5e:	79db      	ldrb	r3, [r3, #7]
    7e60:	061b      	lsls	r3, r3, #24
    7e62:	4313      	orrs	r3, r2
    7e64:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    7e66:	9303      	str	r3, [sp, #12]
    7e68:	2100      	movs	r1, #0
    7e6a:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    7e6c:	46b9      	mov	r9, r7
    7e6e:	46bc      	mov	ip, r7
    7e70:	0037      	movs	r7, r6
    7e72:	e03a      	b.n	7eea <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    7e74:	2320      	movs	r3, #32
    7e76:	4a68      	ldr	r2, [pc, #416]	; (8018 <SearchAvailableChannel1+0x1fc>)
    7e78:	5cd3      	ldrb	r3, [r2, r3]
    7e7a:	069b      	lsls	r3, r3, #26
    7e7c:	d5df      	bpl.n	7e3e <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    7e7e:	0011      	movs	r1, r2
    7e80:	7d13      	ldrb	r3, [r2, #20]
    7e82:	7d52      	ldrb	r2, [r2, #21]
    7e84:	0212      	lsls	r2, r2, #8
    7e86:	431a      	orrs	r2, r3
    7e88:	7d8b      	ldrb	r3, [r1, #22]
    7e8a:	041b      	lsls	r3, r3, #16
    7e8c:	431a      	orrs	r2, r3
    7e8e:	7dcb      	ldrb	r3, [r1, #23]
    7e90:	061b      	lsls	r3, r3, #24
    7e92:	4313      	orrs	r3, r2
    7e94:	7a18      	ldrb	r0, [r3, #8]
    7e96:	4b61      	ldr	r3, [pc, #388]	; (801c <SearchAvailableChannel1+0x200>)
    7e98:	4798      	blx	r3
    7e9a:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    7e9c:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    7e9e:	2b00      	cmp	r3, #0
    7ea0:	d0cd      	beq.n	7e3e <SearchAvailableChannel1+0x22>
    7ea2:	e053      	b.n	7f4c <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    7ea4:	7806      	ldrb	r6, [r0, #0]
    7ea6:	2e00      	cmp	r6, #0
    7ea8:	d100      	bne.n	7eac <SearchAvailableChannel1+0x90>
    7eaa:	e088      	b.n	7fbe <SearchAvailableChannel1+0x1a2>
    7eac:	001e      	movs	r6, r3
    7eae:	459b      	cmp	fp, r3
    7eb0:	d100      	bne.n	7eb4 <SearchAvailableChannel1+0x98>
    7eb2:	e084      	b.n	7fbe <SearchAvailableChannel1+0x1a2>
					&&
    7eb4:	2b3f      	cmp	r3, #63	; 0x3f
    7eb6:	dc02      	bgt.n	7ebe <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    7eb8:	9f07      	ldr	r7, [sp, #28]
    7eba:	4547      	cmp	r7, r8
    7ebc:	d06c      	beq.n	7f98 <SearchAvailableChannel1+0x17c>
					|| 
    7ebe:	2e40      	cmp	r6, #64	; 0x40
    7ec0:	dc00      	bgt.n	7ec4 <SearchAvailableChannel1+0xa8>
    7ec2:	e07c      	b.n	7fbe <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    7ec4:	001e      	movs	r6, r3
    7ec6:	3e40      	subs	r6, #64	; 0x40
    7ec8:	9f08      	ldr	r7, [sp, #32]
    7eca:	42b7      	cmp	r7, r6
    7ecc:	d000      	beq.n	7ed0 <SearchAvailableChannel1+0xb4>
    7ece:	e076      	b.n	7fbe <SearchAvailableChannel1+0x1a2>
    7ed0:	e08d      	b.n	7fee <SearchAvailableChannel1+0x1d2>
    7ed2:	9f01      	ldr	r7, [sp, #4]
    7ed4:	9b00      	ldr	r3, [sp, #0]
    7ed6:	469c      	mov	ip, r3
    7ed8:	9b02      	ldr	r3, [sp, #8]
    7eda:	3310      	adds	r3, #16
    7edc:	9302      	str	r3, [sp, #8]
    7ede:	9b03      	ldr	r3, [sp, #12]
    7ee0:	3310      	adds	r3, #16
    7ee2:	9303      	str	r3, [sp, #12]
    7ee4:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    7ee6:	2909      	cmp	r1, #9
    7ee8:	d00e      	beq.n	7f08 <SearchAvailableChannel1+0xec>
    7eea:	00cb      	lsls	r3, r1, #3
    7eec:	1c4a      	adds	r2, r1, #1
    7eee:	9204      	str	r2, [sp, #16]
    7ef0:	001c      	movs	r4, r3
    7ef2:	3408      	adds	r4, #8
{
    7ef4:	9803      	ldr	r0, [sp, #12]
    7ef6:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    7ef8:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    7efa:	b2c9      	uxtb	r1, r1
    7efc:	9701      	str	r7, [sp, #4]
    7efe:	9605      	str	r6, [sp, #20]
    7f00:	4688      	mov	r8, r1
    7f02:	4661      	mov	r1, ip
    7f04:	9100      	str	r1, [sp, #0]
    7f06:	e060      	b.n	7fca <SearchAvailableChannel1+0x1ae>
    7f08:	1e3e      	subs	r6, r7, #0
    7f0a:	4667      	mov	r7, ip
	if(0 != num)
    7f0c:	d125      	bne.n	7f5a <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    7f0e:	4942      	ldr	r1, [pc, #264]	; (8018 <SearchAvailableChannel1+0x1fc>)
    7f10:	2330      	movs	r3, #48	; 0x30
    7f12:	5ccc      	ldrb	r4, [r1, r3]
    7f14:	790b      	ldrb	r3, [r1, #4]
    7f16:	794a      	ldrb	r2, [r1, #5]
    7f18:	0212      	lsls	r2, r2, #8
    7f1a:	431a      	orrs	r2, r3
    7f1c:	798b      	ldrb	r3, [r1, #6]
    7f1e:	041b      	lsls	r3, r3, #16
    7f20:	431a      	orrs	r2, r3
    7f22:	79cb      	ldrb	r3, [r1, #7]
    7f24:	061b      	lsls	r3, r3, #24
    7f26:	4313      	orrs	r3, r2
    7f28:	0062      	lsls	r2, r4, #1
    7f2a:	189b      	adds	r3, r3, r2
    7f2c:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    7f2e:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    7f30:	2a00      	cmp	r2, #0
    7f32:	d00b      	beq.n	7f4c <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    7f34:	785a      	ldrb	r2, [r3, #1]
    7f36:	0712      	lsls	r2, r2, #28
    7f38:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    7f3a:	4297      	cmp	r7, r2
    7f3c:	db06      	blt.n	7f4c <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    7f3e:	785b      	ldrb	r3, [r3, #1]
    7f40:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    7f42:	429f      	cmp	r7, r3
    7f44:	dc02      	bgt.n	7f4c <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    7f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f48:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7f4a:	3808      	subs	r0, #8
}
    7f4c:	b02f      	add	sp, #188	; 0xbc
    7f4e:	bc3c      	pop	{r2, r3, r4, r5}
    7f50:	4690      	mov	r8, r2
    7f52:	4699      	mov	r9, r3
    7f54:	46a2      	mov	sl, r4
    7f56:	46ab      	mov	fp, r5
    7f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    7f5a:	4b31      	ldr	r3, [pc, #196]	; (8020 <SearchAvailableChannel1+0x204>)
    7f5c:	4798      	blx	r3
    7f5e:	0031      	movs	r1, r6
    7f60:	4b30      	ldr	r3, [pc, #192]	; (8024 <SearchAvailableChannel1+0x208>)
    7f62:	4798      	blx	r3
    7f64:	23ff      	movs	r3, #255	; 0xff
    7f66:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    7f68:	005b      	lsls	r3, r3, #1
    7f6a:	aa0a      	add	r2, sp, #40	; 0x28
    7f6c:	5c9a      	ldrb	r2, [r3, r2]
    7f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f70:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    7f72:	aa0a      	add	r2, sp, #40	; 0x28
    7f74:	4694      	mov	ip, r2
    7f76:	4463      	add	r3, ip
    7f78:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    7f7a:	2b07      	cmp	r3, #7
    7f7c:	d805      	bhi.n	7f8a <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    7f7e:	22ac      	movs	r2, #172	; 0xac
    7f80:	0052      	lsls	r2, r2, #1
    7f82:	4925      	ldr	r1, [pc, #148]	; (8018 <SearchAvailableChannel1+0x1fc>)
    7f84:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7f86:	2008      	movs	r0, #8
    7f88:	e7e0      	b.n	7f4c <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    7f8a:	2100      	movs	r1, #0
    7f8c:	23ac      	movs	r3, #172	; 0xac
    7f8e:	005b      	lsls	r3, r3, #1
    7f90:	4a21      	ldr	r2, [pc, #132]	; (8018 <SearchAvailableChannel1+0x1fc>)
    7f92:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7f94:	2008      	movs	r0, #8
    7f96:	e7d9      	b.n	7f4c <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    7f98:	9901      	ldr	r1, [sp, #4]
    7f9a:	9106      	str	r1, [sp, #24]
    7f9c:	0049      	lsls	r1, r1, #1
    7f9e:	468c      	mov	ip, r1
    7fa0:	a90a      	add	r1, sp, #40	; 0x28
    7fa2:	4666      	mov	r6, ip
    7fa4:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    7fa6:	9906      	ldr	r1, [sp, #24]
    7fa8:	004e      	lsls	r6, r1, #1
    7faa:	a90a      	add	r1, sp, #40	; 0x28
    7fac:	468c      	mov	ip, r1
    7fae:	4466      	add	r6, ip
    7fb0:	4669      	mov	r1, sp
    7fb2:	7d09      	ldrb	r1, [r1, #20]
    7fb4:	7071      	strb	r1, [r6, #1]
						num++;
    7fb6:	9f01      	ldr	r7, [sp, #4]
    7fb8:	3701      	adds	r7, #1
    7fba:	b2f9      	uxtb	r1, r7
    7fbc:	9101      	str	r1, [sp, #4]
    7fbe:	3202      	adds	r2, #2
    7fc0:	3002      	adds	r0, #2
    7fc2:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    7fc4:	42a3      	cmp	r3, r4
    7fc6:	d100      	bne.n	7fca <SearchAvailableChannel1+0x1ae>
    7fc8:	e783      	b.n	7ed2 <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    7fca:	2d00      	cmp	r5, #0
    7fcc:	d100      	bne.n	7fd0 <SearchAvailableChannel1+0x1b4>
    7fce:	e769      	b.n	7ea4 <SearchAvailableChannel1+0x88>
    7fd0:	7856      	ldrb	r6, [r2, #1]
    7fd2:	0736      	lsls	r6, r6, #28
    7fd4:	0f36      	lsrs	r6, r6, #28
    7fd6:	9f00      	ldr	r7, [sp, #0]
    7fd8:	42b7      	cmp	r7, r6
    7fda:	dbf0      	blt.n	7fbe <SearchAvailableChannel1+0x1a2>
    7fdc:	7856      	ldrb	r6, [r2, #1]
    7fde:	0936      	lsrs	r6, r6, #4
    7fe0:	45b1      	cmp	r9, r6
    7fe2:	dcec      	bgt.n	7fbe <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    7fe4:	7816      	ldrb	r6, [r2, #0]
    7fe6:	2e00      	cmp	r6, #0
    7fe8:	d0e9      	beq.n	7fbe <SearchAvailableChannel1+0x1a2>
    7fea:	459b      	cmp	fp, r3
    7fec:	d0e7      	beq.n	7fbe <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    7fee:	9901      	ldr	r1, [sp, #4]
    7ff0:	9106      	str	r1, [sp, #24]
    7ff2:	b2de      	uxtb	r6, r3
    7ff4:	46b4      	mov	ip, r6
    7ff6:	004e      	lsls	r6, r1, #1
    7ff8:	af0a      	add	r7, sp, #40	; 0x28
    7ffa:	4661      	mov	r1, ip
    7ffc:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    7ffe:	2b3f      	cmp	r3, #63	; 0x3f
    8000:	ddd1      	ble.n	7fa6 <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    8002:	46ba      	mov	sl, r7
    8004:	4456      	add	r6, sl
    8006:	213f      	movs	r1, #63	; 0x3f
    8008:	4249      	negs	r1, r1
    800a:	468a      	mov	sl, r1
    800c:	44d4      	add	ip, sl
    800e:	4661      	mov	r1, ip
    8010:	7071      	strb	r1, [r6, #1]
    8012:	e7d0      	b.n	7fb6 <SearchAvailableChannel1+0x19a>
    8014:	00017715 	.word	0x00017715
    8018:	20002310 	.word	0x20002310
    801c:	0000cccd 	.word	0x0000cccd
    8020:	00017895 	.word	0x00017895
    8024:	000147e9 	.word	0x000147e9

00008028 <LORAREG_GetAttr_FreeChannel1>:
{
    8028:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    802a:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    802c:	202a      	movs	r0, #42	; 0x2a
    802e:	4d07      	ldr	r5, [pc, #28]	; (804c <LORAREG_GetAttr_FreeChannel1+0x24>)
    8030:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    8032:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    8034:	42ac      	cmp	r4, r5
    8036:	dd00      	ble.n	803a <LORAREG_GetAttr_FreeChannel1+0x12>
}
    8038:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    803a:	7888      	ldrb	r0, [r1, #2]
    803c:	7809      	ldrb	r1, [r1, #0]
    803e:	0013      	movs	r3, r2
    8040:	0002      	movs	r2, r0
    8042:	0020      	movs	r0, r4
    8044:	4c02      	ldr	r4, [pc, #8]	; (8050 <LORAREG_GetAttr_FreeChannel1+0x28>)
    8046:	47a0      	blx	r4
	return result;
    8048:	e7f6      	b.n	8038 <LORAREG_GetAttr_FreeChannel1+0x10>
    804a:	46c0      	nop			; (mov r8, r8)
    804c:	20002310 	.word	0x20002310
    8050:	00007e1d 	.word	0x00007e1d

00008054 <LORAREG_GetAttr_MacRetransmitTimeout>:
{
    8054:	b510      	push	{r4, lr}
    8056:	0014      	movs	r4, r2
	*(uint16_t *)attrOutput = RETRANSMIT_TIMEOUT;
    8058:	4b05      	ldr	r3, [pc, #20]	; (8070 <LORAREG_GetAttr_MacRetransmitTimeout+0x1c>)
    805a:	4798      	blx	r3
    805c:	4905      	ldr	r1, [pc, #20]	; (8074 <LORAREG_GetAttr_MacRetransmitTimeout+0x20>)
    805e:	4b06      	ldr	r3, [pc, #24]	; (8078 <LORAREG_GetAttr_MacRetransmitTimeout+0x24>)
    8060:	4798      	blx	r3
    8062:	23fa      	movs	r3, #250	; 0xfa
    8064:	009b      	lsls	r3, r3, #2
    8066:	469c      	mov	ip, r3
    8068:	4461      	add	r1, ip
    806a:	8021      	strh	r1, [r4, #0]
}
    806c:	2008      	movs	r0, #8
    806e:	bd10      	pop	{r4, pc}
    8070:	00017895 	.word	0x00017895
    8074:	000007d1 	.word	0x000007d1
    8078:	000147e9 	.word	0x000147e9

0000807c <setEnableAllChs>:
{
    807c:	b570      	push	{r4, r5, r6, lr}
    807e:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    8080:	4915      	ldr	r1, [pc, #84]	; (80d8 <setEnableAllChs+0x5c>)
    8082:	2401      	movs	r4, #1
    8084:	790b      	ldrb	r3, [r1, #4]
    8086:	794a      	ldrb	r2, [r1, #5]
    8088:	0212      	lsls	r2, r2, #8
    808a:	431a      	orrs	r2, r3
    808c:	798b      	ldrb	r3, [r1, #6]
    808e:	041b      	lsls	r3, r3, #16
    8090:	431a      	orrs	r2, r3
    8092:	79cb      	ldrb	r3, [r1, #7]
    8094:	061b      	lsls	r3, r3, #24
    8096:	4313      	orrs	r3, r2
    8098:	541c      	strb	r4, [r3, r0]
    809a:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    809c:	2890      	cmp	r0, #144	; 0x90
    809e:	d1f1      	bne.n	8084 <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    80a0:	4c0d      	ldr	r4, [pc, #52]	; (80d8 <setEnableAllChs+0x5c>)
    80a2:	2200      	movs	r2, #0
    80a4:	23ac      	movs	r3, #172	; 0xac
    80a6:	005b      	lsls	r3, r3, #1
    80a8:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    80aa:	4b0c      	ldr	r3, [pc, #48]	; (80dc <setEnableAllChs+0x60>)
    80ac:	5ce3      	ldrb	r3, [r4, r3]
    80ae:	2284      	movs	r2, #132	; 0x84
    80b0:	0092      	lsls	r2, r2, #2
    80b2:	5ca0      	ldrb	r0, [r4, r2]
    80b4:	0200      	lsls	r0, r0, #8
    80b6:	4318      	orrs	r0, r3
    80b8:	b2c1      	uxtb	r1, r0
    80ba:	0a00      	lsrs	r0, r0, #8
    80bc:	4d08      	ldr	r5, [pc, #32]	; (80e0 <setEnableAllChs+0x64>)
    80be:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    80c0:	4b08      	ldr	r3, [pc, #32]	; (80e4 <setEnableAllChs+0x68>)
    80c2:	5ce3      	ldrb	r3, [r4, r3]
    80c4:	4a08      	ldr	r2, [pc, #32]	; (80e8 <setEnableAllChs+0x6c>)
    80c6:	5ca0      	ldrb	r0, [r4, r2]
    80c8:	0200      	lsls	r0, r0, #8
    80ca:	4318      	orrs	r0, r3
    80cc:	b2c1      	uxtb	r1, r0
    80ce:	0a00      	lsrs	r0, r0, #8
    80d0:	47a8      	blx	r5
}
    80d2:	2008      	movs	r0, #8
    80d4:	bd70      	pop	{r4, r5, r6, pc}
    80d6:	46c0      	nop			; (mov r8, r8)
    80d8:	20002310 	.word	0x20002310
    80dc:	0000020f 	.word	0x0000020f
    80e0:	0000be05 	.word	0x0000be05
    80e4:	0000020d 	.word	0x0000020d
    80e8:	0000020e 	.word	0x0000020e

000080ec <setJoinSuccess>:
{
    80ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    80ee:	23ac      	movs	r3, #172	; 0xac
    80f0:	005b      	lsls	r3, r3, #1
    80f2:	4a1a      	ldr	r2, [pc, #104]	; (815c <setJoinSuccess+0x70>)
    80f4:	5cd7      	ldrb	r7, [r2, r3]
    80f6:	2f00      	cmp	r7, #0
    80f8:	d100      	bne.n	80fc <setJoinSuccess+0x10>
		lastUsedSB = 8;
    80fa:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    80fc:	1e7c      	subs	r4, r7, #1
    80fe:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    8100:	0026      	movs	r6, r4
    8102:	3608      	adds	r6, #8
    8104:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    8106:	4815      	ldr	r0, [pc, #84]	; (815c <setJoinSuccess+0x70>)
    8108:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    810a:	373f      	adds	r7, #63	; 0x3f
    810c:	e010      	b.n	8130 <setJoinSuccess+0x44>
    810e:	429f      	cmp	r7, r3
    8110:	d00b      	beq.n	812a <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    8112:	7902      	ldrb	r2, [r0, #4]
    8114:	7941      	ldrb	r1, [r0, #5]
    8116:	0209      	lsls	r1, r1, #8
    8118:	4311      	orrs	r1, r2
    811a:	7982      	ldrb	r2, [r0, #6]
    811c:	0412      	lsls	r2, r2, #16
    811e:	4311      	orrs	r1, r2
    8120:	79c2      	ldrb	r2, [r0, #7]
    8122:	0612      	lsls	r2, r2, #24
    8124:	430a      	orrs	r2, r1
    8126:	0059      	lsls	r1, r3, #1
    8128:	548d      	strb	r5, [r1, r2]
    812a:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    812c:	2b48      	cmp	r3, #72	; 0x48
    812e:	d007      	beq.n	8140 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    8130:	b2da      	uxtb	r2, r3
    8132:	2a3f      	cmp	r2, #63	; 0x3f
    8134:	d8eb      	bhi.n	810e <setJoinSuccess+0x22>
    8136:	429c      	cmp	r4, r3
    8138:	dceb      	bgt.n	8112 <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    813a:	429e      	cmp	r6, r3
    813c:	dde9      	ble.n	8112 <setJoinSuccess+0x26>
    813e:	e7f4      	b.n	812a <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8140:	4b06      	ldr	r3, [pc, #24]	; (815c <setJoinSuccess+0x70>)
    8142:	4a07      	ldr	r2, [pc, #28]	; (8160 <setJoinSuccess+0x74>)
    8144:	5c9a      	ldrb	r2, [r3, r2]
    8146:	2184      	movs	r1, #132	; 0x84
    8148:	0089      	lsls	r1, r1, #2
    814a:	5c58      	ldrb	r0, [r3, r1]
    814c:	0200      	lsls	r0, r0, #8
    814e:	4310      	orrs	r0, r2
    8150:	b2c1      	uxtb	r1, r0
    8152:	0a00      	lsrs	r0, r0, #8
    8154:	4b03      	ldr	r3, [pc, #12]	; (8164 <setJoinSuccess+0x78>)
    8156:	4798      	blx	r3
}
    8158:	2008      	movs	r0, #8
    815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    815c:	20002310 	.word	0x20002310
    8160:	0000020f 	.word	0x0000020f
    8164:	0000be05 	.word	0x0000be05

00008168 <UpdateChannelIdStatus>:
{
    8168:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    816a:	232a      	movs	r3, #42	; 0x2a
    816c:	4a14      	ldr	r2, [pc, #80]	; (81c0 <UpdateChannelIdStatus+0x58>)
    816e:	56d3      	ldrsb	r3, [r2, r3]
    8170:	4298      	cmp	r0, r3
    8172:	db0b      	blt.n	818c <UpdateChannelIdStatus+0x24>
    8174:	232f      	movs	r3, #47	; 0x2f
    8176:	5cd2      	ldrb	r2, [r2, r3]
    8178:	3b23      	subs	r3, #35	; 0x23
    817a:	4113      	asrs	r3, r2
    817c:	07db      	lsls	r3, r3, #31
    817e:	d41d      	bmi.n	81bc <UpdateChannelIdStatus+0x54>
    8180:	23c2      	movs	r3, #194	; 0xc2
    8182:	33ff      	adds	r3, #255	; 0xff
    8184:	4a0e      	ldr	r2, [pc, #56]	; (81c0 <UpdateChannelIdStatus+0x58>)
    8186:	5cd3      	ldrb	r3, [r2, r3]
    8188:	4283      	cmp	r3, r0
    818a:	d817      	bhi.n	81bc <UpdateChannelIdStatus+0x54>
		RegParams.pChParams[chid].status = statusNew;
    818c:	4b0c      	ldr	r3, [pc, #48]	; (81c0 <UpdateChannelIdStatus+0x58>)
    818e:	791a      	ldrb	r2, [r3, #4]
    8190:	795c      	ldrb	r4, [r3, #5]
    8192:	0224      	lsls	r4, r4, #8
    8194:	4314      	orrs	r4, r2
    8196:	799a      	ldrb	r2, [r3, #6]
    8198:	0412      	lsls	r2, r2, #16
    819a:	4314      	orrs	r4, r2
    819c:	79da      	ldrb	r2, [r3, #7]
    819e:	0612      	lsls	r2, r2, #24
    81a0:	4322      	orrs	r2, r4
    81a2:	0040      	lsls	r0, r0, #1
    81a4:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    81a6:	4a07      	ldr	r2, [pc, #28]	; (81c4 <UpdateChannelIdStatus+0x5c>)
    81a8:	5c9a      	ldrb	r2, [r3, r2]
    81aa:	2184      	movs	r1, #132	; 0x84
    81ac:	0089      	lsls	r1, r1, #2
    81ae:	5c58      	ldrb	r0, [r3, r1]
    81b0:	0200      	lsls	r0, r0, #8
    81b2:	4310      	orrs	r0, r2
    81b4:	b2c1      	uxtb	r1, r0
    81b6:	0a00      	lsrs	r0, r0, #8
    81b8:	4b03      	ldr	r3, [pc, #12]	; (81c8 <UpdateChannelIdStatus+0x60>)
    81ba:	4798      	blx	r3
}
    81bc:	bd10      	pop	{r4, pc}
    81be:	46c0      	nop			; (mov r8, r8)
    81c0:	20002310 	.word	0x20002310
    81c4:	0000020f 	.word	0x0000020f
    81c8:	0000be05 	.word	0x0000be05

000081cc <EnableChannels2>:
{
    81cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ce:	46ce      	mov	lr, r9
    81d0:	4647      	mov	r7, r8
    81d2:	b580      	push	{r7, lr}
    81d4:	0004      	movs	r4, r0
    81d6:	000f      	movs	r7, r1
    81d8:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    81da:	4288      	cmp	r0, r1
    81dc:	d812      	bhi.n	8204 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    81de:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    81e0:	4b0a      	ldr	r3, [pc, #40]	; (820c <EnableChannels2+0x40>)
    81e2:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    81e4:	4698      	mov	r8, r3
    81e6:	e007      	b.n	81f8 <EnableChannels2+0x2c>
    81e8:	2100      	movs	r1, #0
    81ea:	0020      	movs	r0, r4
    81ec:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    81ee:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    81f0:	3401      	adds	r4, #1
    81f2:	b2e4      	uxtb	r4, r4
    81f4:	42a7      	cmp	r7, r4
    81f6:	d305      	bcc.n	8204 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    81f8:	422e      	tst	r6, r5
    81fa:	d0f5      	beq.n	81e8 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    81fc:	0031      	movs	r1, r6
    81fe:	0020      	movs	r0, r4
    8200:	47c8      	blx	r9
    8202:	e7f4      	b.n	81ee <EnableChannels2+0x22>
}
    8204:	bc0c      	pop	{r2, r3}
    8206:	4690      	mov	r8, r2
    8208:	4699      	mov	r9, r3
    820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    820c:	00008169 	.word	0x00008169

00008210 <UpdateChannelIdStatusT2>:
{
    8210:	b570      	push	{r4, r5, r6, lr}
    8212:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
    8214:	232a      	movs	r3, #42	; 0x2a
    8216:	4a3d      	ldr	r2, [pc, #244]	; (830c <UpdateChannelIdStatusT2+0xfc>)
    8218:	56d3      	ldrsb	r3, [r2, r3]
    821a:	4298      	cmp	r0, r3
    821c:	da12      	bge.n	8244 <UpdateChannelIdStatusT2+0x34>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    821e:	0045      	lsls	r5, r0, #1
    8220:	182d      	adds	r5, r5, r0
    8222:	00ad      	lsls	r5, r5, #2
    8224:	0011      	movs	r1, r2
    8226:	7a13      	ldrb	r3, [r2, #8]
    8228:	7a52      	ldrb	r2, [r2, #9]
    822a:	0212      	lsls	r2, r2, #8
    822c:	431a      	orrs	r2, r3
    822e:	7a8b      	ldrb	r3, [r1, #10]
    8230:	041b      	lsls	r3, r3, #16
    8232:	431a      	orrs	r2, r3
    8234:	7acb      	ldrb	r3, [r1, #11]
    8236:	061b      	lsls	r3, r3, #24
    8238:	4313      	orrs	r3, r2
    823a:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
    823c:	7adb      	ldrb	r3, [r3, #11]
    823e:	43db      	mvns	r3, r3
    8240:	079b      	lsls	r3, r3, #30
    8242:	d000      	beq.n	8246 <UpdateChannelIdStatusT2+0x36>
}
    8244:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    8246:	000e      	movs	r6, r1
    8248:	790b      	ldrb	r3, [r1, #4]
    824a:	794a      	ldrb	r2, [r1, #5]
    824c:	0212      	lsls	r2, r2, #8
    824e:	431a      	orrs	r2, r3
    8250:	798b      	ldrb	r3, [r1, #6]
    8252:	041b      	lsls	r3, r3, #16
    8254:	431a      	orrs	r2, r3
    8256:	79cb      	ldrb	r3, [r1, #7]
    8258:	061b      	lsls	r3, r3, #24
    825a:	4313      	orrs	r3, r2
    825c:	0040      	lsls	r0, r0, #1
    825e:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8260:	4b2b      	ldr	r3, [pc, #172]	; (8310 <UpdateChannelIdStatusT2+0x100>)
    8262:	5ccb      	ldrb	r3, [r1, r3]
    8264:	2284      	movs	r2, #132	; 0x84
    8266:	0092      	lsls	r2, r2, #2
    8268:	5c88      	ldrb	r0, [r1, r2]
    826a:	0200      	lsls	r0, r0, #8
    826c:	4318      	orrs	r0, r3
    826e:	b2c1      	uxtb	r1, r0
    8270:	0a00      	lsrs	r0, r0, #8
    8272:	4b28      	ldr	r3, [pc, #160]	; (8314 <UpdateChannelIdStatusT2+0x104>)
    8274:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    8276:	232f      	movs	r3, #47	; 0x2f
    8278:	5cf2      	ldrb	r2, [r6, r3]
    827a:	3b2c      	subs	r3, #44	; 0x2c
    827c:	4113      	asrs	r3, r2
    827e:	07db      	lsls	r3, r3, #31
    8280:	d5e0      	bpl.n	8244 <UpdateChannelIdStatusT2+0x34>
    8282:	2c00      	cmp	r4, #0
    8284:	d1de      	bne.n	8244 <UpdateChannelIdStatusT2+0x34>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    8286:	4b21      	ldr	r3, [pc, #132]	; (830c <UpdateChannelIdStatusT2+0xfc>)
    8288:	7a18      	ldrb	r0, [r3, #8]
    828a:	7a5a      	ldrb	r2, [r3, #9]
    828c:	0212      	lsls	r2, r2, #8
    828e:	4302      	orrs	r2, r0
    8290:	7a98      	ldrb	r0, [r3, #10]
    8292:	0400      	lsls	r0, r0, #16
    8294:	4302      	orrs	r2, r0
    8296:	7ad8      	ldrb	r0, [r3, #11]
    8298:	0600      	lsls	r0, r0, #24
    829a:	4310      	orrs	r0, r2
    829c:	1945      	adds	r5, r0, r5
    829e:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    82a0:	222a      	movs	r2, #42	; 0x2a
    82a2:	569c      	ldrsb	r4, [r3, r2]
    82a4:	2c00      	cmp	r4, #0
    82a6:	dd1c      	ble.n	82e2 <UpdateChannelIdStatusT2+0xd2>
				if(RegParams.pChParams[i].status == ENABLED &&
    82a8:	001a      	movs	r2, r3
    82aa:	7919      	ldrb	r1, [r3, #4]
    82ac:	795b      	ldrb	r3, [r3, #5]
    82ae:	021b      	lsls	r3, r3, #8
    82b0:	430b      	orrs	r3, r1
    82b2:	7991      	ldrb	r1, [r2, #6]
    82b4:	0409      	lsls	r1, r1, #16
    82b6:	430b      	orrs	r3, r1
    82b8:	79d1      	ldrb	r1, [r2, #7]
    82ba:	0609      	lsls	r1, r1, #24
    82bc:	4319      	orrs	r1, r3
    82be:	2300      	movs	r3, #0
    82c0:	e003      	b.n	82ca <UpdateChannelIdStatusT2+0xba>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    82c2:	3301      	adds	r3, #1
    82c4:	b2db      	uxtb	r3, r3
    82c6:	42a3      	cmp	r3, r4
    82c8:	da0b      	bge.n	82e2 <UpdateChannelIdStatusT2+0xd2>
				if(RegParams.pChParams[i].status == ENABLED &&
    82ca:	005a      	lsls	r2, r3, #1
    82cc:	5c52      	ldrb	r2, [r2, r1]
    82ce:	2a00      	cmp	r2, #0
    82d0:	d0f7      	beq.n	82c2 <UpdateChannelIdStatusT2+0xb2>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    82d2:	005a      	lsls	r2, r3, #1
    82d4:	18d2      	adds	r2, r2, r3
    82d6:	0092      	lsls	r2, r2, #2
    82d8:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    82da:	7a12      	ldrb	r2, [r2, #8]
    82dc:	42aa      	cmp	r2, r5
    82de:	d1f0      	bne.n	82c2 <UpdateChannelIdStatusT2+0xb2>
    82e0:	e7b0      	b.n	8244 <UpdateChannelIdStatusT2+0x34>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    82e2:	490a      	ldr	r1, [pc, #40]	; (830c <UpdateChannelIdStatusT2+0xfc>)
    82e4:	7b0a      	ldrb	r2, [r1, #12]
    82e6:	7b4b      	ldrb	r3, [r1, #13]
    82e8:	021b      	lsls	r3, r3, #8
    82ea:	4313      	orrs	r3, r2
    82ec:	7b8a      	ldrb	r2, [r1, #14]
    82ee:	0412      	lsls	r2, r2, #16
    82f0:	4313      	orrs	r3, r2
    82f2:	7bca      	ldrb	r2, [r1, #15]
    82f4:	0612      	lsls	r2, r2, #24
    82f6:	431a      	orrs	r2, r3
    82f8:	006b      	lsls	r3, r5, #1
    82fa:	195d      	adds	r5, r3, r5
    82fc:	00ad      	lsls	r5, r5, #2
    82fe:	18ad      	adds	r5, r5, r2
    8300:	2300      	movs	r3, #0
    8302:	722b      	strb	r3, [r5, #8]
    8304:	726b      	strb	r3, [r5, #9]
    8306:	72ab      	strb	r3, [r5, #10]
    8308:	72eb      	strb	r3, [r5, #11]
    830a:	e79b      	b.n	8244 <UpdateChannelIdStatusT2+0x34>
    830c:	20002310 	.word	0x20002310
    8310:	0000020f 	.word	0x0000020f
    8314:	0000be05 	.word	0x0000be05

00008318 <setChannelIdStatusT2>:
{
    8318:	b570      	push	{r4, r5, r6, lr}
    831a:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    831c:	780d      	ldrb	r5, [r1, #0]
    831e:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    8320:	a901      	add	r1, sp, #4
    8322:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    8324:	2301      	movs	r3, #1
    8326:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    8328:	2015      	movs	r0, #21
    832a:	4b0c      	ldr	r3, [pc, #48]	; (835c <setChannelIdStatusT2+0x44>)
    832c:	4798      	blx	r3
    832e:	0004      	movs	r4, r0
    8330:	2808      	cmp	r0, #8
    8332:	d003      	beq.n	833c <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    8334:	240a      	movs	r4, #10
}
    8336:	0020      	movs	r0, r4
    8338:	b002      	add	sp, #8
    833a:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    833c:	232f      	movs	r3, #47	; 0x2f
    833e:	4a08      	ldr	r2, [pc, #32]	; (8360 <setChannelIdStatusT2+0x48>)
    8340:	5cd3      	ldrb	r3, [r2, r3]
    8342:	2b0f      	cmp	r3, #15
    8344:	d004      	beq.n	8350 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    8346:	0031      	movs	r1, r6
    8348:	0028      	movs	r0, r5
    834a:	4b06      	ldr	r3, [pc, #24]	; (8364 <setChannelIdStatusT2+0x4c>)
    834c:	4798      	blx	r3
    834e:	e7f2      	b.n	8336 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    8350:	0031      	movs	r1, r6
    8352:	0028      	movs	r0, r5
    8354:	4b04      	ldr	r3, [pc, #16]	; (8368 <setChannelIdStatusT2+0x50>)
    8356:	4798      	blx	r3
    8358:	e7ed      	b.n	8336 <setChannelIdStatusT2+0x1e>
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	0000774d 	.word	0x0000774d
    8360:	20002310 	.word	0x20002310
    8364:	00008211 	.word	0x00008211
    8368:	00008169 	.word	0x00008169

0000836c <UpdateChannelIdStatusT4>:
{
    836c:	b570      	push	{r4, r5, r6, lr}
    836e:	0004      	movs	r4, r0
    8370:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    8372:	4923      	ldr	r1, [pc, #140]	; (8400 <UpdateChannelIdStatusT4+0x94>)
    8374:	790b      	ldrb	r3, [r1, #4]
    8376:	794a      	ldrb	r2, [r1, #5]
    8378:	0212      	lsls	r2, r2, #8
    837a:	431a      	orrs	r2, r3
    837c:	798b      	ldrb	r3, [r1, #6]
    837e:	041b      	lsls	r3, r3, #16
    8380:	431a      	orrs	r2, r3
    8382:	79cb      	ldrb	r3, [r1, #7]
    8384:	061b      	lsls	r3, r3, #24
    8386:	4313      	orrs	r3, r2
    8388:	0042      	lsls	r2, r0, #1
    838a:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    838c:	4b1d      	ldr	r3, [pc, #116]	; (8404 <UpdateChannelIdStatusT4+0x98>)
    838e:	5ccb      	ldrb	r3, [r1, r3]
    8390:	2284      	movs	r2, #132	; 0x84
    8392:	0092      	lsls	r2, r2, #2
    8394:	5c88      	ldrb	r0, [r1, r2]
    8396:	0200      	lsls	r0, r0, #8
    8398:	4318      	orrs	r0, r3
    839a:	b2c1      	uxtb	r1, r0
    839c:	0a00      	lsrs	r0, r0, #8
    839e:	4b1a      	ldr	r3, [pc, #104]	; (8408 <UpdateChannelIdStatusT4+0x9c>)
    83a0:	4798      	blx	r3
	if(statusNew == ENABLED)
    83a2:	2d00      	cmp	r5, #0
    83a4:	d028      	beq.n	83f8 <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    83a6:	4a16      	ldr	r2, [pc, #88]	; (8400 <UpdateChannelIdStatusT4+0x94>)
    83a8:	7a10      	ldrb	r0, [r2, #8]
    83aa:	7a53      	ldrb	r3, [r2, #9]
    83ac:	021b      	lsls	r3, r3, #8
    83ae:	4303      	orrs	r3, r0
    83b0:	7a90      	ldrb	r0, [r2, #10]
    83b2:	0400      	lsls	r0, r0, #16
    83b4:	4303      	orrs	r3, r0
    83b6:	7ad0      	ldrb	r0, [r2, #11]
    83b8:	0600      	lsls	r0, r0, #24
    83ba:	4318      	orrs	r0, r3
    83bc:	0063      	lsls	r3, r4, #1
    83be:	191c      	adds	r4, r3, r4
    83c0:	00a4      	lsls	r4, r4, #2
    83c2:	1900      	adds	r0, r0, r4
    83c4:	7803      	ldrb	r3, [r0, #0]
    83c6:	7842      	ldrb	r2, [r0, #1]
    83c8:	0212      	lsls	r2, r2, #8
    83ca:	431a      	orrs	r2, r3
    83cc:	7883      	ldrb	r3, [r0, #2]
    83ce:	041b      	lsls	r3, r3, #16
    83d0:	431a      	orrs	r2, r3
    83d2:	78c3      	ldrb	r3, [r0, #3]
    83d4:	061b      	lsls	r3, r3, #24
    83d6:	4313      	orrs	r3, r2
    83d8:	4a0c      	ldr	r2, [pc, #48]	; (840c <UpdateChannelIdStatusT4+0xa0>)
    83da:	4293      	cmp	r3, r2
    83dc:	d80d      	bhi.n	83fa <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    83de:	230a      	movs	r3, #10
    83e0:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    83e2:	4b07      	ldr	r3, [pc, #28]	; (8400 <UpdateChannelIdStatusT4+0x94>)
    83e4:	4a0a      	ldr	r2, [pc, #40]	; (8410 <UpdateChannelIdStatusT4+0xa4>)
    83e6:	5c9a      	ldrb	r2, [r3, r2]
    83e8:	490a      	ldr	r1, [pc, #40]	; (8414 <UpdateChannelIdStatusT4+0xa8>)
    83ea:	5c58      	ldrb	r0, [r3, r1]
    83ec:	0200      	lsls	r0, r0, #8
    83ee:	4310      	orrs	r0, r2
    83f0:	b2c1      	uxtb	r1, r0
    83f2:	0a00      	lsrs	r0, r0, #8
    83f4:	4b04      	ldr	r3, [pc, #16]	; (8408 <UpdateChannelIdStatusT4+0x9c>)
    83f6:	4798      	blx	r3
}
    83f8:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    83fa:	230e      	movs	r3, #14
    83fc:	7283      	strb	r3, [r0, #10]
    83fe:	e7f0      	b.n	83e2 <UpdateChannelIdStatusT4+0x76>
    8400:	20002310 	.word	0x20002310
    8404:	0000020f 	.word	0x0000020f
    8408:	0000be05 	.word	0x0000be05
    840c:	36f6211f 	.word	0x36f6211f
    8410:	00000211 	.word	0x00000211
    8414:	00000212 	.word	0x00000212

00008418 <UpdateChannelIdStatusT3>:
{
    8418:	b570      	push	{r4, r5, r6, lr}
    841a:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    841c:	4c17      	ldr	r4, [pc, #92]	; (847c <UpdateChannelIdStatusT3+0x64>)
    841e:	7923      	ldrb	r3, [r4, #4]
    8420:	7962      	ldrb	r2, [r4, #5]
    8422:	0212      	lsls	r2, r2, #8
    8424:	431a      	orrs	r2, r3
    8426:	79a3      	ldrb	r3, [r4, #6]
    8428:	041b      	lsls	r3, r3, #16
    842a:	431a      	orrs	r2, r3
    842c:	79e3      	ldrb	r3, [r4, #7]
    842e:	061b      	lsls	r3, r3, #24
    8430:	4313      	orrs	r3, r2
    8432:	0042      	lsls	r2, r0, #1
    8434:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8436:	4b12      	ldr	r3, [pc, #72]	; (8480 <UpdateChannelIdStatusT3+0x68>)
    8438:	5ce3      	ldrb	r3, [r4, r3]
    843a:	2284      	movs	r2, #132	; 0x84
    843c:	0092      	lsls	r2, r2, #2
    843e:	5ca0      	ldrb	r0, [r4, r2]
    8440:	0200      	lsls	r0, r0, #8
    8442:	4318      	orrs	r0, r3
    8444:	b2c1      	uxtb	r1, r0
    8446:	0a00      	lsrs	r0, r0, #8
    8448:	4e0e      	ldr	r6, [pc, #56]	; (8484 <UpdateChannelIdStatusT3+0x6c>)
    844a:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    844c:	4b0e      	ldr	r3, [pc, #56]	; (8488 <UpdateChannelIdStatusT3+0x70>)
    844e:	5ce3      	ldrb	r3, [r4, r3]
    8450:	4a0e      	ldr	r2, [pc, #56]	; (848c <UpdateChannelIdStatusT3+0x74>)
    8452:	5ca0      	ldrb	r0, [r4, r2]
    8454:	0200      	lsls	r0, r0, #8
    8456:	4318      	orrs	r0, r3
    8458:	b2c1      	uxtb	r1, r0
    845a:	0a00      	lsrs	r0, r0, #8
    845c:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    845e:	232f      	movs	r3, #47	; 0x2f
    8460:	5ce3      	ldrb	r3, [r4, r3]
    8462:	2b05      	cmp	r3, #5
    8464:	d000      	beq.n	8468 <UpdateChannelIdStatusT3+0x50>
}
    8466:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    8468:	3558      	adds	r5, #88	; 0x58
    846a:	00ad      	lsls	r5, r5, #2
    846c:	4b03      	ldr	r3, [pc, #12]	; (847c <UpdateChannelIdStatusT3+0x64>)
    846e:	195d      	adds	r5, r3, r5
    8470:	2200      	movs	r2, #0
    8472:	726a      	strb	r2, [r5, #9]
    8474:	72aa      	strb	r2, [r5, #10]
    8476:	72ea      	strb	r2, [r5, #11]
    8478:	732a      	strb	r2, [r5, #12]
}
    847a:	e7f4      	b.n	8466 <UpdateChannelIdStatusT3+0x4e>
    847c:	20002310 	.word	0x20002310
    8480:	0000020f 	.word	0x0000020f
    8484:	0000be05 	.word	0x0000be05
    8488:	00000211 	.word	0x00000211
    848c:	00000212 	.word	0x00000212

00008490 <setChannelIdStatusT3>:
{
    8490:	b570      	push	{r4, r5, r6, lr}
    8492:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    8494:	780d      	ldrb	r5, [r1, #0]
    8496:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    8498:	a901      	add	r1, sp, #4
    849a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    849c:	2301      	movs	r3, #1
    849e:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    84a0:	2015      	movs	r0, #21
    84a2:	4b0c      	ldr	r3, [pc, #48]	; (84d4 <setChannelIdStatusT3+0x44>)
    84a4:	4798      	blx	r3
    84a6:	0004      	movs	r4, r0
    84a8:	2808      	cmp	r0, #8
    84aa:	d003      	beq.n	84b4 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    84ac:	240a      	movs	r4, #10
}
    84ae:	0020      	movs	r0, r4
    84b0:	b002      	add	sp, #8
    84b2:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    84b4:	232f      	movs	r3, #47	; 0x2f
    84b6:	4a08      	ldr	r2, [pc, #32]	; (84d8 <setChannelIdStatusT3+0x48>)
    84b8:	5cd3      	ldrb	r3, [r2, r3]
    84ba:	2b04      	cmp	r3, #4
    84bc:	d004      	beq.n	84c8 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    84be:	0031      	movs	r1, r6
    84c0:	0028      	movs	r0, r5
    84c2:	4b06      	ldr	r3, [pc, #24]	; (84dc <setChannelIdStatusT3+0x4c>)
    84c4:	4798      	blx	r3
    84c6:	e7f2      	b.n	84ae <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    84c8:	0031      	movs	r1, r6
    84ca:	0028      	movs	r0, r5
    84cc:	4b04      	ldr	r3, [pc, #16]	; (84e0 <setChannelIdStatusT3+0x50>)
    84ce:	4798      	blx	r3
    84d0:	e7ed      	b.n	84ae <setChannelIdStatusT3+0x1e>
    84d2:	46c0      	nop			; (mov r8, r8)
    84d4:	0000774d 	.word	0x0000774d
    84d8:	20002310 	.word	0x20002310
    84dc:	00008419 	.word	0x00008419
    84e0:	0000836d 	.word	0x0000836d

000084e4 <setDataRangeT2>:
{
    84e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84e6:	46c6      	mov	lr, r8
    84e8:	b500      	push	{lr}
    84ea:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    84ec:	780d      	ldrb	r5, [r1, #0]
    84ee:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    84f0:	ab01      	add	r3, sp, #4
    84f2:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    84f4:	2201      	movs	r2, #1
    84f6:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    84f8:	2012      	movs	r0, #18
    84fa:	4b24      	ldr	r3, [pc, #144]	; (858c <setDataRangeT2+0xa8>)
    84fc:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    84fe:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    8500:	2808      	cmp	r0, #8
    8502:	d004      	beq.n	850e <setDataRangeT2+0x2a>
}
    8504:	0020      	movs	r0, r4
    8506:	b002      	add	sp, #8
    8508:	bc04      	pop	{r2}
    850a:	4690      	mov	r8, r2
    850c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    850e:	a901      	add	r1, sp, #4
    8510:	300d      	adds	r0, #13
    8512:	4b1f      	ldr	r3, [pc, #124]	; (8590 <setDataRangeT2+0xac>)
    8514:	4798      	blx	r3
    8516:	0004      	movs	r4, r0
    8518:	2808      	cmp	r0, #8
    851a:	d001      	beq.n	8520 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    851c:	240a      	movs	r4, #10
    851e:	e7f1      	b.n	8504 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    8520:	4f1c      	ldr	r7, [pc, #112]	; (8594 <setDataRangeT2+0xb0>)
    8522:	793b      	ldrb	r3, [r7, #4]
    8524:	797a      	ldrb	r2, [r7, #5]
    8526:	0212      	lsls	r2, r2, #8
    8528:	431a      	orrs	r2, r3
    852a:	79bb      	ldrb	r3, [r7, #6]
    852c:	041b      	lsls	r3, r3, #16
    852e:	431a      	orrs	r2, r3
    8530:	79fb      	ldrb	r3, [r7, #7]
    8532:	061b      	lsls	r3, r3, #24
    8534:	4313      	orrs	r3, r2
    8536:	006a      	lsls	r2, r5, #1
    8538:	4690      	mov	r8, r2
    853a:	4443      	add	r3, r8
    853c:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    853e:	4b16      	ldr	r3, [pc, #88]	; (8598 <setDataRangeT2+0xb4>)
    8540:	5cfb      	ldrb	r3, [r7, r3]
    8542:	2284      	movs	r2, #132	; 0x84
    8544:	0092      	lsls	r2, r2, #2
    8546:	5cb8      	ldrb	r0, [r7, r2]
    8548:	0200      	lsls	r0, r0, #8
    854a:	4318      	orrs	r0, r3
    854c:	b2c1      	uxtb	r1, r0
    854e:	0a00      	lsrs	r0, r0, #8
    8550:	4e12      	ldr	r6, [pc, #72]	; (859c <setDataRangeT2+0xb8>)
    8552:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    8554:	7a3b      	ldrb	r3, [r7, #8]
    8556:	7a7a      	ldrb	r2, [r7, #9]
    8558:	0212      	lsls	r2, r2, #8
    855a:	431a      	orrs	r2, r3
    855c:	7abb      	ldrb	r3, [r7, #10]
    855e:	041b      	lsls	r3, r3, #16
    8560:	431a      	orrs	r2, r3
    8562:	7afb      	ldrb	r3, [r7, #11]
    8564:	061b      	lsls	r3, r3, #24
    8566:	4313      	orrs	r3, r2
    8568:	4445      	add	r5, r8
    856a:	00ad      	lsls	r5, r5, #2
    856c:	195d      	adds	r5, r3, r5
    856e:	7aeb      	ldrb	r3, [r5, #11]
    8570:	2202      	movs	r2, #2
    8572:	4313      	orrs	r3, r2
    8574:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8576:	4b0a      	ldr	r3, [pc, #40]	; (85a0 <setDataRangeT2+0xbc>)
    8578:	5cfb      	ldrb	r3, [r7, r3]
    857a:	4a0a      	ldr	r2, [pc, #40]	; (85a4 <setDataRangeT2+0xc0>)
    857c:	5cb8      	ldrb	r0, [r7, r2]
    857e:	0200      	lsls	r0, r0, #8
    8580:	4318      	orrs	r0, r3
    8582:	b2c1      	uxtb	r1, r0
    8584:	0a00      	lsrs	r0, r0, #8
    8586:	47b0      	blx	r6
    8588:	e7bc      	b.n	8504 <setDataRangeT2+0x20>
    858a:	46c0      	nop			; (mov r8, r8)
    858c:	00007be5 	.word	0x00007be5
    8590:	0000774d 	.word	0x0000774d
    8594:	20002310 	.word	0x20002310
    8598:	0000020f 	.word	0x0000020f
    859c:	0000be05 	.word	0x0000be05
    85a0:	00000211 	.word	0x00000211
    85a4:	00000212 	.word	0x00000212

000085a8 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    85a8:	b530      	push	{r4, r5, lr}
    85aa:	b083      	sub	sp, #12
    85ac:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    85ae:	2300      	movs	r3, #0
    85b0:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    85b2:	4920      	ldr	r1, [pc, #128]	; (8634 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    85b4:	7d0b      	ldrb	r3, [r1, #20]
    85b6:	7d4a      	ldrb	r2, [r1, #21]
    85b8:	0212      	lsls	r2, r2, #8
    85ba:	431a      	orrs	r2, r3
    85bc:	7d8b      	ldrb	r3, [r1, #22]
    85be:	041b      	lsls	r3, r3, #16
    85c0:	431a      	orrs	r2, r3
    85c2:	7dcb      	ldrb	r3, [r1, #23]
    85c4:	061b      	lsls	r3, r3, #24
    85c6:	4313      	orrs	r3, r2
    85c8:	7a18      	ldrb	r0, [r3, #8]
    85ca:	4b1b      	ldr	r3, [pc, #108]	; (8638 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    85cc:	4798      	blx	r3
    85ce:	2800      	cmp	r0, #0
    85d0:	d107      	bne.n	85e2 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    85d2:	2204      	movs	r2, #4
    85d4:	a901      	add	r1, sp, #4
    85d6:	0020      	movs	r0, r4
    85d8:	4b18      	ldr	r3, [pc, #96]	; (863c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    85da:	4798      	blx	r3
}
    85dc:	2008      	movs	r0, #8
    85de:	b003      	add	sp, #12
    85e0:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    85e2:	4d14      	ldr	r5, [pc, #80]	; (8634 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    85e4:	7d2b      	ldrb	r3, [r5, #20]
    85e6:	7d6a      	ldrb	r2, [r5, #21]
    85e8:	0212      	lsls	r2, r2, #8
    85ea:	431a      	orrs	r2, r3
    85ec:	7dab      	ldrb	r3, [r5, #22]
    85ee:	041b      	lsls	r3, r3, #16
    85f0:	431a      	orrs	r2, r3
    85f2:	7deb      	ldrb	r3, [r5, #23]
    85f4:	061b      	lsls	r3, r3, #24
    85f6:	4313      	orrs	r3, r2
    85f8:	7a18      	ldrb	r0, [r3, #8]
    85fa:	4b11      	ldr	r3, [pc, #68]	; (8640 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    85fc:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    85fe:	7d2b      	ldrb	r3, [r5, #20]
    8600:	7d6a      	ldrb	r2, [r5, #21]
    8602:	0212      	lsls	r2, r2, #8
    8604:	431a      	orrs	r2, r3
    8606:	7dab      	ldrb	r3, [r5, #22]
    8608:	041b      	lsls	r3, r3, #16
    860a:	431a      	orrs	r2, r3
    860c:	7deb      	ldrb	r3, [r5, #23]
    860e:	061b      	lsls	r3, r3, #24
    8610:	4313      	orrs	r3, r2
    8612:	791d      	ldrb	r5, [r3, #4]
    8614:	795a      	ldrb	r2, [r3, #5]
    8616:	0212      	lsls	r2, r2, #8
    8618:	432a      	orrs	r2, r5
    861a:	799d      	ldrb	r5, [r3, #6]
    861c:	042d      	lsls	r5, r5, #16
    861e:	432a      	orrs	r2, r5
    8620:	79dd      	ldrb	r5, [r3, #7]
    8622:	062d      	lsls	r5, r5, #24
    8624:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    8626:	21fa      	movs	r1, #250	; 0xfa
    8628:	0089      	lsls	r1, r1, #2
    862a:	4b06      	ldr	r3, [pc, #24]	; (8644 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    862c:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    862e:	182d      	adds	r5, r5, r0
    8630:	9501      	str	r5, [sp, #4]
    8632:	e7ce      	b.n	85d2 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    8634:	20002310 	.word	0x20002310
    8638:	0000cccd 	.word	0x0000cccd
    863c:	00017691 	.word	0x00017691
    8640:	0000cce1 	.word	0x0000cce1
    8644:	00014509 	.word	0x00014509

00008648 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    8648:	b510      	push	{r4, lr}
    864a:	b082      	sub	sp, #8
    864c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    864e:	784c      	ldrb	r4, [r1, #1]
    8650:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    8652:	780a      	ldrb	r2, [r1, #0]
    8654:	2a00      	cmp	r2, #0
    8656:	d007      	beq.n	8668 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    8658:	2330      	movs	r3, #48	; 0x30
    865a:	4a23      	ldr	r2, [pc, #140]	; (86e8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    865c:	5cd3      	ldrb	r3, [r2, r3]
    865e:	2b40      	cmp	r3, #64	; 0x40
    8660:	d819      	bhi.n	8696 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    8662:	23a8      	movs	r3, #168	; 0xa8
    8664:	005b      	lsls	r3, r3, #1
    8666:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    8668:	491f      	ldr	r1, [pc, #124]	; (86e8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    866a:	22ab      	movs	r2, #171	; 0xab
    866c:	0052      	lsls	r2, r2, #1
    866e:	5c8a      	ldrb	r2, [r1, r2]
    8670:	1b12      	subs	r2, r2, r4
    8672:	189b      	adds	r3, r3, r2
    8674:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    8676:	466a      	mov	r2, sp
    8678:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    867a:	2254      	movs	r2, #84	; 0x54
    867c:	32ff      	adds	r2, #255	; 0xff
    867e:	5c8a      	ldrb	r2, [r1, r2]
    8680:	4293      	cmp	r3, r2
    8682:	d80d      	bhi.n	86a0 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    8684:	22a9      	movs	r2, #169	; 0xa9
    8686:	0052      	lsls	r2, r2, #1
    8688:	4917      	ldr	r1, [pc, #92]	; (86e8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    868a:	5c8a      	ldrb	r2, [r1, r2]
    868c:	4293      	cmp	r3, r2
    868e:	d209      	bcs.n	86a4 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    8690:	466b      	mov	r3, sp
    8692:	711a      	strb	r2, [r3, #4]
    8694:	e006      	b.n	86a4 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    8696:	2352      	movs	r3, #82	; 0x52
    8698:	33ff      	adds	r3, #255	; 0xff
    869a:	4a13      	ldr	r2, [pc, #76]	; (86e8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    869c:	5cd3      	ldrb	r3, [r2, r3]
    869e:	e7e3      	b.n	8668 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    86a0:	466b      	mov	r3, sp
    86a2:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    86a4:	4910      	ldr	r1, [pc, #64]	; (86e8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    86a6:	2330      	movs	r3, #48	; 0x30
    86a8:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    86aa:	3b29      	subs	r3, #41	; 0x29
    86ac:	4023      	ands	r3, r4
    86ae:	4c0f      	ldr	r4, [pc, #60]	; (86ec <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    86b0:	435c      	muls	r4, r3
    86b2:	23a6      	movs	r3, #166	; 0xa6
    86b4:	005b      	lsls	r3, r3, #1
    86b6:	5ccb      	ldrb	r3, [r1, r3]
    86b8:	224e      	movs	r2, #78	; 0x4e
    86ba:	32ff      	adds	r2, #255	; 0xff
    86bc:	5c8a      	ldrb	r2, [r1, r2]
    86be:	0212      	lsls	r2, r2, #8
    86c0:	4313      	orrs	r3, r2
    86c2:	22a7      	movs	r2, #167	; 0xa7
    86c4:	0052      	lsls	r2, r2, #1
    86c6:	5c8a      	ldrb	r2, [r1, r2]
    86c8:	0412      	lsls	r2, r2, #16
    86ca:	431a      	orrs	r2, r3
    86cc:	2350      	movs	r3, #80	; 0x50
    86ce:	33ff      	adds	r3, #255	; 0xff
    86d0:	5ccb      	ldrb	r3, [r1, r3]
    86d2:	061b      	lsls	r3, r3, #24
    86d4:	4313      	orrs	r3, r2
    86d6:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    86d8:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    86da:	2208      	movs	r2, #8
    86dc:	4669      	mov	r1, sp
    86de:	4b04      	ldr	r3, [pc, #16]	; (86f0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    86e0:	4798      	blx	r3
}
    86e2:	2008      	movs	r0, #8
    86e4:	b002      	add	sp, #8
    86e6:	bd10      	pop	{r4, pc}
    86e8:	20002310 	.word	0x20002310
    86ec:	000927c0 	.word	0x000927c0
    86f0:	00017691 	.word	0x00017691

000086f4 <LORAREG_GetAttr_DRangeChBandT1>:
{
    86f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86f6:	46c6      	mov	lr, r8
    86f8:	b500      	push	{lr}
    86fa:	b084      	sub	sp, #16
    86fc:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    86fe:	2204      	movs	r2, #4
    8700:	a803      	add	r0, sp, #12
    8702:	4b43      	ldr	r3, [pc, #268]	; (8810 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    8704:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    8706:	a903      	add	r1, sp, #12
    8708:	201b      	movs	r0, #27
    870a:	4b42      	ldr	r3, [pc, #264]	; (8814 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    870c:	4798      	blx	r3
    870e:	2808      	cmp	r0, #8
    8710:	d004      	beq.n	871c <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    8712:	200a      	movs	r0, #10
}
    8714:	b004      	add	sp, #16
    8716:	bc04      	pop	{r2}
    8718:	4690      	mov	r8, r2
    871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    871c:	aa03      	add	r2, sp, #12
    871e:	7813      	ldrb	r3, [r2, #0]
    8720:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    8722:	222f      	movs	r2, #47	; 0x2f
    8724:	493c      	ldr	r1, [pc, #240]	; (8818 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    8726:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    8728:	3903      	subs	r1, #3
    872a:	1e4a      	subs	r2, r1, #1
    872c:	4191      	sbcs	r1, r2
    872e:	3106      	adds	r1, #6
	switch (chMaskCntl)
    8730:	2b07      	cmp	r3, #7
    8732:	d869      	bhi.n	8808 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    8734:	009a      	lsls	r2, r3, #2
    8736:	4d39      	ldr	r5, [pc, #228]	; (881c <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    8738:	58aa      	ldr	r2, [r5, r2]
    873a:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    873c:	011b      	lsls	r3, r3, #4
    873e:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    8740:	001a      	movs	r2, r3
    8742:	3210      	adds	r2, #16
    8744:	b2d2      	uxtb	r2, r2
    8746:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    8748:	4293      	cmp	r3, r2
    874a:	d25f      	bcs.n	880c <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    874c:	4e32      	ldr	r6, [pc, #200]	; (8818 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    874e:	7935      	ldrb	r5, [r6, #4]
    8750:	7972      	ldrb	r2, [r6, #5]
    8752:	0212      	lsls	r2, r2, #8
    8754:	4315      	orrs	r5, r2
    8756:	79b2      	ldrb	r2, [r6, #6]
    8758:	0412      	lsls	r2, r2, #16
    875a:	432a      	orrs	r2, r5
    875c:	79f5      	ldrb	r5, [r6, #7]
    875e:	062d      	lsls	r5, r5, #24
    8760:	4315      	orrs	r5, r2
    8762:	46ac      	mov	ip, r5
    8764:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    8766:	2401      	movs	r4, #1
    8768:	e00c      	b.n	8784 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    876a:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    876c:	7872      	ldrb	r2, [r6, #1]
    876e:	0912      	lsrs	r2, r2, #4
    8770:	42aa      	cmp	r2, r5
    8772:	dd02      	ble.n	877a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    8774:	423c      	tst	r4, r7
    8776:	d011      	beq.n	879c <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8778:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    877a:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    877c:	3301      	adds	r3, #1
    877e:	b2db      	uxtb	r3, r3
    8780:	4598      	cmp	r8, r3
    8782:	d013      	beq.n	87ac <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    8784:	005e      	lsls	r6, r3, #1
    8786:	4466      	add	r6, ip
    8788:	7872      	ldrb	r2, [r6, #1]
    878a:	0712      	lsls	r2, r2, #28
    878c:	0f12      	lsrs	r2, r2, #28
    878e:	428a      	cmp	r2, r1
    8790:	daec      	bge.n	876c <LORAREG_GetAttr_DRangeChBandT1+0x78>
    8792:	423c      	tst	r4, r7
    8794:	d1e9      	bne.n	876a <LORAREG_GetAttr_DRangeChBandT1+0x76>
    8796:	2f00      	cmp	r7, #0
    8798:	d1ef      	bne.n	877a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    879a:	e7e6      	b.n	876a <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    879c:	2f00      	cmp	r7, #0
    879e:	d0eb      	beq.n	8778 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    87a0:	e7eb      	b.n	877a <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    87a2:	2352      	movs	r3, #82	; 0x52
    87a4:	33ff      	adds	r3, #255	; 0xff
    87a6:	4a1c      	ldr	r2, [pc, #112]	; (8818 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    87a8:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    87aa:	000d      	movs	r5, r1
    87ac:	012d      	lsls	r5, r5, #4
    87ae:	230f      	movs	r3, #15
    87b0:	4019      	ands	r1, r3
    87b2:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    87b4:	9b01      	ldr	r3, [sp, #4]
    87b6:	701d      	strb	r5, [r3, #0]
    87b8:	e7ac      	b.n	8714 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    87ba:	4d17      	ldr	r5, [pc, #92]	; (8818 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    87bc:	792b      	ldrb	r3, [r5, #4]
    87be:	796a      	ldrb	r2, [r5, #5]
    87c0:	0212      	lsls	r2, r2, #8
    87c2:	431a      	orrs	r2, r3
    87c4:	79ab      	ldrb	r3, [r5, #6]
    87c6:	041b      	lsls	r3, r3, #16
    87c8:	431a      	orrs	r2, r3
    87ca:	79eb      	ldrb	r3, [r5, #7]
    87cc:	061b      	lsls	r3, r3, #24
    87ce:	4313      	orrs	r3, r2
    87d0:	001a      	movs	r2, r3
    87d2:	3380      	adds	r3, #128	; 0x80
    87d4:	001c      	movs	r4, r3
    87d6:	2500      	movs	r5, #0
    87d8:	e002      	b.n	87e0 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    87da:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    87dc:	42a2      	cmp	r2, r4
    87de:	d00c      	beq.n	87fa <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    87e0:	0016      	movs	r6, r2
    87e2:	7853      	ldrb	r3, [r2, #1]
    87e4:	071b      	lsls	r3, r3, #28
    87e6:	0f1b      	lsrs	r3, r3, #28
    87e8:	428b      	cmp	r3, r1
    87ea:	da00      	bge.n	87ee <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    87ec:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    87ee:	7873      	ldrb	r3, [r6, #1]
    87f0:	091b      	lsrs	r3, r3, #4
    87f2:	42ab      	cmp	r3, r5
    87f4:	ddf1      	ble.n	87da <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    87f6:	001d      	movs	r5, r3
    87f8:	e7ef      	b.n	87da <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    87fa:	2f00      	cmp	r7, #0
    87fc:	d0d6      	beq.n	87ac <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    87fe:	2352      	movs	r3, #82	; 0x52
    8800:	33ff      	adds	r3, #255	; 0xff
    8802:	4a05      	ldr	r2, [pc, #20]	; (8818 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    8804:	5cd5      	ldrb	r5, [r2, r3]
    8806:	e7d1      	b.n	87ac <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    8808:	2500      	movs	r5, #0
    880a:	e7cf      	b.n	87ac <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    880c:	2500      	movs	r5, #0
    880e:	e7cd      	b.n	87ac <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    8810:	00017691 	.word	0x00017691
    8814:	00007855 	.word	0x00007855
    8818:	20002310 	.word	0x20002310
    881c:	0001de40 	.word	0x0001de40

00008820 <LORAREG_GetAttr_DefRx2Freq>:
{
    8820:	b510      	push	{r4, lr}
    8822:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    8824:	2204      	movs	r2, #4
    8826:	4902      	ldr	r1, [pc, #8]	; (8830 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    8828:	4b02      	ldr	r3, [pc, #8]	; (8834 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    882a:	4798      	blx	r3
}
    882c:	2008      	movs	r0, #8
    882e:	bd10      	pop	{r4, pc}
    8830:	2000232c 	.word	0x2000232c
    8834:	00017691 	.word	0x00017691

00008838 <LORAREG_GetAttr_DlFrequency>:
{
    8838:	b510      	push	{r4, lr}
    883a:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    883c:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    883e:	212a      	movs	r1, #42	; 0x2a
    8840:	480d      	ldr	r0, [pc, #52]	; (8878 <LORAREG_GetAttr_DlFrequency+0x40>)
    8842:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    8844:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    8846:	428a      	cmp	r2, r1
    8848:	dd00      	ble.n	884c <LORAREG_GetAttr_DlFrequency+0x14>
}
    884a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    884c:	4c0a      	ldr	r4, [pc, #40]	; (8878 <LORAREG_GetAttr_DlFrequency+0x40>)
    884e:	7a21      	ldrb	r1, [r4, #8]
    8850:	7a60      	ldrb	r0, [r4, #9]
    8852:	0200      	lsls	r0, r0, #8
    8854:	4308      	orrs	r0, r1
    8856:	7aa1      	ldrb	r1, [r4, #10]
    8858:	0409      	lsls	r1, r1, #16
    885a:	4308      	orrs	r0, r1
    885c:	7ae1      	ldrb	r1, [r4, #11]
    885e:	0609      	lsls	r1, r1, #24
    8860:	4301      	orrs	r1, r0
    8862:	0050      	lsls	r0, r2, #1
    8864:	1882      	adds	r2, r0, r2
    8866:	0092      	lsls	r2, r2, #2
    8868:	1889      	adds	r1, r1, r2
    886a:	3104      	adds	r1, #4
    886c:	2204      	movs	r2, #4
    886e:	0018      	movs	r0, r3
    8870:	4b02      	ldr	r3, [pc, #8]	; (887c <LORAREG_GetAttr_DlFrequency+0x44>)
    8872:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8874:	2008      	movs	r0, #8
    8876:	e7e8      	b.n	884a <LORAREG_GetAttr_DlFrequency+0x12>
    8878:	20002310 	.word	0x20002310
    887c:	00017691 	.word	0x00017691

00008880 <LORAREG_GetAttr_DutyCycleTimer>:
{
    8880:	b5f0      	push	{r4, r5, r6, r7, lr}
    8882:	46d6      	mov	lr, sl
    8884:	464f      	mov	r7, r9
    8886:	4646      	mov	r6, r8
    8888:	b5c0      	push	{r6, r7, lr}
    888a:	b084      	sub	sp, #16
    888c:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    888e:	780b      	ldrb	r3, [r1, #0]
    8890:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    8892:	232a      	movs	r3, #42	; 0x2a
    8894:	4a5b      	ldr	r2, [pc, #364]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    8896:	56d6      	ldrsb	r6, [r2, r3]
    8898:	2e00      	cmp	r6, #0
    889a:	dd66      	ble.n	896a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    889c:	0013      	movs	r3, r2
    889e:	7910      	ldrb	r0, [r2, #4]
    88a0:	7952      	ldrb	r2, [r2, #5]
    88a2:	0212      	lsls	r2, r2, #8
    88a4:	4302      	orrs	r2, r0
    88a6:	7998      	ldrb	r0, [r3, #6]
    88a8:	0400      	lsls	r0, r0, #16
    88aa:	4302      	orrs	r2, r0
    88ac:	79d8      	ldrb	r0, [r3, #7]
    88ae:	0600      	lsls	r0, r0, #24
    88b0:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    88b2:	7b1f      	ldrb	r7, [r3, #12]
    88b4:	7b5a      	ldrb	r2, [r3, #13]
    88b6:	0212      	lsls	r2, r2, #8
    88b8:	433a      	orrs	r2, r7
    88ba:	7b9f      	ldrb	r7, [r3, #14]
    88bc:	043f      	lsls	r7, r7, #16
    88be:	433a      	orrs	r2, r7
    88c0:	7bdf      	ldrb	r7, [r3, #15]
    88c2:	063f      	lsls	r7, r7, #24
    88c4:	4317      	orrs	r7, r2
    88c6:	2500      	movs	r5, #0
    88c8:	2300      	movs	r3, #0
    88ca:	2201      	movs	r2, #1
    88cc:	4252      	negs	r2, r2
    88ce:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    88d0:	4a4c      	ldr	r2, [pc, #304]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    88d2:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    88d4:	4662      	mov	r2, ip
    88d6:	9201      	str	r2, [sp, #4]
    88d8:	e004      	b.n	88e4 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    88da:	3301      	adds	r3, #1
    88dc:	b2db      	uxtb	r3, r3
    88de:	001d      	movs	r5, r3
    88e0:	42b3      	cmp	r3, r6
    88e2:	da27      	bge.n	8934 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    88e4:	0059      	lsls	r1, r3, #1
    88e6:	1841      	adds	r1, r0, r1
    88e8:	780a      	ldrb	r2, [r1, #0]
    88ea:	2a00      	cmp	r2, #0
    88ec:	d0f5      	beq.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    88ee:	006a      	lsls	r2, r5, #1
    88f0:	1952      	adds	r2, r2, r5
    88f2:	0092      	lsls	r2, r2, #2
    88f4:	4442      	add	r2, r8
    88f6:	32ac      	adds	r2, #172	; 0xac
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    88f8:	7815      	ldrb	r5, [r2, #0]
    88fa:	006a      	lsls	r2, r5, #1
    88fc:	1952      	adds	r2, r2, r5
    88fe:	0092      	lsls	r2, r2, #2
    8900:	18ba      	adds	r2, r7, r2
    8902:	7a15      	ldrb	r5, [r2, #8]
    8904:	7a54      	ldrb	r4, [r2, #9]
    8906:	0224      	lsls	r4, r4, #8
    8908:	4325      	orrs	r5, r4
    890a:	7a94      	ldrb	r4, [r2, #10]
    890c:	0424      	lsls	r4, r4, #16
    890e:	4325      	orrs	r5, r4
    8910:	7ad2      	ldrb	r2, [r2, #11]
    8912:	0612      	lsls	r2, r2, #24
    8914:	432a      	orrs	r2, r5
    8916:	d0e0      	beq.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    8918:	454a      	cmp	r2, r9
    891a:	d8de      	bhi.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    891c:	784d      	ldrb	r5, [r1, #1]
    891e:	072d      	lsls	r5, r5, #28
    8920:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    8922:	45ac      	cmp	ip, r5
    8924:	dbd9      	blt.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    8926:	7849      	ldrb	r1, [r1, #1]
    8928:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    892a:	9c01      	ldr	r4, [sp, #4]
    892c:	428c      	cmp	r4, r1
    892e:	dcd4      	bgt.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    8930:	4691      	mov	r9, r2
    8932:	e7d2      	b.n	88da <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    8934:	464b      	mov	r3, r9
    8936:	3301      	adds	r3, #1
    8938:	d017      	beq.n	896a <LORAREG_GetAttr_DutyCycleTimer+0xea>
    893a:	4932      	ldr	r1, [pc, #200]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    893c:	23dd      	movs	r3, #221	; 0xdd
    893e:	005b      	lsls	r3, r3, #1
    8940:	5ccb      	ldrb	r3, [r1, r3]
    8942:	22bc      	movs	r2, #188	; 0xbc
    8944:	32ff      	adds	r2, #255	; 0xff
    8946:	5c8a      	ldrb	r2, [r1, r2]
    8948:	0212      	lsls	r2, r2, #8
    894a:	431a      	orrs	r2, r3
    894c:	23de      	movs	r3, #222	; 0xde
    894e:	005b      	lsls	r3, r3, #1
    8950:	5ccb      	ldrb	r3, [r1, r3]
    8952:	041b      	lsls	r3, r3, #16
    8954:	431a      	orrs	r2, r3
    8956:	23be      	movs	r3, #190	; 0xbe
    8958:	33ff      	adds	r3, #255	; 0xff
    895a:	5ccb      	ldrb	r3, [r1, r3]
    895c:	061b      	lsls	r3, r3, #24
    895e:	4313      	orrs	r3, r2
    8960:	4599      	cmp	r9, r3
    8962:	d302      	bcc.n	896a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    8964:	464b      	mov	r3, r9
    8966:	9303      	str	r3, [sp, #12]
    8968:	e013      	b.n	8992 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    896a:	4926      	ldr	r1, [pc, #152]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    896c:	23dd      	movs	r3, #221	; 0xdd
    896e:	005b      	lsls	r3, r3, #1
    8970:	5ccb      	ldrb	r3, [r1, r3]
    8972:	22bc      	movs	r2, #188	; 0xbc
    8974:	32ff      	adds	r2, #255	; 0xff
    8976:	5c8a      	ldrb	r2, [r1, r2]
    8978:	0212      	lsls	r2, r2, #8
    897a:	431a      	orrs	r2, r3
    897c:	23de      	movs	r3, #222	; 0xde
    897e:	005b      	lsls	r3, r3, #1
    8980:	5ccb      	ldrb	r3, [r1, r3]
    8982:	041b      	lsls	r3, r3, #16
    8984:	431a      	orrs	r2, r3
    8986:	23be      	movs	r3, #190	; 0xbe
    8988:	33ff      	adds	r3, #255	; 0xff
    898a:	5ccb      	ldrb	r3, [r1, r3]
    898c:	061b      	lsls	r3, r3, #24
    898e:	4313      	orrs	r3, r2
    8990:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    8992:	491c      	ldr	r1, [pc, #112]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    8994:	7c0b      	ldrb	r3, [r1, #16]
    8996:	7c4a      	ldrb	r2, [r1, #17]
    8998:	0212      	lsls	r2, r2, #8
    899a:	431a      	orrs	r2, r3
    899c:	7c8b      	ldrb	r3, [r1, #18]
    899e:	041b      	lsls	r3, r3, #16
    89a0:	431a      	orrs	r2, r3
    89a2:	7ccb      	ldrb	r3, [r1, #19]
    89a4:	061b      	lsls	r3, r3, #24
    89a6:	4313      	orrs	r3, r2
    89a8:	7918      	ldrb	r0, [r3, #4]
    89aa:	4b17      	ldr	r3, [pc, #92]	; (8a08 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    89ac:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    89ae:	9e03      	ldr	r6, [sp, #12]
    89b0:	2e00      	cmp	r6, #0
    89b2:	d01b      	beq.n	89ec <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    89b4:	4913      	ldr	r1, [pc, #76]	; (8a04 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    89b6:	7c0b      	ldrb	r3, [r1, #16]
    89b8:	7c4a      	ldrb	r2, [r1, #17]
    89ba:	0212      	lsls	r2, r2, #8
    89bc:	431a      	orrs	r2, r3
    89be:	7c8b      	ldrb	r3, [r1, #18]
    89c0:	041b      	lsls	r3, r3, #16
    89c2:	431a      	orrs	r2, r3
    89c4:	7ccb      	ldrb	r3, [r1, #19]
    89c6:	061b      	lsls	r3, r3, #24
    89c8:	4313      	orrs	r3, r2
    89ca:	781d      	ldrb	r5, [r3, #0]
    89cc:	785a      	ldrb	r2, [r3, #1]
    89ce:	0212      	lsls	r2, r2, #8
    89d0:	432a      	orrs	r2, r5
    89d2:	789d      	ldrb	r5, [r3, #2]
    89d4:	042d      	lsls	r5, r5, #16
    89d6:	432a      	orrs	r2, r5
    89d8:	78dd      	ldrb	r5, [r3, #3]
    89da:	062d      	lsls	r5, r5, #24
    89dc:	4315      	orrs	r5, r2
    89de:	21fa      	movs	r1, #250	; 0xfa
    89e0:	0089      	lsls	r1, r1, #2
    89e2:	4b0a      	ldr	r3, [pc, #40]	; (8a0c <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    89e4:	4798      	blx	r3
    89e6:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    89e8:	1b75      	subs	r5, r6, r5
    89ea:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    89ec:	2204      	movs	r2, #4
    89ee:	a903      	add	r1, sp, #12
    89f0:	9800      	ldr	r0, [sp, #0]
    89f2:	4b07      	ldr	r3, [pc, #28]	; (8a10 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    89f4:	4798      	blx	r3
}
    89f6:	2008      	movs	r0, #8
    89f8:	b004      	add	sp, #16
    89fa:	bc1c      	pop	{r2, r3, r4}
    89fc:	4690      	mov	r8, r2
    89fe:	4699      	mov	r9, r3
    8a00:	46a2      	mov	sl, r4
    8a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a04:	20002310 	.word	0x20002310
    8a08:	0000cce1 	.word	0x0000cce1
    8a0c:	00014509 	.word	0x00014509
    8a10:	00017691 	.word	0x00017691

00008a14 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    8a14:	b500      	push	{lr}
    8a16:	b083      	sub	sp, #12
    8a18:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8a1a:	784a      	ldrb	r2, [r1, #1]
    8a1c:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    8a1e:	429a      	cmp	r2, r3
    8a20:	d925      	bls.n	8a6e <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    8a22:	2300      	movs	r3, #0
    8a24:	466a      	mov	r2, sp
    8a26:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    8a28:	4913      	ldr	r1, [pc, #76]	; (8a78 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    8a2a:	7a0b      	ldrb	r3, [r1, #8]
    8a2c:	7a4a      	ldrb	r2, [r1, #9]
    8a2e:	0212      	lsls	r2, r2, #8
    8a30:	4313      	orrs	r3, r2
    8a32:	7a8a      	ldrb	r2, [r1, #10]
    8a34:	0412      	lsls	r2, r2, #16
    8a36:	431a      	orrs	r2, r3
    8a38:	7acb      	ldrb	r3, [r1, #11]
    8a3a:	061b      	lsls	r3, r3, #24
    8a3c:	431a      	orrs	r2, r3
    8a3e:	2330      	movs	r3, #48	; 0x30
    8a40:	5cc9      	ldrb	r1, [r1, r3]
    8a42:	004b      	lsls	r3, r1, #1
    8a44:	185b      	adds	r3, r3, r1
    8a46:	009b      	lsls	r3, r3, #2
    8a48:	189b      	adds	r3, r3, r2
    8a4a:	7919      	ldrb	r1, [r3, #4]
    8a4c:	795a      	ldrb	r2, [r3, #5]
    8a4e:	0212      	lsls	r2, r2, #8
    8a50:	4311      	orrs	r1, r2
    8a52:	799a      	ldrb	r2, [r3, #6]
    8a54:	0412      	lsls	r2, r2, #16
    8a56:	430a      	orrs	r2, r1
    8a58:	79db      	ldrb	r3, [r3, #7]
    8a5a:	061b      	lsls	r3, r3, #24
    8a5c:	4313      	orrs	r3, r2
    8a5e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8a60:	2208      	movs	r2, #8
    8a62:	4669      	mov	r1, sp
    8a64:	4b05      	ldr	r3, [pc, #20]	; (8a7c <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    8a66:	4798      	blx	r3
}
    8a68:	2008      	movs	r0, #8
    8a6a:	b003      	add	sp, #12
    8a6c:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    8a6e:	1a9b      	subs	r3, r3, r2
    8a70:	466a      	mov	r2, sp
    8a72:	7113      	strb	r3, [r2, #4]
    8a74:	e7d8      	b.n	8a28 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    8a76:	46c0      	nop			; (mov r8, r8)
    8a78:	20002310 	.word	0x20002310
    8a7c:	00017691 	.word	0x00017691

00008a80 <LORAREG_GetAttr_DRangeChBandT2>:
{
    8a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a82:	46c6      	mov	lr, r8
    8a84:	b500      	push	{lr}
    8a86:	b082      	sub	sp, #8
    8a88:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    8a8a:	ad01      	add	r5, sp, #4
    8a8c:	2204      	movs	r2, #4
    8a8e:	0028      	movs	r0, r5
    8a90:	4b38      	ldr	r3, [pc, #224]	; (8b74 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    8a92:	4798      	blx	r3
	switch (chMaskCntl)
    8a94:	782b      	ldrb	r3, [r5, #0]
    8a96:	2b00      	cmp	r3, #0
    8a98:	d017      	beq.n	8aca <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    8a9a:	2b06      	cmp	r3, #6
    8a9c:	d159      	bne.n	8b52 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    8a9e:	3324      	adds	r3, #36	; 0x24
    8aa0:	4a35      	ldr	r2, [pc, #212]	; (8b78 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8aa2:	56d7      	ldrsb	r7, [r2, r3]
    8aa4:	2000      	movs	r0, #0
    8aa6:	2507      	movs	r5, #7
    8aa8:	2f00      	cmp	r7, #0
    8aaa:	dd54      	ble.n	8b56 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    8aac:	4a32      	ldr	r2, [pc, #200]	; (8b78 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8aae:	7916      	ldrb	r6, [r2, #4]
    8ab0:	7953      	ldrb	r3, [r2, #5]
    8ab2:	021b      	lsls	r3, r3, #8
    8ab4:	4333      	orrs	r3, r6
    8ab6:	7996      	ldrb	r6, [r2, #6]
    8ab8:	0436      	lsls	r6, r6, #16
    8aba:	4333      	orrs	r3, r6
    8abc:	79d6      	ldrb	r6, [r2, #7]
    8abe:	0636      	lsls	r6, r6, #24
    8ac0:	431e      	orrs	r6, r3
    8ac2:	2000      	movs	r0, #0
    8ac4:	2507      	movs	r5, #7
    8ac6:	2200      	movs	r2, #0
    8ac8:	e035      	b.n	8b36 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    8aca:	232a      	movs	r3, #42	; 0x2a
    8acc:	4a2a      	ldr	r2, [pc, #168]	; (8b78 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8ace:	56d3      	ldrsb	r3, [r2, r3]
    8ad0:	469c      	mov	ip, r3
    8ad2:	2b00      	cmp	r3, #0
    8ad4:	dd4a      	ble.n	8b6c <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    8ad6:	ab01      	add	r3, sp, #4
    8ad8:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8ada:	7917      	ldrb	r7, [r2, #4]
    8adc:	7953      	ldrb	r3, [r2, #5]
    8ade:	021b      	lsls	r3, r3, #8
    8ae0:	433b      	orrs	r3, r7
    8ae2:	7997      	ldrb	r7, [r2, #6]
    8ae4:	043f      	lsls	r7, r7, #16
    8ae6:	433b      	orrs	r3, r7
    8ae8:	79d7      	ldrb	r7, [r2, #7]
    8aea:	063f      	lsls	r7, r7, #24
    8aec:	431f      	orrs	r7, r3
    8aee:	2000      	movs	r0, #0
    8af0:	2507      	movs	r5, #7
    8af2:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8af4:	2401      	movs	r4, #1
    8af6:	e00b      	b.n	8b10 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    8af8:	784b      	ldrb	r3, [r1, #1]
    8afa:	091b      	lsrs	r3, r3, #4
    8afc:	4283      	cmp	r3, r0
    8afe:	dd02      	ble.n	8b06 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    8b00:	4234      	tst	r4, r6
    8b02:	d000      	beq.n	8b06 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8b04:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    8b06:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    8b08:	3201      	adds	r2, #1
    8b0a:	b2d2      	uxtb	r2, r2
    8b0c:	4562      	cmp	r2, ip
    8b0e:	da22      	bge.n	8b56 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8b10:	0051      	lsls	r1, r2, #1
    8b12:	1879      	adds	r1, r7, r1
    8b14:	784b      	ldrb	r3, [r1, #1]
    8b16:	071b      	lsls	r3, r3, #28
    8b18:	0f1b      	lsrs	r3, r3, #28
    8b1a:	42ab      	cmp	r3, r5
    8b1c:	daec      	bge.n	8af8 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    8b1e:	4234      	tst	r4, r6
    8b20:	d0f1      	beq.n	8b06 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    8b22:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8b24:	784b      	ldrb	r3, [r1, #1]
    8b26:	091b      	lsrs	r3, r3, #4
    8b28:	4298      	cmp	r0, r3
    8b2a:	dbeb      	blt.n	8b04 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    8b2c:	e7eb      	b.n	8b06 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    8b2e:	3201      	adds	r2, #1
    8b30:	b2d2      	uxtb	r2, r2
    8b32:	42ba      	cmp	r2, r7
    8b34:	da0f      	bge.n	8b56 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    8b36:	0051      	lsls	r1, r2, #1
    8b38:	1871      	adds	r1, r6, r1
    8b3a:	784b      	ldrb	r3, [r1, #1]
    8b3c:	071b      	lsls	r3, r3, #28
    8b3e:	0f1b      	lsrs	r3, r3, #28
    8b40:	42ab      	cmp	r3, r5
    8b42:	da00      	bge.n	8b46 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    8b44:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    8b46:	784b      	ldrb	r3, [r1, #1]
    8b48:	091b      	lsrs	r3, r3, #4
    8b4a:	4283      	cmp	r3, r0
    8b4c:	ddef      	ble.n	8b2e <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8b4e:	0018      	movs	r0, r3
    8b50:	e7ed      	b.n	8b2e <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    8b52:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    8b54:	25ff      	movs	r5, #255	; 0xff
    8b56:	0100      	lsls	r0, r0, #4
    8b58:	230f      	movs	r3, #15
    8b5a:	401d      	ands	r5, r3
    8b5c:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    8b5e:	4643      	mov	r3, r8
    8b60:	7018      	strb	r0, [r3, #0]
}
    8b62:	2008      	movs	r0, #8
    8b64:	b002      	add	sp, #8
    8b66:	bc04      	pop	{r2}
    8b68:	4690      	mov	r8, r2
    8b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    8b6c:	2000      	movs	r0, #0
    8b6e:	2507      	movs	r5, #7
    8b70:	e7f1      	b.n	8b56 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    8b72:	46c0      	nop			; (mov r8, r8)
    8b74:	00017691 	.word	0x00017691
    8b78:	20002310 	.word	0x20002310

00008b7c <LORAREG_GetAttr_FreqT2>:
{
    8b7c:	b510      	push	{r4, lr}
    8b7e:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    8b80:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    8b82:	222a      	movs	r2, #42	; 0x2a
    8b84:	490d      	ldr	r1, [pc, #52]	; (8bbc <LORAREG_GetAttr_FreqT2+0x40>)
    8b86:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    8b88:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    8b8a:	4293      	cmp	r3, r2
    8b8c:	dd00      	ble.n	8b90 <LORAREG_GetAttr_FreqT2+0x14>
}
    8b8e:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    8b90:	0008      	movs	r0, r1
    8b92:	7a09      	ldrb	r1, [r1, #8]
    8b94:	7a42      	ldrb	r2, [r0, #9]
    8b96:	0212      	lsls	r2, r2, #8
    8b98:	430a      	orrs	r2, r1
    8b9a:	7a81      	ldrb	r1, [r0, #10]
    8b9c:	0409      	lsls	r1, r1, #16
    8b9e:	430a      	orrs	r2, r1
    8ba0:	7ac1      	ldrb	r1, [r0, #11]
    8ba2:	0609      	lsls	r1, r1, #24
    8ba4:	4311      	orrs	r1, r2
    8ba6:	005a      	lsls	r2, r3, #1
    8ba8:	18d3      	adds	r3, r2, r3
    8baa:	009b      	lsls	r3, r3, #2
    8bac:	18c9      	adds	r1, r1, r3
    8bae:	2204      	movs	r2, #4
    8bb0:	0020      	movs	r0, r4
    8bb2:	4b03      	ldr	r3, [pc, #12]	; (8bc0 <LORAREG_GetAttr_FreqT2+0x44>)
    8bb4:	4798      	blx	r3
	return result;
    8bb6:	2008      	movs	r0, #8
    8bb8:	e7e9      	b.n	8b8e <LORAREG_GetAttr_FreqT2+0x12>
    8bba:	46c0      	nop			; (mov r8, r8)
    8bbc:	20002310 	.word	0x20002310
    8bc0:	00017691 	.word	0x00017691

00008bc4 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    8bc4:	b510      	push	{r4, lr}
    8bc6:	b082      	sub	sp, #8
    8bc8:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    8bca:	232f      	movs	r3, #47	; 0x2f
    8bcc:	4a37      	ldr	r2, [pc, #220]	; (8cac <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8bce:	5cd2      	ldrb	r2, [r2, r3]
    8bd0:	4b37      	ldr	r3, [pc, #220]	; (8cb0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    8bd2:	4113      	asrs	r3, r2
    8bd4:	07db      	lsls	r3, r3, #31
    8bd6:	d502      	bpl.n	8bde <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    8bd8:	780b      	ldrb	r3, [r1, #0]
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d116      	bne.n	8c0c <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    8bde:	23c4      	movs	r3, #196	; 0xc4
    8be0:	33ff      	adds	r3, #255	; 0xff
    8be2:	4a32      	ldr	r2, [pc, #200]	; (8cac <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8be4:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    8be6:	3bc2      	subs	r3, #194	; 0xc2
    8be8:	3bff      	subs	r3, #255	; 0xff
    8bea:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8bec:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8bee:	2b05      	cmp	r3, #5
    8bf0:	d92c      	bls.n	8c4c <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    8bf2:	2205      	movs	r2, #5
    8bf4:	1ad3      	subs	r3, r2, r3
    8bf6:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8bf8:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    8bfa:	429a      	cmp	r2, r3
    8bfc:	db31      	blt.n	8c62 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8bfe:	1ad3      	subs	r3, r2, r3
    8c00:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    8c02:	42a3      	cmp	r3, r4
    8c04:	d224      	bcs.n	8c50 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    8c06:	466b      	mov	r3, sp
    8c08:	711c      	strb	r4, [r3, #4]
    8c0a:	e02c      	b.n	8c66 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    8c0c:	2302      	movs	r3, #2
    8c0e:	466a      	mov	r2, sp
    8c10:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    8c12:	4926      	ldr	r1, [pc, #152]	; (8cac <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8c14:	7a0b      	ldrb	r3, [r1, #8]
    8c16:	7a4a      	ldrb	r2, [r1, #9]
    8c18:	0212      	lsls	r2, r2, #8
    8c1a:	4313      	orrs	r3, r2
    8c1c:	7a8a      	ldrb	r2, [r1, #10]
    8c1e:	0412      	lsls	r2, r2, #16
    8c20:	431a      	orrs	r2, r3
    8c22:	7acb      	ldrb	r3, [r1, #11]
    8c24:	061b      	lsls	r3, r3, #24
    8c26:	431a      	orrs	r2, r3
    8c28:	2330      	movs	r3, #48	; 0x30
    8c2a:	5cc9      	ldrb	r1, [r1, r3]
    8c2c:	004b      	lsls	r3, r1, #1
    8c2e:	185b      	adds	r3, r3, r1
    8c30:	009b      	lsls	r3, r3, #2
    8c32:	189b      	adds	r3, r3, r2
    8c34:	7919      	ldrb	r1, [r3, #4]
    8c36:	795a      	ldrb	r2, [r3, #5]
    8c38:	0212      	lsls	r2, r2, #8
    8c3a:	4311      	orrs	r1, r2
    8c3c:	799a      	ldrb	r2, [r3, #6]
    8c3e:	0412      	lsls	r2, r2, #16
    8c40:	430a      	orrs	r2, r1
    8c42:	79db      	ldrb	r3, [r3, #7]
    8c44:	061b      	lsls	r3, r3, #24
    8c46:	4313      	orrs	r3, r2
    8c48:	9300      	str	r3, [sp, #0]
    8c4a:	e028      	b.n	8c9e <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8c4c:	b25b      	sxtb	r3, r3
    8c4e:	e7d3      	b.n	8bf8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    8c50:	2b05      	cmp	r3, #5
    8c52:	d802      	bhi.n	8c5a <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8c54:	466a      	mov	r2, sp
    8c56:	7113      	strb	r3, [r2, #4]
    8c58:	e005      	b.n	8c66 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    8c5a:	2305      	movs	r3, #5
    8c5c:	466a      	mov	r2, sp
    8c5e:	7113      	strb	r3, [r2, #4]
    8c60:	e001      	b.n	8c66 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    8c62:	466b      	mov	r3, sp
    8c64:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    8c66:	4911      	ldr	r1, [pc, #68]	; (8cac <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8c68:	7a0b      	ldrb	r3, [r1, #8]
    8c6a:	7a4a      	ldrb	r2, [r1, #9]
    8c6c:	0212      	lsls	r2, r2, #8
    8c6e:	4313      	orrs	r3, r2
    8c70:	7a8a      	ldrb	r2, [r1, #10]
    8c72:	0412      	lsls	r2, r2, #16
    8c74:	431a      	orrs	r2, r3
    8c76:	7acb      	ldrb	r3, [r1, #11]
    8c78:	061b      	lsls	r3, r3, #24
    8c7a:	431a      	orrs	r2, r3
    8c7c:	2330      	movs	r3, #48	; 0x30
    8c7e:	5cc9      	ldrb	r1, [r1, r3]
    8c80:	004b      	lsls	r3, r1, #1
    8c82:	185b      	adds	r3, r3, r1
    8c84:	009b      	lsls	r3, r3, #2
    8c86:	189b      	adds	r3, r3, r2
    8c88:	7919      	ldrb	r1, [r3, #4]
    8c8a:	795a      	ldrb	r2, [r3, #5]
    8c8c:	0212      	lsls	r2, r2, #8
    8c8e:	4311      	orrs	r1, r2
    8c90:	799a      	ldrb	r2, [r3, #6]
    8c92:	0412      	lsls	r2, r2, #16
    8c94:	430a      	orrs	r2, r1
    8c96:	79db      	ldrb	r3, [r3, #7]
    8c98:	061b      	lsls	r3, r3, #24
    8c9a:	4313      	orrs	r3, r2
    8c9c:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8c9e:	2208      	movs	r2, #8
    8ca0:	4669      	mov	r1, sp
    8ca2:	4b04      	ldr	r3, [pc, #16]	; (8cb4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    8ca4:	4798      	blx	r3
}
    8ca6:	2008      	movs	r0, #8
    8ca8:	b002      	add	sp, #8
    8caa:	bd10      	pop	{r4, pc}
    8cac:	20002310 	.word	0x20002310
    8cb0:	00007fe0 	.word	0x00007fe0
    8cb4:	00017691 	.word	0x00017691

00008cb8 <LORAREG_GetAttr_FreqT3>:
{
    8cb8:	b510      	push	{r4, lr}
    8cba:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    8cbc:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    8cbe:	222a      	movs	r2, #42	; 0x2a
    8cc0:	490d      	ldr	r1, [pc, #52]	; (8cf8 <LORAREG_GetAttr_FreqT3+0x40>)
    8cc2:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8cc4:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    8cc6:	4293      	cmp	r3, r2
    8cc8:	dd00      	ble.n	8ccc <LORAREG_GetAttr_FreqT3+0x14>
}
    8cca:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    8ccc:	0008      	movs	r0, r1
    8cce:	7a09      	ldrb	r1, [r1, #8]
    8cd0:	7a42      	ldrb	r2, [r0, #9]
    8cd2:	0212      	lsls	r2, r2, #8
    8cd4:	430a      	orrs	r2, r1
    8cd6:	7a81      	ldrb	r1, [r0, #10]
    8cd8:	0409      	lsls	r1, r1, #16
    8cda:	430a      	orrs	r2, r1
    8cdc:	7ac1      	ldrb	r1, [r0, #11]
    8cde:	0609      	lsls	r1, r1, #24
    8ce0:	4311      	orrs	r1, r2
    8ce2:	005a      	lsls	r2, r3, #1
    8ce4:	18d3      	adds	r3, r2, r3
    8ce6:	009b      	lsls	r3, r3, #2
    8ce8:	18c9      	adds	r1, r1, r3
    8cea:	2204      	movs	r2, #4
    8cec:	0020      	movs	r0, r4
    8cee:	4b03      	ldr	r3, [pc, #12]	; (8cfc <LORAREG_GetAttr_FreqT3+0x44>)
    8cf0:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8cf2:	2008      	movs	r0, #8
    8cf4:	e7e9      	b.n	8cca <LORAREG_GetAttr_FreqT3+0x12>
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	20002310 	.word	0x20002310
    8cfc:	00017691 	.word	0x00017691

00008d00 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    8d00:	b500      	push	{lr}
    8d02:	b083      	sub	sp, #12
    8d04:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8d06:	784b      	ldrb	r3, [r1, #1]
    8d08:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8d0a:	2b05      	cmp	r3, #5
    8d0c:	d90b      	bls.n	8d26 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    8d0e:	2105      	movs	r1, #5
    8d10:	1acb      	subs	r3, r1, r3
    8d12:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    8d14:	429a      	cmp	r2, r3
    8d16:	db0c      	blt.n	8d32 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8d18:	1ad3      	subs	r3, r2, r3
    8d1a:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    8d1c:	2b05      	cmp	r3, #5
    8d1e:	d804      	bhi.n	8d2a <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8d20:	466a      	mov	r2, sp
    8d22:	7113      	strb	r3, [r2, #4]
    8d24:	e008      	b.n	8d38 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8d26:	b25b      	sxtb	r3, r3
    8d28:	e7f4      	b.n	8d14 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    8d2a:	2305      	movs	r3, #5
    8d2c:	466a      	mov	r2, sp
    8d2e:	7113      	strb	r3, [r2, #4]
    8d30:	e002      	b.n	8d38 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    8d32:	2300      	movs	r3, #0
    8d34:	466a      	mov	r2, sp
    8d36:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    8d38:	4911      	ldr	r1, [pc, #68]	; (8d80 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    8d3a:	7a0b      	ldrb	r3, [r1, #8]
    8d3c:	7a4a      	ldrb	r2, [r1, #9]
    8d3e:	0212      	lsls	r2, r2, #8
    8d40:	4313      	orrs	r3, r2
    8d42:	7a8a      	ldrb	r2, [r1, #10]
    8d44:	0412      	lsls	r2, r2, #16
    8d46:	431a      	orrs	r2, r3
    8d48:	7acb      	ldrb	r3, [r1, #11]
    8d4a:	061b      	lsls	r3, r3, #24
    8d4c:	431a      	orrs	r2, r3
    8d4e:	2330      	movs	r3, #48	; 0x30
    8d50:	5cc9      	ldrb	r1, [r1, r3]
    8d52:	004b      	lsls	r3, r1, #1
    8d54:	185b      	adds	r3, r3, r1
    8d56:	009b      	lsls	r3, r3, #2
    8d58:	189b      	adds	r3, r3, r2
    8d5a:	7919      	ldrb	r1, [r3, #4]
    8d5c:	795a      	ldrb	r2, [r3, #5]
    8d5e:	0212      	lsls	r2, r2, #8
    8d60:	4311      	orrs	r1, r2
    8d62:	799a      	ldrb	r2, [r3, #6]
    8d64:	0412      	lsls	r2, r2, #16
    8d66:	430a      	orrs	r2, r1
    8d68:	79db      	ldrb	r3, [r3, #7]
    8d6a:	061b      	lsls	r3, r3, #24
    8d6c:	4313      	orrs	r3, r2
    8d6e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8d70:	2208      	movs	r2, #8
    8d72:	4669      	mov	r1, sp
    8d74:	4b03      	ldr	r3, [pc, #12]	; (8d84 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    8d76:	4798      	blx	r3
}
    8d78:	2008      	movs	r0, #8
    8d7a:	b003      	add	sp, #12
    8d7c:	bd00      	pop	{pc}
    8d7e:	46c0      	nop			; (mov r8, r8)
    8d80:	20002310 	.word	0x20002310
    8d84:	00017691 	.word	0x00017691

00008d88 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    8d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d8a:	46de      	mov	lr, fp
    8d8c:	4657      	mov	r7, sl
    8d8e:	464e      	mov	r6, r9
    8d90:	4645      	mov	r5, r8
    8d92:	b5e0      	push	{r5, r6, r7, lr}
    8d94:	b085      	sub	sp, #20
    8d96:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    8d98:	2301      	movs	r3, #1
    8d9a:	425b      	negs	r3, r3
    8d9c:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    8d9e:	780b      	ldrb	r3, [r1, #0]
    8da0:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    8da2:	232a      	movs	r3, #42	; 0x2a
    8da4:	4a2a      	ldr	r2, [pc, #168]	; (8e50 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    8da6:	56d7      	ldrsb	r7, [r2, r3]
    8da8:	2f00      	cmp	r7, #0
    8daa:	dd40      	ble.n	8e2e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    8dac:	7916      	ldrb	r6, [r2, #4]
    8dae:	7953      	ldrb	r3, [r2, #5]
    8db0:	021b      	lsls	r3, r3, #8
    8db2:	4333      	orrs	r3, r6
    8db4:	7996      	ldrb	r6, [r2, #6]
    8db6:	0436      	lsls	r6, r6, #16
    8db8:	4333      	orrs	r3, r6
    8dba:	79d6      	ldrb	r6, [r2, #7]
    8dbc:	0636      	lsls	r6, r6, #24
    8dbe:	431e      	orrs	r6, r3
    8dc0:	2300      	movs	r3, #0
    8dc2:	469a      	mov	sl, r3
    8dc4:	3b01      	subs	r3, #1
    8dc6:	4698      	mov	r8, r3
    8dc8:	2300      	movs	r3, #0
    8dca:	2100      	movs	r1, #0
    8dcc:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    8dce:	464a      	mov	r2, r9
    8dd0:	9201      	str	r2, [sp, #4]
    8dd2:	46c3      	mov	fp, r8
    8dd4:	e004      	b.n	8de0 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    8dd6:	3101      	adds	r1, #1
    8dd8:	b2c9      	uxtb	r1, r1
    8dda:	000b      	movs	r3, r1
    8ddc:	42b9      	cmp	r1, r7
    8dde:	da23      	bge.n	8e28 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    8de0:	004a      	lsls	r2, r1, #1
    8de2:	18b2      	adds	r2, r6, r2
    8de4:	7814      	ldrb	r4, [r2, #0]
    8de6:	2c00      	cmp	r4, #0
    8de8:	d0f5      	beq.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8dea:	3358      	adds	r3, #88	; 0x58
    8dec:	009b      	lsls	r3, r3, #2
    8dee:	4463      	add	r3, ip
    8df0:	7a58      	ldrb	r0, [r3, #9]
    8df2:	4680      	mov	r8, r0
    8df4:	7a98      	ldrb	r0, [r3, #10]
    8df6:	0200      	lsls	r0, r0, #8
    8df8:	4645      	mov	r5, r8
    8dfa:	4305      	orrs	r5, r0
    8dfc:	7ad8      	ldrb	r0, [r3, #11]
    8dfe:	0400      	lsls	r0, r0, #16
    8e00:	4328      	orrs	r0, r5
    8e02:	7b1b      	ldrb	r3, [r3, #12]
    8e04:	061b      	lsls	r3, r3, #24
    8e06:	4303      	orrs	r3, r0
    8e08:	d0e5      	beq.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    8e0a:	459b      	cmp	fp, r3
    8e0c:	d3e3      	bcc.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    8e0e:	7850      	ldrb	r0, [r2, #1]
    8e10:	0700      	lsls	r0, r0, #28
    8e12:	0f00      	lsrs	r0, r0, #28
    8e14:	4581      	cmp	r9, r0
    8e16:	dbde      	blt.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    8e18:	7852      	ldrb	r2, [r2, #1]
    8e1a:	0912      	lsrs	r2, r2, #4
    8e1c:	9801      	ldr	r0, [sp, #4]
    8e1e:	4290      	cmp	r0, r2
    8e20:	dcd9      	bgt.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8e22:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    8e24:	469b      	mov	fp, r3
    8e26:	e7d6      	b.n	8dd6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8e28:	4653      	mov	r3, sl
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d10c      	bne.n	8e48 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    8e2e:	2204      	movs	r2, #4
    8e30:	a903      	add	r1, sp, #12
    8e32:	9800      	ldr	r0, [sp, #0]
    8e34:	4b07      	ldr	r3, [pc, #28]	; (8e54 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    8e36:	4798      	blx	r3
}
    8e38:	2008      	movs	r0, #8
    8e3a:	b005      	add	sp, #20
    8e3c:	bc3c      	pop	{r2, r3, r4, r5}
    8e3e:	4690      	mov	r8, r2
    8e40:	4699      	mov	r9, r3
    8e42:	46a2      	mov	sl, r4
    8e44:	46ab      	mov	fp, r5
    8e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e48:	465b      	mov	r3, fp
    8e4a:	9303      	str	r3, [sp, #12]
    8e4c:	e7ef      	b.n	8e2e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    8e4e:	46c0      	nop			; (mov r8, r8)
    8e50:	20002310 	.word	0x20002310
    8e54:	00017691 	.word	0x00017691

00008e58 <ValidateTxFreqT2>:
{
    8e58:	b500      	push	{lr}
    8e5a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    8e5c:	2208      	movs	r2, #8
    8e5e:	4668      	mov	r0, sp
    8e60:	4b04      	ldr	r3, [pc, #16]	; (8e74 <ValidateTxFreqT2+0x1c>)
    8e62:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    8e64:	4b04      	ldr	r3, [pc, #16]	; (8e78 <ValidateTxFreqT2+0x20>)
    8e66:	685b      	ldr	r3, [r3, #4]
    8e68:	4669      	mov	r1, sp
    8e6a:	2001      	movs	r0, #1
    8e6c:	4798      	blx	r3
}
    8e6e:	b003      	add	sp, #12
    8e70:	bd00      	pop	{pc}
    8e72:	46c0      	nop			; (mov r8, r8)
    8e74:	00017691 	.word	0x00017691
    8e78:	20000cf4 	.word	0x20000cf4

00008e7c <ValidateFreqIN>:
{
    8e7c:	b500      	push	{lr}
    8e7e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    8e80:	2204      	movs	r2, #4
    8e82:	a801      	add	r0, sp, #4
    8e84:	4b06      	ldr	r3, [pc, #24]	; (8ea0 <ValidateFreqIN+0x24>)
    8e86:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8e88:	9b01      	ldr	r3, [sp, #4]
    8e8a:	4a06      	ldr	r2, [pc, #24]	; (8ea4 <ValidateFreqIN+0x28>)
    8e8c:	4694      	mov	ip, r2
    8e8e:	4463      	add	r3, ip
    8e90:	4a05      	ldr	r2, [pc, #20]	; (8ea8 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8e92:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8e94:	4293      	cmp	r3, r2
    8e96:	d900      	bls.n	8e9a <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8e98:	3002      	adds	r0, #2
}
    8e9a:	b003      	add	sp, #12
    8e9c:	bd00      	pop	{pc}
    8e9e:	46c0      	nop			; (mov r8, r8)
    8ea0:	00017691 	.word	0x00017691
    8ea4:	cc7125c0 	.word	0xcc7125c0
    8ea8:	001e8480 	.word	0x001e8480

00008eac <ValidateFreqJP>:
{
    8eac:	b500      	push	{lr}
    8eae:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    8eb0:	2204      	movs	r2, #4
    8eb2:	a801      	add	r0, sp, #4
    8eb4:	4b06      	ldr	r3, [pc, #24]	; (8ed0 <ValidateFreqJP+0x24>)
    8eb6:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8eb8:	9b01      	ldr	r3, [sp, #4]
    8eba:	4a06      	ldr	r2, [pc, #24]	; (8ed4 <ValidateFreqJP+0x28>)
    8ebc:	4694      	mov	ip, r2
    8ebe:	4463      	add	r3, ip
    8ec0:	4a05      	ldr	r2, [pc, #20]	; (8ed8 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8ec2:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8ec4:	4293      	cmp	r3, r2
    8ec6:	d900      	bls.n	8eca <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8ec8:	3002      	adds	r0, #2
}
    8eca:	b003      	add	sp, #12
    8ecc:	bd00      	pop	{pc}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	00017691 	.word	0x00017691
    8ed4:	c929ea00 	.word	0xc929ea00
    8ed8:	007a1200 	.word	0x007a1200

00008edc <ValidateFreqKR>:
{
    8edc:	b500      	push	{lr}
    8ede:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    8ee0:	2204      	movs	r2, #4
    8ee2:	a801      	add	r0, sp, #4
    8ee4:	4b0a      	ldr	r3, [pc, #40]	; (8f10 <ValidateFreqKR+0x34>)
    8ee6:	4798      	blx	r3
		if(freq == freqNew)
    8ee8:	9a01      	ldr	r2, [sp, #4]
    8eea:	4b0a      	ldr	r3, [pc, #40]	; (8f14 <ValidateFreqKR+0x38>)
    8eec:	429a      	cmp	r2, r3
    8eee:	d00b      	beq.n	8f08 <ValidateFreqKR+0x2c>
    8ef0:	4b09      	ldr	r3, [pc, #36]	; (8f18 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    8ef2:	490a      	ldr	r1, [pc, #40]	; (8f1c <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    8ef4:	429a      	cmp	r2, r3
    8ef6:	d009      	beq.n	8f0c <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    8ef8:	4809      	ldr	r0, [pc, #36]	; (8f20 <ValidateFreqKR+0x44>)
    8efa:	4684      	mov	ip, r0
    8efc:	4463      	add	r3, ip
    8efe:	428b      	cmp	r3, r1
    8f00:	d1f8      	bne.n	8ef4 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8f02:	200a      	movs	r0, #10
}
    8f04:	b003      	add	sp, #12
    8f06:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    8f08:	2008      	movs	r0, #8
    8f0a:	e7fb      	b.n	8f04 <ValidateFreqKR+0x28>
    8f0c:	2008      	movs	r0, #8
    8f0e:	e7f9      	b.n	8f04 <ValidateFreqKR+0x28>
    8f10:	00017691 	.word	0x00017691
    8f14:	36e3d1a0 	.word	0x36e3d1a0
    8f18:	36e6dee0 	.word	0x36e6dee0
    8f1c:	370b7de0 	.word	0x370b7de0
    8f20:	00030d40 	.word	0x00030d40

00008f24 <setNewChannelsT1>:
{
    8f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f26:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    8f28:	ac01      	add	r4, sp, #4
    8f2a:	2204      	movs	r2, #4
    8f2c:	0020      	movs	r0, r4
    8f2e:	4b1f      	ldr	r3, [pc, #124]	; (8fac <setNewChannelsT1+0x88>)
    8f30:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    8f32:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    8f34:	78a6      	ldrb	r6, [r4, #2]
    8f36:	466b      	mov	r3, sp
    8f38:	1cd9      	adds	r1, r3, #3
    8f3a:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    8f3c:	201b      	movs	r0, #27
    8f3e:	4b1c      	ldr	r3, [pc, #112]	; (8fb0 <setNewChannelsT1+0x8c>)
    8f40:	4798      	blx	r3
    8f42:	0005      	movs	r5, r0
    8f44:	2808      	cmp	r0, #8
    8f46:	d003      	beq.n	8f50 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    8f48:	250a      	movs	r5, #10
}
    8f4a:	0028      	movs	r0, r5
    8f4c:	b003      	add	sp, #12
    8f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    8f50:	2e06      	cmp	r6, #6
    8f52:	d01c      	beq.n	8f8e <setNewChannelsT1+0x6a>
    8f54:	d80a      	bhi.n	8f6c <setNewChannelsT1+0x48>
    8f56:	2e04      	cmp	r6, #4
    8f58:	d8f7      	bhi.n	8f4a <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    8f5a:	0136      	lsls	r6, r6, #4
    8f5c:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    8f5e:	0001      	movs	r1, r0
    8f60:	310f      	adds	r1, #15
    8f62:	b2c9      	uxtb	r1, r1
    8f64:	003a      	movs	r2, r7
    8f66:	4b13      	ldr	r3, [pc, #76]	; (8fb4 <setNewChannelsT1+0x90>)
    8f68:	4798      	blx	r3
				break;
    8f6a:	e7ee      	b.n	8f4a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    8f6c:	2400      	movs	r4, #0
    8f6e:	2e07      	cmp	r6, #7
    8f70:	d1eb      	bne.n	8f4a <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    8f72:	4e11      	ldr	r6, [pc, #68]	; (8fb8 <setNewChannelsT1+0x94>)
    8f74:	2100      	movs	r1, #0
    8f76:	0020      	movs	r0, r4
    8f78:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    8f7a:	3401      	adds	r4, #1
    8f7c:	b2e4      	uxtb	r4, r4
    8f7e:	2c3f      	cmp	r4, #63	; 0x3f
    8f80:	d1f8      	bne.n	8f74 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    8f82:	003a      	movs	r2, r7
    8f84:	2147      	movs	r1, #71	; 0x47
    8f86:	2040      	movs	r0, #64	; 0x40
    8f88:	4b0a      	ldr	r3, [pc, #40]	; (8fb4 <setNewChannelsT1+0x90>)
    8f8a:	4798      	blx	r3
				break;
    8f8c:	e7dd      	b.n	8f4a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    8f8e:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    8f90:	4e09      	ldr	r6, [pc, #36]	; (8fb8 <setNewChannelsT1+0x94>)
    8f92:	2101      	movs	r1, #1
    8f94:	0020      	movs	r0, r4
    8f96:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    8f98:	3401      	adds	r4, #1
    8f9a:	b2e4      	uxtb	r4, r4
    8f9c:	2c3f      	cmp	r4, #63	; 0x3f
    8f9e:	d1f8      	bne.n	8f92 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    8fa0:	003a      	movs	r2, r7
    8fa2:	2147      	movs	r1, #71	; 0x47
    8fa4:	2040      	movs	r0, #64	; 0x40
    8fa6:	4b03      	ldr	r3, [pc, #12]	; (8fb4 <setNewChannelsT1+0x90>)
    8fa8:	4798      	blx	r3
			    break;
    8faa:	e7ce      	b.n	8f4a <setNewChannelsT1+0x26>
    8fac:	00017691 	.word	0x00017691
    8fb0:	00007855 	.word	0x00007855
    8fb4:	000081cd 	.word	0x000081cd
    8fb8:	00008169 	.word	0x00008169

00008fbc <setDlFrequency>:
{
    8fbc:	b530      	push	{r4, r5, lr}
    8fbe:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    8fc0:	ac02      	add	r4, sp, #8
    8fc2:	2208      	movs	r2, #8
    8fc4:	0020      	movs	r0, r4
    8fc6:	4b1f      	ldr	r3, [pc, #124]	; (9044 <setDlFrequency+0x88>)
    8fc8:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    8fca:	ab01      	add	r3, sp, #4
    8fcc:	7922      	ldrb	r2, [r4, #4]
    8fce:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    8fd0:	2201      	movs	r2, #1
    8fd2:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fd4:	4b1c      	ldr	r3, [pc, #112]	; (9048 <setDlFrequency+0x8c>)
    8fd6:	685b      	ldr	r3, [r3, #4]
    8fd8:	0021      	movs	r1, r4
    8fda:	2001      	movs	r0, #1
    8fdc:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    8fde:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fe0:	2808      	cmp	r0, #8
    8fe2:	d002      	beq.n	8fea <setDlFrequency+0x2e>
}
    8fe4:	0020      	movs	r0, r4
    8fe6:	b005      	add	sp, #20
    8fe8:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fea:	a901      	add	r1, sp, #4
    8fec:	300d      	adds	r0, #13
    8fee:	4b17      	ldr	r3, [pc, #92]	; (904c <setDlFrequency+0x90>)
    8ff0:	4798      	blx	r3
    8ff2:	0004      	movs	r4, r0
    8ff4:	2808      	cmp	r0, #8
    8ff6:	d001      	beq.n	8ffc <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    8ff8:	240a      	movs	r4, #10
    8ffa:	e7f3      	b.n	8fe4 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    8ffc:	4a14      	ldr	r2, [pc, #80]	; (9050 <setDlFrequency+0x94>)
    8ffe:	7a13      	ldrb	r3, [r2, #8]
    9000:	7a50      	ldrb	r0, [r2, #9]
    9002:	0200      	lsls	r0, r0, #8
    9004:	4303      	orrs	r3, r0
    9006:	7a90      	ldrb	r0, [r2, #10]
    9008:	0400      	lsls	r0, r0, #16
    900a:	4318      	orrs	r0, r3
    900c:	7ad3      	ldrb	r3, [r2, #11]
    900e:	061b      	lsls	r3, r3, #24
    9010:	4318      	orrs	r0, r3
    9012:	a902      	add	r1, sp, #8
    9014:	790d      	ldrb	r5, [r1, #4]
    9016:	006b      	lsls	r3, r5, #1
    9018:	195b      	adds	r3, r3, r5
    901a:	009b      	lsls	r3, r3, #2
    901c:	181b      	adds	r3, r3, r0
    901e:	7808      	ldrb	r0, [r1, #0]
    9020:	7118      	strb	r0, [r3, #4]
    9022:	7848      	ldrb	r0, [r1, #1]
    9024:	7158      	strb	r0, [r3, #5]
    9026:	7888      	ldrb	r0, [r1, #2]
    9028:	7198      	strb	r0, [r3, #6]
    902a:	78c9      	ldrb	r1, [r1, #3]
    902c:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    902e:	4b09      	ldr	r3, [pc, #36]	; (9054 <setDlFrequency+0x98>)
    9030:	5cd3      	ldrb	r3, [r2, r3]
    9032:	4909      	ldr	r1, [pc, #36]	; (9058 <setDlFrequency+0x9c>)
    9034:	5c50      	ldrb	r0, [r2, r1]
    9036:	0200      	lsls	r0, r0, #8
    9038:	4318      	orrs	r0, r3
    903a:	b2c1      	uxtb	r1, r0
    903c:	0a00      	lsrs	r0, r0, #8
    903e:	4b07      	ldr	r3, [pc, #28]	; (905c <setDlFrequency+0xa0>)
    9040:	4798      	blx	r3
    9042:	e7cf      	b.n	8fe4 <setDlFrequency+0x28>
    9044:	00017691 	.word	0x00017691
    9048:	20000cf4 	.word	0x20000cf4
    904c:	0000774d 	.word	0x0000774d
    9050:	20002310 	.word	0x20002310
    9054:	00000211 	.word	0x00000211
    9058:	00000212 	.word	0x00000212
    905c:	0000be05 	.word	0x0000be05

00009060 <setFrequency>:
{
    9060:	b570      	push	{r4, r5, r6, lr}
    9062:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    9064:	ac02      	add	r4, sp, #8
    9066:	2208      	movs	r2, #8
    9068:	0020      	movs	r0, r4
    906a:	4b3e      	ldr	r3, [pc, #248]	; (9164 <setFrequency+0x104>)
    906c:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    906e:	ab01      	add	r3, sp, #4
    9070:	7922      	ldrb	r2, [r4, #4]
    9072:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    9074:	2200      	movs	r2, #0
    9076:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    9078:	4b3b      	ldr	r3, [pc, #236]	; (9168 <setFrequency+0x108>)
    907a:	685b      	ldr	r3, [r3, #4]
    907c:	0021      	movs	r1, r4
    907e:	2001      	movs	r0, #1
    9080:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    9082:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    9084:	2808      	cmp	r0, #8
    9086:	d002      	beq.n	908e <setFrequency+0x2e>
}
    9088:	0020      	movs	r0, r4
    908a:	b004      	add	sp, #16
    908c:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    908e:	a901      	add	r1, sp, #4
    9090:	300d      	adds	r0, #13
    9092:	4b36      	ldr	r3, [pc, #216]	; (916c <setFrequency+0x10c>)
    9094:	4798      	blx	r3
    9096:	0004      	movs	r4, r0
    9098:	2808      	cmp	r0, #8
    909a:	d001      	beq.n	90a0 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    909c:	240a      	movs	r4, #10
    909e:	e7f3      	b.n	9088 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    90a0:	ab02      	add	r3, sp, #8
    90a2:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    90a4:	232f      	movs	r3, #47	; 0x2f
    90a6:	4a32      	ldr	r2, [pc, #200]	; (9170 <setFrequency+0x110>)
    90a8:	5cd2      	ldrb	r2, [r2, r3]
    90aa:	3b0c      	subs	r3, #12
    90ac:	4113      	asrs	r3, r2
    90ae:	07db      	lsls	r3, r3, #31
    90b0:	d444      	bmi.n	913c <setFrequency+0xdc>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    90b2:	006a      	lsls	r2, r5, #1
    90b4:	1952      	adds	r2, r2, r5
    90b6:	0090      	lsls	r0, r2, #2
    90b8:	a902      	add	r1, sp, #8
    90ba:	9d02      	ldr	r5, [sp, #8]
    90bc:	4b2c      	ldr	r3, [pc, #176]	; (9170 <setFrequency+0x110>)
    90be:	7a1a      	ldrb	r2, [r3, #8]
    90c0:	7a5e      	ldrb	r6, [r3, #9]
    90c2:	0236      	lsls	r6, r6, #8
    90c4:	4316      	orrs	r6, r2
    90c6:	7a9a      	ldrb	r2, [r3, #10]
    90c8:	0412      	lsls	r2, r2, #16
    90ca:	4316      	orrs	r6, r2
    90cc:	7ada      	ldrb	r2, [r3, #11]
    90ce:	0612      	lsls	r2, r2, #24
    90d0:	4332      	orrs	r2, r6
    90d2:	5415      	strb	r5, [r2, r0]
    90d4:	0a2e      	lsrs	r6, r5, #8
    90d6:	1812      	adds	r2, r2, r0
    90d8:	7056      	strb	r6, [r2, #1]
    90da:	0c2e      	lsrs	r6, r5, #16
    90dc:	7096      	strb	r6, [r2, #2]
    90de:	0e2d      	lsrs	r5, r5, #24
    90e0:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    90e2:	7a1a      	ldrb	r2, [r3, #8]
    90e4:	7a5d      	ldrb	r5, [r3, #9]
    90e6:	022d      	lsls	r5, r5, #8
    90e8:	4315      	orrs	r5, r2
    90ea:	7a9a      	ldrb	r2, [r3, #10]
    90ec:	0412      	lsls	r2, r2, #16
    90ee:	4315      	orrs	r5, r2
    90f0:	7ada      	ldrb	r2, [r3, #11]
    90f2:	0612      	lsls	r2, r2, #24
    90f4:	432a      	orrs	r2, r5
    90f6:	1812      	adds	r2, r2, r0
    90f8:	780d      	ldrb	r5, [r1, #0]
    90fa:	7115      	strb	r5, [r2, #4]
    90fc:	784d      	ldrb	r5, [r1, #1]
    90fe:	7155      	strb	r5, [r2, #5]
    9100:	788d      	ldrb	r5, [r1, #2]
    9102:	7195      	strb	r5, [r2, #6]
    9104:	78c9      	ldrb	r1, [r1, #3]
    9106:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    9108:	7a1a      	ldrb	r2, [r3, #8]
    910a:	7a59      	ldrb	r1, [r3, #9]
    910c:	0209      	lsls	r1, r1, #8
    910e:	4311      	orrs	r1, r2
    9110:	7a9a      	ldrb	r2, [r3, #10]
    9112:	0412      	lsls	r2, r2, #16
    9114:	4311      	orrs	r1, r2
    9116:	7ada      	ldrb	r2, [r3, #11]
    9118:	0612      	lsls	r2, r2, #24
    911a:	430a      	orrs	r2, r1
    911c:	1812      	adds	r2, r2, r0
    911e:	7ad1      	ldrb	r1, [r2, #11]
    9120:	2001      	movs	r0, #1
    9122:	4301      	orrs	r1, r0
    9124:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9126:	4a13      	ldr	r2, [pc, #76]	; (9174 <setFrequency+0x114>)
    9128:	5c9a      	ldrb	r2, [r3, r2]
    912a:	4913      	ldr	r1, [pc, #76]	; (9178 <setFrequency+0x118>)
    912c:	5c58      	ldrb	r0, [r3, r1]
    912e:	0200      	lsls	r0, r0, #8
    9130:	4310      	orrs	r0, r2
    9132:	b2c1      	uxtb	r1, r0
    9134:	0a00      	lsrs	r0, r0, #8
    9136:	4b11      	ldr	r3, [pc, #68]	; (917c <setFrequency+0x11c>)
    9138:	4798      	blx	r3
    913a:	e7a5      	b.n	9088 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    913c:	4a0c      	ldr	r2, [pc, #48]	; (9170 <setFrequency+0x110>)
    913e:	7a16      	ldrb	r6, [r2, #8]
    9140:	7a53      	ldrb	r3, [r2, #9]
    9142:	021b      	lsls	r3, r3, #8
    9144:	4333      	orrs	r3, r6
    9146:	7a96      	ldrb	r6, [r2, #10]
    9148:	0436      	lsls	r6, r6, #16
    914a:	4333      	orrs	r3, r6
    914c:	7ad6      	ldrb	r6, [r2, #11]
    914e:	0636      	lsls	r6, r6, #24
    9150:	431e      	orrs	r6, r3
    9152:	006b      	lsls	r3, r5, #1
    9154:	195b      	adds	r3, r3, r5
    9156:	009b      	lsls	r3, r3, #2
    9158:	18f6      	adds	r6, r6, r3
    915a:	9802      	ldr	r0, [sp, #8]
    915c:	4b08      	ldr	r3, [pc, #32]	; (9180 <setFrequency+0x120>)
    915e:	4798      	blx	r3
    9160:	7230      	strb	r0, [r6, #8]
    9162:	e7a6      	b.n	90b2 <setFrequency+0x52>
    9164:	00017691 	.word	0x00017691
    9168:	20000cf4 	.word	0x20000cf4
    916c:	0000774d 	.word	0x0000774d
    9170:	20002310 	.word	0x20002310
    9174:	00000211 	.word	0x00000211
    9178:	00000212 	.word	0x00000212
    917c:	0000be05 	.word	0x0000be05
    9180:	00007c45 	.word	0x00007c45

00009184 <setDutyCycle>:
{
    9184:	b570      	push	{r4, r5, r6, lr}
    9186:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    9188:	ac01      	add	r4, sp, #4
    918a:	2204      	movs	r2, #4
    918c:	0020      	movs	r0, r4
    918e:	4b2c      	ldr	r3, [pc, #176]	; (9240 <setDutyCycle+0xbc>)
    9190:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    9192:	78a5      	ldrb	r5, [r4, #2]
    9194:	466b      	mov	r3, sp
    9196:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9198:	2301      	movs	r3, #1
    919a:	466a      	mov	r2, sp
    919c:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    919e:	4669      	mov	r1, sp
    91a0:	2015      	movs	r0, #21
    91a2:	4b28      	ldr	r3, [pc, #160]	; (9244 <setDutyCycle+0xc0>)
    91a4:	4798      	blx	r3
    91a6:	0004      	movs	r4, r0
    91a8:	2808      	cmp	r0, #8
    91aa:	d003      	beq.n	91b4 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    91ac:	240a      	movs	r4, #10
}
    91ae:	0020      	movs	r0, r4
    91b0:	b002      	add	sp, #8
    91b2:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    91b4:	0069      	lsls	r1, r5, #1
    91b6:	1949      	adds	r1, r1, r5
    91b8:	0089      	lsls	r1, r1, #2
    91ba:	4b23      	ldr	r3, [pc, #140]	; (9248 <setDutyCycle+0xc4>)
    91bc:	7a1a      	ldrb	r2, [r3, #8]
    91be:	7a58      	ldrb	r0, [r3, #9]
    91c0:	0200      	lsls	r0, r0, #8
    91c2:	4310      	orrs	r0, r2
    91c4:	7a9a      	ldrb	r2, [r3, #10]
    91c6:	0412      	lsls	r2, r2, #16
    91c8:	4310      	orrs	r0, r2
    91ca:	7ada      	ldrb	r2, [r3, #11]
    91cc:	0612      	lsls	r2, r2, #24
    91ce:	4302      	orrs	r2, r0
    91d0:	1852      	adds	r2, r2, r1
    91d2:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    91d4:	0028      	movs	r0, r5
    91d6:	30d4      	adds	r0, #212	; 0xd4
    91d8:	0040      	lsls	r0, r0, #1
    91da:	aa01      	add	r2, sp, #4
    91dc:	1818      	adds	r0, r3, r0
    91de:	7816      	ldrb	r6, [r2, #0]
    91e0:	7186      	strb	r6, [r0, #6]
    91e2:	7852      	ldrb	r2, [r2, #1]
    91e4:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    91e6:	7b18      	ldrb	r0, [r3, #12]
    91e8:	7b5a      	ldrb	r2, [r3, #13]
    91ea:	0212      	lsls	r2, r2, #8
    91ec:	4302      	orrs	r2, r0
    91ee:	7b98      	ldrb	r0, [r3, #14]
    91f0:	0400      	lsls	r0, r0, #16
    91f2:	4302      	orrs	r2, r0
    91f4:	7bd8      	ldrb	r0, [r3, #15]
    91f6:	0600      	lsls	r0, r0, #24
    91f8:	4310      	orrs	r0, r2
    91fa:	006a      	lsls	r2, r5, #1
    91fc:	1952      	adds	r2, r2, r5
    91fe:	0092      	lsls	r2, r2, #2
    9200:	1812      	adds	r2, r2, r0
    9202:	2000      	movs	r0, #0
    9204:	7210      	strb	r0, [r2, #8]
    9206:	7250      	strb	r0, [r2, #9]
    9208:	7290      	strb	r0, [r2, #10]
    920a:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    920c:	7a1d      	ldrb	r5, [r3, #8]
    920e:	7a5a      	ldrb	r2, [r3, #9]
    9210:	0212      	lsls	r2, r2, #8
    9212:	432a      	orrs	r2, r5
    9214:	7a9d      	ldrb	r5, [r3, #10]
    9216:	042d      	lsls	r5, r5, #16
    9218:	432a      	orrs	r2, r5
    921a:	7add      	ldrb	r5, [r3, #11]
    921c:	062d      	lsls	r5, r5, #24
    921e:	4315      	orrs	r5, r2
    9220:	186d      	adds	r5, r5, r1
    9222:	7aea      	ldrb	r2, [r5, #11]
    9224:	2104      	movs	r1, #4
    9226:	430a      	orrs	r2, r1
    9228:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    922a:	4a08      	ldr	r2, [pc, #32]	; (924c <setDutyCycle+0xc8>)
    922c:	5c9a      	ldrb	r2, [r3, r2]
    922e:	4908      	ldr	r1, [pc, #32]	; (9250 <setDutyCycle+0xcc>)
    9230:	5c58      	ldrb	r0, [r3, r1]
    9232:	0200      	lsls	r0, r0, #8
    9234:	4310      	orrs	r0, r2
    9236:	b2c1      	uxtb	r1, r0
    9238:	0a00      	lsrs	r0, r0, #8
    923a:	4b06      	ldr	r3, [pc, #24]	; (9254 <setDutyCycle+0xd0>)
    923c:	4798      	blx	r3
    923e:	e7b6      	b.n	91ae <setDutyCycle+0x2a>
    9240:	00017691 	.word	0x00017691
    9244:	0000774d 	.word	0x0000774d
    9248:	20002310 	.word	0x20002310
    924c:	00000211 	.word	0x00000211
    9250:	00000212 	.word	0x00000212
    9254:	0000be05 	.word	0x0000be05

00009258 <SearchAvailableChannel2>:
{
    9258:	b5f0      	push	{r4, r5, r6, r7, lr}
    925a:	46de      	mov	lr, fp
    925c:	4657      	mov	r7, sl
    925e:	464e      	mov	r6, r9
    9260:	4645      	mov	r5, r8
    9262:	b5e0      	push	{r5, r6, r7, lr}
    9264:	b087      	sub	sp, #28
    9266:	af00      	add	r7, sp, #0
    9268:	0004      	movs	r4, r0
    926a:	4688      	mov	r8, r1
    926c:	60f9      	str	r1, [r7, #12]
    926e:	0015      	movs	r5, r2
    9270:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    9272:	1dc3      	adds	r3, r0, #7
    9274:	08db      	lsrs	r3, r3, #3
    9276:	00db      	lsls	r3, r3, #3
    9278:	466a      	mov	r2, sp
    927a:	1ad3      	subs	r3, r2, r3
    927c:	469d      	mov	sp, r3
    927e:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    9280:	0002      	movs	r2, r0
    9282:	2100      	movs	r1, #0
    9284:	4668      	mov	r0, sp
    9286:	4b5c      	ldr	r3, [pc, #368]	; (93f8 <SearchAvailableChannel2+0x1a0>)
    9288:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    928a:	232f      	movs	r3, #47	; 0x2f
    928c:	4a5b      	ldr	r2, [pc, #364]	; (93fc <SearchAvailableChannel2+0x1a4>)
    928e:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    9290:	4643      	mov	r3, r8
    9292:	2b00      	cmp	r3, #0
    9294:	d148      	bne.n	9328 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9296:	3320      	adds	r3, #32
    9298:	5cd3      	ldrb	r3, [r2, r3]
    929a:	069b      	lsls	r3, r3, #26
    929c:	d431      	bmi.n	9302 <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    929e:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    92a0:	2c00      	cmp	r4, #0
    92a2:	d100      	bne.n	92a6 <SearchAvailableChannel2+0x4e>
    92a4:	e093      	b.n	93ce <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    92a6:	4b56      	ldr	r3, [pc, #344]	; (9400 <SearchAvailableChannel2+0x1a8>)
    92a8:	4133      	asrs	r3, r6
    92aa:	2201      	movs	r2, #1
    92ac:	401a      	ands	r2, r3
    92ae:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    92b0:	4b52      	ldr	r3, [pc, #328]	; (93fc <SearchAvailableChannel2+0x1a4>)
    92b2:	7b19      	ldrb	r1, [r3, #12]
    92b4:	7b5a      	ldrb	r2, [r3, #13]
    92b6:	0212      	lsls	r2, r2, #8
    92b8:	4311      	orrs	r1, r2
    92ba:	7b9a      	ldrb	r2, [r3, #14]
    92bc:	0412      	lsls	r2, r2, #16
    92be:	430a      	orrs	r2, r1
    92c0:	7bd9      	ldrb	r1, [r3, #15]
    92c2:	0609      	lsls	r1, r1, #24
    92c4:	4311      	orrs	r1, r2
    92c6:	468c      	mov	ip, r1
    92c8:	7a18      	ldrb	r0, [r3, #8]
    92ca:	7a5a      	ldrb	r2, [r3, #9]
    92cc:	0212      	lsls	r2, r2, #8
    92ce:	4302      	orrs	r2, r0
    92d0:	7a98      	ldrb	r0, [r3, #10]
    92d2:	0400      	lsls	r0, r0, #16
    92d4:	4302      	orrs	r2, r0
    92d6:	7ad8      	ldrb	r0, [r3, #11]
    92d8:	0600      	lsls	r0, r0, #24
    92da:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    92dc:	791a      	ldrb	r2, [r3, #4]
    92de:	7959      	ldrb	r1, [r3, #5]
    92e0:	0209      	lsls	r1, r1, #8
    92e2:	4311      	orrs	r1, r2
    92e4:	799a      	ldrb	r2, [r3, #6]
    92e6:	0412      	lsls	r2, r2, #16
    92e8:	4311      	orrs	r1, r2
    92ea:	79da      	ldrb	r2, [r3, #7]
    92ec:	0612      	lsls	r2, r2, #24
    92ee:	430a      	orrs	r2, r1
    92f0:	0006      	movs	r6, r0
    92f2:	3608      	adds	r6, #8
    92f4:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    92f6:	2300      	movs	r3, #0
    92f8:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    92fa:	46aa      	mov	sl, r5
    92fc:	46a9      	mov	r9, r5
    92fe:	0025      	movs	r5, r4
    9300:	e036      	b.n	9370 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    9302:	0011      	movs	r1, r2
    9304:	7d13      	ldrb	r3, [r2, #20]
    9306:	7d52      	ldrb	r2, [r2, #21]
    9308:	0212      	lsls	r2, r2, #8
    930a:	431a      	orrs	r2, r3
    930c:	7d8b      	ldrb	r3, [r1, #22]
    930e:	041b      	lsls	r3, r3, #16
    9310:	431a      	orrs	r2, r3
    9312:	7dcb      	ldrb	r3, [r1, #23]
    9314:	061b      	lsls	r3, r3, #24
    9316:	4313      	orrs	r3, r2
    9318:	7a18      	ldrb	r0, [r3, #8]
    931a:	4b3a      	ldr	r3, [pc, #232]	; (9404 <SearchAvailableChannel2+0x1ac>)
    931c:	4798      	blx	r3
    931e:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    9320:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    9322:	2b00      	cmp	r3, #0
    9324:	d0bb      	beq.n	929e <SearchAvailableChannel2+0x46>
    9326:	e052      	b.n	93ce <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    9328:	4934      	ldr	r1, [pc, #208]	; (93fc <SearchAvailableChannel2+0x1a4>)
    932a:	23dd      	movs	r3, #221	; 0xdd
    932c:	005b      	lsls	r3, r3, #1
    932e:	5ccb      	ldrb	r3, [r1, r3]
    9330:	22bc      	movs	r2, #188	; 0xbc
    9332:	32ff      	adds	r2, #255	; 0xff
    9334:	5c8a      	ldrb	r2, [r1, r2]
    9336:	0212      	lsls	r2, r2, #8
    9338:	431a      	orrs	r2, r3
    933a:	23de      	movs	r3, #222	; 0xde
    933c:	005b      	lsls	r3, r3, #1
    933e:	5ccb      	ldrb	r3, [r1, r3]
    9340:	041b      	lsls	r3, r3, #16
    9342:	431a      	orrs	r2, r3
    9344:	23be      	movs	r3, #190	; 0xbe
    9346:	33ff      	adds	r3, #255	; 0xff
    9348:	5ccb      	ldrb	r3, [r1, r3]
    934a:	061b      	lsls	r3, r3, #24
    934c:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    934e:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    9350:	2b00      	cmp	r3, #0
    9352:	d0a4      	beq.n	929e <SearchAvailableChannel2+0x46>
    9354:	e03b      	b.n	93ce <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    9356:	693c      	ldr	r4, [r7, #16]
    9358:	6979      	ldr	r1, [r7, #20]
    935a:	5463      	strb	r3, [r4, r1]
					num++;
    935c:	3101      	adds	r1, #1
    935e:	b2c9      	uxtb	r1, r1
    9360:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    9362:	3301      	adds	r3, #1
    9364:	b2db      	uxtb	r3, r3
    9366:	3202      	adds	r2, #2
    9368:	360c      	adds	r6, #12
    936a:	300c      	adds	r0, #12
    936c:	429d      	cmp	r5, r3
    936e:	d02a      	beq.n	93c6 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    9370:	7811      	ldrb	r1, [r2, #0]
    9372:	2900      	cmp	r1, #0
    9374:	d0f5      	beq.n	9362 <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    9376:	7851      	ldrb	r1, [r2, #1]
    9378:	0709      	lsls	r1, r1, #28
    937a:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    937c:	4589      	cmp	r9, r1
    937e:	dbf0      	blt.n	9362 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    9380:	7851      	ldrb	r1, [r2, #1]
    9382:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    9384:	458a      	cmp	sl, r1
    9386:	dcec      	bgt.n	9362 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    9388:	4641      	mov	r1, r8
    938a:	2900      	cmp	r1, #0
    938c:	d014      	beq.n	93b8 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    938e:	7834      	ldrb	r4, [r6, #0]
    9390:	0061      	lsls	r1, r4, #1
    9392:	1909      	adds	r1, r1, r4
    9394:	0089      	lsls	r1, r1, #2
    9396:	4461      	add	r1, ip
    9398:	7a0c      	ldrb	r4, [r1, #8]
    939a:	46a3      	mov	fp, r4
    939c:	60b9      	str	r1, [r7, #8]
    939e:	7a4c      	ldrb	r4, [r1, #9]
    93a0:	0224      	lsls	r4, r4, #8
    93a2:	4659      	mov	r1, fp
    93a4:	430c      	orrs	r4, r1
    93a6:	68b9      	ldr	r1, [r7, #8]
    93a8:	7a89      	ldrb	r1, [r1, #10]
    93aa:	0409      	lsls	r1, r1, #16
    93ac:	430c      	orrs	r4, r1
    93ae:	68b9      	ldr	r1, [r7, #8]
    93b0:	7ac9      	ldrb	r1, [r1, #11]
    93b2:	0609      	lsls	r1, r1, #24
    93b4:	4321      	orrs	r1, r4
    93b6:	d1d4      	bne.n	9362 <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    93b8:	68f9      	ldr	r1, [r7, #12]
    93ba:	2900      	cmp	r1, #0
    93bc:	d1cb      	bne.n	9356 <SearchAvailableChannel2+0xfe>
    93be:	7801      	ldrb	r1, [r0, #0]
    93c0:	2900      	cmp	r1, #0
    93c2:	d0ce      	beq.n	9362 <SearchAvailableChannel2+0x10a>
    93c4:	e7c7      	b.n	9356 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    93c6:	2010      	movs	r0, #16
	if(0 != num)
    93c8:	697c      	ldr	r4, [r7, #20]
    93ca:	2c00      	cmp	r4, #0
    93cc:	d107      	bne.n	93de <SearchAvailableChannel2+0x186>
}
    93ce:	46bd      	mov	sp, r7
    93d0:	b007      	add	sp, #28
    93d2:	bc3c      	pop	{r2, r3, r4, r5}
    93d4:	4690      	mov	r8, r2
    93d6:	4699      	mov	r9, r3
    93d8:	46a2      	mov	sl, r4
    93da:	46ab      	mov	fp, r5
    93dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    93de:	4b0a      	ldr	r3, [pc, #40]	; (9408 <SearchAvailableChannel2+0x1b0>)
    93e0:	4798      	blx	r3
    93e2:	0021      	movs	r1, r4
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <SearchAvailableChannel2+0x1b4>)
    93e6:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    93e8:	23ff      	movs	r3, #255	; 0xff
    93ea:	4019      	ands	r1, r3
    93ec:	693b      	ldr	r3, [r7, #16]
    93ee:	5c5b      	ldrb	r3, [r3, r1]
    93f0:	687a      	ldr	r2, [r7, #4]
    93f2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    93f4:	2008      	movs	r0, #8
    93f6:	e7ea      	b.n	93ce <SearchAvailableChannel2+0x176>
    93f8:	00017715 	.word	0x00017715
    93fc:	20002310 	.word	0x20002310
    9400:	00007fe3 	.word	0x00007fe3
    9404:	0000cccd 	.word	0x0000cccd
    9408:	00017895 	.word	0x00017895
    940c:	000147e9 	.word	0x000147e9

00009410 <LORAREG_GetAttr_FreeChannel2>:
{
    9410:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    9412:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    9414:	202a      	movs	r0, #42	; 0x2a
    9416:	4d07      	ldr	r5, [pc, #28]	; (9434 <LORAREG_GetAttr_FreeChannel2+0x24>)
    9418:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    941a:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    941c:	42ac      	cmp	r4, r5
    941e:	dd00      	ble.n	9422 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    9420:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    9422:	7888      	ldrb	r0, [r1, #2]
    9424:	7809      	ldrb	r1, [r1, #0]
    9426:	0013      	movs	r3, r2
    9428:	0002      	movs	r2, r0
    942a:	0020      	movs	r0, r4
    942c:	4c02      	ldr	r4, [pc, #8]	; (9438 <LORAREG_GetAttr_FreeChannel2+0x28>)
    942e:	47a0      	blx	r4
	return result;
    9430:	e7f6      	b.n	9420 <LORAREG_GetAttr_FreeChannel2+0x10>
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	20002310 	.word	0x20002310
    9438:	00009259 	.word	0x00009259

0000943c <LORAREG_GetAttr_NewTxChConfigT2>:
{
    943c:	b5f0      	push	{r4, r5, r6, r7, lr}
    943e:	b083      	sub	sp, #12
    9440:	0014      	movs	r4, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9442:	2203      	movs	r2, #3
    9444:	a801      	add	r0, sp, #4
    9446:	4b34      	ldr	r3, [pc, #208]	; (9518 <LORAREG_GetAttr_NewTxChConfigT2+0xdc>)
    9448:	4798      	blx	r3
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    944a:	466b      	mov	r3, sp
    944c:	1d99      	adds	r1, r3, #6
    944e:	200f      	movs	r0, #15
    9450:	4b32      	ldr	r3, [pc, #200]	; (951c <LORAREG_GetAttr_NewTxChConfigT2+0xe0>)
    9452:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    9454:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9456:	2808      	cmp	r0, #8
    9458:	d002      	beq.n	9460 <LORAREG_GetAttr_NewTxChConfigT2+0x24>
}
    945a:	0018      	movs	r0, r3
    945c:	b003      	add	sp, #12
    945e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9460:	466b      	mov	r3, sp
    9462:	1d59      	adds	r1, r3, #5
    9464:	3015      	adds	r0, #21
    9466:	4b2e      	ldr	r3, [pc, #184]	; (9520 <LORAREG_GetAttr_NewTxChConfigT2+0xe4>)
    9468:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    946a:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    946c:	2808      	cmp	r0, #8
    946e:	d1f4      	bne.n	945a <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    9470:	ab01      	add	r3, sp, #4
    9472:	7819      	ldrb	r1, [r3, #0]
    9474:	785e      	ldrb	r6, [r3, #1]
    9476:	789d      	ldrb	r5, [r3, #2]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    9478:	232f      	movs	r3, #47	; 0x2f
    947a:	4a2a      	ldr	r2, [pc, #168]	; (9524 <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    947c:	5cd2      	ldrb	r2, [r2, r3]
    947e:	4b2a      	ldr	r3, [pc, #168]	; (9528 <LORAREG_GetAttr_NewTxChConfigT2+0xec>)
    9480:	4113      	asrs	r3, r2
    9482:	07db      	lsls	r3, r3, #31
    9484:	d502      	bpl.n	948c <LORAREG_GetAttr_NewTxChConfigT2+0x50>
    9486:	2900      	cmp	r1, #0
    9488:	d100      	bne.n	948c <LORAREG_GetAttr_NewTxChConfigT2+0x50>
		currDr = DR2;
    948a:	2502      	movs	r5, #2
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    948c:	232a      	movs	r3, #42	; 0x2a
    948e:	4a25      	ldr	r2, [pc, #148]	; (9524 <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    9490:	5cd0      	ldrb	r0, [r2, r3]
    9492:	466b      	mov	r3, sp
    9494:	3303      	adds	r3, #3
    9496:	002a      	movs	r2, r5
    9498:	4f24      	ldr	r7, [pc, #144]	; (952c <LORAREG_GetAttr_NewTxChConfigT2+0xf0>)
    949a:	47b8      	blx	r7
    949c:	0003      	movs	r3, r0
	if (result == LORAWAN_SUCCESS)
    949e:	2808      	cmp	r0, #8
    94a0:	d1db      	bne.n	945a <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
		RegParams.lastUsedChannelIndex = channelIndex;
    94a2:	466a      	mov	r2, sp
    94a4:	78d7      	ldrb	r7, [r2, #3]
    94a6:	4a1f      	ldr	r2, [pc, #124]	; (9524 <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    94a8:	2130      	movs	r1, #48	; 0x30
    94aa:	5457      	strb	r7, [r2, r1]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    94ac:	7a10      	ldrb	r0, [r2, #8]
    94ae:	7a51      	ldrb	r1, [r2, #9]
    94b0:	0209      	lsls	r1, r1, #8
    94b2:	4301      	orrs	r1, r0
    94b4:	7a90      	ldrb	r0, [r2, #10]
    94b6:	0400      	lsls	r0, r0, #16
    94b8:	4301      	orrs	r1, r0
    94ba:	7ad0      	ldrb	r0, [r2, #11]
    94bc:	0600      	lsls	r0, r0, #24
    94be:	4308      	orrs	r0, r1
    94c0:	0079      	lsls	r1, r7, #1
    94c2:	19c9      	adds	r1, r1, r7
    94c4:	0089      	lsls	r1, r1, #2
    94c6:	5c0f      	ldrb	r7, [r1, r0]
    94c8:	1809      	adds	r1, r1, r0
    94ca:	7848      	ldrb	r0, [r1, #1]
    94cc:	0200      	lsls	r0, r0, #8
    94ce:	4307      	orrs	r7, r0
    94d0:	7888      	ldrb	r0, [r1, #2]
    94d2:	0400      	lsls	r0, r0, #16
    94d4:	4338      	orrs	r0, r7
    94d6:	78c9      	ldrb	r1, [r1, #3]
    94d8:	0609      	lsls	r1, r1, #24
    94da:	4301      	orrs	r1, r0
    94dc:	6021      	str	r1, [r4, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    94de:	0076      	lsls	r6, r6, #1
    94e0:	2128      	movs	r1, #40	; 0x28
    94e2:	5c51      	ldrb	r1, [r2, r1]
    94e4:	1b8e      	subs	r6, r1, r6
    94e6:	7226      	strb	r6, [r4, #8]
		radioConfig->freq_hop_period = DISABLED ;
    94e8:	2100      	movs	r1, #0
    94ea:	80a1      	strh	r1, [r4, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    94ec:	7810      	ldrb	r0, [r2, #0]
    94ee:	7851      	ldrb	r1, [r2, #1]
    94f0:	0209      	lsls	r1, r1, #8
    94f2:	4308      	orrs	r0, r1
    94f4:	7891      	ldrb	r1, [r2, #2]
    94f6:	0409      	lsls	r1, r1, #16
    94f8:	4301      	orrs	r1, r0
    94fa:	78d2      	ldrb	r2, [r2, #3]
    94fc:	0612      	lsls	r2, r2, #24
    94fe:	430a      	orrs	r2, r1
    9500:	00ed      	lsls	r5, r5, #3
    9502:	1955      	adds	r5, r2, r5
    9504:	79ea      	ldrb	r2, [r5, #7]
    9506:	7262      	strb	r2, [r4, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    9508:	79aa      	ldrb	r2, [r5, #6]
    950a:	72a2      	strb	r2, [r4, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    950c:	796a      	ldrb	r2, [r5, #5]
    950e:	72e2      	strb	r2, [r4, #11]
		radioConfig->ecrConfig.override = false;
    9510:	2200      	movs	r2, #0
    9512:	71e2      	strb	r2, [r4, #7]
    9514:	e7a1      	b.n	945a <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
    9516:	46c0      	nop			; (mov r8, r8)
    9518:	00017691 	.word	0x00017691
    951c:	00007949 	.word	0x00007949
    9520:	00007869 	.word	0x00007869
    9524:	20002310 	.word	0x20002310
    9528:	00007fe0 	.word	0x00007fe0
    952c:	00009259 	.word	0x00009259

00009530 <setJoinBackoffCntl>:
{   
    9530:	b500      	push	{lr}
    9532:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    9534:	780b      	ldrb	r3, [r1, #0]
    9536:	466a      	mov	r2, sp
    9538:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    953a:	2b00      	cmp	r3, #0
    953c:	d145      	bne.n	95ca <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    953e:	3320      	adds	r3, #32
    9540:	4a26      	ldr	r2, [pc, #152]	; (95dc <setJoinBackoffCntl+0xac>)
    9542:	5cd3      	ldrb	r3, [r2, r3]
    9544:	069a      	lsls	r2, r3, #26
    9546:	d546      	bpl.n	95d6 <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    9548:	4924      	ldr	r1, [pc, #144]	; (95dc <setJoinBackoffCntl+0xac>)
    954a:	2220      	movs	r2, #32
    954c:	4393      	bics	r3, r2
    954e:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    9550:	7e0b      	ldrb	r3, [r1, #24]
    9552:	7e4a      	ldrb	r2, [r1, #25]
    9554:	0212      	lsls	r2, r2, #8
    9556:	431a      	orrs	r2, r3
    9558:	7e8b      	ldrb	r3, [r1, #26]
    955a:	041b      	lsls	r3, r3, #16
    955c:	431a      	orrs	r2, r3
    955e:	7ecb      	ldrb	r3, [r1, #27]
    9560:	061b      	lsls	r3, r3, #24
    9562:	4313      	orrs	r3, r2
    9564:	7818      	ldrb	r0, [r3, #0]
    9566:	4b1e      	ldr	r3, [pc, #120]	; (95e0 <setJoinBackoffCntl+0xb0>)
    9568:	4798      	blx	r3
    956a:	2800      	cmp	r0, #0
    956c:	d11e      	bne.n	95ac <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    956e:	491b      	ldr	r1, [pc, #108]	; (95dc <setJoinBackoffCntl+0xac>)
    9570:	7d0b      	ldrb	r3, [r1, #20]
    9572:	7d4a      	ldrb	r2, [r1, #21]
    9574:	0212      	lsls	r2, r2, #8
    9576:	431a      	orrs	r2, r3
    9578:	7d8b      	ldrb	r3, [r1, #22]
    957a:	041b      	lsls	r3, r3, #16
    957c:	431a      	orrs	r2, r3
    957e:	7dcb      	ldrb	r3, [r1, #23]
    9580:	061b      	lsls	r3, r3, #24
    9582:	4313      	orrs	r3, r2
    9584:	7a18      	ldrb	r0, [r3, #8]
    9586:	4b16      	ldr	r3, [pc, #88]	; (95e0 <setJoinBackoffCntl+0xb0>)
    9588:	4798      	blx	r3
    958a:	2800      	cmp	r0, #0
    958c:	d023      	beq.n	95d6 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    958e:	4913      	ldr	r1, [pc, #76]	; (95dc <setJoinBackoffCntl+0xac>)
    9590:	7d0b      	ldrb	r3, [r1, #20]
    9592:	7d4a      	ldrb	r2, [r1, #21]
    9594:	0212      	lsls	r2, r2, #8
    9596:	431a      	orrs	r2, r3
    9598:	7d8b      	ldrb	r3, [r1, #22]
    959a:	041b      	lsls	r3, r3, #16
    959c:	431a      	orrs	r2, r3
    959e:	7dcb      	ldrb	r3, [r1, #23]
    95a0:	061b      	lsls	r3, r3, #24
    95a2:	4313      	orrs	r3, r2
    95a4:	7a18      	ldrb	r0, [r3, #8]
    95a6:	4b0f      	ldr	r3, [pc, #60]	; (95e4 <setJoinBackoffCntl+0xb4>)
    95a8:	4798      	blx	r3
    95aa:	e014      	b.n	95d6 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    95ac:	490b      	ldr	r1, [pc, #44]	; (95dc <setJoinBackoffCntl+0xac>)
    95ae:	7e0b      	ldrb	r3, [r1, #24]
    95b0:	7e4a      	ldrb	r2, [r1, #25]
    95b2:	0212      	lsls	r2, r2, #8
    95b4:	431a      	orrs	r2, r3
    95b6:	7e8b      	ldrb	r3, [r1, #26]
    95b8:	041b      	lsls	r3, r3, #16
    95ba:	431a      	orrs	r2, r3
    95bc:	7ecb      	ldrb	r3, [r1, #27]
    95be:	061b      	lsls	r3, r3, #24
    95c0:	4313      	orrs	r3, r2
    95c2:	7818      	ldrb	r0, [r3, #0]
    95c4:	4b07      	ldr	r3, [pc, #28]	; (95e4 <setJoinBackoffCntl+0xb4>)
    95c6:	4798      	blx	r3
    95c8:	e7d1      	b.n	956e <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    95ca:	4904      	ldr	r1, [pc, #16]	; (95dc <setJoinBackoffCntl+0xac>)
    95cc:	2220      	movs	r2, #32
    95ce:	5c8b      	ldrb	r3, [r1, r2]
    95d0:	2020      	movs	r0, #32
    95d2:	4303      	orrs	r3, r0
    95d4:	548b      	strb	r3, [r1, r2]
}
    95d6:	2008      	movs	r0, #8
    95d8:	b003      	add	sp, #12
    95da:	bd00      	pop	{pc}
    95dc:	20002310 	.word	0x20002310
    95e0:	0000cccd 	.word	0x0000cccd
    95e4:	0000ce4d 	.word	0x0000ce4d

000095e8 <setJoinBackOffTimer>:
{
    95e8:	b510      	push	{r4, lr}
    95ea:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    95ec:	780b      	ldrb	r3, [r1, #0]
    95ee:	220f      	movs	r2, #15
    95f0:	446a      	add	r2, sp
    95f2:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    95f4:	2b00      	cmp	r3, #0
    95f6:	d113      	bne.n	9620 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    95f8:	4c13      	ldr	r4, [pc, #76]	; (9648 <setJoinBackOffTimer+0x60>)
    95fa:	7e23      	ldrb	r3, [r4, #24]
    95fc:	7e62      	ldrb	r2, [r4, #25]
    95fe:	0212      	lsls	r2, r2, #8
    9600:	431a      	orrs	r2, r3
    9602:	7ea3      	ldrb	r3, [r4, #26]
    9604:	041b      	lsls	r3, r3, #16
    9606:	431a      	orrs	r2, r3
    9608:	7ee3      	ldrb	r3, [r4, #27]
    960a:	061b      	lsls	r3, r3, #24
    960c:	4313      	orrs	r3, r2
    960e:	7818      	ldrb	r0, [r3, #0]
    9610:	4b0e      	ldr	r3, [pc, #56]	; (964c <setJoinBackOffTimer+0x64>)
    9612:	4798      	blx	r3
		RegParams.joinbccount = 0;
    9614:	2200      	movs	r2, #0
    9616:	2343      	movs	r3, #67	; 0x43
    9618:	54e2      	strb	r2, [r4, r3]
}
    961a:	2008      	movs	r0, #8
    961c:	b004      	add	sp, #16
    961e:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    9620:	4909      	ldr	r1, [pc, #36]	; (9648 <setJoinBackOffTimer+0x60>)
    9622:	7e0b      	ldrb	r3, [r1, #24]
    9624:	7e4a      	ldrb	r2, [r1, #25]
    9626:	0212      	lsls	r2, r2, #8
    9628:	431a      	orrs	r2, r3
    962a:	7e8b      	ldrb	r3, [r1, #26]
    962c:	041b      	lsls	r3, r3, #16
    962e:	431a      	orrs	r2, r3
    9630:	7ecb      	ldrb	r3, [r1, #27]
    9632:	061b      	lsls	r3, r3, #24
    9634:	4313      	orrs	r3, r2
    9636:	7818      	ldrb	r0, [r3, #0]
    9638:	2300      	movs	r3, #0
    963a:	9300      	str	r3, [sp, #0]
    963c:	4b04      	ldr	r3, [pc, #16]	; (9650 <setJoinBackOffTimer+0x68>)
    963e:	2200      	movs	r2, #0
    9640:	4904      	ldr	r1, [pc, #16]	; (9654 <setJoinBackOffTimer+0x6c>)
    9642:	4c05      	ldr	r4, [pc, #20]	; (9658 <setJoinBackOffTimer+0x70>)
    9644:	47a0      	blx	r4
    9646:	e7e8      	b.n	961a <setJoinBackOffTimer+0x32>
    9648:	20002310 	.word	0x20002310
    964c:	0000ce4d 	.word	0x0000ce4d
    9650:	0000a271 	.word	0x0000a271
    9654:	6b49d200 	.word	0x6b49d200
    9658:	0000cb35 	.word	0x0000cb35

0000965c <setJoinDutyCycleTimer>:
{
    965c:	b530      	push	{r4, r5, lr}
    965e:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    9660:	ac02      	add	r4, sp, #8
    9662:	2208      	movs	r2, #8
    9664:	0020      	movs	r0, r4
    9666:	4b93      	ldr	r3, [pc, #588]	; (98b4 <setJoinDutyCycleTimer+0x258>)
    9668:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    966a:	7923      	ldrb	r3, [r4, #4]
    966c:	2b00      	cmp	r3, #0
    966e:	d100      	bne.n	9672 <setJoinDutyCycleTimer+0x16>
    9670:	e0f8      	b.n	9864 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    9672:	2343      	movs	r3, #67	; 0x43
    9674:	4a90      	ldr	r2, [pc, #576]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    9676:	5cd3      	ldrb	r3, [r2, r3]
    9678:	2b01      	cmp	r3, #1
    967a:	d800      	bhi.n	967e <setJoinDutyCycleTimer+0x22>
    967c:	e081      	b.n	9782 <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    967e:	2b13      	cmp	r3, #19
    9680:	d900      	bls.n	9684 <setJoinDutyCycleTimer+0x28>
    9682:	e08d      	b.n	97a0 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    9684:	4b8d      	ldr	r3, [pc, #564]	; (98bc <setJoinDutyCycleTimer+0x260>)
    9686:	9a02      	ldr	r2, [sp, #8]
    9688:	4353      	muls	r3, r2
    968a:	4a8b      	ldr	r2, [pc, #556]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    968c:	323f      	adds	r2, #63	; 0x3f
    968e:	7013      	strb	r3, [r2, #0]
    9690:	0a19      	lsrs	r1, r3, #8
    9692:	7051      	strb	r1, [r2, #1]
    9694:	0c19      	lsrs	r1, r3, #16
    9696:	7091      	strb	r1, [r2, #2]
    9698:	0e1b      	lsrs	r3, r3, #24
    969a:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    969c:	4986      	ldr	r1, [pc, #536]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    969e:	7d0b      	ldrb	r3, [r1, #20]
    96a0:	7d4a      	ldrb	r2, [r1, #21]
    96a2:	0212      	lsls	r2, r2, #8
    96a4:	431a      	orrs	r2, r3
    96a6:	7d8b      	ldrb	r3, [r1, #22]
    96a8:	041b      	lsls	r3, r3, #16
    96aa:	431a      	orrs	r2, r3
    96ac:	7dcb      	ldrb	r3, [r1, #23]
    96ae:	061b      	lsls	r3, r3, #24
    96b0:	4313      	orrs	r3, r2
    96b2:	7a18      	ldrb	r0, [r3, #8]
    96b4:	4b82      	ldr	r3, [pc, #520]	; (98c0 <setJoinDutyCycleTimer+0x264>)
    96b6:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    96b8:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    96ba:	2800      	cmp	r0, #0
    96bc:	d17d      	bne.n	97ba <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    96be:	4b7e      	ldr	r3, [pc, #504]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    96c0:	213f      	movs	r1, #63	; 0x3f
    96c2:	5c59      	ldrb	r1, [r3, r1]
    96c4:	2040      	movs	r0, #64	; 0x40
    96c6:	5c18      	ldrb	r0, [r3, r0]
    96c8:	0200      	lsls	r0, r0, #8
    96ca:	4308      	orrs	r0, r1
    96cc:	2141      	movs	r1, #65	; 0x41
    96ce:	5c59      	ldrb	r1, [r3, r1]
    96d0:	0409      	lsls	r1, r1, #16
    96d2:	4308      	orrs	r0, r1
    96d4:	2142      	movs	r1, #66	; 0x42
    96d6:	5c59      	ldrb	r1, [r3, r1]
    96d8:	0609      	lsls	r1, r1, #24
    96da:	4301      	orrs	r1, r0
    96dc:	d100      	bne.n	96e0 <setJoinDutyCycleTimer+0x84>
    96de:	e0e5      	b.n	98ac <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    96e0:	428c      	cmp	r4, r1
    96e2:	d300      	bcc.n	96e6 <setJoinDutyCycleTimer+0x8a>
    96e4:	e0b6      	b.n	9854 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    96e6:	1b09      	subs	r1, r1, r4
    96e8:	333f      	adds	r3, #63	; 0x3f
    96ea:	7019      	strb	r1, [r3, #0]
    96ec:	0a0a      	lsrs	r2, r1, #8
    96ee:	705a      	strb	r2, [r3, #1]
    96f0:	0c0a      	lsrs	r2, r1, #16
    96f2:	709a      	strb	r2, [r3, #2]
    96f4:	0e0a      	lsrs	r2, r1, #24
    96f6:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    96f8:	4b72      	ldr	r3, [pc, #456]	; (98c4 <setJoinDutyCycleTimer+0x268>)
    96fa:	4299      	cmp	r1, r3
    96fc:	d800      	bhi.n	9700 <setJoinDutyCycleTimer+0xa4>
    96fe:	e093      	b.n	9828 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    9700:	4c6d      	ldr	r4, [pc, #436]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    9702:	7d23      	ldrb	r3, [r4, #20]
    9704:	7d62      	ldrb	r2, [r4, #21]
    9706:	0212      	lsls	r2, r2, #8
    9708:	431a      	orrs	r2, r3
    970a:	7da3      	ldrb	r3, [r4, #22]
    970c:	041b      	lsls	r3, r3, #16
    970e:	431a      	orrs	r2, r3
    9710:	7de3      	ldrb	r3, [r4, #23]
    9712:	061b      	lsls	r3, r3, #24
    9714:	4313      	orrs	r3, r2
    9716:	4a6c      	ldr	r2, [pc, #432]	; (98c8 <setJoinDutyCycleTimer+0x26c>)
    9718:	4694      	mov	ip, r2
    971a:	4461      	add	r1, ip
    971c:	7119      	strb	r1, [r3, #4]
    971e:	0a0a      	lsrs	r2, r1, #8
    9720:	715a      	strb	r2, [r3, #5]
    9722:	0c0a      	lsrs	r2, r1, #16
    9724:	719a      	strb	r2, [r3, #6]
    9726:	0e09      	lsrs	r1, r1, #24
    9728:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    972a:	7d23      	ldrb	r3, [r4, #20]
    972c:	7d62      	ldrb	r2, [r4, #21]
    972e:	0212      	lsls	r2, r2, #8
    9730:	431a      	orrs	r2, r3
    9732:	7da3      	ldrb	r3, [r4, #22]
    9734:	041b      	lsls	r3, r3, #16
    9736:	431a      	orrs	r2, r3
    9738:	7de3      	ldrb	r3, [r4, #23]
    973a:	061b      	lsls	r3, r3, #24
    973c:	4313      	orrs	r3, r2
    973e:	7a18      	ldrb	r0, [r3, #8]
    9740:	2300      	movs	r3, #0
    9742:	9300      	str	r3, [sp, #0]
    9744:	4b61      	ldr	r3, [pc, #388]	; (98cc <setJoinDutyCycleTimer+0x270>)
    9746:	2200      	movs	r2, #0
    9748:	4961      	ldr	r1, [pc, #388]	; (98d0 <setJoinDutyCycleTimer+0x274>)
    974a:	4d62      	ldr	r5, [pc, #392]	; (98d4 <setJoinDutyCycleTimer+0x278>)
    974c:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    974e:	233f      	movs	r3, #63	; 0x3f
    9750:	5ce3      	ldrb	r3, [r4, r3]
    9752:	2240      	movs	r2, #64	; 0x40
    9754:	5ca2      	ldrb	r2, [r4, r2]
    9756:	0212      	lsls	r2, r2, #8
    9758:	431a      	orrs	r2, r3
    975a:	2341      	movs	r3, #65	; 0x41
    975c:	5ce3      	ldrb	r3, [r4, r3]
    975e:	041b      	lsls	r3, r3, #16
    9760:	431a      	orrs	r2, r3
    9762:	2342      	movs	r3, #66	; 0x42
    9764:	5ce3      	ldrb	r3, [r4, r3]
    9766:	061b      	lsls	r3, r3, #24
    9768:	4313      	orrs	r3, r2
    976a:	4a57      	ldr	r2, [pc, #348]	; (98c8 <setJoinDutyCycleTimer+0x26c>)
    976c:	4694      	mov	ip, r2
    976e:	4463      	add	r3, ip
    9770:	343f      	adds	r4, #63	; 0x3f
    9772:	7023      	strb	r3, [r4, #0]
    9774:	0a1a      	lsrs	r2, r3, #8
    9776:	7062      	strb	r2, [r4, #1]
    9778:	0c1a      	lsrs	r2, r3, #16
    977a:	70a2      	strb	r2, [r4, #2]
    977c:	0e1b      	lsrs	r3, r3, #24
    977e:	70e3      	strb	r3, [r4, #3]
    9780:	e094      	b.n	98ac <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    9782:	9a02      	ldr	r2, [sp, #8]
    9784:	0053      	lsls	r3, r2, #1
    9786:	189b      	adds	r3, r3, r2
    9788:	015a      	lsls	r2, r3, #5
    978a:	189b      	adds	r3, r3, r2
    978c:	4a4a      	ldr	r2, [pc, #296]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    978e:	323f      	adds	r2, #63	; 0x3f
    9790:	7013      	strb	r3, [r2, #0]
    9792:	0a19      	lsrs	r1, r3, #8
    9794:	7051      	strb	r1, [r2, #1]
    9796:	0c19      	lsrs	r1, r3, #16
    9798:	7091      	strb	r1, [r2, #2]
    979a:	0e1b      	lsrs	r3, r3, #24
    979c:	70d3      	strb	r3, [r2, #3]
    979e:	e77d      	b.n	969c <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    97a0:	4b4d      	ldr	r3, [pc, #308]	; (98d8 <setJoinDutyCycleTimer+0x27c>)
    97a2:	9a02      	ldr	r2, [sp, #8]
    97a4:	4353      	muls	r3, r2
    97a6:	4a44      	ldr	r2, [pc, #272]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    97a8:	323f      	adds	r2, #63	; 0x3f
    97aa:	7013      	strb	r3, [r2, #0]
    97ac:	0a19      	lsrs	r1, r3, #8
    97ae:	7051      	strb	r1, [r2, #1]
    97b0:	0c19      	lsrs	r1, r3, #16
    97b2:	7091      	strb	r1, [r2, #2]
    97b4:	0e1b      	lsrs	r3, r3, #24
    97b6:	70d3      	strb	r3, [r2, #3]
    97b8:	e770      	b.n	969c <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    97ba:	4c3f      	ldr	r4, [pc, #252]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    97bc:	7d23      	ldrb	r3, [r4, #20]
    97be:	7d62      	ldrb	r2, [r4, #21]
    97c0:	0212      	lsls	r2, r2, #8
    97c2:	431a      	orrs	r2, r3
    97c4:	7da3      	ldrb	r3, [r4, #22]
    97c6:	041b      	lsls	r3, r3, #16
    97c8:	431a      	orrs	r2, r3
    97ca:	7de3      	ldrb	r3, [r4, #23]
    97cc:	061b      	lsls	r3, r3, #24
    97ce:	4313      	orrs	r3, r2
    97d0:	7a18      	ldrb	r0, [r3, #8]
    97d2:	4b42      	ldr	r3, [pc, #264]	; (98dc <setJoinDutyCycleTimer+0x280>)
    97d4:	4798      	blx	r3
    97d6:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    97d8:	7d23      	ldrb	r3, [r4, #20]
    97da:	7d62      	ldrb	r2, [r4, #21]
    97dc:	0212      	lsls	r2, r2, #8
    97de:	431a      	orrs	r2, r3
    97e0:	7da3      	ldrb	r3, [r4, #22]
    97e2:	041b      	lsls	r3, r3, #16
    97e4:	431a      	orrs	r2, r3
    97e6:	7de3      	ldrb	r3, [r4, #23]
    97e8:	061b      	lsls	r3, r3, #24
    97ea:	4313      	orrs	r3, r2
    97ec:	7a18      	ldrb	r0, [r3, #8]
    97ee:	4b3c      	ldr	r3, [pc, #240]	; (98e0 <setJoinDutyCycleTimer+0x284>)
    97f0:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    97f2:	7d23      	ldrb	r3, [r4, #20]
    97f4:	7d62      	ldrb	r2, [r4, #21]
    97f6:	0212      	lsls	r2, r2, #8
    97f8:	431a      	orrs	r2, r3
    97fa:	7da3      	ldrb	r3, [r4, #22]
    97fc:	041b      	lsls	r3, r3, #16
    97fe:	431a      	orrs	r2, r3
    9800:	7de3      	ldrb	r3, [r4, #23]
    9802:	061b      	lsls	r3, r3, #24
    9804:	4313      	orrs	r3, r2
    9806:	781a      	ldrb	r2, [r3, #0]
    9808:	785c      	ldrb	r4, [r3, #1]
    980a:	0224      	lsls	r4, r4, #8
    980c:	4322      	orrs	r2, r4
    980e:	789c      	ldrb	r4, [r3, #2]
    9810:	0424      	lsls	r4, r4, #16
    9812:	4314      	orrs	r4, r2
    9814:	78da      	ldrb	r2, [r3, #3]
    9816:	0612      	lsls	r2, r2, #24
    9818:	4314      	orrs	r4, r2
    981a:	21fa      	movs	r1, #250	; 0xfa
    981c:	0089      	lsls	r1, r1, #2
    981e:	0028      	movs	r0, r5
    9820:	4b30      	ldr	r3, [pc, #192]	; (98e4 <setJoinDutyCycleTimer+0x288>)
    9822:	4798      	blx	r3
    9824:	1a24      	subs	r4, r4, r0
    9826:	e74a      	b.n	96be <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    9828:	20fa      	movs	r0, #250	; 0xfa
    982a:	0080      	lsls	r0, r0, #2
    982c:	4341      	muls	r1, r0
    982e:	4c22      	ldr	r4, [pc, #136]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    9830:	7d23      	ldrb	r3, [r4, #20]
    9832:	7d62      	ldrb	r2, [r4, #21]
    9834:	0212      	lsls	r2, r2, #8
    9836:	431a      	orrs	r2, r3
    9838:	7da3      	ldrb	r3, [r4, #22]
    983a:	041b      	lsls	r3, r3, #16
    983c:	431a      	orrs	r2, r3
    983e:	7de3      	ldrb	r3, [r4, #23]
    9840:	061b      	lsls	r3, r3, #24
    9842:	4313      	orrs	r3, r2
    9844:	7a18      	ldrb	r0, [r3, #8]
    9846:	2300      	movs	r3, #0
    9848:	9300      	str	r3, [sp, #0]
    984a:	4b20      	ldr	r3, [pc, #128]	; (98cc <setJoinDutyCycleTimer+0x270>)
    984c:	2200      	movs	r2, #0
    984e:	4c21      	ldr	r4, [pc, #132]	; (98d4 <setJoinDutyCycleTimer+0x278>)
    9850:	47a0      	blx	r4
    9852:	e02b      	b.n	98ac <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    9854:	4b18      	ldr	r3, [pc, #96]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    9856:	333f      	adds	r3, #63	; 0x3f
    9858:	2200      	movs	r2, #0
    985a:	701a      	strb	r2, [r3, #0]
    985c:	705a      	strb	r2, [r3, #1]
    985e:	709a      	strb	r2, [r3, #2]
    9860:	70da      	strb	r2, [r3, #3]
    9862:	e023      	b.n	98ac <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    9864:	4c14      	ldr	r4, [pc, #80]	; (98b8 <setJoinDutyCycleTimer+0x25c>)
    9866:	7d23      	ldrb	r3, [r4, #20]
    9868:	7d62      	ldrb	r2, [r4, #21]
    986a:	0212      	lsls	r2, r2, #8
    986c:	431a      	orrs	r2, r3
    986e:	7da3      	ldrb	r3, [r4, #22]
    9870:	041b      	lsls	r3, r3, #16
    9872:	431a      	orrs	r2, r3
    9874:	7de3      	ldrb	r3, [r4, #23]
    9876:	061b      	lsls	r3, r3, #24
    9878:	4313      	orrs	r3, r2
    987a:	7a18      	ldrb	r0, [r3, #8]
    987c:	4b18      	ldr	r3, [pc, #96]	; (98e0 <setJoinDutyCycleTimer+0x284>)
    987e:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    9880:	0023      	movs	r3, r4
    9882:	333f      	adds	r3, #63	; 0x3f
    9884:	2200      	movs	r2, #0
    9886:	701a      	strb	r2, [r3, #0]
    9888:	705a      	strb	r2, [r3, #1]
    988a:	709a      	strb	r2, [r3, #2]
    988c:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    988e:	7d23      	ldrb	r3, [r4, #20]
    9890:	7d62      	ldrb	r2, [r4, #21]
    9892:	0212      	lsls	r2, r2, #8
    9894:	431a      	orrs	r2, r3
    9896:	7da3      	ldrb	r3, [r4, #22]
    9898:	041b      	lsls	r3, r3, #16
    989a:	431a      	orrs	r2, r3
    989c:	7de3      	ldrb	r3, [r4, #23]
    989e:	061b      	lsls	r3, r3, #24
    98a0:	4313      	orrs	r3, r2
    98a2:	2200      	movs	r2, #0
    98a4:	711a      	strb	r2, [r3, #4]
    98a6:	715a      	strb	r2, [r3, #5]
    98a8:	719a      	strb	r2, [r3, #6]
    98aa:	71da      	strb	r2, [r3, #7]
}
    98ac:	2008      	movs	r0, #8
    98ae:	b005      	add	sp, #20
    98b0:	bd30      	pop	{r4, r5, pc}
    98b2:	46c0      	nop			; (mov r8, r8)
    98b4:	00017691 	.word	0x00017691
    98b8:	20002310 	.word	0x20002310
    98bc:	000003e7 	.word	0x000003e7
    98c0:	0000cccd 	.word	0x0000cccd
    98c4:	0020c49b 	.word	0x0020c49b
    98c8:	ffdf3b65 	.word	0xffdf3b65
    98cc:	0000a195 	.word	0x0000a195
    98d0:	7fffffff 	.word	0x7fffffff
    98d4:	0000cb35 	.word	0x0000cb35
    98d8:	0000270f 	.word	0x0000270f
    98dc:	0000cce1 	.word	0x0000cce1
    98e0:	0000ce4d 	.word	0x0000ce4d
    98e4:	00014509 	.word	0x00014509

000098e8 <setDutyCycleTimer>:
{
    98e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98ea:	46de      	mov	lr, fp
    98ec:	4657      	mov	r7, sl
    98ee:	464e      	mov	r6, r9
    98f0:	4645      	mov	r5, r8
    98f2:	b5e0      	push	{r5, r6, r7, lr}
    98f4:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    98f6:	2206      	movs	r2, #6
    98f8:	a804      	add	r0, sp, #16
    98fa:	4bc9      	ldr	r3, [pc, #804]	; (9c20 <setDutyCycleTimer+0x338>)
    98fc:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    98fe:	49c9      	ldr	r1, [pc, #804]	; (9c24 <setDutyCycleTimer+0x33c>)
    9900:	7a0b      	ldrb	r3, [r1, #8]
    9902:	7a4a      	ldrb	r2, [r1, #9]
    9904:	0212      	lsls	r2, r2, #8
    9906:	4313      	orrs	r3, r2
    9908:	7a8a      	ldrb	r2, [r1, #10]
    990a:	0412      	lsls	r2, r2, #16
    990c:	431a      	orrs	r2, r3
    990e:	7acb      	ldrb	r3, [r1, #11]
    9910:	061b      	lsls	r3, r3, #24
    9912:	431a      	orrs	r2, r3
    9914:	2330      	movs	r3, #48	; 0x30
    9916:	5cc9      	ldrb	r1, [r1, r3]
    9918:	004b      	lsls	r3, r1, #1
    991a:	185b      	adds	r3, r3, r1
    991c:	009b      	lsls	r3, r3, #2
    991e:	189b      	adds	r3, r3, r2
    9920:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    9922:	2e00      	cmp	r6, #0
    9924:	d105      	bne.n	9932 <setDutyCycleTimer+0x4a>
    9926:	232f      	movs	r3, #47	; 0x2f
    9928:	4abe      	ldr	r2, [pc, #760]	; (9c24 <setDutyCycleTimer+0x33c>)
    992a:	5cd3      	ldrb	r3, [r2, r3]
    992c:	2b05      	cmp	r3, #5
    992e:	d100      	bne.n	9932 <setDutyCycleTimer+0x4a>
    9930:	e163      	b.n	9bfa <setDutyCycleTimer+0x312>
	if(updateDCTimer.joining != 1)
    9932:	ab04      	add	r3, sp, #16
    9934:	791b      	ldrb	r3, [r3, #4]
    9936:	2b00      	cmp	r3, #0
    9938:	d16a      	bne.n	9a10 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    993a:	a904      	add	r1, sp, #16
    993c:	880a      	ldrh	r2, [r1, #0]
    993e:	48b9      	ldr	r0, [pc, #740]	; (9c24 <setDutyCycleTimer+0x33c>)
    9940:	7b07      	ldrb	r7, [r0, #12]
    9942:	7b43      	ldrb	r3, [r0, #13]
    9944:	021b      	lsls	r3, r3, #8
    9946:	433b      	orrs	r3, r7
    9948:	7b87      	ldrb	r7, [r0, #14]
    994a:	043f      	lsls	r7, r7, #16
    994c:	431f      	orrs	r7, r3
    994e:	7bc4      	ldrb	r4, [r0, #15]
    9950:	0624      	lsls	r4, r4, #24
    9952:	4327      	orrs	r7, r4
    9954:	0074      	lsls	r4, r6, #1
    9956:	19a4      	adds	r4, r4, r6
    9958:	00a4      	lsls	r4, r4, #2
    995a:	0035      	movs	r5, r6
    995c:	35d4      	adds	r5, #212	; 0xd4
    995e:	006d      	lsls	r5, r5, #1
    9960:	1945      	adds	r5, r0, r5
    9962:	79ab      	ldrb	r3, [r5, #6]
    9964:	469c      	mov	ip, r3
    9966:	79eb      	ldrb	r3, [r5, #7]
    9968:	021b      	lsls	r3, r3, #8
    996a:	4665      	mov	r5, ip
    996c:	432b      	orrs	r3, r5
    996e:	3b01      	subs	r3, #1
    9970:	4353      	muls	r3, r2
    9972:	19e4      	adds	r4, r4, r7
    9974:	7223      	strb	r3, [r4, #8]
    9976:	0a1d      	lsrs	r5, r3, #8
    9978:	7265      	strb	r5, [r4, #9]
    997a:	0c1d      	lsrs	r5, r3, #16
    997c:	72a5      	strb	r5, [r4, #10]
    997e:	0e1b      	lsrs	r3, r3, #24
    9980:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    9982:	884b      	ldrh	r3, [r1, #2]
    9984:	3b01      	subs	r3, #1
    9986:	435a      	muls	r2, r3
    9988:	23dd      	movs	r3, #221	; 0xdd
    998a:	005b      	lsls	r3, r3, #1
    998c:	54c2      	strb	r2, [r0, r3]
    998e:	0a11      	lsrs	r1, r2, #8
    9990:	18c0      	adds	r0, r0, r3
    9992:	7041      	strb	r1, [r0, #1]
    9994:	0c11      	lsrs	r1, r2, #16
    9996:	7081      	strb	r1, [r0, #2]
    9998:	0e12      	lsrs	r2, r2, #24
    999a:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    999c:	49a1      	ldr	r1, [pc, #644]	; (9c24 <setDutyCycleTimer+0x33c>)
    999e:	7c0b      	ldrb	r3, [r1, #16]
    99a0:	7c4a      	ldrb	r2, [r1, #17]
    99a2:	0212      	lsls	r2, r2, #8
    99a4:	431a      	orrs	r2, r3
    99a6:	7c8b      	ldrb	r3, [r1, #18]
    99a8:	041b      	lsls	r3, r3, #16
    99aa:	431a      	orrs	r2, r3
    99ac:	7ccb      	ldrb	r3, [r1, #19]
    99ae:	061b      	lsls	r3, r3, #24
    99b0:	4313      	orrs	r3, r2
    99b2:	7918      	ldrb	r0, [r3, #4]
    99b4:	4b9c      	ldr	r3, [pc, #624]	; (9c28 <setDutyCycleTimer+0x340>)
    99b6:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    99b8:	2300      	movs	r3, #0
    99ba:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    99bc:	2800      	cmp	r0, #0
    99be:	d136      	bne.n	9a2e <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    99c0:	4a98      	ldr	r2, [pc, #608]	; (9c24 <setDutyCycleTimer+0x33c>)
    99c2:	7b13      	ldrb	r3, [r2, #12]
    99c4:	7b51      	ldrb	r1, [r2, #13]
    99c6:	0209      	lsls	r1, r1, #8
    99c8:	430b      	orrs	r3, r1
    99ca:	7b91      	ldrb	r1, [r2, #14]
    99cc:	0409      	lsls	r1, r1, #16
    99ce:	4319      	orrs	r1, r3
    99d0:	7bd3      	ldrb	r3, [r2, #15]
    99d2:	061b      	lsls	r3, r3, #24
    99d4:	4319      	orrs	r1, r3
    99d6:	0073      	lsls	r3, r6, #1
    99d8:	199b      	adds	r3, r3, r6
    99da:	009b      	lsls	r3, r3, #2
    99dc:	185b      	adds	r3, r3, r1
    99de:	7a18      	ldrb	r0, [r3, #8]
    99e0:	7a59      	ldrb	r1, [r3, #9]
    99e2:	0209      	lsls	r1, r1, #8
    99e4:	4301      	orrs	r1, r0
    99e6:	7a98      	ldrb	r0, [r3, #10]
    99e8:	0400      	lsls	r0, r0, #16
    99ea:	4301      	orrs	r1, r0
    99ec:	7ad8      	ldrb	r0, [r3, #11]
    99ee:	0600      	lsls	r0, r0, #24
    99f0:	4308      	orrs	r0, r1
    99f2:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    99f4:	2329      	movs	r3, #41	; 0x29
    99f6:	5cd3      	ldrb	r3, [r2, r3]
    99f8:	2b00      	cmp	r3, #0
    99fa:	d100      	bne.n	99fe <setDutyCycleTimer+0x116>
    99fc:	e09c      	b.n	9b38 <setDutyCycleTimer+0x250>
    99fe:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    9a00:	4d88      	ldr	r5, [pc, #544]	; (9c24 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    9a02:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    9a04:	2300      	movs	r3, #0
    9a06:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    9a08:	46a8      	mov	r8, r5
    9a0a:	2329      	movs	r3, #41	; 0x29
    9a0c:	469c      	mov	ip, r3
    9a0e:	e051      	b.n	9ab4 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    9a10:	a904      	add	r1, sp, #16
    9a12:	884a      	ldrh	r2, [r1, #2]
    9a14:	3a01      	subs	r2, #1
    9a16:	880b      	ldrh	r3, [r1, #0]
    9a18:	4353      	muls	r3, r2
    9a1a:	4a82      	ldr	r2, [pc, #520]	; (9c24 <setDutyCycleTimer+0x33c>)
    9a1c:	323f      	adds	r2, #63	; 0x3f
    9a1e:	7013      	strb	r3, [r2, #0]
    9a20:	0a19      	lsrs	r1, r3, #8
    9a22:	7051      	strb	r1, [r2, #1]
    9a24:	0c19      	lsrs	r1, r3, #16
    9a26:	7091      	strb	r1, [r2, #2]
    9a28:	0e1b      	lsrs	r3, r3, #24
    9a2a:	70d3      	strb	r3, [r2, #3]
    9a2c:	e7b6      	b.n	999c <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    9a2e:	4c7d      	ldr	r4, [pc, #500]	; (9c24 <setDutyCycleTimer+0x33c>)
    9a30:	7c23      	ldrb	r3, [r4, #16]
    9a32:	7c62      	ldrb	r2, [r4, #17]
    9a34:	0212      	lsls	r2, r2, #8
    9a36:	431a      	orrs	r2, r3
    9a38:	7ca3      	ldrb	r3, [r4, #18]
    9a3a:	041b      	lsls	r3, r3, #16
    9a3c:	431a      	orrs	r2, r3
    9a3e:	7ce3      	ldrb	r3, [r4, #19]
    9a40:	061b      	lsls	r3, r3, #24
    9a42:	4313      	orrs	r3, r2
    9a44:	7918      	ldrb	r0, [r3, #4]
    9a46:	4b79      	ldr	r3, [pc, #484]	; (9c2c <setDutyCycleTimer+0x344>)
    9a48:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    9a4a:	7c23      	ldrb	r3, [r4, #16]
    9a4c:	7c62      	ldrb	r2, [r4, #17]
    9a4e:	0212      	lsls	r2, r2, #8
    9a50:	431a      	orrs	r2, r3
    9a52:	7ca3      	ldrb	r3, [r4, #18]
    9a54:	041b      	lsls	r3, r3, #16
    9a56:	431a      	orrs	r2, r3
    9a58:	7ce3      	ldrb	r3, [r4, #19]
    9a5a:	061b      	lsls	r3, r3, #24
    9a5c:	4313      	orrs	r3, r2
    9a5e:	7918      	ldrb	r0, [r3, #4]
    9a60:	4b73      	ldr	r3, [pc, #460]	; (9c30 <setDutyCycleTimer+0x348>)
    9a62:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    9a64:	7c23      	ldrb	r3, [r4, #16]
    9a66:	7c62      	ldrb	r2, [r4, #17]
    9a68:	0212      	lsls	r2, r2, #8
    9a6a:	431a      	orrs	r2, r3
    9a6c:	7ca3      	ldrb	r3, [r4, #18]
    9a6e:	041b      	lsls	r3, r3, #16
    9a70:	431a      	orrs	r2, r3
    9a72:	7ce3      	ldrb	r3, [r4, #19]
    9a74:	061b      	lsls	r3, r3, #24
    9a76:	4313      	orrs	r3, r2
    9a78:	781c      	ldrb	r4, [r3, #0]
    9a7a:	785a      	ldrb	r2, [r3, #1]
    9a7c:	0212      	lsls	r2, r2, #8
    9a7e:	4322      	orrs	r2, r4
    9a80:	789c      	ldrb	r4, [r3, #2]
    9a82:	0424      	lsls	r4, r4, #16
    9a84:	4322      	orrs	r2, r4
    9a86:	78dc      	ldrb	r4, [r3, #3]
    9a88:	0624      	lsls	r4, r4, #24
    9a8a:	4314      	orrs	r4, r2
    9a8c:	21fa      	movs	r1, #250	; 0xfa
    9a8e:	0089      	lsls	r1, r1, #2
    9a90:	4b68      	ldr	r3, [pc, #416]	; (9c34 <setDutyCycleTimer+0x34c>)
    9a92:	4798      	blx	r3
    9a94:	1a23      	subs	r3, r4, r0
    9a96:	4699      	mov	r9, r3
    9a98:	e792      	b.n	99c0 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    9a9a:	4651      	mov	r1, sl
    9a9c:	7219      	strb	r1, [r3, #8]
    9a9e:	7259      	strb	r1, [r3, #9]
    9aa0:	7299      	strb	r1, [r3, #10]
    9aa2:	72d9      	strb	r1, [r3, #11]
    9aa4:	e02c      	b.n	9b00 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    9aa6:	3201      	adds	r2, #1
    9aa8:	b2d2      	uxtb	r2, r2
    9aaa:	4643      	mov	r3, r8
    9aac:	4661      	mov	r1, ip
    9aae:	5c5b      	ldrb	r3, [r3, r1]
    9ab0:	4293      	cmp	r3, r2
    9ab2:	d941      	bls.n	9b38 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    9ab4:	4296      	cmp	r6, r2
    9ab6:	d0f6      	beq.n	9aa6 <setDutyCycleTimer+0x1be>
    9ab8:	0054      	lsls	r4, r2, #1
    9aba:	18a4      	adds	r4, r4, r2
    9abc:	00a4      	lsls	r4, r4, #2
    9abe:	7b2b      	ldrb	r3, [r5, #12]
    9ac0:	7b69      	ldrb	r1, [r5, #13]
    9ac2:	0209      	lsls	r1, r1, #8
    9ac4:	4319      	orrs	r1, r3
    9ac6:	7bab      	ldrb	r3, [r5, #14]
    9ac8:	041b      	lsls	r3, r3, #16
    9aca:	4319      	orrs	r1, r3
    9acc:	7beb      	ldrb	r3, [r5, #15]
    9ace:	061b      	lsls	r3, r3, #24
    9ad0:	430b      	orrs	r3, r1
    9ad2:	191b      	adds	r3, r3, r4
    9ad4:	7a18      	ldrb	r0, [r3, #8]
    9ad6:	7a59      	ldrb	r1, [r3, #9]
    9ad8:	0209      	lsls	r1, r1, #8
    9ada:	4301      	orrs	r1, r0
    9adc:	7a98      	ldrb	r0, [r3, #10]
    9ade:	0400      	lsls	r0, r0, #16
    9ae0:	4308      	orrs	r0, r1
    9ae2:	7ad9      	ldrb	r1, [r3, #11]
    9ae4:	0609      	lsls	r1, r1, #24
    9ae6:	4301      	orrs	r1, r0
    9ae8:	d0dd      	beq.n	9aa6 <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    9aea:	4589      	cmp	r9, r1
    9aec:	d2d5      	bcs.n	9a9a <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    9aee:	4648      	mov	r0, r9
    9af0:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    9af2:	7219      	strb	r1, [r3, #8]
    9af4:	0a08      	lsrs	r0, r1, #8
    9af6:	7258      	strb	r0, [r3, #9]
    9af8:	0c08      	lsrs	r0, r1, #16
    9afa:	7298      	strb	r0, [r3, #10]
    9afc:	0e09      	lsrs	r1, r1, #24
    9afe:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    9b00:	7b3b      	ldrb	r3, [r7, #12]
    9b02:	7b79      	ldrb	r1, [r7, #13]
    9b04:	0209      	lsls	r1, r1, #8
    9b06:	4319      	orrs	r1, r3
    9b08:	7bbb      	ldrb	r3, [r7, #14]
    9b0a:	041b      	lsls	r3, r3, #16
    9b0c:	4319      	orrs	r1, r3
    9b0e:	7bfb      	ldrb	r3, [r7, #15]
    9b10:	061b      	lsls	r3, r3, #24
    9b12:	430b      	orrs	r3, r1
    9b14:	191c      	adds	r4, r3, r4
    9b16:	7a23      	ldrb	r3, [r4, #8]
    9b18:	7a61      	ldrb	r1, [r4, #9]
    9b1a:	0209      	lsls	r1, r1, #8
    9b1c:	4319      	orrs	r1, r3
    9b1e:	7aa3      	ldrb	r3, [r4, #10]
    9b20:	041b      	lsls	r3, r3, #16
    9b22:	4319      	orrs	r1, r3
    9b24:	7ae3      	ldrb	r3, [r4, #11]
    9b26:	061b      	lsls	r3, r3, #24
    9b28:	430b      	orrs	r3, r1
    9b2a:	9903      	ldr	r1, [sp, #12]
    9b2c:	428b      	cmp	r3, r1
    9b2e:	d8ba      	bhi.n	9aa6 <setDutyCycleTimer+0x1be>
    9b30:	2b00      	cmp	r3, #0
    9b32:	d0b8      	beq.n	9aa6 <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    9b34:	9303      	str	r3, [sp, #12]
    9b36:	e7b6      	b.n	9aa6 <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    9b38:	493a      	ldr	r1, [pc, #232]	; (9c24 <setDutyCycleTimer+0x33c>)
    9b3a:	23dd      	movs	r3, #221	; 0xdd
    9b3c:	005b      	lsls	r3, r3, #1
    9b3e:	5ccb      	ldrb	r3, [r1, r3]
    9b40:	22bc      	movs	r2, #188	; 0xbc
    9b42:	32ff      	adds	r2, #255	; 0xff
    9b44:	5c8a      	ldrb	r2, [r1, r2]
    9b46:	0212      	lsls	r2, r2, #8
    9b48:	431a      	orrs	r2, r3
    9b4a:	23de      	movs	r3, #222	; 0xde
    9b4c:	005b      	lsls	r3, r3, #1
    9b4e:	5ccb      	ldrb	r3, [r1, r3]
    9b50:	041b      	lsls	r3, r3, #16
    9b52:	431a      	orrs	r2, r3
    9b54:	23be      	movs	r3, #190	; 0xbe
    9b56:	33ff      	adds	r3, #255	; 0xff
    9b58:	5ccb      	ldrb	r3, [r1, r3]
    9b5a:	061b      	lsls	r3, r3, #24
    9b5c:	4313      	orrs	r3, r2
    9b5e:	d00f      	beq.n	9b80 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    9b60:	4599      	cmp	r9, r3
    9b62:	d252      	bcs.n	9c0a <setDutyCycleTimer+0x322>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    9b64:	000a      	movs	r2, r1
    9b66:	4649      	mov	r1, r9
    9b68:	1a5b      	subs	r3, r3, r1
    9b6a:	21dd      	movs	r1, #221	; 0xdd
    9b6c:	0049      	lsls	r1, r1, #1
    9b6e:	5453      	strb	r3, [r2, r1]
    9b70:	0a19      	lsrs	r1, r3, #8
    9b72:	32bb      	adds	r2, #187	; 0xbb
    9b74:	32ff      	adds	r2, #255	; 0xff
    9b76:	7051      	strb	r1, [r2, #1]
    9b78:	0c19      	lsrs	r1, r3, #16
    9b7a:	7091      	strb	r1, [r2, #2]
    9b7c:	0e1b      	lsrs	r3, r3, #24
    9b7e:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    9b80:	4a28      	ldr	r2, [pc, #160]	; (9c24 <setDutyCycleTimer+0x33c>)
    9b82:	23dd      	movs	r3, #221	; 0xdd
    9b84:	005b      	lsls	r3, r3, #1
    9b86:	5cd1      	ldrb	r1, [r2, r3]
    9b88:	23bc      	movs	r3, #188	; 0xbc
    9b8a:	33ff      	adds	r3, #255	; 0xff
    9b8c:	5cd3      	ldrb	r3, [r2, r3]
    9b8e:	021b      	lsls	r3, r3, #8
    9b90:	430b      	orrs	r3, r1
    9b92:	21de      	movs	r1, #222	; 0xde
    9b94:	0049      	lsls	r1, r1, #1
    9b96:	5c51      	ldrb	r1, [r2, r1]
    9b98:	0409      	lsls	r1, r1, #16
    9b9a:	430b      	orrs	r3, r1
    9b9c:	21be      	movs	r1, #190	; 0xbe
    9b9e:	31ff      	adds	r1, #255	; 0xff
    9ba0:	5c51      	ldrb	r1, [r2, r1]
    9ba2:	0609      	lsls	r1, r1, #24
    9ba4:	4319      	orrs	r1, r3
    9ba6:	9a03      	ldr	r2, [sp, #12]
    9ba8:	4291      	cmp	r1, r2
    9baa:	d200      	bcs.n	9bae <setDutyCycleTimer+0x2c6>
    9bac:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    9bae:	4b1d      	ldr	r3, [pc, #116]	; (9c24 <setDutyCycleTimer+0x33c>)
    9bb0:	7c1a      	ldrb	r2, [r3, #16]
    9bb2:	7c58      	ldrb	r0, [r3, #17]
    9bb4:	0200      	lsls	r0, r0, #8
    9bb6:	4310      	orrs	r0, r2
    9bb8:	7c9a      	ldrb	r2, [r3, #18]
    9bba:	0412      	lsls	r2, r2, #16
    9bbc:	4310      	orrs	r0, r2
    9bbe:	7cda      	ldrb	r2, [r3, #19]
    9bc0:	0612      	lsls	r2, r2, #24
    9bc2:	4302      	orrs	r2, r0
    9bc4:	7011      	strb	r1, [r2, #0]
    9bc6:	0a08      	lsrs	r0, r1, #8
    9bc8:	7050      	strb	r0, [r2, #1]
    9bca:	0c08      	lsrs	r0, r1, #16
    9bcc:	7090      	strb	r0, [r2, #2]
    9bce:	0e08      	lsrs	r0, r1, #24
    9bd0:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    9bd2:	22fa      	movs	r2, #250	; 0xfa
    9bd4:	0092      	lsls	r2, r2, #2
    9bd6:	4351      	muls	r1, r2
    9bd8:	7c18      	ldrb	r0, [r3, #16]
    9bda:	7c5a      	ldrb	r2, [r3, #17]
    9bdc:	0212      	lsls	r2, r2, #8
    9bde:	4310      	orrs	r0, r2
    9be0:	7c9a      	ldrb	r2, [r3, #18]
    9be2:	0412      	lsls	r2, r2, #16
    9be4:	4302      	orrs	r2, r0
    9be6:	7cdb      	ldrb	r3, [r3, #19]
    9be8:	061b      	lsls	r3, r3, #24
    9bea:	4313      	orrs	r3, r2
    9bec:	7918      	ldrb	r0, [r3, #4]
    9bee:	2300      	movs	r3, #0
    9bf0:	9300      	str	r3, [sp, #0]
    9bf2:	4b11      	ldr	r3, [pc, #68]	; (9c38 <setDutyCycleTimer+0x350>)
    9bf4:	2200      	movs	r2, #0
    9bf6:	4c11      	ldr	r4, [pc, #68]	; (9c3c <setDutyCycleTimer+0x354>)
    9bf8:	47a0      	blx	r4
}
    9bfa:	2008      	movs	r0, #8
    9bfc:	b007      	add	sp, #28
    9bfe:	bc3c      	pop	{r2, r3, r4, r5}
    9c00:	4690      	mov	r8, r2
    9c02:	4699      	mov	r9, r3
    9c04:	46a2      	mov	sl, r4
    9c06:	46ab      	mov	fp, r5
    9c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    9c0a:	4b06      	ldr	r3, [pc, #24]	; (9c24 <setDutyCycleTimer+0x33c>)
    9c0c:	2100      	movs	r1, #0
    9c0e:	22dd      	movs	r2, #221	; 0xdd
    9c10:	0052      	lsls	r2, r2, #1
    9c12:	5499      	strb	r1, [r3, r2]
    9c14:	189b      	adds	r3, r3, r2
    9c16:	2200      	movs	r2, #0
    9c18:	705a      	strb	r2, [r3, #1]
    9c1a:	709a      	strb	r2, [r3, #2]
    9c1c:	70da      	strb	r2, [r3, #3]
    9c1e:	e7af      	b.n	9b80 <setDutyCycleTimer+0x298>
    9c20:	00017691 	.word	0x00017691
    9c24:	20002310 	.word	0x20002310
    9c28:	0000cccd 	.word	0x0000cccd
    9c2c:	0000ce4d 	.word	0x0000ce4d
    9c30:	0000cce1 	.word	0x0000cce1
    9c34:	00014509 	.word	0x00014509
    9c38:	00009c41 	.word	0x00009c41
    9c3c:	0000cb35 	.word	0x0000cb35

00009c40 <DutyCycleCallback>:
{
    9c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c42:	46de      	mov	lr, fp
    9c44:	4657      	mov	r7, sl
    9c46:	464e      	mov	r6, r9
    9c48:	4645      	mov	r5, r8
    9c4a:	b5e0      	push	{r5, r6, r7, lr}
    9c4c:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    9c4e:	4980      	ldr	r1, [pc, #512]	; (9e50 <DutyCycleCallback+0x210>)
    9c50:	23dd      	movs	r3, #221	; 0xdd
    9c52:	005b      	lsls	r3, r3, #1
    9c54:	5cca      	ldrb	r2, [r1, r3]
    9c56:	23bc      	movs	r3, #188	; 0xbc
    9c58:	33ff      	adds	r3, #255	; 0xff
    9c5a:	5ccb      	ldrb	r3, [r1, r3]
    9c5c:	021b      	lsls	r3, r3, #8
    9c5e:	431a      	orrs	r2, r3
    9c60:	23de      	movs	r3, #222	; 0xde
    9c62:	005b      	lsls	r3, r3, #1
    9c64:	5ccb      	ldrb	r3, [r1, r3]
    9c66:	041b      	lsls	r3, r3, #16
    9c68:	4313      	orrs	r3, r2
    9c6a:	22be      	movs	r2, #190	; 0xbe
    9c6c:	32ff      	adds	r2, #255	; 0xff
    9c6e:	5c8a      	ldrb	r2, [r1, r2]
    9c70:	0612      	lsls	r2, r2, #24
    9c72:	431a      	orrs	r2, r3
    9c74:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    9c76:	2329      	movs	r3, #41	; 0x29
    9c78:	5ccb      	ldrb	r3, [r1, r3]
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d100      	bne.n	9c80 <DutyCycleCallback+0x40>
    9c7e:	e0df      	b.n	9e40 <DutyCycleCallback+0x200>
    9c80:	2600      	movs	r6, #0
    9c82:	2300      	movs	r3, #0
    9c84:	9304      	str	r3, [sp, #16]
    9c86:	3b01      	subs	r3, #1
    9c88:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    9c8a:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    9c8c:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    9c8e:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    9c90:	2300      	movs	r3, #0
    9c92:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    9c94:	468a      	mov	sl, r1
    9c96:	2329      	movs	r3, #41	; 0x29
    9c98:	4699      	mov	r9, r3
    9c9a:	e00c      	b.n	9cb6 <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    9c9c:	465a      	mov	r2, fp
    9c9e:	721a      	strb	r2, [r3, #8]
    9ca0:	725a      	strb	r2, [r3, #9]
    9ca2:	729a      	strb	r2, [r3, #10]
    9ca4:	72da      	strb	r2, [r3, #11]
    9ca6:	e03f      	b.n	9d28 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    9ca8:	3601      	adds	r6, #1
    9caa:	b2f6      	uxtb	r6, r6
    9cac:	4653      	mov	r3, sl
    9cae:	464a      	mov	r2, r9
    9cb0:	5c9b      	ldrb	r3, [r3, r2]
    9cb2:	42b3      	cmp	r3, r6
    9cb4:	d95a      	bls.n	9d6c <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    9cb6:	0071      	lsls	r1, r6, #1
    9cb8:	1989      	adds	r1, r1, r6
    9cba:	0089      	lsls	r1, r1, #2
    9cbc:	7b3b      	ldrb	r3, [r7, #12]
    9cbe:	7b7a      	ldrb	r2, [r7, #13]
    9cc0:	0212      	lsls	r2, r2, #8
    9cc2:	431a      	orrs	r2, r3
    9cc4:	7bbb      	ldrb	r3, [r7, #14]
    9cc6:	041b      	lsls	r3, r3, #16
    9cc8:	431a      	orrs	r2, r3
    9cca:	7bfb      	ldrb	r3, [r7, #15]
    9ccc:	061b      	lsls	r3, r3, #24
    9cce:	4313      	orrs	r3, r2
    9cd0:	185b      	adds	r3, r3, r1
    9cd2:	7a1a      	ldrb	r2, [r3, #8]
    9cd4:	7a58      	ldrb	r0, [r3, #9]
    9cd6:	0200      	lsls	r0, r0, #8
    9cd8:	4310      	orrs	r0, r2
    9cda:	7a9a      	ldrb	r2, [r3, #10]
    9cdc:	0412      	lsls	r2, r2, #16
    9cde:	4310      	orrs	r0, r2
    9ce0:	7ada      	ldrb	r2, [r3, #11]
    9ce2:	0612      	lsls	r2, r2, #24
    9ce4:	4302      	orrs	r2, r0
    9ce6:	d0df      	beq.n	9ca8 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    9ce8:	4640      	mov	r0, r8
    9cea:	7c05      	ldrb	r5, [r0, #16]
    9cec:	7c44      	ldrb	r4, [r0, #17]
    9cee:	0224      	lsls	r4, r4, #8
    9cf0:	4325      	orrs	r5, r4
    9cf2:	7c80      	ldrb	r0, [r0, #18]
    9cf4:	0400      	lsls	r0, r0, #16
    9cf6:	4305      	orrs	r5, r0
    9cf8:	4640      	mov	r0, r8
    9cfa:	7cc0      	ldrb	r0, [r0, #19]
    9cfc:	0600      	lsls	r0, r0, #24
    9cfe:	4328      	orrs	r0, r5
    9d00:	7804      	ldrb	r4, [r0, #0]
    9d02:	7845      	ldrb	r5, [r0, #1]
    9d04:	022d      	lsls	r5, r5, #8
    9d06:	4325      	orrs	r5, r4
    9d08:	7884      	ldrb	r4, [r0, #2]
    9d0a:	0424      	lsls	r4, r4, #16
    9d0c:	4325      	orrs	r5, r4
    9d0e:	78c4      	ldrb	r4, [r0, #3]
    9d10:	0624      	lsls	r4, r4, #24
    9d12:	432c      	orrs	r4, r5
    9d14:	42a2      	cmp	r2, r4
    9d16:	d9c1      	bls.n	9c9c <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    9d18:	1b12      	subs	r2, r2, r4
    9d1a:	721a      	strb	r2, [r3, #8]
    9d1c:	0a10      	lsrs	r0, r2, #8
    9d1e:	7258      	strb	r0, [r3, #9]
    9d20:	0c10      	lsrs	r0, r2, #16
    9d22:	7298      	strb	r0, [r3, #10]
    9d24:	0e12      	lsrs	r2, r2, #24
    9d26:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    9d28:	4663      	mov	r3, ip
    9d2a:	7b1b      	ldrb	r3, [r3, #12]
    9d2c:	4662      	mov	r2, ip
    9d2e:	7b52      	ldrb	r2, [r2, #13]
    9d30:	0212      	lsls	r2, r2, #8
    9d32:	431a      	orrs	r2, r3
    9d34:	4663      	mov	r3, ip
    9d36:	7b9b      	ldrb	r3, [r3, #14]
    9d38:	041b      	lsls	r3, r3, #16
    9d3a:	431a      	orrs	r2, r3
    9d3c:	4663      	mov	r3, ip
    9d3e:	7bdb      	ldrb	r3, [r3, #15]
    9d40:	061b      	lsls	r3, r3, #24
    9d42:	4313      	orrs	r3, r2
    9d44:	1859      	adds	r1, r3, r1
    9d46:	7a0b      	ldrb	r3, [r1, #8]
    9d48:	7a4a      	ldrb	r2, [r1, #9]
    9d4a:	0212      	lsls	r2, r2, #8
    9d4c:	431a      	orrs	r2, r3
    9d4e:	7a8b      	ldrb	r3, [r1, #10]
    9d50:	041b      	lsls	r3, r3, #16
    9d52:	431a      	orrs	r2, r3
    9d54:	7acb      	ldrb	r3, [r1, #11]
    9d56:	061b      	lsls	r3, r3, #24
    9d58:	4313      	orrs	r3, r2
    9d5a:	9a03      	ldr	r2, [sp, #12]
    9d5c:	4293      	cmp	r3, r2
    9d5e:	d8a3      	bhi.n	9ca8 <DutyCycleCallback+0x68>
    9d60:	2b00      	cmp	r3, #0
    9d62:	d0a1      	beq.n	9ca8 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    9d64:	9303      	str	r3, [sp, #12]
                found = 1;
    9d66:	2301      	movs	r3, #1
    9d68:	9304      	str	r3, [sp, #16]
    9d6a:	e79d      	b.n	9ca8 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    9d6c:	9b05      	ldr	r3, [sp, #20]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d031      	beq.n	9dd6 <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    9d72:	4937      	ldr	r1, [pc, #220]	; (9e50 <DutyCycleCallback+0x210>)
    9d74:	7c0b      	ldrb	r3, [r1, #16]
    9d76:	7c4a      	ldrb	r2, [r1, #17]
    9d78:	0212      	lsls	r2, r2, #8
    9d7a:	431a      	orrs	r2, r3
    9d7c:	7c8b      	ldrb	r3, [r1, #18]
    9d7e:	041b      	lsls	r3, r3, #16
    9d80:	431a      	orrs	r2, r3
    9d82:	7ccb      	ldrb	r3, [r1, #19]
    9d84:	061b      	lsls	r3, r3, #24
    9d86:	4313      	orrs	r3, r2
    9d88:	7819      	ldrb	r1, [r3, #0]
    9d8a:	785a      	ldrb	r2, [r3, #1]
    9d8c:	0212      	lsls	r2, r2, #8
    9d8e:	430a      	orrs	r2, r1
    9d90:	7899      	ldrb	r1, [r3, #2]
    9d92:	0409      	lsls	r1, r1, #16
    9d94:	430a      	orrs	r2, r1
    9d96:	78d9      	ldrb	r1, [r3, #3]
    9d98:	0609      	lsls	r1, r1, #24
    9d9a:	4311      	orrs	r1, r2
    9d9c:	9a05      	ldr	r2, [sp, #20]
    9d9e:	428a      	cmp	r2, r1
    9da0:	d90f      	bls.n	9dc2 <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    9da2:	1a51      	subs	r1, r2, r1
    9da4:	4b2a      	ldr	r3, [pc, #168]	; (9e50 <DutyCycleCallback+0x210>)
    9da6:	22dd      	movs	r2, #221	; 0xdd
    9da8:	0052      	lsls	r2, r2, #1
    9daa:	5499      	strb	r1, [r3, r2]
    9dac:	0a0a      	lsrs	r2, r1, #8
    9dae:	33bb      	adds	r3, #187	; 0xbb
    9db0:	33ff      	adds	r3, #255	; 0xff
    9db2:	705a      	strb	r2, [r3, #1]
    9db4:	0c0a      	lsrs	r2, r1, #16
    9db6:	709a      	strb	r2, [r3, #2]
    9db8:	0e0a      	lsrs	r2, r1, #24
    9dba:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    9dbc:	2900      	cmp	r1, #0
    9dbe:	d10e      	bne.n	9dde <DutyCycleCallback+0x19e>
    9dc0:	e009      	b.n	9dd6 <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    9dc2:	4b23      	ldr	r3, [pc, #140]	; (9e50 <DutyCycleCallback+0x210>)
    9dc4:	2100      	movs	r1, #0
    9dc6:	22dd      	movs	r2, #221	; 0xdd
    9dc8:	0052      	lsls	r2, r2, #1
    9dca:	5499      	strb	r1, [r3, r2]
    9dcc:	189b      	adds	r3, r3, r2
    9dce:	2200      	movs	r2, #0
    9dd0:	705a      	strb	r2, [r3, #1]
    9dd2:	709a      	strb	r2, [r3, #2]
    9dd4:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    9dd6:	9b04      	ldr	r3, [sp, #16]
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d02a      	beq.n	9e32 <DutyCycleCallback+0x1f2>
    9ddc:	2100      	movs	r1, #0
    9dde:	9a03      	ldr	r2, [sp, #12]
    9de0:	4291      	cmp	r1, r2
    9de2:	d200      	bcs.n	9de6 <DutyCycleCallback+0x1a6>
    9de4:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    9de6:	4b1a      	ldr	r3, [pc, #104]	; (9e50 <DutyCycleCallback+0x210>)
    9de8:	7c1a      	ldrb	r2, [r3, #16]
    9dea:	7c58      	ldrb	r0, [r3, #17]
    9dec:	0200      	lsls	r0, r0, #8
    9dee:	4310      	orrs	r0, r2
    9df0:	7c9a      	ldrb	r2, [r3, #18]
    9df2:	0412      	lsls	r2, r2, #16
    9df4:	4310      	orrs	r0, r2
    9df6:	7cda      	ldrb	r2, [r3, #19]
    9df8:	0612      	lsls	r2, r2, #24
    9dfa:	4302      	orrs	r2, r0
    9dfc:	7011      	strb	r1, [r2, #0]
    9dfe:	0a08      	lsrs	r0, r1, #8
    9e00:	7050      	strb	r0, [r2, #1]
    9e02:	0c08      	lsrs	r0, r1, #16
    9e04:	7090      	strb	r0, [r2, #2]
    9e06:	0e08      	lsrs	r0, r1, #24
    9e08:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    9e0a:	22fa      	movs	r2, #250	; 0xfa
    9e0c:	0092      	lsls	r2, r2, #2
    9e0e:	4351      	muls	r1, r2
    9e10:	7c18      	ldrb	r0, [r3, #16]
    9e12:	7c5a      	ldrb	r2, [r3, #17]
    9e14:	0212      	lsls	r2, r2, #8
    9e16:	4310      	orrs	r0, r2
    9e18:	7c9a      	ldrb	r2, [r3, #18]
    9e1a:	0412      	lsls	r2, r2, #16
    9e1c:	4302      	orrs	r2, r0
    9e1e:	7cdb      	ldrb	r3, [r3, #19]
    9e20:	061b      	lsls	r3, r3, #24
    9e22:	4313      	orrs	r3, r2
    9e24:	7918      	ldrb	r0, [r3, #4]
    9e26:	2300      	movs	r3, #0
    9e28:	9300      	str	r3, [sp, #0]
    9e2a:	4b0a      	ldr	r3, [pc, #40]	; (9e54 <DutyCycleCallback+0x214>)
    9e2c:	2200      	movs	r2, #0
    9e2e:	4c0a      	ldr	r4, [pc, #40]	; (9e58 <DutyCycleCallback+0x218>)
    9e30:	47a0      	blx	r4
}
    9e32:	b007      	add	sp, #28
    9e34:	bc3c      	pop	{r2, r3, r4, r5}
    9e36:	4690      	mov	r8, r2
    9e38:	4699      	mov	r9, r3
    9e3a:	46a2      	mov	sl, r4
    9e3c:	46ab      	mov	fp, r5
    9e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    9e40:	9b05      	ldr	r3, [sp, #20]
    9e42:	2b00      	cmp	r3, #0
    9e44:	d0f5      	beq.n	9e32 <DutyCycleCallback+0x1f2>
    bool found = 0;
    9e46:	2300      	movs	r3, #0
    9e48:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    9e4a:	3b01      	subs	r3, #1
    9e4c:	9303      	str	r3, [sp, #12]
    9e4e:	e790      	b.n	9d72 <DutyCycleCallback+0x132>
    9e50:	20002310 	.word	0x20002310
    9e54:	00009c41 	.word	0x00009c41
    9e58:	0000cb35 	.word	0x0000cb35

00009e5c <setLBTTimer>:
{
    9e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e5e:	46de      	mov	lr, fp
    9e60:	4657      	mov	r7, sl
    9e62:	464e      	mov	r6, r9
    9e64:	4645      	mov	r5, r8
    9e66:	b5e0      	push	{r5, r6, r7, lr}
    9e68:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    9e6a:	4a71      	ldr	r2, [pc, #452]	; (a030 <setLBTTimer+0x1d4>)
    9e6c:	2330      	movs	r3, #48	; 0x30
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    9e6e:	5cd4      	ldrb	r4, [r2, r3]
    9e70:	0023      	movs	r3, r4
    9e72:	3358      	adds	r3, #88	; 0x58
    9e74:	009b      	lsls	r3, r3, #2
    9e76:	18d3      	adds	r3, r2, r3
    9e78:	0019      	movs	r1, r3
    9e7a:	2032      	movs	r0, #50	; 0x32
    9e7c:	7258      	strb	r0, [r3, #9]
    9e7e:	2300      	movs	r3, #0
    9e80:	728b      	strb	r3, [r1, #10]
    9e82:	72cb      	strb	r3, [r1, #11]
    9e84:	730b      	strb	r3, [r1, #12]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    9e86:	23ae      	movs	r3, #174	; 0xae
    9e88:	33ff      	adds	r3, #255	; 0xff
    9e8a:	5cd0      	ldrb	r0, [r2, r3]
    9e8c:	4b69      	ldr	r3, [pc, #420]	; (a034 <setLBTTimer+0x1d8>)
    9e8e:	4798      	blx	r3
    9e90:	2800      	cmp	r0, #0
    9e92:	d12f      	bne.n	9ef4 <setLBTTimer+0x98>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    9e94:	4866      	ldr	r0, [pc, #408]	; (a030 <setLBTTimer+0x1d4>)
    9e96:	0023      	movs	r3, r4
    9e98:	3358      	adds	r3, #88	; 0x58
    9e9a:	009b      	lsls	r3, r3, #2
    9e9c:	18c3      	adds	r3, r0, r3
    9e9e:	7a59      	ldrb	r1, [r3, #9]
    9ea0:	7a9a      	ldrb	r2, [r3, #10]
    9ea2:	0212      	lsls	r2, r2, #8
    9ea4:	4311      	orrs	r1, r2
    9ea6:	7ada      	ldrb	r2, [r3, #11]
    9ea8:	0412      	lsls	r2, r2, #16
    9eaa:	430a      	orrs	r2, r1
    9eac:	7b19      	ldrb	r1, [r3, #12]
    9eae:	0609      	lsls	r1, r1, #24
    9eb0:	4311      	orrs	r1, r2
    9eb2:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    9eb4:	232a      	movs	r3, #42	; 0x2a
    9eb6:	56c3      	ldrsb	r3, [r0, r3]
    9eb8:	4698      	mov	r8, r3
    9eba:	2b00      	cmp	r3, #0
    9ebc:	dc00      	bgt.n	9ec0 <setLBTTimer+0x64>
    9ebe:	e08d      	b.n	9fdc <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    9ec0:	2300      	movs	r3, #0
    9ec2:	469a      	mov	sl, r3
		found = 1;
    9ec4:	3301      	adds	r3, #1
    9ec6:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    9ec8:	4a59      	ldr	r2, [pc, #356]	; (a030 <setLBTTimer+0x1d4>)
    9eca:	2330      	movs	r3, #48	; 0x30
    9ecc:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9ece:	7911      	ldrb	r1, [r2, #4]
    9ed0:	7953      	ldrb	r3, [r2, #5]
    9ed2:	021b      	lsls	r3, r3, #8
    9ed4:	430b      	orrs	r3, r1
    9ed6:	7991      	ldrb	r1, [r2, #6]
    9ed8:	0409      	lsls	r1, r1, #16
    9eda:	430b      	orrs	r3, r1
    9edc:	79d1      	ldrb	r1, [r2, #7]
    9ede:	0609      	lsls	r1, r1, #24
    9ee0:	4319      	orrs	r1, r3
    9ee2:	2600      	movs	r6, #0
    9ee4:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9ee6:	2300      	movs	r3, #0
    9ee8:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    9eea:	4653      	mov	r3, sl
    9eec:	9302      	str	r3, [sp, #8]
    9eee:	468b      	mov	fp, r1
    9ef0:	4645      	mov	r5, r8
    9ef2:	e039      	b.n	9f68 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    9ef4:	4c4e      	ldr	r4, [pc, #312]	; (a030 <setLBTTimer+0x1d4>)
    9ef6:	25ae      	movs	r5, #174	; 0xae
    9ef8:	35ff      	adds	r5, #255	; 0xff
    9efa:	5d60      	ldrb	r0, [r4, r5]
    9efc:	4b4e      	ldr	r3, [pc, #312]	; (a038 <setLBTTimer+0x1dc>)
    9efe:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    9f00:	5d60      	ldrb	r0, [r4, r5]
    9f02:	4b4e      	ldr	r3, [pc, #312]	; (a03c <setLBTTimer+0x1e0>)
    9f04:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    9f06:	232a      	movs	r3, #42	; 0x2a
    9f08:	56e3      	ldrsb	r3, [r4, r3]
    9f0a:	4698      	mov	r8, r3
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	dd68      	ble.n	9fe2 <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    9f10:	4a47      	ldr	r2, [pc, #284]	; (a030 <setLBTTimer+0x1d4>)
    9f12:	23aa      	movs	r3, #170	; 0xaa
    9f14:	33ff      	adds	r3, #255	; 0xff
    9f16:	5cd4      	ldrb	r4, [r2, r3]
    9f18:	3301      	adds	r3, #1
    9f1a:	5cd3      	ldrb	r3, [r2, r3]
    9f1c:	021b      	lsls	r3, r3, #8
    9f1e:	4323      	orrs	r3, r4
    9f20:	21ac      	movs	r1, #172	; 0xac
    9f22:	31ff      	adds	r1, #255	; 0xff
    9f24:	5c54      	ldrb	r4, [r2, r1]
    9f26:	0424      	lsls	r4, r4, #16
    9f28:	4323      	orrs	r3, r4
    9f2a:	3101      	adds	r1, #1
    9f2c:	5c54      	ldrb	r4, [r2, r1]
    9f2e:	0624      	lsls	r4, r4, #24
    9f30:	431c      	orrs	r4, r3
    9f32:	21fa      	movs	r1, #250	; 0xfa
    9f34:	0089      	lsls	r1, r1, #2
    9f36:	4b42      	ldr	r3, [pc, #264]	; (a040 <setLBTTimer+0x1e4>)
    9f38:	4798      	blx	r3
    9f3a:	1a23      	subs	r3, r4, r0
    9f3c:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    9f3e:	2301      	movs	r3, #1
    9f40:	425b      	negs	r3, r3
    9f42:	4699      	mov	r9, r3
    bool found = 0;
    9f44:	2300      	movs	r3, #0
    9f46:	9303      	str	r3, [sp, #12]
    9f48:	e7be      	b.n	9ec8 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9f4a:	3658      	adds	r6, #88	; 0x58
    9f4c:	00b6      	lsls	r6, r6, #2
    9f4e:	4b38      	ldr	r3, [pc, #224]	; (a030 <setLBTTimer+0x1d4>)
    9f50:	4698      	mov	r8, r3
    9f52:	4446      	add	r6, r8
    9f54:	4661      	mov	r1, ip
    9f56:	7271      	strb	r1, [r6, #9]
    9f58:	72b1      	strb	r1, [r6, #10]
    9f5a:	72f1      	strb	r1, [r6, #11]
    9f5c:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    9f5e:	3201      	adds	r2, #1
    9f60:	b2d2      	uxtb	r2, r2
    9f62:	0016      	movs	r6, r2
    9f64:	42aa      	cmp	r2, r5
    9f66:	da36      	bge.n	9fd6 <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    9f68:	4290      	cmp	r0, r2
    9f6a:	d0f8      	beq.n	9f5e <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9f6c:	0053      	lsls	r3, r2, #1
    9f6e:	4659      	mov	r1, fp
    9f70:	5c5c      	ldrb	r4, [r3, r1]
    9f72:	2c00      	cmp	r4, #0
    9f74:	d0f3      	beq.n	9f5e <setLBTTimer+0x102>
    9f76:	0033      	movs	r3, r6
    9f78:	3358      	adds	r3, #88	; 0x58
    9f7a:	009b      	lsls	r3, r3, #2
    9f7c:	4f2c      	ldr	r7, [pc, #176]	; (a030 <setLBTTimer+0x1d4>)
    9f7e:	46b8      	mov	r8, r7
    9f80:	4443      	add	r3, r8
    9f82:	7a5f      	ldrb	r7, [r3, #9]
    9f84:	46ba      	mov	sl, r7
    9f86:	7a9f      	ldrb	r7, [r3, #10]
    9f88:	023f      	lsls	r7, r7, #8
    9f8a:	46b8      	mov	r8, r7
    9f8c:	4657      	mov	r7, sl
    9f8e:	4641      	mov	r1, r8
    9f90:	430f      	orrs	r7, r1
    9f92:	7ad9      	ldrb	r1, [r3, #11]
    9f94:	0409      	lsls	r1, r1, #16
    9f96:	430f      	orrs	r7, r1
    9f98:	7b1b      	ldrb	r3, [r3, #12]
    9f9a:	061b      	lsls	r3, r3, #24
    9f9c:	433b      	orrs	r3, r7
    9f9e:	d0de      	beq.n	9f5e <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    9fa0:	9f02      	ldr	r7, [sp, #8]
    9fa2:	42bb      	cmp	r3, r7
    9fa4:	d9d1      	bls.n	9f4a <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    9fa6:	1bdb      	subs	r3, r3, r7
    9fa8:	3658      	adds	r6, #88	; 0x58
    9faa:	00b6      	lsls	r6, r6, #2
    9fac:	4920      	ldr	r1, [pc, #128]	; (a030 <setLBTTimer+0x1d4>)
    9fae:	4688      	mov	r8, r1
    9fb0:	4446      	add	r6, r8
    9fb2:	2109      	movs	r1, #9
    9fb4:	4688      	mov	r8, r1
    9fb6:	44b0      	add	r8, r6
    9fb8:	7273      	strb	r3, [r6, #9]
    9fba:	0a1e      	lsrs	r6, r3, #8
    9fbc:	4641      	mov	r1, r8
    9fbe:	704e      	strb	r6, [r1, #1]
    9fc0:	0c1e      	lsrs	r6, r3, #16
    9fc2:	708e      	strb	r6, [r1, #2]
    9fc4:	0e1e      	lsrs	r6, r3, #24
    9fc6:	70ce      	strb	r6, [r1, #3]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9fc8:	454b      	cmp	r3, r9
    9fca:	d8c8      	bhi.n	9f5e <setLBTTimer+0x102>
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d0c6      	beq.n	9f5e <setLBTTimer+0x102>
    9fd0:	4699      	mov	r9, r3
					found = 1;
    9fd2:	9403      	str	r4, [sp, #12]
    9fd4:	e7c3      	b.n	9f5e <setLBTTimer+0x102>
	if((found == 1) && minim)
    9fd6:	9b03      	ldr	r3, [sp, #12]
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d002      	beq.n	9fe2 <setLBTTimer+0x186>
    9fdc:	464b      	mov	r3, r9
    9fde:	2b00      	cmp	r3, #0
    9fe0:	d107      	bne.n	9ff2 <setLBTTimer+0x196>
}
    9fe2:	2008      	movs	r0, #8
    9fe4:	b005      	add	sp, #20
    9fe6:	bc3c      	pop	{r2, r3, r4, r5}
    9fe8:	4690      	mov	r8, r2
    9fea:	4699      	mov	r9, r3
    9fec:	46a2      	mov	sl, r4
    9fee:	46ab      	mov	fp, r5
    9ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    9ff2:	4b0f      	ldr	r3, [pc, #60]	; (a030 <setLBTTimer+0x1d4>)
    9ff4:	22aa      	movs	r2, #170	; 0xaa
    9ff6:	32ff      	adds	r2, #255	; 0xff
    9ff8:	4649      	mov	r1, r9
    9ffa:	5499      	strb	r1, [r3, r2]
    9ffc:	464a      	mov	r2, r9
    9ffe:	0a11      	lsrs	r1, r2, #8
    a000:	001a      	movs	r2, r3
    a002:	32aa      	adds	r2, #170	; 0xaa
    a004:	32ff      	adds	r2, #255	; 0xff
    a006:	7051      	strb	r1, [r2, #1]
    a008:	4649      	mov	r1, r9
    a00a:	0c09      	lsrs	r1, r1, #16
    a00c:	7091      	strb	r1, [r2, #2]
    a00e:	4649      	mov	r1, r9
    a010:	0e09      	lsrs	r1, r1, #24
    a012:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    a014:	21fa      	movs	r1, #250	; 0xfa
    a016:	0089      	lsls	r1, r1, #2
    a018:	464a      	mov	r2, r9
    a01a:	4351      	muls	r1, r2
    a01c:	22ae      	movs	r2, #174	; 0xae
    a01e:	32ff      	adds	r2, #255	; 0xff
    a020:	5c98      	ldrb	r0, [r3, r2]
    a022:	2300      	movs	r3, #0
    a024:	9300      	str	r3, [sp, #0]
    a026:	4b07      	ldr	r3, [pc, #28]	; (a044 <setLBTTimer+0x1e8>)
    a028:	2200      	movs	r2, #0
    a02a:	4c07      	ldr	r4, [pc, #28]	; (a048 <setLBTTimer+0x1ec>)
    a02c:	47a0      	blx	r4
    a02e:	e7d8      	b.n	9fe2 <setLBTTimer+0x186>
    a030:	20002310 	.word	0x20002310
    a034:	0000cccd 	.word	0x0000cccd
    a038:	0000ce4d 	.word	0x0000ce4d
    a03c:	0000cce1 	.word	0x0000cce1
    a040:	00014509 	.word	0x00014509
    a044:	0000a04d 	.word	0x0000a04d
    a048:	0000cb35 	.word	0x0000cb35

0000a04c <LBTChannelPauseCallback>:
{
    a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a04e:	46de      	mov	lr, fp
    a050:	4657      	mov	r7, sl
    a052:	464e      	mov	r6, r9
    a054:	4645      	mov	r5, r8
    a056:	b5e0      	push	{r5, r6, r7, lr}
    a058:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    a05a:	232a      	movs	r3, #42	; 0x2a
    a05c:	4a4a      	ldr	r2, [pc, #296]	; (a188 <LBTChannelPauseCallback+0x13c>)
    a05e:	56d6      	ldrsb	r6, [r2, r3]
    a060:	2e00      	cmp	r6, #0
    a062:	dd6a      	ble.n	a13a <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    a064:	0013      	movs	r3, r2
    a066:	7915      	ldrb	r5, [r2, #4]
    a068:	7952      	ldrb	r2, [r2, #5]
    a06a:	0212      	lsls	r2, r2, #8
    a06c:	432a      	orrs	r2, r5
    a06e:	799d      	ldrb	r5, [r3, #6]
    a070:	042d      	lsls	r5, r5, #16
    a072:	432a      	orrs	r2, r5
    a074:	79dd      	ldrb	r5, [r3, #7]
    a076:	062d      	lsls	r5, r5, #24
    a078:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    a07a:	22aa      	movs	r2, #170	; 0xaa
    a07c:	32ff      	adds	r2, #255	; 0xff
    a07e:	5c9f      	ldrb	r7, [r3, r2]
    a080:	3201      	adds	r2, #1
    a082:	5c9a      	ldrb	r2, [r3, r2]
    a084:	0212      	lsls	r2, r2, #8
    a086:	433a      	orrs	r2, r7
    a088:	21ac      	movs	r1, #172	; 0xac
    a08a:	31ff      	adds	r1, #255	; 0xff
    a08c:	5c5f      	ldrb	r7, [r3, r1]
    a08e:	043f      	lsls	r7, r7, #16
    a090:	433a      	orrs	r2, r7
    a092:	3101      	adds	r1, #1
    a094:	5c5f      	ldrb	r7, [r3, r1]
    a096:	063f      	lsls	r7, r7, #24
    a098:	4317      	orrs	r7, r2
    a09a:	9703      	str	r7, [sp, #12]
    a09c:	2000      	movs	r0, #0
    a09e:	2300      	movs	r3, #0
    a0a0:	2200      	movs	r2, #0
    a0a2:	4691      	mov	r9, r2
    a0a4:	3a01      	subs	r2, #1
    a0a6:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    a0a8:	2200      	movs	r2, #0
    a0aa:	4694      	mov	ip, r2
    a0ac:	e00e      	b.n	a0cc <LBTChannelPauseCallback+0x80>
    a0ae:	3058      	adds	r0, #88	; 0x58
    a0b0:	0080      	lsls	r0, r0, #2
    a0b2:	4a35      	ldr	r2, [pc, #212]	; (a188 <LBTChannelPauseCallback+0x13c>)
    a0b4:	4692      	mov	sl, r2
    a0b6:	4450      	add	r0, sl
    a0b8:	4661      	mov	r1, ip
    a0ba:	7241      	strb	r1, [r0, #9]
    a0bc:	7281      	strb	r1, [r0, #10]
    a0be:	72c1      	strb	r1, [r0, #11]
    a0c0:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    a0c2:	3301      	adds	r3, #1
    a0c4:	b2db      	uxtb	r3, r3
    a0c6:	0018      	movs	r0, r3
    a0c8:	42b3      	cmp	r3, r6
    a0ca:	da33      	bge.n	a134 <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    a0cc:	005a      	lsls	r2, r3, #1
    a0ce:	5d54      	ldrb	r4, [r2, r5]
    a0d0:	2c00      	cmp	r4, #0
    a0d2:	d0f6      	beq.n	a0c2 <LBTChannelPauseCallback+0x76>
    a0d4:	0002      	movs	r2, r0
    a0d6:	3258      	adds	r2, #88	; 0x58
    a0d8:	0092      	lsls	r2, r2, #2
    a0da:	492b      	ldr	r1, [pc, #172]	; (a188 <LBTChannelPauseCallback+0x13c>)
    a0dc:	468a      	mov	sl, r1
    a0de:	4452      	add	r2, sl
    a0e0:	7a57      	ldrb	r7, [r2, #9]
    a0e2:	46bb      	mov	fp, r7
    a0e4:	7a97      	ldrb	r7, [r2, #10]
    a0e6:	023f      	lsls	r7, r7, #8
    a0e8:	46ba      	mov	sl, r7
    a0ea:	465f      	mov	r7, fp
    a0ec:	4651      	mov	r1, sl
    a0ee:	430f      	orrs	r7, r1
    a0f0:	7ad1      	ldrb	r1, [r2, #11]
    a0f2:	0409      	lsls	r1, r1, #16
    a0f4:	430f      	orrs	r7, r1
    a0f6:	7b12      	ldrb	r2, [r2, #12]
    a0f8:	0612      	lsls	r2, r2, #24
    a0fa:	433a      	orrs	r2, r7
    a0fc:	d0e1      	beq.n	a0c2 <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    a0fe:	9f03      	ldr	r7, [sp, #12]
    a100:	42ba      	cmp	r2, r7
    a102:	d9d4      	bls.n	a0ae <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    a104:	1bd2      	subs	r2, r2, r7
    a106:	3058      	adds	r0, #88	; 0x58
    a108:	0080      	lsls	r0, r0, #2
    a10a:	491f      	ldr	r1, [pc, #124]	; (a188 <LBTChannelPauseCallback+0x13c>)
    a10c:	468a      	mov	sl, r1
    a10e:	4450      	add	r0, sl
    a110:	2109      	movs	r1, #9
    a112:	468a      	mov	sl, r1
    a114:	4482      	add	sl, r0
    a116:	7242      	strb	r2, [r0, #9]
    a118:	0a10      	lsrs	r0, r2, #8
    a11a:	4651      	mov	r1, sl
    a11c:	7048      	strb	r0, [r1, #1]
    a11e:	0c10      	lsrs	r0, r2, #16
    a120:	7088      	strb	r0, [r1, #2]
    a122:	0e10      	lsrs	r0, r2, #24
    a124:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    a126:	4542      	cmp	r2, r8
    a128:	d8cb      	bhi.n	a0c2 <LBTChannelPauseCallback+0x76>
    a12a:	2a00      	cmp	r2, #0
    a12c:	d0c9      	beq.n	a0c2 <LBTChannelPauseCallback+0x76>
                found = 1;
    a12e:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    a130:	4690      	mov	r8, r2
    a132:	e7c6      	b.n	a0c2 <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    a134:	464b      	mov	r3, r9
    a136:	2b00      	cmp	r3, #0
    a138:	d106      	bne.n	a148 <LBTChannelPauseCallback+0xfc>
}
    a13a:	b005      	add	sp, #20
    a13c:	bc3c      	pop	{r2, r3, r4, r5}
    a13e:	4690      	mov	r8, r2
    a140:	4699      	mov	r9, r3
    a142:	46a2      	mov	sl, r4
    a144:	46ab      	mov	fp, r5
    a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    a148:	4b0f      	ldr	r3, [pc, #60]	; (a188 <LBTChannelPauseCallback+0x13c>)
    a14a:	22aa      	movs	r2, #170	; 0xaa
    a14c:	32ff      	adds	r2, #255	; 0xff
    a14e:	4641      	mov	r1, r8
    a150:	5499      	strb	r1, [r3, r2]
    a152:	4642      	mov	r2, r8
    a154:	0a11      	lsrs	r1, r2, #8
    a156:	001a      	movs	r2, r3
    a158:	32aa      	adds	r2, #170	; 0xaa
    a15a:	32ff      	adds	r2, #255	; 0xff
    a15c:	7051      	strb	r1, [r2, #1]
    a15e:	4641      	mov	r1, r8
    a160:	0c09      	lsrs	r1, r1, #16
    a162:	7091      	strb	r1, [r2, #2]
    a164:	4641      	mov	r1, r8
    a166:	0e09      	lsrs	r1, r1, #24
    a168:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    a16a:	21fa      	movs	r1, #250	; 0xfa
    a16c:	0089      	lsls	r1, r1, #2
    a16e:	4642      	mov	r2, r8
    a170:	4351      	muls	r1, r2
    a172:	22ae      	movs	r2, #174	; 0xae
    a174:	32ff      	adds	r2, #255	; 0xff
    a176:	5c98      	ldrb	r0, [r3, r2]
    a178:	2300      	movs	r3, #0
    a17a:	9300      	str	r3, [sp, #0]
    a17c:	4b03      	ldr	r3, [pc, #12]	; (a18c <LBTChannelPauseCallback+0x140>)
    a17e:	2200      	movs	r2, #0
    a180:	4c03      	ldr	r4, [pc, #12]	; (a190 <LBTChannelPauseCallback+0x144>)
    a182:	47a0      	blx	r4
}
    a184:	e7d9      	b.n	a13a <LBTChannelPauseCallback+0xee>
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	20002310 	.word	0x20002310
    a18c:	0000a04d 	.word	0x0000a04d
    a190:	0000cb35 	.word	0x0000cb35

0000a194 <JoinDutyCycleCallback>:
{   
    a194:	b510      	push	{r4, lr}
    a196:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    a198:	492e      	ldr	r1, [pc, #184]	; (a254 <JoinDutyCycleCallback+0xc0>)
    a19a:	7d0b      	ldrb	r3, [r1, #20]
    a19c:	7d4a      	ldrb	r2, [r1, #21]
    a19e:	0212      	lsls	r2, r2, #8
    a1a0:	431a      	orrs	r2, r3
    a1a2:	7d8b      	ldrb	r3, [r1, #22]
    a1a4:	041b      	lsls	r3, r3, #16
    a1a6:	431a      	orrs	r2, r3
    a1a8:	7dcb      	ldrb	r3, [r1, #23]
    a1aa:	061b      	lsls	r3, r3, #24
    a1ac:	4313      	orrs	r3, r2
    a1ae:	7919      	ldrb	r1, [r3, #4]
    a1b0:	795a      	ldrb	r2, [r3, #5]
    a1b2:	0212      	lsls	r2, r2, #8
    a1b4:	430a      	orrs	r2, r1
    a1b6:	7999      	ldrb	r1, [r3, #6]
    a1b8:	0409      	lsls	r1, r1, #16
    a1ba:	430a      	orrs	r2, r1
    a1bc:	79d9      	ldrb	r1, [r3, #7]
    a1be:	0609      	lsls	r1, r1, #24
    a1c0:	4311      	orrs	r1, r2
    a1c2:	d03c      	beq.n	a23e <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    a1c4:	4a24      	ldr	r2, [pc, #144]	; (a258 <JoinDutyCycleCallback+0xc4>)
    a1c6:	4291      	cmp	r1, r2
    a1c8:	d91e      	bls.n	a208 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    a1ca:	4a24      	ldr	r2, [pc, #144]	; (a25c <JoinDutyCycleCallback+0xc8>)
    a1cc:	4694      	mov	ip, r2
    a1ce:	4461      	add	r1, ip
    a1d0:	7119      	strb	r1, [r3, #4]
    a1d2:	0a0a      	lsrs	r2, r1, #8
    a1d4:	715a      	strb	r2, [r3, #5]
    a1d6:	0c0a      	lsrs	r2, r1, #16
    a1d8:	719a      	strb	r2, [r3, #6]
    a1da:	0e09      	lsrs	r1, r1, #24
    a1dc:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    a1de:	491d      	ldr	r1, [pc, #116]	; (a254 <JoinDutyCycleCallback+0xc0>)
    a1e0:	7d0b      	ldrb	r3, [r1, #20]
    a1e2:	7d4a      	ldrb	r2, [r1, #21]
    a1e4:	0212      	lsls	r2, r2, #8
    a1e6:	431a      	orrs	r2, r3
    a1e8:	7d8b      	ldrb	r3, [r1, #22]
    a1ea:	041b      	lsls	r3, r3, #16
    a1ec:	431a      	orrs	r2, r3
    a1ee:	7dcb      	ldrb	r3, [r1, #23]
    a1f0:	061b      	lsls	r3, r3, #24
    a1f2:	4313      	orrs	r3, r2
    a1f4:	7a18      	ldrb	r0, [r3, #8]
    a1f6:	2300      	movs	r3, #0
    a1f8:	9300      	str	r3, [sp, #0]
    a1fa:	4b19      	ldr	r3, [pc, #100]	; (a260 <JoinDutyCycleCallback+0xcc>)
    a1fc:	2200      	movs	r2, #0
    a1fe:	4919      	ldr	r1, [pc, #100]	; (a264 <JoinDutyCycleCallback+0xd0>)
    a200:	4c19      	ldr	r4, [pc, #100]	; (a268 <JoinDutyCycleCallback+0xd4>)
    a202:	47a0      	blx	r4
}
    a204:	b002      	add	sp, #8
    a206:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    a208:	22fa      	movs	r2, #250	; 0xfa
    a20a:	0092      	lsls	r2, r2, #2
    a20c:	4351      	muls	r1, r2
    a20e:	7a18      	ldrb	r0, [r3, #8]
    a210:	2300      	movs	r3, #0
    a212:	9300      	str	r3, [sp, #0]
    a214:	4b12      	ldr	r3, [pc, #72]	; (a260 <JoinDutyCycleCallback+0xcc>)
    a216:	2200      	movs	r2, #0
    a218:	4c13      	ldr	r4, [pc, #76]	; (a268 <JoinDutyCycleCallback+0xd4>)
    a21a:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    a21c:	490d      	ldr	r1, [pc, #52]	; (a254 <JoinDutyCycleCallback+0xc0>)
    a21e:	7d0b      	ldrb	r3, [r1, #20]
    a220:	7d4a      	ldrb	r2, [r1, #21]
    a222:	0212      	lsls	r2, r2, #8
    a224:	431a      	orrs	r2, r3
    a226:	7d8b      	ldrb	r3, [r1, #22]
    a228:	041b      	lsls	r3, r3, #16
    a22a:	431a      	orrs	r2, r3
    a22c:	7dcb      	ldrb	r3, [r1, #23]
    a22e:	061b      	lsls	r3, r3, #24
    a230:	4313      	orrs	r3, r2
    a232:	2200      	movs	r2, #0
    a234:	711a      	strb	r2, [r3, #4]
    a236:	715a      	strb	r2, [r3, #5]
    a238:	719a      	strb	r2, [r3, #6]
    a23a:	71da      	strb	r2, [r3, #7]
    a23c:	e7e2      	b.n	a204 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    a23e:	7a18      	ldrb	r0, [r3, #8]
    a240:	4b0a      	ldr	r3, [pc, #40]	; (a26c <JoinDutyCycleCallback+0xd8>)
    a242:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    a244:	4b03      	ldr	r3, [pc, #12]	; (a254 <JoinDutyCycleCallback+0xc0>)
    a246:	333f      	adds	r3, #63	; 0x3f
    a248:	2200      	movs	r2, #0
    a24a:	701a      	strb	r2, [r3, #0]
    a24c:	705a      	strb	r2, [r3, #1]
    a24e:	709a      	strb	r2, [r3, #2]
    a250:	70da      	strb	r2, [r3, #3]
}
    a252:	e7d7      	b.n	a204 <JoinDutyCycleCallback+0x70>
    a254:	20002310 	.word	0x20002310
    a258:	0020c49b 	.word	0x0020c49b
    a25c:	ffdf3b65 	.word	0xffdf3b65
    a260:	0000a195 	.word	0x0000a195
    a264:	7fffffff 	.word	0x7fffffff
    a268:	0000cb35 	.word	0x0000cb35
    a26c:	0000ce4d 	.word	0x0000ce4d

0000a270 <JoinBackoffCallback>:
{
    a270:	b510      	push	{r4, lr}
    a272:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    a274:	4b0c      	ldr	r3, [pc, #48]	; (a2a8 <JoinBackoffCallback+0x38>)
    a276:	2143      	movs	r1, #67	; 0x43
    a278:	5c5a      	ldrb	r2, [r3, r1]
    a27a:	3201      	adds	r2, #1
    a27c:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    a27e:	7e19      	ldrb	r1, [r3, #24]
    a280:	7e5a      	ldrb	r2, [r3, #25]
    a282:	0212      	lsls	r2, r2, #8
    a284:	4311      	orrs	r1, r2
    a286:	7e9a      	ldrb	r2, [r3, #26]
    a288:	0412      	lsls	r2, r2, #16
    a28a:	430a      	orrs	r2, r1
    a28c:	7edb      	ldrb	r3, [r3, #27]
    a28e:	061b      	lsls	r3, r3, #24
    a290:	4313      	orrs	r3, r2
    a292:	7818      	ldrb	r0, [r3, #0]
    a294:	2300      	movs	r3, #0
    a296:	9300      	str	r3, [sp, #0]
    a298:	4b04      	ldr	r3, [pc, #16]	; (a2ac <JoinBackoffCallback+0x3c>)
    a29a:	2200      	movs	r2, #0
    a29c:	4904      	ldr	r1, [pc, #16]	; (a2b0 <JoinBackoffCallback+0x40>)
    a29e:	4c05      	ldr	r4, [pc, #20]	; (a2b4 <JoinBackoffCallback+0x44>)
    a2a0:	47a0      	blx	r4
}
    a2a2:	b002      	add	sp, #8
    a2a4:	bd10      	pop	{r4, pc}
    a2a6:	46c0      	nop			; (mov r8, r8)
    a2a8:	20002310 	.word	0x20002310
    a2ac:	0000a271 	.word	0x0000a271
    a2b0:	6b49d200 	.word	0x6b49d200
    a2b4:	0000cb35 	.word	0x0000cb35

0000a2b8 <ValidateChMaskChCntl>:
{
    a2b8:	b510      	push	{r4, lr}
    a2ba:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    a2bc:	ac01      	add	r4, sp, #4
    a2be:	2204      	movs	r2, #4
    a2c0:	0020      	movs	r0, r4
    a2c2:	4b09      	ldr	r3, [pc, #36]	; (a2e8 <ValidateChMaskChCntl+0x30>)
    a2c4:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    a2c6:	8863      	ldrh	r3, [r4, #2]
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	d104      	bne.n	a2d6 <ValidateChMaskChCntl+0x1e>
    a2cc:	ab01      	add	r3, sp, #4
    a2ce:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    a2d0:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    a2d2:	2b07      	cmp	r3, #7
    a2d4:	d006      	beq.n	a2e4 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    a2d6:	a901      	add	r1, sp, #4
    a2d8:	201b      	movs	r0, #27
    a2da:	4b04      	ldr	r3, [pc, #16]	; (a2ec <ValidateChMaskChCntl+0x34>)
    a2dc:	4798      	blx	r3
    a2de:	2308      	movs	r3, #8
    a2e0:	4318      	orrs	r0, r3
    a2e2:	b2c0      	uxtb	r0, r0
}
    a2e4:	b002      	add	sp, #8
    a2e6:	bd10      	pop	{r4, pc}
    a2e8:	00017691 	.word	0x00017691
    a2ec:	00007855 	.word	0x00007855

0000a2f0 <setChannelIdStatus>:
{
    a2f0:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    a2f2:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    a2f4:	232a      	movs	r3, #42	; 0x2a
    a2f6:	4a05      	ldr	r2, [pc, #20]	; (a30c <setChannelIdStatus+0x1c>)
    a2f8:	56d3      	ldrsb	r3, [r2, r3]
    a2fa:	4298      	cmp	r0, r3
    a2fc:	db01      	blt.n	a302 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    a2fe:	200a      	movs	r0, #10
}
    a300:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a302:	7849      	ldrb	r1, [r1, #1]
    a304:	4b02      	ldr	r3, [pc, #8]	; (a310 <setChannelIdStatus+0x20>)
    a306:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a308:	2008      	movs	r0, #8
	return retVal;
    a30a:	e7f9      	b.n	a300 <setChannelIdStatus+0x10>
    a30c:	20002310 	.word	0x20002310
    a310:	00008169 	.word	0x00008169

0000a314 <ValidateDataRange>:
{
    a314:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    a316:	2352      	movs	r3, #82	; 0x52
    a318:	33ff      	adds	r3, #255	; 0xff
    a31a:	4a17      	ldr	r2, [pc, #92]	; (a378 <ValidateDataRange+0x64>)
    a31c:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    a31e:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    a320:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a322:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a324:	42a3      	cmp	r3, r4
    a326:	d213      	bcs.n	a350 <ValidateDataRange+0x3c>
}
    a328:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a32a:	202a      	movs	r0, #42	; 0x2a
    a32c:	4d12      	ldr	r5, [pc, #72]	; (a378 <ValidateDataRange+0x64>)
    a32e:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a330:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a332:	42a9      	cmp	r1, r5
    a334:	daf8      	bge.n	a328 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a336:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a338:	4293      	cmp	r3, r2
    a33a:	d1f5      	bne.n	a328 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    a33c:	42a3      	cmp	r3, r4
    a33e:	d005      	beq.n	a34c <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a340:	200a      	movs	r0, #10
	return retVal;
    a342:	e7f1      	b.n	a328 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a344:	200a      	movs	r0, #10
    a346:	e7ef      	b.n	a328 <ValidateDataRange+0x14>
    a348:	200a      	movs	r0, #10
    a34a:	e7ed      	b.n	a328 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a34c:	2008      	movs	r0, #8
    a34e:	e7eb      	b.n	a328 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    a350:	200f      	movs	r0, #15
    a352:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a354:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a356:	4293      	cmp	r3, r2
    a358:	d3e6      	bcc.n	a328 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    a35a:	42a2      	cmp	r2, r4
    a35c:	d8e4      	bhi.n	a328 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    a35e:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    a360:	20aa      	movs	r0, #170	; 0xaa
    a362:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    a364:	4d04      	ldr	r5, [pc, #16]	; (a378 <ValidateDataRange+0x64>)
    a366:	5c28      	ldrb	r0, [r5, r0]
    a368:	4288      	cmp	r0, r1
    a36a:	d9de      	bls.n	a32a <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    a36c:	4293      	cmp	r3, r2
    a36e:	d0e9      	beq.n	a344 <ValidateDataRange+0x30>
    a370:	42a3      	cmp	r3, r4
    a372:	d0e9      	beq.n	a348 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a374:	2008      	movs	r0, #8
    a376:	e7d7      	b.n	a328 <ValidateDataRange+0x14>
    a378:	20002310 	.word	0x20002310

0000a37c <setDataRange>:
{
    a37c:	b570      	push	{r4, r5, r6, lr}
    a37e:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    a380:	2012      	movs	r0, #18
    a382:	4b15      	ldr	r3, [pc, #84]	; (a3d8 <setDataRange+0x5c>)
    a384:	4798      	blx	r3
    a386:	0004      	movs	r4, r0
    a388:	2808      	cmp	r0, #8
    a38a:	d002      	beq.n	a392 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    a38c:	240a      	movs	r4, #10
}
    a38e:	0020      	movs	r0, r4
    a390:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    a392:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    a394:	222a      	movs	r2, #42	; 0x2a
    a396:	4911      	ldr	r1, [pc, #68]	; (a3dc <setDataRange+0x60>)
    a398:	568a      	ldrsb	r2, [r1, r2]
    a39a:	4293      	cmp	r3, r2
    a39c:	db01      	blt.n	a3a2 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    a39e:	3402      	adds	r4, #2
    a3a0:	e7f5      	b.n	a38e <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    a3a2:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    a3a4:	4a0d      	ldr	r2, [pc, #52]	; (a3dc <setDataRange+0x60>)
    a3a6:	7911      	ldrb	r1, [r2, #4]
    a3a8:	7950      	ldrb	r0, [r2, #5]
    a3aa:	0200      	lsls	r0, r0, #8
    a3ac:	4308      	orrs	r0, r1
    a3ae:	7991      	ldrb	r1, [r2, #6]
    a3b0:	0409      	lsls	r1, r1, #16
    a3b2:	4308      	orrs	r0, r1
    a3b4:	79d1      	ldrb	r1, [r2, #7]
    a3b6:	0609      	lsls	r1, r1, #24
    a3b8:	4301      	orrs	r1, r0
    a3ba:	005b      	lsls	r3, r3, #1
    a3bc:	185b      	adds	r3, r3, r1
    a3be:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a3c0:	4b07      	ldr	r3, [pc, #28]	; (a3e0 <setDataRange+0x64>)
    a3c2:	5cd3      	ldrb	r3, [r2, r3]
    a3c4:	2184      	movs	r1, #132	; 0x84
    a3c6:	0089      	lsls	r1, r1, #2
    a3c8:	5c50      	ldrb	r0, [r2, r1]
    a3ca:	0200      	lsls	r0, r0, #8
    a3cc:	4318      	orrs	r0, r3
    a3ce:	b2c1      	uxtb	r1, r0
    a3d0:	0a00      	lsrs	r0, r0, #8
    a3d2:	4b04      	ldr	r3, [pc, #16]	; (a3e4 <setDataRange+0x68>)
    a3d4:	4798      	blx	r3
	return retVal;
    a3d6:	e7da      	b.n	a38e <setDataRange+0x12>
    a3d8:	0000a315 	.word	0x0000a315
    a3dc:	20002310 	.word	0x20002310
    a3e0:	0000020f 	.word	0x0000020f
    a3e4:	0000be05 	.word	0x0000be05

0000a3e8 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    a3e8:	b570      	push	{r4, r5, r6, lr}
    a3ea:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a3ec:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a3ee:	2352      	movs	r3, #82	; 0x52
    a3f0:	33ff      	adds	r3, #255	; 0xff
    a3f2:	4a0f      	ldr	r2, [pc, #60]	; (a430 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    a3f4:	5cd3      	ldrb	r3, [r2, r3]
    a3f6:	42a3      	cmp	r3, r4
    a3f8:	d205      	bcs.n	a406 <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a3fa:	200f      	movs	r0, #15
    a3fc:	4b0d      	ldr	r3, [pc, #52]	; (a434 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    a3fe:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    a400:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a402:	2808      	cmp	r0, #8
    a404:	d112      	bne.n	a42c <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    a406:	490a      	ldr	r1, [pc, #40]	; (a430 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    a408:	780b      	ldrb	r3, [r1, #0]
    a40a:	784a      	ldrb	r2, [r1, #1]
    a40c:	0212      	lsls	r2, r2, #8
    a40e:	431a      	orrs	r2, r3
    a410:	788b      	ldrb	r3, [r1, #2]
    a412:	041b      	lsls	r3, r3, #16
    a414:	431a      	orrs	r2, r3
    a416:	78cb      	ldrb	r3, [r1, #3]
    a418:	061b      	lsls	r3, r3, #24
    a41a:	4313      	orrs	r3, r2
    a41c:	00e4      	lsls	r4, r4, #3
    a41e:	5ce2      	ldrb	r2, [r4, r3]
    a420:	18e4      	adds	r4, r4, r3
    a422:	7863      	ldrb	r3, [r4, #1]
    a424:	021b      	lsls	r3, r3, #8
    a426:	4313      	orrs	r3, r2
    a428:	802b      	strh	r3, [r5, #0]
	return result;
    a42a:	2308      	movs	r3, #8
}
    a42c:	0018      	movs	r0, r3
    a42e:	bd70      	pop	{r4, r5, r6, pc}
    a430:	20002310 	.word	0x20002310
    a434:	000076e5 	.word	0x000076e5

0000a438 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    a438:	b570      	push	{r4, r5, r6, lr}
    a43a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a43c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a43e:	2352      	movs	r3, #82	; 0x52
    a440:	33ff      	adds	r3, #255	; 0xff
    a442:	4a0e      	ldr	r2, [pc, #56]	; (a47c <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    a444:	5cd3      	ldrb	r3, [r2, r3]
    a446:	42a3      	cmp	r3, r4
    a448:	d205      	bcs.n	a456 <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a44a:	200f      	movs	r0, #15
    a44c:	4b0c      	ldr	r3, [pc, #48]	; (a480 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    a44e:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    a450:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a452:	2808      	cmp	r0, #8
    a454:	d110      	bne.n	a478 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    a456:	4909      	ldr	r1, [pc, #36]	; (a47c <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    a458:	780b      	ldrb	r3, [r1, #0]
    a45a:	784a      	ldrb	r2, [r1, #1]
    a45c:	0212      	lsls	r2, r2, #8
    a45e:	431a      	orrs	r2, r3
    a460:	788b      	ldrb	r3, [r1, #2]
    a462:	041b      	lsls	r3, r3, #16
    a464:	431a      	orrs	r2, r3
    a466:	78cb      	ldrb	r3, [r1, #3]
    a468:	061b      	lsls	r3, r3, #24
    a46a:	4313      	orrs	r3, r2
    a46c:	00e4      	lsls	r4, r4, #3
    a46e:	18e3      	adds	r3, r4, r3
    a470:	791b      	ldrb	r3, [r3, #4]
    a472:	b25b      	sxtb	r3, r3
    a474:	702b      	strb	r3, [r5, #0]
	return result;
    a476:	2308      	movs	r3, #8
}
    a478:	0018      	movs	r0, r3
    a47a:	bd70      	pop	{r4, r5, r6, pc}
    a47c:	20002310 	.word	0x20002310
    a480:	000076e5 	.word	0x000076e5

0000a484 <LORAREG_GetAttr_MaxPayloadT1>:
{
    a484:	b570      	push	{r4, r5, r6, lr}
    a486:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a488:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a48a:	2352      	movs	r3, #82	; 0x52
    a48c:	33ff      	adds	r3, #255	; 0xff
    a48e:	4a0e      	ldr	r2, [pc, #56]	; (a4c8 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    a490:	5cd3      	ldrb	r3, [r2, r3]
    a492:	42a3      	cmp	r3, r4
    a494:	d205      	bcs.n	a4a2 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a496:	200f      	movs	r0, #15
    a498:	4b0c      	ldr	r3, [pc, #48]	; (a4cc <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    a49a:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    a49c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a49e:	2808      	cmp	r0, #8
    a4a0:	d10f      	bne.n	a4c2 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    a4a2:	4909      	ldr	r1, [pc, #36]	; (a4c8 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    a4a4:	780b      	ldrb	r3, [r1, #0]
    a4a6:	784a      	ldrb	r2, [r1, #1]
    a4a8:	0212      	lsls	r2, r2, #8
    a4aa:	431a      	orrs	r2, r3
    a4ac:	788b      	ldrb	r3, [r1, #2]
    a4ae:	041b      	lsls	r3, r3, #16
    a4b0:	431a      	orrs	r2, r3
    a4b2:	78cb      	ldrb	r3, [r1, #3]
    a4b4:	061b      	lsls	r3, r3, #24
    a4b6:	4313      	orrs	r3, r2
    a4b8:	00e4      	lsls	r4, r4, #3
    a4ba:	18e3      	adds	r3, r4, r3
    a4bc:	789b      	ldrb	r3, [r3, #2]
    a4be:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a4c0:	2308      	movs	r3, #8
}
    a4c2:	0018      	movs	r0, r3
    a4c4:	bd70      	pop	{r4, r5, r6, pc}
    a4c6:	46c0      	nop			; (mov r8, r8)
    a4c8:	20002310 	.word	0x20002310
    a4cc:	000076e5 	.word	0x000076e5

0000a4d0 <LORAREG_GetAttr_ModulationAttrT1>:
{
    a4d0:	b570      	push	{r4, r5, r6, lr}
    a4d2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a4d4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a4d6:	2352      	movs	r3, #82	; 0x52
    a4d8:	33ff      	adds	r3, #255	; 0xff
    a4da:	4a0e      	ldr	r2, [pc, #56]	; (a514 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    a4dc:	5cd3      	ldrb	r3, [r2, r3]
    a4de:	42a3      	cmp	r3, r4
    a4e0:	d205      	bcs.n	a4ee <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a4e2:	200f      	movs	r0, #15
    a4e4:	4b0c      	ldr	r3, [pc, #48]	; (a518 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    a4e6:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    a4e8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a4ea:	2808      	cmp	r0, #8
    a4ec:	d10f      	bne.n	a50e <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    a4ee:	4909      	ldr	r1, [pc, #36]	; (a514 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    a4f0:	780b      	ldrb	r3, [r1, #0]
    a4f2:	784a      	ldrb	r2, [r1, #1]
    a4f4:	0212      	lsls	r2, r2, #8
    a4f6:	431a      	orrs	r2, r3
    a4f8:	788b      	ldrb	r3, [r1, #2]
    a4fa:	041b      	lsls	r3, r3, #16
    a4fc:	431a      	orrs	r2, r3
    a4fe:	78cb      	ldrb	r3, [r1, #3]
    a500:	061b      	lsls	r3, r3, #24
    a502:	4313      	orrs	r3, r2
    a504:	00e4      	lsls	r4, r4, #3
    a506:	18e3      	adds	r3, r4, r3
    a508:	79db      	ldrb	r3, [r3, #7]
    a50a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a50c:	2308      	movs	r3, #8
}
    a50e:	0018      	movs	r0, r3
    a510:	bd70      	pop	{r4, r5, r6, pc}
    a512:	46c0      	nop			; (mov r8, r8)
    a514:	20002310 	.word	0x20002310
    a518:	000076e5 	.word	0x000076e5

0000a51c <LORAREG_GetAttr_BandwidthAttrT1>:
{
    a51c:	b570      	push	{r4, r5, r6, lr}
    a51e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a520:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a522:	2352      	movs	r3, #82	; 0x52
    a524:	33ff      	adds	r3, #255	; 0xff
    a526:	4a0e      	ldr	r2, [pc, #56]	; (a560 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    a528:	5cd3      	ldrb	r3, [r2, r3]
    a52a:	42a3      	cmp	r3, r4
    a52c:	d205      	bcs.n	a53a <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a52e:	200f      	movs	r0, #15
    a530:	4b0c      	ldr	r3, [pc, #48]	; (a564 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    a532:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    a534:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a536:	2808      	cmp	r0, #8
    a538:	d10f      	bne.n	a55a <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    a53a:	4909      	ldr	r1, [pc, #36]	; (a560 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    a53c:	780b      	ldrb	r3, [r1, #0]
    a53e:	784a      	ldrb	r2, [r1, #1]
    a540:	0212      	lsls	r2, r2, #8
    a542:	431a      	orrs	r2, r3
    a544:	788b      	ldrb	r3, [r1, #2]
    a546:	041b      	lsls	r3, r3, #16
    a548:	431a      	orrs	r2, r3
    a54a:	78cb      	ldrb	r3, [r1, #3]
    a54c:	061b      	lsls	r3, r3, #24
    a54e:	4313      	orrs	r3, r2
    a550:	00e4      	lsls	r4, r4, #3
    a552:	18e3      	adds	r3, r4, r3
    a554:	799b      	ldrb	r3, [r3, #6]
    a556:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a558:	2308      	movs	r3, #8
}
    a55a:	0018      	movs	r0, r3
    a55c:	bd70      	pop	{r4, r5, r6, pc}
    a55e:	46c0      	nop			; (mov r8, r8)
    a560:	20002310 	.word	0x20002310
    a564:	000076e5 	.word	0x000076e5

0000a568 <LORAREG_GetAttr_SpreadFactorT1>:
{
    a568:	b570      	push	{r4, r5, r6, lr}
    a56a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a56c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a56e:	2352      	movs	r3, #82	; 0x52
    a570:	33ff      	adds	r3, #255	; 0xff
    a572:	4a0e      	ldr	r2, [pc, #56]	; (a5ac <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    a574:	5cd3      	ldrb	r3, [r2, r3]
    a576:	42a3      	cmp	r3, r4
    a578:	d205      	bcs.n	a586 <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a57a:	200f      	movs	r0, #15
    a57c:	4b0c      	ldr	r3, [pc, #48]	; (a5b0 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    a57e:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    a580:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a582:	2808      	cmp	r0, #8
    a584:	d10f      	bne.n	a5a6 <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    a586:	4909      	ldr	r1, [pc, #36]	; (a5ac <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    a588:	780b      	ldrb	r3, [r1, #0]
    a58a:	784a      	ldrb	r2, [r1, #1]
    a58c:	0212      	lsls	r2, r2, #8
    a58e:	431a      	orrs	r2, r3
    a590:	788b      	ldrb	r3, [r1, #2]
    a592:	041b      	lsls	r3, r3, #16
    a594:	431a      	orrs	r2, r3
    a596:	78cb      	ldrb	r3, [r1, #3]
    a598:	061b      	lsls	r3, r3, #24
    a59a:	4313      	orrs	r3, r2
    a59c:	00e4      	lsls	r4, r4, #3
    a59e:	18e3      	adds	r3, r4, r3
    a5a0:	795b      	ldrb	r3, [r3, #5]
    a5a2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a5a4:	2308      	movs	r3, #8
}
    a5a6:	0018      	movs	r0, r3
    a5a8:	bd70      	pop	{r4, r5, r6, pc}
    a5aa:	46c0      	nop			; (mov r8, r8)
    a5ac:	20002310 	.word	0x20002310
    a5b0:	000076e5 	.word	0x000076e5

0000a5b4 <ValidateTxFreqT1>:
{
    a5b4:	b530      	push	{r4, r5, lr}
    a5b6:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    a5b8:	2208      	movs	r2, #8
    a5ba:	4668      	mov	r0, sp
    a5bc:	4b20      	ldr	r3, [pc, #128]	; (a640 <ValidateTxFreqT1+0x8c>)
    a5be:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    a5c0:	466b      	mov	r3, sp
    a5c2:	7919      	ldrb	r1, [r3, #4]
    a5c4:	232a      	movs	r3, #42	; 0x2a
    a5c6:	4a1f      	ldr	r2, [pc, #124]	; (a644 <ValidateTxFreqT1+0x90>)
    a5c8:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a5ca:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    a5cc:	4299      	cmp	r1, r3
    a5ce:	dd00      	ble.n	a5d2 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    a5d0:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a5d2:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    a5d4:	4d1b      	ldr	r5, [pc, #108]	; (a644 <ValidateTxFreqT1+0x90>)
    a5d6:	23a2      	movs	r3, #162	; 0xa2
    a5d8:	005b      	lsls	r3, r3, #1
    a5da:	5ceb      	ldrb	r3, [r5, r3]
    a5dc:	2246      	movs	r2, #70	; 0x46
    a5de:	32ff      	adds	r2, #255	; 0xff
    a5e0:	5caa      	ldrb	r2, [r5, r2]
    a5e2:	0212      	lsls	r2, r2, #8
    a5e4:	431a      	orrs	r2, r3
    a5e6:	23a3      	movs	r3, #163	; 0xa3
    a5e8:	005b      	lsls	r3, r3, #1
    a5ea:	5ceb      	ldrb	r3, [r5, r3]
    a5ec:	041b      	lsls	r3, r3, #16
    a5ee:	431a      	orrs	r2, r3
    a5f0:	2348      	movs	r3, #72	; 0x48
    a5f2:	33ff      	adds	r3, #255	; 0xff
    a5f4:	5ceb      	ldrb	r3, [r5, r3]
    a5f6:	061b      	lsls	r3, r3, #24
    a5f8:	4313      	orrs	r3, r2
    a5fa:	4a13      	ldr	r2, [pc, #76]	; (a648 <ValidateTxFreqT1+0x94>)
    a5fc:	434a      	muls	r2, r1
    a5fe:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a600:	429c      	cmp	r4, r3
    a602:	d01b      	beq.n	a63c <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    a604:	23aa      	movs	r3, #170	; 0xaa
    a606:	005b      	lsls	r3, r3, #1
    a608:	5ceb      	ldrb	r3, [r5, r3]
    a60a:	1ac9      	subs	r1, r1, r3
    a60c:	4b0f      	ldr	r3, [pc, #60]	; (a64c <ValidateTxFreqT1+0x98>)
    a60e:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    a610:	23a4      	movs	r3, #164	; 0xa4
    a612:	005b      	lsls	r3, r3, #1
    a614:	5ceb      	ldrb	r3, [r5, r3]
    a616:	224a      	movs	r2, #74	; 0x4a
    a618:	32ff      	adds	r2, #255	; 0xff
    a61a:	5caa      	ldrb	r2, [r5, r2]
    a61c:	0212      	lsls	r2, r2, #8
    a61e:	4313      	orrs	r3, r2
    a620:	22a5      	movs	r2, #165	; 0xa5
    a622:	0052      	lsls	r2, r2, #1
    a624:	5caa      	ldrb	r2, [r5, r2]
    a626:	0412      	lsls	r2, r2, #16
    a628:	431a      	orrs	r2, r3
    a62a:	234c      	movs	r3, #76	; 0x4c
    a62c:	33ff      	adds	r3, #255	; 0xff
    a62e:	5ceb      	ldrb	r3, [r5, r3]
    a630:	061b      	lsls	r3, r3, #24
    a632:	4313      	orrs	r3, r2
    a634:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a636:	429c      	cmp	r4, r3
    a638:	d000      	beq.n	a63c <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    a63a:	200a      	movs	r0, #10
}
    a63c:	b003      	add	sp, #12
    a63e:	bd30      	pop	{r4, r5, pc}
    a640:	00017691 	.word	0x00017691
    a644:	20002310 	.word	0x20002310
    a648:	00030d40 	.word	0x00030d40
    a64c:	00186a00 	.word	0x00186a00

0000a650 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    a650:	b5f0      	push	{r4, r5, r6, r7, lr}
    a652:	46ce      	mov	lr, r9
    a654:	4647      	mov	r7, r8
    a656:	b580      	push	{r7, lr}
    a658:	b083      	sub	sp, #12
    a65a:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    a65c:	ac01      	add	r4, sp, #4
    a65e:	2203      	movs	r2, #3
    a660:	0020      	movs	r0, r4
    a662:	4b66      	ldr	r3, [pc, #408]	; (a7fc <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    a664:	4798      	blx	r3
	uint8_t dataRate = *(uint8_t *)attrInput;
    a666:	78a5      	ldrb	r5, [r4, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a668:	2352      	movs	r3, #82	; 0x52
    a66a:	33ff      	adds	r3, #255	; 0xff
    a66c:	4a64      	ldr	r2, [pc, #400]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a66e:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    a670:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a672:	42ab      	cmp	r3, r5
    a674:	d25c      	bcs.n	a730 <LORAREG_GetAttr_NewTxChConfigT1+0xe0>
}
    a676:	0020      	movs	r0, r4
    a678:	b003      	add	sp, #12
    a67a:	bc0c      	pop	{r2, r3}
    a67c:	4690      	mov	r8, r2
    a67e:	4699      	mov	r9, r3
    a680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    a682:	466b      	mov	r3, sp
    a684:	1cdd      	adds	r5, r3, #3
    a686:	23aa      	movs	r3, #170	; 0xaa
    a688:	005b      	lsls	r3, r3, #1
    a68a:	4a5d      	ldr	r2, [pc, #372]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a68c:	5cd0      	ldrb	r0, [r2, r3]
    a68e:	002b      	movs	r3, r5
    a690:	2200      	movs	r2, #0
    a692:	2100      	movs	r1, #0
    a694:	4c5b      	ldr	r4, [pc, #364]	; (a804 <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    a696:	47a0      	blx	r4
    a698:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    a69a:	782b      	ldrb	r3, [r5, #0]
    a69c:	2b3f      	cmp	r3, #63	; 0x3f
    a69e:	d80a      	bhi.n	a6b6 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
			if( RegParams.band == ISM_NA915)
    a6a0:	232f      	movs	r3, #47	; 0x2f
    a6a2:	4a57      	ldr	r2, [pc, #348]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a6a4:	5cd3      	ldrb	r3, [r2, r3]
    a6a6:	2b02      	cmp	r3, #2
    a6a8:	d002      	beq.n	a6b0 <LORAREG_GetAttr_NewTxChConfigT1+0x60>
				radioConfig->sf = SF_12;
    a6aa:	230c      	movs	r3, #12
    a6ac:	72f3      	strb	r3, [r6, #11]
    a6ae:	e004      	b.n	a6ba <LORAREG_GetAttr_NewTxChConfigT1+0x6a>
				radioConfig->sf = SF_10;
    a6b0:	3308      	adds	r3, #8
    a6b2:	72f3      	strb	r3, [r6, #11]
    a6b4:	e001      	b.n	a6ba <LORAREG_GetAttr_NewTxChConfigT1+0x6a>
			radioConfig->sf = SF_8;
    a6b6:	2308      	movs	r3, #8
    a6b8:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    a6ba:	4b51      	ldr	r3, [pc, #324]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a6bc:	4a52      	ldr	r2, [pc, #328]	; (a808 <LORAREG_GetAttr_NewTxChConfigT1+0x1b8>)
    a6be:	5c9a      	ldrb	r2, [r3, r2]
    a6c0:	4952      	ldr	r1, [pc, #328]	; (a80c <LORAREG_GetAttr_NewTxChConfigT1+0x1bc>)
    a6c2:	5c58      	ldrb	r0, [r3, r1]
    a6c4:	0200      	lsls	r0, r0, #8
    a6c6:	4310      	orrs	r0, r2
    a6c8:	b2c1      	uxtb	r1, r0
    a6ca:	0a00      	lsrs	r0, r0, #8
    a6cc:	4b50      	ldr	r3, [pc, #320]	; (a810 <LORAREG_GetAttr_NewTxChConfigT1+0x1c0>)
    a6ce:	4798      	blx	r3
    a6d0:	e05b      	b.n	a78a <LORAREG_GetAttr_NewTxChConfigT1+0x13a>
    			radioConfig->ecrConfig.override = true;
    a6d2:	3b01      	subs	r3, #1
    a6d4:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    a6d6:	71b3      	strb	r3, [r6, #6]
    a6d8:	e085      	b.n	a7e6 <LORAREG_GetAttr_NewTxChConfigT1+0x196>
			radioConfig->bandwidth = BW_500KHZ;
    a6da:	2209      	movs	r2, #9
    a6dc:	72b2      	strb	r2, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    a6de:	4a48      	ldr	r2, [pc, #288]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a6e0:	21aa      	movs	r1, #170	; 0xaa
    a6e2:	0049      	lsls	r1, r1, #1
    a6e4:	5c51      	ldrb	r1, [r2, r1]
    a6e6:	1a5b      	subs	r3, r3, r1
    a6e8:	494a      	ldr	r1, [pc, #296]	; (a814 <LORAREG_GetAttr_NewTxChConfigT1+0x1c4>)
    a6ea:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    a6ec:	21a4      	movs	r1, #164	; 0xa4
    a6ee:	0049      	lsls	r1, r1, #1
    a6f0:	5c51      	ldrb	r1, [r2, r1]
    a6f2:	204a      	movs	r0, #74	; 0x4a
    a6f4:	30ff      	adds	r0, #255	; 0xff
    a6f6:	5c10      	ldrb	r0, [r2, r0]
    a6f8:	0200      	lsls	r0, r0, #8
    a6fa:	4308      	orrs	r0, r1
    a6fc:	21a5      	movs	r1, #165	; 0xa5
    a6fe:	0049      	lsls	r1, r1, #1
    a700:	5c51      	ldrb	r1, [r2, r1]
    a702:	0409      	lsls	r1, r1, #16
    a704:	4308      	orrs	r0, r1
    a706:	214c      	movs	r1, #76	; 0x4c
    a708:	31ff      	adds	r1, #255	; 0xff
    a70a:	5c51      	ldrb	r1, [r2, r1]
    a70c:	0609      	lsls	r1, r1, #24
    a70e:	4301      	orrs	r1, r0
    a710:	185b      	adds	r3, r3, r1
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    a712:	6033      	str	r3, [r6, #0]
			if( RegParams.band == ISM_NA915)
    a714:	232f      	movs	r3, #47	; 0x2f
    a716:	5cd3      	ldrb	r3, [r2, r3]
    a718:	2b02      	cmp	r3, #2
    a71a:	d003      	beq.n	a724 <LORAREG_GetAttr_NewTxChConfigT1+0xd4>
			if (txPower <= 26)
    a71c:	2f1a      	cmp	r7, #26
    a71e:	d804      	bhi.n	a72a <LORAREG_GetAttr_NewTxChConfigT1+0xda>
				radioConfig->txPower = txPower;
    a720:	7237      	strb	r7, [r6, #8]
    a722:	e060      	b.n	a7e6 <LORAREG_GetAttr_NewTxChConfigT1+0x196>
			    radioConfig->ecrConfig.override = false;
    a724:	2300      	movs	r3, #0
    a726:	71f3      	strb	r3, [r6, #7]
    a728:	e7f8      	b.n	a71c <LORAREG_GetAttr_NewTxChConfigT1+0xcc>
				radioConfig->txPower = 26;
    a72a:	231a      	movs	r3, #26
    a72c:	7233      	strb	r3, [r6, #8]
    a72e:	e05a      	b.n	a7e6 <LORAREG_GetAttr_NewTxChConfigT1+0x196>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR, (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    a730:	466b      	mov	r3, sp
    a732:	1d59      	adds	r1, r3, #5
    a734:	201d      	movs	r0, #29
    a736:	4b38      	ldr	r3, [pc, #224]	; (a818 <LORAREG_GetAttr_NewTxChConfigT1+0x1c8>)
    a738:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    a73a:	240a      	movs	r4, #10
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR, (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    a73c:	2808      	cmp	r0, #8
    a73e:	d19a      	bne.n	a676 <LORAREG_GetAttr_NewTxChConfigT1+0x26>
		result = GetTxChannelConfig1(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    a740:	ab01      	add	r3, sp, #4
    a742:	785a      	ldrb	r2, [r3, #1]
    a744:	4690      	mov	r8, r2
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    a746:	2228      	movs	r2, #40	; 0x28
    a748:	492d      	ldr	r1, [pc, #180]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a74a:	5c8f      	ldrb	r7, [r1, r2]
	if (transmissionType == 1) // data message (not join request), it should search in all
    a74c:	781b      	ldrb	r3, [r3, #0]
    a74e:	2b00      	cmp	r3, #0
    a750:	d097      	beq.n	a682 <LORAREG_GetAttr_NewTxChConfigT1+0x32>
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    a752:	4689      	mov	r9, r1
    a754:	232a      	movs	r3, #42	; 0x2a
    a756:	5cc8      	ldrb	r0, [r1, r3]
    a758:	466b      	mov	r3, sp
    a75a:	3303      	adds	r3, #3
    a75c:	002a      	movs	r2, r5
    a75e:	2101      	movs	r1, #1
    a760:	4c28      	ldr	r4, [pc, #160]	; (a804 <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    a762:	47a0      	blx	r4
    a764:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    a766:	464b      	mov	r3, r9
    a768:	781b      	ldrb	r3, [r3, #0]
    a76a:	464a      	mov	r2, r9
    a76c:	7852      	ldrb	r2, [r2, #1]
    a76e:	0212      	lsls	r2, r2, #8
    a770:	431a      	orrs	r2, r3
    a772:	464b      	mov	r3, r9
    a774:	789b      	ldrb	r3, [r3, #2]
    a776:	041b      	lsls	r3, r3, #16
    a778:	431a      	orrs	r2, r3
    a77a:	464b      	mov	r3, r9
    a77c:	78db      	ldrb	r3, [r3, #3]
    a77e:	061b      	lsls	r3, r3, #24
    a780:	4313      	orrs	r3, r2
    a782:	00ed      	lsls	r5, r5, #3
    a784:	18eb      	adds	r3, r5, r3
    a786:	795b      	ldrb	r3, [r3, #5]
    a788:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    a78a:	2c08      	cmp	r4, #8
    a78c:	d000      	beq.n	a790 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
    a78e:	e772      	b.n	a676 <LORAREG_GetAttr_NewTxChConfigT1+0x26>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    a790:	4643      	mov	r3, r8
    a792:	005b      	lsls	r3, r3, #1
    a794:	1aff      	subs	r7, r7, r3
    a796:	b2ff      	uxtb	r7, r7
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    a798:	466b      	mov	r3, sp
    a79a:	3303      	adds	r3, #3
    a79c:	781b      	ldrb	r3, [r3, #0]
    a79e:	22aa      	movs	r2, #170	; 0xaa
    a7a0:	0052      	lsls	r2, r2, #1
    a7a2:	4917      	ldr	r1, [pc, #92]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a7a4:	5c8a      	ldrb	r2, [r1, r2]
    a7a6:	429a      	cmp	r2, r3
    a7a8:	d997      	bls.n	a6da <LORAREG_GetAttr_NewTxChConfigT1+0x8a>
			radioConfig->bandwidth = BW_125KHZ;
    a7aa:	2207      	movs	r2, #7
    a7ac:	72b2      	strb	r2, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    a7ae:	323e      	adds	r2, #62	; 0x3e
    a7b0:	32ff      	adds	r2, #255	; 0xff
    a7b2:	5c8a      	ldrb	r2, [r1, r2]
    a7b4:	2046      	movs	r0, #70	; 0x46
    a7b6:	30ff      	adds	r0, #255	; 0xff
    a7b8:	5c08      	ldrb	r0, [r1, r0]
    a7ba:	0200      	lsls	r0, r0, #8
    a7bc:	4310      	orrs	r0, r2
    a7be:	22a3      	movs	r2, #163	; 0xa3
    a7c0:	0052      	lsls	r2, r2, #1
    a7c2:	5c8a      	ldrb	r2, [r1, r2]
    a7c4:	0412      	lsls	r2, r2, #16
    a7c6:	4310      	orrs	r0, r2
    a7c8:	2248      	movs	r2, #72	; 0x48
    a7ca:	32ff      	adds	r2, #255	; 0xff
    a7cc:	5c8a      	ldrb	r2, [r1, r2]
    a7ce:	0612      	lsls	r2, r2, #24
    a7d0:	4302      	orrs	r2, r0
    a7d2:	4812      	ldr	r0, [pc, #72]	; (a81c <LORAREG_GetAttr_NewTxChConfigT1+0x1cc>)
    a7d4:	4343      	muls	r3, r0
    a7d6:	18d3      	adds	r3, r2, r3
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    a7d8:	6033      	str	r3, [r6, #0]
			radioConfig->txPower = txPower;
    a7da:	7237      	strb	r7, [r6, #8]
			if(RegParams.band == ISM_NA915)
    a7dc:	232f      	movs	r3, #47	; 0x2f
    a7de:	5ccb      	ldrb	r3, [r1, r3]
    a7e0:	2b02      	cmp	r3, #2
    a7e2:	d100      	bne.n	a7e6 <LORAREG_GetAttr_NewTxChConfigT1+0x196>
    a7e4:	e775      	b.n	a6d2 <LORAREG_GetAttr_NewTxChConfigT1+0x82>
		radioConfig->freq_hop_period = DISABLED;
    a7e6:	2300      	movs	r3, #0
    a7e8:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    a7ea:	3301      	adds	r3, #1
    a7ec:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    a7ee:	466b      	mov	r3, sp
    a7f0:	78d9      	ldrb	r1, [r3, #3]
    a7f2:	2330      	movs	r3, #48	; 0x30
    a7f4:	4a02      	ldr	r2, [pc, #8]	; (a800 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    a7f6:	54d1      	strb	r1, [r2, r3]
    a7f8:	e73d      	b.n	a676 <LORAREG_GetAttr_NewTxChConfigT1+0x26>
    a7fa:	46c0      	nop			; (mov r8, r8)
    a7fc:	00017691 	.word	0x00017691
    a800:	20002310 	.word	0x20002310
    a804:	00007e1d 	.word	0x00007e1d
    a808:	0000020d 	.word	0x0000020d
    a80c:	0000020e 	.word	0x0000020e
    a810:	0000be05 	.word	0x0000be05
    a814:	00186a00 	.word	0x00186a00
    a818:	00007869 	.word	0x00007869
    a81c:	00030d40 	.word	0x00030d40

0000a820 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    a820:	4b2b      	ldr	r3, [pc, #172]	; (a8d0 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    a822:	4a2c      	ldr	r2, [pc, #176]	; (a8d4 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    a824:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    a826:	4a2c      	ldr	r2, [pc, #176]	; (a8d8 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    a828:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    a82a:	4a2c      	ldr	r2, [pc, #176]	; (a8dc <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    a82c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    a82e:	4a2c      	ldr	r2, [pc, #176]	; (a8e0 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    a830:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a832:	4a2c      	ldr	r2, [pc, #176]	; (a8e4 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    a834:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a836:	4a2c      	ldr	r2, [pc, #176]	; (a8e8 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    a838:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a83a:	4a2c      	ldr	r2, [pc, #176]	; (a8ec <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    a83c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a83e:	4a2c      	ldr	r2, [pc, #176]	; (a8f0 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    a840:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a842:	4a2c      	ldr	r2, [pc, #176]	; (a8f4 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    a844:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a846:	4a2c      	ldr	r2, [pc, #176]	; (a8f8 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    a848:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a84a:	4a2c      	ldr	r2, [pc, #176]	; (a8fc <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    a84c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    a84e:	4a2c      	ldr	r2, [pc, #176]	; (a900 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    a850:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a852:	4a2c      	ldr	r2, [pc, #176]	; (a904 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    a854:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a856:	4a2c      	ldr	r2, [pc, #176]	; (a908 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    a858:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    a85a:	4a2c      	ldr	r2, [pc, #176]	; (a90c <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    a85c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a85e:	492c      	ldr	r1, [pc, #176]	; (a910 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    a860:	2280      	movs	r2, #128	; 0x80
    a862:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    a864:	4a2b      	ldr	r2, [pc, #172]	; (a914 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    a866:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    a868:	492b      	ldr	r1, [pc, #172]	; (a918 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    a86a:	228c      	movs	r2, #140	; 0x8c
    a86c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    a86e:	492b      	ldr	r1, [pc, #172]	; (a91c <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a870:	3204      	adds	r2, #4
    a872:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    a874:	492a      	ldr	r1, [pc, #168]	; (a920 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    a876:	3204      	adds	r2, #4
    a878:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    a87a:	492a      	ldr	r1, [pc, #168]	; (a924 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    a87c:	3204      	adds	r2, #4
    a87e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a880:	4929      	ldr	r1, [pc, #164]	; (a928 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    a882:	3204      	adds	r2, #4
    a884:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a886:	4929      	ldr	r1, [pc, #164]	; (a92c <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    a888:	3204      	adds	r2, #4
    a88a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a88c:	4928      	ldr	r1, [pc, #160]	; (a930 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    a88e:	3204      	adds	r2, #4
    a890:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a892:	4928      	ldr	r1, [pc, #160]	; (a934 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    a894:	3204      	adds	r2, #4
    a896:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    a898:	4927      	ldr	r1, [pc, #156]	; (a938 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    a89a:	3204      	adds	r2, #4
    a89c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a89e:	4927      	ldr	r1, [pc, #156]	; (a93c <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    a8a0:	3204      	adds	r2, #4
    a8a2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a8a4:	4926      	ldr	r1, [pc, #152]	; (a940 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    a8a6:	3204      	adds	r2, #4
    a8a8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    a8aa:	4926      	ldr	r1, [pc, #152]	; (a944 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    a8ac:	3204      	adds	r2, #4
    a8ae:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    a8b0:	4925      	ldr	r1, [pc, #148]	; (a948 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    a8b2:	3204      	adds	r2, #4
    a8b4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a8b6:	4925      	ldr	r1, [pc, #148]	; (a94c <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    a8b8:	3204      	adds	r2, #4
    a8ba:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a8bc:	4924      	ldr	r1, [pc, #144]	; (a950 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    a8be:	3214      	adds	r2, #20
    a8c0:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    a8c2:	4924      	ldr	r1, [pc, #144]	; (a954 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    a8c4:	321c      	adds	r2, #28
    a8c6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a8c8:	4923      	ldr	r1, [pc, #140]	; (a958 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    a8ca:	3a18      	subs	r2, #24
    a8cc:	5099      	str	r1, [r3, r2]
}
    a8ce:	4770      	bx	lr
    a8d0:	20000b0c 	.word	0x20000b0c
    a8d4:	0000760d 	.word	0x0000760d
    a8d8:	0000a3e9 	.word	0x0000a3e9
    a8dc:	0000a439 	.word	0x0000a439
    a8e0:	0000a485 	.word	0x0000a485
    a8e4:	00007459 	.word	0x00007459
    a8e8:	00007469 	.word	0x00007469
    a8ec:	00007485 	.word	0x00007485
    a8f0:	00007495 	.word	0x00007495
    a8f4:	00008821 	.word	0x00008821
    a8f8:	000074a5 	.word	0x000074a5
    a8fc:	000074b5 	.word	0x000074b5
    a900:	000086f5 	.word	0x000086f5
    a904:	000077c1 	.word	0x000077c1
    a908:	00007505 	.word	0x00007505
    a90c:	00008649 	.word	0x00008649
    a910:	000085a9 	.word	0x000085a9
    a914:	00007551 	.word	0x00007551
    a918:	0000a4d1 	.word	0x0000a4d1
    a91c:	0000a51d 	.word	0x0000a51d
    a920:	0000a569 	.word	0x0000a569
    a924:	0000755b 	.word	0x0000755b
    a928:	00007565 	.word	0x00007565
    a92c:	0000756f 	.word	0x0000756f
    a930:	00007579 	.word	0x00007579
    a934:	00007585 	.word	0x00007585
    a938:	00008055 	.word	0x00008055
    a93c:	00007591 	.word	0x00007591
    a940:	00007599 	.word	0x00007599
    a944:	0000a651 	.word	0x0000a651
    a948:	00008029 	.word	0x00008029
    a94c:	000075d1 	.word	0x000075d1
    a950:	000075a1 	.word	0x000075a1
    a954:	000075b1 	.word	0x000075b1
    a958:	000075c1 	.word	0x000075c1

0000a95c <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    a95c:	4b2d      	ldr	r3, [pc, #180]	; (aa14 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    a95e:	4a2e      	ldr	r2, [pc, #184]	; (aa18 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    a960:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a962:	4a2e      	ldr	r2, [pc, #184]	; (aa1c <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    a964:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a966:	4a2e      	ldr	r2, [pc, #184]	; (aa20 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    a968:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    a96a:	4a2e      	ldr	r2, [pc, #184]	; (aa24 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    a96c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a96e:	4a2e      	ldr	r2, [pc, #184]	; (aa28 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    a970:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a972:	4a2e      	ldr	r2, [pc, #184]	; (aa2c <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    a974:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a976:	4a2e      	ldr	r2, [pc, #184]	; (aa30 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    a978:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a97a:	4a2e      	ldr	r2, [pc, #184]	; (aa34 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    a97c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a97e:	4a2e      	ldr	r2, [pc, #184]	; (aa38 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    a980:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a982:	4a2e      	ldr	r2, [pc, #184]	; (aa3c <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    a984:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a986:	4a2e      	ldr	r2, [pc, #184]	; (aa40 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    a988:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a98a:	4a2e      	ldr	r2, [pc, #184]	; (aa44 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    a98c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a98e:	4a2e      	ldr	r2, [pc, #184]	; (aa48 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    a990:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a992:	4a2e      	ldr	r2, [pc, #184]	; (aa4c <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    a994:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    a996:	4a2e      	ldr	r2, [pc, #184]	; (aa50 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    a998:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a99a:	492e      	ldr	r1, [pc, #184]	; (aa54 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    a99c:	2280      	movs	r2, #128	; 0x80
    a99e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    a9a0:	4a2d      	ldr	r2, [pc, #180]	; (aa58 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    a9a2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a9a4:	492d      	ldr	r1, [pc, #180]	; (aa5c <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    a9a6:	228c      	movs	r2, #140	; 0x8c
    a9a8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a9aa:	492d      	ldr	r1, [pc, #180]	; (aa60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    a9ac:	3204      	adds	r2, #4
    a9ae:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a9b0:	492c      	ldr	r1, [pc, #176]	; (aa64 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    a9b2:	3204      	adds	r2, #4
    a9b4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    a9b6:	492c      	ldr	r1, [pc, #176]	; (aa68 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    a9b8:	3204      	adds	r2, #4
    a9ba:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a9bc:	492b      	ldr	r1, [pc, #172]	; (aa6c <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    a9be:	3204      	adds	r2, #4
    a9c0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a9c2:	492b      	ldr	r1, [pc, #172]	; (aa70 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    a9c4:	3204      	adds	r2, #4
    a9c6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a9c8:	492a      	ldr	r1, [pc, #168]	; (aa74 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    a9ca:	3204      	adds	r2, #4
    a9cc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a9ce:	492a      	ldr	r1, [pc, #168]	; (aa78 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    a9d0:	3204      	adds	r2, #4
    a9d2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    a9d4:	4929      	ldr	r1, [pc, #164]	; (aa7c <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    a9d6:	3204      	adds	r2, #4
    a9d8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a9da:	4929      	ldr	r1, [pc, #164]	; (aa80 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    a9dc:	3204      	adds	r2, #4
    a9de:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a9e0:	4928      	ldr	r1, [pc, #160]	; (aa84 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    a9e2:	3204      	adds	r2, #4
    a9e4:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a9e6:	4928      	ldr	r1, [pc, #160]	; (aa88 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    a9e8:	3204      	adds	r2, #4
    a9ea:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a9ec:	4927      	ldr	r1, [pc, #156]	; (aa8c <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    a9ee:	3204      	adds	r2, #4
    a9f0:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a9f2:	4927      	ldr	r1, [pc, #156]	; (aa90 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    a9f4:	3204      	adds	r2, #4
    a9f6:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a9f8:	4926      	ldr	r1, [pc, #152]	; (aa94 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    a9fa:	320c      	adds	r2, #12
    a9fc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a9fe:	4926      	ldr	r1, [pc, #152]	; (aa98 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    aa00:	3208      	adds	r2, #8
    aa02:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    aa04:	4925      	ldr	r1, [pc, #148]	; (aa9c <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    aa06:	321c      	adds	r2, #28
    aa08:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    aa0a:	4925      	ldr	r1, [pc, #148]	; (aaa0 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    aa0c:	3a18      	subs	r2, #24
    aa0e:	5099      	str	r1, [r3, r2]
}
    aa10:	4770      	bx	lr
    aa12:	46c0      	nop			; (mov r8, r8)
    aa14:	20000b0c 	.word	0x20000b0c
    aa18:	00008b7d 	.word	0x00008b7d
    aa1c:	00007aa9 	.word	0x00007aa9
    aa20:	00007a69 	.word	0x00007a69
    aa24:	00007a29 	.word	0x00007a29
    aa28:	00007459 	.word	0x00007459
    aa2c:	00007469 	.word	0x00007469
    aa30:	00007485 	.word	0x00007485
    aa34:	00007495 	.word	0x00007495
    aa38:	00008821 	.word	0x00008821
    aa3c:	000074a5 	.word	0x000074a5
    aa40:	000074b5 	.word	0x000074b5
    aa44:	00008a81 	.word	0x00008a81
    aa48:	000077c1 	.word	0x000077c1
    aa4c:	00007505 	.word	0x00007505
    aa50:	00008a15 	.word	0x00008a15
    aa54:	000085a9 	.word	0x000085a9
    aa58:	00007779 	.word	0x00007779
    aa5c:	000079e9 	.word	0x000079e9
    aa60:	000079a9 	.word	0x000079a9
    aa64:	00007969 	.word	0x00007969
    aa68:	00008881 	.word	0x00008881
    aa6c:	00007565 	.word	0x00007565
    aa70:	0000756f 	.word	0x0000756f
    aa74:	00007579 	.word	0x00007579
    aa78:	00007585 	.word	0x00007585
    aa7c:	00008055 	.word	0x00008055
    aa80:	00007591 	.word	0x00007591
    aa84:	00007599 	.word	0x00007599
    aa88:	0000943d 	.word	0x0000943d
    aa8c:	00009411 	.word	0x00009411
    aa90:	000075d1 	.word	0x000075d1
    aa94:	00008839 	.word	0x00008839
    aa98:	000075a1 	.word	0x000075a1
    aa9c:	000075b1 	.word	0x000075b1
    aaa0:	000075c1 	.word	0x000075c1

0000aaa4 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    aaa4:	4b2d      	ldr	r3, [pc, #180]	; (ab5c <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    aaa6:	4a2e      	ldr	r2, [pc, #184]	; (ab60 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    aaa8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    aaaa:	4a2e      	ldr	r2, [pc, #184]	; (ab64 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    aaac:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    aaae:	4a2e      	ldr	r2, [pc, #184]	; (ab68 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    aab0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    aab2:	4a2e      	ldr	r2, [pc, #184]	; (ab6c <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    aab4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    aab6:	4a2e      	ldr	r2, [pc, #184]	; (ab70 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    aab8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    aaba:	4a2e      	ldr	r2, [pc, #184]	; (ab74 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    aabc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    aabe:	4a2e      	ldr	r2, [pc, #184]	; (ab78 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    aac0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    aac2:	4a2e      	ldr	r2, [pc, #184]	; (ab7c <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    aac4:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    aac6:	4a2e      	ldr	r2, [pc, #184]	; (ab80 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    aac8:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    aaca:	4a2e      	ldr	r2, [pc, #184]	; (ab84 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    aacc:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    aace:	4a2e      	ldr	r2, [pc, #184]	; (ab88 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    aad0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    aad2:	4a2e      	ldr	r2, [pc, #184]	; (ab8c <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    aad4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    aad6:	4a2e      	ldr	r2, [pc, #184]	; (ab90 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    aad8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    aada:	4a2e      	ldr	r2, [pc, #184]	; (ab94 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    aadc:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    aade:	4a2e      	ldr	r2, [pc, #184]	; (ab98 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    aae0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    aae2:	492e      	ldr	r1, [pc, #184]	; (ab9c <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    aae4:	2280      	movs	r2, #128	; 0x80
    aae6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    aae8:	492d      	ldr	r1, [pc, #180]	; (aba0 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    aaea:	320c      	adds	r2, #12
    aaec:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    aaee:	492d      	ldr	r1, [pc, #180]	; (aba4 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    aaf0:	3204      	adds	r2, #4
    aaf2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    aaf4:	492c      	ldr	r1, [pc, #176]	; (aba8 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    aaf6:	3204      	adds	r2, #4
    aaf8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    aafa:	492c      	ldr	r1, [pc, #176]	; (abac <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    aafc:	3208      	adds	r2, #8
    aafe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ab00:	492b      	ldr	r1, [pc, #172]	; (abb0 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    ab02:	3204      	adds	r2, #4
    ab04:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ab06:	492b      	ldr	r1, [pc, #172]	; (abb4 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    ab08:	3204      	adds	r2, #4
    ab0a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ab0c:	492a      	ldr	r1, [pc, #168]	; (abb8 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    ab0e:	3204      	adds	r2, #4
    ab10:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ab12:	492a      	ldr	r1, [pc, #168]	; (abbc <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    ab14:	3204      	adds	r2, #4
    ab16:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ab18:	4929      	ldr	r1, [pc, #164]	; (abc0 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    ab1a:	3204      	adds	r2, #4
    ab1c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ab1e:	4929      	ldr	r1, [pc, #164]	; (abc4 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    ab20:	3204      	adds	r2, #4
    ab22:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ab24:	4928      	ldr	r1, [pc, #160]	; (abc8 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    ab26:	3204      	adds	r2, #4
    ab28:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    ab2a:	4928      	ldr	r1, [pc, #160]	; (abcc <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    ab2c:	3204      	adds	r2, #4
    ab2e:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ab30:	4927      	ldr	r1, [pc, #156]	; (abd0 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    ab32:	3204      	adds	r2, #4
    ab34:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    ab36:	4927      	ldr	r1, [pc, #156]	; (abd4 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    ab38:	320c      	adds	r2, #12
    ab3a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ab3c:	4926      	ldr	r1, [pc, #152]	; (abd8 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    ab3e:	3208      	adds	r2, #8
    ab40:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    ab42:	4926      	ldr	r1, [pc, #152]	; (abdc <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    ab44:	321c      	adds	r2, #28
    ab46:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ab48:	4925      	ldr	r1, [pc, #148]	; (abe0 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    ab4a:	3a18      	subs	r2, #24
    ab4c:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    ab4e:	4a25      	ldr	r2, [pc, #148]	; (abe4 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    ab50:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    ab52:	4925      	ldr	r1, [pc, #148]	; (abe8 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    ab54:	2298      	movs	r2, #152	; 0x98
    ab56:	5099      	str	r1, [r3, r2]
}
    ab58:	4770      	bx	lr
    ab5a:	46c0      	nop			; (mov r8, r8)
    ab5c:	20000b0c 	.word	0x20000b0c
    ab60:	00008cb9 	.word	0x00008cb9
    ab64:	00007aa9 	.word	0x00007aa9
    ab68:	00007a69 	.word	0x00007a69
    ab6c:	00007aed 	.word	0x00007aed
    ab70:	00007459 	.word	0x00007459
    ab74:	00007469 	.word	0x00007469
    ab78:	00007485 	.word	0x00007485
    ab7c:	00007495 	.word	0x00007495
    ab80:	00008821 	.word	0x00008821
    ab84:	000074a5 	.word	0x000074a5
    ab88:	000074b5 	.word	0x000074b5
    ab8c:	00008a81 	.word	0x00008a81
    ab90:	000077c1 	.word	0x000077c1
    ab94:	00007505 	.word	0x00007505
    ab98:	00008bc5 	.word	0x00008bc5
    ab9c:	000085a9 	.word	0x000085a9
    aba0:	000079e9 	.word	0x000079e9
    aba4:	000079a9 	.word	0x000079a9
    aba8:	00007969 	.word	0x00007969
    abac:	00007565 	.word	0x00007565
    abb0:	0000756f 	.word	0x0000756f
    abb4:	00007579 	.word	0x00007579
    abb8:	00007585 	.word	0x00007585
    abbc:	00008055 	.word	0x00008055
    abc0:	00007591 	.word	0x00007591
    abc4:	00007599 	.word	0x00007599
    abc8:	0000943d 	.word	0x0000943d
    abcc:	00009411 	.word	0x00009411
    abd0:	000075d1 	.word	0x000075d1
    abd4:	00008839 	.word	0x00008839
    abd8:	000075a1 	.word	0x000075a1
    abdc:	000075b1 	.word	0x000075b1
    abe0:	000075c1 	.word	0x000075c1
    abe4:	00007779 	.word	0x00007779
    abe8:	00008881 	.word	0x00008881

0000abec <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    abec:	4b2b      	ldr	r3, [pc, #172]	; (ac9c <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    abee:	4a2c      	ldr	r2, [pc, #176]	; (aca0 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    abf0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    abf2:	4a2c      	ldr	r2, [pc, #176]	; (aca4 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    abf4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    abf6:	4a2c      	ldr	r2, [pc, #176]	; (aca8 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    abf8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    abfa:	4a2c      	ldr	r2, [pc, #176]	; (acac <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    abfc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    abfe:	4a2c      	ldr	r2, [pc, #176]	; (acb0 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    ac00:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ac02:	4a2c      	ldr	r2, [pc, #176]	; (acb4 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    ac04:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ac06:	4a2c      	ldr	r2, [pc, #176]	; (acb8 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    ac08:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ac0a:	4a2c      	ldr	r2, [pc, #176]	; (acbc <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    ac0c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ac0e:	4a2c      	ldr	r2, [pc, #176]	; (acc0 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    ac10:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ac12:	4a2c      	ldr	r2, [pc, #176]	; (acc4 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    ac14:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ac16:	4a2c      	ldr	r2, [pc, #176]	; (acc8 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    ac18:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    ac1a:	4a2c      	ldr	r2, [pc, #176]	; (accc <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    ac1c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ac1e:	4a2c      	ldr	r2, [pc, #176]	; (acd0 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    ac20:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ac22:	4a2c      	ldr	r2, [pc, #176]	; (acd4 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    ac24:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    ac26:	4a2c      	ldr	r2, [pc, #176]	; (acd8 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    ac28:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ac2a:	492c      	ldr	r1, [pc, #176]	; (acdc <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    ac2c:	2280      	movs	r2, #128	; 0x80
    ac2e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    ac30:	4a2b      	ldr	r2, [pc, #172]	; (ace0 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    ac32:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    ac34:	4a2b      	ldr	r2, [pc, #172]	; (ace4 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ac36:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    ac38:	492b      	ldr	r1, [pc, #172]	; (ace8 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    ac3a:	228c      	movs	r2, #140	; 0x8c
    ac3c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    ac3e:	492b      	ldr	r1, [pc, #172]	; (acec <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    ac40:	3204      	adds	r2, #4
    ac42:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ac44:	492a      	ldr	r1, [pc, #168]	; (acf0 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    ac46:	3204      	adds	r2, #4
    ac48:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ac4a:	492a      	ldr	r1, [pc, #168]	; (acf4 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    ac4c:	3208      	adds	r2, #8
    ac4e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ac50:	4929      	ldr	r1, [pc, #164]	; (acf8 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    ac52:	3204      	adds	r2, #4
    ac54:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ac56:	4929      	ldr	r1, [pc, #164]	; (acfc <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    ac58:	3204      	adds	r2, #4
    ac5a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ac5c:	4928      	ldr	r1, [pc, #160]	; (ad00 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    ac5e:	3204      	adds	r2, #4
    ac60:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ac62:	4928      	ldr	r1, [pc, #160]	; (ad04 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    ac64:	3204      	adds	r2, #4
    ac66:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ac68:	4927      	ldr	r1, [pc, #156]	; (ad08 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    ac6a:	3204      	adds	r2, #4
    ac6c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ac6e:	4927      	ldr	r1, [pc, #156]	; (ad0c <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    ac70:	3204      	adds	r2, #4
    ac72:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ac74:	4926      	ldr	r1, [pc, #152]	; (ad10 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    ac76:	3204      	adds	r2, #4
    ac78:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    ac7a:	4926      	ldr	r1, [pc, #152]	; (ad14 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    ac7c:	3204      	adds	r2, #4
    ac7e:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ac80:	4925      	ldr	r1, [pc, #148]	; (ad18 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    ac82:	3204      	adds	r2, #4
    ac84:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ac86:	4925      	ldr	r1, [pc, #148]	; (ad1c <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    ac88:	3214      	adds	r2, #20
    ac8a:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    ac8c:	4924      	ldr	r1, [pc, #144]	; (ad20 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    ac8e:	321c      	adds	r2, #28
    ac90:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ac92:	4924      	ldr	r1, [pc, #144]	; (ad24 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    ac94:	3a18      	subs	r2, #24
    ac96:	5099      	str	r1, [r3, r2]
}
    ac98:	4770      	bx	lr
    ac9a:	46c0      	nop			; (mov r8, r8)
    ac9c:	20000b0c 	.word	0x20000b0c
    aca0:	0000760d 	.word	0x0000760d
    aca4:	0000a3e9 	.word	0x0000a3e9
    aca8:	0000a439 	.word	0x0000a439
    acac:	0000a485 	.word	0x0000a485
    acb0:	00007459 	.word	0x00007459
    acb4:	00007469 	.word	0x00007469
    acb8:	00007485 	.word	0x00007485
    acbc:	00007495 	.word	0x00007495
    acc0:	00008821 	.word	0x00008821
    acc4:	000074a5 	.word	0x000074a5
    acc8:	000074b5 	.word	0x000074b5
    accc:	000086f5 	.word	0x000086f5
    acd0:	000077c1 	.word	0x000077c1
    acd4:	00007505 	.word	0x00007505
    acd8:	00008649 	.word	0x00008649
    acdc:	000085a9 	.word	0x000085a9
    ace0:	00007551 	.word	0x00007551
    ace4:	0000755b 	.word	0x0000755b
    ace8:	0000a4d1 	.word	0x0000a4d1
    acec:	0000a51d 	.word	0x0000a51d
    acf0:	0000a569 	.word	0x0000a569
    acf4:	00007565 	.word	0x00007565
    acf8:	0000756f 	.word	0x0000756f
    acfc:	00007579 	.word	0x00007579
    ad00:	00007585 	.word	0x00007585
    ad04:	00008055 	.word	0x00008055
    ad08:	00007591 	.word	0x00007591
    ad0c:	00007599 	.word	0x00007599
    ad10:	0000a651 	.word	0x0000a651
    ad14:	00008029 	.word	0x00008029
    ad18:	000075d1 	.word	0x000075d1
    ad1c:	000075a1 	.word	0x000075a1
    ad20:	000075b1 	.word	0x000075b1
    ad24:	000075c1 	.word	0x000075c1

0000ad28 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    ad28:	4b2a      	ldr	r3, [pc, #168]	; (add4 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    ad2a:	4a2b      	ldr	r2, [pc, #172]	; (add8 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    ad2c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    ad2e:	4a2b      	ldr	r2, [pc, #172]	; (addc <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    ad30:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ad32:	4a2b      	ldr	r2, [pc, #172]	; (ade0 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    ad34:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    ad36:	4a2b      	ldr	r2, [pc, #172]	; (ade4 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    ad38:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ad3a:	4a2b      	ldr	r2, [pc, #172]	; (ade8 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    ad3c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ad3e:	4a2b      	ldr	r2, [pc, #172]	; (adec <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    ad40:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ad42:	4a2b      	ldr	r2, [pc, #172]	; (adf0 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    ad44:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ad46:	4a2b      	ldr	r2, [pc, #172]	; (adf4 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    ad48:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ad4a:	4a2b      	ldr	r2, [pc, #172]	; (adf8 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    ad4c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ad4e:	4a2b      	ldr	r2, [pc, #172]	; (adfc <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    ad50:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ad52:	4a2b      	ldr	r2, [pc, #172]	; (ae00 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    ad54:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ad56:	4a2b      	ldr	r2, [pc, #172]	; (ae04 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    ad58:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ad5a:	4a2b      	ldr	r2, [pc, #172]	; (ae08 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    ad5c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ad5e:	4a2b      	ldr	r2, [pc, #172]	; (ae0c <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    ad60:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    ad62:	4a2b      	ldr	r2, [pc, #172]	; (ae10 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    ad64:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ad66:	492b      	ldr	r1, [pc, #172]	; (ae14 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    ad68:	2280      	movs	r2, #128	; 0x80
    ad6a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ad6c:	492a      	ldr	r1, [pc, #168]	; (ae18 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    ad6e:	320c      	adds	r2, #12
    ad70:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ad72:	492a      	ldr	r1, [pc, #168]	; (ae1c <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    ad74:	3204      	adds	r2, #4
    ad76:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ad78:	4929      	ldr	r1, [pc, #164]	; (ae20 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    ad7a:	3204      	adds	r2, #4
    ad7c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ad7e:	4929      	ldr	r1, [pc, #164]	; (ae24 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    ad80:	3208      	adds	r2, #8
    ad82:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ad84:	4928      	ldr	r1, [pc, #160]	; (ae28 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    ad86:	3204      	adds	r2, #4
    ad88:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ad8a:	4928      	ldr	r1, [pc, #160]	; (ae2c <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    ad8c:	3204      	adds	r2, #4
    ad8e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ad90:	4927      	ldr	r1, [pc, #156]	; (ae30 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    ad92:	3204      	adds	r2, #4
    ad94:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ad96:	4927      	ldr	r1, [pc, #156]	; (ae34 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    ad98:	3204      	adds	r2, #4
    ad9a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ad9c:	4926      	ldr	r1, [pc, #152]	; (ae38 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    ad9e:	3204      	adds	r2, #4
    ada0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ada2:	4926      	ldr	r1, [pc, #152]	; (ae3c <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    ada4:	3204      	adds	r2, #4
    ada6:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ada8:	4925      	ldr	r1, [pc, #148]	; (ae40 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    adaa:	3204      	adds	r2, #4
    adac:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    adae:	4925      	ldr	r1, [pc, #148]	; (ae44 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    adb0:	3204      	adds	r2, #4
    adb2:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    adb4:	4924      	ldr	r1, [pc, #144]	; (ae48 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    adb6:	3204      	adds	r2, #4
    adb8:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    adba:	4924      	ldr	r1, [pc, #144]	; (ae4c <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    adbc:	320c      	adds	r2, #12
    adbe:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    adc0:	4923      	ldr	r1, [pc, #140]	; (ae50 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    adc2:	3208      	adds	r2, #8
    adc4:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    adc6:	4923      	ldr	r1, [pc, #140]	; (ae54 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    adc8:	321c      	adds	r2, #28
    adca:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    adcc:	4922      	ldr	r1, [pc, #136]	; (ae58 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    adce:	3a18      	subs	r2, #24
    add0:	5099      	str	r1, [r3, r2]
}
    add2:	4770      	bx	lr
    add4:	20000b0c 	.word	0x20000b0c
    add8:	00008b7d 	.word	0x00008b7d
    addc:	00007aa9 	.word	0x00007aa9
    ade0:	00007a69 	.word	0x00007a69
    ade4:	00007a29 	.word	0x00007a29
    ade8:	00007459 	.word	0x00007459
    adec:	00007469 	.word	0x00007469
    adf0:	00007485 	.word	0x00007485
    adf4:	00007495 	.word	0x00007495
    adf8:	00008821 	.word	0x00008821
    adfc:	000074a5 	.word	0x000074a5
    ae00:	000074b5 	.word	0x000074b5
    ae04:	00008a81 	.word	0x00008a81
    ae08:	000077c1 	.word	0x000077c1
    ae0c:	00007505 	.word	0x00007505
    ae10:	00008d01 	.word	0x00008d01
    ae14:	000085a9 	.word	0x000085a9
    ae18:	000079e9 	.word	0x000079e9
    ae1c:	000079a9 	.word	0x000079a9
    ae20:	00007969 	.word	0x00007969
    ae24:	00007565 	.word	0x00007565
    ae28:	0000756f 	.word	0x0000756f
    ae2c:	00007579 	.word	0x00007579
    ae30:	00007585 	.word	0x00007585
    ae34:	00008055 	.word	0x00008055
    ae38:	00007591 	.word	0x00007591
    ae3c:	00007599 	.word	0x00007599
    ae40:	0000943d 	.word	0x0000943d
    ae44:	00009411 	.word	0x00009411
    ae48:	000075d1 	.word	0x000075d1
    ae4c:	00008839 	.word	0x00008839
    ae50:	000075a1 	.word	0x000075a1
    ae54:	000075b1 	.word	0x000075b1
    ae58:	000075c1 	.word	0x000075c1

0000ae5c <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    ae5c:	4b30      	ldr	r3, [pc, #192]	; (af20 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    ae5e:	4a31      	ldr	r2, [pc, #196]	; (af24 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    ae60:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    ae62:	4a31      	ldr	r2, [pc, #196]	; (af28 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    ae64:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ae66:	4a31      	ldr	r2, [pc, #196]	; (af2c <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    ae68:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    ae6a:	4a31      	ldr	r2, [pc, #196]	; (af30 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    ae6c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ae6e:	4a31      	ldr	r2, [pc, #196]	; (af34 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    ae70:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ae72:	4a31      	ldr	r2, [pc, #196]	; (af38 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    ae74:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ae76:	4a31      	ldr	r2, [pc, #196]	; (af3c <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    ae78:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ae7a:	4a31      	ldr	r2, [pc, #196]	; (af40 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    ae7c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ae7e:	4a31      	ldr	r2, [pc, #196]	; (af44 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    ae80:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ae82:	4a31      	ldr	r2, [pc, #196]	; (af48 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    ae84:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ae86:	4a31      	ldr	r2, [pc, #196]	; (af4c <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    ae88:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ae8a:	4a31      	ldr	r2, [pc, #196]	; (af50 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    ae8c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ae8e:	4a31      	ldr	r2, [pc, #196]	; (af54 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    ae90:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ae92:	4a31      	ldr	r2, [pc, #196]	; (af58 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    ae94:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    ae96:	4a31      	ldr	r2, [pc, #196]	; (af5c <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    ae98:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ae9a:	4931      	ldr	r1, [pc, #196]	; (af60 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    ae9c:	2280      	movs	r2, #128	; 0x80
    ae9e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    aea0:	4930      	ldr	r1, [pc, #192]	; (af64 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    aea2:	320c      	adds	r2, #12
    aea4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    aea6:	4930      	ldr	r1, [pc, #192]	; (af68 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    aea8:	3204      	adds	r2, #4
    aeaa:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    aeac:	492f      	ldr	r1, [pc, #188]	; (af6c <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    aeae:	3204      	adds	r2, #4
    aeb0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    aeb2:	492f      	ldr	r1, [pc, #188]	; (af70 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    aeb4:	3208      	adds	r2, #8
    aeb6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    aeb8:	492e      	ldr	r1, [pc, #184]	; (af74 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    aeba:	3204      	adds	r2, #4
    aebc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    aebe:	492e      	ldr	r1, [pc, #184]	; (af78 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    aec0:	3204      	adds	r2, #4
    aec2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    aec4:	492d      	ldr	r1, [pc, #180]	; (af7c <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    aec6:	3204      	adds	r2, #4
    aec8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    aeca:	492d      	ldr	r1, [pc, #180]	; (af80 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    aecc:	3204      	adds	r2, #4
    aece:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    aed0:	492c      	ldr	r1, [pc, #176]	; (af84 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    aed2:	3204      	adds	r2, #4
    aed4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    aed6:	492c      	ldr	r1, [pc, #176]	; (af88 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    aed8:	3204      	adds	r2, #4
    aeda:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    aedc:	492b      	ldr	r1, [pc, #172]	; (af8c <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    aede:	3204      	adds	r2, #4
    aee0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    aee2:	492b      	ldr	r1, [pc, #172]	; (af90 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    aee4:	3204      	adds	r2, #4
    aee6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    aee8:	492a      	ldr	r1, [pc, #168]	; (af94 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    aeea:	3204      	adds	r2, #4
    aeec:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    aeee:	492a      	ldr	r1, [pc, #168]	; (af98 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    aef0:	3204      	adds	r2, #4
    aef2:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    aef4:	4929      	ldr	r1, [pc, #164]	; (af9c <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    aef6:	3204      	adds	r2, #4
    aef8:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    aefa:	4929      	ldr	r1, [pc, #164]	; (afa0 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    aefc:	3204      	adds	r2, #4
    aefe:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    af00:	4928      	ldr	r1, [pc, #160]	; (afa4 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    af02:	3208      	adds	r2, #8
    af04:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    af06:	4928      	ldr	r1, [pc, #160]	; (afa8 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    af08:	321c      	adds	r2, #28
    af0a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    af0c:	4927      	ldr	r1, [pc, #156]	; (afac <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    af0e:	3a18      	subs	r2, #24
    af10:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    af12:	4a27      	ldr	r2, [pc, #156]	; (afb0 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    af14:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    af16:	4927      	ldr	r1, [pc, #156]	; (afb4 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    af18:	2298      	movs	r2, #152	; 0x98
    af1a:	5099      	str	r1, [r3, r2]
}
    af1c:	4770      	bx	lr
    af1e:	46c0      	nop			; (mov r8, r8)
    af20:	20000b0c 	.word	0x20000b0c
    af24:	00008cb9 	.word	0x00008cb9
    af28:	00007aa9 	.word	0x00007aa9
    af2c:	00007a69 	.word	0x00007a69
    af30:	00007aed 	.word	0x00007aed
    af34:	00007459 	.word	0x00007459
    af38:	00007469 	.word	0x00007469
    af3c:	00007485 	.word	0x00007485
    af40:	00007495 	.word	0x00007495
    af44:	00008821 	.word	0x00008821
    af48:	000074a5 	.word	0x000074a5
    af4c:	000074b5 	.word	0x000074b5
    af50:	00008a81 	.word	0x00008a81
    af54:	000077c1 	.word	0x000077c1
    af58:	00007505 	.word	0x00007505
    af5c:	00008bc5 	.word	0x00008bc5
    af60:	000085a9 	.word	0x000085a9
    af64:	000079e9 	.word	0x000079e9
    af68:	000079a9 	.word	0x000079a9
    af6c:	00007969 	.word	0x00007969
    af70:	00007565 	.word	0x00007565
    af74:	0000756f 	.word	0x0000756f
    af78:	00007579 	.word	0x00007579
    af7c:	00007585 	.word	0x00007585
    af80:	00008055 	.word	0x00008055
    af84:	00007591 	.word	0x00007591
    af88:	00007599 	.word	0x00007599
    af8c:	0000943d 	.word	0x0000943d
    af90:	00009411 	.word	0x00009411
    af94:	000075d1 	.word	0x000075d1
    af98:	000075e1 	.word	0x000075e1
    af9c:	00008d89 	.word	0x00008d89
    afa0:	00008839 	.word	0x00008839
    afa4:	000075a1 	.word	0x000075a1
    afa8:	000075b1 	.word	0x000075b1
    afac:	000075c1 	.word	0x000075c1
    afb0:	00007779 	.word	0x00007779
    afb4:	00008881 	.word	0x00008881

0000afb8 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    afb8:	4b2d      	ldr	r3, [pc, #180]	; (b070 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    afba:	4a2e      	ldr	r2, [pc, #184]	; (b074 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    afbc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    afbe:	4a2e      	ldr	r2, [pc, #184]	; (b078 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    afc0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    afc2:	4a2e      	ldr	r2, [pc, #184]	; (b07c <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    afc4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    afc6:	4a2e      	ldr	r2, [pc, #184]	; (b080 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    afc8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    afca:	4a2e      	ldr	r2, [pc, #184]	; (b084 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    afcc:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    afce:	4a2e      	ldr	r2, [pc, #184]	; (b088 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    afd0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    afd2:	4a2e      	ldr	r2, [pc, #184]	; (b08c <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    afd4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    afd6:	4a2e      	ldr	r2, [pc, #184]	; (b090 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    afd8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    afda:	4a2e      	ldr	r2, [pc, #184]	; (b094 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    afdc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    afde:	4a2e      	ldr	r2, [pc, #184]	; (b098 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    afe0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    afe2:	4a2e      	ldr	r2, [pc, #184]	; (b09c <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    afe4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    afe6:	4a2e      	ldr	r2, [pc, #184]	; (b0a0 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    afe8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    afea:	4a2e      	ldr	r2, [pc, #184]	; (b0a4 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    afec:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    afee:	4a2e      	ldr	r2, [pc, #184]	; (b0a8 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    aff0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    aff2:	4a2e      	ldr	r2, [pc, #184]	; (b0ac <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    aff4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    aff6:	492e      	ldr	r1, [pc, #184]	; (b0b0 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    aff8:	2280      	movs	r2, #128	; 0x80
    affa:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    affc:	492d      	ldr	r1, [pc, #180]	; (b0b4 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    affe:	320c      	adds	r2, #12
    b000:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b002:	492d      	ldr	r1, [pc, #180]	; (b0b8 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    b004:	3204      	adds	r2, #4
    b006:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b008:	492c      	ldr	r1, [pc, #176]	; (b0bc <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b00a:	3204      	adds	r2, #4
    b00c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b00e:	492c      	ldr	r1, [pc, #176]	; (b0c0 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    b010:	3208      	adds	r2, #8
    b012:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b014:	492b      	ldr	r1, [pc, #172]	; (b0c4 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    b016:	3204      	adds	r2, #4
    b018:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b01a:	492b      	ldr	r1, [pc, #172]	; (b0c8 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    b01c:	3204      	adds	r2, #4
    b01e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b020:	492a      	ldr	r1, [pc, #168]	; (b0cc <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    b022:	3204      	adds	r2, #4
    b024:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b026:	492a      	ldr	r1, [pc, #168]	; (b0d0 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    b028:	3204      	adds	r2, #4
    b02a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b02c:	4929      	ldr	r1, [pc, #164]	; (b0d4 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    b02e:	3204      	adds	r2, #4
    b030:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b032:	4929      	ldr	r1, [pc, #164]	; (b0d8 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    b034:	3204      	adds	r2, #4
    b036:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b038:	4928      	ldr	r1, [pc, #160]	; (b0dc <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    b03a:	3204      	adds	r2, #4
    b03c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b03e:	4928      	ldr	r1, [pc, #160]	; (b0e0 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    b040:	3204      	adds	r2, #4
    b042:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b044:	4927      	ldr	r1, [pc, #156]	; (b0e4 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    b046:	3204      	adds	r2, #4
    b048:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    b04a:	4927      	ldr	r1, [pc, #156]	; (b0e8 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    b04c:	3204      	adds	r2, #4
    b04e:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    b050:	4926      	ldr	r1, [pc, #152]	; (b0ec <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    b052:	3204      	adds	r2, #4
    b054:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b056:	4926      	ldr	r1, [pc, #152]	; (b0f0 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    b058:	3204      	adds	r2, #4
    b05a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b05c:	4925      	ldr	r1, [pc, #148]	; (b0f4 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    b05e:	3208      	adds	r2, #8
    b060:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b062:	4925      	ldr	r1, [pc, #148]	; (b0f8 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    b064:	321c      	adds	r2, #28
    b066:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b068:	4924      	ldr	r1, [pc, #144]	; (b0fc <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    b06a:	3a18      	subs	r2, #24
    b06c:	5099      	str	r1, [r3, r2]
}
    b06e:	4770      	bx	lr
    b070:	20000b0c 	.word	0x20000b0c
    b074:	00008b7d 	.word	0x00008b7d
    b078:	00007aa9 	.word	0x00007aa9
    b07c:	00007a69 	.word	0x00007a69
    b080:	00007a29 	.word	0x00007a29
    b084:	00007459 	.word	0x00007459
    b088:	00007469 	.word	0x00007469
    b08c:	00007485 	.word	0x00007485
    b090:	00007495 	.word	0x00007495
    b094:	00008821 	.word	0x00008821
    b098:	000074a5 	.word	0x000074a5
    b09c:	000074b5 	.word	0x000074b5
    b0a0:	00008a81 	.word	0x00008a81
    b0a4:	000077c1 	.word	0x000077c1
    b0a8:	00007505 	.word	0x00007505
    b0ac:	00008a15 	.word	0x00008a15
    b0b0:	000085a9 	.word	0x000085a9
    b0b4:	000079e9 	.word	0x000079e9
    b0b8:	000079a9 	.word	0x000079a9
    b0bc:	00007969 	.word	0x00007969
    b0c0:	00007565 	.word	0x00007565
    b0c4:	0000756f 	.word	0x0000756f
    b0c8:	00007579 	.word	0x00007579
    b0cc:	00007585 	.word	0x00007585
    b0d0:	00008055 	.word	0x00008055
    b0d4:	00007591 	.word	0x00007591
    b0d8:	00007599 	.word	0x00007599
    b0dc:	0000943d 	.word	0x0000943d
    b0e0:	00009411 	.word	0x00009411
    b0e4:	000075d1 	.word	0x000075d1
    b0e8:	000075e1 	.word	0x000075e1
    b0ec:	00008d89 	.word	0x00008d89
    b0f0:	00008839 	.word	0x00008839
    b0f4:	000075a1 	.word	0x000075a1
    b0f8:	000075b1 	.word	0x000075b1
    b0fc:	000075c1 	.word	0x000075c1

0000b100 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    b100:	4b0d      	ldr	r3, [pc, #52]	; (b138 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    b102:	4a0e      	ldr	r2, [pc, #56]	; (b13c <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    b104:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    b106:	4a0e      	ldr	r2, [pc, #56]	; (b140 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    b108:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    b10a:	4a0e      	ldr	r2, [pc, #56]	; (b144 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    b10c:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    b10e:	490e      	ldr	r1, [pc, #56]	; (b148 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    b110:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b112:	490e      	ldr	r1, [pc, #56]	; (b14c <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    b114:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    b116:	490e      	ldr	r1, [pc, #56]	; (b150 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    b118:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    b11a:	490e      	ldr	r1, [pc, #56]	; (b154 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    b11c:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    b11e:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b120:	4a0d      	ldr	r2, [pc, #52]	; (b158 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    b122:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    b124:	4a0d      	ldr	r2, [pc, #52]	; (b15c <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    b126:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    b128:	4a0d      	ldr	r2, [pc, #52]	; (b160 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    b12a:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    b12c:	4a0d      	ldr	r2, [pc, #52]	; (b164 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    b12e:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    b130:	490d      	ldr	r1, [pc, #52]	; (b168 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    b132:	22dc      	movs	r2, #220	; 0xdc
    b134:	5099      	str	r1, [r3, r2]
}
    b136:	4770      	bx	lr
    b138:	20000cf4 	.word	0x20000cf4
    b13c:	00007bb1 	.word	0x00007bb1
    b140:	0000a5b5 	.word	0x0000a5b5
    b144:	000076e5 	.word	0x000076e5
    b148:	000076a1 	.word	0x000076a1
    b14c:	00007b55 	.word	0x00007b55
    b150:	0000a315 	.word	0x0000a315
    b154:	00007735 	.word	0x00007735
    b158:	00007c2d 	.word	0x00007c2d
    b15c:	00007889 	.word	0x00007889
    b160:	00007855 	.word	0x00007855
    b164:	00007869 	.word	0x00007869
    b168:	0000a2b9 	.word	0x0000a2b9

0000b16c <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    b16c:	4b0d      	ldr	r3, [pc, #52]	; (b1a4 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    b16e:	4a0e      	ldr	r2, [pc, #56]	; (b1a8 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    b170:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b172:	4a0e      	ldr	r2, [pc, #56]	; (b1ac <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    b174:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    b176:	4a0e      	ldr	r2, [pc, #56]	; (b1b0 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    b178:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    b17a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b17c:	490d      	ldr	r1, [pc, #52]	; (b1b4 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    b17e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b180:	490d      	ldr	r1, [pc, #52]	; (b1b8 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    b182:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b184:	490d      	ldr	r1, [pc, #52]	; (b1bc <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    b186:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    b188:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b18a:	4a0d      	ldr	r2, [pc, #52]	; (b1c0 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    b18c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b18e:	4a0d      	ldr	r2, [pc, #52]	; (b1c4 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    b190:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b192:	4a0d      	ldr	r2, [pc, #52]	; (b1c8 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    b194:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b196:	4a0d      	ldr	r2, [pc, #52]	; (b1cc <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    b198:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b19a:	490d      	ldr	r1, [pc, #52]	; (b1d0 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    b19c:	22dc      	movs	r2, #220	; 0xdc
    b19e:	5099      	str	r1, [r3, r2]
}
    b1a0:	4770      	bx	lr
    b1a2:	46c0      	nop			; (mov r8, r8)
    b1a4:	20000cf4 	.word	0x20000cf4
    b1a8:	00007cb5 	.word	0x00007cb5
    b1ac:	00008e59 	.word	0x00008e59
    b1b0:	00007949 	.word	0x00007949
    b1b4:	00007b55 	.word	0x00007b55
    b1b8:	00007be5 	.word	0x00007be5
    b1bc:	0000774d 	.word	0x0000774d
    b1c0:	00007c2d 	.word	0x00007c2d
    b1c4:	0000788d 	.word	0x0000788d
    b1c8:	000078e1 	.word	0x000078e1
    b1cc:	00007869 	.word	0x00007869
    b1d0:	000078f5 	.word	0x000078f5

0000b1d4 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    b1d4:	4b0d      	ldr	r3, [pc, #52]	; (b20c <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    b1d6:	4a0e      	ldr	r2, [pc, #56]	; (b210 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    b1d8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b1da:	4a0e      	ldr	r2, [pc, #56]	; (b214 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    b1dc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    b1de:	4a0e      	ldr	r2, [pc, #56]	; (b218 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    b1e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    b1e2:	490e      	ldr	r1, [pc, #56]	; (b21c <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    b1e4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b1e6:	490e      	ldr	r1, [pc, #56]	; (b220 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    b1e8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b1ea:	490e      	ldr	r1, [pc, #56]	; (b224 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    b1ec:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b1ee:	490e      	ldr	r1, [pc, #56]	; (b228 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    b1f0:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    b1f2:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b1f4:	4a0d      	ldr	r2, [pc, #52]	; (b22c <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    b1f6:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b1f8:	4a0d      	ldr	r2, [pc, #52]	; (b230 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    b1fa:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b1fc:	4a0d      	ldr	r2, [pc, #52]	; (b234 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    b1fe:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b200:	4a0d      	ldr	r2, [pc, #52]	; (b238 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    b202:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b204:	490d      	ldr	r1, [pc, #52]	; (b23c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    b206:	22dc      	movs	r2, #220	; 0xdc
    b208:	5099      	str	r1, [r3, r2]
}
    b20a:	4770      	bx	lr
    b20c:	20000cf4 	.word	0x20000cf4
    b210:	00007cd1 	.word	0x00007cd1
    b214:	00008e59 	.word	0x00008e59
    b218:	00007709 	.word	0x00007709
    b21c:	000076b9 	.word	0x000076b9
    b220:	00007b55 	.word	0x00007b55
    b224:	00007be5 	.word	0x00007be5
    b228:	0000774d 	.word	0x0000774d
    b22c:	00007c2d 	.word	0x00007c2d
    b230:	0000788d 	.word	0x0000788d
    b234:	000078e1 	.word	0x000078e1
    b238:	00007869 	.word	0x00007869
    b23c:	000078f5 	.word	0x000078f5

0000b240 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    b240:	4b0d      	ldr	r3, [pc, #52]	; (b278 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    b242:	4a0e      	ldr	r2, [pc, #56]	; (b27c <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    b244:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    b246:	4a0e      	ldr	r2, [pc, #56]	; (b280 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    b248:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    b24a:	4a0e      	ldr	r2, [pc, #56]	; (b284 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    b24c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    b24e:	490e      	ldr	r1, [pc, #56]	; (b288 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    b250:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b252:	490e      	ldr	r1, [pc, #56]	; (b28c <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    b254:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    b256:	490e      	ldr	r1, [pc, #56]	; (b290 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    b258:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    b25a:	490e      	ldr	r1, [pc, #56]	; (b294 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    b25c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    b25e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b260:	4a0d      	ldr	r2, [pc, #52]	; (b298 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    b262:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    b264:	4a0d      	ldr	r2, [pc, #52]	; (b29c <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    b266:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    b268:	4a0d      	ldr	r2, [pc, #52]	; (b2a0 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    b26a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b26c:	4a0d      	ldr	r2, [pc, #52]	; (b2a4 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    b26e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    b270:	490d      	ldr	r1, [pc, #52]	; (b2a8 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    b272:	22dc      	movs	r2, #220	; 0xdc
    b274:	5099      	str	r1, [r3, r2]
}
    b276:	4770      	bx	lr
    b278:	20000cf4 	.word	0x20000cf4
    b27c:	00007bb1 	.word	0x00007bb1
    b280:	0000a5b5 	.word	0x0000a5b5
    b284:	000076e5 	.word	0x000076e5
    b288:	000076a1 	.word	0x000076a1
    b28c:	00007b55 	.word	0x00007b55
    b290:	0000a315 	.word	0x0000a315
    b294:	00007735 	.word	0x00007735
    b298:	00007c2d 	.word	0x00007c2d
    b29c:	00007889 	.word	0x00007889
    b2a0:	00007855 	.word	0x00007855
    b2a4:	00007869 	.word	0x00007869
    b2a8:	0000a2b9 	.word	0x0000a2b9

0000b2ac <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    b2ac:	4b0d      	ldr	r3, [pc, #52]	; (b2e4 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    b2ae:	4a0e      	ldr	r2, [pc, #56]	; (b2e8 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    b2b0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b2b2:	4a0e      	ldr	r2, [pc, #56]	; (b2ec <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    b2b4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    b2b6:	4a0e      	ldr	r2, [pc, #56]	; (b2f0 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    b2b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    b2ba:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b2bc:	490d      	ldr	r1, [pc, #52]	; (b2f4 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    b2be:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b2c0:	490d      	ldr	r1, [pc, #52]	; (b2f8 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    b2c2:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b2c4:	490d      	ldr	r1, [pc, #52]	; (b2fc <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    b2c6:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    b2c8:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b2ca:	4a0d      	ldr	r2, [pc, #52]	; (b300 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    b2cc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b2ce:	4a0d      	ldr	r2, [pc, #52]	; (b304 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    b2d0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b2d2:	4a0d      	ldr	r2, [pc, #52]	; (b308 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    b2d4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b2d6:	4a0d      	ldr	r2, [pc, #52]	; (b30c <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    b2d8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b2da:	490d      	ldr	r1, [pc, #52]	; (b310 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    b2dc:	22dc      	movs	r2, #220	; 0xdc
    b2de:	5099      	str	r1, [r3, r2]
}
    b2e0:	4770      	bx	lr
    b2e2:	46c0      	nop			; (mov r8, r8)
    b2e4:	20000cf4 	.word	0x20000cf4
    b2e8:	00008e7d 	.word	0x00008e7d
    b2ec:	00008e59 	.word	0x00008e59
    b2f0:	00007949 	.word	0x00007949
    b2f4:	00007b55 	.word	0x00007b55
    b2f8:	00007be5 	.word	0x00007be5
    b2fc:	0000774d 	.word	0x0000774d
    b300:	00007c2d 	.word	0x00007c2d
    b304:	0000788d 	.word	0x0000788d
    b308:	000078e1 	.word	0x000078e1
    b30c:	00007869 	.word	0x00007869
    b310:	000078f5 	.word	0x000078f5

0000b314 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    b314:	4b0d      	ldr	r3, [pc, #52]	; (b34c <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    b316:	4a0e      	ldr	r2, [pc, #56]	; (b350 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    b318:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b31a:	4a0e      	ldr	r2, [pc, #56]	; (b354 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    b31c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    b31e:	4a0e      	ldr	r2, [pc, #56]	; (b358 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    b320:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    b322:	490e      	ldr	r1, [pc, #56]	; (b35c <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    b324:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b326:	490e      	ldr	r1, [pc, #56]	; (b360 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    b328:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b32a:	490e      	ldr	r1, [pc, #56]	; (b364 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    b32c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b32e:	490e      	ldr	r1, [pc, #56]	; (b368 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    b330:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    b332:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b334:	4a0d      	ldr	r2, [pc, #52]	; (b36c <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    b336:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b338:	4a0d      	ldr	r2, [pc, #52]	; (b370 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    b33a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b33c:	4a0d      	ldr	r2, [pc, #52]	; (b374 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    b33e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b340:	4a0d      	ldr	r2, [pc, #52]	; (b378 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    b342:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b344:	490d      	ldr	r1, [pc, #52]	; (b37c <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    b346:	22dc      	movs	r2, #220	; 0xdc
    b348:	5099      	str	r1, [r3, r2]
}
    b34a:	4770      	bx	lr
    b34c:	20000cf4 	.word	0x20000cf4
    b350:	00008ead 	.word	0x00008ead
    b354:	00008e59 	.word	0x00008e59
    b358:	00007709 	.word	0x00007709
    b35c:	000076b9 	.word	0x000076b9
    b360:	00007b55 	.word	0x00007b55
    b364:	00007be5 	.word	0x00007be5
    b368:	0000774d 	.word	0x0000774d
    b36c:	00007c2d 	.word	0x00007c2d
    b370:	0000788d 	.word	0x0000788d
    b374:	000078e1 	.word	0x000078e1
    b378:	00007869 	.word	0x00007869
    b37c:	000078f5 	.word	0x000078f5

0000b380 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    b380:	4b0d      	ldr	r3, [pc, #52]	; (b3b8 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    b382:	4a0e      	ldr	r2, [pc, #56]	; (b3bc <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    b384:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b386:	4a0e      	ldr	r2, [pc, #56]	; (b3c0 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    b388:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    b38a:	4a0e      	ldr	r2, [pc, #56]	; (b3c4 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    b38c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    b38e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b390:	490d      	ldr	r1, [pc, #52]	; (b3c8 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    b392:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b394:	490d      	ldr	r1, [pc, #52]	; (b3cc <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    b396:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b398:	490d      	ldr	r1, [pc, #52]	; (b3d0 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    b39a:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    b39c:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b39e:	4a0d      	ldr	r2, [pc, #52]	; (b3d4 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    b3a0:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b3a2:	4a0d      	ldr	r2, [pc, #52]	; (b3d8 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    b3a4:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b3a6:	4a0d      	ldr	r2, [pc, #52]	; (b3dc <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    b3a8:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b3aa:	4a0d      	ldr	r2, [pc, #52]	; (b3e0 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    b3ac:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b3ae:	490d      	ldr	r1, [pc, #52]	; (b3e4 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    b3b0:	22dc      	movs	r2, #220	; 0xdc
    b3b2:	5099      	str	r1, [r3, r2]
}
    b3b4:	4770      	bx	lr
    b3b6:	46c0      	nop			; (mov r8, r8)
    b3b8:	20000cf4 	.word	0x20000cf4
    b3bc:	00008edd 	.word	0x00008edd
    b3c0:	00008e59 	.word	0x00008e59
    b3c4:	00007949 	.word	0x00007949
    b3c8:	00007b55 	.word	0x00007b55
    b3cc:	00007be5 	.word	0x00007be5
    b3d0:	0000774d 	.word	0x0000774d
    b3d4:	00007c2d 	.word	0x00007c2d
    b3d8:	0000788d 	.word	0x0000788d
    b3dc:	000078e1 	.word	0x000078e1
    b3e0:	00007869 	.word	0x00007869
    b3e4:	000078f5 	.word	0x000078f5

0000b3e8 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    b3e8:	4b0b      	ldr	r3, [pc, #44]	; (b418 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    b3ea:	4a0c      	ldr	r2, [pc, #48]	; (b41c <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    b3ec:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    b3ee:	4a0c      	ldr	r2, [pc, #48]	; (b420 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    b3f0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    b3f2:	4a0c      	ldr	r2, [pc, #48]	; (b424 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    b3f4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    b3f6:	490c      	ldr	r1, [pc, #48]	; (b428 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    b3f8:	22e4      	movs	r2, #228	; 0xe4
    b3fa:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    b3fc:	490b      	ldr	r1, [pc, #44]	; (b42c <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    b3fe:	3204      	adds	r2, #4
    b400:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    b402:	490b      	ldr	r1, [pc, #44]	; (b430 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    b404:	3a68      	subs	r2, #104	; 0x68
    b406:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b408:	490a      	ldr	r1, [pc, #40]	; (b434 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    b40a:	3204      	adds	r2, #4
    b40c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b40e:	490a      	ldr	r1, [pc, #40]	; (b438 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    b410:	325c      	adds	r2, #92	; 0x5c
    b412:	5099      	str	r1, [r3, r2]
}
    b414:	4770      	bx	lr
    b416:	46c0      	nop			; (mov r8, r8)
    b418:	20000c00 	.word	0x20000c00
    b41c:	0000a37d 	.word	0x0000a37d
    b420:	0000a2f1 	.word	0x0000a2f1
    b424:	00008f25 	.word	0x00008f25
    b428:	000080ed 	.word	0x000080ed
    b42c:	0000807d 	.word	0x0000807d
    b430:	0000965d 	.word	0x0000965d
    b434:	000095e9 	.word	0x000095e9
    b438:	00009531 	.word	0x00009531

0000b43c <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b43c:	4b0e      	ldr	r3, [pc, #56]	; (b478 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    b43e:	4a0f      	ldr	r2, [pc, #60]	; (b47c <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    b440:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    b442:	4a0f      	ldr	r2, [pc, #60]	; (b480 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    b444:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    b446:	4a0f      	ldr	r2, [pc, #60]	; (b484 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    b448:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    b44a:	4a0f      	ldr	r2, [pc, #60]	; (b488 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    b44c:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    b44e:	4a0f      	ldr	r2, [pc, #60]	; (b48c <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    b450:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b452:	4a0f      	ldr	r2, [pc, #60]	; (b490 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    b454:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    b456:	490f      	ldr	r1, [pc, #60]	; (b494 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    b458:	2280      	movs	r2, #128	; 0x80
    b45a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b45c:	490e      	ldr	r1, [pc, #56]	; (b498 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    b45e:	3204      	adds	r2, #4
    b460:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b462:	490e      	ldr	r1, [pc, #56]	; (b49c <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    b464:	3248      	adds	r2, #72	; 0x48
    b466:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b468:	490d      	ldr	r1, [pc, #52]	; (b4a0 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    b46a:	3214      	adds	r2, #20
    b46c:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    b46e:	490d      	ldr	r1, [pc, #52]	; (b4a4 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    b470:	320c      	adds	r2, #12
    b472:	5099      	str	r1, [r3, r2]
}
    b474:	4770      	bx	lr
    b476:	46c0      	nop			; (mov r8, r8)
    b478:	20000c00 	.word	0x20000c00
    b47c:	000084e5 	.word	0x000084e5
    b480:	00008319 	.word	0x00008319
    b484:	00009185 	.word	0x00009185
    b488:	000098e9 	.word	0x000098e9
    b48c:	00009061 	.word	0x00009061
    b490:	0000b6fd 	.word	0x0000b6fd
    b494:	0000965d 	.word	0x0000965d
    b498:	000095e9 	.word	0x000095e9
    b49c:	00008fbd 	.word	0x00008fbd
    b4a0:	00009531 	.word	0x00009531
    b4a4:	00007db5 	.word	0x00007db5

0000b4a8 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b4a8:	4b0f      	ldr	r3, [pc, #60]	; (b4e8 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    b4aa:	4a10      	ldr	r2, [pc, #64]	; (b4ec <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    b4ac:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b4ae:	4a10      	ldr	r2, [pc, #64]	; (b4f0 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    b4b0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    b4b2:	4a10      	ldr	r2, [pc, #64]	; (b4f4 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    b4b4:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b4b6:	4910      	ldr	r1, [pc, #64]	; (b4f8 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    b4b8:	22cc      	movs	r2, #204	; 0xcc
    b4ba:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    b4bc:	4a0f      	ldr	r2, [pc, #60]	; (b4fc <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    b4be:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    b4c0:	490f      	ldr	r1, [pc, #60]	; (b500 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    b4c2:	2280      	movs	r2, #128	; 0x80
    b4c4:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b4c6:	490f      	ldr	r1, [pc, #60]	; (b504 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    b4c8:	3204      	adds	r2, #4
    b4ca:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    b4cc:	490e      	ldr	r1, [pc, #56]	; (b508 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    b4ce:	324c      	adds	r2, #76	; 0x4c
    b4d0:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    b4d2:	4a0e      	ldr	r2, [pc, #56]	; (b50c <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    b4d4:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    b4d6:	4a0e      	ldr	r2, [pc, #56]	; (b510 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    b4d8:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b4da:	490e      	ldr	r1, [pc, #56]	; (b514 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    b4dc:	22e0      	movs	r2, #224	; 0xe0
    b4de:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    b4e0:	490d      	ldr	r1, [pc, #52]	; (b518 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    b4e2:	320c      	adds	r2, #12
    b4e4:	5099      	str	r1, [r3, r2]
}
    b4e6:	4770      	bx	lr
    b4e8:	20000c00 	.word	0x20000c00
    b4ec:	000084e5 	.word	0x000084e5
    b4f0:	00008491 	.word	0x00008491
    b4f4:	00009061 	.word	0x00009061
    b4f8:	00008fbd 	.word	0x00008fbd
    b4fc:	0000b6fd 	.word	0x0000b6fd
    b500:	0000965d 	.word	0x0000965d
    b504:	000095e9 	.word	0x000095e9
    b508:	00007d61 	.word	0x00007d61
    b50c:	00009185 	.word	0x00009185
    b510:	000098e9 	.word	0x000098e9
    b514:	00009531 	.word	0x00009531
    b518:	00007db5 	.word	0x00007db5

0000b51c <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    b51c:	4b0b      	ldr	r3, [pc, #44]	; (b54c <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    b51e:	4a0c      	ldr	r2, [pc, #48]	; (b550 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    b520:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    b522:	4a0c      	ldr	r2, [pc, #48]	; (b554 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    b524:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    b526:	4a0c      	ldr	r2, [pc, #48]	; (b558 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    b528:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    b52a:	490c      	ldr	r1, [pc, #48]	; (b55c <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    b52c:	22e4      	movs	r2, #228	; 0xe4
    b52e:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    b530:	490b      	ldr	r1, [pc, #44]	; (b560 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    b532:	3204      	adds	r2, #4
    b534:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    b536:	490b      	ldr	r1, [pc, #44]	; (b564 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    b538:	3a68      	subs	r2, #104	; 0x68
    b53a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b53c:	490a      	ldr	r1, [pc, #40]	; (b568 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    b53e:	3204      	adds	r2, #4
    b540:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b542:	490a      	ldr	r1, [pc, #40]	; (b56c <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    b544:	325c      	adds	r2, #92	; 0x5c
    b546:	5099      	str	r1, [r3, r2]
}
    b548:	4770      	bx	lr
    b54a:	46c0      	nop			; (mov r8, r8)
    b54c:	20000c00 	.word	0x20000c00
    b550:	0000a37d 	.word	0x0000a37d
    b554:	0000a2f1 	.word	0x0000a2f1
    b558:	00008f25 	.word	0x00008f25
    b55c:	000080ed 	.word	0x000080ed
    b560:	0000807d 	.word	0x0000807d
    b564:	0000965d 	.word	0x0000965d
    b568:	000095e9 	.word	0x000095e9
    b56c:	00009531 	.word	0x00009531

0000b570 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b570:	4b0d      	ldr	r3, [pc, #52]	; (b5a8 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    b572:	4a0e      	ldr	r2, [pc, #56]	; (b5ac <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    b574:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    b576:	4a0e      	ldr	r2, [pc, #56]	; (b5b0 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    b578:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    b57a:	4a0e      	ldr	r2, [pc, #56]	; (b5b4 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    b57c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b57e:	4a0e      	ldr	r2, [pc, #56]	; (b5b8 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    b580:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    b582:	490e      	ldr	r1, [pc, #56]	; (b5bc <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    b584:	2280      	movs	r2, #128	; 0x80
    b586:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b588:	490d      	ldr	r1, [pc, #52]	; (b5c0 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    b58a:	3204      	adds	r2, #4
    b58c:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b58e:	490d      	ldr	r1, [pc, #52]	; (b5c4 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    b590:	3248      	adds	r2, #72	; 0x48
    b592:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    b594:	490c      	ldr	r1, [pc, #48]	; (b5c8 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    b596:	3204      	adds	r2, #4
    b598:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b59a:	490c      	ldr	r1, [pc, #48]	; (b5cc <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    b59c:	3210      	adds	r2, #16
    b59e:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    b5a0:	490b      	ldr	r1, [pc, #44]	; (b5d0 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    b5a2:	320c      	adds	r2, #12
    b5a4:	5099      	str	r1, [r3, r2]
}
    b5a6:	4770      	bx	lr
    b5a8:	20000c00 	.word	0x20000c00
    b5ac:	000084e5 	.word	0x000084e5
    b5b0:	00008319 	.word	0x00008319
    b5b4:	00009061 	.word	0x00009061
    b5b8:	0000b6fd 	.word	0x0000b6fd
    b5bc:	0000965d 	.word	0x0000965d
    b5c0:	000095e9 	.word	0x000095e9
    b5c4:	00008fbd 	.word	0x00008fbd
    b5c8:	00007d61 	.word	0x00007d61
    b5cc:	00009531 	.word	0x00009531
    b5d0:	00007db5 	.word	0x00007db5

0000b5d4 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b5d4:	4b11      	ldr	r3, [pc, #68]	; (b61c <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    b5d6:	4a12      	ldr	r2, [pc, #72]	; (b620 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    b5d8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b5da:	4a12      	ldr	r2, [pc, #72]	; (b624 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    b5dc:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    b5de:	4912      	ldr	r1, [pc, #72]	; (b628 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    b5e0:	2288      	movs	r2, #136	; 0x88
    b5e2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    b5e4:	4a11      	ldr	r2, [pc, #68]	; (b62c <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    b5e6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b5e8:	4911      	ldr	r1, [pc, #68]	; (b630 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    b5ea:	22cc      	movs	r2, #204	; 0xcc
    b5ec:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b5ee:	4a11      	ldr	r2, [pc, #68]	; (b634 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    b5f0:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    b5f2:	4911      	ldr	r1, [pc, #68]	; (b638 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    b5f4:	2280      	movs	r2, #128	; 0x80
    b5f6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b5f8:	4910      	ldr	r1, [pc, #64]	; (b63c <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    b5fa:	3204      	adds	r2, #4
    b5fc:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    b5fe:	4910      	ldr	r1, [pc, #64]	; (b640 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    b600:	324c      	adds	r2, #76	; 0x4c
    b602:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    b604:	4a0f      	ldr	r2, [pc, #60]	; (b644 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    b606:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    b608:	4a0f      	ldr	r2, [pc, #60]	; (b648 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    b60a:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b60c:	490f      	ldr	r1, [pc, #60]	; (b64c <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    b60e:	22e0      	movs	r2, #224	; 0xe0
    b610:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    b612:	490f      	ldr	r1, [pc, #60]	; (b650 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    b614:	320c      	adds	r2, #12
    b616:	5099      	str	r1, [r3, r2]
}
    b618:	4770      	bx	lr
    b61a:	46c0      	nop			; (mov r8, r8)
    b61c:	20000c00 	.word	0x20000c00
    b620:	000084e5 	.word	0x000084e5
    b624:	00008491 	.word	0x00008491
    b628:	00009e5d 	.word	0x00009e5d
    b62c:	00009061 	.word	0x00009061
    b630:	00008fbd 	.word	0x00008fbd
    b634:	0000b6fd 	.word	0x0000b6fd
    b638:	0000965d 	.word	0x0000965d
    b63c:	000095e9 	.word	0x000095e9
    b640:	00007d61 	.word	0x00007d61
    b644:	00009185 	.word	0x00009185
    b648:	000098e9 	.word	0x000098e9
    b64c:	00009531 	.word	0x00009531
    b650:	00007db5 	.word	0x00007db5

0000b654 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b654:	4b0f      	ldr	r3, [pc, #60]	; (b694 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    b656:	4a10      	ldr	r2, [pc, #64]	; (b698 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    b658:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b65a:	4a10      	ldr	r2, [pc, #64]	; (b69c <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    b65c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    b65e:	4910      	ldr	r1, [pc, #64]	; (b6a0 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    b660:	2288      	movs	r2, #136	; 0x88
    b662:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    b664:	4a0f      	ldr	r2, [pc, #60]	; (b6a4 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    b666:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b668:	490f      	ldr	r1, [pc, #60]	; (b6a8 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    b66a:	22cc      	movs	r2, #204	; 0xcc
    b66c:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b66e:	4a0f      	ldr	r2, [pc, #60]	; (b6ac <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    b670:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    b672:	490f      	ldr	r1, [pc, #60]	; (b6b0 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    b674:	2280      	movs	r2, #128	; 0x80
    b676:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    b678:	490e      	ldr	r1, [pc, #56]	; (b6b4 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    b67a:	3204      	adds	r2, #4
    b67c:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    b67e:	490e      	ldr	r1, [pc, #56]	; (b6b8 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    b680:	324c      	adds	r2, #76	; 0x4c
    b682:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    b684:	490d      	ldr	r1, [pc, #52]	; (b6bc <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    b686:	3210      	adds	r2, #16
    b688:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    b68a:	490d      	ldr	r1, [pc, #52]	; (b6c0 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    b68c:	320c      	adds	r2, #12
    b68e:	5099      	str	r1, [r3, r2]
}
    b690:	4770      	bx	lr
    b692:	46c0      	nop			; (mov r8, r8)
    b694:	20000c00 	.word	0x20000c00
    b698:	000084e5 	.word	0x000084e5
    b69c:	00008491 	.word	0x00008491
    b6a0:	00009e5d 	.word	0x00009e5d
    b6a4:	00009061 	.word	0x00009061
    b6a8:	00008fbd 	.word	0x00008fbd
    b6ac:	0000b6fd 	.word	0x0000b6fd
    b6b0:	0000965d 	.word	0x0000965d
    b6b4:	000095e9 	.word	0x000095e9
    b6b8:	00007d61 	.word	0x00007d61
    b6bc:	00009531 	.word	0x00009531
    b6c0:	00007db5 	.word	0x00007db5

0000b6c4 <LORAREG_GetAttr>:
{
    b6c4:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b6c6:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b6c8:	283c      	cmp	r0, #60	; 0x3c
    b6ca:	d901      	bls.n	b6d0 <LORAREG_GetAttr+0xc>
}
    b6cc:	0018      	movs	r0, r3
    b6ce:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    b6d0:	0084      	lsls	r4, r0, #2
    b6d2:	4b02      	ldr	r3, [pc, #8]	; (b6dc <LORAREG_GetAttr+0x18>)
    b6d4:	58e3      	ldr	r3, [r4, r3]
    b6d6:	4798      	blx	r3
    b6d8:	0003      	movs	r3, r0
    b6da:	e7f7      	b.n	b6cc <LORAREG_GetAttr+0x8>
    b6dc:	20000b0c 	.word	0x20000b0c

0000b6e0 <LORAREG_ValidateAttr>:
{
    b6e0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b6e2:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b6e4:	283c      	cmp	r0, #60	; 0x3c
    b6e6:	d901      	bls.n	b6ec <LORAREG_ValidateAttr+0xc>
}
    b6e8:	0018      	movs	r0, r3
    b6ea:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    b6ec:	0082      	lsls	r2, r0, #2
    b6ee:	4b02      	ldr	r3, [pc, #8]	; (b6f8 <LORAREG_ValidateAttr+0x18>)
    b6f0:	58d3      	ldr	r3, [r2, r3]
    b6f2:	4798      	blx	r3
    b6f4:	0003      	movs	r3, r0
    b6f6:	e7f7      	b.n	b6e8 <LORAREG_ValidateAttr+0x8>
    b6f8:	20000cf4 	.word	0x20000cf4

0000b6fc <setNewChannel>:
{
    b6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6fe:	46d6      	mov	lr, sl
    b700:	464f      	mov	r7, r9
    b702:	b580      	push	{r7, lr}
    b704:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    b706:	232f      	movs	r3, #47	; 0x2f
    b708:	4a30      	ldr	r2, [pc, #192]	; (b7cc <setNewChannel+0xd0>)
    b70a:	5cd2      	ldrb	r2, [r2, r3]
    b70c:	4b30      	ldr	r3, [pc, #192]	; (b7d0 <setNewChannel+0xd4>)
    b70e:	4113      	asrs	r3, r2
    b710:	07db      	lsls	r3, r3, #31
    b712:	d407      	bmi.n	b724 <setNewChannel+0x28>
    b714:	2a05      	cmp	r2, #5
    b716:	d020      	beq.n	b75a <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    b718:	2a04      	cmp	r2, #4
    b71a:	d020      	beq.n	b75e <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    b71c:	2a0f      	cmp	r2, #15
    b71e:	d020      	beq.n	b762 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    b720:	4e2c      	ldr	r6, [pc, #176]	; (b7d4 <setNewChannel+0xd8>)
    b722:	e000      	b.n	b726 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    b724:	4e2c      	ldr	r6, [pc, #176]	; (b7d8 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    b726:	ac03      	add	r4, sp, #12
    b728:	2204      	movs	r2, #4
    b72a:	0020      	movs	r0, r4
    b72c:	4b2b      	ldr	r3, [pc, #172]	; (b7dc <setNewChannel+0xe0>)
    b72e:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    b730:	8823      	ldrh	r3, [r4, #0]
    b732:	aa02      	add	r2, sp, #8
    b734:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    b736:	78a4      	ldrb	r4, [r4, #2]
    b738:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    b73a:	0011      	movs	r1, r2
    b73c:	2037      	movs	r0, #55	; 0x37
    b73e:	4b28      	ldr	r3, [pc, #160]	; (b7e0 <setNewChannel+0xe4>)
    b740:	4798      	blx	r3
    b742:	0003      	movs	r3, r0
    b744:	9001      	str	r0, [sp, #4]
    b746:	2808      	cmp	r0, #8
    b748:	d00d      	beq.n	b766 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    b74a:	230a      	movs	r3, #10
    b74c:	9301      	str	r3, [sp, #4]
}
    b74e:	9801      	ldr	r0, [sp, #4]
    b750:	b005      	add	sp, #20
    b752:	bc0c      	pop	{r2, r3}
    b754:	4691      	mov	r9, r2
    b756:	469a      	mov	sl, r3
    b758:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    b75a:	4e1f      	ldr	r6, [pc, #124]	; (b7d8 <setNewChannel+0xdc>)
    b75c:	e7e3      	b.n	b726 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    b75e:	4e21      	ldr	r6, [pc, #132]	; (b7e4 <setNewChannel+0xe8>)
    b760:	e7e1      	b.n	b726 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    b762:	4e21      	ldr	r6, [pc, #132]	; (b7e8 <setNewChannel+0xec>)
    b764:	e7df      	b.n	b726 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    b766:	2c06      	cmp	r4, #6
    b768:	d00b      	beq.n	b782 <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    b76a:	2c00      	cmp	r4, #0
    b76c:	d1ef      	bne.n	b74e <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    b76e:	232a      	movs	r3, #42	; 0x2a
    b770:	4a16      	ldr	r2, [pc, #88]	; (b7cc <setNewChannel+0xd0>)
    b772:	56d3      	ldrsb	r3, [r2, r3]
    b774:	2b00      	cmp	r3, #0
    b776:	ddea      	ble.n	b74e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    b778:	af03      	add	r7, sp, #12
    b77a:	2301      	movs	r3, #1
    b77c:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    b77e:	4692      	mov	sl, r2
    b780:	e01c      	b.n	b7bc <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    b782:	3322      	adds	r3, #34	; 0x22
    b784:	4a11      	ldr	r2, [pc, #68]	; (b7cc <setNewChannel+0xd0>)
    b786:	56d3      	ldrsb	r3, [r2, r3]
    b788:	2b00      	cmp	r3, #0
    b78a:	dde0      	ble.n	b74e <setNewChannel+0x52>
    b78c:	2400      	movs	r4, #0
    b78e:	0017      	movs	r7, r2
    b790:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    b792:	2101      	movs	r1, #1
    b794:	0020      	movs	r0, r4
    b796:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    b798:	3401      	adds	r4, #1
    b79a:	b2e4      	uxtb	r4, r4
    b79c:	577b      	ldrsb	r3, [r7, r5]
    b79e:	429c      	cmp	r4, r3
    b7a0:	dbf7      	blt.n	b792 <setNewChannel+0x96>
    b7a2:	e7d4      	b.n	b74e <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    b7a4:	2100      	movs	r1, #0
    b7a6:	0020      	movs	r0, r4
    b7a8:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    b7aa:	086d      	lsrs	r5, r5, #1
    b7ac:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    b7ae:	3401      	adds	r4, #1
    b7b0:	b2e4      	uxtb	r4, r4
    b7b2:	232a      	movs	r3, #42	; 0x2a
    b7b4:	4652      	mov	r2, sl
    b7b6:	56d3      	ldrsb	r3, [r2, r3]
    b7b8:	429c      	cmp	r4, r3
    b7ba:	dac8      	bge.n	b74e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    b7bc:	883d      	ldrh	r5, [r7, #0]
    b7be:	464b      	mov	r3, r9
    b7c0:	422b      	tst	r3, r5
    b7c2:	d0ef      	beq.n	b7a4 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    b7c4:	4649      	mov	r1, r9
    b7c6:	0020      	movs	r0, r4
    b7c8:	47b0      	blx	r6
    b7ca:	e7ee      	b.n	b7aa <setNewChannel+0xae>
    b7cc:	20002310 	.word	0x20002310
    b7d0:	00007fc0 	.word	0x00007fc0
    b7d4:	00008211 	.word	0x00008211
    b7d8:	00008419 	.word	0x00008419
    b7dc:	00017691 	.word	0x00017691
    b7e0:	0000b6e1 	.word	0x0000b6e1
    b7e4:	0000836d 	.word	0x0000836d
    b7e8:	00008169 	.word	0x00008169

0000b7ec <LORAREG_SetAttr>:
{
    b7ec:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b7ee:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b7f0:	283c      	cmp	r0, #60	; 0x3c
    b7f2:	d901      	bls.n	b7f8 <LORAREG_SetAttr+0xc>
}
    b7f4:	0018      	movs	r0, r3
    b7f6:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    b7f8:	0082      	lsls	r2, r0, #2
    b7fa:	4b02      	ldr	r3, [pc, #8]	; (b804 <LORAREG_SetAttr+0x18>)
    b7fc:	58d3      	ldr	r3, [r2, r3]
    b7fe:	4798      	blx	r3
    b800:	0003      	movs	r3, r0
    b802:	e7f7      	b.n	b7f4 <LORAREG_SetAttr+0x8>
    b804:	20000c00 	.word	0x20000c00

0000b808 <CreateAllRegSoftwareTimers>:
{
    b808:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    b80a:	4809      	ldr	r0, [pc, #36]	; (b830 <CreateAllRegSoftwareTimers+0x28>)
    b80c:	4b09      	ldr	r3, [pc, #36]	; (b834 <CreateAllRegSoftwareTimers+0x2c>)
    b80e:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    b810:	2808      	cmp	r0, #8
    b812:	d10c      	bne.n	b82e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    b814:	4808      	ldr	r0, [pc, #32]	; (b838 <CreateAllRegSoftwareTimers+0x30>)
    b816:	4b07      	ldr	r3, [pc, #28]	; (b834 <CreateAllRegSoftwareTimers+0x2c>)
    b818:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    b81a:	2808      	cmp	r0, #8
    b81c:	d107      	bne.n	b82e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    b81e:	4807      	ldr	r0, [pc, #28]	; (b83c <CreateAllRegSoftwareTimers+0x34>)
    b820:	4b04      	ldr	r3, [pc, #16]	; (b834 <CreateAllRegSoftwareTimers+0x2c>)
    b822:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    b824:	2808      	cmp	r0, #8
    b826:	d102      	bne.n	b82e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    b828:	4805      	ldr	r0, [pc, #20]	; (b840 <CreateAllRegSoftwareTimers+0x38>)
    b82a:	4b02      	ldr	r3, [pc, #8]	; (b834 <CreateAllRegSoftwareTimers+0x2c>)
    b82c:	4798      	blx	r3
}
    b82e:	bd10      	pop	{r4, pc}
    b830:	2000230c 	.word	0x2000230c
    b834:	0000cb01 	.word	0x0000cb01
    b838:	2000230d 	.word	0x2000230d
    b83c:	2000230e 	.word	0x2000230e
    b840:	2000230f 	.word	0x2000230f

0000b844 <StopAllRegSoftwareTimers>:
{
    b844:	b570      	push	{r4, r5, r6, lr}
    b846:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    b848:	4e03      	ldr	r6, [pc, #12]	; (b858 <StopAllRegSoftwareTimers+0x14>)
    b84a:	4d04      	ldr	r5, [pc, #16]	; (b85c <StopAllRegSoftwareTimers+0x18>)
    b84c:	5d30      	ldrb	r0, [r6, r4]
    b84e:	47a8      	blx	r5
    b850:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    b852:	2c04      	cmp	r4, #4
    b854:	d1fa      	bne.n	b84c <StopAllRegSoftwareTimers+0x8>
}
    b856:	bd70      	pop	{r4, r5, r6, pc}
    b858:	2000230c 	.word	0x2000230c
    b85c:	0000ce4d 	.word	0x0000ce4d

0000b860 <LORAREG_Init>:
{	
    b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b862:	0007      	movs	r7, r0
	if(!initialized)
    b864:	4b24      	ldr	r3, [pc, #144]	; (b8f8 <LORAREG_Init+0x98>)
    b866:	781b      	ldrb	r3, [r3, #0]
    b868:	2b00      	cmp	r3, #0
    b86a:	d109      	bne.n	b880 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    b86c:	4b23      	ldr	r3, [pc, #140]	; (b8fc <LORAREG_Init+0x9c>)
    b86e:	4798      	blx	r3
    b870:	2808      	cmp	r0, #8
    b872:	d001      	beq.n	b878 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    b874:	2014      	movs	r0, #20
    b876:	e006      	b.n	b886 <LORAREG_Init+0x26>
			initialized = true;
    b878:	2201      	movs	r2, #1
    b87a:	4b1f      	ldr	r3, [pc, #124]	; (b8f8 <LORAREG_Init+0x98>)
    b87c:	701a      	strb	r2, [r3, #0]
    b87e:	e002      	b.n	b886 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    b880:	4b1f      	ldr	r3, [pc, #124]	; (b900 <LORAREG_Init+0xa0>)
    b882:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b884:	2008      	movs	r0, #8
    b886:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    b888:	4e1e      	ldr	r6, [pc, #120]	; (b904 <LORAREG_Init+0xa4>)
    b88a:	4d1f      	ldr	r5, [pc, #124]	; (b908 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    b88c:	4c1f      	ldr	r4, [pc, #124]	; (b90c <LORAREG_Init+0xac>)
    b88e:	4a20      	ldr	r2, [pc, #128]	; (b910 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    b890:	4920      	ldr	r1, [pc, #128]	; (b914 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    b892:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    b894:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    b896:	505a      	str	r2, [r3, r1]
    b898:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    b89a:	2bf4      	cmp	r3, #244	; 0xf4
    b89c:	d1f9      	bne.n	b892 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    b89e:	2f02      	cmp	r7, #2
    b8a0:	d00d      	beq.n	b8be <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    b8a2:	2f01      	cmp	r7, #1
    b8a4:	d90f      	bls.n	b8c6 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    b8a6:	1fbb      	subs	r3, r7, #6
    b8a8:	2b08      	cmp	r3, #8
    b8aa:	d910      	bls.n	b8ce <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    b8ac:	2f03      	cmp	r7, #3
    b8ae:	d012      	beq.n	b8d6 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    b8b0:	2f0f      	cmp	r7, #15
    b8b2:	d014      	beq.n	b8de <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    b8b4:	2f05      	cmp	r7, #5
    b8b6:	d016      	beq.n	b8e6 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    b8b8:	2f04      	cmp	r7, #4
    b8ba:	d018      	beq.n	b8ee <LORAREG_Init+0x8e>
}
    b8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    b8be:	2002      	movs	r0, #2
    b8c0:	4b15      	ldr	r3, [pc, #84]	; (b918 <LORAREG_Init+0xb8>)
    b8c2:	4798      	blx	r3
    b8c4:	e7fa      	b.n	b8bc <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    b8c6:	0038      	movs	r0, r7
    b8c8:	4b14      	ldr	r3, [pc, #80]	; (b91c <LORAREG_Init+0xbc>)
    b8ca:	4798      	blx	r3
    b8cc:	e7f6      	b.n	b8bc <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    b8ce:	0038      	movs	r0, r7
    b8d0:	4b13      	ldr	r3, [pc, #76]	; (b920 <LORAREG_Init+0xc0>)
    b8d2:	4798      	blx	r3
    b8d4:	e7f2      	b.n	b8bc <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    b8d6:	2003      	movs	r0, #3
    b8d8:	4b12      	ldr	r3, [pc, #72]	; (b924 <LORAREG_Init+0xc4>)
    b8da:	4798      	blx	r3
    b8dc:	e7ee      	b.n	b8bc <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    b8de:	200f      	movs	r0, #15
    b8e0:	4b11      	ldr	r3, [pc, #68]	; (b928 <LORAREG_Init+0xc8>)
    b8e2:	4798      	blx	r3
    b8e4:	e7ea      	b.n	b8bc <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    b8e6:	2005      	movs	r0, #5
    b8e8:	4b10      	ldr	r3, [pc, #64]	; (b92c <LORAREG_Init+0xcc>)
    b8ea:	4798      	blx	r3
    b8ec:	e7e6      	b.n	b8bc <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    b8ee:	2004      	movs	r0, #4
    b8f0:	4b0f      	ldr	r3, [pc, #60]	; (b930 <LORAREG_Init+0xd0>)
    b8f2:	4798      	blx	r3
    b8f4:	e7e2      	b.n	b8bc <LORAREG_Init+0x5c>
    b8f6:	46c0      	nop			; (mov r8, r8)
    b8f8:	20000b09 	.word	0x20000b09
    b8fc:	0000b809 	.word	0x0000b809
    b900:	0000b845 	.word	0x0000b845
    b904:	20000b0c 	.word	0x20000b0c
    b908:	00007451 	.word	0x00007451
    b90c:	20000cf4 	.word	0x20000cf4
    b910:	00007455 	.word	0x00007455
    b914:	20000c00 	.word	0x20000c00
    b918:	0000720d 	.word	0x0000720d
    b91c:	000066dd 	.word	0x000066dd
    b920:	00006065 	.word	0x00006065
    b924:	00006299 	.word	0x00006299
    b928:	00006925 	.word	0x00006925
    b92c:	00006c59 	.word	0x00006c59
    b930:	00006fd1 	.word	0x00006fd1

0000b934 <setDefaultTxPower>:
{   
    b934:	b510      	push	{r4, lr}
	if(ismBand == ISM_EU868)
    b936:	2800      	cmp	r0, #0
    b938:	d00e      	beq.n	b958 <setDefaultTxPower+0x24>
	else if(ismBand == ISM_JPN923)
    b93a:	2805      	cmp	r0, #5
    b93c:	d01a      	beq.n	b974 <setDefaultTxPower+0x40>
	else if (ismBand == ISM_KR920)
    b93e:	2804      	cmp	r0, #4
    b940:	d01e      	beq.n	b980 <setDefaultTxPower+0x4c>
	else if(ismBand == ISM_AU915)
    b942:	2803      	cmp	r0, #3
    b944:	d022      	beq.n	b98c <setDefaultTxPower+0x58>
		result = LORAWAN_INVALID_PARAMETER;
    b946:	240a      	movs	r4, #10
	else if(ismBand == ISM_NA915)
    b948:	2802      	cmp	r0, #2
    b94a:	d10a      	bne.n	b962 <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    b94c:	2107      	movs	r1, #7
    b94e:	2327      	movs	r3, #39	; 0x27
    b950:	4a11      	ldr	r2, [pc, #68]	; (b998 <setDefaultTxPower+0x64>)
    b952:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b954:	3c02      	subs	r4, #2
    b956:	e004      	b.n	b962 <setDefaultTxPower+0x2e>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    b958:	2101      	movs	r1, #1
    b95a:	2327      	movs	r3, #39	; 0x27
    b95c:	4a0e      	ldr	r2, [pc, #56]	; (b998 <setDefaultTxPower+0x64>)
    b95e:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b960:	2408      	movs	r4, #8
	PDS_STORE(RegParams.MacTxPower);
    b962:	2327      	movs	r3, #39	; 0x27
    b964:	4a0c      	ldr	r2, [pc, #48]	; (b998 <setDefaultTxPower+0x64>)
    b966:	56d0      	ldrsb	r0, [r2, r3]
    b968:	b2c1      	uxtb	r1, r0
    b96a:	0e00      	lsrs	r0, r0, #24
    b96c:	4b0b      	ldr	r3, [pc, #44]	; (b99c <setDefaultTxPower+0x68>)
    b96e:	4798      	blx	r3
}
    b970:	0020      	movs	r0, r4
    b972:	bd10      	pop	{r4, pc}
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    b974:	2101      	movs	r1, #1
    b976:	2327      	movs	r3, #39	; 0x27
    b978:	4a07      	ldr	r2, [pc, #28]	; (b998 <setDefaultTxPower+0x64>)
    b97a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b97c:	2408      	movs	r4, #8
    b97e:	e7f0      	b.n	b962 <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    b980:	2101      	movs	r1, #1
    b982:	2327      	movs	r3, #39	; 0x27
    b984:	4a04      	ldr	r2, [pc, #16]	; (b998 <setDefaultTxPower+0x64>)
    b986:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b988:	2408      	movs	r4, #8
    b98a:	e7ea      	b.n	b962 <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    b98c:	2107      	movs	r1, #7
    b98e:	2327      	movs	r3, #39	; 0x27
    b990:	4a01      	ldr	r2, [pc, #4]	; (b998 <setDefaultTxPower+0x64>)
    b992:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b994:	2408      	movs	r4, #8
    b996:	e7e4      	b.n	b962 <setDefaultTxPower+0x2e>
    b998:	20002310 	.word	0x20002310
    b99c:	0000be05 	.word	0x0000be05

0000b9a0 <LORAREG_SupportedBands>:
	*bands = value;
    b9a0:	2301      	movs	r3, #1
    b9a2:	425b      	negs	r3, r3
    b9a4:	8003      	strh	r3, [r0, #0]
}
    b9a6:	2008      	movs	r0, #8
    b9a8:	4770      	bx	lr
	...

0000b9ac <LORAREG_UnInit>:
{
    b9ac:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    b9ae:	4b0d      	ldr	r3, [pc, #52]	; (b9e4 <LORAREG_UnInit+0x38>)
    b9b0:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    b9b2:	2383      	movs	r3, #131	; 0x83
    b9b4:	009b      	lsls	r3, r3, #2
    b9b6:	4a0c      	ldr	r2, [pc, #48]	; (b9e8 <LORAREG_UnInit+0x3c>)
    b9b8:	5cd0      	ldrb	r0, [r2, r3]
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d106      	bne.n	b9cc <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    b9be:	4a0b      	ldr	r2, [pc, #44]	; (b9ec <LORAREG_UnInit+0x40>)
    b9c0:	2100      	movs	r1, #0
    b9c2:	4809      	ldr	r0, [pc, #36]	; (b9e8 <LORAREG_UnInit+0x3c>)
    b9c4:	4b0a      	ldr	r3, [pc, #40]	; (b9f0 <LORAREG_UnInit+0x44>)
    b9c6:	4798      	blx	r3
}
    b9c8:	200a      	movs	r0, #10
    b9ca:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    b9cc:	4b09      	ldr	r3, [pc, #36]	; (b9f4 <LORAREG_UnInit+0x48>)
    b9ce:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    b9d0:	232f      	movs	r3, #47	; 0x2f
    b9d2:	4a05      	ldr	r2, [pc, #20]	; (b9e8 <LORAREG_UnInit+0x3c>)
    b9d4:	5cd3      	ldrb	r3, [r2, r3]
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	d1f1      	bne.n	b9be <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    b9da:	200b      	movs	r0, #11
    b9dc:	4b05      	ldr	r3, [pc, #20]	; (b9f4 <LORAREG_UnInit+0x48>)
    b9de:	4798      	blx	r3
    b9e0:	e7ed      	b.n	b9be <LORAREG_UnInit+0x12>
    b9e2:	46c0      	nop			; (mov r8, r8)
    b9e4:	0000b845 	.word	0x0000b845
    b9e8:	20002310 	.word	0x20002310
    b9ec:	00000215 	.word	0x00000215
    b9f0:	00017715 	.word	0x00017715
    b9f4:	0000c129 	.word	0x0000c129

0000b9f8 <Enableallchannels>:
#endif
void Enableallchannels()
{
    b9f8:	b570      	push	{r4, r5, r6, lr}
    b9fa:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    b9fc:	4914      	ldr	r1, [pc, #80]	; (ba50 <Enableallchannels+0x58>)
    b9fe:	2401      	movs	r4, #1
    ba00:	790b      	ldrb	r3, [r1, #4]
    ba02:	794a      	ldrb	r2, [r1, #5]
    ba04:	0212      	lsls	r2, r2, #8
    ba06:	431a      	orrs	r2, r3
    ba08:	798b      	ldrb	r3, [r1, #6]
    ba0a:	041b      	lsls	r3, r3, #16
    ba0c:	431a      	orrs	r2, r3
    ba0e:	79cb      	ldrb	r3, [r1, #7]
    ba10:	061b      	lsls	r3, r3, #24
    ba12:	4313      	orrs	r3, r2
    ba14:	541c      	strb	r4, [r3, r0]
    ba16:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    ba18:	2890      	cmp	r0, #144	; 0x90
    ba1a:	d1f1      	bne.n	ba00 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    ba1c:	4c0c      	ldr	r4, [pc, #48]	; (ba50 <Enableallchannels+0x58>)
    ba1e:	2200      	movs	r2, #0
    ba20:	23ac      	movs	r3, #172	; 0xac
    ba22:	005b      	lsls	r3, r3, #1
    ba24:	54e2      	strb	r2, [r4, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    ba26:	4b0b      	ldr	r3, [pc, #44]	; (ba54 <Enableallchannels+0x5c>)
    ba28:	5ce3      	ldrb	r3, [r4, r3]
    ba2a:	2284      	movs	r2, #132	; 0x84
    ba2c:	0092      	lsls	r2, r2, #2
    ba2e:	5ca0      	ldrb	r0, [r4, r2]
    ba30:	0200      	lsls	r0, r0, #8
    ba32:	4318      	orrs	r0, r3
    ba34:	b2c1      	uxtb	r1, r0
    ba36:	0a00      	lsrs	r0, r0, #8
    ba38:	4d07      	ldr	r5, [pc, #28]	; (ba58 <Enableallchannels+0x60>)
    ba3a:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    ba3c:	4b07      	ldr	r3, [pc, #28]	; (ba5c <Enableallchannels+0x64>)
    ba3e:	5ce3      	ldrb	r3, [r4, r3]
    ba40:	4a07      	ldr	r2, [pc, #28]	; (ba60 <Enableallchannels+0x68>)
    ba42:	5ca0      	ldrb	r0, [r4, r2]
    ba44:	0200      	lsls	r0, r0, #8
    ba46:	4318      	orrs	r0, r3
    ba48:	b2c1      	uxtb	r1, r0
    ba4a:	0a00      	lsrs	r0, r0, #8
    ba4c:	47a8      	blx	r5
#endif
}
    ba4e:	bd70      	pop	{r4, r5, r6, pc}
    ba50:	20002310 	.word	0x20002310
    ba54:	0000020f 	.word	0x0000020f
    ba58:	0000be05 	.word	0x0000be05
    ba5c:	0000020d 	.word	0x0000020d
    ba60:	0000020e 	.word	0x0000020e

0000ba64 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    ba64:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    ba66:	2800      	cmp	r0, #0
    ba68:	d00a      	beq.n	ba80 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    ba6a:	2801      	cmp	r0, #1
    ba6c:	d00b      	beq.n	ba86 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    ba6e:	2805      	cmp	r0, #5
    ba70:	d00c      	beq.n	ba8c <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    ba72:	2804      	cmp	r0, #4
    ba74:	d00d      	beq.n	ba92 <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    ba76:	3802      	subs	r0, #2
    ba78:	2801      	cmp	r0, #1
    ba7a:	d90d      	bls.n	ba98 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    ba7c:	2008      	movs	r0, #8
    ba7e:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    ba80:	4b07      	ldr	r3, [pc, #28]	; (baa0 <LORAREG_EnableallChannels+0x3c>)
    ba82:	4798      	blx	r3
    ba84:	e7fa      	b.n	ba7c <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    ba86:	4b07      	ldr	r3, [pc, #28]	; (baa4 <LORAREG_EnableallChannels+0x40>)
    ba88:	4798      	blx	r3
    ba8a:	e7f7      	b.n	ba7c <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    ba8c:	4b06      	ldr	r3, [pc, #24]	; (baa8 <LORAREG_EnableallChannels+0x44>)
    ba8e:	4798      	blx	r3
    ba90:	e7f4      	b.n	ba7c <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    ba92:	4b06      	ldr	r3, [pc, #24]	; (baac <LORAREG_EnableallChannels+0x48>)
    ba94:	4798      	blx	r3
    ba96:	e7f1      	b.n	ba7c <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    ba98:	4b05      	ldr	r3, [pc, #20]	; (bab0 <LORAREG_EnableallChannels+0x4c>)
    ba9a:	4798      	blx	r3
    ba9c:	e7ee      	b.n	ba7c <LORAREG_EnableallChannels+0x18>
    ba9e:	46c0      	nop			; (mov r8, r8)
    baa0:	000064e5 	.word	0x000064e5
    baa4:	000065e9 	.word	0x000065e9
    baa8:	00006b39 	.word	0x00006b39
    baac:	00006e99 	.word	0x00006e99
    bab0:	0000b9f9 	.word	0x0000b9f9

0000bab4 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    bab4:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    bab6:	1e53      	subs	r3, r2, #1
    bab8:	b2db      	uxtb	r3, r3
    baba:	2a00      	cmp	r2, #0
    babc:	d00b      	beq.n	bad6 <sal_FillSubKey+0x22>
    babe:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    bac0:	18c5      	adds	r5, r0, r3
    bac2:	782a      	ldrb	r2, [r5, #0]
    bac4:	0052      	lsls	r2, r2, #1
    bac6:	4322      	orrs	r2, r4
    bac8:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    baca:	782c      	ldrb	r4, [r5, #0]
    bacc:	09e4      	lsrs	r4, r4, #7
	while(i--)
    bace:	3b01      	subs	r3, #1
    bad0:	b2db      	uxtb	r3, r3
    bad2:	2bff      	cmp	r3, #255	; 0xff
    bad4:	d1f4      	bne.n	bac0 <sal_FillSubKey+0xc>
	}
}
    bad6:	bd30      	pop	{r4, r5, pc}

0000bad8 <SAL_AESEncode>:
{
    bad8:	b510      	push	{r4, lr}
    bada:	b084      	sub	sp, #16
    badc:	0004      	movs	r4, r0
    bade:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    bae0:	2210      	movs	r2, #16
    bae2:	4668      	mov	r0, sp
    bae4:	4b04      	ldr	r3, [pc, #16]	; (baf8 <SAL_AESEncode+0x20>)
    bae6:	4798      	blx	r3
	AESEncode(buffer, useKey);
    bae8:	4669      	mov	r1, sp
    baea:	0020      	movs	r0, r4
    baec:	4b03      	ldr	r3, [pc, #12]	; (bafc <SAL_AESEncode+0x24>)
    baee:	4798      	blx	r3
}
    baf0:	2000      	movs	r0, #0
    baf2:	b004      	add	sp, #16
    baf4:	bd10      	pop	{r4, pc}
    baf6:	46c0      	nop			; (mov r8, r8)
    baf8:	00017691 	.word	0x00017691
    bafc:	0000bcd9 	.word	0x0000bcd9

0000bb00 <SAL_DeriveSessionKey>:
{
    bb00:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    bb02:	4b01      	ldr	r3, [pc, #4]	; (bb08 <SAL_DeriveSessionKey+0x8>)
    bb04:	4798      	blx	r3
}
    bb06:	bd10      	pop	{r4, pc}
    bb08:	0000bad9 	.word	0x0000bad9

0000bb0c <SAL_Read>:
}
    bb0c:	2000      	movs	r0, #0
    bb0e:	4770      	bx	lr

0000bb10 <SAL_AESCmac>:
{
    bb10:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb12:	46d6      	mov	lr, sl
    bb14:	464f      	mov	r7, r9
    bb16:	4646      	mov	r6, r8
    bb18:	b5c0      	push	{r6, r7, lr}
    bb1a:	b0a4      	sub	sp, #144	; 0x90
    bb1c:	9001      	str	r0, [sp, #4]
    bb1e:	000f      	movs	r7, r1
    bb20:	9102      	str	r1, [sp, #8]
    bb22:	9203      	str	r2, [sp, #12]
    bb24:	469a      	mov	sl, r3
    bb26:	ab2c      	add	r3, sp, #176	; 0xb0
    bb28:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    bb2a:	ae08      	add	r6, sp, #32
    bb2c:	2210      	movs	r2, #16
    bb2e:	2100      	movs	r1, #0
    bb30:	0030      	movs	r0, r6
    bb32:	4d64      	ldr	r5, [pc, #400]	; (bcc4 <SAL_AESCmac+0x1b4>)
    bb34:	47a8      	blx	r5
    bb36:	2387      	movs	r3, #135	; 0x87
    bb38:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    bb3a:	2210      	movs	r2, #16
    bb3c:	2100      	movs	r1, #0
    bb3e:	a804      	add	r0, sp, #16
    bb40:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    bb42:	9a01      	ldr	r2, [sp, #4]
    bb44:	0039      	movs	r1, r7
    bb46:	a804      	add	r0, sp, #16
    bb48:	4b5f      	ldr	r3, [pc, #380]	; (bcc8 <SAL_AESCmac+0x1b8>)
    bb4a:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    bb4c:	ab04      	add	r3, sp, #16
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	2b7f      	cmp	r3, #127	; 0x7f
    bb52:	d82d      	bhi.n	bbb0 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    bb54:	2210      	movs	r2, #16
    bb56:	a920      	add	r1, sp, #128	; 0x80
    bb58:	a804      	add	r0, sp, #16
    bb5a:	4b5c      	ldr	r3, [pc, #368]	; (bccc <SAL_AESCmac+0x1bc>)
    bb5c:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    bb5e:	ab20      	add	r3, sp, #128	; 0x80
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	2b7f      	cmp	r3, #127	; 0x7f
    bb64:	d834      	bhi.n	bbd0 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    bb66:	2210      	movs	r2, #16
    bb68:	a91c      	add	r1, sp, #112	; 0x70
    bb6a:	a820      	add	r0, sp, #128	; 0x80
    bb6c:	4b57      	ldr	r3, [pc, #348]	; (bccc <SAL_AESCmac+0x1bc>)
    bb6e:	4798      	blx	r3
	n = (size + 15) >> 4;
    bb70:	0023      	movs	r3, r4
    bb72:	330f      	adds	r3, #15
    bb74:	111d      	asrs	r5, r3, #4
    bb76:	b2aa      	uxth	r2, r5
    bb78:	4690      	mov	r8, r2
	if (n == 0)
    bb7a:	2a00      	cmp	r2, #0
    bb7c:	d038      	beq.n	bbf0 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    bb7e:	0722      	lsls	r2, r4, #28
    bb80:	d138      	bne.n	bbf4 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    bb82:	4642      	mov	r2, r8
    bb84:	3a01      	subs	r2, #1
    bb86:	0112      	lsls	r2, r2, #4
    bb88:	b296      	uxth	r6, r2
    bb8a:	4f51      	ldr	r7, [pc, #324]	; (bcd0 <SAL_AESCmac+0x1c0>)
    bb8c:	401f      	ands	r7, r3
    bb8e:	42be      	cmp	r6, r7
    bb90:	da54      	bge.n	bc3c <SAL_AESCmac+0x12c>
    bb92:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    bb94:	a910      	add	r1, sp, #64	; 0x40
    bb96:	aa20      	add	r2, sp, #128	; 0x80
    bb98:	1b98      	subs	r0, r3, r6
    bb9a:	b280      	uxth	r0, r0
    bb9c:	4654      	mov	r4, sl
    bb9e:	5ce4      	ldrb	r4, [r4, r3]
    bba0:	5c15      	ldrb	r5, [r2, r0]
    bba2:	406c      	eors	r4, r5
    bba4:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    bba6:	3301      	adds	r3, #1
    bba8:	b29b      	uxth	r3, r3
    bbaa:	42bb      	cmp	r3, r7
    bbac:	dbf4      	blt.n	bb98 <SAL_AESCmac+0x88>
    bbae:	e045      	b.n	bc3c <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    bbb0:	2210      	movs	r2, #16
    bbb2:	a920      	add	r1, sp, #128	; 0x80
    bbb4:	a804      	add	r0, sp, #16
    bbb6:	4b45      	ldr	r3, [pc, #276]	; (bccc <SAL_AESCmac+0x1bc>)
    bbb8:	4798      	blx	r3
    bbba:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    bbbc:	aa20      	add	r2, sp, #128	; 0x80
    bbbe:	a908      	add	r1, sp, #32
    bbc0:	5c98      	ldrb	r0, [r3, r2]
    bbc2:	5c5d      	ldrb	r5, [r3, r1]
    bbc4:	4068      	eors	r0, r5
    bbc6:	5498      	strb	r0, [r3, r2]
    bbc8:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    bbca:	2b10      	cmp	r3, #16
    bbcc:	d1f8      	bne.n	bbc0 <SAL_AESCmac+0xb0>
    bbce:	e7c6      	b.n	bb5e <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    bbd0:	2210      	movs	r2, #16
    bbd2:	a91c      	add	r1, sp, #112	; 0x70
    bbd4:	a820      	add	r0, sp, #128	; 0x80
    bbd6:	4b3d      	ldr	r3, [pc, #244]	; (bccc <SAL_AESCmac+0x1bc>)
    bbd8:	4798      	blx	r3
    bbda:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    bbdc:	aa1c      	add	r2, sp, #112	; 0x70
    bbde:	a908      	add	r1, sp, #32
    bbe0:	5c98      	ldrb	r0, [r3, r2]
    bbe2:	5c5d      	ldrb	r5, [r3, r1]
    bbe4:	4068      	eors	r0, r5
    bbe6:	5498      	strb	r0, [r3, r2]
    bbe8:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    bbea:	2b10      	cmp	r3, #16
    bbec:	d1f8      	bne.n	bbe0 <SAL_AESCmac+0xd0>
    bbee:	e7bf      	b.n	bb70 <SAL_AESCmac+0x60>
		n = 1;
    bbf0:	2301      	movs	r3, #1
    bbf2:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    bbf4:	230f      	movs	r3, #15
    bbf6:	0020      	movs	r0, r4
    bbf8:	4398      	bics	r0, r3
    bbfa:	2300      	movs	r3, #0
			if ( i < (size%16) )
    bbfc:	220f      	movs	r2, #15
    bbfe:	4014      	ands	r4, r2
					padded[i] = 0x00;
    bc00:	a90c      	add	r1, sp, #48	; 0x30
    bc02:	2700      	movs	r7, #0
					padded[i] = 0x80;
    bc04:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    bc06:	4450      	add	r0, sl
    bc08:	e005      	b.n	bc16 <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    bc0a:	4294      	cmp	r4, r2
    bc0c:	d009      	beq.n	bc22 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    bc0e:	545f      	strb	r7, [r3, r1]
    bc10:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    bc12:	2b10      	cmp	r3, #16
    bc14:	d007      	beq.n	bc26 <SAL_AESCmac+0x116>
    bc16:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    bc18:	4294      	cmp	r4, r2
    bc1a:	d9f6      	bls.n	bc0a <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    bc1c:	5cc2      	ldrb	r2, [r0, r3]
    bc1e:	545a      	strb	r2, [r3, r1]
    bc20:	e7f6      	b.n	bc10 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    bc22:	545e      	strb	r6, [r3, r1]
    bc24:	e7f4      	b.n	bc10 <SAL_AESCmac+0x100>
    bc26:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    bc28:	a810      	add	r0, sp, #64	; 0x40
    bc2a:	a90c      	add	r1, sp, #48	; 0x30
    bc2c:	aa1c      	add	r2, sp, #112	; 0x70
    bc2e:	5c5c      	ldrb	r4, [r3, r1]
    bc30:	5c9d      	ldrb	r5, [r3, r2]
    bc32:	406c      	eors	r4, r5
    bc34:	541c      	strb	r4, [r3, r0]
    bc36:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    bc38:	2b10      	cmp	r3, #16
    bc3a:	d1f8      	bne.n	bc2e <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    bc3c:	2210      	movs	r2, #16
    bc3e:	2100      	movs	r1, #0
    bc40:	a818      	add	r0, sp, #96	; 0x60
    bc42:	4b20      	ldr	r3, [pc, #128]	; (bcc4 <SAL_AESCmac+0x1b4>)
    bc44:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    bc46:	2301      	movs	r3, #1
    bc48:	425b      	negs	r3, r3
    bc4a:	4443      	add	r3, r8
    bc4c:	4699      	mov	r9, r3
    bc4e:	2000      	movs	r0, #0
    bc50:	2700      	movs	r7, #0
    bc52:	2b00      	cmp	r3, #0
    bc54:	dd1a      	ble.n	bc8c <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    bc56:	ad14      	add	r5, sp, #80	; 0x50
    bc58:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    bc5a:	4e1e      	ldr	r6, [pc, #120]	; (bcd4 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    bc5c:	0100      	lsls	r0, r0, #4
    bc5e:	2300      	movs	r3, #0
    bc60:	4450      	add	r0, sl
    bc62:	5cc2      	ldrb	r2, [r0, r3]
    bc64:	5d19      	ldrb	r1, [r3, r4]
    bc66:	404a      	eors	r2, r1
    bc68:	555a      	strb	r2, [r3, r5]
    bc6a:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    bc6c:	2b10      	cmp	r3, #16
    bc6e:	d1f8      	bne.n	bc62 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    bc70:	2210      	movs	r2, #16
    bc72:	0029      	movs	r1, r5
    bc74:	0020      	movs	r0, r4
    bc76:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    bc78:	9a01      	ldr	r2, [sp, #4]
    bc7a:	9902      	ldr	r1, [sp, #8]
    bc7c:	0020      	movs	r0, r4
    bc7e:	4b12      	ldr	r3, [pc, #72]	; (bcc8 <SAL_AESCmac+0x1b8>)
    bc80:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    bc82:	3701      	adds	r7, #1
    bc84:	b2bf      	uxth	r7, r7
    bc86:	0038      	movs	r0, r7
    bc88:	454f      	cmp	r7, r9
    bc8a:	dbe7      	blt.n	bc5c <SAL_AESCmac+0x14c>
    bc8c:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    bc8e:	ac14      	add	r4, sp, #80	; 0x50
    bc90:	a818      	add	r0, sp, #96	; 0x60
    bc92:	a910      	add	r1, sp, #64	; 0x40
    bc94:	5c1a      	ldrb	r2, [r3, r0]
    bc96:	5c5d      	ldrb	r5, [r3, r1]
    bc98:	406a      	eors	r2, r5
    bc9a:	551a      	strb	r2, [r3, r4]
    bc9c:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    bc9e:	2b10      	cmp	r3, #16
    bca0:	d1f8      	bne.n	bc94 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    bca2:	9a01      	ldr	r2, [sp, #4]
    bca4:	9902      	ldr	r1, [sp, #8]
    bca6:	a814      	add	r0, sp, #80	; 0x50
    bca8:	4b07      	ldr	r3, [pc, #28]	; (bcc8 <SAL_AESCmac+0x1b8>)
    bcaa:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    bcac:	2210      	movs	r2, #16
    bcae:	a914      	add	r1, sp, #80	; 0x50
    bcb0:	9803      	ldr	r0, [sp, #12]
    bcb2:	4b08      	ldr	r3, [pc, #32]	; (bcd4 <SAL_AESCmac+0x1c4>)
    bcb4:	4798      	blx	r3
}
    bcb6:	2000      	movs	r0, #0
    bcb8:	b024      	add	sp, #144	; 0x90
    bcba:	bc1c      	pop	{r2, r3, r4}
    bcbc:	4690      	mov	r8, r2
    bcbe:	4699      	mov	r9, r3
    bcc0:	46a2      	mov	sl, r4
    bcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcc4:	00017715 	.word	0x00017715
    bcc8:	0000bad9 	.word	0x0000bad9
    bccc:	0000bab5 	.word	0x0000bab5
    bcd0:	000ffff0 	.word	0x000ffff0
    bcd4:	00017691 	.word	0x00017691

0000bcd8 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcda:	b083      	sub	sp, #12
    bcdc:	0004      	movs	r4, r0
    bcde:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    bce0:	4a2b      	ldr	r2, [pc, #172]	; (bd90 <AESEncode+0xb8>)
    bce2:	2101      	movs	r1, #1
    bce4:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    bce6:	2300      	movs	r3, #0
    bce8:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    bcea:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    bcec:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    bcee:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    bcf0:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    bcf2:	4928      	ldr	r1, [pc, #160]	; (bd94 <AESEncode+0xbc>)
    bcf4:	4828      	ldr	r0, [pc, #160]	; (bd98 <AESEncode+0xc0>)
    bcf6:	4b29      	ldr	r3, [pc, #164]	; (bd9c <AESEncode+0xc4>)
    bcf8:	4798      	blx	r3
    bcfa:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    bcfc:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    bcfe:	4f28      	ldr	r7, [pc, #160]	; (bda0 <AESEncode+0xc8>)
    bd00:	1870      	adds	r0, r6, r1
    bd02:	2300      	movs	r3, #0
    bd04:	5cc2      	ldrb	r2, [r0, r3]
    bd06:	555a      	strb	r2, [r3, r5]
    bd08:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    bd0a:	2b04      	cmp	r3, #4
    bd0c:	d1fa      	bne.n	bd04 <AESEncode+0x2c>
    bd0e:	9b01      	ldr	r3, [sp, #4]
    bd10:	51cb      	str	r3, [r1, r7]
    bd12:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    bd14:	2910      	cmp	r1, #16
    bd16:	d1f3      	bne.n	bd00 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    bd18:	4d1f      	ldr	r5, [pc, #124]	; (bd98 <AESEncode+0xc0>)
    bd1a:	4921      	ldr	r1, [pc, #132]	; (bda0 <AESEncode+0xc8>)
    bd1c:	0028      	movs	r0, r5
    bd1e:	4b21      	ldr	r3, [pc, #132]	; (bda4 <AESEncode+0xcc>)
    bd20:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    bd22:	682a      	ldr	r2, [r5, #0]
    bd24:	7913      	ldrb	r3, [r2, #4]
    bd26:	2102      	movs	r1, #2
    bd28:	430b      	orrs	r3, r1
    bd2a:	7113      	strb	r3, [r2, #4]
    bd2c:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    bd2e:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    bd30:	4e1b      	ldr	r6, [pc, #108]	; (bda0 <AESEncode+0xc8>)
    bd32:	1860      	adds	r0, r4, r1
    bd34:	2300      	movs	r3, #0
    bd36:	5cc2      	ldrb	r2, [r0, r3]
    bd38:	555a      	strb	r2, [r3, r5]
    bd3a:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    bd3c:	2b04      	cmp	r3, #4
    bd3e:	d1fa      	bne.n	bd36 <AESEncode+0x5e>
    bd40:	9b01      	ldr	r3, [sp, #4]
    bd42:	518b      	str	r3, [r1, r6]
    bd44:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    bd46:	2910      	cmp	r1, #16
    bd48:	d1f3      	bne.n	bd32 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    bd4a:	4d13      	ldr	r5, [pc, #76]	; (bd98 <AESEncode+0xc0>)
    bd4c:	4914      	ldr	r1, [pc, #80]	; (bda0 <AESEncode+0xc8>)
    bd4e:	0028      	movs	r0, r5
    bd50:	4b15      	ldr	r3, [pc, #84]	; (bda8 <AESEncode+0xd0>)
    bd52:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    bd54:	682d      	ldr	r5, [r5, #0]
    bd56:	792b      	ldrb	r3, [r5, #4]
    bd58:	2202      	movs	r2, #2
    bd5a:	4393      	bics	r3, r2
    bd5c:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    bd5e:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    bd60:	2002      	movs	r0, #2
    bd62:	e001      	b.n	bd68 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    bd64:	4211      	tst	r1, r2
    bd66:	d107      	bne.n	bd78 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    bd68:	79eb      	ldrb	r3, [r5, #7]
    bd6a:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    bd6c:	000a      	movs	r2, r1
    bd6e:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    bd70:	4218      	tst	r0, r3
    bd72:	d0f7      	beq.n	bd64 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    bd74:	4302      	orrs	r2, r0
    bd76:	e7f5      	b.n	bd64 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    bd78:	4d09      	ldr	r5, [pc, #36]	; (bda0 <AESEncode+0xc8>)
    bd7a:	0029      	movs	r1, r5
    bd7c:	4806      	ldr	r0, [pc, #24]	; (bd98 <AESEncode+0xc0>)
    bd7e:	4b0b      	ldr	r3, [pc, #44]	; (bdac <AESEncode+0xd4>)
    bd80:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    bd82:	2210      	movs	r2, #16
    bd84:	0029      	movs	r1, r5
    bd86:	0020      	movs	r0, r4
    bd88:	4b09      	ldr	r3, [pc, #36]	; (bdb0 <AESEncode+0xd8>)
    bd8a:	4798      	blx	r3
#endif	
}
    bd8c:	b003      	add	sp, #12
    bd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd90:	20002528 	.word	0x20002528
    bd94:	42003400 	.word	0x42003400
    bd98:	20002534 	.word	0x20002534
    bd9c:	00002bf1 	.word	0x00002bf1
    bda0:	20000de8 	.word	0x20000de8
    bda4:	00002c85 	.word	0x00002c85
    bda8:	00002cb9 	.word	0x00002cb9
    bdac:	00002d09 	.word	0x00002d09
    bdb0:	00017691 	.word	0x00017691

0000bdb4 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    bdb4:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    bdb6:	4d07      	ldr	r5, [pc, #28]	; (bdd4 <AESInit+0x20>)
    bdb8:	0028      	movs	r0, r5
    bdba:	4b07      	ldr	r3, [pc, #28]	; (bdd8 <AESInit+0x24>)
    bdbc:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    bdbe:	4c07      	ldr	r4, [pc, #28]	; (bddc <AESInit+0x28>)
    bdc0:	002a      	movs	r2, r5
    bdc2:	4907      	ldr	r1, [pc, #28]	; (bde0 <AESInit+0x2c>)
    bdc4:	0020      	movs	r0, r4
    bdc6:	4b07      	ldr	r3, [pc, #28]	; (bde4 <AESInit+0x30>)
    bdc8:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    bdca:	0020      	movs	r0, r4
    bdcc:	4b06      	ldr	r3, [pc, #24]	; (bde8 <AESInit+0x34>)
    bdce:	4798      	blx	r3
#endif	
}
    bdd0:	bd70      	pop	{r4, r5, r6, pc}
    bdd2:	46c0      	nop			; (mov r8, r8)
    bdd4:	20002528 	.word	0x20002528
    bdd8:	00002bb5 	.word	0x00002bb5
    bddc:	20002534 	.word	0x20002534
    bde0:	42003400 	.word	0x42003400
    bde4:	00002c65 	.word	0x00002c65
    bde8:	00002bcf 	.word	0x00002bcf

0000bdec <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    bdec:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    bdee:	4b03      	ldr	r3, [pc, #12]	; (bdfc <PDS_Init+0x10>)
    bdf0:	4798      	blx	r3
	pdsUnInitFlag = false;
    bdf2:	2200      	movs	r2, #0
    bdf4:	4b02      	ldr	r3, [pc, #8]	; (be00 <PDS_Init+0x14>)
    bdf6:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    bdf8:	bd10      	pop	{r4, pc}
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	0000c629 	.word	0x0000c629
    be00:	20000df8 	.word	0x20000df8

0000be04 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    be04:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    be06:	4b14      	ldr	r3, [pc, #80]	; (be58 <PDS_Store+0x54>)
    be08:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    be0a:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    be0c:	2a00      	cmp	r2, #0
    be0e:	d106      	bne.n	be1e <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    be10:	0102      	lsls	r2, r0, #4
    be12:	4b12      	ldr	r3, [pc, #72]	; (be5c <PDS_Store+0x58>)
    be14:	189b      	adds	r3, r3, r2
    be16:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    be18:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    be1a:	2a00      	cmp	r2, #0
    be1c:	d101      	bne.n	be22 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    be1e:	0018      	movs	r0, r3
    be20:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    be22:	0103      	lsls	r3, r0, #4
    be24:	4a0d      	ldr	r2, [pc, #52]	; (be5c <PDS_Store+0x58>)
    be26:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    be28:	2c00      	cmp	r4, #0
    be2a:	d011      	beq.n	be50 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    be2c:	001a      	movs	r2, r3
    be2e:	4b0b      	ldr	r3, [pc, #44]	; (be5c <PDS_Store+0x58>)
    be30:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    be32:	689b      	ldr	r3, [r3, #8]
    be34:	2b00      	cmp	r3, #0
    be36:	d00d      	beq.n	be54 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    be38:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    be3a:	280c      	cmp	r0, #12
    be3c:	d8ef      	bhi.n	be1e <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    be3e:	3b04      	subs	r3, #4
    be40:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    be42:	4a07      	ldr	r2, [pc, #28]	; (be60 <PDS_Store+0x5c>)
    be44:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    be46:	2001      	movs	r0, #1
    be48:	4b06      	ldr	r3, [pc, #24]	; (be64 <PDS_Store+0x60>)
    be4a:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    be4c:	2300      	movs	r3, #0
    be4e:	e7e6      	b.n	be1e <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    be50:	2305      	movs	r3, #5
    be52:	e7e4      	b.n	be1e <PDS_Store+0x1a>
    be54:	2305      	movs	r3, #5
    be56:	e7e2      	b.n	be1e <PDS_Store+0x1a>
    be58:	20000df8 	.word	0x20000df8
    be5c:	2000254c 	.word	0x2000254c
    be60:	2000253c 	.word	0x2000253c
    be64:	0000c301 	.word	0x0000c301

0000be68 <PDS_Restore>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Restore(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    be68:	b5f0      	push	{r4, r5, r6, r7, lr}
    be6a:	b0c3      	sub	sp, #268	; 0x10c
    be6c:	0006      	movs	r6, r0
    be6e:	000d      	movs	r5, r1
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    be70:	4b2a      	ldr	r3, [pc, #168]	; (bf1c <PDS_Restore+0xb4>)
    be72:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    be74:	2400      	movs	r4, #0
	if (false == pdsUnInitFlag)
    be76:	2b00      	cmp	r3, #0
    be78:	d106      	bne.n	be88 <PDS_Restore+0x20>
		uint8_t *ptr;
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		uint16_t size;
		
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    be7a:	0102      	lsls	r2, r0, #4
    be7c:	4b28      	ldr	r3, [pc, #160]	; (bf20 <PDS_Restore+0xb8>)
    be7e:	189b      	adds	r3, r3, r2
    be80:	791c      	ldrb	r4, [r3, #4]
    be82:	2c00      	cmp	r4, #0
    be84:	d103      	bne.n	be8e <PDS_Restore+0x26>
			
			return status;
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    be86:	2405      	movs	r4, #5
		}
	}
#endif	
	return status;
}
    be88:	0020      	movs	r0, r4
    be8a:	b043      	add	sp, #268	; 0x10c
    be8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    be8e:	0013      	movs	r3, r2
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    be90:	4a23      	ldr	r2, [pc, #140]	; (bf20 <PDS_Restore+0xb8>)
    be92:	589b      	ldr	r3, [r3, r2]
    be94:	2b00      	cmp	r3, #0
    be96:	d0f6      	beq.n	be86 <PDS_Restore+0x1e>
		(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    be98:	0102      	lsls	r2, r0, #4
    be9a:	4b21      	ldr	r3, [pc, #132]	; (bf20 <PDS_Restore+0xb8>)
    be9c:	189b      	adds	r3, r3, r2
    be9e:	689f      	ldr	r7, [r3, #8]
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    bea0:	2f00      	cmp	r7, #0
    bea2:	d0f0      	beq.n	be86 <PDS_Restore+0x1e>
			memset(&buffer, 0, sizeof(PdsMem_t));
    bea4:	2280      	movs	r2, #128	; 0x80
    bea6:	0052      	lsls	r2, r2, #1
    bea8:	2100      	movs	r1, #0
    beaa:	a802      	add	r0, sp, #8
    beac:	4b1d      	ldr	r3, [pc, #116]	; (bf24 <PDS_Restore+0xbc>)
    beae:	4798      	blx	r3
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    beb0:	4b1d      	ldr	r3, [pc, #116]	; (bf28 <PDS_Restore+0xc0>)
    beb2:	469c      	mov	ip, r3
    beb4:	4464      	add	r4, ip
    beb6:	00e4      	lsls	r4, r4, #3
    beb8:	1939      	adds	r1, r7, r4
    beba:	2208      	movs	r2, #8
    bebc:	4668      	mov	r0, sp
    bebe:	4b1b      	ldr	r3, [pc, #108]	; (bf2c <PDS_Restore+0xc4>)
    bec0:	4798      	blx	r3
			size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    bec2:	466b      	mov	r3, sp
    bec4:	79da      	ldrb	r2, [r3, #7]
    bec6:	799b      	ldrb	r3, [r3, #6]
    bec8:	18d2      	adds	r2, r2, r3
			status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    beca:	3205      	adds	r2, #5
    becc:	a902      	add	r1, sp, #8
    bece:	0030      	movs	r0, r6
    bed0:	4b17      	ldr	r3, [pc, #92]	; (bf30 <PDS_Restore+0xc8>)
    bed2:	4798      	blx	r3
    bed4:	1e04      	subs	r4, r0, #0
			if (status != PDS_OK)
    bed6:	d1d7      	bne.n	be88 <PDS_Restore+0x20>
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + item), sizeof(ItemMap_t));
    bed8:	0136      	lsls	r6, r6, #4
    beda:	4b11      	ldr	r3, [pc, #68]	; (bf20 <PDS_Restore+0xb8>)
    bedc:	199e      	adds	r6, r3, r6
    bede:	00eb      	lsls	r3, r5, #3
    bee0:	68b1      	ldr	r1, [r6, #8]
    bee2:	18c9      	adds	r1, r1, r3
    bee4:	2208      	movs	r2, #8
    bee6:	4668      	mov	r0, sp
    bee8:	4b10      	ldr	r3, [pc, #64]	; (bf2c <PDS_Restore+0xc4>)
    beea:	4798      	blx	r3
			if (item == itemInfo.itemId)
    beec:	466b      	mov	r3, sp
    beee:	795b      	ldrb	r3, [r3, #5]
    bef0:	42ab      	cmp	r3, r5
    bef2:	d001      	beq.n	bef8 <PDS_Restore+0x90>
				return PDS_NOT_FOUND;
    bef4:	2403      	movs	r4, #3
    bef6:	e7c7      	b.n	be88 <PDS_Restore+0x20>
			ptr += itemInfo.itemOffset;
    bef8:	466b      	mov	r3, sp
    befa:	79d9      	ldrb	r1, [r3, #7]
    befc:	2315      	movs	r3, #21
    befe:	446b      	add	r3, sp
    bf00:	469c      	mov	ip, r3
    bf02:	4461      	add	r1, ip
				if (false == itemHeader.delete)
    bf04:	790b      	ldrb	r3, [r1, #4]
    bf06:	2b00      	cmp	r3, #0
    bf08:	d001      	beq.n	bf0e <PDS_Restore+0xa6>
					return PDS_ITEM_DELETED;
    bf0a:	2406      	movs	r4, #6
    bf0c:	e7bc      	b.n	be88 <PDS_Restore+0x20>
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    bf0e:	466b      	mov	r3, sp
    bf10:	799a      	ldrb	r2, [r3, #6]
					ptr += sizeof(ItemHeader_t);
    bf12:	3105      	adds	r1, #5
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    bf14:	9800      	ldr	r0, [sp, #0]
    bf16:	4b05      	ldr	r3, [pc, #20]	; (bf2c <PDS_Restore+0xc4>)
    bf18:	4798      	blx	r3
			return status;
    bf1a:	e7b5      	b.n	be88 <PDS_Restore+0x20>
    bf1c:	20000df8 	.word	0x20000df8
    bf20:	2000254c 	.word	0x2000254c
    bf24:	00017715 	.word	0x00017715
    bf28:	1fffffff 	.word	0x1fffffff
    bf2c:	00017691 	.word	0x00017691
    bf30:	0000c7c5 	.word	0x0000c7c5

0000bf34 <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    bf34:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    bf36:	4b0e      	ldr	r3, [pc, #56]	; (bf70 <PDS_IsRestorable+0x3c>)
    bf38:	7818      	ldrb	r0, [r3, #0]
    bf3a:	2800      	cmp	r0, #0
    bf3c:	d117      	bne.n	bf6e <PDS_IsRestorable+0x3a>
    bf3e:	4d0d      	ldr	r5, [pc, #52]	; (bf74 <PDS_IsRestorable+0x40>)
    bf40:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    bf42:	4e0d      	ldr	r6, [pc, #52]	; (bf78 <PDS_IsRestorable+0x44>)
    bf44:	e004      	b.n	bf50 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    bf46:	3401      	adds	r4, #1
    bf48:	b2e4      	uxtb	r4, r4
    bf4a:	3510      	adds	r5, #16
    bf4c:	2c0d      	cmp	r4, #13
    bf4e:	d00d      	beq.n	bf6c <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    bf50:	792b      	ldrb	r3, [r5, #4]
    bf52:	2b00      	cmp	r3, #0
    bf54:	d0f7      	beq.n	bf46 <PDS_IsRestorable+0x12>
    bf56:	682b      	ldr	r3, [r5, #0]
    bf58:	2b00      	cmp	r3, #0
    bf5a:	d0f4      	beq.n	bf46 <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    bf5c:	68ab      	ldr	r3, [r5, #8]
    bf5e:	2b00      	cmp	r3, #0
    bf60:	d0f1      	beq.n	bf46 <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    bf62:	0020      	movs	r0, r4
    bf64:	47b0      	blx	r6
    bf66:	2800      	cmp	r0, #0
    bf68:	d1ed      	bne.n	bf46 <PDS_IsRestorable+0x12>
    bf6a:	e000      	b.n	bf6e <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    bf6c:	2001      	movs	r0, #1
}
    bf6e:	bd70      	pop	{r4, r5, r6, pc}
    bf70:	20000df8 	.word	0x20000df8
    bf74:	2000254c 	.word	0x2000254c
    bf78:	0000c7f1 	.word	0x0000c7f1

0000bf7c <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    bf7c:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    bf7e:	4b04      	ldr	r3, [pc, #16]	; (bf90 <PDS_DeleteAll+0x14>)
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	2b00      	cmp	r3, #0
    bf84:	d001      	beq.n	bf8a <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    bf86:	2000      	movs	r0, #0
    bf88:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    bf8a:	4b02      	ldr	r3, [pc, #8]	; (bf94 <PDS_DeleteAll+0x18>)
    bf8c:	4798      	blx	r3
    bf8e:	e7fa      	b.n	bf86 <PDS_DeleteAll+0xa>
    bf90:	20000df8 	.word	0x20000df8
    bf94:	0000c80d 	.word	0x0000c80d

0000bf98 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf9a:	46ce      	mov	lr, r9
    bf9c:	4647      	mov	r7, r8
    bf9e:	b580      	push	{r7, lr}
    bfa0:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    bfa2:	4b32      	ldr	r3, [pc, #200]	; (c06c <PDS_RestoreAll+0xd4>)
    bfa4:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    bfa6:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d159      	bne.n	c060 <PDS_RestoreAll+0xc8>
    bfac:	4e30      	ldr	r6, [pc, #192]	; (c070 <PDS_RestoreAll+0xd8>)
    bfae:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    bfb0:	4b30      	ldr	r3, [pc, #192]	; (c074 <PDS_RestoreAll+0xdc>)
    bfb2:	4698      	mov	r8, r3
    bfb4:	e026      	b.n	c004 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    bfb6:	3401      	adds	r4, #1
    bfb8:	b2e4      	uxtb	r4, r4
    bfba:	792b      	ldrb	r3, [r5, #4]
    bfbc:	42a3      	cmp	r3, r4
    bfbe:	d918      	bls.n	bff2 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    bfc0:	00e1      	lsls	r1, r4, #3
    bfc2:	68ab      	ldr	r3, [r5, #8]
    bfc4:	469c      	mov	ip, r3
    bfc6:	4461      	add	r1, ip
    bfc8:	2208      	movs	r2, #8
    bfca:	a802      	add	r0, sp, #8
    bfcc:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    bfce:	ab02      	add	r3, sp, #8
    bfd0:	79d9      	ldrb	r1, [r3, #7]
    bfd2:	2315      	movs	r3, #21
    bfd4:	aa02      	add	r2, sp, #8
    bfd6:	4694      	mov	ip, r2
    bfd8:	4463      	add	r3, ip
    bfda:	469c      	mov	ip, r3
    bfdc:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    bfde:	790b      	ldrb	r3, [r1, #4]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d1e8      	bne.n	bfb6 <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    bfe4:	9b02      	ldr	r3, [sp, #8]
    bfe6:	9301      	str	r3, [sp, #4]
    bfe8:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    bfea:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    bfec:	0018      	movs	r0, r3
    bfee:	47c0      	blx	r8
    bff0:	e7e1      	b.n	bfb6 <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    bff2:	68eb      	ldr	r3, [r5, #12]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d000      	beq.n	bffa <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    bff8:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    bffa:	3701      	adds	r7, #1
    bffc:	b2ff      	uxtb	r7, r7
    bffe:	3610      	adds	r6, #16
    c000:	2f0d      	cmp	r7, #13
    c002:	d02c      	beq.n	c05e <PDS_RestoreAll+0xc6>
    c004:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    c006:	7934      	ldrb	r4, [r6, #4]
    c008:	2c00      	cmp	r4, #0
    c00a:	d0f6      	beq.n	bffa <PDS_RestoreAll+0x62>
    c00c:	6833      	ldr	r3, [r6, #0]
    c00e:	2b00      	cmp	r3, #0
    c010:	d0f3      	beq.n	bffa <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    c012:	68b3      	ldr	r3, [r6, #8]
    c014:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c016:	2b00      	cmp	r3, #0
    c018:	d0ef      	beq.n	bffa <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    c01a:	2280      	movs	r2, #128	; 0x80
    c01c:	0052      	lsls	r2, r2, #1
    c01e:	2100      	movs	r1, #0
    c020:	a804      	add	r0, sp, #16
    c022:	4b15      	ldr	r3, [pc, #84]	; (c078 <PDS_RestoreAll+0xe0>)
    c024:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    c026:	4b15      	ldr	r3, [pc, #84]	; (c07c <PDS_RestoreAll+0xe4>)
    c028:	469c      	mov	ip, r3
    c02a:	4464      	add	r4, ip
    c02c:	00e4      	lsls	r4, r4, #3
    c02e:	0021      	movs	r1, r4
    c030:	4449      	add	r1, r9
    c032:	2208      	movs	r2, #8
    c034:	a802      	add	r0, sp, #8
    c036:	4b0f      	ldr	r3, [pc, #60]	; (c074 <PDS_RestoreAll+0xdc>)
    c038:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    c03a:	ab02      	add	r3, sp, #8
    c03c:	79da      	ldrb	r2, [r3, #7]
    c03e:	799b      	ldrb	r3, [r3, #6]
    c040:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    c042:	3205      	adds	r2, #5
    c044:	a904      	add	r1, sp, #16
    c046:	0038      	movs	r0, r7
    c048:	4b0d      	ldr	r3, [pc, #52]	; (c080 <PDS_RestoreAll+0xe8>)
    c04a:	4798      	blx	r3
				if (status != PDS_OK)
    c04c:	2800      	cmp	r0, #0
    c04e:	d107      	bne.n	c060 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c050:	7933      	ldrb	r3, [r6, #4]
    c052:	2400      	movs	r4, #0
    c054:	2b00      	cmp	r3, #0
    c056:	d0cc      	beq.n	bff2 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    c058:	4b06      	ldr	r3, [pc, #24]	; (c074 <PDS_RestoreAll+0xdc>)
    c05a:	4699      	mov	r9, r3
    c05c:	e7b0      	b.n	bfc0 <PDS_RestoreAll+0x28>
    c05e:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    c060:	b045      	add	sp, #276	; 0x114
    c062:	bc0c      	pop	{r2, r3}
    c064:	4690      	mov	r8, r2
    c066:	4699      	mov	r9, r3
    c068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c06a:	46c0      	nop			; (mov r8, r8)
    c06c:	20000df8 	.word	0x20000df8
    c070:	2000254c 	.word	0x2000254c
    c074:	00017691 	.word	0x00017691
    c078:	00017715 	.word	0x00017715
    c07c:	1fffffff 	.word	0x1fffffff
    c080:	0000c7c5 	.word	0x0000c7c5

0000c084 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c086:	4b14      	ldr	r3, [pc, #80]	; (c0d8 <PDS_StoreAll+0x54>)
    c088:	781b      	ldrb	r3, [r3, #0]
    c08a:	2b00      	cmp	r3, #0
    c08c:	d121      	bne.n	c0d2 <PDS_StoreAll+0x4e>
    c08e:	4813      	ldr	r0, [pc, #76]	; (c0dc <PDS_StoreAll+0x58>)
    c090:	4d13      	ldr	r5, [pc, #76]	; (c0e0 <PDS_StoreAll+0x5c>)
    c092:	0007      	movs	r7, r0
    c094:	37d0      	adds	r7, #208	; 0xd0
    c096:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    c098:	2401      	movs	r4, #1
    c09a:	e004      	b.n	c0a6 <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    c09c:	702c      	strb	r4, [r5, #0]
    c09e:	3010      	adds	r0, #16
    c0a0:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    c0a2:	4287      	cmp	r7, r0
    c0a4:	d012      	beq.n	c0cc <PDS_StoreAll+0x48>
    c0a6:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    c0a8:	7903      	ldrb	r3, [r0, #4]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d0f7      	beq.n	c09e <PDS_StoreAll+0x1a>
    c0ae:	6803      	ldr	r3, [r0, #0]
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d0f4      	beq.n	c09e <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c0b4:	6883      	ldr	r3, [r0, #8]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d0f1      	beq.n	c09e <PDS_StoreAll+0x1a>
    c0ba:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    c0bc:	6811      	ldr	r1, [r2, #0]
    c0be:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c0c0:	3301      	adds	r3, #1
    c0c2:	b2db      	uxtb	r3, r3
    c0c4:	7911      	ldrb	r1, [r2, #4]
    c0c6:	4299      	cmp	r1, r3
    c0c8:	d8f8      	bhi.n	c0bc <PDS_StoreAll+0x38>
    c0ca:	e7e7      	b.n	c09c <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    c0cc:	2001      	movs	r0, #1
    c0ce:	4b05      	ldr	r3, [pc, #20]	; (c0e4 <PDS_StoreAll+0x60>)
    c0d0:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    c0d2:	2000      	movs	r0, #0
    c0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0d6:	46c0      	nop			; (mov r8, r8)
    c0d8:	20000df8 	.word	0x20000df8
    c0dc:	2000254c 	.word	0x2000254c
    c0e0:	2000253c 	.word	0x2000253c
    c0e4:	0000c301 	.word	0x0000c301

0000c0e8 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    c0e8:	b084      	sub	sp, #16
    c0ea:	b510      	push	{r4, lr}
    c0ec:	9103      	str	r1, [sp, #12]
    c0ee:	9204      	str	r2, [sp, #16]
    c0f0:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c0f2:	4b0b      	ldr	r3, [pc, #44]	; (c120 <PDS_RegFile+0x38>)
    c0f4:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    c0f6:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    c0f8:	2a00      	cmp	r2, #0
    c0fa:	d102      	bne.n	c102 <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    c0fc:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    c0fe:	280c      	cmp	r0, #12
    c100:	d904      	bls.n	c10c <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    c102:	0018      	movs	r0, r3
    c104:	bc10      	pop	{r4}
    c106:	bc08      	pop	{r3}
    c108:	b004      	add	sp, #16
    c10a:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    c10c:	0100      	lsls	r0, r0, #4
    c10e:	aa03      	add	r2, sp, #12
    c110:	4b04      	ldr	r3, [pc, #16]	; (c124 <PDS_RegFile+0x3c>)
    c112:	1818      	adds	r0, r3, r0
    c114:	ca1a      	ldmia	r2!, {r1, r3, r4}
    c116:	c01a      	stmia	r0!, {r1, r3, r4}
    c118:	6813      	ldr	r3, [r2, #0]
    c11a:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    c11c:	2300      	movs	r3, #0
    c11e:	e7f0      	b.n	c102 <PDS_RegFile+0x1a>
    c120:	20000df8 	.word	0x20000df8
    c124:	2000254c 	.word	0x2000254c

0000c128 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    c128:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c12a:	4b09      	ldr	r3, [pc, #36]	; (c150 <PDS_UnRegFile+0x28>)
    c12c:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    c12e:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    c130:	2a00      	cmp	r2, #0
    c132:	d102      	bne.n	c13a <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    c134:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    c136:	280c      	cmp	r0, #12
    c138:	d901      	bls.n	c13e <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    c13a:	0018      	movs	r0, r3
    c13c:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    c13e:	0100      	lsls	r0, r0, #4
    c140:	4b04      	ldr	r3, [pc, #16]	; (c154 <PDS_UnRegFile+0x2c>)
    c142:	18c0      	adds	r0, r0, r3
    c144:	3210      	adds	r2, #16
    c146:	2100      	movs	r1, #0
    c148:	4b03      	ldr	r3, [pc, #12]	; (c158 <PDS_UnRegFile+0x30>)
    c14a:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    c14c:	2300      	movs	r3, #0
    c14e:	e7f4      	b.n	c13a <PDS_UnRegFile+0x12>
    c150:	20000df8 	.word	0x20000df8
    c154:	2000254c 	.word	0x2000254c
    c158:	00017715 	.word	0x00017715

0000c15c <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    c15c:	b500      	push	{lr}
    c15e:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    c160:	4668      	mov	r0, sp
    c162:	4b0b      	ldr	r3, [pc, #44]	; (c190 <pdsNvmInit+0x34>)
    c164:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    c166:	2000      	movs	r0, #0
    c168:	4b0a      	ldr	r3, [pc, #40]	; (c194 <pdsNvmInit+0x38>)
    c16a:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    c16c:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    c16e:	2800      	cmp	r0, #0
    c170:	d002      	beq.n	c178 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    c172:	0018      	movs	r0, r3
    c174:	b005      	add	sp, #20
    c176:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    c178:	466b      	mov	r3, sp
    c17a:	899a      	ldrh	r2, [r3, #12]
    c17c:	0892      	lsrs	r2, r2, #2
    c17e:	0212      	lsls	r2, r2, #8
    c180:	4905      	ldr	r1, [pc, #20]	; (c198 <pdsNvmInit+0x3c>)
	return status;
    c182:	0fd3      	lsrs	r3, r2, #31
    c184:	17c8      	asrs	r0, r1, #31
    c186:	4291      	cmp	r1, r2
    c188:	4143      	adcs	r3, r0
    c18a:	009b      	lsls	r3, r3, #2
    c18c:	e7f1      	b.n	c172 <pdsNvmInit+0x16>
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	000032a1 	.word	0x000032a1
    c194:	0000d771 	.word	0x0000d771
    c198:	00001fff 	.word	0x00001fff

0000c19c <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19e:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    c1a0:	2380      	movs	r3, #128	; 0x80
    c1a2:	01db      	lsls	r3, r3, #7
    c1a4:	469c      	mov	ip, r3
    c1a6:	4460      	add	r0, ip
    c1a8:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    c1aa:	2380      	movs	r3, #128	; 0x80
    c1ac:	005b      	lsls	r3, r3, #1
    c1ae:	429a      	cmp	r2, r3
    c1b0:	d00e      	beq.n	c1d0 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    c1b2:	3204      	adds	r2, #4
    c1b4:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    c1b6:	4f1e      	ldr	r7, [pc, #120]	; (c230 <pdsNvmRead+0x94>)
    c1b8:	0033      	movs	r3, r6
    c1ba:	0022      	movs	r2, r4
    c1bc:	0029      	movs	r1, r5
    c1be:	2000      	movs	r0, #0
    c1c0:	47b8      	blx	r7
    c1c2:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    c1c4:	2b05      	cmp	r3, #5
    c1c6:	d0f7      	beq.n	c1b8 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    c1c8:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d00b      	beq.n	c1e6 <pdsNvmRead+0x4a>
}
    c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    c1d0:	001e      	movs	r6, r3
    c1d2:	4f17      	ldr	r7, [pc, #92]	; (c230 <pdsNvmRead+0x94>)
    c1d4:	0033      	movs	r3, r6
    c1d6:	0022      	movs	r2, r4
    c1d8:	0029      	movs	r1, r5
    c1da:	2000      	movs	r0, #0
    c1dc:	47b8      	blx	r7
    c1de:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    c1e0:	2b05      	cmp	r3, #5
    c1e2:	d0f7      	beq.n	c1d4 <pdsNvmRead+0x38>
    c1e4:	e7f0      	b.n	c1c8 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    c1e6:	7823      	ldrb	r3, [r4, #0]
    c1e8:	7860      	ldrb	r0, [r4, #1]
    c1ea:	0200      	lsls	r0, r0, #8
    c1ec:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    c1ee:	78a6      	ldrb	r6, [r4, #2]
    c1f0:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    c1f2:	2e00      	cmp	r6, #0
    c1f4:	d017      	beq.n	c226 <pdsNvmRead+0x8a>
    c1f6:	0025      	movs	r5, r4
    c1f8:	3e01      	subs	r6, #1
    c1fa:	b2b6      	uxth	r6, r6
    c1fc:	3601      	adds	r6, #1
    c1fe:	19a4      	adds	r4, r4, r6
    c200:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    c202:	782b      	ldrb	r3, [r5, #0]
    c204:	4073      	eors	r3, r6
    c206:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    c208:	010b      	lsls	r3, r1, #4
    c20a:	404b      	eors	r3, r1
    c20c:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    c20e:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    c210:	091b      	lsrs	r3, r3, #4
    c212:	00d1      	lsls	r1, r2, #3
    c214:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    c216:	0212      	lsls	r2, r2, #8
    c218:	0a36      	lsrs	r6, r6, #8
    c21a:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    c21c:	4053      	eors	r3, r2
    c21e:	b29e      	uxth	r6, r3
    c220:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    c222:	42a5      	cmp	r5, r4
    c224:	d1ed      	bne.n	c202 <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    c226:	1b80      	subs	r0, r0, r6
    c228:	1e46      	subs	r6, r0, #1
    c22a:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    c22c:	b2c0      	uxtb	r0, r0
    c22e:	e7ce      	b.n	c1ce <pdsNvmRead+0x32>
    c230:	0000d601 	.word	0x0000d601

0000c234 <pdsNvmWrite>:
{
    c234:	b5f0      	push	{r4, r5, r6, r7, lr}
    c236:	46c6      	mov	lr, r8
    c238:	b500      	push	{lr}
    c23a:	4680      	mov	r8, r0
    c23c:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    c23e:	2301      	movs	r3, #1
    c240:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    c242:	708a      	strb	r2, [r1, #2]
    c244:	27ff      	movs	r7, #255	; 0xff
    c246:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    c248:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    c24a:	2f00      	cmp	r7, #0
    c24c:	d017      	beq.n	c27e <pdsNvmWrite+0x4a>
    c24e:	0030      	movs	r0, r6
    c250:	3f01      	subs	r7, #1
    c252:	b2bf      	uxth	r7, r7
    c254:	3701      	adds	r7, #1
    c256:	19f6      	adds	r6, r6, r7
    c258:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    c25a:	7803      	ldrb	r3, [r0, #0]
    c25c:	407b      	eors	r3, r7
    c25e:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    c260:	010b      	lsls	r3, r1, #4
    c262:	404b      	eors	r3, r1
    c264:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    c266:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    c268:	091b      	lsrs	r3, r3, #4
    c26a:	00cd      	lsls	r5, r1, #3
    c26c:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    c26e:	0209      	lsls	r1, r1, #8
    c270:	0a3f      	lsrs	r7, r7, #8
    c272:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    c274:	404b      	eors	r3, r1
    c276:	b29f      	uxth	r7, r3
    c278:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    c27a:	42b0      	cmp	r0, r6
    c27c:	d1ed      	bne.n	c25a <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    c27e:	7027      	strb	r7, [r4, #0]
    c280:	0a3f      	lsrs	r7, r7, #8
    c282:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    c284:	3204      	adds	r2, #4
    c286:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    c288:	2180      	movs	r1, #128	; 0x80
    c28a:	01c9      	lsls	r1, r1, #7
    c28c:	4441      	add	r1, r8
    c28e:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    c290:	0033      	movs	r3, r6
    c292:	0022      	movs	r2, r4
    c294:	2000      	movs	r0, #0
    c296:	4f08      	ldr	r7, [pc, #32]	; (c2b8 <pdsNvmWrite+0x84>)
    c298:	47b8      	blx	r7
		return PDS_ERROR;
    c29a:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    c29c:	2800      	cmp	r0, #0
    c29e:	d003      	beq.n	c2a8 <pdsNvmWrite+0x74>
}
    c2a0:	0018      	movs	r0, r3
    c2a2:	bc04      	pop	{r2}
    c2a4:	4690      	mov	r8, r2
    c2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    c2a8:	0032      	movs	r2, r6
    c2aa:	0021      	movs	r1, r4
    c2ac:	4640      	mov	r0, r8
    c2ae:	4b03      	ldr	r3, [pc, #12]	; (c2bc <pdsNvmWrite+0x88>)
    c2b0:	4798      	blx	r3
    c2b2:	0003      	movs	r3, r0
	return status;
    c2b4:	e7f4      	b.n	c2a0 <pdsNvmWrite+0x6c>
    c2b6:	46c0      	nop			; (mov r8, r8)
    c2b8:	0000d65d 	.word	0x0000d65d
    c2bc:	0000c19d 	.word	0x0000c19d

0000c2c0 <pdsNvmErase>:
{
    c2c0:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    c2c2:	2380      	movs	r3, #128	; 0x80
    c2c4:	01db      	lsls	r3, r3, #7
    c2c6:	18c4      	adds	r4, r0, r3
    c2c8:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    c2ca:	4d05      	ldr	r5, [pc, #20]	; (c2e0 <pdsNvmErase+0x20>)
    c2cc:	0020      	movs	r0, r4
    c2ce:	47a8      	blx	r5
    c2d0:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    c2d2:	0003      	movs	r3, r0
    c2d4:	330a      	adds	r3, #10
    c2d6:	d0f9      	beq.n	c2cc <pdsNvmErase+0xc>
	return status;
    c2d8:	1e43      	subs	r3, r0, #1
    c2da:	4198      	sbcs	r0, r3
    c2dc:	0040      	lsls	r0, r0, #1
}
    c2de:	bd70      	pop	{r4, r5, r6, pc}
    c2e0:	000031f9 	.word	0x000031f9

0000c2e4 <pdsNvmEraseAll>:
{
    c2e4:	b570      	push	{r4, r5, r6, lr}
    c2e6:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    c2e8:	4d04      	ldr	r5, [pc, #16]	; (c2fc <pdsNvmEraseAll+0x18>)
    c2ea:	b2a0      	uxth	r0, r4
    c2ec:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d102      	bne.n	c2f8 <pdsNvmEraseAll+0x14>
    c2f2:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    c2f4:	2c20      	cmp	r4, #32
    c2f6:	d1f8      	bne.n	c2ea <pdsNvmEraseAll+0x6>
}
    c2f8:	bd70      	pop	{r4, r5, r6, pc}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	0000c2c1 	.word	0x0000c2c1

0000c300 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    c300:	b510      	push	{r4, lr}
    c302:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    c304:	4b05      	ldr	r3, [pc, #20]	; (c31c <pdsPostTask+0x1c>)
    c306:	4798      	blx	r3
    pdsTaskFlags |= id;
    c308:	4b05      	ldr	r3, [pc, #20]	; (c320 <pdsPostTask+0x20>)
    c30a:	7818      	ldrb	r0, [r3, #0]
    c30c:	4320      	orrs	r0, r4
    c30e:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    c310:	4b04      	ldr	r3, [pc, #16]	; (c324 <pdsPostTask+0x24>)
    c312:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    c314:	2008      	movs	r0, #8
    c316:	4b04      	ldr	r3, [pc, #16]	; (c328 <pdsPostTask+0x28>)
    c318:	4798      	blx	r3
}
    c31a:	bd10      	pop	{r4, pc}
    c31c:	00005dc9 	.word	0x00005dc9
    c320:	20000df9 	.word	0x20000df9
    c324:	00005dd5 	.word	0x00005dd5
    c328:	0000d1c9 	.word	0x0000d1c9

0000c32c <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c32e:	46de      	mov	lr, fp
    c330:	4657      	mov	r7, sl
    c332:	464e      	mov	r6, r9
    c334:	4645      	mov	r5, r8
    c336:	b5e0      	push	{r5, r6, r7, lr}
    c338:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    c33a:	2280      	movs	r2, #128	; 0x80
    c33c:	0052      	lsls	r2, r2, #1
    c33e:	2100      	movs	r1, #0
    c340:	a804      	add	r0, sp, #16
    c342:	4b54      	ldr	r3, [pc, #336]	; (c494 <pdsStoreDeleteHandler+0x168>)
    c344:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    c346:	4b54      	ldr	r3, [pc, #336]	; (c498 <pdsStoreDeleteHandler+0x16c>)
    c348:	781b      	ldrb	r3, [r3, #0]
    c34a:	2b00      	cmp	r3, #0
    c34c:	d112      	bne.n	c374 <pdsStoreDeleteHandler+0x48>
    c34e:	2401      	movs	r4, #1
    c350:	4a51      	ldr	r2, [pc, #324]	; (c498 <pdsStoreDeleteHandler+0x16c>)
    c352:	9400      	str	r4, [sp, #0]
    c354:	5d13      	ldrb	r3, [r2, r4]
    c356:	2b00      	cmp	r3, #0
    c358:	d10f      	bne.n	c37a <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    c35a:	3401      	adds	r4, #1
    c35c:	b2e4      	uxtb	r4, r4
    c35e:	2c0c      	cmp	r4, #12
    c360:	d9f7      	bls.n	c352 <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    c362:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    c364:	0028      	movs	r0, r5
    c366:	b045      	add	sp, #276	; 0x114
    c368:	bc3c      	pop	{r2, r3, r4, r5}
    c36a:	4690      	mov	r8, r2
    c36c:	4699      	mov	r9, r3
    c36e:	46a2      	mov	sl, r4
    c370:	46ab      	mov	fp, r5
    c372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    c374:	2300      	movs	r3, #0
    c376:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    c378:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    c37a:	9b00      	ldr	r3, [sp, #0]
    c37c:	011a      	lsls	r2, r3, #4
    c37e:	4b47      	ldr	r3, [pc, #284]	; (c49c <pdsStoreDeleteHandler+0x170>)
    c380:	189b      	adds	r3, r3, r2
    c382:	7919      	ldrb	r1, [r3, #4]
    c384:	4a46      	ldr	r2, [pc, #280]	; (c4a0 <pdsStoreDeleteHandler+0x174>)
    c386:	4694      	mov	ip, r2
    c388:	4461      	add	r1, ip
    c38a:	00c9      	lsls	r1, r1, #3
    c38c:	689b      	ldr	r3, [r3, #8]
    c38e:	1859      	adds	r1, r3, r1
    c390:	2208      	movs	r2, #8
    c392:	a802      	add	r0, sp, #8
    c394:	4b43      	ldr	r3, [pc, #268]	; (c4a4 <pdsStoreDeleteHandler+0x178>)
    c396:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    c398:	ab02      	add	r3, sp, #8
    c39a:	79da      	ldrb	r2, [r3, #7]
    c39c:	799b      	ldrb	r3, [r3, #6]
    c39e:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    c3a0:	3205      	adds	r2, #5
    c3a2:	a904      	add	r1, sp, #16
    c3a4:	0020      	movs	r0, r4
    c3a6:	4b40      	ldr	r3, [pc, #256]	; (c4a8 <pdsStoreDeleteHandler+0x17c>)
    c3a8:	4798      	blx	r3
    c3aa:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    c3ac:	d111      	bne.n	c3d2 <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c3ae:	9b00      	ldr	r3, [sp, #0]
    c3b0:	011a      	lsls	r2, r3, #4
    c3b2:	4b3a      	ldr	r3, [pc, #232]	; (c49c <pdsStoreDeleteHandler+0x170>)
    c3b4:	189b      	adds	r3, r3, r2
    c3b6:	791b      	ldrb	r3, [r3, #4]
    c3b8:	2500      	movs	r5, #0
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d04a      	beq.n	c454 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    c3be:	4b37      	ldr	r3, [pc, #220]	; (c49c <pdsStoreDeleteHandler+0x170>)
    c3c0:	4699      	mov	r9, r3
    c3c2:	9b00      	ldr	r3, [sp, #0]
    c3c4:	011e      	lsls	r6, r3, #4
    c3c6:	46b3      	mov	fp, r6
    c3c8:	44cb      	add	fp, r9
    c3ca:	4b36      	ldr	r3, [pc, #216]	; (c4a4 <pdsStoreDeleteHandler+0x178>)
    c3cc:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c3ce:	465f      	mov	r7, fp
    c3d0:	e01b      	b.n	c40a <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    c3d2:	2803      	cmp	r0, #3
    c3d4:	d144      	bne.n	c460 <pdsStoreDeleteHandler+0x134>
    c3d6:	e7ea      	b.n	c3ae <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    c3d8:	2100      	movs	r1, #0
    c3da:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    c3dc:	ab02      	add	r3, sp, #8
    c3de:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    c3e0:	795b      	ldrb	r3, [r3, #5]
    c3e2:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    c3e4:	23a5      	movs	r3, #165	; 0xa5
    c3e6:	7003      	strb	r3, [r0, #0]
    c3e8:	2301      	movs	r3, #1
    c3ea:	7043      	strb	r3, [r0, #1]
    c3ec:	7082      	strb	r2, [r0, #2]
    c3ee:	4643      	mov	r3, r8
    c3f0:	70c3      	strb	r3, [r0, #3]
    c3f2:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    c3f4:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    c3f6:	9b02      	ldr	r3, [sp, #8]
    c3f8:	9301      	str	r3, [sp, #4]
    c3fa:	0019      	movs	r1, r3
    c3fc:	4b29      	ldr	r3, [pc, #164]	; (c4a4 <pdsStoreDeleteHandler+0x178>)
    c3fe:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c400:	3501      	adds	r5, #1
    c402:	b2ed      	uxtb	r5, r5
    c404:	793b      	ldrb	r3, [r7, #4]
    c406:	42ab      	cmp	r3, r5
    c408:	d924      	bls.n	c454 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    c40a:	00e9      	lsls	r1, r5, #3
    c40c:	465b      	mov	r3, fp
    c40e:	689b      	ldr	r3, [r3, #8]
    c410:	469c      	mov	ip, r3
    c412:	4461      	add	r1, ip
    c414:	2208      	movs	r2, #8
    c416:	a802      	add	r0, sp, #8
    c418:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    c41a:	ab02      	add	r3, sp, #8
    c41c:	79d8      	ldrb	r0, [r3, #7]
    c41e:	2315      	movs	r3, #21
    c420:	aa02      	add	r2, sp, #8
    c422:	4694      	mov	ip, r2
    c424:	4463      	add	r3, ip
    c426:	469c      	mov	ip, r3
    c428:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    c42a:	464b      	mov	r3, r9
    c42c:	58f3      	ldr	r3, [r6, r3]
    c42e:	195b      	adds	r3, r3, r5
    c430:	781a      	ldrb	r2, [r3, #0]
    c432:	2a01      	cmp	r2, #1
    c434:	d0d0      	beq.n	c3d8 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    c436:	2a02      	cmp	r2, #2
    c438:	d1e2      	bne.n	c400 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    c43a:	2200      	movs	r2, #0
    c43c:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    c43e:	ab02      	add	r3, sp, #8
    c440:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    c442:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    c444:	23a5      	movs	r3, #165	; 0xa5
    c446:	7003      	strb	r3, [r0, #0]
    c448:	3ba4      	subs	r3, #164	; 0xa4
    c44a:	7043      	strb	r3, [r0, #1]
    c44c:	7081      	strb	r1, [r0, #2]
    c44e:	70c2      	strb	r2, [r0, #3]
    c450:	7103      	strb	r3, [r0, #4]
    c452:	e7d5      	b.n	c400 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    c454:	22f3      	movs	r2, #243	; 0xf3
    c456:	a904      	add	r1, sp, #16
    c458:	0020      	movs	r0, r4
    c45a:	4b14      	ldr	r3, [pc, #80]	; (c4ac <pdsStoreDeleteHandler+0x180>)
    c45c:	4798      	blx	r3
    c45e:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    c460:	2200      	movs	r2, #0
    c462:	4b0d      	ldr	r3, [pc, #52]	; (c498 <pdsStoreDeleteHandler+0x16c>)
    c464:	9900      	ldr	r1, [sp, #0]
    c466:	545a      	strb	r2, [r3, r1]
			fileId++;
    c468:	3401      	adds	r4, #1
    c46a:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    c46c:	2b0c      	cmp	r3, #12
    c46e:	d900      	bls.n	c472 <pdsStoreDeleteHandler+0x146>
    c470:	e778      	b.n	c364 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    c472:	4a09      	ldr	r2, [pc, #36]	; (c498 <pdsStoreDeleteHandler+0x16c>)
    c474:	5cd2      	ldrb	r2, [r2, r3]
    c476:	2a00      	cmp	r2, #0
    c478:	d108      	bne.n	c48c <pdsStoreDeleteHandler+0x160>
    c47a:	4907      	ldr	r1, [pc, #28]	; (c498 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    c47c:	3301      	adds	r3, #1
    c47e:	b2db      	uxtb	r3, r3
    c480:	2b0c      	cmp	r3, #12
    c482:	d900      	bls.n	c486 <pdsStoreDeleteHandler+0x15a>
    c484:	e76e      	b.n	c364 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    c486:	5cca      	ldrb	r2, [r1, r3]
    c488:	2a00      	cmp	r2, #0
    c48a:	d0f7      	beq.n	c47c <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    c48c:	2001      	movs	r0, #1
    c48e:	4b08      	ldr	r3, [pc, #32]	; (c4b0 <pdsStoreDeleteHandler+0x184>)
    c490:	4798      	blx	r3
			break;
    c492:	e767      	b.n	c364 <pdsStoreDeleteHandler+0x38>
    c494:	00017715 	.word	0x00017715
    c498:	2000253c 	.word	0x2000253c
    c49c:	2000254c 	.word	0x2000254c
    c4a0:	1fffffff 	.word	0x1fffffff
    c4a4:	00017691 	.word	0x00017691
    c4a8:	0000c7c5 	.word	0x0000c7c5
    c4ac:	0000c6d5 	.word	0x0000c6d5
    c4b0:	0000c301 	.word	0x0000c301

0000c4b4 <PDS_TaskHandler>:
{
    c4b4:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    c4b6:	4b0e      	ldr	r3, [pc, #56]	; (c4f0 <PDS_TaskHandler+0x3c>)
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d003      	beq.n	c4c6 <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    c4be:	4b0c      	ldr	r3, [pc, #48]	; (c4f0 <PDS_TaskHandler+0x3c>)
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	07db      	lsls	r3, r3, #31
    c4c4:	d401      	bmi.n	c4ca <PDS_TaskHandler+0x16>
}
    c4c6:	2000      	movs	r0, #0
    c4c8:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    c4ca:	4b0a      	ldr	r3, [pc, #40]	; (c4f4 <PDS_TaskHandler+0x40>)
    c4cc:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    c4ce:	4c08      	ldr	r4, [pc, #32]	; (c4f0 <PDS_TaskHandler+0x3c>)
    c4d0:	7823      	ldrb	r3, [r4, #0]
    c4d2:	2201      	movs	r2, #1
    c4d4:	4393      	bics	r3, r2
    c4d6:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    c4d8:	4b07      	ldr	r3, [pc, #28]	; (c4f8 <PDS_TaskHandler+0x44>)
    c4da:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    c4dc:	4b07      	ldr	r3, [pc, #28]	; (c4fc <PDS_TaskHandler+0x48>)
    c4de:	4798      	blx	r3
				if (pdsTaskFlags)
    c4e0:	7823      	ldrb	r3, [r4, #0]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d0ef      	beq.n	c4c6 <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    c4e6:	2008      	movs	r0, #8
    c4e8:	4b05      	ldr	r3, [pc, #20]	; (c500 <PDS_TaskHandler+0x4c>)
    c4ea:	4798      	blx	r3
    c4ec:	e7eb      	b.n	c4c6 <PDS_TaskHandler+0x12>
    c4ee:	46c0      	nop			; (mov r8, r8)
    c4f0:	20000df9 	.word	0x20000df9
    c4f4:	00005dc9 	.word	0x00005dc9
    c4f8:	00005dd5 	.word	0x00005dd5
    c4fc:	0000c32d 	.word	0x0000c32d
    c500:	0000d1c9 	.word	0x0000d1c9

0000c504 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    c504:	b5f0      	push	{r4, r5, r6, r7, lr}
    c506:	4e12      	ldr	r6, [pc, #72]	; (c550 <pdsUpdateRowMap+0x4c>)
    c508:	0037      	movs	r7, r6
    c50a:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    c50c:	4d11      	ldr	r5, [pc, #68]	; (c554 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    c50e:	4b12      	ldr	r3, [pc, #72]	; (c558 <pdsUpdateRowMap+0x54>)
    c510:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    c512:	2101      	movs	r1, #1
    c514:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    c516:	0018      	movs	r0, r3
    c518:	e002      	b.n	c520 <pdsUpdateRowMap+0x1c>
    c51a:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    c51c:	42be      	cmp	r6, r7
    c51e:	d015      	beq.n	c54c <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    c520:	8833      	ldrh	r3, [r6, #0]
    c522:	42ab      	cmp	r3, r5
    c524:	d0f9      	beq.n	c51a <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    c526:	00db      	lsls	r3, r3, #3
    c528:	4463      	add	r3, ip
    c52a:	001a      	movs	r2, r3
    c52c:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    c52e:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    c530:	42ab      	cmp	r3, r5
    c532:	d0f2      	beq.n	c51a <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    c534:	001a      	movs	r2, r3
    c536:	00db      	lsls	r3, r3, #3
    c538:	18c3      	adds	r3, r0, r3
    c53a:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    c53c:	00d2      	lsls	r2, r2, #3
    c53e:	1884      	adds	r4, r0, r2
    c540:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    c542:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    c544:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    c546:	42ab      	cmp	r3, r5
    c548:	d1f4      	bne.n	c534 <pdsUpdateRowMap+0x30>
    c54a:	e7e6      	b.n	c51a <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c54e:	46c0      	nop			; (mov r8, r8)
    c550:	20000dfc 	.word	0x20000dfc
    c554:	0000ffff 	.word	0x0000ffff
    c558:	20000e18 	.word	0x20000e18

0000c55c <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c55e:	46c6      	mov	lr, r8
    c560:	b500      	push	{lr}
    c562:	b082      	sub	sp, #8
    c564:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    c566:	8881      	ldrh	r1, [r0, #4]
    c568:	004a      	lsls	r2, r1, #1
    c56a:	4b2c      	ldr	r3, [pc, #176]	; (c61c <pdsUpdateFileMap+0xc0>)
    c56c:	5ad3      	ldrh	r3, [r2, r3]
    c56e:	4a2c      	ldr	r2, [pc, #176]	; (c620 <pdsUpdateFileMap+0xc4>)
    c570:	4293      	cmp	r3, r2
    c572:	d02c      	beq.n	c5ce <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    c574:	4a2b      	ldr	r2, [pc, #172]	; (c624 <pdsUpdateFileMap+0xc8>)
    c576:	00d8      	lsls	r0, r3, #3
    c578:	5880      	ldr	r0, [r0, r2]
    c57a:	4664      	mov	r4, ip
    c57c:	88e4      	ldrh	r4, [r4, #6]
    c57e:	46a0      	mov	r8, r4
    c580:	00e4      	lsls	r4, r4, #3
    c582:	58a6      	ldr	r6, [r4, r2]
    c584:	42b0      	cmp	r0, r6
    c586:	d327      	bcc.n	c5d8 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    c588:	d02f      	beq.n	c5ea <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    c58a:	4a26      	ldr	r2, [pc, #152]	; (c624 <pdsUpdateFileMap+0xc8>)
    c58c:	00dd      	lsls	r5, r3, #3
    c58e:	3506      	adds	r5, #6
    c590:	1950      	adds	r0, r2, r5
    c592:	9001      	str	r0, [sp, #4]
    c594:	00db      	lsls	r3, r3, #3
    c596:	18d3      	adds	r3, r2, r3
    c598:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    c59a:	4b21      	ldr	r3, [pc, #132]	; (c620 <pdsUpdateFileMap+0xc4>)
    c59c:	429a      	cmp	r2, r3
    c59e:	d028      	beq.n	c5f2 <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    c5a0:	0013      	movs	r3, r2
    c5a2:	00d0      	lsls	r0, r2, #3
    c5a4:	4c1f      	ldr	r4, [pc, #124]	; (c624 <pdsUpdateFileMap+0xc8>)
    c5a6:	5900      	ldr	r0, [r0, r4]
    c5a8:	4286      	cmp	r6, r0
    c5aa:	d226      	bcs.n	c5fa <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    c5ac:	4c1d      	ldr	r4, [pc, #116]	; (c624 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    c5ae:	4f1c      	ldr	r7, [pc, #112]	; (c620 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    c5b0:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    c5b2:	00db      	lsls	r3, r3, #3
    c5b4:	1d99      	adds	r1, r3, #6
    c5b6:	1861      	adds	r1, r4, r1
    c5b8:	18e3      	adds	r3, r4, r3
    c5ba:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    c5bc:	42ba      	cmp	r2, r7
    c5be:	d019      	beq.n	c5f4 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    c5c0:	0013      	movs	r3, r2
    c5c2:	00d5      	lsls	r5, r2, #3
    c5c4:	582d      	ldr	r5, [r5, r0]
    c5c6:	42ae      	cmp	r6, r5
    c5c8:	d21b      	bcs.n	c602 <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    c5ca:	9101      	str	r1, [sp, #4]
    c5cc:	e7f1      	b.n	c5b2 <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    c5ce:	88c2      	ldrh	r2, [r0, #6]
    c5d0:	0049      	lsls	r1, r1, #1
    c5d2:	4b12      	ldr	r3, [pc, #72]	; (c61c <pdsUpdateFileMap+0xc0>)
    c5d4:	52ca      	strh	r2, [r1, r3]
    c5d6:	e008      	b.n	c5ea <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    c5d8:	4a12      	ldr	r2, [pc, #72]	; (c624 <pdsUpdateFileMap+0xc8>)
    c5da:	1912      	adds	r2, r2, r4
    c5dc:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    c5de:	4663      	mov	r3, ip
    c5e0:	88d9      	ldrh	r1, [r3, #6]
    c5e2:	889b      	ldrh	r3, [r3, #4]
    c5e4:	005b      	lsls	r3, r3, #1
    c5e6:	4a0d      	ldr	r2, [pc, #52]	; (c61c <pdsUpdateFileMap+0xc0>)
    c5e8:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    c5ea:	b002      	add	sp, #8
    c5ec:	bc04      	pop	{r2}
    c5ee:	4690      	mov	r8, r2
    c5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    c5f2:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    c5f4:	4643      	mov	r3, r8
    c5f6:	800b      	strh	r3, [r1, #0]
				break;
    c5f8:	e7f7      	b.n	c5ea <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    c5fa:	0049      	lsls	r1, r1, #1
    c5fc:	4d07      	ldr	r5, [pc, #28]	; (c61c <pdsUpdateFileMap+0xc0>)
    c5fe:	186b      	adds	r3, r5, r1
    c600:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    c602:	4908      	ldr	r1, [pc, #32]	; (c624 <pdsUpdateFileMap+0xc8>)
    c604:	9b01      	ldr	r3, [sp, #4]
    c606:	881b      	ldrh	r3, [r3, #0]
    c608:	00db      	lsls	r3, r3, #3
    c60a:	18cb      	adds	r3, r1, r3
    c60c:	4640      	mov	r0, r8
    c60e:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    c610:	4663      	mov	r3, ip
    c612:	88db      	ldrh	r3, [r3, #6]
    c614:	00db      	lsls	r3, r3, #3
    c616:	18c9      	adds	r1, r1, r3
    c618:	80ca      	strh	r2, [r1, #6]
				break;
    c61a:	e7e6      	b.n	c5ea <pdsUpdateFileMap+0x8e>
    c61c:	20000dfc 	.word	0x20000dfc
    c620:	0000ffff 	.word	0x0000ffff
    c624:	20000e18 	.word	0x20000e18

0000c628 <pdsWlInit>:
{
    c628:	b5f0      	push	{r4, r5, r6, r7, lr}
    c62a:	46c6      	mov	lr, r8
    c62c:	b500      	push	{lr}
    c62e:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    c630:	4b21      	ldr	r3, [pc, #132]	; (c6b8 <pdsWlInit+0x90>)
    c632:	4798      	blx	r3
    c634:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    c636:	2800      	cmp	r0, #0
    c638:	d004      	beq.n	c644 <pdsWlInit+0x1c>
}
    c63a:	9801      	ldr	r0, [sp, #4]
    c63c:	b044      	add	sp, #272	; 0x110
    c63e:	bc04      	pop	{r2}
    c640:	4690      	mov	r8, r2
    c642:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    c644:	2680      	movs	r6, #128	; 0x80
    c646:	0076      	lsls	r6, r6, #1
    c648:	4d1c      	ldr	r5, [pc, #112]	; (c6bc <pdsWlInit+0x94>)
    c64a:	0032      	movs	r2, r6
    c64c:	21ff      	movs	r1, #255	; 0xff
    c64e:	0028      	movs	r0, r5
    c650:	4c1b      	ldr	r4, [pc, #108]	; (c6c0 <pdsWlInit+0x98>)
    c652:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    c654:	221a      	movs	r2, #26
    c656:	21ff      	movs	r1, #255	; 0xff
    c658:	481a      	ldr	r0, [pc, #104]	; (c6c4 <pdsWlInit+0x9c>)
    c65a:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    c65c:	0032      	movs	r2, r6
    c65e:	2100      	movs	r1, #0
    c660:	a804      	add	r0, sp, #16
    c662:	47a0      	blx	r4
    c664:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    c666:	4e18      	ldr	r6, [pc, #96]	; (c6c8 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    c668:	4b18      	ldr	r3, [pc, #96]	; (c6cc <pdsWlInit+0xa4>)
    c66a:	4698      	mov	r8, r3
    c66c:	e003      	b.n	c676 <pdsWlInit+0x4e>
    c66e:	3401      	adds	r4, #1
    c670:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    c672:	2c20      	cmp	r4, #32
    c674:	d01d      	beq.n	c6b2 <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    c676:	b2a7      	uxth	r7, r4
    c678:	2280      	movs	r2, #128	; 0x80
    c67a:	0052      	lsls	r2, r2, #1
    c67c:	a904      	add	r1, sp, #16
    c67e:	0038      	movs	r0, r7
    c680:	47b0      	blx	r6
		if (PDS_OK == status)
    c682:	2800      	cmp	r0, #0
    c684:	d1f3      	bne.n	c66e <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    c686:	a904      	add	r1, sp, #16
    c688:	9b06      	ldr	r3, [sp, #24]
    c68a:	0a1b      	lsrs	r3, r3, #8
    c68c:	7b0a      	ldrb	r2, [r1, #12]
    c68e:	0612      	lsls	r2, r2, #24
    c690:	431a      	orrs	r2, r3
    c692:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    c694:	79c8      	ldrb	r0, [r1, #7]
    c696:	7a0b      	ldrb	r3, [r1, #8]
    c698:	021b      	lsls	r3, r3, #8
    c69a:	4303      	orrs	r3, r0
    c69c:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    c69e:	2101      	movs	r1, #1
    c6a0:	4249      	negs	r1, r1
    c6a2:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    c6a4:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    c6a6:	aa02      	add	r2, sp, #8
    c6a8:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    c6aa:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    c6ac:	0010      	movs	r0, r2
    c6ae:	47c0      	blx	r8
    c6b0:	e7dd      	b.n	c66e <pdsWlInit+0x46>
    pdsUpdateRowMap();
    c6b2:	4b07      	ldr	r3, [pc, #28]	; (c6d0 <pdsWlInit+0xa8>)
    c6b4:	4798      	blx	r3
	return PDS_OK;
    c6b6:	e7c0      	b.n	c63a <pdsWlInit+0x12>
    c6b8:	0000c15d 	.word	0x0000c15d
    c6bc:	20000e18 	.word	0x20000e18
    c6c0:	00017715 	.word	0x00017715
    c6c4:	20000dfc 	.word	0x20000dfc
    c6c8:	0000c19d 	.word	0x0000c19d
    c6cc:	0000c55d 	.word	0x0000c55d
    c6d0:	0000c505 	.word	0x0000c505

0000c6d4 <pdsWlWrite>:
{
    c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6d6:	46ce      	mov	lr, r9
    c6d8:	4647      	mov	r7, r8
    c6da:	b580      	push	{r7, lr}
    c6dc:	b083      	sub	sp, #12
    c6de:	0005      	movs	r5, r0
    c6e0:	000f      	movs	r7, r1
    c6e2:	4690      	mov	r8, r2
    c6e4:	4e32      	ldr	r6, [pc, #200]	; (c7b0 <pdsWlWrite+0xdc>)
    c6e6:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    c6e8:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    c6ea:	4832      	ldr	r0, [pc, #200]	; (c7b4 <pdsWlWrite+0xe0>)
    c6ec:	e004      	b.n	c6f8 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    c6ee:	3401      	adds	r4, #1
    c6f0:	b2e4      	uxtb	r4, r4
    c6f2:	3308      	adds	r3, #8
    c6f4:	2c20      	cmp	r4, #32
    c6f6:	d055      	beq.n	c7a4 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    c6f8:	6819      	ldr	r1, [r3, #0]
    c6fa:	3101      	adds	r1, #1
    c6fc:	d1f7      	bne.n	c6ee <pdsWlWrite+0x1a>
    c6fe:	88d9      	ldrh	r1, [r3, #6]
    c700:	4281      	cmp	r1, r0
    c702:	d1f4      	bne.n	c6ee <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    c704:	889a      	ldrh	r2, [r3, #4]
    c706:	4282      	cmp	r2, r0
    c708:	d1f1      	bne.n	c6ee <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    c70a:	b2a3      	uxth	r3, r4
    c70c:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    c70e:	7a7e      	ldrb	r6, [r7, #9]
    c710:	7abb      	ldrb	r3, [r7, #10]
    c712:	021b      	lsls	r3, r3, #8
    c714:	4333      	orrs	r3, r6
    c716:	7afe      	ldrb	r6, [r7, #11]
    c718:	0436      	lsls	r6, r6, #16
    c71a:	4333      	orrs	r3, r6
    c71c:	7b3e      	ldrb	r6, [r7, #12]
    c71e:	0636      	lsls	r6, r6, #24
    c720:	431e      	orrs	r6, r3
    c722:	3601      	adds	r6, #1
    c724:	727e      	strb	r6, [r7, #9]
    c726:	0a32      	lsrs	r2, r6, #8
    c728:	72ba      	strb	r2, [r7, #10]
    c72a:	0c32      	lsrs	r2, r6, #16
    c72c:	72fa      	strb	r2, [r7, #11]
    c72e:	0e32      	lsrs	r2, r6, #24
    c730:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    c732:	b2ad      	uxth	r5, r5
    c734:	71fd      	strb	r5, [r7, #7]
    c736:	2200      	movs	r2, #0
    c738:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    c73a:	23a5      	movs	r3, #165	; 0xa5
    c73c:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    c73e:	3ba4      	subs	r3, #164	; 0xa4
    c740:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    c742:	4643      	mov	r3, r8
    c744:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    c746:	4642      	mov	r2, r8
    c748:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    c74a:	b292      	uxth	r2, r2
    c74c:	0039      	movs	r1, r7
    c74e:	4648      	mov	r0, r9
    c750:	4b19      	ldr	r3, [pc, #100]	; (c7b8 <pdsWlWrite+0xe4>)
    c752:	4798      	blx	r3
    c754:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    c756:	d014      	beq.n	c782 <pdsWlWrite+0xae>
}
    c758:	0038      	movs	r0, r7
    c75a:	b003      	add	sp, #12
    c75c:	bc0c      	pop	{r2, r3}
    c75e:	4690      	mov	r8, r2
    c760:	4699      	mov	r9, r3
    c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    c764:	3401      	adds	r4, #1
    c766:	b2e4      	uxtb	r4, r4
    c768:	3608      	adds	r6, #8
    c76a:	2c20      	cmp	r4, #32
    c76c:	d0cd      	beq.n	c70a <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    c76e:	6832      	ldr	r2, [r6, #0]
    c770:	3201      	adds	r2, #1
    c772:	d1f7      	bne.n	c764 <pdsWlWrite+0x90>
    c774:	88f2      	ldrh	r2, [r6, #6]
    c776:	428a      	cmp	r2, r1
    c778:	d1f4      	bne.n	c764 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    c77a:	88b3      	ldrh	r3, [r6, #4]
    c77c:	428b      	cmp	r3, r1
    c77e:	d1f1      	bne.n	c764 <pdsWlWrite+0x90>
    c780:	e7c3      	b.n	c70a <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    c782:	4b0b      	ldr	r3, [pc, #44]	; (c7b0 <pdsWlWrite+0xdc>)
    c784:	00e4      	lsls	r4, r4, #3
    c786:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    c788:	191c      	adds	r4, r3, r4
    c78a:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    c78c:	2301      	movs	r3, #1
    c78e:	425b      	negs	r3, r3
    c790:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    c792:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    c794:	466b      	mov	r3, sp
    c796:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    c798:	464a      	mov	r2, r9
    c79a:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    c79c:	4668      	mov	r0, sp
    c79e:	4b07      	ldr	r3, [pc, #28]	; (c7bc <pdsWlWrite+0xe8>)
    c7a0:	4798      	blx	r3
	return status;
    c7a2:	e7d9      	b.n	c758 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    c7a4:	4b06      	ldr	r3, [pc, #24]	; (c7c0 <pdsWlWrite+0xec>)
    c7a6:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    c7a8:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    c7aa:	4902      	ldr	r1, [pc, #8]	; (c7b4 <pdsWlWrite+0xe0>)
    c7ac:	e7df      	b.n	c76e <pdsWlWrite+0x9a>
    c7ae:	46c0      	nop			; (mov r8, r8)
    c7b0:	20000e18 	.word	0x20000e18
    c7b4:	0000ffff 	.word	0x0000ffff
    c7b8:	0000c235 	.word	0x0000c235
    c7bc:	0000c55d 	.word	0x0000c55d
    c7c0:	0000c505 	.word	0x0000c505

0000c7c4 <pdsWlRead>:
{
    c7c4:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    c7c6:	0040      	lsls	r0, r0, #1
    c7c8:	4b06      	ldr	r3, [pc, #24]	; (c7e4 <pdsWlRead+0x20>)
    c7ca:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    c7cc:	4c06      	ldr	r4, [pc, #24]	; (c7e8 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    c7ce:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    c7d0:	42a3      	cmp	r3, r4
    c7d2:	d100      	bne.n	c7d6 <pdsWlRead+0x12>
}
    c7d4:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    c7d6:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    c7d8:	b292      	uxth	r2, r2
    c7da:	0018      	movs	r0, r3
    c7dc:	4b03      	ldr	r3, [pc, #12]	; (c7ec <pdsWlRead+0x28>)
    c7de:	4798      	blx	r3
	return status;
    c7e0:	e7f8      	b.n	c7d4 <pdsWlRead+0x10>
    c7e2:	46c0      	nop			; (mov r8, r8)
    c7e4:	20000dfc 	.word	0x20000dfc
    c7e8:	0000ffff 	.word	0x0000ffff
    c7ec:	0000c19d 	.word	0x0000c19d

0000c7f0 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    c7f0:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    c7f2:	4b04      	ldr	r3, [pc, #16]	; (c804 <isFileFound+0x14>)
    c7f4:	5ac0      	ldrh	r0, [r0, r3]
    c7f6:	4b04      	ldr	r3, [pc, #16]	; (c808 <isFileFound+0x18>)
    c7f8:	469c      	mov	ip, r3
    c7fa:	4460      	add	r0, ip
    c7fc:	1e43      	subs	r3, r0, #1
    c7fe:	4198      	sbcs	r0, r3
    c800:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    c802:	4770      	bx	lr
    c804:	20000dfc 	.word	0x20000dfc
    c808:	ffff0001 	.word	0xffff0001

0000c80c <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    c80c:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    c80e:	2280      	movs	r2, #128	; 0x80
    c810:	0052      	lsls	r2, r2, #1
    c812:	21ff      	movs	r1, #255	; 0xff
    c814:	4804      	ldr	r0, [pc, #16]	; (c828 <pdsWlDeleteAll+0x1c>)
    c816:	4c05      	ldr	r4, [pc, #20]	; (c82c <pdsWlDeleteAll+0x20>)
    c818:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    c81a:	221a      	movs	r2, #26
    c81c:	21ff      	movs	r1, #255	; 0xff
    c81e:	4804      	ldr	r0, [pc, #16]	; (c830 <pdsWlDeleteAll+0x24>)
    c820:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    c822:	4b04      	ldr	r3, [pc, #16]	; (c834 <pdsWlDeleteAll+0x28>)
    c824:	4798      	blx	r3
}
    c826:	bd10      	pop	{r4, pc}
    c828:	20000e18 	.word	0x20000e18
    c82c:	00017715 	.word	0x00017715
    c830:	20000dfc 	.word	0x20000dfc
    c834:	0000c2e5 	.word	0x0000c2e5

0000c838 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    c838:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    c83a:	4b06      	ldr	r3, [pc, #24]	; (c854 <hwTimerExpiryCallback+0x1c>)
    c83c:	781b      	ldrb	r3, [r3, #0]
    c83e:	2b00      	cmp	r3, #0
    c840:	d100      	bne.n	c844 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    c842:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    c844:	2201      	movs	r2, #1
    c846:	4b04      	ldr	r3, [pc, #16]	; (c858 <hwTimerExpiryCallback+0x20>)
    c848:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    c84a:	2001      	movs	r0, #1
    c84c:	4b03      	ldr	r3, [pc, #12]	; (c85c <hwTimerExpiryCallback+0x24>)
    c84e:	4798      	blx	r3
}
    c850:	e7f7      	b.n	c842 <hwTimerExpiryCallback+0xa>
    c852:	46c0      	nop			; (mov r8, r8)
    c854:	20000f28 	.word	0x20000f28
    c858:	200027c2 	.word	0x200027c2
    c85c:	0000d1c9 	.word	0x0000d1c9

0000c860 <hwTimerOverflowCallback>:
{
    c860:	b510      	push	{r4, lr}
    c862:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    c864:	4924      	ldr	r1, [pc, #144]	; (c8f8 <hwTimerOverflowCallback+0x98>)
    c866:	880a      	ldrh	r2, [r1, #0]
    c868:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    c86a:	880b      	ldrh	r3, [r1, #0]
    c86c:	3301      	adds	r3, #1
    c86e:	b29b      	uxth	r3, r3
    c870:	800b      	strh	r3, [r1, #0]
    c872:	429a      	cmp	r2, r3
    c874:	d903      	bls.n	c87e <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    c876:	4a21      	ldr	r2, [pc, #132]	; (c8fc <hwTimerOverflowCallback+0x9c>)
    c878:	6813      	ldr	r3, [r2, #0]
    c87a:	3301      	adds	r3, #1
    c87c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c87e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c882:	425a      	negs	r2, r3
    c884:	4153      	adcs	r3, r2
    c886:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c888:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c88a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c88e:	2200      	movs	r2, #0
    c890:	4b1b      	ldr	r3, [pc, #108]	; (c900 <hwTimerOverflowCallback+0xa0>)
    c892:	701a      	strb	r2, [r3, #0]
	return flags;
    c894:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    c896:	4b1b      	ldr	r3, [pc, #108]	; (c904 <hwTimerOverflowCallback+0xa4>)
    c898:	681b      	ldr	r3, [r3, #0]
    c89a:	2bff      	cmp	r3, #255	; 0xff
    c89c:	d00d      	beq.n	c8ba <hwTimerOverflowCallback+0x5a>
    c89e:	0119      	lsls	r1, r3, #4
    c8a0:	4a19      	ldr	r2, [pc, #100]	; (c908 <hwTimerOverflowCallback+0xa8>)
    c8a2:	1852      	adds	r2, r2, r1
    c8a4:	7b52      	ldrb	r2, [r2, #13]
    c8a6:	2a00      	cmp	r2, #0
    c8a8:	d107      	bne.n	c8ba <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    c8aa:	4a17      	ldr	r2, [pc, #92]	; (c908 <hwTimerOverflowCallback+0xa8>)
    c8ac:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    c8ae:	4b12      	ldr	r3, [pc, #72]	; (c8f8 <hwTimerOverflowCallback+0x98>)
    c8b0:	881b      	ldrh	r3, [r3, #0]
    c8b2:	b29b      	uxth	r3, r3
    c8b4:	0c02      	lsrs	r2, r0, #16
    c8b6:	429a      	cmp	r2, r3
    c8b8:	d00a      	beq.n	c8d0 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c8ba:	23ff      	movs	r3, #255	; 0xff
    c8bc:	4223      	tst	r3, r4
    c8be:	d005      	beq.n	c8cc <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    c8c0:	2201      	movs	r2, #1
    c8c2:	4b0f      	ldr	r3, [pc, #60]	; (c900 <hwTimerOverflowCallback+0xa0>)
    c8c4:	701a      	strb	r2, [r3, #0]
    c8c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c8ca:	b662      	cpsie	i
}
    c8cc:	b002      	add	sp, #8
    c8ce:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    c8d0:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    c8d2:	28ff      	cmp	r0, #255	; 0xff
    c8d4:	d909      	bls.n	c8ea <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    c8d6:	4b0d      	ldr	r3, [pc, #52]	; (c90c <hwTimerOverflowCallback+0xac>)
    c8d8:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    c8da:	4b0a      	ldr	r3, [pc, #40]	; (c904 <hwTimerOverflowCallback+0xa4>)
    c8dc:	681a      	ldr	r2, [r3, #0]
    c8de:	0112      	lsls	r2, r2, #4
    c8e0:	4b09      	ldr	r3, [pc, #36]	; (c908 <hwTimerOverflowCallback+0xa8>)
    c8e2:	189b      	adds	r3, r3, r2
    c8e4:	2201      	movs	r2, #1
    c8e6:	735a      	strb	r2, [r3, #13]
    c8e8:	e7e7      	b.n	c8ba <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    c8ea:	2201      	movs	r2, #1
    c8ec:	4b08      	ldr	r3, [pc, #32]	; (c910 <hwTimerOverflowCallback+0xb0>)
    c8ee:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    c8f0:	2001      	movs	r0, #1
    c8f2:	4b08      	ldr	r3, [pc, #32]	; (c914 <hwTimerOverflowCallback+0xb4>)
    c8f4:	4798      	blx	r3
    c8f6:	e7e0      	b.n	c8ba <hwTimerOverflowCallback+0x5a>
    c8f8:	200027c0 	.word	0x200027c0
    c8fc:	200027c4 	.word	0x200027c4
    c900:	20000014 	.word	0x20000014
    c904:	20000f24 	.word	0x20000f24
    c908:	20002630 	.word	0x20002630
    c90c:	0000d9a5 	.word	0x0000d9a5
    c910:	200027c2 	.word	0x200027c2
    c914:	0000d1c9 	.word	0x0000d1c9

0000c918 <loadHwTimer>:
{
    c918:	b570      	push	{r4, r5, r6, lr}
    c91a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    c91c:	28ff      	cmp	r0, #255	; 0xff
    c91e:	d030      	beq.n	c982 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    c920:	4b19      	ldr	r3, [pc, #100]	; (c988 <loadHwTimer+0x70>)
    c922:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c924:	4b19      	ldr	r3, [pc, #100]	; (c98c <loadHwTimer+0x74>)
    c926:	881d      	ldrh	r5, [r3, #0]
    c928:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c92a:	4b19      	ldr	r3, [pc, #100]	; (c990 <loadHwTimer+0x78>)
    c92c:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    c92e:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    c930:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    c932:	4a18      	ldr	r2, [pc, #96]	; (c994 <loadHwTimer+0x7c>)
    c934:	589b      	ldr	r3, [r3, r2]
    c936:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    c938:	4b17      	ldr	r3, [pc, #92]	; (c998 <loadHwTimer+0x80>)
    c93a:	4298      	cmp	r0, r3
    c93c:	d81a      	bhi.n	c974 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    c93e:	0122      	lsls	r2, r4, #4
    c940:	4b14      	ldr	r3, [pc, #80]	; (c994 <loadHwTimer+0x7c>)
    c942:	189b      	adds	r3, r3, r2
    c944:	7b5b      	ldrb	r3, [r3, #13]
    c946:	2b00      	cmp	r3, #0
    c948:	d11d      	bne.n	c986 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    c94a:	28ff      	cmp	r0, #255	; 0xff
    c94c:	d90b      	bls.n	c966 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    c94e:	4b13      	ldr	r3, [pc, #76]	; (c99c <loadHwTimer+0x84>)
    c950:	4298      	cmp	r0, r3
    c952:	d818      	bhi.n	c986 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    c954:	b280      	uxth	r0, r0
    c956:	4b12      	ldr	r3, [pc, #72]	; (c9a0 <loadHwTimer+0x88>)
    c958:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    c95a:	0124      	lsls	r4, r4, #4
    c95c:	4b0d      	ldr	r3, [pc, #52]	; (c994 <loadHwTimer+0x7c>)
    c95e:	191c      	adds	r4, r3, r4
    c960:	2301      	movs	r3, #1
    c962:	7363      	strb	r3, [r4, #13]
    c964:	e00f      	b.n	c986 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    c966:	2201      	movs	r2, #1
    c968:	4b0e      	ldr	r3, [pc, #56]	; (c9a4 <loadHwTimer+0x8c>)
    c96a:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    c96c:	2001      	movs	r0, #1
    c96e:	4b0e      	ldr	r3, [pc, #56]	; (c9a8 <loadHwTimer+0x90>)
    c970:	4798      	blx	r3
    c972:	e008      	b.n	c986 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    c974:	2201      	movs	r2, #1
    c976:	4b0b      	ldr	r3, [pc, #44]	; (c9a4 <loadHwTimer+0x8c>)
    c978:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c97a:	2001      	movs	r0, #1
    c97c:	4b0a      	ldr	r3, [pc, #40]	; (c9a8 <loadHwTimer+0x90>)
    c97e:	4798      	blx	r3
    c980:	e001      	b.n	c986 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    c982:	4b0a      	ldr	r3, [pc, #40]	; (c9ac <loadHwTimer+0x94>)
    c984:	4798      	blx	r3
}
    c986:	bd70      	pop	{r4, r5, r6, pc}
    c988:	200027c4 	.word	0x200027c4
    c98c:	200027c0 	.word	0x200027c0
    c990:	0000d8fd 	.word	0x0000d8fd
    c994:	20002630 	.word	0x20002630
    c998:	7ffffffe 	.word	0x7ffffffe
    c99c:	0000ffff 	.word	0x0000ffff
    c9a0:	0000d9a5 	.word	0x0000d9a5
    c9a4:	200027c2 	.word	0x200027c2
    c9a8:	0000d1c9 	.word	0x0000d1c9
    c9ac:	0000d949 	.word	0x0000d949

0000c9b0 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    c9b0:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    c9b2:	4b1d      	ldr	r3, [pc, #116]	; (ca28 <swtimerInternalHandler+0x78>)
    c9b4:	781b      	ldrb	r3, [r3, #0]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d027      	beq.n	ca0a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    c9ba:	2200      	movs	r2, #0
    c9bc:	4b1a      	ldr	r3, [pc, #104]	; (ca28 <swtimerInternalHandler+0x78>)
    c9be:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    c9c0:	4b1a      	ldr	r3, [pc, #104]	; (ca2c <swtimerInternalHandler+0x7c>)
    c9c2:	781b      	ldrb	r3, [r3, #0]
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	d020      	beq.n	ca0a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    c9c8:	4b19      	ldr	r3, [pc, #100]	; (ca30 <swtimerInternalHandler+0x80>)
    c9ca:	681b      	ldr	r3, [r3, #0]
    c9cc:	2bff      	cmp	r3, #255	; 0xff
    c9ce:	d01d      	beq.n	ca0c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    c9d0:	4b18      	ldr	r3, [pc, #96]	; (ca34 <swtimerInternalHandler+0x84>)
    c9d2:	6818      	ldr	r0, [r3, #0]
    c9d4:	4918      	ldr	r1, [pc, #96]	; (ca38 <swtimerInternalHandler+0x88>)
    c9d6:	680b      	ldr	r3, [r1, #0]
    c9d8:	011a      	lsls	r2, r3, #4
    c9da:	4b18      	ldr	r3, [pc, #96]	; (ca3c <swtimerInternalHandler+0x8c>)
    c9dc:	189b      	adds	r3, r3, r2
    c9de:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    c9e0:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    c9e2:	4a16      	ldr	r2, [pc, #88]	; (ca3c <swtimerInternalHandler+0x8c>)
    c9e4:	4913      	ldr	r1, [pc, #76]	; (ca34 <swtimerInternalHandler+0x84>)
    c9e6:	680b      	ldr	r3, [r1, #0]
    c9e8:	011b      	lsls	r3, r3, #4
    c9ea:	18d3      	adds	r3, r2, r3
    c9ec:	7b18      	ldrb	r0, [r3, #12]
    c9ee:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    c9f0:	4b11      	ldr	r3, [pc, #68]	; (ca38 <swtimerInternalHandler+0x88>)
    c9f2:	681b      	ldr	r3, [r3, #0]
    c9f4:	011b      	lsls	r3, r3, #4
    c9f6:	18d2      	adds	r2, r2, r3
    c9f8:	23ff      	movs	r3, #255	; 0xff
    c9fa:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    c9fc:	4a0b      	ldr	r2, [pc, #44]	; (ca2c <swtimerInternalHandler+0x7c>)
    c9fe:	7813      	ldrb	r3, [r2, #0]
    ca00:	3b01      	subs	r3, #1
    ca02:	b2db      	uxtb	r3, r3
    ca04:	7013      	strb	r3, [r2, #0]
    ca06:	2b00      	cmp	r3, #0
    ca08:	d10b      	bne.n	ca22 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    ca0a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    ca0c:	4b0a      	ldr	r3, [pc, #40]	; (ca38 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ca0e:	681b      	ldr	r3, [r3, #0]
    ca10:	2bff      	cmp	r3, #255	; 0xff
    ca12:	d1dd      	bne.n	c9d0 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    ca14:	4b07      	ldr	r3, [pc, #28]	; (ca34 <swtimerInternalHandler+0x84>)
    ca16:	681b      	ldr	r3, [r3, #0]
    ca18:	4a05      	ldr	r2, [pc, #20]	; (ca30 <swtimerInternalHandler+0x80>)
    ca1a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    ca1c:	4a06      	ldr	r2, [pc, #24]	; (ca38 <swtimerInternalHandler+0x88>)
    ca1e:	6013      	str	r3, [r2, #0]
    ca20:	e7df      	b.n	c9e2 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    ca22:	4b07      	ldr	r3, [pc, #28]	; (ca40 <swtimerInternalHandler+0x90>)
    ca24:	4798      	blx	r3
}
    ca26:	e7f0      	b.n	ca0a <swtimerInternalHandler+0x5a>
    ca28:	200027c2 	.word	0x200027c2
    ca2c:	20000f28 	.word	0x20000f28
    ca30:	20000f1c 	.word	0x20000f1c
    ca34:	20000f24 	.word	0x20000f24
    ca38:	20000f20 	.word	0x20000f20
    ca3c:	20002630 	.word	0x20002630
    ca40:	0000c919 	.word	0x0000c919

0000ca44 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    ca44:	2300      	movs	r3, #0
    ca46:	4a0d      	ldr	r2, [pc, #52]	; (ca7c <SwTimerReset+0x38>)
    ca48:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    ca4a:	4a0d      	ldr	r2, [pc, #52]	; (ca80 <SwTimerReset+0x3c>)
    ca4c:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    ca4e:	33ff      	adds	r3, #255	; 0xff
    ca50:	4a0c      	ldr	r2, [pc, #48]	; (ca84 <SwTimerReset+0x40>)
    ca52:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    ca54:	4a0c      	ldr	r2, [pc, #48]	; (ca88 <SwTimerReset+0x44>)
    ca56:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    ca58:	4a0c      	ldr	r2, [pc, #48]	; (ca8c <SwTimerReset+0x48>)
    ca5a:	6013      	str	r3, [r2, #0]
    ca5c:	4b0c      	ldr	r3, [pc, #48]	; (ca90 <SwTimerReset+0x4c>)
    ca5e:	0018      	movs	r0, r3
    ca60:	3091      	adds	r0, #145	; 0x91
    ca62:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ca64:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    ca66:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ca68:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    ca6a:	601a      	str	r2, [r3, #0]
    ca6c:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    ca6e:	4283      	cmp	r3, r0
    ca70:	d1fa      	bne.n	ca68 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    ca72:	2200      	movs	r2, #0
    ca74:	4b07      	ldr	r3, [pc, #28]	; (ca94 <SwTimerReset+0x50>)
    ca76:	701a      	strb	r2, [r3, #0]
}
    ca78:	4770      	bx	lr
    ca7a:	46c0      	nop			; (mov r8, r8)
    ca7c:	20000f28 	.word	0x20000f28
    ca80:	200027c2 	.word	0x200027c2
    ca84:	20000f24 	.word	0x20000f24
    ca88:	20000f1c 	.word	0x20000f1c
    ca8c:	20000f20 	.word	0x20000f20
    ca90:	20002634 	.word	0x20002634
    ca94:	20000f18 	.word	0x20000f18

0000ca98 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    ca98:	b510      	push	{r4, lr}
    SwTimerReset();
    ca9a:	4b08      	ldr	r3, [pc, #32]	; (cabc <SystemTimerInit+0x24>)
    ca9c:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    ca9e:	2300      	movs	r3, #0
    caa0:	4a07      	ldr	r2, [pc, #28]	; (cac0 <SystemTimerInit+0x28>)
    caa2:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    caa4:	4a07      	ldr	r2, [pc, #28]	; (cac4 <SystemTimerInit+0x2c>)
    caa6:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    caa8:	4b07      	ldr	r3, [pc, #28]	; (cac8 <SystemTimerInit+0x30>)
    caaa:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    caac:	4807      	ldr	r0, [pc, #28]	; (cacc <SystemTimerInit+0x34>)
    caae:	4b08      	ldr	r3, [pc, #32]	; (cad0 <SystemTimerInit+0x38>)
    cab0:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cab2:	4808      	ldr	r0, [pc, #32]	; (cad4 <SystemTimerInit+0x3c>)
    cab4:	4b08      	ldr	r3, [pc, #32]	; (cad8 <SystemTimerInit+0x40>)
    cab6:	4798      	blx	r3
}
    cab8:	bd10      	pop	{r4, pc}
    caba:	46c0      	nop			; (mov r8, r8)
    cabc:	0000ca45 	.word	0x0000ca45
    cac0:	200027c4 	.word	0x200027c4
    cac4:	200027c0 	.word	0x200027c0
    cac8:	0000da11 	.word	0x0000da11
    cacc:	0000c861 	.word	0x0000c861
    cad0:	0000da95 	.word	0x0000da95
    cad4:	0000c839 	.word	0x0000c839
    cad8:	0000daa1 	.word	0x0000daa1

0000cadc <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    cadc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cade:	4b05      	ldr	r3, [pc, #20]	; (caf4 <SwTimerGetTime+0x18>)
    cae0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cae2:	4b05      	ldr	r3, [pc, #20]	; (caf8 <SwTimerGetTime+0x1c>)
    cae4:	881d      	ldrh	r5, [r3, #0]
    cae6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    cae8:	4b04      	ldr	r3, [pc, #16]	; (cafc <SwTimerGetTime+0x20>)
    caea:	4798      	blx	r3
    caec:	4328      	orrs	r0, r5
    return gettime();
}
    caee:	0021      	movs	r1, r4
    caf0:	bd70      	pop	{r4, r5, r6, pc}
    caf2:	46c0      	nop			; (mov r8, r8)
    caf4:	200027c4 	.word	0x200027c4
    caf8:	200027c0 	.word	0x200027c0
    cafc:	0000d8fd 	.word	0x0000d8fd

0000cb00 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    cb00:	b510      	push	{r4, lr}
    cb02:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cb04:	4b08      	ldr	r3, [pc, #32]	; (cb28 <SwTimerCreate+0x28>)
    cb06:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    cb08:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cb0a:	2b18      	cmp	r3, #24
    cb0c:	d900      	bls.n	cb10 <SwTimerCreate+0x10>
    }

    return retVal;
}
    cb0e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    cb10:	4b06      	ldr	r3, [pc, #24]	; (cb2c <SwTimerCreate+0x2c>)
    cb12:	4798      	blx	r3
        *timerId = allocatedTimerId;
    cb14:	4a04      	ldr	r2, [pc, #16]	; (cb28 <SwTimerCreate+0x28>)
    cb16:	7813      	ldrb	r3, [r2, #0]
    cb18:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    cb1a:	3301      	adds	r3, #1
    cb1c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    cb1e:	4b04      	ldr	r3, [pc, #16]	; (cb30 <SwTimerCreate+0x30>)
    cb20:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    cb22:	2008      	movs	r0, #8
    cb24:	e7f3      	b.n	cb0e <SwTimerCreate+0xe>
    cb26:	46c0      	nop			; (mov r8, r8)
    cb28:	20000f18 	.word	0x20000f18
    cb2c:	00005dc9 	.word	0x00005dc9
    cb30:	00005dd5 	.word	0x00005dd5

0000cb34 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb36:	46d6      	mov	lr, sl
    cb38:	464f      	mov	r7, r9
    cb3a:	4646      	mov	r6, r8
    cb3c:	b5c0      	push	{r6, r7, lr}
    cb3e:	b084      	sub	sp, #16
    cb40:	0007      	movs	r7, r0
    cb42:	000d      	movs	r5, r1
    cb44:	0016      	movs	r6, r2
    cb46:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    cb48:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    cb4a:	2f18      	cmp	r7, #24
    cb4c:	d809      	bhi.n	cb62 <SwTimerStart+0x2e>
    cb4e:	2b00      	cmp	r3, #0
    cb50:	d100      	bne.n	cb54 <SwTimerStart+0x20>
    cb52:	e08c      	b.n	cc6e <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    cb54:	013a      	lsls	r2, r7, #4
    cb56:	4b52      	ldr	r3, [pc, #328]	; (cca0 <SwTimerStart+0x16c>)
    cb58:	189b      	adds	r3, r3, r2
    cb5a:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    cb5c:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d005      	beq.n	cb6e <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    cb62:	b004      	add	sp, #16
    cb64:	bc1c      	pop	{r2, r3, r4}
    cb66:	4690      	mov	r8, r2
    cb68:	4699      	mov	r9, r3
    cb6a:	46a2      	mov	sl, r4
    cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cb6e:	4b4d      	ldr	r3, [pc, #308]	; (cca4 <SwTimerStart+0x170>)
    cb70:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cb72:	4b4d      	ldr	r3, [pc, #308]	; (cca8 <SwTimerStart+0x174>)
    cb74:	8818      	ldrh	r0, [r3, #0]
    cb76:	0403      	lsls	r3, r0, #16
    cb78:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    cb7a:	4b4c      	ldr	r3, [pc, #304]	; (ccac <SwTimerStart+0x178>)
    cb7c:	4798      	blx	r3
    cb7e:	4643      	mov	r3, r8
    cb80:	4303      	orrs	r3, r0
    switch (timeoutType)
    cb82:	2e00      	cmp	r6, #0
    cb84:	d003      	beq.n	cb8e <SwTimerStart+0x5a>
    cb86:	2e01      	cmp	r6, #1
    cb88:	d038      	beq.n	cbfc <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    cb8a:	200a      	movs	r0, #10
    cb8c:	e7e9      	b.n	cb62 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cb8e:	4948      	ldr	r1, [pc, #288]	; (ccb0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cb90:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cb92:	002a      	movs	r2, r5
    cb94:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    cb96:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cb98:	428a      	cmp	r2, r1
    cb9a:	d8e2      	bhi.n	cb62 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cb9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cba0:	425a      	negs	r2, r3
    cba2:	4153      	adcs	r3, r2
    cba4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    cba6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cba8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cbac:	2600      	movs	r6, #0
    cbae:	4b41      	ldr	r3, [pc, #260]	; (ccb4 <SwTimerStart+0x180>)
    cbb0:	701e      	strb	r6, [r3, #0]
	return flags;
    cbb2:	9b03      	ldr	r3, [sp, #12]
    cbb4:	4699      	mov	r9, r3
    swtimerInternalHandler();
    cbb6:	4b40      	ldr	r3, [pc, #256]	; (ccb8 <SwTimerStart+0x184>)
    cbb8:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    cbba:	4b39      	ldr	r3, [pc, #228]	; (cca0 <SwTimerStart+0x16c>)
    cbbc:	013a      	lsls	r2, r7, #4
    cbbe:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    cbc0:	189b      	adds	r3, r3, r2
    cbc2:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    cbc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbc6:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    cbc8:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    cbca:	4a3c      	ldr	r2, [pc, #240]	; (ccbc <SwTimerStart+0x188>)
    cbcc:	7813      	ldrb	r3, [r2, #0]
    cbce:	3301      	adds	r3, #1
    cbd0:	b2db      	uxtb	r3, r3
    cbd2:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    cbd4:	4b3a      	ldr	r3, [pc, #232]	; (ccc0 <SwTimerStart+0x18c>)
    cbd6:	681b      	ldr	r3, [r3, #0]
    cbd8:	469a      	mov	sl, r3
    cbda:	2bff      	cmp	r3, #255	; 0xff
    cbdc:	d016      	beq.n	cc0c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    cbde:	466a      	mov	r2, sp
    cbe0:	7013      	strb	r3, [r2, #0]
    cbe2:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    cbe4:	4b35      	ldr	r3, [pc, #212]	; (ccbc <SwTimerStart+0x188>)
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	2b00      	cmp	r3, #0
    cbea:	d042      	beq.n	cc72 <SwTimerStart+0x13e>
    cbec:	9200      	str	r2, [sp, #0]
    cbee:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cbf0:	492b      	ldr	r1, [pc, #172]	; (cca0 <SwTimerStart+0x16c>)
    cbf2:	4688      	mov	r8, r1
    cbf4:	4833      	ldr	r0, [pc, #204]	; (ccc4 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    cbf6:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    cbf8:	4c30      	ldr	r4, [pc, #192]	; (ccbc <SwTimerStart+0x188>)
    cbfa:	e02a      	b.n	cc52 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    cbfc:	0028      	movs	r0, r5
    cbfe:	38ff      	subs	r0, #255	; 0xff
    cc00:	1ac3      	subs	r3, r0, r3
    cc02:	4a2b      	ldr	r2, [pc, #172]	; (ccb0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cc04:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    cc06:	4293      	cmp	r3, r2
    cc08:	d9c8      	bls.n	cb9c <SwTimerStart+0x68>
    cc0a:	e7aa      	b.n	cb62 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    cc0c:	4b2c      	ldr	r3, [pc, #176]	; (ccc0 <SwTimerStart+0x18c>)
    cc0e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    cc10:	0038      	movs	r0, r7
    cc12:	4b2d      	ldr	r3, [pc, #180]	; (ccc8 <SwTimerStart+0x194>)
    cc14:	4798      	blx	r3
    cc16:	e036      	b.n	cc86 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    cc18:	4b21      	ldr	r3, [pc, #132]	; (cca0 <SwTimerStart+0x16c>)
    cc1a:	013c      	lsls	r4, r7, #4
    cc1c:	191c      	adds	r4, r3, r4
    cc1e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    cc20:	9901      	ldr	r1, [sp, #4]
    cc22:	0109      	lsls	r1, r1, #4
    cc24:	1859      	adds	r1, r3, r1
    cc26:	2300      	movs	r3, #0
    cc28:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    cc2a:	4592      	cmp	sl, r2
    cc2c:	d005      	beq.n	cc3a <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    cc2e:	9b00      	ldr	r3, [sp, #0]
    cc30:	0118      	lsls	r0, r3, #4
    cc32:	4b1b      	ldr	r3, [pc, #108]	; (cca0 <SwTimerStart+0x16c>)
    cc34:	1818      	adds	r0, r3, r0
    cc36:	7307      	strb	r7, [r0, #12]
    cc38:	e025      	b.n	cc86 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    cc3a:	4b21      	ldr	r3, [pc, #132]	; (ccc0 <SwTimerStart+0x18c>)
    cc3c:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    cc3e:	0038      	movs	r0, r7
    cc40:	4b21      	ldr	r3, [pc, #132]	; (ccc8 <SwTimerStart+0x194>)
    cc42:	4798      	blx	r3
    cc44:	e01f      	b.n	cc86 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    cc46:	3301      	adds	r3, #1
    cc48:	b2db      	uxtb	r3, r3
    cc4a:	7821      	ldrb	r1, [r4, #0]
    cc4c:	b2c9      	uxtb	r1, r1
    cc4e:	428b      	cmp	r3, r1
    cc50:	d210      	bcs.n	cc74 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    cc52:	2aff      	cmp	r2, #255	; 0xff
    cc54:	d0f7      	beq.n	cc46 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cc56:	9201      	str	r2, [sp, #4]
    cc58:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    cc5a:	4646      	mov	r6, r8
    cc5c:	5989      	ldr	r1, [r1, r6]
    cc5e:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cc60:	4281      	cmp	r1, r0
    cc62:	d8d9      	bhi.n	cc18 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    cc64:	0111      	lsls	r1, r2, #4
    cc66:	4461      	add	r1, ip
    cc68:	9200      	str	r2, [sp, #0]
    cc6a:	7b0a      	ldrb	r2, [r1, #12]
    cc6c:	e7eb      	b.n	cc46 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    cc6e:	200a      	movs	r0, #10
    cc70:	e777      	b.n	cb62 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    cc72:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    cc74:	4b0a      	ldr	r3, [pc, #40]	; (cca0 <SwTimerStart+0x16c>)
    cc76:	9a00      	ldr	r2, [sp, #0]
    cc78:	0110      	lsls	r0, r2, #4
    cc7a:	1818      	adds	r0, r3, r0
    cc7c:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    cc7e:	013f      	lsls	r7, r7, #4
    cc80:	19df      	adds	r7, r3, r7
    cc82:	23ff      	movs	r3, #255	; 0xff
    cc84:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    cc86:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    cc88:	2008      	movs	r0, #8
    cc8a:	464a      	mov	r2, r9
    cc8c:	4213      	tst	r3, r2
    cc8e:	d100      	bne.n	cc92 <SwTimerStart+0x15e>
    cc90:	e767      	b.n	cb62 <SwTimerStart+0x2e>
		cpu_irq_enable();
    cc92:	2201      	movs	r2, #1
    cc94:	4b07      	ldr	r3, [pc, #28]	; (ccb4 <SwTimerStart+0x180>)
    cc96:	701a      	strb	r2, [r3, #0]
    cc98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cc9c:	b662      	cpsie	i
    cc9e:	e760      	b.n	cb62 <SwTimerStart+0x2e>
    cca0:	20002630 	.word	0x20002630
    cca4:	200027c4 	.word	0x200027c4
    cca8:	200027c0 	.word	0x200027c0
    ccac:	0000d8fd 	.word	0x0000d8fd
    ccb0:	7fffff00 	.word	0x7fffff00
    ccb4:	20000014 	.word	0x20000014
    ccb8:	0000c9b1 	.word	0x0000c9b1
    ccbc:	20000f28 	.word	0x20000f28
    ccc0:	20000f24 	.word	0x20000f24
    ccc4:	7ffffffe 	.word	0x7ffffffe
    ccc8:	0000c919 	.word	0x0000c919

0000cccc <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    cccc:	0103      	lsls	r3, r0, #4
    ccce:	4803      	ldr	r0, [pc, #12]	; (ccdc <SwTimerIsRunning+0x10>)
    ccd0:	18c0      	adds	r0, r0, r3
    ccd2:	6840      	ldr	r0, [r0, #4]
    ccd4:	1e43      	subs	r3, r0, #1
    ccd6:	4198      	sbcs	r0, r3
    ccd8:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    ccda:	4770      	bx	lr
    ccdc:	20002630 	.word	0x20002630

0000cce0 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    cce0:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    cce2:	0102      	lsls	r2, r0, #4
    cce4:	4b0d      	ldr	r3, [pc, #52]	; (cd1c <SwTimerReadValue+0x3c>)
    cce6:	189b      	adds	r3, r3, r2
    cce8:	685b      	ldr	r3, [r3, #4]
    ccea:	2b00      	cmp	r3, #0
    ccec:	d014      	beq.n	cd18 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    ccee:	4b0b      	ldr	r3, [pc, #44]	; (cd1c <SwTimerReadValue+0x3c>)
    ccf0:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    ccf2:	4b0b      	ldr	r3, [pc, #44]	; (cd20 <SwTimerReadValue+0x40>)
    ccf4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ccf6:	4b0b      	ldr	r3, [pc, #44]	; (cd24 <SwTimerReadValue+0x44>)
    ccf8:	881c      	ldrh	r4, [r3, #0]
    ccfa:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    ccfc:	4b0a      	ldr	r3, [pc, #40]	; (cd28 <SwTimerReadValue+0x48>)
    ccfe:	4798      	blx	r3
    cd00:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    cd02:	4285      	cmp	r5, r0
    cd04:	d305      	bcc.n	cd12 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    cd06:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    cd08:	4b08      	ldr	r3, [pc, #32]	; (cd2c <SwTimerReadValue+0x4c>)
    cd0a:	4298      	cmp	r0, r3
    cd0c:	d900      	bls.n	cd10 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    cd0e:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    cd10:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    cd12:	3d01      	subs	r5, #1
    cd14:	1a28      	subs	r0, r5, r0
    cd16:	e7f7      	b.n	cd08 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    cd18:	2000      	movs	r0, #0
    return remainingTime;
    cd1a:	e7f9      	b.n	cd10 <SwTimerReadValue+0x30>
    cd1c:	20002630 	.word	0x20002630
    cd20:	200027c4 	.word	0x200027c4
    cd24:	200027c0 	.word	0x200027c0
    cd28:	0000d8fd 	.word	0x0000d8fd
    cd2c:	7ffffffe 	.word	0x7ffffffe

0000cd30 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    cd30:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    cd32:	4b05      	ldr	r3, [pc, #20]	; (cd48 <SwTimerNextExpiryDuration+0x18>)
    cd34:	6818      	ldr	r0, [r3, #0]
    cd36:	28ff      	cmp	r0, #255	; 0xff
    cd38:	d102      	bne.n	cd40 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    cd3a:	2001      	movs	r0, #1
    cd3c:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    cd3e:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    cd40:	b2c0      	uxtb	r0, r0
    cd42:	4b02      	ldr	r3, [pc, #8]	; (cd4c <SwTimerNextExpiryDuration+0x1c>)
    cd44:	4798      	blx	r3
    cd46:	e7fa      	b.n	cd3e <SwTimerNextExpiryDuration+0xe>
    cd48:	20000f24 	.word	0x20000f24
    cd4c:	0000cce1 	.word	0x0000cce1

0000cd50 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd52:	46de      	mov	lr, fp
    cd54:	4657      	mov	r7, sl
    cd56:	464e      	mov	r6, r9
    cd58:	4645      	mov	r5, r8
    cd5a:	b5e0      	push	{r5, r6, r7, lr}
    cd5c:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    cd5e:	4b2f      	ldr	r3, [pc, #188]	; (ce1c <SwTimersExecute+0xcc>)
    cd60:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cd62:	4b2f      	ldr	r3, [pc, #188]	; (ce20 <SwTimersExecute+0xd0>)
    cd64:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    cd66:	4b2f      	ldr	r3, [pc, #188]	; (ce24 <SwTimersExecute+0xd4>)
    cd68:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cd6a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cd6e:	4253      	negs	r3, r2
    cd70:	4153      	adcs	r3, r2
    cd72:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    cd74:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cd76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cd7a:	2200      	movs	r2, #0
    cd7c:	4b2a      	ldr	r3, [pc, #168]	; (ce28 <SwTimersExecute+0xd8>)
    cd7e:	701a      	strb	r2, [r3, #0]
	return flags;
    cd80:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    cd82:	4b2a      	ldr	r3, [pc, #168]	; (ce2c <SwTimersExecute+0xdc>)
    cd84:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cd86:	23ff      	movs	r3, #255	; 0xff
    cd88:	4223      	tst	r3, r4
    cd8a:	d005      	beq.n	cd98 <SwTimersExecute+0x48>
		cpu_irq_enable();
    cd8c:	2201      	movs	r2, #1
    cd8e:	4b26      	ldr	r3, [pc, #152]	; (ce28 <SwTimersExecute+0xd8>)
    cd90:	701a      	strb	r2, [r3, #0]
    cd92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd96:	b662      	cpsie	i
	cpu_irq_disable();
    cd98:	4b23      	ldr	r3, [pc, #140]	; (ce28 <SwTimersExecute+0xd8>)
    cd9a:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    cd9c:	4c24      	ldr	r4, [pc, #144]	; (ce30 <SwTimersExecute+0xe0>)
    cd9e:	4b25      	ldr	r3, [pc, #148]	; (ce34 <SwTimersExecute+0xe4>)
    cda0:	4699      	mov	r9, r3
    cda2:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    cda4:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    cda6:	4b24      	ldr	r3, [pc, #144]	; (ce38 <SwTimersExecute+0xe8>)
    cda8:	4698      	mov	r8, r3
		cpu_irq_enable();
    cdaa:	4b1f      	ldr	r3, [pc, #124]	; (ce28 <SwTimersExecute+0xd8>)
    cdac:	469c      	mov	ip, r3
    cdae:	e004      	b.n	cdba <SwTimersExecute+0x6a>
    cdb0:	4643      	mov	r3, r8
    cdb2:	6018      	str	r0, [r3, #0]
    cdb4:	e01e      	b.n	cdf4 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    cdb6:	2e00      	cmp	r6, #0
    cdb8:	d125      	bne.n	ce06 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    cdba:	4b1d      	ldr	r3, [pc, #116]	; (ce30 <SwTimersExecute+0xe0>)
    cdbc:	681b      	ldr	r3, [r3, #0]
    cdbe:	2bff      	cmp	r3, #255	; 0xff
    cdc0:	d024      	beq.n	ce0c <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cdc2:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cdc6:	424b      	negs	r3, r1
    cdc8:	414b      	adcs	r3, r1
    cdca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cdcc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cdce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cdd2:	4653      	mov	r3, sl
    cdd4:	701a      	strb	r2, [r3, #0]
	return flags;
    cdd6:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    cdd8:	6823      	ldr	r3, [r4, #0]
    cdda:	011b      	lsls	r3, r3, #4
    cddc:	444b      	add	r3, r9
    cdde:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    cde0:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    cde2:	689d      	ldr	r5, [r3, #8]
    cde4:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    cde6:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    cde8:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    cdea:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    cdec:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    cdee:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    cdf0:	29ff      	cmp	r1, #255	; 0xff
    cdf2:	d0dd      	beq.n	cdb0 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    cdf4:	4238      	tst	r0, r7
    cdf6:	d0de      	beq.n	cdb6 <SwTimersExecute+0x66>
		cpu_irq_enable();
    cdf8:	2301      	movs	r3, #1
    cdfa:	4661      	mov	r1, ip
    cdfc:	700b      	strb	r3, [r1, #0]
    cdfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce02:	b662      	cpsie	i
    ce04:	e7d7      	b.n	cdb6 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    ce06:	4658      	mov	r0, fp
    ce08:	47b0      	blx	r6
    ce0a:	e7ca      	b.n	cda2 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    ce0c:	b003      	add	sp, #12
    ce0e:	bc3c      	pop	{r2, r3, r4, r5}
    ce10:	4690      	mov	r8, r2
    ce12:	4699      	mov	r9, r3
    ce14:	46a2      	mov	sl, r4
    ce16:	46ab      	mov	fp, r5
    ce18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce1a:	46c0      	nop			; (mov r8, r8)
    ce1c:	200027c4 	.word	0x200027c4
    ce20:	200027c0 	.word	0x200027c0
    ce24:	0000d8fd 	.word	0x0000d8fd
    ce28:	20000014 	.word	0x20000014
    ce2c:	0000c9b1 	.word	0x0000c9b1
    ce30:	20000f1c 	.word	0x20000f1c
    ce34:	20002630 	.word	0x20002630
    ce38:	20000f20 	.word	0x20000f20

0000ce3c <TIMER_TaskHandler>:
{
    ce3c:	b510      	push	{r4, lr}
    SwTimersExecute();
    ce3e:	4b02      	ldr	r3, [pc, #8]	; (ce48 <TIMER_TaskHandler+0xc>)
    ce40:	4798      	blx	r3
}
    ce42:	2000      	movs	r0, #0
    ce44:	bd10      	pop	{r4, pc}
    ce46:	46c0      	nop			; (mov r8, r8)
    ce48:	0000cd51 	.word	0x0000cd51

0000ce4c <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    ce4c:	b570      	push	{r4, r5, r6, lr}
    ce4e:	b082      	sub	sp, #8
    ce50:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    ce52:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    ce54:	2c18      	cmp	r4, #24
    ce56:	d901      	bls.n	ce5c <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    ce58:	b002      	add	sp, #8
    ce5a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ce5c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ce60:	425a      	negs	r2, r3
    ce62:	4153      	adcs	r3, r2
    ce64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ce66:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ce68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ce6c:	2200      	movs	r2, #0
    ce6e:	4b47      	ldr	r3, [pc, #284]	; (cf8c <SwTimerStop+0x140>)
    ce70:	701a      	strb	r2, [r3, #0]
	return flags;
    ce72:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    ce74:	4b46      	ldr	r3, [pc, #280]	; (cf90 <SwTimerStop+0x144>)
    ce76:	4798      	blx	r3
    if (runningTimers > 0)
    ce78:	4b46      	ldr	r3, [pc, #280]	; (cf94 <SwTimerStop+0x148>)
    ce7a:	781b      	ldrb	r3, [r3, #0]
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	d040      	beq.n	cf02 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    ce80:	4b44      	ldr	r3, [pc, #272]	; (cf94 <SwTimerStop+0x148>)
    ce82:	781b      	ldrb	r3, [r3, #0]
    ce84:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    ce86:	4a44      	ldr	r2, [pc, #272]	; (cf98 <SwTimerStop+0x14c>)
    ce88:	6816      	ldr	r6, [r2, #0]
    ce8a:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	d038      	beq.n	cf02 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    ce90:	428c      	cmp	r4, r1
    ce92:	d00b      	beq.n	ceac <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    ce94:	4841      	ldr	r0, [pc, #260]	; (cf9c <SwTimerStop+0x150>)
    ce96:	010a      	lsls	r2, r1, #4
    ce98:	1882      	adds	r2, r0, r2
    ce9a:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    ce9c:	3b01      	subs	r3, #1
    ce9e:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    cea0:	2b00      	cmp	r3, #0
    cea2:	d02e      	beq.n	cf02 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    cea4:	4294      	cmp	r4, r2
    cea6:	d001      	beq.n	ceac <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    cea8:	0011      	movs	r1, r2
    ceaa:	e7f4      	b.n	ce96 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    ceac:	42a6      	cmp	r6, r4
    ceae:	d01d      	beq.n	ceec <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    ceb0:	4b3a      	ldr	r3, [pc, #232]	; (cf9c <SwTimerStop+0x150>)
    ceb2:	0122      	lsls	r2, r4, #4
    ceb4:	189a      	adds	r2, r3, r2
    ceb6:	7b12      	ldrb	r2, [r2, #12]
    ceb8:	0109      	lsls	r1, r1, #4
    ceba:	1859      	adds	r1, r3, r1
    cebc:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    cebe:	0122      	lsls	r2, r4, #4
    cec0:	4b36      	ldr	r3, [pc, #216]	; (cf9c <SwTimerStop+0x150>)
    cec2:	189b      	adds	r3, r3, r2
    cec4:	22ff      	movs	r2, #255	; 0xff
    cec6:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    cec8:	4a32      	ldr	r2, [pc, #200]	; (cf94 <SwTimerStop+0x148>)
    ceca:	7813      	ldrb	r3, [r2, #0]
    cecc:	3b01      	subs	r3, #1
    cece:	b2db      	uxtb	r3, r3
    ced0:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    ced2:	0124      	lsls	r4, r4, #4
    ced4:	4b31      	ldr	r3, [pc, #196]	; (cf9c <SwTimerStop+0x150>)
    ced6:	191c      	adds	r4, r3, r4
    ced8:	2300      	movs	r3, #0
    ceda:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    cedc:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    cede:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    cee0:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    cee2:	2008      	movs	r0, #8
    cee4:	422b      	tst	r3, r5
    cee6:	d0b7      	beq.n	ce58 <SwTimerStop+0xc>
    cee8:	2301      	movs	r3, #1
    ceea:	e040      	b.n	cf6e <SwTimerStop+0x122>
                    common_tc_compare_stop();
    ceec:	4b2c      	ldr	r3, [pc, #176]	; (cfa0 <SwTimerStop+0x154>)
    ceee:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    cef0:	0122      	lsls	r2, r4, #4
    cef2:	4b2a      	ldr	r3, [pc, #168]	; (cf9c <SwTimerStop+0x150>)
    cef4:	189b      	adds	r3, r3, r2
    cef6:	7b18      	ldrb	r0, [r3, #12]
    cef8:	4b27      	ldr	r3, [pc, #156]	; (cf98 <SwTimerStop+0x14c>)
    cefa:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    cefc:	4b29      	ldr	r3, [pc, #164]	; (cfa4 <SwTimerStop+0x158>)
    cefe:	4798      	blx	r3
    cf00:	e7dd      	b.n	cebe <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    cf02:	4b29      	ldr	r3, [pc, #164]	; (cfa8 <SwTimerStop+0x15c>)
    cf04:	6818      	ldr	r0, [r3, #0]
    cf06:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    cf08:	2aff      	cmp	r2, #255	; 0xff
    cf0a:	d02c      	beq.n	cf66 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cf0c:	4294      	cmp	r4, r2
    cf0e:	d009      	beq.n	cf24 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cf10:	4922      	ldr	r1, [pc, #136]	; (cf9c <SwTimerStop+0x150>)
    cf12:	0113      	lsls	r3, r2, #4
    cf14:	18cb      	adds	r3, r1, r3
    cf16:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    cf18:	2bff      	cmp	r3, #255	; 0xff
    cf1a:	d024      	beq.n	cf66 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cf1c:	429c      	cmp	r4, r3
    cf1e:	d001      	beq.n	cf24 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cf20:	001a      	movs	r2, r3
    cf22:	e7f6      	b.n	cf12 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    cf24:	42a0      	cmp	r0, r4
    cf26:	d00d      	beq.n	cf44 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    cf28:	4b1c      	ldr	r3, [pc, #112]	; (cf9c <SwTimerStop+0x150>)
    cf2a:	0121      	lsls	r1, r4, #4
    cf2c:	1859      	adds	r1, r3, r1
    cf2e:	7b09      	ldrb	r1, [r1, #12]
    cf30:	0110      	lsls	r0, r2, #4
    cf32:	181b      	adds	r3, r3, r0
    cf34:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    cf36:	4b1d      	ldr	r3, [pc, #116]	; (cfac <SwTimerStop+0x160>)
    cf38:	681b      	ldr	r3, [r3, #0]
    cf3a:	429c      	cmp	r4, r3
    cf3c:	d1c9      	bne.n	ced2 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    cf3e:	4b1b      	ldr	r3, [pc, #108]	; (cfac <SwTimerStop+0x160>)
    cf40:	601a      	str	r2, [r3, #0]
    cf42:	e7c6      	b.n	ced2 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    cf44:	4b19      	ldr	r3, [pc, #100]	; (cfac <SwTimerStop+0x160>)
    cf46:	681b      	ldr	r3, [r3, #0]
    cf48:	4298      	cmp	r0, r3
    cf4a:	d006      	beq.n	cf5a <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    cf4c:	0100      	lsls	r0, r0, #4
    cf4e:	4b13      	ldr	r3, [pc, #76]	; (cf9c <SwTimerStop+0x150>)
    cf50:	1818      	adds	r0, r3, r0
    cf52:	7b02      	ldrb	r2, [r0, #12]
    cf54:	4b14      	ldr	r3, [pc, #80]	; (cfa8 <SwTimerStop+0x15c>)
    cf56:	601a      	str	r2, [r3, #0]
    cf58:	e7bb      	b.n	ced2 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    cf5a:	23ff      	movs	r3, #255	; 0xff
    cf5c:	4a13      	ldr	r2, [pc, #76]	; (cfac <SwTimerStop+0x160>)
    cf5e:	6013      	str	r3, [r2, #0]
    cf60:	4a11      	ldr	r2, [pc, #68]	; (cfa8 <SwTimerStop+0x15c>)
    cf62:	6013      	str	r3, [r2, #0]
    cf64:	e7b5      	b.n	ced2 <SwTimerStop+0x86>
    cf66:	23ff      	movs	r3, #255	; 0xff
    cf68:	422b      	tst	r3, r5
    cf6a:	d00a      	beq.n	cf82 <SwTimerStop+0x136>
    cf6c:	2300      	movs	r3, #0
		cpu_irq_enable();
    cf6e:	2101      	movs	r1, #1
    cf70:	4a06      	ldr	r2, [pc, #24]	; (cf8c <SwTimerStop+0x140>)
    cf72:	7011      	strb	r1, [r2, #0]
    cf74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cf78:	b662      	cpsie	i
    if (timerStopReqStatus)
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	d103      	bne.n	cf86 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    cf7e:	2015      	movs	r0, #21
    cf80:	e76a      	b.n	ce58 <SwTimerStop+0xc>
    cf82:	2015      	movs	r0, #21
    cf84:	e768      	b.n	ce58 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    cf86:	2008      	movs	r0, #8
    cf88:	e766      	b.n	ce58 <SwTimerStop+0xc>
    cf8a:	46c0      	nop			; (mov r8, r8)
    cf8c:	20000014 	.word	0x20000014
    cf90:	0000c9b1 	.word	0x0000c9b1
    cf94:	20000f28 	.word	0x20000f28
    cf98:	20000f24 	.word	0x20000f24
    cf9c:	20002630 	.word	0x20002630
    cfa0:	0000d949 	.word	0x0000d949
    cfa4:	0000c919 	.word	0x0000c919
    cfa8:	20000f1c 	.word	0x20000f1c
    cfac:	20000f20 	.word	0x20000f20

0000cfb0 <SwTimerRunRemainingTime>:
{
    cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfb2:	b083      	sub	sp, #12
    cfb4:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    cfb6:	4b0b      	ldr	r3, [pc, #44]	; (cfe4 <SwTimerRunRemainingTime+0x34>)
    cfb8:	681c      	ldr	r4, [r3, #0]
    cfba:	0122      	lsls	r2, r4, #4
    cfbc:	4b0a      	ldr	r3, [pc, #40]	; (cfe8 <SwTimerRunRemainingTime+0x38>)
    cfbe:	189b      	adds	r3, r3, r2
    cfc0:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    cfc2:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    cfc4:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    cfc6:	0020      	movs	r0, r4
    cfc8:	4b08      	ldr	r3, [pc, #32]	; (cfec <SwTimerRunRemainingTime+0x3c>)
    cfca:	4798      	blx	r3
    cfcc:	2808      	cmp	r0, #8
    cfce:	d001      	beq.n	cfd4 <SwTimerRunRemainingTime+0x24>
}
    cfd0:	b003      	add	sp, #12
    cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    cfd4:	9700      	str	r7, [sp, #0]
    cfd6:	0033      	movs	r3, r6
    cfd8:	2200      	movs	r2, #0
    cfda:	0029      	movs	r1, r5
    cfdc:	0020      	movs	r0, r4
    cfde:	4c04      	ldr	r4, [pc, #16]	; (cff0 <SwTimerRunRemainingTime+0x40>)
    cfe0:	47a0      	blx	r4
}
    cfe2:	e7f5      	b.n	cfd0 <SwTimerRunRemainingTime+0x20>
    cfe4:	20000f24 	.word	0x20000f24
    cfe8:	20002630 	.word	0x20002630
    cfec:	0000ce4d 	.word	0x0000ce4d
    cff0:	0000cb35 	.word	0x0000cb35

0000cff4 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    cff4:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cff6:	4b07      	ldr	r3, [pc, #28]	; (d014 <SystemTimerSuspend+0x20>)
    cff8:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cffa:	4b07      	ldr	r3, [pc, #28]	; (d018 <SystemTimerSuspend+0x24>)
    cffc:	881d      	ldrh	r5, [r3, #0]
    cffe:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d000:	4b06      	ldr	r3, [pc, #24]	; (d01c <SystemTimerSuspend+0x28>)
    d002:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    d004:	4b06      	ldr	r3, [pc, #24]	; (d020 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    d006:	4328      	orrs	r0, r5
    d008:	6018      	str	r0, [r3, #0]
    d00a:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    d00c:	4b05      	ldr	r3, [pc, #20]	; (d024 <SystemTimerSuspend+0x30>)
    d00e:	4798      	blx	r3
}
    d010:	bd70      	pop	{r4, r5, r6, pc}
    d012:	46c0      	nop			; (mov r8, r8)
    d014:	200027c4 	.word	0x200027c4
    d018:	200027c0 	.word	0x200027c0
    d01c:	0000d8fd 	.word	0x0000d8fd
    d020:	20000f30 	.word	0x20000f30
    d024:	0000d989 	.word	0x0000d989

0000d028 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d028:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d02a:	4b22      	ldr	r3, [pc, #136]	; (d0b4 <SystemTimerSync+0x8c>)
    d02c:	681c      	ldr	r4, [r3, #0]
    d02e:	685d      	ldr	r5, [r3, #4]
    d030:	1900      	adds	r0, r0, r4
    d032:	4169      	adcs	r1, r5
    d034:	6018      	str	r0, [r3, #0]
    d036:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d038:	4b1f      	ldr	r3, [pc, #124]	; (d0b8 <SystemTimerSync+0x90>)
    d03a:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d03c:	0c02      	lsrs	r2, r0, #16
    d03e:	4b1f      	ldr	r3, [pc, #124]	; (d0bc <SystemTimerSync+0x94>)
    d040:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d042:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d044:	4b1e      	ldr	r3, [pc, #120]	; (d0c0 <SystemTimerSync+0x98>)
    d046:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d048:	4a1e      	ldr	r2, [pc, #120]	; (d0c4 <SystemTimerSync+0x9c>)
    d04a:	7812      	ldrb	r2, [r2, #0]
    d04c:	2a00      	cmp	r2, #0
    d04e:	d012      	beq.n	d076 <SystemTimerSync+0x4e>
    d050:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d052:	4c1d      	ldr	r4, [pc, #116]	; (d0c8 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d054:	4d1b      	ldr	r5, [pc, #108]	; (d0c4 <SystemTimerSync+0x9c>)
    d056:	e005      	b.n	d064 <SystemTimerSync+0x3c>
    d058:	3201      	adds	r2, #1
    d05a:	b2d2      	uxtb	r2, r2
    d05c:	7829      	ldrb	r1, [r5, #0]
    d05e:	b2c9      	uxtb	r1, r1
    d060:	4291      	cmp	r1, r2
    d062:	d908      	bls.n	d076 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d064:	2bff      	cmp	r3, #255	; 0xff
    d066:	d0f7      	beq.n	d058 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d068:	011b      	lsls	r3, r3, #4
    d06a:	5919      	ldr	r1, [r3, r4]
    d06c:	1a09      	subs	r1, r1, r0
    d06e:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d070:	18e3      	adds	r3, r4, r3
    d072:	7b1b      	ldrb	r3, [r3, #12]
    d074:	e7f0      	b.n	d058 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d076:	4b15      	ldr	r3, [pc, #84]	; (d0cc <SystemTimerSync+0xa4>)
    d078:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d07a:	4815      	ldr	r0, [pc, #84]	; (d0d0 <SystemTimerSync+0xa8>)
    d07c:	4b15      	ldr	r3, [pc, #84]	; (d0d4 <SystemTimerSync+0xac>)
    d07e:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d080:	4815      	ldr	r0, [pc, #84]	; (d0d8 <SystemTimerSync+0xb0>)
    d082:	4b16      	ldr	r3, [pc, #88]	; (d0dc <SystemTimerSync+0xb4>)
    d084:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d086:	4b0f      	ldr	r3, [pc, #60]	; (d0c4 <SystemTimerSync+0x9c>)
    d088:	781b      	ldrb	r3, [r3, #0]
    d08a:	2b00      	cmp	r3, #0
    d08c:	d009      	beq.n	d0a2 <SystemTimerSync+0x7a>
    d08e:	4b0c      	ldr	r3, [pc, #48]	; (d0c0 <SystemTimerSync+0x98>)
    d090:	681b      	ldr	r3, [r3, #0]
    d092:	2bff      	cmp	r3, #255	; 0xff
    d094:	d005      	beq.n	d0a2 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d096:	4b12      	ldr	r3, [pc, #72]	; (d0e0 <SystemTimerSync+0xb8>)
    d098:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d09a:	28fe      	cmp	r0, #254	; 0xfe
    d09c:	d902      	bls.n	d0a4 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d09e:	4b11      	ldr	r3, [pc, #68]	; (d0e4 <SystemTimerSync+0xbc>)
    d0a0:	4798      	blx	r3
        }
    }
}
    d0a2:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d0a4:	2201      	movs	r2, #1
    d0a6:	4b10      	ldr	r3, [pc, #64]	; (d0e8 <SystemTimerSync+0xc0>)
    d0a8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d0aa:	2001      	movs	r0, #1
    d0ac:	4b0f      	ldr	r3, [pc, #60]	; (d0ec <SystemTimerSync+0xc4>)
    d0ae:	4798      	blx	r3
    d0b0:	e7f7      	b.n	d0a2 <SystemTimerSync+0x7a>
    d0b2:	46c0      	nop			; (mov r8, r8)
    d0b4:	20000f30 	.word	0x20000f30
    d0b8:	200027c4 	.word	0x200027c4
    d0bc:	200027c0 	.word	0x200027c0
    d0c0:	20000f24 	.word	0x20000f24
    d0c4:	20000f28 	.word	0x20000f28
    d0c8:	20002630 	.word	0x20002630
    d0cc:	0000da11 	.word	0x0000da11
    d0d0:	0000c861 	.word	0x0000c861
    d0d4:	0000da95 	.word	0x0000da95
    d0d8:	0000c839 	.word	0x0000c839
    d0dc:	0000daa1 	.word	0x0000daa1
    d0e0:	0000cd31 	.word	0x0000cd31
    d0e4:	0000cfb1 	.word	0x0000cfb1
    d0e8:	200027c2 	.word	0x200027c2
    d0ec:	0000d1c9 	.word	0x0000d1c9

0000d0f0 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    d0f0:	b510      	push	{r4, lr}
    d0f2:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    d0f4:	4b08      	ldr	r3, [pc, #32]	; (d118 <SwTimerTimestampCreate+0x28>)
    d0f6:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d0f8:	2014      	movs	r0, #20
    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    d0fa:	2b01      	cmp	r3, #1
    d0fc:	d900      	bls.n	d100 <SwTimerTimestampCreate+0x10>
    }

    return retVal;
}
    d0fe:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d100:	4b06      	ldr	r3, [pc, #24]	; (d11c <SwTimerTimestampCreate+0x2c>)
    d102:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    d104:	4a04      	ldr	r2, [pc, #16]	; (d118 <SwTimerTimestampCreate+0x28>)
    d106:	7813      	ldrb	r3, [r2, #0]
    d108:	7023      	strb	r3, [r4, #0]
        allocatedTimestampId++;
    d10a:	3301      	adds	r3, #1
    d10c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d10e:	4b04      	ldr	r3, [pc, #16]	; (d120 <SwTimerTimestampCreate+0x30>)
    d110:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d112:	2008      	movs	r0, #8
    d114:	e7f3      	b.n	d0fe <SwTimerTimestampCreate+0xe>
    d116:	46c0      	nop			; (mov r8, r8)
    d118:	20000f19 	.word	0x20000f19
    d11c:	00005dc9 	.word	0x00005dc9
    d120:	00005dd5 	.word	0x00005dd5

0000d124 <SwTimerReadTimestamp>:
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
	*timestamp = swTimestamp[index];
    d124:	00c3      	lsls	r3, r0, #3
    d126:	4803      	ldr	r0, [pc, #12]	; (d134 <SwTimerReadTimestamp+0x10>)
    d128:	18c0      	adds	r0, r0, r3
    d12a:	6802      	ldr	r2, [r0, #0]
    d12c:	6843      	ldr	r3, [r0, #4]
    d12e:	600a      	str	r2, [r1, #0]
    d130:	604b      	str	r3, [r1, #4]
}
    d132:	4770      	bx	lr
    d134:	20002620 	.word	0x20002620

0000d138 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    d138:	680a      	ldr	r2, [r1, #0]
    d13a:	684b      	ldr	r3, [r1, #4]
    d13c:	00c1      	lsls	r1, r0, #3
    d13e:	4802      	ldr	r0, [pc, #8]	; (d148 <SwTimerWriteTimestamp+0x10>)
    d140:	1840      	adds	r0, r0, r1
    d142:	6002      	str	r2, [r0, #0]
    d144:	6043      	str	r3, [r0, #4]
}
    d146:	4770      	bx	lr
    d148:	20002620 	.word	0x20002620

0000d14c <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d14c:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d14e:	2010      	movs	r0, #16
    d150:	4b01      	ldr	r3, [pc, #4]	; (d158 <Stack_Init+0xc>)
    d152:	4798      	blx	r3
}
    d154:	bd10      	pop	{r4, pc}
    d156:	46c0      	nop			; (mov r8, r8)
    d158:	0000d1c9 	.word	0x0000d1c9

0000d15c <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d15e:	4b16      	ldr	r3, [pc, #88]	; (d1b8 <SYSTEM_RunTasks+0x5c>)
    d160:	881b      	ldrh	r3, [r3, #0]
    d162:	b29b      	uxth	r3, r3
    d164:	2b1f      	cmp	r3, #31
    d166:	d922      	bls.n	d1ae <SYSTEM_RunTasks+0x52>
    d168:	e7fe      	b.n	d168 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d16a:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d16c:	4b13      	ldr	r3, [pc, #76]	; (d1bc <SYSTEM_RunTasks+0x60>)
    d16e:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d170:	4911      	ldr	r1, [pc, #68]	; (d1b8 <SYSTEM_RunTasks+0x5c>)
    d172:	880b      	ldrh	r3, [r1, #0]
    d174:	2201      	movs	r2, #1
    d176:	40aa      	lsls	r2, r5
    d178:	4393      	bics	r3, r2
    d17a:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d17c:	4b10      	ldr	r3, [pc, #64]	; (d1c0 <SYSTEM_RunTasks+0x64>)
    d17e:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d180:	00ad      	lsls	r5, r5, #2
    d182:	4b10      	ldr	r3, [pc, #64]	; (d1c4 <SYSTEM_RunTasks+0x68>)
    d184:	58eb      	ldr	r3, [r5, r3]
    d186:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d188:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d18a:	883b      	ldrh	r3, [r7, #0]
    d18c:	b29b      	uxth	r3, r3
    d18e:	2b00      	cmp	r3, #0
    d190:	d011      	beq.n	d1b6 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d192:	8823      	ldrh	r3, [r4, #0]
    d194:	420b      	tst	r3, r1
    d196:	d1e8      	bne.n	d16a <SYSTEM_RunTasks+0xe>
    d198:	2201      	movs	r2, #1
    d19a:	8833      	ldrh	r3, [r6, #0]
    d19c:	b29b      	uxth	r3, r3
    d19e:	0015      	movs	r5, r2
    d1a0:	4113      	asrs	r3, r2
    d1a2:	4219      	tst	r1, r3
    d1a4:	d1e2      	bne.n	d16c <SYSTEM_RunTasks+0x10>
    d1a6:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d1a8:	2a05      	cmp	r2, #5
    d1aa:	d1f6      	bne.n	d19a <SYSTEM_RunTasks+0x3e>
    d1ac:	e7ed      	b.n	d18a <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d1ae:	4f02      	ldr	r7, [pc, #8]	; (d1b8 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d1b0:	003c      	movs	r4, r7
    d1b2:	003e      	movs	r6, r7
    d1b4:	e7e8      	b.n	d188 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1b8:	20000f38 	.word	0x20000f38
    d1bc:	00005dc9 	.word	0x00005dc9
    d1c0:	00005dd5 	.word	0x00005dd5
    d1c4:	0001de60 	.word	0x0001de60

0000d1c8 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d1c8:	b510      	push	{r4, lr}
    d1ca:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d1cc:	4b04      	ldr	r3, [pc, #16]	; (d1e0 <SYSTEM_PostTask+0x18>)
    d1ce:	4798      	blx	r3
    sysTaskFlag |= task;
    d1d0:	4b04      	ldr	r3, [pc, #16]	; (d1e4 <SYSTEM_PostTask+0x1c>)
    d1d2:	8818      	ldrh	r0, [r3, #0]
    d1d4:	4320      	orrs	r0, r4
    d1d6:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d1d8:	4b03      	ldr	r3, [pc, #12]	; (d1e8 <SYSTEM_PostTask+0x20>)
    d1da:	4798      	blx	r3
}
    d1dc:	bd10      	pop	{r4, pc}
    d1de:	46c0      	nop			; (mov r8, r8)
    d1e0:	00005dc9 	.word	0x00005dc9
    d1e4:	20000f38 	.word	0x20000f38
    d1e8:	00005dd5 	.word	0x00005dd5

0000d1ec <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    d1ec:	4b03      	ldr	r3, [pc, #12]	; (d1fc <SYSTEM_ReadyToSleep+0x10>)
    d1ee:	8818      	ldrh	r0, [r3, #0]
    d1f0:	b280      	uxth	r0, r0
    d1f2:	4243      	negs	r3, r0
    d1f4:	4158      	adcs	r0, r3
    d1f6:	b2c0      	uxtb	r0, r0
}
    d1f8:	4770      	bx	lr
    d1fa:	46c0      	nop			; (mov r8, r8)
    d1fc:	20000f38 	.word	0x20000f38

0000d200 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d200:	b5f0      	push	{r4, r5, r6, r7, lr}
    d202:	46d6      	mov	lr, sl
    d204:	464f      	mov	r7, r9
    d206:	b580      	push	{r7, lr}
    d208:	b083      	sub	sp, #12
    d20a:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d20c:	2900      	cmp	r1, #0
    d20e:	d102      	bne.n	d216 <Radio_WriteMode+0x16>
    d210:	1f83      	subs	r3, r0, #6
    d212:	2b01      	cmp	r3, #1
    d214:	d92a      	bls.n	d26c <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d216:	2307      	movs	r3, #7
    d218:	4699      	mov	r9, r3
    d21a:	001c      	movs	r4, r3
    d21c:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d21e:	2601      	movs	r6, #1
    d220:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d222:	2001      	movs	r0, #1
    d224:	4b2b      	ldr	r3, [pc, #172]	; (d2d4 <Radio_WriteMode+0xd4>)
    d226:	4798      	blx	r3
    d228:	0005      	movs	r5, r0
    d22a:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d22c:	b243      	sxtb	r3, r0
    d22e:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d230:	464b      	mov	r3, r9
    d232:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d234:	4652      	mov	r2, sl
    d236:	0fd2      	lsrs	r2, r2, #31
    d238:	4296      	cmp	r6, r2
    d23a:	d00a      	beq.n	d252 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d23c:	2b00      	cmp	r3, #0
    d23e:	d11a      	bne.n	d276 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d240:	2e00      	cmp	r6, #0
    d242:	d11e      	bne.n	d282 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d244:	2778      	movs	r7, #120	; 0x78
    d246:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d248:	0039      	movs	r1, r7
    d24a:	2001      	movs	r0, #1
    d24c:	4b22      	ldr	r3, [pc, #136]	; (d2d8 <Radio_WriteMode+0xd8>)
    d24e:	4798      	blx	r3
    d250:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d252:	42a3      	cmp	r3, r4
    d254:	d00a      	beq.n	d26c <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d256:	2c00      	cmp	r4, #0
    d258:	d030      	beq.n	d2bc <Radio_WriteMode+0xbc>
    d25a:	9b01      	ldr	r3, [sp, #4]
    d25c:	2b01      	cmp	r3, #1
    d25e:	d016      	beq.n	d28e <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d260:	21f8      	movs	r1, #248	; 0xf8
    d262:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d264:	4321      	orrs	r1, r4
    d266:	2001      	movs	r0, #1
    d268:	4b1b      	ldr	r3, [pc, #108]	; (d2d8 <Radio_WriteMode+0xd8>)
    d26a:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d26c:	b003      	add	sp, #12
    d26e:	bc0c      	pop	{r2, r3}
    d270:	4691      	mov	r9, r2
    d272:	469a      	mov	sl, r3
    d274:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d276:	21f8      	movs	r1, #248	; 0xf8
    d278:	4001      	ands	r1, r0
    d27a:	2001      	movs	r0, #1
    d27c:	4b16      	ldr	r3, [pc, #88]	; (d2d8 <Radio_WriteMode+0xd8>)
    d27e:	4798      	blx	r3
    d280:	e7de      	b.n	d240 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d282:	2778      	movs	r7, #120	; 0x78
    d284:	4653      	mov	r3, sl
    d286:	401f      	ands	r7, r3
    d288:	2180      	movs	r1, #128	; 0x80
    d28a:	430f      	orrs	r7, r1
    d28c:	e7dc      	b.n	d248 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d28e:	2041      	movs	r0, #65	; 0x41
    d290:	4b10      	ldr	r3, [pc, #64]	; (d2d4 <Radio_WriteMode+0xd4>)
    d292:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d294:	2e00      	cmp	r6, #0
    d296:	d10e      	bne.n	d2b6 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d298:	2130      	movs	r1, #48	; 0x30
    d29a:	4301      	orrs	r1, r0
    d29c:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d29e:	2041      	movs	r0, #65	; 0x41
    d2a0:	4d0d      	ldr	r5, [pc, #52]	; (d2d8 <Radio_WriteMode+0xd8>)
    d2a2:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d2a4:	21f8      	movs	r1, #248	; 0xf8
    d2a6:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d2a8:	4321      	orrs	r1, r4
    d2aa:	2001      	movs	r0, #1
    d2ac:	47a8      	blx	r5
			   delay_ms(1);
    d2ae:	2001      	movs	r0, #1
    d2b0:	4b0a      	ldr	r3, [pc, #40]	; (d2dc <Radio_WriteMode+0xdc>)
    d2b2:	4798      	blx	r3
    d2b4:	e7da      	b.n	d26c <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d2b6:	21cf      	movs	r1, #207	; 0xcf
    d2b8:	4001      	ands	r1, r0
    d2ba:	e7f0      	b.n	d29e <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d2bc:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d2be:	4039      	ands	r1, r7
    d2c0:	2001      	movs	r0, #1
    d2c2:	4b05      	ldr	r3, [pc, #20]	; (d2d8 <Radio_WriteMode+0xd8>)
    d2c4:	4798      	blx	r3
        if (1 == blocking)
    d2c6:	9b01      	ldr	r3, [sp, #4]
    d2c8:	2b01      	cmp	r3, #1
    d2ca:	d1cf      	bne.n	d26c <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d2cc:	2001      	movs	r0, #1
    d2ce:	4b04      	ldr	r3, [pc, #16]	; (d2e0 <Radio_WriteMode+0xe0>)
    d2d0:	4798      	blx	r3
    d2d2:	e7cb      	b.n	d26c <Radio_WriteMode+0x6c>
    d2d4:	00005b41 	.word	0x00005b41
    d2d8:	00005b19 	.word	0x00005b19
    d2dc:	000029e9 	.word	0x000029e9
    d2e0:	00005d75 	.word	0x00005d75

0000d2e4 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d2e4:	b500      	push	{lr}
    d2e6:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d2e8:	2012      	movs	r0, #18
    d2ea:	4b0d      	ldr	r3, [pc, #52]	; (d320 <RADIO_FHSSChangeChannel+0x3c>)
    d2ec:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d2ee:	4b0d      	ldr	r3, [pc, #52]	; (d324 <RADIO_FHSSChangeChannel+0x40>)
    d2f0:	8adb      	ldrh	r3, [r3, #22]
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	d007      	beq.n	d306 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d2f6:	4b0b      	ldr	r3, [pc, #44]	; (d324 <RADIO_FHSSChangeChannel+0x40>)
    d2f8:	691b      	ldr	r3, [r3, #16]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d003      	beq.n	d306 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d2fe:	4a0a      	ldr	r2, [pc, #40]	; (d328 <RADIO_FHSSChangeChannel+0x44>)
    d300:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d302:	0692      	lsls	r2, r2, #26
    d304:	d405      	bmi.n	d312 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d306:	2102      	movs	r1, #2
    d308:	2012      	movs	r0, #18
    d30a:	4b08      	ldr	r3, [pc, #32]	; (d32c <RADIO_FHSSChangeChannel+0x48>)
    d30c:	4798      	blx	r3
}
    d30e:	b003      	add	sp, #12
    d310:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d312:	a901      	add	r1, sp, #4
    d314:	2020      	movs	r0, #32
    d316:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    d318:	9801      	ldr	r0, [sp, #4]
    d31a:	4b05      	ldr	r3, [pc, #20]	; (d330 <RADIO_FHSSChangeChannel+0x4c>)
    d31c:	4798      	blx	r3
    d31e:	e7f2      	b.n	d306 <RADIO_FHSSChangeChannel+0x22>
    d320:	00005b41 	.word	0x00005b41
    d324:	200027c8 	.word	0x200027c8
    d328:	20002e1a 	.word	0x20002e1a
    d32c:	00005b19 	.word	0x00005b19
    d330:	00012d85 	.word	0x00012d85

0000d334 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d336:	2000      	movs	r0, #0
    d338:	4b1a      	ldr	r3, [pc, #104]	; (d3a4 <RADIO_ReadRandom+0x70>)
    d33a:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d33c:	4b1a      	ldr	r3, [pc, #104]	; (d3a8 <RADIO_ReadRandom+0x74>)
    d33e:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d340:	2201      	movs	r2, #1
    d342:	2101      	movs	r1, #1
    d344:	2000      	movs	r0, #0
    d346:	4c19      	ldr	r4, [pc, #100]	; (d3ac <RADIO_ReadRandom+0x78>)
    d348:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d34a:	21ff      	movs	r1, #255	; 0xff
    d34c:	2011      	movs	r0, #17
    d34e:	4b18      	ldr	r3, [pc, #96]	; (d3b0 <RADIO_ReadRandom+0x7c>)
    d350:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d352:	2201      	movs	r2, #1
    d354:	2101      	movs	r1, #1
    d356:	2005      	movs	r0, #5
    d358:	47a0      	blx	r4
    d35a:	2410      	movs	r4, #16
    retVal = 0;
    d35c:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d35e:	4f15      	ldr	r7, [pc, #84]	; (d3b4 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d360:	4e15      	ldr	r6, [pc, #84]	; (d3b8 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d362:	2001      	movs	r0, #1
    d364:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d366:	202c      	movs	r0, #44	; 0x2c
    d368:	47b0      	blx	r6
    d36a:	2301      	movs	r3, #1
    d36c:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d36e:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d370:	4305      	orrs	r5, r0
    d372:	b2ad      	uxth	r5, r5
    d374:	3c01      	subs	r4, #1
    d376:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d378:	2c00      	cmp	r4, #0
    d37a:	d1f2      	bne.n	d362 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d37c:	2000      	movs	r0, #0
    d37e:	4b0f      	ldr	r3, [pc, #60]	; (d3bc <RADIO_ReadRandom+0x88>)
    d380:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d382:	2201      	movs	r2, #1
    d384:	2101      	movs	r1, #1
    d386:	2000      	movs	r0, #0
    d388:	4b08      	ldr	r3, [pc, #32]	; (d3ac <RADIO_ReadRandom+0x78>)
    d38a:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d38c:	21ff      	movs	r1, #255	; 0xff
    d38e:	2012      	movs	r0, #18
    d390:	4c07      	ldr	r4, [pc, #28]	; (d3b0 <RADIO_ReadRandom+0x7c>)
    d392:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d394:	2100      	movs	r1, #0
    d396:	2011      	movs	r0, #17
    d398:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d39a:	4b09      	ldr	r3, [pc, #36]	; (d3c0 <RADIO_ReadRandom+0x8c>)
    d39c:	4798      	blx	r3
	
    return retVal;
}
    d39e:	0028      	movs	r0, r5
    d3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3a2:	46c0      	nop			; (mov r8, r8)
    d3a4:	00013641 	.word	0x00013641
    d3a8:	00013af1 	.word	0x00013af1
    d3ac:	0000d201 	.word	0x0000d201
    d3b0:	00005b19 	.word	0x00005b19
    d3b4:	00005d75 	.word	0x00005d75
    d3b8:	00005b41 	.word	0x00005b41
    d3bc:	00013769 	.word	0x00013769
    d3c0:	00013b25 	.word	0x00013b25

0000d3c4 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d3c4:	b510      	push	{r4, lr}
    d3c6:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d3c8:	2011      	movs	r0, #17
    d3ca:	4b04      	ldr	r3, [pc, #16]	; (d3dc <Radio_ReadFSKRssi+0x18>)
    d3cc:	4798      	blx	r3
    d3ce:	0840      	lsrs	r0, r0, #1
    d3d0:	b2c0      	uxtb	r0, r0
    d3d2:	4240      	negs	r0, r0
    d3d4:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d3d6:	2000      	movs	r0, #0
    d3d8:	bd10      	pop	{r4, pc}
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	00005b41 	.word	0x00005b41

0000d3e0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d3e0:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d3e2:	4b01      	ldr	r3, [pc, #4]	; (d3e8 <tc_cca_callback+0x8>)
    d3e4:	4798      	blx	r3
}
    d3e6:	bd10      	pop	{r4, pc}
    d3e8:	0000da79 	.word	0x0000da79

0000d3ec <tc_ovf_callback>:
{
    d3ec:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d3ee:	4b01      	ldr	r3, [pc, #4]	; (d3f4 <tc_ovf_callback+0x8>)
    d3f0:	4798      	blx	r3
}
    d3f2:	bd10      	pop	{r4, pc}
    d3f4:	0000da31 	.word	0x0000da31

0000d3f8 <tmr_read_count>:
{
    d3f8:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d3fa:	4802      	ldr	r0, [pc, #8]	; (d404 <tmr_read_count+0xc>)
    d3fc:	4b02      	ldr	r3, [pc, #8]	; (d408 <tmr_read_count+0x10>)
    d3fe:	4798      	blx	r3
    d400:	b280      	uxth	r0, r0
}
    d402:	bd10      	pop	{r4, pc}
    d404:	2000285c 	.word	0x2000285c
    d408:	0000525d 	.word	0x0000525d

0000d40c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d40c:	4b03      	ldr	r3, [pc, #12]	; (d41c <tmr_disable_cc_interrupt+0x10>)
    d40e:	2110      	movs	r1, #16
    d410:	681a      	ldr	r2, [r3, #0]
    d412:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d414:	7e5a      	ldrb	r2, [r3, #25]
    d416:	438a      	bics	r2, r1
    d418:	765a      	strb	r2, [r3, #25]
}
    d41a:	4770      	bx	lr
    d41c:	2000285c 	.word	0x2000285c

0000d420 <tmr_enable_cc_interrupt>:
{
    d420:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d422:	4c0b      	ldr	r4, [pc, #44]	; (d450 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    d424:	2510      	movs	r5, #16
    d426:	6823      	ldr	r3, [r4, #0]
    d428:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d42a:	0018      	movs	r0, r3
    d42c:	4b09      	ldr	r3, [pc, #36]	; (d454 <tmr_enable_cc_interrupt+0x34>)
    d42e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d430:	4b09      	ldr	r3, [pc, #36]	; (d458 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d432:	5c1b      	ldrb	r3, [r3, r0]
    d434:	221f      	movs	r2, #31
    d436:	401a      	ands	r2, r3
    d438:	2301      	movs	r3, #1
    d43a:	4093      	lsls	r3, r2
    d43c:	4a07      	ldr	r2, [pc, #28]	; (d45c <tmr_enable_cc_interrupt+0x3c>)
    d43e:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d440:	7e63      	ldrb	r3, [r4, #25]
    d442:	2210      	movs	r2, #16
    d444:	4313      	orrs	r3, r2
    d446:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d448:	6823      	ldr	r3, [r4, #0]
    d44a:	725d      	strb	r5, [r3, #9]
}
    d44c:	bd70      	pop	{r4, r5, r6, pc}
    d44e:	46c0      	nop			; (mov r8, r8)
    d450:	2000285c 	.word	0x2000285c
    d454:	00004f31 	.word	0x00004f31
    d458:	0001de74 	.word	0x0001de74
    d45c:	e000e100 	.word	0xe000e100

0000d460 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d460:	4b03      	ldr	r3, [pc, #12]	; (d470 <tmr_disable_ovf_interrupt+0x10>)
    d462:	2101      	movs	r1, #1
    d464:	681a      	ldr	r2, [r3, #0]
    d466:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d468:	7e5a      	ldrb	r2, [r3, #25]
    d46a:	438a      	bics	r2, r1
    d46c:	765a      	strb	r2, [r3, #25]
}
    d46e:	4770      	bx	lr
    d470:	2000285c 	.word	0x2000285c

0000d474 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d474:	4b06      	ldr	r3, [pc, #24]	; (d490 <tmr_stop+0x1c>)
    d476:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    d478:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d47a:	2b00      	cmp	r3, #0
    d47c:	d1fc      	bne.n	d478 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    d47e:	3333      	adds	r3, #51	; 0x33
    d480:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    d482:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    d484:	6813      	ldr	r3, [r2, #0]
    d486:	2102      	movs	r1, #2
    d488:	438b      	bics	r3, r1
    d48a:	6013      	str	r3, [r2, #0]
}
    d48c:	4770      	bx	lr
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	2000285c 	.word	0x2000285c

0000d494 <tmr_write_cmpreg>:
{
    d494:	b510      	push	{r4, lr}
    d496:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d498:	2100      	movs	r1, #0
    d49a:	4802      	ldr	r0, [pc, #8]	; (d4a4 <tmr_write_cmpreg+0x10>)
    d49c:	4b02      	ldr	r3, [pc, #8]	; (d4a8 <tmr_write_cmpreg+0x14>)
    d49e:	4798      	blx	r3
}
    d4a0:	bd10      	pop	{r4, pc}
    d4a2:	46c0      	nop			; (mov r8, r8)
    d4a4:	2000285c 	.word	0x2000285c
    d4a8:	0000529d 	.word	0x0000529d

0000d4ac <save_cpu_interrupt>:
{
    d4ac:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d4ae:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d4b2:	425a      	negs	r2, r3
    d4b4:	4153      	adcs	r3, r2
    d4b6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d4b8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d4ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d4be:	2200      	movs	r2, #0
    d4c0:	4b02      	ldr	r3, [pc, #8]	; (d4cc <save_cpu_interrupt+0x20>)
    d4c2:	701a      	strb	r2, [r3, #0]
	return flags;
    d4c4:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d4c6:	b2c0      	uxtb	r0, r0
}
    d4c8:	b002      	add	sp, #8
    d4ca:	4770      	bx	lr
    d4cc:	20000014 	.word	0x20000014

0000d4d0 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d4d0:	2800      	cmp	r0, #0
    d4d2:	d005      	beq.n	d4e0 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d4d4:	2201      	movs	r2, #1
    d4d6:	4b03      	ldr	r3, [pc, #12]	; (d4e4 <restore_cpu_interrupt+0x14>)
    d4d8:	701a      	strb	r2, [r3, #0]
    d4da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d4de:	b662      	cpsie	i
}
    d4e0:	4770      	bx	lr
    d4e2:	46c0      	nop			; (mov r8, r8)
    d4e4:	20000014 	.word	0x20000014

0000d4e8 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d4e8:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d4ea:	4a33      	ldr	r2, [pc, #204]	; (d5b8 <tmr_init+0xd0>)
    d4ec:	2100      	movs	r1, #0
    d4ee:	2300      	movs	r3, #0
    d4f0:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d4f2:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d4f4:	2000      	movs	r0, #0
    d4f6:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d4f8:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d4fa:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d4fc:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d4fe:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d500:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d502:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d504:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d506:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d508:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d50a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d50c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d50e:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d510:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d512:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d514:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d516:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d518:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d51a:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d51c:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d51e:	2334      	movs	r3, #52	; 0x34
    d520:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d522:	3b35      	subs	r3, #53	; 0x35
    d524:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d526:	4c25      	ldr	r4, [pc, #148]	; (d5bc <tmr_init+0xd4>)
    d528:	4925      	ldr	r1, [pc, #148]	; (d5c0 <tmr_init+0xd8>)
    d52a:	0020      	movs	r0, r4
    d52c:	4b25      	ldr	r3, [pc, #148]	; (d5c4 <tmr_init+0xdc>)
    d52e:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d530:	2200      	movs	r2, #0
    d532:	4925      	ldr	r1, [pc, #148]	; (d5c8 <tmr_init+0xe0>)
    d534:	0020      	movs	r0, r4
    d536:	4d25      	ldr	r5, [pc, #148]	; (d5cc <tmr_init+0xe4>)
    d538:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d53a:	2202      	movs	r2, #2
    d53c:	4924      	ldr	r1, [pc, #144]	; (d5d0 <tmr_init+0xe8>)
    d53e:	0020      	movs	r0, r4
    d540:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d542:	6820      	ldr	r0, [r4, #0]
    d544:	4b23      	ldr	r3, [pc, #140]	; (d5d4 <tmr_init+0xec>)
    d546:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d548:	4b23      	ldr	r3, [pc, #140]	; (d5d8 <tmr_init+0xf0>)
    d54a:	5c1a      	ldrb	r2, [r3, r0]
    d54c:	231f      	movs	r3, #31
    d54e:	4013      	ands	r3, r2
    d550:	2101      	movs	r1, #1
    d552:	000a      	movs	r2, r1
    d554:	409a      	lsls	r2, r3
    d556:	4b21      	ldr	r3, [pc, #132]	; (d5dc <tmr_init+0xf4>)
    d558:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d55a:	7e63      	ldrb	r3, [r4, #25]
    d55c:	2201      	movs	r2, #1
    d55e:	4313      	orrs	r3, r2
    d560:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d562:	6822      	ldr	r2, [r4, #0]
    d564:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d566:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d568:	2b00      	cmp	r3, #0
    d56a:	d1fc      	bne.n	d566 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d56c:	6813      	ldr	r3, [r2, #0]
    d56e:	2102      	movs	r1, #2
    d570:	430b      	orrs	r3, r1
    d572:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d574:	2000      	movs	r0, #0
    d576:	4b1a      	ldr	r3, [pc, #104]	; (d5e0 <tmr_init+0xf8>)
    d578:	4798      	blx	r3
    d57a:	4d1a      	ldr	r5, [pc, #104]	; (d5e4 <tmr_init+0xfc>)
    d57c:	47a8      	blx	r5
    d57e:	491a      	ldr	r1, [pc, #104]	; (d5e8 <tmr_init+0x100>)
    d580:	4b1a      	ldr	r3, [pc, #104]	; (d5ec <tmr_init+0x104>)
    d582:	4798      	blx	r3
    d584:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d586:	4b1a      	ldr	r3, [pc, #104]	; (d5f0 <tmr_init+0x108>)
    d588:	4798      	blx	r3
    d58a:	47a8      	blx	r5
    d58c:	1c01      	adds	r1, r0, #0
    d58e:	1c20      	adds	r0, r4, #0
    d590:	4b18      	ldr	r3, [pc, #96]	; (d5f4 <tmr_init+0x10c>)
    d592:	4798      	blx	r3
    d594:	21fc      	movs	r1, #252	; 0xfc
    d596:	0589      	lsls	r1, r1, #22
    d598:	4b17      	ldr	r3, [pc, #92]	; (d5f8 <tmr_init+0x110>)
    d59a:	4798      	blx	r3
    d59c:	2800      	cmp	r0, #0
    d59e:	d005      	beq.n	d5ac <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d5a0:	21fe      	movs	r1, #254	; 0xfe
    d5a2:	0589      	lsls	r1, r1, #22
    d5a4:	1c20      	adds	r0, r4, #0
    d5a6:	4b15      	ldr	r3, [pc, #84]	; (d5fc <tmr_init+0x114>)
    d5a8:	4798      	blx	r3
    d5aa:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d5ac:	1c20      	adds	r0, r4, #0
    d5ae:	4b10      	ldr	r3, [pc, #64]	; (d5f0 <tmr_init+0x108>)
    d5b0:	4798      	blx	r3
    d5b2:	b2c0      	uxtb	r0, r0
}
    d5b4:	bd70      	pop	{r4, r5, r6, pc}
    d5b6:	46c0      	nop			; (mov r8, r8)
    d5b8:	20002824 	.word	0x20002824
    d5bc:	2000285c 	.word	0x2000285c
    d5c0:	42002000 	.word	0x42002000
    d5c4:	00004f6d 	.word	0x00004f6d
    d5c8:	0000d3ed 	.word	0x0000d3ed
    d5cc:	00004e49 	.word	0x00004e49
    d5d0:	0000d3e1 	.word	0x0000d3e1
    d5d4:	00004f31 	.word	0x00004f31
    d5d8:	0001de74 	.word	0x0001de74
    d5dc:	e000e100 	.word	0xe000e100
    d5e0:	00004c11 	.word	0x00004c11
    d5e4:	00015901 	.word	0x00015901
    d5e8:	49742400 	.word	0x49742400
    d5ec:	00014ec9 	.word	0x00014ec9
    d5f0:	00014979 	.word	0x00014979
    d5f4:	000154e9 	.word	0x000154e9
    d5f8:	000148d1 	.word	0x000148d1
    d5fc:	00014ba5 	.word	0x00014ba5

0000d600 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    d600:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    d602:	2800      	cmp	r0, #0
    d604:	d122      	bne.n	d64c <nvm_read+0x4c>
    d606:	4814      	ldr	r0, [pc, #80]	; (d658 <nvm_read+0x58>)
    d608:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    d60a:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    d60c:	07e4      	lsls	r4, r4, #31
    d60e:	d400      	bmi.n	d612 <nvm_read+0x12>
}
    d610:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d612:	2420      	movs	r4, #32
    d614:	34ff      	adds	r4, #255	; 0xff
    d616:	4810      	ldr	r0, [pc, #64]	; (d658 <nvm_read+0x58>)
    d618:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    d61a:	2b00      	cmp	r3, #0
    d61c:	d019      	beq.n	d652 <nvm_read+0x52>
    d61e:	2001      	movs	r0, #1
    d620:	4381      	bics	r1, r0
    d622:	2000      	movs	r0, #0
    d624:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    d626:	1e5e      	subs	r6, r3, #1
    d628:	e005      	b.n	d636 <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    d62a:	3002      	adds	r0, #2
    d62c:	b280      	uxth	r0, r0
    d62e:	0005      	movs	r5, r0
    d630:	3102      	adds	r1, #2
    d632:	4283      	cmp	r3, r0
    d634:	d908      	bls.n	d648 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    d636:	880c      	ldrh	r4, [r1, #0]
    d638:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    d63a:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    d63c:	42ae      	cmp	r6, r5
    d63e:	d9f4      	bls.n	d62a <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    d640:	1955      	adds	r5, r2, r5
    d642:	0a24      	lsrs	r4, r4, #8
    d644:	706c      	strb	r4, [r5, #1]
    d646:	e7f0      	b.n	d62a <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d648:	2000      	movs	r0, #0
    d64a:	e7e1      	b.n	d610 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    d64c:	2008      	movs	r0, #8
    d64e:	4240      	negs	r0, r0
    d650:	e7de      	b.n	d610 <nvm_read+0x10>
	return STATUS_OK;
    d652:	2000      	movs	r0, #0
    d654:	e7dc      	b.n	d610 <nvm_read+0x10>
    d656:	46c0      	nop			; (mov r8, r8)
    d658:	41004000 	.word	0x41004000

0000d65c <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    d65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d65e:	46de      	mov	lr, fp
    d660:	4657      	mov	r7, sl
    d662:	464e      	mov	r6, r9
    d664:	4645      	mov	r5, r8
    d666:	b5e0      	push	{r5, r6, r7, lr}
    d668:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    d66a:	2800      	cmp	r0, #0
    d66c:	d168      	bne.n	d740 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    d66e:	b29b      	uxth	r3, r3
    d670:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    d672:	4688      	mov	r8, r1
	uint32_t row_start_address
    d674:	23ff      	movs	r3, #255	; 0xff
    d676:	4399      	bics	r1, r3
    d678:	9100      	str	r1, [sp, #0]
	while (length) {
    d67a:	4653      	mov	r3, sl
    d67c:	2b00      	cmp	r3, #0
    d67e:	d06b      	beq.n	d758 <nvm_write+0xfc>
    d680:	ab04      	add	r3, sp, #16
    d682:	1a5b      	subs	r3, r3, r1
    d684:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    d686:	4e35      	ldr	r6, [pc, #212]	; (d75c <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    d688:	4b35      	ldr	r3, [pc, #212]	; (d760 <nvm_write+0x104>)
    d68a:	469b      	mov	fp, r3
    d68c:	9203      	str	r2, [sp, #12]
    d68e:	e03a      	b.n	d706 <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    d690:	3301      	adds	r3, #1
		for (i = row_start_address;
    d692:	42bb      	cmp	r3, r7
    d694:	d20e      	bcs.n	d6b4 <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    d696:	2a00      	cmp	r2, #0
    d698:	d0fa      	beq.n	d690 <nvm_write+0x34>
    d69a:	4299      	cmp	r1, r3
    d69c:	d1f8      	bne.n	d690 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    d69e:	9d03      	ldr	r5, [sp, #12]
    d6a0:	7828      	ldrb	r0, [r5, #0]
    d6a2:	9c02      	ldr	r4, [sp, #8]
    d6a4:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    d6a6:	3101      	adds	r1, #1
				length--;
    d6a8:	3a01      	subs	r2, #1
    d6aa:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    d6ac:	0028      	movs	r0, r5
    d6ae:	3001      	adds	r0, #1
    d6b0:	9003      	str	r0, [sp, #12]
    d6b2:	e7ed      	b.n	d690 <nvm_write+0x34>
    d6b4:	4692      	mov	sl, r2
    d6b6:	4688      	mov	r8, r1
    d6b8:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    d6ba:	4b2a      	ldr	r3, [pc, #168]	; (d764 <nvm_write+0x108>)
    d6bc:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    d6be:	9800      	ldr	r0, [sp, #0]
    d6c0:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    d6c2:	2805      	cmp	r0, #5
    d6c4:	d0fb      	beq.n	d6be <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    d6c6:	2800      	cmp	r0, #0
    d6c8:	d13d      	bne.n	d746 <nvm_write+0xea>
    d6ca:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    d6cc:	4f26      	ldr	r7, [pc, #152]	; (d768 <nvm_write+0x10c>)
    d6ce:	9401      	str	r4, [sp, #4]
    d6d0:	9b00      	ldr	r3, [sp, #0]
    d6d2:	1aec      	subs	r4, r5, r3
    d6d4:	ab04      	add	r3, sp, #16
    d6d6:	469c      	mov	ip, r3
    d6d8:	4464      	add	r4, ip
    d6da:	2240      	movs	r2, #64	; 0x40
    d6dc:	0021      	movs	r1, r4
    d6de:	0028      	movs	r0, r5
    d6e0:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    d6e2:	2805      	cmp	r0, #5
    d6e4:	d0f9      	beq.n	d6da <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    d6e6:	2800      	cmp	r0, #0
    d6e8:	d12d      	bne.n	d746 <nvm_write+0xea>
    d6ea:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    d6ec:	9b01      	ldr	r3, [sp, #4]
    d6ee:	42ab      	cmp	r3, r5
    d6f0:	d1ee      	bne.n	d6d0 <nvm_write+0x74>
	cpu_irq_leave_critical();
    d6f2:	4b1e      	ldr	r3, [pc, #120]	; (d76c <nvm_write+0x110>)
    d6f4:	4798      	blx	r3
    d6f6:	9b02      	ldr	r3, [sp, #8]
    d6f8:	3b01      	subs	r3, #1
    d6fa:	3bff      	subs	r3, #255	; 0xff
    d6fc:	9302      	str	r3, [sp, #8]
    d6fe:	9500      	str	r5, [sp, #0]
	while (length) {
    d700:	4653      	mov	r3, sl
    d702:	2b00      	cmp	r3, #0
    d704:	d028      	beq.n	d758 <nvm_write+0xfc>
    d706:	9b00      	ldr	r3, [sp, #0]
    d708:	1c5f      	adds	r7, r3, #1
    d70a:	37ff      	adds	r7, #255	; 0xff
{
    d70c:	001c      	movs	r4, r3
    d70e:	46b9      	mov	r9, r7
    d710:	001f      	movs	r7, r3
    d712:	1be5      	subs	r5, r4, r7
    d714:	ab04      	add	r3, sp, #16
    d716:	469c      	mov	ip, r3
    d718:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    d71a:	2240      	movs	r2, #64	; 0x40
    d71c:	0029      	movs	r1, r5
    d71e:	0020      	movs	r0, r4
    d720:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    d722:	2805      	cmp	r0, #5
    d724:	d0f9      	beq.n	d71a <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    d726:	2800      	cmp	r0, #0
    d728:	d10d      	bne.n	d746 <nvm_write+0xea>
    d72a:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    d72c:	454c      	cmp	r4, r9
    d72e:	d1f0      	bne.n	d712 <nvm_write+0xb6>
    d730:	464f      	mov	r7, r9
		for (i = row_start_address;
    d732:	9b00      	ldr	r3, [sp, #0]
    d734:	429f      	cmp	r7, r3
    d736:	d9c0      	bls.n	d6ba <nvm_write+0x5e>
    d738:	4652      	mov	r2, sl
    d73a:	4641      	mov	r1, r8
    d73c:	9401      	str	r4, [sp, #4]
    d73e:	e7aa      	b.n	d696 <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    d740:	2008      	movs	r0, #8
    d742:	4240      	negs	r0, r0
    d744:	e001      	b.n	d74a <nvm_write+0xee>
			return ERR_INVALID_ARG;
    d746:	2008      	movs	r0, #8
    d748:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    d74a:	b045      	add	sp, #276	; 0x114
    d74c:	bc3c      	pop	{r2, r3, r4, r5}
    d74e:	4690      	mov	r8, r2
    d750:	4699      	mov	r9, r3
    d752:	46a2      	mov	sl, r4
    d754:	46ab      	mov	fp, r5
    d756:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    d758:	2000      	movs	r0, #0
    d75a:	e7f6      	b.n	d74a <nvm_write+0xee>
    d75c:	00003179 	.word	0x00003179
    d760:	000031f9 	.word	0x000031f9
    d764:	00002a15 	.word	0x00002a15
    d768:	000030a1 	.word	0x000030a1
    d76c:	00002a55 	.word	0x00002a55

0000d770 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    d770:	b500      	push	{lr}
    d772:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    d774:	2800      	cmp	r0, #0
    d776:	d110      	bne.n	d79a <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    d778:	2300      	movs	r3, #0
    d77a:	466a      	mov	r2, sp
    d77c:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    d77e:	4a08      	ldr	r2, [pc, #32]	; (d7a0 <nvm_init+0x30>)
    d780:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    d782:	466a      	mov	r2, sp
    d784:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    d786:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    d788:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    d78a:	3302      	adds	r3, #2
    d78c:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    d78e:	4668      	mov	r0, sp
    d790:	4b04      	ldr	r3, [pc, #16]	; (d7a4 <nvm_init+0x34>)
    d792:	4798      	blx	r3

		return STATUS_OK;
    d794:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    d796:	b003      	add	sp, #12
    d798:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    d79a:	2008      	movs	r0, #8
    d79c:	4240      	negs	r0, r0
    d79e:	e7fa      	b.n	d796 <nvm_init+0x26>
    d7a0:	41004000 	.word	0x41004000
    d7a4:	00002f39 	.word	0x00002f39

0000d7a8 <main>:
	}
	printf("\n\r");
}

int main(void)
{
    d7a8:	b570      	push	{r4, r5, r6, lr}
	system_init();
    d7aa:	4b30      	ldr	r3, [pc, #192]	; (d86c <main+0xc4>)
    d7ac:	4798      	blx	r3
	delay_init();
    d7ae:	4b30      	ldr	r3, [pc, #192]	; (d870 <main+0xc8>)
    d7b0:	4798      	blx	r3
	board_init();
    d7b2:	4b30      	ldr	r3, [pc, #192]	; (d874 <main+0xcc>)
    d7b4:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable();
    d7b6:	2201      	movs	r2, #1
    d7b8:	4b2f      	ldr	r3, [pc, #188]	; (d878 <main+0xd0>)
    d7ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d7bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d7c0:	b662      	cpsie	i
	sio2host_init();
    d7c2:	4b2e      	ldr	r3, [pc, #184]	; (d87c <main+0xd4>)
    d7c4:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    d7c6:	4b2e      	ldr	r3, [pc, #184]	; (d880 <main+0xd8>)
    d7c8:	781c      	ldrb	r4, [r3, #0]
    d7ca:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    d7cc:	482d      	ldr	r0, [pc, #180]	; (d884 <main+0xdc>)
    d7ce:	4b2e      	ldr	r3, [pc, #184]	; (d888 <main+0xe0>)
    d7d0:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    d7d2:	0663      	lsls	r3, r4, #25
    d7d4:	d431      	bmi.n	d83a <main+0x92>
	if(rcause & (1 << 5)) {
    d7d6:	06a3      	lsls	r3, r4, #26
    d7d8:	d433      	bmi.n	d842 <main+0x9a>
	if(rcause & (1 << 4)) {
    d7da:	06e3      	lsls	r3, r4, #27
    d7dc:	d435      	bmi.n	d84a <main+0xa2>
	if(rcause & (1 << 2)) {
    d7de:	0763      	lsls	r3, r4, #29
    d7e0:	d437      	bmi.n	d852 <main+0xaa>
	if(rcause & (1 << 1)) {
    d7e2:	07a3      	lsls	r3, r4, #30
    d7e4:	d439      	bmi.n	d85a <main+0xb2>
	if(rcause & (1 << 0)) {
    d7e6:	07e3      	lsls	r3, r4, #31
    d7e8:	d43b      	bmi.n	d862 <main+0xba>
#if (_DEBUG_ == 1)
	SYSTEM_AssertSubscribe(assertHandler);
#endif

	/* Configure board button as external interrupt pin */
	configure_extint();	
    d7ea:	4b28      	ldr	r3, [pc, #160]	; (d88c <main+0xe4>)
    d7ec:	4798      	blx	r3
	/* Register External Interrupt callback */
	configure_eic_callback();
    d7ee:	4b28      	ldr	r3, [pc, #160]	; (d890 <main+0xe8>)
    d7f0:	4798      	blx	r3
	printf("LoRaWAN Stack UP\r\n");
    d7f2:	4828      	ldr	r0, [pc, #160]	; (d894 <main+0xec>)
    d7f4:	4b28      	ldr	r3, [pc, #160]	; (d898 <main+0xf0>)
    d7f6:	4798      	blx	r3
	HAL_RadioInit();	
    d7f8:	4b28      	ldr	r3, [pc, #160]	; (d89c <main+0xf4>)
    d7fa:	4798      	blx	r3
	AESInit();
    d7fc:	4b28      	ldr	r3, [pc, #160]	; (d8a0 <main+0xf8>)
    d7fe:	4798      	blx	r3
#ifdef CRYPTO_DEV_ENABLED
	SAL_Init();	
#endif
	SystemTimerInit();
    d800:	4b28      	ldr	r3, [pc, #160]	; (d8a4 <main+0xfc>)
    d802:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
	SleepTimerInit();
    d804:	4b28      	ldr	r3, [pc, #160]	; (d8a8 <main+0x100>)
    d806:	4798      	blx	r3
#endif /* CONF_PMM_ENABLE */


#if (ENABLE_PDS == 1)	
 	PDS_Init();
    d808:	4b28      	ldr	r3, [pc, #160]	; (d8ac <main+0x104>)
    d80a:	4798      	blx	r3
#endif	
	Stack_Init();
    d80c:	4b28      	ldr	r3, [pc, #160]	; (d8b0 <main+0x108>)
    d80e:	4798      	blx	r3
	Parser_Init();
    d810:	4b28      	ldr	r3, [pc, #160]	; (d8b4 <main+0x10c>)
    d812:	4798      	blx	r3
    Parser_SetConfiguredJoinParameters(0x01);
    d814:	2001      	movs	r0, #1
    d816:	4b28      	ldr	r3, [pc, #160]	; (d8b8 <main+0x110>)
    d818:	4798      	blx	r3
    Parser_GetSwVersion(aParserData);
    d81a:	4c28      	ldr	r4, [pc, #160]	; (d8bc <main+0x114>)
    d81c:	0020      	movs	r0, r4
    d81e:	4b28      	ldr	r3, [pc, #160]	; (d8c0 <main+0x118>)
    d820:	4798      	blx	r3
    Parser_TxAddReply((char *)aParserData, (uint16_t)strlen((char *)aParserData));
    d822:	0020      	movs	r0, r4
    d824:	4b27      	ldr	r3, [pc, #156]	; (d8c4 <main+0x11c>)
    d826:	4798      	blx	r3
    d828:	b281      	uxth	r1, r0
    d82a:	0020      	movs	r0, r4
    d82c:	4b26      	ldr	r3, [pc, #152]	; (d8c8 <main+0x120>)
    d82e:	4798      	blx	r3

    while (1)
    {
		parser_serial_data_handler();
    d830:	4d26      	ldr	r5, [pc, #152]	; (d8cc <main+0x124>)
		SYSTEM_RunTasks();
    d832:	4c27      	ldr	r4, [pc, #156]	; (d8d0 <main+0x128>)
		parser_serial_data_handler();
    d834:	47a8      	blx	r5
		SYSTEM_RunTasks();
    d836:	47a0      	blx	r4
    d838:	e7fc      	b.n	d834 <main+0x8c>
		printf("System Reset Request\r\n");
    d83a:	4826      	ldr	r0, [pc, #152]	; (d8d4 <main+0x12c>)
    d83c:	4b16      	ldr	r3, [pc, #88]	; (d898 <main+0xf0>)
    d83e:	4798      	blx	r3
    d840:	e7c9      	b.n	d7d6 <main+0x2e>
		printf("Watchdog Reset\r\n");
    d842:	4825      	ldr	r0, [pc, #148]	; (d8d8 <main+0x130>)
    d844:	4b14      	ldr	r3, [pc, #80]	; (d898 <main+0xf0>)
    d846:	4798      	blx	r3
    d848:	e7c7      	b.n	d7da <main+0x32>
		printf("External Reset\r\n");
    d84a:	4824      	ldr	r0, [pc, #144]	; (d8dc <main+0x134>)
    d84c:	4b12      	ldr	r3, [pc, #72]	; (d898 <main+0xf0>)
    d84e:	4798      	blx	r3
    d850:	e7c5      	b.n	d7de <main+0x36>
		printf("Brown Out 33 Detector Reset\r\n");
    d852:	4823      	ldr	r0, [pc, #140]	; (d8e0 <main+0x138>)
    d854:	4b10      	ldr	r3, [pc, #64]	; (d898 <main+0xf0>)
    d856:	4798      	blx	r3
    d858:	e7c3      	b.n	d7e2 <main+0x3a>
		printf("Brown Out 12 Detector Reset\r\n");
    d85a:	4822      	ldr	r0, [pc, #136]	; (d8e4 <main+0x13c>)
    d85c:	4b0e      	ldr	r3, [pc, #56]	; (d898 <main+0xf0>)
    d85e:	4798      	blx	r3
    d860:	e7c1      	b.n	d7e6 <main+0x3e>
		printf("Power-On Reset\r\n");
    d862:	4821      	ldr	r0, [pc, #132]	; (d8e8 <main+0x140>)
    d864:	4b0c      	ldr	r3, [pc, #48]	; (d898 <main+0xf0>)
    d866:	4798      	blx	r3
    d868:	e7bf      	b.n	d7ea <main+0x42>
    d86a:	46c0      	nop			; (mov r8, r8)
    d86c:	00004e1d 	.word	0x00004e1d
    d870:	0000297d 	.word	0x0000297d
    d874:	00002a85 	.word	0x00002a85
    d878:	20000014 	.word	0x20000014
    d87c:	00005535 	.word	0x00005535
    d880:	40000800 	.word	0x40000800
    d884:	0001de7c 	.word	0x0001de7c
    d888:	000177a9 	.word	0x000177a9
    d88c:	00002375 	.word	0x00002375
    d890:	000023a5 	.word	0x000023a5
    d894:	0001df1c 	.word	0x0001df1c
    d898:	0001786d 	.word	0x0001786d
    d89c:	000058dd 	.word	0x000058dd
    d8a0:	0000bdb5 	.word	0x0000bdb5
    d8a4:	0000ca99 	.word	0x0000ca99
    d8a8:	00005cc9 	.word	0x00005cc9
    d8ac:	0000bded 	.word	0x0000bded
    d8b0:	0000d14d 	.word	0x0000d14d
    d8b4:	00000139 	.word	0x00000139
    d8b8:	00000785 	.word	0x00000785
    d8bc:	20000fac 	.word	0x20000fac
    d8c0:	000003d5 	.word	0x000003d5
    d8c4:	00017b05 	.word	0x00017b05
    d8c8:	00002415 	.word	0x00002415
    d8cc:	00000115 	.word	0x00000115
    d8d0:	0000d15d 	.word	0x0000d15d
    d8d4:	0001de94 	.word	0x0001de94
    d8d8:	0001deac 	.word	0x0001deac
    d8dc:	0001debc 	.word	0x0001debc
    d8e0:	0001decc 	.word	0x0001decc
    d8e4:	0001deec 	.word	0x0001deec
    d8e8:	0001df0c 	.word	0x0001df0c

0000d8ec <APP_TaskHandler>:
    }
}

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    d8ec:	b510      	push	{r4, lr}
	Parser_Main();
    d8ee:	4b02      	ldr	r3, [pc, #8]	; (d8f8 <APP_TaskHandler+0xc>)
    d8f0:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
}
    d8f2:	2000      	movs	r0, #0
    d8f4:	bd10      	pop	{r4, pc}
    d8f6:	46c0      	nop			; (mov r8, r8)
    d8f8:	00000175 	.word	0x00000175

0000d8fc <common_tc_read_count>:
    d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8fe:	4b0d      	ldr	r3, [pc, #52]	; (d934 <common_tc_read_count+0x38>)
    d900:	4798      	blx	r3
    d902:	4b0d      	ldr	r3, [pc, #52]	; (d938 <common_tc_read_count+0x3c>)
    d904:	781b      	ldrb	r3, [r3, #0]
    d906:	2b00      	cmp	r3, #0
    d908:	d00e      	beq.n	d928 <common_tc_read_count+0x2c>
    d90a:	4b0c      	ldr	r3, [pc, #48]	; (d93c <common_tc_read_count+0x40>)
    d90c:	781d      	ldrb	r5, [r3, #0]
    d90e:	4b0a      	ldr	r3, [pc, #40]	; (d938 <common_tc_read_count+0x3c>)
    d910:	781f      	ldrb	r7, [r3, #0]
    d912:	4c0b      	ldr	r4, [pc, #44]	; (d940 <common_tc_read_count+0x44>)
    d914:	1c29      	adds	r1, r5, #0
    d916:	47a0      	blx	r4
    d918:	1c06      	adds	r6, r0, #0
    d91a:	480a      	ldr	r0, [pc, #40]	; (d944 <common_tc_read_count+0x48>)
    d91c:	1c29      	adds	r1, r5, #0
    d91e:	47a0      	blx	r4
    d920:	4378      	muls	r0, r7
    d922:	1830      	adds	r0, r6, r0
    d924:	b280      	uxth	r0, r0
    d926:	e004      	b.n	d932 <common_tc_read_count+0x36>
    d928:	4b04      	ldr	r3, [pc, #16]	; (d93c <common_tc_read_count+0x40>)
    d92a:	7819      	ldrb	r1, [r3, #0]
    d92c:	4b04      	ldr	r3, [pc, #16]	; (d940 <common_tc_read_count+0x44>)
    d92e:	4798      	blx	r3
    d930:	b280      	uxth	r0, r0
    d932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d934:	0000d3f9 	.word	0x0000d3f9
    d938:	20000f3c 	.word	0x20000f3c
    d93c:	20002878 	.word	0x20002878
    d940:	0001461d 	.word	0x0001461d
    d944:	0000ffff 	.word	0x0000ffff

0000d948 <common_tc_compare_stop>:
    d948:	b508      	push	{r3, lr}
    d94a:	4b05      	ldr	r3, [pc, #20]	; (d960 <common_tc_compare_stop+0x18>)
    d94c:	4798      	blx	r3
    d94e:	4b05      	ldr	r3, [pc, #20]	; (d964 <common_tc_compare_stop+0x1c>)
    d950:	4798      	blx	r3
    d952:	4b05      	ldr	r3, [pc, #20]	; (d968 <common_tc_compare_stop+0x20>)
    d954:	2200      	movs	r2, #0
    d956:	605a      	str	r2, [r3, #4]
    d958:	811a      	strh	r2, [r3, #8]
    d95a:	4b04      	ldr	r3, [pc, #16]	; (d96c <common_tc_compare_stop+0x24>)
    d95c:	4798      	blx	r3
    d95e:	bd08      	pop	{r3, pc}
    d960:	0000d40d 	.word	0x0000d40d
    d964:	0000d4ad 	.word	0x0000d4ad
    d968:	20000f3c 	.word	0x20000f3c
    d96c:	0000d4d1 	.word	0x0000d4d1

0000d970 <common_tc_overflow_stop>:
    d970:	b508      	push	{r3, lr}
    d972:	4b03      	ldr	r3, [pc, #12]	; (d980 <common_tc_overflow_stop+0x10>)
    d974:	4798      	blx	r3
    d976:	2200      	movs	r2, #0
    d978:	4b02      	ldr	r3, [pc, #8]	; (d984 <common_tc_overflow_stop+0x14>)
    d97a:	701a      	strb	r2, [r3, #0]
    d97c:	bd08      	pop	{r3, pc}
    d97e:	46c0      	nop			; (mov r8, r8)
    d980:	0000d461 	.word	0x0000d461
    d984:	20000f3c 	.word	0x20000f3c

0000d988 <common_tc_stop>:
    d988:	b508      	push	{r3, lr}
    d98a:	4b03      	ldr	r3, [pc, #12]	; (d998 <common_tc_stop+0x10>)
    d98c:	4798      	blx	r3
    d98e:	4b03      	ldr	r3, [pc, #12]	; (d99c <common_tc_stop+0x14>)
    d990:	4798      	blx	r3
    d992:	4b03      	ldr	r3, [pc, #12]	; (d9a0 <common_tc_stop+0x18>)
    d994:	4798      	blx	r3
    d996:	bd08      	pop	{r3, pc}
    d998:	0000d949 	.word	0x0000d949
    d99c:	0000d971 	.word	0x0000d971
    d9a0:	0000d475 	.word	0x0000d475

0000d9a4 <common_tc_delay>:
    d9a4:	b510      	push	{r4, lr}
    d9a6:	1c04      	adds	r4, r0, #0
    d9a8:	4b13      	ldr	r3, [pc, #76]	; (d9f8 <common_tc_delay+0x54>)
    d9aa:	4798      	blx	r3
    d9ac:	4b13      	ldr	r3, [pc, #76]	; (d9fc <common_tc_delay+0x58>)
    d9ae:	781a      	ldrb	r2, [r3, #0]
    d9b0:	4362      	muls	r2, r4
    d9b2:	1881      	adds	r1, r0, r2
    d9b4:	4b12      	ldr	r3, [pc, #72]	; (da00 <common_tc_delay+0x5c>)
    d9b6:	6059      	str	r1, [r3, #4]
    d9b8:	6859      	ldr	r1, [r3, #4]
    d9ba:	0c09      	lsrs	r1, r1, #16
    d9bc:	6059      	str	r1, [r3, #4]
    d9be:	685b      	ldr	r3, [r3, #4]
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d007      	beq.n	d9d4 <common_tc_delay+0x30>
    d9c4:	4b0e      	ldr	r3, [pc, #56]	; (da00 <common_tc_delay+0x5c>)
    d9c6:	6859      	ldr	r1, [r3, #4]
    d9c8:	3201      	adds	r2, #1
    d9ca:	1880      	adds	r0, r0, r2
    d9cc:	8118      	strh	r0, [r3, #8]
    d9ce:	4b0d      	ldr	r3, [pc, #52]	; (da04 <common_tc_delay+0x60>)
    d9d0:	4798      	blx	r3
    d9d2:	e004      	b.n	d9de <common_tc_delay+0x3a>
    d9d4:	1882      	adds	r2, r0, r2
    d9d6:	4b0a      	ldr	r3, [pc, #40]	; (da00 <common_tc_delay+0x5c>)
    d9d8:	811a      	strh	r2, [r3, #8]
    d9da:	4b0b      	ldr	r3, [pc, #44]	; (da08 <common_tc_delay+0x64>)
    d9dc:	4798      	blx	r3
    d9de:	4b08      	ldr	r3, [pc, #32]	; (da00 <common_tc_delay+0x5c>)
    d9e0:	891b      	ldrh	r3, [r3, #8]
    d9e2:	2b63      	cmp	r3, #99	; 0x63
    d9e4:	d802      	bhi.n	d9ec <common_tc_delay+0x48>
    d9e6:	3364      	adds	r3, #100	; 0x64
    d9e8:	4a05      	ldr	r2, [pc, #20]	; (da00 <common_tc_delay+0x5c>)
    d9ea:	8113      	strh	r3, [r2, #8]
    d9ec:	4b04      	ldr	r3, [pc, #16]	; (da00 <common_tc_delay+0x5c>)
    d9ee:	8918      	ldrh	r0, [r3, #8]
    d9f0:	4b06      	ldr	r3, [pc, #24]	; (da0c <common_tc_delay+0x68>)
    d9f2:	4798      	blx	r3
    d9f4:	bd10      	pop	{r4, pc}
    d9f6:	46c0      	nop			; (mov r8, r8)
    d9f8:	0000d3f9 	.word	0x0000d3f9
    d9fc:	20002878 	.word	0x20002878
    da00:	20000f3c 	.word	0x20000f3c
    da04:	0000d40d 	.word	0x0000d40d
    da08:	0000d421 	.word	0x0000d421
    da0c:	0000d495 	.word	0x0000d495

0000da10 <common_tc_init>:
    da10:	b508      	push	{r3, lr}
    da12:	2200      	movs	r2, #0
    da14:	4b03      	ldr	r3, [pc, #12]	; (da24 <common_tc_init+0x14>)
    da16:	701a      	strb	r2, [r3, #0]
    da18:	4b03      	ldr	r3, [pc, #12]	; (da28 <common_tc_init+0x18>)
    da1a:	4798      	blx	r3
    da1c:	4b03      	ldr	r3, [pc, #12]	; (da2c <common_tc_init+0x1c>)
    da1e:	7018      	strb	r0, [r3, #0]
    da20:	bd08      	pop	{r3, pc}
    da22:	46c0      	nop			; (mov r8, r8)
    da24:	20000f3c 	.word	0x20000f3c
    da28:	0000d4e9 	.word	0x0000d4e9
    da2c:	20002878 	.word	0x20002878

0000da30 <tmr_ovf_callback>:
    da30:	b508      	push	{r3, lr}
    da32:	4b0e      	ldr	r3, [pc, #56]	; (da6c <tmr_ovf_callback+0x3c>)
    da34:	685b      	ldr	r3, [r3, #4]
    da36:	2b00      	cmp	r3, #0
    da38:	d007      	beq.n	da4a <tmr_ovf_callback+0x1a>
    da3a:	4a0c      	ldr	r2, [pc, #48]	; (da6c <tmr_ovf_callback+0x3c>)
    da3c:	6853      	ldr	r3, [r2, #4]
    da3e:	3b01      	subs	r3, #1
    da40:	6053      	str	r3, [r2, #4]
    da42:	2b00      	cmp	r3, #0
    da44:	d101      	bne.n	da4a <tmr_ovf_callback+0x1a>
    da46:	4b0a      	ldr	r3, [pc, #40]	; (da70 <tmr_ovf_callback+0x40>)
    da48:	4798      	blx	r3
    da4a:	4a08      	ldr	r2, [pc, #32]	; (da6c <tmr_ovf_callback+0x3c>)
    da4c:	7813      	ldrb	r3, [r2, #0]
    da4e:	3301      	adds	r3, #1
    da50:	b2db      	uxtb	r3, r3
    da52:	7013      	strb	r3, [r2, #0]
    da54:	4a07      	ldr	r2, [pc, #28]	; (da74 <tmr_ovf_callback+0x44>)
    da56:	7812      	ldrb	r2, [r2, #0]
    da58:	429a      	cmp	r2, r3
    da5a:	d806      	bhi.n	da6a <tmr_ovf_callback+0x3a>
    da5c:	4b03      	ldr	r3, [pc, #12]	; (da6c <tmr_ovf_callback+0x3c>)
    da5e:	2200      	movs	r2, #0
    da60:	701a      	strb	r2, [r3, #0]
    da62:	68db      	ldr	r3, [r3, #12]
    da64:	2b00      	cmp	r3, #0
    da66:	d000      	beq.n	da6a <tmr_ovf_callback+0x3a>
    da68:	4798      	blx	r3
    da6a:	bd08      	pop	{r3, pc}
    da6c:	20000f3c 	.word	0x20000f3c
    da70:	0000d421 	.word	0x0000d421
    da74:	20002878 	.word	0x20002878

0000da78 <tmr_cca_callback>:
    da78:	b508      	push	{r3, lr}
    da7a:	4b04      	ldr	r3, [pc, #16]	; (da8c <tmr_cca_callback+0x14>)
    da7c:	4798      	blx	r3
    da7e:	4b04      	ldr	r3, [pc, #16]	; (da90 <tmr_cca_callback+0x18>)
    da80:	691b      	ldr	r3, [r3, #16]
    da82:	2b00      	cmp	r3, #0
    da84:	d000      	beq.n	da88 <tmr_cca_callback+0x10>
    da86:	4798      	blx	r3
    da88:	bd08      	pop	{r3, pc}
    da8a:	46c0      	nop			; (mov r8, r8)
    da8c:	0000d40d 	.word	0x0000d40d
    da90:	20000f3c 	.word	0x20000f3c

0000da94 <set_common_tc_overflow_callback>:
    da94:	4b01      	ldr	r3, [pc, #4]	; (da9c <set_common_tc_overflow_callback+0x8>)
    da96:	60d8      	str	r0, [r3, #12]
    da98:	4770      	bx	lr
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	20000f3c 	.word	0x20000f3c

0000daa0 <set_common_tc_expiry_callback>:
    daa0:	4b01      	ldr	r3, [pc, #4]	; (daa8 <set_common_tc_expiry_callback+0x8>)
    daa2:	6118      	str	r0, [r3, #16]
    daa4:	4770      	bx	lr
    daa6:	46c0      	nop			; (mov r8, r8)
    daa8:	20000f3c 	.word	0x20000f3c

0000daac <MacClearCommands>:
    daac:	490e      	ldr	r1, [pc, #56]	; (dae8 <MacClearCommands+0x3c>)
    daae:	b570      	push	{r4, r5, r6, lr}
    dab0:	000b      	movs	r3, r1
    dab2:	33e0      	adds	r3, #224	; 0xe0
    dab4:	7818      	ldrb	r0, [r3, #0]
    dab6:	2303      	movs	r3, #3
    dab8:	25a4      	movs	r5, #164	; 0xa4
    daba:	4343      	muls	r3, r0
    dabc:	2401      	movs	r4, #1
    dabe:	20ff      	movs	r0, #255	; 0xff
    dac0:	3399      	adds	r3, #153	; 0x99
    dac2:	4a0a      	ldr	r2, [pc, #40]	; (daec <MacClearCommands+0x40>)
    dac4:	185b      	adds	r3, r3, r1
    dac6:	00ed      	lsls	r5, r5, #3
    dac8:	429a      	cmp	r2, r3
    daca:	d100      	bne.n	dace <MacClearCommands+0x22>
    dacc:	bd70      	pop	{r4, r5, r6, pc}
    dace:	7811      	ldrb	r1, [r2, #0]
    dad0:	29ff      	cmp	r1, #255	; 0xff
    dad2:	d006      	beq.n	dae2 <MacClearCommands+0x36>
    dad4:	290a      	cmp	r1, #10
    dad6:	d803      	bhi.n	dae0 <MacClearCommands+0x34>
    dad8:	0026      	movs	r6, r4
    dada:	408e      	lsls	r6, r1
    dadc:	422e      	tst	r6, r5
    dade:	d100      	bne.n	dae2 <MacClearCommands+0x36>
    dae0:	7010      	strb	r0, [r2, #0]
    dae2:	3203      	adds	r2, #3
    dae4:	e7f0      	b.n	dac8 <MacClearCommands+0x1c>
    dae6:	46c0      	nop			; (mov r8, r8)
    dae8:	200029a4 	.word	0x200029a4
    daec:	20002a3d 	.word	0x20002a3d

0000daf0 <CountfOptsLength>:
    daf0:	2200      	movs	r2, #0
    daf2:	490d      	ldr	r1, [pc, #52]	; (db28 <CountfOptsLength+0x38>)
    daf4:	b570      	push	{r4, r5, r6, lr}
    daf6:	000b      	movs	r3, r1
    daf8:	0010      	movs	r0, r2
    dafa:	2503      	movs	r5, #3
    dafc:	33e0      	adds	r3, #224	; 0xe0
    dafe:	781c      	ldrb	r4, [r3, #0]
    db00:	4e0a      	ldr	r6, [pc, #40]	; (db2c <CountfOptsLength+0x3c>)
    db02:	b2d3      	uxtb	r3, r2
    db04:	429c      	cmp	r4, r3
    db06:	d800      	bhi.n	db0a <CountfOptsLength+0x1a>
    db08:	bd70      	pop	{r4, r5, r6, pc}
    db0a:	002b      	movs	r3, r5
    db0c:	4353      	muls	r3, r2
    db0e:	3399      	adds	r3, #153	; 0x99
    db10:	5ccb      	ldrb	r3, [r1, r3]
    db12:	2bff      	cmp	r3, #255	; 0xff
    db14:	d006      	beq.n	db24 <CountfOptsLength+0x34>
    db16:	18f3      	adds	r3, r6, r3
    db18:	3b02      	subs	r3, #2
    db1a:	781b      	ldrb	r3, [r3, #0]
    db1c:	18c3      	adds	r3, r0, r3
    db1e:	2b0f      	cmp	r3, #15
    db20:	dcf2      	bgt.n	db08 <CountfOptsLength+0x18>
    db22:	b2d8      	uxtb	r0, r3
    db24:	3201      	adds	r2, #1
    db26:	e7ec      	b.n	db02 <CountfOptsLength+0x12>
    db28:	200029a4 	.word	0x200029a4
    db2c:	0001df57 	.word	0x0001df57

0000db30 <StopAllSoftwareTimers>:
    db30:	b570      	push	{r4, r5, r6, lr}
    db32:	4d17      	ldr	r5, [pc, #92]	; (db90 <StopAllSoftwareTimers+0x60>)
    db34:	4c17      	ldr	r4, [pc, #92]	; (db94 <StopAllSoftwareTimers+0x64>)
    db36:	002b      	movs	r3, r5
    db38:	33eb      	adds	r3, #235	; 0xeb
    db3a:	7818      	ldrb	r0, [r3, #0]
    db3c:	47a0      	blx	r4
    db3e:	002b      	movs	r3, r5
    db40:	33ec      	adds	r3, #236	; 0xec
    db42:	7818      	ldrb	r0, [r3, #0]
    db44:	47a0      	blx	r4
    db46:	002b      	movs	r3, r5
    db48:	33f0      	adds	r3, #240	; 0xf0
    db4a:	7818      	ldrb	r0, [r3, #0]
    db4c:	47a0      	blx	r4
    db4e:	002b      	movs	r3, r5
    db50:	33ed      	adds	r3, #237	; 0xed
    db52:	7818      	ldrb	r0, [r3, #0]
    db54:	47a0      	blx	r4
    db56:	002b      	movs	r3, r5
    db58:	33ee      	adds	r3, #238	; 0xee
    db5a:	7818      	ldrb	r0, [r3, #0]
    db5c:	47a0      	blx	r4
    db5e:	002b      	movs	r3, r5
    db60:	33f1      	adds	r3, #241	; 0xf1
    db62:	7818      	ldrb	r0, [r3, #0]
    db64:	47a0      	blx	r4
    db66:	002b      	movs	r3, r5
    db68:	33ef      	adds	r3, #239	; 0xef
    db6a:	7818      	ldrb	r0, [r3, #0]
    db6c:	47a0      	blx	r4
    db6e:	002b      	movs	r3, r5
    db70:	33f2      	adds	r3, #242	; 0xf2
    db72:	7818      	ldrb	r0, [r3, #0]
    db74:	47a0      	blx	r4
    db76:	002b      	movs	r3, r5
    db78:	33fb      	adds	r3, #251	; 0xfb
    db7a:	7818      	ldrb	r0, [r3, #0]
    db7c:	47a0      	blx	r4
    db7e:	002b      	movs	r3, r5
    db80:	33fc      	adds	r3, #252	; 0xfc
    db82:	7818      	ldrb	r0, [r3, #0]
    db84:	47a0      	blx	r4
    db86:	2394      	movs	r3, #148	; 0x94
    db88:	005b      	lsls	r3, r3, #1
    db8a:	5ce8      	ldrb	r0, [r5, r3]
    db8c:	47a0      	blx	r4
    db8e:	bd70      	pop	{r4, r5, r6, pc}
    db90:	200029a4 	.word	0x200029a4
    db94:	0000ce4d 	.word	0x0000ce4d

0000db98 <LorawanGetMaxPayloadSize>:
    db98:	b513      	push	{r0, r1, r4, lr}
    db9a:	466b      	mov	r3, sp
    db9c:	1ddc      	adds	r4, r3, #7
    db9e:	2300      	movs	r3, #0
    dba0:	0022      	movs	r2, r4
    dba2:	7023      	strb	r3, [r4, #0]
    dba4:	4903      	ldr	r1, [pc, #12]	; (dbb4 <LorawanGetMaxPayloadSize+0x1c>)
    dba6:	4b04      	ldr	r3, [pc, #16]	; (dbb8 <LorawanGetMaxPayloadSize+0x20>)
    dba8:	2005      	movs	r0, #5
    dbaa:	4798      	blx	r3
    dbac:	7820      	ldrb	r0, [r4, #0]
    dbae:	3808      	subs	r0, #8
    dbb0:	b2c0      	uxtb	r0, r0
    dbb2:	bd16      	pop	{r1, r2, r4, pc}
    dbb4:	20002a8b 	.word	0x20002a8b
    dbb8:	0000b6c5 	.word	0x0000b6c5

0000dbbc <UpdateReceiveDelays>:
    dbbc:	23fa      	movs	r3, #250	; 0xfa
    dbbe:	b570      	push	{r4, r5, r6, lr}
    dbc0:	009b      	lsls	r3, r3, #2
    dbc2:	4c0b      	ldr	r4, [pc, #44]	; (dbf0 <UpdateReceiveDelays+0x34>)
    dbc4:	2800      	cmp	r0, #0
    dbc6:	d000      	beq.n	dbca <UpdateReceiveDelays+0xe>
    dbc8:	4343      	muls	r3, r0
    dbca:	0022      	movs	r2, r4
    dbcc:	4d09      	ldr	r5, [pc, #36]	; (dbf4 <UpdateReceiveDelays+0x38>)
    dbce:	32d0      	adds	r2, #208	; 0xd0
    dbd0:	210c      	movs	r1, #12
    dbd2:	2000      	movs	r0, #0
    dbd4:	8013      	strh	r3, [r2, #0]
    dbd6:	47a8      	blx	r5
    dbd8:	0023      	movs	r3, r4
    dbda:	22fa      	movs	r2, #250	; 0xfa
    dbdc:	33d0      	adds	r3, #208	; 0xd0
    dbde:	881b      	ldrh	r3, [r3, #0]
    dbe0:	0092      	lsls	r2, r2, #2
    dbe2:	189b      	adds	r3, r3, r2
    dbe4:	34d2      	adds	r4, #210	; 0xd2
    dbe6:	210d      	movs	r1, #13
    dbe8:	2000      	movs	r0, #0
    dbea:	8023      	strh	r3, [r4, #0]
    dbec:	47a8      	blx	r5
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    dbf0:	200029a4 	.word	0x200029a4
    dbf4:	0000be05 	.word	0x0000be05

0000dbf8 <IncludeMacCommandsResponse>:
    dbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbfa:	0005      	movs	r5, r0
    dbfc:	2600      	movs	r6, #0
    dbfe:	b087      	sub	sp, #28
    dc00:	880c      	ldrh	r4, [r1, #0]
    dc02:	9101      	str	r1, [sp, #4]
    dc04:	9203      	str	r2, [sp, #12]
    dc06:	4f77      	ldr	r7, [pc, #476]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dc08:	003b      	movs	r3, r7
    dc0a:	33e0      	adds	r3, #224	; 0xe0
    dc0c:	781b      	ldrb	r3, [r3, #0]
    dc0e:	42b3      	cmp	r3, r6
    dc10:	d913      	bls.n	dc3a <IncludeMacCommandsResponse+0x42>
    dc12:	9b03      	ldr	r3, [sp, #12]
    dc14:	2b00      	cmp	r3, #0
    dc16:	d019      	beq.n	dc4c <IncludeMacCommandsResponse+0x54>
    dc18:	2303      	movs	r3, #3
    dc1a:	4373      	muls	r3, r6
    dc1c:	18fb      	adds	r3, r7, r3
    dc1e:	3399      	adds	r3, #153	; 0x99
    dc20:	7819      	ldrb	r1, [r3, #0]
    dc22:	29ff      	cmp	r1, #255	; 0xff
    dc24:	d012      	beq.n	dc4c <IncludeMacCommandsResponse+0x54>
    dc26:	9b01      	ldr	r3, [sp, #4]
    dc28:	881a      	ldrh	r2, [r3, #0]
    dc2a:	4b6f      	ldr	r3, [pc, #444]	; (dde8 <IncludeMacCommandsResponse+0x1f0>)
    dc2c:	1aa2      	subs	r2, r4, r2
    dc2e:	185b      	adds	r3, r3, r1
    dc30:	3b02      	subs	r3, #2
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	18d3      	adds	r3, r2, r3
    dc36:	2b0f      	cmp	r3, #15
    dc38:	dd08      	ble.n	dc4c <IncludeMacCommandsResponse+0x54>
    dc3a:	2207      	movs	r2, #7
    dc3c:	2100      	movs	r1, #0
    dc3e:	4b6b      	ldr	r3, [pc, #428]	; (ddec <IncludeMacCommandsResponse+0x1f4>)
    dc40:	486b      	ldr	r0, [pc, #428]	; (ddf0 <IncludeMacCommandsResponse+0x1f8>)
    dc42:	4798      	blx	r3
    dc44:	9b01      	ldr	r3, [sp, #4]
    dc46:	801c      	strh	r4, [r3, #0]
    dc48:	b007      	add	sp, #28
    dc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc4c:	2303      	movs	r3, #3
    dc4e:	4373      	muls	r3, r6
    dc50:	18fb      	adds	r3, r7, r3
    dc52:	3399      	adds	r3, #153	; 0x99
    dc54:	781b      	ldrb	r3, [r3, #0]
    dc56:	1e98      	subs	r0, r3, #2
    dc58:	280b      	cmp	r0, #11
    dc5a:	d862      	bhi.n	dd22 <IncludeMacCommandsResponse+0x12a>
    dc5c:	f006 fc36 	bl	144cc <__gnu_thumb1_case_uqi>
    dc60:	27a20698 	.word	0x27a20698
    dc64:	7da26748 	.word	0x7da26748
    dc68:	a6616182 	.word	0xa6616182
    dc6c:	2303      	movs	r3, #3
    dc6e:	2200      	movs	r2, #0
    dc70:	552b      	strb	r3, [r5, r4]
    dc72:	1c63      	adds	r3, r4, #1
    dc74:	b29b      	uxth	r3, r3
    dc76:	18eb      	adds	r3, r5, r3
    dc78:	4f5a      	ldr	r7, [pc, #360]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dc7a:	485e      	ldr	r0, [pc, #376]	; (ddf4 <IncludeMacCommandsResponse+0x1fc>)
    dc7c:	701a      	strb	r2, [r3, #0]
    dc7e:	5c39      	ldrb	r1, [r7, r0]
    dc80:	3201      	adds	r2, #1
    dc82:	4011      	ands	r1, r2
    dc84:	466a      	mov	r2, sp
    dc86:	9102      	str	r1, [sp, #8]
    dc88:	7a12      	ldrb	r2, [r2, #8]
    dc8a:	701a      	strb	r2, [r3, #0]
    dc8c:	5c3a      	ldrb	r2, [r7, r0]
    dc8e:	4694      	mov	ip, r2
    dc90:	2202      	movs	r2, #2
    dc92:	4661      	mov	r1, ip
    dc94:	4211      	tst	r1, r2
    dc96:	d002      	beq.n	dc9e <IncludeMacCommandsResponse+0xa6>
    dc98:	9902      	ldr	r1, [sp, #8]
    dc9a:	430a      	orrs	r2, r1
    dc9c:	701a      	strb	r2, [r3, #0]
    dc9e:	2204      	movs	r2, #4
    dca0:	5c39      	ldrb	r1, [r7, r0]
    dca2:	4211      	tst	r1, r2
    dca4:	d071      	beq.n	dd8a <IncludeMacCommandsResponse+0x192>
    dca6:	7819      	ldrb	r1, [r3, #0]
    dca8:	430a      	orrs	r2, r1
    dcaa:	701a      	strb	r2, [r3, #0]
    dcac:	e06d      	b.n	dd8a <IncludeMacCommandsResponse+0x192>
    dcae:	2305      	movs	r3, #5
    dcb0:	2103      	movs	r1, #3
    dcb2:	2200      	movs	r2, #0
    dcb4:	552b      	strb	r3, [r5, r4]
    dcb6:	1c63      	adds	r3, r4, #1
    dcb8:	b29b      	uxth	r3, r3
    dcba:	4371      	muls	r1, r6
    dcbc:	18eb      	adds	r3, r5, r3
    dcbe:	701a      	strb	r2, [r3, #0]
    dcc0:	4a48      	ldr	r2, [pc, #288]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dcc2:	1851      	adds	r1, r2, r1
    dcc4:	3198      	adds	r1, #152	; 0x98
    dcc6:	7888      	ldrb	r0, [r1, #2]
    dcc8:	0700      	lsls	r0, r0, #28
    dcca:	0fc0      	lsrs	r0, r0, #31
    dccc:	7018      	strb	r0, [r3, #0]
    dcce:	7889      	ldrb	r1, [r1, #2]
    dcd0:	b2c7      	uxtb	r7, r0
    dcd2:	06c9      	lsls	r1, r1, #27
    dcd4:	d502      	bpl.n	dcdc <IncludeMacCommandsResponse+0xe4>
    dcd6:	2102      	movs	r1, #2
    dcd8:	4339      	orrs	r1, r7
    dcda:	7019      	strb	r1, [r3, #0]
    dcdc:	2103      	movs	r1, #3
    dcde:	4371      	muls	r1, r6
    dce0:	1852      	adds	r2, r2, r1
    dce2:	3298      	adds	r2, #152	; 0x98
    dce4:	7892      	ldrb	r2, [r2, #2]
    dce6:	0692      	lsls	r2, r2, #26
    dce8:	d54f      	bpl.n	dd8a <IncludeMacCommandsResponse+0x192>
    dcea:	7819      	ldrb	r1, [r3, #0]
    dcec:	2204      	movs	r2, #4
    dcee:	e7db      	b.n	dca8 <IncludeMacCommandsResponse+0xb0>
    dcf0:	a904      	add	r1, sp, #16
    dcf2:	4b41      	ldr	r3, [pc, #260]	; (ddf8 <IncludeMacCommandsResponse+0x200>)
    dcf4:	200e      	movs	r0, #14
    dcf6:	4798      	blx	r3
    dcf8:	2306      	movs	r3, #6
    dcfa:	4a3a      	ldr	r2, [pc, #232]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dcfc:	552b      	strb	r3, [r5, r4]
    dcfe:	32e8      	adds	r2, #232	; 0xe8
    dd00:	7811      	ldrb	r1, [r2, #0]
    dd02:	1c62      	adds	r2, r4, #1
    dd04:	b292      	uxth	r2, r2
    dd06:	54a9      	strb	r1, [r5, r2]
    dd08:	aa04      	add	r2, sp, #16
    dd0a:	7812      	ldrb	r2, [r2, #0]
    dd0c:	1ca3      	adds	r3, r4, #2
    dd0e:	0011      	movs	r1, r2
    dd10:	3120      	adds	r1, #32
    dd12:	3403      	adds	r4, #3
    dd14:	b2c9      	uxtb	r1, r1
    dd16:	b29b      	uxth	r3, r3
    dd18:	b2a4      	uxth	r4, r4
    dd1a:	293f      	cmp	r1, #63	; 0x3f
    dd1c:	d904      	bls.n	dd28 <IncludeMacCommandsResponse+0x130>
    dd1e:	2220      	movs	r2, #32
    dd20:	54ea      	strb	r2, [r5, r3]
    dd22:	3601      	adds	r6, #1
    dd24:	b2f6      	uxtb	r6, r6
    dd26:	e76e      	b.n	dc06 <IncludeMacCommandsResponse+0xe>
    dd28:	213f      	movs	r1, #63	; 0x3f
    dd2a:	400a      	ands	r2, r1
    dd2c:	e7f8      	b.n	dd20 <IncludeMacCommandsResponse+0x128>
    dd2e:	2307      	movs	r3, #7
    dd30:	2103      	movs	r1, #3
    dd32:	2200      	movs	r2, #0
    dd34:	552b      	strb	r3, [r5, r4]
    dd36:	1c63      	adds	r3, r4, #1
    dd38:	4371      	muls	r1, r6
    dd3a:	b29b      	uxth	r3, r3
    dd3c:	18eb      	adds	r3, r5, r3
    dd3e:	701a      	strb	r2, [r3, #0]
    dd40:	4a28      	ldr	r2, [pc, #160]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dd42:	1852      	adds	r2, r2, r1
    dd44:	3298      	adds	r2, #152	; 0x98
    dd46:	7891      	ldrb	r1, [r2, #2]
    dd48:	09c9      	lsrs	r1, r1, #7
    dd4a:	7019      	strb	r1, [r3, #0]
    dd4c:	7892      	ldrb	r2, [r2, #2]
    dd4e:	b2c8      	uxtb	r0, r1
    dd50:	0652      	lsls	r2, r2, #25
    dd52:	d51a      	bpl.n	dd8a <IncludeMacCommandsResponse+0x192>
    dd54:	2202      	movs	r2, #2
    dd56:	4302      	orrs	r2, r0
    dd58:	e7a7      	b.n	dcaa <IncludeMacCommandsResponse+0xb2>
    dd5a:	2209      	movs	r2, #9
    dd5c:	1c63      	adds	r3, r4, #1
    dd5e:	552a      	strb	r2, [r5, r4]
    dd60:	b29c      	uxth	r4, r3
    dd62:	e7de      	b.n	dd22 <IncludeMacCommandsResponse+0x12a>
    dd64:	230a      	movs	r3, #10
    dd66:	2103      	movs	r1, #3
    dd68:	2200      	movs	r2, #0
    dd6a:	552b      	strb	r3, [r5, r4]
    dd6c:	1c63      	adds	r3, r4, #1
    dd6e:	4371      	muls	r1, r6
    dd70:	b29b      	uxth	r3, r3
    dd72:	18eb      	adds	r3, r5, r3
    dd74:	701a      	strb	r2, [r3, #0]
    dd76:	4a1b      	ldr	r2, [pc, #108]	; (dde4 <IncludeMacCommandsResponse+0x1ec>)
    dd78:	1852      	adds	r2, r2, r1
    dd7a:	3298      	adds	r2, #152	; 0x98
    dd7c:	7891      	ldrb	r1, [r2, #2]
    dd7e:	09c9      	lsrs	r1, r1, #7
    dd80:	7019      	strb	r1, [r3, #0]
    dd82:	78d2      	ldrb	r2, [r2, #3]
    dd84:	b2c8      	uxtb	r0, r1
    dd86:	07d2      	lsls	r2, r2, #31
    dd88:	d4e4      	bmi.n	dd54 <IncludeMacCommandsResponse+0x15c>
    dd8a:	3402      	adds	r4, #2
    dd8c:	b2a4      	uxth	r4, r4
    dd8e:	e7c8      	b.n	dd22 <IncludeMacCommandsResponse+0x12a>
    dd90:	003b      	movs	r3, r7
    dd92:	22ff      	movs	r2, #255	; 0xff
    dd94:	33e5      	adds	r3, #229	; 0xe5
    dd96:	701a      	strb	r2, [r3, #0]
    dd98:	2300      	movs	r3, #0
    dd9a:	37e6      	adds	r7, #230	; 0xe6
    dd9c:	703b      	strb	r3, [r7, #0]
    dd9e:	3afd      	subs	r2, #253	; 0xfd
    dda0:	1c63      	adds	r3, r4, #1
    dda2:	e7dc      	b.n	dd5e <IncludeMacCommandsResponse+0x166>
    dda4:	1c62      	adds	r2, r4, #1
    dda6:	552b      	strb	r3, [r5, r4]
    dda8:	b294      	uxth	r4, r2
    ddaa:	e7ba      	b.n	dd22 <IncludeMacCommandsResponse+0x12a>
    ddac:	2201      	movs	r2, #1
    ddae:	4252      	negs	r2, r2
    ddb0:	17d3      	asrs	r3, r2, #31
    ddb2:	9204      	str	r2, [sp, #16]
    ddb4:	9305      	str	r3, [sp, #20]
    ddb6:	4b11      	ldr	r3, [pc, #68]	; (ddfc <IncludeMacCommandsResponse+0x204>)
    ddb8:	a904      	add	r1, sp, #16
    ddba:	5cf8      	ldrb	r0, [r7, r3]
    ddbc:	4b10      	ldr	r3, [pc, #64]	; (de00 <IncludeMacCommandsResponse+0x208>)
    ddbe:	4798      	blx	r3
    ddc0:	2301      	movs	r3, #1
    ddc2:	228d      	movs	r2, #141	; 0x8d
    ddc4:	425b      	negs	r3, r3
    ddc6:	0092      	lsls	r2, r2, #2
    ddc8:	50bb      	str	r3, [r7, r2]
    ddca:	3204      	adds	r2, #4
    ddcc:	54bb      	strb	r3, [r7, r2]
    ddce:	238c      	movs	r3, #140	; 0x8c
    ddd0:	2201      	movs	r2, #1
    ddd2:	009b      	lsls	r3, r3, #2
    ddd4:	54fa      	strb	r2, [r7, r3]
    ddd6:	2303      	movs	r3, #3
    ddd8:	4373      	muls	r3, r6
    ddda:	18ff      	adds	r7, r7, r3
    dddc:	3799      	adds	r7, #153	; 0x99
    ddde:	18a2      	adds	r2, r4, r2
    dde0:	783b      	ldrb	r3, [r7, #0]
    dde2:	e7e0      	b.n	dda6 <IncludeMacCommandsResponse+0x1ae>
    dde4:	200029a4 	.word	0x200029a4
    dde8:	0001df57 	.word	0x0001df57
    ddec:	00017715 	.word	0x00017715
    ddf0:	20002bc7 	.word	0x20002bc7
    ddf4:	00000223 	.word	0x00000223
    ddf8:	00012a41 	.word	0x00012a41
    ddfc:	00000231 	.word	0x00000231
    de00:	0000d139 	.word	0x0000d139

0000de04 <UpdateJoinSuccessState>:
    de04:	b5f0      	push	{r4, r5, r6, r7, lr}
    de06:	4c32      	ldr	r4, [pc, #200]	; (ded0 <UpdateJoinSuccessState+0xcc>)
    de08:	2104      	movs	r1, #4
    de0a:	0022      	movs	r2, r4
    de0c:	3294      	adds	r2, #148	; 0x94
    de0e:	7813      	ldrb	r3, [r2, #0]
    de10:	2001      	movs	r0, #1
    de12:	438b      	bics	r3, r1
    de14:	7013      	strb	r3, [r2, #0]
    de16:	0022      	movs	r2, r4
    de18:	3284      	adds	r2, #132	; 0x84
    de1a:	7813      	ldrb	r3, [r2, #0]
    de1c:	b087      	sub	sp, #28
    de1e:	4303      	orrs	r3, r0
    de20:	3107      	adds	r1, #7
    de22:	4f2c      	ldr	r7, [pc, #176]	; (ded4 <UpdateJoinSuccessState+0xd0>)
    de24:	7013      	strb	r3, [r2, #0]
    de26:	2500      	movs	r5, #0
    de28:	47b8      	blx	r7
    de2a:	0023      	movs	r3, r4
    de2c:	2115      	movs	r1, #21
    de2e:	3388      	adds	r3, #136	; 0x88
    de30:	0028      	movs	r0, r5
    de32:	601d      	str	r5, [r3, #0]
    de34:	47b8      	blx	r7
    de36:	0023      	movs	r3, r4
    de38:	2020      	movs	r0, #32
    de3a:	33ff      	adds	r3, #255	; 0xff
    de3c:	7f5b      	ldrb	r3, [r3, #29]
    de3e:	4e26      	ldr	r6, [pc, #152]	; (ded8 <UpdateJoinSuccessState+0xd4>)
    de40:	4203      	tst	r3, r0
    de42:	d00c      	beq.n	de5e <UpdateJoinSuccessState+0x5a>
    de44:	0023      	movs	r3, r4
    de46:	a904      	add	r1, sp, #16
    de48:	3380      	adds	r3, #128	; 0x80
    de4a:	710d      	strb	r5, [r1, #4]
    de4c:	701d      	strb	r5, [r3, #0]
    de4e:	6765      	str	r5, [r4, #116]	; 0x74
    de50:	67a5      	str	r5, [r4, #120]	; 0x78
    de52:	47b0      	blx	r6
    de54:	210f      	movs	r1, #15
    de56:	2021      	movs	r0, #33	; 0x21
    de58:	4469      	add	r1, sp
    de5a:	700d      	strb	r5, [r1, #0]
    de5c:	47b0      	blx	r6
    de5e:	0023      	movs	r3, r4
    de60:	2500      	movs	r5, #0
    de62:	338c      	adds	r3, #140	; 0x8c
    de64:	210a      	movs	r1, #10
    de66:	2001      	movs	r0, #1
    de68:	601d      	str	r5, [r3, #0]
    de6a:	47b8      	blx	r7
    de6c:	0023      	movs	r3, r4
    de6e:	33ca      	adds	r3, #202	; 0xca
    de70:	801d      	strh	r5, [r3, #0]
    de72:	0022      	movs	r2, r4
    de74:	0023      	movs	r3, r4
    de76:	210e      	movs	r1, #14
    de78:	3284      	adds	r2, #132	; 0x84
    de7a:	33f6      	adds	r3, #246	; 0xf6
    de7c:	701d      	strb	r5, [r3, #0]
    de7e:	7813      	ldrb	r3, [r2, #0]
    de80:	2039      	movs	r0, #57	; 0x39
    de82:	438b      	bics	r3, r1
    de84:	0029      	movs	r1, r5
    de86:	7013      	strb	r3, [r2, #0]
    de88:	47b0      	blx	r6
    de8a:	0023      	movs	r3, r4
    de8c:	3385      	adds	r3, #133	; 0x85
    de8e:	781b      	ldrb	r3, [r3, #0]
    de90:	079b      	lsls	r3, r3, #30
    de92:	d50c      	bpl.n	deae <UpdateJoinSuccessState+0xaa>
    de94:	0023      	movs	r3, r4
    de96:	21fa      	movs	r1, #250	; 0xfa
    de98:	3390      	adds	r3, #144	; 0x90
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	34f0      	adds	r4, #240	; 0xf0
    de9e:	0089      	lsls	r1, r1, #2
    dea0:	7820      	ldrb	r0, [r4, #0]
    dea2:	4359      	muls	r1, r3
    dea4:	9500      	str	r5, [sp, #0]
    dea6:	4b0d      	ldr	r3, [pc, #52]	; (dedc <UpdateJoinSuccessState+0xd8>)
    dea8:	002a      	movs	r2, r5
    deaa:	4c0d      	ldr	r4, [pc, #52]	; (dee0 <UpdateJoinSuccessState+0xdc>)
    deac:	47a0      	blx	r4
    deae:	490d      	ldr	r1, [pc, #52]	; (dee4 <UpdateJoinSuccessState+0xe0>)
    deb0:	794a      	ldrb	r2, [r1, #5]
    deb2:	790b      	ldrb	r3, [r1, #4]
    deb4:	0212      	lsls	r2, r2, #8
    deb6:	431a      	orrs	r2, r3
    deb8:	798b      	ldrb	r3, [r1, #6]
    deba:	041b      	lsls	r3, r3, #16
    debc:	431a      	orrs	r2, r3
    debe:	79cb      	ldrb	r3, [r1, #7]
    dec0:	061b      	lsls	r3, r3, #24
    dec2:	4313      	orrs	r3, r2
    dec4:	d001      	beq.n	deca <UpdateJoinSuccessState+0xc6>
    dec6:	2008      	movs	r0, #8
    dec8:	4798      	blx	r3
    deca:	b007      	add	sp, #28
    decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dece:	46c0      	nop			; (mov r8, r8)
    ded0:	200029a4 	.word	0x200029a4
    ded4:	0000be05 	.word	0x0000be05
    ded8:	0000b7ed 	.word	0x0000b7ed
    dedc:	0000e025 	.word	0x0000e025
    dee0:	0000cb35 	.word	0x0000cb35
    dee4:	20002d00 	.word	0x20002d00

0000dee8 <PrepareSessionKeys>:
    dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    deea:	0004      	movs	r4, r0
    deec:	2603      	movs	r6, #3
    deee:	000d      	movs	r5, r1
    def0:	0017      	movs	r7, r2
    def2:	4b09      	ldr	r3, [pc, #36]	; (df18 <PrepareSessionKeys+0x30>)
    def4:	2210      	movs	r2, #16
    def6:	2100      	movs	r1, #0
    def8:	4798      	blx	r3
    defa:	0032      	movs	r2, r6
    defc:	0029      	movs	r1, r5
    defe:	1c60      	adds	r0, r4, #1
    df00:	4d06      	ldr	r5, [pc, #24]	; (df1c <PrepareSessionKeys+0x34>)
    df02:	47a8      	blx	r5
    df04:	0032      	movs	r2, r6
    df06:	0039      	movs	r1, r7
    df08:	1d20      	adds	r0, r4, #4
    df0a:	47a8      	blx	r5
    df0c:	1de0      	adds	r0, r4, #7
    df0e:	2202      	movs	r2, #2
    df10:	4903      	ldr	r1, [pc, #12]	; (df20 <PrepareSessionKeys+0x38>)
    df12:	47a8      	blx	r5
    df14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df16:	46c0      	nop			; (mov r8, r8)
    df18:	00017715 	.word	0x00017715
    df1c:	00017691 	.word	0x00017691
    df20:	20002a70 	.word	0x20002a70

0000df24 <AssembleEncryptionBlock>:
    df24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df26:	001e      	movs	r6, r3
    df28:	4c0b      	ldr	r4, [pc, #44]	; (df58 <AssembleEncryptionBlock+0x34>)
    df2a:	0017      	movs	r7, r2
    df2c:	4b0b      	ldr	r3, [pc, #44]	; (df5c <AssembleEncryptionBlock+0x38>)
    df2e:	0005      	movs	r5, r0
    df30:	9101      	str	r1, [sp, #4]
    df32:	2210      	movs	r2, #16
    df34:	2100      	movs	r1, #0
    df36:	0020      	movs	r0, r4
    df38:	4798      	blx	r3
    df3a:	7026      	strb	r6, [r4, #0]
    df3c:	2604      	movs	r6, #4
    df3e:	7165      	strb	r5, [r4, #5]
    df40:	0032      	movs	r2, r6
    df42:	4d07      	ldr	r5, [pc, #28]	; (df60 <AssembleEncryptionBlock+0x3c>)
    df44:	a908      	add	r1, sp, #32
    df46:	1da0      	adds	r0, r4, #6
    df48:	47a8      	blx	r5
    df4a:	0020      	movs	r0, r4
    df4c:	0032      	movs	r2, r6
    df4e:	a901      	add	r1, sp, #4
    df50:	300a      	adds	r0, #10
    df52:	47a8      	blx	r5
    df54:	73e7      	strb	r7, [r4, #15]
    df56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    df58:	20000f50 	.word	0x20000f50
    df5c:	00017715 	.word	0x00017715
    df60:	00017691 	.word	0x00017691

0000df64 <ConfigureRadio>:
    df64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    df66:	0001      	movs	r1, r0
    df68:	0005      	movs	r5, r0
    df6a:	4c11      	ldr	r4, [pc, #68]	; (dfb0 <ConfigureRadio+0x4c>)
    df6c:	3109      	adds	r1, #9
    df6e:	2009      	movs	r0, #9
    df70:	47a0      	blx	r4
    df72:	0029      	movs	r1, r5
    df74:	2001      	movs	r0, #1
    df76:	47a0      	blx	r4
    df78:	1d29      	adds	r1, r5, #4
    df7a:	200a      	movs	r0, #10
    df7c:	47a0      	blx	r4
    df7e:	7a6b      	ldrb	r3, [r5, #9]
    df80:	2b01      	cmp	r3, #1
    df82:	d10b      	bne.n	df9c <ConfigureRadio+0x38>
    df84:	0029      	movs	r1, r5
    df86:	2016      	movs	r0, #22
    df88:	310b      	adds	r1, #11
    df8a:	47a0      	blx	r4
    df8c:	0029      	movs	r1, r5
    df8e:	2007      	movs	r0, #7
    df90:	310a      	adds	r1, #10
    df92:	47a0      	blx	r4
    df94:	2000      	movs	r0, #0
    df96:	4907      	ldr	r1, [pc, #28]	; (dfb4 <ConfigureRadio+0x50>)
    df98:	47a0      	blx	r4
    df9a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    df9c:	466b      	mov	r3, sp
    df9e:	1dd9      	adds	r1, r3, #7
    dfa0:	2303      	movs	r3, #3
    dfa2:	2013      	movs	r0, #19
    dfa4:	700b      	strb	r3, [r1, #0]
    dfa6:	47a0      	blx	r4
    dfa8:	4903      	ldr	r1, [pc, #12]	; (dfb8 <ConfigureRadio+0x54>)
    dfaa:	2012      	movs	r0, #18
    dfac:	e7f4      	b.n	df98 <ConfigureRadio+0x34>
    dfae:	46c0      	nop			; (mov r8, r8)
    dfb0:	00012b31 	.word	0x00012b31
    dfb4:	20002aa4 	.word	0x20002aa4
    dfb8:	0001df48 	.word	0x0001df48

0000dfbc <StopReceiveWindow2Timer>:
    dfbc:	b510      	push	{r4, lr}
    dfbe:	4c0b      	ldr	r4, [pc, #44]	; (dfec <StopReceiveWindow2Timer+0x30>)
    dfc0:	0022      	movs	r2, r4
    dfc2:	32fd      	adds	r2, #253	; 0xfd
    dfc4:	7812      	ldrb	r2, [r2, #0]
    dfc6:	2a01      	cmp	r2, #1
    dfc8:	d10e      	bne.n	dfe8 <StopReceiveWindow2Timer+0x2c>
    dfca:	0021      	movs	r1, r4
    dfcc:	200e      	movs	r0, #14
    dfce:	3184      	adds	r1, #132	; 0x84
    dfd0:	780a      	ldrb	r2, [r1, #0]
    dfd2:	34ee      	adds	r4, #238	; 0xee
    dfd4:	4382      	bics	r2, r0
    dfd6:	700a      	strb	r2, [r1, #0]
    dfd8:	7820      	ldrb	r0, [r4, #0]
    dfda:	4b05      	ldr	r3, [pc, #20]	; (dff0 <StopReceiveWindow2Timer+0x34>)
    dfdc:	4798      	blx	r3
    dfde:	2800      	cmp	r0, #0
    dfe0:	d002      	beq.n	dfe8 <StopReceiveWindow2Timer+0x2c>
    dfe2:	7820      	ldrb	r0, [r4, #0]
    dfe4:	4b03      	ldr	r3, [pc, #12]	; (dff4 <StopReceiveWindow2Timer+0x38>)
    dfe6:	4798      	blx	r3
    dfe8:	bd10      	pop	{r4, pc}
    dfea:	46c0      	nop			; (mov r8, r8)
    dfec:	200029a4 	.word	0x200029a4
    dff0:	0000cccd 	.word	0x0000cccd
    dff4:	0000ce4d 	.word	0x0000ce4d

0000dff8 <LorawanLinkCheckCallback.part.1>:
    dff8:	4b07      	ldr	r3, [pc, #28]	; (e018 <LorawanLinkCheckCallback.part.1+0x20>)
    dffa:	b513      	push	{r0, r1, r4, lr}
    dffc:	001a      	movs	r2, r3
    dffe:	21fa      	movs	r1, #250	; 0xfa
    e000:	3290      	adds	r2, #144	; 0x90
    e002:	6812      	ldr	r2, [r2, #0]
    e004:	0089      	lsls	r1, r1, #2
    e006:	4351      	muls	r1, r2
    e008:	2200      	movs	r2, #0
    e00a:	33f0      	adds	r3, #240	; 0xf0
    e00c:	7818      	ldrb	r0, [r3, #0]
    e00e:	4c03      	ldr	r4, [pc, #12]	; (e01c <LorawanLinkCheckCallback.part.1+0x24>)
    e010:	9200      	str	r2, [sp, #0]
    e012:	4b03      	ldr	r3, [pc, #12]	; (e020 <LorawanLinkCheckCallback.part.1+0x28>)
    e014:	47a0      	blx	r4
    e016:	bd13      	pop	{r0, r1, r4, pc}
    e018:	200029a4 	.word	0x200029a4
    e01c:	0000cb35 	.word	0x0000cb35
    e020:	0000e025 	.word	0x0000e025

0000e024 <LorawanLinkCheckCallback>:
    e024:	4b17      	ldr	r3, [pc, #92]	; (e084 <LorawanLinkCheckCallback+0x60>)
    e026:	20a0      	movs	r0, #160	; 0xa0
    e028:	001a      	movs	r2, r3
    e02a:	2180      	movs	r1, #128	; 0x80
    e02c:	b510      	push	{r4, lr}
    e02e:	3284      	adds	r2, #132	; 0x84
    e030:	8812      	ldrh	r2, [r2, #0]
    e032:	0080      	lsls	r0, r0, #2
    e034:	0089      	lsls	r1, r1, #2
    e036:	4002      	ands	r2, r0
    e038:	428a      	cmp	r2, r1
    e03a:	d11c      	bne.n	e076 <LorawanLinkCheckCallback+0x52>
    e03c:	001a      	movs	r2, r3
    e03e:	32e0      	adds	r2, #224	; 0xe0
    e040:	7810      	ldrb	r0, [r2, #0]
    e042:	2403      	movs	r4, #3
    e044:	2200      	movs	r2, #0
    e046:	b2d1      	uxtb	r1, r2
    e048:	4281      	cmp	r1, r0
    e04a:	d30d      	bcc.n	e068 <LorawanLinkCheckCallback+0x44>
    e04c:	d113      	bne.n	e076 <LorawanLinkCheckCallback+0x52>
    e04e:	2203      	movs	r2, #3
    e050:	434a      	muls	r2, r1
    e052:	2102      	movs	r1, #2
    e054:	189a      	adds	r2, r3, r2
    e056:	3299      	adds	r2, #153	; 0x99
    e058:	7011      	strb	r1, [r2, #0]
    e05a:	280f      	cmp	r0, #15
    e05c:	d80b      	bhi.n	e076 <LorawanLinkCheckCallback+0x52>
    e05e:	001a      	movs	r2, r3
    e060:	3001      	adds	r0, #1
    e062:	32e0      	adds	r2, #224	; 0xe0
    e064:	7010      	strb	r0, [r2, #0]
    e066:	e006      	b.n	e076 <LorawanLinkCheckCallback+0x52>
    e068:	0021      	movs	r1, r4
    e06a:	3201      	adds	r2, #1
    e06c:	4351      	muls	r1, r2
    e06e:	3196      	adds	r1, #150	; 0x96
    e070:	5c59      	ldrb	r1, [r3, r1]
    e072:	2902      	cmp	r1, #2
    e074:	d1e7      	bne.n	e046 <LorawanLinkCheckCallback+0x22>
    e076:	3385      	adds	r3, #133	; 0x85
    e078:	781b      	ldrb	r3, [r3, #0]
    e07a:	079b      	lsls	r3, r3, #30
    e07c:	d501      	bpl.n	e082 <LorawanLinkCheckCallback+0x5e>
    e07e:	4b02      	ldr	r3, [pc, #8]	; (e088 <LorawanLinkCheckCallback+0x64>)
    e080:	4798      	blx	r3
    e082:	bd10      	pop	{r4, pc}
    e084:	200029a4 	.word	0x200029a4
    e088:	0000dff9 	.word	0x0000dff9

0000e08c <LORAWAN_Init>:
    e08c:	2270      	movs	r2, #112	; 0x70
    e08e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e090:	4b52      	ldr	r3, [pc, #328]	; (e1dc <LORAWAN_Init+0x150>)
    e092:	b087      	sub	sp, #28
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	0006      	movs	r6, r0
    e098:	011b      	lsls	r3, r3, #4
    e09a:	4013      	ands	r3, r2
    e09c:	4a50      	ldr	r2, [pc, #320]	; (e1e0 <LORAWAN_Init+0x154>)
    e09e:	000f      	movs	r7, r1
    e0a0:	7812      	ldrb	r2, [r2, #0]
    e0a2:	0912      	lsrs	r2, r2, #4
    e0a4:	4313      	orrs	r3, r2
    e0a6:	2b1f      	cmp	r3, #31
    e0a8:	d000      	beq.n	e0ac <LORAWAN_Init+0x20>
    e0aa:	e7fe      	b.n	e0aa <LORAWAN_Init+0x1e>
    e0ac:	4d4d      	ldr	r5, [pc, #308]	; (e1e4 <LORAWAN_Init+0x158>)
    e0ae:	002b      	movs	r3, r5
    e0b0:	33f8      	adds	r3, #248	; 0xf8
    e0b2:	781b      	ldrb	r3, [r3, #0]
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d000      	beq.n	e0ba <LORAWAN_Init+0x2e>
    e0b8:	e08c      	b.n	e1d4 <LORAWAN_Init+0x148>
    e0ba:	484b      	ldr	r0, [pc, #300]	; (e1e8 <LORAWAN_Init+0x15c>)
    e0bc:	4c4b      	ldr	r4, [pc, #300]	; (e1ec <LORAWAN_Init+0x160>)
    e0be:	47a0      	blx	r4
    e0c0:	2808      	cmp	r0, #8
    e0c2:	d050      	beq.n	e166 <LORAWAN_Init+0xda>
    e0c4:	4b4a      	ldr	r3, [pc, #296]	; (e1f0 <LORAWAN_Init+0x164>)
    e0c6:	4798      	blx	r3
    e0c8:	002b      	movs	r3, r5
    e0ca:	33f8      	adds	r3, #248	; 0xf8
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	2b00      	cmp	r3, #0
    e0d0:	d018      	beq.n	e104 <LORAWAN_Init+0x78>
    e0d2:	4b48      	ldr	r3, [pc, #288]	; (e1f4 <LORAWAN_Init+0x168>)
    e0d4:	0a32      	lsrs	r2, r6, #8
    e0d6:	705a      	strb	r2, [r3, #1]
    e0d8:	0c32      	lsrs	r2, r6, #16
    e0da:	709a      	strb	r2, [r3, #2]
    e0dc:	0a3a      	lsrs	r2, r7, #8
    e0de:	701e      	strb	r6, [r3, #0]
    e0e0:	711f      	strb	r7, [r3, #4]
    e0e2:	715a      	strb	r2, [r3, #5]
    e0e4:	0e36      	lsrs	r6, r6, #24
    e0e6:	0c3a      	lsrs	r2, r7, #16
    e0e8:	0e3f      	lsrs	r7, r7, #24
    e0ea:	719a      	strb	r2, [r3, #6]
    e0ec:	70de      	strb	r6, [r3, #3]
    e0ee:	71df      	strb	r7, [r3, #7]
    e0f0:	4b41      	ldr	r3, [pc, #260]	; (e1f8 <LORAWAN_Init+0x16c>)
    e0f2:	4798      	blx	r3
    e0f4:	4941      	ldr	r1, [pc, #260]	; (e1fc <LORAWAN_Init+0x170>)
    e0f6:	4b42      	ldr	r3, [pc, #264]	; (e200 <LORAWAN_Init+0x174>)
    e0f8:	201a      	movs	r0, #26
    e0fa:	4798      	blx	r3
    e0fc:	4b41      	ldr	r3, [pc, #260]	; (e204 <LORAWAN_Init+0x178>)
    e0fe:	4798      	blx	r3
    e100:	4b41      	ldr	r3, [pc, #260]	; (e208 <LORAWAN_Init+0x17c>)
    e102:	4798      	blx	r3
    e104:	2317      	movs	r3, #23
    e106:	ac02      	add	r4, sp, #8
    e108:	4a40      	ldr	r2, [pc, #256]	; (e20c <LORAWAN_Init+0x180>)
    e10a:	7123      	strb	r3, [r4, #4]
    e10c:	4940      	ldr	r1, [pc, #256]	; (e210 <LORAWAN_Init+0x184>)
    e10e:	4b41      	ldr	r3, [pc, #260]	; (e214 <LORAWAN_Init+0x188>)
    e110:	9205      	str	r2, [sp, #20]
    e112:	9200      	str	r2, [sp, #0]
    e114:	4e40      	ldr	r6, [pc, #256]	; (e218 <LORAWAN_Init+0x18c>)
    e116:	9a03      	ldr	r2, [sp, #12]
    e118:	2000      	movs	r0, #0
    e11a:	9102      	str	r1, [sp, #8]
    e11c:	9304      	str	r3, [sp, #16]
    e11e:	47b0      	blx	r6
    e120:	2310      	movs	r3, #16
    e122:	4a3e      	ldr	r2, [pc, #248]	; (e21c <LORAWAN_Init+0x190>)
    e124:	7123      	strb	r3, [r4, #4]
    e126:	4b3e      	ldr	r3, [pc, #248]	; (e220 <LORAWAN_Init+0x194>)
    e128:	60e2      	str	r2, [r4, #12]
    e12a:	60a3      	str	r3, [r4, #8]
    e12c:	493d      	ldr	r1, [pc, #244]	; (e224 <LORAWAN_Init+0x198>)
    e12e:	9200      	str	r2, [sp, #0]
    e130:	6862      	ldr	r2, [r4, #4]
    e132:	2001      	movs	r0, #1
    e134:	9102      	str	r1, [sp, #8]
    e136:	47b0      	blx	r6
    e138:	2201      	movs	r2, #1
    e13a:	4252      	negs	r2, r2
    e13c:	17d3      	asrs	r3, r2, #31
    e13e:	9202      	str	r2, [sp, #8]
    e140:	9303      	str	r3, [sp, #12]
    e142:	4b39      	ldr	r3, [pc, #228]	; (e228 <LORAWAN_Init+0x19c>)
    e144:	0021      	movs	r1, r4
    e146:	5ce8      	ldrb	r0, [r5, r3]
    e148:	4b38      	ldr	r3, [pc, #224]	; (e22c <LORAWAN_Init+0x1a0>)
    e14a:	4798      	blx	r3
    e14c:	238e      	movs	r3, #142	; 0x8e
    e14e:	22ff      	movs	r2, #255	; 0xff
    e150:	009b      	lsls	r3, r3, #2
    e152:	54ea      	strb	r2, [r5, r3]
    e154:	3a01      	subs	r2, #1
    e156:	3aff      	subs	r2, #255	; 0xff
    e158:	3b04      	subs	r3, #4
    e15a:	50ea      	str	r2, [r5, r3]
    e15c:	2200      	movs	r2, #0
    e15e:	3b04      	subs	r3, #4
    e160:	54ea      	strb	r2, [r5, r3]
    e162:	b007      	add	sp, #28
    e164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e166:	4832      	ldr	r0, [pc, #200]	; (e230 <LORAWAN_Init+0x1a4>)
    e168:	47a0      	blx	r4
    e16a:	2808      	cmp	r0, #8
    e16c:	d1aa      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e16e:	4831      	ldr	r0, [pc, #196]	; (e234 <LORAWAN_Init+0x1a8>)
    e170:	47a0      	blx	r4
    e172:	2808      	cmp	r0, #8
    e174:	d1a6      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e176:	4830      	ldr	r0, [pc, #192]	; (e238 <LORAWAN_Init+0x1ac>)
    e178:	47a0      	blx	r4
    e17a:	2808      	cmp	r0, #8
    e17c:	d1a2      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e17e:	482f      	ldr	r0, [pc, #188]	; (e23c <LORAWAN_Init+0x1b0>)
    e180:	47a0      	blx	r4
    e182:	2808      	cmp	r0, #8
    e184:	d19e      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e186:	482e      	ldr	r0, [pc, #184]	; (e240 <LORAWAN_Init+0x1b4>)
    e188:	47a0      	blx	r4
    e18a:	2808      	cmp	r0, #8
    e18c:	d19a      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e18e:	482d      	ldr	r0, [pc, #180]	; (e244 <LORAWAN_Init+0x1b8>)
    e190:	47a0      	blx	r4
    e192:	2808      	cmp	r0, #8
    e194:	d196      	bne.n	e0c4 <LORAWAN_Init+0x38>
    e196:	482c      	ldr	r0, [pc, #176]	; (e248 <LORAWAN_Init+0x1bc>)
    e198:	47a0      	blx	r4
    e19a:	2808      	cmp	r0, #8
    e19c:	d000      	beq.n	e1a0 <LORAWAN_Init+0x114>
    e19e:	e791      	b.n	e0c4 <LORAWAN_Init+0x38>
    e1a0:	482a      	ldr	r0, [pc, #168]	; (e24c <LORAWAN_Init+0x1c0>)
    e1a2:	47a0      	blx	r4
    e1a4:	2808      	cmp	r0, #8
    e1a6:	d000      	beq.n	e1aa <LORAWAN_Init+0x11e>
    e1a8:	e78c      	b.n	e0c4 <LORAWAN_Init+0x38>
    e1aa:	4829      	ldr	r0, [pc, #164]	; (e250 <LORAWAN_Init+0x1c4>)
    e1ac:	47a0      	blx	r4
    e1ae:	2808      	cmp	r0, #8
    e1b0:	d000      	beq.n	e1b4 <LORAWAN_Init+0x128>
    e1b2:	e787      	b.n	e0c4 <LORAWAN_Init+0x38>
    e1b4:	4827      	ldr	r0, [pc, #156]	; (e254 <LORAWAN_Init+0x1c8>)
    e1b6:	47a0      	blx	r4
    e1b8:	2808      	cmp	r0, #8
    e1ba:	d000      	beq.n	e1be <LORAWAN_Init+0x132>
    e1bc:	e782      	b.n	e0c4 <LORAWAN_Init+0x38>
    e1be:	4826      	ldr	r0, [pc, #152]	; (e258 <LORAWAN_Init+0x1cc>)
    e1c0:	4b26      	ldr	r3, [pc, #152]	; (e25c <LORAWAN_Init+0x1d0>)
    e1c2:	4798      	blx	r3
    e1c4:	2808      	cmp	r0, #8
    e1c6:	d000      	beq.n	e1ca <LORAWAN_Init+0x13e>
    e1c8:	e77c      	b.n	e0c4 <LORAWAN_Init+0x38>
    e1ca:	002b      	movs	r3, r5
    e1cc:	2201      	movs	r2, #1
    e1ce:	33f8      	adds	r3, #248	; 0xf8
    e1d0:	701a      	strb	r2, [r3, #0]
    e1d2:	e779      	b.n	e0c8 <LORAWAN_Init+0x3c>
    e1d4:	4b22      	ldr	r3, [pc, #136]	; (e260 <LORAWAN_Init+0x1d4>)
    e1d6:	4798      	blx	r3
    e1d8:	e776      	b.n	e0c8 <LORAWAN_Init+0x3c>
    e1da:	46c0      	nop			; (mov r8, r8)
    e1dc:	41003fe8 	.word	0x41003fe8
    e1e0:	41003fe4 	.word	0x41003fe4
    e1e4:	200029a4 	.word	0x200029a4
    e1e8:	20002a8f 	.word	0x20002a8f
    e1ec:	0000cb01 	.word	0x0000cb01
    e1f0:	0000ca45 	.word	0x0000ca45
    e1f4:	20002d00 	.word	0x20002d00
    e1f8:	00012d2d 	.word	0x00012d2d
    e1fc:	0000ff7d 	.word	0x0000ff7d
    e200:	00012b31 	.word	0x00012b31
    e204:	0000d335 	.word	0x0000d335
    e208:	00017881 	.word	0x00017881
    e20c:	0001273d 	.word	0x0001273d
    e210:	2000298c 	.word	0x2000298c
    e214:	0001df7c 	.word	0x0001df7c
    e218:	0000c0e9 	.word	0x0000c0e9
    e21c:	00012741 	.word	0x00012741
    e220:	0001e034 	.word	0x0001e034
    e224:	2000287c 	.word	0x2000287c
    e228:	00000231 	.word	0x00000231
    e22c:	0000d139 	.word	0x0000d139
    e230:	20002a90 	.word	0x20002a90
    e234:	20002a91 	.word	0x20002a91
    e238:	20002a92 	.word	0x20002a92
    e23c:	20002a94 	.word	0x20002a94
    e240:	20002a95 	.word	0x20002a95
    e244:	20002a93 	.word	0x20002a93
    e248:	20002a96 	.word	0x20002a96
    e24c:	20002a9f 	.word	0x20002a9f
    e250:	20002aa0 	.word	0x20002aa0
    e254:	20002acc 	.word	0x20002acc
    e258:	20002bd5 	.word	0x20002bd5
    e25c:	0000d0f1 	.word	0x0000d0f1
    e260:	0000db31 	.word	0x0000db31

0000e264 <LORAWAN_Send>:
    e264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e266:	4c37      	ldr	r4, [pc, #220]	; (e344 <LORAWAN_Send+0xe0>)
    e268:	0006      	movs	r6, r0
    e26a:	0023      	movs	r3, r4
    e26c:	3384      	adds	r3, #132	; 0x84
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	250f      	movs	r5, #15
    e272:	b25a      	sxtb	r2, r3
    e274:	2a00      	cmp	r2, #0
    e276:	db0b      	blt.n	e290 <LORAWAN_Send+0x2c>
    e278:	3d03      	subs	r5, #3
    e27a:	065a      	lsls	r2, r3, #25
    e27c:	d408      	bmi.n	e290 <LORAWAN_Send+0x2c>
    e27e:	3d03      	subs	r5, #3
    e280:	07db      	lsls	r3, r3, #31
    e282:	d505      	bpl.n	e290 <LORAWAN_Send+0x2c>
    e284:	2388      	movs	r3, #136	; 0x88
    e286:	009b      	lsls	r3, r3, #2
    e288:	5ce7      	ldrb	r7, [r4, r3]
    e28a:	2f00      	cmp	r7, #0
    e28c:	d102      	bne.n	e294 <LORAWAN_Send+0x30>
    e28e:	2511      	movs	r5, #17
    e290:	0028      	movs	r0, r5
    e292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e294:	2800      	cmp	r0, #0
    e296:	d10f      	bne.n	e2b8 <LORAWAN_Send+0x54>
    e298:	2700      	movs	r7, #0
    e29a:	0023      	movs	r3, r4
    e29c:	3388      	adds	r3, #136	; 0x88
    e29e:	681b      	ldr	r3, [r3, #0]
    e2a0:	3301      	adds	r3, #1
    e2a2:	d123      	bne.n	e2ec <LORAWAN_Send+0x88>
    e2a4:	2001      	movs	r0, #1
    e2a6:	3484      	adds	r4, #132	; 0x84
    e2a8:	78a3      	ldrb	r3, [r4, #2]
    e2aa:	210b      	movs	r1, #11
    e2ac:	4303      	orrs	r3, r0
    e2ae:	70a3      	strb	r3, [r4, #2]
    e2b0:	4b25      	ldr	r3, [pc, #148]	; (e348 <LORAWAN_Send+0xe4>)
    e2b2:	4798      	blx	r3
    e2b4:	250d      	movs	r5, #13
    e2b6:	e7eb      	b.n	e290 <LORAWAN_Send+0x2c>
    e2b8:	7843      	ldrb	r3, [r0, #1]
    e2ba:	7a02      	ldrb	r2, [r0, #8]
    e2bc:	3b01      	subs	r3, #1
    e2be:	b2db      	uxtb	r3, r3
    e2c0:	9201      	str	r2, [sp, #4]
    e2c2:	2bdf      	cmp	r3, #223	; 0xdf
    e2c4:	d902      	bls.n	e2cc <LORAWAN_Send+0x68>
    e2c6:	250a      	movs	r5, #10
    e2c8:	2a00      	cmp	r2, #0
    e2ca:	d1e1      	bne.n	e290 <LORAWAN_Send+0x2c>
    e2cc:	4b1f      	ldr	r3, [pc, #124]	; (e34c <LORAWAN_Send+0xe8>)
    e2ce:	4798      	blx	r3
    e2d0:	4684      	mov	ip, r0
    e2d2:	9b01      	ldr	r3, [sp, #4]
    e2d4:	9000      	str	r0, [sp, #0]
    e2d6:	4463      	add	r3, ip
    e2d8:	001d      	movs	r5, r3
    e2da:	4b1d      	ldr	r3, [pc, #116]	; (e350 <LORAWAN_Send+0xec>)
    e2dc:	4798      	blx	r3
    e2de:	4285      	cmp	r5, r0
    e2e0:	ddda      	ble.n	e298 <LORAWAN_Send+0x34>
    e2e2:	9b00      	ldr	r3, [sp, #0]
    e2e4:	250e      	movs	r5, #14
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	d0d2      	beq.n	e290 <LORAWAN_Send+0x2c>
    e2ea:	e7d6      	b.n	e29a <LORAWAN_Send+0x36>
    e2ec:	0023      	movs	r3, r4
    e2ee:	33fd      	adds	r3, #253	; 0xfd
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	2b04      	cmp	r3, #4
    e2f4:	d01d      	beq.n	e332 <LORAWAN_Send+0xce>
    e2f6:	0023      	movs	r3, r4
    e2f8:	33fd      	adds	r3, #253	; 0xfd
    e2fa:	781b      	ldrb	r3, [r3, #0]
    e2fc:	2b01      	cmp	r3, #1
    e2fe:	d105      	bne.n	e30c <LORAWAN_Send+0xa8>
    e300:	0023      	movs	r3, r4
    e302:	3384      	adds	r3, #132	; 0x84
    e304:	781a      	ldrb	r2, [r3, #0]
    e306:	230e      	movs	r3, #14
    e308:	421a      	tst	r2, r3
    e30a:	d1c0      	bne.n	e28e <LORAWAN_Send+0x2a>
    e30c:	0023      	movs	r3, r4
    e30e:	33fc      	adds	r3, #252	; 0xfc
    e310:	2f00      	cmp	r7, #0
    e312:	d113      	bne.n	e33c <LORAWAN_Send+0xd8>
    e314:	2508      	movs	r5, #8
    e316:	60de      	str	r6, [r3, #12]
    e318:	2388      	movs	r3, #136	; 0x88
    e31a:	2200      	movs	r2, #0
    e31c:	009b      	lsls	r3, r3, #2
    e31e:	54e2      	strb	r2, [r4, r3]
    e320:	2001      	movs	r0, #1
    e322:	4b0c      	ldr	r3, [pc, #48]	; (e354 <LORAWAN_Send+0xf0>)
    e324:	4798      	blx	r3
    e326:	2320      	movs	r3, #32
    e328:	3494      	adds	r4, #148	; 0x94
    e32a:	7822      	ldrb	r2, [r4, #0]
    e32c:	4313      	orrs	r3, r2
    e32e:	7023      	strb	r3, [r4, #0]
    e330:	e7ae      	b.n	e290 <LORAWAN_Send+0x2c>
    e332:	4b09      	ldr	r3, [pc, #36]	; (e358 <LORAWAN_Send+0xf4>)
    e334:	4798      	blx	r3
    e336:	2808      	cmp	r0, #8
    e338:	d1a9      	bne.n	e28e <LORAWAN_Send+0x2a>
    e33a:	e7dc      	b.n	e2f6 <LORAWAN_Send+0x92>
    e33c:	2200      	movs	r2, #0
    e33e:	2511      	movs	r5, #17
    e340:	60da      	str	r2, [r3, #12]
    e342:	e7e9      	b.n	e318 <LORAWAN_Send+0xb4>
    e344:	200029a4 	.word	0x200029a4
    e348:	0000be05 	.word	0x0000be05
    e34c:	0000daf1 	.word	0x0000daf1
    e350:	0000db99 	.word	0x0000db99
    e354:	000129bd 	.word	0x000129bd
    e358:	0001205d 	.word	0x0001205d

0000e35c <AutomaticReplyCallback>:
    e35c:	b510      	push	{r4, lr}
    e35e:	4c0d      	ldr	r4, [pc, #52]	; (e394 <AutomaticReplyCallback+0x38>)
    e360:	0023      	movs	r3, r4
    e362:	33fd      	adds	r3, #253	; 0xfd
    e364:	781b      	ldrb	r3, [r3, #0]
    e366:	2b01      	cmp	r3, #1
    e368:	d10e      	bne.n	e388 <AutomaticReplyCallback+0x2c>
    e36a:	0022      	movs	r2, r4
    e36c:	210e      	movs	r1, #14
    e36e:	3284      	adds	r2, #132	; 0x84
    e370:	7813      	ldrb	r3, [r2, #0]
    e372:	438b      	bics	r3, r1
    e374:	7013      	strb	r3, [r2, #0]
    e376:	4b08      	ldr	r3, [pc, #32]	; (e398 <AutomaticReplyCallback+0x3c>)
    e378:	2000      	movs	r0, #0
    e37a:	4798      	blx	r3
    e37c:	2208      	movs	r2, #8
    e37e:	3494      	adds	r4, #148	; 0x94
    e380:	7823      	ldrb	r3, [r4, #0]
    e382:	4393      	bics	r3, r2
    e384:	7023      	strb	r3, [r4, #0]
    e386:	bd10      	pop	{r4, pc}
    e388:	2b04      	cmp	r3, #4
    e38a:	d1f4      	bne.n	e376 <AutomaticReplyCallback+0x1a>
    e38c:	4b03      	ldr	r3, [pc, #12]	; (e39c <AutomaticReplyCallback+0x40>)
    e38e:	4798      	blx	r3
    e390:	e7f1      	b.n	e376 <AutomaticReplyCallback+0x1a>
    e392:	46c0      	nop			; (mov r8, r8)
    e394:	200029a4 	.word	0x200029a4
    e398:	0000e265 	.word	0x0000e265
    e39c:	00013445 	.word	0x00013445

0000e3a0 <LORAWAN_Pause>:
    e3a0:	b510      	push	{r4, lr}
    e3a2:	4c2c      	ldr	r4, [pc, #176]	; (e454 <LORAWAN_Pause+0xb4>)
    e3a4:	0023      	movs	r3, r4
    e3a6:	33fd      	adds	r3, #253	; 0xfd
    e3a8:	781b      	ldrb	r3, [r3, #0]
    e3aa:	2b04      	cmp	r3, #4
    e3ac:	d110      	bne.n	e3d0 <LORAWAN_Pause+0x30>
    e3ae:	0023      	movs	r3, r4
    e3b0:	3384      	adds	r3, #132	; 0x84
    e3b2:	781b      	ldrb	r3, [r3, #0]
    e3b4:	07db      	lsls	r3, r3, #31
    e3b6:	d50b      	bpl.n	e3d0 <LORAWAN_Pause+0x30>
    e3b8:	4b27      	ldr	r3, [pc, #156]	; (e458 <LORAWAN_Pause+0xb8>)
    e3ba:	4798      	blx	r3
    e3bc:	28c7      	cmp	r0, #199	; 0xc7
    e3be:	d942      	bls.n	e446 <LORAWAN_Pause+0xa6>
    e3c0:	2380      	movs	r3, #128	; 0x80
    e3c2:	3484      	adds	r4, #132	; 0x84
    e3c4:	7822      	ldrb	r2, [r4, #0]
    e3c6:	425b      	negs	r3, r3
    e3c8:	4313      	orrs	r3, r2
    e3ca:	3832      	subs	r0, #50	; 0x32
    e3cc:	7023      	strb	r3, [r4, #0]
    e3ce:	bd10      	pop	{r4, pc}
    e3d0:	0023      	movs	r3, r4
    e3d2:	3384      	adds	r3, #132	; 0x84
    e3d4:	7818      	ldrb	r0, [r3, #0]
    e3d6:	0700      	lsls	r0, r0, #28
    e3d8:	0f40      	lsrs	r0, r0, #29
    e3da:	2806      	cmp	r0, #6
    e3dc:	d833      	bhi.n	e446 <LORAWAN_Pause+0xa6>
    e3de:	f006 f875 	bl	144cc <__gnu_thumb1_case_uqi>
    e3e2:	322f      	.short	0x322f
    e3e4:	321b3204 	.word	0x321b3204
    e3e8:	2c          	.byte	0x2c
    e3e9:	00          	.byte	0x00
    e3ea:	0023      	movs	r3, r4
    e3ec:	3394      	adds	r3, #148	; 0x94
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	075b      	lsls	r3, r3, #29
    e3f2:	d509      	bpl.n	e408 <LORAWAN_Pause+0x68>
    e3f4:	0023      	movs	r3, r4
    e3f6:	33eb      	adds	r3, #235	; 0xeb
    e3f8:	7818      	ldrb	r0, [r3, #0]
    e3fa:	4b18      	ldr	r3, [pc, #96]	; (e45c <LORAWAN_Pause+0xbc>)
    e3fc:	4798      	blx	r3
    e3fe:	21fa      	movs	r1, #250	; 0xfa
    e400:	4b17      	ldr	r3, [pc, #92]	; (e460 <LORAWAN_Pause+0xc0>)
    e402:	0089      	lsls	r1, r1, #2
    e404:	4798      	blx	r3
    e406:	e7d9      	b.n	e3bc <LORAWAN_Pause+0x1c>
    e408:	0023      	movs	r3, r4
    e40a:	3384      	adds	r3, #132	; 0x84
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	07db      	lsls	r3, r3, #31
    e410:	d519      	bpl.n	e446 <LORAWAN_Pause+0xa6>
    e412:	0023      	movs	r3, r4
    e414:	33ed      	adds	r3, #237	; 0xed
    e416:	e7ef      	b.n	e3f8 <LORAWAN_Pause+0x58>
    e418:	0023      	movs	r3, r4
    e41a:	3394      	adds	r3, #148	; 0x94
    e41c:	7818      	ldrb	r0, [r3, #0]
    e41e:	2304      	movs	r3, #4
    e420:	4018      	ands	r0, r3
    e422:	0023      	movs	r3, r4
    e424:	2800      	cmp	r0, #0
    e426:	d001      	beq.n	e42c <LORAWAN_Pause+0x8c>
    e428:	33ec      	adds	r3, #236	; 0xec
    e42a:	e7e5      	b.n	e3f8 <LORAWAN_Pause+0x58>
    e42c:	3384      	adds	r3, #132	; 0x84
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	07db      	lsls	r3, r3, #31
    e432:	d5e4      	bpl.n	e3fe <LORAWAN_Pause+0x5e>
    e434:	0023      	movs	r3, r4
    e436:	33ee      	adds	r3, #238	; 0xee
    e438:	e7de      	b.n	e3f8 <LORAWAN_Pause+0x58>
    e43a:	0023      	movs	r3, r4
    e43c:	33f1      	adds	r3, #241	; 0xf1
    e43e:	e7db      	b.n	e3f8 <LORAWAN_Pause+0x58>
    e440:	2001      	movs	r0, #1
    e442:	4240      	negs	r0, r0
    e444:	e7bc      	b.n	e3c0 <LORAWAN_Pause+0x20>
    e446:	227f      	movs	r2, #127	; 0x7f
    e448:	3484      	adds	r4, #132	; 0x84
    e44a:	7823      	ldrb	r3, [r4, #0]
    e44c:	2000      	movs	r0, #0
    e44e:	4013      	ands	r3, r2
    e450:	7023      	strb	r3, [r4, #0]
    e452:	e7bc      	b.n	e3ce <LORAWAN_Pause+0x2e>
    e454:	200029a4 	.word	0x200029a4
    e458:	00012095 	.word	0x00012095
    e45c:	0000cce1 	.word	0x0000cce1
    e460:	00014509 	.word	0x00014509

0000e464 <LORAWAN_Resume>:
    e464:	217f      	movs	r1, #127	; 0x7f
    e466:	4b03      	ldr	r3, [pc, #12]	; (e474 <LORAWAN_Resume+0x10>)
    e468:	3384      	adds	r3, #132	; 0x84
    e46a:	781a      	ldrb	r2, [r3, #0]
    e46c:	400a      	ands	r2, r1
    e46e:	701a      	strb	r2, [r3, #0]
    e470:	4770      	bx	lr
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	200029a4 	.word	0x200029a4

0000e478 <LorawanLinkCheckConfigure>:
    e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e47a:	23fa      	movs	r3, #250	; 0xfa
    e47c:	4c21      	ldr	r4, [pc, #132]	; (e504 <LorawanLinkCheckConfigure+0x8c>)
    e47e:	009b      	lsls	r3, r3, #2
    e480:	0022      	movs	r2, r4
    e482:	0025      	movs	r5, r4
    e484:	4343      	muls	r3, r0
    e486:	3290      	adds	r2, #144	; 0x90
    e488:	0006      	movs	r6, r0
    e48a:	2102      	movs	r1, #2
    e48c:	2000      	movs	r0, #0
    e48e:	4f1e      	ldr	r7, [pc, #120]	; (e508 <LorawanLinkCheckConfigure+0x90>)
    e490:	6013      	str	r3, [r2, #0]
    e492:	3584      	adds	r5, #132	; 0x84
    e494:	47b8      	blx	r7
    e496:	2e00      	cmp	r6, #0
    e498:	d127      	bne.n	e4ea <LorawanLinkCheckConfigure+0x72>
    e49a:	0023      	movs	r3, r4
    e49c:	33f0      	adds	r3, #240	; 0xf0
    e49e:	7818      	ldrb	r0, [r3, #0]
    e4a0:	4b1a      	ldr	r3, [pc, #104]	; (e50c <LorawanLinkCheckConfigure+0x94>)
    e4a2:	4798      	blx	r3
    e4a4:	2202      	movs	r2, #2
    e4a6:	786b      	ldrb	r3, [r5, #1]
    e4a8:	210b      	movs	r1, #11
    e4aa:	4393      	bics	r3, r2
    e4ac:	706b      	strb	r3, [r5, #1]
    e4ae:	2001      	movs	r0, #1
    e4b0:	47b8      	blx	r7
    e4b2:	0023      	movs	r3, r4
    e4b4:	2701      	movs	r7, #1
    e4b6:	33e0      	adds	r3, #224	; 0xe0
    e4b8:	781b      	ldrb	r3, [r3, #0]
    e4ba:	0030      	movs	r0, r6
    e4bc:	0032      	movs	r2, r6
    e4be:	36ff      	adds	r6, #255	; 0xff
    e4c0:	429a      	cmp	r2, r3
    e4c2:	d304      	bcc.n	e4ce <LorawanLinkCheckConfigure+0x56>
    e4c4:	2800      	cmp	r0, #0
    e4c6:	d001      	beq.n	e4cc <LorawanLinkCheckConfigure+0x54>
    e4c8:	34e0      	adds	r4, #224	; 0xe0
    e4ca:	7023      	strb	r3, [r4, #0]
    e4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4ce:	2103      	movs	r1, #3
    e4d0:	4351      	muls	r1, r2
    e4d2:	1861      	adds	r1, r4, r1
    e4d4:	3199      	adds	r1, #153	; 0x99
    e4d6:	780d      	ldrb	r5, [r1, #0]
    e4d8:	2d02      	cmp	r5, #2
    e4da:	d103      	bne.n	e4e4 <LorawanLinkCheckConfigure+0x6c>
    e4dc:	0038      	movs	r0, r7
    e4de:	3b01      	subs	r3, #1
    e4e0:	700e      	strb	r6, [r1, #0]
    e4e2:	b2db      	uxtb	r3, r3
    e4e4:	3201      	adds	r2, #1
    e4e6:	b2d2      	uxtb	r2, r2
    e4e8:	e7ea      	b.n	e4c0 <LorawanLinkCheckConfigure+0x48>
    e4ea:	2302      	movs	r3, #2
    e4ec:	786a      	ldrb	r2, [r5, #1]
    e4ee:	210b      	movs	r1, #11
    e4f0:	4313      	orrs	r3, r2
    e4f2:	706b      	strb	r3, [r5, #1]
    e4f4:	2001      	movs	r0, #1
    e4f6:	47b8      	blx	r7
    e4f8:	782b      	ldrb	r3, [r5, #0]
    e4fa:	07db      	lsls	r3, r3, #31
    e4fc:	d5e6      	bpl.n	e4cc <LorawanLinkCheckConfigure+0x54>
    e4fe:	4b04      	ldr	r3, [pc, #16]	; (e510 <LorawanLinkCheckConfigure+0x98>)
    e500:	4798      	blx	r3
    e502:	e7e3      	b.n	e4cc <LorawanLinkCheckConfigure+0x54>
    e504:	200029a4 	.word	0x200029a4
    e508:	0000be05 	.word	0x0000be05
    e50c:	0000ce4d 	.word	0x0000ce4d
    e510:	0000dff9 	.word	0x0000dff9

0000e514 <EncodeDeviceTimeReq>:
    e514:	4b08      	ldr	r3, [pc, #32]	; (e538 <EncodeDeviceTimeReq+0x24>)
    e516:	b510      	push	{r4, lr}
    e518:	001c      	movs	r4, r3
    e51a:	34e0      	adds	r4, #224	; 0xe0
    e51c:	7822      	ldrb	r2, [r4, #0]
    e51e:	2015      	movs	r0, #21
    e520:	2a0f      	cmp	r2, #15
    e522:	d808      	bhi.n	e536 <EncodeDeviceTimeReq+0x22>
    e524:	2103      	movs	r1, #3
    e526:	4351      	muls	r1, r2
    e528:	185b      	adds	r3, r3, r1
    e52a:	210d      	movs	r1, #13
    e52c:	3399      	adds	r3, #153	; 0x99
    e52e:	3201      	adds	r2, #1
    e530:	7019      	strb	r1, [r3, #0]
    e532:	7022      	strb	r2, [r4, #0]
    e534:	380d      	subs	r0, #13
    e536:	bd10      	pop	{r4, pc}
    e538:	200029a4 	.word	0x200029a4

0000e53c <EncodeLinkCheckReq>:
    e53c:	4b08      	ldr	r3, [pc, #32]	; (e560 <EncodeLinkCheckReq+0x24>)
    e53e:	b510      	push	{r4, lr}
    e540:	001c      	movs	r4, r3
    e542:	34e0      	adds	r4, #224	; 0xe0
    e544:	7822      	ldrb	r2, [r4, #0]
    e546:	2015      	movs	r0, #21
    e548:	2a0f      	cmp	r2, #15
    e54a:	d808      	bhi.n	e55e <EncodeLinkCheckReq+0x22>
    e54c:	2103      	movs	r1, #3
    e54e:	4351      	muls	r1, r2
    e550:	185b      	adds	r3, r3, r1
    e552:	2102      	movs	r1, #2
    e554:	3399      	adds	r3, #153	; 0x99
    e556:	3201      	adds	r2, #1
    e558:	7019      	strb	r1, [r3, #0]
    e55a:	7022      	strb	r2, [r4, #0]
    e55c:	380d      	subs	r0, #13
    e55e:	bd10      	pop	{r4, pc}
    e560:	200029a4 	.word	0x200029a4

0000e564 <LORAWAN_ForceEnable>:
    e564:	2140      	movs	r1, #64	; 0x40
    e566:	4b03      	ldr	r3, [pc, #12]	; (e574 <LORAWAN_ForceEnable+0x10>)
    e568:	3384      	adds	r3, #132	; 0x84
    e56a:	781a      	ldrb	r2, [r3, #0]
    e56c:	438a      	bics	r2, r1
    e56e:	701a      	strb	r2, [r3, #0]
    e570:	4770      	bx	lr
    e572:	46c0      	nop			; (mov r8, r8)
    e574:	200029a4 	.word	0x200029a4

0000e578 <UpdateCurrentDataRate>:
    e578:	b510      	push	{r4, lr}
    e57a:	4b04      	ldr	r3, [pc, #16]	; (e58c <UpdateCurrentDataRate+0x14>)
    e57c:	210c      	movs	r1, #12
    e57e:	33e7      	adds	r3, #231	; 0xe7
    e580:	7018      	strb	r0, [r3, #0]
    e582:	2001      	movs	r0, #1
    e584:	4b02      	ldr	r3, [pc, #8]	; (e590 <UpdateCurrentDataRate+0x18>)
    e586:	4798      	blx	r3
    e588:	bd10      	pop	{r4, pc}
    e58a:	46c0      	nop			; (mov r8, r8)
    e58c:	200029a4 	.word	0x200029a4
    e590:	0000be05 	.word	0x0000be05

0000e594 <UpdateDLSettings>:
    e594:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e596:	466b      	mov	r3, sp
    e598:	1dde      	adds	r6, r3, #7
    e59a:	1d9c      	adds	r4, r3, #6
    e59c:	71d8      	strb	r0, [r3, #7]
    e59e:	7021      	strb	r1, [r4, #0]
    e5a0:	2017      	movs	r0, #23
    e5a2:	0031      	movs	r1, r6
    e5a4:	4d0c      	ldr	r5, [pc, #48]	; (e5d8 <UpdateDLSettings+0x44>)
    e5a6:	47a8      	blx	r5
    e5a8:	2808      	cmp	r0, #8
    e5aa:	d107      	bne.n	e5bc <UpdateDLSettings+0x28>
    e5ac:	4b0b      	ldr	r3, [pc, #44]	; (e5dc <UpdateDLSettings+0x48>)
    e5ae:	7832      	ldrb	r2, [r6, #0]
    e5b0:	336e      	adds	r3, #110	; 0x6e
    e5b2:	701a      	strb	r2, [r3, #0]
    e5b4:	2100      	movs	r1, #0
    e5b6:	3807      	subs	r0, #7
    e5b8:	4b09      	ldr	r3, [pc, #36]	; (e5e0 <UpdateDLSettings+0x4c>)
    e5ba:	4798      	blx	r3
    e5bc:	0021      	movs	r1, r4
    e5be:	2018      	movs	r0, #24
    e5c0:	47a8      	blx	r5
    e5c2:	2808      	cmp	r0, #8
    e5c4:	d107      	bne.n	e5d6 <UpdateDLSettings+0x42>
    e5c6:	2101      	movs	r1, #1
    e5c8:	4b04      	ldr	r3, [pc, #16]	; (e5dc <UpdateDLSettings+0x48>)
    e5ca:	7822      	ldrb	r2, [r4, #0]
    e5cc:	33f7      	adds	r3, #247	; 0xf7
    e5ce:	701a      	strb	r2, [r3, #0]
    e5d0:	0008      	movs	r0, r1
    e5d2:	4b03      	ldr	r3, [pc, #12]	; (e5e0 <UpdateDLSettings+0x4c>)
    e5d4:	4798      	blx	r3
    e5d6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e5d8:	0000b6e1 	.word	0x0000b6e1
    e5dc:	200029a4 	.word	0x200029a4
    e5e0:	0000be05 	.word	0x0000be05

0000e5e4 <UpdateTxPower>:
    e5e4:	b510      	push	{r4, lr}
    e5e6:	4b04      	ldr	r3, [pc, #16]	; (e5f8 <UpdateTxPower+0x14>)
    e5e8:	210a      	movs	r1, #10
    e5ea:	33e9      	adds	r3, #233	; 0xe9
    e5ec:	7018      	strb	r0, [r3, #0]
    e5ee:	2000      	movs	r0, #0
    e5f0:	4b02      	ldr	r3, [pc, #8]	; (e5fc <UpdateTxPower+0x18>)
    e5f2:	4798      	blx	r3
    e5f4:	bd10      	pop	{r4, pc}
    e5f6:	46c0      	nop			; (mov r8, r8)
    e5f8:	200029a4 	.word	0x200029a4
    e5fc:	0000be05 	.word	0x0000be05

0000e600 <UpdateRetransmissionAckTimeoutState>:
    e600:	4b10      	ldr	r3, [pc, #64]	; (e644 <UpdateRetransmissionAckTimeoutState+0x44>)
    e602:	b513      	push	{r0, r1, r4, lr}
    e604:	001a      	movs	r2, r3
    e606:	32fd      	adds	r2, #253	; 0xfd
    e608:	7812      	ldrb	r2, [r2, #0]
    e60a:	2a01      	cmp	r2, #1
    e60c:	d108      	bne.n	e620 <UpdateRetransmissionAckTimeoutState+0x20>
    e60e:	0018      	movs	r0, r3
    e610:	210e      	movs	r1, #14
    e612:	3084      	adds	r0, #132	; 0x84
    e614:	7802      	ldrb	r2, [r0, #0]
    e616:	438a      	bics	r2, r1
    e618:	0011      	movs	r1, r2
    e61a:	220c      	movs	r2, #12
    e61c:	430a      	orrs	r2, r1
    e61e:	7002      	strb	r2, [r0, #0]
    e620:	001a      	movs	r2, r3
    e622:	32da      	adds	r2, #218	; 0xda
    e624:	8811      	ldrh	r1, [r2, #0]
    e626:	4a08      	ldr	r2, [pc, #32]	; (e648 <UpdateRetransmissionAckTimeoutState+0x48>)
    e628:	4c08      	ldr	r4, [pc, #32]	; (e64c <UpdateRetransmissionAckTimeoutState+0x4c>)
    e62a:	5c9a      	ldrb	r2, [r3, r2]
    e62c:	33f1      	adds	r3, #241	; 0xf1
    e62e:	1a8a      	subs	r2, r1, r2
    e630:	21fa      	movs	r1, #250	; 0xfa
    e632:	0089      	lsls	r1, r1, #2
    e634:	4351      	muls	r1, r2
    e636:	2200      	movs	r2, #0
    e638:	7818      	ldrb	r0, [r3, #0]
    e63a:	9200      	str	r2, [sp, #0]
    e63c:	4b04      	ldr	r3, [pc, #16]	; (e650 <UpdateRetransmissionAckTimeoutState+0x50>)
    e63e:	47a0      	blx	r4
    e640:	bd13      	pop	{r0, r1, r4, pc}
    e642:	46c0      	nop			; (mov r8, r8)
    e644:	200029a4 	.word	0x200029a4
    e648:	0000022b 	.word	0x0000022b
    e64c:	0000cb35 	.word	0x0000cb35
    e650:	000100d5 	.word	0x000100d5

0000e654 <UpdateReceiveWindow2Parameters>:
    e654:	4b0f      	ldr	r3, [pc, #60]	; (e694 <UpdateReceiveWindow2Parameters+0x40>)
    e656:	b570      	push	{r4, r5, r6, lr}
    e658:	001a      	movs	r2, r3
    e65a:	326e      	adds	r2, #110	; 0x6e
    e65c:	7011      	strb	r1, [r2, #0]
    e65e:	001a      	movs	r2, r3
    e660:	0c04      	lsrs	r4, r0, #16
    e662:	326a      	adds	r2, #106	; 0x6a
    e664:	8010      	strh	r0, [r2, #0]
    e666:	8054      	strh	r4, [r2, #2]
    e668:	001a      	movs	r2, r3
    e66a:	25fd      	movs	r5, #253	; 0xfd
    e66c:	32fd      	adds	r2, #253	; 0xfd
    e66e:	7812      	ldrb	r2, [r2, #0]
    e670:	3a02      	subs	r2, #2
    e672:	422a      	tst	r2, r5
    e674:	d109      	bne.n	e68a <UpdateReceiveWindow2Parameters+0x36>
    e676:	001a      	movs	r2, r3
    e678:	336f      	adds	r3, #111	; 0x6f
    e67a:	3273      	adds	r2, #115	; 0x73
    e67c:	7011      	strb	r1, [r2, #0]
    e67e:	7018      	strb	r0, [r3, #0]
    e680:	0a02      	lsrs	r2, r0, #8
    e682:	0e00      	lsrs	r0, r0, #24
    e684:	705a      	strb	r2, [r3, #1]
    e686:	709c      	strb	r4, [r3, #2]
    e688:	70d8      	strb	r0, [r3, #3]
    e68a:	2100      	movs	r1, #0
    e68c:	4b02      	ldr	r3, [pc, #8]	; (e698 <UpdateReceiveWindow2Parameters+0x44>)
    e68e:	2001      	movs	r0, #1
    e690:	4798      	blx	r3
    e692:	bd70      	pop	{r4, r5, r6, pc}
    e694:	200029a4 	.word	0x200029a4
    e698:	0000be05 	.word	0x0000be05

0000e69c <ResetParametersForConfirmedTransmission>:
    e69c:	4b0a      	ldr	r3, [pc, #40]	; (e6c8 <ResetParametersForConfirmedTransmission+0x2c>)
    e69e:	001a      	movs	r2, r3
    e6a0:	32fd      	adds	r2, #253	; 0xfd
    e6a2:	7812      	ldrb	r2, [r2, #0]
    e6a4:	2a01      	cmp	r2, #1
    e6a6:	d105      	bne.n	e6b4 <ResetParametersForConfirmedTransmission+0x18>
    e6a8:	0019      	movs	r1, r3
    e6aa:	200e      	movs	r0, #14
    e6ac:	3184      	adds	r1, #132	; 0x84
    e6ae:	780a      	ldrb	r2, [r1, #0]
    e6b0:	4382      	bics	r2, r0
    e6b2:	700a      	strb	r2, [r1, #0]
    e6b4:	001a      	movs	r2, r3
    e6b6:	2100      	movs	r1, #0
    e6b8:	3394      	adds	r3, #148	; 0x94
    e6ba:	32e4      	adds	r2, #228	; 0xe4
    e6bc:	7011      	strb	r1, [r2, #0]
    e6be:	781a      	ldrb	r2, [r3, #0]
    e6c0:	3101      	adds	r1, #1
    e6c2:	438a      	bics	r2, r1
    e6c4:	701a      	strb	r2, [r3, #0]
    e6c6:	4770      	bx	lr
    e6c8:	200029a4 	.word	0x200029a4

0000e6cc <ResetParametersForUnconfirmedTransmission>:
    e6cc:	4b07      	ldr	r3, [pc, #28]	; (e6ec <ResetParametersForUnconfirmedTransmission+0x20>)
    e6ce:	001a      	movs	r2, r3
    e6d0:	32fd      	adds	r2, #253	; 0xfd
    e6d2:	7812      	ldrb	r2, [r2, #0]
    e6d4:	2a01      	cmp	r2, #1
    e6d6:	d105      	bne.n	e6e4 <ResetParametersForUnconfirmedTransmission+0x18>
    e6d8:	0019      	movs	r1, r3
    e6da:	200e      	movs	r0, #14
    e6dc:	3184      	adds	r1, #132	; 0x84
    e6de:	780a      	ldrb	r2, [r1, #0]
    e6e0:	4382      	bics	r2, r0
    e6e2:	700a      	strb	r2, [r1, #0]
    e6e4:	2200      	movs	r2, #0
    e6e6:	33e3      	adds	r3, #227	; 0xe3
    e6e8:	701a      	strb	r2, [r3, #0]
    e6ea:	4770      	bx	lr
    e6ec:	200029a4 	.word	0x200029a4

0000e6f0 <SetJoinFailState>:
    e6f0:	b570      	push	{r4, r5, r6, lr}
    e6f2:	4c15      	ldr	r4, [pc, #84]	; (e748 <SetJoinFailState+0x58>)
    e6f4:	2604      	movs	r6, #4
    e6f6:	0025      	movs	r5, r4
    e6f8:	3594      	adds	r5, #148	; 0x94
    e6fa:	782a      	ldrb	r2, [r5, #0]
    e6fc:	0021      	movs	r1, r4
    e6fe:	43b2      	bics	r2, r6
    e700:	702a      	strb	r2, [r5, #0]
    e702:	22f0      	movs	r2, #240	; 0xf0
    e704:	3184      	adds	r1, #132	; 0x84
    e706:	780b      	ldrb	r3, [r1, #0]
    e708:	4013      	ands	r3, r2
    e70a:	700b      	strb	r3, [r1, #0]
    e70c:	0023      	movs	r3, r4
    e70e:	33ff      	adds	r3, #255	; 0xff
    e710:	7f5b      	ldrb	r3, [r3, #29]
    e712:	069b      	lsls	r3, r3, #26
    e714:	d503      	bpl.n	e71e <SetJoinFailState+0x2e>
    e716:	0023      	movs	r3, r4
    e718:	2200      	movs	r2, #0
    e71a:	3380      	adds	r3, #128	; 0x80
    e71c:	701a      	strb	r2, [r3, #0]
    e71e:	490b      	ldr	r1, [pc, #44]	; (e74c <SetJoinFailState+0x5c>)
    e720:	794a      	ldrb	r2, [r1, #5]
    e722:	790b      	ldrb	r3, [r1, #4]
    e724:	0212      	lsls	r2, r2, #8
    e726:	431a      	orrs	r2, r3
    e728:	798b      	ldrb	r3, [r1, #6]
    e72a:	041b      	lsls	r3, r3, #16
    e72c:	431a      	orrs	r2, r3
    e72e:	79cb      	ldrb	r3, [r1, #7]
    e730:	061b      	lsls	r3, r3, #24
    e732:	4313      	orrs	r3, r2
    e734:	d000      	beq.n	e738 <SetJoinFailState+0x48>
    e736:	4798      	blx	r3
    e738:	2300      	movs	r3, #0
    e73a:	34f9      	adds	r4, #249	; 0xf9
    e73c:	7023      	strb	r3, [r4, #0]
    e73e:	210b      	movs	r1, #11
    e740:	4b03      	ldr	r3, [pc, #12]	; (e750 <SetJoinFailState+0x60>)
    e742:	2001      	movs	r0, #1
    e744:	4798      	blx	r3
    e746:	bd70      	pop	{r4, r5, r6, pc}
    e748:	200029a4 	.word	0x200029a4
    e74c:	20002d00 	.word	0x20002d00
    e750:	0000be05 	.word	0x0000be05

0000e754 <ExecuteRxParamSetupReq>:
    e754:	b5f0      	push	{r4, r5, r6, r7, lr}
    e756:	b085      	sub	sp, #20
    e758:	7805      	ldrb	r5, [r0, #0]
    e75a:	0004      	movs	r4, r0
    e75c:	1c41      	adds	r1, r0, #1
    e75e:	2204      	movs	r2, #4
    e760:	4b36      	ldr	r3, [pc, #216]	; (e83c <ExecuteRxParamSetupReq+0xe8>)
    e762:	a803      	add	r0, sp, #12
    e764:	4798      	blx	r3
    e766:	2264      	movs	r2, #100	; 0x64
    e768:	9b03      	ldr	r3, [sp, #12]
    e76a:	a903      	add	r1, sp, #12
    e76c:	021b      	lsls	r3, r3, #8
    e76e:	0a1b      	lsrs	r3, r3, #8
    e770:	4353      	muls	r3, r2
    e772:	9303      	str	r3, [sp, #12]
    e774:	1d23      	adds	r3, r4, #4
    e776:	9301      	str	r3, [sp, #4]
    e778:	072b      	lsls	r3, r5, #28
    e77a:	0f1b      	lsrs	r3, r3, #28
    e77c:	b2da      	uxtb	r2, r3
    e77e:	9200      	str	r2, [sp, #0]
    e780:	aa02      	add	r2, sp, #8
    e782:	1c96      	adds	r6, r2, #2
    e784:	066d      	lsls	r5, r5, #25
    e786:	7033      	strb	r3, [r6, #0]
    e788:	1cd7      	adds	r7, r2, #3
    e78a:	0f6d      	lsrs	r5, r5, #29
    e78c:	2001      	movs	r0, #1
    e78e:	4b2c      	ldr	r3, [pc, #176]	; (e840 <ExecuteRxParamSetupReq+0xec>)
    e790:	703d      	strb	r5, [r7, #0]
    e792:	4798      	blx	r3
    e794:	4c2b      	ldr	r4, [pc, #172]	; (e844 <ExecuteRxParamSetupReq+0xf0>)
    e796:	2808      	cmp	r0, #8
    e798:	d109      	bne.n	e7ae <ExecuteRxParamSetupReq+0x5a>
    e79a:	0023      	movs	r3, r4
    e79c:	33e0      	adds	r3, #224	; 0xe0
    e79e:	781a      	ldrb	r2, [r3, #0]
    e7a0:	2303      	movs	r3, #3
    e7a2:	4353      	muls	r3, r2
    e7a4:	18e3      	adds	r3, r4, r3
    e7a6:	3398      	adds	r3, #152	; 0x98
    e7a8:	789a      	ldrb	r2, [r3, #2]
    e7aa:	4310      	orrs	r0, r2
    e7ac:	7098      	strb	r0, [r3, #2]
    e7ae:	0031      	movs	r1, r6
    e7b0:	200f      	movs	r0, #15
    e7b2:	4e23      	ldr	r6, [pc, #140]	; (e840 <ExecuteRxParamSetupReq+0xec>)
    e7b4:	47b0      	blx	r6
    e7b6:	2808      	cmp	r0, #8
    e7b8:	d10a      	bne.n	e7d0 <ExecuteRxParamSetupReq+0x7c>
    e7ba:	0023      	movs	r3, r4
    e7bc:	33e0      	adds	r3, #224	; 0xe0
    e7be:	781a      	ldrb	r2, [r3, #0]
    e7c0:	2303      	movs	r3, #3
    e7c2:	4353      	muls	r3, r2
    e7c4:	2210      	movs	r2, #16
    e7c6:	18e3      	adds	r3, r4, r3
    e7c8:	3398      	adds	r3, #152	; 0x98
    e7ca:	7899      	ldrb	r1, [r3, #2]
    e7cc:	430a      	orrs	r2, r1
    e7ce:	709a      	strb	r2, [r3, #2]
    e7d0:	0039      	movs	r1, r7
    e7d2:	2018      	movs	r0, #24
    e7d4:	47b0      	blx	r6
    e7d6:	2808      	cmp	r0, #8
    e7d8:	d10a      	bne.n	e7f0 <ExecuteRxParamSetupReq+0x9c>
    e7da:	0023      	movs	r3, r4
    e7dc:	33e0      	adds	r3, #224	; 0xe0
    e7de:	781a      	ldrb	r2, [r3, #0]
    e7e0:	2303      	movs	r3, #3
    e7e2:	4353      	muls	r3, r2
    e7e4:	2220      	movs	r2, #32
    e7e6:	18e3      	adds	r3, r4, r3
    e7e8:	3398      	adds	r3, #152	; 0x98
    e7ea:	7899      	ldrb	r1, [r3, #2]
    e7ec:	430a      	orrs	r2, r1
    e7ee:	709a      	strb	r2, [r3, #2]
    e7f0:	0023      	movs	r3, r4
    e7f2:	33e0      	adds	r3, #224	; 0xe0
    e7f4:	781a      	ldrb	r2, [r3, #0]
    e7f6:	2303      	movs	r3, #3
    e7f8:	4353      	muls	r3, r2
    e7fa:	18e3      	adds	r3, r4, r3
    e7fc:	3398      	adds	r3, #152	; 0x98
    e7fe:	789e      	ldrb	r6, [r3, #2]
    e800:	06f3      	lsls	r3, r6, #27
    e802:	d518      	bpl.n	e836 <ExecuteRxParamSetupReq+0xe2>
    e804:	0733      	lsls	r3, r6, #28
    e806:	d516      	bpl.n	e836 <ExecuteRxParamSetupReq+0xe2>
    e808:	06b6      	lsls	r6, r6, #26
    e80a:	0ff6      	lsrs	r6, r6, #31
    e80c:	2e01      	cmp	r6, #1
    e80e:	d112      	bne.n	e836 <ExecuteRxParamSetupReq+0xe2>
    e810:	0023      	movs	r3, r4
    e812:	33f7      	adds	r3, #247	; 0xf7
    e814:	701d      	strb	r5, [r3, #0]
    e816:	0031      	movs	r1, r6
    e818:	0030      	movs	r0, r6
    e81a:	4d0b      	ldr	r5, [pc, #44]	; (e848 <ExecuteRxParamSetupReq+0xf4>)
    e81c:	47a8      	blx	r5
    e81e:	9900      	ldr	r1, [sp, #0]
    e820:	9803      	ldr	r0, [sp, #12]
    e822:	4b0a      	ldr	r3, [pc, #40]	; (e84c <ExecuteRxParamSetupReq+0xf8>)
    e824:	4798      	blx	r3
    e826:	2340      	movs	r3, #64	; 0x40
    e828:	3484      	adds	r4, #132	; 0x84
    e82a:	7862      	ldrb	r2, [r4, #1]
    e82c:	210b      	movs	r1, #11
    e82e:	4313      	orrs	r3, r2
    e830:	7063      	strb	r3, [r4, #1]
    e832:	0030      	movs	r0, r6
    e834:	47a8      	blx	r5
    e836:	9801      	ldr	r0, [sp, #4]
    e838:	b005      	add	sp, #20
    e83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e83c:	00017691 	.word	0x00017691
    e840:	0000b6e1 	.word	0x0000b6e1
    e844:	200029a4 	.word	0x200029a4
    e848:	0000be05 	.word	0x0000be05
    e84c:	0000e655 	.word	0x0000e655

0000e850 <ExecuteDutyCycle>:
    e850:	b570      	push	{r4, r5, r6, lr}
    e852:	7803      	ldrb	r3, [r0, #0]
    e854:	1c46      	adds	r6, r0, #1
    e856:	2b0f      	cmp	r3, #15
    e858:	d80f      	bhi.n	e87a <ExecuteDutyCycle+0x2a>
    e85a:	4c09      	ldr	r4, [pc, #36]	; (e880 <ExecuteDutyCycle+0x30>)
    e85c:	210b      	movs	r1, #11
    e85e:	0022      	movs	r2, r4
    e860:	2000      	movs	r0, #0
    e862:	3298      	adds	r2, #152	; 0x98
    e864:	4d07      	ldr	r5, [pc, #28]	; (e884 <ExecuteDutyCycle+0x34>)
    e866:	7013      	strb	r3, [r2, #0]
    e868:	47a8      	blx	r5
    e86a:	2320      	movs	r3, #32
    e86c:	3484      	adds	r4, #132	; 0x84
    e86e:	7862      	ldrb	r2, [r4, #1]
    e870:	210b      	movs	r1, #11
    e872:	4313      	orrs	r3, r2
    e874:	7063      	strb	r3, [r4, #1]
    e876:	2001      	movs	r0, #1
    e878:	47a8      	blx	r5
    e87a:	0030      	movs	r0, r6
    e87c:	bd70      	pop	{r4, r5, r6, pc}
    e87e:	46c0      	nop			; (mov r8, r8)
    e880:	200029a4 	.word	0x200029a4
    e884:	0000be05 	.word	0x0000be05

0000e888 <ExecuteDlChannel>:
    e888:	b5f0      	push	{r4, r5, r6, r7, lr}
    e88a:	b089      	sub	sp, #36	; 0x24
    e88c:	7805      	ldrb	r5, [r0, #0]
    e88e:	ab02      	add	r3, sp, #8
    e890:	1c41      	adds	r1, r0, #1
    e892:	0007      	movs	r7, r0
    e894:	719d      	strb	r5, [r3, #6]
    e896:	1d9e      	adds	r6, r3, #6
    e898:	2204      	movs	r2, #4
    e89a:	4b23      	ldr	r3, [pc, #140]	; (e928 <ExecuteDlChannel+0xa0>)
    e89c:	a805      	add	r0, sp, #20
    e89e:	4798      	blx	r3
    e8a0:	9b05      	ldr	r3, [sp, #20]
    e8a2:	a904      	add	r1, sp, #16
    e8a4:	021c      	lsls	r4, r3, #8
    e8a6:	2364      	movs	r3, #100	; 0x64
    e8a8:	0a24      	lsrs	r4, r4, #8
    e8aa:	435c      	muls	r4, r3
    e8ac:	1d3b      	adds	r3, r7, #4
    e8ae:	9301      	str	r3, [sp, #4]
    e8b0:	2301      	movs	r3, #1
    e8b2:	2015      	movs	r0, #21
    e8b4:	704b      	strb	r3, [r1, #1]
    e8b6:	4b1d      	ldr	r3, [pc, #116]	; (e92c <ExecuteDlChannel+0xa4>)
    e8b8:	9405      	str	r4, [sp, #20]
    e8ba:	700d      	strb	r5, [r1, #0]
    e8bc:	4798      	blx	r3
    e8be:	2808      	cmp	r0, #8
    e8c0:	d12f      	bne.n	e922 <ExecuteDlChannel+0x9a>
    e8c2:	ab02      	add	r3, sp, #8
    e8c4:	1ddd      	adds	r5, r3, #7
    e8c6:	2300      	movs	r3, #0
    e8c8:	702b      	strb	r3, [r5, #0]
    e8ca:	7833      	ldrb	r3, [r6, #0]
    e8cc:	af06      	add	r7, sp, #24
    e8ce:	713b      	strb	r3, [r7, #4]
    e8d0:	002a      	movs	r2, r5
    e8d2:	0031      	movs	r1, r6
    e8d4:	300e      	adds	r0, #14
    e8d6:	4b16      	ldr	r3, [pc, #88]	; (e930 <ExecuteDlChannel+0xa8>)
    e8d8:	9406      	str	r4, [sp, #24]
    e8da:	4798      	blx	r3
    e8dc:	280a      	cmp	r0, #10
    e8de:	d00d      	beq.n	e8fc <ExecuteDlChannel+0x74>
    e8e0:	782a      	ldrb	r2, [r5, #0]
    e8e2:	2a01      	cmp	r2, #1
    e8e4:	d10a      	bne.n	e8fc <ExecuteDlChannel+0x74>
    e8e6:	4b13      	ldr	r3, [pc, #76]	; (e934 <ExecuteDlChannel+0xac>)
    e8e8:	0019      	movs	r1, r3
    e8ea:	31e0      	adds	r1, #224	; 0xe0
    e8ec:	7808      	ldrb	r0, [r1, #0]
    e8ee:	2103      	movs	r1, #3
    e8f0:	4341      	muls	r1, r0
    e8f2:	185b      	adds	r3, r3, r1
    e8f4:	3398      	adds	r3, #152	; 0x98
    e8f6:	78d9      	ldrb	r1, [r3, #3]
    e8f8:	430a      	orrs	r2, r1
    e8fa:	70da      	strb	r2, [r3, #3]
    e8fc:	0039      	movs	r1, r7
    e8fe:	2033      	movs	r0, #51	; 0x33
    e900:	4b0d      	ldr	r3, [pc, #52]	; (e938 <ExecuteDlChannel+0xb0>)
    e902:	4798      	blx	r3
    e904:	2808      	cmp	r0, #8
    e906:	d10c      	bne.n	e922 <ExecuteDlChannel+0x9a>
    e908:	4b0a      	ldr	r3, [pc, #40]	; (e934 <ExecuteDlChannel+0xac>)
    e90a:	001a      	movs	r2, r3
    e90c:	32e0      	adds	r2, #224	; 0xe0
    e90e:	7811      	ldrb	r1, [r2, #0]
    e910:	2203      	movs	r2, #3
    e912:	434a      	muls	r2, r1
    e914:	189b      	adds	r3, r3, r2
    e916:	2280      	movs	r2, #128	; 0x80
    e918:	3398      	adds	r3, #152	; 0x98
    e91a:	7899      	ldrb	r1, [r3, #2]
    e91c:	4252      	negs	r2, r2
    e91e:	430a      	orrs	r2, r1
    e920:	709a      	strb	r2, [r3, #2]
    e922:	9801      	ldr	r0, [sp, #4]
    e924:	b009      	add	sp, #36	; 0x24
    e926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e928:	00017691 	.word	0x00017691
    e92c:	0000b6e1 	.word	0x0000b6e1
    e930:	0000b6c5 	.word	0x0000b6c5
    e934:	200029a4 	.word	0x200029a4
    e938:	0000b7ed 	.word	0x0000b7ed

0000e93c <ExecuteTxParamSetup>:
    e93c:	220f      	movs	r2, #15
    e93e:	b513      	push	{r0, r1, r4, lr}
    e940:	7803      	ldrb	r3, [r0, #0]
    e942:	4c0f      	ldr	r4, [pc, #60]	; (e980 <ExecuteTxParamSetup+0x44>)
    e944:	401a      	ands	r2, r3
    e946:	5ca2      	ldrb	r2, [r4, r2]
    e948:	2401      	movs	r4, #1
    e94a:	a901      	add	r1, sp, #4
    e94c:	700a      	strb	r2, [r1, #0]
    e94e:	111a      	asrs	r2, r3, #4
    e950:	115b      	asrs	r3, r3, #5
    e952:	4023      	ands	r3, r4
    e954:	40a3      	lsls	r3, r4
    e956:	4022      	ands	r2, r4
    e958:	4313      	orrs	r3, r2
    e95a:	704b      	strb	r3, [r1, #1]
    e95c:	1904      	adds	r4, r0, r4
    e95e:	4b09      	ldr	r3, [pc, #36]	; (e984 <ExecuteTxParamSetup+0x48>)
    e960:	2034      	movs	r0, #52	; 0x34
    e962:	4798      	blx	r3
    e964:	2808      	cmp	r0, #8
    e966:	d009      	beq.n	e97c <ExecuteTxParamSetup+0x40>
    e968:	4b07      	ldr	r3, [pc, #28]	; (e988 <ExecuteTxParamSetup+0x4c>)
    e96a:	001a      	movs	r2, r3
    e96c:	32e0      	adds	r2, #224	; 0xe0
    e96e:	7811      	ldrb	r1, [r2, #0]
    e970:	2203      	movs	r2, #3
    e972:	434a      	muls	r2, r1
    e974:	189b      	adds	r3, r3, r2
    e976:	22ff      	movs	r2, #255	; 0xff
    e978:	3399      	adds	r3, #153	; 0x99
    e97a:	701a      	strb	r2, [r3, #0]
    e97c:	0020      	movs	r0, r4
    e97e:	bd16      	pop	{r1, r2, r4, pc}
    e980:	0001df69 	.word	0x0001df69
    e984:	0000b7ed 	.word	0x0000b7ed
    e988:	200029a4 	.word	0x200029a4

0000e98c <ExecuteLinkAdr>:
    e98c:	220f      	movs	r2, #15
    e98e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e990:	0006      	movs	r6, r0
    e992:	7803      	ldrb	r3, [r0, #0]
    e994:	b089      	sub	sp, #36	; 0x24
    e996:	401a      	ands	r2, r3
    e998:	a905      	add	r1, sp, #20
    e99a:	700a      	strb	r2, [r1, #0]
    e99c:	aa04      	add	r2, sp, #16
    e99e:	1d97      	adds	r7, r2, #6
    e9a0:	091b      	lsrs	r3, r3, #4
    e9a2:	7153      	strb	r3, [r2, #5]
    e9a4:	1c41      	adds	r1, r0, #1
    e9a6:	2202      	movs	r2, #2
    e9a8:	0038      	movs	r0, r7
    e9aa:	4b3d      	ldr	r3, [pc, #244]	; (eaa0 <ExecuteLinkAdr+0x114>)
    e9ac:	4798      	blx	r3
    e9ae:	2201      	movs	r2, #1
    e9b0:	1d33      	adds	r3, r6, #4
    e9b2:	9303      	str	r3, [sp, #12]
    e9b4:	78f3      	ldrb	r3, [r6, #3]
    e9b6:	4c3b      	ldr	r4, [pc, #236]	; (eaa4 <ExecuteLinkAdr+0x118>)
    e9b8:	4d3b      	ldr	r5, [pc, #236]	; (eaa8 <ExecuteLinkAdr+0x11c>)
    e9ba:	065b      	lsls	r3, r3, #25
    e9bc:	0f5b      	lsrs	r3, r3, #29
    e9be:	9300      	str	r3, [sp, #0]
    e9c0:	5d63      	ldrb	r3, [r4, r5]
    e9c2:	a906      	add	r1, sp, #24
    e9c4:	4393      	bics	r3, r2
    e9c6:	1892      	adds	r2, r2, r2
    e9c8:	4393      	bics	r3, r2
    e9ca:	3202      	adds	r2, #2
    e9cc:	4393      	bics	r3, r2
    e9ce:	5563      	strb	r3, [r4, r5]
    e9d0:	883b      	ldrh	r3, [r7, #0]
    e9d2:	2037      	movs	r0, #55	; 0x37
    e9d4:	9302      	str	r3, [sp, #8]
    e9d6:	466b      	mov	r3, sp
    e9d8:	891b      	ldrh	r3, [r3, #8]
    e9da:	4f34      	ldr	r7, [pc, #208]	; (eaac <ExecuteLinkAdr+0x120>)
    e9dc:	804b      	strh	r3, [r1, #2]
    e9de:	466b      	mov	r3, sp
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	700b      	strb	r3, [r1, #0]
    e9e4:	47b8      	blx	r7
    e9e6:	2808      	cmp	r0, #8
    e9e8:	d117      	bne.n	ea1a <ExecuteLinkAdr+0x8e>
    e9ea:	466b      	mov	r3, sp
    e9ec:	891b      	ldrh	r3, [r3, #8]
    e9ee:	a907      	add	r1, sp, #28
    e9f0:	800b      	strh	r3, [r1, #0]
    e9f2:	466b      	mov	r3, sp
    e9f4:	781b      	ldrb	r3, [r3, #0]
    e9f6:	3014      	adds	r0, #20
    e9f8:	708b      	strb	r3, [r1, #2]
    e9fa:	4b2d      	ldr	r3, [pc, #180]	; (eab0 <ExecuteLinkAdr+0x124>)
    e9fc:	4798      	blx	r3
    e9fe:	2201      	movs	r2, #1
    ea00:	5d63      	ldrb	r3, [r4, r5]
    ea02:	2010      	movs	r0, #16
    ea04:	4313      	orrs	r3, r2
    ea06:	5563      	strb	r3, [r4, r5]
    ea08:	ab04      	add	r3, sp, #16
    ea0a:	1d59      	adds	r1, r3, #5
    ea0c:	47b8      	blx	r7
    ea0e:	2808      	cmp	r0, #8
    ea10:	d103      	bne.n	ea1a <ExecuteLinkAdr+0x8e>
    ea12:	2202      	movs	r2, #2
    ea14:	5d63      	ldrb	r3, [r4, r5]
    ea16:	4313      	orrs	r3, r2
    ea18:	5563      	strb	r3, [r4, r5]
    ea1a:	af05      	add	r7, sp, #20
    ea1c:	4b23      	ldr	r3, [pc, #140]	; (eaac <ExecuteLinkAdr+0x120>)
    ea1e:	0039      	movs	r1, r7
    ea20:	201d      	movs	r0, #29
    ea22:	4798      	blx	r3
    ea24:	4b1f      	ldr	r3, [pc, #124]	; (eaa4 <ExecuteLinkAdr+0x118>)
    ea26:	2808      	cmp	r0, #8
    ea28:	d103      	bne.n	ea32 <ExecuteLinkAdr+0xa6>
    ea2a:	2204      	movs	r2, #4
    ea2c:	5d59      	ldrb	r1, [r3, r5]
    ea2e:	430a      	orrs	r2, r1
    ea30:	555a      	strb	r2, [r3, r5]
    ea32:	5d5a      	ldrb	r2, [r3, r5]
    ea34:	43d2      	mvns	r2, r2
    ea36:	0752      	lsls	r2, r2, #29
    ea38:	d12a      	bne.n	ea90 <ExecuteLinkAdr+0x104>
    ea3a:	4669      	mov	r1, sp
    ea3c:	4a1d      	ldr	r2, [pc, #116]	; (eab4 <ExecuteLinkAdr+0x128>)
    ea3e:	7a09      	ldrb	r1, [r1, #8]
    ea40:	5499      	strb	r1, [r3, r2]
    ea42:	9a02      	ldr	r2, [sp, #8]
    ea44:	491b      	ldr	r1, [pc, #108]	; (eab4 <ExecuteLinkAdr+0x128>)
    ea46:	0a12      	lsrs	r2, r2, #8
    ea48:	1859      	adds	r1, r3, r1
    ea4a:	704a      	strb	r2, [r1, #1]
    ea4c:	aa04      	add	r2, sp, #16
    ea4e:	3205      	adds	r2, #5
    ea50:	7812      	ldrb	r2, [r2, #0]
    ea52:	2a0f      	cmp	r2, #15
    ea54:	d101      	bne.n	ea5a <ExecuteLinkAdr+0xce>
    ea56:	33e7      	adds	r3, #231	; 0xe7
    ea58:	781a      	ldrb	r2, [r3, #0]
    ea5a:	2389      	movs	r3, #137	; 0x89
    ea5c:	2170      	movs	r1, #112	; 0x70
    ea5e:	2070      	movs	r0, #112	; 0x70
    ea60:	009b      	lsls	r3, r3, #2
    ea62:	54e2      	strb	r2, [r4, r3]
    ea64:	78f3      	ldrb	r3, [r6, #3]
    ea66:	4a14      	ldr	r2, [pc, #80]	; (eab8 <ExecuteLinkAdr+0x12c>)
    ea68:	4019      	ands	r1, r3
    ea6a:	5ca3      	ldrb	r3, [r4, r2]
    ea6c:	4383      	bics	r3, r0
    ea6e:	430b      	orrs	r3, r1
    ea70:	54a3      	strb	r3, [r4, r2]
    ea72:	78f1      	ldrb	r1, [r6, #3]
    ea74:	3861      	subs	r0, #97	; 0x61
    ea76:	b2db      	uxtb	r3, r3
    ea78:	4001      	ands	r1, r0
    ea7a:	4383      	bics	r3, r0
    ea7c:	430b      	orrs	r3, r1
    ea7e:	54a3      	strb	r3, [r4, r2]
    ea80:	783b      	ldrb	r3, [r7, #0]
    ea82:	4283      	cmp	r3, r0
    ea84:	d101      	bne.n	ea8a <ExecuteLinkAdr+0xfe>
    ea86:	34e9      	adds	r4, #233	; 0xe9
    ea88:	7823      	ldrb	r3, [r4, #0]
    ea8a:	4a0c      	ldr	r2, [pc, #48]	; (eabc <ExecuteLinkAdr+0x130>)
    ea8c:	4905      	ldr	r1, [pc, #20]	; (eaa4 <ExecuteLinkAdr+0x118>)
    ea8e:	548b      	strb	r3, [r1, r2]
    ea90:	4904      	ldr	r1, [pc, #16]	; (eaa4 <ExecuteLinkAdr+0x118>)
    ea92:	4a0b      	ldr	r2, [pc, #44]	; (eac0 <ExecuteLinkAdr+0x134>)
    ea94:	9803      	ldr	r0, [sp, #12]
    ea96:	5c8b      	ldrb	r3, [r1, r2]
    ea98:	3301      	adds	r3, #1
    ea9a:	548b      	strb	r3, [r1, r2]
    ea9c:	b009      	add	sp, #36	; 0x24
    ea9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eaa0:	00017691 	.word	0x00017691
    eaa4:	200029a4 	.word	0x200029a4
    eaa8:	00000223 	.word	0x00000223
    eaac:	0000b6e1 	.word	0x0000b6e1
    eab0:	0000b7ed 	.word	0x0000b7ed
    eab4:	00000227 	.word	0x00000227
    eab8:	00000229 	.word	0x00000229
    eabc:	00000225 	.word	0x00000225
    eac0:	00000226 	.word	0x00000226

0000eac4 <ExecuteDevTimeAns>:
    eac4:	b510      	push	{r4, lr}
    eac6:	0001      	movs	r1, r0
    eac8:	0004      	movs	r4, r0
    eaca:	2204      	movs	r2, #4
    eacc:	4b04      	ldr	r3, [pc, #16]	; (eae0 <ExecuteDevTimeAns+0x1c>)
    eace:	4805      	ldr	r0, [pc, #20]	; (eae4 <ExecuteDevTimeAns+0x20>)
    ead0:	4798      	blx	r3
    ead2:	238e      	movs	r3, #142	; 0x8e
    ead4:	7921      	ldrb	r1, [r4, #4]
    ead6:	4a04      	ldr	r2, [pc, #16]	; (eae8 <ExecuteDevTimeAns+0x24>)
    ead8:	009b      	lsls	r3, r3, #2
    eada:	1d60      	adds	r0, r4, #5
    eadc:	54d1      	strb	r1, [r2, r3]
    eade:	bd10      	pop	{r4, pc}
    eae0:	00017691 	.word	0x00017691
    eae4:	20002bd8 	.word	0x20002bd8
    eae8:	200029a4 	.word	0x200029a4

0000eaec <PrepareJoinRequestFrame>:
    eaec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    eaee:	2210      	movs	r2, #16
    eaf0:	4d23      	ldr	r5, [pc, #140]	; (eb80 <PrepareJoinRequestFrame+0x94>)
    eaf2:	4b24      	ldr	r3, [pc, #144]	; (eb84 <PrepareJoinRequestFrame+0x98>)
    eaf4:	32ff      	adds	r2, #255	; 0xff
    eaf6:	2100      	movs	r1, #0
    eaf8:	0028      	movs	r0, r5
    eafa:	4798      	blx	r3
    eafc:	2300      	movs	r3, #0
    eafe:	4c22      	ldr	r4, [pc, #136]	; (eb88 <PrepareJoinRequestFrame+0x9c>)
    eb00:	702b      	strb	r3, [r5, #0]
    eb02:	4b22      	ldr	r3, [pc, #136]	; (eb8c <PrepareJoinRequestFrame+0xa0>)
    eb04:	5ce3      	ldrb	r3, [r4, r3]
    eb06:	2b00      	cmp	r3, #0
    eb08:	d006      	beq.n	eb18 <PrepareJoinRequestFrame+0x2c>
    eb0a:	4921      	ldr	r1, [pc, #132]	; (eb90 <PrepareJoinRequestFrame+0xa4>)
    eb0c:	2006      	movs	r0, #6
    eb0e:	4e21      	ldr	r6, [pc, #132]	; (eb94 <PrepareJoinRequestFrame+0xa8>)
    eb10:	47b0      	blx	r6
    eb12:	4921      	ldr	r1, [pc, #132]	; (eb98 <PrepareJoinRequestFrame+0xac>)
    eb14:	2007      	movs	r0, #7
    eb16:	47b0      	blx	r6
    eb18:	2300      	movs	r3, #0
    eb1a:	205c      	movs	r0, #92	; 0x5c
    eb1c:	1ac1      	subs	r1, r0, r3
    eb1e:	5c61      	ldrb	r1, [r4, r1]
    eb20:	18ea      	adds	r2, r5, r3
    eb22:	3301      	adds	r3, #1
    eb24:	7051      	strb	r1, [r2, #1]
    eb26:	2b08      	cmp	r3, #8
    eb28:	d1f8      	bne.n	eb1c <PrepareJoinRequestFrame+0x30>
    eb2a:	2300      	movs	r3, #0
    eb2c:	2064      	movs	r0, #100	; 0x64
    eb2e:	1ac1      	subs	r1, r0, r3
    eb30:	5c61      	ldrb	r1, [r4, r1]
    eb32:	18ea      	adds	r2, r5, r3
    eb34:	3301      	adds	r3, #1
    eb36:	7251      	strb	r1, [r2, #9]
    eb38:	2b08      	cmp	r3, #8
    eb3a:	d1f8      	bne.n	eb2e <PrepareJoinRequestFrame+0x42>
    eb3c:	34cc      	adds	r4, #204	; 0xcc
    eb3e:	8823      	ldrh	r3, [r4, #0]
    eb40:	2116      	movs	r1, #22
    eb42:	3301      	adds	r3, #1
    eb44:	8023      	strh	r3, [r4, #0]
    eb46:	2000      	movs	r0, #0
    eb48:	4b14      	ldr	r3, [pc, #80]	; (eb9c <PrepareJoinRequestFrame+0xb0>)
    eb4a:	4798      	blx	r3
    eb4c:	0021      	movs	r1, r4
    eb4e:	2202      	movs	r2, #2
    eb50:	4c13      	ldr	r4, [pc, #76]	; (eba0 <PrepareJoinRequestFrame+0xb4>)
    eb52:	4814      	ldr	r0, [pc, #80]	; (eba4 <PrepareJoinRequestFrame+0xb8>)
    eb54:	47a0      	blx	r4
    eb56:	2313      	movs	r3, #19
    eb58:	4e13      	ldr	r6, [pc, #76]	; (eba8 <PrepareJoinRequestFrame+0xbc>)
    eb5a:	9300      	str	r3, [sp, #0]
    eb5c:	0032      	movs	r2, r6
    eb5e:	002b      	movs	r3, r5
    eb60:	2100      	movs	r1, #0
    eb62:	4d12      	ldr	r5, [pc, #72]	; (ebac <PrepareJoinRequestFrame+0xc0>)
    eb64:	4812      	ldr	r0, [pc, #72]	; (ebb0 <PrepareJoinRequestFrame+0xc4>)
    eb66:	47a8      	blx	r5
    eb68:	0031      	movs	r1, r6
    eb6a:	2204      	movs	r2, #4
    eb6c:	a803      	add	r0, sp, #12
    eb6e:	47a0      	blx	r4
    eb70:	2204      	movs	r2, #4
    eb72:	a903      	add	r1, sp, #12
    eb74:	480f      	ldr	r0, [pc, #60]	; (ebb4 <PrepareJoinRequestFrame+0xc8>)
    eb76:	47a0      	blx	r4
    eb78:	2017      	movs	r0, #23
    eb7a:	b004      	add	sp, #16
    eb7c:	bd70      	pop	{r4, r5, r6, pc}
    eb7e:	46c0      	nop			; (mov r8, r8)
    eb80:	20002bed 	.word	0x20002bed
    eb84:	00017715 	.word	0x00017715
    eb88:	200029a4 	.word	0x200029a4
    eb8c:	0000022d 	.word	0x0000022d
    eb90:	200029f9 	.word	0x200029f9
    eb94:	0000bb0d 	.word	0x0000bb0d
    eb98:	20002a01 	.word	0x20002a01
    eb9c:	0000be05 	.word	0x0000be05
    eba0:	00017691 	.word	0x00017691
    eba4:	20002bfe 	.word	0x20002bfe
    eba8:	20000f50 	.word	0x20000f50
    ebac:	0000bb11 	.word	0x0000bb11
    ebb0:	200029e9 	.word	0x200029e9
    ebb4:	20002c00 	.word	0x20002c00

0000ebb8 <ConfigureRadioRx>:
    ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebba:	b087      	sub	sp, #28
    ebbc:	466b      	mov	r3, sp
    ebbe:	2600      	movs	r6, #0
    ebc0:	1ddc      	adds	r4, r3, #7
    ebc2:	71d8      	strb	r0, [r3, #7]
    ebc4:	729e      	strb	r6, [r3, #10]
    ebc6:	466a      	mov	r2, sp
    ebc8:	2301      	movs	r3, #1
    ebca:	72d3      	strb	r3, [r2, #11]
    ebcc:	2215      	movs	r2, #21
    ebce:	ad03      	add	r5, sp, #12
    ebd0:	4f11      	ldr	r7, [pc, #68]	; (ec18 <ConfigureRadioRx+0x60>)
    ebd2:	9100      	str	r1, [sp, #0]
    ebd4:	446a      	add	r2, sp
    ebd6:	0021      	movs	r1, r4
    ebd8:	2023      	movs	r0, #35	; 0x23
    ebda:	80ae      	strh	r6, [r5, #4]
    ebdc:	47b8      	blx	r7
    ebde:	2216      	movs	r2, #22
    ebe0:	0021      	movs	r1, r4
    ebe2:	446a      	add	r2, sp
    ebe4:	2024      	movs	r0, #36	; 0x24
    ebe6:	47b8      	blx	r7
    ebe8:	2217      	movs	r2, #23
    ebea:	0021      	movs	r1, r4
    ebec:	446a      	add	r2, sp
    ebee:	2025      	movs	r0, #37	; 0x25
    ebf0:	47b8      	blx	r7
    ebf2:	9b00      	ldr	r3, [sp, #0]
    ebf4:	0028      	movs	r0, r5
    ebf6:	9303      	str	r3, [sp, #12]
    ebf8:	4b08      	ldr	r3, [pc, #32]	; (ec1c <ConfigureRadioRx+0x64>)
    ebfa:	80ae      	strh	r6, [r5, #4]
    ebfc:	4798      	blx	r3
    ebfe:	230a      	movs	r3, #10
    ec00:	446b      	add	r3, sp
    ec02:	0019      	movs	r1, r3
    ec04:	4c06      	ldr	r4, [pc, #24]	; (ec20 <ConfigureRadioRx+0x68>)
    ec06:	2014      	movs	r0, #20
    ec08:	47a0      	blx	r4
    ec0a:	230b      	movs	r3, #11
    ec0c:	446b      	add	r3, sp
    ec0e:	0019      	movs	r1, r3
    ec10:	2006      	movs	r0, #6
    ec12:	47a0      	blx	r4
    ec14:	b007      	add	sp, #28
    ec16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec18:	0000b6c5 	.word	0x0000b6c5
    ec1c:	0000df65 	.word	0x0000df65
    ec20:	00012b31 	.word	0x00012b31

0000ec24 <LorawanReceiveWindow1Callback>:
    ec24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec26:	4c1a      	ldr	r4, [pc, #104]	; (ec90 <LorawanReceiveWindow1Callback+0x6c>)
    ec28:	0023      	movs	r3, r4
    ec2a:	3384      	adds	r3, #132	; 0x84
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	b25a      	sxtb	r2, r3
    ec30:	2a00      	cmp	r2, #0
    ec32:	db2c      	blt.n	ec8e <LorawanReceiveWindow1Callback+0x6a>
    ec34:	0022      	movs	r2, r4
    ec36:	32fd      	adds	r2, #253	; 0xfd
    ec38:	7812      	ldrb	r2, [r2, #0]
    ec3a:	2a04      	cmp	r2, #4
    ec3c:	d107      	bne.n	ec4e <LorawanReceiveWindow1Callback+0x2a>
    ec3e:	07db      	lsls	r3, r3, #31
    ec40:	d505      	bpl.n	ec4e <LorawanReceiveWindow1Callback+0x2a>
    ec42:	2390      	movs	r3, #144	; 0x90
    ec44:	2200      	movs	r2, #0
    ec46:	009b      	lsls	r3, r3, #2
    ec48:	54e2      	strb	r2, [r4, r3]
    ec4a:	4b12      	ldr	r3, [pc, #72]	; (ec94 <LorawanReceiveWindow1Callback+0x70>)
    ec4c:	4798      	blx	r3
    ec4e:	0021      	movs	r1, r4
    ec50:	220e      	movs	r2, #14
    ec52:	3184      	adds	r1, #132	; 0x84
    ec54:	780b      	ldrb	r3, [r1, #0]
    ec56:	ad01      	add	r5, sp, #4
    ec58:	4393      	bics	r3, r2
    ec5a:	001a      	movs	r2, r3
    ec5c:	2306      	movs	r3, #6
    ec5e:	4313      	orrs	r3, r2
    ec60:	0022      	movs	r2, r4
    ec62:	700b      	strb	r3, [r1, #0]
    ec64:	3268      	adds	r2, #104	; 0x68
    ec66:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ec68:	7811      	ldrb	r1, [r2, #0]
    ec6a:	0a1b      	lsrs	r3, r3, #8
    ec6c:	3469      	adds	r4, #105	; 0x69
    ec6e:	0609      	lsls	r1, r1, #24
    ec70:	4319      	orrs	r1, r3
    ec72:	7820      	ldrb	r0, [r4, #0]
    ec74:	4b08      	ldr	r3, [pc, #32]	; (ec98 <LorawanReceiveWindow1Callback+0x74>)
    ec76:	4798      	blx	r3
    ec78:	2300      	movs	r3, #0
    ec7a:	702b      	strb	r3, [r5, #0]
    ec7c:	466b      	mov	r3, sp
    ec7e:	0021      	movs	r1, r4
    ec80:	1d9a      	adds	r2, r3, #6
    ec82:	2003      	movs	r0, #3
    ec84:	4b05      	ldr	r3, [pc, #20]	; (ec9c <LorawanReceiveWindow1Callback+0x78>)
    ec86:	4798      	blx	r3
    ec88:	0028      	movs	r0, r5
    ec8a:	4b05      	ldr	r3, [pc, #20]	; (eca0 <LorawanReceiveWindow1Callback+0x7c>)
    ec8c:	4798      	blx	r3
    ec8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ec90:	200029a4 	.word	0x200029a4
    ec94:	000120fd 	.word	0x000120fd
    ec98:	0000ebb9 	.word	0x0000ebb9
    ec9c:	0000b6c5 	.word	0x0000b6c5
    eca0:	00013d35 	.word	0x00013d35

0000eca4 <ConfigureRadioTx>:
    eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eca6:	2517      	movs	r5, #23
    eca8:	2300      	movs	r3, #0
    ecaa:	2616      	movs	r6, #22
    ecac:	2701      	movs	r7, #1
    ecae:	b087      	sub	sp, #28
    ecb0:	ac01      	add	r4, sp, #4
    ecb2:	446d      	add	r5, sp
    ecb4:	9001      	str	r0, [sp, #4]
    ecb6:	702b      	strb	r3, [r5, #0]
    ecb8:	0020      	movs	r0, r4
    ecba:	4b10      	ldr	r3, [pc, #64]	; (ecfc <ConfigureRadioTx+0x58>)
    ecbc:	446e      	add	r6, sp
    ecbe:	9102      	str	r1, [sp, #8]
    ecc0:	9203      	str	r2, [sp, #12]
    ecc2:	7037      	strb	r7, [r6, #0]
    ecc4:	4798      	blx	r3
    ecc6:	79e3      	ldrb	r3, [r4, #7]
    ecc8:	4c0d      	ldr	r4, [pc, #52]	; (ed00 <ConfigureRadioTx+0x5c>)
    ecca:	2b00      	cmp	r3, #0
    eccc:	d00a      	beq.n	ece4 <ConfigureRadioTx+0x40>
    ecce:	4b0d      	ldr	r3, [pc, #52]	; (ed04 <ConfigureRadioTx+0x60>)
    ecd0:	4a0d      	ldr	r2, [pc, #52]	; (ed08 <ConfigureRadioTx+0x64>)
    ecd2:	490e      	ldr	r1, [pc, #56]	; (ed0c <ConfigureRadioTx+0x68>)
    ecd4:	54d7      	strb	r7, [r2, r3]
    ecd6:	200b      	movs	r0, #11
    ecd8:	4b0d      	ldr	r3, [pc, #52]	; (ed10 <ConfigureRadioTx+0x6c>)
    ecda:	4798      	blx	r3
    ecdc:	210a      	movs	r1, #10
    ecde:	200b      	movs	r0, #11
    ece0:	4469      	add	r1, sp
    ece2:	47a0      	blx	r4
    ece4:	a903      	add	r1, sp, #12
    ece6:	2004      	movs	r0, #4
    ece8:	47a0      	blx	r4
    ecea:	0031      	movs	r1, r6
    ecec:	2014      	movs	r0, #20
    ecee:	47a0      	blx	r4
    ecf0:	0029      	movs	r1, r5
    ecf2:	2006      	movs	r0, #6
    ecf4:	47a0      	blx	r4
    ecf6:	b007      	add	sp, #28
    ecf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecfa:	46c0      	nop			; (mov r8, r8)
    ecfc:	0000df65 	.word	0x0000df65
    ed00:	00012b31 	.word	0x00012b31
    ed04:	00000222 	.word	0x00000222
    ed08:	200029a4 	.word	0x200029a4
    ed0c:	20002bc5 	.word	0x20002bc5
    ed10:	00012a41 	.word	0x00012a41

0000ed14 <LorawanGetChAndInitiateRadioTransmit>:
    ed14:	2301      	movs	r3, #1
    ed16:	b530      	push	{r4, r5, lr}
    ed18:	4c46      	ldr	r4, [pc, #280]	; (ee34 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    ed1a:	b089      	sub	sp, #36	; 0x24
    ed1c:	a902      	add	r1, sp, #8
    ed1e:	700b      	strb	r3, [r1, #0]
    ed20:	0023      	movs	r3, r4
    ed22:	33e9      	adds	r3, #233	; 0xe9
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	704b      	strb	r3, [r1, #1]
    ed28:	0023      	movs	r3, r4
    ed2a:	33e7      	adds	r3, #231	; 0xe7
    ed2c:	781b      	ldrb	r3, [r3, #0]
    ed2e:	708b      	strb	r3, [r1, #2]
    ed30:	0023      	movs	r3, r4
    ed32:	33fd      	adds	r3, #253	; 0xfd
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2b01      	cmp	r3, #1
    ed38:	d108      	bne.n	ed4c <LorawanGetChAndInitiateRadioTransmit+0x38>
    ed3a:	0020      	movs	r0, r4
    ed3c:	220e      	movs	r2, #14
    ed3e:	3084      	adds	r0, #132	; 0x84
    ed40:	7803      	ldrb	r3, [r0, #0]
    ed42:	4393      	bics	r3, r2
    ed44:	001a      	movs	r2, r3
    ed46:	230c      	movs	r3, #12
    ed48:	4313      	orrs	r3, r2
    ed4a:	7003      	strb	r3, [r0, #0]
    ed4c:	aa05      	add	r2, sp, #20
    ed4e:	202e      	movs	r0, #46	; 0x2e
    ed50:	4d39      	ldr	r5, [pc, #228]	; (ee38 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    ed52:	47a8      	blx	r5
    ed54:	0023      	movs	r3, r4
    ed56:	2808      	cmp	r0, #8
    ed58:	d135      	bne.n	edc6 <LorawanGetChAndInitiateRadioTransmit+0xb2>
    ed5a:	33fd      	adds	r3, #253	; 0xfd
    ed5c:	781b      	ldrb	r3, [r3, #0]
    ed5e:	ad03      	add	r5, sp, #12
    ed60:	2b04      	cmp	r3, #4
    ed62:	d108      	bne.n	ed76 <LorawanGetChAndInitiateRadioTransmit+0x62>
    ed64:	2390      	movs	r3, #144	; 0x90
    ed66:	2200      	movs	r2, #0
    ed68:	009b      	lsls	r3, r3, #2
    ed6a:	54e2      	strb	r2, [r4, r3]
    ed6c:	2301      	movs	r3, #1
    ed6e:	0028      	movs	r0, r5
    ed70:	702b      	strb	r3, [r5, #0]
    ed72:	4b32      	ldr	r3, [pc, #200]	; (ee3c <LorawanGetChAndInitiateRadioTransmit+0x128>)
    ed74:	4798      	blx	r3
    ed76:	9805      	ldr	r0, [sp, #20]
    ed78:	4b31      	ldr	r3, [pc, #196]	; (ee40 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    ed7a:	9906      	ldr	r1, [sp, #24]
    ed7c:	9a07      	ldr	r2, [sp, #28]
    ed7e:	4798      	blx	r3
    ed80:	0023      	movs	r3, r4
    ed82:	33ce      	adds	r3, #206	; 0xce
    ed84:	881b      	ldrh	r3, [r3, #0]
    ed86:	0028      	movs	r0, r5
    ed88:	702b      	strb	r3, [r5, #0]
    ed8a:	4b2e      	ldr	r3, [pc, #184]	; (ee44 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    ed8c:	606b      	str	r3, [r5, #4]
    ed8e:	4b2e      	ldr	r3, [pc, #184]	; (ee48 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    ed90:	4798      	blx	r3
    ed92:	2800      	cmp	r0, #0
    ed94:	d109      	bne.n	edaa <LorawanGetChAndInitiateRadioTransmit+0x96>
    ed96:	220e      	movs	r2, #14
    ed98:	3484      	adds	r4, #132	; 0x84
    ed9a:	7823      	ldrb	r3, [r4, #0]
    ed9c:	4393      	bics	r3, r2
    ed9e:	001a      	movs	r2, r3
    eda0:	2302      	movs	r3, #2
    eda2:	4313      	orrs	r3, r2
    eda4:	7023      	strb	r3, [r4, #0]
    eda6:	b009      	add	sp, #36	; 0x24
    eda8:	bd30      	pop	{r4, r5, pc}
    edaa:	2200      	movs	r2, #0
    edac:	4b27      	ldr	r3, [pc, #156]	; (ee4c <LorawanGetChAndInitiateRadioTransmit+0x138>)
    edae:	4928      	ldr	r1, [pc, #160]	; (ee50 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    edb0:	5ce3      	ldrb	r3, [r4, r3]
    edb2:	34fc      	adds	r4, #252	; 0xfc
    edb4:	4359      	muls	r1, r3
    edb6:	4b27      	ldr	r3, [pc, #156]	; (ee54 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    edb8:	7820      	ldrb	r0, [r4, #0]
    edba:	18c9      	adds	r1, r1, r3
    edbc:	4b26      	ldr	r3, [pc, #152]	; (ee58 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    edbe:	9200      	str	r2, [sp, #0]
    edc0:	4c26      	ldr	r4, [pc, #152]	; (ee5c <LorawanGetChAndInitiateRadioTransmit+0x148>)
    edc2:	47a0      	blx	r4
    edc4:	e7ef      	b.n	eda6 <LorawanGetChAndInitiateRadioTransmit+0x92>
    edc6:	33ff      	adds	r3, #255	; 0xff
    edc8:	7f5b      	ldrb	r3, [r3, #29]
    edca:	079a      	lsls	r2, r3, #30
    edcc:	d515      	bpl.n	edfa <LorawanGetChAndInitiateRadioTransmit+0xe6>
    edce:	aa03      	add	r2, sp, #12
    edd0:	4923      	ldr	r1, [pc, #140]	; (ee60 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    edd2:	2026      	movs	r0, #38	; 0x26
    edd4:	47a8      	blx	r5
    edd6:	9b03      	ldr	r3, [sp, #12]
    edd8:	1c5a      	adds	r2, r3, #1
    edda:	d001      	beq.n	ede0 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    eddc:	3314      	adds	r3, #20
    edde:	9303      	str	r3, [sp, #12]
    ede0:	21fa      	movs	r1, #250	; 0xfa
    ede2:	4b1a      	ldr	r3, [pc, #104]	; (ee4c <LorawanGetChAndInitiateRadioTransmit+0x138>)
    ede4:	9a03      	ldr	r2, [sp, #12]
    ede6:	5ce3      	ldrb	r3, [r4, r3]
    ede8:	0089      	lsls	r1, r1, #2
    edea:	1ad3      	subs	r3, r2, r3
    edec:	2200      	movs	r2, #0
    edee:	4359      	muls	r1, r3
    edf0:	34f2      	adds	r4, #242	; 0xf2
    edf2:	7820      	ldrb	r0, [r4, #0]
    edf4:	9200      	str	r2, [sp, #0]
    edf6:	4b1b      	ldr	r3, [pc, #108]	; (ee64 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    edf8:	e7e2      	b.n	edc0 <LorawanGetChAndInitiateRadioTransmit+0xac>
    edfa:	075b      	lsls	r3, r3, #29
    edfc:	d508      	bpl.n	ee10 <LorawanGetChAndInitiateRadioTransmit+0xfc>
    edfe:	aa03      	add	r2, sp, #12
    ee00:	4917      	ldr	r1, [pc, #92]	; (ee60 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    ee02:	2032      	movs	r0, #50	; 0x32
    ee04:	47a8      	blx	r5
    ee06:	9b03      	ldr	r3, [sp, #12]
    ee08:	1c5a      	adds	r2, r3, #1
    ee0a:	d0e9      	beq.n	ede0 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    ee0c:	3301      	adds	r3, #1
    ee0e:	e7e6      	b.n	edde <LorawanGetChAndInitiateRadioTransmit+0xca>
    ee10:	0023      	movs	r3, r4
    ee12:	2201      	movs	r2, #1
    ee14:	3394      	adds	r3, #148	; 0x94
    ee16:	781b      	ldrb	r3, [r3, #0]
    ee18:	401a      	ands	r2, r3
    ee1a:	d108      	bne.n	ee2e <LorawanGetChAndInitiateRadioTransmit+0x11a>
    ee1c:	4b0b      	ldr	r3, [pc, #44]	; (ee4c <LorawanGetChAndInitiateRadioTransmit+0x138>)
    ee1e:	490c      	ldr	r1, [pc, #48]	; (ee50 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    ee20:	5ce3      	ldrb	r3, [r4, r3]
    ee22:	34f2      	adds	r4, #242	; 0xf2
    ee24:	4359      	muls	r1, r3
    ee26:	4b0b      	ldr	r3, [pc, #44]	; (ee54 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    ee28:	7820      	ldrb	r0, [r4, #0]
    ee2a:	18c9      	adds	r1, r1, r3
    ee2c:	e7e2      	b.n	edf4 <LorawanGetChAndInitiateRadioTransmit+0xe0>
    ee2e:	4b0e      	ldr	r3, [pc, #56]	; (ee68 <LorawanGetChAndInitiateRadioTransmit+0x154>)
    ee30:	4798      	blx	r3
    ee32:	e7b8      	b.n	eda6 <LorawanGetChAndInitiateRadioTransmit+0x92>
    ee34:	200029a4 	.word	0x200029a4
    ee38:	0000b6c5 	.word	0x0000b6c5
    ee3c:	00013d35 	.word	0x00013d35
    ee40:	0000eca5 	.word	0x0000eca5
    ee44:	20002bfd 	.word	0x20002bfd
    ee48:	00013461 	.word	0x00013461
    ee4c:	0000022b 	.word	0x0000022b
    ee50:	fffffc18 	.word	0xfffffc18
    ee54:	001e8480 	.word	0x001e8480
    ee58:	0000ee6d 	.word	0x0000ee6d
    ee5c:	0000cb35 	.word	0x0000cb35
    ee60:	20002a8b 	.word	0x20002a8b
    ee64:	0000ef25 	.word	0x0000ef25
    ee68:	0000e601 	.word	0x0000e601

0000ee6c <TransmissionErrorCallback>:
    ee6c:	b530      	push	{r4, r5, lr}
    ee6e:	4c22      	ldr	r4, [pc, #136]	; (eef8 <TransmissionErrorCallback+0x8c>)
    ee70:	2501      	movs	r5, #1
    ee72:	0023      	movs	r3, r4
    ee74:	b08b      	sub	sp, #44	; 0x2c
    ee76:	a903      	add	r1, sp, #12
    ee78:	700d      	strb	r5, [r1, #0]
    ee7a:	33e9      	adds	r3, #233	; 0xe9
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	aa07      	add	r2, sp, #28
    ee80:	704b      	strb	r3, [r1, #1]
    ee82:	0023      	movs	r3, r4
    ee84:	33e7      	adds	r3, #231	; 0xe7
    ee86:	781b      	ldrb	r3, [r3, #0]
    ee88:	202e      	movs	r0, #46	; 0x2e
    ee8a:	708b      	strb	r3, [r1, #2]
    ee8c:	4b1b      	ldr	r3, [pc, #108]	; (eefc <TransmissionErrorCallback+0x90>)
    ee8e:	4798      	blx	r3
    ee90:	2808      	cmp	r0, #8
    ee92:	d121      	bne.n	eed8 <TransmissionErrorCallback+0x6c>
    ee94:	a804      	add	r0, sp, #16
    ee96:	4b1a      	ldr	r3, [pc, #104]	; (ef00 <TransmissionErrorCallback+0x94>)
    ee98:	7005      	strb	r5, [r0, #0]
    ee9a:	4798      	blx	r3
    ee9c:	9807      	ldr	r0, [sp, #28]
    ee9e:	4b19      	ldr	r3, [pc, #100]	; (ef04 <TransmissionErrorCallback+0x98>)
    eea0:	9908      	ldr	r1, [sp, #32]
    eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eea4:	4798      	blx	r3
    eea6:	0023      	movs	r3, r4
    eea8:	33ce      	adds	r3, #206	; 0xce
    eeaa:	881b      	ldrh	r3, [r3, #0]
    eeac:	a805      	add	r0, sp, #20
    eeae:	7003      	strb	r3, [r0, #0]
    eeb0:	4b15      	ldr	r3, [pc, #84]	; (ef08 <TransmissionErrorCallback+0x9c>)
    eeb2:	6043      	str	r3, [r0, #4]
    eeb4:	4b15      	ldr	r3, [pc, #84]	; (ef0c <TransmissionErrorCallback+0xa0>)
    eeb6:	4798      	blx	r3
    eeb8:	2800      	cmp	r0, #0
    eeba:	d01a      	beq.n	eef2 <TransmissionErrorCallback+0x86>
    eebc:	0023      	movs	r3, r4
    eebe:	33fd      	adds	r3, #253	; 0xfd
    eec0:	781b      	ldrb	r3, [r3, #0]
    eec2:	42ab      	cmp	r3, r5
    eec4:	d108      	bne.n	eed8 <TransmissionErrorCallback+0x6c>
    eec6:	0021      	movs	r1, r4
    eec8:	220e      	movs	r2, #14
    eeca:	3184      	adds	r1, #132	; 0x84
    eecc:	780b      	ldrb	r3, [r1, #0]
    eece:	4393      	bics	r3, r2
    eed0:	001a      	movs	r2, r3
    eed2:	230c      	movs	r3, #12
    eed4:	4313      	orrs	r3, r2
    eed6:	700b      	strb	r3, [r1, #0]
    eed8:	2200      	movs	r2, #0
    eeda:	4b0d      	ldr	r3, [pc, #52]	; (ef10 <TransmissionErrorCallback+0xa4>)
    eedc:	490d      	ldr	r1, [pc, #52]	; (ef14 <TransmissionErrorCallback+0xa8>)
    eede:	5ce3      	ldrb	r3, [r4, r3]
    eee0:	34fc      	adds	r4, #252	; 0xfc
    eee2:	4359      	muls	r1, r3
    eee4:	4b0c      	ldr	r3, [pc, #48]	; (ef18 <TransmissionErrorCallback+0xac>)
    eee6:	7820      	ldrb	r0, [r4, #0]
    eee8:	18c9      	adds	r1, r1, r3
    eeea:	9200      	str	r2, [sp, #0]
    eeec:	4b0b      	ldr	r3, [pc, #44]	; (ef1c <TransmissionErrorCallback+0xb0>)
    eeee:	4c0c      	ldr	r4, [pc, #48]	; (ef20 <TransmissionErrorCallback+0xb4>)
    eef0:	47a0      	blx	r4
    eef2:	b00b      	add	sp, #44	; 0x2c
    eef4:	bd30      	pop	{r4, r5, pc}
    eef6:	46c0      	nop			; (mov r8, r8)
    eef8:	200029a4 	.word	0x200029a4
    eefc:	0000b6c5 	.word	0x0000b6c5
    ef00:	00013d35 	.word	0x00013d35
    ef04:	0000eca5 	.word	0x0000eca5
    ef08:	20002bfd 	.word	0x20002bfd
    ef0c:	00013461 	.word	0x00013461
    ef10:	0000022b 	.word	0x0000022b
    ef14:	fffffc18 	.word	0xfffffc18
    ef18:	001e8480 	.word	0x001e8480
    ef1c:	0000ee6d 	.word	0x0000ee6d
    ef20:	0000cb35 	.word	0x0000cb35

0000ef24 <UnconfirmedTransmissionCallback>:
    ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef26:	4c3a      	ldr	r4, [pc, #232]	; (f010 <UnconfirmedTransmissionCallback+0xec>)
    ef28:	b08b      	sub	sp, #44	; 0x2c
    ef2a:	0023      	movs	r3, r4
    ef2c:	33ce      	adds	r3, #206	; 0xce
    ef2e:	881b      	ldrh	r3, [r3, #0]
    ef30:	af05      	add	r7, sp, #20
    ef32:	703b      	strb	r3, [r7, #0]
    ef34:	4b37      	ldr	r3, [pc, #220]	; (f014 <UnconfirmedTransmissionCallback+0xf0>)
    ef36:	a903      	add	r1, sp, #12
    ef38:	9306      	str	r3, [sp, #24]
    ef3a:	2301      	movs	r3, #1
    ef3c:	700b      	strb	r3, [r1, #0]
    ef3e:	0023      	movs	r3, r4
    ef40:	0026      	movs	r6, r4
    ef42:	33e9      	adds	r3, #233	; 0xe9
    ef44:	781b      	ldrb	r3, [r3, #0]
    ef46:	36e7      	adds	r6, #231	; 0xe7
    ef48:	704b      	strb	r3, [r1, #1]
    ef4a:	7833      	ldrb	r3, [r6, #0]
    ef4c:	aa07      	add	r2, sp, #28
    ef4e:	202e      	movs	r0, #46	; 0x2e
    ef50:	4d31      	ldr	r5, [pc, #196]	; (f018 <UnconfirmedTransmissionCallback+0xf4>)
    ef52:	708b      	strb	r3, [r1, #2]
    ef54:	47a8      	blx	r5
    ef56:	2808      	cmp	r0, #8
    ef58:	d12b      	bne.n	efb2 <UnconfirmedTransmissionCallback+0x8e>
    ef5a:	2301      	movs	r3, #1
    ef5c:	a804      	add	r0, sp, #16
    ef5e:	7003      	strb	r3, [r0, #0]
    ef60:	4b2e      	ldr	r3, [pc, #184]	; (f01c <UnconfirmedTransmissionCallback+0xf8>)
    ef62:	4798      	blx	r3
    ef64:	9807      	ldr	r0, [sp, #28]
    ef66:	4b2e      	ldr	r3, [pc, #184]	; (f020 <UnconfirmedTransmissionCallback+0xfc>)
    ef68:	9908      	ldr	r1, [sp, #32]
    ef6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef6c:	4798      	blx	r3
    ef6e:	0038      	movs	r0, r7
    ef70:	4b2c      	ldr	r3, [pc, #176]	; (f024 <UnconfirmedTransmissionCallback+0x100>)
    ef72:	4798      	blx	r3
    ef74:	2800      	cmp	r0, #0
    ef76:	d01a      	beq.n	efae <UnconfirmedTransmissionCallback+0x8a>
    ef78:	0023      	movs	r3, r4
    ef7a:	33fd      	adds	r3, #253	; 0xfd
    ef7c:	781b      	ldrb	r3, [r3, #0]
    ef7e:	2b01      	cmp	r3, #1
    ef80:	d108      	bne.n	ef94 <UnconfirmedTransmissionCallback+0x70>
    ef82:	0021      	movs	r1, r4
    ef84:	220e      	movs	r2, #14
    ef86:	3184      	adds	r1, #132	; 0x84
    ef88:	780b      	ldrb	r3, [r1, #0]
    ef8a:	4393      	bics	r3, r2
    ef8c:	001a      	movs	r2, r3
    ef8e:	230c      	movs	r3, #12
    ef90:	4313      	orrs	r3, r2
    ef92:	700b      	strb	r3, [r1, #0]
    ef94:	2200      	movs	r2, #0
    ef96:	4b24      	ldr	r3, [pc, #144]	; (f028 <UnconfirmedTransmissionCallback+0x104>)
    ef98:	4924      	ldr	r1, [pc, #144]	; (f02c <UnconfirmedTransmissionCallback+0x108>)
    ef9a:	5ce3      	ldrb	r3, [r4, r3]
    ef9c:	34fc      	adds	r4, #252	; 0xfc
    ef9e:	4359      	muls	r1, r3
    efa0:	4b23      	ldr	r3, [pc, #140]	; (f030 <UnconfirmedTransmissionCallback+0x10c>)
    efa2:	7820      	ldrb	r0, [r4, #0]
    efa4:	18c9      	adds	r1, r1, r3
    efa6:	4b23      	ldr	r3, [pc, #140]	; (f034 <UnconfirmedTransmissionCallback+0x110>)
    efa8:	9200      	str	r2, [sp, #0]
    efaa:	4c23      	ldr	r4, [pc, #140]	; (f038 <UnconfirmedTransmissionCallback+0x114>)
    efac:	47a0      	blx	r4
    efae:	b00b      	add	sp, #44	; 0x2c
    efb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efb2:	4b22      	ldr	r3, [pc, #136]	; (f03c <UnconfirmedTransmissionCallback+0x118>)
    efb4:	4798      	blx	r3
    efb6:	4b22      	ldr	r3, [pc, #136]	; (f040 <UnconfirmedTransmissionCallback+0x11c>)
    efb8:	4922      	ldr	r1, [pc, #136]	; (f044 <UnconfirmedTransmissionCallback+0x120>)
    efba:	4798      	blx	r3
    efbc:	23fa      	movs	r3, #250	; 0xfa
    efbe:	009b      	lsls	r3, r3, #2
    efc0:	18c9      	adds	r1, r1, r3
    efc2:	0023      	movs	r3, r4
    efc4:	9104      	str	r1, [sp, #16]
    efc6:	33ff      	adds	r3, #255	; 0xff
    efc8:	7f5b      	ldrb	r3, [r3, #29]
    efca:	079a      	lsls	r2, r3, #30
    efcc:	d515      	bpl.n	effa <UnconfirmedTransmissionCallback+0xd6>
    efce:	aa04      	add	r2, sp, #16
    efd0:	0031      	movs	r1, r6
    efd2:	2026      	movs	r0, #38	; 0x26
    efd4:	47a8      	blx	r5
    efd6:	9b04      	ldr	r3, [sp, #16]
    efd8:	1c5a      	adds	r2, r3, #1
    efda:	d001      	beq.n	efe0 <UnconfirmedTransmissionCallback+0xbc>
    efdc:	3314      	adds	r3, #20
    efde:	9304      	str	r3, [sp, #16]
    efe0:	4b11      	ldr	r3, [pc, #68]	; (f028 <UnconfirmedTransmissionCallback+0x104>)
    efe2:	9a04      	ldr	r2, [sp, #16]
    efe4:	5ce3      	ldrb	r3, [r4, r3]
    efe6:	21fa      	movs	r1, #250	; 0xfa
    efe8:	1ad3      	subs	r3, r2, r3
    efea:	2200      	movs	r2, #0
    efec:	0089      	lsls	r1, r1, #2
    efee:	34f2      	adds	r4, #242	; 0xf2
    eff0:	4359      	muls	r1, r3
    eff2:	7820      	ldrb	r0, [r4, #0]
    eff4:	4b14      	ldr	r3, [pc, #80]	; (f048 <UnconfirmedTransmissionCallback+0x124>)
    eff6:	9200      	str	r2, [sp, #0]
    eff8:	e7d7      	b.n	efaa <UnconfirmedTransmissionCallback+0x86>
    effa:	075b      	lsls	r3, r3, #29
    effc:	d5f0      	bpl.n	efe0 <UnconfirmedTransmissionCallback+0xbc>
    effe:	aa04      	add	r2, sp, #16
    f000:	0031      	movs	r1, r6
    f002:	2032      	movs	r0, #50	; 0x32
    f004:	47a8      	blx	r5
    f006:	9b04      	ldr	r3, [sp, #16]
    f008:	1c5a      	adds	r2, r3, #1
    f00a:	d0e9      	beq.n	efe0 <UnconfirmedTransmissionCallback+0xbc>
    f00c:	3301      	adds	r3, #1
    f00e:	e7e6      	b.n	efde <UnconfirmedTransmissionCallback+0xba>
    f010:	200029a4 	.word	0x200029a4
    f014:	20002bfd 	.word	0x20002bfd
    f018:	0000b6c5 	.word	0x0000b6c5
    f01c:	00013d35 	.word	0x00013d35
    f020:	0000eca5 	.word	0x0000eca5
    f024:	00013461 	.word	0x00013461
    f028:	0000022b 	.word	0x0000022b
    f02c:	fffffc18 	.word	0xfffffc18
    f030:	001e8480 	.word	0x001e8480
    f034:	0000ee6d 	.word	0x0000ee6d
    f038:	0000cb35 	.word	0x0000cb35
    f03c:	00017895 	.word	0x00017895
    f040:	000147e9 	.word	0x000147e9
    f044:	000007d1 	.word	0x000007d1
    f048:	0000ef25 	.word	0x0000ef25

0000f04c <UpdateJoinInProgress>:
    f04c:	b570      	push	{r4, r5, r6, lr}
    f04e:	2504      	movs	r5, #4
    f050:	4c0a      	ldr	r4, [pc, #40]	; (f07c <UpdateJoinInProgress+0x30>)
    f052:	0002      	movs	r2, r0
    f054:	0021      	movs	r1, r4
    f056:	3494      	adds	r4, #148	; 0x94
    f058:	7826      	ldrb	r6, [r4, #0]
    f05a:	2001      	movs	r0, #1
    f05c:	4335      	orrs	r5, r6
    f05e:	7025      	strb	r5, [r4, #0]
    f060:	2407      	movs	r4, #7
    f062:	4022      	ands	r2, r4
    f064:	4082      	lsls	r2, r0
    f066:	3184      	adds	r1, #132	; 0x84
    f068:	780b      	ldrb	r3, [r1, #0]
    f06a:	1924      	adds	r4, r4, r4
    f06c:	4383      	bics	r3, r0
    f06e:	43a3      	bics	r3, r4
    f070:	4313      	orrs	r3, r2
    f072:	700b      	strb	r3, [r1, #0]
    f074:	210b      	movs	r1, #11
    f076:	4b02      	ldr	r3, [pc, #8]	; (f080 <UpdateJoinInProgress+0x34>)
    f078:	4798      	blx	r3
    f07a:	bd70      	pop	{r4, r5, r6, pc}
    f07c:	200029a4 	.word	0x200029a4
    f080:	0000be05 	.word	0x0000be05

0000f084 <LORAWAN_Join>:
    f084:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f086:	4c33      	ldr	r4, [pc, #204]	; (f154 <LORAWAN_Join+0xd0>)
    f088:	0006      	movs	r6, r0
    f08a:	0023      	movs	r3, r4
    f08c:	3384      	adds	r3, #132	; 0x84
    f08e:	781b      	ldrb	r3, [r3, #0]
    f090:	200f      	movs	r0, #15
    f092:	b25a      	sxtb	r2, r3
    f094:	2a00      	cmp	r2, #0
    f096:	db4a      	blt.n	f12e <LORAWAN_Join+0xaa>
    f098:	3803      	subs	r0, #3
    f09a:	065b      	lsls	r3, r3, #25
    f09c:	d447      	bmi.n	f12e <LORAWAN_Join+0xaa>
    f09e:	0023      	movs	r3, r4
    f0a0:	3394      	adds	r3, #148	; 0x94
    f0a2:	781b      	ldrb	r3, [r3, #0]
    f0a4:	3007      	adds	r0, #7
    f0a6:	075b      	lsls	r3, r3, #29
    f0a8:	d441      	bmi.n	f12e <LORAWAN_Join+0xaa>
    f0aa:	0023      	movs	r3, r4
    f0ac:	33fd      	adds	r3, #253	; 0xfd
    f0ae:	781b      	ldrb	r3, [r3, #0]
    f0b0:	2b04      	cmp	r3, #4
    f0b2:	d037      	beq.n	f124 <LORAWAN_Join+0xa0>
    f0b4:	0023      	movs	r3, r4
    f0b6:	33fd      	adds	r3, #253	; 0xfd
    f0b8:	781b      	ldrb	r3, [r3, #0]
    f0ba:	2b01      	cmp	r3, #1
    f0bc:	d105      	bne.n	f0ca <LORAWAN_Join+0x46>
    f0be:	0023      	movs	r3, r4
    f0c0:	3384      	adds	r3, #132	; 0x84
    f0c2:	781a      	ldrb	r2, [r3, #0]
    f0c4:	230e      	movs	r3, #14
    f0c6:	421a      	tst	r2, r3
    f0c8:	d130      	bne.n	f12c <LORAWAN_Join+0xa8>
    f0ca:	2102      	movs	r1, #2
    f0cc:	2001      	movs	r0, #1
    f0ce:	4d22      	ldr	r5, [pc, #136]	; (f158 <LORAWAN_Join+0xd4>)
    f0d0:	7026      	strb	r6, [r4, #0]
    f0d2:	47a8      	blx	r5
    f0d4:	0023      	movs	r3, r4
    f0d6:	33de      	adds	r3, #222	; 0xde
    f0d8:	781b      	ldrb	r3, [r3, #0]
    f0da:	2e00      	cmp	r6, #0
    f0dc:	d128      	bne.n	f130 <LORAWAN_Join+0xac>
    f0de:	200b      	movs	r0, #11
    f0e0:	4003      	ands	r3, r0
    f0e2:	4283      	cmp	r3, r0
    f0e4:	d003      	beq.n	f0ee <LORAWAN_Join+0x6a>
    f0e6:	4b1d      	ldr	r3, [pc, #116]	; (f15c <LORAWAN_Join+0xd8>)
    f0e8:	5ce3      	ldrb	r3, [r4, r3]
    f0ea:	2b00      	cmp	r3, #0
    f0ec:	d01f      	beq.n	f12e <LORAWAN_Join+0xaa>
    f0ee:	0023      	movs	r3, r4
    f0f0:	3384      	adds	r3, #132	; 0x84
    f0f2:	781b      	ldrb	r3, [r3, #0]
    f0f4:	07db      	lsls	r3, r3, #31
    f0f6:	d503      	bpl.n	f100 <LORAWAN_Join+0x7c>
    f0f8:	2100      	movs	r1, #0
    f0fa:	203a      	movs	r0, #58	; 0x3a
    f0fc:	4b18      	ldr	r3, [pc, #96]	; (f160 <LORAWAN_Join+0xdc>)
    f0fe:	4798      	blx	r3
    f100:	0022      	movs	r2, r4
    f102:	2001      	movs	r0, #1
    f104:	3284      	adds	r2, #132	; 0x84
    f106:	7813      	ldrb	r3, [r2, #0]
    f108:	3494      	adds	r4, #148	; 0x94
    f10a:	4383      	bics	r3, r0
    f10c:	7013      	strb	r3, [r2, #0]
    f10e:	2304      	movs	r3, #4
    f110:	7822      	ldrb	r2, [r4, #0]
    f112:	210b      	movs	r1, #11
    f114:	4313      	orrs	r3, r2
    f116:	7023      	strb	r3, [r4, #0]
    f118:	47a8      	blx	r5
    f11a:	2000      	movs	r0, #0
    f11c:	4b11      	ldr	r3, [pc, #68]	; (f164 <LORAWAN_Join+0xe0>)
    f11e:	4798      	blx	r3
    f120:	2008      	movs	r0, #8
    f122:	e004      	b.n	f12e <LORAWAN_Join+0xaa>
    f124:	4b10      	ldr	r3, [pc, #64]	; (f168 <LORAWAN_Join+0xe4>)
    f126:	4798      	blx	r3
    f128:	2808      	cmp	r0, #8
    f12a:	d0c3      	beq.n	f0b4 <LORAWAN_Join+0x30>
    f12c:	2011      	movs	r0, #17
    f12e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f130:	2234      	movs	r2, #52	; 0x34
    f132:	200b      	movs	r0, #11
    f134:	4013      	ands	r3, r2
    f136:	4293      	cmp	r3, r2
    f138:	d1f9      	bne.n	f12e <LORAWAN_Join+0xaa>
    f13a:	3804      	subs	r0, #4
    f13c:	4b0b      	ldr	r3, [pc, #44]	; (f16c <LORAWAN_Join+0xe8>)
    f13e:	4798      	blx	r3
    f140:	2200      	movs	r2, #0
    f142:	34fb      	adds	r4, #251	; 0xfb
    f144:	7820      	ldrb	r0, [r4, #0]
    f146:	4b0a      	ldr	r3, [pc, #40]	; (f170 <LORAWAN_Join+0xec>)
    f148:	9200      	str	r2, [sp, #0]
    f14a:	490a      	ldr	r1, [pc, #40]	; (f174 <LORAWAN_Join+0xf0>)
    f14c:	4c0a      	ldr	r4, [pc, #40]	; (f178 <LORAWAN_Join+0xf4>)
    f14e:	47a0      	blx	r4
    f150:	e7e6      	b.n	f120 <LORAWAN_Join+0x9c>
    f152:	46c0      	nop			; (mov r8, r8)
    f154:	200029a4 	.word	0x200029a4
    f158:	0000be05 	.word	0x0000be05
    f15c:	0000022d 	.word	0x0000022d
    f160:	0000b7ed 	.word	0x0000b7ed
    f164:	000129bd 	.word	0x000129bd
    f168:	0001205d 	.word	0x0001205d
    f16c:	0000f04d 	.word	0x0000f04d
    f170:	0000de05 	.word	0x0000de05
    f174:	0000c350 	.word	0x0000c350
    f178:	0000cb35 	.word	0x0000cb35

0000f17c <EncryptFRMPayload>:
    f17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f17e:	0007      	movs	r7, r0
    f180:	2401      	movs	r4, #1
    f182:	b089      	sub	sp, #36	; 0x24
    f184:	9306      	str	r3, [sp, #24]
    f186:	ab10      	add	r3, sp, #64	; 0x40
    f188:	881d      	ldrh	r5, [r3, #0]
    f18a:	090b      	lsrs	r3, r1, #4
    f18c:	9104      	str	r1, [sp, #16]
    f18e:	9205      	str	r2, [sp, #20]
    f190:	9303      	str	r3, [sp, #12]
    f192:	9b03      	ldr	r3, [sp, #12]
    f194:	429c      	cmp	r4, r3
    f196:	d907      	bls.n	f1a8 <EncryptFRMPayload+0x2c>
    f198:	260f      	movs	r6, #15
    f19a:	9b04      	ldr	r3, [sp, #16]
    f19c:	4033      	ands	r3, r6
    f19e:	1e1e      	subs	r6, r3, #0
    f1a0:	d126      	bne.n	f1f0 <EncryptFRMPayload+0x74>
    f1a2:	2000      	movs	r0, #0
    f1a4:	b009      	add	sp, #36	; 0x24
    f1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f1aa:	0022      	movs	r2, r4
    f1ac:	9300      	str	r3, [sp, #0]
    f1ae:	9906      	ldr	r1, [sp, #24]
    f1b0:	2301      	movs	r3, #1
    f1b2:	9805      	ldr	r0, [sp, #20]
    f1b4:	4e1e      	ldr	r6, [pc, #120]	; (f230 <EncryptFRMPayload+0xb4>)
    f1b6:	47b0      	blx	r6
    f1b8:	4e1e      	ldr	r6, [pc, #120]	; (f234 <EncryptFRMPayload+0xb8>)
    f1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f1bc:	2101      	movs	r1, #1
    f1be:	0030      	movs	r0, r6
    f1c0:	4b1d      	ldr	r3, [pc, #116]	; (f238 <EncryptFRMPayload+0xbc>)
    f1c2:	4798      	blx	r3
    f1c4:	2800      	cmp	r0, #0
    f1c6:	d1ed      	bne.n	f1a4 <EncryptFRMPayload+0x28>
    f1c8:	1e63      	subs	r3, r4, #1
    f1ca:	011b      	lsls	r3, r3, #4
    f1cc:	18fb      	adds	r3, r7, r3
    f1ce:	9307      	str	r3, [sp, #28]
    f1d0:	9b07      	ldr	r3, [sp, #28]
    f1d2:	182a      	adds	r2, r5, r0
    f1d4:	5c19      	ldrb	r1, [r3, r0]
    f1d6:	5d83      	ldrb	r3, [r0, r6]
    f1d8:	b292      	uxth	r2, r2
    f1da:	4059      	eors	r1, r3
    f1dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1de:	3001      	adds	r0, #1
    f1e0:	5499      	strb	r1, [r3, r2]
    f1e2:	2810      	cmp	r0, #16
    f1e4:	d1f4      	bne.n	f1d0 <EncryptFRMPayload+0x54>
    f1e6:	3510      	adds	r5, #16
    f1e8:	3401      	adds	r4, #1
    f1ea:	b2ad      	uxth	r5, r5
    f1ec:	b2e4      	uxtb	r4, r4
    f1ee:	e7d0      	b.n	f192 <EncryptFRMPayload+0x16>
    f1f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f1f2:	0022      	movs	r2, r4
    f1f4:	9300      	str	r3, [sp, #0]
    f1f6:	9906      	ldr	r1, [sp, #24]
    f1f8:	2301      	movs	r3, #1
    f1fa:	9805      	ldr	r0, [sp, #20]
    f1fc:	4c0c      	ldr	r4, [pc, #48]	; (f230 <EncryptFRMPayload+0xb4>)
    f1fe:	47a0      	blx	r4
    f200:	4c0c      	ldr	r4, [pc, #48]	; (f234 <EncryptFRMPayload+0xb8>)
    f202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f204:	2101      	movs	r1, #1
    f206:	0020      	movs	r0, r4
    f208:	4b0b      	ldr	r3, [pc, #44]	; (f238 <EncryptFRMPayload+0xbc>)
    f20a:	4798      	blx	r3
    f20c:	2800      	cmp	r0, #0
    f20e:	d1c9      	bne.n	f1a4 <EncryptFRMPayload+0x28>
    f210:	9b03      	ldr	r3, [sp, #12]
    f212:	011b      	lsls	r3, r3, #4
    f214:	18fb      	adds	r3, r7, r3
    f216:	5d07      	ldrb	r7, [r0, r4]
    f218:	5c19      	ldrb	r1, [r3, r0]
    f21a:	182a      	adds	r2, r5, r0
    f21c:	4079      	eors	r1, r7
    f21e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f220:	b292      	uxth	r2, r2
    f222:	3001      	adds	r0, #1
    f224:	54b9      	strb	r1, [r7, r2]
    f226:	b2c2      	uxtb	r2, r0
    f228:	4296      	cmp	r6, r2
    f22a:	d8f4      	bhi.n	f216 <EncryptFRMPayload+0x9a>
    f22c:	e7b9      	b.n	f1a2 <EncryptFRMPayload+0x26>
    f22e:	46c0      	nop			; (mov r8, r8)
    f230:	0000df25 	.word	0x0000df25
    f234:	20000f50 	.word	0x20000f50
    f238:	0000bad9 	.word	0x0000bad9

0000f23c <UpdateTransactionCompleteCbParams>:
    f23c:	2388      	movs	r3, #136	; 0x88
    f23e:	2201      	movs	r2, #1
    f240:	b570      	push	{r4, r5, r6, lr}
    f242:	0001      	movs	r1, r0
    f244:	4c13      	ldr	r4, [pc, #76]	; (f294 <UpdateTransactionCompleteCbParams+0x58>)
    f246:	4814      	ldr	r0, [pc, #80]	; (f298 <UpdateTransactionCompleteCbParams+0x5c>)
    f248:	009b      	lsls	r3, r3, #2
    f24a:	54e2      	strb	r2, [r4, r3]
    f24c:	7842      	ldrb	r2, [r0, #1]
    f24e:	7803      	ldrb	r3, [r0, #0]
    f250:	0212      	lsls	r2, r2, #8
    f252:	431a      	orrs	r2, r3
    f254:	7883      	ldrb	r3, [r0, #2]
    f256:	041b      	lsls	r3, r3, #16
    f258:	431a      	orrs	r2, r3
    f25a:	78c3      	ldrb	r3, [r0, #3]
    f25c:	061b      	lsls	r3, r3, #24
    f25e:	4313      	orrs	r3, r2
    f260:	d00e      	beq.n	f280 <UpdateTransactionCompleteCbParams+0x44>
    f262:	0022      	movs	r2, r4
    f264:	2504      	movs	r5, #4
    f266:	32fc      	adds	r2, #252	; 0xfc
    f268:	6890      	ldr	r0, [r2, #8]
    f26a:	4228      	tst	r0, r5
    f26c:	d008      	beq.n	f280 <UpdateTransactionCompleteCbParams+0x44>
    f26e:	68d0      	ldr	r0, [r2, #12]
    f270:	2800      	cmp	r0, #0
    f272:	d005      	beq.n	f280 <UpdateTransactionCompleteCbParams+0x44>
    f274:	0022      	movs	r2, r4
    f276:	32ff      	adds	r2, #255	; 0xff
    f278:	7451      	strb	r1, [r2, #17]
    f27a:	7355      	strb	r5, [r2, #13]
    f27c:	4907      	ldr	r1, [pc, #28]	; (f29c <UpdateTransactionCompleteCbParams+0x60>)
    f27e:	4798      	blx	r3
    f280:	2388      	movs	r3, #136	; 0x88
    f282:	009b      	lsls	r3, r3, #2
    f284:	5ce3      	ldrb	r3, [r4, r3]
    f286:	2b00      	cmp	r3, #0
    f288:	d002      	beq.n	f290 <UpdateTransactionCompleteCbParams+0x54>
    f28a:	2300      	movs	r3, #0
    f28c:	34fc      	adds	r4, #252	; 0xfc
    f28e:	60e3      	str	r3, [r4, #12]
    f290:	bd70      	pop	{r4, r5, r6, pc}
    f292:	46c0      	nop			; (mov r8, r8)
    f294:	200029a4 	.word	0x200029a4
    f298:	20002d00 	.word	0x20002d00
    f29c:	20002ab0 	.word	0x20002ab0

0000f2a0 <UpdateRxDataAvailableCbParams>:
    f2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2a2:	4e0f      	ldr	r6, [pc, #60]	; (f2e0 <UpdateRxDataAvailableCbParams+0x40>)
    f2a4:	469c      	mov	ip, r3
    f2a6:	7875      	ldrb	r5, [r6, #1]
    f2a8:	7834      	ldrb	r4, [r6, #0]
    f2aa:	022d      	lsls	r5, r5, #8
    f2ac:	4325      	orrs	r5, r4
    f2ae:	78b4      	ldrb	r4, [r6, #2]
    f2b0:	0424      	lsls	r4, r4, #16
    f2b2:	4325      	orrs	r5, r4
    f2b4:	78f4      	ldrb	r4, [r6, #3]
    f2b6:	0624      	lsls	r4, r4, #24
    f2b8:	432c      	orrs	r4, r5
    f2ba:	d010      	beq.n	f2de <UpdateRxDataAvailableCbParams+0x3e>
    f2bc:	4d09      	ldr	r5, [pc, #36]	; (f2e4 <UpdateRxDataAvailableCbParams+0x44>)
    f2be:	2702      	movs	r7, #2
    f2c0:	002e      	movs	r6, r5
    f2c2:	36fc      	adds	r6, #252	; 0xfc
    f2c4:	68b3      	ldr	r3, [r6, #8]
    f2c6:	423b      	tst	r3, r7
    f2c8:	d009      	beq.n	f2de <UpdateRxDataAvailableCbParams+0x3e>
    f2ca:	4663      	mov	r3, ip
    f2cc:	35ff      	adds	r5, #255	; 0xff
    f2ce:	6170      	str	r0, [r6, #20]
    f2d0:	61b1      	str	r1, [r6, #24]
    f2d2:	736f      	strb	r7, [r5, #13]
    f2d4:	766a      	strb	r2, [r5, #25]
    f2d6:	76ab      	strb	r3, [r5, #26]
    f2d8:	4903      	ldr	r1, [pc, #12]	; (f2e8 <UpdateRxDataAvailableCbParams+0x48>)
    f2da:	68f0      	ldr	r0, [r6, #12]
    f2dc:	47a0      	blx	r4
    f2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2e0:	20002d00 	.word	0x20002d00
    f2e4:	200029a4 	.word	0x200029a4
    f2e8:	20002ab0 	.word	0x20002ab0

0000f2ec <LorawanNotifyAppOnRxdone>:
    f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2ee:	4c25      	ldr	r4, [pc, #148]	; (f384 <LorawanNotifyAppOnRxdone+0x98>)
    f2f0:	0007      	movs	r7, r0
    f2f2:	0023      	movs	r3, r4
    f2f4:	33fd      	adds	r3, #253	; 0xfd
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	000d      	movs	r5, r1
    f2fa:	0016      	movs	r6, r2
    f2fc:	2b01      	cmp	r3, #1
    f2fe:	d136      	bne.n	f36e <LorawanNotifyAppOnRxdone+0x82>
    f300:	0022      	movs	r2, r4
    f302:	210e      	movs	r1, #14
    f304:	3284      	adds	r2, #132	; 0x84
    f306:	7813      	ldrb	r3, [r2, #0]
    f308:	438b      	bics	r3, r1
    f30a:	7013      	strb	r3, [r2, #0]
    f30c:	491e      	ldr	r1, [pc, #120]	; (f388 <LorawanNotifyAppOnRxdone+0x9c>)
    f30e:	784a      	ldrb	r2, [r1, #1]
    f310:	780b      	ldrb	r3, [r1, #0]
    f312:	0212      	lsls	r2, r2, #8
    f314:	431a      	orrs	r2, r3
    f316:	788b      	ldrb	r3, [r1, #2]
    f318:	041b      	lsls	r3, r3, #16
    f31a:	431a      	orrs	r2, r3
    f31c:	78cb      	ldrb	r3, [r1, #3]
    f31e:	061b      	lsls	r3, r3, #24
    f320:	4313      	orrs	r3, r2
    f322:	d023      	beq.n	f36c <LorawanNotifyAppOnRxdone+0x80>
    f324:	0022      	movs	r2, r4
    f326:	2120      	movs	r1, #32
    f328:	3294      	adds	r2, #148	; 0x94
    f32a:	7813      	ldrb	r3, [r2, #0]
    f32c:	438b      	bics	r3, r1
    f32e:	7013      	strb	r3, [r2, #0]
    f330:	0023      	movs	r3, r4
    f332:	33fd      	adds	r3, #253	; 0xfd
    f334:	781b      	ldrb	r3, [r3, #0]
    f336:	7878      	ldrb	r0, [r7, #1]
    f338:	469c      	mov	ip, r3
    f33a:	78fa      	ldrb	r2, [r7, #3]
    f33c:	78b9      	ldrb	r1, [r7, #2]
    f33e:	793b      	ldrb	r3, [r7, #4]
    f340:	4667      	mov	r7, ip
    f342:	0209      	lsls	r1, r1, #8
    f344:	4301      	orrs	r1, r0
    f346:	0410      	lsls	r0, r2, #16
    f348:	4308      	orrs	r0, r1
    f34a:	061b      	lsls	r3, r3, #24
    f34c:	4318      	orrs	r0, r3
    f34e:	0032      	movs	r2, r6
    f350:	2308      	movs	r3, #8
    f352:	0029      	movs	r1, r5
    f354:	2f04      	cmp	r7, #4
    f356:	d112      	bne.n	f37e <LorawanNotifyAppOnRxdone+0x92>
    f358:	4d0c      	ldr	r5, [pc, #48]	; (f38c <LorawanNotifyAppOnRxdone+0xa0>)
    f35a:	47a8      	blx	r5
    f35c:	2388      	movs	r3, #136	; 0x88
    f35e:	009b      	lsls	r3, r3, #2
    f360:	5ce3      	ldrb	r3, [r4, r3]
    f362:	2b00      	cmp	r3, #0
    f364:	d102      	bne.n	f36c <LorawanNotifyAppOnRxdone+0x80>
    f366:	2008      	movs	r0, #8
    f368:	4b09      	ldr	r3, [pc, #36]	; (f390 <LorawanNotifyAppOnRxdone+0xa4>)
    f36a:	4798      	blx	r3
    f36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f36e:	2b04      	cmp	r3, #4
    f370:	d1cc      	bne.n	f30c <LorawanNotifyAppOnRxdone+0x20>
    f372:	0023      	movs	r3, r4
    f374:	33f1      	adds	r3, #241	; 0xf1
    f376:	7818      	ldrb	r0, [r3, #0]
    f378:	4b06      	ldr	r3, [pc, #24]	; (f394 <LorawanNotifyAppOnRxdone+0xa8>)
    f37a:	4798      	blx	r3
    f37c:	e7c6      	b.n	f30c <LorawanNotifyAppOnRxdone+0x20>
    f37e:	4d06      	ldr	r5, [pc, #24]	; (f398 <LorawanNotifyAppOnRxdone+0xac>)
    f380:	47a8      	blx	r5
    f382:	e7eb      	b.n	f35c <LorawanNotifyAppOnRxdone+0x70>
    f384:	200029a4 	.word	0x200029a4
    f388:	20002d00 	.word	0x20002d00
    f38c:	000122a9 	.word	0x000122a9
    f390:	0000f23d 	.word	0x0000f23d
    f394:	0000ce4d 	.word	0x0000ce4d
    f398:	0000f2a1 	.word	0x0000f2a1

0000f39c <LorawanSetReceiveWindow2Parameters>:
    f39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f39e:	466b      	mov	r3, sp
    f3a0:	1cdd      	adds	r5, r3, #3
    f3a2:	9001      	str	r0, [sp, #4]
    f3a4:	7029      	strb	r1, [r5, #0]
    f3a6:	2001      	movs	r0, #1
    f3a8:	a901      	add	r1, sp, #4
    f3aa:	4c09      	ldr	r4, [pc, #36]	; (f3d0 <LorawanSetReceiveWindow2Parameters+0x34>)
    f3ac:	47a0      	blx	r4
    f3ae:	2808      	cmp	r0, #8
    f3b0:	d002      	beq.n	f3b8 <LorawanSetReceiveWindow2Parameters+0x1c>
    f3b2:	240a      	movs	r4, #10
    f3b4:	0020      	movs	r0, r4
    f3b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3b8:	0029      	movs	r1, r5
    f3ba:	200f      	movs	r0, #15
    f3bc:	47a0      	blx	r4
    f3be:	0004      	movs	r4, r0
    f3c0:	2808      	cmp	r0, #8
    f3c2:	d1f6      	bne.n	f3b2 <LorawanSetReceiveWindow2Parameters+0x16>
    f3c4:	7829      	ldrb	r1, [r5, #0]
    f3c6:	9801      	ldr	r0, [sp, #4]
    f3c8:	4b02      	ldr	r3, [pc, #8]	; (f3d4 <LorawanSetReceiveWindow2Parameters+0x38>)
    f3ca:	4798      	blx	r3
    f3cc:	e7f2      	b.n	f3b4 <LorawanSetReceiveWindow2Parameters+0x18>
    f3ce:	46c0      	nop			; (mov r8, r8)
    f3d0:	0000b6e1 	.word	0x0000b6e1
    f3d4:	0000e655 	.word	0x0000e655

0000f3d8 <LorawanSetReceiveWindowCParameters>:
    f3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f3da:	466b      	mov	r3, sp
    f3dc:	1cdc      	adds	r4, r3, #3
    f3de:	9001      	str	r0, [sp, #4]
    f3e0:	7021      	strb	r1, [r4, #0]
    f3e2:	2001      	movs	r0, #1
    f3e4:	a901      	add	r1, sp, #4
    f3e6:	4d0d      	ldr	r5, [pc, #52]	; (f41c <LorawanSetReceiveWindowCParameters+0x44>)
    f3e8:	47a8      	blx	r5
    f3ea:	2808      	cmp	r0, #8
    f3ec:	d001      	beq.n	f3f2 <LorawanSetReceiveWindowCParameters+0x1a>
    f3ee:	200a      	movs	r0, #10
    f3f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3f2:	0021      	movs	r1, r4
    f3f4:	200f      	movs	r0, #15
    f3f6:	47a8      	blx	r5
    f3f8:	2808      	cmp	r0, #8
    f3fa:	d1f8      	bne.n	f3ee <LorawanSetReceiveWindowCParameters+0x16>
    f3fc:	4b08      	ldr	r3, [pc, #32]	; (f420 <LorawanSetReceiveWindowCParameters+0x48>)
    f3fe:	9a01      	ldr	r2, [sp, #4]
    f400:	0019      	movs	r1, r3
    f402:	7824      	ldrb	r4, [r4, #0]
    f404:	3173      	adds	r1, #115	; 0x73
    f406:	336f      	adds	r3, #111	; 0x6f
    f408:	700c      	strb	r4, [r1, #0]
    f40a:	0a11      	lsrs	r1, r2, #8
    f40c:	701a      	strb	r2, [r3, #0]
    f40e:	7059      	strb	r1, [r3, #1]
    f410:	0c11      	lsrs	r1, r2, #16
    f412:	0e12      	lsrs	r2, r2, #24
    f414:	7099      	strb	r1, [r3, #2]
    f416:	70da      	strb	r2, [r3, #3]
    f418:	e7ea      	b.n	f3f0 <LorawanSetReceiveWindowCParameters+0x18>
    f41a:	46c0      	nop			; (mov r8, r8)
    f41c:	0000b6e1 	.word	0x0000b6e1
    f420:	200029a4 	.word	0x200029a4

0000f424 <LorawanSetFrequency>:
    f424:	b507      	push	{r0, r1, r2, lr}
    f426:	466b      	mov	r3, sp
    f428:	9100      	str	r1, [sp, #0]
    f42a:	7118      	strb	r0, [r3, #4]
    f42c:	4669      	mov	r1, sp
    f42e:	2000      	movs	r0, #0
    f430:	4b01      	ldr	r3, [pc, #4]	; (f438 <LorawanSetFrequency+0x14>)
    f432:	4798      	blx	r3
    f434:	bd0e      	pop	{r1, r2, r3, pc}
    f436:	46c0      	nop			; (mov r8, r8)
    f438:	0000b7ed 	.word	0x0000b7ed

0000f43c <LorawanGetReceiveWindow2Parameters>:
    f43c:	4a06      	ldr	r2, [pc, #24]	; (f458 <LorawanGetReceiveWindow2Parameters+0x1c>)
    f43e:	0013      	movs	r3, r2
    f440:	336e      	adds	r3, #110	; 0x6e
    f442:	781b      	ldrb	r3, [r3, #0]
    f444:	7103      	strb	r3, [r0, #4]
    f446:	0013      	movs	r3, r2
    f448:	326c      	adds	r2, #108	; 0x6c
    f44a:	336a      	adds	r3, #106	; 0x6a
    f44c:	8819      	ldrh	r1, [r3, #0]
    f44e:	8813      	ldrh	r3, [r2, #0]
    f450:	041b      	lsls	r3, r3, #16
    f452:	430b      	orrs	r3, r1
    f454:	6003      	str	r3, [r0, #0]
    f456:	4770      	bx	lr
    f458:	200029a4 	.word	0x200029a4

0000f45c <LorawanGetReceiveWindowCParameters>:
    f45c:	4a09      	ldr	r2, [pc, #36]	; (f484 <LorawanGetReceiveWindowCParameters+0x28>)
    f45e:	0013      	movs	r3, r2
    f460:	3373      	adds	r3, #115	; 0x73
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	7103      	strb	r3, [r0, #4]
    f466:	0013      	movs	r3, r2
    f468:	336f      	adds	r3, #111	; 0x6f
    f46a:	7819      	ldrb	r1, [r3, #0]
    f46c:	6f13      	ldr	r3, [r2, #112]	; 0x70
    f46e:	021b      	lsls	r3, r3, #8
    f470:	430b      	orrs	r3, r1
    f472:	0a1a      	lsrs	r2, r3, #8
    f474:	7003      	strb	r3, [r0, #0]
    f476:	7042      	strb	r2, [r0, #1]
    f478:	0c1a      	lsrs	r2, r3, #16
    f47a:	0e1b      	lsrs	r3, r3, #24
    f47c:	7082      	strb	r2, [r0, #2]
    f47e:	70c3      	strb	r3, [r0, #3]
    f480:	4770      	bx	lr
    f482:	46c0      	nop			; (mov r8, r8)
    f484:	200029a4 	.word	0x200029a4

0000f488 <LORAWAN_GetAttr>:
    f488:	b5f0      	push	{r4, r5, r6, r7, lr}
    f48a:	000b      	movs	r3, r1
    f48c:	b093      	sub	sp, #76	; 0x4c
    f48e:	0016      	movs	r6, r2
    f490:	2845      	cmp	r0, #69	; 0x45
    f492:	d847      	bhi.n	f524 <LORAWAN_GetAttr+0x9c>
    f494:	f005 f82e 	bl	144f4 <__gnu_thumb1_case_uhi>
    f498:	00650049 	.word	0x00650049
    f49c:	00790069 	.word	0x00790069
    f4a0:	00750071 	.word	0x00750071
    f4a4:	0082007d 	.word	0x0082007d
    f4a8:	00890086 	.word	0x00890086
    f4ac:	0092008e 	.word	0x0092008e
    f4b0:	009d0095 	.word	0x009d0095
    f4b4:	00a300a0 	.word	0x00a300a0
    f4b8:	00aa00a7 	.word	0x00aa00a7
    f4bc:	00b000ad 	.word	0x00b000ad
    f4c0:	00de00b3 	.word	0x00de00b3
    f4c4:	00b900e2 	.word	0x00b900e2
    f4c8:	00ee00b6 	.word	0x00ee00b6
    f4cc:	00d900e8 	.word	0x00d900e8
    f4d0:	00cd00d4 	.word	0x00cd00d4
    f4d4:	009a0046 	.word	0x009a0046
    f4d8:	00c900c5 	.word	0x00c900c5
    f4dc:	00bf00c2 	.word	0x00bf00c2
    f4e0:	00eb00e5 	.word	0x00eb00e5
    f4e4:	004f004f 	.word	0x004f004f
    f4e8:	00f70051 	.word	0x00f70051
    f4ec:	0115011e 	.word	0x0115011e
    f4f0:	012b0108 	.word	0x012b0108
    f4f4:	01450139 	.word	0x01450139
    f4f8:	015d0151 	.word	0x015d0151
    f4fc:	0046016a 	.word	0x0046016a
    f500:	017501a0 	.word	0x017501a0
    f504:	017e0179 	.word	0x017e0179
    f508:	01880183 	.word	0x01880183
    f50c:	018f018c 	.word	0x018f018c
    f510:	01950192 	.word	0x01950192
    f514:	0046019d 	.word	0x0046019d
    f518:	00460046 	.word	0x00460046
    f51c:	01a901a4 	.word	0x01a901a4
    f520:	02c601fc 	.word	0x02c601fc
    f524:	200a      	movs	r0, #10
    f526:	b013      	add	sp, #76	; 0x4c
    f528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f52a:	2208      	movs	r2, #8
    f52c:	49c8      	ldr	r1, [pc, #800]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f52e:	315d      	adds	r1, #93	; 0x5d
    f530:	0030      	movs	r0, r6
    f532:	4bc8      	ldr	r3, [pc, #800]	; (f854 <LORAWAN_GetAttr+0x3cc>)
    f534:	4798      	blx	r3
    f536:	2008      	movs	r0, #8
    f538:	e7f5      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f53a:	ac0e      	add	r4, sp, #56	; 0x38
    f53c:	0021      	movs	r1, r4
    f53e:	4bc6      	ldr	r3, [pc, #792]	; (f858 <LORAWAN_GetAttr+0x3d0>)
    f540:	201d      	movs	r0, #29
    f542:	4798      	blx	r3
    f544:	4bc2      	ldr	r3, [pc, #776]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f546:	a910      	add	r1, sp, #64	; 0x40
    f548:	33fe      	adds	r3, #254	; 0xfe
    f54a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    f54c:	2208      	movs	r2, #8
    f54e:	808b      	strh	r3, [r1, #4]
    f550:	7923      	ldrb	r3, [r4, #4]
    f552:	718b      	strb	r3, [r1, #6]
    f554:	8823      	ldrh	r3, [r4, #0]
    f556:	800b      	strh	r3, [r1, #0]
    f558:	8863      	ldrh	r3, [r4, #2]
    f55a:	804b      	strh	r3, [r1, #2]
    f55c:	7963      	ldrb	r3, [r4, #5]
    f55e:	71cb      	strb	r3, [r1, #7]
    f560:	e7e6      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f562:	49bb      	ldr	r1, [pc, #748]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f564:	2208      	movs	r2, #8
    f566:	3155      	adds	r1, #85	; 0x55
    f568:	e7e2      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f56a:	4bb9      	ldr	r3, [pc, #740]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f56c:	681a      	ldr	r2, [r3, #0]
    f56e:	791b      	ldrb	r3, [r3, #4]
    f570:	0a12      	lsrs	r2, r2, #8
    f572:	061b      	lsls	r3, r3, #24
    f574:	4313      	orrs	r3, r2
    f576:	6033      	str	r3, [r6, #0]
    f578:	e7dd      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f57a:	49b5      	ldr	r1, [pc, #724]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f57c:	2210      	movs	r2, #16
    f57e:	3105      	adds	r1, #5
    f580:	e7d6      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f582:	49b3      	ldr	r1, [pc, #716]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f584:	2210      	movs	r2, #16
    f586:	3115      	adds	r1, #21
    f588:	e7d2      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f58a:	49b1      	ldr	r1, [pc, #708]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f58c:	2210      	movs	r2, #16
    f58e:	3145      	adds	r1, #69	; 0x45
    f590:	e7ce      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f592:	4baf      	ldr	r3, [pc, #700]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f594:	3384      	adds	r3, #132	; 0x84
    f596:	781b      	ldrb	r3, [r3, #0]
    f598:	069b      	lsls	r3, r3, #26
    f59a:	e03a      	b.n	f612 <LORAWAN_GetAttr+0x18a>
    f59c:	4bac      	ldr	r3, [pc, #688]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f59e:	33e7      	adds	r3, #231	; 0xe7
    f5a0:	781b      	ldrb	r3, [r3, #0]
    f5a2:	e005      	b.n	f5b0 <LORAWAN_GetAttr+0x128>
    f5a4:	4baa      	ldr	r3, [pc, #680]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5a6:	33e9      	adds	r3, #233	; 0xe9
    f5a8:	e7fa      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f5aa:	4ba9      	ldr	r3, [pc, #676]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5ac:	33ff      	adds	r3, #255	; 0xff
    f5ae:	785b      	ldrb	r3, [r3, #1]
    f5b0:	7033      	strb	r3, [r6, #0]
    f5b2:	e7c0      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f5b4:	4ba6      	ldr	r3, [pc, #664]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5b6:	3388      	adds	r3, #136	; 0x88
    f5b8:	681b      	ldr	r3, [r3, #0]
    f5ba:	e7dc      	b.n	f576 <LORAWAN_GetAttr+0xee>
    f5bc:	4ba4      	ldr	r3, [pc, #656]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5be:	338c      	adds	r3, #140	; 0x8c
    f5c0:	e7fa      	b.n	f5b8 <LORAWAN_GetAttr+0x130>
    f5c2:	4ba3      	ldr	r3, [pc, #652]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5c4:	33d0      	adds	r3, #208	; 0xd0
    f5c6:	881b      	ldrh	r3, [r3, #0]
    f5c8:	8033      	strh	r3, [r6, #0]
    f5ca:	e7b4      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f5cc:	4ba0      	ldr	r3, [pc, #640]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5ce:	33d2      	adds	r3, #210	; 0xd2
    f5d0:	e7f9      	b.n	f5c6 <LORAWAN_GetAttr+0x13e>
    f5d2:	4b9f      	ldr	r3, [pc, #636]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5d4:	33d4      	adds	r3, #212	; 0xd4
    f5d6:	e7f6      	b.n	f5c6 <LORAWAN_GetAttr+0x13e>
    f5d8:	4b9d      	ldr	r3, [pc, #628]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5da:	33d6      	adds	r3, #214	; 0xd6
    f5dc:	e7f3      	b.n	f5c6 <LORAWAN_GetAttr+0x13e>
    f5de:	4b9c      	ldr	r3, [pc, #624]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5e0:	33d8      	adds	r3, #216	; 0xd8
    f5e2:	881b      	ldrh	r3, [r3, #0]
    f5e4:	e7e4      	b.n	f5b0 <LORAWAN_GetAttr+0x128>
    f5e6:	4b9a      	ldr	r3, [pc, #616]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5e8:	33dc      	adds	r3, #220	; 0xdc
    f5ea:	e7d9      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f5ec:	4b98      	ldr	r3, [pc, #608]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5ee:	33dd      	adds	r3, #221	; 0xdd
    f5f0:	e7d6      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f5f2:	4b97      	ldr	r3, [pc, #604]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5f4:	33da      	adds	r3, #218	; 0xda
    f5f6:	e7e6      	b.n	f5c6 <LORAWAN_GetAttr+0x13e>
    f5f8:	4b95      	ldr	r3, [pc, #596]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f5fa:	33e2      	adds	r3, #226	; 0xe2
    f5fc:	e7d0      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f5fe:	4b94      	ldr	r3, [pc, #592]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f600:	33e1      	adds	r3, #225	; 0xe1
    f602:	e7cd      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f604:	4b92      	ldr	r3, [pc, #584]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f606:	33e8      	adds	r3, #232	; 0xe8
    f608:	e7ca      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f60a:	4b91      	ldr	r3, [pc, #580]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f60c:	3384      	adds	r3, #132	; 0x84
    f60e:	781b      	ldrb	r3, [r3, #0]
    f610:	06db      	lsls	r3, r3, #27
    f612:	0fdb      	lsrs	r3, r3, #31
    f614:	e7cc      	b.n	f5b0 <LORAWAN_GetAttr+0x128>
    f616:	4b8e      	ldr	r3, [pc, #568]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f618:	33e6      	adds	r3, #230	; 0xe6
    f61a:	e7c1      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f61c:	4b8c      	ldr	r3, [pc, #560]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f61e:	33e5      	adds	r3, #229	; 0xe5
    f620:	e7be      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f622:	4b8b      	ldr	r3, [pc, #556]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f624:	3398      	adds	r3, #152	; 0x98
    f626:	781b      	ldrb	r3, [r3, #0]
    f628:	e7ce      	b.n	f5c8 <LORAWAN_GetAttr+0x140>
    f62a:	4b89      	ldr	r3, [pc, #548]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f62c:	3308      	adds	r3, #8
    f62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f630:	e7a1      	b.n	f576 <LORAWAN_GetAttr+0xee>
    f632:	2016      	movs	r0, #22
    f634:	781b      	ldrb	r3, [r3, #0]
    f636:	a910      	add	r1, sp, #64	; 0x40
    f638:	700b      	strb	r3, [r1, #0]
    f63a:	4b88      	ldr	r3, [pc, #544]	; (f85c <LORAWAN_GetAttr+0x3d4>)
    f63c:	4798      	blx	r3
    f63e:	e77a      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	a910      	add	r1, sp, #64	; 0x40
    f644:	700b      	strb	r3, [r1, #0]
    f646:	2012      	movs	r0, #18
    f648:	e7f7      	b.n	f63a <LORAWAN_GetAttr+0x1b2>
    f64a:	781b      	ldrb	r3, [r3, #0]
    f64c:	a910      	add	r1, sp, #64	; 0x40
    f64e:	700b      	strb	r3, [r1, #0]
    f650:	2000      	movs	r0, #0
    f652:	e7f2      	b.n	f63a <LORAWAN_GetAttr+0x1b2>
    f654:	0010      	movs	r0, r2
    f656:	4b82      	ldr	r3, [pc, #520]	; (f860 <LORAWAN_GetAttr+0x3d8>)
    f658:	4798      	blx	r3
    f65a:	e76c      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f65c:	0010      	movs	r0, r2
    f65e:	4b81      	ldr	r3, [pc, #516]	; (f864 <LORAWAN_GetAttr+0x3dc>)
    f660:	e7fa      	b.n	f658 <LORAWAN_GetAttr+0x1d0>
    f662:	4b7b      	ldr	r3, [pc, #492]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f664:	33ff      	adds	r3, #255	; 0xff
    f666:	e79b      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f668:	4b79      	ldr	r3, [pc, #484]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f66a:	33fd      	adds	r3, #253	; 0xfd
    f66c:	e798      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f66e:	4b78      	ldr	r3, [pc, #480]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f670:	33fe      	adds	r3, #254	; 0xfe
    f672:	e795      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f674:	21fa      	movs	r1, #250	; 0xfa
    f676:	4b76      	ldr	r3, [pc, #472]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f678:	0089      	lsls	r1, r1, #2
    f67a:	3390      	adds	r3, #144	; 0x90
    f67c:	6818      	ldr	r0, [r3, #0]
    f67e:	4b7a      	ldr	r3, [pc, #488]	; (f868 <LORAWAN_GetAttr+0x3e0>)
    f680:	4798      	blx	r3
    f682:	8030      	strh	r0, [r6, #0]
    f684:	e757      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f686:	780a      	ldrb	r2, [r1, #0]
    f688:	200a      	movs	r0, #10
    f68a:	2a03      	cmp	r2, #3
    f68c:	d900      	bls.n	f690 <LORAWAN_GetAttr+0x208>
    f68e:	e74a      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f690:	232e      	movs	r3, #46	; 0x2e
    f692:	496f      	ldr	r1, [pc, #444]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f694:	33ff      	adds	r3, #255	; 0xff
    f696:	5cc9      	ldrb	r1, [r1, r3]
    f698:	3b2d      	subs	r3, #45	; 0x2d
    f69a:	3bff      	subs	r3, #255	; 0xff
    f69c:	4093      	lsls	r3, r2
    f69e:	400b      	ands	r3, r1
    f6a0:	1e5a      	subs	r2, r3, #1
    f6a2:	4193      	sbcs	r3, r2
    f6a4:	7033      	strb	r3, [r6, #0]
    f6a6:	e02e      	b.n	f706 <LORAWAN_GetAttr+0x27e>
    f6a8:	780b      	ldrb	r3, [r1, #0]
    f6aa:	200a      	movs	r0, #10
    f6ac:	2b03      	cmp	r3, #3
    f6ae:	d900      	bls.n	f6b2 <LORAWAN_GetAttr+0x22a>
    f6b0:	e739      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f6b2:	213c      	movs	r1, #60	; 0x3c
    f6b4:	4359      	muls	r1, r3
    f6b6:	3145      	adds	r1, #69	; 0x45
    f6b8:	4b65      	ldr	r3, [pc, #404]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f6ba:	31ff      	adds	r1, #255	; 0xff
    f6bc:	18c9      	adds	r1, r1, r3
    f6be:	2210      	movs	r2, #16
    f6c0:	e736      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f6c2:	780b      	ldrb	r3, [r1, #0]
    f6c4:	200a      	movs	r0, #10
    f6c6:	2b03      	cmp	r3, #3
    f6c8:	d900      	bls.n	f6cc <LORAWAN_GetAttr+0x244>
    f6ca:	e72c      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f6cc:	213c      	movs	r1, #60	; 0x3c
    f6ce:	4359      	muls	r1, r3
    f6d0:	3135      	adds	r1, #53	; 0x35
    f6d2:	e7f1      	b.n	f6b8 <LORAWAN_GetAttr+0x230>
    f6d4:	780b      	ldrb	r3, [r1, #0]
    f6d6:	200a      	movs	r0, #10
    f6d8:	2b03      	cmp	r3, #3
    f6da:	d900      	bls.n	f6de <LORAWAN_GetAttr+0x256>
    f6dc:	e723      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f6de:	213c      	movs	r1, #60	; 0x3c
    f6e0:	4359      	muls	r1, r3
    f6e2:	4b5b      	ldr	r3, [pc, #364]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f6e4:	3131      	adds	r1, #49	; 0x31
    f6e6:	31ff      	adds	r1, #255	; 0xff
    f6e8:	18c9      	adds	r1, r1, r3
    f6ea:	2204      	movs	r2, #4
    f6ec:	e720      	b.n	f530 <LORAWAN_GetAttr+0xa8>
    f6ee:	780a      	ldrb	r2, [r1, #0]
    f6f0:	200a      	movs	r0, #10
    f6f2:	2a03      	cmp	r2, #3
    f6f4:	d900      	bls.n	f6f8 <LORAWAN_GetAttr+0x270>
    f6f6:	e716      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f6f8:	233c      	movs	r3, #60	; 0x3c
    f6fa:	435a      	muls	r2, r3
    f6fc:	4b54      	ldr	r3, [pc, #336]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f6fe:	189b      	adds	r3, r3, r2
    f700:	33fc      	adds	r3, #252	; 0xfc
    f702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f704:	6033      	str	r3, [r6, #0]
    f706:	3802      	subs	r0, #2
    f708:	e70d      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f70a:	780a      	ldrb	r2, [r1, #0]
    f70c:	200a      	movs	r0, #10
    f70e:	2a03      	cmp	r2, #3
    f710:	d900      	bls.n	f714 <LORAWAN_GetAttr+0x28c>
    f712:	e708      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f714:	233c      	movs	r3, #60	; 0x3c
    f716:	435a      	muls	r2, r3
    f718:	4b4d      	ldr	r3, [pc, #308]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f71a:	189b      	adds	r3, r3, r2
    f71c:	33fc      	adds	r3, #252	; 0xfc
    f71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f720:	e7f0      	b.n	f704 <LORAWAN_GetAttr+0x27c>
    f722:	780a      	ldrb	r2, [r1, #0]
    f724:	200a      	movs	r0, #10
    f726:	2a03      	cmp	r2, #3
    f728:	d900      	bls.n	f72c <LORAWAN_GetAttr+0x2a4>
    f72a:	e6fc      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f72c:	233c      	movs	r3, #60	; 0x3c
    f72e:	435a      	muls	r2, r3
    f730:	4b47      	ldr	r3, [pc, #284]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f732:	189b      	adds	r3, r3, r2
    f734:	33fc      	adds	r3, #252	; 0xfc
    f736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f738:	e7e4      	b.n	f704 <LORAWAN_GetAttr+0x27c>
    f73a:	780a      	ldrb	r2, [r1, #0]
    f73c:	200a      	movs	r0, #10
    f73e:	2a03      	cmp	r2, #3
    f740:	d900      	bls.n	f744 <LORAWAN_GetAttr+0x2bc>
    f742:	e6f0      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f744:	233c      	movs	r3, #60	; 0x3c
    f746:	435a      	muls	r2, r3
    f748:	4b41      	ldr	r3, [pc, #260]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f74a:	189b      	adds	r3, r3, r2
    f74c:	33fc      	adds	r3, #252	; 0xfc
    f74e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f750:	e7d8      	b.n	f704 <LORAWAN_GetAttr+0x27c>
    f752:	780a      	ldrb	r2, [r1, #0]
    f754:	200a      	movs	r0, #10
    f756:	2a03      	cmp	r2, #3
    f758:	d900      	bls.n	f75c <LORAWAN_GetAttr+0x2d4>
    f75a:	e6e4      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f75c:	233c      	movs	r3, #60	; 0x3c
    f75e:	435a      	muls	r2, r3
    f760:	4b3b      	ldr	r3, [pc, #236]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f762:	189b      	adds	r3, r3, r2
    f764:	3369      	adds	r3, #105	; 0x69
    f766:	33ff      	adds	r3, #255	; 0xff
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	e79b      	b.n	f6a4 <LORAWAN_GetAttr+0x21c>
    f76c:	780a      	ldrb	r2, [r1, #0]
    f76e:	200a      	movs	r0, #10
    f770:	2a03      	cmp	r2, #3
    f772:	d900      	bls.n	f776 <LORAWAN_GetAttr+0x2ee>
    f774:	e6d7      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f776:	233c      	movs	r3, #60	; 0x3c
    f778:	435a      	muls	r2, r3
    f77a:	4b35      	ldr	r3, [pc, #212]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f77c:	189b      	adds	r3, r3, r2
    f77e:	336a      	adds	r3, #106	; 0x6a
    f780:	e7f1      	b.n	f766 <LORAWAN_GetAttr+0x2de>
    f782:	0010      	movs	r0, r2
    f784:	4b39      	ldr	r3, [pc, #228]	; (f86c <LORAWAN_GetAttr+0x3e4>)
    f786:	4798      	blx	r3
    f788:	e6cd      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f78a:	0011      	movs	r1, r2
    f78c:	4b32      	ldr	r3, [pc, #200]	; (f858 <LORAWAN_GetAttr+0x3d0>)
    f78e:	201f      	movs	r0, #31
    f790:	4798      	blx	r3
    f792:	e6d0      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f794:	4b2e      	ldr	r3, [pc, #184]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f796:	3394      	adds	r3, #148	; 0x94
    f798:	781b      	ldrb	r3, [r3, #0]
    f79a:	071b      	lsls	r3, r3, #28
    f79c:	e739      	b.n	f612 <LORAWAN_GetAttr+0x18a>
    f79e:	4b2c      	ldr	r3, [pc, #176]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7a0:	3394      	adds	r3, #148	; 0x94
    f7a2:	781b      	ldrb	r3, [r3, #0]
    f7a4:	07db      	lsls	r3, r3, #31
    f7a6:	e734      	b.n	f612 <LORAWAN_GetAttr+0x18a>
    f7a8:	2030      	movs	r0, #48	; 0x30
    f7aa:	4b2c      	ldr	r3, [pc, #176]	; (f85c <LORAWAN_GetAttr+0x3d4>)
    f7ac:	4798      	blx	r3
    f7ae:	e6ba      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f7b0:	492f      	ldr	r1, [pc, #188]	; (f870 <LORAWAN_GetAttr+0x3e8>)
    f7b2:	2026      	movs	r0, #38	; 0x26
    f7b4:	e7f9      	b.n	f7aa <LORAWAN_GetAttr+0x322>
    f7b6:	4b26      	ldr	r3, [pc, #152]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7b8:	33e4      	adds	r3, #228	; 0xe4
    f7ba:	e6f1      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f7bc:	4b24      	ldr	r3, [pc, #144]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7be:	33e3      	adds	r3, #227	; 0xe3
    f7c0:	e6ee      	b.n	f5a0 <LORAWAN_GetAttr+0x118>
    f7c2:	4b2c      	ldr	r3, [pc, #176]	; (f874 <LORAWAN_GetAttr+0x3ec>)
    f7c4:	4798      	blx	r3
    f7c6:	4b2c      	ldr	r3, [pc, #176]	; (f878 <LORAWAN_GetAttr+0x3f0>)
    f7c8:	0004      	movs	r4, r0
    f7ca:	4798      	blx	r3
    f7cc:	1b00      	subs	r0, r0, r4
    f7ce:	7030      	strb	r0, [r6, #0]
    f7d0:	e6b1      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f7d2:	2100      	movs	r1, #0
    f7d4:	2020      	movs	r0, #32
    f7d6:	e7e8      	b.n	f7aa <LORAWAN_GetAttr+0x322>
    f7d8:	4b1d      	ldr	r3, [pc, #116]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7da:	33ff      	adds	r3, #255	; 0xff
    f7dc:	7f5b      	ldrb	r3, [r3, #29]
    f7de:	e6db      	b.n	f598 <LORAWAN_GetAttr+0x110>
    f7e0:	238f      	movs	r3, #143	; 0x8f
    f7e2:	4a1b      	ldr	r2, [pc, #108]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7e4:	009b      	lsls	r3, r3, #2
    f7e6:	58d3      	ldr	r3, [r2, r3]
    f7e8:	e6c5      	b.n	f576 <LORAWAN_GetAttr+0xee>
    f7ea:	258d      	movs	r5, #141	; 0x8d
    f7ec:	4c18      	ldr	r4, [pc, #96]	; (f850 <LORAWAN_GetAttr+0x3c8>)
    f7ee:	00ad      	lsls	r5, r5, #2
    f7f0:	5963      	ldr	r3, [r4, r5]
    f7f2:	2015      	movs	r0, #21
    f7f4:	3301      	adds	r3, #1
    f7f6:	d100      	bne.n	f7fa <LORAWAN_GetAttr+0x372>
    f7f8:	e695      	b.n	f526 <LORAWAN_GetAttr+0x9e>
    f7fa:	4b20      	ldr	r3, [pc, #128]	; (f87c <LORAWAN_GetAttr+0x3f4>)
    f7fc:	a910      	add	r1, sp, #64	; 0x40
    f7fe:	5ce0      	ldrb	r0, [r4, r3]
    f800:	4b1f      	ldr	r3, [pc, #124]	; (f880 <LORAWAN_GetAttr+0x3f8>)
    f802:	4798      	blx	r3
    f804:	4b1f      	ldr	r3, [pc, #124]	; (f884 <LORAWAN_GetAttr+0x3fc>)
    f806:	4798      	blx	r3
    f808:	22fa      	movs	r2, #250	; 0xfa
    f80a:	9000      	str	r0, [sp, #0]
    f80c:	9101      	str	r1, [sp, #4]
    f80e:	0092      	lsls	r2, r2, #2
    f810:	5960      	ldr	r0, [r4, r5]
    f812:	2300      	movs	r3, #0
    f814:	4d1c      	ldr	r5, [pc, #112]	; (f888 <LORAWAN_GetAttr+0x400>)
    f816:	2100      	movs	r1, #0
    f818:	47a8      	blx	r5
    f81a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f81c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f81e:	9002      	str	r0, [sp, #8]
    f820:	9103      	str	r1, [sp, #12]
    f822:	9800      	ldr	r0, [sp, #0]
    f824:	9901      	ldr	r1, [sp, #4]
    f826:	1a80      	subs	r0, r0, r2
    f828:	4199      	sbcs	r1, r3
    f82a:	22fa      	movs	r2, #250	; 0xfa
    f82c:	2300      	movs	r3, #0
    f82e:	0092      	lsls	r2, r2, #2
    f830:	4d16      	ldr	r5, [pc, #88]	; (f88c <LORAWAN_GetAttr+0x404>)
    f832:	47a8      	blx	r5
    f834:	238e      	movs	r3, #142	; 0x8e
    f836:	009b      	lsls	r3, r3, #2
    f838:	5ce4      	ldrb	r4, [r4, r3]
    f83a:	2300      	movs	r3, #0
    f83c:	00a2      	lsls	r2, r4, #2
    f83e:	9c02      	ldr	r4, [sp, #8]
    f840:	9d03      	ldr	r5, [sp, #12]
    f842:	1912      	adds	r2, r2, r4
    f844:	416b      	adcs	r3, r5
    f846:	1812      	adds	r2, r2, r0
    f848:	414b      	adcs	r3, r1
    f84a:	6032      	str	r2, [r6, #0]
    f84c:	6073      	str	r3, [r6, #4]
    f84e:	e672      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f850:	200029a4 	.word	0x200029a4
    f854:	00017691 	.word	0x00017691
    f858:	00012a41 	.word	0x00012a41
    f85c:	0000b6c5 	.word	0x0000b6c5
    f860:	0000f43d 	.word	0x0000f43d
    f864:	0000f45d 	.word	0x0000f45d
    f868:	00014509 	.word	0x00014509
    f86c:	0000b9a1 	.word	0x0000b9a1
    f870:	20002a8b 	.word	0x20002a8b
    f874:	0000daf1 	.word	0x0000daf1
    f878:	0000db99 	.word	0x0000db99
    f87c:	00000231 	.word	0x00000231
    f880:	0000d125 	.word	0x0000d125
    f884:	0000cadd 	.word	0x0000cadd
    f888:	00014925 	.word	0x00014925
    f88c:	000148e5 	.word	0x000148e5
    f890:	88ca      	ldrh	r2, [r1, #6]
    f892:	780b      	ldrb	r3, [r1, #0]
    f894:	9206      	str	r2, [sp, #24]
    f896:	784a      	ldrb	r2, [r1, #1]
    f898:	af0e      	add	r7, sp, #56	; 0x38
    f89a:	9209      	str	r2, [sp, #36]	; 0x24
    f89c:	788a      	ldrb	r2, [r1, #2]
    f89e:	2025      	movs	r0, #37	; 0x25
    f8a0:	920a      	str	r2, [sp, #40]	; 0x28
    f8a2:	78ca      	ldrb	r2, [r1, #3]
    f8a4:	920b      	str	r2, [sp, #44]	; 0x2c
    f8a6:	790a      	ldrb	r2, [r1, #4]
    f8a8:	9208      	str	r2, [sp, #32]
    f8aa:	aa0c      	add	r2, sp, #48	; 0x30
    f8ac:	1d94      	adds	r4, r2, #6
    f8ae:	7193      	strb	r3, [r2, #6]
    f8b0:	0021      	movs	r1, r4
    f8b2:	003a      	movs	r2, r7
    f8b4:	4b5e      	ldr	r3, [pc, #376]	; (fa30 <LORAWAN_GetAttr+0x5a8>)
    f8b6:	4798      	blx	r3
    f8b8:	ab0c      	add	r3, sp, #48	; 0x30
    f8ba:	1ddd      	adds	r5, r3, #7
    f8bc:	002a      	movs	r2, r5
    f8be:	0021      	movs	r1, r4
    f8c0:	2023      	movs	r0, #35	; 0x23
    f8c2:	4b5b      	ldr	r3, [pc, #364]	; (fa30 <LORAWAN_GetAttr+0x5a8>)
    f8c4:	4798      	blx	r3
    f8c6:	782d      	ldrb	r5, [r5, #0]
    f8c8:	2d01      	cmp	r5, #1
    f8ca:	d000      	beq.n	f8ce <LORAWAN_GetAttr+0x446>
    f8cc:	e0a1      	b.n	fa12 <LORAWAN_GetAttr+0x58a>
    f8ce:	ac10      	add	r4, sp, #64	; 0x40
    f8d0:	4b58      	ldr	r3, [pc, #352]	; (fa34 <LORAWAN_GetAttr+0x5ac>)
    f8d2:	0021      	movs	r1, r4
    f8d4:	2007      	movs	r0, #7
    f8d6:	4798      	blx	r3
    f8d8:	783b      	ldrb	r3, [r7, #0]
    f8da:	2b0c      	cmp	r3, #12
    f8dc:	d000      	beq.n	f8e0 <LORAWAN_GetAttr+0x458>
    f8de:	e08a      	b.n	f9f6 <LORAWAN_GetAttr+0x56e>
    f8e0:	2700      	movs	r7, #0
    f8e2:	7823      	ldrb	r3, [r4, #0]
    f8e4:	3b07      	subs	r3, #7
    f8e6:	b2db      	uxtb	r3, r3
    f8e8:	429d      	cmp	r5, r3
    f8ea:	417f      	adcs	r7, r7
    f8ec:	b2fb      	uxtb	r3, r7
    f8ee:	9302      	str	r3, [sp, #8]
    f8f0:	ac10      	add	r4, sp, #64	; 0x40
    f8f2:	ab0c      	add	r3, sp, #48	; 0x30
    f8f4:	1d99      	adds	r1, r3, #6
    f8f6:	0022      	movs	r2, r4
    f8f8:	4b4d      	ldr	r3, [pc, #308]	; (fa30 <LORAWAN_GetAttr+0x5a8>)
    f8fa:	2024      	movs	r0, #36	; 0x24
    f8fc:	4798      	blx	r3
    f8fe:	7823      	ldrb	r3, [r4, #0]
    f900:	3b07      	subs	r3, #7
    f902:	b2db      	uxtb	r3, r3
    f904:	2b02      	cmp	r3, #2
    f906:	d900      	bls.n	f90a <LORAWAN_GetAttr+0x482>
    f908:	e080      	b.n	fa0c <LORAWAN_GetAttr+0x584>
    f90a:	4a4b      	ldr	r2, [pc, #300]	; (fa38 <LORAWAN_GetAttr+0x5b0>)
    f90c:	00db      	lsls	r3, r3, #3
    f90e:	18d3      	adds	r3, r2, r3
    f910:	681c      	ldr	r4, [r3, #0]
    f912:	685d      	ldr	r5, [r3, #4]
    f914:	2001      	movs	r0, #1
    f916:	ab0e      	add	r3, sp, #56	; 0x38
    f918:	781b      	ldrb	r3, [r3, #0]
    f91a:	4f48      	ldr	r7, [pc, #288]	; (fa3c <LORAWAN_GetAttr+0x5b4>)
    f91c:	9300      	str	r3, [sp, #0]
    f91e:	4098      	lsls	r0, r3
    f920:	47b8      	blx	r7
    f922:	0002      	movs	r2, r0
    f924:	000b      	movs	r3, r1
    f926:	0020      	movs	r0, r4
    f928:	0029      	movs	r1, r5
    f92a:	4c45      	ldr	r4, [pc, #276]	; (fa40 <LORAWAN_GetAttr+0x5b8>)
    f92c:	47a0      	blx	r4
    f92e:	0002      	movs	r2, r0
    f930:	000b      	movs	r3, r1
    f932:	2000      	movs	r0, #0
    f934:	4943      	ldr	r1, [pc, #268]	; (fa44 <LORAWAN_GetAttr+0x5bc>)
    f936:	47a0      	blx	r4
    f938:	466b      	mov	r3, sp
    f93a:	9004      	str	r0, [sp, #16]
    f93c:	9105      	str	r1, [sp, #20]
    f93e:	7e18      	ldrb	r0, [r3, #24]
    f940:	47b8      	blx	r7
    f942:	4c41      	ldr	r4, [pc, #260]	; (fa48 <LORAWAN_GetAttr+0x5c0>)
    f944:	2200      	movs	r2, #0
    f946:	4b41      	ldr	r3, [pc, #260]	; (fa4c <LORAWAN_GetAttr+0x5c4>)
    f948:	47a0      	blx	r4
    f94a:	9a04      	ldr	r2, [sp, #16]
    f94c:	9b05      	ldr	r3, [sp, #20]
    f94e:	4c40      	ldr	r4, [pc, #256]	; (fa50 <LORAWAN_GetAttr+0x5c8>)
    f950:	47a0      	blx	r4
    f952:	9b08      	ldr	r3, [sp, #32]
    f954:	9006      	str	r0, [sp, #24]
    f956:	9107      	str	r1, [sp, #28]
    f958:	0058      	lsls	r0, r3, #1
    f95a:	9b00      	ldr	r3, [sp, #0]
    f95c:	2214      	movs	r2, #20
    f95e:	1ac0      	subs	r0, r0, r3
    f960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f962:	3007      	adds	r0, #7
    f964:	009b      	lsls	r3, r3, #2
    f966:	18c0      	adds	r0, r0, r3
    f968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f96a:	0080      	lsls	r0, r0, #2
    f96c:	1e59      	subs	r1, r3, #1
    f96e:	418b      	sbcs	r3, r1
    f970:	425b      	negs	r3, r3
    f972:	401a      	ands	r2, r3
    f974:	1a80      	subs	r0, r0, r2
    f976:	47b8      	blx	r7
    f978:	0004      	movs	r4, r0
    f97a:	9802      	ldr	r0, [sp, #8]
    f97c:	000d      	movs	r5, r1
    f97e:	1e43      	subs	r3, r0, #1
    f980:	4198      	sbcs	r0, r3
    f982:	9b00      	ldr	r3, [sp, #0]
    f984:	0040      	lsls	r0, r0, #1
    f986:	1a18      	subs	r0, r3, r0
    f988:	0080      	lsls	r0, r0, #2
    f98a:	47b8      	blx	r7
    f98c:	0002      	movs	r2, r0
    f98e:	000b      	movs	r3, r1
    f990:	0020      	movs	r0, r4
    f992:	0029      	movs	r1, r5
    f994:	4c2a      	ldr	r4, [pc, #168]	; (fa40 <LORAWAN_GetAttr+0x5b8>)
    f996:	47a0      	blx	r4
    f998:	4b2e      	ldr	r3, [pc, #184]	; (fa54 <LORAWAN_GetAttr+0x5cc>)
    f99a:	0004      	movs	r4, r0
    f99c:	000d      	movs	r5, r1
    f99e:	4798      	blx	r3
    f9a0:	4b2d      	ldr	r3, [pc, #180]	; (fa58 <LORAWAN_GetAttr+0x5d0>)
    f9a2:	0007      	movs	r7, r0
    f9a4:	4798      	blx	r3
    f9a6:	0002      	movs	r2, r0
    f9a8:	000b      	movs	r3, r1
    f9aa:	0020      	movs	r0, r4
    f9ac:	0029      	movs	r1, r5
    f9ae:	4c2b      	ldr	r4, [pc, #172]	; (fa5c <LORAWAN_GetAttr+0x5d4>)
    f9b0:	47a0      	blx	r4
    f9b2:	2200      	movs	r2, #0
    f9b4:	2300      	movs	r3, #0
    f9b6:	4c2a      	ldr	r4, [pc, #168]	; (fa60 <LORAWAN_GetAttr+0x5d8>)
    f9b8:	47a0      	blx	r4
    f9ba:	1e43      	subs	r3, r0, #1
    f9bc:	4198      	sbcs	r0, r3
    f9be:	183f      	adds	r7, r7, r0
    f9c0:	003b      	movs	r3, r7
    f9c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f9c4:	3004      	adds	r0, #4
    f9c6:	4343      	muls	r3, r0
    f9c8:	3308      	adds	r3, #8
    f9ca:	0018      	movs	r0, r3
    f9cc:	4b22      	ldr	r3, [pc, #136]	; (fa58 <LORAWAN_GetAttr+0x5d0>)
    f9ce:	4798      	blx	r3
    f9d0:	9a04      	ldr	r2, [sp, #16]
    f9d2:	9b05      	ldr	r3, [sp, #20]
    f9d4:	4c1e      	ldr	r4, [pc, #120]	; (fa50 <LORAWAN_GetAttr+0x5c8>)
    f9d6:	47a0      	blx	r4
    f9d8:	9a06      	ldr	r2, [sp, #24]
    f9da:	9b07      	ldr	r3, [sp, #28]
    f9dc:	4c1a      	ldr	r4, [pc, #104]	; (fa48 <LORAWAN_GetAttr+0x5c0>)
    f9de:	47a0      	blx	r4
    f9e0:	2200      	movs	r2, #0
    f9e2:	4b20      	ldr	r3, [pc, #128]	; (fa64 <LORAWAN_GetAttr+0x5dc>)
    f9e4:	4c1a      	ldr	r4, [pc, #104]	; (fa50 <LORAWAN_GetAttr+0x5c8>)
    f9e6:	47a0      	blx	r4
    f9e8:	2200      	movs	r2, #0
    f9ea:	4b1e      	ldr	r3, [pc, #120]	; (fa64 <LORAWAN_GetAttr+0x5dc>)
    f9ec:	47a0      	blx	r4
    f9ee:	4b19      	ldr	r3, [pc, #100]	; (fa54 <LORAWAN_GetAttr+0x5cc>)
    f9f0:	4798      	blx	r3
    f9f2:	6030      	str	r0, [r6, #0]
    f9f4:	e59f      	b.n	f536 <LORAWAN_GetAttr+0xae>
    f9f6:	2200      	movs	r2, #0
    f9f8:	9202      	str	r2, [sp, #8]
    f9fa:	2b0b      	cmp	r3, #11
    f9fc:	d000      	beq.n	fa00 <LORAWAN_GetAttr+0x578>
    f9fe:	e777      	b.n	f8f0 <LORAWAN_GetAttr+0x468>
    fa00:	7827      	ldrb	r7, [r4, #0]
    fa02:	3f07      	subs	r7, #7
    fa04:	427a      	negs	r2, r7
    fa06:	417a      	adcs	r2, r7
    fa08:	b2d3      	uxtb	r3, r2
    fa0a:	e770      	b.n	f8ee <LORAWAN_GetAttr+0x466>
    fa0c:	2400      	movs	r4, #0
    fa0e:	2500      	movs	r5, #0
    fa10:	e780      	b.n	f914 <LORAWAN_GetAttr+0x48c>
    fa12:	20a0      	movs	r0, #160	; 0xa0
    fa14:	9b08      	ldr	r3, [sp, #32]
    fa16:	4358      	muls	r0, r3
    fa18:	23c8      	movs	r3, #200	; 0xc8
    fa1a:	009b      	lsls	r3, r3, #2
    fa1c:	18c0      	adds	r0, r0, r3
    fa1e:	4b0e      	ldr	r3, [pc, #56]	; (fa58 <LORAWAN_GetAttr+0x5d0>)
    fa20:	4798      	blx	r3
    fa22:	e7e4      	b.n	f9ee <LORAWAN_GetAttr+0x566>
    fa24:	4b10      	ldr	r3, [pc, #64]	; (fa68 <LORAWAN_GetAttr+0x5e0>)
    fa26:	33ff      	adds	r3, #255	; 0xff
    fa28:	7f5b      	ldrb	r3, [r3, #29]
    fa2a:	079b      	lsls	r3, r3, #30
    fa2c:	e5f1      	b.n	f612 <LORAWAN_GetAttr+0x18a>
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	0000b6c5 	.word	0x0000b6c5
    fa34:	00012a41 	.word	0x00012a41
    fa38:	0001df30 	.word	0x0001df30
    fa3c:	000173a9 	.word	0x000173a9
    fa40:	00015fad 	.word	0x00015fad
    fa44:	3ff00000 	.word	0x3ff00000
    fa48:	0001598d 	.word	0x0001598d
    fa4c:	40110000 	.word	0x40110000
    fa50:	00016815 	.word	0x00016815
    fa54:	000149a9 	.word	0x000149a9
    fa58:	0001742d 	.word	0x0001742d
    fa5c:	00016d15 	.word	0x00016d15
    fa60:	00014849 	.word	0x00014849
    fa64:	408f4000 	.word	0x408f4000
    fa68:	200029a4 	.word	0x200029a4

0000fa6c <LORAWAN_TxDone>:
    fa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa6e:	6843      	ldr	r3, [r0, #4]
    fa70:	b091      	sub	sp, #68	; 0x44
    fa72:	ae08      	add	r6, sp, #32
    fa74:	7804      	ldrb	r4, [r0, #0]
    fa76:	9302      	str	r3, [sp, #8]
    fa78:	2100      	movs	r1, #0
    fa7a:	4b84      	ldr	r3, [pc, #528]	; (fc8c <LORAWAN_TxDone+0x220>)
    fa7c:	0032      	movs	r2, r6
    fa7e:	2028      	movs	r0, #40	; 0x28
    fa80:	4798      	blx	r3
    fa82:	4d83      	ldr	r5, [pc, #524]	; (fc90 <LORAWAN_TxDone+0x224>)
    fa84:	0029      	movs	r1, r5
    fa86:	3184      	adds	r1, #132	; 0x84
    fa88:	780b      	ldrb	r3, [r1, #0]
    fa8a:	2b7f      	cmp	r3, #127	; 0x7f
    fa8c:	d900      	bls.n	fa90 <LORAWAN_TxDone+0x24>
    fa8e:	e236      	b.n	fefe <LORAWAN_TxDone+0x492>
    fa90:	4a80      	ldr	r2, [pc, #512]	; (fc94 <LORAWAN_TxDone+0x228>)
    fa92:	7810      	ldrb	r0, [r2, #0]
    fa94:	2804      	cmp	r0, #4
    fa96:	d10b      	bne.n	fab0 <LORAWAN_TxDone+0x44>
    fa98:	220e      	movs	r2, #14
    fa9a:	4393      	bics	r3, r2
    fa9c:	700b      	strb	r3, [r1, #0]
    fa9e:	3017      	adds	r0, #23
    faa0:	07db      	lsls	r3, r3, #31
    faa2:	d500      	bpl.n	faa6 <LORAWAN_TxDone+0x3a>
    faa4:	e0b0      	b.n	fc08 <LORAWAN_TxDone+0x19c>
    faa6:	201b      	movs	r0, #27
    faa8:	4b7b      	ldr	r3, [pc, #492]	; (fc98 <LORAWAN_TxDone+0x22c>)
    faaa:	4798      	blx	r3
    faac:	b011      	add	sp, #68	; 0x44
    faae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fab0:	7813      	ldrb	r3, [r2, #0]
    fab2:	2b02      	cmp	r3, #2
    fab4:	d1fa      	bne.n	faac <LORAWAN_TxDone+0x40>
    fab6:	4b79      	ldr	r3, [pc, #484]	; (fc9c <LORAWAN_TxDone+0x230>)
    fab8:	5cea      	ldrb	r2, [r5, r3]
    faba:	2a00      	cmp	r2, #0
    fabc:	d005      	beq.n	faca <LORAWAN_TxDone+0x5e>
    fabe:	2200      	movs	r2, #0
    fac0:	4977      	ldr	r1, [pc, #476]	; (fca0 <LORAWAN_TxDone+0x234>)
    fac2:	54ea      	strb	r2, [r5, r3]
    fac4:	200b      	movs	r0, #11
    fac6:	4b77      	ldr	r3, [pc, #476]	; (fca4 <LORAWAN_TxDone+0x238>)
    fac8:	4798      	blx	r3
    faca:	2c07      	cmp	r4, #7
    facc:	d000      	beq.n	fad0 <LORAWAN_TxDone+0x64>
    face:	e09f      	b.n	fc10 <LORAWAN_TxDone+0x1a4>
    fad0:	79f3      	ldrb	r3, [r6, #7]
    fad2:	2b00      	cmp	r3, #0
    fad4:	d0ea      	beq.n	faac <LORAWAN_TxDone+0x40>
    fad6:	002b      	movs	r3, r5
    fad8:	3394      	adds	r3, #148	; 0x94
    fada:	7818      	ldrb	r0, [r3, #0]
    fadc:	002f      	movs	r7, r5
    fade:	2304      	movs	r3, #4
    fae0:	37fe      	adds	r7, #254	; 0xfe
    fae2:	4018      	ands	r0, r3
    fae4:	4e70      	ldr	r6, [pc, #448]	; (fca8 <LORAWAN_TxDone+0x23c>)
    fae6:	d005      	beq.n	faf4 <LORAWAN_TxDone+0x88>
    fae8:	2000      	movs	r0, #0
    faea:	2109      	movs	r1, #9
    faec:	8438      	strh	r0, [r7, #32]
    faee:	47b0      	blx	r6
    faf0:	0020      	movs	r0, r4
    faf2:	e7d9      	b.n	faa8 <LORAWAN_TxDone+0x3c>
    faf4:	8c3b      	ldrh	r3, [r7, #32]
    faf6:	2109      	movs	r1, #9
    faf8:	3301      	adds	r3, #1
    fafa:	843b      	strh	r3, [r7, #32]
    fafc:	47b0      	blx	r6
    fafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    fb00:	4a6a      	ldr	r2, [pc, #424]	; (fcac <LORAWAN_TxDone+0x240>)
    fb02:	4293      	cmp	r3, r2
    fb04:	d002      	beq.n	fb0c <LORAWAN_TxDone+0xa0>
    fb06:	8c3a      	ldrh	r2, [r7, #32]
    fb08:	429a      	cmp	r2, r3
    fb0a:	d265      	bcs.n	fbd8 <LORAWAN_TxDone+0x16c>
    fb0c:	4b68      	ldr	r3, [pc, #416]	; (fcb0 <LORAWAN_TxDone+0x244>)
    fb0e:	5ceb      	ldrb	r3, [r5, r3]
    fb10:	2b00      	cmp	r3, #0
    fb12:	d061      	beq.n	fbd8 <LORAWAN_TxDone+0x16c>
    fb14:	2701      	movs	r7, #1
    fb16:	002b      	movs	r3, r5
    fb18:	a906      	add	r1, sp, #24
    fb1a:	700f      	strb	r7, [r1, #0]
    fb1c:	33e9      	adds	r3, #233	; 0xe9
    fb1e:	781b      	ldrb	r3, [r3, #0]
    fb20:	aa0c      	add	r2, sp, #48	; 0x30
    fb22:	704b      	strb	r3, [r1, #1]
    fb24:	002b      	movs	r3, r5
    fb26:	33e7      	adds	r3, #231	; 0xe7
    fb28:	781b      	ldrb	r3, [r3, #0]
    fb2a:	202e      	movs	r0, #46	; 0x2e
    fb2c:	708b      	strb	r3, [r1, #2]
    fb2e:	4b61      	ldr	r3, [pc, #388]	; (fcb4 <LORAWAN_TxDone+0x248>)
    fb30:	4798      	blx	r3
    fb32:	2808      	cmp	r0, #8
    fb34:	d135      	bne.n	fba2 <LORAWAN_TxDone+0x136>
    fb36:	a807      	add	r0, sp, #28
    fb38:	4b5f      	ldr	r3, [pc, #380]	; (fcb8 <LORAWAN_TxDone+0x24c>)
    fb3a:	7007      	strb	r7, [r0, #0]
    fb3c:	4798      	blx	r3
    fb3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    fb40:	990d      	ldr	r1, [sp, #52]	; 0x34
    fb42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fb44:	4b5d      	ldr	r3, [pc, #372]	; (fcbc <LORAWAN_TxDone+0x250>)
    fb46:	4798      	blx	r3
    fb48:	002b      	movs	r3, r5
    fb4a:	33ce      	adds	r3, #206	; 0xce
    fb4c:	881b      	ldrh	r3, [r3, #0]
    fb4e:	a80a      	add	r0, sp, #40	; 0x28
    fb50:	7003      	strb	r3, [r0, #0]
    fb52:	4b5b      	ldr	r3, [pc, #364]	; (fcc0 <LORAWAN_TxDone+0x254>)
    fb54:	6043      	str	r3, [r0, #4]
    fb56:	4b5b      	ldr	r3, [pc, #364]	; (fcc4 <LORAWAN_TxDone+0x258>)
    fb58:	4798      	blx	r3
    fb5a:	1e04      	subs	r4, r0, #0
    fb5c:	d108      	bne.n	fb70 <LORAWAN_TxDone+0x104>
    fb5e:	220e      	movs	r2, #14
    fb60:	3584      	adds	r5, #132	; 0x84
    fb62:	782b      	ldrb	r3, [r5, #0]
    fb64:	4393      	bics	r3, r2
    fb66:	001a      	movs	r2, r3
    fb68:	2302      	movs	r3, #2
    fb6a:	4313      	orrs	r3, r2
    fb6c:	702b      	strb	r3, [r5, #0]
    fb6e:	e79d      	b.n	faac <LORAWAN_TxDone+0x40>
    fb70:	002b      	movs	r3, r5
    fb72:	3394      	adds	r3, #148	; 0x94
    fb74:	7818      	ldrb	r0, [r3, #0]
    fb76:	002b      	movs	r3, r5
    fb78:	4038      	ands	r0, r7
    fb7a:	33fe      	adds	r3, #254	; 0xfe
    fb7c:	4f52      	ldr	r7, [pc, #328]	; (fcc8 <LORAWAN_TxDone+0x25c>)
    fb7e:	4d53      	ldr	r5, [pc, #332]	; (fccc <LORAWAN_TxDone+0x260>)
    fb80:	2800      	cmp	r0, #0
    fb82:	d009      	beq.n	fb98 <LORAWAN_TxDone+0x12c>
    fb84:	2000      	movs	r0, #0
    fb86:	2109      	movs	r1, #9
    fb88:	8418      	strh	r0, [r3, #32]
    fb8a:	47b0      	blx	r6
    fb8c:	4b50      	ldr	r3, [pc, #320]	; (fcd0 <LORAWAN_TxDone+0x264>)
    fb8e:	4798      	blx	r3
    fb90:	47a8      	blx	r5
    fb92:	0020      	movs	r0, r4
    fb94:	47b8      	blx	r7
    fb96:	e789      	b.n	faac <LORAWAN_TxDone+0x40>
    fb98:	2109      	movs	r1, #9
    fb9a:	8418      	strh	r0, [r3, #32]
    fb9c:	47b0      	blx	r6
    fb9e:	4b4d      	ldr	r3, [pc, #308]	; (fcd4 <LORAWAN_TxDone+0x268>)
    fba0:	e7f5      	b.n	fb8e <LORAWAN_TxDone+0x122>
    fba2:	002b      	movs	r3, r5
    fba4:	3394      	adds	r3, #148	; 0x94
    fba6:	7818      	ldrb	r0, [r3, #0]
    fba8:	002b      	movs	r3, r5
    fbaa:	4007      	ands	r7, r0
    fbac:	4c46      	ldr	r4, [pc, #280]	; (fcc8 <LORAWAN_TxDone+0x25c>)
    fbae:	33fe      	adds	r3, #254	; 0xfe
    fbb0:	4d46      	ldr	r5, [pc, #280]	; (fccc <LORAWAN_TxDone+0x260>)
    fbb2:	2f00      	cmp	r7, #0
    fbb4:	d00a      	beq.n	fbcc <LORAWAN_TxDone+0x160>
    fbb6:	2700      	movs	r7, #0
    fbb8:	2109      	movs	r1, #9
    fbba:	0038      	movs	r0, r7
    fbbc:	841f      	strh	r7, [r3, #32]
    fbbe:	47b0      	blx	r6
    fbc0:	4b43      	ldr	r3, [pc, #268]	; (fcd0 <LORAWAN_TxDone+0x264>)
    fbc2:	4798      	blx	r3
    fbc4:	47a8      	blx	r5
    fbc6:	0038      	movs	r0, r7
    fbc8:	47a0      	blx	r4
    fbca:	e76f      	b.n	faac <LORAWAN_TxDone+0x40>
    fbcc:	2109      	movs	r1, #9
    fbce:	0038      	movs	r0, r7
    fbd0:	841f      	strh	r7, [r3, #32]
    fbd2:	47b0      	blx	r6
    fbd4:	4b3f      	ldr	r3, [pc, #252]	; (fcd4 <LORAWAN_TxDone+0x268>)
    fbd6:	e7f4      	b.n	fbc2 <LORAWAN_TxDone+0x156>
    fbd8:	002b      	movs	r3, r5
    fbda:	2000      	movs	r0, #0
    fbdc:	33fe      	adds	r3, #254	; 0xfe
    fbde:	2109      	movs	r1, #9
    fbe0:	8418      	strh	r0, [r3, #32]
    fbe2:	47b0      	blx	r6
    fbe4:	002a      	movs	r2, r5
    fbe6:	210e      	movs	r1, #14
    fbe8:	3284      	adds	r2, #132	; 0x84
    fbea:	7813      	ldrb	r3, [r2, #0]
    fbec:	3594      	adds	r5, #148	; 0x94
    fbee:	438b      	bics	r3, r1
    fbf0:	7013      	strb	r3, [r2, #0]
    fbf2:	2220      	movs	r2, #32
    fbf4:	782b      	ldrb	r3, [r5, #0]
    fbf6:	4c35      	ldr	r4, [pc, #212]	; (fccc <LORAWAN_TxDone+0x260>)
    fbf8:	4393      	bics	r3, r2
    fbfa:	702b      	strb	r3, [r5, #0]
    fbfc:	07db      	lsls	r3, r3, #31
    fbfe:	d505      	bpl.n	fc0c <LORAWAN_TxDone+0x1a0>
    fc00:	4b33      	ldr	r3, [pc, #204]	; (fcd0 <LORAWAN_TxDone+0x264>)
    fc02:	4798      	blx	r3
    fc04:	47a0      	blx	r4
    fc06:	2007      	movs	r0, #7
    fc08:	4b2f      	ldr	r3, [pc, #188]	; (fcc8 <LORAWAN_TxDone+0x25c>)
    fc0a:	e74e      	b.n	faaa <LORAWAN_TxDone+0x3e>
    fc0c:	4b31      	ldr	r3, [pc, #196]	; (fcd4 <LORAWAN_TxDone+0x268>)
    fc0e:	e7f8      	b.n	fc02 <LORAWAN_TxDone+0x196>
    fc10:	2c00      	cmp	r4, #0
    fc12:	d000      	beq.n	fc16 <LORAWAN_TxDone+0x1aa>
    fc14:	e74a      	b.n	faac <LORAWAN_TxDone+0x40>
    fc16:	002b      	movs	r3, r5
    fc18:	33fc      	adds	r3, #252	; 0xfc
    fc1a:	68de      	ldr	r6, [r3, #12]
    fc1c:	002b      	movs	r3, r5
    fc1e:	33fe      	adds	r3, #254	; 0xfe
    fc20:	841c      	strh	r4, [r3, #32]
    fc22:	0020      	movs	r0, r4
    fc24:	2109      	movs	r1, #9
    fc26:	4c20      	ldr	r4, [pc, #128]	; (fca8 <LORAWAN_TxDone+0x23c>)
    fc28:	47a0      	blx	r4
    fc2a:	002b      	movs	r3, r5
    fc2c:	33e3      	adds	r3, #227	; 0xe3
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	2b00      	cmp	r3, #0
    fc32:	d151      	bne.n	fcd8 <LORAWAN_TxDone+0x26c>
    fc34:	002a      	movs	r2, r5
    fc36:	32e4      	adds	r2, #228	; 0xe4
    fc38:	7812      	ldrb	r2, [r2, #0]
    fc3a:	2a00      	cmp	r2, #0
    fc3c:	d14c      	bne.n	fcd8 <LORAWAN_TxDone+0x26c>
    fc3e:	002b      	movs	r3, r5
    fc40:	3384      	adds	r3, #132	; 0x84
    fc42:	781a      	ldrb	r2, [r3, #0]
    fc44:	2301      	movs	r3, #1
    fc46:	421a      	tst	r2, r3
    fc48:	d055      	beq.n	fcf6 <LORAWAN_TxDone+0x28a>
    fc4a:	0029      	movs	r1, r5
    fc4c:	3188      	adds	r1, #136	; 0x88
    fc4e:	680a      	ldr	r2, [r1, #0]
    fc50:	18d2      	adds	r2, r2, r3
    fc52:	600a      	str	r2, [r1, #0]
    fc54:	218b      	movs	r1, #139	; 0x8b
    fc56:	0089      	lsls	r1, r1, #2
    fc58:	5c69      	ldrb	r1, [r5, r1]
    fc5a:	2900      	cmp	r1, #0
    fc5c:	d003      	beq.n	fc66 <LORAWAN_TxDone+0x1fa>
    fc5e:	408b      	lsls	r3, r1
    fc60:	3b01      	subs	r3, #1
    fc62:	421a      	tst	r2, r3
    fc64:	d102      	bne.n	fc6c <LORAWAN_TxDone+0x200>
    fc66:	2115      	movs	r1, #21
    fc68:	2000      	movs	r0, #0
    fc6a:	47a0      	blx	r4
    fc6c:	7833      	ldrb	r3, [r6, #0]
    fc6e:	002a      	movs	r2, r5
    fc70:	2b01      	cmp	r3, #1
    fc72:	d106      	bne.n	fc82 <LORAWAN_TxDone+0x216>
    fc74:	3294      	adds	r2, #148	; 0x94
    fc76:	7811      	ldrb	r1, [r2, #0]
    fc78:	430b      	orrs	r3, r1
    fc7a:	7013      	strb	r3, [r2, #0]
    fc7c:	002a      	movs	r2, r5
    fc7e:	32e4      	adds	r2, #228	; 0xe4
    fc80:	e000      	b.n	fc84 <LORAWAN_TxDone+0x218>
    fc82:	32e3      	adds	r2, #227	; 0xe3
    fc84:	7813      	ldrb	r3, [r2, #0]
    fc86:	3301      	adds	r3, #1
    fc88:	e034      	b.n	fcf4 <LORAWAN_TxDone+0x288>
    fc8a:	46c0      	nop			; (mov r8, r8)
    fc8c:	0000f489 	.word	0x0000f489
    fc90:	200029a4 	.word	0x200029a4
    fc94:	20002bec 	.word	0x20002bec
    fc98:	0000e6f1 	.word	0x0000e6f1
    fc9c:	00000222 	.word	0x00000222
    fca0:	20002bc5 	.word	0x20002bc5
    fca4:	00012b31 	.word	0x00012b31
    fca8:	0000be05 	.word	0x0000be05
    fcac:	0000ffff 	.word	0x0000ffff
    fcb0:	0000022a 	.word	0x0000022a
    fcb4:	0000b6c5 	.word	0x0000b6c5
    fcb8:	00013d35 	.word	0x00013d35
    fcbc:	0000eca5 	.word	0x0000eca5
    fcc0:	20002bfd 	.word	0x20002bfd
    fcc4:	00013461 	.word	0x00013461
    fcc8:	0000f23d 	.word	0x0000f23d
    fccc:	0000daad 	.word	0x0000daad
    fcd0:	0000e69d 	.word	0x0000e69d
    fcd4:	0000e6cd 	.word	0x0000e6cd
    fcd8:	002a      	movs	r2, r5
    fcda:	3284      	adds	r2, #132	; 0x84
    fcdc:	7811      	ldrb	r1, [r2, #0]
    fcde:	2201      	movs	r2, #1
    fce0:	4211      	tst	r1, r2
    fce2:	d008      	beq.n	fcf6 <LORAWAN_TxDone+0x28a>
    fce4:	0029      	movs	r1, r5
    fce6:	3194      	adds	r1, #148	; 0x94
    fce8:	7809      	ldrb	r1, [r1, #0]
    fcea:	4211      	tst	r1, r2
    fcec:	d1c6      	bne.n	fc7c <LORAWAN_TxDone+0x210>
    fcee:	189b      	adds	r3, r3, r2
    fcf0:	002a      	movs	r2, r5
    fcf2:	32e3      	adds	r2, #227	; 0xe3
    fcf4:	7013      	strb	r3, [r2, #0]
    fcf6:	002b      	movs	r3, r5
    fcf8:	2200      	movs	r2, #0
    fcfa:	33f9      	adds	r3, #249	; 0xf9
    fcfc:	701a      	strb	r2, [r3, #0]
    fcfe:	002a      	movs	r2, r5
    fd00:	210e      	movs	r1, #14
    fd02:	2604      	movs	r6, #4
    fd04:	3284      	adds	r2, #132	; 0x84
    fd06:	7813      	ldrb	r3, [r2, #0]
    fd08:	002f      	movs	r7, r5
    fd0a:	438b      	bics	r3, r1
    fd0c:	4333      	orrs	r3, r6
    fd0e:	7013      	strb	r3, [r2, #0]
    fd10:	002b      	movs	r3, r5
    fd12:	33e7      	adds	r3, #231	; 0xe7
    fd14:	781b      	ldrb	r3, [r3, #0]
    fd16:	a907      	add	r1, sp, #28
    fd18:	708b      	strb	r3, [r1, #2]
    fd1a:	002b      	movs	r3, r5
    fd1c:	33f7      	adds	r3, #247	; 0xf7
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	3794      	adds	r7, #148	; 0x94
    fd22:	704b      	strb	r3, [r1, #1]
    fd24:	783b      	ldrb	r3, [r7, #0]
    fd26:	ac0a      	add	r4, sp, #40	; 0x28
    fd28:	075b      	lsls	r3, r3, #29
    fd2a:	0fdb      	lsrs	r3, r3, #31
    fd2c:	700b      	strb	r3, [r1, #0]
    fd2e:	0022      	movs	r2, r4
    fd30:	4b83      	ldr	r3, [pc, #524]	; (ff40 <LORAWAN_TxDone+0x4d4>)
    fd32:	2019      	movs	r0, #25
    fd34:	4798      	blx	r3
    fd36:	783b      	ldrb	r3, [r7, #0]
    fd38:	4233      	tst	r3, r6
    fd3a:	d100      	bne.n	fd3e <LORAWAN_TxDone+0x2d2>
    fd3c:	e0a4      	b.n	fe88 <LORAWAN_TxDone+0x41c>
    fd3e:	2300      	movs	r3, #0
    fd40:	af0c      	add	r7, sp, #48	; 0x30
    fd42:	703b      	strb	r3, [r7, #0]
    fd44:	003a      	movs	r2, r7
    fd46:	2100      	movs	r1, #0
    fd48:	2009      	movs	r0, #9
    fd4a:	4b7d      	ldr	r3, [pc, #500]	; (ff40 <LORAWAN_TxDone+0x4d4>)
    fd4c:	4798      	blx	r3
    fd4e:	0039      	movs	r1, r7
    fd50:	aa06      	add	r2, sp, #24
    fd52:	0030      	movs	r0, r6
    fd54:	4b7a      	ldr	r3, [pc, #488]	; (ff40 <LORAWAN_TxDone+0x4d4>)
    fd56:	4798      	blx	r3
    fd58:	0029      	movs	r1, r5
    fd5a:	7923      	ldrb	r3, [r4, #4]
    fd5c:	3169      	adds	r1, #105	; 0x69
    fd5e:	700b      	strb	r3, [r1, #0]
    fd60:	002b      	movs	r3, r5
    fd62:	270f      	movs	r7, #15
    fd64:	7822      	ldrb	r2, [r4, #0]
    fd66:	3365      	adds	r3, #101	; 0x65
    fd68:	701a      	strb	r2, [r3, #0]
    fd6a:	7862      	ldrb	r2, [r4, #1]
    fd6c:	2004      	movs	r0, #4
    fd6e:	705a      	strb	r2, [r3, #1]
    fd70:	78a2      	ldrb	r2, [r4, #2]
    fd72:	2600      	movs	r6, #0
    fd74:	709a      	strb	r2, [r3, #2]
    fd76:	78e2      	ldrb	r2, [r4, #3]
    fd78:	2404      	movs	r4, #4
    fd7a:	70da      	strb	r2, [r3, #3]
    fd7c:	ab02      	add	r3, sp, #8
    fd7e:	18ff      	adds	r7, r7, r3
    fd80:	003a      	movs	r2, r7
    fd82:	4b6f      	ldr	r3, [pc, #444]	; (ff40 <LORAWAN_TxDone+0x4d4>)
    fd84:	4798      	blx	r3
    fd86:	002b      	movs	r3, r5
    fd88:	3394      	adds	r3, #148	; 0x94
    fd8a:	781a      	ldrb	r2, [r3, #0]
    fd8c:	2300      	movs	r3, #0
    fd8e:	4014      	ands	r4, r2
    fd90:	56fb      	ldrsb	r3, [r7, r3]
    fd92:	002a      	movs	r2, r5
    fd94:	42b4      	cmp	r4, r6
    fd96:	d07a      	beq.n	fe8e <LORAWAN_TxDone+0x422>
    fd98:	a902      	add	r1, sp, #8
    fd9a:	7c09      	ldrb	r1, [r1, #16]
    fd9c:	32d6      	adds	r2, #214	; 0xd6
    fd9e:	8812      	ldrh	r2, [r2, #0]
    fda0:	b249      	sxtb	r1, r1
    fda2:	1852      	adds	r2, r2, r1
    fda4:	9203      	str	r2, [sp, #12]
    fda6:	002a      	movs	r2, r5
    fda8:	32d4      	adds	r2, #212	; 0xd4
    fdaa:	8811      	ldrh	r1, [r2, #0]
    fdac:	24fa      	movs	r4, #250	; 0xfa
    fdae:	18c9      	adds	r1, r1, r3
    fdb0:	4b64      	ldr	r3, [pc, #400]	; (ff44 <LORAWAN_TxDone+0x4d8>)
    fdb2:	00a4      	lsls	r4, r4, #2
    fdb4:	5ceb      	ldrb	r3, [r5, r3]
    fdb6:	0032      	movs	r2, r6
    fdb8:	1ac9      	subs	r1, r1, r3
    fdba:	002b      	movs	r3, r5
    fdbc:	33eb      	adds	r3, #235	; 0xeb
    fdbe:	7818      	ldrb	r0, [r3, #0]
    fdc0:	4361      	muls	r1, r4
    fdc2:	4b61      	ldr	r3, [pc, #388]	; (ff48 <LORAWAN_TxDone+0x4dc>)
    fdc4:	4f61      	ldr	r7, [pc, #388]	; (ff4c <LORAWAN_TxDone+0x4e0>)
    fdc6:	9600      	str	r6, [sp, #0]
    fdc8:	47b8      	blx	r7
    fdca:	4b5e      	ldr	r3, [pc, #376]	; (ff44 <LORAWAN_TxDone+0x4d8>)
    fdcc:	0032      	movs	r2, r6
    fdce:	5ce9      	ldrb	r1, [r5, r3]
    fdd0:	9b03      	ldr	r3, [sp, #12]
    fdd2:	1a59      	subs	r1, r3, r1
    fdd4:	002b      	movs	r3, r5
    fdd6:	33ec      	adds	r3, #236	; 0xec
    fdd8:	7818      	ldrb	r0, [r3, #0]
    fdda:	4361      	muls	r1, r4
    fddc:	4b5c      	ldr	r3, [pc, #368]	; (ff50 <LORAWAN_TxDone+0x4e4>)
    fdde:	9600      	str	r6, [sp, #0]
    fde0:	47b8      	blx	r7
    fde2:	002b      	movs	r3, r5
    fde4:	33ff      	adds	r3, #255	; 0xff
    fde6:	7f5b      	ldrb	r3, [r3, #29]
    fde8:	069b      	lsls	r3, r3, #26
    fdea:	d521      	bpl.n	fe30 <LORAWAN_TxDone+0x3c4>
    fdec:	9b02      	ldr	r3, [sp, #8]
    fdee:	ac0c      	add	r4, sp, #48	; 0x30
    fdf0:	67eb      	str	r3, [r5, #124]	; 0x7c
    fdf2:	002b      	movs	r3, r5
    fdf4:	3380      	adds	r3, #128	; 0x80
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	4f56      	ldr	r7, [pc, #344]	; (ff54 <LORAWAN_TxDone+0x4e8>)
    fdfa:	42b3      	cmp	r3, r6
    fdfc:	d010      	beq.n	fe20 <LORAWAN_TxDone+0x3b4>
    fdfe:	6f6e      	ldr	r6, [r5, #116]	; 0x74
    fe00:	6fab      	ldr	r3, [r5, #120]	; 0x78
    fe02:	431e      	orrs	r6, r3
    fe04:	d10c      	bne.n	fe20 <LORAWAN_TxDone+0x3b4>
    fe06:	2301      	movs	r3, #1
    fe08:	0021      	movs	r1, r4
    fe0a:	2021      	movs	r0, #33	; 0x21
    fe0c:	7023      	strb	r3, [r4, #0]
    fe0e:	47b8      	blx	r7
    fe10:	4b51      	ldr	r3, [pc, #324]	; (ff58 <LORAWAN_TxDone+0x4ec>)
    fe12:	4798      	blx	r3
    fe14:	0033      	movs	r3, r6
    fe16:	9a02      	ldr	r2, [sp, #8]
    fe18:	1a80      	subs	r0, r0, r2
    fe1a:	4199      	sbcs	r1, r3
    fe1c:	6768      	str	r0, [r5, #116]	; 0x74
    fe1e:	67a9      	str	r1, [r5, #120]	; 0x78
    fe20:	4b4e      	ldr	r3, [pc, #312]	; (ff5c <LORAWAN_TxDone+0x4f0>)
    fe22:	0021      	movs	r1, r4
    fe24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe26:	2020      	movs	r0, #32
    fe28:	930c      	str	r3, [sp, #48]	; 0x30
    fe2a:	2301      	movs	r3, #1
    fe2c:	7123      	strb	r3, [r4, #4]
    fe2e:	47b8      	blx	r7
    fe30:	4c4a      	ldr	r4, [pc, #296]	; (ff5c <LORAWAN_TxDone+0x4f0>)
    fe32:	2102      	movs	r1, #2
    fe34:	0023      	movs	r3, r4
    fe36:	33ff      	adds	r3, #255	; 0xff
    fe38:	7f5b      	ldrb	r3, [r3, #29]
    fe3a:	4019      	ands	r1, r3
    fe3c:	d05b      	beq.n	fef6 <LORAWAN_TxDone+0x48a>
    fe3e:	466b      	mov	r3, sp
    fe40:	891b      	ldrh	r3, [r3, #8]
    fe42:	a90c      	add	r1, sp, #48	; 0x30
    fe44:	800b      	strh	r3, [r1, #0]
    fe46:	0023      	movs	r3, r4
    fe48:	3394      	adds	r3, #148	; 0x94
    fe4a:	781b      	ldrb	r3, [r3, #0]
    fe4c:	201f      	movs	r0, #31
    fe4e:	075b      	lsls	r3, r3, #29
    fe50:	0fdb      	lsrs	r3, r3, #31
    fe52:	710b      	strb	r3, [r1, #4]
    fe54:	0023      	movs	r3, r4
    fe56:	3398      	adds	r3, #152	; 0x98
    fe58:	781a      	ldrb	r2, [r3, #0]
    fe5a:	2301      	movs	r3, #1
    fe5c:	4093      	lsls	r3, r2
    fe5e:	804b      	strh	r3, [r1, #2]
    fe60:	4b3c      	ldr	r3, [pc, #240]	; (ff54 <LORAWAN_TxDone+0x4e8>)
    fe62:	4798      	blx	r3
    fe64:	258c      	movs	r5, #140	; 0x8c
    fe66:	00ad      	lsls	r5, r5, #2
    fe68:	5d63      	ldrb	r3, [r4, r5]
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d100      	bne.n	fe70 <LORAWAN_TxDone+0x404>
    fe6e:	e61d      	b.n	faac <LORAWAN_TxDone+0x40>
    fe70:	4b39      	ldr	r3, [pc, #228]	; (ff58 <LORAWAN_TxDone+0x4ec>)
    fe72:	4798      	blx	r3
    fe74:	2300      	movs	r3, #0
    fe76:	900c      	str	r0, [sp, #48]	; 0x30
    fe78:	910d      	str	r1, [sp, #52]	; 0x34
    fe7a:	5563      	strb	r3, [r4, r5]
    fe7c:	4b38      	ldr	r3, [pc, #224]	; (ff60 <LORAWAN_TxDone+0x4f4>)
    fe7e:	a90c      	add	r1, sp, #48	; 0x30
    fe80:	5ce0      	ldrb	r0, [r4, r3]
    fe82:	4b38      	ldr	r3, [pc, #224]	; (ff64 <LORAWAN_TxDone+0x4f8>)
    fe84:	4798      	blx	r3
    fe86:	e611      	b.n	faac <LORAWAN_TxDone+0x40>
    fe88:	aa06      	add	r2, sp, #24
    fe8a:	4937      	ldr	r1, [pc, #220]	; (ff68 <LORAWAN_TxDone+0x4fc>)
    fe8c:	e761      	b.n	fd52 <LORAWAN_TxDone+0x2e6>
    fe8e:	2110      	movs	r1, #16
    fe90:	32d2      	adds	r2, #210	; 0xd2
    fe92:	8817      	ldrh	r7, [r2, #0]
    fe94:	aa02      	add	r2, sp, #8
    fe96:	5651      	ldrsb	r1, [r2, r1]
    fe98:	4e2c      	ldr	r6, [pc, #176]	; (ff4c <LORAWAN_TxDone+0x4e0>)
    fe9a:	187a      	adds	r2, r7, r1
    fe9c:	9203      	str	r2, [sp, #12]
    fe9e:	002a      	movs	r2, r5
    fea0:	32d0      	adds	r2, #208	; 0xd0
    fea2:	8811      	ldrh	r1, [r2, #0]
    fea4:	27fa      	movs	r7, #250	; 0xfa
    fea6:	18c9      	adds	r1, r1, r3
    fea8:	4b26      	ldr	r3, [pc, #152]	; (ff44 <LORAWAN_TxDone+0x4d8>)
    feaa:	00bf      	lsls	r7, r7, #2
    feac:	5ceb      	ldrb	r3, [r5, r3]
    feae:	0022      	movs	r2, r4
    feb0:	1ac9      	subs	r1, r1, r3
    feb2:	002b      	movs	r3, r5
    feb4:	33ed      	adds	r3, #237	; 0xed
    feb6:	7818      	ldrb	r0, [r3, #0]
    feb8:	4379      	muls	r1, r7
    feba:	4b23      	ldr	r3, [pc, #140]	; (ff48 <LORAWAN_TxDone+0x4dc>)
    febc:	9400      	str	r4, [sp, #0]
    febe:	47b0      	blx	r6
    fec0:	4b20      	ldr	r3, [pc, #128]	; (ff44 <LORAWAN_TxDone+0x4d8>)
    fec2:	0022      	movs	r2, r4
    fec4:	5ce9      	ldrb	r1, [r5, r3]
    fec6:	9b03      	ldr	r3, [sp, #12]
    fec8:	1a59      	subs	r1, r3, r1
    feca:	002b      	movs	r3, r5
    fecc:	33ee      	adds	r3, #238	; 0xee
    fece:	7818      	ldrb	r0, [r3, #0]
    fed0:	4379      	muls	r1, r7
    fed2:	4b1f      	ldr	r3, [pc, #124]	; (ff50 <LORAWAN_TxDone+0x4e4>)
    fed4:	9400      	str	r4, [sp, #0]
    fed6:	47b0      	blx	r6
    fed8:	002b      	movs	r3, r5
    feda:	33fd      	adds	r3, #253	; 0xfd
    fedc:	781b      	ldrb	r3, [r3, #0]
    fede:	2b04      	cmp	r3, #4
    fee0:	d1a6      	bne.n	fe30 <LORAWAN_TxDone+0x3c4>
    fee2:	2390      	movs	r3, #144	; 0x90
    fee4:	2201      	movs	r2, #1
    fee6:	2010      	movs	r0, #16
    fee8:	009b      	lsls	r3, r3, #2
    feea:	54ea      	strb	r2, [r5, r3]
    feec:	ab02      	add	r3, sp, #8
    feee:	5618      	ldrsb	r0, [r3, r0]
    fef0:	4b1e      	ldr	r3, [pc, #120]	; (ff6c <LORAWAN_TxDone+0x500>)
    fef2:	4798      	blx	r3
    fef4:	e79c      	b.n	fe30 <LORAWAN_TxDone+0x3c4>
    fef6:	075b      	lsls	r3, r3, #29
    fef8:	d5b4      	bpl.n	fe64 <LORAWAN_TxDone+0x3f8>
    fefa:	2022      	movs	r0, #34	; 0x22
    fefc:	e7b0      	b.n	fe60 <LORAWAN_TxDone+0x3f4>
    fefe:	491c      	ldr	r1, [pc, #112]	; (ff70 <LORAWAN_TxDone+0x504>)
    ff00:	784a      	ldrb	r2, [r1, #1]
    ff02:	780b      	ldrb	r3, [r1, #0]
    ff04:	0212      	lsls	r2, r2, #8
    ff06:	431a      	orrs	r2, r3
    ff08:	788b      	ldrb	r3, [r1, #2]
    ff0a:	041b      	lsls	r3, r3, #16
    ff0c:	431a      	orrs	r2, r3
    ff0e:	78cb      	ldrb	r3, [r1, #3]
    ff10:	061b      	lsls	r3, r3, #24
    ff12:	4313      	orrs	r3, r2
    ff14:	d100      	bne.n	ff18 <LORAWAN_TxDone+0x4ac>
    ff16:	e5c9      	b.n	faac <LORAWAN_TxDone+0x40>
    ff18:	4a16      	ldr	r2, [pc, #88]	; (ff74 <LORAWAN_TxDone+0x508>)
    ff1a:	7811      	ldrb	r1, [r2, #0]
    ff1c:	221c      	movs	r2, #28
    ff1e:	2904      	cmp	r1, #4
    ff20:	d003      	beq.n	ff2a <LORAWAN_TxDone+0x4be>
    ff22:	2200      	movs	r2, #0
    ff24:	2c07      	cmp	r4, #7
    ff26:	d100      	bne.n	ff2a <LORAWAN_TxDone+0x4be>
    ff28:	0022      	movs	r2, r4
    ff2a:	0029      	movs	r1, r5
    ff2c:	2004      	movs	r0, #4
    ff2e:	31ff      	adds	r1, #255	; 0xff
    ff30:	35fc      	adds	r5, #252	; 0xfc
    ff32:	7348      	strb	r0, [r1, #13]
    ff34:	744a      	strb	r2, [r1, #17]
    ff36:	68e8      	ldr	r0, [r5, #12]
    ff38:	490f      	ldr	r1, [pc, #60]	; (ff78 <LORAWAN_TxDone+0x50c>)
    ff3a:	4798      	blx	r3
    ff3c:	e5b6      	b.n	faac <LORAWAN_TxDone+0x40>
    ff3e:	46c0      	nop			; (mov r8, r8)
    ff40:	0000b6c5 	.word	0x0000b6c5
    ff44:	0000022b 	.word	0x0000022b
    ff48:	0000ec25 	.word	0x0000ec25
    ff4c:	0000cb35 	.word	0x0000cb35
    ff50:	000102e9 	.word	0x000102e9
    ff54:	0000b7ed 	.word	0x0000b7ed
    ff58:	0000cadd 	.word	0x0000cadd
    ff5c:	200029a4 	.word	0x200029a4
    ff60:	00000231 	.word	0x00000231
    ff64:	0000d139 	.word	0x0000d139
    ff68:	20002a12 	.word	0x20002a12
    ff6c:	000121a9 	.word	0x000121a9
    ff70:	20002d00 	.word	0x20002d00
    ff74:	20002bec 	.word	0x20002bec
    ff78:	20002ab0 	.word	0x20002ab0

0000ff7c <radioCallback>:
    ff7c:	4b10      	ldr	r3, [pc, #64]	; (ffc0 <radioCallback+0x44>)
    ff7e:	b510      	push	{r4, lr}
    ff80:	7018      	strb	r0, [r3, #0]
    ff82:	3801      	subs	r0, #1
    ff84:	b2c0      	uxtb	r0, r0
    ff86:	000c      	movs	r4, r1
    ff88:	281f      	cmp	r0, #31
    ff8a:	d809      	bhi.n	ffa0 <radioCallback+0x24>
    ff8c:	2301      	movs	r3, #1
    ff8e:	4083      	lsls	r3, r0
    ff90:	4a0c      	ldr	r2, [pc, #48]	; (ffc4 <radioCallback+0x48>)
    ff92:	4213      	tst	r3, r2
    ff94:	d109      	bne.n	ffaa <radioCallback+0x2e>
    ff96:	220a      	movs	r2, #10
    ff98:	4213      	tst	r3, r2
    ff9a:	d102      	bne.n	ffa2 <radioCallback+0x26>
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	db08      	blt.n	ffb2 <radioCallback+0x36>
    ffa0:	bd10      	pop	{r4, pc}
    ffa2:	0008      	movs	r0, r1
    ffa4:	4b08      	ldr	r3, [pc, #32]	; (ffc8 <radioCallback+0x4c>)
    ffa6:	4798      	blx	r3
    ffa8:	e7fa      	b.n	ffa0 <radioCallback+0x24>
    ffaa:	2002      	movs	r0, #2
    ffac:	4b07      	ldr	r3, [pc, #28]	; (ffcc <radioCallback+0x50>)
    ffae:	4798      	blx	r3
    ffb0:	e7f6      	b.n	ffa0 <radioCallback+0x24>
    ffb2:	4b07      	ldr	r3, [pc, #28]	; (ffd0 <radioCallback+0x54>)
    ffb4:	681b      	ldr	r3, [r3, #0]
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d0f2      	beq.n	ffa0 <radioCallback+0x24>
    ffba:	4798      	blx	r3
    ffbc:	6020      	str	r0, [r4, #0]
    ffbe:	e7ef      	b.n	ffa0 <radioCallback+0x24>
    ffc0:	20002bec 	.word	0x20002bec
    ffc4:	00008081 	.word	0x00008081
    ffc8:	0000fa6d 	.word	0x0000fa6d
    ffcc:	000129bd 	.word	0x000129bd
    ffd0:	20002cfc 	.word	0x20002cfc

0000ffd4 <LorawanCheckAndDoRetryOnTimeout>:
    ffd4:	b513      	push	{r0, r1, r4, lr}
    ffd6:	4c33      	ldr	r4, [pc, #204]	; (100a4 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
    ffd8:	0023      	movs	r3, r4
    ffda:	3394      	adds	r3, #148	; 0x94
    ffdc:	781b      	ldrb	r3, [r3, #0]
    ffde:	0022      	movs	r2, r4
    ffe0:	07db      	lsls	r3, r3, #31
    ffe2:	d54b      	bpl.n	1007c <LorawanCheckAndDoRetryOnTimeout+0xa8>
    ffe4:	0023      	movs	r3, r4
    ffe6:	32e4      	adds	r2, #228	; 0xe4
    ffe8:	33e2      	adds	r3, #226	; 0xe2
    ffea:	7812      	ldrb	r2, [r2, #0]
    ffec:	781b      	ldrb	r3, [r3, #0]
    ffee:	429a      	cmp	r2, r3
    fff0:	d836      	bhi.n	10060 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    fff2:	4b2d      	ldr	r3, [pc, #180]	; (100a8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    fff4:	5ce3      	ldrb	r3, [r4, r3]
    fff6:	2b00      	cmp	r3, #0
    fff8:	d032      	beq.n	10060 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    fffa:	0023      	movs	r3, r4
    fffc:	33fd      	adds	r3, #253	; 0xfd
    fffe:	781b      	ldrb	r3, [r3, #0]
   10000:	2b01      	cmp	r3, #1
   10002:	d119      	bne.n	10038 <LorawanCheckAndDoRetryOnTimeout+0x64>
   10004:	0021      	movs	r1, r4
   10006:	220e      	movs	r2, #14
   10008:	3184      	adds	r1, #132	; 0x84
   1000a:	780b      	ldrb	r3, [r1, #0]
   1000c:	4393      	bics	r3, r2
   1000e:	001a      	movs	r2, r3
   10010:	230c      	movs	r3, #12
   10012:	4313      	orrs	r3, r2
   10014:	700b      	strb	r3, [r1, #0]
   10016:	0023      	movs	r3, r4
   10018:	33da      	adds	r3, #218	; 0xda
   1001a:	8819      	ldrh	r1, [r3, #0]
   1001c:	4b23      	ldr	r3, [pc, #140]	; (100ac <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   1001e:	2200      	movs	r2, #0
   10020:	5ce3      	ldrb	r3, [r4, r3]
   10022:	34f1      	adds	r4, #241	; 0xf1
   10024:	1acb      	subs	r3, r1, r3
   10026:	21fa      	movs	r1, #250	; 0xfa
   10028:	0089      	lsls	r1, r1, #2
   1002a:	7820      	ldrb	r0, [r4, #0]
   1002c:	4359      	muls	r1, r3
   1002e:	9200      	str	r2, [sp, #0]
   10030:	4b1f      	ldr	r3, [pc, #124]	; (100b0 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10032:	4c20      	ldr	r4, [pc, #128]	; (100b4 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10034:	47a0      	blx	r4
   10036:	bd13      	pop	{r0, r1, r4, pc}
   10038:	2b04      	cmp	r3, #4
   1003a:	d1fc      	bne.n	10036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1003c:	4b1e      	ldr	r3, [pc, #120]	; (100b8 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1003e:	4798      	blx	r3
   10040:	34ce      	adds	r4, #206	; 0xce
   10042:	300d      	adds	r0, #13
   10044:	8823      	ldrh	r3, [r4, #0]
   10046:	b280      	uxth	r0, r0
   10048:	4283      	cmp	r3, r0
   1004a:	d802      	bhi.n	10052 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   1004c:	4b1b      	ldr	r3, [pc, #108]	; (100bc <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1004e:	4798      	blx	r3
   10050:	e7f1      	b.n	10036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10052:	200e      	movs	r0, #14
   10054:	4b1a      	ldr	r3, [pc, #104]	; (100c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10056:	4798      	blx	r3
   10058:	4b1a      	ldr	r3, [pc, #104]	; (100c4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1005a:	4798      	blx	r3
   1005c:	4b1a      	ldr	r3, [pc, #104]	; (100c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1005e:	e7f6      	b.n	1004e <LorawanCheckAndDoRetryOnTimeout+0x7a>
   10060:	2012      	movs	r0, #18
   10062:	4b17      	ldr	r3, [pc, #92]	; (100c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10064:	4798      	blx	r3
   10066:	4b17      	ldr	r3, [pc, #92]	; (100c4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10068:	4798      	blx	r3
   1006a:	34fd      	adds	r4, #253	; 0xfd
   1006c:	4b16      	ldr	r3, [pc, #88]	; (100c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1006e:	4798      	blx	r3
   10070:	7823      	ldrb	r3, [r4, #0]
   10072:	2b04      	cmp	r3, #4
   10074:	d1df      	bne.n	10036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10076:	4b15      	ldr	r3, [pc, #84]	; (100cc <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10078:	4798      	blx	r3
   1007a:	e7dc      	b.n	10036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1007c:	0023      	movs	r3, r4
   1007e:	32e3      	adds	r2, #227	; 0xe3
   10080:	33e1      	adds	r3, #225	; 0xe1
   10082:	7812      	ldrb	r2, [r2, #0]
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	429a      	cmp	r2, r3
   10088:	d803      	bhi.n	10092 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1008a:	4b07      	ldr	r3, [pc, #28]	; (100a8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   1008c:	5ce3      	ldrb	r3, [r4, r3]
   1008e:	2b00      	cmp	r3, #0
   10090:	d1dc      	bne.n	1004c <LorawanCheckAndDoRetryOnTimeout+0x78>
   10092:	4b0f      	ldr	r3, [pc, #60]	; (100d0 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   10094:	4798      	blx	r3
   10096:	4b0c      	ldr	r3, [pc, #48]	; (100c8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10098:	4798      	blx	r3
   1009a:	2008      	movs	r0, #8
   1009c:	4b08      	ldr	r3, [pc, #32]	; (100c0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1009e:	4798      	blx	r3
   100a0:	e7c9      	b.n	10036 <LorawanCheckAndDoRetryOnTimeout+0x62>
   100a2:	46c0      	nop			; (mov r8, r8)
   100a4:	200029a4 	.word	0x200029a4
   100a8:	0000022a 	.word	0x0000022a
   100ac:	0000022b 	.word	0x0000022b
   100b0:	000100d5 	.word	0x000100d5
   100b4:	0000cb35 	.word	0x0000cb35
   100b8:	0000db99 	.word	0x0000db99
   100bc:	0000ed15 	.word	0x0000ed15
   100c0:	0000f23d 	.word	0x0000f23d
   100c4:	0000e69d 	.word	0x0000e69d
   100c8:	0000daad 	.word	0x0000daad
   100cc:	00013445 	.word	0x00013445
   100d0:	0000e6cd 	.word	0x0000e6cd

000100d4 <AckRetransmissionCallback>:
   100d4:	b510      	push	{r4, lr}
   100d6:	4c1c      	ldr	r4, [pc, #112]	; (10148 <AckRetransmissionCallback+0x74>)
   100d8:	0023      	movs	r3, r4
   100da:	3384      	adds	r3, #132	; 0x84
   100dc:	781b      	ldrb	r3, [r3, #0]
   100de:	2b7f      	cmp	r3, #127	; 0x7f
   100e0:	d82d      	bhi.n	1013e <AckRetransmissionCallback+0x6a>
   100e2:	0023      	movs	r3, r4
   100e4:	33fd      	adds	r3, #253	; 0xfd
   100e6:	781b      	ldrb	r3, [r3, #0]
   100e8:	2b04      	cmp	r3, #4
   100ea:	d102      	bne.n	100f2 <AckRetransmissionCallback+0x1e>
   100ec:	4b17      	ldr	r3, [pc, #92]	; (1014c <AckRetransmissionCallback+0x78>)
   100ee:	4798      	blx	r3
   100f0:	e01e      	b.n	10130 <AckRetransmissionCallback+0x5c>
   100f2:	2b01      	cmp	r3, #1
   100f4:	d11c      	bne.n	10130 <AckRetransmissionCallback+0x5c>
   100f6:	0022      	movs	r2, r4
   100f8:	0023      	movs	r3, r4
   100fa:	32e4      	adds	r2, #228	; 0xe4
   100fc:	33e2      	adds	r3, #226	; 0xe2
   100fe:	7812      	ldrb	r2, [r2, #0]
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	429a      	cmp	r2, r3
   10104:	d815      	bhi.n	10132 <AckRetransmissionCallback+0x5e>
   10106:	4b12      	ldr	r3, [pc, #72]	; (10150 <AckRetransmissionCallback+0x7c>)
   10108:	5ce3      	ldrb	r3, [r4, r3]
   1010a:	2b00      	cmp	r3, #0
   1010c:	d011      	beq.n	10132 <AckRetransmissionCallback+0x5e>
   1010e:	4b11      	ldr	r3, [pc, #68]	; (10154 <AckRetransmissionCallback+0x80>)
   10110:	4798      	blx	r3
   10112:	34ce      	adds	r4, #206	; 0xce
   10114:	300d      	adds	r0, #13
   10116:	8823      	ldrh	r3, [r4, #0]
   10118:	b280      	uxth	r0, r0
   1011a:	4283      	cmp	r3, r0
   1011c:	d801      	bhi.n	10122 <AckRetransmissionCallback+0x4e>
   1011e:	4b0e      	ldr	r3, [pc, #56]	; (10158 <AckRetransmissionCallback+0x84>)
   10120:	e7e5      	b.n	100ee <AckRetransmissionCallback+0x1a>
   10122:	4b0e      	ldr	r3, [pc, #56]	; (1015c <AckRetransmissionCallback+0x88>)
   10124:	4798      	blx	r3
   10126:	4b0e      	ldr	r3, [pc, #56]	; (10160 <AckRetransmissionCallback+0x8c>)
   10128:	4798      	blx	r3
   1012a:	200e      	movs	r0, #14
   1012c:	4b0d      	ldr	r3, [pc, #52]	; (10164 <AckRetransmissionCallback+0x90>)
   1012e:	4798      	blx	r3
   10130:	bd10      	pop	{r4, pc}
   10132:	4b0a      	ldr	r3, [pc, #40]	; (1015c <AckRetransmissionCallback+0x88>)
   10134:	4798      	blx	r3
   10136:	4b0a      	ldr	r3, [pc, #40]	; (10160 <AckRetransmissionCallback+0x8c>)
   10138:	4798      	blx	r3
   1013a:	2012      	movs	r0, #18
   1013c:	e7f6      	b.n	1012c <AckRetransmissionCallback+0x58>
   1013e:	4b07      	ldr	r3, [pc, #28]	; (1015c <AckRetransmissionCallback+0x88>)
   10140:	4798      	blx	r3
   10142:	4b07      	ldr	r3, [pc, #28]	; (10160 <AckRetransmissionCallback+0x8c>)
   10144:	e7d3      	b.n	100ee <AckRetransmissionCallback+0x1a>
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	200029a4 	.word	0x200029a4
   1014c:	0000ffd5 	.word	0x0000ffd5
   10150:	0000022a 	.word	0x0000022a
   10154:	0000db99 	.word	0x0000db99
   10158:	0000ed15 	.word	0x0000ed15
   1015c:	0000e69d 	.word	0x0000e69d
   10160:	0000daad 	.word	0x0000daad
   10164:	0000f23d 	.word	0x0000f23d

00010168 <LORAWAN_RxTimeout>:
   10168:	4b24      	ldr	r3, [pc, #144]	; (101fc <LORAWAN_RxTimeout+0x94>)
   1016a:	b510      	push	{r4, lr}
   1016c:	001a      	movs	r2, r3
   1016e:	3284      	adds	r2, #132	; 0x84
   10170:	7812      	ldrb	r2, [r2, #0]
   10172:	b251      	sxtb	r1, r2
   10174:	2900      	cmp	r1, #0
   10176:	db27      	blt.n	101c8 <LORAWAN_RxTimeout+0x60>
   10178:	0019      	movs	r1, r3
   1017a:	31fd      	adds	r1, #253	; 0xfd
   1017c:	7809      	ldrb	r1, [r1, #0]
   1017e:	2904      	cmp	r1, #4
   10180:	d108      	bne.n	10194 <LORAWAN_RxTimeout+0x2c>
   10182:	3903      	subs	r1, #3
   10184:	420a      	tst	r2, r1
   10186:	d005      	beq.n	10194 <LORAWAN_RxTimeout+0x2c>
   10188:	2290      	movs	r2, #144	; 0x90
   1018a:	0092      	lsls	r2, r2, #2
   1018c:	5499      	strb	r1, [r3, r2]
   1018e:	4b1c      	ldr	r3, [pc, #112]	; (10200 <LORAWAN_RxTimeout+0x98>)
   10190:	4798      	blx	r3
   10192:	bd10      	pop	{r4, pc}
   10194:	210e      	movs	r1, #14
   10196:	0010      	movs	r0, r2
   10198:	4008      	ands	r0, r1
   1019a:	2806      	cmp	r0, #6
   1019c:	d107      	bne.n	101ae <LORAWAN_RxTimeout+0x46>
   1019e:	3384      	adds	r3, #132	; 0x84
   101a0:	781a      	ldrb	r2, [r3, #0]
   101a2:	438a      	bics	r2, r1
   101a4:	0011      	movs	r1, r2
   101a6:	2208      	movs	r2, #8
   101a8:	430a      	orrs	r2, r1
   101aa:	701a      	strb	r2, [r3, #0]
   101ac:	e7f1      	b.n	10192 <LORAWAN_RxTimeout+0x2a>
   101ae:	2004      	movs	r0, #4
   101b0:	3394      	adds	r3, #148	; 0x94
   101b2:	781b      	ldrb	r3, [r3, #0]
   101b4:	4203      	tst	r3, r0
   101b6:	d002      	beq.n	101be <LORAWAN_RxTimeout+0x56>
   101b8:	4b12      	ldr	r3, [pc, #72]	; (10204 <LORAWAN_RxTimeout+0x9c>)
   101ba:	4798      	blx	r3
   101bc:	e7e9      	b.n	10192 <LORAWAN_RxTimeout+0x2a>
   101be:	07d3      	lsls	r3, r2, #31
   101c0:	d5e7      	bpl.n	10192 <LORAWAN_RxTimeout+0x2a>
   101c2:	4b11      	ldr	r3, [pc, #68]	; (10208 <LORAWAN_RxTimeout+0xa0>)
   101c4:	4798      	blx	r3
   101c6:	e7e4      	b.n	10192 <LORAWAN_RxTimeout+0x2a>
   101c8:	4810      	ldr	r0, [pc, #64]	; (1020c <LORAWAN_RxTimeout+0xa4>)
   101ca:	7841      	ldrb	r1, [r0, #1]
   101cc:	7802      	ldrb	r2, [r0, #0]
   101ce:	0209      	lsls	r1, r1, #8
   101d0:	4311      	orrs	r1, r2
   101d2:	7882      	ldrb	r2, [r0, #2]
   101d4:	0412      	lsls	r2, r2, #16
   101d6:	4311      	orrs	r1, r2
   101d8:	78c2      	ldrb	r2, [r0, #3]
   101da:	0612      	lsls	r2, r2, #24
   101dc:	430a      	orrs	r2, r1
   101de:	d0d8      	beq.n	10192 <LORAWAN_RxTimeout+0x2a>
   101e0:	2188      	movs	r1, #136	; 0x88
   101e2:	2001      	movs	r0, #1
   101e4:	0089      	lsls	r1, r1, #2
   101e6:	5458      	strb	r0, [r3, r1]
   101e8:	0019      	movs	r1, r3
   101ea:	2404      	movs	r4, #4
   101ec:	31ff      	adds	r1, #255	; 0xff
   101ee:	33fc      	adds	r3, #252	; 0xfc
   101f0:	734c      	strb	r4, [r1, #13]
   101f2:	7448      	strb	r0, [r1, #17]
   101f4:	4906      	ldr	r1, [pc, #24]	; (10210 <LORAWAN_RxTimeout+0xa8>)
   101f6:	68d8      	ldr	r0, [r3, #12]
   101f8:	4790      	blx	r2
   101fa:	e7ca      	b.n	10192 <LORAWAN_RxTimeout+0x2a>
   101fc:	200029a4 	.word	0x200029a4
   10200:	0001226d 	.word	0x0001226d
   10204:	0000e6f1 	.word	0x0000e6f1
   10208:	0000ffd5 	.word	0x0000ffd5
   1020c:	20002d00 	.word	0x20002d00
   10210:	20002ab0 	.word	0x20002ab0

00010214 <LorawanConfigureRadioForRX2>:
   10214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10216:	466b      	mov	r3, sp
   10218:	1cdd      	adds	r5, r3, #3
   1021a:	2300      	movs	r3, #0
   1021c:	702b      	strb	r3, [r5, #0]
   1021e:	2390      	movs	r3, #144	; 0x90
   10220:	4c29      	ldr	r4, [pc, #164]	; (102c8 <LorawanConfigureRadioForRX2+0xb4>)
   10222:	009b      	lsls	r3, r3, #2
   10224:	5ce1      	ldrb	r1, [r4, r3]
   10226:	0006      	movs	r6, r0
   10228:	0023      	movs	r3, r4
   1022a:	2900      	cmp	r1, #0
   1022c:	d02f      	beq.n	1028e <LorawanConfigureRadioForRX2+0x7a>
   1022e:	3373      	adds	r3, #115	; 0x73
   10230:	781b      	ldrb	r3, [r3, #0]
   10232:	702b      	strb	r3, [r5, #0]
   10234:	0023      	movs	r3, r4
   10236:	6f22      	ldr	r2, [r4, #112]	; 0x70
   10238:	336f      	adds	r3, #111	; 0x6f
   1023a:	781b      	ldrb	r3, [r3, #0]
   1023c:	0211      	lsls	r1, r2, #8
   1023e:	4319      	orrs	r1, r3
   10240:	7828      	ldrb	r0, [r5, #0]
   10242:	4b22      	ldr	r3, [pc, #136]	; (102cc <LorawanConfigureRadioForRX2+0xb8>)
   10244:	4798      	blx	r3
   10246:	2300      	movs	r3, #0
   10248:	0022      	movs	r2, r4
   1024a:	af01      	add	r7, sp, #4
   1024c:	703b      	strb	r3, [r7, #0]
   1024e:	32fd      	adds	r2, #253	; 0xfd
   10250:	7812      	ldrb	r2, [r2, #0]
   10252:	2a04      	cmp	r2, #4
   10254:	d130      	bne.n	102b8 <LorawanConfigureRadioForRX2+0xa4>
   10256:	0022      	movs	r2, r4
   10258:	3284      	adds	r2, #132	; 0x84
   1025a:	7812      	ldrb	r2, [r2, #0]
   1025c:	07d2      	lsls	r2, r2, #31
   1025e:	d52b      	bpl.n	102b8 <LorawanConfigureRadioForRX2+0xa4>
   10260:	2290      	movs	r2, #144	; 0x90
   10262:	0092      	lsls	r2, r2, #2
   10264:	5ca2      	ldrb	r2, [r4, r2]
   10266:	429a      	cmp	r2, r3
   10268:	d026      	beq.n	102b8 <LorawanConfigureRadioForRX2+0xa4>
   1026a:	807b      	strh	r3, [r7, #2]
   1026c:	0038      	movs	r0, r7
   1026e:	4b18      	ldr	r3, [pc, #96]	; (102d0 <LorawanConfigureRadioForRX2+0xbc>)
   10270:	4798      	blx	r3
   10272:	1e04      	subs	r4, r0, #0
   10274:	d00a      	beq.n	1028c <LorawanConfigureRadioForRX2+0x78>
   10276:	4b17      	ldr	r3, [pc, #92]	; (102d4 <LorawanConfigureRadioForRX2+0xc0>)
   10278:	4798      	blx	r3
   1027a:	4b17      	ldr	r3, [pc, #92]	; (102d8 <LorawanConfigureRadioForRX2+0xc4>)
   1027c:	4798      	blx	r3
   1027e:	4b17      	ldr	r3, [pc, #92]	; (102dc <LorawanConfigureRadioForRX2+0xc8>)
   10280:	4798      	blx	r3
   10282:	2e00      	cmp	r6, #0
   10284:	d002      	beq.n	1028c <LorawanConfigureRadioForRX2+0x78>
   10286:	0020      	movs	r0, r4
   10288:	4b15      	ldr	r3, [pc, #84]	; (102e0 <LorawanConfigureRadioForRX2+0xcc>)
   1028a:	4798      	blx	r3
   1028c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1028e:	3394      	adds	r3, #148	; 0x94
   10290:	781b      	ldrb	r3, [r3, #0]
   10292:	075b      	lsls	r3, r3, #29
   10294:	d50b      	bpl.n	102ae <LorawanConfigureRadioForRX2+0x9a>
   10296:	002a      	movs	r2, r5
   10298:	2009      	movs	r0, #9
   1029a:	4b12      	ldr	r3, [pc, #72]	; (102e4 <LorawanConfigureRadioForRX2+0xd0>)
   1029c:	4798      	blx	r3
   1029e:	0022      	movs	r2, r4
   102a0:	0023      	movs	r3, r4
   102a2:	326c      	adds	r2, #108	; 0x6c
   102a4:	8811      	ldrh	r1, [r2, #0]
   102a6:	336a      	adds	r3, #106	; 0x6a
   102a8:	881b      	ldrh	r3, [r3, #0]
   102aa:	0409      	lsls	r1, r1, #16
   102ac:	e7c7      	b.n	1023e <LorawanConfigureRadioForRX2+0x2a>
   102ae:	0023      	movs	r3, r4
   102b0:	336e      	adds	r3, #110	; 0x6e
   102b2:	781b      	ldrb	r3, [r3, #0]
   102b4:	702b      	strb	r3, [r5, #0]
   102b6:	e7f2      	b.n	1029e <LorawanConfigureRadioForRX2+0x8a>
   102b8:	466b      	mov	r3, sp
   102ba:	0029      	movs	r1, r5
   102bc:	1d9a      	adds	r2, r3, #6
   102be:	2003      	movs	r0, #3
   102c0:	4b08      	ldr	r3, [pc, #32]	; (102e4 <LorawanConfigureRadioForRX2+0xd0>)
   102c2:	4798      	blx	r3
   102c4:	e7d2      	b.n	1026c <LorawanConfigureRadioForRX2+0x58>
   102c6:	46c0      	nop			; (mov r8, r8)
   102c8:	200029a4 	.word	0x200029a4
   102cc:	0000ebb9 	.word	0x0000ebb9
   102d0:	00013d35 	.word	0x00013d35
   102d4:	0000e69d 	.word	0x0000e69d
   102d8:	0000e6cd 	.word	0x0000e6cd
   102dc:	0000daad 	.word	0x0000daad
   102e0:	0000f23d 	.word	0x0000f23d
   102e4:	0000b6c5 	.word	0x0000b6c5

000102e8 <LorawanReceiveWindow2Callback>:
   102e8:	b510      	push	{r4, lr}
   102ea:	4c1d      	ldr	r4, [pc, #116]	; (10360 <LorawanReceiveWindow2Callback+0x78>)
   102ec:	0021      	movs	r1, r4
   102ee:	3184      	adds	r1, #132	; 0x84
   102f0:	780b      	ldrb	r3, [r1, #0]
   102f2:	b25a      	sxtb	r2, r3
   102f4:	2a00      	cmp	r2, #0
   102f6:	db1f      	blt.n	10338 <LorawanReceiveWindow2Callback+0x50>
   102f8:	0022      	movs	r2, r4
   102fa:	32fd      	adds	r2, #253	; 0xfd
   102fc:	7812      	ldrb	r2, [r2, #0]
   102fe:	2a04      	cmp	r2, #4
   10300:	d107      	bne.n	10312 <LorawanReceiveWindow2Callback+0x2a>
   10302:	07db      	lsls	r3, r3, #31
   10304:	d505      	bpl.n	10312 <LorawanReceiveWindow2Callback+0x2a>
   10306:	2390      	movs	r3, #144	; 0x90
   10308:	2200      	movs	r2, #0
   1030a:	009b      	lsls	r3, r3, #2
   1030c:	54e2      	strb	r2, [r4, r3]
   1030e:	4b15      	ldr	r3, [pc, #84]	; (10364 <LorawanReceiveWindow2Callback+0x7c>)
   10310:	4798      	blx	r3
   10312:	4b15      	ldr	r3, [pc, #84]	; (10368 <LorawanReceiveWindow2Callback+0x80>)
   10314:	4798      	blx	r3
   10316:	2801      	cmp	r0, #1
   10318:	d10a      	bne.n	10330 <LorawanReceiveWindow2Callback+0x48>
   1031a:	220e      	movs	r2, #14
   1031c:	3484      	adds	r4, #132	; 0x84
   1031e:	7823      	ldrb	r3, [r4, #0]
   10320:	4393      	bics	r3, r2
   10322:	001a      	movs	r2, r3
   10324:	230a      	movs	r3, #10
   10326:	4313      	orrs	r3, r2
   10328:	7023      	strb	r3, [r4, #0]
   1032a:	4b10      	ldr	r3, [pc, #64]	; (1036c <LorawanReceiveWindow2Callback+0x84>)
   1032c:	4798      	blx	r3
   1032e:	bd10      	pop	{r4, pc}
   10330:	2301      	movs	r3, #1
   10332:	34f9      	adds	r4, #249	; 0xf9
   10334:	7023      	strb	r3, [r4, #0]
   10336:	e7fa      	b.n	1032e <LorawanReceiveWindow2Callback+0x46>
   10338:	2004      	movs	r0, #4
   1033a:	3494      	adds	r4, #148	; 0x94
   1033c:	7822      	ldrb	r2, [r4, #0]
   1033e:	4202      	tst	r2, r0
   10340:	d007      	beq.n	10352 <LorawanReceiveWindow2Callback+0x6a>
   10342:	4382      	bics	r2, r0
   10344:	3803      	subs	r0, #3
   10346:	4383      	bics	r3, r0
   10348:	700b      	strb	r3, [r1, #0]
   1034a:	210b      	movs	r1, #11
   1034c:	4b08      	ldr	r3, [pc, #32]	; (10370 <LorawanReceiveWindow2Callback+0x88>)
   1034e:	7022      	strb	r2, [r4, #0]
   10350:	4798      	blx	r3
   10352:	4b08      	ldr	r3, [pc, #32]	; (10374 <LorawanReceiveWindow2Callback+0x8c>)
   10354:	4798      	blx	r3
   10356:	4b08      	ldr	r3, [pc, #32]	; (10378 <LorawanReceiveWindow2Callback+0x90>)
   10358:	4798      	blx	r3
   1035a:	4b08      	ldr	r3, [pc, #32]	; (1037c <LorawanReceiveWindow2Callback+0x94>)
   1035c:	4798      	blx	r3
   1035e:	e7e6      	b.n	1032e <LorawanReceiveWindow2Callback+0x46>
   10360:	200029a4 	.word	0x200029a4
   10364:	000120fd 	.word	0x000120fd
   10368:	00013445 	.word	0x00013445
   1036c:	00010215 	.word	0x00010215
   10370:	0000be05 	.word	0x0000be05
   10374:	0000e6cd 	.word	0x0000e6cd
   10378:	0000e69d 	.word	0x0000e69d
   1037c:	0000daad 	.word	0x0000daad

00010380 <SetReceptionNotOkState>:
   10380:	4a0c      	ldr	r2, [pc, #48]	; (103b4 <SetReceptionNotOkState+0x34>)
   10382:	b510      	push	{r4, lr}
   10384:	0013      	movs	r3, r2
   10386:	33fd      	adds	r3, #253	; 0xfd
   10388:	7819      	ldrb	r1, [r3, #0]
   1038a:	0013      	movs	r3, r2
   1038c:	4c0a      	ldr	r4, [pc, #40]	; (103b8 <SetReceptionNotOkState+0x38>)
   1038e:	3384      	adds	r3, #132	; 0x84
   10390:	2904      	cmp	r1, #4
   10392:	d105      	bne.n	103a0 <SetReceptionNotOkState+0x20>
   10394:	2088      	movs	r0, #136	; 0x88
   10396:	3903      	subs	r1, #3
   10398:	0080      	lsls	r0, r0, #2
   1039a:	5411      	strb	r1, [r2, r0]
   1039c:	3020      	adds	r0, #32
   1039e:	5411      	strb	r1, [r2, r0]
   103a0:	210e      	movs	r1, #14
   103a2:	781a      	ldrb	r2, [r3, #0]
   103a4:	2000      	movs	r0, #0
   103a6:	438a      	bics	r2, r1
   103a8:	0011      	movs	r1, r2
   103aa:	220a      	movs	r2, #10
   103ac:	430a      	orrs	r2, r1
   103ae:	701a      	strb	r2, [r3, #0]
   103b0:	47a0      	blx	r4
   103b2:	bd10      	pop	{r4, pc}
   103b4:	200029a4 	.word	0x200029a4
   103b8:	00010215 	.word	0x00010215

000103bc <LorawanProcessFcntDown>:
   103bc:	b570      	push	{r4, r5, r6, lr}
   103be:	79c3      	ldrb	r3, [r0, #7]
   103c0:	7982      	ldrb	r2, [r0, #6]
   103c2:	4c1f      	ldr	r4, [pc, #124]	; (10440 <LorawanProcessFcntDown+0x84>)
   103c4:	021b      	lsls	r3, r3, #8
   103c6:	4313      	orrs	r3, r2
   103c8:	0022      	movs	r2, r4
   103ca:	218b      	movs	r1, #139	; 0x8b
   103cc:	328c      	adds	r2, #140	; 0x8c
   103ce:	8810      	ldrh	r0, [r2, #0]
   103d0:	0089      	lsls	r1, r1, #2
   103d2:	8013      	strh	r3, [r2, #0]
   103d4:	4298      	cmp	r0, r3
   103d6:	d80f      	bhi.n	103f8 <LorawanProcessFcntDown+0x3c>
   103d8:	5c61      	ldrb	r1, [r4, r1]
   103da:	2900      	cmp	r1, #0
   103dc:	d007      	beq.n	103ee <LorawanProcessFcntDown+0x32>
   103de:	2301      	movs	r3, #1
   103e0:	408b      	lsls	r3, r1
   103e2:	6812      	ldr	r2, [r2, #0]
   103e4:	3b01      	subs	r3, #1
   103e6:	421a      	tst	r2, r3
   103e8:	d001      	beq.n	103ee <LorawanProcessFcntDown+0x32>
   103ea:	2008      	movs	r0, #8
   103ec:	bd70      	pop	{r4, r5, r6, pc}
   103ee:	210a      	movs	r1, #10
   103f0:	4b14      	ldr	r3, [pc, #80]	; (10444 <LorawanProcessFcntDown+0x88>)
   103f2:	2001      	movs	r0, #1
   103f4:	4798      	blx	r3
   103f6:	e7f8      	b.n	103ea <LorawanProcessFcntDown+0x2e>
   103f8:	0020      	movs	r0, r4
   103fa:	308e      	adds	r0, #142	; 0x8e
   103fc:	8803      	ldrh	r3, [r0, #0]
   103fe:	3301      	adds	r3, #1
   10400:	8003      	strh	r3, [r0, #0]
   10402:	5c61      	ldrb	r1, [r4, r1]
   10404:	2900      	cmp	r1, #0
   10406:	d005      	beq.n	10414 <LorawanProcessFcntDown+0x58>
   10408:	2301      	movs	r3, #1
   1040a:	408b      	lsls	r3, r1
   1040c:	6812      	ldr	r2, [r2, #0]
   1040e:	3b01      	subs	r3, #1
   10410:	421a      	tst	r2, r3
   10412:	d103      	bne.n	1041c <LorawanProcessFcntDown+0x60>
   10414:	210a      	movs	r1, #10
   10416:	2001      	movs	r0, #1
   10418:	4b0a      	ldr	r3, [pc, #40]	; (10444 <LorawanProcessFcntDown+0x88>)
   1041a:	4798      	blx	r3
   1041c:	0023      	movs	r3, r4
   1041e:	338c      	adds	r3, #140	; 0x8c
   10420:	681b      	ldr	r3, [r3, #0]
   10422:	3301      	adds	r3, #1
   10424:	d1e1      	bne.n	103ea <LorawanProcessFcntDown+0x2e>
   10426:	2501      	movs	r5, #1
   10428:	3484      	adds	r4, #132	; 0x84
   1042a:	78a3      	ldrb	r3, [r4, #2]
   1042c:	432b      	orrs	r3, r5
   1042e:	70a3      	strb	r3, [r4, #2]
   10430:	4b05      	ldr	r3, [pc, #20]	; (10448 <LorawanProcessFcntDown+0x8c>)
   10432:	4798      	blx	r3
   10434:	210b      	movs	r1, #11
   10436:	0028      	movs	r0, r5
   10438:	4b02      	ldr	r3, [pc, #8]	; (10444 <LorawanProcessFcntDown+0x88>)
   1043a:	4798      	blx	r3
   1043c:	200d      	movs	r0, #13
   1043e:	e7d5      	b.n	103ec <LorawanProcessFcntDown+0x30>
   10440:	200029a4 	.word	0x200029a4
   10444:	0000be05 	.word	0x0000be05
   10448:	00010381 	.word	0x00010381

0001044c <UpdateCurrentDataRateAfterDataRangeChanges>:
   1044c:	4b09      	ldr	r3, [pc, #36]	; (10474 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   1044e:	001a      	movs	r2, r3
   10450:	32f4      	adds	r2, #244	; 0xf4
   10452:	7811      	ldrb	r1, [r2, #0]
   10454:	001a      	movs	r2, r3
   10456:	32e7      	adds	r2, #231	; 0xe7
   10458:	7810      	ldrb	r0, [r2, #0]
   1045a:	4288      	cmp	r0, r1
   1045c:	d900      	bls.n	10460 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   1045e:	7011      	strb	r1, [r2, #0]
   10460:	001a      	movs	r2, r3
   10462:	33e7      	adds	r3, #231	; 0xe7
   10464:	32f3      	adds	r2, #243	; 0xf3
   10466:	7812      	ldrb	r2, [r2, #0]
   10468:	7819      	ldrb	r1, [r3, #0]
   1046a:	4291      	cmp	r1, r2
   1046c:	d200      	bcs.n	10470 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   1046e:	701a      	strb	r2, [r3, #0]
   10470:	4770      	bx	lr
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	200029a4 	.word	0x200029a4

00010478 <ExecuteNewChannel>:
   10478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1047a:	b08d      	sub	sp, #52	; 0x34
   1047c:	7807      	ldrb	r7, [r0, #0]
   1047e:	ab02      	add	r3, sp, #8
   10480:	0006      	movs	r6, r0
   10482:	71df      	strb	r7, [r3, #7]
   10484:	1c41      	adds	r1, r0, #1
   10486:	4b59      	ldr	r3, [pc, #356]	; (105ec <ExecuteNewChannel+0x174>)
   10488:	2204      	movs	r2, #4
   1048a:	a808      	add	r0, sp, #32
   1048c:	4798      	blx	r3
   1048e:	9b08      	ldr	r3, [sp, #32]
   10490:	4c57      	ldr	r4, [pc, #348]	; (105f0 <ExecuteNewChannel+0x178>)
   10492:	021d      	lsls	r5, r3, #8
   10494:	2364      	movs	r3, #100	; 0x64
   10496:	0a2d      	lsrs	r5, r5, #8
   10498:	435d      	muls	r5, r3
   1049a:	1d73      	adds	r3, r6, #5
   1049c:	9301      	str	r3, [sp, #4]
   1049e:	0023      	movs	r3, r4
   104a0:	9508      	str	r5, [sp, #32]
   104a2:	33ff      	adds	r3, #255	; 0xff
   104a4:	781b      	ldrb	r3, [r3, #0]
   104a6:	3b02      	subs	r3, #2
   104a8:	2b01      	cmp	r3, #1
   104aa:	d800      	bhi.n	104ae <ExecuteNewChannel+0x36>
   104ac:	e092      	b.n	105d4 <ExecuteNewChannel+0x15c>
   104ae:	7933      	ldrb	r3, [r6, #4]
   104b0:	a904      	add	r1, sp, #16
   104b2:	9300      	str	r3, [sp, #0]
   104b4:	2300      	movs	r3, #0
   104b6:	2015      	movs	r0, #21
   104b8:	4e4e      	ldr	r6, [pc, #312]	; (105f4 <ExecuteNewChannel+0x17c>)
   104ba:	700f      	strb	r7, [r1, #0]
   104bc:	704b      	strb	r3, [r1, #1]
   104be:	47b0      	blx	r6
   104c0:	2808      	cmp	r0, #8
   104c2:	d12b      	bne.n	1051c <ExecuteNewChannel+0xa4>
   104c4:	466a      	mov	r2, sp
   104c6:	ab02      	add	r3, sp, #8
   104c8:	79db      	ldrb	r3, [r3, #7]
   104ca:	7812      	ldrb	r2, [r2, #0]
   104cc:	af06      	add	r7, sp, #24
   104ce:	a90a      	add	r1, sp, #40	; 0x28
   104d0:	3806      	subs	r0, #6
   104d2:	703b      	strb	r3, [r7, #0]
   104d4:	707a      	strb	r2, [r7, #1]
   104d6:	710b      	strb	r3, [r1, #4]
   104d8:	950a      	str	r5, [sp, #40]	; 0x28
   104da:	47b0      	blx	r6
   104dc:	2808      	cmp	r0, #8
   104de:	d001      	beq.n	104e4 <ExecuteNewChannel+0x6c>
   104e0:	2d00      	cmp	r5, #0
   104e2:	d10b      	bne.n	104fc <ExecuteNewChannel+0x84>
   104e4:	0023      	movs	r3, r4
   104e6:	33e0      	adds	r3, #224	; 0xe0
   104e8:	781a      	ldrb	r2, [r3, #0]
   104ea:	2303      	movs	r3, #3
   104ec:	4353      	muls	r3, r2
   104ee:	2280      	movs	r2, #128	; 0x80
   104f0:	18e3      	adds	r3, r4, r3
   104f2:	3398      	adds	r3, #152	; 0x98
   104f4:	7899      	ldrb	r1, [r3, #2]
   104f6:	4252      	negs	r2, r2
   104f8:	430a      	orrs	r2, r1
   104fa:	709a      	strb	r2, [r3, #2]
   104fc:	0039      	movs	r1, r7
   104fe:	2012      	movs	r0, #18
   10500:	47b0      	blx	r6
   10502:	2808      	cmp	r0, #8
   10504:	d10a      	bne.n	1051c <ExecuteNewChannel+0xa4>
   10506:	0023      	movs	r3, r4
   10508:	33e0      	adds	r3, #224	; 0xe0
   1050a:	781a      	ldrb	r2, [r3, #0]
   1050c:	2303      	movs	r3, #3
   1050e:	4353      	muls	r3, r2
   10510:	2240      	movs	r2, #64	; 0x40
   10512:	18e3      	adds	r3, r4, r3
   10514:	3398      	adds	r3, #152	; 0x98
   10516:	7899      	ldrb	r1, [r3, #2]
   10518:	430a      	orrs	r2, r1
   1051a:	709a      	strb	r2, [r3, #2]
   1051c:	0023      	movs	r3, r4
   1051e:	33e0      	adds	r3, #224	; 0xe0
   10520:	781a      	ldrb	r2, [r3, #0]
   10522:	2303      	movs	r3, #3
   10524:	4353      	muls	r3, r2
   10526:	18e3      	adds	r3, r4, r3
   10528:	3398      	adds	r3, #152	; 0x98
   1052a:	789b      	ldrb	r3, [r3, #2]
   1052c:	09da      	lsrs	r2, r3, #7
   1052e:	2a01      	cmp	r2, #1
   10530:	d150      	bne.n	105d4 <ExecuteNewChannel+0x15c>
   10532:	065b      	lsls	r3, r3, #25
   10534:	d54e      	bpl.n	105d4 <ExecuteNewChannel+0x15c>
   10536:	4e30      	ldr	r6, [pc, #192]	; (105f8 <ExecuteNewChannel+0x180>)
   10538:	2d00      	cmp	r5, #0
   1053a:	d04e      	beq.n	105da <ExecuteNewChannel+0x162>
   1053c:	a906      	add	r1, sp, #24
   1053e:	2012      	movs	r0, #18
   10540:	47b0      	blx	r6
   10542:	ad07      	add	r5, sp, #28
   10544:	a90a      	add	r1, sp, #40	; 0x28
   10546:	2000      	movs	r0, #0
   10548:	47b0      	blx	r6
   1054a:	002a      	movs	r2, r5
   1054c:	2100      	movs	r1, #0
   1054e:	2014      	movs	r0, #20
   10550:	4f2a      	ldr	r7, [pc, #168]	; (105fc <ExecuteNewChannel+0x184>)
   10552:	47b8      	blx	r7
   10554:	0023      	movs	r3, r4
   10556:	782a      	ldrb	r2, [r5, #0]
   10558:	33f3      	adds	r3, #243	; 0xf3
   1055a:	701a      	strb	r2, [r3, #0]
   1055c:	0023      	movs	r3, r4
   1055e:	786a      	ldrb	r2, [r5, #1]
   10560:	33f4      	adds	r3, #244	; 0xf4
   10562:	701a      	strb	r2, [r3, #0]
   10564:	34ff      	adds	r4, #255	; 0xff
   10566:	4b26      	ldr	r3, [pc, #152]	; (10600 <ExecuteNewChannel+0x188>)
   10568:	4798      	blx	r3
   1056a:	7f63      	ldrb	r3, [r4, #29]
   1056c:	079b      	lsls	r3, r3, #30
   1056e:	d50e      	bpl.n	1058e <ExecuteNewChannel+0x116>
   10570:	2416      	movs	r4, #22
   10572:	ab02      	add	r3, sp, #8
   10574:	18e4      	adds	r4, r4, r3
   10576:	1dd9      	adds	r1, r3, #7
   10578:	0022      	movs	r2, r4
   1057a:	201e      	movs	r0, #30
   1057c:	47b8      	blx	r7
   1057e:	ab02      	add	r3, sp, #8
   10580:	79db      	ldrb	r3, [r3, #7]
   10582:	a909      	add	r1, sp, #36	; 0x24
   10584:	708b      	strb	r3, [r1, #2]
   10586:	8823      	ldrh	r3, [r4, #0]
   10588:	201e      	movs	r0, #30
   1058a:	800b      	strh	r3, [r1, #0]
   1058c:	47b0      	blx	r6
   1058e:	ab02      	add	r3, sp, #8
   10590:	79db      	ldrb	r3, [r3, #7]
   10592:	a905      	add	r1, sp, #20
   10594:	700b      	strb	r3, [r1, #0]
   10596:	2301      	movs	r3, #1
   10598:	2016      	movs	r0, #22
   1059a:	704b      	strb	r3, [r1, #1]
   1059c:	4b16      	ldr	r3, [pc, #88]	; (105f8 <ExecuteNewChannel+0x180>)
   1059e:	4798      	blx	r3
   105a0:	ad09      	add	r5, sp, #36	; 0x24
   105a2:	2100      	movs	r1, #0
   105a4:	002a      	movs	r2, r5
   105a6:	4b15      	ldr	r3, [pc, #84]	; (105fc <ExecuteNewChannel+0x184>)
   105a8:	2014      	movs	r0, #20
   105aa:	4798      	blx	r3
   105ac:	4c10      	ldr	r4, [pc, #64]	; (105f0 <ExecuteNewChannel+0x178>)
   105ae:	782a      	ldrb	r2, [r5, #0]
   105b0:	0023      	movs	r3, r4
   105b2:	33f3      	adds	r3, #243	; 0xf3
   105b4:	701a      	strb	r2, [r3, #0]
   105b6:	0023      	movs	r3, r4
   105b8:	786a      	ldrb	r2, [r5, #1]
   105ba:	33f4      	adds	r3, #244	; 0xf4
   105bc:	701a      	strb	r2, [r3, #0]
   105be:	4b10      	ldr	r3, [pc, #64]	; (10600 <ExecuteNewChannel+0x188>)
   105c0:	4798      	blx	r3
   105c2:	2304      	movs	r3, #4
   105c4:	3484      	adds	r4, #132	; 0x84
   105c6:	7862      	ldrb	r2, [r4, #1]
   105c8:	210b      	movs	r1, #11
   105ca:	4313      	orrs	r3, r2
   105cc:	7063      	strb	r3, [r4, #1]
   105ce:	2001      	movs	r0, #1
   105d0:	4b0c      	ldr	r3, [pc, #48]	; (10604 <ExecuteNewChannel+0x18c>)
   105d2:	4798      	blx	r3
   105d4:	9801      	ldr	r0, [sp, #4]
   105d6:	b00d      	add	sp, #52	; 0x34
   105d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105da:	ab02      	add	r3, sp, #8
   105dc:	79db      	ldrb	r3, [r3, #7]
   105de:	a905      	add	r1, sp, #20
   105e0:	2016      	movs	r0, #22
   105e2:	700b      	strb	r3, [r1, #0]
   105e4:	704d      	strb	r5, [r1, #1]
   105e6:	47b0      	blx	r6
   105e8:	e7da      	b.n	105a0 <ExecuteNewChannel+0x128>
   105ea:	46c0      	nop			; (mov r8, r8)
   105ec:	00017691 	.word	0x00017691
   105f0:	200029a4 	.word	0x200029a4
   105f4:	0000b6e1 	.word	0x0000b6e1
   105f8:	0000b7ed 	.word	0x0000b7ed
   105fc:	0000b6c5 	.word	0x0000b6c5
   10600:	0001044d 	.word	0x0001044d
   10604:	0000be05 	.word	0x0000be05

00010608 <MacExecuteCommands>:
   10608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1060a:	1843      	adds	r3, r0, r1
   1060c:	b087      	sub	sp, #28
   1060e:	9301      	str	r3, [sp, #4]
   10610:	2300      	movs	r3, #0
   10612:	0007      	movs	r7, r0
   10614:	2501      	movs	r5, #1
   10616:	9302      	str	r3, [sp, #8]
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	4e71      	ldr	r6, [pc, #452]	; (107e0 <MacExecuteCommands+0x1d8>)
   1061c:	429f      	cmp	r7, r3
   1061e:	d362      	bcc.n	106e6 <MacExecuteCommands+0xde>
   10620:	4b70      	ldr	r3, [pc, #448]	; (107e4 <MacExecuteCommands+0x1dc>)
   10622:	5cf3      	ldrb	r3, [r6, r3]
   10624:	2b00      	cmp	r3, #0
   10626:	d000      	beq.n	1062a <MacExecuteCommands+0x22>
   10628:	e08f      	b.n	1074a <MacExecuteCommands+0x142>
   1062a:	0038      	movs	r0, r7
   1062c:	b007      	add	sp, #28
   1062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10630:	0032      	movs	r2, r6
   10632:	7879      	ldrb	r1, [r7, #1]
   10634:	32e5      	adds	r2, #229	; 0xe5
   10636:	7011      	strb	r1, [r2, #0]
   10638:	0032      	movs	r2, r6
   1063a:	78b9      	ldrb	r1, [r7, #2]
   1063c:	32e6      	adds	r2, #230	; 0xe6
   1063e:	1cfc      	adds	r4, r7, #3
   10640:	7011      	strb	r1, [r2, #0]
   10642:	2203      	movs	r2, #3
   10644:	4353      	muls	r3, r2
   10646:	18f3      	adds	r3, r6, r3
   10648:	3399      	adds	r3, #153	; 0x99
   1064a:	32fc      	adds	r2, #252	; 0xfc
   1064c:	701a      	strb	r2, [r3, #0]
   1064e:	e020      	b.n	10692 <MacExecuteCommands+0x8a>
   10650:	0020      	movs	r0, r4
   10652:	4b65      	ldr	r3, [pc, #404]	; (107e8 <MacExecuteCommands+0x1e0>)
   10654:	4798      	blx	r3
   10656:	0004      	movs	r4, r0
   10658:	e01b      	b.n	10692 <MacExecuteCommands+0x8a>
   1065a:	0020      	movs	r0, r4
   1065c:	4b63      	ldr	r3, [pc, #396]	; (107ec <MacExecuteCommands+0x1e4>)
   1065e:	e7f9      	b.n	10654 <MacExecuteCommands+0x4c>
   10660:	0020      	movs	r0, r4
   10662:	4b63      	ldr	r3, [pc, #396]	; (107f0 <MacExecuteCommands+0x1e8>)
   10664:	e7f6      	b.n	10654 <MacExecuteCommands+0x4c>
   10666:	0020      	movs	r0, r4
   10668:	4b62      	ldr	r3, [pc, #392]	; (107f4 <MacExecuteCommands+0x1ec>)
   1066a:	e7f3      	b.n	10654 <MacExecuteCommands+0x4c>
   1066c:	7878      	ldrb	r0, [r7, #1]
   1066e:	230f      	movs	r3, #15
   10670:	0002      	movs	r2, r0
   10672:	1cbc      	adds	r4, r7, #2
   10674:	439a      	bics	r2, r3
   10676:	d10c      	bne.n	10692 <MacExecuteCommands+0x8a>
   10678:	4b5f      	ldr	r3, [pc, #380]	; (107f8 <MacExecuteCommands+0x1f0>)
   1067a:	4798      	blx	r3
   1067c:	0032      	movs	r2, r6
   1067e:	2380      	movs	r3, #128	; 0x80
   10680:	3284      	adds	r2, #132	; 0x84
   10682:	7851      	ldrb	r1, [r2, #1]
   10684:	425b      	negs	r3, r3
   10686:	430b      	orrs	r3, r1
   10688:	7053      	strb	r3, [r2, #1]
   1068a:	210b      	movs	r1, #11
   1068c:	0028      	movs	r0, r5
   1068e:	4b5b      	ldr	r3, [pc, #364]	; (107fc <MacExecuteCommands+0x1f4>)
   10690:	4798      	blx	r3
   10692:	0032      	movs	r2, r6
   10694:	2103      	movs	r1, #3
   10696:	32e0      	adds	r2, #224	; 0xe0
   10698:	7813      	ldrb	r3, [r2, #0]
   1069a:	4359      	muls	r1, r3
   1069c:	1876      	adds	r6, r6, r1
   1069e:	3699      	adds	r6, #153	; 0x99
   106a0:	7831      	ldrb	r1, [r6, #0]
   106a2:	29ff      	cmp	r1, #255	; 0xff
   106a4:	d003      	beq.n	106ae <MacExecuteCommands+0xa6>
   106a6:	2b0f      	cmp	r3, #15
   106a8:	d801      	bhi.n	106ae <MacExecuteCommands+0xa6>
   106aa:	3301      	adds	r3, #1
   106ac:	7013      	strb	r3, [r2, #0]
   106ae:	0027      	movs	r7, r4
   106b0:	e7b2      	b.n	10618 <MacExecuteCommands+0x10>
   106b2:	0020      	movs	r0, r4
   106b4:	4b52      	ldr	r3, [pc, #328]	; (10800 <MacExecuteCommands+0x1f8>)
   106b6:	e7cd      	b.n	10654 <MacExecuteCommands+0x4c>
   106b8:	0020      	movs	r0, r4
   106ba:	4b52      	ldr	r3, [pc, #328]	; (10804 <MacExecuteCommands+0x1fc>)
   106bc:	e7ca      	b.n	10654 <MacExecuteCommands+0x4c>
   106be:	0020      	movs	r0, r4
   106c0:	4b51      	ldr	r3, [pc, #324]	; (10808 <MacExecuteCommands+0x200>)
   106c2:	4798      	blx	r3
   106c4:	0033      	movs	r3, r6
   106c6:	33e0      	adds	r3, #224	; 0xe0
   106c8:	0004      	movs	r4, r0
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	e7b9      	b.n	10642 <MacExecuteCommands+0x3a>
   106ce:	2203      	movs	r2, #3
   106d0:	4353      	muls	r3, r2
   106d2:	18f3      	adds	r3, r6, r3
   106d4:	3399      	adds	r3, #153	; 0x99
   106d6:	32fc      	adds	r2, #252	; 0xfc
   106d8:	701a      	strb	r2, [r3, #0]
   106da:	9c01      	ldr	r4, [sp, #4]
   106dc:	9502      	str	r5, [sp, #8]
   106de:	e7d8      	b.n	10692 <MacExecuteCommands+0x8a>
   106e0:	23ff      	movs	r3, #255	; 0xff
   106e2:	7013      	strb	r3, [r2, #0]
   106e4:	e7f9      	b.n	106da <MacExecuteCommands+0xd2>
   106e6:	9b02      	ldr	r3, [sp, #8]
   106e8:	2b00      	cmp	r3, #0
   106ea:	d199      	bne.n	10620 <MacExecuteCommands+0x18>
   106ec:	0033      	movs	r3, r6
   106ee:	2203      	movs	r2, #3
   106f0:	33e0      	adds	r3, #224	; 0xe0
   106f2:	781b      	ldrb	r3, [r3, #0]
   106f4:	2401      	movs	r4, #1
   106f6:	435a      	muls	r2, r3
   106f8:	18b2      	adds	r2, r6, r2
   106fa:	0010      	movs	r0, r2
   106fc:	3098      	adds	r0, #152	; 0x98
   106fe:	7881      	ldrb	r1, [r0, #2]
   10700:	3299      	adds	r2, #153	; 0x99
   10702:	43a9      	bics	r1, r5
   10704:	4021      	ands	r1, r4
   10706:	7081      	strb	r1, [r0, #2]
   10708:	78c1      	ldrb	r1, [r0, #3]
   1070a:	193c      	adds	r4, r7, r4
   1070c:	43a9      	bics	r1, r5
   1070e:	70c1      	strb	r1, [r0, #3]
   10710:	7839      	ldrb	r1, [r7, #0]
   10712:	7011      	strb	r1, [r2, #0]
   10714:	7838      	ldrb	r0, [r7, #0]
   10716:	493d      	ldr	r1, [pc, #244]	; (1080c <MacExecuteCommands+0x204>)
   10718:	1809      	adds	r1, r1, r0
   1071a:	3902      	subs	r1, #2
   1071c:	7809      	ldrb	r1, [r1, #0]
   1071e:	1861      	adds	r1, r4, r1
   10720:	468c      	mov	ip, r1
   10722:	9901      	ldr	r1, [sp, #4]
   10724:	4561      	cmp	r1, ip
   10726:	d3db      	bcc.n	106e0 <MacExecuteCommands+0xd8>
   10728:	3802      	subs	r0, #2
   1072a:	280b      	cmp	r0, #11
   1072c:	d8cf      	bhi.n	106ce <MacExecuteCommands+0xc6>
   1072e:	f003 fed7 	bl	144e0 <__gnu_thumb1_case_shi>
   10732:	ff7f      	.short	0xff7f
   10734:	ff94ff8f 	.word	0xff94ff8f
   10738:	ffb0ff97 	.word	0xffb0ff97
   1073c:	ff9dff9a 	.word	0xff9dff9a
   10740:	ffc3ffc0 	.word	0xffc3ffc0
   10744:	ffceffce 	.word	0xffceffce
   10748:	ffc6      	.short	0xffc6
   1074a:	4b31      	ldr	r3, [pc, #196]	; (10810 <MacExecuteCommands+0x208>)
   1074c:	5cf3      	ldrb	r3, [r6, r3]
   1074e:	43db      	mvns	r3, r3
   10750:	075b      	lsls	r3, r3, #29
   10752:	d000      	beq.n	10756 <MacExecuteCommands+0x14e>
   10754:	e769      	b.n	1062a <MacExecuteCommands+0x22>
   10756:	4b2f      	ldr	r3, [pc, #188]	; (10814 <MacExecuteCommands+0x20c>)
   10758:	ad05      	add	r5, sp, #20
   1075a:	5cf4      	ldrb	r4, [r6, r3]
   1075c:	2100      	movs	r1, #0
   1075e:	0724      	lsls	r4, r4, #28
   10760:	0f24      	lsrs	r4, r4, #28
   10762:	b2e3      	uxtb	r3, r4
   10764:	9301      	str	r3, [sp, #4]
   10766:	4b2c      	ldr	r3, [pc, #176]	; (10818 <MacExecuteCommands+0x210>)
   10768:	002a      	movs	r2, r5
   1076a:	5cf3      	ldrb	r3, [r6, r3]
   1076c:	2014      	movs	r0, #20
   1076e:	9302      	str	r3, [sp, #8]
   10770:	2389      	movs	r3, #137	; 0x89
   10772:	009b      	lsls	r3, r3, #2
   10774:	5cf3      	ldrb	r3, [r6, r3]
   10776:	9303      	str	r3, [sp, #12]
   10778:	4b28      	ldr	r3, [pc, #160]	; (1081c <MacExecuteCommands+0x214>)
   1077a:	4798      	blx	r3
   1077c:	0033      	movs	r3, r6
   1077e:	782a      	ldrb	r2, [r5, #0]
   10780:	33f3      	adds	r3, #243	; 0xf3
   10782:	701a      	strb	r2, [r3, #0]
   10784:	0033      	movs	r3, r6
   10786:	786a      	ldrb	r2, [r5, #1]
   10788:	33f4      	adds	r3, #244	; 0xf4
   1078a:	701a      	strb	r2, [r3, #0]
   1078c:	4b24      	ldr	r3, [pc, #144]	; (10820 <MacExecuteCommands+0x218>)
   1078e:	4798      	blx	r3
   10790:	9802      	ldr	r0, [sp, #8]
   10792:	4b24      	ldr	r3, [pc, #144]	; (10824 <MacExecuteCommands+0x21c>)
   10794:	4798      	blx	r3
   10796:	0032      	movs	r2, r6
   10798:	2308      	movs	r3, #8
   1079a:	3284      	adds	r2, #132	; 0x84
   1079c:	7851      	ldrb	r1, [r2, #1]
   1079e:	430b      	orrs	r3, r1
   107a0:	7053      	strb	r3, [r2, #1]
   107a2:	9803      	ldr	r0, [sp, #12]
   107a4:	4b20      	ldr	r3, [pc, #128]	; (10828 <MacExecuteCommands+0x220>)
   107a6:	4798      	blx	r3
   107a8:	0033      	movs	r3, r6
   107aa:	b2e2      	uxtb	r2, r4
   107ac:	33e1      	adds	r3, #225	; 0xe1
   107ae:	2a00      	cmp	r2, #0
   107b0:	d10e      	bne.n	107d0 <MacExecuteCommands+0x1c8>
   107b2:	701c      	strb	r4, [r3, #0]
   107b4:	2113      	movs	r1, #19
   107b6:	4c11      	ldr	r4, [pc, #68]	; (107fc <MacExecuteCommands+0x1f4>)
   107b8:	2000      	movs	r0, #0
   107ba:	47a0      	blx	r4
   107bc:	2210      	movs	r2, #16
   107be:	4b08      	ldr	r3, [pc, #32]	; (107e0 <MacExecuteCommands+0x1d8>)
   107c0:	2001      	movs	r0, #1
   107c2:	3384      	adds	r3, #132	; 0x84
   107c4:	7859      	ldrb	r1, [r3, #1]
   107c6:	430a      	orrs	r2, r1
   107c8:	705a      	strb	r2, [r3, #1]
   107ca:	210b      	movs	r1, #11
   107cc:	47a0      	blx	r4
   107ce:	e72c      	b.n	1062a <MacExecuteCommands+0x22>
   107d0:	9a01      	ldr	r2, [sp, #4]
   107d2:	3a01      	subs	r2, #1
   107d4:	b2d2      	uxtb	r2, r2
   107d6:	701a      	strb	r2, [r3, #0]
   107d8:	0033      	movs	r3, r6
   107da:	33e2      	adds	r3, #226	; 0xe2
   107dc:	701a      	strb	r2, [r3, #0]
   107de:	e7e9      	b.n	107b4 <MacExecuteCommands+0x1ac>
   107e0:	200029a4 	.word	0x200029a4
   107e4:	00000226 	.word	0x00000226
   107e8:	0000e98d 	.word	0x0000e98d
   107ec:	0000e851 	.word	0x0000e851
   107f0:	0000e755 	.word	0x0000e755
   107f4:	00010479 	.word	0x00010479
   107f8:	0000dbbd 	.word	0x0000dbbd
   107fc:	0000be05 	.word	0x0000be05
   10800:	0000e93d 	.word	0x0000e93d
   10804:	0000e889 	.word	0x0000e889
   10808:	0000eac5 	.word	0x0000eac5
   1080c:	0001df4b 	.word	0x0001df4b
   10810:	00000223 	.word	0x00000223
   10814:	00000229 	.word	0x00000229
   10818:	00000225 	.word	0x00000225
   1081c:	0000b6c5 	.word	0x0000b6c5
   10820:	0001044d 	.word	0x0001044d
   10824:	0000e5e5 	.word	0x0000e5e5
   10828:	0000e579 	.word	0x0000e579

0001082c <LorawanSetDataRange>:
   1082c:	2201      	movs	r2, #1
   1082e:	b530      	push	{r4, r5, lr}
   10830:	b085      	sub	sp, #20
   10832:	ab01      	add	r3, sp, #4
   10834:	ac02      	add	r4, sp, #8
   10836:	7018      	strb	r0, [r3, #0]
   10838:	7020      	strb	r0, [r4, #0]
   1083a:	7061      	strb	r1, [r4, #1]
   1083c:	2015      	movs	r0, #21
   1083e:	0019      	movs	r1, r3
   10840:	4d11      	ldr	r5, [pc, #68]	; (10888 <LorawanSetDataRange+0x5c>)
   10842:	705a      	strb	r2, [r3, #1]
   10844:	47a8      	blx	r5
   10846:	2808      	cmp	r0, #8
   10848:	d003      	beq.n	10852 <LorawanSetDataRange+0x26>
   1084a:	250a      	movs	r5, #10
   1084c:	0028      	movs	r0, r5
   1084e:	b005      	add	sp, #20
   10850:	bd30      	pop	{r4, r5, pc}
   10852:	0021      	movs	r1, r4
   10854:	2012      	movs	r0, #18
   10856:	47a8      	blx	r5
   10858:	0005      	movs	r5, r0
   1085a:	2808      	cmp	r0, #8
   1085c:	d1f5      	bne.n	1084a <LorawanSetDataRange+0x1e>
   1085e:	0021      	movs	r1, r4
   10860:	4b0a      	ldr	r3, [pc, #40]	; (1088c <LorawanSetDataRange+0x60>)
   10862:	ac03      	add	r4, sp, #12
   10864:	2012      	movs	r0, #18
   10866:	4798      	blx	r3
   10868:	0022      	movs	r2, r4
   1086a:	2100      	movs	r1, #0
   1086c:	4b08      	ldr	r3, [pc, #32]	; (10890 <LorawanSetDataRange+0x64>)
   1086e:	2014      	movs	r0, #20
   10870:	4798      	blx	r3
   10872:	4b08      	ldr	r3, [pc, #32]	; (10894 <LorawanSetDataRange+0x68>)
   10874:	7821      	ldrb	r1, [r4, #0]
   10876:	001a      	movs	r2, r3
   10878:	32f3      	adds	r2, #243	; 0xf3
   1087a:	7011      	strb	r1, [r2, #0]
   1087c:	7862      	ldrb	r2, [r4, #1]
   1087e:	33f4      	adds	r3, #244	; 0xf4
   10880:	701a      	strb	r2, [r3, #0]
   10882:	4b05      	ldr	r3, [pc, #20]	; (10898 <LorawanSetDataRange+0x6c>)
   10884:	4798      	blx	r3
   10886:	e7e1      	b.n	1084c <LorawanSetDataRange+0x20>
   10888:	0000b6e1 	.word	0x0000b6e1
   1088c:	0000b7ed 	.word	0x0000b7ed
   10890:	0000b6c5 	.word	0x0000b6c5
   10894:	200029a4 	.word	0x200029a4
   10898:	0001044d 	.word	0x0001044d

0001089c <LorawanSetChannelIdStatus>:
   1089c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1089e:	466b      	mov	r3, sp
   108a0:	7018      	strb	r0, [r3, #0]
   108a2:	7059      	strb	r1, [r3, #1]
   108a4:	2016      	movs	r0, #22
   108a6:	4669      	mov	r1, sp
   108a8:	4b0c      	ldr	r3, [pc, #48]	; (108dc <LorawanSetChannelIdStatus+0x40>)
   108aa:	4798      	blx	r3
   108ac:	0004      	movs	r4, r0
   108ae:	2808      	cmp	r0, #8
   108b0:	d111      	bne.n	108d6 <LorawanSetChannelIdStatus+0x3a>
   108b2:	ad01      	add	r5, sp, #4
   108b4:	002a      	movs	r2, r5
   108b6:	2100      	movs	r1, #0
   108b8:	4b09      	ldr	r3, [pc, #36]	; (108e0 <LorawanSetChannelIdStatus+0x44>)
   108ba:	2014      	movs	r0, #20
   108bc:	4798      	blx	r3
   108be:	4b09      	ldr	r3, [pc, #36]	; (108e4 <LorawanSetChannelIdStatus+0x48>)
   108c0:	7829      	ldrb	r1, [r5, #0]
   108c2:	001a      	movs	r2, r3
   108c4:	32f3      	adds	r2, #243	; 0xf3
   108c6:	7011      	strb	r1, [r2, #0]
   108c8:	786a      	ldrb	r2, [r5, #1]
   108ca:	33f4      	adds	r3, #244	; 0xf4
   108cc:	701a      	strb	r2, [r3, #0]
   108ce:	4b06      	ldr	r3, [pc, #24]	; (108e8 <LorawanSetChannelIdStatus+0x4c>)
   108d0:	4798      	blx	r3
   108d2:	0020      	movs	r0, r4
   108d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   108d6:	240a      	movs	r4, #10
   108d8:	e7fb      	b.n	108d2 <LorawanSetChannelIdStatus+0x36>
   108da:	46c0      	nop			; (mov r8, r8)
   108dc:	0000b7ed 	.word	0x0000b7ed
   108e0:	0000b6c5 	.word	0x0000b6c5
   108e4:	200029a4 	.word	0x200029a4
   108e8:	0001044d 	.word	0x0001044d

000108ec <LORAWAN_RxDone>:
   108ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   108ee:	4bce      	ldr	r3, [pc, #824]	; (10c28 <LORAWAN_RxDone+0x33c>)
   108f0:	b093      	sub	sp, #76	; 0x4c
   108f2:	781b      	ldrb	r3, [r3, #0]
   108f4:	0007      	movs	r7, r0
   108f6:	b25a      	sxtb	r2, r3
   108f8:	000c      	movs	r4, r1
   108fa:	4ecc      	ldr	r6, [pc, #816]	; (10c2c <LORAWAN_RxDone+0x340>)
   108fc:	2a00      	cmp	r2, #0
   108fe:	da01      	bge.n	10904 <LORAWAN_RxDone+0x18>
   10900:	f000 fc9a 	bl	11238 <LORAWAN_RxDone+0x94c>
   10904:	7801      	ldrb	r1, [r0, #0]
   10906:	221f      	movs	r2, #31
   10908:	0008      	movs	r0, r1
   1090a:	4390      	bics	r0, r2
   1090c:	0002      	movs	r2, r0
   1090e:	2820      	cmp	r0, #32
   10910:	d000      	beq.n	10914 <LORAWAN_RxDone+0x28>
   10912:	e1c1      	b.n	10c98 <LORAWAN_RxDone+0x3ac>
   10914:	7832      	ldrb	r2, [r6, #0]
   10916:	2a00      	cmp	r2, #0
   10918:	d001      	beq.n	1091e <LORAWAN_RxDone+0x32>
   1091a:	f000 fc79 	bl	11210 <LORAWAN_RxDone+0x924>
   1091e:	0032      	movs	r2, r6
   10920:	3294      	adds	r2, #148	; 0x94
   10922:	7812      	ldrb	r2, [r2, #0]
   10924:	0752      	lsls	r2, r2, #29
   10926:	d401      	bmi.n	1092c <LORAWAN_RxDone+0x40>
   10928:	f000 fc72 	bl	11210 <LORAWAN_RxDone+0x924>
   1092c:	1e63      	subs	r3, r4, #1
   1092e:	b2db      	uxtb	r3, r3
   10930:	9306      	str	r3, [sp, #24]
   10932:	4bbf      	ldr	r3, [pc, #764]	; (10c30 <LORAWAN_RxDone+0x344>)
   10934:	469c      	mov	ip, r3
   10936:	9b06      	ldr	r3, [sp, #24]
   10938:	2b00      	cmp	r3, #0
   1093a:	d12b      	bne.n	10994 <LORAWAN_RxDone+0xa8>
   1093c:	1f25      	subs	r5, r4, #4
   1093e:	b2eb      	uxtb	r3, r5
   10940:	4660      	mov	r0, ip
   10942:	9300      	str	r3, [sp, #0]
   10944:	4abb      	ldr	r2, [pc, #748]	; (10c34 <LORAWAN_RxDone+0x348>)
   10946:	003b      	movs	r3, r7
   10948:	9906      	ldr	r1, [sp, #24]
   1094a:	4ebb      	ldr	r6, [pc, #748]	; (10c38 <LORAWAN_RxDone+0x34c>)
   1094c:	47b0      	blx	r6
   1094e:	2204      	movs	r2, #4
   10950:	49b8      	ldr	r1, [pc, #736]	; (10c34 <LORAWAN_RxDone+0x348>)
   10952:	4bba      	ldr	r3, [pc, #744]	; (10c3c <LORAWAN_RxDone+0x350>)
   10954:	a810      	add	r0, sp, #64	; 0x40
   10956:	4798      	blx	r3
   10958:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1095a:	1979      	adds	r1, r7, r5
   1095c:	2204      	movs	r2, #4
   1095e:	4bb7      	ldr	r3, [pc, #732]	; (10c3c <LORAWAN_RxDone+0x350>)
   10960:	a810      	add	r0, sp, #64	; 0x40
   10962:	960d      	str	r6, [sp, #52]	; 0x34
   10964:	4798      	blx	r3
   10966:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10968:	4db0      	ldr	r5, [pc, #704]	; (10c2c <LORAWAN_RxDone+0x340>)
   1096a:	220e      	movs	r2, #14
   1096c:	42b3      	cmp	r3, r6
   1096e:	d028      	beq.n	109c2 <LORAWAN_RxDone+0xd6>
   10970:	002b      	movs	r3, r5
   10972:	3384      	adds	r3, #132	; 0x84
   10974:	781b      	ldrb	r3, [r3, #0]
   10976:	4013      	ands	r3, r2
   10978:	2b0a      	cmp	r3, #10
   1097a:	d005      	beq.n	10988 <LORAWAN_RxDone+0x9c>
   1097c:	2b06      	cmp	r3, #6
   1097e:	d106      	bne.n	1098e <LORAWAN_RxDone+0xa2>
   10980:	35f9      	adds	r5, #249	; 0xf9
   10982:	782b      	ldrb	r3, [r5, #0]
   10984:	2b00      	cmp	r3, #0
   10986:	d002      	beq.n	1098e <LORAWAN_RxDone+0xa2>
   10988:	2018      	movs	r0, #24
   1098a:	4bad      	ldr	r3, [pc, #692]	; (10c40 <LORAWAN_RxDone+0x354>)
   1098c:	4798      	blx	r3
   1098e:	4bad      	ldr	r3, [pc, #692]	; (10c44 <LORAWAN_RxDone+0x358>)
   10990:	4798      	blx	r3
   10992:	e1ed      	b.n	10d70 <LORAWAN_RxDone+0x484>
   10994:	9b06      	ldr	r3, [sp, #24]
   10996:	4662      	mov	r2, ip
   10998:	1ae0      	subs	r0, r4, r3
   1099a:	1838      	adds	r0, r7, r0
   1099c:	2100      	movs	r1, #0
   1099e:	4baa      	ldr	r3, [pc, #680]	; (10c48 <LORAWAN_RxDone+0x35c>)
   109a0:	4798      	blx	r3
   109a2:	2800      	cmp	r0, #0
   109a4:	d006      	beq.n	109b4 <LORAWAN_RxDone+0xc8>
   109a6:	4ba6      	ldr	r3, [pc, #664]	; (10c40 <LORAWAN_RxDone+0x354>)
   109a8:	4798      	blx	r3
   109aa:	4ba6      	ldr	r3, [pc, #664]	; (10c44 <LORAWAN_RxDone+0x358>)
   109ac:	4798      	blx	r3
   109ae:	201f      	movs	r0, #31
   109b0:	b013      	add	sp, #76	; 0x4c
   109b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109b4:	9b06      	ldr	r3, [sp, #24]
   109b6:	2b10      	cmp	r3, #16
   109b8:	d901      	bls.n	109be <LORAWAN_RxDone+0xd2>
   109ba:	3b10      	subs	r3, #16
   109bc:	e7b7      	b.n	1092e <LORAWAN_RxDone+0x42>
   109be:	9006      	str	r0, [sp, #24]
   109c0:	e7b7      	b.n	10932 <LORAWAN_RxDone+0x46>
   109c2:	002b      	movs	r3, r5
   109c4:	3384      	adds	r3, #132	; 0x84
   109c6:	781b      	ldrb	r3, [r3, #0]
   109c8:	4013      	ands	r3, r2
   109ca:	2b06      	cmp	r3, #6
   109cc:	d104      	bne.n	109d8 <LORAWAN_RxDone+0xec>
   109ce:	002b      	movs	r3, r5
   109d0:	33ec      	adds	r3, #236	; 0xec
   109d2:	7818      	ldrb	r0, [r3, #0]
   109d4:	4b9d      	ldr	r3, [pc, #628]	; (10c4c <LORAWAN_RxDone+0x360>)
   109d6:	4798      	blx	r3
   109d8:	78bb      	ldrb	r3, [r7, #2]
   109da:	78fa      	ldrb	r2, [r7, #3]
   109dc:	021b      	lsls	r3, r3, #8
   109de:	0412      	lsls	r2, r2, #16
   109e0:	4313      	orrs	r3, r2
   109e2:	2291      	movs	r2, #145	; 0x91
   109e4:	7879      	ldrb	r1, [r7, #1]
   109e6:	0092      	lsls	r2, r2, #2
   109e8:	430b      	orrs	r3, r1
   109ea:	58a9      	ldr	r1, [r5, r2]
   109ec:	1c48      	adds	r0, r1, #1
   109ee:	d006      	beq.n	109fe <LORAWAN_RxDone+0x112>
   109f0:	428b      	cmp	r3, r1
   109f2:	d804      	bhi.n	109fe <LORAWAN_RxDone+0x112>
   109f4:	2024      	movs	r0, #36	; 0x24
   109f6:	4b92      	ldr	r3, [pc, #584]	; (10c40 <LORAWAN_RxDone+0x354>)
   109f8:	4798      	blx	r3
   109fa:	2024      	movs	r0, #36	; 0x24
   109fc:	e7d8      	b.n	109b0 <LORAWAN_RxDone+0xc4>
   109fe:	210f      	movs	r1, #15
   10a00:	4e93      	ldr	r6, [pc, #588]	; (10c50 <LORAWAN_RxDone+0x364>)
   10a02:	2001      	movs	r0, #1
   10a04:	50ab      	str	r3, [r5, r2]
   10a06:	47b0      	blx	r6
   10a08:	7a3a      	ldrb	r2, [r7, #8]
   10a0a:	79fb      	ldrb	r3, [r7, #7]
   10a0c:	0212      	lsls	r2, r2, #8
   10a0e:	431a      	orrs	r2, r3
   10a10:	7a7b      	ldrb	r3, [r7, #9]
   10a12:	2001      	movs	r0, #1
   10a14:	041b      	lsls	r3, r3, #16
   10a16:	431a      	orrs	r2, r3
   10a18:	7abb      	ldrb	r3, [r7, #10]
   10a1a:	061b      	lsls	r3, r3, #24
   10a1c:	4313      	orrs	r3, r2
   10a1e:	0a19      	lsrs	r1, r3, #8
   10a20:	706b      	strb	r3, [r5, #1]
   10a22:	70a9      	strb	r1, [r5, #2]
   10a24:	0c19      	lsrs	r1, r3, #16
   10a26:	0e1b      	lsrs	r3, r3, #24
   10a28:	70e9      	strb	r1, [r5, #3]
   10a2a:	712b      	strb	r3, [r5, #4]
   10a2c:	250f      	movs	r5, #15
   10a2e:	2103      	movs	r1, #3
   10a30:	47b0      	blx	r6
   10a32:	7b38      	ldrb	r0, [r7, #12]
   10a34:	4b87      	ldr	r3, [pc, #540]	; (10c54 <LORAWAN_RxDone+0x368>)
   10a36:	4028      	ands	r0, r5
   10a38:	4798      	blx	r3
   10a3a:	7af8      	ldrb	r0, [r7, #11]
   10a3c:	4b86      	ldr	r3, [pc, #536]	; (10c58 <LORAWAN_RxDone+0x36c>)
   10a3e:	0641      	lsls	r1, r0, #25
   10a40:	0700      	lsls	r0, r0, #28
   10a42:	0f49      	lsrs	r1, r1, #29
   10a44:	0f00      	lsrs	r0, r0, #28
   10a46:	4798      	blx	r3
   10a48:	2100      	movs	r1, #0
   10a4a:	203b      	movs	r0, #59	; 0x3b
   10a4c:	4b83      	ldr	r3, [pc, #524]	; (10c5c <LORAWAN_RxDone+0x370>)
   10a4e:	4798      	blx	r3
   10a50:	2c21      	cmp	r4, #33	; 0x21
   10a52:	d000      	beq.n	10a56 <LORAWAN_RxDone+0x16a>
   10a54:	e08c      	b.n	10b70 <LORAWAN_RxDone+0x284>
   10a56:	ab04      	add	r3, sp, #16
   10a58:	3c07      	subs	r4, #7
   10a5a:	18e4      	adds	r4, r4, r3
   10a5c:	0022      	movs	r2, r4
   10a5e:	4b80      	ldr	r3, [pc, #512]	; (10c60 <LORAWAN_RxDone+0x374>)
   10a60:	4980      	ldr	r1, [pc, #512]	; (10c64 <LORAWAN_RxDone+0x378>)
   10a62:	2007      	movs	r0, #7
   10a64:	4798      	blx	r3
   10a66:	7823      	ldrb	r3, [r4, #0]
   10a68:	2bff      	cmp	r3, #255	; 0xff
   10a6a:	d100      	bne.n	10a6e <LORAWAN_RxDone+0x182>
   10a6c:	e080      	b.n	10b70 <LORAWAN_RxDone+0x284>
   10a6e:	2350      	movs	r3, #80	; 0x50
   10a70:	43ab      	bics	r3, r5
   10a72:	9308      	str	r3, [sp, #32]
   10a74:	003b      	movs	r3, r7
   10a76:	330d      	adds	r3, #13
   10a78:	9307      	str	r3, [sp, #28]
   10a7a:	2600      	movs	r6, #0
   10a7c:	2203      	movs	r2, #3
   10a7e:	9907      	ldr	r1, [sp, #28]
   10a80:	4b6e      	ldr	r3, [pc, #440]	; (10c3c <LORAWAN_RxDone+0x350>)
   10a82:	a80e      	add	r0, sp, #56	; 0x38
   10a84:	960e      	str	r6, [sp, #56]	; 0x38
   10a86:	4798      	blx	r3
   10a88:	2364      	movs	r3, #100	; 0x64
   10a8a:	990e      	ldr	r1, [sp, #56]	; 0x38
   10a8c:	aa04      	add	r2, sp, #16
   10a8e:	4359      	muls	r1, r3
   10a90:	3b4a      	subs	r3, #74	; 0x4a
   10a92:	189b      	adds	r3, r3, r2
   10a94:	7818      	ldrb	r0, [r3, #0]
   10a96:	9b06      	ldr	r3, [sp, #24]
   10a98:	910e      	str	r1, [sp, #56]	; 0x38
   10a9a:	1818      	adds	r0, r3, r0
   10a9c:	b2c0      	uxtb	r0, r0
   10a9e:	76d0      	strb	r0, [r2, #27]
   10aa0:	42b1      	cmp	r1, r6
   10aa2:	d100      	bne.n	10aa6 <LORAWAN_RxDone+0x1ba>
   10aa4:	e0a7      	b.n	10bf6 <LORAWAN_RxDone+0x30a>
   10aa6:	466b      	mov	r3, sp
   10aa8:	2220      	movs	r2, #32
   10aaa:	189b      	adds	r3, r3, r2
   10aac:	781b      	ldrb	r3, [r3, #0]
   10aae:	ad10      	add	r5, sp, #64	; 0x40
   10ab0:	ac0b      	add	r4, sp, #44	; 0x2c
   10ab2:	7128      	strb	r0, [r5, #4]
   10ab4:	9110      	str	r1, [sp, #64]	; 0x40
   10ab6:	7020      	strb	r0, [r4, #0]
   10ab8:	7063      	strb	r3, [r4, #1]
   10aba:	0029      	movs	r1, r5
   10abc:	2002      	movs	r0, #2
   10abe:	4b6a      	ldr	r3, [pc, #424]	; (10c68 <LORAWAN_RxDone+0x37c>)
   10ac0:	4798      	blx	r3
   10ac2:	2808      	cmp	r0, #8
   10ac4:	d140      	bne.n	10b48 <LORAWAN_RxDone+0x25c>
   10ac6:	0029      	movs	r1, r5
   10ac8:	0030      	movs	r0, r6
   10aca:	4b64      	ldr	r3, [pc, #400]	; (10c5c <LORAWAN_RxDone+0x370>)
   10acc:	4798      	blx	r3
   10ace:	ad0c      	add	r5, sp, #48	; 0x30
   10ad0:	0021      	movs	r1, r4
   10ad2:	4b62      	ldr	r3, [pc, #392]	; (10c5c <LORAWAN_RxDone+0x370>)
   10ad4:	2012      	movs	r0, #18
   10ad6:	4798      	blx	r3
   10ad8:	0031      	movs	r1, r6
   10ada:	002a      	movs	r2, r5
   10adc:	4e60      	ldr	r6, [pc, #384]	; (10c60 <LORAWAN_RxDone+0x374>)
   10ade:	2014      	movs	r0, #20
   10ae0:	47b0      	blx	r6
   10ae2:	4c52      	ldr	r4, [pc, #328]	; (10c2c <LORAWAN_RxDone+0x340>)
   10ae4:	782a      	ldrb	r2, [r5, #0]
   10ae6:	0023      	movs	r3, r4
   10ae8:	33f3      	adds	r3, #243	; 0xf3
   10aea:	701a      	strb	r2, [r3, #0]
   10aec:	0023      	movs	r3, r4
   10aee:	786a      	ldrb	r2, [r5, #1]
   10af0:	2522      	movs	r5, #34	; 0x22
   10af2:	33f4      	adds	r3, #244	; 0xf4
   10af4:	701a      	strb	r2, [r3, #0]
   10af6:	4b5d      	ldr	r3, [pc, #372]	; (10c6c <LORAWAN_RxDone+0x380>)
   10af8:	4798      	blx	r3
   10afa:	ab04      	add	r3, sp, #16
   10afc:	18ed      	adds	r5, r5, r3
   10afe:	231b      	movs	r3, #27
   10b00:	a904      	add	r1, sp, #16
   10b02:	185b      	adds	r3, r3, r1
   10b04:	0019      	movs	r1, r3
   10b06:	002a      	movs	r2, r5
   10b08:	201e      	movs	r0, #30
   10b0a:	47b0      	blx	r6
   10b0c:	0023      	movs	r3, r4
   10b0e:	33ff      	adds	r3, #255	; 0xff
   10b10:	7f5b      	ldrb	r3, [r3, #29]
   10b12:	079b      	lsls	r3, r3, #30
   10b14:	d508      	bpl.n	10b28 <LORAWAN_RxDone+0x23c>
   10b16:	ab04      	add	r3, sp, #16
   10b18:	7edb      	ldrb	r3, [r3, #27]
   10b1a:	a90f      	add	r1, sp, #60	; 0x3c
   10b1c:	708b      	strb	r3, [r1, #2]
   10b1e:	882b      	ldrh	r3, [r5, #0]
   10b20:	201e      	movs	r0, #30
   10b22:	800b      	strh	r3, [r1, #0]
   10b24:	4b4d      	ldr	r3, [pc, #308]	; (10c5c <LORAWAN_RxDone+0x370>)
   10b26:	4798      	blx	r3
   10b28:	231b      	movs	r3, #27
   10b2a:	aa04      	add	r2, sp, #16
   10b2c:	189b      	adds	r3, r3, r2
   10b2e:	7818      	ldrb	r0, [r3, #0]
   10b30:	2101      	movs	r1, #1
   10b32:	4b4f      	ldr	r3, [pc, #316]	; (10c70 <LORAWAN_RxDone+0x384>)
   10b34:	4798      	blx	r3
   10b36:	2204      	movs	r2, #4
   10b38:	3484      	adds	r4, #132	; 0x84
   10b3a:	7863      	ldrb	r3, [r4, #1]
   10b3c:	210b      	movs	r1, #11
   10b3e:	4313      	orrs	r3, r2
   10b40:	7063      	strb	r3, [r4, #1]
   10b42:	2001      	movs	r0, #1
   10b44:	4b42      	ldr	r3, [pc, #264]	; (10c50 <LORAWAN_RxDone+0x364>)
   10b46:	4798      	blx	r3
   10b48:	9b06      	ldr	r3, [sp, #24]
   10b4a:	3301      	adds	r3, #1
   10b4c:	b2db      	uxtb	r3, r3
   10b4e:	9306      	str	r3, [sp, #24]
   10b50:	9b07      	ldr	r3, [sp, #28]
   10b52:	3303      	adds	r3, #3
   10b54:	9307      	str	r3, [sp, #28]
   10b56:	9b06      	ldr	r3, [sp, #24]
   10b58:	2b05      	cmp	r3, #5
   10b5a:	d18e      	bne.n	10a7a <LORAWAN_RxDone+0x18e>
   10b5c:	2204      	movs	r2, #4
   10b5e:	4b33      	ldr	r3, [pc, #204]	; (10c2c <LORAWAN_RxDone+0x340>)
   10b60:	2001      	movs	r0, #1
   10b62:	3384      	adds	r3, #132	; 0x84
   10b64:	7859      	ldrb	r1, [r3, #1]
   10b66:	430a      	orrs	r2, r1
   10b68:	705a      	strb	r2, [r3, #1]
   10b6a:	210b      	movs	r1, #11
   10b6c:	4b38      	ldr	r3, [pc, #224]	; (10c50 <LORAWAN_RxDone+0x364>)
   10b6e:	4798      	blx	r3
   10b70:	4d40      	ldr	r5, [pc, #256]	; (10c74 <LORAWAN_RxDone+0x388>)
   10b72:	1c7e      	adds	r6, r7, #1
   10b74:	3704      	adds	r7, #4
   10b76:	0028      	movs	r0, r5
   10b78:	003a      	movs	r2, r7
   10b7a:	0031      	movs	r1, r6
   10b7c:	4b3e      	ldr	r3, [pc, #248]	; (10c78 <LORAWAN_RxDone+0x38c>)
   10b7e:	4798      	blx	r3
   10b80:	2302      	movs	r3, #2
   10b82:	4c2a      	ldr	r4, [pc, #168]	; (10c2c <LORAWAN_RxDone+0x340>)
   10b84:	0028      	movs	r0, r5
   10b86:	7563      	strb	r3, [r4, #21]
   10b88:	4a29      	ldr	r2, [pc, #164]	; (10c30 <LORAWAN_RxDone+0x344>)
   10b8a:	3b01      	subs	r3, #1
   10b8c:	2100      	movs	r1, #0
   10b8e:	4d3b      	ldr	r5, [pc, #236]	; (10c7c <LORAWAN_RxDone+0x390>)
   10b90:	47a8      	blx	r5
   10b92:	2800      	cmp	r0, #0
   10b94:	d003      	beq.n	10b9e <LORAWAN_RxDone+0x2b2>
   10b96:	4b2a      	ldr	r3, [pc, #168]	; (10c40 <LORAWAN_RxDone+0x354>)
   10b98:	4798      	blx	r3
   10b9a:	4b2a      	ldr	r3, [pc, #168]	; (10c44 <LORAWAN_RxDone+0x358>)
   10b9c:	4798      	blx	r3
   10b9e:	2105      	movs	r1, #5
   10ba0:	4b2b      	ldr	r3, [pc, #172]	; (10c50 <LORAWAN_RxDone+0x364>)
   10ba2:	2001      	movs	r0, #1
   10ba4:	4798      	blx	r3
   10ba6:	4d36      	ldr	r5, [pc, #216]	; (10c80 <LORAWAN_RxDone+0x394>)
   10ba8:	003a      	movs	r2, r7
   10baa:	0028      	movs	r0, r5
   10bac:	0031      	movs	r1, r6
   10bae:	4b32      	ldr	r3, [pc, #200]	; (10c78 <LORAWAN_RxDone+0x38c>)
   10bb0:	4798      	blx	r3
   10bb2:	2301      	movs	r3, #1
   10bb4:	0028      	movs	r0, r5
   10bb6:	7163      	strb	r3, [r4, #5]
   10bb8:	4a1d      	ldr	r2, [pc, #116]	; (10c30 <LORAWAN_RxDone+0x344>)
   10bba:	18db      	adds	r3, r3, r3
   10bbc:	2100      	movs	r1, #0
   10bbe:	4d2f      	ldr	r5, [pc, #188]	; (10c7c <LORAWAN_RxDone+0x390>)
   10bc0:	47a8      	blx	r5
   10bc2:	2800      	cmp	r0, #0
   10bc4:	d003      	beq.n	10bce <LORAWAN_RxDone+0x2e2>
   10bc6:	4b1e      	ldr	r3, [pc, #120]	; (10c40 <LORAWAN_RxDone+0x354>)
   10bc8:	4798      	blx	r3
   10bca:	4b1e      	ldr	r3, [pc, #120]	; (10c44 <LORAWAN_RxDone+0x358>)
   10bcc:	4798      	blx	r3
   10bce:	4b20      	ldr	r3, [pc, #128]	; (10c50 <LORAWAN_RxDone+0x364>)
   10bd0:	2104      	movs	r1, #4
   10bd2:	2001      	movs	r0, #1
   10bd4:	4798      	blx	r3
   10bd6:	4b2b      	ldr	r3, [pc, #172]	; (10c84 <LORAWAN_RxDone+0x398>)
   10bd8:	5ce3      	ldrb	r3, [r4, r3]
   10bda:	2b00      	cmp	r3, #0
   10bdc:	d017      	beq.n	10c0e <LORAWAN_RxDone+0x322>
   10bde:	492a      	ldr	r1, [pc, #168]	; (10c88 <LORAWAN_RxDone+0x39c>)
   10be0:	2002      	movs	r0, #2
   10be2:	4c2a      	ldr	r4, [pc, #168]	; (10c8c <LORAWAN_RxDone+0x3a0>)
   10be4:	47a0      	blx	r4
   10be6:	2800      	cmp	r0, #0
   10be8:	d008      	beq.n	10bfc <LORAWAN_RxDone+0x310>
   10bea:	4b15      	ldr	r3, [pc, #84]	; (10c40 <LORAWAN_RxDone+0x354>)
   10bec:	4798      	blx	r3
   10bee:	4b15      	ldr	r3, [pc, #84]	; (10c44 <LORAWAN_RxDone+0x358>)
   10bf0:	4798      	blx	r3
   10bf2:	2023      	movs	r0, #35	; 0x23
   10bf4:	e6dc      	b.n	109b0 <LORAWAN_RxDone+0xc4>
   10bf6:	4b1e      	ldr	r3, [pc, #120]	; (10c70 <LORAWAN_RxDone+0x384>)
   10bf8:	4798      	blx	r3
   10bfa:	e7a5      	b.n	10b48 <LORAWAN_RxDone+0x25c>
   10bfc:	4924      	ldr	r1, [pc, #144]	; (10c90 <LORAWAN_RxDone+0x3a4>)
   10bfe:	2001      	movs	r0, #1
   10c00:	47a0      	blx	r4
   10c02:	2800      	cmp	r0, #0
   10c04:	d1f1      	bne.n	10bea <LORAWAN_RxDone+0x2fe>
   10c06:	4b23      	ldr	r3, [pc, #140]	; (10c94 <LORAWAN_RxDone+0x3a8>)
   10c08:	4798      	blx	r3
   10c0a:	2008      	movs	r0, #8
   10c0c:	e6d0      	b.n	109b0 <LORAWAN_RxDone+0xc4>
   10c0e:	0020      	movs	r0, r4
   10c10:	0021      	movs	r1, r4
   10c12:	2210      	movs	r2, #16
   10c14:	3115      	adds	r1, #21
   10c16:	4d09      	ldr	r5, [pc, #36]	; (10c3c <LORAWAN_RxDone+0x350>)
   10c18:	3035      	adds	r0, #53	; 0x35
   10c1a:	47a8      	blx	r5
   10c1c:	0020      	movs	r0, r4
   10c1e:	1d61      	adds	r1, r4, #5
   10c20:	2210      	movs	r2, #16
   10c22:	3025      	adds	r0, #37	; 0x25
   10c24:	47a8      	blx	r5
   10c26:	e7ee      	b.n	10c06 <LORAWAN_RxDone+0x31a>
   10c28:	20002a28 	.word	0x20002a28
   10c2c:	200029a4 	.word	0x200029a4
   10c30:	200029e9 	.word	0x200029e9
   10c34:	20000f50 	.word	0x20000f50
   10c38:	0000bb11 	.word	0x0000bb11
   10c3c:	00017691 	.word	0x00017691
   10c40:	0000e6f1 	.word	0x0000e6f1
   10c44:	00010381 	.word	0x00010381
   10c48:	0000bad9 	.word	0x0000bad9
   10c4c:	0000ce4d 	.word	0x0000ce4d
   10c50:	0000be05 	.word	0x0000be05
   10c54:	0000dbbd 	.word	0x0000dbbd
   10c58:	0000e595 	.word	0x0000e595
   10c5c:	0000b7ed 	.word	0x0000b7ed
   10c60:	0000b6c5 	.word	0x0000b6c5
   10c64:	20002a8b 	.word	0x20002a8b
   10c68:	0000b6e1 	.word	0x0000b6e1
   10c6c:	0001044d 	.word	0x0001044d
   10c70:	0001089d 	.word	0x0001089d
   10c74:	200029b9 	.word	0x200029b9
   10c78:	0000dee9 	.word	0x0000dee9
   10c7c:	0000bb01 	.word	0x0000bb01
   10c80:	200029a9 	.word	0x200029a9
   10c84:	0000022d 	.word	0x0000022d
   10c88:	200029c9 	.word	0x200029c9
   10c8c:	0000bb0d 	.word	0x0000bb0d
   10c90:	200029d9 	.word	0x200029d9
   10c94:	0000de05 	.word	0x0000de05
   10c98:	3a60      	subs	r2, #96	; 0x60
   10c9a:	0010      	movs	r0, r2
   10c9c:	22bf      	movs	r2, #191	; 0xbf
   10c9e:	4010      	ands	r0, r2
   10ca0:	9006      	str	r0, [sp, #24]
   10ca2:	d000      	beq.n	10ca6 <LORAWAN_RxDone+0x3ba>
   10ca4:	e2b4      	b.n	11210 <LORAWAN_RxDone+0x924>
   10ca6:	2501      	movs	r5, #1
   10ca8:	422b      	tst	r3, r5
   10caa:	d100      	bne.n	10cae <LORAWAN_RxDone+0x3c2>
   10cac:	e2b0      	b.n	11210 <LORAWAN_RxDone+0x924>
   10cae:	7932      	ldrb	r2, [r6, #4]
   10cb0:	6833      	ldr	r3, [r6, #0]
   10cb2:	0612      	lsls	r2, r2, #24
   10cb4:	0a1b      	lsrs	r3, r3, #8
   10cb6:	431a      	orrs	r2, r3
   10cb8:	9208      	str	r2, [sp, #32]
   10cba:	466a      	mov	r2, sp
   10cbc:	0033      	movs	r3, r6
   10cbe:	7e12      	ldrb	r2, [r2, #24]
   10cc0:	33e0      	adds	r3, #224	; 0xe0
   10cc2:	701a      	strb	r2, [r3, #0]
   10cc4:	78ba      	ldrb	r2, [r7, #2]
   10cc6:	787b      	ldrb	r3, [r7, #1]
   10cc8:	0212      	lsls	r2, r2, #8
   10cca:	431a      	orrs	r2, r3
   10ccc:	78fb      	ldrb	r3, [r7, #3]
   10cce:	041b      	lsls	r3, r3, #16
   10cd0:	431a      	orrs	r2, r3
   10cd2:	793b      	ldrb	r3, [r7, #4]
   10cd4:	061b      	lsls	r3, r3, #24
   10cd6:	4313      	orrs	r3, r2
   10cd8:	9a08      	ldr	r2, [sp, #32]
   10cda:	429a      	cmp	r2, r3
   10cdc:	d100      	bne.n	10ce0 <LORAWAN_RxDone+0x3f4>
   10cde:	e2c8      	b.n	11272 <LORAWAN_RxDone+0x986>
   10ce0:	ab04      	add	r3, sp, #16
   10ce2:	3521      	adds	r5, #33	; 0x21
   10ce4:	18ed      	adds	r5, r5, r3
   10ce6:	9506      	str	r5, [sp, #24]
   10ce8:	002b      	movs	r3, r5
   10cea:	7a3a      	ldrb	r2, [r7, #8]
   10cec:	0949      	lsrs	r1, r1, #5
   10cee:	0038      	movs	r0, r7
   10cf0:	4ddb      	ldr	r5, [pc, #876]	; (11060 <LORAWAN_RxDone+0x774>)
   10cf2:	47a8      	blx	r5
   10cf4:	2808      	cmp	r0, #8
   10cf6:	d133      	bne.n	10d60 <LORAWAN_RxDone+0x474>
   10cf8:	9b06      	ldr	r3, [sp, #24]
   10cfa:	7819      	ldrb	r1, [r3, #0]
   10cfc:	233c      	movs	r3, #60	; 0x3c
   10cfe:	434b      	muls	r3, r1
   10d00:	001d      	movs	r5, r3
   10d02:	3535      	adds	r5, #53	; 0x35
   10d04:	35ff      	adds	r5, #255	; 0xff
   10d06:	19ad      	adds	r5, r5, r6
   10d08:	18f6      	adds	r6, r6, r3
   10d0a:	0033      	movs	r3, r6
   10d0c:	33fc      	adds	r3, #252	; 0xfc
   10d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10d12:	9206      	str	r2, [sp, #24]
   10d14:	9307      	str	r3, [sp, #28]
   10d16:	79fb      	ldrb	r3, [r7, #7]
   10d18:	79ba      	ldrb	r2, [r7, #6]
   10d1a:	021b      	lsls	r3, r3, #8
   10d1c:	4313      	orrs	r3, r2
   10d1e:	0032      	movs	r2, r6
   10d20:	3255      	adds	r2, #85	; 0x55
   10d22:	32ff      	adds	r2, #255	; 0xff
   10d24:	8810      	ldrh	r0, [r2, #0]
   10d26:	4298      	cmp	r0, r3
   10d28:	d908      	bls.n	10d3c <LORAWAN_RxDone+0x450>
   10d2a:	3657      	adds	r6, #87	; 0x57
   10d2c:	36ff      	adds	r6, #255	; 0xff
   10d2e:	8833      	ldrh	r3, [r6, #0]
   10d30:	3301      	adds	r3, #1
   10d32:	8033      	strh	r3, [r6, #0]
   10d34:	79fb      	ldrb	r3, [r7, #7]
   10d36:	79be      	ldrb	r6, [r7, #6]
   10d38:	021b      	lsls	r3, r3, #8
   10d3a:	4333      	orrs	r3, r6
   10d3c:	8013      	strh	r3, [r2, #0]
   10d3e:	233c      	movs	r3, #60	; 0x3c
   10d40:	434b      	muls	r3, r1
   10d42:	49c8      	ldr	r1, [pc, #800]	; (11064 <LORAWAN_RxDone+0x778>)
   10d44:	1f22      	subs	r2, r4, #4
   10d46:	18c9      	adds	r1, r1, r3
   10d48:	9b06      	ldr	r3, [sp, #24]
   10d4a:	31fc      	adds	r1, #252	; 0xfc
   10d4c:	9300      	str	r3, [sp, #0]
   10d4e:	b2d2      	uxtb	r2, r2
   10d50:	2349      	movs	r3, #73	; 0x49
   10d52:	6d89      	ldr	r1, [r1, #88]	; 0x58
   10d54:	2001      	movs	r0, #1
   10d56:	4ec4      	ldr	r6, [pc, #784]	; (11068 <LORAWAN_RxDone+0x77c>)
   10d58:	47b0      	blx	r6
   10d5a:	2301      	movs	r3, #1
   10d5c:	9306      	str	r3, [sp, #24]
   10d5e:	e29d      	b.n	1129c <LORAWAN_RxDone+0x9b0>
   10d60:	220e      	movs	r2, #14
   10d62:	4bc2      	ldr	r3, [pc, #776]	; (1106c <LORAWAN_RxDone+0x780>)
   10d64:	781b      	ldrb	r3, [r3, #0]
   10d66:	4013      	ands	r3, r2
   10d68:	2b0a      	cmp	r3, #10
   10d6a:	d008      	beq.n	10d7e <LORAWAN_RxDone+0x492>
   10d6c:	2b06      	cmp	r3, #6
   10d6e:	d001      	beq.n	10d74 <LORAWAN_RxDone+0x488>
   10d70:	200a      	movs	r0, #10
   10d72:	e61d      	b.n	109b0 <LORAWAN_RxDone+0xc4>
   10d74:	0033      	movs	r3, r6
   10d76:	33f9      	adds	r3, #249	; 0xf9
   10d78:	781b      	ldrb	r3, [r3, #0]
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d0f8      	beq.n	10d70 <LORAWAN_RxDone+0x484>
   10d7e:	2220      	movs	r2, #32
   10d80:	201e      	movs	r0, #30
   10d82:	3694      	adds	r6, #148	; 0x94
   10d84:	7833      	ldrb	r3, [r6, #0]
   10d86:	4393      	bics	r3, r2
   10d88:	7033      	strb	r3, [r6, #0]
   10d8a:	4bb9      	ldr	r3, [pc, #740]	; (11070 <LORAWAN_RxDone+0x784>)
   10d8c:	e5fe      	b.n	1098c <LORAWAN_RxDone+0xa0>
   10d8e:	0032      	movs	r2, r6
   10d90:	2102      	movs	r1, #2
   10d92:	e29b      	b.n	112cc <LORAWAN_RxDone+0x9e0>
   10d94:	9b07      	ldr	r3, [sp, #28]
   10d96:	328c      	adds	r2, #140	; 0x8c
   10d98:	6013      	str	r3, [r2, #0]
   10d9a:	e2d8      	b.n	1134e <LORAWAN_RxDone+0xa62>
   10d9c:	9b06      	ldr	r3, [sp, #24]
   10d9e:	4db1      	ldr	r5, [pc, #708]	; (11064 <LORAWAN_RxDone+0x778>)
   10da0:	2b00      	cmp	r3, #0
   10da2:	d000      	beq.n	10da6 <LORAWAN_RxDone+0x4ba>
   10da4:	e21c      	b.n	111e0 <LORAWAN_RxDone+0x8f4>
   10da6:	466a      	mov	r2, sp
   10da8:	002b      	movs	r3, r5
   10daa:	7e12      	ldrb	r2, [r2, #24]
   10dac:	33e3      	adds	r3, #227	; 0xe3
   10dae:	701a      	strb	r2, [r3, #0]
   10db0:	797b      	ldrb	r3, [r7, #5]
   10db2:	2b7f      	cmp	r3, #127	; 0x7f
   10db4:	d909      	bls.n	10dca <LORAWAN_RxDone+0x4de>
   10db6:	002a      	movs	r2, r5
   10db8:	2320      	movs	r3, #32
   10dba:	3284      	adds	r2, #132	; 0x84
   10dbc:	7811      	ldrb	r1, [r2, #0]
   10dbe:	2001      	movs	r0, #1
   10dc0:	430b      	orrs	r3, r1
   10dc2:	7013      	strb	r3, [r2, #0]
   10dc4:	210b      	movs	r1, #11
   10dc6:	4bab      	ldr	r3, [pc, #684]	; (11074 <LORAWAN_RxDone+0x788>)
   10dc8:	4798      	blx	r3
   10dca:	797b      	ldrb	r3, [r7, #5]
   10dcc:	06db      	lsls	r3, r3, #27
   10dce:	d505      	bpl.n	10ddc <LORAWAN_RxDone+0x4f0>
   10dd0:	002a      	movs	r2, r5
   10dd2:	2308      	movs	r3, #8
   10dd4:	3294      	adds	r2, #148	; 0x94
   10dd6:	7811      	ldrb	r1, [r2, #0]
   10dd8:	430b      	orrs	r3, r1
   10dda:	7013      	strb	r3, [r2, #0]
   10ddc:	797b      	ldrb	r3, [r7, #5]
   10dde:	065b      	lsls	r3, r3, #25
   10de0:	d505      	bpl.n	10dee <LORAWAN_RxDone+0x502>
   10de2:	002a      	movs	r2, r5
   10de4:	2310      	movs	r3, #16
   10de6:	3294      	adds	r2, #148	; 0x94
   10de8:	7811      	ldrb	r1, [r2, #0]
   10dea:	430b      	orrs	r3, r1
   10dec:	7013      	strb	r3, [r2, #0]
   10dee:	221f      	movs	r2, #31
   10df0:	783b      	ldrb	r3, [r7, #0]
   10df2:	4393      	bics	r3, r2
   10df4:	2ba0      	cmp	r3, #160	; 0xa0
   10df6:	d105      	bne.n	10e04 <LORAWAN_RxDone+0x518>
   10df8:	002a      	movs	r2, r5
   10dfa:	3294      	adds	r2, #148	; 0x94
   10dfc:	7811      	ldrb	r1, [r2, #0]
   10dfe:	3b9e      	subs	r3, #158	; 0x9e
   10e00:	430b      	orrs	r3, r1
   10e02:	7013      	strb	r3, [r2, #0]
   10e04:	7979      	ldrb	r1, [r7, #5]
   10e06:	070b      	lsls	r3, r1, #28
   10e08:	d100      	bne.n	10e0c <LORAWAN_RxDone+0x520>
   10e0a:	e0d0      	b.n	10fae <LORAWAN_RxDone+0x6c2>
   10e0c:	0709      	lsls	r1, r1, #28
   10e0e:	0f09      	lsrs	r1, r1, #28
   10e10:	187b      	adds	r3, r7, r1
   10e12:	7a1b      	ldrb	r3, [r3, #8]
   10e14:	2b00      	cmp	r3, #0
   10e16:	d100      	bne.n	10e1a <LORAWAN_RxDone+0x52e>
   10e18:	e0a5      	b.n	10f66 <LORAWAN_RxDone+0x67a>
   10e1a:	0038      	movs	r0, r7
   10e1c:	4b96      	ldr	r3, [pc, #600]	; (11078 <LORAWAN_RxDone+0x78c>)
   10e1e:	3008      	adds	r0, #8
   10e20:	4798      	blx	r3
   10e22:	2301      	movs	r3, #1
   10e24:	0006      	movs	r6, r0
   10e26:	9306      	str	r3, [sp, #24]
   10e28:	7978      	ldrb	r0, [r7, #5]
   10e2a:	0703      	lsls	r3, r0, #28
   10e2c:	0f1b      	lsrs	r3, r3, #28
   10e2e:	001a      	movs	r2, r3
   10e30:	320c      	adds	r2, #12
   10e32:	4294      	cmp	r4, r2
   10e34:	d100      	bne.n	10e38 <LORAWAN_RxDone+0x54c>
   10e36:	e0eb      	b.n	11010 <LORAWAN_RxDone+0x724>
   10e38:	1c72      	adds	r2, r6, #1
   10e3a:	1ae4      	subs	r4, r4, r3
   10e3c:	9209      	str	r2, [sp, #36]	; 0x24
   10e3e:	7832      	ldrb	r2, [r6, #0]
   10e40:	b2e4      	uxtb	r4, r4
   10e42:	9208      	str	r2, [sp, #32]
   10e44:	0022      	movs	r2, r4
   10e46:	9908      	ldr	r1, [sp, #32]
   10e48:	3a0c      	subs	r2, #12
   10e4a:	b2d2      	uxtb	r2, r2
   10e4c:	9207      	str	r2, [sp, #28]
   10e4e:	3319      	adds	r3, #25
   10e50:	4a84      	ldr	r2, [pc, #528]	; (11064 <LORAWAN_RxDone+0x778>)
   10e52:	2900      	cmp	r1, #0
   10e54:	d100      	bne.n	10e58 <LORAWAN_RxDone+0x56c>
   10e56:	e0ad      	b.n	10fb4 <LORAWAN_RxDone+0x6c8>
   10e58:	3c0d      	subs	r4, #13
   10e5a:	0010      	movs	r0, r2
   10e5c:	b2e1      	uxtb	r1, r4
   10e5e:	6814      	ldr	r4, [r2, #0]
   10e60:	7912      	ldrb	r2, [r2, #4]
   10e62:	0a24      	lsrs	r4, r4, #8
   10e64:	0612      	lsls	r2, r2, #24
   10e66:	4322      	orrs	r2, r4
   10e68:	9204      	str	r2, [sp, #16]
   10e6a:	4a84      	ldr	r2, [pc, #528]	; (1107c <LORAWAN_RxDone+0x790>)
   10e6c:	b29b      	uxth	r3, r3
   10e6e:	9203      	str	r2, [sp, #12]
   10e70:	2201      	movs	r2, #1
   10e72:	9302      	str	r3, [sp, #8]
   10e74:	4b82      	ldr	r3, [pc, #520]	; (11080 <LORAWAN_RxDone+0x794>)
   10e76:	308c      	adds	r0, #140	; 0x8c
   10e78:	9201      	str	r2, [sp, #4]
   10e7a:	9300      	str	r3, [sp, #0]
   10e7c:	6803      	ldr	r3, [r0, #0]
   10e7e:	4c81      	ldr	r4, [pc, #516]	; (11084 <LORAWAN_RxDone+0x798>)
   10e80:	18b0      	adds	r0, r6, r2
   10e82:	47a0      	blx	r4
   10e84:	2800      	cmp	r0, #0
   10e86:	d004      	beq.n	10e92 <LORAWAN_RxDone+0x5a6>
   10e88:	4b7f      	ldr	r3, [pc, #508]	; (11088 <LORAWAN_RxDone+0x79c>)
   10e8a:	4798      	blx	r3
   10e8c:	201f      	movs	r0, #31
   10e8e:	4b78      	ldr	r3, [pc, #480]	; (11070 <LORAWAN_RxDone+0x784>)
   10e90:	4798      	blx	r3
   10e92:	4c74      	ldr	r4, [pc, #464]	; (11064 <LORAWAN_RxDone+0x778>)
   10e94:	2300      	movs	r3, #0
   10e96:	0022      	movs	r2, r4
   10e98:	32ca      	adds	r2, #202	; 0xca
   10e9a:	8013      	strh	r3, [r2, #0]
   10e9c:	0022      	movs	r2, r4
   10e9e:	32f6      	adds	r2, #246	; 0xf6
   10ea0:	7013      	strb	r3, [r2, #0]
   10ea2:	0022      	movs	r2, r4
   10ea4:	2110      	movs	r1, #16
   10ea6:	3294      	adds	r2, #148	; 0x94
   10ea8:	7813      	ldrb	r3, [r2, #0]
   10eaa:	438b      	bics	r3, r1
   10eac:	7013      	strb	r3, [r2, #0]
   10eae:	0023      	movs	r3, r4
   10eb0:	2201      	movs	r2, #1
   10eb2:	3384      	adds	r3, #132	; 0x84
   10eb4:	7859      	ldrb	r1, [r3, #1]
   10eb6:	430a      	orrs	r2, r1
   10eb8:	705a      	strb	r2, [r3, #1]
   10eba:	220e      	movs	r2, #14
   10ebc:	781b      	ldrb	r3, [r3, #0]
   10ebe:	4013      	ands	r3, r2
   10ec0:	2b06      	cmp	r3, #6
   10ec2:	d104      	bne.n	10ece <LORAWAN_RxDone+0x5e2>
   10ec4:	0023      	movs	r3, r4
   10ec6:	33ee      	adds	r3, #238	; 0xee
   10ec8:	7818      	ldrb	r0, [r3, #0]
   10eca:	4b70      	ldr	r3, [pc, #448]	; (1108c <LORAWAN_RxDone+0x7a0>)
   10ecc:	4798      	blx	r3
   10ece:	0025      	movs	r5, r4
   10ed0:	2201      	movs	r2, #1
   10ed2:	3594      	adds	r5, #148	; 0x94
   10ed4:	782b      	ldrb	r3, [r5, #0]
   10ed6:	4213      	tst	r3, r2
   10ed8:	d100      	bne.n	10edc <LORAWAN_RxDone+0x5f0>
   10eda:	e103      	b.n	110e4 <LORAWAN_RxDone+0x7f8>
   10edc:	797b      	ldrb	r3, [r7, #5]
   10ede:	321f      	adds	r2, #31
   10ee0:	4213      	tst	r3, r2
   10ee2:	d100      	bne.n	10ee6 <LORAWAN_RxDone+0x5fa>
   10ee4:	e0e4      	b.n	110b0 <LORAWAN_RxDone+0x7c4>
   10ee6:	4b6a      	ldr	r3, [pc, #424]	; (11090 <LORAWAN_RxDone+0x7a4>)
   10ee8:	4798      	blx	r3
   10eea:	0023      	movs	r3, r4
   10eec:	2101      	movs	r1, #1
   10eee:	3384      	adds	r3, #132	; 0x84
   10ef0:	785a      	ldrb	r2, [r3, #1]
   10ef2:	438a      	bics	r2, r1
   10ef4:	705a      	strb	r2, [r3, #1]
   10ef6:	9a08      	ldr	r2, [sp, #32]
   10ef8:	2a00      	cmp	r2, #0
   10efa:	d100      	bne.n	10efe <LORAWAN_RxDone+0x612>
   10efc:	e090      	b.n	11020 <LORAWAN_RxDone+0x734>
   10efe:	9a07      	ldr	r2, [sp, #28]
   10f00:	0031      	movs	r1, r6
   10f02:	0038      	movs	r0, r7
   10f04:	4b63      	ldr	r3, [pc, #396]	; (11094 <LORAWAN_RxDone+0x7a8>)
   10f06:	4798      	blx	r3
   10f08:	4b58      	ldr	r3, [pc, #352]	; (1106c <LORAWAN_RxDone+0x780>)
   10f0a:	4d56      	ldr	r5, [pc, #344]	; (11064 <LORAWAN_RxDone+0x778>)
   10f0c:	781b      	ldrb	r3, [r3, #0]
   10f0e:	06db      	lsls	r3, r3, #27
   10f10:	d400      	bmi.n	10f14 <LORAWAN_RxDone+0x628>
   10f12:	e15c      	b.n	111ce <LORAWAN_RxDone+0x8e2>
   10f14:	2220      	movs	r2, #32
   10f16:	4b60      	ldr	r3, [pc, #384]	; (11098 <LORAWAN_RxDone+0x7ac>)
   10f18:	781b      	ldrb	r3, [r3, #0]
   10f1a:	401a      	ands	r2, r3
   10f1c:	9206      	str	r2, [sp, #24]
   10f1e:	d000      	beq.n	10f22 <LORAWAN_RxDone+0x636>
   10f20:	e155      	b.n	111ce <LORAWAN_RxDone+0x8e2>
   10f22:	320a      	adds	r2, #10
   10f24:	4213      	tst	r3, r2
   10f26:	d100      	bne.n	10f2a <LORAWAN_RxDone+0x63e>
   10f28:	e151      	b.n	111ce <LORAWAN_RxDone+0x8e2>
   10f2a:	002b      	movs	r3, r5
   10f2c:	33f5      	adds	r3, #245	; 0xf5
   10f2e:	781b      	ldrb	r3, [r3, #0]
   10f30:	a90f      	add	r1, sp, #60	; 0x3c
   10f32:	704b      	strb	r3, [r1, #1]
   10f34:	002e      	movs	r6, r5
   10f36:	2301      	movs	r3, #1
   10f38:	36e7      	adds	r6, #231	; 0xe7
   10f3a:	700b      	strb	r3, [r1, #0]
   10f3c:	7833      	ldrb	r3, [r6, #0]
   10f3e:	aa0e      	add	r2, sp, #56	; 0x38
   10f40:	202f      	movs	r0, #47	; 0x2f
   10f42:	4f56      	ldr	r7, [pc, #344]	; (1109c <LORAWAN_RxDone+0x7b0>)
   10f44:	708b      	strb	r3, [r1, #2]
   10f46:	47b8      	blx	r7
   10f48:	9007      	str	r0, [sp, #28]
   10f4a:	2808      	cmp	r0, #8
   10f4c:	d000      	beq.n	10f50 <LORAWAN_RxDone+0x664>
   10f4e:	e0f7      	b.n	11140 <LORAWAN_RxDone+0x854>
   10f50:	4b53      	ldr	r3, [pc, #332]	; (110a0 <LORAWAN_RxDone+0x7b4>)
   10f52:	9806      	ldr	r0, [sp, #24]
   10f54:	4798      	blx	r3
   10f56:	4b50      	ldr	r3, [pc, #320]	; (11098 <LORAWAN_RxDone+0x7ac>)
   10f58:	9a07      	ldr	r2, [sp, #28]
   10f5a:	781b      	ldrb	r3, [r3, #0]
   10f5c:	4393      	bics	r3, r2
   10f5e:	4a4e      	ldr	r2, [pc, #312]	; (11098 <LORAWAN_RxDone+0x7ac>)
   10f60:	7013      	strb	r3, [r2, #0]
   10f62:	2001      	movs	r0, #1
   10f64:	e524      	b.n	109b0 <LORAWAN_RxDone+0xc4>
   10f66:	002b      	movs	r3, r5
   10f68:	220e      	movs	r2, #14
   10f6a:	3384      	adds	r3, #132	; 0x84
   10f6c:	781b      	ldrb	r3, [r3, #0]
   10f6e:	4013      	ands	r3, r2
   10f70:	2b06      	cmp	r3, #6
   10f72:	d101      	bne.n	10f78 <LORAWAN_RxDone+0x68c>
   10f74:	4b4b      	ldr	r3, [pc, #300]	; (110a4 <LORAWAN_RxDone+0x7b8>)
   10f76:	4798      	blx	r3
   10f78:	494b      	ldr	r1, [pc, #300]	; (110a8 <LORAWAN_RxDone+0x7bc>)
   10f7a:	784a      	ldrb	r2, [r1, #1]
   10f7c:	780b      	ldrb	r3, [r1, #0]
   10f7e:	0212      	lsls	r2, r2, #8
   10f80:	431a      	orrs	r2, r3
   10f82:	788b      	ldrb	r3, [r1, #2]
   10f84:	041b      	lsls	r3, r3, #16
   10f86:	431a      	orrs	r2, r3
   10f88:	78cb      	ldrb	r3, [r1, #3]
   10f8a:	061b      	lsls	r3, r3, #24
   10f8c:	4313      	orrs	r3, r2
   10f8e:	d008      	beq.n	10fa2 <LORAWAN_RxDone+0x6b6>
   10f90:	002a      	movs	r2, r5
   10f92:	2120      	movs	r1, #32
   10f94:	3294      	adds	r2, #148	; 0x94
   10f96:	7813      	ldrb	r3, [r2, #0]
   10f98:	201e      	movs	r0, #30
   10f9a:	438b      	bics	r3, r1
   10f9c:	7013      	strb	r3, [r2, #0]
   10f9e:	4b34      	ldr	r3, [pc, #208]	; (11070 <LORAWAN_RxDone+0x784>)
   10fa0:	4798      	blx	r3
   10fa2:	2300      	movs	r3, #0
   10fa4:	35e0      	adds	r5, #224	; 0xe0
   10fa6:	702b      	strb	r3, [r5, #0]
   10fa8:	4b37      	ldr	r3, [pc, #220]	; (11088 <LORAWAN_RxDone+0x79c>)
   10faa:	4798      	blx	r3
   10fac:	e7d9      	b.n	10f62 <LORAWAN_RxDone+0x676>
   10fae:	003e      	movs	r6, r7
   10fb0:	3608      	adds	r6, #8
   10fb2:	e739      	b.n	10e28 <LORAWAN_RxDone+0x53c>
   10fb4:	9907      	ldr	r1, [sp, #28]
   10fb6:	2900      	cmp	r1, #0
   10fb8:	d02e      	beq.n	11018 <LORAWAN_RxDone+0x72c>
   10fba:	0701      	lsls	r1, r0, #28
   10fbc:	d1d3      	bne.n	10f66 <LORAWAN_RxDone+0x67a>
   10fbe:	b29b      	uxth	r3, r3
   10fc0:	6810      	ldr	r0, [r2, #0]
   10fc2:	0011      	movs	r1, r2
   10fc4:	7912      	ldrb	r2, [r2, #4]
   10fc6:	9302      	str	r3, [sp, #8]
   10fc8:	2302      	movs	r3, #2
   10fca:	0a00      	lsrs	r0, r0, #8
   10fcc:	0612      	lsls	r2, r2, #24
   10fce:	4302      	orrs	r2, r0
   10fd0:	9204      	str	r2, [sp, #16]
   10fd2:	9301      	str	r3, [sp, #4]
   10fd4:	4a29      	ldr	r2, [pc, #164]	; (1107c <LORAWAN_RxDone+0x790>)
   10fd6:	4b35      	ldr	r3, [pc, #212]	; (110ac <LORAWAN_RxDone+0x7c0>)
   10fd8:	3c0d      	subs	r4, #13
   10fda:	318c      	adds	r1, #140	; 0x8c
   10fdc:	9203      	str	r2, [sp, #12]
   10fde:	b2e4      	uxtb	r4, r4
   10fe0:	9300      	str	r3, [sp, #0]
   10fe2:	680b      	ldr	r3, [r1, #0]
   10fe4:	2201      	movs	r2, #1
   10fe6:	0021      	movs	r1, r4
   10fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fea:	4d26      	ldr	r5, [pc, #152]	; (11084 <LORAWAN_RxDone+0x798>)
   10fec:	47a8      	blx	r5
   10fee:	2800      	cmp	r0, #0
   10ff0:	d004      	beq.n	10ffc <LORAWAN_RxDone+0x710>
   10ff2:	4b25      	ldr	r3, [pc, #148]	; (11088 <LORAWAN_RxDone+0x79c>)
   10ff4:	4798      	blx	r3
   10ff6:	201f      	movs	r0, #31
   10ff8:	4b1d      	ldr	r3, [pc, #116]	; (11070 <LORAWAN_RxDone+0x784>)
   10ffa:	4798      	blx	r3
   10ffc:	4b1e      	ldr	r3, [pc, #120]	; (11078 <LORAWAN_RxDone+0x78c>)
   10ffe:	0021      	movs	r1, r4
   11000:	9809      	ldr	r0, [sp, #36]	; 0x24
   11002:	4798      	blx	r3
   11004:	2300      	movs	r3, #0
   11006:	9307      	str	r3, [sp, #28]
   11008:	3301      	adds	r3, #1
   1100a:	9306      	str	r3, [sp, #24]
   1100c:	2600      	movs	r6, #0
   1100e:	e740      	b.n	10e92 <LORAWAN_RxDone+0x5a6>
   11010:	2600      	movs	r6, #0
   11012:	9608      	str	r6, [sp, #32]
   11014:	9607      	str	r6, [sp, #28]
   11016:	e73c      	b.n	10e92 <LORAWAN_RxDone+0x5a6>
   11018:	9b07      	ldr	r3, [sp, #28]
   1101a:	9308      	str	r3, [sp, #32]
   1101c:	001e      	movs	r6, r3
   1101e:	e738      	b.n	10e92 <LORAWAN_RxDone+0x5a6>
   11020:	2120      	movs	r1, #32
   11022:	782a      	ldrb	r2, [r5, #0]
   11024:	438a      	bics	r2, r1
   11026:	702a      	strb	r2, [r5, #0]
   11028:	0022      	movs	r2, r4
   1102a:	32fd      	adds	r2, #253	; 0xfd
   1102c:	7812      	ldrb	r2, [r2, #0]
   1102e:	2a01      	cmp	r2, #1
   11030:	d10e      	bne.n	11050 <LORAWAN_RxDone+0x764>
   11032:	781a      	ldrb	r2, [r3, #0]
   11034:	3912      	subs	r1, #18
   11036:	438a      	bics	r2, r1
   11038:	701a      	strb	r2, [r3, #0]
   1103a:	2388      	movs	r3, #136	; 0x88
   1103c:	4a09      	ldr	r2, [pc, #36]	; (11064 <LORAWAN_RxDone+0x778>)
   1103e:	009b      	lsls	r3, r3, #2
   11040:	5cd3      	ldrb	r3, [r2, r3]
   11042:	2b00      	cmp	r3, #0
   11044:	d000      	beq.n	11048 <LORAWAN_RxDone+0x75c>
   11046:	e75f      	b.n	10f08 <LORAWAN_RxDone+0x61c>
   11048:	2008      	movs	r0, #8
   1104a:	4b09      	ldr	r3, [pc, #36]	; (11070 <LORAWAN_RxDone+0x784>)
   1104c:	4798      	blx	r3
   1104e:	e75b      	b.n	10f08 <LORAWAN_RxDone+0x61c>
   11050:	2a04      	cmp	r2, #4
   11052:	d1f2      	bne.n	1103a <LORAWAN_RxDone+0x74e>
   11054:	0023      	movs	r3, r4
   11056:	33f1      	adds	r3, #241	; 0xf1
   11058:	7818      	ldrb	r0, [r3, #0]
   1105a:	4b0c      	ldr	r3, [pc, #48]	; (1108c <LORAWAN_RxDone+0x7a0>)
   1105c:	4798      	blx	r3
   1105e:	e7ec      	b.n	1103a <LORAWAN_RxDone+0x74e>
   11060:	000123dd 	.word	0x000123dd
   11064:	200029a4 	.word	0x200029a4
   11068:	0000df25 	.word	0x0000df25
   1106c:	20002a28 	.word	0x20002a28
   11070:	0000f23d 	.word	0x0000f23d
   11074:	0000be05 	.word	0x0000be05
   11078:	00010609 	.word	0x00010609
   1107c:	20002d08 	.word	0x20002d08
   11080:	200029d9 	.word	0x200029d9
   11084:	0000f17d 	.word	0x0000f17d
   11088:	00010381 	.word	0x00010381
   1108c:	0000ce4d 	.word	0x0000ce4d
   11090:	0000e69d 	.word	0x0000e69d
   11094:	0000f2ed 	.word	0x0000f2ed
   11098:	20002a38 	.word	0x20002a38
   1109c:	0000b6c5 	.word	0x0000b6c5
   110a0:	0000e265 	.word	0x0000e265
   110a4:	0000dfbd 	.word	0x0000dfbd
   110a8:	20002d00 	.word	0x20002d00
   110ac:	200029c9 	.word	0x200029c9
   110b0:	9b06      	ldr	r3, [sp, #24]
   110b2:	2b00      	cmp	r3, #0
   110b4:	d013      	beq.n	110de <LORAWAN_RxDone+0x7f2>
   110b6:	0023      	movs	r3, r4
   110b8:	33fd      	adds	r3, #253	; 0xfd
   110ba:	781e      	ldrb	r6, [r3, #0]
   110bc:	2e01      	cmp	r6, #1
   110be:	d10e      	bne.n	110de <LORAWAN_RxDone+0x7f2>
   110c0:	4ba4      	ldr	r3, [pc, #656]	; (11354 <LORAWAN_RxDone+0xa68>)
   110c2:	4798      	blx	r3
   110c4:	0022      	movs	r2, r4
   110c6:	3284      	adds	r2, #132	; 0x84
   110c8:	7853      	ldrb	r3, [r2, #1]
   110ca:	43b3      	bics	r3, r6
   110cc:	7053      	strb	r3, [r2, #1]
   110ce:	2220      	movs	r2, #32
   110d0:	782b      	ldrb	r3, [r5, #0]
   110d2:	4393      	bics	r3, r2
   110d4:	702b      	strb	r3, [r5, #0]
   110d6:	2388      	movs	r3, #136	; 0x88
   110d8:	009b      	lsls	r3, r3, #2
   110da:	5ce3      	ldrb	r3, [r4, r3]
   110dc:	e7b1      	b.n	11042 <LORAWAN_RxDone+0x756>
   110de:	4b9e      	ldr	r3, [pc, #632]	; (11358 <LORAWAN_RxDone+0xa6c>)
   110e0:	4798      	blx	r3
   110e2:	e711      	b.n	10f08 <LORAWAN_RxDone+0x61c>
   110e4:	9a08      	ldr	r2, [sp, #32]
   110e6:	2a00      	cmp	r2, #0
   110e8:	d00b      	beq.n	11102 <LORAWAN_RxDone+0x816>
   110ea:	9a07      	ldr	r2, [sp, #28]
   110ec:	0031      	movs	r1, r6
   110ee:	0038      	movs	r0, r7
   110f0:	4b9a      	ldr	r3, [pc, #616]	; (1135c <LORAWAN_RxDone+0xa70>)
   110f2:	4798      	blx	r3
   110f4:	0022      	movs	r2, r4
   110f6:	2101      	movs	r1, #1
   110f8:	3284      	adds	r2, #132	; 0x84
   110fa:	7853      	ldrb	r3, [r2, #1]
   110fc:	438b      	bics	r3, r1
   110fe:	7053      	strb	r3, [r2, #1]
   11100:	e702      	b.n	10f08 <LORAWAN_RxDone+0x61c>
   11102:	2220      	movs	r2, #32
   11104:	4393      	bics	r3, r2
   11106:	702b      	strb	r3, [r5, #0]
   11108:	0023      	movs	r3, r4
   1110a:	33fd      	adds	r3, #253	; 0xfd
   1110c:	781b      	ldrb	r3, [r3, #0]
   1110e:	2b01      	cmp	r3, #1
   11110:	d10e      	bne.n	11130 <LORAWAN_RxDone+0x844>
   11112:	0022      	movs	r2, r4
   11114:	210e      	movs	r1, #14
   11116:	3284      	adds	r2, #132	; 0x84
   11118:	7813      	ldrb	r3, [r2, #0]
   1111a:	438b      	bics	r3, r1
   1111c:	7013      	strb	r3, [r2, #0]
   1111e:	2388      	movs	r3, #136	; 0x88
   11120:	009b      	lsls	r3, r3, #2
   11122:	5ce3      	ldrb	r3, [r4, r3]
   11124:	2b00      	cmp	r3, #0
   11126:	d1e5      	bne.n	110f4 <LORAWAN_RxDone+0x808>
   11128:	2008      	movs	r0, #8
   1112a:	4b8d      	ldr	r3, [pc, #564]	; (11360 <LORAWAN_RxDone+0xa74>)
   1112c:	4798      	blx	r3
   1112e:	e7e1      	b.n	110f4 <LORAWAN_RxDone+0x808>
   11130:	2b04      	cmp	r3, #4
   11132:	d1f4      	bne.n	1111e <LORAWAN_RxDone+0x832>
   11134:	0023      	movs	r3, r4
   11136:	33f1      	adds	r3, #241	; 0xf1
   11138:	7818      	ldrb	r0, [r3, #0]
   1113a:	4b8a      	ldr	r3, [pc, #552]	; (11364 <LORAWAN_RxDone+0xa78>)
   1113c:	4798      	blx	r3
   1113e:	e7ee      	b.n	1111e <LORAWAN_RxDone+0x832>
   11140:	35ff      	adds	r5, #255	; 0xff
   11142:	7f6b      	ldrb	r3, [r5, #29]
   11144:	079a      	lsls	r2, r3, #30
   11146:	d520      	bpl.n	1118a <LORAWAN_RxDone+0x89e>
   11148:	aa10      	add	r2, sp, #64	; 0x40
   1114a:	0031      	movs	r1, r6
   1114c:	2026      	movs	r0, #38	; 0x26
   1114e:	47b8      	blx	r7
   11150:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11152:	1c5a      	adds	r2, r3, #1
   11154:	d001      	beq.n	1115a <LORAWAN_RxDone+0x86e>
   11156:	3314      	adds	r3, #20
   11158:	9310      	str	r3, [sp, #64]	; 0x40
   1115a:	0021      	movs	r1, r4
   1115c:	220e      	movs	r2, #14
   1115e:	3184      	adds	r1, #132	; 0x84
   11160:	780b      	ldrb	r3, [r1, #0]
   11162:	4393      	bics	r3, r2
   11164:	001a      	movs	r2, r3
   11166:	230c      	movs	r3, #12
   11168:	4313      	orrs	r3, r2
   1116a:	700b      	strb	r3, [r1, #0]
   1116c:	4b7e      	ldr	r3, [pc, #504]	; (11368 <LORAWAN_RxDone+0xa7c>)
   1116e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11170:	5ce3      	ldrb	r3, [r4, r3]
   11172:	21fa      	movs	r1, #250	; 0xfa
   11174:	1ad3      	subs	r3, r2, r3
   11176:	2200      	movs	r2, #0
   11178:	0089      	lsls	r1, r1, #2
   1117a:	4359      	muls	r1, r3
   1117c:	34ef      	adds	r4, #239	; 0xef
   1117e:	4b7b      	ldr	r3, [pc, #492]	; (1136c <LORAWAN_RxDone+0xa80>)
   11180:	7820      	ldrb	r0, [r4, #0]
   11182:	9200      	str	r2, [sp, #0]
   11184:	4c7a      	ldr	r4, [pc, #488]	; (11370 <LORAWAN_RxDone+0xa84>)
   11186:	47a0      	blx	r4
   11188:	e6eb      	b.n	10f62 <LORAWAN_RxDone+0x676>
   1118a:	075b      	lsls	r3, r3, #29
   1118c:	d400      	bmi.n	11190 <LORAWAN_RxDone+0x8a4>
   1118e:	e6e8      	b.n	10f62 <LORAWAN_RxDone+0x676>
   11190:	aa10      	add	r2, sp, #64	; 0x40
   11192:	0031      	movs	r1, r6
   11194:	2032      	movs	r0, #50	; 0x32
   11196:	47b8      	blx	r7
   11198:	220e      	movs	r2, #14
   1119a:	4b76      	ldr	r3, [pc, #472]	; (11374 <LORAWAN_RxDone+0xa88>)
   1119c:	781b      	ldrb	r3, [r3, #0]
   1119e:	4393      	bics	r3, r2
   111a0:	001a      	movs	r2, r3
   111a2:	230c      	movs	r3, #12
   111a4:	4313      	orrs	r3, r2
   111a6:	4a73      	ldr	r2, [pc, #460]	; (11374 <LORAWAN_RxDone+0xa88>)
   111a8:	7013      	strb	r3, [r2, #0]
   111aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   111ac:	1c5a      	adds	r2, r3, #1
   111ae:	d001      	beq.n	111b4 <LORAWAN_RxDone+0x8c8>
   111b0:	3301      	adds	r3, #1
   111b2:	9310      	str	r3, [sp, #64]	; 0x40
   111b4:	4b6c      	ldr	r3, [pc, #432]	; (11368 <LORAWAN_RxDone+0xa7c>)
   111b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   111b8:	5ce3      	ldrb	r3, [r4, r3]
   111ba:	21fa      	movs	r1, #250	; 0xfa
   111bc:	1ad3      	subs	r3, r2, r3
   111be:	2200      	movs	r2, #0
   111c0:	0089      	lsls	r1, r1, #2
   111c2:	34f2      	adds	r4, #242	; 0xf2
   111c4:	4359      	muls	r1, r3
   111c6:	7820      	ldrb	r0, [r4, #0]
   111c8:	4b6b      	ldr	r3, [pc, #428]	; (11378 <LORAWAN_RxDone+0xa8c>)
   111ca:	9200      	str	r2, [sp, #0]
   111cc:	e7da      	b.n	11184 <LORAWAN_RxDone+0x898>
   111ce:	35fd      	adds	r5, #253	; 0xfd
   111d0:	782b      	ldrb	r3, [r5, #0]
   111d2:	2b04      	cmp	r3, #4
   111d4:	d000      	beq.n	111d8 <LORAWAN_RxDone+0x8ec>
   111d6:	e6c4      	b.n	10f62 <LORAWAN_RxDone+0x676>
   111d8:	0038      	movs	r0, r7
   111da:	4b68      	ldr	r3, [pc, #416]	; (1137c <LORAWAN_RxDone+0xa90>)
   111dc:	4798      	blx	r3
   111de:	e6c0      	b.n	10f62 <LORAWAN_RxDone+0x676>
   111e0:	2390      	movs	r3, #144	; 0x90
   111e2:	009b      	lsls	r3, r3, #2
   111e4:	5ceb      	ldrb	r3, [r5, r3]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d009      	beq.n	111fe <LORAWAN_RxDone+0x912>
   111ea:	2322      	movs	r3, #34	; 0x22
   111ec:	aa04      	add	r2, sp, #16
   111ee:	189b      	adds	r3, r3, r2
   111f0:	0021      	movs	r1, r4
   111f2:	781b      	ldrb	r3, [r3, #0]
   111f4:	003a      	movs	r2, r7
   111f6:	0038      	movs	r0, r7
   111f8:	4c61      	ldr	r4, [pc, #388]	; (11380 <LORAWAN_RxDone+0xa94>)
   111fa:	47a0      	blx	r4
   111fc:	e6b1      	b.n	10f62 <LORAWAN_RxDone+0x676>
   111fe:	2220      	movs	r2, #32
   11200:	3594      	adds	r5, #148	; 0x94
   11202:	782b      	ldrb	r3, [r5, #0]
   11204:	201e      	movs	r0, #30
   11206:	4393      	bics	r3, r2
   11208:	702b      	strb	r3, [r5, #0]
   1120a:	4b55      	ldr	r3, [pc, #340]	; (11360 <LORAWAN_RxDone+0xa74>)
   1120c:	4798      	blx	r3
   1120e:	e6cb      	b.n	10fa8 <LORAWAN_RxDone+0x6bc>
   11210:	220e      	movs	r2, #14
   11212:	4013      	ands	r3, r2
   11214:	2b0a      	cmp	r3, #10
   11216:	d008      	beq.n	1122a <LORAWAN_RxDone+0x93e>
   11218:	2b06      	cmp	r3, #6
   1121a:	d000      	beq.n	1121e <LORAWAN_RxDone+0x932>
   1121c:	e5a8      	b.n	10d70 <LORAWAN_RxDone+0x484>
   1121e:	0033      	movs	r3, r6
   11220:	33f9      	adds	r3, #249	; 0xf9
   11222:	781b      	ldrb	r3, [r3, #0]
   11224:	2b00      	cmp	r3, #0
   11226:	d100      	bne.n	1122a <LORAWAN_RxDone+0x93e>
   11228:	e5a2      	b.n	10d70 <LORAWAN_RxDone+0x484>
   1122a:	2220      	movs	r2, #32
   1122c:	3694      	adds	r6, #148	; 0x94
   1122e:	7833      	ldrb	r3, [r6, #0]
   11230:	2019      	movs	r0, #25
   11232:	4393      	bics	r3, r2
   11234:	7033      	strb	r3, [r6, #0]
   11236:	e5a8      	b.n	10d8a <LORAWAN_RxDone+0x49e>
   11238:	4952      	ldr	r1, [pc, #328]	; (11384 <LORAWAN_RxDone+0xa98>)
   1123a:	784a      	ldrb	r2, [r1, #1]
   1123c:	780b      	ldrb	r3, [r1, #0]
   1123e:	0212      	lsls	r2, r2, #8
   11240:	431a      	orrs	r2, r3
   11242:	788b      	ldrb	r3, [r1, #2]
   11244:	041b      	lsls	r3, r3, #16
   11246:	431a      	orrs	r2, r3
   11248:	78cb      	ldrb	r3, [r1, #3]
   1124a:	061b      	lsls	r3, r3, #24
   1124c:	4313      	orrs	r3, r2
   1124e:	d100      	bne.n	11252 <LORAWAN_RxDone+0x966>
   11250:	e687      	b.n	10f62 <LORAWAN_RxDone+0x676>
   11252:	4b4d      	ldr	r3, [pc, #308]	; (11388 <LORAWAN_RxDone+0xa9c>)
   11254:	4d4d      	ldr	r5, [pc, #308]	; (1138c <LORAWAN_RxDone+0xaa0>)
   11256:	781b      	ldrb	r3, [r3, #0]
   11258:	2b10      	cmp	r3, #16
   1125a:	d105      	bne.n	11268 <LORAWAN_RxDone+0x97c>
   1125c:	0001      	movs	r1, r0
   1125e:	0022      	movs	r2, r4
   11260:	2000      	movs	r0, #0
   11262:	3b0c      	subs	r3, #12
   11264:	47a8      	blx	r5
   11266:	e67c      	b.n	10f62 <LORAWAN_RxDone+0x676>
   11268:	2300      	movs	r3, #0
   1126a:	0001      	movs	r1, r0
   1126c:	0022      	movs	r2, r4
   1126e:	0018      	movs	r0, r3
   11270:	e7f8      	b.n	11264 <LORAWAN_RxDone+0x978>
   11272:	368c      	adds	r6, #140	; 0x8c
   11274:	6833      	ldr	r3, [r6, #0]
   11276:	9906      	ldr	r1, [sp, #24]
   11278:	9307      	str	r3, [sp, #28]
   1127a:	0038      	movs	r0, r7
   1127c:	4b44      	ldr	r3, [pc, #272]	; (11390 <LORAWAN_RxDone+0xaa4>)
   1127e:	4798      	blx	r3
   11280:	2808      	cmp	r0, #8
   11282:	d001      	beq.n	11288 <LORAWAN_RxDone+0x99c>
   11284:	f7ff fb94 	bl	109b0 <LORAWAN_RxDone+0xc4>
   11288:	9b08      	ldr	r3, [sp, #32]
   1128a:	1f22      	subs	r2, r4, #4
   1128c:	9300      	str	r3, [sp, #0]
   1128e:	0028      	movs	r0, r5
   11290:	b2d2      	uxtb	r2, r2
   11292:	4d40      	ldr	r5, [pc, #256]	; (11394 <LORAWAN_RxDone+0xaa8>)
   11294:	2349      	movs	r3, #73	; 0x49
   11296:	6831      	ldr	r1, [r6, #0]
   11298:	47a8      	blx	r5
   1129a:	4d3f      	ldr	r5, [pc, #252]	; (11398 <LORAWAN_RxDone+0xaac>)
   1129c:	4e3f      	ldr	r6, [pc, #252]	; (1139c <LORAWAN_RxDone+0xab0>)
   1129e:	2210      	movs	r2, #16
   112a0:	0031      	movs	r1, r6
   112a2:	4b3f      	ldr	r3, [pc, #252]	; (113a0 <LORAWAN_RxDone+0xab4>)
   112a4:	483f      	ldr	r0, [pc, #252]	; (113a4 <LORAWAN_RxDone+0xab8>)
   112a6:	4798      	blx	r3
   112a8:	1f23      	subs	r3, r4, #4
   112aa:	001a      	movs	r2, r3
   112ac:	9308      	str	r3, [sp, #32]
   112ae:	0039      	movs	r1, r7
   112b0:	4b3b      	ldr	r3, [pc, #236]	; (113a0 <LORAWAN_RxDone+0xab4>)
   112b2:	483d      	ldr	r0, [pc, #244]	; (113a8 <LORAWAN_RxDone+0xabc>)
   112b4:	4798      	blx	r3
   112b6:	0023      	movs	r3, r4
   112b8:	9a06      	ldr	r2, [sp, #24]
   112ba:	330c      	adds	r3, #12
   112bc:	b29b      	uxth	r3, r3
   112be:	9300      	str	r3, [sp, #0]
   112c0:	4b38      	ldr	r3, [pc, #224]	; (113a4 <LORAWAN_RxDone+0xab8>)
   112c2:	2a00      	cmp	r2, #0
   112c4:	d100      	bne.n	112c8 <LORAWAN_RxDone+0x9dc>
   112c6:	e562      	b.n	10d8e <LORAWAN_RxDone+0x4a2>
   112c8:	0032      	movs	r2, r6
   112ca:	2104      	movs	r1, #4
   112cc:	0028      	movs	r0, r5
   112ce:	4d37      	ldr	r5, [pc, #220]	; (113ac <LORAWAN_RxDone+0xac0>)
   112d0:	47a8      	blx	r5
   112d2:	2204      	movs	r2, #4
   112d4:	4931      	ldr	r1, [pc, #196]	; (1139c <LORAWAN_RxDone+0xab0>)
   112d6:	4d32      	ldr	r5, [pc, #200]	; (113a0 <LORAWAN_RxDone+0xab4>)
   112d8:	a80d      	add	r0, sp, #52	; 0x34
   112da:	47a8      	blx	r5
   112dc:	1f23      	subs	r3, r4, #4
   112de:	18f9      	adds	r1, r7, r3
   112e0:	2204      	movs	r2, #4
   112e2:	a810      	add	r0, sp, #64	; 0x40
   112e4:	47a8      	blx	r5
   112e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   112ea:	4293      	cmp	r3, r2
   112ec:	d100      	bne.n	112f0 <LORAWAN_RxDone+0xa04>
   112ee:	e555      	b.n	10d9c <LORAWAN_RxDone+0x4b0>
   112f0:	9b06      	ldr	r3, [sp, #24]
   112f2:	2b00      	cmp	r3, #0
   112f4:	d108      	bne.n	11308 <LORAWAN_RxDone+0xa1c>
   112f6:	220e      	movs	r2, #14
   112f8:	4b2d      	ldr	r3, [pc, #180]	; (113b0 <LORAWAN_RxDone+0xac4>)
   112fa:	3384      	adds	r3, #132	; 0x84
   112fc:	781b      	ldrb	r3, [r3, #0]
   112fe:	4013      	ands	r3, r2
   11300:	2b06      	cmp	r3, #6
   11302:	d101      	bne.n	11308 <LORAWAN_RxDone+0xa1c>
   11304:	4b2b      	ldr	r3, [pc, #172]	; (113b4 <LORAWAN_RxDone+0xac8>)
   11306:	4798      	blx	r3
   11308:	491e      	ldr	r1, [pc, #120]	; (11384 <LORAWAN_RxDone+0xa98>)
   1130a:	784a      	ldrb	r2, [r1, #1]
   1130c:	780b      	ldrb	r3, [r1, #0]
   1130e:	0212      	lsls	r2, r2, #8
   11310:	431a      	orrs	r2, r3
   11312:	788b      	ldrb	r3, [r1, #2]
   11314:	041b      	lsls	r3, r3, #16
   11316:	431a      	orrs	r2, r3
   11318:	78cb      	ldrb	r3, [r1, #3]
   1131a:	061b      	lsls	r3, r3, #24
   1131c:	4313      	orrs	r3, r2
   1131e:	d101      	bne.n	11324 <LORAWAN_RxDone+0xa38>
   11320:	f7ff fb35 	bl	1098e <LORAWAN_RxDone+0xa2>
   11324:	4a22      	ldr	r2, [pc, #136]	; (113b0 <LORAWAN_RxDone+0xac4>)
   11326:	2020      	movs	r0, #32
   11328:	0011      	movs	r1, r2
   1132a:	3194      	adds	r1, #148	; 0x94
   1132c:	780b      	ldrb	r3, [r1, #0]
   1132e:	4383      	bics	r3, r0
   11330:	700b      	strb	r3, [r1, #0]
   11332:	9b06      	ldr	r3, [sp, #24]
   11334:	2b00      	cmp	r3, #0
   11336:	d100      	bne.n	1133a <LORAWAN_RxDone+0xa4e>
   11338:	e52c      	b.n	10d94 <LORAWAN_RxDone+0x4a8>
   1133a:	2322      	movs	r3, #34	; 0x22
   1133c:	a904      	add	r1, sp, #16
   1133e:	185b      	adds	r3, r3, r1
   11340:	7819      	ldrb	r1, [r3, #0]
   11342:	233c      	movs	r3, #60	; 0x3c
   11344:	434b      	muls	r3, r1
   11346:	18d3      	adds	r3, r2, r3
   11348:	9a07      	ldr	r2, [sp, #28]
   1134a:	33fc      	adds	r3, #252	; 0xfc
   1134c:	659a      	str	r2, [r3, #88]	; 0x58
   1134e:	2018      	movs	r0, #24
   11350:	e51b      	b.n	10d8a <LORAWAN_RxDone+0x49e>
   11352:	46c0      	nop			; (mov r8, r8)
   11354:	0000e69d 	.word	0x0000e69d
   11358:	0000e601 	.word	0x0000e601
   1135c:	0000f2ed 	.word	0x0000f2ed
   11360:	0000f23d 	.word	0x0000f23d
   11364:	0000ce4d 	.word	0x0000ce4d
   11368:	0000022b 	.word	0x0000022b
   1136c:	0000e35d 	.word	0x0000e35d
   11370:	0000cb35 	.word	0x0000cb35
   11374:	20002a28 	.word	0x20002a28
   11378:	0000ef25 	.word	0x0000ef25
   1137c:	00012111 	.word	0x00012111
   11380:	00012451 	.word	0x00012451
   11384:	20002d00 	.word	0x20002d00
   11388:	20002bec 	.word	0x20002bec
   1138c:	0000f2a1 	.word	0x0000f2a1
   11390:	000103bd 	.word	0x000103bd
   11394:	0000df25 	.word	0x0000df25
   11398:	200029c9 	.word	0x200029c9
   1139c:	20000f50 	.word	0x20000f50
   113a0:	00017691 	.word	0x00017691
   113a4:	20002d08 	.word	0x20002d08
   113a8:	20002d18 	.word	0x20002d18
   113ac:	0000bb11 	.word	0x0000bb11
   113b0:	200029a4 	.word	0x200029a4
   113b4:	0000dfbd 	.word	0x0000dfbd

000113b8 <LorawanSetEdClass>:
   113b8:	2388      	movs	r3, #136	; 0x88
   113ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   113bc:	4d1a      	ldr	r5, [pc, #104]	; (11428 <LorawanSetEdClass+0x70>)
   113be:	009b      	lsls	r3, r3, #2
   113c0:	5ceb      	ldrb	r3, [r5, r3]
   113c2:	0004      	movs	r4, r0
   113c4:	2011      	movs	r0, #17
   113c6:	2b00      	cmp	r3, #0
   113c8:	d013      	beq.n	113f2 <LorawanSetEdClass+0x3a>
   113ca:	002b      	movs	r3, r5
   113cc:	33fe      	adds	r3, #254	; 0xfe
   113ce:	781b      	ldrb	r3, [r3, #0]
   113d0:	3807      	subs	r0, #7
   113d2:	4223      	tst	r3, r4
   113d4:	d00d      	beq.n	113f2 <LorawanSetEdClass+0x3a>
   113d6:	002b      	movs	r3, r5
   113d8:	33fd      	adds	r3, #253	; 0xfd
   113da:	7819      	ldrb	r1, [r3, #0]
   113dc:	428c      	cmp	r4, r1
   113de:	d007      	beq.n	113f0 <LorawanSetEdClass+0x38>
   113e0:	2901      	cmp	r1, #1
   113e2:	d107      	bne.n	113f4 <LorawanSetEdClass+0x3c>
   113e4:	2c04      	cmp	r4, #4
   113e6:	d104      	bne.n	113f2 <LorawanSetEdClass+0x3a>
   113e8:	701c      	strb	r4, [r3, #0]
   113ea:	2000      	movs	r0, #0
   113ec:	4b0f      	ldr	r3, [pc, #60]	; (1142c <LorawanSetEdClass+0x74>)
   113ee:	4798      	blx	r3
   113f0:	2008      	movs	r0, #8
   113f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   113f4:	2904      	cmp	r1, #4
   113f6:	d1fc      	bne.n	113f2 <LorawanSetEdClass+0x3a>
   113f8:	2c01      	cmp	r4, #1
   113fa:	d1fa      	bne.n	113f2 <LorawanSetEdClass+0x3a>
   113fc:	701c      	strb	r4, [r3, #0]
   113fe:	0021      	movs	r1, r4
   11400:	4b0a      	ldr	r3, [pc, #40]	; (1142c <LorawanSetEdClass+0x74>)
   11402:	2000      	movs	r0, #0
   11404:	4798      	blx	r3
   11406:	002a      	movs	r2, r5
   11408:	210e      	movs	r1, #14
   1140a:	3284      	adds	r2, #132	; 0x84
   1140c:	7813      	ldrb	r3, [r2, #0]
   1140e:	a801      	add	r0, sp, #4
   11410:	438b      	bics	r3, r1
   11412:	7013      	strb	r3, [r2, #0]
   11414:	4b06      	ldr	r3, [pc, #24]	; (11430 <LorawanSetEdClass+0x78>)
   11416:	7004      	strb	r4, [r0, #0]
   11418:	4798      	blx	r3
   1141a:	2394      	movs	r3, #148	; 0x94
   1141c:	005b      	lsls	r3, r3, #1
   1141e:	5ce8      	ldrb	r0, [r5, r3]
   11420:	4b04      	ldr	r3, [pc, #16]	; (11434 <LorawanSetEdClass+0x7c>)
   11422:	4798      	blx	r3
   11424:	e7e4      	b.n	113f0 <LorawanSetEdClass+0x38>
   11426:	46c0      	nop			; (mov r8, r8)
   11428:	200029a4 	.word	0x200029a4
   1142c:	0000be05 	.word	0x0000be05
   11430:	00013d35 	.word	0x00013d35
   11434:	0000ce4d 	.word	0x0000ce4d

00011438 <LORAWAN_SetAttr>:
   11438:	2388      	movs	r3, #136	; 0x88
   1143a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1143c:	4cbb      	ldr	r4, [pc, #748]	; (1172c <LORAWAN_SetAttr+0x2f4>)
   1143e:	009b      	lsls	r3, r3, #2
   11440:	5ce3      	ldrb	r3, [r4, r3]
   11442:	000d      	movs	r5, r1
   11444:	2611      	movs	r6, #17
   11446:	2b00      	cmp	r3, #0
   11448:	d100      	bne.n	1144c <LORAWAN_SetAttr+0x14>
   1144a:	e11f      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1144c:	2846      	cmp	r0, #70	; 0x46
   1144e:	d878      	bhi.n	11542 <LORAWAN_SetAttr+0x10a>
   11450:	f003 f850 	bl	144f4 <__gnu_thumb1_case_uhi>
   11454:	00930047 	.word	0x00930047
   11458:	00fc00b2 	.word	0x00fc00b2
   1145c:	00e600c5 	.word	0x00e600c5
   11460:	0134011e 	.word	0x0134011e
   11464:	01660154 	.word	0x01660154
   11468:	01830178 	.word	0x01830178
   1146c:	01a6018d 	.word	0x01a6018d
   11470:	007701ab 	.word	0x007701ab
   11474:	01b501b0 	.word	0x01b501b0
   11478:	01bf01ba 	.word	0x01bf01ba
   1147c:	01e601c4 	.word	0x01e601c4
   11480:	01cb01eb 	.word	0x01cb01eb
   11484:	01fc01c8 	.word	0x01fc01c8
   11488:	01e101f8 	.word	0x01e101f8
   1148c:	01d701dd 	.word	0x01d701dd
   11490:	00770077 	.word	0x00770077
   11494:	0077019e 	.word	0x0077019e
   11498:	00770077 	.word	0x00770077
   1149c:	00770077 	.word	0x00770077
   114a0:	02000077 	.word	0x02000077
   114a4:	02030066 	.word	0x02030066
   114a8:	020d0211 	.word	0x020d0211
   114ac:	00770208 	.word	0x00770208
   114b0:	02190215 	.word	0x02190215
   114b4:	0221021d 	.word	0x0221021d
   114b8:	02290225 	.word	0x02290225
   114bc:	00770249 	.word	0x00770249
   114c0:	00770077 	.word	0x00770077
   114c4:	00770077 	.word	0x00770077
   114c8:	00770077 	.word	0x00770077
   114cc:	00770077 	.word	0x00770077
   114d0:	02600077 	.word	0x02600077
   114d4:	026e026a 	.word	0x026e026a
   114d8:	00770077 	.word	0x00770077
   114dc:	02730077 	.word	0x02730077
   114e0:	0271      	.short	0x0271
   114e2:	260a      	movs	r6, #10
   114e4:	2900      	cmp	r1, #0
   114e6:	d100      	bne.n	114ea <LORAWAN_SetAttr+0xb2>
   114e8:	e0d0      	b.n	1168c <LORAWAN_SetAttr+0x254>
   114ea:	0020      	movs	r0, r4
   114ec:	2208      	movs	r2, #8
   114ee:	4b90      	ldr	r3, [pc, #576]	; (11730 <LORAWAN_SetAttr+0x2f8>)
   114f0:	305d      	adds	r0, #93	; 0x5d
   114f2:	4798      	blx	r3
   114f4:	2108      	movs	r1, #8
   114f6:	4e8f      	ldr	r6, [pc, #572]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   114f8:	2001      	movs	r0, #1
   114fa:	47b0      	blx	r6
   114fc:	0022      	movs	r2, r4
   114fe:	2501      	movs	r5, #1
   11500:	32de      	adds	r2, #222	; 0xde
   11502:	7813      	ldrb	r3, [r2, #0]
   11504:	2109      	movs	r1, #9
   11506:	432b      	orrs	r3, r5
   11508:	3484      	adds	r4, #132	; 0x84
   1150a:	0028      	movs	r0, r5
   1150c:	7013      	strb	r3, [r2, #0]
   1150e:	47b0      	blx	r6
   11510:	7823      	ldrb	r3, [r4, #0]
   11512:	210b      	movs	r1, #11
   11514:	43ab      	bics	r3, r5
   11516:	0028      	movs	r0, r5
   11518:	7023      	strb	r3, [r4, #0]
   1151a:	47b0      	blx	r6
   1151c:	2608      	movs	r6, #8
   1151e:	e0b5      	b.n	1168c <LORAWAN_SetAttr+0x254>
   11520:	0023      	movs	r3, r4
   11522:	33ff      	adds	r3, #255	; 0xff
   11524:	7f5b      	ldrb	r3, [r3, #29]
   11526:	260a      	movs	r6, #10
   11528:	075b      	lsls	r3, r3, #29
   1152a:	d400      	bmi.n	1152e <LORAWAN_SetAttr+0xf6>
   1152c:	e0ae      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1152e:	79ca      	ldrb	r2, [r1, #7]
   11530:	4b81      	ldr	r3, [pc, #516]	; (11738 <LORAWAN_SetAttr+0x300>)
   11532:	2a00      	cmp	r2, #0
   11534:	d10e      	bne.n	11554 <LORAWAN_SetAttr+0x11c>
   11536:	4669      	mov	r1, sp
   11538:	201d      	movs	r0, #29
   1153a:	714a      	strb	r2, [r1, #5]
   1153c:	4798      	blx	r3
   1153e:	2800      	cmp	r0, #0
   11540:	d001      	beq.n	11546 <LORAWAN_SetAttr+0x10e>
   11542:	260a      	movs	r6, #10
   11544:	e0a2      	b.n	1168c <LORAWAN_SetAttr+0x254>
   11546:	2109      	movs	r1, #9
   11548:	34fe      	adds	r4, #254	; 0xfe
   1154a:	8460      	strh	r0, [r4, #34]	; 0x22
   1154c:	8420      	strh	r0, [r4, #32]
   1154e:	4b79      	ldr	r3, [pc, #484]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   11550:	4798      	blx	r3
   11552:	e7e3      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   11554:	2002      	movs	r0, #2
   11556:	5e2a      	ldrsh	r2, [r5, r0]
   11558:	88ae      	ldrh	r6, [r5, #4]
   1155a:	79a8      	ldrb	r0, [r5, #6]
   1155c:	466d      	mov	r5, sp
   1155e:	806a      	strh	r2, [r5, #2]
   11560:	2201      	movs	r2, #1
   11562:	8809      	ldrh	r1, [r1, #0]
   11564:	7128      	strb	r0, [r5, #4]
   11566:	8029      	strh	r1, [r5, #0]
   11568:	201d      	movs	r0, #29
   1156a:	4669      	mov	r1, sp
   1156c:	716a      	strb	r2, [r5, #5]
   1156e:	4798      	blx	r3
   11570:	2800      	cmp	r0, #0
   11572:	d1e6      	bne.n	11542 <LORAWAN_SetAttr+0x10a>
   11574:	34fe      	adds	r4, #254	; 0xfe
   11576:	8466      	strh	r6, [r4, #34]	; 0x22
   11578:	e7d0      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   1157a:	260a      	movs	r6, #10
   1157c:	2900      	cmp	r1, #0
   1157e:	d100      	bne.n	11582 <LORAWAN_SetAttr+0x14a>
   11580:	e084      	b.n	1168c <LORAWAN_SetAttr+0x254>
   11582:	0020      	movs	r0, r4
   11584:	2208      	movs	r2, #8
   11586:	4b6a      	ldr	r3, [pc, #424]	; (11730 <LORAWAN_SetAttr+0x2f8>)
   11588:	3055      	adds	r0, #85	; 0x55
   1158a:	4798      	blx	r3
   1158c:	2107      	movs	r1, #7
   1158e:	4d69      	ldr	r5, [pc, #420]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   11590:	2001      	movs	r0, #1
   11592:	47a8      	blx	r5
   11594:	0022      	movs	r2, r4
   11596:	2302      	movs	r3, #2
   11598:	32de      	adds	r2, #222	; 0xde
   1159a:	7811      	ldrb	r1, [r2, #0]
   1159c:	2001      	movs	r0, #1
   1159e:	430b      	orrs	r3, r1
   115a0:	2109      	movs	r1, #9
   115a2:	7013      	strb	r3, [r2, #0]
   115a4:	47a8      	blx	r5
   115a6:	2001      	movs	r0, #1
   115a8:	3484      	adds	r4, #132	; 0x84
   115aa:	7823      	ldrb	r3, [r4, #0]
   115ac:	210b      	movs	r1, #11
   115ae:	4383      	bics	r3, r0
   115b0:	7023      	strb	r3, [r4, #0]
   115b2:	47a8      	blx	r5
   115b4:	3e02      	subs	r6, #2
   115b6:	e069      	b.n	1168c <LORAWAN_SetAttr+0x254>
   115b8:	680b      	ldr	r3, [r1, #0]
   115ba:	2001      	movs	r0, #1
   115bc:	0a19      	lsrs	r1, r3, #8
   115be:	70a1      	strb	r1, [r4, #2]
   115c0:	0c19      	lsrs	r1, r3, #16
   115c2:	7063      	strb	r3, [r4, #1]
   115c4:	70e1      	strb	r1, [r4, #3]
   115c6:	0e1b      	lsrs	r3, r3, #24
   115c8:	2103      	movs	r1, #3
   115ca:	4d5a      	ldr	r5, [pc, #360]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   115cc:	7123      	strb	r3, [r4, #4]
   115ce:	47a8      	blx	r5
   115d0:	0022      	movs	r2, r4
   115d2:	2304      	movs	r3, #4
   115d4:	32de      	adds	r2, #222	; 0xde
   115d6:	7811      	ldrb	r1, [r2, #0]
   115d8:	430b      	orrs	r3, r1
   115da:	7013      	strb	r3, [r2, #0]
   115dc:	e015      	b.n	1160a <LORAWAN_SetAttr+0x1d2>
   115de:	260a      	movs	r6, #10
   115e0:	2900      	cmp	r1, #0
   115e2:	d053      	beq.n	1168c <LORAWAN_SetAttr+0x254>
   115e4:	3606      	adds	r6, #6
   115e6:	0032      	movs	r2, r6
   115e8:	4f51      	ldr	r7, [pc, #324]	; (11730 <LORAWAN_SetAttr+0x2f8>)
   115ea:	1d60      	adds	r0, r4, #5
   115ec:	47b8      	blx	r7
   115ee:	0020      	movs	r0, r4
   115f0:	0032      	movs	r2, r6
   115f2:	0029      	movs	r1, r5
   115f4:	3025      	adds	r0, #37	; 0x25
   115f6:	47b8      	blx	r7
   115f8:	2104      	movs	r1, #4
   115fa:	2001      	movs	r0, #1
   115fc:	4d4d      	ldr	r5, [pc, #308]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   115fe:	47a8      	blx	r5
   11600:	0023      	movs	r3, r4
   11602:	33de      	adds	r3, #222	; 0xde
   11604:	781a      	ldrb	r2, [r3, #0]
   11606:	4316      	orrs	r6, r2
   11608:	701e      	strb	r6, [r3, #0]
   1160a:	2109      	movs	r1, #9
   1160c:	2001      	movs	r0, #1
   1160e:	47a8      	blx	r5
   11610:	2001      	movs	r0, #1
   11612:	210b      	movs	r1, #11
   11614:	3484      	adds	r4, #132	; 0x84
   11616:	7823      	ldrb	r3, [r4, #0]
   11618:	4383      	bics	r3, r0
   1161a:	7023      	strb	r3, [r4, #0]
   1161c:	47a8      	blx	r5
   1161e:	e77d      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   11620:	260a      	movs	r6, #10
   11622:	2900      	cmp	r1, #0
   11624:	d032      	beq.n	1168c <LORAWAN_SetAttr+0x254>
   11626:	0020      	movs	r0, r4
   11628:	2210      	movs	r2, #16
   1162a:	4e41      	ldr	r6, [pc, #260]	; (11730 <LORAWAN_SetAttr+0x2f8>)
   1162c:	3015      	adds	r0, #21
   1162e:	47b0      	blx	r6
   11630:	0020      	movs	r0, r4
   11632:	2210      	movs	r2, #16
   11634:	0029      	movs	r1, r5
   11636:	3035      	adds	r0, #53	; 0x35
   11638:	47b0      	blx	r6
   1163a:	2105      	movs	r1, #5
   1163c:	2001      	movs	r0, #1
   1163e:	4d3d      	ldr	r5, [pc, #244]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   11640:	47a8      	blx	r5
   11642:	0022      	movs	r2, r4
   11644:	32de      	adds	r2, #222	; 0xde
   11646:	7811      	ldrb	r1, [r2, #0]
   11648:	2320      	movs	r3, #32
   1164a:	e7c5      	b.n	115d8 <LORAWAN_SetAttr+0x1a0>
   1164c:	260a      	movs	r6, #10
   1164e:	2900      	cmp	r1, #0
   11650:	d01c      	beq.n	1168c <LORAWAN_SetAttr+0x254>
   11652:	4b3a      	ldr	r3, [pc, #232]	; (1173c <LORAWAN_SetAttr+0x304>)
   11654:	3e02      	subs	r6, #2
   11656:	5ce3      	ldrb	r3, [r4, r3]
   11658:	2b00      	cmp	r3, #0
   1165a:	d117      	bne.n	1168c <LORAWAN_SetAttr+0x254>
   1165c:	0020      	movs	r0, r4
   1165e:	2210      	movs	r2, #16
   11660:	4b33      	ldr	r3, [pc, #204]	; (11730 <LORAWAN_SetAttr+0x2f8>)
   11662:	3045      	adds	r0, #69	; 0x45
   11664:	4798      	blx	r3
   11666:	2106      	movs	r1, #6
   11668:	4d32      	ldr	r5, [pc, #200]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   1166a:	2001      	movs	r0, #1
   1166c:	47a8      	blx	r5
   1166e:	0022      	movs	r2, r4
   11670:	32de      	adds	r2, #222	; 0xde
   11672:	7813      	ldrb	r3, [r2, #0]
   11674:	2109      	movs	r1, #9
   11676:	4333      	orrs	r3, r6
   11678:	2001      	movs	r0, #1
   1167a:	7013      	strb	r3, [r2, #0]
   1167c:	47a8      	blx	r5
   1167e:	2001      	movs	r0, #1
   11680:	3484      	adds	r4, #132	; 0x84
   11682:	7823      	ldrb	r3, [r4, #0]
   11684:	210b      	movs	r1, #11
   11686:	4383      	bics	r3, r0
   11688:	7023      	strb	r3, [r4, #0]
   1168a:	47a8      	blx	r5
   1168c:	0030      	movs	r0, r6
   1168e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11690:	780b      	ldrb	r3, [r1, #0]
   11692:	2001      	movs	r0, #1
   11694:	0021      	movs	r1, r4
   11696:	2520      	movs	r5, #32
   11698:	3184      	adds	r1, #132	; 0x84
   1169a:	4003      	ands	r3, r0
   1169c:	015a      	lsls	r2, r3, #5
   1169e:	780b      	ldrb	r3, [r1, #0]
   116a0:	43ab      	bics	r3, r5
   116a2:	4313      	orrs	r3, r2
   116a4:	700b      	strb	r3, [r1, #0]
   116a6:	0023      	movs	r3, r4
   116a8:	2200      	movs	r2, #0
   116aa:	33ca      	adds	r3, #202	; 0xca
   116ac:	3494      	adds	r4, #148	; 0x94
   116ae:	801a      	strh	r2, [r3, #0]
   116b0:	7823      	ldrb	r3, [r4, #0]
   116b2:	3210      	adds	r2, #16
   116b4:	4393      	bics	r3, r2
   116b6:	7023      	strb	r3, [r4, #0]
   116b8:	210b      	movs	r1, #11
   116ba:	e748      	b.n	1154e <LORAWAN_SetAttr+0x116>
   116bc:	466a      	mov	r2, sp
   116be:	780b      	ldrb	r3, [r1, #0]
   116c0:	7013      	strb	r3, [r2, #0]
   116c2:	0022      	movs	r2, r4
   116c4:	32f3      	adds	r2, #243	; 0xf3
   116c6:	7812      	ldrb	r2, [r2, #0]
   116c8:	429a      	cmp	r2, r3
   116ca:	d900      	bls.n	116ce <LORAWAN_SetAttr+0x296>
   116cc:	e739      	b.n	11542 <LORAWAN_SetAttr+0x10a>
   116ce:	0022      	movs	r2, r4
   116d0:	32f4      	adds	r2, #244	; 0xf4
   116d2:	7812      	ldrb	r2, [r2, #0]
   116d4:	429a      	cmp	r2, r3
   116d6:	d200      	bcs.n	116da <LORAWAN_SetAttr+0x2a2>
   116d8:	e733      	b.n	11542 <LORAWAN_SetAttr+0x10a>
   116da:	4669      	mov	r1, sp
   116dc:	2010      	movs	r0, #16
   116de:	4b18      	ldr	r3, [pc, #96]	; (11740 <LORAWAN_SetAttr+0x308>)
   116e0:	4798      	blx	r3
   116e2:	0006      	movs	r6, r0
   116e4:	2808      	cmp	r0, #8
   116e6:	d000      	beq.n	116ea <LORAWAN_SetAttr+0x2b2>
   116e8:	e72b      	b.n	11542 <LORAWAN_SetAttr+0x10a>
   116ea:	466b      	mov	r3, sp
   116ec:	210c      	movs	r1, #12
   116ee:	2001      	movs	r0, #1
   116f0:	781b      	ldrb	r3, [r3, #0]
   116f2:	34e7      	adds	r4, #231	; 0xe7
   116f4:	7023      	strb	r3, [r4, #0]
   116f6:	4b0f      	ldr	r3, [pc, #60]	; (11734 <LORAWAN_SetAttr+0x2fc>)
   116f8:	4798      	blx	r3
   116fa:	e7c7      	b.n	1168c <LORAWAN_SetAttr+0x254>
   116fc:	466a      	mov	r2, sp
   116fe:	780b      	ldrb	r3, [r1, #0]
   11700:	201d      	movs	r0, #29
   11702:	7013      	strb	r3, [r2, #0]
   11704:	4669      	mov	r1, sp
   11706:	4b0e      	ldr	r3, [pc, #56]	; (11740 <LORAWAN_SetAttr+0x308>)
   11708:	4798      	blx	r3
   1170a:	0006      	movs	r6, r0
   1170c:	2808      	cmp	r0, #8
   1170e:	d000      	beq.n	11712 <LORAWAN_SetAttr+0x2da>
   11710:	e717      	b.n	11542 <LORAWAN_SetAttr+0x10a>
   11712:	466b      	mov	r3, sp
   11714:	781b      	ldrb	r3, [r3, #0]
   11716:	34e9      	adds	r4, #233	; 0xe9
   11718:	7023      	strb	r3, [r4, #0]
   1171a:	210a      	movs	r1, #10
   1171c:	2000      	movs	r0, #0
   1171e:	e7ea      	b.n	116f6 <LORAWAN_SetAttr+0x2be>
   11720:	780b      	ldrb	r3, [r1, #0]
   11722:	2103      	movs	r1, #3
   11724:	34ff      	adds	r4, #255	; 0xff
   11726:	7063      	strb	r3, [r4, #1]
   11728:	2000      	movs	r0, #0
   1172a:	e710      	b.n	1154e <LORAWAN_SetAttr+0x116>
   1172c:	200029a4 	.word	0x200029a4
   11730:	00017691 	.word	0x00017691
   11734:	0000be05 	.word	0x0000be05
   11738:	00012b31 	.word	0x00012b31
   1173c:	0000022d 	.word	0x0000022d
   11740:	0000b6e1 	.word	0x0000b6e1
   11744:	680b      	ldr	r3, [r1, #0]
   11746:	260a      	movs	r6, #10
   11748:	1c5a      	adds	r2, r3, #1
   1174a:	d09f      	beq.n	1168c <LORAWAN_SetAttr+0x254>
   1174c:	2115      	movs	r1, #21
   1174e:	2000      	movs	r0, #0
   11750:	3488      	adds	r4, #136	; 0x88
   11752:	6023      	str	r3, [r4, #0]
   11754:	4b7f      	ldr	r3, [pc, #508]	; (11954 <LORAWAN_SetAttr+0x51c>)
   11756:	4798      	blx	r3
   11758:	e72c      	b.n	115b4 <LORAWAN_SetAttr+0x17c>
   1175a:	680b      	ldr	r3, [r1, #0]
   1175c:	260a      	movs	r6, #10
   1175e:	1c5a      	adds	r2, r3, #1
   11760:	d100      	bne.n	11764 <LORAWAN_SetAttr+0x32c>
   11762:	e793      	b.n	1168c <LORAWAN_SetAttr+0x254>
   11764:	0031      	movs	r1, r6
   11766:	348c      	adds	r4, #140	; 0x8c
   11768:	6023      	str	r3, [r4, #0]
   1176a:	2001      	movs	r0, #1
   1176c:	e7f2      	b.n	11754 <LORAWAN_SetAttr+0x31c>
   1176e:	0026      	movs	r6, r4
   11770:	880b      	ldrh	r3, [r1, #0]
   11772:	36d0      	adds	r6, #208	; 0xd0
   11774:	210c      	movs	r1, #12
   11776:	2000      	movs	r0, #0
   11778:	4d76      	ldr	r5, [pc, #472]	; (11954 <LORAWAN_SetAttr+0x51c>)
   1177a:	8033      	strh	r3, [r6, #0]
   1177c:	47a8      	blx	r5
   1177e:	22fa      	movs	r2, #250	; 0xfa
   11780:	8833      	ldrh	r3, [r6, #0]
   11782:	0092      	lsls	r2, r2, #2
   11784:	189b      	adds	r3, r3, r2
   11786:	34d2      	adds	r4, #210	; 0xd2
   11788:	8023      	strh	r3, [r4, #0]
   1178a:	210d      	movs	r1, #13
   1178c:	2000      	movs	r0, #0
   1178e:	e745      	b.n	1161c <LORAWAN_SetAttr+0x1e4>
   11790:	780b      	ldrb	r3, [r1, #0]
   11792:	260a      	movs	r6, #10
   11794:	2b0f      	cmp	r3, #15
   11796:	d900      	bls.n	1179a <LORAWAN_SetAttr+0x362>
   11798:	e778      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1179a:	3498      	adds	r4, #152	; 0x98
   1179c:	7023      	strb	r3, [r4, #0]
   1179e:	e709      	b.n	115b4 <LORAWAN_SetAttr+0x17c>
   117a0:	880b      	ldrh	r3, [r1, #0]
   117a2:	34d4      	adds	r4, #212	; 0xd4
   117a4:	8023      	strh	r3, [r4, #0]
   117a6:	210e      	movs	r1, #14
   117a8:	e7be      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117aa:	880b      	ldrh	r3, [r1, #0]
   117ac:	34d6      	adds	r4, #214	; 0xd6
   117ae:	8023      	strh	r3, [r4, #0]
   117b0:	210f      	movs	r1, #15
   117b2:	e7b9      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117b4:	780b      	ldrb	r3, [r1, #0]
   117b6:	34dc      	adds	r4, #220	; 0xdc
   117b8:	7023      	strb	r3, [r4, #0]
   117ba:	2111      	movs	r1, #17
   117bc:	e7b4      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117be:	780b      	ldrb	r3, [r1, #0]
   117c0:	34dd      	adds	r4, #221	; 0xdd
   117c2:	7023      	strb	r3, [r4, #0]
   117c4:	2112      	movs	r1, #18
   117c6:	e7af      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117c8:	880b      	ldrh	r3, [r1, #0]
   117ca:	34da      	adds	r4, #218	; 0xda
   117cc:	8023      	strh	r3, [r4, #0]
   117ce:	2110      	movs	r1, #16
   117d0:	e7aa      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117d2:	780b      	ldrb	r3, [r1, #0]
   117d4:	34e2      	adds	r4, #226	; 0xe2
   117d6:	7023      	strb	r3, [r4, #0]
   117d8:	2114      	movs	r1, #20
   117da:	e7a5      	b.n	11728 <LORAWAN_SetAttr+0x2f0>
   117dc:	780b      	ldrb	r3, [r1, #0]
   117de:	34e1      	adds	r4, #225	; 0xe1
   117e0:	7023      	strb	r3, [r4, #0]
   117e2:	e69b      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   117e4:	780b      	ldrb	r3, [r1, #0]
   117e6:	34e8      	adds	r4, #232	; 0xe8
   117e8:	e7fa      	b.n	117e0 <LORAWAN_SetAttr+0x3a8>
   117ea:	2001      	movs	r0, #1
   117ec:	780b      	ldrb	r3, [r1, #0]
   117ee:	2110      	movs	r1, #16
   117f0:	3484      	adds	r4, #132	; 0x84
   117f2:	4003      	ands	r3, r0
   117f4:	011a      	lsls	r2, r3, #4
   117f6:	7823      	ldrb	r3, [r4, #0]
   117f8:	438b      	bics	r3, r1
   117fa:	4313      	orrs	r3, r2
   117fc:	7023      	strb	r3, [r4, #0]
   117fe:	3905      	subs	r1, #5
   11800:	e6a5      	b.n	1154e <LORAWAN_SetAttr+0x116>
   11802:	7909      	ldrb	r1, [r1, #4]
   11804:	7828      	ldrb	r0, [r5, #0]
   11806:	4b54      	ldr	r3, [pc, #336]	; (11958 <LORAWAN_SetAttr+0x520>)
   11808:	4798      	blx	r3
   1180a:	0006      	movs	r6, r0
   1180c:	e73e      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1180e:	7909      	ldrb	r1, [r1, #4]
   11810:	7828      	ldrb	r0, [r5, #0]
   11812:	4b52      	ldr	r3, [pc, #328]	; (1195c <LORAWAN_SetAttr+0x524>)
   11814:	e7f8      	b.n	11808 <LORAWAN_SetAttr+0x3d0>
   11816:	7808      	ldrb	r0, [r1, #0]
   11818:	4b51      	ldr	r3, [pc, #324]	; (11960 <LORAWAN_SetAttr+0x528>)
   1181a:	6849      	ldr	r1, [r1, #4]
   1181c:	4798      	blx	r3
   1181e:	e7f4      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   11820:	7909      	ldrb	r1, [r1, #4]
   11822:	6828      	ldr	r0, [r5, #0]
   11824:	4b4f      	ldr	r3, [pc, #316]	; (11964 <LORAWAN_SetAttr+0x52c>)
   11826:	4798      	blx	r3
   11828:	e7ef      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   1182a:	786b      	ldrb	r3, [r5, #1]
   1182c:	7828      	ldrb	r0, [r5, #0]
   1182e:	021b      	lsls	r3, r3, #8
   11830:	4303      	orrs	r3, r0
   11832:	78a8      	ldrb	r0, [r5, #2]
   11834:	7909      	ldrb	r1, [r1, #4]
   11836:	0400      	lsls	r0, r0, #16
   11838:	4303      	orrs	r3, r0
   1183a:	78e8      	ldrb	r0, [r5, #3]
   1183c:	0600      	lsls	r0, r0, #24
   1183e:	4318      	orrs	r0, r3
   11840:	4b49      	ldr	r3, [pc, #292]	; (11968 <LORAWAN_SetAttr+0x530>)
   11842:	e7f0      	b.n	11826 <LORAWAN_SetAttr+0x3ee>
   11844:	7808      	ldrb	r0, [r1, #0]
   11846:	4b49      	ldr	r3, [pc, #292]	; (1196c <LORAWAN_SetAttr+0x534>)
   11848:	4798      	blx	r3
   1184a:	e7de      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   1184c:	8808      	ldrh	r0, [r1, #0]
   1184e:	4b48      	ldr	r3, [pc, #288]	; (11970 <LORAWAN_SetAttr+0x538>)
   11850:	4798      	blx	r3
   11852:	e663      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   11854:	4b47      	ldr	r3, [pc, #284]	; (11974 <LORAWAN_SetAttr+0x53c>)
   11856:	6019      	str	r1, [r3, #0]
   11858:	e673      	b.n	11542 <LORAWAN_SetAttr+0x10a>
   1185a:	7809      	ldrb	r1, [r1, #0]
   1185c:	7868      	ldrb	r0, [r5, #1]
   1185e:	4b46      	ldr	r3, [pc, #280]	; (11978 <LORAWAN_SetAttr+0x540>)
   11860:	4798      	blx	r3
   11862:	e7d2      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   11864:	7809      	ldrb	r1, [r1, #0]
   11866:	4b45      	ldr	r3, [pc, #276]	; (1197c <LORAWAN_SetAttr+0x544>)
   11868:	1c68      	adds	r0, r5, #1
   1186a:	4798      	blx	r3
   1186c:	e7cd      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   1186e:	7809      	ldrb	r1, [r1, #0]
   11870:	1c68      	adds	r0, r5, #1
   11872:	4b43      	ldr	r3, [pc, #268]	; (11980 <LORAWAN_SetAttr+0x548>)
   11874:	e7f9      	b.n	1186a <LORAWAN_SetAttr+0x432>
   11876:	7809      	ldrb	r1, [r1, #0]
   11878:	6868      	ldr	r0, [r5, #4]
   1187a:	4b42      	ldr	r3, [pc, #264]	; (11984 <LORAWAN_SetAttr+0x54c>)
   1187c:	e7f5      	b.n	1186a <LORAWAN_SetAttr+0x432>
   1187e:	7809      	ldrb	r1, [r1, #0]
   11880:	6868      	ldr	r0, [r5, #4]
   11882:	4b41      	ldr	r3, [pc, #260]	; (11988 <LORAWAN_SetAttr+0x550>)
   11884:	e7f1      	b.n	1186a <LORAWAN_SetAttr+0x432>
   11886:	7809      	ldrb	r1, [r1, #0]
   11888:	6868      	ldr	r0, [r5, #4]
   1188a:	4b40      	ldr	r3, [pc, #256]	; (1198c <LORAWAN_SetAttr+0x554>)
   1188c:	e7ed      	b.n	1186a <LORAWAN_SetAttr+0x432>
   1188e:	7809      	ldrb	r1, [r1, #0]
   11890:	6868      	ldr	r0, [r5, #4]
   11892:	4b3f      	ldr	r3, [pc, #252]	; (11990 <LORAWAN_SetAttr+0x558>)
   11894:	e7e9      	b.n	1186a <LORAWAN_SetAttr+0x432>
   11896:	7809      	ldrb	r1, [r1, #0]
   11898:	7868      	ldrb	r0, [r5, #1]
   1189a:	4b3e      	ldr	r3, [pc, #248]	; (11994 <LORAWAN_SetAttr+0x55c>)
   1189c:	e7e0      	b.n	11860 <LORAWAN_SetAttr+0x428>
   1189e:	7809      	ldrb	r1, [r1, #0]
   118a0:	7868      	ldrb	r0, [r5, #1]
   118a2:	4b3d      	ldr	r3, [pc, #244]	; (11998 <LORAWAN_SetAttr+0x560>)
   118a4:	e7dc      	b.n	11860 <LORAWAN_SetAttr+0x428>
   118a6:	2300      	movs	r3, #0
   118a8:	466a      	mov	r2, sp
   118aa:	7809      	ldrb	r1, [r1, #0]
   118ac:	7013      	strb	r3, [r2, #0]
   118ae:	4299      	cmp	r1, r3
   118b0:	d014      	beq.n	118dc <LORAWAN_SetAttr+0x4a4>
   118b2:	0022      	movs	r2, r4
   118b4:	2102      	movs	r1, #2
   118b6:	32ff      	adds	r2, #255	; 0xff
   118b8:	7f53      	ldrb	r3, [r2, #29]
   118ba:	420b      	tst	r3, r1
   118bc:	d001      	beq.n	118c2 <LORAWAN_SetAttr+0x48a>
   118be:	438b      	bics	r3, r1
   118c0:	7753      	strb	r3, [r2, #29]
   118c2:	2220      	movs	r2, #32
   118c4:	34ff      	adds	r4, #255	; 0xff
   118c6:	7f63      	ldrb	r3, [r4, #29]
   118c8:	4213      	tst	r3, r2
   118ca:	d100      	bne.n	118ce <LORAWAN_SetAttr+0x496>
   118cc:	e626      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   118ce:	4393      	bics	r3, r2
   118d0:	7763      	strb	r3, [r4, #29]
   118d2:	4669      	mov	r1, sp
   118d4:	4b31      	ldr	r3, [pc, #196]	; (1199c <LORAWAN_SetAttr+0x564>)
   118d6:	2038      	movs	r0, #56	; 0x38
   118d8:	4798      	blx	r3
   118da:	e61f      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   118dc:	4a30      	ldr	r2, [pc, #192]	; (119a0 <LORAWAN_SetAttr+0x568>)
   118de:	4b31      	ldr	r3, [pc, #196]	; (119a4 <LORAWAN_SetAttr+0x56c>)
   118e0:	200e      	movs	r0, #14
   118e2:	4798      	blx	r3
   118e4:	e61a      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   118e6:	466b      	mov	r3, sp
   118e8:	780a      	ldrb	r2, [r1, #0]
   118ea:	34ff      	adds	r4, #255	; 0xff
   118ec:	701a      	strb	r2, [r3, #0]
   118ee:	2320      	movs	r3, #32
   118f0:	2a00      	cmp	r2, #0
   118f2:	d007      	beq.n	11904 <LORAWAN_SetAttr+0x4cc>
   118f4:	7f62      	ldrb	r2, [r4, #29]
   118f6:	4313      	orrs	r3, r2
   118f8:	7763      	strb	r3, [r4, #29]
   118fa:	4669      	mov	r1, sp
   118fc:	4b27      	ldr	r3, [pc, #156]	; (1199c <LORAWAN_SetAttr+0x564>)
   118fe:	2038      	movs	r0, #56	; 0x38
   11900:	4798      	blx	r3
   11902:	e782      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   11904:	7f62      	ldrb	r2, [r4, #29]
   11906:	260a      	movs	r6, #10
   11908:	421a      	tst	r2, r3
   1190a:	d100      	bne.n	1190e <LORAWAN_SetAttr+0x4d6>
   1190c:	e6be      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1190e:	439a      	bics	r2, r3
   11910:	7762      	strb	r2, [r4, #29]
   11912:	e7f2      	b.n	118fa <LORAWAN_SetAttr+0x4c2>
   11914:	780b      	ldrb	r3, [r1, #0]
   11916:	260a      	movs	r6, #10
   11918:	2b08      	cmp	r3, #8
   1191a:	d900      	bls.n	1191e <LORAWAN_SetAttr+0x4e6>
   1191c:	e6b6      	b.n	1168c <LORAWAN_SetAttr+0x254>
   1191e:	228b      	movs	r2, #139	; 0x8b
   11920:	0092      	lsls	r2, r2, #2
   11922:	54a3      	strb	r3, [r4, r2]
   11924:	210d      	movs	r1, #13
   11926:	e720      	b.n	1176a <LORAWAN_SetAttr+0x332>
   11928:	780a      	ldrb	r2, [r1, #0]
   1192a:	4b1f      	ldr	r3, [pc, #124]	; (119a8 <LORAWAN_SetAttr+0x570>)
   1192c:	54e2      	strb	r2, [r4, r3]
   1192e:	e5f5      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   11930:	4b1e      	ldr	r3, [pc, #120]	; (119ac <LORAWAN_SetAttr+0x574>)
   11932:	4798      	blx	r3
   11934:	e769      	b.n	1180a <LORAWAN_SetAttr+0x3d2>
   11936:	4b1e      	ldr	r3, [pc, #120]	; (119b0 <LORAWAN_SetAttr+0x578>)
   11938:	e7fb      	b.n	11932 <LORAWAN_SetAttr+0x4fa>
   1193a:	780a      	ldrb	r2, [r1, #0]
   1193c:	2302      	movs	r3, #2
   1193e:	34ff      	adds	r4, #255	; 0xff
   11940:	2a00      	cmp	r2, #0
   11942:	d003      	beq.n	1194c <LORAWAN_SetAttr+0x514>
   11944:	7f62      	ldrb	r2, [r4, #29]
   11946:	4313      	orrs	r3, r2
   11948:	7763      	strb	r3, [r4, #29]
   1194a:	e5e7      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   1194c:	7f62      	ldrb	r2, [r4, #29]
   1194e:	439a      	bics	r2, r3
   11950:	7762      	strb	r2, [r4, #29]
   11952:	e5e3      	b.n	1151c <LORAWAN_SetAttr+0xe4>
   11954:	0000be05 	.word	0x0000be05
   11958:	0001089d 	.word	0x0001089d
   1195c:	0001082d 	.word	0x0001082d
   11960:	0000f425 	.word	0x0000f425
   11964:	0000f39d 	.word	0x0000f39d
   11968:	0000f3d9 	.word	0x0000f3d9
   1196c:	000113b9 	.word	0x000113b9
   11970:	0000e479 	.word	0x0000e479
   11974:	20002cfc 	.word	0x20002cfc
   11978:	00012365 	.word	0x00012365
   1197c:	000125c5 	.word	0x000125c5
   11980:	00012611 	.word	0x00012611
   11984:	0001257d 	.word	0x0001257d
   11988:	0001265d 	.word	0x0001265d
   1198c:	0001267d 	.word	0x0001267d
   11990:	00012699 	.word	0x00012699
   11994:	000126dd 	.word	0x000126dd
   11998:	00012719 	.word	0x00012719
   1199c:	0000b7ed 	.word	0x0000b7ed
   119a0:	20002ac0 	.word	0x20002ac0
   119a4:	0000b6c5 	.word	0x0000b6c5
   119a8:	0000022d 	.word	0x0000022d
   119ac:	0000e515 	.word	0x0000e515
   119b0:	0000e53d 	.word	0x0000e53d

000119b4 <LORAWAN_Reset>:
   119b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119b6:	b087      	sub	sp, #28
   119b8:	ab02      	add	r3, sp, #8
   119ba:	1ddd      	adds	r5, r3, #7
   119bc:	23ff      	movs	r3, #255	; 0xff
   119be:	4c84      	ldr	r4, [pc, #528]	; (11bd0 <LORAWAN_Reset+0x21c>)
   119c0:	702b      	strb	r3, [r5, #0]
   119c2:	0023      	movs	r3, r4
   119c4:	9001      	str	r0, [sp, #4]
   119c6:	33f8      	adds	r3, #248	; 0xf8
   119c8:	781b      	ldrb	r3, [r3, #0]
   119ca:	2b00      	cmp	r3, #0
   119cc:	d001      	beq.n	119d2 <LORAWAN_Reset+0x1e>
   119ce:	4b81      	ldr	r3, [pc, #516]	; (11bd4 <LORAWAN_Reset+0x220>)
   119d0:	4798      	blx	r3
   119d2:	002a      	movs	r2, r5
   119d4:	4b80      	ldr	r3, [pc, #512]	; (11bd8 <LORAWAN_Reset+0x224>)
   119d6:	2100      	movs	r1, #0
   119d8:	2024      	movs	r0, #36	; 0x24
   119da:	4798      	blx	r3
   119dc:	782b      	ldrb	r3, [r5, #0]
   119de:	9a01      	ldr	r2, [sp, #4]
   119e0:	4293      	cmp	r3, r2
   119e2:	d001      	beq.n	119e8 <LORAWAN_Reset+0x34>
   119e4:	4b7d      	ldr	r3, [pc, #500]	; (11bdc <LORAWAN_Reset+0x228>)
   119e6:	4798      	blx	r3
   119e8:	238f      	movs	r3, #143	; 0x8f
   119ea:	4a7d      	ldr	r2, [pc, #500]	; (11be0 <LORAWAN_Reset+0x22c>)
   119ec:	009b      	lsls	r3, r3, #2
   119ee:	50e2      	str	r2, [r4, r3]
   119f0:	2334      	movs	r3, #52	; 0x34
   119f2:	4a7c      	ldr	r2, [pc, #496]	; (11be4 <LORAWAN_Reset+0x230>)
   119f4:	497c      	ldr	r1, [pc, #496]	; (11be8 <LORAWAN_Reset+0x234>)
   119f6:	7053      	strb	r3, [r2, #1]
   119f8:	2000      	movs	r0, #0
   119fa:	4b7c      	ldr	r3, [pc, #496]	; (11bec <LORAWAN_Reset+0x238>)
   119fc:	4798      	blx	r3
   119fe:	0023      	movs	r3, r4
   11a00:	2201      	movs	r2, #1
   11a02:	33fd      	adds	r3, #253	; 0xfd
   11a04:	701a      	strb	r2, [r3, #0]
   11a06:	0023      	movs	r3, r4
   11a08:	2205      	movs	r2, #5
   11a0a:	33fe      	adds	r3, #254	; 0xfe
   11a0c:	701a      	strb	r2, [r3, #0]
   11a0e:	0022      	movs	r2, r4
   11a10:	21ff      	movs	r1, #255	; 0xff
   11a12:	32e5      	adds	r2, #229	; 0xe5
   11a14:	7011      	strb	r1, [r2, #0]
   11a16:	0022      	movs	r2, r4
   11a18:	2500      	movs	r5, #0
   11a1a:	32e6      	adds	r2, #230	; 0xe6
   11a1c:	7015      	strb	r5, [r2, #0]
   11a1e:	0022      	movs	r2, r4
   11a20:	32ce      	adds	r2, #206	; 0xce
   11a22:	8015      	strh	r5, [r2, #0]
   11a24:	0022      	movs	r2, r4
   11a26:	328c      	adds	r2, #140	; 0x8c
   11a28:	6015      	str	r5, [r2, #0]
   11a2a:	0022      	movs	r2, r4
   11a2c:	3288      	adds	r2, #136	; 0x88
   11a2e:	6015      	str	r5, [r2, #0]
   11a30:	0022      	movs	r2, r4
   11a32:	32cc      	adds	r2, #204	; 0xcc
   11a34:	8015      	strh	r5, [r2, #0]
   11a36:	2291      	movs	r2, #145	; 0x91
   11a38:	3901      	subs	r1, #1
   11a3a:	39ff      	subs	r1, #255	; 0xff
   11a3c:	0092      	lsls	r2, r2, #2
   11a3e:	50a1      	str	r1, [r4, r2]
   11a40:	0022      	movs	r2, r4
   11a42:	3298      	adds	r2, #152	; 0x98
   11a44:	7015      	strb	r5, [r2, #0]
   11a46:	0022      	movs	r2, r4
   11a48:	32ca      	adds	r2, #202	; 0xca
   11a4a:	8015      	strh	r5, [r2, #0]
   11a4c:	0022      	movs	r2, r4
   11a4e:	32f6      	adds	r2, #246	; 0xf6
   11a50:	7015      	strb	r5, [r2, #0]
   11a52:	0022      	movs	r2, r4
   11a54:	32f7      	adds	r2, #247	; 0xf7
   11a56:	7015      	strb	r5, [r2, #0]
   11a58:	0022      	movs	r2, r4
   11a5a:	3107      	adds	r1, #7
   11a5c:	32fc      	adds	r2, #252	; 0xfc
   11a5e:	6091      	str	r1, [r2, #8]
   11a60:	60d5      	str	r5, [r2, #12]
   11a62:	841d      	strh	r5, [r3, #32]
   11a64:	845d      	strh	r5, [r3, #34]	; 0x22
   11a66:	2210      	movs	r2, #16
   11a68:	0029      	movs	r1, r5
   11a6a:	4b61      	ldr	r3, [pc, #388]	; (11bf0 <LORAWAN_Reset+0x23c>)
   11a6c:	4861      	ldr	r0, [pc, #388]	; (11bf4 <LORAWAN_Reset+0x240>)
   11a6e:	4798      	blx	r3
   11a70:	2388      	movs	r3, #136	; 0x88
   11a72:	2201      	movs	r2, #1
   11a74:	2607      	movs	r6, #7
   11a76:	009b      	lsls	r3, r3, #2
   11a78:	54e2      	strb	r2, [r4, r3]
   11a7a:	0029      	movs	r1, r5
   11a7c:	0032      	movs	r2, r6
   11a7e:	4b5c      	ldr	r3, [pc, #368]	; (11bf0 <LORAWAN_Reset+0x23c>)
   11a80:	485d      	ldr	r0, [pc, #372]	; (11bf8 <LORAWAN_Reset+0x244>)
   11a82:	4798      	blx	r3
   11a84:	238b      	movs	r3, #139	; 0x8b
   11a86:	009b      	lsls	r3, r3, #2
   11a88:	54e5      	strb	r5, [r4, r3]
   11a8a:	0023      	movs	r3, r4
   11a8c:	3394      	adds	r3, #148	; 0x94
   11a8e:	801d      	strh	r5, [r3, #0]
   11a90:	0023      	movs	r3, r4
   11a92:	33e2      	adds	r3, #226	; 0xe2
   11a94:	701e      	strb	r6, [r3, #0]
   11a96:	0023      	movs	r3, r4
   11a98:	33e1      	adds	r3, #225	; 0xe1
   11a9a:	701d      	strb	r5, [r3, #0]
   11a9c:	0023      	movs	r3, r4
   11a9e:	33e4      	adds	r3, #228	; 0xe4
   11aa0:	701d      	strb	r5, [r3, #0]
   11aa2:	0023      	movs	r3, r4
   11aa4:	0027      	movs	r7, r4
   11aa6:	33e3      	adds	r3, #227	; 0xe3
   11aa8:	3708      	adds	r7, #8
   11aaa:	701d      	strb	r5, [r3, #0]
   11aac:	9801      	ldr	r0, [sp, #4]
   11aae:	4b53      	ldr	r3, [pc, #332]	; (11bfc <LORAWAN_Reset+0x248>)
   11ab0:	67fd      	str	r5, [r7, #124]	; 0x7c
   11ab2:	4798      	blx	r3
   11ab4:	0007      	movs	r7, r0
   11ab6:	2808      	cmp	r0, #8
   11ab8:	d000      	beq.n	11abc <LORAWAN_Reset+0x108>
   11aba:	e087      	b.n	11bcc <LORAWAN_Reset+0x218>
   11abc:	4e50      	ldr	r6, [pc, #320]	; (11c00 <LORAWAN_Reset+0x24c>)
   11abe:	4a51      	ldr	r2, [pc, #324]	; (11c04 <LORAWAN_Reset+0x250>)
   11ac0:	0029      	movs	r1, r5
   11ac2:	47b0      	blx	r6
   11ac4:	4a50      	ldr	r2, [pc, #320]	; (11c08 <LORAWAN_Reset+0x254>)
   11ac6:	0029      	movs	r1, r5
   11ac8:	200e      	movs	r0, #14
   11aca:	47b0      	blx	r6
   11acc:	34e8      	adds	r4, #232	; 0xe8
   11ace:	4a4f      	ldr	r2, [pc, #316]	; (11c0c <LORAWAN_Reset+0x258>)
   11ad0:	0029      	movs	r1, r5
   11ad2:	2006      	movs	r0, #6
   11ad4:	7025      	strb	r5, [r4, #0]
   11ad6:	47b0      	blx	r6
   11ad8:	4b4d      	ldr	r3, [pc, #308]	; (11c10 <LORAWAN_Reset+0x25c>)
   11ada:	4798      	blx	r3
   11adc:	466a      	mov	r2, sp
   11ade:	4b41      	ldr	r3, [pc, #260]	; (11be4 <LORAWAN_Reset+0x230>)
   11ae0:	7912      	ldrb	r2, [r2, #4]
   11ae2:	0029      	movs	r1, r5
   11ae4:	701a      	strb	r2, [r3, #0]
   11ae6:	0028      	movs	r0, r5
   11ae8:	4b4a      	ldr	r3, [pc, #296]	; (11c14 <LORAWAN_Reset+0x260>)
   11aea:	4798      	blx	r3
   11aec:	2210      	movs	r2, #16
   11aee:	4b3d      	ldr	r3, [pc, #244]	; (11be4 <LORAWAN_Reset+0x230>)
   11af0:	7f5b      	ldrb	r3, [r3, #29]
   11af2:	4213      	tst	r3, r2
   11af4:	d006      	beq.n	11b04 <LORAWAN_Reset+0x150>
   11af6:	ab02      	add	r3, sp, #8
   11af8:	1d99      	adds	r1, r3, #6
   11afa:	2301      	movs	r3, #1
   11afc:	0038      	movs	r0, r7
   11afe:	700b      	strb	r3, [r1, #0]
   11b00:	4b3a      	ldr	r3, [pc, #232]	; (11bec <LORAWAN_Reset+0x238>)
   11b02:	4798      	blx	r3
   11b04:	4b44      	ldr	r3, [pc, #272]	; (11c18 <LORAWAN_Reset+0x264>)
   11b06:	4945      	ldr	r1, [pc, #276]	; (11c1c <LORAWAN_Reset+0x268>)
   11b08:	201e      	movs	r0, #30
   11b0a:	4798      	blx	r3
   11b0c:	4c30      	ldr	r4, [pc, #192]	; (11bd0 <LORAWAN_Reset+0x21c>)
   11b0e:	0023      	movs	r3, r4
   11b10:	33ff      	adds	r3, #255	; 0xff
   11b12:	7f5b      	ldrb	r3, [r3, #29]
   11b14:	075b      	lsls	r3, r3, #29
   11b16:	d507      	bpl.n	11b28 <LORAWAN_Reset+0x174>
   11b18:	2100      	movs	r1, #0
   11b1a:	aa04      	add	r2, sp, #16
   11b1c:	2031      	movs	r0, #49	; 0x31
   11b1e:	47b0      	blx	r6
   11b20:	a904      	add	r1, sp, #16
   11b22:	2028      	movs	r0, #40	; 0x28
   11b24:	4b3e      	ldr	r3, [pc, #248]	; (11c20 <LORAWAN_Reset+0x26c>)
   11b26:	4798      	blx	r3
   11b28:	4a3e      	ldr	r2, [pc, #248]	; (11c24 <LORAWAN_Reset+0x270>)
   11b2a:	2100      	movs	r1, #0
   11b2c:	2009      	movs	r0, #9
   11b2e:	47b0      	blx	r6
   11b30:	4a3d      	ldr	r2, [pc, #244]	; (11c28 <LORAWAN_Reset+0x274>)
   11b32:	2100      	movs	r1, #0
   11b34:	200a      	movs	r0, #10
   11b36:	47b0      	blx	r6
   11b38:	4a3c      	ldr	r2, [pc, #240]	; (11c2c <LORAWAN_Reset+0x278>)
   11b3a:	2100      	movs	r1, #0
   11b3c:	2035      	movs	r0, #53	; 0x35
   11b3e:	47b0      	blx	r6
   11b40:	ad04      	add	r5, sp, #16
   11b42:	4a3b      	ldr	r2, [pc, #236]	; (11c30 <LORAWAN_Reset+0x27c>)
   11b44:	2100      	movs	r1, #0
   11b46:	2036      	movs	r0, #54	; 0x36
   11b48:	47b0      	blx	r6
   11b4a:	002a      	movs	r2, r5
   11b4c:	2100      	movs	r1, #0
   11b4e:	2014      	movs	r0, #20
   11b50:	47b0      	blx	r6
   11b52:	0023      	movs	r3, r4
   11b54:	782a      	ldrb	r2, [r5, #0]
   11b56:	33f3      	adds	r3, #243	; 0xf3
   11b58:	701a      	strb	r2, [r3, #0]
   11b5a:	0023      	movs	r3, r4
   11b5c:	786a      	ldrb	r2, [r5, #1]
   11b5e:	33f4      	adds	r3, #244	; 0xf4
   11b60:	701a      	strb	r2, [r3, #0]
   11b62:	0023      	movs	r3, r4
   11b64:	2500      	movs	r5, #0
   11b66:	33de      	adds	r3, #222	; 0xde
   11b68:	0029      	movs	r1, r5
   11b6a:	801d      	strh	r5, [r3, #0]
   11b6c:	2265      	movs	r2, #101	; 0x65
   11b6e:	0020      	movs	r0, r4
   11b70:	4b1f      	ldr	r3, [pc, #124]	; (11bf0 <LORAWAN_Reset+0x23c>)
   11b72:	4798      	blx	r3
   11b74:	0023      	movs	r3, r4
   11b76:	22fa      	movs	r2, #250	; 0xfa
   11b78:	33d0      	adds	r3, #208	; 0xd0
   11b7a:	0092      	lsls	r2, r2, #2
   11b7c:	801a      	strh	r2, [r3, #0]
   11b7e:	0023      	movs	r3, r4
   11b80:	22fa      	movs	r2, #250	; 0xfa
   11b82:	33d2      	adds	r3, #210	; 0xd2
   11b84:	00d2      	lsls	r2, r2, #3
   11b86:	801a      	strh	r2, [r3, #0]
   11b88:	0023      	movs	r3, r4
   11b8a:	4a2a      	ldr	r2, [pc, #168]	; (11c34 <LORAWAN_Reset+0x280>)
   11b8c:	33d4      	adds	r3, #212	; 0xd4
   11b8e:	801a      	strh	r2, [r3, #0]
   11b90:	0023      	movs	r3, r4
   11b92:	4a29      	ldr	r2, [pc, #164]	; (11c38 <LORAWAN_Reset+0x284>)
   11b94:	33d6      	adds	r3, #214	; 0xd6
   11b96:	801a      	strh	r2, [r3, #0]
   11b98:	4b28      	ldr	r3, [pc, #160]	; (11c3c <LORAWAN_Reset+0x288>)
   11b9a:	4798      	blx	r3
   11b9c:	4b28      	ldr	r3, [pc, #160]	; (11c40 <LORAWAN_Reset+0x28c>)
   11b9e:	4929      	ldr	r1, [pc, #164]	; (11c44 <LORAWAN_Reset+0x290>)
   11ba0:	4798      	blx	r3
   11ba2:	23fa      	movs	r3, #250	; 0xfa
   11ba4:	009b      	lsls	r3, r3, #2
   11ba6:	18c9      	adds	r1, r1, r3
   11ba8:	0023      	movs	r3, r4
   11baa:	33da      	adds	r3, #218	; 0xda
   11bac:	8019      	strh	r1, [r3, #0]
   11bae:	0023      	movs	r3, r4
   11bb0:	2220      	movs	r2, #32
   11bb2:	33dd      	adds	r3, #221	; 0xdd
   11bb4:	701a      	strb	r2, [r3, #0]
   11bb6:	2340      	movs	r3, #64	; 0x40
   11bb8:	34dc      	adds	r4, #220	; 0xdc
   11bba:	7023      	strb	r3, [r4, #0]
   11bbc:	0028      	movs	r0, r5
   11bbe:	4b22      	ldr	r3, [pc, #136]	; (11c48 <LORAWAN_Reset+0x294>)
   11bc0:	4798      	blx	r3
   11bc2:	4b22      	ldr	r3, [pc, #136]	; (11c4c <LORAWAN_Reset+0x298>)
   11bc4:	4798      	blx	r3
   11bc6:	0038      	movs	r0, r7
   11bc8:	b007      	add	sp, #28
   11bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bcc:	270a      	movs	r7, #10
   11bce:	e7fa      	b.n	11bc6 <LORAWAN_Reset+0x212>
   11bd0:	200029a4 	.word	0x200029a4
   11bd4:	0000db31 	.word	0x0000db31
   11bd8:	0000f489 	.word	0x0000f489
   11bdc:	0000b9ad 	.word	0x0000b9ad
   11be0:	01054000 	.word	0x01054000
   11be4:	20002aa3 	.word	0x20002aa3
   11be8:	20002aa4 	.word	0x20002aa4
   11bec:	00012b31 	.word	0x00012b31
   11bf0:	00017715 	.word	0x00017715
   11bf4:	20002ab0 	.word	0x20002ab0
   11bf8:	20002bc7 	.word	0x20002bc7
   11bfc:	0000b861 	.word	0x0000b861
   11c00:	0000b6c5 	.word	0x0000b6c5
   11c04:	20002a0d 	.word	0x20002a0d
   11c08:	20002ac0 	.word	0x20002ac0
   11c0c:	20002a99 	.word	0x20002a99
   11c10:	00012d2d 	.word	0x00012d2d
   11c14:	0000be05 	.word	0x0000be05
   11c18:	00012a41 	.word	0x00012a41
   11c1c:	20002bcf 	.word	0x20002bcf
   11c20:	00011439 	.word	0x00011439
   11c24:	20002a12 	.word	0x20002a12
   11c28:	20002a0e 	.word	0x20002a0e
   11c2c:	20002a8d 	.word	0x20002a8d
   11c30:	20002a8b 	.word	0x20002a8b
   11c34:	00001388 	.word	0x00001388
   11c38:	00001770 	.word	0x00001770
   11c3c:	00017895 	.word	0x00017895
   11c40:	000147e9 	.word	0x000147e9
   11c44:	000007d1 	.word	0x000007d1
   11c48:	0000e479 	.word	0x0000e479
   11c4c:	000122dd 	.word	0x000122dd

00011c50 <AssemblePacket>:
   11c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c52:	2710      	movs	r7, #16
   11c54:	b08f      	sub	sp, #60	; 0x3c
   11c56:	9308      	str	r3, [sp, #32]
   11c58:	ab0d      	add	r3, sp, #52	; 0x34
   11c5a:	801f      	strh	r7, [r3, #0]
   11c5c:	231e      	movs	r3, #30
   11c5e:	920a      	str	r2, [sp, #40]	; 0x28
   11c60:	aa06      	add	r2, sp, #24
   11c62:	189b      	adds	r3, r3, r2
   11c64:	2500      	movs	r5, #0
   11c66:	2210      	movs	r2, #16
   11c68:	ac0c      	add	r4, sp, #48	; 0x30
   11c6a:	9006      	str	r0, [sp, #24]
   11c6c:	910b      	str	r1, [sp, #44]	; 0x2c
   11c6e:	32ff      	adds	r2, #255	; 0xff
   11c70:	0029      	movs	r1, r5
   11c72:	4ed1      	ldr	r6, [pc, #836]	; (11fb8 <AssemblePacket+0x368>)
   11c74:	7025      	strb	r5, [r4, #0]
   11c76:	48d1      	ldr	r0, [pc, #836]	; (11fbc <AssemblePacket+0x36c>)
   11c78:	801d      	strh	r5, [r3, #0]
   11c7a:	47b0      	blx	r6
   11c7c:	003a      	movs	r2, r7
   11c7e:	0029      	movs	r1, r5
   11c80:	48cf      	ldr	r0, [pc, #828]	; (11fc0 <AssemblePacket+0x370>)
   11c82:	47b0      	blx	r6
   11c84:	221f      	movs	r2, #31
   11c86:	7823      	ldrb	r3, [r4, #0]
   11c88:	9906      	ldr	r1, [sp, #24]
   11c8a:	4013      	ands	r3, r2
   11c8c:	42a9      	cmp	r1, r5
   11c8e:	d100      	bne.n	11c92 <AssemblePacket+0x42>
   11c90:	e0dc      	b.n	11e4c <AssemblePacket+0x1fc>
   11c92:	3a9f      	subs	r2, #159	; 0x9f
   11c94:	4313      	orrs	r3, r2
   11c96:	7023      	strb	r3, [r4, #0]
   11c98:	4bca      	ldr	r3, [pc, #808]	; (11fc4 <AssemblePacket+0x374>)
   11c9a:	3281      	adds	r2, #129	; 0x81
   11c9c:	3394      	adds	r3, #148	; 0x94
   11c9e:	7819      	ldrb	r1, [r3, #0]
   11ca0:	430a      	orrs	r2, r1
   11ca2:	701a      	strb	r2, [r3, #0]
   11ca4:	22e0      	movs	r2, #224	; 0xe0
   11ca6:	7823      	ldrb	r3, [r4, #0]
   11ca8:	48c4      	ldr	r0, [pc, #784]	; (11fbc <AssemblePacket+0x36c>)
   11caa:	4013      	ands	r3, r2
   11cac:	7023      	strb	r3, [r4, #0]
   11cae:	4cc5      	ldr	r4, [pc, #788]	; (11fc4 <AssemblePacket+0x374>)
   11cb0:	7403      	strb	r3, [r0, #16]
   11cb2:	3adc      	subs	r2, #220	; 0xdc
   11cb4:	4bc4      	ldr	r3, [pc, #784]	; (11fc8 <AssemblePacket+0x378>)
   11cb6:	3011      	adds	r0, #17
   11cb8:	1c61      	adds	r1, r4, #1
   11cba:	4798      	blx	r3
   11cbc:	2215      	movs	r2, #21
   11cbe:	ab0d      	add	r3, sp, #52	; 0x34
   11cc0:	0025      	movs	r5, r4
   11cc2:	801a      	strh	r2, [r3, #0]
   11cc4:	2600      	movs	r6, #0
   11cc6:	466b      	mov	r3, sp
   11cc8:	3584      	adds	r5, #132	; 0x84
   11cca:	761e      	strb	r6, [r3, #24]
   11ccc:	782b      	ldrb	r3, [r5, #0]
   11cce:	069b      	lsls	r3, r3, #26
   11cd0:	d400      	bmi.n	11cd4 <AssemblePacket+0x84>
   11cd2:	e130      	b.n	11f36 <AssemblePacket+0x2e6>
   11cd4:	0027      	movs	r7, r4
   11cd6:	4bbd      	ldr	r3, [pc, #756]	; (11fcc <AssemblePacket+0x37c>)
   11cd8:	37f3      	adds	r7, #243	; 0xf3
   11cda:	781a      	ldrb	r2, [r3, #0]
   11cdc:	783b      	ldrb	r3, [r7, #0]
   11cde:	429a      	cmp	r2, r3
   11ce0:	d31e      	bcc.n	11d20 <AssemblePacket+0xd0>
   11ce2:	2180      	movs	r1, #128	; 0x80
   11ce4:	466b      	mov	r3, sp
   11ce6:	0022      	movs	r2, r4
   11ce8:	4249      	negs	r1, r1
   11cea:	32ca      	adds	r2, #202	; 0xca
   11cec:	7619      	strb	r1, [r3, #24]
   11cee:	8813      	ldrh	r3, [r2, #0]
   11cf0:	3301      	adds	r3, #1
   11cf2:	b29b      	uxth	r3, r3
   11cf4:	8013      	strh	r3, [r2, #0]
   11cf6:	0022      	movs	r2, r4
   11cf8:	32dc      	adds	r2, #220	; 0xdc
   11cfa:	7812      	ldrb	r2, [r2, #0]
   11cfc:	4293      	cmp	r3, r2
   11cfe:	d30f      	bcc.n	11d20 <AssemblePacket+0xd0>
   11d00:	2040      	movs	r0, #64	; 0x40
   11d02:	4308      	orrs	r0, r1
   11d04:	9006      	str	r0, [sp, #24]
   11d06:	0020      	movs	r0, r4
   11d08:	3094      	adds	r0, #148	; 0x94
   11d0a:	7801      	ldrb	r1, [r0, #0]
   11d0c:	4684      	mov	ip, r0
   11d0e:	2010      	movs	r0, #16
   11d10:	4301      	orrs	r1, r0
   11d12:	4660      	mov	r0, ip
   11d14:	7001      	strb	r1, [r0, #0]
   11d16:	4293      	cmp	r3, r2
   11d18:	d000      	beq.n	11d1c <AssemblePacket+0xcc>
   11d1a:	e09b      	b.n	11e54 <AssemblePacket+0x204>
   11d1c:	34f6      	adds	r4, #246	; 0xf6
   11d1e:	7026      	strb	r6, [r4, #0]
   11d20:	4da8      	ldr	r5, [pc, #672]	; (11fc4 <AssemblePacket+0x374>)
   11d22:	2102      	movs	r1, #2
   11d24:	002a      	movs	r2, r5
   11d26:	3294      	adds	r2, #148	; 0x94
   11d28:	7813      	ldrb	r3, [r2, #0]
   11d2a:	420b      	tst	r3, r1
   11d2c:	d005      	beq.n	11d3a <AssemblePacket+0xea>
   11d2e:	2020      	movs	r0, #32
   11d30:	9c06      	ldr	r4, [sp, #24]
   11d32:	438b      	bics	r3, r1
   11d34:	4304      	orrs	r4, r0
   11d36:	9406      	str	r4, [sp, #24]
   11d38:	7013      	strb	r3, [r2, #0]
   11d3a:	2310      	movs	r3, #16
   11d3c:	9c06      	ldr	r4, [sp, #24]
   11d3e:	439c      	bics	r4, r3
   11d40:	002b      	movs	r3, r5
   11d42:	33e0      	adds	r3, #224	; 0xe0
   11d44:	781b      	ldrb	r3, [r3, #0]
   11d46:	9309      	str	r3, [sp, #36]	; 0x24
   11d48:	2b00      	cmp	r3, #0
   11d4a:	d003      	beq.n	11d54 <AssemblePacket+0x104>
   11d4c:	9b08      	ldr	r3, [sp, #32]
   11d4e:	2b00      	cmp	r3, #0
   11d50:	d000      	beq.n	11d54 <AssemblePacket+0x104>
   11d52:	e0f6      	b.n	11f42 <AssemblePacket+0x2f2>
   11d54:	230f      	movs	r3, #15
   11d56:	439c      	bics	r4, r3
   11d58:	466b      	mov	r3, sp
   11d5a:	9406      	str	r4, [sp, #24]
   11d5c:	ac0d      	add	r4, sp, #52	; 0x34
   11d5e:	8826      	ldrh	r6, [r4, #0]
   11d60:	4f96      	ldr	r7, [pc, #600]	; (11fbc <AssemblePacket+0x36c>)
   11d62:	7e1b      	ldrb	r3, [r3, #24]
   11d64:	1c70      	adds	r0, r6, #1
   11d66:	b280      	uxth	r0, r0
   11d68:	55bb      	strb	r3, [r7, r6]
   11d6a:	19c0      	adds	r0, r0, r7
   11d6c:	4b96      	ldr	r3, [pc, #600]	; (11fc8 <AssemblePacket+0x378>)
   11d6e:	2202      	movs	r2, #2
   11d70:	4997      	ldr	r1, [pc, #604]	; (11fd0 <AssemblePacket+0x380>)
   11d72:	4798      	blx	r3
   11d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d76:	3603      	adds	r6, #3
   11d78:	8026      	strh	r6, [r4, #0]
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	d100      	bne.n	11d80 <AssemblePacket+0x130>
   11d7e:	e0e7      	b.n	11f50 <AssemblePacket+0x300>
   11d80:	9b08      	ldr	r3, [sp, #32]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d004      	beq.n	11d90 <AssemblePacket+0x140>
   11d86:	2201      	movs	r2, #1
   11d88:	0021      	movs	r1, r4
   11d8a:	0038      	movs	r0, r7
   11d8c:	4b91      	ldr	r3, [pc, #580]	; (11fd4 <AssemblePacket+0x384>)
   11d8e:	4798      	blx	r3
   11d90:	466a      	mov	r2, sp
   11d92:	212c      	movs	r1, #44	; 0x2c
   11d94:	1852      	adds	r2, r2, r1
   11d96:	8823      	ldrh	r3, [r4, #0]
   11d98:	7812      	ldrb	r2, [r2, #0]
   11d9a:	1c5e      	adds	r6, r3, #1
   11d9c:	54fa      	strb	r2, [r7, r3]
   11d9e:	9b08      	ldr	r3, [sp, #32]
   11da0:	b2b6      	uxth	r6, r6
   11da2:	8026      	strh	r6, [r4, #0]
   11da4:	2b00      	cmp	r3, #0
   11da6:	d100      	bne.n	11daa <AssemblePacket+0x15a>
   11da8:	e0d6      	b.n	11f58 <AssemblePacket+0x308>
   11daa:	001a      	movs	r2, r3
   11dac:	990a      	ldr	r1, [sp, #40]	; 0x28
   11dae:	4b86      	ldr	r3, [pc, #536]	; (11fc8 <AssemblePacket+0x378>)
   11db0:	19b8      	adds	r0, r7, r6
   11db2:	4798      	blx	r3
   11db4:	2120      	movs	r1, #32
   11db6:	466b      	mov	r3, sp
   11db8:	185b      	adds	r3, r3, r1
   11dba:	7819      	ldrb	r1, [r3, #0]
   11dbc:	682b      	ldr	r3, [r5, #0]
   11dbe:	002a      	movs	r2, r5
   11dc0:	0a18      	lsrs	r0, r3, #8
   11dc2:	792b      	ldrb	r3, [r5, #4]
   11dc4:	3288      	adds	r2, #136	; 0x88
   11dc6:	061b      	lsls	r3, r3, #24
   11dc8:	4303      	orrs	r3, r0
   11dca:	9304      	str	r3, [sp, #16]
   11dcc:	2301      	movs	r3, #1
   11dce:	9301      	str	r3, [sp, #4]
   11dd0:	4b81      	ldr	r3, [pc, #516]	; (11fd8 <AssemblePacket+0x388>)
   11dd2:	9703      	str	r7, [sp, #12]
   11dd4:	9602      	str	r6, [sp, #8]
   11dd6:	9300      	str	r3, [sp, #0]
   11dd8:	6813      	ldr	r3, [r2, #0]
   11dda:	980a      	ldr	r0, [sp, #40]	; 0x28
   11ddc:	2200      	movs	r2, #0
   11dde:	4c7f      	ldr	r4, [pc, #508]	; (11fdc <AssemblePacket+0x38c>)
   11de0:	47a0      	blx	r4
   11de2:	2800      	cmp	r0, #0
   11de4:	d002      	beq.n	11dec <AssemblePacket+0x19c>
   11de6:	2020      	movs	r0, #32
   11de8:	4b7d      	ldr	r3, [pc, #500]	; (11fe0 <AssemblePacket+0x390>)
   11dea:	4798      	blx	r3
   11dec:	aa0d      	add	r2, sp, #52	; 0x34
   11dee:	8813      	ldrh	r3, [r2, #0]
   11df0:	9908      	ldr	r1, [sp, #32]
   11df2:	18cb      	adds	r3, r1, r3
   11df4:	8013      	strh	r3, [r2, #0]
   11df6:	4c73      	ldr	r4, [pc, #460]	; (11fc4 <AssemblePacket+0x374>)
   11df8:	ae0d      	add	r6, sp, #52	; 0x34
   11dfa:	0021      	movs	r1, r4
   11dfc:	6823      	ldr	r3, [r4, #0]
   11dfe:	8832      	ldrh	r2, [r6, #0]
   11e00:	0a18      	lsrs	r0, r3, #8
   11e02:	7923      	ldrb	r3, [r4, #4]
   11e04:	3a10      	subs	r2, #16
   11e06:	061b      	lsls	r3, r3, #24
   11e08:	4303      	orrs	r3, r0
   11e0a:	9300      	str	r3, [sp, #0]
   11e0c:	3188      	adds	r1, #136	; 0x88
   11e0e:	b2d2      	uxtb	r2, r2
   11e10:	2349      	movs	r3, #73	; 0x49
   11e12:	6809      	ldr	r1, [r1, #0]
   11e14:	2000      	movs	r0, #0
   11e16:	4d73      	ldr	r5, [pc, #460]	; (11fe4 <AssemblePacket+0x394>)
   11e18:	47a8      	blx	r5
   11e1a:	4f68      	ldr	r7, [pc, #416]	; (11fbc <AssemblePacket+0x36c>)
   11e1c:	2210      	movs	r2, #16
   11e1e:	4968      	ldr	r1, [pc, #416]	; (11fc0 <AssemblePacket+0x370>)
   11e20:	0038      	movs	r0, r7
   11e22:	4b69      	ldr	r3, [pc, #420]	; (11fc8 <AssemblePacket+0x378>)
   11e24:	4798      	blx	r3
   11e26:	8833      	ldrh	r3, [r6, #0]
   11e28:	4a65      	ldr	r2, [pc, #404]	; (11fc0 <AssemblePacket+0x370>)
   11e2a:	9300      	str	r3, [sp, #0]
   11e2c:	2102      	movs	r1, #2
   11e2e:	003b      	movs	r3, r7
   11e30:	4d6d      	ldr	r5, [pc, #436]	; (11fe8 <AssemblePacket+0x398>)
   11e32:	486e      	ldr	r0, [pc, #440]	; (11fec <AssemblePacket+0x39c>)
   11e34:	47a8      	blx	r5
   11e36:	8836      	ldrh	r6, [r6, #0]
   11e38:	2204      	movs	r2, #4
   11e3a:	19f0      	adds	r0, r6, r7
   11e3c:	4960      	ldr	r1, [pc, #384]	; (11fc0 <AssemblePacket+0x370>)
   11e3e:	4b62      	ldr	r3, [pc, #392]	; (11fc8 <AssemblePacket+0x378>)
   11e40:	4798      	blx	r3
   11e42:	3e0c      	subs	r6, #12
   11e44:	34ce      	adds	r4, #206	; 0xce
   11e46:	8026      	strh	r6, [r4, #0]
   11e48:	b00f      	add	sp, #60	; 0x3c
   11e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e4c:	2240      	movs	r2, #64	; 0x40
   11e4e:	4313      	orrs	r3, r2
   11e50:	7023      	strb	r3, [r4, #0]
   11e52:	e727      	b.n	11ca4 <AssemblePacket+0x54>
   11e54:	4293      	cmp	r3, r2
   11e56:	d800      	bhi.n	11e5a <AssemblePacket+0x20a>
   11e58:	e762      	b.n	11d20 <AssemblePacket+0xd0>
   11e5a:	0022      	movs	r2, r4
   11e5c:	0021      	movs	r1, r4
   11e5e:	32f6      	adds	r2, #246	; 0xf6
   11e60:	7813      	ldrb	r3, [r2, #0]
   11e62:	31dd      	adds	r1, #221	; 0xdd
   11e64:	3301      	adds	r3, #1
   11e66:	b2db      	uxtb	r3, r3
   11e68:	7013      	strb	r3, [r2, #0]
   11e6a:	7809      	ldrb	r1, [r1, #0]
   11e6c:	4299      	cmp	r1, r3
   11e6e:	d900      	bls.n	11e72 <AssemblePacket+0x222>
   11e70:	e756      	b.n	11d20 <AssemblePacket+0xd0>
   11e72:	231a      	movs	r3, #26
   11e74:	7016      	strb	r6, [r2, #0]
   11e76:	aa06      	add	r2, sp, #24
   11e78:	189b      	adds	r3, r3, r2
   11e7a:	001a      	movs	r2, r3
   11e7c:	0031      	movs	r1, r6
   11e7e:	4b5c      	ldr	r3, [pc, #368]	; (11ff0 <AssemblePacket+0x3a0>)
   11e80:	203c      	movs	r0, #60	; 0x3c
   11e82:	4798      	blx	r3
   11e84:	4b5b      	ldr	r3, [pc, #364]	; (11ff4 <AssemblePacket+0x3a4>)
   11e86:	781a      	ldrb	r2, [r3, #0]
   11e88:	ab06      	add	r3, sp, #24
   11e8a:	7e9b      	ldrb	r3, [r3, #26]
   11e8c:	429a      	cmp	r2, r3
   11e8e:	d00d      	beq.n	11eac <AssemblePacket+0x25c>
   11e90:	34ff      	adds	r4, #255	; 0xff
   11e92:	7820      	ldrb	r0, [r4, #0]
   11e94:	4b58      	ldr	r3, [pc, #352]	; (11ff8 <AssemblePacket+0x3a8>)
   11e96:	4798      	blx	r3
   11e98:	0031      	movs	r1, r6
   11e9a:	4a56      	ldr	r2, [pc, #344]	; (11ff4 <AssemblePacket+0x3a4>)
   11e9c:	4b54      	ldr	r3, [pc, #336]	; (11ff0 <AssemblePacket+0x3a0>)
   11e9e:	2035      	movs	r0, #53	; 0x35
   11ea0:	4798      	blx	r3
   11ea2:	210a      	movs	r1, #10
   11ea4:	0030      	movs	r0, r6
   11ea6:	4b55      	ldr	r3, [pc, #340]	; (11ffc <AssemblePacket+0x3ac>)
   11ea8:	4798      	blx	r3
   11eaa:	e739      	b.n	11d20 <AssemblePacket+0xd0>
   11eac:	4b47      	ldr	r3, [pc, #284]	; (11fcc <AssemblePacket+0x37c>)
   11eae:	783a      	ldrb	r2, [r7, #0]
   11eb0:	781b      	ldrb	r3, [r3, #0]
   11eb2:	4293      	cmp	r3, r2
   11eb4:	d022      	beq.n	11efc <AssemblePacket+0x2ac>
   11eb6:	d800      	bhi.n	11eba <AssemblePacket+0x26a>
   11eb8:	e732      	b.n	11d20 <AssemblePacket+0xd0>
   11eba:	221b      	movs	r2, #27
   11ebc:	003d      	movs	r5, r7
   11ebe:	a906      	add	r1, sp, #24
   11ec0:	3b01      	subs	r3, #1
   11ec2:	1852      	adds	r2, r2, r1
   11ec4:	7013      	strb	r3, [r2, #0]
   11ec6:	261b      	movs	r6, #27
   11ec8:	ab06      	add	r3, sp, #24
   11eca:	18f6      	adds	r6, r6, r3
   11ecc:	782a      	ldrb	r2, [r5, #0]
   11ece:	7833      	ldrb	r3, [r6, #0]
   11ed0:	429a      	cmp	r2, r3
   11ed2:	d900      	bls.n	11ed6 <AssemblePacket+0x286>
   11ed4:	e724      	b.n	11d20 <AssemblePacket+0xd0>
   11ed6:	0031      	movs	r1, r6
   11ed8:	2010      	movs	r0, #16
   11eda:	4f49      	ldr	r7, [pc, #292]	; (12000 <AssemblePacket+0x3b0>)
   11edc:	47b8      	blx	r7
   11ede:	2808      	cmp	r0, #8
   11ee0:	d000      	beq.n	11ee4 <AssemblePacket+0x294>
   11ee2:	e71d      	b.n	11d20 <AssemblePacket+0xd0>
   11ee4:	0031      	movs	r1, r6
   11ee6:	3009      	adds	r0, #9
   11ee8:	47b8      	blx	r7
   11eea:	7833      	ldrb	r3, [r6, #0]
   11eec:	2808      	cmp	r0, #8
   11eee:	d061      	beq.n	11fb4 <AssemblePacket+0x364>
   11ef0:	782a      	ldrb	r2, [r5, #0]
   11ef2:	429a      	cmp	r2, r3
   11ef4:	d2e7      	bcs.n	11ec6 <AssemblePacket+0x276>
   11ef6:	3b01      	subs	r3, #1
   11ef8:	7033      	strb	r3, [r6, #0]
   11efa:	e7e4      	b.n	11ec6 <AssemblePacket+0x276>
   11efc:	34ff      	adds	r4, #255	; 0xff
   11efe:	7820      	ldrb	r0, [r4, #0]
   11f00:	4b40      	ldr	r3, [pc, #256]	; (12004 <AssemblePacket+0x3b4>)
   11f02:	4798      	blx	r3
   11f04:	231b      	movs	r3, #27
   11f06:	aa06      	add	r2, sp, #24
   11f08:	189b      	adds	r3, r3, r2
   11f0a:	0019      	movs	r1, r3
   11f0c:	4c3e      	ldr	r4, [pc, #248]	; (12008 <AssemblePacket+0x3b8>)
   11f0e:	2013      	movs	r0, #19
   11f10:	47a0      	blx	r4
   11f12:	231b      	movs	r3, #27
   11f14:	aa06      	add	r2, sp, #24
   11f16:	189b      	adds	r3, r3, r2
   11f18:	0019      	movs	r1, r3
   11f1a:	2014      	movs	r0, #20
   11f1c:	47a0      	blx	r4
   11f1e:	2113      	movs	r1, #19
   11f20:	0030      	movs	r0, r6
   11f22:	4c36      	ldr	r4, [pc, #216]	; (11ffc <AssemblePacket+0x3ac>)
   11f24:	47a0      	blx	r4
   11f26:	2210      	movs	r2, #16
   11f28:	786b      	ldrb	r3, [r5, #1]
   11f2a:	210b      	movs	r1, #11
   11f2c:	4313      	orrs	r3, r2
   11f2e:	706b      	strb	r3, [r5, #1]
   11f30:	2001      	movs	r0, #1
   11f32:	47a0      	blx	r4
   11f34:	e6f4      	b.n	11d20 <AssemblePacket+0xd0>
   11f36:	2210      	movs	r2, #16
   11f38:	3494      	adds	r4, #148	; 0x94
   11f3a:	7823      	ldrb	r3, [r4, #0]
   11f3c:	4393      	bics	r3, r2
   11f3e:	7023      	strb	r3, [r4, #0]
   11f40:	e6ee      	b.n	11d20 <AssemblePacket+0xd0>
   11f42:	4b32      	ldr	r3, [pc, #200]	; (1200c <AssemblePacket+0x3bc>)
   11f44:	4798      	blx	r3
   11f46:	230f      	movs	r3, #15
   11f48:	4018      	ands	r0, r3
   11f4a:	439c      	bics	r4, r3
   11f4c:	4304      	orrs	r4, r0
   11f4e:	e703      	b.n	11d58 <AssemblePacket+0x108>
   11f50:	9b08      	ldr	r3, [sp, #32]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d000      	beq.n	11f58 <AssemblePacket+0x308>
   11f56:	e71b      	b.n	11d90 <AssemblePacket+0x140>
   11f58:	4d1a      	ldr	r5, [pc, #104]	; (11fc4 <AssemblePacket+0x374>)
   11f5a:	002b      	movs	r3, r5
   11f5c:	33e0      	adds	r3, #224	; 0xe0
   11f5e:	781b      	ldrb	r3, [r3, #0]
   11f60:	2b00      	cmp	r3, #0
   11f62:	d100      	bne.n	11f66 <AssemblePacket+0x316>
   11f64:	e747      	b.n	11df6 <AssemblePacket+0x1a6>
   11f66:	261e      	movs	r6, #30
   11f68:	ab06      	add	r3, sp, #24
   11f6a:	18f6      	adds	r6, r6, r3
   11f6c:	2200      	movs	r2, #0
   11f6e:	0031      	movs	r1, r6
   11f70:	4827      	ldr	r0, [pc, #156]	; (12010 <AssemblePacket+0x3c0>)
   11f72:	4b18      	ldr	r3, [pc, #96]	; (11fd4 <AssemblePacket+0x384>)
   11f74:	4798      	blx	r3
   11f76:	682b      	ldr	r3, [r5, #0]
   11f78:	7831      	ldrb	r1, [r6, #0]
   11f7a:	0a18      	lsrs	r0, r3, #8
   11f7c:	792b      	ldrb	r3, [r5, #4]
   11f7e:	9703      	str	r7, [sp, #12]
   11f80:	061b      	lsls	r3, r3, #24
   11f82:	4303      	orrs	r3, r0
   11f84:	9304      	str	r3, [sp, #16]
   11f86:	8823      	ldrh	r3, [r4, #0]
   11f88:	002a      	movs	r2, r5
   11f8a:	9302      	str	r3, [sp, #8]
   11f8c:	2302      	movs	r3, #2
   11f8e:	9301      	str	r3, [sp, #4]
   11f90:	4b16      	ldr	r3, [pc, #88]	; (11fec <AssemblePacket+0x39c>)
   11f92:	3288      	adds	r2, #136	; 0x88
   11f94:	9300      	str	r3, [sp, #0]
   11f96:	6813      	ldr	r3, [r2, #0]
   11f98:	481d      	ldr	r0, [pc, #116]	; (12010 <AssemblePacket+0x3c0>)
   11f9a:	2200      	movs	r2, #0
   11f9c:	4d0f      	ldr	r5, [pc, #60]	; (11fdc <AssemblePacket+0x38c>)
   11f9e:	47a8      	blx	r5
   11fa0:	2800      	cmp	r0, #0
   11fa2:	d002      	beq.n	11faa <AssemblePacket+0x35a>
   11fa4:	2020      	movs	r0, #32
   11fa6:	4b0e      	ldr	r3, [pc, #56]	; (11fe0 <AssemblePacket+0x390>)
   11fa8:	4798      	blx	r3
   11faa:	8823      	ldrh	r3, [r4, #0]
   11fac:	8832      	ldrh	r2, [r6, #0]
   11fae:	189b      	adds	r3, r3, r2
   11fb0:	8023      	strh	r3, [r4, #0]
   11fb2:	e720      	b.n	11df6 <AssemblePacket+0x1a6>
   11fb4:	34e7      	adds	r4, #231	; 0xe7
   11fb6:	e7c2      	b.n	11f3e <AssemblePacket+0x2ee>
   11fb8:	00017715 	.word	0x00017715
   11fbc:	20002bed 	.word	0x20002bed
   11fc0:	20000f50 	.word	0x20000f50
   11fc4:	200029a4 	.word	0x200029a4
   11fc8:	00017691 	.word	0x00017691
   11fcc:	20002a8b 	.word	0x20002a8b
   11fd0:	20002a2c 	.word	0x20002a2c
   11fd4:	0000dbf9 	.word	0x0000dbf9
   11fd8:	200029d9 	.word	0x200029d9
   11fdc:	0000f17d 	.word	0x0000f17d
   11fe0:	0000f23d 	.word	0x0000f23d
   11fe4:	0000df25 	.word	0x0000df25
   11fe8:	0000bb11 	.word	0x0000bb11
   11fec:	200029c9 	.word	0x200029c9
   11ff0:	0000b6c5 	.word	0x0000b6c5
   11ff4:	20002a8d 	.word	0x20002a8d
   11ff8:	0000b935 	.word	0x0000b935
   11ffc:	0000be05 	.word	0x0000be05
   12000:	0000b6e1 	.word	0x0000b6e1
   12004:	0000ba65 	.word	0x0000ba65
   12008:	00011439 	.word	0x00011439
   1200c:	0000daf1 	.word	0x0000daf1
   12010:	20002d08 	.word	0x20002d08

00012014 <LORAWAN_SetMulticastParam>:
   12014:	b510      	push	{r4, lr}
   12016:	4b01      	ldr	r3, [pc, #4]	; (1201c <LORAWAN_SetMulticastParam+0x8>)
   12018:	4798      	blx	r3
   1201a:	bd10      	pop	{r4, pc}
   1201c:	00011439 	.word	0x00011439

00012020 <LORAWAN_ReadyToSleep>:
   12020:	4b08      	ldr	r3, [pc, #32]	; (12044 <LORAWAN_ReadyToSleep+0x24>)
   12022:	001a      	movs	r2, r3
   12024:	32fd      	adds	r2, #253	; 0xfd
   12026:	7812      	ldrb	r2, [r2, #0]
   12028:	2a01      	cmp	r2, #1
   1202a:	d002      	beq.n	12032 <LORAWAN_ReadyToSleep+0x12>
   1202c:	2000      	movs	r0, #0
   1202e:	2a04      	cmp	r2, #4
   12030:	d106      	bne.n	12040 <LORAWAN_ReadyToSleep+0x20>
   12032:	3384      	adds	r3, #132	; 0x84
   12034:	7818      	ldrb	r0, [r3, #0]
   12036:	230e      	movs	r3, #14
   12038:	4018      	ands	r0, r3
   1203a:	4243      	negs	r3, r0
   1203c:	4158      	adcs	r0, r3
   1203e:	b2c0      	uxtb	r0, r0
   12040:	4770      	bx	lr
   12042:	46c0      	nop			; (mov r8, r8)
   12044:	200029a4 	.word	0x200029a4

00012048 <LorawanClasscUlAckTimerCallback>:
   12048:	2102      	movs	r1, #2
   1204a:	4b03      	ldr	r3, [pc, #12]	; (12058 <LorawanClasscUlAckTimerCallback+0x10>)
   1204c:	3394      	adds	r3, #148	; 0x94
   1204e:	781a      	ldrb	r2, [r3, #0]
   12050:	438a      	bics	r2, r1
   12052:	701a      	strb	r2, [r3, #0]
   12054:	4770      	bx	lr
   12056:	46c0      	nop			; (mov r8, r8)
   12058:	200029a4 	.word	0x200029a4

0001205c <LorawanClasscValidateSend>:
   1205c:	2388      	movs	r3, #136	; 0x88
   1205e:	b510      	push	{r4, lr}
   12060:	4c0a      	ldr	r4, [pc, #40]	; (1208c <LorawanClasscValidateSend+0x30>)
   12062:	009b      	lsls	r3, r3, #2
   12064:	5ce3      	ldrb	r3, [r4, r3]
   12066:	2b00      	cmp	r3, #0
   12068:	d008      	beq.n	1207c <LorawanClasscValidateSend+0x20>
   1206a:	220e      	movs	r2, #14
   1206c:	3484      	adds	r4, #132	; 0x84
   1206e:	7823      	ldrb	r3, [r4, #0]
   12070:	2008      	movs	r0, #8
   12072:	4013      	ands	r3, r2
   12074:	2b02      	cmp	r3, #2
   12076:	d100      	bne.n	1207a <LorawanClasscValidateSend+0x1e>
   12078:	2011      	movs	r0, #17
   1207a:	bd10      	pop	{r4, pc}
   1207c:	2394      	movs	r3, #148	; 0x94
   1207e:	005b      	lsls	r3, r3, #1
   12080:	5ce0      	ldrb	r0, [r4, r3]
   12082:	4b03      	ldr	r3, [pc, #12]	; (12090 <LorawanClasscValidateSend+0x34>)
   12084:	4798      	blx	r3
   12086:	2800      	cmp	r0, #0
   12088:	d1ef      	bne.n	1206a <LorawanClasscValidateSend+0xe>
   1208a:	e7f5      	b.n	12078 <LorawanClasscValidateSend+0x1c>
   1208c:	200029a4 	.word	0x200029a4
   12090:	0000cccd 	.word	0x0000cccd

00012094 <LorawanClasscPause>:
   12094:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12096:	4c16      	ldr	r4, [pc, #88]	; (120f0 <LorawanClasscPause+0x5c>)
   12098:	220e      	movs	r2, #14
   1209a:	0023      	movs	r3, r4
   1209c:	3384      	adds	r3, #132	; 0x84
   1209e:	781b      	ldrb	r3, [r3, #0]
   120a0:	4013      	ands	r3, r2
   120a2:	2b0a      	cmp	r3, #10
   120a4:	d121      	bne.n	120ea <LorawanClasscPause+0x56>
   120a6:	2388      	movs	r3, #136	; 0x88
   120a8:	009b      	lsls	r3, r3, #2
   120aa:	5ce3      	ldrb	r3, [r4, r3]
   120ac:	2b00      	cmp	r3, #0
   120ae:	d00c      	beq.n	120ca <LorawanClasscPause+0x36>
   120b0:	2301      	movs	r3, #1
   120b2:	a801      	add	r0, sp, #4
   120b4:	7003      	strb	r3, [r0, #0]
   120b6:	4b0f      	ldr	r3, [pc, #60]	; (120f4 <LorawanClasscPause+0x60>)
   120b8:	4798      	blx	r3
   120ba:	220e      	movs	r2, #14
   120bc:	2001      	movs	r0, #1
   120be:	3484      	adds	r4, #132	; 0x84
   120c0:	7823      	ldrb	r3, [r4, #0]
   120c2:	4240      	negs	r0, r0
   120c4:	4393      	bics	r3, r2
   120c6:	7023      	strb	r3, [r4, #0]
   120c8:	e007      	b.n	120da <LorawanClasscPause+0x46>
   120ca:	0023      	movs	r3, r4
   120cc:	33f1      	adds	r3, #241	; 0xf1
   120ce:	7818      	ldrb	r0, [r3, #0]
   120d0:	4d09      	ldr	r5, [pc, #36]	; (120f8 <LorawanClasscPause+0x64>)
   120d2:	47a8      	blx	r5
   120d4:	2800      	cmp	r0, #0
   120d6:	d001      	beq.n	120dc <LorawanClasscPause+0x48>
   120d8:	2000      	movs	r0, #0
   120da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   120dc:	2394      	movs	r3, #148	; 0x94
   120de:	005b      	lsls	r3, r3, #1
   120e0:	5ce0      	ldrb	r0, [r4, r3]
   120e2:	47a8      	blx	r5
   120e4:	2800      	cmp	r0, #0
   120e6:	d0e8      	beq.n	120ba <LorawanClasscPause+0x26>
   120e8:	e7f6      	b.n	120d8 <LorawanClasscPause+0x44>
   120ea:	2b00      	cmp	r3, #0
   120ec:	d0e5      	beq.n	120ba <LorawanClasscPause+0x26>
   120ee:	e7f3      	b.n	120d8 <LorawanClasscPause+0x44>
   120f0:	200029a4 	.word	0x200029a4
   120f4:	00013d35 	.word	0x00013d35
   120f8:	0000cccd 	.word	0x0000cccd

000120fc <LorawanClasscReceiveWindowCallback>:
   120fc:	2301      	movs	r3, #1
   120fe:	b507      	push	{r0, r1, r2, lr}
   12100:	a801      	add	r0, sp, #4
   12102:	7003      	strb	r3, [r0, #0]
   12104:	4b01      	ldr	r3, [pc, #4]	; (1210c <LorawanClasscReceiveWindowCallback+0x10>)
   12106:	4798      	blx	r3
   12108:	bd07      	pop	{r0, r1, r2, pc}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	00013d35 	.word	0x00013d35

00012110 <LorawanClasscRxDone>:
   12110:	221f      	movs	r2, #31
   12112:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12114:	7803      	ldrb	r3, [r0, #0]
   12116:	4c1c      	ldr	r4, [pc, #112]	; (12188 <LorawanClasscRxDone+0x78>)
   12118:	4393      	bics	r3, r2
   1211a:	2ba0      	cmp	r3, #160	; 0xa0
   1211c:	d10c      	bne.n	12138 <LorawanClasscRxDone+0x28>
   1211e:	2694      	movs	r6, #148	; 0x94
   12120:	0076      	lsls	r6, r6, #1
   12122:	5da0      	ldrb	r0, [r4, r6]
   12124:	4b19      	ldr	r3, [pc, #100]	; (1218c <LorawanClasscRxDone+0x7c>)
   12126:	4798      	blx	r3
   12128:	1e05      	subs	r5, r0, #0
   1212a:	d019      	beq.n	12160 <LorawanClasscRxDone+0x50>
   1212c:	0022      	movs	r2, r4
   1212e:	2102      	movs	r1, #2
   12130:	3294      	adds	r2, #148	; 0x94
   12132:	7813      	ldrb	r3, [r2, #0]
   12134:	438b      	bics	r3, r1
   12136:	7013      	strb	r3, [r2, #0]
   12138:	0021      	movs	r1, r4
   1213a:	3184      	adds	r1, #132	; 0x84
   1213c:	780b      	ldrb	r3, [r1, #0]
   1213e:	220e      	movs	r2, #14
   12140:	0018      	movs	r0, r3
   12142:	4010      	ands	r0, r2
   12144:	2806      	cmp	r0, #6
   12146:	d103      	bne.n	12150 <LorawanClasscRxDone+0x40>
   12148:	4393      	bics	r3, r2
   1214a:	3a04      	subs	r2, #4
   1214c:	4313      	orrs	r3, r2
   1214e:	700b      	strb	r3, [r1, #0]
   12150:	2390      	movs	r3, #144	; 0x90
   12152:	2201      	movs	r2, #1
   12154:	009b      	lsls	r3, r3, #2
   12156:	54e2      	strb	r2, [r4, r3]
   12158:	2000      	movs	r0, #0
   1215a:	4b0d      	ldr	r3, [pc, #52]	; (12190 <LorawanClasscRxDone+0x80>)
   1215c:	4798      	blx	r3
   1215e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12160:	4b0c      	ldr	r3, [pc, #48]	; (12194 <LorawanClasscRxDone+0x84>)
   12162:	5da6      	ldrb	r6, [r4, r6]
   12164:	4798      	blx	r3
   12166:	4b0c      	ldr	r3, [pc, #48]	; (12198 <LorawanClasscRxDone+0x88>)
   12168:	490c      	ldr	r1, [pc, #48]	; (1219c <LorawanClasscRxDone+0x8c>)
   1216a:	4798      	blx	r3
   1216c:	23fa      	movs	r3, #250	; 0xfa
   1216e:	009b      	lsls	r3, r3, #2
   12170:	18cb      	adds	r3, r1, r3
   12172:	21fa      	movs	r1, #250	; 0xfa
   12174:	0089      	lsls	r1, r1, #2
   12176:	4359      	muls	r1, r3
   12178:	9500      	str	r5, [sp, #0]
   1217a:	002a      	movs	r2, r5
   1217c:	4b08      	ldr	r3, [pc, #32]	; (121a0 <LorawanClasscRxDone+0x90>)
   1217e:	0030      	movs	r0, r6
   12180:	4d08      	ldr	r5, [pc, #32]	; (121a4 <LorawanClasscRxDone+0x94>)
   12182:	47a8      	blx	r5
   12184:	e7d8      	b.n	12138 <LorawanClasscRxDone+0x28>
   12186:	46c0      	nop			; (mov r8, r8)
   12188:	200029a4 	.word	0x200029a4
   1218c:	0000cccd 	.word	0x0000cccd
   12190:	00010215 	.word	0x00010215
   12194:	00017895 	.word	0x00017895
   12198:	000147e9 	.word	0x000147e9
   1219c:	000007d1 	.word	0x000007d1
   121a0:	00012049 	.word	0x00012049
   121a4:	0000cb35 	.word	0x0000cb35

000121a8 <LorawanClasscTxDone>:
   121a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   121aa:	4c27      	ldr	r4, [pc, #156]	; (12248 <LorawanClasscTxDone+0xa0>)
   121ac:	0006      	movs	r6, r0
   121ae:	0023      	movs	r3, r4
   121b0:	33d2      	adds	r3, #210	; 0xd2
   121b2:	881d      	ldrh	r5, [r3, #0]
   121b4:	0023      	movs	r3, r4
   121b6:	3394      	adds	r3, #148	; 0x94
   121b8:	781b      	ldrb	r3, [r3, #0]
   121ba:	2700      	movs	r7, #0
   121bc:	07db      	lsls	r3, r3, #31
   121be:	d516      	bpl.n	121ee <LorawanClasscTxDone+0x46>
   121c0:	0023      	movs	r3, r4
   121c2:	0022      	movs	r2, r4
   121c4:	33e2      	adds	r3, #226	; 0xe2
   121c6:	781b      	ldrb	r3, [r3, #0]
   121c8:	32e4      	adds	r2, #228	; 0xe4
   121ca:	7812      	ldrb	r2, [r2, #0]
   121cc:	3301      	adds	r3, #1
   121ce:	4293      	cmp	r3, r2
   121d0:	db0d      	blt.n	121ee <LorawanClasscTxDone+0x46>
   121d2:	4b1e      	ldr	r3, [pc, #120]	; (1224c <LorawanClasscTxDone+0xa4>)
   121d4:	5ce7      	ldrb	r7, [r4, r3]
   121d6:	2f00      	cmp	r7, #0
   121d8:	d009      	beq.n	121ee <LorawanClasscTxDone+0x46>
   121da:	4b1d      	ldr	r3, [pc, #116]	; (12250 <LorawanClasscTxDone+0xa8>)
   121dc:	4798      	blx	r3
   121de:	4b1d      	ldr	r3, [pc, #116]	; (12254 <LorawanClasscTxDone+0xac>)
   121e0:	491d      	ldr	r1, [pc, #116]	; (12258 <LorawanClasscTxDone+0xb0>)
   121e2:	4798      	blx	r3
   121e4:	23fa      	movs	r3, #250	; 0xfa
   121e6:	009b      	lsls	r3, r3, #2
   121e8:	1975      	adds	r5, r6, r5
   121ea:	18c9      	adds	r1, r1, r3
   121ec:	194d      	adds	r5, r1, r5
   121ee:	0023      	movs	r3, r4
   121f0:	3394      	adds	r3, #148	; 0x94
   121f2:	781b      	ldrb	r3, [r3, #0]
   121f4:	07db      	lsls	r3, r3, #31
   121f6:	d411      	bmi.n	1221c <LorawanClasscTxDone+0x74>
   121f8:	0023      	movs	r3, r4
   121fa:	0022      	movs	r2, r4
   121fc:	33e1      	adds	r3, #225	; 0xe1
   121fe:	781b      	ldrb	r3, [r3, #0]
   12200:	32e3      	adds	r2, #227	; 0xe3
   12202:	7812      	ldrb	r2, [r2, #0]
   12204:	3301      	adds	r3, #1
   12206:	4293      	cmp	r3, r2
   12208:	db08      	blt.n	1221c <LorawanClasscTxDone+0x74>
   1220a:	4b10      	ldr	r3, [pc, #64]	; (1224c <LorawanClasscTxDone+0xa4>)
   1220c:	5ce3      	ldrb	r3, [r4, r3]
   1220e:	2b00      	cmp	r3, #0
   12210:	d004      	beq.n	1221c <LorawanClasscTxDone+0x74>
   12212:	23fa      	movs	r3, #250	; 0xfa
   12214:	00db      	lsls	r3, r3, #3
   12216:	18f6      	adds	r6, r6, r3
   12218:	19ad      	adds	r5, r5, r6
   1221a:	e001      	b.n	12220 <LorawanClasscTxDone+0x78>
   1221c:	2f00      	cmp	r7, #0
   1221e:	d0fb      	beq.n	12218 <LorawanClasscTxDone+0x70>
   12220:	2394      	movs	r3, #148	; 0x94
   12222:	005b      	lsls	r3, r3, #1
   12224:	5ce0      	ldrb	r0, [r4, r3]
   12226:	4b0d      	ldr	r3, [pc, #52]	; (1225c <LorawanClasscTxDone+0xb4>)
   12228:	4798      	blx	r3
   1222a:	34f1      	adds	r4, #241	; 0xf1
   1222c:	21fa      	movs	r1, #250	; 0xfa
   1222e:	7820      	ldrb	r0, [r4, #0]
   12230:	2400      	movs	r4, #0
   12232:	0089      	lsls	r1, r1, #2
   12234:	4369      	muls	r1, r5
   12236:	0022      	movs	r2, r4
   12238:	4d09      	ldr	r5, [pc, #36]	; (12260 <LorawanClasscTxDone+0xb8>)
   1223a:	9400      	str	r4, [sp, #0]
   1223c:	4b09      	ldr	r3, [pc, #36]	; (12264 <LorawanClasscTxDone+0xbc>)
   1223e:	47a8      	blx	r5
   12240:	0020      	movs	r0, r4
   12242:	4b09      	ldr	r3, [pc, #36]	; (12268 <LorawanClasscTxDone+0xc0>)
   12244:	4798      	blx	r3
   12246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12248:	200029a4 	.word	0x200029a4
   1224c:	0000022a 	.word	0x0000022a
   12250:	00017895 	.word	0x00017895
   12254:	000147e9 	.word	0x000147e9
   12258:	000007d1 	.word	0x000007d1
   1225c:	0000ce4d 	.word	0x0000ce4d
   12260:	0000cb35 	.word	0x0000cb35
   12264:	000100d5 	.word	0x000100d5
   12268:	00010215 	.word	0x00010215

0001226c <LorawanClasscRxTimeout>:
   1226c:	4a0c      	ldr	r2, [pc, #48]	; (122a0 <LorawanClasscRxTimeout+0x34>)
   1226e:	b510      	push	{r4, lr}
   12270:	0010      	movs	r0, r2
   12272:	3084      	adds	r0, #132	; 0x84
   12274:	7803      	ldrb	r3, [r0, #0]
   12276:	240e      	movs	r4, #14
   12278:	0019      	movs	r1, r3
   1227a:	4021      	ands	r1, r4
   1227c:	2906      	cmp	r1, #6
   1227e:	d107      	bne.n	12290 <LorawanClasscRxTimeout+0x24>
   12280:	2208      	movs	r2, #8
   12282:	43a3      	bics	r3, r4
   12284:	4313      	orrs	r3, r2
   12286:	7003      	strb	r3, [r0, #0]
   12288:	2000      	movs	r0, #0
   1228a:	4b06      	ldr	r3, [pc, #24]	; (122a4 <LorawanClasscRxTimeout+0x38>)
   1228c:	4798      	blx	r3
   1228e:	e006      	b.n	1229e <LorawanClasscRxTimeout+0x32>
   12290:	290a      	cmp	r1, #10
   12292:	d1f9      	bne.n	12288 <LorawanClasscRxTimeout+0x1c>
   12294:	2388      	movs	r3, #136	; 0x88
   12296:	009b      	lsls	r3, r3, #2
   12298:	5cd3      	ldrb	r3, [r2, r3]
   1229a:	2b00      	cmp	r3, #0
   1229c:	d0f4      	beq.n	12288 <LorawanClasscRxTimeout+0x1c>
   1229e:	bd10      	pop	{r4, pc}
   122a0:	200029a4 	.word	0x200029a4
   122a4:	00010215 	.word	0x00010215

000122a8 <LorawanClasscNotifyAppOnReceive>:
   122a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122aa:	001f      	movs	r7, r3
   122ac:	2394      	movs	r3, #148	; 0x94
   122ae:	0016      	movs	r6, r2
   122b0:	4a07      	ldr	r2, [pc, #28]	; (122d0 <LorawanClasscNotifyAppOnReceive+0x28>)
   122b2:	005b      	lsls	r3, r3, #1
   122b4:	0004      	movs	r4, r0
   122b6:	5cd0      	ldrb	r0, [r2, r3]
   122b8:	4b06      	ldr	r3, [pc, #24]	; (122d4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   122ba:	000d      	movs	r5, r1
   122bc:	4798      	blx	r3
   122be:	2800      	cmp	r0, #0
   122c0:	d105      	bne.n	122ce <LorawanClasscNotifyAppOnReceive+0x26>
   122c2:	0020      	movs	r0, r4
   122c4:	003b      	movs	r3, r7
   122c6:	0032      	movs	r2, r6
   122c8:	0029      	movs	r1, r5
   122ca:	4c03      	ldr	r4, [pc, #12]	; (122d8 <LorawanClasscNotifyAppOnReceive+0x30>)
   122cc:	47a0      	blx	r4
   122ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122d0:	200029a4 	.word	0x200029a4
   122d4:	0000cccd 	.word	0x0000cccd
   122d8:	0000f2a1 	.word	0x0000f2a1

000122dc <LorawanMcastInit>:
   122dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122de:	2396      	movs	r3, #150	; 0x96
   122e0:	2600      	movs	r6, #0
   122e2:	4c1c      	ldr	r4, [pc, #112]	; (12354 <LorawanMcastInit+0x78>)
   122e4:	005b      	lsls	r3, r3, #1
   122e6:	54e6      	strb	r6, [r4, r3]
   122e8:	232e      	movs	r3, #46	; 0x2e
   122ea:	4d1b      	ldr	r5, [pc, #108]	; (12358 <LorawanMcastInit+0x7c>)
   122ec:	33ff      	adds	r3, #255	; 0xff
   122ee:	54e6      	strb	r6, [r4, r3]
   122f0:	002b      	movs	r3, r5
   122f2:	2201      	movs	r2, #1
   122f4:	3b14      	subs	r3, #20
   122f6:	4252      	negs	r2, r2
   122f8:	601a      	str	r2, [r3, #0]
   122fa:	2100      	movs	r1, #0
   122fc:	3211      	adds	r2, #17
   122fe:	0028      	movs	r0, r5
   12300:	4f16      	ldr	r7, [pc, #88]	; (1235c <LorawanMcastInit+0x80>)
   12302:	47b8      	blx	r7
   12304:	0028      	movs	r0, r5
   12306:	2210      	movs	r2, #16
   12308:	2100      	movs	r1, #0
   1230a:	3810      	subs	r0, #16
   1230c:	47b8      	blx	r7
   1230e:	0023      	movs	r3, r4
   12310:	336e      	adds	r3, #110	; 0x6e
   12312:	781a      	ldrb	r2, [r3, #0]
   12314:	002b      	movs	r3, r5
   12316:	3324      	adds	r3, #36	; 0x24
   12318:	701a      	strb	r2, [r3, #0]
   1231a:	0023      	movs	r3, r4
   1231c:	336a      	adds	r3, #106	; 0x6a
   1231e:	8819      	ldrh	r1, [r3, #0]
   12320:	0023      	movs	r3, r4
   12322:	336c      	adds	r3, #108	; 0x6c
   12324:	881b      	ldrh	r3, [r3, #0]
   12326:	616e      	str	r6, [r5, #20]
   12328:	041b      	lsls	r3, r3, #16
   1232a:	430b      	orrs	r3, r1
   1232c:	490c      	ldr	r1, [pc, #48]	; (12360 <LorawanMcastInit+0x84>)
   1232e:	622b      	str	r3, [r5, #32]
   12330:	61ae      	str	r6, [r5, #24]
   12332:	612e      	str	r6, [r5, #16]
   12334:	353c      	adds	r5, #60	; 0x3c
   12336:	428d      	cmp	r5, r1
   12338:	d1da      	bne.n	122f0 <LorawanMcastInit+0x14>
   1233a:	0021      	movs	r1, r4
   1233c:	3173      	adds	r1, #115	; 0x73
   1233e:	346f      	adds	r4, #111	; 0x6f
   12340:	700a      	strb	r2, [r1, #0]
   12342:	0a1a      	lsrs	r2, r3, #8
   12344:	7023      	strb	r3, [r4, #0]
   12346:	7062      	strb	r2, [r4, #1]
   12348:	0c1a      	lsrs	r2, r3, #16
   1234a:	0e1b      	lsrs	r3, r3, #24
   1234c:	70a2      	strb	r2, [r4, #2]
   1234e:	70e3      	strb	r3, [r4, #3]
   12350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12352:	46c0      	nop			; (mov r8, r8)
   12354:	200029a4 	.word	0x200029a4
   12358:	20002ae8 	.word	0x20002ae8
   1235c:	00017715 	.word	0x00017715
   12360:	20002bd8 	.word	0x20002bd8

00012364 <LorawanMcastEnable>:
   12364:	0002      	movs	r2, r0
   12366:	b510      	push	{r4, lr}
   12368:	200a      	movs	r0, #10
   1236a:	2903      	cmp	r1, #3
   1236c:	d822      	bhi.n	123b4 <LorawanMcastEnable+0x50>
   1236e:	4b1a      	ldr	r3, [pc, #104]	; (123d8 <LorawanMcastEnable+0x74>)
   12370:	2a00      	cmp	r2, #0
   12372:	d020      	beq.n	123b6 <LorawanMcastEnable+0x52>
   12374:	223c      	movs	r2, #60	; 0x3c
   12376:	434a      	muls	r2, r1
   12378:	189a      	adds	r2, r3, r2
   1237a:	3259      	adds	r2, #89	; 0x59
   1237c:	32ff      	adds	r2, #255	; 0xff
   1237e:	7a12      	ldrb	r2, [r2, #8]
   12380:	0754      	lsls	r4, r2, #29
   12382:	d512      	bpl.n	123aa <LorawanMcastEnable+0x46>
   12384:	0794      	lsls	r4, r2, #30
   12386:	d510      	bpl.n	123aa <LorawanMcastEnable+0x46>
   12388:	07d2      	lsls	r2, r2, #31
   1238a:	0fd2      	lsrs	r2, r2, #31
   1238c:	2a01      	cmp	r2, #1
   1238e:	d10c      	bne.n	123aa <LorawanMcastEnable+0x46>
   12390:	001c      	movs	r4, r3
   12392:	34fd      	adds	r4, #253	; 0xfd
   12394:	7824      	ldrb	r4, [r4, #0]
   12396:	0764      	lsls	r4, r4, #29
   12398:	d007      	beq.n	123aa <LorawanMcastEnable+0x46>
   1239a:	202e      	movs	r0, #46	; 0x2e
   1239c:	408a      	lsls	r2, r1
   1239e:	30ff      	adds	r0, #255	; 0xff
   123a0:	5c19      	ldrb	r1, [r3, r0]
   123a2:	430a      	orrs	r2, r1
   123a4:	541a      	strb	r2, [r3, r0]
   123a6:	3826      	subs	r0, #38	; 0x26
   123a8:	38ff      	subs	r0, #255	; 0xff
   123aa:	2196      	movs	r1, #150	; 0x96
   123ac:	0049      	lsls	r1, r1, #1
   123ae:	5c5a      	ldrb	r2, [r3, r1]
   123b0:	3201      	adds	r2, #1
   123b2:	545a      	strb	r2, [r3, r1]
   123b4:	bd10      	pop	{r4, pc}
   123b6:	2201      	movs	r2, #1
   123b8:	408a      	lsls	r2, r1
   123ba:	202e      	movs	r0, #46	; 0x2e
   123bc:	0011      	movs	r1, r2
   123be:	30ff      	adds	r0, #255	; 0xff
   123c0:	5c1a      	ldrb	r2, [r3, r0]
   123c2:	438a      	bics	r2, r1
   123c4:	2196      	movs	r1, #150	; 0x96
   123c6:	541a      	strb	r2, [r3, r0]
   123c8:	0049      	lsls	r1, r1, #1
   123ca:	5c5a      	ldrb	r2, [r3, r1]
   123cc:	3826      	subs	r0, #38	; 0x26
   123ce:	3a01      	subs	r2, #1
   123d0:	545a      	strb	r2, [r3, r1]
   123d2:	38ff      	subs	r0, #255	; 0xff
   123d4:	e7ee      	b.n	123b4 <LorawanMcastEnable+0x50>
   123d6:	46c0      	nop			; (mov r8, r8)
   123d8:	200029a4 	.word	0x200029a4

000123dc <LorawanMcastValidateHdr>:
   123dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123de:	469c      	mov	ip, r3
   123e0:	2400      	movs	r4, #0
   123e2:	230a      	movs	r3, #10
   123e4:	4f18      	ldr	r7, [pc, #96]	; (12448 <LorawanMcastValidateHdr+0x6c>)
   123e6:	b2e5      	uxtb	r5, r4
   123e8:	9501      	str	r5, [sp, #4]
   123ea:	252e      	movs	r5, #46	; 0x2e
   123ec:	35ff      	adds	r5, #255	; 0xff
   123ee:	5d7d      	ldrb	r5, [r7, r5]
   123f0:	2601      	movs	r6, #1
   123f2:	4125      	asrs	r5, r4
   123f4:	4235      	tst	r5, r6
   123f6:	d022      	beq.n	1243e <LorawanMcastValidateHdr+0x62>
   123f8:	7886      	ldrb	r6, [r0, #2]
   123fa:	7845      	ldrb	r5, [r0, #1]
   123fc:	0236      	lsls	r6, r6, #8
   123fe:	432e      	orrs	r6, r5
   12400:	78c5      	ldrb	r5, [r0, #3]
   12402:	042d      	lsls	r5, r5, #16
   12404:	432e      	orrs	r6, r5
   12406:	7905      	ldrb	r5, [r0, #4]
   12408:	062d      	lsls	r5, r5, #24
   1240a:	4335      	orrs	r5, r6
   1240c:	263c      	movs	r6, #60	; 0x3c
   1240e:	4366      	muls	r6, r4
   12410:	3631      	adds	r6, #49	; 0x31
   12412:	36ff      	adds	r6, #255	; 0xff
   12414:	59be      	ldr	r6, [r7, r6]
   12416:	42b5      	cmp	r5, r6
   12418:	d111      	bne.n	1243e <LorawanMcastValidateHdr+0x62>
   1241a:	4d0c      	ldr	r5, [pc, #48]	; (1244c <LorawanMcastValidateHdr+0x70>)
   1241c:	782e      	ldrb	r6, [r5, #0]
   1241e:	2506      	movs	r5, #6
   12420:	422e      	tst	r6, r5
   12422:	d00c      	beq.n	1243e <LorawanMcastValidateHdr+0x62>
   12424:	2a00      	cmp	r2, #0
   12426:	d00a      	beq.n	1243e <LorawanMcastValidateHdr+0x62>
   12428:	7946      	ldrb	r6, [r0, #5]
   1242a:	3569      	adds	r5, #105	; 0x69
   1242c:	422e      	tst	r6, r5
   1242e:	d106      	bne.n	1243e <LorawanMcastValidateHdr+0x62>
   12430:	2903      	cmp	r1, #3
   12432:	d104      	bne.n	1243e <LorawanMcastValidateHdr+0x62>
   12434:	466d      	mov	r5, sp
   12436:	4663      	mov	r3, ip
   12438:	792d      	ldrb	r5, [r5, #4]
   1243a:	701d      	strb	r5, [r3, #0]
   1243c:	2308      	movs	r3, #8
   1243e:	3401      	adds	r4, #1
   12440:	2c04      	cmp	r4, #4
   12442:	d1d0      	bne.n	123e6 <LorawanMcastValidateHdr+0xa>
   12444:	0018      	movs	r0, r3
   12446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12448:	200029a4 	.word	0x200029a4
   1244c:	20002aa1 	.word	0x20002aa1

00012450 <LorawanMcastProcessPkt>:
   12450:	b5f0      	push	{r4, r5, r6, r7, lr}
   12452:	0015      	movs	r5, r2
   12454:	223c      	movs	r2, #60	; 0x3c
   12456:	435a      	muls	r2, r3
   12458:	b089      	sub	sp, #36	; 0x24
   1245a:	9107      	str	r1, [sp, #28]
   1245c:	493f      	ldr	r1, [pc, #252]	; (1255c <LorawanMcastProcessPkt+0x10c>)
   1245e:	9006      	str	r0, [sp, #24]
   12460:	1889      	adds	r1, r1, r2
   12462:	31fc      	adds	r1, #252	; 0xfc
   12464:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   12466:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12468:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   1246a:	4284      	cmp	r4, r0
   1246c:	d224      	bcs.n	124b8 <LorawanMcastProcessPkt+0x68>
   1246e:	2100      	movs	r1, #0
   12470:	4294      	cmp	r4, r2
   12472:	d802      	bhi.n	1247a <LorawanMcastProcessPkt+0x2a>
   12474:	4282      	cmp	r2, r0
   12476:	4192      	sbcs	r2, r2
   12478:	4251      	negs	r1, r2
   1247a:	270a      	movs	r7, #10
   1247c:	2900      	cmp	r1, #0
   1247e:	d11d      	bne.n	124bc <LorawanMcastProcessPkt+0x6c>
   12480:	4a36      	ldr	r2, [pc, #216]	; (1255c <LorawanMcastProcessPkt+0x10c>)
   12482:	210e      	movs	r1, #14
   12484:	0010      	movs	r0, r2
   12486:	3084      	adds	r0, #132	; 0x84
   12488:	7803      	ldrb	r3, [r0, #0]
   1248a:	001c      	movs	r4, r3
   1248c:	400c      	ands	r4, r1
   1248e:	2c06      	cmp	r4, #6
   12490:	d108      	bne.n	124a4 <LorawanMcastProcessPkt+0x54>
   12492:	0014      	movs	r4, r2
   12494:	34fd      	adds	r4, #253	; 0xfd
   12496:	7824      	ldrb	r4, [r4, #0]
   12498:	2c04      	cmp	r4, #4
   1249a:	d103      	bne.n	124a4 <LorawanMcastProcessPkt+0x54>
   1249c:	438b      	bics	r3, r1
   1249e:	3904      	subs	r1, #4
   124a0:	430b      	orrs	r3, r1
   124a2:	7003      	strb	r3, [r0, #0]
   124a4:	2390      	movs	r3, #144	; 0x90
   124a6:	2101      	movs	r1, #1
   124a8:	009b      	lsls	r3, r3, #2
   124aa:	54d1      	strb	r1, [r2, r3]
   124ac:	2000      	movs	r0, #0
   124ae:	4b2c      	ldr	r3, [pc, #176]	; (12560 <LorawanMcastProcessPkt+0x110>)
   124b0:	4798      	blx	r3
   124b2:	0038      	movs	r0, r7
   124b4:	b009      	add	sp, #36	; 0x24
   124b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124b8:	4294      	cmp	r4, r2
   124ba:	d8db      	bhi.n	12474 <LorawanMcastProcessPkt+0x24>
   124bc:	243c      	movs	r4, #60	; 0x3c
   124be:	435c      	muls	r4, r3
   124c0:	4e26      	ldr	r6, [pc, #152]	; (1255c <LorawanMcastProcessPkt+0x10c>)
   124c2:	79ea      	ldrb	r2, [r5, #7]
   124c4:	1937      	adds	r7, r6, r4
   124c6:	003b      	movs	r3, r7
   124c8:	79a9      	ldrb	r1, [r5, #6]
   124ca:	0212      	lsls	r2, r2, #8
   124cc:	3355      	adds	r3, #85	; 0x55
   124ce:	430a      	orrs	r2, r1
   124d0:	33ff      	adds	r3, #255	; 0xff
   124d2:	801a      	strh	r2, [r3, #0]
   124d4:	2105      	movs	r1, #5
   124d6:	4b23      	ldr	r3, [pc, #140]	; (12564 <LorawanMcastProcessPkt+0x114>)
   124d8:	37fc      	adds	r7, #252	; 0xfc
   124da:	2000      	movs	r0, #0
   124dc:	4798      	blx	r3
   124de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   124e0:	3445      	adds	r4, #69	; 0x45
   124e2:	9304      	str	r3, [sp, #16]
   124e4:	4b20      	ldr	r3, [pc, #128]	; (12568 <LorawanMcastProcessPkt+0x118>)
   124e6:	9907      	ldr	r1, [sp, #28]
   124e8:	9303      	str	r3, [sp, #12]
   124ea:	2319      	movs	r3, #25
   124ec:	34ff      	adds	r4, #255	; 0xff
   124ee:	9302      	str	r3, [sp, #8]
   124f0:	19a4      	adds	r4, r4, r6
   124f2:	3b16      	subs	r3, #22
   124f4:	9806      	ldr	r0, [sp, #24]
   124f6:	9400      	str	r4, [sp, #0]
   124f8:	390d      	subs	r1, #13
   124fa:	9301      	str	r3, [sp, #4]
   124fc:	b2c9      	uxtb	r1, r1
   124fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12500:	2201      	movs	r2, #1
   12502:	3009      	adds	r0, #9
   12504:	4c19      	ldr	r4, [pc, #100]	; (1256c <LorawanMcastProcessPkt+0x11c>)
   12506:	47a0      	blx	r4
   12508:	2800      	cmp	r0, #0
   1250a:	d002      	beq.n	12512 <LorawanMcastProcessPkt+0xc2>
   1250c:	201f      	movs	r0, #31
   1250e:	4b18      	ldr	r3, [pc, #96]	; (12570 <LorawanMcastProcessPkt+0x120>)
   12510:	4798      	blx	r3
   12512:	4918      	ldr	r1, [pc, #96]	; (12574 <LorawanMcastProcessPkt+0x124>)
   12514:	2708      	movs	r7, #8
   12516:	784a      	ldrb	r2, [r1, #1]
   12518:	780b      	ldrb	r3, [r1, #0]
   1251a:	0212      	lsls	r2, r2, #8
   1251c:	431a      	orrs	r2, r3
   1251e:	788b      	ldrb	r3, [r1, #2]
   12520:	041b      	lsls	r3, r3, #16
   12522:	431a      	orrs	r2, r3
   12524:	78cb      	ldrb	r3, [r1, #3]
   12526:	061b      	lsls	r3, r3, #24
   12528:	4313      	orrs	r3, r2
   1252a:	d0a9      	beq.n	12480 <LorawanMcastProcessPkt+0x30>
   1252c:	2220      	movs	r2, #32
   1252e:	3694      	adds	r6, #148	; 0x94
   12530:	7833      	ldrb	r3, [r6, #0]
   12532:	9906      	ldr	r1, [sp, #24]
   12534:	4393      	bics	r3, r2
   12536:	7033      	strb	r3, [r6, #0]
   12538:	78ab      	ldrb	r3, [r5, #2]
   1253a:	7868      	ldrb	r0, [r5, #1]
   1253c:	40bb      	lsls	r3, r7
   1253e:	4303      	orrs	r3, r0
   12540:	78e8      	ldrb	r0, [r5, #3]
   12542:	9a07      	ldr	r2, [sp, #28]
   12544:	0400      	lsls	r0, r0, #16
   12546:	4303      	orrs	r3, r0
   12548:	7928      	ldrb	r0, [r5, #4]
   1254a:	3a0c      	subs	r2, #12
   1254c:	0600      	lsls	r0, r0, #24
   1254e:	4318      	orrs	r0, r3
   12550:	b2d2      	uxtb	r2, r2
   12552:	19c9      	adds	r1, r1, r7
   12554:	003b      	movs	r3, r7
   12556:	4c08      	ldr	r4, [pc, #32]	; (12578 <LorawanMcastProcessPkt+0x128>)
   12558:	47a0      	blx	r4
   1255a:	e791      	b.n	12480 <LorawanMcastProcessPkt+0x30>
   1255c:	200029a4 	.word	0x200029a4
   12560:	00010215 	.word	0x00010215
   12564:	0000be05 	.word	0x0000be05
   12568:	20002d08 	.word	0x20002d08
   1256c:	0000f17d 	.word	0x0000f17d
   12570:	0000f23d 	.word	0x0000f23d
   12574:	20002d00 	.word	0x20002d00
   12578:	0000f2a1 	.word	0x0000f2a1

0001257c <LorawanAddMcastAddr>:
   1257c:	b570      	push	{r4, r5, r6, lr}
   1257e:	260a      	movs	r6, #10
   12580:	2903      	cmp	r1, #3
   12582:	d818      	bhi.n	125b6 <LorawanAddMcastAddr+0x3a>
   12584:	4b0d      	ldr	r3, [pc, #52]	; (125bc <LorawanAddMcastAddr+0x40>)
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	0a15      	lsrs	r5, r2, #8
   1258a:	791a      	ldrb	r2, [r3, #4]
   1258c:	0612      	lsls	r2, r2, #24
   1258e:	432a      	orrs	r2, r5
   12590:	4282      	cmp	r2, r0
   12592:	d010      	beq.n	125b6 <LorawanAddMcastAddr+0x3a>
   12594:	243c      	movs	r4, #60	; 0x3c
   12596:	434c      	muls	r4, r1
   12598:	191c      	adds	r4, r3, r4
   1259a:	0023      	movs	r3, r4
   1259c:	33fc      	adds	r3, #252	; 0xfc
   1259e:	6358      	str	r0, [r3, #52]	; 0x34
   125a0:	2106      	movs	r1, #6
   125a2:	2000      	movs	r0, #0
   125a4:	4b06      	ldr	r3, [pc, #24]	; (125c0 <LorawanAddMcastAddr+0x44>)
   125a6:	4798      	blx	r3
   125a8:	2201      	movs	r2, #1
   125aa:	3459      	adds	r4, #89	; 0x59
   125ac:	34ff      	adds	r4, #255	; 0xff
   125ae:	7a21      	ldrb	r1, [r4, #8]
   125b0:	3e02      	subs	r6, #2
   125b2:	430a      	orrs	r2, r1
   125b4:	7222      	strb	r2, [r4, #8]
   125b6:	0030      	movs	r0, r6
   125b8:	bd70      	pop	{r4, r5, r6, pc}
   125ba:	46c0      	nop			; (mov r8, r8)
   125bc:	200029a4 	.word	0x200029a4
   125c0:	0000be05 	.word	0x0000be05

000125c4 <LorawanAddMcastAppskey>:
   125c4:	b570      	push	{r4, r5, r6, lr}
   125c6:	0006      	movs	r6, r0
   125c8:	200a      	movs	r0, #10
   125ca:	2903      	cmp	r1, #3
   125cc:	d818      	bhi.n	12600 <LorawanAddMcastAppskey+0x3c>
   125ce:	2e00      	cmp	r6, #0
   125d0:	d016      	beq.n	12600 <LorawanAddMcastAppskey+0x3c>
   125d2:	253c      	movs	r5, #60	; 0x3c
   125d4:	434d      	muls	r5, r1
   125d6:	0028      	movs	r0, r5
   125d8:	4c0a      	ldr	r4, [pc, #40]	; (12604 <LorawanAddMcastAppskey+0x40>)
   125da:	3045      	adds	r0, #69	; 0x45
   125dc:	30ff      	adds	r0, #255	; 0xff
   125de:	2210      	movs	r2, #16
   125e0:	1900      	adds	r0, r0, r4
   125e2:	0031      	movs	r1, r6
   125e4:	4b08      	ldr	r3, [pc, #32]	; (12608 <LorawanAddMcastAppskey+0x44>)
   125e6:	4798      	blx	r3
   125e8:	4b08      	ldr	r3, [pc, #32]	; (1260c <LorawanAddMcastAppskey+0x48>)
   125ea:	2107      	movs	r1, #7
   125ec:	2000      	movs	r0, #0
   125ee:	4798      	blx	r3
   125f0:	2304      	movs	r3, #4
   125f2:	2008      	movs	r0, #8
   125f4:	1964      	adds	r4, r4, r5
   125f6:	3459      	adds	r4, #89	; 0x59
   125f8:	34ff      	adds	r4, #255	; 0xff
   125fa:	7a22      	ldrb	r2, [r4, #8]
   125fc:	4313      	orrs	r3, r2
   125fe:	7223      	strb	r3, [r4, #8]
   12600:	bd70      	pop	{r4, r5, r6, pc}
   12602:	46c0      	nop			; (mov r8, r8)
   12604:	200029a4 	.word	0x200029a4
   12608:	00017691 	.word	0x00017691
   1260c:	0000be05 	.word	0x0000be05

00012610 <LorawanAddMcastNwkskey>:
   12610:	b570      	push	{r4, r5, r6, lr}
   12612:	0006      	movs	r6, r0
   12614:	200a      	movs	r0, #10
   12616:	2903      	cmp	r1, #3
   12618:	d818      	bhi.n	1264c <LorawanAddMcastNwkskey+0x3c>
   1261a:	2e00      	cmp	r6, #0
   1261c:	d016      	beq.n	1264c <LorawanAddMcastNwkskey+0x3c>
   1261e:	253c      	movs	r5, #60	; 0x3c
   12620:	434d      	muls	r5, r1
   12622:	0028      	movs	r0, r5
   12624:	4c0a      	ldr	r4, [pc, #40]	; (12650 <LorawanAddMcastNwkskey+0x40>)
   12626:	3035      	adds	r0, #53	; 0x35
   12628:	30ff      	adds	r0, #255	; 0xff
   1262a:	2210      	movs	r2, #16
   1262c:	1900      	adds	r0, r0, r4
   1262e:	0031      	movs	r1, r6
   12630:	4b08      	ldr	r3, [pc, #32]	; (12654 <LorawanAddMcastNwkskey+0x44>)
   12632:	4798      	blx	r3
   12634:	4b08      	ldr	r3, [pc, #32]	; (12658 <LorawanAddMcastNwkskey+0x48>)
   12636:	2108      	movs	r1, #8
   12638:	2000      	movs	r0, #0
   1263a:	4798      	blx	r3
   1263c:	2302      	movs	r3, #2
   1263e:	2008      	movs	r0, #8
   12640:	1964      	adds	r4, r4, r5
   12642:	3459      	adds	r4, #89	; 0x59
   12644:	34ff      	adds	r4, #255	; 0xff
   12646:	7a22      	ldrb	r2, [r4, #8]
   12648:	4313      	orrs	r3, r2
   1264a:	7223      	strb	r3, [r4, #8]
   1264c:	bd70      	pop	{r4, r5, r6, pc}
   1264e:	46c0      	nop			; (mov r8, r8)
   12650:	200029a4 	.word	0x200029a4
   12654:	00017691 	.word	0x00017691
   12658:	0000be05 	.word	0x0000be05

0001265c <LorawanAddMcastFcntMin>:
   1265c:	220a      	movs	r2, #10
   1265e:	2903      	cmp	r1, #3
   12660:	d807      	bhi.n	12672 <LorawanAddMcastFcntMin+0x16>
   12662:	233c      	movs	r3, #60	; 0x3c
   12664:	434b      	muls	r3, r1
   12666:	4904      	ldr	r1, [pc, #16]	; (12678 <LorawanAddMcastFcntMin+0x1c>)
   12668:	3a02      	subs	r2, #2
   1266a:	18c9      	adds	r1, r1, r3
   1266c:	31fc      	adds	r1, #252	; 0xfc
   1266e:	65c8      	str	r0, [r1, #92]	; 0x5c
   12670:	6588      	str	r0, [r1, #88]	; 0x58
   12672:	0010      	movs	r0, r2
   12674:	4770      	bx	lr
   12676:	46c0      	nop			; (mov r8, r8)
   12678:	200029a4 	.word	0x200029a4

0001267c <LorawanAddMcastFcntMax>:
   1267c:	220a      	movs	r2, #10
   1267e:	2903      	cmp	r1, #3
   12680:	d806      	bhi.n	12690 <LorawanAddMcastFcntMax+0x14>
   12682:	233c      	movs	r3, #60	; 0x3c
   12684:	434b      	muls	r3, r1
   12686:	4903      	ldr	r1, [pc, #12]	; (12694 <LorawanAddMcastFcntMax+0x18>)
   12688:	3a02      	subs	r2, #2
   1268a:	18c9      	adds	r1, r1, r3
   1268c:	31fc      	adds	r1, #252	; 0xfc
   1268e:	6608      	str	r0, [r1, #96]	; 0x60
   12690:	0010      	movs	r0, r2
   12692:	4770      	bx	lr
   12694:	200029a4 	.word	0x200029a4

00012698 <LorawanAddMcastDlFrequency>:
   12698:	b513      	push	{r0, r1, r4, lr}
   1269a:	000c      	movs	r4, r1
   1269c:	9001      	str	r0, [sp, #4]
   1269e:	2903      	cmp	r1, #3
   126a0:	d901      	bls.n	126a6 <LorawanAddMcastDlFrequency+0xe>
   126a2:	200a      	movs	r0, #10
   126a4:	bd16      	pop	{r1, r2, r4, pc}
   126a6:	a901      	add	r1, sp, #4
   126a8:	2001      	movs	r0, #1
   126aa:	4b0a      	ldr	r3, [pc, #40]	; (126d4 <LorawanAddMcastDlFrequency+0x3c>)
   126ac:	4798      	blx	r3
   126ae:	2808      	cmp	r0, #8
   126b0:	d1f7      	bne.n	126a2 <LorawanAddMcastDlFrequency+0xa>
   126b2:	213c      	movs	r1, #60	; 0x3c
   126b4:	4361      	muls	r1, r4
   126b6:	4b08      	ldr	r3, [pc, #32]	; (126d8 <LorawanAddMcastDlFrequency+0x40>)
   126b8:	9a01      	ldr	r2, [sp, #4]
   126ba:	1859      	adds	r1, r3, r1
   126bc:	31fc      	adds	r1, #252	; 0xfc
   126be:	336f      	adds	r3, #111	; 0x6f
   126c0:	668a      	str	r2, [r1, #104]	; 0x68
   126c2:	0a11      	lsrs	r1, r2, #8
   126c4:	701a      	strb	r2, [r3, #0]
   126c6:	7059      	strb	r1, [r3, #1]
   126c8:	0c11      	lsrs	r1, r2, #16
   126ca:	0e12      	lsrs	r2, r2, #24
   126cc:	7099      	strb	r1, [r3, #2]
   126ce:	70da      	strb	r2, [r3, #3]
   126d0:	e7e8      	b.n	126a4 <LorawanAddMcastDlFrequency+0xc>
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	0000b6e1 	.word	0x0000b6e1
   126d8:	200029a4 	.word	0x200029a4

000126dc <LorawanAddMcastDatarate>:
   126dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   126de:	466b      	mov	r3, sp
   126e0:	1ddd      	adds	r5, r3, #7
   126e2:	000c      	movs	r4, r1
   126e4:	7028      	strb	r0, [r5, #0]
   126e6:	2903      	cmp	r1, #3
   126e8:	d901      	bls.n	126ee <LorawanAddMcastDatarate+0x12>
   126ea:	200a      	movs	r0, #10
   126ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   126ee:	0029      	movs	r1, r5
   126f0:	200f      	movs	r0, #15
   126f2:	4b07      	ldr	r3, [pc, #28]	; (12710 <LorawanAddMcastDatarate+0x34>)
   126f4:	4798      	blx	r3
   126f6:	2808      	cmp	r0, #8
   126f8:	d1f7      	bne.n	126ea <LorawanAddMcastDatarate+0xe>
   126fa:	213c      	movs	r1, #60	; 0x3c
   126fc:	4361      	muls	r1, r4
   126fe:	4b05      	ldr	r3, [pc, #20]	; (12714 <LorawanAddMcastDatarate+0x38>)
   12700:	782a      	ldrb	r2, [r5, #0]
   12702:	1859      	adds	r1, r3, r1
   12704:	3169      	adds	r1, #105	; 0x69
   12706:	31ff      	adds	r1, #255	; 0xff
   12708:	3373      	adds	r3, #115	; 0x73
   1270a:	700a      	strb	r2, [r1, #0]
   1270c:	701a      	strb	r2, [r3, #0]
   1270e:	e7ed      	b.n	126ec <LorawanAddMcastDatarate+0x10>
   12710:	0000b6e1 	.word	0x0000b6e1
   12714:	200029a4 	.word	0x200029a4

00012718 <LorawanAddMcastPeriodicity>:
   12718:	220a      	movs	r2, #10
   1271a:	2903      	cmp	r1, #3
   1271c:	d809      	bhi.n	12732 <LorawanAddMcastPeriodicity+0x1a>
   1271e:	2807      	cmp	r0, #7
   12720:	d807      	bhi.n	12732 <LorawanAddMcastPeriodicity+0x1a>
   12722:	233c      	movs	r3, #60	; 0x3c
   12724:	434b      	muls	r3, r1
   12726:	4904      	ldr	r1, [pc, #16]	; (12738 <LorawanAddMcastPeriodicity+0x20>)
   12728:	3a02      	subs	r2, #2
   1272a:	18c9      	adds	r1, r1, r3
   1272c:	316a      	adds	r1, #106	; 0x6a
   1272e:	31ff      	adds	r1, #255	; 0xff
   12730:	7008      	strb	r0, [r1, #0]
   12732:	0010      	movs	r0, r2
   12734:	4770      	bx	lr
   12736:	46c0      	nop			; (mov r8, r8)
   12738:	200029a4 	.word	0x200029a4

0001273c <Lorawan_Pds_fid1_CB>:
   1273c:	4770      	bx	lr
	...

00012740 <Lorawan_Pds_fid2_CB>:
   12740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12742:	4c1a      	ldr	r4, [pc, #104]	; (127ac <Lorawan_Pds_fid2_CB+0x6c>)
   12744:	2271      	movs	r2, #113	; 0x71
   12746:	0025      	movs	r5, r4
   12748:	2701      	movs	r7, #1
   1274a:	3584      	adds	r5, #132	; 0x84
   1274c:	782b      	ldrb	r3, [r5, #0]
   1274e:	4013      	ands	r3, r2
   12750:	702b      	strb	r3, [r5, #0]
   12752:	786b      	ldrb	r3, [r5, #1]
   12754:	43bb      	bics	r3, r7
   12756:	706b      	strb	r3, [r5, #1]
   12758:	4b15      	ldr	r3, [pc, #84]	; (127b0 <Lorawan_Pds_fid2_CB+0x70>)
   1275a:	5ce3      	ldrb	r3, [r4, r3]
   1275c:	2b00      	cmp	r3, #0
   1275e:	d018      	beq.n	12792 <Lorawan_Pds_fid2_CB+0x52>
   12760:	4914      	ldr	r1, [pc, #80]	; (127b4 <Lorawan_Pds_fid2_CB+0x74>)
   12762:	2006      	movs	r0, #6
   12764:	4e14      	ldr	r6, [pc, #80]	; (127b8 <Lorawan_Pds_fid2_CB+0x78>)
   12766:	47b0      	blx	r6
   12768:	2800      	cmp	r0, #0
   1276a:	d002      	beq.n	12772 <Lorawan_Pds_fid2_CB+0x32>
   1276c:	782b      	ldrb	r3, [r5, #0]
   1276e:	43bb      	bics	r3, r7
   12770:	702b      	strb	r3, [r5, #0]
   12772:	0023      	movs	r3, r4
   12774:	2501      	movs	r5, #1
   12776:	3384      	adds	r3, #132	; 0x84
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	422b      	tst	r3, r5
   1277c:	d008      	beq.n	12790 <Lorawan_Pds_fid2_CB+0x50>
   1277e:	7823      	ldrb	r3, [r4, #0]
   12780:	2b00      	cmp	r3, #0
   12782:	d106      	bne.n	12792 <Lorawan_Pds_fid2_CB+0x52>
   12784:	490d      	ldr	r1, [pc, #52]	; (127bc <Lorawan_Pds_fid2_CB+0x7c>)
   12786:	2002      	movs	r0, #2
   12788:	47b0      	blx	r6
   1278a:	490d      	ldr	r1, [pc, #52]	; (127c0 <Lorawan_Pds_fid2_CB+0x80>)
   1278c:	0028      	movs	r0, r5
   1278e:	47b0      	blx	r6
   12790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12792:	0020      	movs	r0, r4
   12794:	0021      	movs	r1, r4
   12796:	2210      	movs	r2, #16
   12798:	3115      	adds	r1, #21
   1279a:	4d0a      	ldr	r5, [pc, #40]	; (127c4 <Lorawan_Pds_fid2_CB+0x84>)
   1279c:	3035      	adds	r0, #53	; 0x35
   1279e:	47a8      	blx	r5
   127a0:	0020      	movs	r0, r4
   127a2:	1d61      	adds	r1, r4, #5
   127a4:	2210      	movs	r2, #16
   127a6:	3025      	adds	r0, #37	; 0x25
   127a8:	47a8      	blx	r5
   127aa:	e7f1      	b.n	12790 <Lorawan_Pds_fid2_CB+0x50>
   127ac:	200029a4 	.word	0x200029a4
   127b0:	0000022d 	.word	0x0000022d
   127b4:	200029f9 	.word	0x200029f9
   127b8:	0000bb0d 	.word	0x0000bb0d
   127bc:	200029c9 	.word	0x200029c9
   127c0:	200029d9 	.word	0x200029d9
   127c4:	00017691 	.word	0x00017691

000127c8 <LORAWAN_TxHandler>:
   127c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   127ca:	b087      	sub	sp, #28
   127cc:	466b      	mov	r3, sp
   127ce:	2501      	movs	r5, #1
   127d0:	4c2f      	ldr	r4, [pc, #188]	; (12890 <LORAWAN_TxHandler+0xc8>)
   127d2:	701d      	strb	r5, [r3, #0]
   127d4:	0023      	movs	r3, r4
   127d6:	466a      	mov	r2, sp
   127d8:	33e9      	adds	r3, #233	; 0xe9
   127da:	781b      	ldrb	r3, [r3, #0]
   127dc:	4669      	mov	r1, sp
   127de:	7053      	strb	r3, [r2, #1]
   127e0:	0023      	movs	r3, r4
   127e2:	33e7      	adds	r3, #231	; 0xe7
   127e4:	781b      	ldrb	r3, [r3, #0]
   127e6:	202e      	movs	r0, #46	; 0x2e
   127e8:	7093      	strb	r3, [r2, #2]
   127ea:	aa03      	add	r2, sp, #12
   127ec:	4b29      	ldr	r3, [pc, #164]	; (12894 <LORAWAN_TxHandler+0xcc>)
   127ee:	4798      	blx	r3
   127f0:	2808      	cmp	r0, #8
   127f2:	d004      	beq.n	127fe <LORAWAN_TxHandler+0x36>
   127f4:	4b28      	ldr	r3, [pc, #160]	; (12898 <LORAWAN_TxHandler+0xd0>)
   127f6:	4798      	blx	r3
   127f8:	2000      	movs	r0, #0
   127fa:	b007      	add	sp, #28
   127fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127fe:	0023      	movs	r3, r4
   12800:	33fd      	adds	r3, #253	; 0xfd
   12802:	781b      	ldrb	r3, [r3, #0]
   12804:	ae01      	add	r6, sp, #4
   12806:	2b04      	cmp	r3, #4
   12808:	d103      	bne.n	12812 <LORAWAN_TxHandler+0x4a>
   1280a:	0030      	movs	r0, r6
   1280c:	4b23      	ldr	r3, [pc, #140]	; (1289c <LORAWAN_TxHandler+0xd4>)
   1280e:	7035      	strb	r5, [r6, #0]
   12810:	4798      	blx	r3
   12812:	4b23      	ldr	r3, [pc, #140]	; (128a0 <LORAWAN_TxHandler+0xd8>)
   12814:	9803      	ldr	r0, [sp, #12]
   12816:	9904      	ldr	r1, [sp, #16]
   12818:	9a05      	ldr	r2, [sp, #20]
   1281a:	4798      	blx	r3
   1281c:	0023      	movs	r3, r4
   1281e:	33fc      	adds	r3, #252	; 0xfc
   12820:	68dd      	ldr	r5, [r3, #12]
   12822:	4f20      	ldr	r7, [pc, #128]	; (128a4 <LORAWAN_TxHandler+0xdc>)
   12824:	4b20      	ldr	r3, [pc, #128]	; (128a8 <LORAWAN_TxHandler+0xe0>)
   12826:	2d00      	cmp	r5, #0
   12828:	d023      	beq.n	12872 <LORAWAN_TxHandler+0xaa>
   1282a:	2201      	movs	r2, #1
   1282c:	54e2      	strb	r2, [r4, r3]
   1282e:	7828      	ldrb	r0, [r5, #0]
   12830:	7a2b      	ldrb	r3, [r5, #8]
   12832:	1e42      	subs	r2, r0, #1
   12834:	4190      	sbcs	r0, r2
   12836:	7869      	ldrb	r1, [r5, #1]
   12838:	686a      	ldr	r2, [r5, #4]
   1283a:	b2c0      	uxtb	r0, r0
   1283c:	47b8      	blx	r7
   1283e:	0023      	movs	r3, r4
   12840:	33ce      	adds	r3, #206	; 0xce
   12842:	881b      	ldrh	r3, [r3, #0]
   12844:	0030      	movs	r0, r6
   12846:	7033      	strb	r3, [r6, #0]
   12848:	4b18      	ldr	r3, [pc, #96]	; (128ac <LORAWAN_TxHandler+0xe4>)
   1284a:	6073      	str	r3, [r6, #4]
   1284c:	4b18      	ldr	r3, [pc, #96]	; (128b0 <LORAWAN_TxHandler+0xe8>)
   1284e:	4798      	blx	r3
   12850:	2800      	cmp	r0, #0
   12852:	d114      	bne.n	1287e <LORAWAN_TxHandler+0xb6>
   12854:	0021      	movs	r1, r4
   12856:	220e      	movs	r2, #14
   12858:	3184      	adds	r1, #132	; 0x84
   1285a:	780b      	ldrb	r3, [r1, #0]
   1285c:	4393      	bics	r3, r2
   1285e:	001a      	movs	r2, r3
   12860:	2302      	movs	r3, #2
   12862:	4313      	orrs	r3, r2
   12864:	700b      	strb	r3, [r1, #0]
   12866:	2208      	movs	r2, #8
   12868:	3494      	adds	r4, #148	; 0x94
   1286a:	7823      	ldrb	r3, [r4, #0]
   1286c:	4393      	bics	r3, r2
   1286e:	7023      	strb	r3, [r4, #0]
   12870:	e7c2      	b.n	127f8 <LORAWAN_TxHandler+0x30>
   12872:	54e5      	strb	r5, [r4, r3]
   12874:	002a      	movs	r2, r5
   12876:	002b      	movs	r3, r5
   12878:	0029      	movs	r1, r5
   1287a:	0028      	movs	r0, r5
   1287c:	e7de      	b.n	1283c <LORAWAN_TxHandler+0x74>
   1287e:	0022      	movs	r2, r4
   12880:	2120      	movs	r1, #32
   12882:	3294      	adds	r2, #148	; 0x94
   12884:	7813      	ldrb	r3, [r2, #0]
   12886:	438b      	bics	r3, r1
   12888:	7013      	strb	r3, [r2, #0]
   1288a:	4b03      	ldr	r3, [pc, #12]	; (12898 <LORAWAN_TxHandler+0xd0>)
   1288c:	4798      	blx	r3
   1288e:	e7ea      	b.n	12866 <LORAWAN_TxHandler+0x9e>
   12890:	200029a4 	.word	0x200029a4
   12894:	0000b6c5 	.word	0x0000b6c5
   12898:	0000f23d 	.word	0x0000f23d
   1289c:	00013d35 	.word	0x00013d35
   128a0:	0000eca5 	.word	0x0000eca5
   128a4:	00011c51 	.word	0x00011c51
   128a8:	0000022a 	.word	0x0000022a
   128ac:	20002bfd 	.word	0x20002bfd
   128b0:	00013461 	.word	0x00013461

000128b4 <LORAWAN_JoinReqHandler>:
   128b4:	b530      	push	{r4, r5, lr}
   128b6:	b087      	sub	sp, #28
   128b8:	466a      	mov	r2, sp
   128ba:	2300      	movs	r3, #0
   128bc:	4c25      	ldr	r4, [pc, #148]	; (12954 <LORAWAN_JoinReqHandler+0xa0>)
   128be:	7013      	strb	r3, [r2, #0]
   128c0:	0023      	movs	r3, r4
   128c2:	33e9      	adds	r3, #233	; 0xe9
   128c4:	781b      	ldrb	r3, [r3, #0]
   128c6:	7053      	strb	r3, [r2, #1]
   128c8:	0023      	movs	r3, r4
   128ca:	33e7      	adds	r3, #231	; 0xe7
   128cc:	781b      	ldrb	r3, [r3, #0]
   128ce:	7093      	strb	r3, [r2, #2]
   128d0:	0023      	movs	r3, r4
   128d2:	33ff      	adds	r3, #255	; 0xff
   128d4:	7f5b      	ldrb	r3, [r3, #29]
   128d6:	069b      	lsls	r3, r3, #26
   128d8:	d507      	bpl.n	128ea <LORAWAN_JoinReqHandler+0x36>
   128da:	6f63      	ldr	r3, [r4, #116]	; 0x74
   128dc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   128de:	4313      	orrs	r3, r2
   128e0:	d103      	bne.n	128ea <LORAWAN_JoinReqHandler+0x36>
   128e2:	0023      	movs	r3, r4
   128e4:	2201      	movs	r2, #1
   128e6:	3380      	adds	r3, #128	; 0x80
   128e8:	701a      	strb	r2, [r3, #0]
   128ea:	aa03      	add	r2, sp, #12
   128ec:	4669      	mov	r1, sp
   128ee:	202e      	movs	r0, #46	; 0x2e
   128f0:	4b19      	ldr	r3, [pc, #100]	; (12958 <LORAWAN_JoinReqHandler+0xa4>)
   128f2:	4798      	blx	r3
   128f4:	2808      	cmp	r0, #8
   128f6:	d004      	beq.n	12902 <LORAWAN_JoinReqHandler+0x4e>
   128f8:	4b18      	ldr	r3, [pc, #96]	; (1295c <LORAWAN_JoinReqHandler+0xa8>)
   128fa:	4798      	blx	r3
   128fc:	2000      	movs	r0, #0
   128fe:	b007      	add	sp, #28
   12900:	bd30      	pop	{r4, r5, pc}
   12902:	4b17      	ldr	r3, [pc, #92]	; (12960 <LORAWAN_JoinReqHandler+0xac>)
   12904:	9803      	ldr	r0, [sp, #12]
   12906:	9904      	ldr	r1, [sp, #16]
   12908:	9a05      	ldr	r2, [sp, #20]
   1290a:	4798      	blx	r3
   1290c:	0023      	movs	r3, r4
   1290e:	33fd      	adds	r3, #253	; 0xfd
   12910:	781b      	ldrb	r3, [r3, #0]
   12912:	ad01      	add	r5, sp, #4
   12914:	2b04      	cmp	r3, #4
   12916:	d104      	bne.n	12922 <LORAWAN_JoinReqHandler+0x6e>
   12918:	3b03      	subs	r3, #3
   1291a:	702b      	strb	r3, [r5, #0]
   1291c:	0028      	movs	r0, r5
   1291e:	4b11      	ldr	r3, [pc, #68]	; (12964 <LORAWAN_JoinReqHandler+0xb0>)
   12920:	4798      	blx	r3
   12922:	2200      	movs	r2, #0
   12924:	4b10      	ldr	r3, [pc, #64]	; (12968 <LORAWAN_JoinReqHandler+0xb4>)
   12926:	54e2      	strb	r2, [r4, r3]
   12928:	4b10      	ldr	r3, [pc, #64]	; (1296c <LORAWAN_JoinReqHandler+0xb8>)
   1292a:	4798      	blx	r3
   1292c:	4b10      	ldr	r3, [pc, #64]	; (12970 <LORAWAN_JoinReqHandler+0xbc>)
   1292e:	7028      	strb	r0, [r5, #0]
   12930:	606b      	str	r3, [r5, #4]
   12932:	0028      	movs	r0, r5
   12934:	4b0f      	ldr	r3, [pc, #60]	; (12974 <LORAWAN_JoinReqHandler+0xc0>)
   12936:	4798      	blx	r3
   12938:	2800      	cmp	r0, #0
   1293a:	d001      	beq.n	12940 <LORAWAN_JoinReqHandler+0x8c>
   1293c:	201b      	movs	r0, #27
   1293e:	e7db      	b.n	128f8 <LORAWAN_JoinReqHandler+0x44>
   12940:	220e      	movs	r2, #14
   12942:	3484      	adds	r4, #132	; 0x84
   12944:	7823      	ldrb	r3, [r4, #0]
   12946:	4393      	bics	r3, r2
   12948:	001a      	movs	r2, r3
   1294a:	2302      	movs	r3, #2
   1294c:	4313      	orrs	r3, r2
   1294e:	7023      	strb	r3, [r4, #0]
   12950:	e7d4      	b.n	128fc <LORAWAN_JoinReqHandler+0x48>
   12952:	46c0      	nop			; (mov r8, r8)
   12954:	200029a4 	.word	0x200029a4
   12958:	0000b6c5 	.word	0x0000b6c5
   1295c:	0000e6f1 	.word	0x0000e6f1
   12960:	0000eca5 	.word	0x0000eca5
   12964:	00013d35 	.word	0x00013d35
   12968:	0000022a 	.word	0x0000022a
   1296c:	0000eaed 	.word	0x0000eaed
   12970:	20002bed 	.word	0x20002bed
   12974:	00013461 	.word	0x00013461

00012978 <LORAWAN_RxHandler>:
   12978:	b513      	push	{r0, r1, r4, lr}
   1297a:	4b0c      	ldr	r3, [pc, #48]	; (129ac <LORAWAN_RxHandler+0x34>)
   1297c:	781b      	ldrb	r3, [r3, #0]
   1297e:	2b08      	cmp	r3, #8
   12980:	d011      	beq.n	129a6 <LORAWAN_RxHandler+0x2e>
   12982:	2b10      	cmp	r3, #16
   12984:	d001      	beq.n	1298a <LORAWAN_RxHandler+0x12>
   12986:	2b01      	cmp	r3, #1
   12988:	d10b      	bne.n	129a2 <LORAWAN_RxHandler+0x2a>
   1298a:	466b      	mov	r3, sp
   1298c:	1c9c      	adds	r4, r3, #2
   1298e:	0021      	movs	r1, r4
   12990:	a801      	add	r0, sp, #4
   12992:	4b07      	ldr	r3, [pc, #28]	; (129b0 <LORAWAN_RxHandler+0x38>)
   12994:	4798      	blx	r3
   12996:	9801      	ldr	r0, [sp, #4]
   12998:	2800      	cmp	r0, #0
   1299a:	d002      	beq.n	129a2 <LORAWAN_RxHandler+0x2a>
   1299c:	7821      	ldrb	r1, [r4, #0]
   1299e:	4b05      	ldr	r3, [pc, #20]	; (129b4 <LORAWAN_RxHandler+0x3c>)
   129a0:	4798      	blx	r3
   129a2:	2000      	movs	r0, #0
   129a4:	bd16      	pop	{r1, r2, r4, pc}
   129a6:	4b04      	ldr	r3, [pc, #16]	; (129b8 <LORAWAN_RxHandler+0x40>)
   129a8:	4798      	blx	r3
   129aa:	e7fa      	b.n	129a2 <LORAWAN_RxHandler+0x2a>
   129ac:	20002bec 	.word	0x20002bec
   129b0:	0001362d 	.word	0x0001362d
   129b4:	000108ed 	.word	0x000108ed
   129b8:	00010169 	.word	0x00010169

000129bc <LORAWAN_PostTask>:
   129bc:	b510      	push	{r4, lr}
   129be:	4b08      	ldr	r3, [pc, #32]	; (129e0 <LORAWAN_PostTask+0x24>)
   129c0:	0004      	movs	r4, r0
   129c2:	4798      	blx	r3
   129c4:	2201      	movs	r2, #1
   129c6:	40a2      	lsls	r2, r4
   129c8:	4906      	ldr	r1, [pc, #24]	; (129e4 <LORAWAN_PostTask+0x28>)
   129ca:	780b      	ldrb	r3, [r1, #0]
   129cc:	4313      	orrs	r3, r2
   129ce:	b2db      	uxtb	r3, r3
   129d0:	700b      	strb	r3, [r1, #0]
   129d2:	4b05      	ldr	r3, [pc, #20]	; (129e8 <LORAWAN_PostTask+0x2c>)
   129d4:	4798      	blx	r3
   129d6:	2004      	movs	r0, #4
   129d8:	4b04      	ldr	r3, [pc, #16]	; (129ec <LORAWAN_PostTask+0x30>)
   129da:	4798      	blx	r3
   129dc:	bd10      	pop	{r4, pc}
   129de:	46c0      	nop			; (mov r8, r8)
   129e0:	00005dc9 	.word	0x00005dc9
   129e4:	20000f60 	.word	0x20000f60
   129e8:	00005dd5 	.word	0x00005dd5
   129ec:	0000d1c9 	.word	0x0000d1c9

000129f0 <LORAWAN_TaskHandler>:
   129f0:	b570      	push	{r4, r5, r6, lr}
   129f2:	2601      	movs	r6, #1
   129f4:	4d0e      	ldr	r5, [pc, #56]	; (12a30 <LORAWAN_TaskHandler+0x40>)
   129f6:	e015      	b.n	12a24 <LORAWAN_TaskHandler+0x34>
   129f8:	2400      	movs	r4, #0
   129fa:	782b      	ldrb	r3, [r5, #0]
   129fc:	4123      	asrs	r3, r4
   129fe:	4233      	tst	r3, r6
   12a00:	d00d      	beq.n	12a1e <LORAWAN_TaskHandler+0x2e>
   12a02:	4b0c      	ldr	r3, [pc, #48]	; (12a34 <LORAWAN_TaskHandler+0x44>)
   12a04:	4798      	blx	r3
   12a06:	0032      	movs	r2, r6
   12a08:	40a2      	lsls	r2, r4
   12a0a:	782b      	ldrb	r3, [r5, #0]
   12a0c:	00a4      	lsls	r4, r4, #2
   12a0e:	4393      	bics	r3, r2
   12a10:	702b      	strb	r3, [r5, #0]
   12a12:	4b09      	ldr	r3, [pc, #36]	; (12a38 <LORAWAN_TaskHandler+0x48>)
   12a14:	4798      	blx	r3
   12a16:	4b09      	ldr	r3, [pc, #36]	; (12a3c <LORAWAN_TaskHandler+0x4c>)
   12a18:	58e3      	ldr	r3, [r4, r3]
   12a1a:	4798      	blx	r3
   12a1c:	e7ea      	b.n	129f4 <LORAWAN_TaskHandler+0x4>
   12a1e:	3401      	adds	r4, #1
   12a20:	2c03      	cmp	r4, #3
   12a22:	d1ea      	bne.n	129fa <LORAWAN_TaskHandler+0xa>
   12a24:	7828      	ldrb	r0, [r5, #0]
   12a26:	b2c0      	uxtb	r0, r0
   12a28:	2800      	cmp	r0, #0
   12a2a:	d1e5      	bne.n	129f8 <LORAWAN_TaskHandler+0x8>
   12a2c:	bd70      	pop	{r4, r5, r6, pc}
   12a2e:	46c0      	nop			; (mov r8, r8)
   12a30:	20000f60 	.word	0x20000f60
   12a34:	00005dc9 	.word	0x00005dc9
   12a38:	00005dd5 	.word	0x00005dd5
   12a3c:	0001e0b4 	.word	0x0001e0b4

00012a40 <RADIO_GetAttr>:
   12a40:	b510      	push	{r4, lr}
   12a42:	000b      	movs	r3, r1
   12a44:	281f      	cmp	r0, #31
   12a46:	d900      	bls.n	12a4a <RADIO_GetAttr+0xa>
   12a48:	e069      	b.n	12b1e <RADIO_GetAttr+0xde>
   12a4a:	f001 fd3f 	bl	144cc <__gnu_thumb1_case_uqi>
   12a4e:	1410      	.short	0x1410
   12a50:	68201c19 	.word	0x68201c19
   12a54:	312e2a27 	.word	0x312e2a27
   12a58:	3d3a3734 	.word	0x3d3a3734
   12a5c:	46434054 	.word	0x46434054
   12a60:	68245149 	.word	0x68245149
   12a64:	68686859 	.word	0x68686859
   12a68:	5c686817 	.word	0x5c686817
   12a6c:	6360      	.short	0x6360
   12a6e:	4a2d      	ldr	r2, [pc, #180]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a70:	7e12      	ldrb	r2, [r2, #24]
   12a72:	701a      	strb	r2, [r3, #0]
   12a74:	e002      	b.n	12a7c <RADIO_GetAttr+0x3c>
   12a76:	4a2b      	ldr	r2, [pc, #172]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a78:	6812      	ldr	r2, [r2, #0]
   12a7a:	601a      	str	r2, [r3, #0]
   12a7c:	2000      	movs	r0, #0
   12a7e:	bd10      	pop	{r4, pc}
   12a80:	4a28      	ldr	r2, [pc, #160]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a82:	6852      	ldr	r2, [r2, #4]
   12a84:	e7f9      	b.n	12a7a <RADIO_GetAttr+0x3a>
   12a86:	4a27      	ldr	r2, [pc, #156]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a88:	8a92      	ldrh	r2, [r2, #20]
   12a8a:	801a      	strh	r2, [r3, #0]
   12a8c:	e7f6      	b.n	12a7c <RADIO_GetAttr+0x3c>
   12a8e:	4a25      	ldr	r2, [pc, #148]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a90:	3203      	adds	r2, #3
   12a92:	7fd2      	ldrb	r2, [r2, #31]
   12a94:	e7ed      	b.n	12a72 <RADIO_GetAttr+0x32>
   12a96:	4a23      	ldr	r2, [pc, #140]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a98:	3204      	adds	r2, #4
   12a9a:	e7fa      	b.n	12a92 <RADIO_GetAttr+0x52>
   12a9c:	4a21      	ldr	r2, [pc, #132]	; (12b24 <RADIO_GetAttr+0xe4>)
   12a9e:	3206      	adds	r2, #6
   12aa0:	e7f7      	b.n	12a92 <RADIO_GetAttr+0x52>
   12aa2:	4a20      	ldr	r2, [pc, #128]	; (12b24 <RADIO_GetAttr+0xe4>)
   12aa4:	3236      	adds	r2, #54	; 0x36
   12aa6:	7812      	ldrb	r2, [r2, #0]
   12aa8:	e7e3      	b.n	12a72 <RADIO_GetAttr+0x32>
   12aaa:	4a1e      	ldr	r2, [pc, #120]	; (12b24 <RADIO_GetAttr+0xe4>)
   12aac:	3205      	adds	r2, #5
   12aae:	e7f0      	b.n	12a92 <RADIO_GetAttr+0x52>
   12ab0:	4a1c      	ldr	r2, [pc, #112]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ab2:	3234      	adds	r2, #52	; 0x34
   12ab4:	e7f7      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12ab6:	4a1b      	ldr	r2, [pc, #108]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ab8:	8ad2      	ldrh	r2, [r2, #22]
   12aba:	e7e6      	b.n	12a8a <RADIO_GetAttr+0x4a>
   12abc:	4a19      	ldr	r2, [pc, #100]	; (12b24 <RADIO_GetAttr+0xe4>)
   12abe:	3233      	adds	r2, #51	; 0x33
   12ac0:	e7f1      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12ac2:	4a18      	ldr	r2, [pc, #96]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ac4:	68d2      	ldr	r2, [r2, #12]
   12ac6:	e7d8      	b.n	12a7a <RADIO_GetAttr+0x3a>
   12ac8:	4a16      	ldr	r2, [pc, #88]	; (12b24 <RADIO_GetAttr+0xe4>)
   12aca:	6892      	ldr	r2, [r2, #8]
   12acc:	e7d5      	b.n	12a7a <RADIO_GetAttr+0x3a>
   12ace:	4a15      	ldr	r2, [pc, #84]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ad0:	3237      	adds	r2, #55	; 0x37
   12ad2:	e7e8      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12ad4:	4a13      	ldr	r2, [pc, #76]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ad6:	3238      	adds	r2, #56	; 0x38
   12ad8:	e7e5      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12ada:	4a12      	ldr	r2, [pc, #72]	; (12b24 <RADIO_GetAttr+0xe4>)
   12adc:	3239      	adds	r2, #57	; 0x39
   12ade:	e7e2      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12ae0:	4a10      	ldr	r2, [pc, #64]	; (12b24 <RADIO_GetAttr+0xe4>)
   12ae2:	4911      	ldr	r1, [pc, #68]	; (12b28 <RADIO_GetAttr+0xe8>)
   12ae4:	3202      	adds	r2, #2
   12ae6:	7fd2      	ldrb	r2, [r2, #31]
   12ae8:	0018      	movs	r0, r3
   12aea:	4b10      	ldr	r3, [pc, #64]	; (12b2c <RADIO_GetAttr+0xec>)
   12aec:	4798      	blx	r3
   12aee:	e7c5      	b.n	12a7c <RADIO_GetAttr+0x3c>
   12af0:	4a0c      	ldr	r2, [pc, #48]	; (12b24 <RADIO_GetAttr+0xe4>)
   12af2:	3202      	adds	r2, #2
   12af4:	e7cd      	b.n	12a92 <RADIO_GetAttr+0x52>
   12af6:	4a0b      	ldr	r2, [pc, #44]	; (12b24 <RADIO_GetAttr+0xe4>)
   12af8:	3232      	adds	r2, #50	; 0x32
   12afa:	7812      	ldrb	r2, [r2, #0]
   12afc:	b252      	sxtb	r2, r2
   12afe:	e7b8      	b.n	12a72 <RADIO_GetAttr+0x32>
   12b00:	4a08      	ldr	r2, [pc, #32]	; (12b24 <RADIO_GetAttr+0xe4>)
   12b02:	3235      	adds	r2, #53	; 0x35
   12b04:	e7cf      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12b06:	4907      	ldr	r1, [pc, #28]	; (12b24 <RADIO_GetAttr+0xe4>)
   12b08:	2206      	movs	r2, #6
   12b0a:	313c      	adds	r1, #60	; 0x3c
   12b0c:	e7ec      	b.n	12ae8 <RADIO_GetAttr+0xa8>
   12b0e:	4a05      	ldr	r2, [pc, #20]	; (12b24 <RADIO_GetAttr+0xe4>)
   12b10:	3254      	adds	r2, #84	; 0x54
   12b12:	e7c8      	b.n	12aa6 <RADIO_GetAttr+0x66>
   12b14:	4a03      	ldr	r2, [pc, #12]	; (12b24 <RADIO_GetAttr+0xe4>)
   12b16:	3256      	adds	r2, #86	; 0x56
   12b18:	2100      	movs	r1, #0
   12b1a:	5e52      	ldrsh	r2, [r2, r1]
   12b1c:	e7b5      	b.n	12a8a <RADIO_GetAttr+0x4a>
   12b1e:	2005      	movs	r0, #5
   12b20:	e7ad      	b.n	12a7e <RADIO_GetAttr+0x3e>
   12b22:	46c0      	nop			; (mov r8, r8)
   12b24:	200027c8 	.word	0x200027c8
   12b28:	200027e1 	.word	0x200027e1
   12b2c:	00017691 	.word	0x00017691

00012b30 <RADIO_SetAttr>:
   12b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b32:	4b71      	ldr	r3, [pc, #452]	; (12cf8 <RADIO_SetAttr+0x1c8>)
   12b34:	0004      	movs	r4, r0
   12b36:	000d      	movs	r5, r1
   12b38:	4798      	blx	r3
   12b3a:	2304      	movs	r3, #4
   12b3c:	2801      	cmp	r0, #1
   12b3e:	d11a      	bne.n	12b76 <RADIO_SetAttr+0x46>
   12b40:	2c1d      	cmp	r4, #29
   12b42:	d900      	bls.n	12b46 <RADIO_SetAttr+0x16>
   12b44:	e0d5      	b.n	12cf2 <RADIO_SetAttr+0x1c2>
   12b46:	0020      	movs	r0, r4
   12b48:	f001 fcc0 	bl	144cc <__gnu_thumb1_case_uqi>
   12b4c:	605c4844 	.word	0x605c4844
   12b50:	7770d364 	.word	0x7770d364
   12b54:	908c8480 	.word	0x908c8480
   12b58:	a0d39c99 	.word	0xa0d39c99
   12b5c:	c2bab1a8 	.word	0xc2bab1a8
   12b60:	d3cad369 	.word	0xd3cad369
   12b64:	d30fd3d3 	.word	0xd30fd3d3
   12b68:	17d3      	.short	0x17d3
   12b6a:	2303      	movs	r3, #3
   12b6c:	2d00      	cmp	r5, #0
   12b6e:	d002      	beq.n	12b76 <RADIO_SetAttr+0x46>
   12b70:	4b62      	ldr	r3, [pc, #392]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12b72:	611d      	str	r5, [r3, #16]
   12b74:	2300      	movs	r3, #0
   12b76:	0018      	movs	r0, r3
   12b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12b7a:	796c      	ldrb	r4, [r5, #5]
   12b7c:	2c00      	cmp	r4, #0
   12b7e:	d109      	bne.n	12b94 <RADIO_SetAttr+0x64>
   12b80:	4b5e      	ldr	r3, [pc, #376]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12b82:	001a      	movs	r2, r3
   12b84:	649c      	str	r4, [r3, #72]	; 0x48
   12b86:	879c      	strh	r4, [r3, #60]	; 0x3c
   12b88:	87dc      	strh	r4, [r3, #62]	; 0x3e
   12b8a:	3240      	adds	r2, #64	; 0x40
   12b8c:	3341      	adds	r3, #65	; 0x41
   12b8e:	7014      	strb	r4, [r2, #0]
   12b90:	701c      	strb	r4, [r3, #0]
   12b92:	e7ef      	b.n	12b74 <RADIO_SetAttr+0x44>
   12b94:	882f      	ldrh	r7, [r5, #0]
   12b96:	2303      	movs	r3, #3
   12b98:	2f00      	cmp	r7, #0
   12b9a:	d0ec      	beq.n	12b76 <RADIO_SetAttr+0x46>
   12b9c:	792e      	ldrb	r6, [r5, #4]
   12b9e:	2e00      	cmp	r6, #0
   12ba0:	d0e9      	beq.n	12b76 <RADIO_SetAttr+0x46>
   12ba2:	20fa      	movs	r0, #250	; 0xfa
   12ba4:	2202      	movs	r2, #2
   12ba6:	5eab      	ldrsh	r3, [r5, r2]
   12ba8:	0080      	lsls	r0, r0, #2
   12baa:	0031      	movs	r1, r6
   12bac:	9301      	str	r3, [sp, #4]
   12bae:	4378      	muls	r0, r7
   12bb0:	4b53      	ldr	r3, [pc, #332]	; (12d00 <RADIO_SetAttr+0x1d0>)
   12bb2:	4798      	blx	r3
   12bb4:	4b53      	ldr	r3, [pc, #332]	; (12d04 <RADIO_SetAttr+0x1d4>)
   12bb6:	4798      	blx	r3
   12bb8:	4b53      	ldr	r3, [pc, #332]	; (12d08 <RADIO_SetAttr+0x1d8>)
   12bba:	4798      	blx	r3
   12bbc:	466b      	mov	r3, sp
   12bbe:	4d4f      	ldr	r5, [pc, #316]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12bc0:	889b      	ldrh	r3, [r3, #4]
   12bc2:	64a8      	str	r0, [r5, #72]	; 0x48
   12bc4:	87eb      	strh	r3, [r5, #62]	; 0x3e
   12bc6:	002b      	movs	r3, r5
   12bc8:	87af      	strh	r7, [r5, #60]	; 0x3c
   12bca:	3340      	adds	r3, #64	; 0x40
   12bcc:	3541      	adds	r5, #65	; 0x41
   12bce:	701e      	strb	r6, [r3, #0]
   12bd0:	702c      	strb	r4, [r5, #0]
   12bd2:	e7cf      	b.n	12b74 <RADIO_SetAttr+0x44>
   12bd4:	782a      	ldrb	r2, [r5, #0]
   12bd6:	4b49      	ldr	r3, [pc, #292]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12bd8:	761a      	strb	r2, [r3, #24]
   12bda:	e7cb      	b.n	12b74 <RADIO_SetAttr+0x44>
   12bdc:	4b4b      	ldr	r3, [pc, #300]	; (12d0c <RADIO_SetAttr+0x1dc>)
   12bde:	682a      	ldr	r2, [r5, #0]
   12be0:	18d1      	adds	r1, r2, r3
   12be2:	4b4b      	ldr	r3, [pc, #300]	; (12d10 <RADIO_SetAttr+0x1e0>)
   12be4:	4299      	cmp	r1, r3
   12be6:	d90a      	bls.n	12bfe <RADIO_SetAttr+0xce>
   12be8:	4b4a      	ldr	r3, [pc, #296]	; (12d14 <RADIO_SetAttr+0x1e4>)
   12bea:	494b      	ldr	r1, [pc, #300]	; (12d18 <RADIO_SetAttr+0x1e8>)
   12bec:	18d3      	adds	r3, r2, r3
   12bee:	428b      	cmp	r3, r1
   12bf0:	d905      	bls.n	12bfe <RADIO_SetAttr+0xce>
   12bf2:	494a      	ldr	r1, [pc, #296]	; (12d1c <RADIO_SetAttr+0x1ec>)
   12bf4:	484a      	ldr	r0, [pc, #296]	; (12d20 <RADIO_SetAttr+0x1f0>)
   12bf6:	1851      	adds	r1, r2, r1
   12bf8:	2305      	movs	r3, #5
   12bfa:	4281      	cmp	r1, r0
   12bfc:	d8bb      	bhi.n	12b76 <RADIO_SetAttr+0x46>
   12bfe:	4b3f      	ldr	r3, [pc, #252]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c00:	601a      	str	r2, [r3, #0]
   12c02:	e7b7      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c04:	682a      	ldr	r2, [r5, #0]
   12c06:	4b3d      	ldr	r3, [pc, #244]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c08:	605a      	str	r2, [r3, #4]
   12c0a:	e7b3      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c0c:	882a      	ldrh	r2, [r5, #0]
   12c0e:	4b3b      	ldr	r3, [pc, #236]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c10:	829a      	strh	r2, [r3, #20]
   12c12:	e7af      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c14:	4b39      	ldr	r3, [pc, #228]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c16:	782a      	ldrb	r2, [r5, #0]
   12c18:	3303      	adds	r3, #3
   12c1a:	77da      	strb	r2, [r3, #31]
   12c1c:	e7aa      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c1e:	782a      	ldrb	r2, [r5, #0]
   12c20:	2305      	movs	r3, #5
   12c22:	2a01      	cmp	r2, #1
   12c24:	d8a7      	bhi.n	12b76 <RADIO_SetAttr+0x46>
   12c26:	4b35      	ldr	r3, [pc, #212]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c28:	3304      	adds	r3, #4
   12c2a:	e7f6      	b.n	12c1a <RADIO_SetAttr+0xea>
   12c2c:	782a      	ldrb	r2, [r5, #0]
   12c2e:	2305      	movs	r3, #5
   12c30:	2a01      	cmp	r2, #1
   12c32:	d8a0      	bhi.n	12b76 <RADIO_SetAttr+0x46>
   12c34:	4b31      	ldr	r3, [pc, #196]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c36:	3306      	adds	r3, #6
   12c38:	e7ef      	b.n	12c1a <RADIO_SetAttr+0xea>
   12c3a:	782a      	ldrb	r2, [r5, #0]
   12c3c:	2305      	movs	r3, #5
   12c3e:	1fd1      	subs	r1, r2, #7
   12c40:	2902      	cmp	r1, #2
   12c42:	d898      	bhi.n	12b76 <RADIO_SetAttr+0x46>
   12c44:	4b2d      	ldr	r3, [pc, #180]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c46:	3336      	adds	r3, #54	; 0x36
   12c48:	701a      	strb	r2, [r3, #0]
   12c4a:	e793      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c4c:	4b2b      	ldr	r3, [pc, #172]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c4e:	782a      	ldrb	r2, [r5, #0]
   12c50:	3305      	adds	r3, #5
   12c52:	e7e2      	b.n	12c1a <RADIO_SetAttr+0xea>
   12c54:	782a      	ldrb	r2, [r5, #0]
   12c56:	2305      	movs	r3, #5
   12c58:	2a01      	cmp	r2, #1
   12c5a:	d900      	bls.n	12c5e <RADIO_SetAttr+0x12e>
   12c5c:	e78b      	b.n	12b76 <RADIO_SetAttr+0x46>
   12c5e:	4b27      	ldr	r3, [pc, #156]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c60:	3334      	adds	r3, #52	; 0x34
   12c62:	e7f1      	b.n	12c48 <RADIO_SetAttr+0x118>
   12c64:	882a      	ldrh	r2, [r5, #0]
   12c66:	4b25      	ldr	r3, [pc, #148]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c68:	82da      	strh	r2, [r3, #22]
   12c6a:	e783      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c6c:	782a      	ldrb	r2, [r5, #0]
   12c6e:	2305      	movs	r3, #5
   12c70:	1e51      	subs	r1, r2, #1
   12c72:	2903      	cmp	r1, #3
   12c74:	d900      	bls.n	12c78 <RADIO_SetAttr+0x148>
   12c76:	e77e      	b.n	12b76 <RADIO_SetAttr+0x46>
   12c78:	4b20      	ldr	r3, [pc, #128]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c7a:	3333      	adds	r3, #51	; 0x33
   12c7c:	e7e4      	b.n	12c48 <RADIO_SetAttr+0x118>
   12c7e:	4b1f      	ldr	r3, [pc, #124]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c80:	682a      	ldr	r2, [r5, #0]
   12c82:	60da      	str	r2, [r3, #12]
   12c84:	682a      	ldr	r2, [r5, #0]
   12c86:	4b1d      	ldr	r3, [pc, #116]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c88:	609a      	str	r2, [r3, #8]
   12c8a:	e773      	b.n	12b74 <RADIO_SetAttr+0x44>
   12c8c:	782a      	ldrb	r2, [r5, #0]
   12c8e:	2305      	movs	r3, #5
   12c90:	2a03      	cmp	r2, #3
   12c92:	d900      	bls.n	12c96 <RADIO_SetAttr+0x166>
   12c94:	e76f      	b.n	12b76 <RADIO_SetAttr+0x46>
   12c96:	4b19      	ldr	r3, [pc, #100]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12c98:	3337      	adds	r3, #55	; 0x37
   12c9a:	e7d5      	b.n	12c48 <RADIO_SetAttr+0x118>
   12c9c:	782a      	ldrb	r2, [r5, #0]
   12c9e:	2305      	movs	r3, #5
   12ca0:	1e51      	subs	r1, r2, #1
   12ca2:	2916      	cmp	r1, #22
   12ca4:	d900      	bls.n	12ca8 <RADIO_SetAttr+0x178>
   12ca6:	e766      	b.n	12b76 <RADIO_SetAttr+0x46>
   12ca8:	4b14      	ldr	r3, [pc, #80]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12caa:	3338      	adds	r3, #56	; 0x38
   12cac:	e7cc      	b.n	12c48 <RADIO_SetAttr+0x118>
   12cae:	782a      	ldrb	r2, [r5, #0]
   12cb0:	2305      	movs	r3, #5
   12cb2:	1e51      	subs	r1, r2, #1
   12cb4:	2916      	cmp	r1, #22
   12cb6:	d900      	bls.n	12cba <RADIO_SetAttr+0x18a>
   12cb8:	e75d      	b.n	12b76 <RADIO_SetAttr+0x46>
   12cba:	4b10      	ldr	r3, [pc, #64]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12cbc:	3339      	adds	r3, #57	; 0x39
   12cbe:	e7c3      	b.n	12c48 <RADIO_SetAttr+0x118>
   12cc0:	4b0e      	ldr	r3, [pc, #56]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12cc2:	0029      	movs	r1, r5
   12cc4:	3302      	adds	r3, #2
   12cc6:	7fda      	ldrb	r2, [r3, #31]
   12cc8:	4816      	ldr	r0, [pc, #88]	; (12d24 <RADIO_SetAttr+0x1f4>)
   12cca:	4b17      	ldr	r3, [pc, #92]	; (12d28 <RADIO_SetAttr+0x1f8>)
   12ccc:	4798      	blx	r3
   12cce:	e751      	b.n	12b74 <RADIO_SetAttr+0x44>
   12cd0:	782b      	ldrb	r3, [r5, #0]
   12cd2:	1c1a      	adds	r2, r3, #0
   12cd4:	2b08      	cmp	r3, #8
   12cd6:	d900      	bls.n	12cda <RADIO_SetAttr+0x1aa>
   12cd8:	2208      	movs	r2, #8
   12cda:	4b08      	ldr	r3, [pc, #32]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12cdc:	3302      	adds	r3, #2
   12cde:	e79c      	b.n	12c1a <RADIO_SetAttr+0xea>
   12ce0:	2305      	movs	r3, #5
   12ce2:	782a      	ldrb	r2, [r5, #0]
   12ce4:	1fd1      	subs	r1, r2, #7
   12ce6:	4299      	cmp	r1, r3
   12ce8:	d900      	bls.n	12cec <RADIO_SetAttr+0x1bc>
   12cea:	e744      	b.n	12b76 <RADIO_SetAttr+0x46>
   12cec:	4b03      	ldr	r3, [pc, #12]	; (12cfc <RADIO_SetAttr+0x1cc>)
   12cee:	3335      	adds	r3, #53	; 0x35
   12cf0:	e7aa      	b.n	12c48 <RADIO_SetAttr+0x118>
   12cf2:	2305      	movs	r3, #5
   12cf4:	e73f      	b.n	12b76 <RADIO_SetAttr+0x46>
   12cf6:	46c0      	nop			; (mov r8, r8)
   12cf8:	00013445 	.word	0x00013445
   12cfc:	200027c8 	.word	0x200027c8
   12d00:	0001461d 	.word	0x0001461d
   12d04:	00015861 	.word	0x00015861
   12d08:	00014979 	.word	0x00014979
   12d0c:	f7d58bc0 	.word	0xf7d58bc0
   12d10:	0243d580 	.word	0x0243d580
   12d14:	e78fe580 	.word	0xe78fe580
   12d18:	06dac2c0 	.word	0x06dac2c0
   12d1c:	cc9eec80 	.word	0xcc9eec80
   12d20:	096ae380 	.word	0x096ae380
   12d24:	200027e1 	.word	0x200027e1
   12d28:	00017691 	.word	0x00017691

00012d2c <RADIO_Init>:
   12d2c:	b510      	push	{r4, lr}
   12d2e:	4b0c      	ldr	r3, [pc, #48]	; (12d60 <RADIO_Init+0x34>)
   12d30:	4798      	blx	r3
   12d32:	4b0c      	ldr	r3, [pc, #48]	; (12d64 <RADIO_Init+0x38>)
   12d34:	201f      	movs	r0, #31
   12d36:	4798      	blx	r3
   12d38:	4c0b      	ldr	r4, [pc, #44]	; (12d68 <RADIO_Init+0x3c>)
   12d3a:	490c      	ldr	r1, [pc, #48]	; (12d6c <RADIO_Init+0x40>)
   12d3c:	2001      	movs	r0, #1
   12d3e:	47a0      	blx	r4
   12d40:	490b      	ldr	r1, [pc, #44]	; (12d70 <RADIO_Init+0x44>)
   12d42:	2002      	movs	r0, #2
   12d44:	47a0      	blx	r4
   12d46:	490b      	ldr	r1, [pc, #44]	; (12d74 <RADIO_Init+0x48>)
   12d48:	2004      	movs	r0, #4
   12d4a:	47a0      	blx	r4
   12d4c:	490a      	ldr	r1, [pc, #40]	; (12d78 <RADIO_Init+0x4c>)
   12d4e:	2008      	movs	r0, #8
   12d50:	47a0      	blx	r4
   12d52:	490a      	ldr	r1, [pc, #40]	; (12d7c <RADIO_Init+0x50>)
   12d54:	2010      	movs	r0, #16
   12d56:	47a0      	blx	r4
   12d58:	4909      	ldr	r1, [pc, #36]	; (12d80 <RADIO_Init+0x54>)
   12d5a:	2020      	movs	r0, #32
   12d5c:	47a0      	blx	r4
   12d5e:	bd10      	pop	{r4, pc}
   12d60:	00013b41 	.word	0x00013b41
   12d64:	00013451 	.word	0x00013451
   12d68:	00005bed 	.word	0x00005bed
   12d6c:	000131dd 	.word	0x000131dd
   12d70:	00013255 	.word	0x00013255
   12d74:	000132c5 	.word	0x000132c5
   12d78:	00013315 	.word	0x00013315
   12d7c:	0001333d 	.word	0x0001333d
   12d80:	00013365 	.word	0x00013365

00012d84 <Radio_WriteFrequency>:
   12d84:	b570      	push	{r4, r5, r6, lr}
   12d86:	490d      	ldr	r1, [pc, #52]	; (12dbc <Radio_WriteFrequency+0x38>)
   12d88:	4d0d      	ldr	r5, [pc, #52]	; (12dc0 <Radio_WriteFrequency+0x3c>)
   12d8a:	0006      	movs	r6, r0
   12d8c:	47a8      	blx	r5
   12d8e:	4b0d      	ldr	r3, [pc, #52]	; (12dc4 <Radio_WriteFrequency+0x40>)
   12d90:	0004      	movs	r4, r0
   12d92:	490a      	ldr	r1, [pc, #40]	; (12dbc <Radio_WriteFrequency+0x38>)
   12d94:	0030      	movs	r0, r6
   12d96:	4798      	blx	r3
   12d98:	0208      	lsls	r0, r1, #8
   12d9a:	4908      	ldr	r1, [pc, #32]	; (12dbc <Radio_WriteFrequency+0x38>)
   12d9c:	47a8      	blx	r5
   12d9e:	0224      	lsls	r4, r4, #8
   12da0:	1904      	adds	r4, r0, r4
   12da2:	0c21      	lsrs	r1, r4, #16
   12da4:	4d08      	ldr	r5, [pc, #32]	; (12dc8 <Radio_WriteFrequency+0x44>)
   12da6:	b2c9      	uxtb	r1, r1
   12da8:	2006      	movs	r0, #6
   12daa:	47a8      	blx	r5
   12dac:	0a21      	lsrs	r1, r4, #8
   12dae:	b2c9      	uxtb	r1, r1
   12db0:	2007      	movs	r0, #7
   12db2:	47a8      	blx	r5
   12db4:	b2e1      	uxtb	r1, r4
   12db6:	2008      	movs	r0, #8
   12db8:	47a8      	blx	r5
   12dba:	bd70      	pop	{r4, r5, r6, pc}
   12dbc:	00003d09 	.word	0x00003d09
   12dc0:	00014509 	.word	0x00014509
   12dc4:	00014615 	.word	0x00014615
   12dc8:	00005b19 	.word	0x00005b19

00012dcc <Radio_WriteConfiguration>:
   12dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dce:	4cb0      	ldr	r4, [pc, #704]	; (13090 <Radio_WriteConfiguration+0x2c4>)
   12dd0:	2200      	movs	r2, #0
   12dd2:	0023      	movs	r3, r4
   12dd4:	b085      	sub	sp, #20
   12dd6:	9002      	str	r0, [sp, #8]
   12dd8:	3334      	adds	r3, #52	; 0x34
   12dda:	0010      	movs	r0, r2
   12ddc:	7819      	ldrb	r1, [r3, #0]
   12dde:	4bad      	ldr	r3, [pc, #692]	; (13094 <Radio_WriteConfiguration+0x2c8>)
   12de0:	4798      	blx	r3
   12de2:	4bad      	ldr	r3, [pc, #692]	; (13098 <Radio_WriteConfiguration+0x2cc>)
   12de4:	6820      	ldr	r0, [r4, #0]
   12de6:	4798      	blx	r3
   12de8:	1ce3      	adds	r3, r4, #3
   12dea:	1d62      	adds	r2, r4, #5
   12dec:	7fdb      	ldrb	r3, [r3, #31]
   12dee:	7fd2      	ldrb	r2, [r2, #31]
   12df0:	b25b      	sxtb	r3, r3
   12df2:	4eaa      	ldr	r6, [pc, #680]	; (1309c <Radio_WriteConfiguration+0x2d0>)
   12df4:	4daa      	ldr	r5, [pc, #680]	; (130a0 <Radio_WriteConfiguration+0x2d4>)
   12df6:	2a00      	cmp	r2, #0
   12df8:	d000      	beq.n	12dfc <Radio_WriteConfiguration+0x30>
   12dfa:	e0fc      	b.n	12ff6 <Radio_WriteConfiguration+0x22a>
   12dfc:	1c1f      	adds	r7, r3, #0
   12dfe:	2b0f      	cmp	r3, #15
   12e00:	dc00      	bgt.n	12e04 <Radio_WriteConfiguration+0x38>
   12e02:	e0ec      	b.n	12fde <Radio_WriteConfiguration+0x212>
   12e04:	270f      	movs	r7, #15
   12e06:	b27b      	sxtb	r3, r7
   12e08:	204d      	movs	r0, #77	; 0x4d
   12e0a:	9301      	str	r3, [sp, #4]
   12e0c:	47b0      	blx	r6
   12e0e:	21f8      	movs	r1, #248	; 0xf8
   12e10:	4008      	ands	r0, r1
   12e12:	39f4      	subs	r1, #244	; 0xf4
   12e14:	4301      	orrs	r1, r0
   12e16:	204d      	movs	r0, #77	; 0x4d
   12e18:	47a8      	blx	r5
   12e1a:	b27b      	sxtb	r3, r7
   12e1c:	2b00      	cmp	r3, #0
   12e1e:	db00      	blt.n	12e22 <Radio_WriteConfiguration+0x56>
   12e20:	e0e4      	b.n	12fec <Radio_WriteConfiguration+0x220>
   12e22:	3703      	adds	r7, #3
   12e24:	b2f9      	uxtb	r1, r7
   12e26:	2720      	movs	r7, #32
   12e28:	4339      	orrs	r1, r7
   12e2a:	2009      	movs	r0, #9
   12e2c:	47a8      	blx	r5
   12e2e:	0023      	movs	r3, r4
   12e30:	3334      	adds	r3, #52	; 0x34
   12e32:	781f      	ldrb	r7, [r3, #0]
   12e34:	2f01      	cmp	r7, #1
   12e36:	d000      	beq.n	12e3a <Radio_WriteConfiguration+0x6e>
   12e38:	e144      	b.n	130c4 <Radio_WriteConfiguration+0x2f8>
   12e3a:	7e21      	ldrb	r1, [r4, #24]
   12e3c:	2039      	movs	r0, #57	; 0x39
   12e3e:	47a8      	blx	r5
   12e40:	4b98      	ldr	r3, [pc, #608]	; (130a4 <Radio_WriteConfiguration+0x2d8>)
   12e42:	201d      	movs	r0, #29
   12e44:	7819      	ldrb	r1, [r3, #0]
   12e46:	0023      	movs	r3, r4
   12e48:	3333      	adds	r3, #51	; 0x33
   12e4a:	781b      	ldrb	r3, [r3, #0]
   12e4c:	0109      	lsls	r1, r1, #4
   12e4e:	005b      	lsls	r3, r3, #1
   12e50:	4319      	orrs	r1, r3
   12e52:	1de3      	adds	r3, r4, #7
   12e54:	7fdb      	ldrb	r3, [r3, #31]
   12e56:	401f      	ands	r7, r3
   12e58:	4339      	orrs	r1, r7
   12e5a:	b2c9      	uxtb	r1, r1
   12e5c:	47a8      	blx	r5
   12e5e:	1d23      	adds	r3, r4, #4
   12e60:	7fd9      	ldrb	r1, [r3, #31]
   12e62:	2304      	movs	r3, #4
   12e64:	0089      	lsls	r1, r1, #2
   12e66:	4019      	ands	r1, r3
   12e68:	0023      	movs	r3, r4
   12e6a:	3335      	adds	r3, #53	; 0x35
   12e6c:	781b      	ldrb	r3, [r3, #0]
   12e6e:	201e      	movs	r0, #30
   12e70:	011b      	lsls	r3, r3, #4
   12e72:	4319      	orrs	r1, r3
   12e74:	9b02      	ldr	r3, [sp, #8]
   12e76:	059b      	lsls	r3, r3, #22
   12e78:	0f9b      	lsrs	r3, r3, #30
   12e7a:	4319      	orrs	r1, r3
   12e7c:	b2c9      	uxtb	r1, r1
   12e7e:	47a8      	blx	r5
   12e80:	2300      	movs	r3, #0
   12e82:	8ae1      	ldrh	r1, [r4, #22]
   12e84:	4299      	cmp	r1, r3
   12e86:	d011      	beq.n	12eac <Radio_WriteConfiguration+0xe0>
   12e88:	4a86      	ldr	r2, [pc, #536]	; (130a4 <Radio_WriteConfiguration+0x2d8>)
   12e8a:	7812      	ldrb	r2, [r2, #0]
   12e8c:	2a08      	cmp	r2, #8
   12e8e:	d100      	bne.n	12e92 <Radio_WriteConfiguration+0xc6>
   12e90:	e0e4      	b.n	1305c <Radio_WriteConfiguration+0x290>
   12e92:	2a09      	cmp	r2, #9
   12e94:	d100      	bne.n	12e98 <Radio_WriteConfiguration+0xcc>
   12e96:	e0e3      	b.n	13060 <Radio_WriteConfiguration+0x294>
   12e98:	2a07      	cmp	r2, #7
   12e9a:	d000      	beq.n	12e9e <Radio_WriteConfiguration+0xd2>
   12e9c:	e0e3      	b.n	13066 <Radio_WriteConfiguration+0x29a>
   12e9e:	337d      	adds	r3, #125	; 0x7d
   12ea0:	4359      	muls	r1, r3
   12ea2:	0023      	movs	r3, r4
   12ea4:	3335      	adds	r3, #53	; 0x35
   12ea6:	781b      	ldrb	r3, [r3, #0]
   12ea8:	40d9      	lsrs	r1, r3
   12eaa:	000b      	movs	r3, r1
   12eac:	b2d9      	uxtb	r1, r3
   12eae:	2024      	movs	r0, #36	; 0x24
   12eb0:	4d7b      	ldr	r5, [pc, #492]	; (130a0 <Radio_WriteConfiguration+0x2d4>)
   12eb2:	47a8      	blx	r5
   12eb4:	466b      	mov	r3, sp
   12eb6:	201f      	movs	r0, #31
   12eb8:	7a19      	ldrb	r1, [r3, #8]
   12eba:	47a8      	blx	r5
   12ebc:	2026      	movs	r0, #38	; 0x26
   12ebe:	47b0      	blx	r6
   12ec0:	0023      	movs	r3, r4
   12ec2:	3335      	adds	r3, #53	; 0x35
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	2b0c      	cmp	r3, #12
   12ec8:	d105      	bne.n	12ed6 <Radio_WriteConfiguration+0x10a>
   12eca:	0023      	movs	r3, r4
   12ecc:	3336      	adds	r3, #54	; 0x36
   12ece:	781b      	ldrb	r3, [r3, #0]
   12ed0:	3b07      	subs	r3, #7
   12ed2:	2b01      	cmp	r3, #1
   12ed4:	d906      	bls.n	12ee4 <Radio_WriteConfiguration+0x118>
   12ed6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12ed8:	4b73      	ldr	r3, [pc, #460]	; (130a8 <Radio_WriteConfiguration+0x2dc>)
   12eda:	4013      	ands	r3, r2
   12edc:	4a73      	ldr	r2, [pc, #460]	; (130ac <Radio_WriteConfiguration+0x2e0>)
   12ede:	4293      	cmp	r3, r2
   12ee0:	d000      	beq.n	12ee4 <Radio_WriteConfiguration+0x118>
   12ee2:	e0c2      	b.n	1306a <Radio_WriteConfiguration+0x29e>
   12ee4:	2108      	movs	r1, #8
   12ee6:	4308      	orrs	r0, r1
   12ee8:	b2c0      	uxtb	r0, r0
   12eea:	2104      	movs	r1, #4
   12eec:	4301      	orrs	r1, r0
   12eee:	2026      	movs	r0, #38	; 0x26
   12ef0:	47a8      	blx	r5
   12ef2:	2031      	movs	r0, #49	; 0x31
   12ef4:	47b0      	blx	r6
   12ef6:	21f8      	movs	r1, #248	; 0xf8
   12ef8:	4008      	ands	r0, r1
   12efa:	39f5      	subs	r1, #245	; 0xf5
   12efc:	4301      	orrs	r1, r0
   12efe:	2031      	movs	r0, #49	; 0x31
   12f00:	47a8      	blx	r5
   12f02:	210a      	movs	r1, #10
   12f04:	2037      	movs	r0, #55	; 0x37
   12f06:	47a8      	blx	r5
   12f08:	0023      	movs	r3, r4
   12f0a:	3331      	adds	r3, #49	; 0x31
   12f0c:	781b      	ldrb	r3, [r3, #0]
   12f0e:	2b12      	cmp	r3, #18
   12f10:	d11e      	bne.n	12f50 <Radio_WriteConfiguration+0x184>
   12f12:	0023      	movs	r3, r4
   12f14:	3336      	adds	r3, #54	; 0x36
   12f16:	781b      	ldrb	r3, [r3, #0]
   12f18:	3b07      	subs	r3, #7
   12f1a:	2b01      	cmp	r3, #1
   12f1c:	d80b      	bhi.n	12f36 <Radio_WriteConfiguration+0x16a>
   12f1e:	2031      	movs	r0, #49	; 0x31
   12f20:	47b0      	blx	r6
   12f22:	217f      	movs	r1, #127	; 0x7f
   12f24:	4001      	ands	r1, r0
   12f26:	2031      	movs	r0, #49	; 0x31
   12f28:	47a8      	blx	r5
   12f2a:	2140      	movs	r1, #64	; 0x40
   12f2c:	202f      	movs	r0, #47	; 0x2f
   12f2e:	47a8      	blx	r5
   12f30:	2100      	movs	r1, #0
   12f32:	2030      	movs	r0, #48	; 0x30
   12f34:	47a8      	blx	r5
   12f36:	0023      	movs	r3, r4
   12f38:	3336      	adds	r3, #54	; 0x36
   12f3a:	781b      	ldrb	r3, [r3, #0]
   12f3c:	2b09      	cmp	r3, #9
   12f3e:	d107      	bne.n	12f50 <Radio_WriteConfiguration+0x184>
   12f40:	2031      	movs	r0, #49	; 0x31
   12f42:	47b0      	blx	r6
   12f44:	2180      	movs	r1, #128	; 0x80
   12f46:	4249      	negs	r1, r1
   12f48:	4301      	orrs	r1, r0
   12f4a:	b2c9      	uxtb	r1, r1
   12f4c:	2031      	movs	r0, #49	; 0x31
   12f4e:	47a8      	blx	r5
   12f50:	2033      	movs	r0, #51	; 0x33
   12f52:	47b0      	blx	r6
   12f54:	1da3      	adds	r3, r4, #6
   12f56:	7fd9      	ldrb	r1, [r3, #31]
   12f58:	2340      	movs	r3, #64	; 0x40
   12f5a:	0189      	lsls	r1, r1, #6
   12f5c:	4398      	bics	r0, r3
   12f5e:	4019      	ands	r1, r3
   12f60:	4301      	orrs	r1, r0
   12f62:	b2c9      	uxtb	r1, r1
   12f64:	2033      	movs	r0, #51	; 0x33
   12f66:	47a8      	blx	r5
   12f68:	8aa1      	ldrh	r1, [r4, #20]
   12f6a:	2020      	movs	r0, #32
   12f6c:	0a09      	lsrs	r1, r1, #8
   12f6e:	47a8      	blx	r5
   12f70:	7d21      	ldrb	r1, [r4, #20]
   12f72:	2021      	movs	r0, #33	; 0x21
   12f74:	47a8      	blx	r5
   12f76:	2100      	movs	r1, #0
   12f78:	200d      	movs	r0, #13
   12f7a:	47a8      	blx	r5
   12f7c:	2100      	movs	r1, #0
   12f7e:	200e      	movs	r0, #14
   12f80:	47a8      	blx	r5
   12f82:	2100      	movs	r1, #0
   12f84:	200f      	movs	r0, #15
   12f86:	47a8      	blx	r5
   12f88:	0023      	movs	r3, r4
   12f8a:	3331      	adds	r3, #49	; 0x31
   12f8c:	781b      	ldrb	r3, [r3, #0]
   12f8e:	2b12      	cmp	r3, #18
   12f90:	d120      	bne.n	12fd4 <Radio_WriteConfiguration+0x208>
   12f92:	0023      	movs	r3, r4
   12f94:	3336      	adds	r3, #54	; 0x36
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	2b09      	cmp	r3, #9
   12f9a:	d000      	beq.n	12f9e <Radio_WriteConfiguration+0x1d2>
   12f9c:	e072      	b.n	13084 <Radio_WriteConfiguration+0x2b8>
   12f9e:	4a44      	ldr	r2, [pc, #272]	; (130b0 <Radio_WriteConfiguration+0x2e4>)
   12fa0:	6823      	ldr	r3, [r4, #0]
   12fa2:	1899      	adds	r1, r3, r2
   12fa4:	4a43      	ldr	r2, [pc, #268]	; (130b4 <Radio_WriteConfiguration+0x2e8>)
   12fa6:	4291      	cmp	r1, r2
   12fa8:	d862      	bhi.n	13070 <Radio_WriteConfiguration+0x2a4>
   12faa:	2102      	movs	r1, #2
   12fac:	2036      	movs	r0, #54	; 0x36
   12fae:	47a8      	blx	r5
   12fb0:	2164      	movs	r1, #100	; 0x64
   12fb2:	203a      	movs	r0, #58	; 0x3a
   12fb4:	47a8      	blx	r5
   12fb6:	0023      	movs	r3, r4
   12fb8:	3336      	adds	r3, #54	; 0x36
   12fba:	781b      	ldrb	r3, [r3, #0]
   12fbc:	2165      	movs	r1, #101	; 0x65
   12fbe:	203a      	movs	r0, #58	; 0x3a
   12fc0:	2b09      	cmp	r3, #9
   12fc2:	d162      	bne.n	1308a <Radio_WriteConfiguration+0x2be>
   12fc4:	3406      	adds	r4, #6
   12fc6:	7fe3      	ldrb	r3, [r4, #31]
   12fc8:	2b01      	cmp	r3, #1
   12fca:	d15e      	bne.n	1308a <Radio_WriteConfiguration+0x2be>
   12fcc:	47a8      	blx	r5
   12fce:	2119      	movs	r1, #25
   12fd0:	203b      	movs	r0, #59	; 0x3b
   12fd2:	47a8      	blx	r5
   12fd4:	21ff      	movs	r1, #255	; 0xff
   12fd6:	2012      	movs	r0, #18
   12fd8:	47a8      	blx	r5
   12fda:	b005      	add	sp, #20
   12fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	3303      	adds	r3, #3
   12fe2:	db00      	blt.n	12fe6 <Radio_WriteConfiguration+0x21a>
   12fe4:	e70f      	b.n	12e06 <Radio_WriteConfiguration+0x3a>
   12fe6:	4b34      	ldr	r3, [pc, #208]	; (130b8 <Radio_WriteConfiguration+0x2ec>)
   12fe8:	781f      	ldrb	r7, [r3, #0]
   12fea:	e70c      	b.n	12e06 <Radio_WriteConfiguration+0x3a>
   12fec:	2170      	movs	r1, #112	; 0x70
   12fee:	9b01      	ldr	r3, [sp, #4]
   12ff0:	4319      	orrs	r1, r3
   12ff2:	b2c9      	uxtb	r1, r1
   12ff4:	e719      	b.n	12e2a <Radio_WriteConfiguration+0x5e>
   12ff6:	2b01      	cmp	r3, #1
   12ff8:	dd07      	ble.n	1300a <Radio_WriteConfiguration+0x23e>
   12ffa:	2714      	movs	r7, #20
   12ffc:	2b13      	cmp	r3, #19
   12ffe:	dc06      	bgt.n	1300e <Radio_WriteConfiguration+0x242>
   13000:	1c1f      	adds	r7, r3, #0
   13002:	2b11      	cmp	r3, #17
   13004:	dd02      	ble.n	1300c <Radio_WriteConfiguration+0x240>
   13006:	2711      	movs	r7, #17
   13008:	e000      	b.n	1300c <Radio_WriteConfiguration+0x240>
   1300a:	2702      	movs	r7, #2
   1300c:	b27f      	sxtb	r7, r7
   1300e:	200b      	movs	r0, #11
   13010:	47b0      	blx	r6
   13012:	9003      	str	r0, [sp, #12]
   13014:	204d      	movs	r0, #77	; 0x4d
   13016:	47b0      	blx	r6
   13018:	2307      	movs	r3, #7
   1301a:	4398      	bics	r0, r3
   1301c:	b2c1      	uxtb	r1, r0
   1301e:	2f14      	cmp	r7, #20
   13020:	d112      	bne.n	13048 <Radio_WriteConfiguration+0x27c>
   13022:	4319      	orrs	r1, r3
   13024:	9b03      	ldr	r3, [sp, #12]
   13026:	37cb      	adds	r7, #203	; 0xcb
   13028:	403b      	ands	r3, r7
   1302a:	001f      	movs	r7, r3
   1302c:	230f      	movs	r3, #15
   1302e:	9301      	str	r3, [sp, #4]
   13030:	204d      	movs	r0, #77	; 0x4d
   13032:	47a8      	blx	r5
   13034:	2180      	movs	r1, #128	; 0x80
   13036:	9b01      	ldr	r3, [sp, #4]
   13038:	4249      	negs	r1, r1
   1303a:	4319      	orrs	r1, r3
   1303c:	b2c9      	uxtb	r1, r1
   1303e:	2009      	movs	r0, #9
   13040:	47a8      	blx	r5
   13042:	0039      	movs	r1, r7
   13044:	200b      	movs	r0, #11
   13046:	e6f1      	b.n	12e2c <Radio_WriteConfiguration+0x60>
   13048:	3f02      	subs	r7, #2
   1304a:	b27b      	sxtb	r3, r7
   1304c:	2720      	movs	r7, #32
   1304e:	2004      	movs	r0, #4
   13050:	9301      	str	r3, [sp, #4]
   13052:	9b03      	ldr	r3, [sp, #12]
   13054:	4301      	orrs	r1, r0
   13056:	431f      	orrs	r7, r3
   13058:	b2ff      	uxtb	r7, r7
   1305a:	e7e9      	b.n	13030 <Radio_WriteConfiguration+0x264>
   1305c:	23fa      	movs	r3, #250	; 0xfa
   1305e:	e71f      	b.n	12ea0 <Radio_WriteConfiguration+0xd4>
   13060:	23fa      	movs	r3, #250	; 0xfa
   13062:	005b      	lsls	r3, r3, #1
   13064:	e71c      	b.n	12ea0 <Radio_WriteConfiguration+0xd4>
   13066:	0019      	movs	r1, r3
   13068:	e71b      	b.n	12ea2 <Radio_WriteConfiguration+0xd6>
   1306a:	21f7      	movs	r1, #247	; 0xf7
   1306c:	4008      	ands	r0, r1
   1306e:	e73c      	b.n	12eea <Radio_WriteConfiguration+0x11e>
   13070:	4a12      	ldr	r2, [pc, #72]	; (130bc <Radio_WriteConfiguration+0x2f0>)
   13072:	189b      	adds	r3, r3, r2
   13074:	4a12      	ldr	r2, [pc, #72]	; (130c0 <Radio_WriteConfiguration+0x2f4>)
   13076:	4293      	cmp	r3, r2
   13078:	d804      	bhi.n	13084 <Radio_WriteConfiguration+0x2b8>
   1307a:	2102      	movs	r1, #2
   1307c:	2036      	movs	r0, #54	; 0x36
   1307e:	47a8      	blx	r5
   13080:	217f      	movs	r1, #127	; 0x7f
   13082:	e796      	b.n	12fb2 <Radio_WriteConfiguration+0x1e6>
   13084:	2103      	movs	r1, #3
   13086:	2036      	movs	r0, #54	; 0x36
   13088:	e794      	b.n	12fb4 <Radio_WriteConfiguration+0x1e8>
   1308a:	47a8      	blx	r5
   1308c:	211d      	movs	r1, #29
   1308e:	e79f      	b.n	12fd0 <Radio_WriteConfiguration+0x204>
   13090:	200027c8 	.word	0x200027c8
   13094:	0000d201 	.word	0x0000d201
   13098:	00012d85 	.word	0x00012d85
   1309c:	00005b41 	.word	0x00005b41
   130a0:	00005b19 	.word	0x00005b19
   130a4:	200027fe 	.word	0x200027fe
   130a8:	00ffff00 	.word	0x00ffff00
   130ac:	00070b00 	.word	0x00070b00
   130b0:	cc9eec80 	.word	0xcc9eec80
   130b4:	096ae380 	.word	0x096ae380
   130b8:	0001e0c0 	.word	0x0001e0c0
   130bc:	e78fe580 	.word	0xe78fe580
   130c0:	06dac2c0 	.word	0x06dac2c0
   130c4:	6863      	ldr	r3, [r4, #4]
   130c6:	492c      	ldr	r1, [pc, #176]	; (13178 <Radio_WriteConfiguration+0x3ac>)
   130c8:	0218      	lsls	r0, r3, #8
   130ca:	4b2c      	ldr	r3, [pc, #176]	; (1317c <Radio_WriteConfiguration+0x3b0>)
   130cc:	4798      	blx	r3
   130ce:	0007      	movs	r7, r0
   130d0:	0a01      	lsrs	r1, r0, #8
   130d2:	b2c9      	uxtb	r1, r1
   130d4:	2004      	movs	r0, #4
   130d6:	47a8      	blx	r5
   130d8:	b2f9      	uxtb	r1, r7
   130da:	2005      	movs	r0, #5
   130dc:	47a8      	blx	r5
   130de:	4b27      	ldr	r3, [pc, #156]	; (1317c <Radio_WriteConfiguration+0x3b0>)
   130e0:	68a1      	ldr	r1, [r4, #8]
   130e2:	4827      	ldr	r0, [pc, #156]	; (13180 <Radio_WriteConfiguration+0x3b4>)
   130e4:	4798      	blx	r3
   130e6:	0007      	movs	r7, r0
   130e8:	0a01      	lsrs	r1, r0, #8
   130ea:	b2c9      	uxtb	r1, r1
   130ec:	2002      	movs	r0, #2
   130ee:	47a8      	blx	r5
   130f0:	b2f9      	uxtb	r1, r7
   130f2:	2003      	movs	r0, #3
   130f4:	47a8      	blx	r5
   130f6:	2100      	movs	r1, #0
   130f8:	205d      	movs	r0, #93	; 0x5d
   130fa:	47a8      	blx	r5
   130fc:	8aa1      	ldrh	r1, [r4, #20]
   130fe:	2025      	movs	r0, #37	; 0x25
   13100:	0a09      	lsrs	r1, r1, #8
   13102:	47a8      	blx	r5
   13104:	7d21      	ldrb	r1, [r4, #20]
   13106:	2026      	movs	r0, #38	; 0x26
   13108:	47a8      	blx	r5
   1310a:	219e      	movs	r1, #158	; 0x9e
   1310c:	200d      	movs	r0, #13
   1310e:	47a8      	blx	r5
   13110:	21bf      	movs	r1, #191	; 0xbf
   13112:	2035      	movs	r0, #53	; 0x35
   13114:	47a8      	blx	r5
   13116:	200a      	movs	r0, #10
   13118:	47b0      	blx	r6
   1311a:	0023      	movs	r3, r4
   1311c:	3337      	adds	r3, #55	; 0x37
   1311e:	7819      	ldrb	r1, [r3, #0]
   13120:	2360      	movs	r3, #96	; 0x60
   13122:	0149      	lsls	r1, r1, #5
   13124:	4398      	bics	r0, r3
   13126:	4301      	orrs	r1, r0
   13128:	b2c9      	uxtb	r1, r1
   1312a:	200a      	movs	r0, #10
   1312c:	47a8      	blx	r5
   1312e:	1d23      	adds	r3, r4, #4
   13130:	7fdb      	ldrb	r3, [r3, #31]
   13132:	21c0      	movs	r1, #192	; 0xc0
   13134:	2b00      	cmp	r3, #0
   13136:	d000      	beq.n	1313a <Radio_WriteConfiguration+0x36e>
   13138:	3110      	adds	r1, #16
   1313a:	2030      	movs	r0, #48	; 0x30
   1313c:	47a8      	blx	r5
   1313e:	2600      	movs	r6, #0
   13140:	1ca3      	adds	r3, r4, #2
   13142:	7fd9      	ldrb	r1, [r3, #31]
   13144:	428e      	cmp	r6, r1
   13146:	d30d      	bcc.n	13164 <Radio_WriteConfiguration+0x398>
   13148:	2900      	cmp	r1, #0
   1314a:	d003      	beq.n	13154 <Radio_WriteConfiguration+0x388>
   1314c:	2310      	movs	r3, #16
   1314e:	3901      	subs	r1, #1
   13150:	4319      	orrs	r1, r3
   13152:	b2c9      	uxtb	r1, r1
   13154:	2027      	movs	r0, #39	; 0x27
   13156:	47a8      	blx	r5
   13158:	21ff      	movs	r1, #255	; 0xff
   1315a:	203e      	movs	r0, #62	; 0x3e
   1315c:	47a8      	blx	r5
   1315e:	21ff      	movs	r1, #255	; 0xff
   13160:	203f      	movs	r0, #63	; 0x3f
   13162:	e739      	b.n	12fd8 <Radio_WriteConfiguration+0x20c>
   13164:	0030      	movs	r0, r6
   13166:	19a3      	adds	r3, r4, r6
   13168:	3028      	adds	r0, #40	; 0x28
   1316a:	7e59      	ldrb	r1, [r3, #25]
   1316c:	b2c0      	uxtb	r0, r0
   1316e:	3601      	adds	r6, #1
   13170:	47a8      	blx	r5
   13172:	b2f6      	uxtb	r6, r6
   13174:	e7e4      	b.n	13140 <Radio_WriteConfiguration+0x374>
   13176:	46c0      	nop			; (mov r8, r8)
   13178:	00003d09 	.word	0x00003d09
   1317c:	00014509 	.word	0x00014509
   13180:	01e84800 	.word	0x01e84800

00013184 <RADIO_getMappingAndOpmode>:
   13184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13186:	0006      	movs	r6, r0
   13188:	4d06      	ldr	r5, [pc, #24]	; (131a4 <RADIO_getMappingAndOpmode+0x20>)
   1318a:	2040      	movs	r0, #64	; 0x40
   1318c:	001f      	movs	r7, r3
   1318e:	0014      	movs	r4, r2
   13190:	9101      	str	r1, [sp, #4]
   13192:	47a8      	blx	r5
   13194:	4004      	ands	r4, r0
   13196:	413c      	asrs	r4, r7
   13198:	2001      	movs	r0, #1
   1319a:	7034      	strb	r4, [r6, #0]
   1319c:	47a8      	blx	r5
   1319e:	9b01      	ldr	r3, [sp, #4]
   131a0:	7018      	strb	r0, [r3, #0]
   131a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   131a4:	00005b41 	.word	0x00005b41

000131a8 <RADIO_UnhandledInterrupt.part.0>:
   131a8:	b510      	push	{r4, lr}
   131aa:	21ff      	movs	r1, #255	; 0xff
   131ac:	2012      	movs	r0, #18
   131ae:	4b01      	ldr	r3, [pc, #4]	; (131b4 <RADIO_UnhandledInterrupt.part.0+0xc>)
   131b0:	4798      	blx	r3
   131b2:	bd10      	pop	{r4, pc}
   131b4:	00005b19 	.word	0x00005b19

000131b8 <RADIO_UnhandledInterrupt>:
   131b8:	b510      	push	{r4, lr}
   131ba:	2801      	cmp	r0, #1
   131bc:	d102      	bne.n	131c4 <RADIO_UnhandledInterrupt+0xc>
   131be:	4b05      	ldr	r3, [pc, #20]	; (131d4 <RADIO_UnhandledInterrupt+0x1c>)
   131c0:	4798      	blx	r3
   131c2:	bd10      	pop	{r4, pc}
   131c4:	21ff      	movs	r1, #255	; 0xff
   131c6:	203e      	movs	r0, #62	; 0x3e
   131c8:	4c03      	ldr	r4, [pc, #12]	; (131d8 <RADIO_UnhandledInterrupt+0x20>)
   131ca:	47a0      	blx	r4
   131cc:	21ff      	movs	r1, #255	; 0xff
   131ce:	203f      	movs	r0, #63	; 0x3f
   131d0:	47a0      	blx	r4
   131d2:	e7f6      	b.n	131c2 <RADIO_UnhandledInterrupt+0xa>
   131d4:	000131a9 	.word	0x000131a9
   131d8:	00005b19 	.word	0x00005b19

000131dc <RADIO_DIO0>:
   131dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   131de:	466b      	mov	r3, sp
   131e0:	1ddc      	adds	r4, r3, #7
   131e2:	1d9d      	adds	r5, r3, #6
   131e4:	22c0      	movs	r2, #192	; 0xc0
   131e6:	2306      	movs	r3, #6
   131e8:	0028      	movs	r0, r5
   131ea:	0021      	movs	r1, r4
   131ec:	4e12      	ldr	r6, [pc, #72]	; (13238 <RADIO_DIO0+0x5c>)
   131ee:	47b0      	blx	r6
   131f0:	7823      	ldrb	r3, [r4, #0]
   131f2:	7828      	ldrb	r0, [r5, #0]
   131f4:	b25a      	sxtb	r2, r3
   131f6:	b2c0      	uxtb	r0, r0
   131f8:	2a00      	cmp	r2, #0
   131fa:	da0b      	bge.n	13214 <RADIO_DIO0+0x38>
   131fc:	2800      	cmp	r0, #0
   131fe:	d004      	beq.n	1320a <RADIO_DIO0+0x2e>
   13200:	2801      	cmp	r0, #1
   13202:	d005      	beq.n	13210 <RADIO_DIO0+0x34>
   13204:	4b0d      	ldr	r3, [pc, #52]	; (1323c <RADIO_DIO0+0x60>)
   13206:	4798      	blx	r3
   13208:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1320a:	4b0d      	ldr	r3, [pc, #52]	; (13240 <RADIO_DIO0+0x64>)
   1320c:	4798      	blx	r3
   1320e:	e7fb      	b.n	13208 <RADIO_DIO0+0x2c>
   13210:	4b0c      	ldr	r3, [pc, #48]	; (13244 <RADIO_DIO0+0x68>)
   13212:	e7fb      	b.n	1320c <RADIO_DIO0+0x30>
   13214:	2800      	cmp	r0, #0
   13216:	d10a      	bne.n	1322e <RADIO_DIO0+0x52>
   13218:	2207      	movs	r2, #7
   1321a:	4013      	ands	r3, r2
   1321c:	7023      	strb	r3, [r4, #0]
   1321e:	2b03      	cmp	r3, #3
   13220:	d101      	bne.n	13226 <RADIO_DIO0+0x4a>
   13222:	4b09      	ldr	r3, [pc, #36]	; (13248 <RADIO_DIO0+0x6c>)
   13224:	e7f2      	b.n	1320c <RADIO_DIO0+0x30>
   13226:	2b05      	cmp	r3, #5
   13228:	d102      	bne.n	13230 <RADIO_DIO0+0x54>
   1322a:	4b08      	ldr	r3, [pc, #32]	; (1324c <RADIO_DIO0+0x70>)
   1322c:	e7ee      	b.n	1320c <RADIO_DIO0+0x30>
   1322e:	2000      	movs	r0, #0
   13230:	4b07      	ldr	r3, [pc, #28]	; (13250 <RADIO_DIO0+0x74>)
   13232:	4798      	blx	r3
   13234:	e7e8      	b.n	13208 <RADIO_DIO0+0x2c>
   13236:	46c0      	nop			; (mov r8, r8)
   13238:	00013185 	.word	0x00013185
   1323c:	000131a9 	.word	0x000131a9
   13240:	00013961 	.word	0x00013961
   13244:	00013865 	.word	0x00013865
   13248:	000138e1 	.word	0x000138e1
   1324c:	000139dd 	.word	0x000139dd
   13250:	000131b9 	.word	0x000131b9

00013254 <RADIO_DIO1>:
   13254:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13256:	466b      	mov	r3, sp
   13258:	1ddc      	adds	r4, r3, #7
   1325a:	1d9d      	adds	r5, r3, #6
   1325c:	2230      	movs	r2, #48	; 0x30
   1325e:	2304      	movs	r3, #4
   13260:	0021      	movs	r1, r4
   13262:	0028      	movs	r0, r5
   13264:	4e11      	ldr	r6, [pc, #68]	; (132ac <RADIO_DIO1+0x58>)
   13266:	47b0      	blx	r6
   13268:	7822      	ldrb	r2, [r4, #0]
   1326a:	782b      	ldrb	r3, [r5, #0]
   1326c:	b251      	sxtb	r1, r2
   1326e:	2900      	cmp	r1, #0
   13270:	da0c      	bge.n	1328c <RADIO_DIO1+0x38>
   13272:	b2db      	uxtb	r3, r3
   13274:	2b00      	cmp	r3, #0
   13276:	d004      	beq.n	13282 <RADIO_DIO1+0x2e>
   13278:	2b01      	cmp	r3, #1
   1327a:	d005      	beq.n	13288 <RADIO_DIO1+0x34>
   1327c:	4b0c      	ldr	r3, [pc, #48]	; (132b0 <RADIO_DIO1+0x5c>)
   1327e:	4798      	blx	r3
   13280:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13282:	4b0c      	ldr	r3, [pc, #48]	; (132b4 <RADIO_DIO1+0x60>)
   13284:	4798      	blx	r3
   13286:	e7fb      	b.n	13280 <RADIO_DIO1+0x2c>
   13288:	4b0b      	ldr	r3, [pc, #44]	; (132b8 <RADIO_DIO1+0x64>)
   1328a:	e7fb      	b.n	13284 <RADIO_DIO1+0x30>
   1328c:	2107      	movs	r1, #7
   1328e:	b2db      	uxtb	r3, r3
   13290:	400a      	ands	r2, r1
   13292:	7022      	strb	r2, [r4, #0]
   13294:	2b00      	cmp	r3, #0
   13296:	d005      	beq.n	132a4 <RADIO_DIO1+0x50>
   13298:	2b01      	cmp	r3, #1
   1329a:	d1f1      	bne.n	13280 <RADIO_DIO1+0x2c>
   1329c:	2a03      	cmp	r2, #3
   1329e:	d1ef      	bne.n	13280 <RADIO_DIO1+0x2c>
   132a0:	4b06      	ldr	r3, [pc, #24]	; (132bc <RADIO_DIO1+0x68>)
   132a2:	e7ef      	b.n	13284 <RADIO_DIO1+0x30>
   132a4:	4b06      	ldr	r3, [pc, #24]	; (132c0 <RADIO_DIO1+0x6c>)
   132a6:	2a05      	cmp	r2, #5
   132a8:	d1ea      	bne.n	13280 <RADIO_DIO1+0x2c>
   132aa:	e7eb      	b.n	13284 <RADIO_DIO1+0x30>
   132ac:	00013185 	.word	0x00013185
   132b0:	000131a9 	.word	0x000131a9
   132b4:	000137e9 	.word	0x000137e9
   132b8:	0000d2e5 	.word	0x0000d2e5
   132bc:	00013611 	.word	0x00013611
   132c0:	00013575 	.word	0x00013575

000132c4 <RADIO_DIO2>:
   132c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   132c6:	466b      	mov	r3, sp
   132c8:	1ddc      	adds	r4, r3, #7
   132ca:	1d9d      	adds	r5, r3, #6
   132cc:	220c      	movs	r2, #12
   132ce:	2302      	movs	r3, #2
   132d0:	0021      	movs	r1, r4
   132d2:	0028      	movs	r0, r5
   132d4:	4e0b      	ldr	r6, [pc, #44]	; (13304 <RADIO_DIO2+0x40>)
   132d6:	47b0      	blx	r6
   132d8:	7823      	ldrb	r3, [r4, #0]
   132da:	782a      	ldrb	r2, [r5, #0]
   132dc:	b259      	sxtb	r1, r3
   132de:	2900      	cmp	r1, #0
   132e0:	da05      	bge.n	132ee <RADIO_DIO2+0x2a>
   132e2:	4b09      	ldr	r3, [pc, #36]	; (13308 <RADIO_DIO2+0x44>)
   132e4:	2a02      	cmp	r2, #2
   132e6:	d90a      	bls.n	132fe <RADIO_DIO2+0x3a>
   132e8:	4b08      	ldr	r3, [pc, #32]	; (1330c <RADIO_DIO2+0x48>)
   132ea:	4798      	blx	r3
   132ec:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   132ee:	2107      	movs	r1, #7
   132f0:	400b      	ands	r3, r1
   132f2:	7023      	strb	r3, [r4, #0]
   132f4:	2a03      	cmp	r2, #3
   132f6:	d1f9      	bne.n	132ec <RADIO_DIO2+0x28>
   132f8:	2b05      	cmp	r3, #5
   132fa:	d1f7      	bne.n	132ec <RADIO_DIO2+0x28>
   132fc:	4b04      	ldr	r3, [pc, #16]	; (13310 <RADIO_DIO2+0x4c>)
   132fe:	4798      	blx	r3
   13300:	e7f4      	b.n	132ec <RADIO_DIO2+0x28>
   13302:	46c0      	nop			; (mov r8, r8)
   13304:	00013185 	.word	0x00013185
   13308:	0000d2e5 	.word	0x0000d2e5
   1330c:	000131a9 	.word	0x000131a9
   13310:	00013545 	.word	0x00013545

00013314 <RADIO_DIO3>:
   13314:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13316:	466b      	mov	r3, sp
   13318:	4668      	mov	r0, sp
   1331a:	1ddc      	adds	r4, r3, #7
   1331c:	2203      	movs	r2, #3
   1331e:	2300      	movs	r3, #0
   13320:	0021      	movs	r1, r4
   13322:	3006      	adds	r0, #6
   13324:	4d03      	ldr	r5, [pc, #12]	; (13334 <RADIO_DIO3+0x20>)
   13326:	47a8      	blx	r5
   13328:	7823      	ldrb	r3, [r4, #0]
   1332a:	2b7f      	cmp	r3, #127	; 0x7f
   1332c:	d901      	bls.n	13332 <RADIO_DIO3+0x1e>
   1332e:	4b02      	ldr	r3, [pc, #8]	; (13338 <RADIO_DIO3+0x24>)
   13330:	4798      	blx	r3
   13332:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13334:	00013185 	.word	0x00013185
   13338:	000131a9 	.word	0x000131a9

0001333c <RADIO_DIO4>:
   1333c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1333e:	466b      	mov	r3, sp
   13340:	4668      	mov	r0, sp
   13342:	1ddc      	adds	r4, r3, #7
   13344:	2306      	movs	r3, #6
   13346:	22c0      	movs	r2, #192	; 0xc0
   13348:	18c0      	adds	r0, r0, r3
   1334a:	0021      	movs	r1, r4
   1334c:	4d03      	ldr	r5, [pc, #12]	; (1335c <RADIO_DIO4+0x20>)
   1334e:	47a8      	blx	r5
   13350:	7823      	ldrb	r3, [r4, #0]
   13352:	2b7f      	cmp	r3, #127	; 0x7f
   13354:	d901      	bls.n	1335a <RADIO_DIO4+0x1e>
   13356:	4b02      	ldr	r3, [pc, #8]	; (13360 <RADIO_DIO4+0x24>)
   13358:	4798      	blx	r3
   1335a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1335c:	00013185 	.word	0x00013185
   13360:	000131a9 	.word	0x000131a9

00013364 <RADIO_DIO5>:
   13364:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13366:	466b      	mov	r3, sp
   13368:	4668      	mov	r0, sp
   1336a:	1ddc      	adds	r4, r3, #7
   1336c:	2230      	movs	r2, #48	; 0x30
   1336e:	2304      	movs	r3, #4
   13370:	0021      	movs	r1, r4
   13372:	3006      	adds	r0, #6
   13374:	4d03      	ldr	r5, [pc, #12]	; (13384 <RADIO_DIO5+0x20>)
   13376:	47a8      	blx	r5
   13378:	7823      	ldrb	r3, [r4, #0]
   1337a:	2b7f      	cmp	r3, #127	; 0x7f
   1337c:	d901      	bls.n	13382 <RADIO_DIO5+0x1e>
   1337e:	4b02      	ldr	r3, [pc, #8]	; (13388 <RADIO_DIO5+0x24>)
   13380:	4798      	blx	r3
   13382:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13384:	00013185 	.word	0x00013185
   13388:	000131a9 	.word	0x000131a9

0001338c <radioPostTask>:
   1338c:	b510      	push	{r4, lr}
   1338e:	0004      	movs	r4, r0
   13390:	4b05      	ldr	r3, [pc, #20]	; (133a8 <radioPostTask+0x1c>)
   13392:	4798      	blx	r3
   13394:	4b05      	ldr	r3, [pc, #20]	; (133ac <radioPostTask+0x20>)
   13396:	8818      	ldrh	r0, [r3, #0]
   13398:	4320      	orrs	r0, r4
   1339a:	8018      	strh	r0, [r3, #0]
   1339c:	4b04      	ldr	r3, [pc, #16]	; (133b0 <radioPostTask+0x24>)
   1339e:	4798      	blx	r3
   133a0:	2002      	movs	r0, #2
   133a2:	4b04      	ldr	r3, [pc, #16]	; (133b4 <radioPostTask+0x28>)
   133a4:	4798      	blx	r3
   133a6:	bd10      	pop	{r4, pc}
   133a8:	00005dc9 	.word	0x00005dc9
   133ac:	20000f62 	.word	0x20000f62
   133b0:	00005dd5 	.word	0x00005dd5
   133b4:	0000d1c9 	.word	0x0000d1c9

000133b8 <radioClearTask>:
   133b8:	b510      	push	{r4, lr}
   133ba:	0004      	movs	r4, r0
   133bc:	4b04      	ldr	r3, [pc, #16]	; (133d0 <radioClearTask+0x18>)
   133be:	4798      	blx	r3
   133c0:	4a04      	ldr	r2, [pc, #16]	; (133d4 <radioClearTask+0x1c>)
   133c2:	8813      	ldrh	r3, [r2, #0]
   133c4:	43a3      	bics	r3, r4
   133c6:	8013      	strh	r3, [r2, #0]
   133c8:	4b03      	ldr	r3, [pc, #12]	; (133d8 <radioClearTask+0x20>)
   133ca:	4798      	blx	r3
   133cc:	bd10      	pop	{r4, pc}
   133ce:	46c0      	nop			; (mov r8, r8)
   133d0:	00005dc9 	.word	0x00005dc9
   133d4:	20000f62 	.word	0x20000f62
   133d8:	00005dd5 	.word	0x00005dd5

000133dc <RADIO_TaskHandler>:
   133dc:	b570      	push	{r4, r5, r6, lr}
   133de:	2400      	movs	r4, #0
   133e0:	4d10      	ldr	r5, [pc, #64]	; (13424 <RADIO_TaskHandler+0x48>)
   133e2:	2601      	movs	r6, #1
   133e4:	882b      	ldrh	r3, [r5, #0]
   133e6:	42a3      	cmp	r3, r4
   133e8:	d015      	beq.n	13416 <RADIO_TaskHandler+0x3a>
   133ea:	882b      	ldrh	r3, [r5, #0]
   133ec:	4123      	asrs	r3, r4
   133ee:	4233      	tst	r3, r6
   133f0:	d013      	beq.n	1341a <RADIO_TaskHandler+0x3e>
   133f2:	40a6      	lsls	r6, r4
   133f4:	4b0c      	ldr	r3, [pc, #48]	; (13428 <RADIO_TaskHandler+0x4c>)
   133f6:	4798      	blx	r3
   133f8:	882b      	ldrh	r3, [r5, #0]
   133fa:	00a4      	lsls	r4, r4, #2
   133fc:	43b3      	bics	r3, r6
   133fe:	802b      	strh	r3, [r5, #0]
   13400:	4b0a      	ldr	r3, [pc, #40]	; (1342c <RADIO_TaskHandler+0x50>)
   13402:	4798      	blx	r3
   13404:	4b0a      	ldr	r3, [pc, #40]	; (13430 <RADIO_TaskHandler+0x54>)
   13406:	58e3      	ldr	r3, [r4, r3]
   13408:	4798      	blx	r3
   1340a:	882b      	ldrh	r3, [r5, #0]
   1340c:	2b00      	cmp	r3, #0
   1340e:	d002      	beq.n	13416 <RADIO_TaskHandler+0x3a>
   13410:	2002      	movs	r0, #2
   13412:	4b08      	ldr	r3, [pc, #32]	; (13434 <RADIO_TaskHandler+0x58>)
   13414:	4798      	blx	r3
   13416:	2000      	movs	r0, #0
   13418:	bd70      	pop	{r4, r5, r6, pc}
   1341a:	3401      	adds	r4, #1
   1341c:	2c05      	cmp	r4, #5
   1341e:	d1e4      	bne.n	133ea <RADIO_TaskHandler+0xe>
   13420:	e7f9      	b.n	13416 <RADIO_TaskHandler+0x3a>
   13422:	46c0      	nop			; (mov r8, r8)
   13424:	20000f62 	.word	0x20000f62
   13428:	00005dc9 	.word	0x00005dc9
   1342c:	00005dd5 	.word	0x00005dd5
   13430:	0001e0c4 	.word	0x0001e0c4
   13434:	0000d1c9 	.word	0x0000d1c9

00013438 <RadioSetState>:
   13438:	4b01      	ldr	r3, [pc, #4]	; (13440 <RadioSetState+0x8>)
   1343a:	7018      	strb	r0, [r3, #0]
   1343c:	4770      	bx	lr
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	20002e1b 	.word	0x20002e1b

00013444 <RADIO_GetState>:
   13444:	4b01      	ldr	r3, [pc, #4]	; (1344c <RADIO_GetState+0x8>)
   13446:	7818      	ldrb	r0, [r3, #0]
   13448:	b2c0      	uxtb	r0, r0
   1344a:	4770      	bx	lr
   1344c:	20002e1b 	.word	0x20002e1b

00013450 <RADIO_SetCallbackBitmask>:
   13450:	4a02      	ldr	r2, [pc, #8]	; (1345c <RADIO_SetCallbackBitmask+0xc>)
   13452:	7813      	ldrb	r3, [r2, #0]
   13454:	4318      	orrs	r0, r3
   13456:	7010      	strb	r0, [r2, #0]
   13458:	4770      	bx	lr
   1345a:	46c0      	nop			; (mov r8, r8)
   1345c:	20002e1a 	.word	0x20002e1a

00013460 <RADIO_Transmit>:
   13460:	b570      	push	{r4, r5, r6, lr}
   13462:	4d10      	ldr	r5, [pc, #64]	; (134a4 <RADIO_Transmit+0x44>)
   13464:	0006      	movs	r6, r0
   13466:	782b      	ldrb	r3, [r5, #0]
   13468:	2004      	movs	r0, #4
   1346a:	2b01      	cmp	r3, #1
   1346c:	d118      	bne.n	134a0 <RADIO_Transmit+0x40>
   1346e:	4c0e      	ldr	r4, [pc, #56]	; (134a8 <RADIO_Transmit+0x48>)
   13470:	0023      	movs	r3, r4
   13472:	332f      	adds	r3, #47	; 0x2f
   13474:	7818      	ldrb	r0, [r3, #0]
   13476:	4b0d      	ldr	r3, [pc, #52]	; (134ac <RADIO_Transmit+0x4c>)
   13478:	4798      	blx	r3
   1347a:	4b0d      	ldr	r3, [pc, #52]	; (134b0 <RADIO_Transmit+0x50>)
   1347c:	7832      	ldrb	r2, [r6, #0]
   1347e:	6871      	ldr	r1, [r6, #4]
   13480:	701a      	strb	r2, [r3, #0]
   13482:	4b0c      	ldr	r3, [pc, #48]	; (134b4 <RADIO_Transmit+0x54>)
   13484:	3434      	adds	r4, #52	; 0x34
   13486:	6019      	str	r1, [r3, #0]
   13488:	7821      	ldrb	r1, [r4, #0]
   1348a:	2302      	movs	r3, #2
   1348c:	2900      	cmp	r1, #0
   1348e:	d102      	bne.n	13496 <RADIO_Transmit+0x36>
   13490:	0018      	movs	r0, r3
   13492:	2a3f      	cmp	r2, #63	; 0x3f
   13494:	d804      	bhi.n	134a0 <RADIO_Transmit+0x40>
   13496:	702b      	strb	r3, [r5, #0]
   13498:	2004      	movs	r0, #4
   1349a:	4b07      	ldr	r3, [pc, #28]	; (134b8 <RADIO_Transmit+0x58>)
   1349c:	4798      	blx	r3
   1349e:	2000      	movs	r0, #0
   134a0:	bd70      	pop	{r4, r5, r6, pc}
   134a2:	46c0      	nop			; (mov r8, r8)
   134a4:	20002e1b 	.word	0x20002e1b
   134a8:	200027c8 	.word	0x200027c8
   134ac:	0000ce4d 	.word	0x0000ce4d
   134b0:	20000f74 	.word	0x20000f74
   134b4:	20000f70 	.word	0x20000f70
   134b8:	0001338d 	.word	0x0001338d

000134bc <Radio_FSKTxPayloadHandler>:
   134bc:	b570      	push	{r4, r5, r6, lr}
   134be:	4b1c      	ldr	r3, [pc, #112]	; (13530 <Radio_FSKTxPayloadHandler+0x74>)
   134c0:	000d      	movs	r5, r1
   134c2:	4798      	blx	r3
   134c4:	4c1b      	ldr	r4, [pc, #108]	; (13534 <Radio_FSKTxPayloadHandler+0x78>)
   134c6:	3458      	adds	r4, #88	; 0x58
   134c8:	7820      	ldrb	r0, [r4, #0]
   134ca:	b2c0      	uxtb	r0, r0
   134cc:	2800      	cmp	r0, #0
   134ce:	d112      	bne.n	134f6 <Radio_FSKTxPayloadHandler+0x3a>
   134d0:	2d00      	cmp	r5, #0
   134d2:	d007      	beq.n	134e4 <Radio_FSKTxPayloadHandler+0x28>
   134d4:	4918      	ldr	r1, [pc, #96]	; (13538 <Radio_FSKTxPayloadHandler+0x7c>)
   134d6:	4b19      	ldr	r3, [pc, #100]	; (1353c <Radio_FSKTxPayloadHandler+0x80>)
   134d8:	2d3e      	cmp	r5, #62	; 0x3e
   134da:	d806      	bhi.n	134ea <Radio_FSKTxPayloadHandler+0x2e>
   134dc:	002a      	movs	r2, r5
   134de:	6809      	ldr	r1, [r1, #0]
   134e0:	4798      	blx	r3
   134e2:	7025      	strb	r5, [r4, #0]
   134e4:	4b16      	ldr	r3, [pc, #88]	; (13540 <Radio_FSKTxPayloadHandler+0x84>)
   134e6:	4798      	blx	r3
   134e8:	bd70      	pop	{r4, r5, r6, pc}
   134ea:	223f      	movs	r2, #63	; 0x3f
   134ec:	6809      	ldr	r1, [r1, #0]
   134ee:	4798      	blx	r3
   134f0:	233f      	movs	r3, #63	; 0x3f
   134f2:	7023      	strb	r3, [r4, #0]
   134f4:	e7f6      	b.n	134e4 <Radio_FSKTxPayloadHandler+0x28>
   134f6:	7823      	ldrb	r3, [r4, #0]
   134f8:	429d      	cmp	r5, r3
   134fa:	d0f3      	beq.n	134e4 <Radio_FSKTxPayloadHandler+0x28>
   134fc:	7822      	ldrb	r2, [r4, #0]
   134fe:	480e      	ldr	r0, [pc, #56]	; (13538 <Radio_FSKTxPayloadHandler+0x7c>)
   13500:	1aaa      	subs	r2, r5, r2
   13502:	b2d2      	uxtb	r2, r2
   13504:	4b0d      	ldr	r3, [pc, #52]	; (1353c <Radio_FSKTxPayloadHandler+0x80>)
   13506:	2a3f      	cmp	r2, #63	; 0x3f
   13508:	d807      	bhi.n	1351a <Radio_FSKTxPayloadHandler+0x5e>
   1350a:	7826      	ldrb	r6, [r4, #0]
   1350c:	7822      	ldrb	r2, [r4, #0]
   1350e:	6801      	ldr	r1, [r0, #0]
   13510:	1aaa      	subs	r2, r5, r2
   13512:	b2d2      	uxtb	r2, r2
   13514:	1989      	adds	r1, r1, r6
   13516:	2000      	movs	r0, #0
   13518:	e7e2      	b.n	134e0 <Radio_FSKTxPayloadHandler+0x24>
   1351a:	7822      	ldrb	r2, [r4, #0]
   1351c:	6801      	ldr	r1, [r0, #0]
   1351e:	2000      	movs	r0, #0
   13520:	1889      	adds	r1, r1, r2
   13522:	223f      	movs	r2, #63	; 0x3f
   13524:	4798      	blx	r3
   13526:	7823      	ldrb	r3, [r4, #0]
   13528:	333f      	adds	r3, #63	; 0x3f
   1352a:	b2db      	uxtb	r3, r3
   1352c:	e7e1      	b.n	134f2 <Radio_FSKTxPayloadHandler+0x36>
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	00002a15 	.word	0x00002a15
   13534:	200027c8 	.word	0x200027c8
   13538:	20000f70 	.word	0x20000f70
   1353c:	00005b6d 	.word	0x00005b6d
   13540:	00002a55 	.word	0x00002a55

00013544 <RADIO_FSKSyncAddr>:
   13544:	4b08      	ldr	r3, [pc, #32]	; (13568 <RADIO_FSKSyncAddr+0x24>)
   13546:	b510      	push	{r4, lr}
   13548:	4798      	blx	r3
   1354a:	4b08      	ldr	r3, [pc, #32]	; (1356c <RADIO_FSKSyncAddr+0x28>)
   1354c:	001a      	movs	r2, r3
   1354e:	3234      	adds	r2, #52	; 0x34
   13550:	7812      	ldrb	r2, [r2, #0]
   13552:	2a00      	cmp	r2, #0
   13554:	d104      	bne.n	13560 <RADIO_FSKSyncAddr+0x1c>
   13556:	0019      	movs	r1, r3
   13558:	3358      	adds	r3, #88	; 0x58
   1355a:	312c      	adds	r1, #44	; 0x2c
   1355c:	700a      	strb	r2, [r1, #0]
   1355e:	701a      	strb	r2, [r3, #0]
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <RADIO_FSKSyncAddr+0x2c>)
   13562:	4798      	blx	r3
   13564:	bd10      	pop	{r4, pc}
   13566:	46c0      	nop			; (mov r8, r8)
   13568:	00002a15 	.word	0x00002a15
   1356c:	200027c8 	.word	0x200027c8
   13570:	00002a55 	.word	0x00002a55

00013574 <RADIO_FSKFifoLevel>:
   13574:	b570      	push	{r4, r5, r6, lr}
   13576:	4b22      	ldr	r3, [pc, #136]	; (13600 <RADIO_FSKFifoLevel+0x8c>)
   13578:	4798      	blx	r3
   1357a:	4d22      	ldr	r5, [pc, #136]	; (13604 <RADIO_FSKFifoLevel+0x90>)
   1357c:	002a      	movs	r2, r5
   1357e:	002b      	movs	r3, r5
   13580:	322c      	adds	r2, #44	; 0x2c
   13582:	3358      	adds	r3, #88	; 0x58
   13584:	7810      	ldrb	r0, [r2, #0]
   13586:	7819      	ldrb	r1, [r3, #0]
   13588:	4288      	cmp	r0, r1
   1358a:	d105      	bne.n	13598 <RADIO_FSKFifoLevel+0x24>
   1358c:	7812      	ldrb	r2, [r2, #0]
   1358e:	2a00      	cmp	r2, #0
   13590:	d002      	beq.n	13598 <RADIO_FSKFifoLevel+0x24>
   13592:	781b      	ldrb	r3, [r3, #0]
   13594:	2b00      	cmp	r3, #0
   13596:	d11f      	bne.n	135d8 <RADIO_FSKFifoLevel+0x64>
   13598:	0029      	movs	r1, r5
   1359a:	312c      	adds	r1, #44	; 0x2c
   1359c:	7808      	ldrb	r0, [r1, #0]
   1359e:	b2c0      	uxtb	r0, r0
   135a0:	2800      	cmp	r0, #0
   135a2:	d102      	bne.n	135aa <RADIO_FSKFifoLevel+0x36>
   135a4:	2201      	movs	r2, #1
   135a6:	4b18      	ldr	r3, [pc, #96]	; (13608 <RADIO_FSKFifoLevel+0x94>)
   135a8:	4798      	blx	r3
   135aa:	002e      	movs	r6, r5
   135ac:	002c      	movs	r4, r5
   135ae:	362c      	adds	r6, #44	; 0x2c
   135b0:	3458      	adds	r4, #88	; 0x58
   135b2:	7833      	ldrb	r3, [r6, #0]
   135b4:	7822      	ldrb	r2, [r4, #0]
   135b6:	1a9b      	subs	r3, r3, r2
   135b8:	b2db      	uxtb	r3, r3
   135ba:	2b3e      	cmp	r3, #62	; 0x3e
   135bc:	d80f      	bhi.n	135de <RADIO_FSKFifoLevel+0x6a>
   135be:	7823      	ldrb	r3, [r4, #0]
   135c0:	7832      	ldrb	r2, [r6, #0]
   135c2:	7821      	ldrb	r1, [r4, #0]
   135c4:	2000      	movs	r0, #0
   135c6:	1a52      	subs	r2, r2, r1
   135c8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   135ca:	b2d2      	uxtb	r2, r2
   135cc:	18c9      	adds	r1, r1, r3
   135ce:	4b0e      	ldr	r3, [pc, #56]	; (13608 <RADIO_FSKFifoLevel+0x94>)
   135d0:	4798      	blx	r3
   135d2:	7833      	ldrb	r3, [r6, #0]
   135d4:	b2db      	uxtb	r3, r3
   135d6:	7023      	strb	r3, [r4, #0]
   135d8:	4b0c      	ldr	r3, [pc, #48]	; (1360c <RADIO_FSKFifoLevel+0x98>)
   135da:	4798      	blx	r3
   135dc:	bd70      	pop	{r4, r5, r6, pc}
   135de:	7833      	ldrb	r3, [r6, #0]
   135e0:	7822      	ldrb	r2, [r4, #0]
   135e2:	1a9b      	subs	r3, r3, r2
   135e4:	b2db      	uxtb	r3, r3
   135e6:	2b3f      	cmp	r3, #63	; 0x3f
   135e8:	d9f6      	bls.n	135d8 <RADIO_FSKFifoLevel+0x64>
   135ea:	7823      	ldrb	r3, [r4, #0]
   135ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   135ee:	223f      	movs	r2, #63	; 0x3f
   135f0:	18c9      	adds	r1, r1, r3
   135f2:	2000      	movs	r0, #0
   135f4:	4b04      	ldr	r3, [pc, #16]	; (13608 <RADIO_FSKFifoLevel+0x94>)
   135f6:	4798      	blx	r3
   135f8:	7823      	ldrb	r3, [r4, #0]
   135fa:	333f      	adds	r3, #63	; 0x3f
   135fc:	e7ea      	b.n	135d4 <RADIO_FSKFifoLevel+0x60>
   135fe:	46c0      	nop			; (mov r8, r8)
   13600:	00002a15 	.word	0x00002a15
   13604:	200027c8 	.word	0x200027c8
   13608:	00005bad 	.word	0x00005bad
   1360c:	00002a55 	.word	0x00002a55

00013610 <RADIO_FSKFifoEmpty>:
   13610:	b510      	push	{r4, lr}
   13612:	4b03      	ldr	r3, [pc, #12]	; (13620 <RADIO_FSKFifoEmpty+0x10>)
   13614:	7819      	ldrb	r1, [r3, #0]
   13616:	4b03      	ldr	r3, [pc, #12]	; (13624 <RADIO_FSKFifoEmpty+0x14>)
   13618:	6818      	ldr	r0, [r3, #0]
   1361a:	4b03      	ldr	r3, [pc, #12]	; (13628 <RADIO_FSKFifoEmpty+0x18>)
   1361c:	4798      	blx	r3
   1361e:	bd10      	pop	{r4, pc}
   13620:	20000f74 	.word	0x20000f74
   13624:	20000f70 	.word	0x20000f70
   13628:	000134bd 	.word	0x000134bd

0001362c <RADIO_GetData>:
   1362c:	4b03      	ldr	r3, [pc, #12]	; (1363c <RADIO_GetData+0x10>)
   1362e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13630:	332c      	adds	r3, #44	; 0x2c
   13632:	6002      	str	r2, [r0, #0]
   13634:	781b      	ldrb	r3, [r3, #0]
   13636:	2000      	movs	r0, #0
   13638:	800b      	strh	r3, [r1, #0]
   1363a:	4770      	bx	lr
   1363c:	200027c8 	.word	0x200027c8

00013640 <Radio_EnableRfControl>:
   13640:	b510      	push	{r4, lr}
   13642:	4b08      	ldr	r3, [pc, #32]	; (13664 <Radio_EnableRfControl+0x24>)
   13644:	0001      	movs	r1, r0
   13646:	681a      	ldr	r2, [r3, #0]
   13648:	4807      	ldr	r0, [pc, #28]	; (13668 <Radio_EnableRfControl+0x28>)
   1364a:	4c08      	ldr	r4, [pc, #32]	; (1366c <Radio_EnableRfControl+0x2c>)
   1364c:	1812      	adds	r2, r2, r0
   1364e:	2000      	movs	r0, #0
   13650:	42a2      	cmp	r2, r4
   13652:	d804      	bhi.n	1365e <Radio_EnableRfControl+0x1e>
   13654:	3305      	adds	r3, #5
   13656:	7fdb      	ldrb	r3, [r3, #31]
   13658:	1e58      	subs	r0, r3, #1
   1365a:	4183      	sbcs	r3, r0
   1365c:	1c58      	adds	r0, r3, #1
   1365e:	4b04      	ldr	r3, [pc, #16]	; (13670 <Radio_EnableRfControl+0x30>)
   13660:	4798      	blx	r3
   13662:	bd10      	pop	{r4, pc}
   13664:	200027c8 	.word	0x200027c8
   13668:	cc9eec80 	.word	0xcc9eec80
   1366c:	096ae380 	.word	0x096ae380
   13670:	00005c19 	.word	0x00005c19

00013674 <RADIO_RxHandler>:
   13674:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13676:	4b33      	ldr	r3, [pc, #204]	; (13744 <RADIO_RxHandler+0xd0>)
   13678:	2000      	movs	r0, #0
   1367a:	4798      	blx	r3
   1367c:	4e32      	ldr	r6, [pc, #200]	; (13748 <RADIO_RxHandler+0xd4>)
   1367e:	4b33      	ldr	r3, [pc, #204]	; (1374c <RADIO_RxHandler+0xd8>)
   13680:	8830      	ldrh	r0, [r6, #0]
   13682:	2800      	cmp	r0, #0
   13684:	d100      	bne.n	13688 <RADIO_RxHandler+0x14>
   13686:	3004      	adds	r0, #4
   13688:	4798      	blx	r3
   1368a:	4c31      	ldr	r4, [pc, #196]	; (13750 <RADIO_RxHandler+0xdc>)
   1368c:	4d31      	ldr	r5, [pc, #196]	; (13754 <RADIO_RxHandler+0xe0>)
   1368e:	0023      	movs	r3, r4
   13690:	3334      	adds	r3, #52	; 0x34
   13692:	7819      	ldrb	r1, [r3, #0]
   13694:	2901      	cmp	r1, #1
   13696:	d122      	bne.n	136de <RADIO_RxHandler+0x6a>
   13698:	2022      	movs	r0, #34	; 0x22
   1369a:	47a8      	blx	r5
   1369c:	2100      	movs	r1, #0
   1369e:	2040      	movs	r0, #64	; 0x40
   136a0:	47a8      	blx	r5
   136a2:	2100      	movs	r1, #0
   136a4:	2041      	movs	r0, #65	; 0x41
   136a6:	47a8      	blx	r5
   136a8:	8832      	ldrh	r2, [r6, #0]
   136aa:	4b2b      	ldr	r3, [pc, #172]	; (13758 <RADIO_RxHandler+0xe4>)
   136ac:	2a00      	cmp	r2, #0
   136ae:	d131      	bne.n	13714 <RADIO_RxHandler+0xa0>
   136b0:	0021      	movs	r1, r4
   136b2:	2005      	movs	r0, #5
   136b4:	3134      	adds	r1, #52	; 0x34
   136b6:	7809      	ldrb	r1, [r1, #0]
   136b8:	4798      	blx	r3
   136ba:	68e3      	ldr	r3, [r4, #12]
   136bc:	2b00      	cmp	r3, #0
   136be:	d00c      	beq.n	136da <RADIO_RxHandler+0x66>
   136c0:	8832      	ldrh	r2, [r6, #0]
   136c2:	2a00      	cmp	r2, #0
   136c4:	d009      	beq.n	136da <RADIO_RxHandler+0x66>
   136c6:	21fa      	movs	r1, #250	; 0xfa
   136c8:	2200      	movs	r2, #0
   136ca:	342f      	adds	r4, #47	; 0x2f
   136cc:	0089      	lsls	r1, r1, #2
   136ce:	7820      	ldrb	r0, [r4, #0]
   136d0:	4359      	muls	r1, r3
   136d2:	9200      	str	r2, [sp, #0]
   136d4:	4b21      	ldr	r3, [pc, #132]	; (1375c <RADIO_RxHandler+0xe8>)
   136d6:	4c22      	ldr	r4, [pc, #136]	; (13760 <RADIO_RxHandler+0xec>)
   136d8:	47a0      	blx	r4
   136da:	2000      	movs	r0, #0
   136dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   136de:	0023      	movs	r3, r4
   136e0:	3338      	adds	r3, #56	; 0x38
   136e2:	7819      	ldrb	r1, [r3, #0]
   136e4:	2012      	movs	r0, #18
   136e6:	47a8      	blx	r5
   136e8:	0023      	movs	r3, r4
   136ea:	3339      	adds	r3, #57	; 0x39
   136ec:	7819      	ldrb	r1, [r3, #0]
   136ee:	2013      	movs	r0, #19
   136f0:	47a8      	blx	r5
   136f2:	210c      	movs	r1, #12
   136f4:	2040      	movs	r0, #64	; 0x40
   136f6:	47a8      	blx	r5
   136f8:	2100      	movs	r1, #0
   136fa:	2041      	movs	r0, #65	; 0x41
   136fc:	47a8      	blx	r5
   136fe:	0022      	movs	r2, r4
   13700:	2300      	movs	r3, #0
   13702:	3256      	adds	r2, #86	; 0x56
   13704:	8013      	strh	r3, [r2, #0]
   13706:	0022      	movs	r2, r4
   13708:	322c      	adds	r2, #44	; 0x2c
   1370a:	7013      	strb	r3, [r2, #0]
   1370c:	0022      	movs	r2, r4
   1370e:	3258      	adds	r2, #88	; 0x58
   13710:	7013      	strb	r3, [r2, #0]
   13712:	e7c9      	b.n	136a8 <RADIO_RxHandler+0x34>
   13714:	0022      	movs	r2, r4
   13716:	3234      	adds	r2, #52	; 0x34
   13718:	7811      	ldrb	r1, [r2, #0]
   1371a:	2200      	movs	r2, #0
   1371c:	2901      	cmp	r1, #1
   1371e:	d101      	bne.n	13724 <RADIO_RxHandler+0xb0>
   13720:	2006      	movs	r0, #6
   13722:	e7c9      	b.n	136b8 <RADIO_RxHandler+0x44>
   13724:	0011      	movs	r1, r2
   13726:	2005      	movs	r0, #5
   13728:	4798      	blx	r3
   1372a:	21fa      	movs	r1, #250	; 0xfa
   1372c:	8833      	ldrh	r3, [r6, #0]
   1372e:	0089      	lsls	r1, r1, #2
   13730:	4359      	muls	r1, r3
   13732:	0023      	movs	r3, r4
   13734:	2200      	movs	r2, #0
   13736:	332e      	adds	r3, #46	; 0x2e
   13738:	7818      	ldrb	r0, [r3, #0]
   1373a:	4d09      	ldr	r5, [pc, #36]	; (13760 <RADIO_RxHandler+0xec>)
   1373c:	9200      	str	r2, [sp, #0]
   1373e:	4b09      	ldr	r3, [pc, #36]	; (13764 <RADIO_RxHandler+0xf0>)
   13740:	47a8      	blx	r5
   13742:	e7ba      	b.n	136ba <RADIO_RxHandler+0x46>
   13744:	00013641 	.word	0x00013641
   13748:	20000f66 	.word	0x20000f66
   1374c:	00012dcd 	.word	0x00012dcd
   13750:	200027c8 	.word	0x200027c8
   13754:	00005b19 	.word	0x00005b19
   13758:	0000d201 	.word	0x0000d201
   1375c:	0001379d 	.word	0x0001379d
   13760:	0000cb35 	.word	0x0000cb35
   13764:	0001382d 	.word	0x0001382d

00013768 <Radio_DisableRfControl>:
   13768:	b510      	push	{r4, lr}
   1376a:	4b08      	ldr	r3, [pc, #32]	; (1378c <Radio_DisableRfControl+0x24>)
   1376c:	0001      	movs	r1, r0
   1376e:	681a      	ldr	r2, [r3, #0]
   13770:	4807      	ldr	r0, [pc, #28]	; (13790 <Radio_DisableRfControl+0x28>)
   13772:	4c08      	ldr	r4, [pc, #32]	; (13794 <Radio_DisableRfControl+0x2c>)
   13774:	1812      	adds	r2, r2, r0
   13776:	2000      	movs	r0, #0
   13778:	42a2      	cmp	r2, r4
   1377a:	d804      	bhi.n	13786 <Radio_DisableRfControl+0x1e>
   1377c:	3305      	adds	r3, #5
   1377e:	7fdb      	ldrb	r3, [r3, #31]
   13780:	1e58      	subs	r0, r3, #1
   13782:	4183      	sbcs	r3, r0
   13784:	1c58      	adds	r0, r3, #1
   13786:	4b04      	ldr	r3, [pc, #16]	; (13798 <Radio_DisableRfControl+0x30>)
   13788:	4798      	blx	r3
   1378a:	bd10      	pop	{r4, pc}
   1378c:	200027c8 	.word	0x200027c8
   13790:	cc9eec80 	.word	0xcc9eec80
   13794:	096ae380 	.word	0x096ae380
   13798:	00005c41 	.word	0x00005c41

0001379c <Radio_WatchdogTimeout>:
   1379c:	b510      	push	{r4, lr}
   1379e:	4b0e      	ldr	r3, [pc, #56]	; (137d8 <Radio_WatchdogTimeout+0x3c>)
   137a0:	781a      	ldrb	r2, [r3, #0]
   137a2:	2a04      	cmp	r2, #4
   137a4:	d10b      	bne.n	137be <Radio_WatchdogTimeout+0x22>
   137a6:	2320      	movs	r3, #32
   137a8:	4a0c      	ldr	r2, [pc, #48]	; (137dc <Radio_WatchdogTimeout+0x40>)
   137aa:	2000      	movs	r0, #0
   137ac:	8811      	ldrh	r1, [r2, #0]
   137ae:	430b      	orrs	r3, r1
   137b0:	8013      	strh	r3, [r2, #0]
   137b2:	4b0b      	ldr	r3, [pc, #44]	; (137e0 <Radio_WatchdogTimeout+0x44>)
   137b4:	4798      	blx	r3
   137b6:	2002      	movs	r0, #2
   137b8:	4b0a      	ldr	r3, [pc, #40]	; (137e4 <Radio_WatchdogTimeout+0x48>)
   137ba:	4798      	blx	r3
   137bc:	bd10      	pop	{r4, pc}
   137be:	781b      	ldrb	r3, [r3, #0]
   137c0:	2b02      	cmp	r3, #2
   137c2:	d1fb      	bne.n	137bc <Radio_WatchdogTimeout+0x20>
   137c4:	4a05      	ldr	r2, [pc, #20]	; (137dc <Radio_WatchdogTimeout+0x40>)
   137c6:	330e      	adds	r3, #14
   137c8:	8811      	ldrh	r1, [r2, #0]
   137ca:	2001      	movs	r0, #1
   137cc:	430b      	orrs	r3, r1
   137ce:	8013      	strh	r3, [r2, #0]
   137d0:	4b03      	ldr	r3, [pc, #12]	; (137e0 <Radio_WatchdogTimeout+0x44>)
   137d2:	4798      	blx	r3
   137d4:	2001      	movs	r0, #1
   137d6:	e7ef      	b.n	137b8 <Radio_WatchdogTimeout+0x1c>
   137d8:	20002e1b 	.word	0x20002e1b
   137dc:	20002e18 	.word	0x20002e18
   137e0:	00013769 	.word	0x00013769
   137e4:	0001338d 	.word	0x0001338d

000137e8 <RADIO_RxTimeout>:
   137e8:	b510      	push	{r4, lr}
   137ea:	4b0a      	ldr	r3, [pc, #40]	; (13814 <RADIO_RxTimeout+0x2c>)
   137ec:	332f      	adds	r3, #47	; 0x2f
   137ee:	7818      	ldrb	r0, [r3, #0]
   137f0:	4b09      	ldr	r3, [pc, #36]	; (13818 <RADIO_RxTimeout+0x30>)
   137f2:	4798      	blx	r3
   137f4:	2000      	movs	r0, #0
   137f6:	4b09      	ldr	r3, [pc, #36]	; (1381c <RADIO_RxTimeout+0x34>)
   137f8:	4798      	blx	r3
   137fa:	2180      	movs	r1, #128	; 0x80
   137fc:	2012      	movs	r0, #18
   137fe:	4b08      	ldr	r3, [pc, #32]	; (13820 <RADIO_RxTimeout+0x38>)
   13800:	4798      	blx	r3
   13802:	2340      	movs	r3, #64	; 0x40
   13804:	4a07      	ldr	r2, [pc, #28]	; (13824 <RADIO_RxTimeout+0x3c>)
   13806:	2002      	movs	r0, #2
   13808:	8811      	ldrh	r1, [r2, #0]
   1380a:	430b      	orrs	r3, r1
   1380c:	8013      	strh	r3, [r2, #0]
   1380e:	4b06      	ldr	r3, [pc, #24]	; (13828 <RADIO_RxTimeout+0x40>)
   13810:	4798      	blx	r3
   13812:	bd10      	pop	{r4, pc}
   13814:	200027c8 	.word	0x200027c8
   13818:	0000ce4d 	.word	0x0000ce4d
   1381c:	00013769 	.word	0x00013769
   13820:	00005b19 	.word	0x00005b19
   13824:	20002e18 	.word	0x20002e18
   13828:	0001338d 	.word	0x0001338d

0001382c <Radio_RxFSKTimeout>:
   1382c:	b510      	push	{r4, lr}
   1382e:	4b08      	ldr	r3, [pc, #32]	; (13850 <Radio_RxFSKTimeout+0x24>)
   13830:	332f      	adds	r3, #47	; 0x2f
   13832:	7818      	ldrb	r0, [r3, #0]
   13834:	4b07      	ldr	r3, [pc, #28]	; (13854 <Radio_RxFSKTimeout+0x28>)
   13836:	4798      	blx	r3
   13838:	2000      	movs	r0, #0
   1383a:	4b07      	ldr	r3, [pc, #28]	; (13858 <Radio_RxFSKTimeout+0x2c>)
   1383c:	4798      	blx	r3
   1383e:	2380      	movs	r3, #128	; 0x80
   13840:	4a06      	ldr	r2, [pc, #24]	; (1385c <Radio_RxFSKTimeout+0x30>)
   13842:	2002      	movs	r0, #2
   13844:	8811      	ldrh	r1, [r2, #0]
   13846:	430b      	orrs	r3, r1
   13848:	8013      	strh	r3, [r2, #0]
   1384a:	4b05      	ldr	r3, [pc, #20]	; (13860 <Radio_RxFSKTimeout+0x34>)
   1384c:	4798      	blx	r3
   1384e:	bd10      	pop	{r4, pc}
   13850:	200027c8 	.word	0x200027c8
   13854:	0000ce4d 	.word	0x0000ce4d
   13858:	00013769 	.word	0x00013769
   1385c:	20002e18 	.word	0x20002e18
   13860:	0001338d 	.word	0x0001338d

00013864 <RADIO_TxDone>:
   13864:	b570      	push	{r4, r5, r6, lr}
   13866:	4b14      	ldr	r3, [pc, #80]	; (138b8 <RADIO_TxDone+0x54>)
   13868:	332f      	adds	r3, #47	; 0x2f
   1386a:	7818      	ldrb	r0, [r3, #0]
   1386c:	4b13      	ldr	r3, [pc, #76]	; (138bc <RADIO_TxDone+0x58>)
   1386e:	4798      	blx	r3
   13870:	2001      	movs	r0, #1
   13872:	4b13      	ldr	r3, [pc, #76]	; (138c0 <RADIO_TxDone+0x5c>)
   13874:	4798      	blx	r3
   13876:	4b13      	ldr	r3, [pc, #76]	; (138c4 <RADIO_TxDone+0x60>)
   13878:	2108      	movs	r1, #8
   1387a:	2012      	movs	r0, #18
   1387c:	4798      	blx	r3
   1387e:	4b12      	ldr	r3, [pc, #72]	; (138c8 <RADIO_TxDone+0x64>)
   13880:	781a      	ldrb	r2, [r3, #0]
   13882:	4b12      	ldr	r3, [pc, #72]	; (138cc <RADIO_TxDone+0x68>)
   13884:	2a02      	cmp	r2, #2
   13886:	d002      	beq.n	1388e <RADIO_TxDone+0x2a>
   13888:	881a      	ldrh	r2, [r3, #0]
   1388a:	0692      	lsls	r2, r2, #26
   1388c:	d413      	bmi.n	138b6 <RADIO_TxDone+0x52>
   1388e:	2001      	movs	r0, #1
   13890:	881a      	ldrh	r2, [r3, #0]
   13892:	4302      	orrs	r2, r0
   13894:	801a      	strh	r2, [r3, #0]
   13896:	4b0e      	ldr	r3, [pc, #56]	; (138d0 <RADIO_TxDone+0x6c>)
   13898:	4798      	blx	r3
   1389a:	4b0e      	ldr	r3, [pc, #56]	; (138d4 <RADIO_TxDone+0x70>)
   1389c:	4798      	blx	r3
   1389e:	4c0e      	ldr	r4, [pc, #56]	; (138d8 <RADIO_TxDone+0x74>)
   138a0:	4d0e      	ldr	r5, [pc, #56]	; (138dc <RADIO_TxDone+0x78>)
   138a2:	6822      	ldr	r2, [r4, #0]
   138a4:	6863      	ldr	r3, [r4, #4]
   138a6:	1a80      	subs	r0, r0, r2
   138a8:	4199      	sbcs	r1, r3
   138aa:	22fa      	movs	r2, #250	; 0xfa
   138ac:	2300      	movs	r3, #0
   138ae:	0092      	lsls	r2, r2, #2
   138b0:	47a8      	blx	r5
   138b2:	6020      	str	r0, [r4, #0]
   138b4:	6061      	str	r1, [r4, #4]
   138b6:	bd70      	pop	{r4, r5, r6, pc}
   138b8:	200027c8 	.word	0x200027c8
   138bc:	0000ce4d 	.word	0x0000ce4d
   138c0:	00013769 	.word	0x00013769
   138c4:	00005b19 	.word	0x00005b19
   138c8:	20002e1b 	.word	0x20002e1b
   138cc:	20002e18 	.word	0x20002e18
   138d0:	0001338d 	.word	0x0001338d
   138d4:	0000cadd 	.word	0x0000cadd
   138d8:	20000f68 	.word	0x20000f68
   138dc:	000148e5 	.word	0x000148e5

000138e0 <RADIO_FSKPacketSent>:
   138e0:	b570      	push	{r4, r5, r6, lr}
   138e2:	4b15      	ldr	r3, [pc, #84]	; (13938 <RADIO_FSKPacketSent+0x58>)
   138e4:	203f      	movs	r0, #63	; 0x3f
   138e6:	4798      	blx	r3
   138e8:	0703      	lsls	r3, r0, #28
   138ea:	d524      	bpl.n	13936 <RADIO_FSKPacketSent+0x56>
   138ec:	4b13      	ldr	r3, [pc, #76]	; (1393c <RADIO_FSKPacketSent+0x5c>)
   138ee:	332f      	adds	r3, #47	; 0x2f
   138f0:	7818      	ldrb	r0, [r3, #0]
   138f2:	4b13      	ldr	r3, [pc, #76]	; (13940 <RADIO_FSKPacketSent+0x60>)
   138f4:	4798      	blx	r3
   138f6:	4b13      	ldr	r3, [pc, #76]	; (13944 <RADIO_FSKPacketSent+0x64>)
   138f8:	2001      	movs	r0, #1
   138fa:	4798      	blx	r3
   138fc:	4b12      	ldr	r3, [pc, #72]	; (13948 <RADIO_FSKPacketSent+0x68>)
   138fe:	4c13      	ldr	r4, [pc, #76]	; (1394c <RADIO_FSKPacketSent+0x6c>)
   13900:	781b      	ldrb	r3, [r3, #0]
   13902:	2b02      	cmp	r3, #2
   13904:	d002      	beq.n	1390c <RADIO_FSKPacketSent+0x2c>
   13906:	8823      	ldrh	r3, [r4, #0]
   13908:	069b      	lsls	r3, r3, #26
   1390a:	d414      	bmi.n	13936 <RADIO_FSKPacketSent+0x56>
   1390c:	4b10      	ldr	r3, [pc, #64]	; (13950 <RADIO_FSKPacketSent+0x70>)
   1390e:	4798      	blx	r3
   13910:	4d10      	ldr	r5, [pc, #64]	; (13954 <RADIO_FSKPacketSent+0x74>)
   13912:	4e11      	ldr	r6, [pc, #68]	; (13958 <RADIO_FSKPacketSent+0x78>)
   13914:	682a      	ldr	r2, [r5, #0]
   13916:	686b      	ldr	r3, [r5, #4]
   13918:	1a80      	subs	r0, r0, r2
   1391a:	4199      	sbcs	r1, r3
   1391c:	22fa      	movs	r2, #250	; 0xfa
   1391e:	2300      	movs	r3, #0
   13920:	0092      	lsls	r2, r2, #2
   13922:	47b0      	blx	r6
   13924:	4b0d      	ldr	r3, [pc, #52]	; (1395c <RADIO_FSKPacketSent+0x7c>)
   13926:	6028      	str	r0, [r5, #0]
   13928:	6069      	str	r1, [r5, #4]
   1392a:	2001      	movs	r0, #1
   1392c:	4798      	blx	r3
   1392e:	2304      	movs	r3, #4
   13930:	8822      	ldrh	r2, [r4, #0]
   13932:	4313      	orrs	r3, r2
   13934:	8023      	strh	r3, [r4, #0]
   13936:	bd70      	pop	{r4, r5, r6, pc}
   13938:	00005b41 	.word	0x00005b41
   1393c:	200027c8 	.word	0x200027c8
   13940:	0000ce4d 	.word	0x0000ce4d
   13944:	00013769 	.word	0x00013769
   13948:	20002e1b 	.word	0x20002e1b
   1394c:	20002e18 	.word	0x20002e18
   13950:	0000cadd 	.word	0x0000cadd
   13954:	20000f68 	.word	0x20000f68
   13958:	000148e5 	.word	0x000148e5
   1395c:	0001338d 	.word	0x0001338d

00013960 <RADIO_RxDone>:
   13960:	b570      	push	{r4, r5, r6, lr}
   13962:	2012      	movs	r0, #18
   13964:	4e16      	ldr	r6, [pc, #88]	; (139c0 <RADIO_RxDone+0x60>)
   13966:	47b0      	blx	r6
   13968:	4b16      	ldr	r3, [pc, #88]	; (139c4 <RADIO_RxDone+0x64>)
   1396a:	0005      	movs	r5, r0
   1396c:	2170      	movs	r1, #112	; 0x70
   1396e:	2012      	movs	r0, #18
   13970:	4798      	blx	r3
   13972:	2350      	movs	r3, #80	; 0x50
   13974:	402b      	ands	r3, r5
   13976:	2b50      	cmp	r3, #80	; 0x50
   13978:	d119      	bne.n	139ae <RADIO_RxDone+0x4e>
   1397a:	4c13      	ldr	r4, [pc, #76]	; (139c8 <RADIO_RxDone+0x68>)
   1397c:	0023      	movs	r3, r4
   1397e:	332f      	adds	r3, #47	; 0x2f
   13980:	7818      	ldrb	r0, [r3, #0]
   13982:	4b12      	ldr	r3, [pc, #72]	; (139cc <RADIO_RxDone+0x6c>)
   13984:	4798      	blx	r3
   13986:	4b12      	ldr	r3, [pc, #72]	; (139d0 <RADIO_RxDone+0x70>)
   13988:	2000      	movs	r0, #0
   1398a:	4798      	blx	r3
   1398c:	3404      	adds	r4, #4
   1398e:	201c      	movs	r0, #28
   13990:	47b0      	blx	r6
   13992:	7fe2      	ldrb	r2, [r4, #31]
   13994:	4b0f      	ldr	r3, [pc, #60]	; (139d4 <RADIO_RxDone+0x74>)
   13996:	4910      	ldr	r1, [pc, #64]	; (139d8 <RADIO_RxDone+0x78>)
   13998:	2a00      	cmp	r2, #0
   1399a:	d003      	beq.n	139a4 <RADIO_RxDone+0x44>
   1399c:	06aa      	lsls	r2, r5, #26
   1399e:	d407      	bmi.n	139b0 <RADIO_RxDone+0x50>
   139a0:	0642      	lsls	r2, r0, #25
   139a2:	d505      	bpl.n	139b0 <RADIO_RxDone+0x50>
   139a4:	2002      	movs	r0, #2
   139a6:	881a      	ldrh	r2, [r3, #0]
   139a8:	4302      	orrs	r2, r0
   139aa:	801a      	strh	r2, [r3, #0]
   139ac:	4788      	blx	r1
   139ae:	bd70      	pop	{r4, r5, r6, pc}
   139b0:	2280      	movs	r2, #128	; 0x80
   139b2:	8818      	ldrh	r0, [r3, #0]
   139b4:	0052      	lsls	r2, r2, #1
   139b6:	4302      	orrs	r2, r0
   139b8:	801a      	strh	r2, [r3, #0]
   139ba:	2002      	movs	r0, #2
   139bc:	e7f6      	b.n	139ac <RADIO_RxDone+0x4c>
   139be:	46c0      	nop			; (mov r8, r8)
   139c0:	00005b41 	.word	0x00005b41
   139c4:	00005b19 	.word	0x00005b19
   139c8:	200027c8 	.word	0x200027c8
   139cc:	0000ce4d 	.word	0x0000ce4d
   139d0:	00013769 	.word	0x00013769
   139d4:	20002e18 	.word	0x20002e18
   139d8:	0001338d 	.word	0x0001338d

000139dc <RADIO_FSKPayloadReady>:
   139dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139de:	203f      	movs	r0, #63	; 0x3f
   139e0:	4b39      	ldr	r3, [pc, #228]	; (13ac8 <RADIO_FSKPayloadReady+0xec>)
   139e2:	4798      	blx	r3
   139e4:	0743      	lsls	r3, r0, #29
   139e6:	d559      	bpl.n	13a9c <RADIO_FSKPayloadReady+0xc0>
   139e8:	4c38      	ldr	r4, [pc, #224]	; (13acc <RADIO_FSKPayloadReady+0xf0>)
   139ea:	4d39      	ldr	r5, [pc, #228]	; (13ad0 <RADIO_FSKPayloadReady+0xf4>)
   139ec:	1d23      	adds	r3, r4, #4
   139ee:	7fdb      	ldrb	r3, [r3, #31]
   139f0:	2b01      	cmp	r3, #1
   139f2:	d154      	bne.n	13a9e <RADIO_FSKPayloadReady+0xc2>
   139f4:	2202      	movs	r2, #2
   139f6:	4210      	tst	r0, r2
   139f8:	d048      	beq.n	13a8c <RADIO_FSKPayloadReady+0xb0>
   139fa:	0023      	movs	r3, r4
   139fc:	332f      	adds	r3, #47	; 0x2f
   139fe:	7818      	ldrb	r0, [r3, #0]
   13a00:	4e34      	ldr	r6, [pc, #208]	; (13ad4 <RADIO_FSKPayloadReady+0xf8>)
   13a02:	47b0      	blx	r6
   13a04:	0023      	movs	r3, r4
   13a06:	332e      	adds	r3, #46	; 0x2e
   13a08:	7818      	ldrb	r0, [r3, #0]
   13a0a:	47b0      	blx	r6
   13a0c:	4b32      	ldr	r3, [pc, #200]	; (13ad8 <RADIO_FSKPayloadReady+0xfc>)
   13a0e:	4798      	blx	r3
   13a10:	0022      	movs	r2, r4
   13a12:	0023      	movs	r3, r4
   13a14:	322c      	adds	r2, #44	; 0x2c
   13a16:	3358      	adds	r3, #88	; 0x58
   13a18:	7810      	ldrb	r0, [r2, #0]
   13a1a:	7819      	ldrb	r1, [r3, #0]
   13a1c:	4288      	cmp	r0, r1
   13a1e:	d105      	bne.n	13a2c <RADIO_FSKPayloadReady+0x50>
   13a20:	7812      	ldrb	r2, [r2, #0]
   13a22:	2a00      	cmp	r2, #0
   13a24:	d002      	beq.n	13a2c <RADIO_FSKPayloadReady+0x50>
   13a26:	781b      	ldrb	r3, [r3, #0]
   13a28:	2b00      	cmp	r3, #0
   13a2a:	d118      	bne.n	13a5e <RADIO_FSKPayloadReady+0x82>
   13a2c:	0021      	movs	r1, r4
   13a2e:	312c      	adds	r1, #44	; 0x2c
   13a30:	7808      	ldrb	r0, [r1, #0]
   13a32:	b2c0      	uxtb	r0, r0
   13a34:	2800      	cmp	r0, #0
   13a36:	d102      	bne.n	13a3e <RADIO_FSKPayloadReady+0x62>
   13a38:	2201      	movs	r2, #1
   13a3a:	4b28      	ldr	r3, [pc, #160]	; (13adc <RADIO_FSKPayloadReady+0x100>)
   13a3c:	4798      	blx	r3
   13a3e:	0026      	movs	r6, r4
   13a40:	0027      	movs	r7, r4
   13a42:	3658      	adds	r6, #88	; 0x58
   13a44:	7830      	ldrb	r0, [r6, #0]
   13a46:	372c      	adds	r7, #44	; 0x2c
   13a48:	b2c0      	uxtb	r0, r0
   13a4a:	2800      	cmp	r0, #0
   13a4c:	d110      	bne.n	13a70 <RADIO_FSKPayloadReady+0x94>
   13a4e:	783a      	ldrb	r2, [r7, #0]
   13a50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13a52:	b2d2      	uxtb	r2, r2
   13a54:	4b21      	ldr	r3, [pc, #132]	; (13adc <RADIO_FSKPayloadReady+0x100>)
   13a56:	4798      	blx	r3
   13a58:	783b      	ldrb	r3, [r7, #0]
   13a5a:	b2db      	uxtb	r3, r3
   13a5c:	7033      	strb	r3, [r6, #0]
   13a5e:	4b20      	ldr	r3, [pc, #128]	; (13ae0 <RADIO_FSKPayloadReady+0x104>)
   13a60:	4798      	blx	r3
   13a62:	4b20      	ldr	r3, [pc, #128]	; (13ae4 <RADIO_FSKPayloadReady+0x108>)
   13a64:	2000      	movs	r0, #0
   13a66:	4798      	blx	r3
   13a68:	2308      	movs	r3, #8
   13a6a:	882a      	ldrh	r2, [r5, #0]
   13a6c:	4313      	orrs	r3, r2
   13a6e:	e011      	b.n	13a94 <RADIO_FSKPayloadReady+0xb8>
   13a70:	783b      	ldrb	r3, [r7, #0]
   13a72:	7832      	ldrb	r2, [r6, #0]
   13a74:	1a9b      	subs	r3, r3, r2
   13a76:	2b00      	cmp	r3, #0
   13a78:	ddf1      	ble.n	13a5e <RADIO_FSKPayloadReady+0x82>
   13a7a:	7833      	ldrb	r3, [r6, #0]
   13a7c:	783a      	ldrb	r2, [r7, #0]
   13a7e:	7831      	ldrb	r1, [r6, #0]
   13a80:	2000      	movs	r0, #0
   13a82:	1a52      	subs	r2, r2, r1
   13a84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13a86:	b2d2      	uxtb	r2, r2
   13a88:	18c9      	adds	r1, r1, r3
   13a8a:	e7e3      	b.n	13a54 <RADIO_FSKPayloadReady+0x78>
   13a8c:	2380      	movs	r3, #128	; 0x80
   13a8e:	8829      	ldrh	r1, [r5, #0]
   13a90:	005b      	lsls	r3, r3, #1
   13a92:	430b      	orrs	r3, r1
   13a94:	802b      	strh	r3, [r5, #0]
   13a96:	2002      	movs	r0, #2
   13a98:	4b13      	ldr	r3, [pc, #76]	; (13ae8 <RADIO_FSKPayloadReady+0x10c>)
   13a9a:	4798      	blx	r3
   13a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a9e:	0023      	movs	r3, r4
   13aa0:	332f      	adds	r3, #47	; 0x2f
   13aa2:	4e0c      	ldr	r6, [pc, #48]	; (13ad4 <RADIO_FSKPayloadReady+0xf8>)
   13aa4:	7818      	ldrb	r0, [r3, #0]
   13aa6:	47b0      	blx	r6
   13aa8:	0023      	movs	r3, r4
   13aaa:	332e      	adds	r3, #46	; 0x2e
   13aac:	7818      	ldrb	r0, [r3, #0]
   13aae:	47b0      	blx	r6
   13ab0:	4e0e      	ldr	r6, [pc, #56]	; (13aec <RADIO_FSKPayloadReady+0x110>)
   13ab2:	2201      	movs	r2, #1
   13ab4:	0031      	movs	r1, r6
   13ab6:	2000      	movs	r0, #0
   13ab8:	4f08      	ldr	r7, [pc, #32]	; (13adc <RADIO_FSKPayloadReady+0x100>)
   13aba:	47b8      	blx	r7
   13abc:	7832      	ldrb	r2, [r6, #0]
   13abe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13ac0:	b2d2      	uxtb	r2, r2
   13ac2:	2000      	movs	r0, #0
   13ac4:	47b8      	blx	r7
   13ac6:	e7cc      	b.n	13a62 <RADIO_FSKPayloadReady+0x86>
   13ac8:	00005b41 	.word	0x00005b41
   13acc:	200027c8 	.word	0x200027c8
   13ad0:	20002e18 	.word	0x20002e18
   13ad4:	0000ce4d 	.word	0x0000ce4d
   13ad8:	00002a15 	.word	0x00002a15
   13adc:	00005bad 	.word	0x00005bad
   13ae0:	00002a55 	.word	0x00002a55
   13ae4:	00013769 	.word	0x00013769
   13ae8:	0001338d 	.word	0x0001338d
   13aec:	200027f4 	.word	0x200027f4

00013af0 <Radio_SetClockInput>:
   13af0:	b510      	push	{r4, lr}
   13af2:	4b08      	ldr	r3, [pc, #32]	; (13b14 <Radio_SetClockInput+0x24>)
   13af4:	3355      	adds	r3, #85	; 0x55
   13af6:	781b      	ldrb	r3, [r3, #0]
   13af8:	2b00      	cmp	r3, #0
   13afa:	d10a      	bne.n	13b12 <Radio_SetClockInput+0x22>
   13afc:	4b06      	ldr	r3, [pc, #24]	; (13b18 <Radio_SetClockInput+0x28>)
   13afe:	204b      	movs	r0, #75	; 0x4b
   13b00:	4798      	blx	r3
   13b02:	2110      	movs	r1, #16
   13b04:	4301      	orrs	r1, r0
   13b06:	4b05      	ldr	r3, [pc, #20]	; (13b1c <Radio_SetClockInput+0x2c>)
   13b08:	b2c9      	uxtb	r1, r1
   13b0a:	204b      	movs	r0, #75	; 0x4b
   13b0c:	4798      	blx	r3
   13b0e:	4b04      	ldr	r3, [pc, #16]	; (13b20 <Radio_SetClockInput+0x30>)
   13b10:	4798      	blx	r3
   13b12:	bd10      	pop	{r4, pc}
   13b14:	200027c8 	.word	0x200027c8
   13b18:	00005b41 	.word	0x00005b41
   13b1c:	00005b19 	.word	0x00005b19
   13b20:	00005c61 	.word	0x00005c61

00013b24 <Radio_ResetClockInput>:
   13b24:	b510      	push	{r4, lr}
   13b26:	4b04      	ldr	r3, [pc, #16]	; (13b38 <Radio_ResetClockInput+0x14>)
   13b28:	3355      	adds	r3, #85	; 0x55
   13b2a:	781b      	ldrb	r3, [r3, #0]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d101      	bne.n	13b34 <Radio_ResetClockInput+0x10>
   13b30:	4b02      	ldr	r3, [pc, #8]	; (13b3c <Radio_ResetClockInput+0x18>)
   13b32:	4798      	blx	r3
   13b34:	bd10      	pop	{r4, pc}
   13b36:	46c0      	nop			; (mov r8, r8)
   13b38:	200027c8 	.word	0x200027c8
   13b3c:	00005c7d 	.word	0x00005c7d

00013b40 <RADIO_InitDefaultAttributes>:
   13b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b42:	2501      	movs	r5, #1
   13b44:	4b64      	ldr	r3, [pc, #400]	; (13cd8 <RADIO_InitDefaultAttributes+0x198>)
   13b46:	4c65      	ldr	r4, [pc, #404]	; (13cdc <RADIO_InitDefaultAttributes+0x19c>)
   13b48:	701d      	strb	r5, [r3, #0]
   13b4a:	4b65      	ldr	r3, [pc, #404]	; (13ce0 <RADIO_InitDefaultAttributes+0x1a0>)
   13b4c:	2207      	movs	r2, #7
   13b4e:	6023      	str	r3, [r4, #0]
   13b50:	4b64      	ldr	r3, [pc, #400]	; (13ce4 <RADIO_InitDefaultAttributes+0x1a4>)
   13b52:	18a1      	adds	r1, r4, r2
   13b54:	6063      	str	r3, [r4, #4]
   13b56:	4b64      	ldr	r3, [pc, #400]	; (13ce8 <RADIO_InitDefaultAttributes+0x1a8>)
   13b58:	0027      	movs	r7, r4
   13b5a:	60a3      	str	r3, [r4, #8]
   13b5c:	0023      	movs	r3, r4
   13b5e:	3334      	adds	r3, #52	; 0x34
   13b60:	701d      	strb	r5, [r3, #0]
   13b62:	0023      	movs	r3, r4
   13b64:	3336      	adds	r3, #54	; 0x36
   13b66:	701a      	strb	r2, [r3, #0]
   13b68:	1ce3      	adds	r3, r4, #3
   13b6a:	77dd      	strb	r5, [r3, #31]
   13b6c:	0023      	movs	r3, r4
   13b6e:	3333      	adds	r3, #51	; 0x33
   13b70:	701d      	strb	r5, [r3, #0]
   13b72:	2300      	movs	r3, #0
   13b74:	77cb      	strb	r3, [r1, #31]
   13b76:	2108      	movs	r1, #8
   13b78:	82a1      	strh	r1, [r4, #20]
   13b7a:	0021      	movs	r1, r4
   13b7c:	3135      	adds	r1, #53	; 0x35
   13b7e:	700a      	strb	r2, [r1, #0]
   13b80:	1d22      	adds	r2, r4, #4
   13b82:	77d5      	strb	r5, [r2, #31]
   13b84:	1d62      	adds	r2, r4, #5
   13b86:	77d3      	strb	r3, [r2, #31]
   13b88:	1da2      	adds	r2, r4, #6
   13b8a:	77d3      	strb	r3, [r2, #31]
   13b8c:	2194      	movs	r1, #148	; 0x94
   13b8e:	22c1      	movs	r2, #193	; 0xc1
   13b90:	76a1      	strb	r1, [r4, #26]
   13b92:	7662      	strb	r2, [r4, #25]
   13b94:	76e2      	strb	r2, [r4, #27]
   13b96:	3991      	subs	r1, #145	; 0x91
   13b98:	1ca2      	adds	r2, r4, #2
   13b9a:	77d1      	strb	r1, [r2, #31]
   13b9c:	2234      	movs	r2, #52	; 0x34
   13b9e:	7622      	strb	r2, [r4, #24]
   13ba0:	0022      	movs	r2, r4
   13ba2:	317d      	adds	r1, #125	; 0x7d
   13ba4:	3232      	adds	r2, #50	; 0x32
   13ba6:	7011      	strb	r1, [r2, #0]
   13ba8:	4a50      	ldr	r2, [pc, #320]	; (13cec <RADIO_InitDefaultAttributes+0x1ac>)
   13baa:	397e      	subs	r1, #126	; 0x7e
   13bac:	60e2      	str	r2, [r4, #12]
   13bae:	0022      	movs	r2, r4
   13bb0:	3237      	adds	r2, #55	; 0x37
   13bb2:	7011      	strb	r1, [r2, #0]
   13bb4:	0022      	movs	r2, r4
   13bb6:	3109      	adds	r1, #9
   13bb8:	3238      	adds	r2, #56	; 0x38
   13bba:	7011      	strb	r1, [r2, #0]
   13bbc:	0022      	movs	r2, r4
   13bbe:	3107      	adds	r1, #7
   13bc0:	3239      	adds	r2, #57	; 0x39
   13bc2:	7011      	strb	r1, [r2, #0]
   13bc4:	0022      	movs	r2, r4
   13bc6:	322c      	adds	r2, #44	; 0x2c
   13bc8:	7013      	strb	r3, [r2, #0]
   13bca:	4a49      	ldr	r2, [pc, #292]	; (13cf0 <RADIO_InitDefaultAttributes+0x1b0>)
   13bcc:	82e3      	strh	r3, [r4, #22]
   13bce:	62a2      	str	r2, [r4, #40]	; 0x28
   13bd0:	0022      	movs	r2, r4
   13bd2:	324c      	adds	r2, #76	; 0x4c
   13bd4:	8013      	strh	r3, [r2, #0]
   13bd6:	0022      	movs	r2, r4
   13bd8:	324e      	adds	r2, #78	; 0x4e
   13bda:	7013      	strb	r3, [r2, #0]
   13bdc:	0022      	movs	r2, r4
   13bde:	324f      	adds	r2, #79	; 0x4f
   13be0:	7013      	strb	r3, [r2, #0]
   13be2:	0022      	movs	r2, r4
   13be4:	3240      	adds	r2, #64	; 0x40
   13be6:	7013      	strb	r3, [r2, #0]
   13be8:	0022      	movs	r2, r4
   13bea:	3241      	adds	r2, #65	; 0x41
   13bec:	7013      	strb	r3, [r2, #0]
   13bee:	0022      	movs	r2, r4
   13bf0:	3254      	adds	r2, #84	; 0x54
   13bf2:	7013      	strb	r3, [r2, #0]
   13bf4:	0022      	movs	r2, r4
   13bf6:	3255      	adds	r2, #85	; 0x55
   13bf8:	7015      	strb	r5, [r2, #0]
   13bfa:	0022      	movs	r2, r4
   13bfc:	3258      	adds	r2, #88	; 0x58
   13bfe:	6463      	str	r3, [r4, #68]	; 0x44
   13c00:	64a3      	str	r3, [r4, #72]	; 0x48
   13c02:	87a3      	strh	r3, [r4, #60]	; 0x3c
   13c04:	87e3      	strh	r3, [r4, #62]	; 0x3e
   13c06:	7013      	strb	r3, [r2, #0]
   13c08:	3730      	adds	r7, #48	; 0x30
   13c0a:	783b      	ldrb	r3, [r7, #0]
   13c0c:	2b00      	cmp	r3, #0
   13c0e:	d151      	bne.n	13cb4 <RADIO_InitDefaultAttributes+0x174>
   13c10:	4838      	ldr	r0, [pc, #224]	; (13cf4 <RADIO_InitDefaultAttributes+0x1b4>)
   13c12:	4e39      	ldr	r6, [pc, #228]	; (13cf8 <RADIO_InitDefaultAttributes+0x1b8>)
   13c14:	47b0      	blx	r6
   13c16:	2808      	cmp	r0, #8
   13c18:	d149      	bne.n	13cae <RADIO_InitDefaultAttributes+0x16e>
   13c1a:	4838      	ldr	r0, [pc, #224]	; (13cfc <RADIO_InitDefaultAttributes+0x1bc>)
   13c1c:	47b0      	blx	r6
   13c1e:	2808      	cmp	r0, #8
   13c20:	d145      	bne.n	13cae <RADIO_InitDefaultAttributes+0x16e>
   13c22:	4837      	ldr	r0, [pc, #220]	; (13d00 <RADIO_InitDefaultAttributes+0x1c0>)
   13c24:	47b0      	blx	r6
   13c26:	2808      	cmp	r0, #8
   13c28:	d141      	bne.n	13cae <RADIO_InitDefaultAttributes+0x16e>
   13c2a:	4836      	ldr	r0, [pc, #216]	; (13d04 <RADIO_InitDefaultAttributes+0x1c4>)
   13c2c:	47b0      	blx	r6
   13c2e:	2808      	cmp	r0, #8
   13c30:	d13d      	bne.n	13cae <RADIO_InitDefaultAttributes+0x16e>
   13c32:	703d      	strb	r5, [r7, #0]
   13c34:	4b34      	ldr	r3, [pc, #208]	; (13d08 <RADIO_InitDefaultAttributes+0x1c8>)
   13c36:	4798      	blx	r3
   13c38:	4b34      	ldr	r3, [pc, #208]	; (13d0c <RADIO_InitDefaultAttributes+0x1cc>)
   13c3a:	4798      	blx	r3
   13c3c:	2800      	cmp	r0, #0
   13c3e:	d107      	bne.n	13c50 <RADIO_InitDefaultAttributes+0x110>
   13c40:	0023      	movs	r3, r4
   13c42:	3355      	adds	r3, #85	; 0x55
   13c44:	7018      	strb	r0, [r3, #0]
   13c46:	4b32      	ldr	r3, [pc, #200]	; (13d10 <RADIO_InitDefaultAttributes+0x1d0>)
   13c48:	4798      	blx	r3
   13c4a:	0023      	movs	r3, r4
   13c4c:	3354      	adds	r3, #84	; 0x54
   13c4e:	7018      	strb	r0, [r3, #0]
   13c50:	4b30      	ldr	r3, [pc, #192]	; (13d14 <RADIO_InitDefaultAttributes+0x1d4>)
   13c52:	4798      	blx	r3
   13c54:	2201      	movs	r2, #1
   13c56:	2100      	movs	r1, #0
   13c58:	0010      	movs	r0, r2
   13c5a:	4f2f      	ldr	r7, [pc, #188]	; (13d18 <RADIO_InitDefaultAttributes+0x1d8>)
   13c5c:	47b8      	blx	r7
   13c5e:	6820      	ldr	r0, [r4, #0]
   13c60:	4b2e      	ldr	r3, [pc, #184]	; (13d1c <RADIO_InitDefaultAttributes+0x1dc>)
   13c62:	4798      	blx	r3
   13c64:	2142      	movs	r1, #66	; 0x42
   13c66:	203b      	movs	r0, #59	; 0x3b
   13c68:	4d2d      	ldr	r5, [pc, #180]	; (13d20 <RADIO_InitDefaultAttributes+0x1e0>)
   13c6a:	47a8      	blx	r5
   13c6c:	203b      	movs	r0, #59	; 0x3b
   13c6e:	4b2d      	ldr	r3, [pc, #180]	; (13d24 <RADIO_InitDefaultAttributes+0x1e4>)
   13c70:	4798      	blx	r3
   13c72:	2620      	movs	r6, #32
   13c74:	4006      	ands	r6, r0
   13c76:	d1f9      	bne.n	13c6c <RADIO_InitDefaultAttributes+0x12c>
   13c78:	2123      	movs	r1, #35	; 0x23
   13c7a:	200c      	movs	r0, #12
   13c7c:	47a8      	blx	r5
   13c7e:	21aa      	movs	r1, #170	; 0xaa
   13c80:	201f      	movs	r0, #31
   13c82:	47a8      	blx	r5
   13c84:	21ff      	movs	r1, #255	; 0xff
   13c86:	2032      	movs	r0, #50	; 0x32
   13c88:	47a8      	blx	r5
   13c8a:	2140      	movs	r1, #64	; 0x40
   13c8c:	2031      	movs	r0, #49	; 0x31
   13c8e:	47a8      	blx	r5
   13c90:	2201      	movs	r2, #1
   13c92:	0030      	movs	r0, r6
   13c94:	0011      	movs	r1, r2
   13c96:	47b8      	blx	r7
   13c98:	21ff      	movs	r1, #255	; 0xff
   13c9a:	2023      	movs	r0, #35	; 0x23
   13c9c:	47a8      	blx	r5
   13c9e:	4b21      	ldr	r3, [pc, #132]	; (13d24 <RADIO_InitDefaultAttributes+0x1e4>)
   13ca0:	2042      	movs	r0, #66	; 0x42
   13ca2:	4798      	blx	r3
   13ca4:	3431      	adds	r4, #49	; 0x31
   13ca6:	4b20      	ldr	r3, [pc, #128]	; (13d28 <RADIO_InitDefaultAttributes+0x1e8>)
   13ca8:	7020      	strb	r0, [r4, #0]
   13caa:	4798      	blx	r3
   13cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13cae:	4b1f      	ldr	r3, [pc, #124]	; (13d2c <RADIO_InitDefaultAttributes+0x1ec>)
   13cb0:	4798      	blx	r3
   13cb2:	e7bf      	b.n	13c34 <RADIO_InitDefaultAttributes+0xf4>
   13cb4:	0023      	movs	r3, r4
   13cb6:	332d      	adds	r3, #45	; 0x2d
   13cb8:	4d1d      	ldr	r5, [pc, #116]	; (13d30 <RADIO_InitDefaultAttributes+0x1f0>)
   13cba:	7818      	ldrb	r0, [r3, #0]
   13cbc:	47a8      	blx	r5
   13cbe:	0023      	movs	r3, r4
   13cc0:	332e      	adds	r3, #46	; 0x2e
   13cc2:	7818      	ldrb	r0, [r3, #0]
   13cc4:	47a8      	blx	r5
   13cc6:	0023      	movs	r3, r4
   13cc8:	332f      	adds	r3, #47	; 0x2f
   13cca:	7818      	ldrb	r0, [r3, #0]
   13ccc:	47a8      	blx	r5
   13cce:	0023      	movs	r3, r4
   13cd0:	3350      	adds	r3, #80	; 0x50
   13cd2:	7818      	ldrb	r0, [r3, #0]
   13cd4:	47a8      	blx	r5
   13cd6:	e7ad      	b.n	13c34 <RADIO_InitDefaultAttributes+0xf4>
   13cd8:	20002e1b 	.word	0x20002e1b
   13cdc:	200027c8 	.word	0x200027c8
   13ce0:	33be27a0 	.word	0x33be27a0
   13ce4:	000061a8 	.word	0x000061a8
   13ce8:	0000c350 	.word	0x0000c350
   13cec:	00003a98 	.word	0x00003a98
   13cf0:	20002d18 	.word	0x20002d18
   13cf4:	200027f5 	.word	0x200027f5
   13cf8:	0000cb01 	.word	0x0000cb01
   13cfc:	200027f6 	.word	0x200027f6
   13d00:	200027f7 	.word	0x200027f7
   13d04:	20002818 	.word	0x20002818
   13d08:	00005ad9 	.word	0x00005ad9
   13d0c:	00005c5d 	.word	0x00005c5d
   13d10:	00005c59 	.word	0x00005c59
   13d14:	00013af1 	.word	0x00013af1
   13d18:	0000d201 	.word	0x0000d201
   13d1c:	00012d85 	.word	0x00012d85
   13d20:	00005b19 	.word	0x00005b19
   13d24:	00005b41 	.word	0x00005b41
   13d28:	00013b25 	.word	0x00013b25
   13d2c:	0000ca45 	.word	0x0000ca45
   13d30:	0000ce4d 	.word	0x0000ce4d

00013d34 <RADIO_Receive>:
   13d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d36:	7803      	ldrb	r3, [r0, #0]
   13d38:	0006      	movs	r6, r0
   13d3a:	4d24      	ldr	r5, [pc, #144]	; (13dcc <RADIO_Receive+0x98>)
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	d11d      	bne.n	13d7c <RADIO_Receive+0x48>
   13d40:	782b      	ldrb	r3, [r5, #0]
   13d42:	2004      	movs	r0, #4
   13d44:	2b01      	cmp	r3, #1
   13d46:	d118      	bne.n	13d7a <RADIO_Receive+0x46>
   13d48:	4c21      	ldr	r4, [pc, #132]	; (13dd0 <RADIO_Receive+0x9c>)
   13d4a:	4f22      	ldr	r7, [pc, #136]	; (13dd4 <RADIO_Receive+0xa0>)
   13d4c:	0023      	movs	r3, r4
   13d4e:	332f      	adds	r3, #47	; 0x2f
   13d50:	7818      	ldrb	r0, [r3, #0]
   13d52:	47b8      	blx	r7
   13d54:	0023      	movs	r3, r4
   13d56:	3334      	adds	r3, #52	; 0x34
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d102      	bne.n	13d64 <RADIO_Receive+0x30>
   13d5e:	342e      	adds	r4, #46	; 0x2e
   13d60:	7820      	ldrb	r0, [r4, #0]
   13d62:	47b8      	blx	r7
   13d64:	8872      	ldrh	r2, [r6, #2]
   13d66:	4b1c      	ldr	r3, [pc, #112]	; (13dd8 <RADIO_Receive+0xa4>)
   13d68:	2008      	movs	r0, #8
   13d6a:	801a      	strh	r2, [r3, #0]
   13d6c:	2304      	movs	r3, #4
   13d6e:	702b      	strb	r3, [r5, #0]
   13d70:	4b1a      	ldr	r3, [pc, #104]	; (13ddc <RADIO_Receive+0xa8>)
   13d72:	4798      	blx	r3
   13d74:	4b1a      	ldr	r3, [pc, #104]	; (13de0 <RADIO_Receive+0xac>)
   13d76:	4798      	blx	r3
   13d78:	2000      	movs	r0, #0
   13d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d7c:	782b      	ldrb	r3, [r5, #0]
   13d7e:	2000      	movs	r0, #0
   13d80:	2b01      	cmp	r3, #1
   13d82:	d0fa      	beq.n	13d7a <RADIO_Receive+0x46>
   13d84:	782b      	ldrb	r3, [r5, #0]
   13d86:	3003      	adds	r0, #3
   13d88:	2b04      	cmp	r3, #4
   13d8a:	d1f6      	bne.n	13d7a <RADIO_Receive+0x46>
   13d8c:	4c10      	ldr	r4, [pc, #64]	; (13dd0 <RADIO_Receive+0x9c>)
   13d8e:	4e11      	ldr	r6, [pc, #68]	; (13dd4 <RADIO_Receive+0xa0>)
   13d90:	0023      	movs	r3, r4
   13d92:	332f      	adds	r3, #47	; 0x2f
   13d94:	7818      	ldrb	r0, [r3, #0]
   13d96:	47b0      	blx	r6
   13d98:	0023      	movs	r3, r4
   13d9a:	3334      	adds	r3, #52	; 0x34
   13d9c:	781b      	ldrb	r3, [r3, #0]
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d103      	bne.n	13daa <RADIO_Receive+0x76>
   13da2:	0023      	movs	r3, r4
   13da4:	332e      	adds	r3, #46	; 0x2e
   13da6:	7818      	ldrb	r0, [r3, #0]
   13da8:	47b0      	blx	r6
   13daa:	2200      	movs	r2, #0
   13dac:	3434      	adds	r4, #52	; 0x34
   13dae:	7821      	ldrb	r1, [r4, #0]
   13db0:	0010      	movs	r0, r2
   13db2:	4b0c      	ldr	r3, [pc, #48]	; (13de4 <RADIO_Receive+0xb0>)
   13db4:	4798      	blx	r3
   13db6:	4b0c      	ldr	r3, [pc, #48]	; (13de8 <RADIO_Receive+0xb4>)
   13db8:	4798      	blx	r3
   13dba:	2301      	movs	r3, #1
   13dbc:	2008      	movs	r0, #8
   13dbe:	4c0b      	ldr	r4, [pc, #44]	; (13dec <RADIO_Receive+0xb8>)
   13dc0:	702b      	strb	r3, [r5, #0]
   13dc2:	47a0      	blx	r4
   13dc4:	2002      	movs	r0, #2
   13dc6:	47a0      	blx	r4
   13dc8:	e7d6      	b.n	13d78 <RADIO_Receive+0x44>
   13dca:	46c0      	nop			; (mov r8, r8)
   13dcc:	20002e1b 	.word	0x20002e1b
   13dd0:	200027c8 	.word	0x200027c8
   13dd4:	0000ce4d 	.word	0x0000ce4d
   13dd8:	20000f66 	.word	0x20000f66
   13ddc:	0001338d 	.word	0x0001338d
   13de0:	00013af1 	.word	0x00013af1
   13de4:	0000d201 	.word	0x0000d201
   13de8:	00013b25 	.word	0x00013b25
   13dec:	000133b9 	.word	0x000133b9

00013df0 <RADIO_TxHandler>:
   13df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13df2:	4e56      	ldr	r6, [pc, #344]	; (13f4c <RADIO_TxHandler+0x15c>)
   13df4:	b087      	sub	sp, #28
   13df6:	47b0      	blx	r6
   13df8:	4c55      	ldr	r4, [pc, #340]	; (13f50 <RADIO_TxHandler+0x160>)
   13dfa:	0023      	movs	r3, r4
   13dfc:	332d      	adds	r3, #45	; 0x2d
   13dfe:	7818      	ldrb	r0, [r3, #0]
   13e00:	4b54      	ldr	r3, [pc, #336]	; (13f54 <RADIO_TxHandler+0x164>)
   13e02:	4798      	blx	r3
   13e04:	0023      	movs	r3, r4
   13e06:	3341      	adds	r3, #65	; 0x41
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	4d53      	ldr	r5, [pc, #332]	; (13f58 <RADIO_TxHandler+0x168>)
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d022      	beq.n	13e56 <RADIO_TxHandler+0x66>
   13e10:	2214      	movs	r2, #20
   13e12:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   13e14:	4353      	muls	r3, r2
   13e16:	0022      	movs	r2, r4
   13e18:	3240      	adds	r2, #64	; 0x40
   13e1a:	7013      	strb	r3, [r2, #0]
   13e1c:	47b0      	blx	r6
   13e1e:	2000      	movs	r0, #0
   13e20:	4b4e      	ldr	r3, [pc, #312]	; (13f5c <RADIO_TxHandler+0x16c>)
   13e22:	4798      	blx	r3
   13e24:	6820      	ldr	r0, [r4, #0]
   13e26:	4b4e      	ldr	r3, [pc, #312]	; (13f60 <RADIO_TxHandler+0x170>)
   13e28:	4798      	blx	r3
   13e2a:	0023      	movs	r3, r4
   13e2c:	2600      	movs	r6, #0
   13e2e:	334c      	adds	r3, #76	; 0x4c
   13e30:	2201      	movs	r2, #1
   13e32:	801e      	strh	r6, [r3, #0]
   13e34:	0031      	movs	r1, r6
   13e36:	4b4b      	ldr	r3, [pc, #300]	; (13f64 <RADIO_TxHandler+0x174>)
   13e38:	0030      	movs	r0, r6
   13e3a:	4798      	blx	r3
   13e3c:	2109      	movs	r1, #9
   13e3e:	2012      	movs	r0, #18
   13e40:	47a8      	blx	r5
   13e42:	2201      	movs	r2, #1
   13e44:	0031      	movs	r1, r6
   13e46:	2005      	movs	r0, #5
   13e48:	4b46      	ldr	r3, [pc, #280]	; (13f64 <RADIO_TxHandler+0x174>)
   13e4a:	4798      	blx	r3
   13e4c:	0023      	movs	r3, r4
   13e4e:	3340      	adds	r3, #64	; 0x40
   13e50:	781b      	ldrb	r3, [r3, #0]
   13e52:	42b3      	cmp	r3, r6
   13e54:	d844      	bhi.n	13ee0 <RADIO_TxHandler+0xf0>
   13e56:	2001      	movs	r0, #1
   13e58:	4b40      	ldr	r3, [pc, #256]	; (13f5c <RADIO_TxHandler+0x16c>)
   13e5a:	4798      	blx	r3
   13e5c:	4b42      	ldr	r3, [pc, #264]	; (13f68 <RADIO_TxHandler+0x178>)
   13e5e:	2004      	movs	r0, #4
   13e60:	4798      	blx	r3
   13e62:	4b42      	ldr	r3, [pc, #264]	; (13f6c <RADIO_TxHandler+0x17c>)
   13e64:	4e42      	ldr	r6, [pc, #264]	; (13f70 <RADIO_TxHandler+0x180>)
   13e66:	781f      	ldrb	r7, [r3, #0]
   13e68:	2f01      	cmp	r7, #1
   13e6a:	d146      	bne.n	13efa <RADIO_TxHandler+0x10a>
   13e6c:	7831      	ldrb	r1, [r6, #0]
   13e6e:	2022      	movs	r0, #34	; 0x22
   13e70:	47a8      	blx	r5
   13e72:	4b40      	ldr	r3, [pc, #256]	; (13f74 <RADIO_TxHandler+0x184>)
   13e74:	200a      	movs	r0, #10
   13e76:	4798      	blx	r3
   13e78:	21f0      	movs	r1, #240	; 0xf0
   13e7a:	4008      	ands	r0, r1
   13e7c:	39e8      	subs	r1, #232	; 0xe8
   13e7e:	4301      	orrs	r1, r0
   13e80:	200a      	movs	r0, #10
   13e82:	47a8      	blx	r5
   13e84:	2140      	movs	r1, #64	; 0x40
   13e86:	0008      	movs	r0, r1
   13e88:	47a8      	blx	r5
   13e8a:	2100      	movs	r1, #0
   13e8c:	2041      	movs	r0, #65	; 0x41
   13e8e:	47a8      	blx	r5
   13e90:	4b36      	ldr	r3, [pc, #216]	; (13f6c <RADIO_TxHandler+0x17c>)
   13e92:	003a      	movs	r2, r7
   13e94:	7819      	ldrb	r1, [r3, #0]
   13e96:	0038      	movs	r0, r7
   13e98:	4b32      	ldr	r3, [pc, #200]	; (13f64 <RADIO_TxHandler+0x174>)
   13e9a:	4798      	blx	r3
   13e9c:	4b36      	ldr	r3, [pc, #216]	; (13f78 <RADIO_TxHandler+0x188>)
   13e9e:	7832      	ldrb	r2, [r6, #0]
   13ea0:	6819      	ldr	r1, [r3, #0]
   13ea2:	2000      	movs	r0, #0
   13ea4:	4b35      	ldr	r3, [pc, #212]	; (13f7c <RADIO_TxHandler+0x18c>)
   13ea6:	4798      	blx	r3
   13ea8:	0023      	movs	r3, r4
   13eaa:	3334      	adds	r3, #52	; 0x34
   13eac:	7819      	ldrb	r1, [r3, #0]
   13eae:	2200      	movs	r2, #0
   13eb0:	2003      	movs	r0, #3
   13eb2:	4b2c      	ldr	r3, [pc, #176]	; (13f64 <RADIO_TxHandler+0x174>)
   13eb4:	4798      	blx	r3
   13eb6:	4b32      	ldr	r3, [pc, #200]	; (13f80 <RADIO_TxHandler+0x190>)
   13eb8:	4798      	blx	r3
   13eba:	4b32      	ldr	r3, [pc, #200]	; (13f84 <RADIO_TxHandler+0x194>)
   13ebc:	6018      	str	r0, [r3, #0]
   13ebe:	6059      	str	r1, [r3, #4]
   13ec0:	68e3      	ldr	r3, [r4, #12]
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d009      	beq.n	13eda <RADIO_TxHandler+0xea>
   13ec6:	21fa      	movs	r1, #250	; 0xfa
   13ec8:	2200      	movs	r2, #0
   13eca:	342f      	adds	r4, #47	; 0x2f
   13ecc:	0089      	lsls	r1, r1, #2
   13ece:	7820      	ldrb	r0, [r4, #0]
   13ed0:	4359      	muls	r1, r3
   13ed2:	9200      	str	r2, [sp, #0]
   13ed4:	4b2c      	ldr	r3, [pc, #176]	; (13f88 <RADIO_TxHandler+0x198>)
   13ed6:	4c2d      	ldr	r4, [pc, #180]	; (13f8c <RADIO_TxHandler+0x19c>)
   13ed8:	47a0      	blx	r4
   13eda:	2000      	movs	r0, #0
   13edc:	b007      	add	sp, #28
   13ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ee0:	4f2b      	ldr	r7, [pc, #172]	; (13f90 <RADIO_TxHandler+0x1a0>)
   13ee2:	4b2c      	ldr	r3, [pc, #176]	; (13f94 <RADIO_TxHandler+0x1a4>)
   13ee4:	0038      	movs	r0, r7
   13ee6:	4798      	blx	r3
   13ee8:	233e      	movs	r3, #62	; 0x3e
   13eea:	5ee2      	ldrsh	r2, [r4, r3]
   13eec:	2100      	movs	r1, #0
   13eee:	5e7b      	ldrsh	r3, [r7, r1]
   13ef0:	429a      	cmp	r2, r3
   13ef2:	db14      	blt.n	13f1e <RADIO_TxHandler+0x12e>
   13ef4:	3601      	adds	r6, #1
   13ef6:	b2f6      	uxtb	r6, r6
   13ef8:	e7a8      	b.n	13e4c <RADIO_TxHandler+0x5c>
   13efa:	2100      	movs	r1, #0
   13efc:	2040      	movs	r0, #64	; 0x40
   13efe:	47a8      	blx	r5
   13f00:	2100      	movs	r1, #0
   13f02:	2041      	movs	r0, #65	; 0x41
   13f04:	47a8      	blx	r5
   13f06:	0023      	movs	r3, r4
   13f08:	2000      	movs	r0, #0
   13f0a:	3358      	adds	r3, #88	; 0x58
   13f0c:	7831      	ldrb	r1, [r6, #0]
   13f0e:	7018      	strb	r0, [r3, #0]
   13f10:	47a8      	blx	r5
   13f12:	4b19      	ldr	r3, [pc, #100]	; (13f78 <RADIO_TxHandler+0x188>)
   13f14:	7831      	ldrb	r1, [r6, #0]
   13f16:	6818      	ldr	r0, [r3, #0]
   13f18:	4b1f      	ldr	r3, [pc, #124]	; (13f98 <RADIO_TxHandler+0x1a8>)
   13f1a:	4798      	blx	r3
   13f1c:	e7c4      	b.n	13ea8 <RADIO_TxHandler+0xb8>
   13f1e:	2000      	movs	r0, #0
   13f20:	4b1e      	ldr	r3, [pc, #120]	; (13f9c <RADIO_TxHandler+0x1ac>)
   13f22:	4798      	blx	r3
   13f24:	4b1e      	ldr	r3, [pc, #120]	; (13fa0 <RADIO_TxHandler+0x1b0>)
   13f26:	4798      	blx	r3
   13f28:	2307      	movs	r3, #7
   13f2a:	2201      	movs	r2, #1
   13f2c:	a903      	add	r1, sp, #12
   13f2e:	700b      	strb	r3, [r1, #0]
   13f30:	4b1c      	ldr	r3, [pc, #112]	; (13fa4 <RADIO_TxHandler+0x1b4>)
   13f32:	701a      	strb	r2, [r3, #0]
   13f34:	4b1c      	ldr	r3, [pc, #112]	; (13fa8 <RADIO_TxHandler+0x1b8>)
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	079b      	lsls	r3, r3, #30
   13f3a:	d400      	bmi.n	13f3e <RADIO_TxHandler+0x14e>
   13f3c:	e78b      	b.n	13e56 <RADIO_TxHandler+0x66>
   13f3e:	6923      	ldr	r3, [r4, #16]
   13f40:	2b00      	cmp	r3, #0
   13f42:	d100      	bne.n	13f46 <RADIO_TxHandler+0x156>
   13f44:	e787      	b.n	13e56 <RADIO_TxHandler+0x66>
   13f46:	2002      	movs	r0, #2
   13f48:	4798      	blx	r3
   13f4a:	e784      	b.n	13e56 <RADIO_TxHandler+0x66>
   13f4c:	00013af1 	.word	0x00013af1
   13f50:	200027c8 	.word	0x200027c8
   13f54:	0000ce4d 	.word	0x0000ce4d
   13f58:	00005b19 	.word	0x00005b19
   13f5c:	00013641 	.word	0x00013641
   13f60:	00012d85 	.word	0x00012d85
   13f64:	0000d201 	.word	0x0000d201
   13f68:	00012dcd 	.word	0x00012dcd
   13f6c:	200027fc 	.word	0x200027fc
   13f70:	20000f74 	.word	0x20000f74
   13f74:	00005b41 	.word	0x00005b41
   13f78:	20000f70 	.word	0x20000f70
   13f7c:	00005b6d 	.word	0x00005b6d
   13f80:	0000cadd 	.word	0x0000cadd
   13f84:	20000f68 	.word	0x20000f68
   13f88:	0001379d 	.word	0x0001379d
   13f8c:	0000cb35 	.word	0x0000cb35
   13f90:	20000f64 	.word	0x20000f64
   13f94:	0000d3c5 	.word	0x0000d3c5
   13f98:	000134bd 	.word	0x000134bd
   13f9c:	00013769 	.word	0x00013769
   13fa0:	00013b25 	.word	0x00013b25
   13fa4:	20002e1b 	.word	0x20002e1b
   13fa8:	20002e1a 	.word	0x20002e1a

00013fac <RADIO_TxDoneHandler>:
   13fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fae:	4b35      	ldr	r3, [pc, #212]	; (14084 <RADIO_TxDoneHandler+0xd8>)
   13fb0:	b087      	sub	sp, #28
   13fb2:	881a      	ldrh	r2, [r3, #0]
   13fb4:	06d2      	lsls	r2, r2, #27
   13fb6:	0fd2      	lsrs	r2, r2, #31
   13fb8:	9200      	str	r2, [sp, #0]
   13fba:	466a      	mov	r2, sp
   13fbc:	7810      	ldrb	r0, [r2, #0]
   13fbe:	881a      	ldrh	r2, [r3, #0]
   13fc0:	2801      	cmp	r0, #1
   13fc2:	d12b      	bne.n	1401c <RADIO_TxDoneHandler+0x70>
   13fc4:	4c30      	ldr	r4, [pc, #192]	; (14088 <RADIO_TxDoneHandler+0xdc>)
   13fc6:	2110      	movs	r1, #16
   13fc8:	0027      	movs	r7, r4
   13fca:	2500      	movs	r5, #0
   13fcc:	438a      	bics	r2, r1
   13fce:	801a      	strh	r2, [r3, #0]
   13fd0:	3734      	adds	r7, #52	; 0x34
   13fd2:	0002      	movs	r2, r0
   13fd4:	7839      	ldrb	r1, [r7, #0]
   13fd6:	4b2d      	ldr	r3, [pc, #180]	; (1408c <RADIO_TxDoneHandler+0xe0>)
   13fd8:	4798      	blx	r3
   13fda:	68e3      	ldr	r3, [r4, #12]
   13fdc:	ae03      	add	r6, sp, #12
   13fde:	9304      	str	r3, [sp, #16]
   13fe0:	7035      	strb	r5, [r6, #0]
   13fe2:	002a      	movs	r2, r5
   13fe4:	4b29      	ldr	r3, [pc, #164]	; (1408c <RADIO_TxDoneHandler+0xe0>)
   13fe6:	7839      	ldrb	r1, [r7, #0]
   13fe8:	0028      	movs	r0, r5
   13fea:	4798      	blx	r3
   13fec:	466a      	mov	r2, sp
   13fee:	4b28      	ldr	r3, [pc, #160]	; (14090 <RADIO_TxDoneHandler+0xe4>)
   13ff0:	7812      	ldrb	r2, [r2, #0]
   13ff2:	701a      	strb	r2, [r3, #0]
   13ff4:	0023      	movs	r3, r4
   13ff6:	3358      	adds	r3, #88	; 0x58
   13ff8:	701d      	strb	r5, [r3, #0]
   13ffa:	4b26      	ldr	r3, [pc, #152]	; (14094 <RADIO_TxDoneHandler+0xe8>)
   13ffc:	781b      	ldrb	r3, [r3, #0]
   13ffe:	075b      	lsls	r3, r3, #29
   14000:	d505      	bpl.n	1400e <RADIO_TxDoneHandler+0x62>
   14002:	6923      	ldr	r3, [r4, #16]
   14004:	42ab      	cmp	r3, r5
   14006:	d002      	beq.n	1400e <RADIO_TxDoneHandler+0x62>
   14008:	0031      	movs	r1, r6
   1400a:	2004      	movs	r0, #4
   1400c:	4798      	blx	r3
   1400e:	4b22      	ldr	r3, [pc, #136]	; (14098 <RADIO_TxDoneHandler+0xec>)
   14010:	4798      	blx	r3
   14012:	4b22      	ldr	r3, [pc, #136]	; (1409c <RADIO_TxDoneHandler+0xf0>)
   14014:	4798      	blx	r3
   14016:	2000      	movs	r0, #0
   14018:	b007      	add	sp, #28
   1401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1401c:	07d2      	lsls	r2, r2, #31
   1401e:	d402      	bmi.n	14026 <RADIO_TxDoneHandler+0x7a>
   14020:	881a      	ldrh	r2, [r3, #0]
   14022:	0752      	lsls	r2, r2, #29
   14024:	d527      	bpl.n	14076 <RADIO_TxDoneHandler+0xca>
   14026:	2601      	movs	r6, #1
   14028:	2104      	movs	r1, #4
   1402a:	881a      	ldrh	r2, [r3, #0]
   1402c:	4f16      	ldr	r7, [pc, #88]	; (14088 <RADIO_TxDoneHandler+0xdc>)
   1402e:	43b2      	bics	r2, r6
   14030:	801a      	strh	r2, [r3, #0]
   14032:	881a      	ldrh	r2, [r3, #0]
   14034:	2400      	movs	r4, #0
   14036:	438a      	bics	r2, r1
   14038:	801a      	strh	r2, [r3, #0]
   1403a:	4b19      	ldr	r3, [pc, #100]	; (140a0 <RADIO_TxDoneHandler+0xf4>)
   1403c:	ad03      	add	r5, sp, #12
   1403e:	681b      	ldr	r3, [r3, #0]
   14040:	702c      	strb	r4, [r5, #0]
   14042:	9304      	str	r3, [sp, #16]
   14044:	003b      	movs	r3, r7
   14046:	3334      	adds	r3, #52	; 0x34
   14048:	7819      	ldrb	r1, [r3, #0]
   1404a:	0022      	movs	r2, r4
   1404c:	0020      	movs	r0, r4
   1404e:	4b0f      	ldr	r3, [pc, #60]	; (1408c <RADIO_TxDoneHandler+0xe0>)
   14050:	4798      	blx	r3
   14052:	4b14      	ldr	r3, [pc, #80]	; (140a4 <RADIO_TxDoneHandler+0xf8>)
   14054:	4798      	blx	r3
   14056:	4b0e      	ldr	r3, [pc, #56]	; (14090 <RADIO_TxDoneHandler+0xe4>)
   14058:	701e      	strb	r6, [r3, #0]
   1405a:	003b      	movs	r3, r7
   1405c:	3358      	adds	r3, #88	; 0x58
   1405e:	701c      	strb	r4, [r3, #0]
   14060:	4b0c      	ldr	r3, [pc, #48]	; (14094 <RADIO_TxDoneHandler+0xe8>)
   14062:	781b      	ldrb	r3, [r3, #0]
   14064:	079b      	lsls	r3, r3, #30
   14066:	d5d6      	bpl.n	14016 <RADIO_TxDoneHandler+0x6a>
   14068:	693b      	ldr	r3, [r7, #16]
   1406a:	42a3      	cmp	r3, r4
   1406c:	d0d3      	beq.n	14016 <RADIO_TxDoneHandler+0x6a>
   1406e:	0029      	movs	r1, r5
   14070:	2002      	movs	r0, #2
   14072:	4798      	blx	r3
   14074:	e7cf      	b.n	14016 <RADIO_TxDoneHandler+0x6a>
   14076:	881b      	ldrh	r3, [r3, #0]
   14078:	059b      	lsls	r3, r3, #22
   1407a:	d5cc      	bpl.n	14016 <RADIO_TxDoneHandler+0x6a>
   1407c:	4b0a      	ldr	r3, [pc, #40]	; (140a8 <RADIO_TxDoneHandler+0xfc>)
   1407e:	4798      	blx	r3
   14080:	e7c9      	b.n	14016 <RADIO_TxDoneHandler+0x6a>
   14082:	46c0      	nop			; (mov r8, r8)
   14084:	20002e18 	.word	0x20002e18
   14088:	200027c8 	.word	0x200027c8
   1408c:	0000d201 	.word	0x0000d201
   14090:	20002e1b 	.word	0x20002e1b
   14094:	20002e1a 	.word	0x20002e1a
   14098:	00005ad9 	.word	0x00005ad9
   1409c:	00013b41 	.word	0x00013b41
   140a0:	20000f68 	.word	0x20000f68
   140a4:	00013b25 	.word	0x00013b25
   140a8:	00014445 	.word	0x00014445

000140ac <RADIO_RxDoneHandler>:
   140ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   140ae:	4b97      	ldr	r3, [pc, #604]	; (1430c <RADIO_RxDoneHandler+0x260>)
   140b0:	b085      	sub	sp, #20
   140b2:	881c      	ldrh	r4, [r3, #0]
   140b4:	881a      	ldrh	r2, [r3, #0]
   140b6:	06a4      	lsls	r4, r4, #26
   140b8:	0fe4      	lsrs	r4, r4, #31
   140ba:	b2e0      	uxtb	r0, r4
   140bc:	2801      	cmp	r0, #1
   140be:	d126      	bne.n	1410e <RADIO_RxDoneHandler+0x62>
   140c0:	4d93      	ldr	r5, [pc, #588]	; (14310 <RADIO_RxDoneHandler+0x264>)
   140c2:	2120      	movs	r1, #32
   140c4:	002e      	movs	r6, r5
   140c6:	438a      	bics	r2, r1
   140c8:	801a      	strh	r2, [r3, #0]
   140ca:	3634      	adds	r6, #52	; 0x34
   140cc:	0002      	movs	r2, r0
   140ce:	7831      	ldrb	r1, [r6, #0]
   140d0:	4f90      	ldr	r7, [pc, #576]	; (14314 <RADIO_RxDoneHandler+0x268>)
   140d2:	47b8      	blx	r7
   140d4:	2200      	movs	r2, #0
   140d6:	7831      	ldrb	r1, [r6, #0]
   140d8:	0010      	movs	r0, r2
   140da:	47b8      	blx	r7
   140dc:	4b8e      	ldr	r3, [pc, #568]	; (14318 <RADIO_RxDoneHandler+0x26c>)
   140de:	4798      	blx	r3
   140e0:	4b8e      	ldr	r3, [pc, #568]	; (1431c <RADIO_RxDoneHandler+0x270>)
   140e2:	002a      	movs	r2, r5
   140e4:	701c      	strb	r4, [r3, #0]
   140e6:	2300      	movs	r3, #0
   140e8:	322c      	adds	r2, #44	; 0x2c
   140ea:	7013      	strb	r3, [r2, #0]
   140ec:	002a      	movs	r2, r5
   140ee:	a901      	add	r1, sp, #4
   140f0:	3258      	adds	r2, #88	; 0x58
   140f2:	7013      	strb	r3, [r2, #0]
   140f4:	700b      	strb	r3, [r1, #0]
   140f6:	4b8a      	ldr	r3, [pc, #552]	; (14320 <RADIO_RxDoneHandler+0x274>)
   140f8:	781b      	ldrb	r3, [r3, #0]
   140fa:	071b      	lsls	r3, r3, #28
   140fc:	d504      	bpl.n	14108 <RADIO_RxDoneHandler+0x5c>
   140fe:	692b      	ldr	r3, [r5, #16]
   14100:	2008      	movs	r0, #8
   14102:	2b00      	cmp	r3, #0
   14104:	d000      	beq.n	14108 <RADIO_RxDoneHandler+0x5c>
   14106:	e084      	b.n	14212 <RADIO_RxDoneHandler+0x166>
   14108:	2000      	movs	r0, #0
   1410a:	b005      	add	sp, #20
   1410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1410e:	0652      	lsls	r2, r2, #25
   14110:	d402      	bmi.n	14118 <RADIO_RxDoneHandler+0x6c>
   14112:	881a      	ldrh	r2, [r3, #0]
   14114:	0612      	lsls	r2, r2, #24
   14116:	d523      	bpl.n	14160 <RADIO_RxDoneHandler+0xb4>
   14118:	2140      	movs	r1, #64	; 0x40
   1411a:	881a      	ldrh	r2, [r3, #0]
   1411c:	4c7c      	ldr	r4, [pc, #496]	; (14310 <RADIO_RxDoneHandler+0x264>)
   1411e:	438a      	bics	r2, r1
   14120:	801a      	strh	r2, [r3, #0]
   14122:	881a      	ldrh	r2, [r3, #0]
   14124:	1849      	adds	r1, r1, r1
   14126:	438a      	bics	r2, r1
   14128:	801a      	strh	r2, [r3, #0]
   1412a:	0023      	movs	r3, r4
   1412c:	2200      	movs	r2, #0
   1412e:	3334      	adds	r3, #52	; 0x34
   14130:	7819      	ldrb	r1, [r3, #0]
   14132:	0010      	movs	r0, r2
   14134:	4b77      	ldr	r3, [pc, #476]	; (14314 <RADIO_RxDoneHandler+0x268>)
   14136:	4798      	blx	r3
   14138:	4b77      	ldr	r3, [pc, #476]	; (14318 <RADIO_RxDoneHandler+0x26c>)
   1413a:	4798      	blx	r3
   1413c:	2201      	movs	r2, #1
   1413e:	4b77      	ldr	r3, [pc, #476]	; (1431c <RADIO_RxDoneHandler+0x270>)
   14140:	a901      	add	r1, sp, #4
   14142:	701a      	strb	r2, [r3, #0]
   14144:	0022      	movs	r2, r4
   14146:	2300      	movs	r3, #0
   14148:	322c      	adds	r2, #44	; 0x2c
   1414a:	7013      	strb	r3, [r2, #0]
   1414c:	0022      	movs	r2, r4
   1414e:	3258      	adds	r2, #88	; 0x58
   14150:	7013      	strb	r3, [r2, #0]
   14152:	700b      	strb	r3, [r1, #0]
   14154:	4b72      	ldr	r3, [pc, #456]	; (14320 <RADIO_RxDoneHandler+0x274>)
   14156:	781b      	ldrb	r3, [r3, #0]
   14158:	071b      	lsls	r3, r3, #28
   1415a:	d5d5      	bpl.n	14108 <RADIO_RxDoneHandler+0x5c>
   1415c:	6923      	ldr	r3, [r4, #16]
   1415e:	e7cf      	b.n	14100 <RADIO_RxDoneHandler+0x54>
   14160:	881a      	ldrh	r2, [r3, #0]
   14162:	0792      	lsls	r2, r2, #30
   14164:	d571      	bpl.n	1424a <RADIO_RxDoneHandler+0x19e>
   14166:	2102      	movs	r1, #2
   14168:	881a      	ldrh	r2, [r3, #0]
   1416a:	4d6e      	ldr	r5, [pc, #440]	; (14324 <RADIO_RxDoneHandler+0x278>)
   1416c:	438a      	bics	r2, r1
   1416e:	801a      	strh	r2, [r3, #0]
   14170:	2013      	movs	r0, #19
   14172:	47a8      	blx	r5
   14174:	4c66      	ldr	r4, [pc, #408]	; (14310 <RADIO_RxDoneHandler+0x264>)
   14176:	2100      	movs	r1, #0
   14178:	0026      	movs	r6, r4
   1417a:	362c      	adds	r6, #44	; 0x2c
   1417c:	7030      	strb	r0, [r6, #0]
   1417e:	4b6a      	ldr	r3, [pc, #424]	; (14328 <RADIO_RxDoneHandler+0x27c>)
   14180:	200d      	movs	r0, #13
   14182:	4798      	blx	r3
   14184:	7832      	ldrb	r2, [r6, #0]
   14186:	4b69      	ldr	r3, [pc, #420]	; (1432c <RADIO_RxDoneHandler+0x280>)
   14188:	b2d2      	uxtb	r2, r2
   1418a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1418c:	2000      	movs	r0, #0
   1418e:	4798      	blx	r3
   14190:	2019      	movs	r0, #25
   14192:	47a8      	blx	r5
   14194:	0023      	movs	r3, r4
   14196:	b240      	sxtb	r0, r0
   14198:	3332      	adds	r3, #50	; 0x32
   1419a:	2800      	cmp	r0, #0
   1419c:	da3b      	bge.n	14216 <RADIO_RxDoneHandler+0x16a>
   1419e:	4240      	negs	r0, r0
   141a0:	1080      	asrs	r0, r0, #2
   141a2:	4240      	negs	r0, r0
   141a4:	7018      	strb	r0, [r3, #0]
   141a6:	201a      	movs	r0, #26
   141a8:	47a8      	blx	r5
   141aa:	0023      	movs	r3, r4
   141ac:	3332      	adds	r3, #50	; 0x32
   141ae:	781b      	ldrb	r3, [r3, #0]
   141b0:	b202      	sxth	r2, r0
   141b2:	b25b      	sxtb	r3, r3
   141b4:	4d5e      	ldr	r5, [pc, #376]	; (14330 <RADIO_RxDoneHandler+0x284>)
   141b6:	2b00      	cmp	r3, #0
   141b8:	da36      	bge.n	14228 <RADIO_RxDoneHandler+0x17c>
   141ba:	6821      	ldr	r1, [r4, #0]
   141bc:	4e5d      	ldr	r6, [pc, #372]	; (14334 <RADIO_RxDoneHandler+0x288>)
   141be:	198e      	adds	r6, r1, r6
   141c0:	42ae      	cmp	r6, r5
   141c2:	d82a      	bhi.n	1421a <RADIO_RxDoneHandler+0x16e>
   141c4:	3b9d      	subs	r3, #157	; 0x9d
   141c6:	181b      	adds	r3, r3, r0
   141c8:	1112      	asrs	r2, r2, #4
   141ca:	189b      	adds	r3, r3, r2
   141cc:	0022      	movs	r2, r4
   141ce:	3256      	adds	r2, #86	; 0x56
   141d0:	8013      	strh	r3, [r2, #0]
   141d2:	0023      	movs	r3, r4
   141d4:	2200      	movs	r2, #0
   141d6:	3334      	adds	r3, #52	; 0x34
   141d8:	7819      	ldrb	r1, [r3, #0]
   141da:	0010      	movs	r0, r2
   141dc:	4b4d      	ldr	r3, [pc, #308]	; (14314 <RADIO_RxDoneHandler+0x268>)
   141de:	4798      	blx	r3
   141e0:	4b4d      	ldr	r3, [pc, #308]	; (14318 <RADIO_RxDoneHandler+0x26c>)
   141e2:	4798      	blx	r3
   141e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   141e6:	a901      	add	r1, sp, #4
   141e8:	604b      	str	r3, [r1, #4]
   141ea:	0023      	movs	r3, r4
   141ec:	332c      	adds	r3, #44	; 0x2c
   141ee:	781b      	ldrb	r3, [r3, #0]
   141f0:	2201      	movs	r2, #1
   141f2:	720b      	strb	r3, [r1, #8]
   141f4:	2300      	movs	r3, #0
   141f6:	700b      	strb	r3, [r1, #0]
   141f8:	4b48      	ldr	r3, [pc, #288]	; (1431c <RADIO_RxDoneHandler+0x270>)
   141fa:	701a      	strb	r2, [r3, #0]
   141fc:	4b48      	ldr	r3, [pc, #288]	; (14320 <RADIO_RxDoneHandler+0x274>)
   141fe:	7818      	ldrb	r0, [r3, #0]
   14200:	07c0      	lsls	r0, r0, #31
   14202:	0fc0      	lsrs	r0, r0, #31
   14204:	4290      	cmp	r0, r2
   14206:	d000      	beq.n	1420a <RADIO_RxDoneHandler+0x15e>
   14208:	e77e      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   1420a:	6923      	ldr	r3, [r4, #16]
   1420c:	2b00      	cmp	r3, #0
   1420e:	d100      	bne.n	14212 <RADIO_RxDoneHandler+0x166>
   14210:	e77a      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   14212:	4798      	blx	r3
   14214:	e778      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   14216:	1080      	asrs	r0, r0, #2
   14218:	e7c4      	b.n	141a4 <RADIO_RxDoneHandler+0xf8>
   1421a:	4d47      	ldr	r5, [pc, #284]	; (14338 <RADIO_RxDoneHandler+0x28c>)
   1421c:	1949      	adds	r1, r1, r5
   1421e:	4d47      	ldr	r5, [pc, #284]	; (1433c <RADIO_RxDoneHandler+0x290>)
   14220:	42a9      	cmp	r1, r5
   14222:	d8d6      	bhi.n	141d2 <RADIO_RxDoneHandler+0x126>
   14224:	3ba4      	subs	r3, #164	; 0xa4
   14226:	e7ce      	b.n	141c6 <RADIO_RxDoneHandler+0x11a>
   14228:	6823      	ldr	r3, [r4, #0]
   1422a:	4942      	ldr	r1, [pc, #264]	; (14334 <RADIO_RxDoneHandler+0x288>)
   1422c:	1859      	adds	r1, r3, r1
   1422e:	42a9      	cmp	r1, r5
   14230:	d802      	bhi.n	14238 <RADIO_RxDoneHandler+0x18c>
   14232:	0003      	movs	r3, r0
   14234:	3b9d      	subs	r3, #157	; 0x9d
   14236:	e7c7      	b.n	141c8 <RADIO_RxDoneHandler+0x11c>
   14238:	493f      	ldr	r1, [pc, #252]	; (14338 <RADIO_RxDoneHandler+0x28c>)
   1423a:	185b      	adds	r3, r3, r1
   1423c:	493f      	ldr	r1, [pc, #252]	; (1433c <RADIO_RxDoneHandler+0x290>)
   1423e:	428b      	cmp	r3, r1
   14240:	d8c7      	bhi.n	141d2 <RADIO_RxDoneHandler+0x126>
   14242:	38a4      	subs	r0, #164	; 0xa4
   14244:	1113      	asrs	r3, r2, #4
   14246:	18c3      	adds	r3, r0, r3
   14248:	e7c0      	b.n	141cc <RADIO_RxDoneHandler+0x120>
   1424a:	881a      	ldrh	r2, [r3, #0]
   1424c:	0712      	lsls	r2, r2, #28
   1424e:	0fd5      	lsrs	r5, r2, #31
   14250:	2a00      	cmp	r2, #0
   14252:	da27      	bge.n	142a4 <RADIO_RxDoneHandler+0x1f8>
   14254:	2108      	movs	r1, #8
   14256:	881a      	ldrh	r2, [r3, #0]
   14258:	4c2d      	ldr	r4, [pc, #180]	; (14310 <RADIO_RxDoneHandler+0x264>)
   1425a:	438a      	bics	r2, r1
   1425c:	801a      	strh	r2, [r3, #0]
   1425e:	0023      	movs	r3, r4
   14260:	2280      	movs	r2, #128	; 0x80
   14262:	3332      	adds	r3, #50	; 0x32
   14264:	701a      	strb	r2, [r3, #0]
   14266:	0023      	movs	r3, r4
   14268:	2200      	movs	r2, #0
   1426a:	3334      	adds	r3, #52	; 0x34
   1426c:	7819      	ldrb	r1, [r3, #0]
   1426e:	0010      	movs	r0, r2
   14270:	4b28      	ldr	r3, [pc, #160]	; (14314 <RADIO_RxDoneHandler+0x268>)
   14272:	4798      	blx	r3
   14274:	4b28      	ldr	r3, [pc, #160]	; (14318 <RADIO_RxDoneHandler+0x26c>)
   14276:	4798      	blx	r3
   14278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1427a:	a901      	add	r1, sp, #4
   1427c:	604b      	str	r3, [r1, #4]
   1427e:	0023      	movs	r3, r4
   14280:	332c      	adds	r3, #44	; 0x2c
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	0022      	movs	r2, r4
   14286:	720b      	strb	r3, [r1, #8]
   14288:	2300      	movs	r3, #0
   1428a:	3258      	adds	r2, #88	; 0x58
   1428c:	7013      	strb	r3, [r2, #0]
   1428e:	700b      	strb	r3, [r1, #0]
   14290:	4b22      	ldr	r3, [pc, #136]	; (1431c <RADIO_RxDoneHandler+0x270>)
   14292:	701d      	strb	r5, [r3, #0]
   14294:	4b22      	ldr	r3, [pc, #136]	; (14320 <RADIO_RxDoneHandler+0x274>)
   14296:	7818      	ldrb	r0, [r3, #0]
   14298:	07c0      	lsls	r0, r0, #31
   1429a:	0fc0      	lsrs	r0, r0, #31
   1429c:	2801      	cmp	r0, #1
   1429e:	d000      	beq.n	142a2 <RADIO_RxDoneHandler+0x1f6>
   142a0:	e732      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   142a2:	e7b2      	b.n	1420a <RADIO_RxDoneHandler+0x15e>
   142a4:	881a      	ldrh	r2, [r3, #0]
   142a6:	05d2      	lsls	r2, r2, #23
   142a8:	0fd5      	lsrs	r5, r2, #31
   142aa:	2a00      	cmp	r2, #0
   142ac:	db00      	blt.n	142b0 <RADIO_RxDoneHandler+0x204>
   142ae:	e72b      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   142b0:	4c17      	ldr	r4, [pc, #92]	; (14310 <RADIO_RxDoneHandler+0x264>)
   142b2:	881a      	ldrh	r2, [r3, #0]
   142b4:	0026      	movs	r6, r4
   142b6:	4922      	ldr	r1, [pc, #136]	; (14340 <RADIO_RxDoneHandler+0x294>)
   142b8:	362c      	adds	r6, #44	; 0x2c
   142ba:	400a      	ands	r2, r1
   142bc:	801a      	strh	r2, [r3, #0]
   142be:	7832      	ldrb	r2, [r6, #0]
   142c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   142c2:	b2d2      	uxtb	r2, r2
   142c4:	2000      	movs	r0, #0
   142c6:	4b19      	ldr	r3, [pc, #100]	; (1432c <RADIO_RxDoneHandler+0x280>)
   142c8:	4798      	blx	r3
   142ca:	0023      	movs	r3, r4
   142cc:	2200      	movs	r2, #0
   142ce:	3334      	adds	r3, #52	; 0x34
   142d0:	7819      	ldrb	r1, [r3, #0]
   142d2:	0010      	movs	r0, r2
   142d4:	4b0f      	ldr	r3, [pc, #60]	; (14314 <RADIO_RxDoneHandler+0x268>)
   142d6:	4798      	blx	r3
   142d8:	4b0f      	ldr	r3, [pc, #60]	; (14318 <RADIO_RxDoneHandler+0x26c>)
   142da:	4798      	blx	r3
   142dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   142de:	a901      	add	r1, sp, #4
   142e0:	604b      	str	r3, [r1, #4]
   142e2:	7833      	ldrb	r3, [r6, #0]
   142e4:	0022      	movs	r2, r4
   142e6:	720b      	strb	r3, [r1, #8]
   142e8:	2300      	movs	r3, #0
   142ea:	3258      	adds	r2, #88	; 0x58
   142ec:	7013      	strb	r3, [r2, #0]
   142ee:	700b      	strb	r3, [r1, #0]
   142f0:	4b0a      	ldr	r3, [pc, #40]	; (1431c <RADIO_RxDoneHandler+0x270>)
   142f2:	701d      	strb	r5, [r3, #0]
   142f4:	4b0a      	ldr	r3, [pc, #40]	; (14320 <RADIO_RxDoneHandler+0x274>)
   142f6:	781b      	ldrb	r3, [r3, #0]
   142f8:	06db      	lsls	r3, r3, #27
   142fa:	d400      	bmi.n	142fe <RADIO_RxDoneHandler+0x252>
   142fc:	e704      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   142fe:	6923      	ldr	r3, [r4, #16]
   14300:	2b00      	cmp	r3, #0
   14302:	d100      	bne.n	14306 <RADIO_RxDoneHandler+0x25a>
   14304:	e700      	b.n	14108 <RADIO_RxDoneHandler+0x5c>
   14306:	2010      	movs	r0, #16
   14308:	e783      	b.n	14212 <RADIO_RxDoneHandler+0x166>
   1430a:	46c0      	nop			; (mov r8, r8)
   1430c:	20002e18 	.word	0x20002e18
   14310:	200027c8 	.word	0x200027c8
   14314:	0000d201 	.word	0x0000d201
   14318:	00013b25 	.word	0x00013b25
   1431c:	20002e1b 	.word	0x20002e1b
   14320:	20002e1a 	.word	0x20002e1a
   14324:	00005b41 	.word	0x00005b41
   14328:	00005b19 	.word	0x00005b19
   1432c:	00005bad 	.word	0x00005bad
   14330:	096ae380 	.word	0x096ae380
   14334:	cc9eec80 	.word	0xcc9eec80
   14338:	e78fe580 	.word	0xe78fe580
   1433c:	06dac2c0 	.word	0x06dac2c0
   14340:	fffffeff 	.word	0xfffffeff

00014344 <Radio_LBTScanTimeout>:
   14344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14346:	4c1c      	ldr	r4, [pc, #112]	; (143b8 <Radio_LBTScanTimeout+0x74>)
   14348:	0025      	movs	r5, r4
   1434a:	0023      	movs	r3, r4
   1434c:	354f      	adds	r5, #79	; 0x4f
   1434e:	7829      	ldrb	r1, [r5, #0]
   14350:	3340      	adds	r3, #64	; 0x40
   14352:	3101      	adds	r1, #1
   14354:	b2c9      	uxtb	r1, r1
   14356:	7029      	strb	r1, [r5, #0]
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	428b      	cmp	r3, r1
   1435c:	d315      	bcc.n	1438a <Radio_LBTScanTimeout+0x46>
   1435e:	260e      	movs	r6, #14
   14360:	446e      	add	r6, sp
   14362:	4b16      	ldr	r3, [pc, #88]	; (143bc <Radio_LBTScanTimeout+0x78>)
   14364:	0030      	movs	r0, r6
   14366:	4798      	blx	r3
   14368:	2300      	movs	r3, #0
   1436a:	5ef2      	ldrsh	r2, [r6, r3]
   1436c:	782b      	ldrb	r3, [r5, #0]
   1436e:	4353      	muls	r3, r2
   14370:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14372:	189b      	adds	r3, r3, r2
   14374:	6463      	str	r3, [r4, #68]	; 0x44
   14376:	0023      	movs	r3, r4
   14378:	2200      	movs	r2, #0
   1437a:	3350      	adds	r3, #80	; 0x50
   1437c:	7818      	ldrb	r0, [r3, #0]
   1437e:	9200      	str	r2, [sp, #0]
   14380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   14382:	4b0f      	ldr	r3, [pc, #60]	; (143c0 <Radio_LBTScanTimeout+0x7c>)
   14384:	4c0f      	ldr	r4, [pc, #60]	; (143c4 <Radio_LBTScanTimeout+0x80>)
   14386:	47a0      	blx	r4
   14388:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1438a:	2380      	movs	r3, #128	; 0x80
   1438c:	4a0e      	ldr	r2, [pc, #56]	; (143c8 <Radio_LBTScanTimeout+0x84>)
   1438e:	009b      	lsls	r3, r3, #2
   14390:	8810      	ldrh	r0, [r2, #0]
   14392:	4303      	orrs	r3, r0
   14394:	8013      	strh	r3, [r2, #0]
   14396:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14398:	0058      	lsls	r0, r3, #1
   1439a:	1e4b      	subs	r3, r1, #1
   1439c:	4359      	muls	r1, r3
   1439e:	4b0b      	ldr	r3, [pc, #44]	; (143cc <Radio_LBTScanTimeout+0x88>)
   143a0:	b289      	uxth	r1, r1
   143a2:	4798      	blx	r3
   143a4:	0023      	movs	r3, r4
   143a6:	334c      	adds	r3, #76	; 0x4c
   143a8:	8018      	strh	r0, [r3, #0]
   143aa:	2300      	movs	r3, #0
   143ac:	2001      	movs	r0, #1
   143ae:	702b      	strb	r3, [r5, #0]
   143b0:	6463      	str	r3, [r4, #68]	; 0x44
   143b2:	4b07      	ldr	r3, [pc, #28]	; (143d0 <Radio_LBTScanTimeout+0x8c>)
   143b4:	4798      	blx	r3
   143b6:	e7e7      	b.n	14388 <Radio_LBTScanTimeout+0x44>
   143b8:	200027c8 	.word	0x200027c8
   143bc:	0000d3c5 	.word	0x0000d3c5
   143c0:	00014345 	.word	0x00014345
   143c4:	0000cb35 	.word	0x0000cb35
   143c8:	20002e18 	.word	0x20002e18
   143cc:	0001461d 	.word	0x0001461d
   143d0:	0001338d 	.word	0x0001338d

000143d4 <RADIO_ScanHandler>:
   143d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   143d6:	4b12      	ldr	r3, [pc, #72]	; (14420 <RADIO_ScanHandler+0x4c>)
   143d8:	4798      	blx	r3
   143da:	2000      	movs	r0, #0
   143dc:	4b11      	ldr	r3, [pc, #68]	; (14424 <RADIO_ScanHandler+0x50>)
   143de:	4798      	blx	r3
   143e0:	4d11      	ldr	r5, [pc, #68]	; (14428 <RADIO_ScanHandler+0x54>)
   143e2:	4b12      	ldr	r3, [pc, #72]	; (1442c <RADIO_ScanHandler+0x58>)
   143e4:	6828      	ldr	r0, [r5, #0]
   143e6:	2400      	movs	r4, #0
   143e8:	4798      	blx	r3
   143ea:	002b      	movs	r3, r5
   143ec:	4e10      	ldr	r6, [pc, #64]	; (14430 <RADIO_ScanHandler+0x5c>)
   143ee:	334c      	adds	r3, #76	; 0x4c
   143f0:	2201      	movs	r2, #1
   143f2:	0021      	movs	r1, r4
   143f4:	0020      	movs	r0, r4
   143f6:	801c      	strh	r4, [r3, #0]
   143f8:	47b0      	blx	r6
   143fa:	4b0e      	ldr	r3, [pc, #56]	; (14434 <RADIO_ScanHandler+0x60>)
   143fc:	2109      	movs	r1, #9
   143fe:	2012      	movs	r0, #18
   14400:	4798      	blx	r3
   14402:	3550      	adds	r5, #80	; 0x50
   14404:	0022      	movs	r2, r4
   14406:	0021      	movs	r1, r4
   14408:	2005      	movs	r0, #5
   1440a:	47b0      	blx	r6
   1440c:	7828      	ldrb	r0, [r5, #0]
   1440e:	4b0a      	ldr	r3, [pc, #40]	; (14438 <RADIO_ScanHandler+0x64>)
   14410:	4d0a      	ldr	r5, [pc, #40]	; (1443c <RADIO_ScanHandler+0x68>)
   14412:	9400      	str	r4, [sp, #0]
   14414:	0022      	movs	r2, r4
   14416:	490a      	ldr	r1, [pc, #40]	; (14440 <RADIO_ScanHandler+0x6c>)
   14418:	47a8      	blx	r5
   1441a:	0020      	movs	r0, r4
   1441c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1441e:	46c0      	nop			; (mov r8, r8)
   14420:	00013af1 	.word	0x00013af1
   14424:	00013641 	.word	0x00013641
   14428:	200027c8 	.word	0x200027c8
   1442c:	00012d85 	.word	0x00012d85
   14430:	0000d201 	.word	0x0000d201
   14434:	00005b19 	.word	0x00005b19
   14438:	00014345 	.word	0x00014345
   1443c:	0000cb35 	.word	0x0000cb35
   14440:	00002328 	.word	0x00002328

00014444 <radioScanDoneHandler>:
   14444:	b530      	push	{r4, r5, lr}
   14446:	4a18      	ldr	r2, [pc, #96]	; (144a8 <radioScanDoneHandler+0x64>)
   14448:	4918      	ldr	r1, [pc, #96]	; (144ac <radioScanDoneHandler+0x68>)
   1444a:	8813      	ldrh	r3, [r2, #0]
   1444c:	b085      	sub	sp, #20
   1444e:	400b      	ands	r3, r1
   14450:	8013      	strh	r3, [r2, #0]
   14452:	2200      	movs	r2, #0
   14454:	4b16      	ldr	r3, [pc, #88]	; (144b0 <radioScanDoneHandler+0x6c>)
   14456:	0011      	movs	r1, r2
   14458:	0010      	movs	r0, r2
   1445a:	4798      	blx	r3
   1445c:	2000      	movs	r0, #0
   1445e:	4b15      	ldr	r3, [pc, #84]	; (144b4 <radioScanDoneHandler+0x70>)
   14460:	4798      	blx	r3
   14462:	4b15      	ldr	r3, [pc, #84]	; (144b8 <radioScanDoneHandler+0x74>)
   14464:	4798      	blx	r3
   14466:	4c15      	ldr	r4, [pc, #84]	; (144bc <radioScanDoneHandler+0x78>)
   14468:	0023      	movs	r3, r4
   1446a:	334c      	adds	r3, #76	; 0x4c
   1446c:	2100      	movs	r1, #0
   1446e:	5e59      	ldrsh	r1, [r3, r1]
   14470:	233e      	movs	r3, #62	; 0x3e
   14472:	5ee2      	ldrsh	r2, [r4, r3]
   14474:	4b12      	ldr	r3, [pc, #72]	; (144c0 <radioScanDoneHandler+0x7c>)
   14476:	4291      	cmp	r1, r2
   14478:	da06      	bge.n	14488 <radioScanDoneHandler+0x44>
   1447a:	2002      	movs	r0, #2
   1447c:	4798      	blx	r3
   1447e:	4b11      	ldr	r3, [pc, #68]	; (144c4 <radioScanDoneHandler+0x80>)
   14480:	4798      	blx	r3
   14482:	2000      	movs	r0, #0
   14484:	b005      	add	sp, #20
   14486:	bd30      	pop	{r4, r5, pc}
   14488:	2207      	movs	r2, #7
   1448a:	ad01      	add	r5, sp, #4
   1448c:	2001      	movs	r0, #1
   1448e:	702a      	strb	r2, [r5, #0]
   14490:	4798      	blx	r3
   14492:	4b0d      	ldr	r3, [pc, #52]	; (144c8 <radioScanDoneHandler+0x84>)
   14494:	781b      	ldrb	r3, [r3, #0]
   14496:	079b      	lsls	r3, r3, #30
   14498:	d5f3      	bpl.n	14482 <radioScanDoneHandler+0x3e>
   1449a:	6923      	ldr	r3, [r4, #16]
   1449c:	2b00      	cmp	r3, #0
   1449e:	d0f0      	beq.n	14482 <radioScanDoneHandler+0x3e>
   144a0:	0029      	movs	r1, r5
   144a2:	2002      	movs	r0, #2
   144a4:	4798      	blx	r3
   144a6:	e7ec      	b.n	14482 <radioScanDoneHandler+0x3e>
   144a8:	20002e18 	.word	0x20002e18
   144ac:	fffffdff 	.word	0xfffffdff
   144b0:	0000d201 	.word	0x0000d201
   144b4:	00013769 	.word	0x00013769
   144b8:	00013b25 	.word	0x00013b25
   144bc:	200027c8 	.word	0x200027c8
   144c0:	00013439 	.word	0x00013439
   144c4:	00013df1 	.word	0x00013df1
   144c8:	20002e1a 	.word	0x20002e1a

000144cc <__gnu_thumb1_case_uqi>:
   144cc:	b402      	push	{r1}
   144ce:	4671      	mov	r1, lr
   144d0:	0849      	lsrs	r1, r1, #1
   144d2:	0049      	lsls	r1, r1, #1
   144d4:	5c09      	ldrb	r1, [r1, r0]
   144d6:	0049      	lsls	r1, r1, #1
   144d8:	448e      	add	lr, r1
   144da:	bc02      	pop	{r1}
   144dc:	4770      	bx	lr
   144de:	46c0      	nop			; (mov r8, r8)

000144e0 <__gnu_thumb1_case_shi>:
   144e0:	b403      	push	{r0, r1}
   144e2:	4671      	mov	r1, lr
   144e4:	0849      	lsrs	r1, r1, #1
   144e6:	0040      	lsls	r0, r0, #1
   144e8:	0049      	lsls	r1, r1, #1
   144ea:	5e09      	ldrsh	r1, [r1, r0]
   144ec:	0049      	lsls	r1, r1, #1
   144ee:	448e      	add	lr, r1
   144f0:	bc03      	pop	{r0, r1}
   144f2:	4770      	bx	lr

000144f4 <__gnu_thumb1_case_uhi>:
   144f4:	b403      	push	{r0, r1}
   144f6:	4671      	mov	r1, lr
   144f8:	0849      	lsrs	r1, r1, #1
   144fa:	0040      	lsls	r0, r0, #1
   144fc:	0049      	lsls	r1, r1, #1
   144fe:	5a09      	ldrh	r1, [r1, r0]
   14500:	0049      	lsls	r1, r1, #1
   14502:	448e      	add	lr, r1
   14504:	bc03      	pop	{r0, r1}
   14506:	4770      	bx	lr

00014508 <__udivsi3>:
   14508:	2200      	movs	r2, #0
   1450a:	0843      	lsrs	r3, r0, #1
   1450c:	428b      	cmp	r3, r1
   1450e:	d374      	bcc.n	145fa <__udivsi3+0xf2>
   14510:	0903      	lsrs	r3, r0, #4
   14512:	428b      	cmp	r3, r1
   14514:	d35f      	bcc.n	145d6 <__udivsi3+0xce>
   14516:	0a03      	lsrs	r3, r0, #8
   14518:	428b      	cmp	r3, r1
   1451a:	d344      	bcc.n	145a6 <__udivsi3+0x9e>
   1451c:	0b03      	lsrs	r3, r0, #12
   1451e:	428b      	cmp	r3, r1
   14520:	d328      	bcc.n	14574 <__udivsi3+0x6c>
   14522:	0c03      	lsrs	r3, r0, #16
   14524:	428b      	cmp	r3, r1
   14526:	d30d      	bcc.n	14544 <__udivsi3+0x3c>
   14528:	22ff      	movs	r2, #255	; 0xff
   1452a:	0209      	lsls	r1, r1, #8
   1452c:	ba12      	rev	r2, r2
   1452e:	0c03      	lsrs	r3, r0, #16
   14530:	428b      	cmp	r3, r1
   14532:	d302      	bcc.n	1453a <__udivsi3+0x32>
   14534:	1212      	asrs	r2, r2, #8
   14536:	0209      	lsls	r1, r1, #8
   14538:	d065      	beq.n	14606 <__udivsi3+0xfe>
   1453a:	0b03      	lsrs	r3, r0, #12
   1453c:	428b      	cmp	r3, r1
   1453e:	d319      	bcc.n	14574 <__udivsi3+0x6c>
   14540:	e000      	b.n	14544 <__udivsi3+0x3c>
   14542:	0a09      	lsrs	r1, r1, #8
   14544:	0bc3      	lsrs	r3, r0, #15
   14546:	428b      	cmp	r3, r1
   14548:	d301      	bcc.n	1454e <__udivsi3+0x46>
   1454a:	03cb      	lsls	r3, r1, #15
   1454c:	1ac0      	subs	r0, r0, r3
   1454e:	4152      	adcs	r2, r2
   14550:	0b83      	lsrs	r3, r0, #14
   14552:	428b      	cmp	r3, r1
   14554:	d301      	bcc.n	1455a <__udivsi3+0x52>
   14556:	038b      	lsls	r3, r1, #14
   14558:	1ac0      	subs	r0, r0, r3
   1455a:	4152      	adcs	r2, r2
   1455c:	0b43      	lsrs	r3, r0, #13
   1455e:	428b      	cmp	r3, r1
   14560:	d301      	bcc.n	14566 <__udivsi3+0x5e>
   14562:	034b      	lsls	r3, r1, #13
   14564:	1ac0      	subs	r0, r0, r3
   14566:	4152      	adcs	r2, r2
   14568:	0b03      	lsrs	r3, r0, #12
   1456a:	428b      	cmp	r3, r1
   1456c:	d301      	bcc.n	14572 <__udivsi3+0x6a>
   1456e:	030b      	lsls	r3, r1, #12
   14570:	1ac0      	subs	r0, r0, r3
   14572:	4152      	adcs	r2, r2
   14574:	0ac3      	lsrs	r3, r0, #11
   14576:	428b      	cmp	r3, r1
   14578:	d301      	bcc.n	1457e <__udivsi3+0x76>
   1457a:	02cb      	lsls	r3, r1, #11
   1457c:	1ac0      	subs	r0, r0, r3
   1457e:	4152      	adcs	r2, r2
   14580:	0a83      	lsrs	r3, r0, #10
   14582:	428b      	cmp	r3, r1
   14584:	d301      	bcc.n	1458a <__udivsi3+0x82>
   14586:	028b      	lsls	r3, r1, #10
   14588:	1ac0      	subs	r0, r0, r3
   1458a:	4152      	adcs	r2, r2
   1458c:	0a43      	lsrs	r3, r0, #9
   1458e:	428b      	cmp	r3, r1
   14590:	d301      	bcc.n	14596 <__udivsi3+0x8e>
   14592:	024b      	lsls	r3, r1, #9
   14594:	1ac0      	subs	r0, r0, r3
   14596:	4152      	adcs	r2, r2
   14598:	0a03      	lsrs	r3, r0, #8
   1459a:	428b      	cmp	r3, r1
   1459c:	d301      	bcc.n	145a2 <__udivsi3+0x9a>
   1459e:	020b      	lsls	r3, r1, #8
   145a0:	1ac0      	subs	r0, r0, r3
   145a2:	4152      	adcs	r2, r2
   145a4:	d2cd      	bcs.n	14542 <__udivsi3+0x3a>
   145a6:	09c3      	lsrs	r3, r0, #7
   145a8:	428b      	cmp	r3, r1
   145aa:	d301      	bcc.n	145b0 <__udivsi3+0xa8>
   145ac:	01cb      	lsls	r3, r1, #7
   145ae:	1ac0      	subs	r0, r0, r3
   145b0:	4152      	adcs	r2, r2
   145b2:	0983      	lsrs	r3, r0, #6
   145b4:	428b      	cmp	r3, r1
   145b6:	d301      	bcc.n	145bc <__udivsi3+0xb4>
   145b8:	018b      	lsls	r3, r1, #6
   145ba:	1ac0      	subs	r0, r0, r3
   145bc:	4152      	adcs	r2, r2
   145be:	0943      	lsrs	r3, r0, #5
   145c0:	428b      	cmp	r3, r1
   145c2:	d301      	bcc.n	145c8 <__udivsi3+0xc0>
   145c4:	014b      	lsls	r3, r1, #5
   145c6:	1ac0      	subs	r0, r0, r3
   145c8:	4152      	adcs	r2, r2
   145ca:	0903      	lsrs	r3, r0, #4
   145cc:	428b      	cmp	r3, r1
   145ce:	d301      	bcc.n	145d4 <__udivsi3+0xcc>
   145d0:	010b      	lsls	r3, r1, #4
   145d2:	1ac0      	subs	r0, r0, r3
   145d4:	4152      	adcs	r2, r2
   145d6:	08c3      	lsrs	r3, r0, #3
   145d8:	428b      	cmp	r3, r1
   145da:	d301      	bcc.n	145e0 <__udivsi3+0xd8>
   145dc:	00cb      	lsls	r3, r1, #3
   145de:	1ac0      	subs	r0, r0, r3
   145e0:	4152      	adcs	r2, r2
   145e2:	0883      	lsrs	r3, r0, #2
   145e4:	428b      	cmp	r3, r1
   145e6:	d301      	bcc.n	145ec <__udivsi3+0xe4>
   145e8:	008b      	lsls	r3, r1, #2
   145ea:	1ac0      	subs	r0, r0, r3
   145ec:	4152      	adcs	r2, r2
   145ee:	0843      	lsrs	r3, r0, #1
   145f0:	428b      	cmp	r3, r1
   145f2:	d301      	bcc.n	145f8 <__udivsi3+0xf0>
   145f4:	004b      	lsls	r3, r1, #1
   145f6:	1ac0      	subs	r0, r0, r3
   145f8:	4152      	adcs	r2, r2
   145fa:	1a41      	subs	r1, r0, r1
   145fc:	d200      	bcs.n	14600 <__udivsi3+0xf8>
   145fe:	4601      	mov	r1, r0
   14600:	4152      	adcs	r2, r2
   14602:	4610      	mov	r0, r2
   14604:	4770      	bx	lr
   14606:	e7ff      	b.n	14608 <__udivsi3+0x100>
   14608:	b501      	push	{r0, lr}
   1460a:	2000      	movs	r0, #0
   1460c:	f000 f8f0 	bl	147f0 <__aeabi_idiv0>
   14610:	bd02      	pop	{r1, pc}
   14612:	46c0      	nop			; (mov r8, r8)

00014614 <__aeabi_uidivmod>:
   14614:	2900      	cmp	r1, #0
   14616:	d0f7      	beq.n	14608 <__udivsi3+0x100>
   14618:	e776      	b.n	14508 <__udivsi3>
   1461a:	4770      	bx	lr

0001461c <__divsi3>:
   1461c:	4603      	mov	r3, r0
   1461e:	430b      	orrs	r3, r1
   14620:	d47f      	bmi.n	14722 <__divsi3+0x106>
   14622:	2200      	movs	r2, #0
   14624:	0843      	lsrs	r3, r0, #1
   14626:	428b      	cmp	r3, r1
   14628:	d374      	bcc.n	14714 <__divsi3+0xf8>
   1462a:	0903      	lsrs	r3, r0, #4
   1462c:	428b      	cmp	r3, r1
   1462e:	d35f      	bcc.n	146f0 <__divsi3+0xd4>
   14630:	0a03      	lsrs	r3, r0, #8
   14632:	428b      	cmp	r3, r1
   14634:	d344      	bcc.n	146c0 <__divsi3+0xa4>
   14636:	0b03      	lsrs	r3, r0, #12
   14638:	428b      	cmp	r3, r1
   1463a:	d328      	bcc.n	1468e <__divsi3+0x72>
   1463c:	0c03      	lsrs	r3, r0, #16
   1463e:	428b      	cmp	r3, r1
   14640:	d30d      	bcc.n	1465e <__divsi3+0x42>
   14642:	22ff      	movs	r2, #255	; 0xff
   14644:	0209      	lsls	r1, r1, #8
   14646:	ba12      	rev	r2, r2
   14648:	0c03      	lsrs	r3, r0, #16
   1464a:	428b      	cmp	r3, r1
   1464c:	d302      	bcc.n	14654 <__divsi3+0x38>
   1464e:	1212      	asrs	r2, r2, #8
   14650:	0209      	lsls	r1, r1, #8
   14652:	d065      	beq.n	14720 <__divsi3+0x104>
   14654:	0b03      	lsrs	r3, r0, #12
   14656:	428b      	cmp	r3, r1
   14658:	d319      	bcc.n	1468e <__divsi3+0x72>
   1465a:	e000      	b.n	1465e <__divsi3+0x42>
   1465c:	0a09      	lsrs	r1, r1, #8
   1465e:	0bc3      	lsrs	r3, r0, #15
   14660:	428b      	cmp	r3, r1
   14662:	d301      	bcc.n	14668 <__divsi3+0x4c>
   14664:	03cb      	lsls	r3, r1, #15
   14666:	1ac0      	subs	r0, r0, r3
   14668:	4152      	adcs	r2, r2
   1466a:	0b83      	lsrs	r3, r0, #14
   1466c:	428b      	cmp	r3, r1
   1466e:	d301      	bcc.n	14674 <__divsi3+0x58>
   14670:	038b      	lsls	r3, r1, #14
   14672:	1ac0      	subs	r0, r0, r3
   14674:	4152      	adcs	r2, r2
   14676:	0b43      	lsrs	r3, r0, #13
   14678:	428b      	cmp	r3, r1
   1467a:	d301      	bcc.n	14680 <__divsi3+0x64>
   1467c:	034b      	lsls	r3, r1, #13
   1467e:	1ac0      	subs	r0, r0, r3
   14680:	4152      	adcs	r2, r2
   14682:	0b03      	lsrs	r3, r0, #12
   14684:	428b      	cmp	r3, r1
   14686:	d301      	bcc.n	1468c <__divsi3+0x70>
   14688:	030b      	lsls	r3, r1, #12
   1468a:	1ac0      	subs	r0, r0, r3
   1468c:	4152      	adcs	r2, r2
   1468e:	0ac3      	lsrs	r3, r0, #11
   14690:	428b      	cmp	r3, r1
   14692:	d301      	bcc.n	14698 <__divsi3+0x7c>
   14694:	02cb      	lsls	r3, r1, #11
   14696:	1ac0      	subs	r0, r0, r3
   14698:	4152      	adcs	r2, r2
   1469a:	0a83      	lsrs	r3, r0, #10
   1469c:	428b      	cmp	r3, r1
   1469e:	d301      	bcc.n	146a4 <__divsi3+0x88>
   146a0:	028b      	lsls	r3, r1, #10
   146a2:	1ac0      	subs	r0, r0, r3
   146a4:	4152      	adcs	r2, r2
   146a6:	0a43      	lsrs	r3, r0, #9
   146a8:	428b      	cmp	r3, r1
   146aa:	d301      	bcc.n	146b0 <__divsi3+0x94>
   146ac:	024b      	lsls	r3, r1, #9
   146ae:	1ac0      	subs	r0, r0, r3
   146b0:	4152      	adcs	r2, r2
   146b2:	0a03      	lsrs	r3, r0, #8
   146b4:	428b      	cmp	r3, r1
   146b6:	d301      	bcc.n	146bc <__divsi3+0xa0>
   146b8:	020b      	lsls	r3, r1, #8
   146ba:	1ac0      	subs	r0, r0, r3
   146bc:	4152      	adcs	r2, r2
   146be:	d2cd      	bcs.n	1465c <__divsi3+0x40>
   146c0:	09c3      	lsrs	r3, r0, #7
   146c2:	428b      	cmp	r3, r1
   146c4:	d301      	bcc.n	146ca <__divsi3+0xae>
   146c6:	01cb      	lsls	r3, r1, #7
   146c8:	1ac0      	subs	r0, r0, r3
   146ca:	4152      	adcs	r2, r2
   146cc:	0983      	lsrs	r3, r0, #6
   146ce:	428b      	cmp	r3, r1
   146d0:	d301      	bcc.n	146d6 <__divsi3+0xba>
   146d2:	018b      	lsls	r3, r1, #6
   146d4:	1ac0      	subs	r0, r0, r3
   146d6:	4152      	adcs	r2, r2
   146d8:	0943      	lsrs	r3, r0, #5
   146da:	428b      	cmp	r3, r1
   146dc:	d301      	bcc.n	146e2 <__divsi3+0xc6>
   146de:	014b      	lsls	r3, r1, #5
   146e0:	1ac0      	subs	r0, r0, r3
   146e2:	4152      	adcs	r2, r2
   146e4:	0903      	lsrs	r3, r0, #4
   146e6:	428b      	cmp	r3, r1
   146e8:	d301      	bcc.n	146ee <__divsi3+0xd2>
   146ea:	010b      	lsls	r3, r1, #4
   146ec:	1ac0      	subs	r0, r0, r3
   146ee:	4152      	adcs	r2, r2
   146f0:	08c3      	lsrs	r3, r0, #3
   146f2:	428b      	cmp	r3, r1
   146f4:	d301      	bcc.n	146fa <__divsi3+0xde>
   146f6:	00cb      	lsls	r3, r1, #3
   146f8:	1ac0      	subs	r0, r0, r3
   146fa:	4152      	adcs	r2, r2
   146fc:	0883      	lsrs	r3, r0, #2
   146fe:	428b      	cmp	r3, r1
   14700:	d301      	bcc.n	14706 <__divsi3+0xea>
   14702:	008b      	lsls	r3, r1, #2
   14704:	1ac0      	subs	r0, r0, r3
   14706:	4152      	adcs	r2, r2
   14708:	0843      	lsrs	r3, r0, #1
   1470a:	428b      	cmp	r3, r1
   1470c:	d301      	bcc.n	14712 <__divsi3+0xf6>
   1470e:	004b      	lsls	r3, r1, #1
   14710:	1ac0      	subs	r0, r0, r3
   14712:	4152      	adcs	r2, r2
   14714:	1a41      	subs	r1, r0, r1
   14716:	d200      	bcs.n	1471a <__divsi3+0xfe>
   14718:	4601      	mov	r1, r0
   1471a:	4152      	adcs	r2, r2
   1471c:	4610      	mov	r0, r2
   1471e:	4770      	bx	lr
   14720:	e05d      	b.n	147de <__divsi3+0x1c2>
   14722:	0fca      	lsrs	r2, r1, #31
   14724:	d000      	beq.n	14728 <__divsi3+0x10c>
   14726:	4249      	negs	r1, r1
   14728:	1003      	asrs	r3, r0, #32
   1472a:	d300      	bcc.n	1472e <__divsi3+0x112>
   1472c:	4240      	negs	r0, r0
   1472e:	4053      	eors	r3, r2
   14730:	2200      	movs	r2, #0
   14732:	469c      	mov	ip, r3
   14734:	0903      	lsrs	r3, r0, #4
   14736:	428b      	cmp	r3, r1
   14738:	d32d      	bcc.n	14796 <__divsi3+0x17a>
   1473a:	0a03      	lsrs	r3, r0, #8
   1473c:	428b      	cmp	r3, r1
   1473e:	d312      	bcc.n	14766 <__divsi3+0x14a>
   14740:	22fc      	movs	r2, #252	; 0xfc
   14742:	0189      	lsls	r1, r1, #6
   14744:	ba12      	rev	r2, r2
   14746:	0a03      	lsrs	r3, r0, #8
   14748:	428b      	cmp	r3, r1
   1474a:	d30c      	bcc.n	14766 <__divsi3+0x14a>
   1474c:	0189      	lsls	r1, r1, #6
   1474e:	1192      	asrs	r2, r2, #6
   14750:	428b      	cmp	r3, r1
   14752:	d308      	bcc.n	14766 <__divsi3+0x14a>
   14754:	0189      	lsls	r1, r1, #6
   14756:	1192      	asrs	r2, r2, #6
   14758:	428b      	cmp	r3, r1
   1475a:	d304      	bcc.n	14766 <__divsi3+0x14a>
   1475c:	0189      	lsls	r1, r1, #6
   1475e:	d03a      	beq.n	147d6 <__divsi3+0x1ba>
   14760:	1192      	asrs	r2, r2, #6
   14762:	e000      	b.n	14766 <__divsi3+0x14a>
   14764:	0989      	lsrs	r1, r1, #6
   14766:	09c3      	lsrs	r3, r0, #7
   14768:	428b      	cmp	r3, r1
   1476a:	d301      	bcc.n	14770 <__divsi3+0x154>
   1476c:	01cb      	lsls	r3, r1, #7
   1476e:	1ac0      	subs	r0, r0, r3
   14770:	4152      	adcs	r2, r2
   14772:	0983      	lsrs	r3, r0, #6
   14774:	428b      	cmp	r3, r1
   14776:	d301      	bcc.n	1477c <__divsi3+0x160>
   14778:	018b      	lsls	r3, r1, #6
   1477a:	1ac0      	subs	r0, r0, r3
   1477c:	4152      	adcs	r2, r2
   1477e:	0943      	lsrs	r3, r0, #5
   14780:	428b      	cmp	r3, r1
   14782:	d301      	bcc.n	14788 <__divsi3+0x16c>
   14784:	014b      	lsls	r3, r1, #5
   14786:	1ac0      	subs	r0, r0, r3
   14788:	4152      	adcs	r2, r2
   1478a:	0903      	lsrs	r3, r0, #4
   1478c:	428b      	cmp	r3, r1
   1478e:	d301      	bcc.n	14794 <__divsi3+0x178>
   14790:	010b      	lsls	r3, r1, #4
   14792:	1ac0      	subs	r0, r0, r3
   14794:	4152      	adcs	r2, r2
   14796:	08c3      	lsrs	r3, r0, #3
   14798:	428b      	cmp	r3, r1
   1479a:	d301      	bcc.n	147a0 <__divsi3+0x184>
   1479c:	00cb      	lsls	r3, r1, #3
   1479e:	1ac0      	subs	r0, r0, r3
   147a0:	4152      	adcs	r2, r2
   147a2:	0883      	lsrs	r3, r0, #2
   147a4:	428b      	cmp	r3, r1
   147a6:	d301      	bcc.n	147ac <__divsi3+0x190>
   147a8:	008b      	lsls	r3, r1, #2
   147aa:	1ac0      	subs	r0, r0, r3
   147ac:	4152      	adcs	r2, r2
   147ae:	d2d9      	bcs.n	14764 <__divsi3+0x148>
   147b0:	0843      	lsrs	r3, r0, #1
   147b2:	428b      	cmp	r3, r1
   147b4:	d301      	bcc.n	147ba <__divsi3+0x19e>
   147b6:	004b      	lsls	r3, r1, #1
   147b8:	1ac0      	subs	r0, r0, r3
   147ba:	4152      	adcs	r2, r2
   147bc:	1a41      	subs	r1, r0, r1
   147be:	d200      	bcs.n	147c2 <__divsi3+0x1a6>
   147c0:	4601      	mov	r1, r0
   147c2:	4663      	mov	r3, ip
   147c4:	4152      	adcs	r2, r2
   147c6:	105b      	asrs	r3, r3, #1
   147c8:	4610      	mov	r0, r2
   147ca:	d301      	bcc.n	147d0 <__divsi3+0x1b4>
   147cc:	4240      	negs	r0, r0
   147ce:	2b00      	cmp	r3, #0
   147d0:	d500      	bpl.n	147d4 <__divsi3+0x1b8>
   147d2:	4249      	negs	r1, r1
   147d4:	4770      	bx	lr
   147d6:	4663      	mov	r3, ip
   147d8:	105b      	asrs	r3, r3, #1
   147da:	d300      	bcc.n	147de <__divsi3+0x1c2>
   147dc:	4240      	negs	r0, r0
   147de:	b501      	push	{r0, lr}
   147e0:	2000      	movs	r0, #0
   147e2:	f000 f805 	bl	147f0 <__aeabi_idiv0>
   147e6:	bd02      	pop	{r1, pc}

000147e8 <__aeabi_idivmod>:
   147e8:	2900      	cmp	r1, #0
   147ea:	d0f8      	beq.n	147de <__divsi3+0x1c2>
   147ec:	e716      	b.n	1461c <__divsi3>
   147ee:	4770      	bx	lr

000147f0 <__aeabi_idiv0>:
   147f0:	4770      	bx	lr
   147f2:	46c0      	nop			; (mov r8, r8)

000147f4 <__aeabi_cdrcmple>:
   147f4:	4684      	mov	ip, r0
   147f6:	1c10      	adds	r0, r2, #0
   147f8:	4662      	mov	r2, ip
   147fa:	468c      	mov	ip, r1
   147fc:	1c19      	adds	r1, r3, #0
   147fe:	4663      	mov	r3, ip
   14800:	e000      	b.n	14804 <__aeabi_cdcmpeq>
   14802:	46c0      	nop			; (mov r8, r8)

00014804 <__aeabi_cdcmpeq>:
   14804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14806:	f001 ffa3 	bl	16750 <__ledf2>
   1480a:	2800      	cmp	r0, #0
   1480c:	d401      	bmi.n	14812 <__aeabi_cdcmpeq+0xe>
   1480e:	2100      	movs	r1, #0
   14810:	42c8      	cmn	r0, r1
   14812:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014814 <__aeabi_dcmpeq>:
   14814:	b510      	push	{r4, lr}
   14816:	f001 fefd 	bl	16614 <__eqdf2>
   1481a:	4240      	negs	r0, r0
   1481c:	3001      	adds	r0, #1
   1481e:	bd10      	pop	{r4, pc}

00014820 <__aeabi_dcmplt>:
   14820:	b510      	push	{r4, lr}
   14822:	f001 ff95 	bl	16750 <__ledf2>
   14826:	2800      	cmp	r0, #0
   14828:	db01      	blt.n	1482e <__aeabi_dcmplt+0xe>
   1482a:	2000      	movs	r0, #0
   1482c:	bd10      	pop	{r4, pc}
   1482e:	2001      	movs	r0, #1
   14830:	bd10      	pop	{r4, pc}
   14832:	46c0      	nop			; (mov r8, r8)

00014834 <__aeabi_dcmple>:
   14834:	b510      	push	{r4, lr}
   14836:	f001 ff8b 	bl	16750 <__ledf2>
   1483a:	2800      	cmp	r0, #0
   1483c:	dd01      	ble.n	14842 <__aeabi_dcmple+0xe>
   1483e:	2000      	movs	r0, #0
   14840:	bd10      	pop	{r4, pc}
   14842:	2001      	movs	r0, #1
   14844:	bd10      	pop	{r4, pc}
   14846:	46c0      	nop			; (mov r8, r8)

00014848 <__aeabi_dcmpgt>:
   14848:	b510      	push	{r4, lr}
   1484a:	f001 ff1d 	bl	16688 <__gedf2>
   1484e:	2800      	cmp	r0, #0
   14850:	dc01      	bgt.n	14856 <__aeabi_dcmpgt+0xe>
   14852:	2000      	movs	r0, #0
   14854:	bd10      	pop	{r4, pc}
   14856:	2001      	movs	r0, #1
   14858:	bd10      	pop	{r4, pc}
   1485a:	46c0      	nop			; (mov r8, r8)

0001485c <__aeabi_dcmpge>:
   1485c:	b510      	push	{r4, lr}
   1485e:	f001 ff13 	bl	16688 <__gedf2>
   14862:	2800      	cmp	r0, #0
   14864:	da01      	bge.n	1486a <__aeabi_dcmpge+0xe>
   14866:	2000      	movs	r0, #0
   14868:	bd10      	pop	{r4, pc}
   1486a:	2001      	movs	r0, #1
   1486c:	bd10      	pop	{r4, pc}
   1486e:	46c0      	nop			; (mov r8, r8)

00014870 <__aeabi_cfrcmple>:
   14870:	4684      	mov	ip, r0
   14872:	1c08      	adds	r0, r1, #0
   14874:	4661      	mov	r1, ip
   14876:	e7ff      	b.n	14878 <__aeabi_cfcmpeq>

00014878 <__aeabi_cfcmpeq>:
   14878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1487a:	f000 fcd3 	bl	15224 <__lesf2>
   1487e:	2800      	cmp	r0, #0
   14880:	d401      	bmi.n	14886 <__aeabi_cfcmpeq+0xe>
   14882:	2100      	movs	r1, #0
   14884:	42c8      	cmn	r0, r1
   14886:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014888 <__aeabi_fcmpeq>:
   14888:	b510      	push	{r4, lr}
   1488a:	f000 fc65 	bl	15158 <__eqsf2>
   1488e:	4240      	negs	r0, r0
   14890:	3001      	adds	r0, #1
   14892:	bd10      	pop	{r4, pc}

00014894 <__aeabi_fcmplt>:
   14894:	b510      	push	{r4, lr}
   14896:	f000 fcc5 	bl	15224 <__lesf2>
   1489a:	2800      	cmp	r0, #0
   1489c:	db01      	blt.n	148a2 <__aeabi_fcmplt+0xe>
   1489e:	2000      	movs	r0, #0
   148a0:	bd10      	pop	{r4, pc}
   148a2:	2001      	movs	r0, #1
   148a4:	bd10      	pop	{r4, pc}
   148a6:	46c0      	nop			; (mov r8, r8)

000148a8 <__aeabi_fcmple>:
   148a8:	b510      	push	{r4, lr}
   148aa:	f000 fcbb 	bl	15224 <__lesf2>
   148ae:	2800      	cmp	r0, #0
   148b0:	dd01      	ble.n	148b6 <__aeabi_fcmple+0xe>
   148b2:	2000      	movs	r0, #0
   148b4:	bd10      	pop	{r4, pc}
   148b6:	2001      	movs	r0, #1
   148b8:	bd10      	pop	{r4, pc}
   148ba:	46c0      	nop			; (mov r8, r8)

000148bc <__aeabi_fcmpgt>:
   148bc:	b510      	push	{r4, lr}
   148be:	f000 fc71 	bl	151a4 <__gesf2>
   148c2:	2800      	cmp	r0, #0
   148c4:	dc01      	bgt.n	148ca <__aeabi_fcmpgt+0xe>
   148c6:	2000      	movs	r0, #0
   148c8:	bd10      	pop	{r4, pc}
   148ca:	2001      	movs	r0, #1
   148cc:	bd10      	pop	{r4, pc}
   148ce:	46c0      	nop			; (mov r8, r8)

000148d0 <__aeabi_fcmpge>:
   148d0:	b510      	push	{r4, lr}
   148d2:	f000 fc67 	bl	151a4 <__gesf2>
   148d6:	2800      	cmp	r0, #0
   148d8:	da01      	bge.n	148de <__aeabi_fcmpge+0xe>
   148da:	2000      	movs	r0, #0
   148dc:	bd10      	pop	{r4, pc}
   148de:	2001      	movs	r0, #1
   148e0:	bd10      	pop	{r4, pc}
   148e2:	46c0      	nop			; (mov r8, r8)

000148e4 <__aeabi_uldivmod>:
   148e4:	2b00      	cmp	r3, #0
   148e6:	d111      	bne.n	1490c <__aeabi_uldivmod+0x28>
   148e8:	2a00      	cmp	r2, #0
   148ea:	d10f      	bne.n	1490c <__aeabi_uldivmod+0x28>
   148ec:	2900      	cmp	r1, #0
   148ee:	d100      	bne.n	148f2 <__aeabi_uldivmod+0xe>
   148f0:	2800      	cmp	r0, #0
   148f2:	d002      	beq.n	148fa <__aeabi_uldivmod+0x16>
   148f4:	2100      	movs	r1, #0
   148f6:	43c9      	mvns	r1, r1
   148f8:	1c08      	adds	r0, r1, #0
   148fa:	b407      	push	{r0, r1, r2}
   148fc:	4802      	ldr	r0, [pc, #8]	; (14908 <__aeabi_uldivmod+0x24>)
   148fe:	a102      	add	r1, pc, #8	; (adr r1, 14908 <__aeabi_uldivmod+0x24>)
   14900:	1840      	adds	r0, r0, r1
   14902:	9002      	str	r0, [sp, #8]
   14904:	bd03      	pop	{r0, r1, pc}
   14906:	46c0      	nop			; (mov r8, r8)
   14908:	fffffee9 	.word	0xfffffee9
   1490c:	b403      	push	{r0, r1}
   1490e:	4668      	mov	r0, sp
   14910:	b501      	push	{r0, lr}
   14912:	9802      	ldr	r0, [sp, #8]
   14914:	f000 f886 	bl	14a24 <__udivmoddi4>
   14918:	9b01      	ldr	r3, [sp, #4]
   1491a:	469e      	mov	lr, r3
   1491c:	b002      	add	sp, #8
   1491e:	bc0c      	pop	{r2, r3}
   14920:	4770      	bx	lr
   14922:	46c0      	nop			; (mov r8, r8)

00014924 <__aeabi_lmul>:
   14924:	b5f0      	push	{r4, r5, r6, r7, lr}
   14926:	46ce      	mov	lr, r9
   14928:	4647      	mov	r7, r8
   1492a:	0415      	lsls	r5, r2, #16
   1492c:	0c2d      	lsrs	r5, r5, #16
   1492e:	002e      	movs	r6, r5
   14930:	b580      	push	{r7, lr}
   14932:	0407      	lsls	r7, r0, #16
   14934:	0c14      	lsrs	r4, r2, #16
   14936:	0c3f      	lsrs	r7, r7, #16
   14938:	4699      	mov	r9, r3
   1493a:	0c03      	lsrs	r3, r0, #16
   1493c:	437e      	muls	r6, r7
   1493e:	435d      	muls	r5, r3
   14940:	4367      	muls	r7, r4
   14942:	4363      	muls	r3, r4
   14944:	197f      	adds	r7, r7, r5
   14946:	0c34      	lsrs	r4, r6, #16
   14948:	19e4      	adds	r4, r4, r7
   1494a:	469c      	mov	ip, r3
   1494c:	42a5      	cmp	r5, r4
   1494e:	d903      	bls.n	14958 <__aeabi_lmul+0x34>
   14950:	2380      	movs	r3, #128	; 0x80
   14952:	025b      	lsls	r3, r3, #9
   14954:	4698      	mov	r8, r3
   14956:	44c4      	add	ip, r8
   14958:	464b      	mov	r3, r9
   1495a:	4351      	muls	r1, r2
   1495c:	4343      	muls	r3, r0
   1495e:	0436      	lsls	r6, r6, #16
   14960:	0c36      	lsrs	r6, r6, #16
   14962:	0c25      	lsrs	r5, r4, #16
   14964:	0424      	lsls	r4, r4, #16
   14966:	4465      	add	r5, ip
   14968:	19a4      	adds	r4, r4, r6
   1496a:	1859      	adds	r1, r3, r1
   1496c:	1949      	adds	r1, r1, r5
   1496e:	0020      	movs	r0, r4
   14970:	bc0c      	pop	{r2, r3}
   14972:	4690      	mov	r8, r2
   14974:	4699      	mov	r9, r3
   14976:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014978 <__aeabi_f2uiz>:
   14978:	219e      	movs	r1, #158	; 0x9e
   1497a:	b510      	push	{r4, lr}
   1497c:	05c9      	lsls	r1, r1, #23
   1497e:	1c04      	adds	r4, r0, #0
   14980:	f7ff ffa6 	bl	148d0 <__aeabi_fcmpge>
   14984:	2800      	cmp	r0, #0
   14986:	d103      	bne.n	14990 <__aeabi_f2uiz+0x18>
   14988:	1c20      	adds	r0, r4, #0
   1498a:	f000 ff49 	bl	15820 <__aeabi_f2iz>
   1498e:	bd10      	pop	{r4, pc}
   14990:	219e      	movs	r1, #158	; 0x9e
   14992:	1c20      	adds	r0, r4, #0
   14994:	05c9      	lsls	r1, r1, #23
   14996:	f000 fda7 	bl	154e8 <__aeabi_fsub>
   1499a:	f000 ff41 	bl	15820 <__aeabi_f2iz>
   1499e:	2380      	movs	r3, #128	; 0x80
   149a0:	061b      	lsls	r3, r3, #24
   149a2:	469c      	mov	ip, r3
   149a4:	4460      	add	r0, ip
   149a6:	e7f2      	b.n	1498e <__aeabi_f2uiz+0x16>

000149a8 <__aeabi_d2uiz>:
   149a8:	b570      	push	{r4, r5, r6, lr}
   149aa:	2200      	movs	r2, #0
   149ac:	4b0c      	ldr	r3, [pc, #48]	; (149e0 <__aeabi_d2uiz+0x38>)
   149ae:	0004      	movs	r4, r0
   149b0:	000d      	movs	r5, r1
   149b2:	f7ff ff53 	bl	1485c <__aeabi_dcmpge>
   149b6:	2800      	cmp	r0, #0
   149b8:	d104      	bne.n	149c4 <__aeabi_d2uiz+0x1c>
   149ba:	0020      	movs	r0, r4
   149bc:	0029      	movs	r1, r5
   149be:	f002 fcbf 	bl	17340 <__aeabi_d2iz>
   149c2:	bd70      	pop	{r4, r5, r6, pc}
   149c4:	4b06      	ldr	r3, [pc, #24]	; (149e0 <__aeabi_d2uiz+0x38>)
   149c6:	2200      	movs	r2, #0
   149c8:	0020      	movs	r0, r4
   149ca:	0029      	movs	r1, r5
   149cc:	f002 f9a2 	bl	16d14 <__aeabi_dsub>
   149d0:	f002 fcb6 	bl	17340 <__aeabi_d2iz>
   149d4:	2380      	movs	r3, #128	; 0x80
   149d6:	061b      	lsls	r3, r3, #24
   149d8:	469c      	mov	ip, r3
   149da:	4460      	add	r0, ip
   149dc:	e7f1      	b.n	149c2 <__aeabi_d2uiz+0x1a>
   149de:	46c0      	nop			; (mov r8, r8)
   149e0:	41e00000 	.word	0x41e00000

000149e4 <__aeabi_f2ulz>:
   149e4:	b570      	push	{r4, r5, r6, lr}
   149e6:	f002 fd59 	bl	1749c <__aeabi_f2d>
   149ea:	2200      	movs	r2, #0
   149ec:	4b0b      	ldr	r3, [pc, #44]	; (14a1c <__aeabi_f2ulz+0x38>)
   149ee:	000d      	movs	r5, r1
   149f0:	0004      	movs	r4, r0
   149f2:	f001 ff0f 	bl	16814 <__aeabi_dmul>
   149f6:	f7ff ffd7 	bl	149a8 <__aeabi_d2uiz>
   149fa:	0006      	movs	r6, r0
   149fc:	f002 fd16 	bl	1742c <__aeabi_ui2d>
   14a00:	2200      	movs	r2, #0
   14a02:	4b07      	ldr	r3, [pc, #28]	; (14a20 <__aeabi_f2ulz+0x3c>)
   14a04:	f001 ff06 	bl	16814 <__aeabi_dmul>
   14a08:	0002      	movs	r2, r0
   14a0a:	000b      	movs	r3, r1
   14a0c:	0020      	movs	r0, r4
   14a0e:	0029      	movs	r1, r5
   14a10:	f002 f980 	bl	16d14 <__aeabi_dsub>
   14a14:	f7ff ffc8 	bl	149a8 <__aeabi_d2uiz>
   14a18:	0031      	movs	r1, r6
   14a1a:	bd70      	pop	{r4, r5, r6, pc}
   14a1c:	3df00000 	.word	0x3df00000
   14a20:	41f00000 	.word	0x41f00000

00014a24 <__udivmoddi4>:
   14a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a26:	4657      	mov	r7, sl
   14a28:	464e      	mov	r6, r9
   14a2a:	4645      	mov	r5, r8
   14a2c:	46de      	mov	lr, fp
   14a2e:	b5e0      	push	{r5, r6, r7, lr}
   14a30:	0004      	movs	r4, r0
   14a32:	b083      	sub	sp, #12
   14a34:	000d      	movs	r5, r1
   14a36:	4692      	mov	sl, r2
   14a38:	4699      	mov	r9, r3
   14a3a:	428b      	cmp	r3, r1
   14a3c:	d82f      	bhi.n	14a9e <__udivmoddi4+0x7a>
   14a3e:	d02c      	beq.n	14a9a <__udivmoddi4+0x76>
   14a40:	4649      	mov	r1, r9
   14a42:	4650      	mov	r0, sl
   14a44:	f002 fd9a 	bl	1757c <__clzdi2>
   14a48:	0029      	movs	r1, r5
   14a4a:	0006      	movs	r6, r0
   14a4c:	0020      	movs	r0, r4
   14a4e:	f002 fd95 	bl	1757c <__clzdi2>
   14a52:	1a33      	subs	r3, r6, r0
   14a54:	4698      	mov	r8, r3
   14a56:	3b20      	subs	r3, #32
   14a58:	469b      	mov	fp, r3
   14a5a:	d500      	bpl.n	14a5e <__udivmoddi4+0x3a>
   14a5c:	e074      	b.n	14b48 <__udivmoddi4+0x124>
   14a5e:	4653      	mov	r3, sl
   14a60:	465a      	mov	r2, fp
   14a62:	4093      	lsls	r3, r2
   14a64:	001f      	movs	r7, r3
   14a66:	4653      	mov	r3, sl
   14a68:	4642      	mov	r2, r8
   14a6a:	4093      	lsls	r3, r2
   14a6c:	001e      	movs	r6, r3
   14a6e:	42af      	cmp	r7, r5
   14a70:	d829      	bhi.n	14ac6 <__udivmoddi4+0xa2>
   14a72:	d026      	beq.n	14ac2 <__udivmoddi4+0x9e>
   14a74:	465b      	mov	r3, fp
   14a76:	1ba4      	subs	r4, r4, r6
   14a78:	41bd      	sbcs	r5, r7
   14a7a:	2b00      	cmp	r3, #0
   14a7c:	da00      	bge.n	14a80 <__udivmoddi4+0x5c>
   14a7e:	e079      	b.n	14b74 <__udivmoddi4+0x150>
   14a80:	2200      	movs	r2, #0
   14a82:	2300      	movs	r3, #0
   14a84:	9200      	str	r2, [sp, #0]
   14a86:	9301      	str	r3, [sp, #4]
   14a88:	2301      	movs	r3, #1
   14a8a:	465a      	mov	r2, fp
   14a8c:	4093      	lsls	r3, r2
   14a8e:	9301      	str	r3, [sp, #4]
   14a90:	2301      	movs	r3, #1
   14a92:	4642      	mov	r2, r8
   14a94:	4093      	lsls	r3, r2
   14a96:	9300      	str	r3, [sp, #0]
   14a98:	e019      	b.n	14ace <__udivmoddi4+0xaa>
   14a9a:	4282      	cmp	r2, r0
   14a9c:	d9d0      	bls.n	14a40 <__udivmoddi4+0x1c>
   14a9e:	2200      	movs	r2, #0
   14aa0:	2300      	movs	r3, #0
   14aa2:	9200      	str	r2, [sp, #0]
   14aa4:	9301      	str	r3, [sp, #4]
   14aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d001      	beq.n	14ab0 <__udivmoddi4+0x8c>
   14aac:	601c      	str	r4, [r3, #0]
   14aae:	605d      	str	r5, [r3, #4]
   14ab0:	9800      	ldr	r0, [sp, #0]
   14ab2:	9901      	ldr	r1, [sp, #4]
   14ab4:	b003      	add	sp, #12
   14ab6:	bc3c      	pop	{r2, r3, r4, r5}
   14ab8:	4690      	mov	r8, r2
   14aba:	4699      	mov	r9, r3
   14abc:	46a2      	mov	sl, r4
   14abe:	46ab      	mov	fp, r5
   14ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ac2:	42a3      	cmp	r3, r4
   14ac4:	d9d6      	bls.n	14a74 <__udivmoddi4+0x50>
   14ac6:	2200      	movs	r2, #0
   14ac8:	2300      	movs	r3, #0
   14aca:	9200      	str	r2, [sp, #0]
   14acc:	9301      	str	r3, [sp, #4]
   14ace:	4643      	mov	r3, r8
   14ad0:	2b00      	cmp	r3, #0
   14ad2:	d0e8      	beq.n	14aa6 <__udivmoddi4+0x82>
   14ad4:	07fb      	lsls	r3, r7, #31
   14ad6:	0872      	lsrs	r2, r6, #1
   14ad8:	431a      	orrs	r2, r3
   14ada:	4646      	mov	r6, r8
   14adc:	087b      	lsrs	r3, r7, #1
   14ade:	e00e      	b.n	14afe <__udivmoddi4+0xda>
   14ae0:	42ab      	cmp	r3, r5
   14ae2:	d101      	bne.n	14ae8 <__udivmoddi4+0xc4>
   14ae4:	42a2      	cmp	r2, r4
   14ae6:	d80c      	bhi.n	14b02 <__udivmoddi4+0xde>
   14ae8:	1aa4      	subs	r4, r4, r2
   14aea:	419d      	sbcs	r5, r3
   14aec:	2001      	movs	r0, #1
   14aee:	1924      	adds	r4, r4, r4
   14af0:	416d      	adcs	r5, r5
   14af2:	2100      	movs	r1, #0
   14af4:	3e01      	subs	r6, #1
   14af6:	1824      	adds	r4, r4, r0
   14af8:	414d      	adcs	r5, r1
   14afa:	2e00      	cmp	r6, #0
   14afc:	d006      	beq.n	14b0c <__udivmoddi4+0xe8>
   14afe:	42ab      	cmp	r3, r5
   14b00:	d9ee      	bls.n	14ae0 <__udivmoddi4+0xbc>
   14b02:	3e01      	subs	r6, #1
   14b04:	1924      	adds	r4, r4, r4
   14b06:	416d      	adcs	r5, r5
   14b08:	2e00      	cmp	r6, #0
   14b0a:	d1f8      	bne.n	14afe <__udivmoddi4+0xda>
   14b0c:	465b      	mov	r3, fp
   14b0e:	9800      	ldr	r0, [sp, #0]
   14b10:	9901      	ldr	r1, [sp, #4]
   14b12:	1900      	adds	r0, r0, r4
   14b14:	4169      	adcs	r1, r5
   14b16:	2b00      	cmp	r3, #0
   14b18:	db22      	blt.n	14b60 <__udivmoddi4+0x13c>
   14b1a:	002b      	movs	r3, r5
   14b1c:	465a      	mov	r2, fp
   14b1e:	40d3      	lsrs	r3, r2
   14b20:	002a      	movs	r2, r5
   14b22:	4644      	mov	r4, r8
   14b24:	40e2      	lsrs	r2, r4
   14b26:	001c      	movs	r4, r3
   14b28:	465b      	mov	r3, fp
   14b2a:	0015      	movs	r5, r2
   14b2c:	2b00      	cmp	r3, #0
   14b2e:	db2c      	blt.n	14b8a <__udivmoddi4+0x166>
   14b30:	0026      	movs	r6, r4
   14b32:	409e      	lsls	r6, r3
   14b34:	0033      	movs	r3, r6
   14b36:	0026      	movs	r6, r4
   14b38:	4647      	mov	r7, r8
   14b3a:	40be      	lsls	r6, r7
   14b3c:	0032      	movs	r2, r6
   14b3e:	1a80      	subs	r0, r0, r2
   14b40:	4199      	sbcs	r1, r3
   14b42:	9000      	str	r0, [sp, #0]
   14b44:	9101      	str	r1, [sp, #4]
   14b46:	e7ae      	b.n	14aa6 <__udivmoddi4+0x82>
   14b48:	4642      	mov	r2, r8
   14b4a:	2320      	movs	r3, #32
   14b4c:	1a9b      	subs	r3, r3, r2
   14b4e:	4652      	mov	r2, sl
   14b50:	40da      	lsrs	r2, r3
   14b52:	4641      	mov	r1, r8
   14b54:	0013      	movs	r3, r2
   14b56:	464a      	mov	r2, r9
   14b58:	408a      	lsls	r2, r1
   14b5a:	0017      	movs	r7, r2
   14b5c:	431f      	orrs	r7, r3
   14b5e:	e782      	b.n	14a66 <__udivmoddi4+0x42>
   14b60:	4642      	mov	r2, r8
   14b62:	2320      	movs	r3, #32
   14b64:	1a9b      	subs	r3, r3, r2
   14b66:	002a      	movs	r2, r5
   14b68:	4646      	mov	r6, r8
   14b6a:	409a      	lsls	r2, r3
   14b6c:	0023      	movs	r3, r4
   14b6e:	40f3      	lsrs	r3, r6
   14b70:	4313      	orrs	r3, r2
   14b72:	e7d5      	b.n	14b20 <__udivmoddi4+0xfc>
   14b74:	4642      	mov	r2, r8
   14b76:	2320      	movs	r3, #32
   14b78:	2100      	movs	r1, #0
   14b7a:	1a9b      	subs	r3, r3, r2
   14b7c:	2200      	movs	r2, #0
   14b7e:	9100      	str	r1, [sp, #0]
   14b80:	9201      	str	r2, [sp, #4]
   14b82:	2201      	movs	r2, #1
   14b84:	40da      	lsrs	r2, r3
   14b86:	9201      	str	r2, [sp, #4]
   14b88:	e782      	b.n	14a90 <__udivmoddi4+0x6c>
   14b8a:	4642      	mov	r2, r8
   14b8c:	2320      	movs	r3, #32
   14b8e:	0026      	movs	r6, r4
   14b90:	1a9b      	subs	r3, r3, r2
   14b92:	40de      	lsrs	r6, r3
   14b94:	002f      	movs	r7, r5
   14b96:	46b4      	mov	ip, r6
   14b98:	4097      	lsls	r7, r2
   14b9a:	4666      	mov	r6, ip
   14b9c:	003b      	movs	r3, r7
   14b9e:	4333      	orrs	r3, r6
   14ba0:	e7c9      	b.n	14b36 <__udivmoddi4+0x112>
   14ba2:	46c0      	nop			; (mov r8, r8)

00014ba4 <__aeabi_fadd>:
   14ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ba6:	46c6      	mov	lr, r8
   14ba8:	024e      	lsls	r6, r1, #9
   14baa:	0247      	lsls	r7, r0, #9
   14bac:	0a76      	lsrs	r6, r6, #9
   14bae:	0a7b      	lsrs	r3, r7, #9
   14bb0:	0044      	lsls	r4, r0, #1
   14bb2:	0fc5      	lsrs	r5, r0, #31
   14bb4:	00f7      	lsls	r7, r6, #3
   14bb6:	0048      	lsls	r0, r1, #1
   14bb8:	4698      	mov	r8, r3
   14bba:	b500      	push	{lr}
   14bbc:	0e24      	lsrs	r4, r4, #24
   14bbe:	002a      	movs	r2, r5
   14bc0:	00db      	lsls	r3, r3, #3
   14bc2:	0e00      	lsrs	r0, r0, #24
   14bc4:	0fc9      	lsrs	r1, r1, #31
   14bc6:	46bc      	mov	ip, r7
   14bc8:	428d      	cmp	r5, r1
   14bca:	d067      	beq.n	14c9c <__aeabi_fadd+0xf8>
   14bcc:	1a22      	subs	r2, r4, r0
   14bce:	2a00      	cmp	r2, #0
   14bd0:	dc00      	bgt.n	14bd4 <__aeabi_fadd+0x30>
   14bd2:	e0a5      	b.n	14d20 <__aeabi_fadd+0x17c>
   14bd4:	2800      	cmp	r0, #0
   14bd6:	d13a      	bne.n	14c4e <__aeabi_fadd+0xaa>
   14bd8:	2f00      	cmp	r7, #0
   14bda:	d100      	bne.n	14bde <__aeabi_fadd+0x3a>
   14bdc:	e093      	b.n	14d06 <__aeabi_fadd+0x162>
   14bde:	1e51      	subs	r1, r2, #1
   14be0:	2900      	cmp	r1, #0
   14be2:	d000      	beq.n	14be6 <__aeabi_fadd+0x42>
   14be4:	e0bc      	b.n	14d60 <__aeabi_fadd+0x1bc>
   14be6:	2401      	movs	r4, #1
   14be8:	1bdb      	subs	r3, r3, r7
   14bea:	015a      	lsls	r2, r3, #5
   14bec:	d546      	bpl.n	14c7c <__aeabi_fadd+0xd8>
   14bee:	019b      	lsls	r3, r3, #6
   14bf0:	099e      	lsrs	r6, r3, #6
   14bf2:	0030      	movs	r0, r6
   14bf4:	f002 fca4 	bl	17540 <__clzsi2>
   14bf8:	3805      	subs	r0, #5
   14bfa:	4086      	lsls	r6, r0
   14bfc:	4284      	cmp	r4, r0
   14bfe:	dd00      	ble.n	14c02 <__aeabi_fadd+0x5e>
   14c00:	e09d      	b.n	14d3e <__aeabi_fadd+0x19a>
   14c02:	1b04      	subs	r4, r0, r4
   14c04:	0032      	movs	r2, r6
   14c06:	2020      	movs	r0, #32
   14c08:	3401      	adds	r4, #1
   14c0a:	40e2      	lsrs	r2, r4
   14c0c:	1b04      	subs	r4, r0, r4
   14c0e:	40a6      	lsls	r6, r4
   14c10:	0033      	movs	r3, r6
   14c12:	1e5e      	subs	r6, r3, #1
   14c14:	41b3      	sbcs	r3, r6
   14c16:	2400      	movs	r4, #0
   14c18:	4313      	orrs	r3, r2
   14c1a:	075a      	lsls	r2, r3, #29
   14c1c:	d004      	beq.n	14c28 <__aeabi_fadd+0x84>
   14c1e:	220f      	movs	r2, #15
   14c20:	401a      	ands	r2, r3
   14c22:	2a04      	cmp	r2, #4
   14c24:	d000      	beq.n	14c28 <__aeabi_fadd+0x84>
   14c26:	3304      	adds	r3, #4
   14c28:	015a      	lsls	r2, r3, #5
   14c2a:	d529      	bpl.n	14c80 <__aeabi_fadd+0xdc>
   14c2c:	3401      	adds	r4, #1
   14c2e:	2cff      	cmp	r4, #255	; 0xff
   14c30:	d100      	bne.n	14c34 <__aeabi_fadd+0x90>
   14c32:	e081      	b.n	14d38 <__aeabi_fadd+0x194>
   14c34:	002a      	movs	r2, r5
   14c36:	019b      	lsls	r3, r3, #6
   14c38:	0a5b      	lsrs	r3, r3, #9
   14c3a:	b2e4      	uxtb	r4, r4
   14c3c:	025b      	lsls	r3, r3, #9
   14c3e:	05e4      	lsls	r4, r4, #23
   14c40:	0a58      	lsrs	r0, r3, #9
   14c42:	07d2      	lsls	r2, r2, #31
   14c44:	4320      	orrs	r0, r4
   14c46:	4310      	orrs	r0, r2
   14c48:	bc04      	pop	{r2}
   14c4a:	4690      	mov	r8, r2
   14c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c4e:	2cff      	cmp	r4, #255	; 0xff
   14c50:	d0e3      	beq.n	14c1a <__aeabi_fadd+0x76>
   14c52:	2180      	movs	r1, #128	; 0x80
   14c54:	0038      	movs	r0, r7
   14c56:	04c9      	lsls	r1, r1, #19
   14c58:	4308      	orrs	r0, r1
   14c5a:	4684      	mov	ip, r0
   14c5c:	2a1b      	cmp	r2, #27
   14c5e:	dd00      	ble.n	14c62 <__aeabi_fadd+0xbe>
   14c60:	e082      	b.n	14d68 <__aeabi_fadd+0x1c4>
   14c62:	2020      	movs	r0, #32
   14c64:	4661      	mov	r1, ip
   14c66:	40d1      	lsrs	r1, r2
   14c68:	1a82      	subs	r2, r0, r2
   14c6a:	4660      	mov	r0, ip
   14c6c:	4090      	lsls	r0, r2
   14c6e:	0002      	movs	r2, r0
   14c70:	1e50      	subs	r0, r2, #1
   14c72:	4182      	sbcs	r2, r0
   14c74:	430a      	orrs	r2, r1
   14c76:	1a9b      	subs	r3, r3, r2
   14c78:	015a      	lsls	r2, r3, #5
   14c7a:	d4b8      	bmi.n	14bee <__aeabi_fadd+0x4a>
   14c7c:	075a      	lsls	r2, r3, #29
   14c7e:	d1ce      	bne.n	14c1e <__aeabi_fadd+0x7a>
   14c80:	08de      	lsrs	r6, r3, #3
   14c82:	002a      	movs	r2, r5
   14c84:	2cff      	cmp	r4, #255	; 0xff
   14c86:	d13a      	bne.n	14cfe <__aeabi_fadd+0x15a>
   14c88:	2e00      	cmp	r6, #0
   14c8a:	d100      	bne.n	14c8e <__aeabi_fadd+0xea>
   14c8c:	e0ae      	b.n	14dec <__aeabi_fadd+0x248>
   14c8e:	2380      	movs	r3, #128	; 0x80
   14c90:	03db      	lsls	r3, r3, #15
   14c92:	4333      	orrs	r3, r6
   14c94:	025b      	lsls	r3, r3, #9
   14c96:	0a5b      	lsrs	r3, r3, #9
   14c98:	24ff      	movs	r4, #255	; 0xff
   14c9a:	e7cf      	b.n	14c3c <__aeabi_fadd+0x98>
   14c9c:	1a21      	subs	r1, r4, r0
   14c9e:	2900      	cmp	r1, #0
   14ca0:	dd52      	ble.n	14d48 <__aeabi_fadd+0x1a4>
   14ca2:	2800      	cmp	r0, #0
   14ca4:	d031      	beq.n	14d0a <__aeabi_fadd+0x166>
   14ca6:	2cff      	cmp	r4, #255	; 0xff
   14ca8:	d0b7      	beq.n	14c1a <__aeabi_fadd+0x76>
   14caa:	2080      	movs	r0, #128	; 0x80
   14cac:	003e      	movs	r6, r7
   14cae:	04c0      	lsls	r0, r0, #19
   14cb0:	4306      	orrs	r6, r0
   14cb2:	46b4      	mov	ip, r6
   14cb4:	291b      	cmp	r1, #27
   14cb6:	dd00      	ble.n	14cba <__aeabi_fadd+0x116>
   14cb8:	e0aa      	b.n	14e10 <__aeabi_fadd+0x26c>
   14cba:	2620      	movs	r6, #32
   14cbc:	4660      	mov	r0, ip
   14cbe:	40c8      	lsrs	r0, r1
   14cc0:	1a71      	subs	r1, r6, r1
   14cc2:	4666      	mov	r6, ip
   14cc4:	408e      	lsls	r6, r1
   14cc6:	0031      	movs	r1, r6
   14cc8:	1e4e      	subs	r6, r1, #1
   14cca:	41b1      	sbcs	r1, r6
   14ccc:	4301      	orrs	r1, r0
   14cce:	185b      	adds	r3, r3, r1
   14cd0:	0159      	lsls	r1, r3, #5
   14cd2:	d5d3      	bpl.n	14c7c <__aeabi_fadd+0xd8>
   14cd4:	3401      	adds	r4, #1
   14cd6:	2cff      	cmp	r4, #255	; 0xff
   14cd8:	d100      	bne.n	14cdc <__aeabi_fadd+0x138>
   14cda:	e087      	b.n	14dec <__aeabi_fadd+0x248>
   14cdc:	2201      	movs	r2, #1
   14cde:	4978      	ldr	r1, [pc, #480]	; (14ec0 <__aeabi_fadd+0x31c>)
   14ce0:	401a      	ands	r2, r3
   14ce2:	085b      	lsrs	r3, r3, #1
   14ce4:	400b      	ands	r3, r1
   14ce6:	4313      	orrs	r3, r2
   14ce8:	e797      	b.n	14c1a <__aeabi_fadd+0x76>
   14cea:	2c00      	cmp	r4, #0
   14cec:	d000      	beq.n	14cf0 <__aeabi_fadd+0x14c>
   14cee:	e0a7      	b.n	14e40 <__aeabi_fadd+0x29c>
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d000      	beq.n	14cf6 <__aeabi_fadd+0x152>
   14cf4:	e0b6      	b.n	14e64 <__aeabi_fadd+0x2c0>
   14cf6:	1e3b      	subs	r3, r7, #0
   14cf8:	d162      	bne.n	14dc0 <__aeabi_fadd+0x21c>
   14cfa:	2600      	movs	r6, #0
   14cfc:	2200      	movs	r2, #0
   14cfe:	0273      	lsls	r3, r6, #9
   14d00:	0a5b      	lsrs	r3, r3, #9
   14d02:	b2e4      	uxtb	r4, r4
   14d04:	e79a      	b.n	14c3c <__aeabi_fadd+0x98>
   14d06:	0014      	movs	r4, r2
   14d08:	e787      	b.n	14c1a <__aeabi_fadd+0x76>
   14d0a:	2f00      	cmp	r7, #0
   14d0c:	d04d      	beq.n	14daa <__aeabi_fadd+0x206>
   14d0e:	1e48      	subs	r0, r1, #1
   14d10:	2800      	cmp	r0, #0
   14d12:	d157      	bne.n	14dc4 <__aeabi_fadd+0x220>
   14d14:	4463      	add	r3, ip
   14d16:	2401      	movs	r4, #1
   14d18:	015a      	lsls	r2, r3, #5
   14d1a:	d5af      	bpl.n	14c7c <__aeabi_fadd+0xd8>
   14d1c:	2402      	movs	r4, #2
   14d1e:	e7dd      	b.n	14cdc <__aeabi_fadd+0x138>
   14d20:	2a00      	cmp	r2, #0
   14d22:	d124      	bne.n	14d6e <__aeabi_fadd+0x1ca>
   14d24:	1c62      	adds	r2, r4, #1
   14d26:	b2d2      	uxtb	r2, r2
   14d28:	2a01      	cmp	r2, #1
   14d2a:	ddde      	ble.n	14cea <__aeabi_fadd+0x146>
   14d2c:	1bde      	subs	r6, r3, r7
   14d2e:	0172      	lsls	r2, r6, #5
   14d30:	d535      	bpl.n	14d9e <__aeabi_fadd+0x1fa>
   14d32:	1afe      	subs	r6, r7, r3
   14d34:	000d      	movs	r5, r1
   14d36:	e75c      	b.n	14bf2 <__aeabi_fadd+0x4e>
   14d38:	002a      	movs	r2, r5
   14d3a:	2300      	movs	r3, #0
   14d3c:	e77e      	b.n	14c3c <__aeabi_fadd+0x98>
   14d3e:	0033      	movs	r3, r6
   14d40:	4a60      	ldr	r2, [pc, #384]	; (14ec4 <__aeabi_fadd+0x320>)
   14d42:	1a24      	subs	r4, r4, r0
   14d44:	4013      	ands	r3, r2
   14d46:	e768      	b.n	14c1a <__aeabi_fadd+0x76>
   14d48:	2900      	cmp	r1, #0
   14d4a:	d163      	bne.n	14e14 <__aeabi_fadd+0x270>
   14d4c:	1c61      	adds	r1, r4, #1
   14d4e:	b2c8      	uxtb	r0, r1
   14d50:	2801      	cmp	r0, #1
   14d52:	dd4e      	ble.n	14df2 <__aeabi_fadd+0x24e>
   14d54:	29ff      	cmp	r1, #255	; 0xff
   14d56:	d049      	beq.n	14dec <__aeabi_fadd+0x248>
   14d58:	4463      	add	r3, ip
   14d5a:	085b      	lsrs	r3, r3, #1
   14d5c:	000c      	movs	r4, r1
   14d5e:	e75c      	b.n	14c1a <__aeabi_fadd+0x76>
   14d60:	2aff      	cmp	r2, #255	; 0xff
   14d62:	d041      	beq.n	14de8 <__aeabi_fadd+0x244>
   14d64:	000a      	movs	r2, r1
   14d66:	e779      	b.n	14c5c <__aeabi_fadd+0xb8>
   14d68:	2201      	movs	r2, #1
   14d6a:	1a9b      	subs	r3, r3, r2
   14d6c:	e784      	b.n	14c78 <__aeabi_fadd+0xd4>
   14d6e:	2c00      	cmp	r4, #0
   14d70:	d01d      	beq.n	14dae <__aeabi_fadd+0x20a>
   14d72:	28ff      	cmp	r0, #255	; 0xff
   14d74:	d022      	beq.n	14dbc <__aeabi_fadd+0x218>
   14d76:	2480      	movs	r4, #128	; 0x80
   14d78:	04e4      	lsls	r4, r4, #19
   14d7a:	4252      	negs	r2, r2
   14d7c:	4323      	orrs	r3, r4
   14d7e:	2a1b      	cmp	r2, #27
   14d80:	dd00      	ble.n	14d84 <__aeabi_fadd+0x1e0>
   14d82:	e08a      	b.n	14e9a <__aeabi_fadd+0x2f6>
   14d84:	001c      	movs	r4, r3
   14d86:	2520      	movs	r5, #32
   14d88:	40d4      	lsrs	r4, r2
   14d8a:	1aaa      	subs	r2, r5, r2
   14d8c:	4093      	lsls	r3, r2
   14d8e:	1e5a      	subs	r2, r3, #1
   14d90:	4193      	sbcs	r3, r2
   14d92:	4323      	orrs	r3, r4
   14d94:	4662      	mov	r2, ip
   14d96:	0004      	movs	r4, r0
   14d98:	1ad3      	subs	r3, r2, r3
   14d9a:	000d      	movs	r5, r1
   14d9c:	e725      	b.n	14bea <__aeabi_fadd+0x46>
   14d9e:	2e00      	cmp	r6, #0
   14da0:	d000      	beq.n	14da4 <__aeabi_fadd+0x200>
   14da2:	e726      	b.n	14bf2 <__aeabi_fadd+0x4e>
   14da4:	2200      	movs	r2, #0
   14da6:	2400      	movs	r4, #0
   14da8:	e7a9      	b.n	14cfe <__aeabi_fadd+0x15a>
   14daa:	000c      	movs	r4, r1
   14dac:	e735      	b.n	14c1a <__aeabi_fadd+0x76>
   14dae:	2b00      	cmp	r3, #0
   14db0:	d04d      	beq.n	14e4e <__aeabi_fadd+0x2aa>
   14db2:	43d2      	mvns	r2, r2
   14db4:	2a00      	cmp	r2, #0
   14db6:	d0ed      	beq.n	14d94 <__aeabi_fadd+0x1f0>
   14db8:	28ff      	cmp	r0, #255	; 0xff
   14dba:	d1e0      	bne.n	14d7e <__aeabi_fadd+0x1da>
   14dbc:	4663      	mov	r3, ip
   14dbe:	24ff      	movs	r4, #255	; 0xff
   14dc0:	000d      	movs	r5, r1
   14dc2:	e72a      	b.n	14c1a <__aeabi_fadd+0x76>
   14dc4:	29ff      	cmp	r1, #255	; 0xff
   14dc6:	d00f      	beq.n	14de8 <__aeabi_fadd+0x244>
   14dc8:	0001      	movs	r1, r0
   14dca:	e773      	b.n	14cb4 <__aeabi_fadd+0x110>
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d061      	beq.n	14e94 <__aeabi_fadd+0x2f0>
   14dd0:	24ff      	movs	r4, #255	; 0xff
   14dd2:	2f00      	cmp	r7, #0
   14dd4:	d100      	bne.n	14dd8 <__aeabi_fadd+0x234>
   14dd6:	e720      	b.n	14c1a <__aeabi_fadd+0x76>
   14dd8:	2280      	movs	r2, #128	; 0x80
   14dda:	4641      	mov	r1, r8
   14ddc:	03d2      	lsls	r2, r2, #15
   14dde:	4211      	tst	r1, r2
   14de0:	d002      	beq.n	14de8 <__aeabi_fadd+0x244>
   14de2:	4216      	tst	r6, r2
   14de4:	d100      	bne.n	14de8 <__aeabi_fadd+0x244>
   14de6:	003b      	movs	r3, r7
   14de8:	24ff      	movs	r4, #255	; 0xff
   14dea:	e716      	b.n	14c1a <__aeabi_fadd+0x76>
   14dec:	24ff      	movs	r4, #255	; 0xff
   14dee:	2300      	movs	r3, #0
   14df0:	e724      	b.n	14c3c <__aeabi_fadd+0x98>
   14df2:	2c00      	cmp	r4, #0
   14df4:	d1ea      	bne.n	14dcc <__aeabi_fadd+0x228>
   14df6:	2b00      	cmp	r3, #0
   14df8:	d058      	beq.n	14eac <__aeabi_fadd+0x308>
   14dfa:	2f00      	cmp	r7, #0
   14dfc:	d100      	bne.n	14e00 <__aeabi_fadd+0x25c>
   14dfe:	e70c      	b.n	14c1a <__aeabi_fadd+0x76>
   14e00:	4463      	add	r3, ip
   14e02:	015a      	lsls	r2, r3, #5
   14e04:	d400      	bmi.n	14e08 <__aeabi_fadd+0x264>
   14e06:	e739      	b.n	14c7c <__aeabi_fadd+0xd8>
   14e08:	4a2e      	ldr	r2, [pc, #184]	; (14ec4 <__aeabi_fadd+0x320>)
   14e0a:	000c      	movs	r4, r1
   14e0c:	4013      	ands	r3, r2
   14e0e:	e704      	b.n	14c1a <__aeabi_fadd+0x76>
   14e10:	2101      	movs	r1, #1
   14e12:	e75c      	b.n	14cce <__aeabi_fadd+0x12a>
   14e14:	2c00      	cmp	r4, #0
   14e16:	d11e      	bne.n	14e56 <__aeabi_fadd+0x2b2>
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d040      	beq.n	14e9e <__aeabi_fadd+0x2fa>
   14e1c:	43c9      	mvns	r1, r1
   14e1e:	2900      	cmp	r1, #0
   14e20:	d00b      	beq.n	14e3a <__aeabi_fadd+0x296>
   14e22:	28ff      	cmp	r0, #255	; 0xff
   14e24:	d036      	beq.n	14e94 <__aeabi_fadd+0x2f0>
   14e26:	291b      	cmp	r1, #27
   14e28:	dc47      	bgt.n	14eba <__aeabi_fadd+0x316>
   14e2a:	001c      	movs	r4, r3
   14e2c:	2620      	movs	r6, #32
   14e2e:	40cc      	lsrs	r4, r1
   14e30:	1a71      	subs	r1, r6, r1
   14e32:	408b      	lsls	r3, r1
   14e34:	1e59      	subs	r1, r3, #1
   14e36:	418b      	sbcs	r3, r1
   14e38:	4323      	orrs	r3, r4
   14e3a:	4463      	add	r3, ip
   14e3c:	0004      	movs	r4, r0
   14e3e:	e747      	b.n	14cd0 <__aeabi_fadd+0x12c>
   14e40:	2b00      	cmp	r3, #0
   14e42:	d118      	bne.n	14e76 <__aeabi_fadd+0x2d2>
   14e44:	1e3b      	subs	r3, r7, #0
   14e46:	d02d      	beq.n	14ea4 <__aeabi_fadd+0x300>
   14e48:	000d      	movs	r5, r1
   14e4a:	24ff      	movs	r4, #255	; 0xff
   14e4c:	e6e5      	b.n	14c1a <__aeabi_fadd+0x76>
   14e4e:	003b      	movs	r3, r7
   14e50:	0004      	movs	r4, r0
   14e52:	000d      	movs	r5, r1
   14e54:	e6e1      	b.n	14c1a <__aeabi_fadd+0x76>
   14e56:	28ff      	cmp	r0, #255	; 0xff
   14e58:	d01c      	beq.n	14e94 <__aeabi_fadd+0x2f0>
   14e5a:	2480      	movs	r4, #128	; 0x80
   14e5c:	04e4      	lsls	r4, r4, #19
   14e5e:	4249      	negs	r1, r1
   14e60:	4323      	orrs	r3, r4
   14e62:	e7e0      	b.n	14e26 <__aeabi_fadd+0x282>
   14e64:	2f00      	cmp	r7, #0
   14e66:	d100      	bne.n	14e6a <__aeabi_fadd+0x2c6>
   14e68:	e6d7      	b.n	14c1a <__aeabi_fadd+0x76>
   14e6a:	1bde      	subs	r6, r3, r7
   14e6c:	0172      	lsls	r2, r6, #5
   14e6e:	d51f      	bpl.n	14eb0 <__aeabi_fadd+0x30c>
   14e70:	1afb      	subs	r3, r7, r3
   14e72:	000d      	movs	r5, r1
   14e74:	e6d1      	b.n	14c1a <__aeabi_fadd+0x76>
   14e76:	24ff      	movs	r4, #255	; 0xff
   14e78:	2f00      	cmp	r7, #0
   14e7a:	d100      	bne.n	14e7e <__aeabi_fadd+0x2da>
   14e7c:	e6cd      	b.n	14c1a <__aeabi_fadd+0x76>
   14e7e:	2280      	movs	r2, #128	; 0x80
   14e80:	4640      	mov	r0, r8
   14e82:	03d2      	lsls	r2, r2, #15
   14e84:	4210      	tst	r0, r2
   14e86:	d0af      	beq.n	14de8 <__aeabi_fadd+0x244>
   14e88:	4216      	tst	r6, r2
   14e8a:	d1ad      	bne.n	14de8 <__aeabi_fadd+0x244>
   14e8c:	003b      	movs	r3, r7
   14e8e:	000d      	movs	r5, r1
   14e90:	24ff      	movs	r4, #255	; 0xff
   14e92:	e6c2      	b.n	14c1a <__aeabi_fadd+0x76>
   14e94:	4663      	mov	r3, ip
   14e96:	24ff      	movs	r4, #255	; 0xff
   14e98:	e6bf      	b.n	14c1a <__aeabi_fadd+0x76>
   14e9a:	2301      	movs	r3, #1
   14e9c:	e77a      	b.n	14d94 <__aeabi_fadd+0x1f0>
   14e9e:	003b      	movs	r3, r7
   14ea0:	0004      	movs	r4, r0
   14ea2:	e6ba      	b.n	14c1a <__aeabi_fadd+0x76>
   14ea4:	2680      	movs	r6, #128	; 0x80
   14ea6:	2200      	movs	r2, #0
   14ea8:	03f6      	lsls	r6, r6, #15
   14eaa:	e6f0      	b.n	14c8e <__aeabi_fadd+0xea>
   14eac:	003b      	movs	r3, r7
   14eae:	e6b4      	b.n	14c1a <__aeabi_fadd+0x76>
   14eb0:	1e33      	subs	r3, r6, #0
   14eb2:	d000      	beq.n	14eb6 <__aeabi_fadd+0x312>
   14eb4:	e6e2      	b.n	14c7c <__aeabi_fadd+0xd8>
   14eb6:	2200      	movs	r2, #0
   14eb8:	e721      	b.n	14cfe <__aeabi_fadd+0x15a>
   14eba:	2301      	movs	r3, #1
   14ebc:	e7bd      	b.n	14e3a <__aeabi_fadd+0x296>
   14ebe:	46c0      	nop			; (mov r8, r8)
   14ec0:	7dffffff 	.word	0x7dffffff
   14ec4:	fbffffff 	.word	0xfbffffff

00014ec8 <__aeabi_fdiv>:
   14ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14eca:	4657      	mov	r7, sl
   14ecc:	464e      	mov	r6, r9
   14ece:	46de      	mov	lr, fp
   14ed0:	4645      	mov	r5, r8
   14ed2:	b5e0      	push	{r5, r6, r7, lr}
   14ed4:	0244      	lsls	r4, r0, #9
   14ed6:	0043      	lsls	r3, r0, #1
   14ed8:	0fc6      	lsrs	r6, r0, #31
   14eda:	b083      	sub	sp, #12
   14edc:	1c0f      	adds	r7, r1, #0
   14ede:	0a64      	lsrs	r4, r4, #9
   14ee0:	0e1b      	lsrs	r3, r3, #24
   14ee2:	46b2      	mov	sl, r6
   14ee4:	d053      	beq.n	14f8e <__aeabi_fdiv+0xc6>
   14ee6:	2bff      	cmp	r3, #255	; 0xff
   14ee8:	d027      	beq.n	14f3a <__aeabi_fdiv+0x72>
   14eea:	2280      	movs	r2, #128	; 0x80
   14eec:	00e4      	lsls	r4, r4, #3
   14eee:	04d2      	lsls	r2, r2, #19
   14ef0:	4314      	orrs	r4, r2
   14ef2:	227f      	movs	r2, #127	; 0x7f
   14ef4:	4252      	negs	r2, r2
   14ef6:	4690      	mov	r8, r2
   14ef8:	4498      	add	r8, r3
   14efa:	2300      	movs	r3, #0
   14efc:	4699      	mov	r9, r3
   14efe:	469b      	mov	fp, r3
   14f00:	027d      	lsls	r5, r7, #9
   14f02:	0078      	lsls	r0, r7, #1
   14f04:	0ffb      	lsrs	r3, r7, #31
   14f06:	0a6d      	lsrs	r5, r5, #9
   14f08:	0e00      	lsrs	r0, r0, #24
   14f0a:	9300      	str	r3, [sp, #0]
   14f0c:	d024      	beq.n	14f58 <__aeabi_fdiv+0x90>
   14f0e:	28ff      	cmp	r0, #255	; 0xff
   14f10:	d046      	beq.n	14fa0 <__aeabi_fdiv+0xd8>
   14f12:	2380      	movs	r3, #128	; 0x80
   14f14:	2100      	movs	r1, #0
   14f16:	00ed      	lsls	r5, r5, #3
   14f18:	04db      	lsls	r3, r3, #19
   14f1a:	431d      	orrs	r5, r3
   14f1c:	387f      	subs	r0, #127	; 0x7f
   14f1e:	4647      	mov	r7, r8
   14f20:	1a38      	subs	r0, r7, r0
   14f22:	464f      	mov	r7, r9
   14f24:	430f      	orrs	r7, r1
   14f26:	00bf      	lsls	r7, r7, #2
   14f28:	46b9      	mov	r9, r7
   14f2a:	0033      	movs	r3, r6
   14f2c:	9a00      	ldr	r2, [sp, #0]
   14f2e:	4f87      	ldr	r7, [pc, #540]	; (1514c <__aeabi_fdiv+0x284>)
   14f30:	4053      	eors	r3, r2
   14f32:	464a      	mov	r2, r9
   14f34:	58ba      	ldr	r2, [r7, r2]
   14f36:	9301      	str	r3, [sp, #4]
   14f38:	4697      	mov	pc, r2
   14f3a:	2c00      	cmp	r4, #0
   14f3c:	d14e      	bne.n	14fdc <__aeabi_fdiv+0x114>
   14f3e:	2308      	movs	r3, #8
   14f40:	4699      	mov	r9, r3
   14f42:	33f7      	adds	r3, #247	; 0xf7
   14f44:	4698      	mov	r8, r3
   14f46:	3bfd      	subs	r3, #253	; 0xfd
   14f48:	469b      	mov	fp, r3
   14f4a:	027d      	lsls	r5, r7, #9
   14f4c:	0078      	lsls	r0, r7, #1
   14f4e:	0ffb      	lsrs	r3, r7, #31
   14f50:	0a6d      	lsrs	r5, r5, #9
   14f52:	0e00      	lsrs	r0, r0, #24
   14f54:	9300      	str	r3, [sp, #0]
   14f56:	d1da      	bne.n	14f0e <__aeabi_fdiv+0x46>
   14f58:	2d00      	cmp	r5, #0
   14f5a:	d126      	bne.n	14faa <__aeabi_fdiv+0xe2>
   14f5c:	2000      	movs	r0, #0
   14f5e:	2101      	movs	r1, #1
   14f60:	0033      	movs	r3, r6
   14f62:	9a00      	ldr	r2, [sp, #0]
   14f64:	4f7a      	ldr	r7, [pc, #488]	; (15150 <__aeabi_fdiv+0x288>)
   14f66:	4053      	eors	r3, r2
   14f68:	4642      	mov	r2, r8
   14f6a:	1a10      	subs	r0, r2, r0
   14f6c:	464a      	mov	r2, r9
   14f6e:	430a      	orrs	r2, r1
   14f70:	0092      	lsls	r2, r2, #2
   14f72:	58ba      	ldr	r2, [r7, r2]
   14f74:	001d      	movs	r5, r3
   14f76:	4697      	mov	pc, r2
   14f78:	9b00      	ldr	r3, [sp, #0]
   14f7a:	002c      	movs	r4, r5
   14f7c:	469a      	mov	sl, r3
   14f7e:	468b      	mov	fp, r1
   14f80:	465b      	mov	r3, fp
   14f82:	2b02      	cmp	r3, #2
   14f84:	d131      	bne.n	14fea <__aeabi_fdiv+0x122>
   14f86:	4653      	mov	r3, sl
   14f88:	21ff      	movs	r1, #255	; 0xff
   14f8a:	2400      	movs	r4, #0
   14f8c:	e038      	b.n	15000 <__aeabi_fdiv+0x138>
   14f8e:	2c00      	cmp	r4, #0
   14f90:	d117      	bne.n	14fc2 <__aeabi_fdiv+0xfa>
   14f92:	2304      	movs	r3, #4
   14f94:	4699      	mov	r9, r3
   14f96:	2300      	movs	r3, #0
   14f98:	4698      	mov	r8, r3
   14f9a:	3301      	adds	r3, #1
   14f9c:	469b      	mov	fp, r3
   14f9e:	e7af      	b.n	14f00 <__aeabi_fdiv+0x38>
   14fa0:	20ff      	movs	r0, #255	; 0xff
   14fa2:	2d00      	cmp	r5, #0
   14fa4:	d10b      	bne.n	14fbe <__aeabi_fdiv+0xf6>
   14fa6:	2102      	movs	r1, #2
   14fa8:	e7da      	b.n	14f60 <__aeabi_fdiv+0x98>
   14faa:	0028      	movs	r0, r5
   14fac:	f002 fac8 	bl	17540 <__clzsi2>
   14fb0:	1f43      	subs	r3, r0, #5
   14fb2:	409d      	lsls	r5, r3
   14fb4:	2376      	movs	r3, #118	; 0x76
   14fb6:	425b      	negs	r3, r3
   14fb8:	1a18      	subs	r0, r3, r0
   14fba:	2100      	movs	r1, #0
   14fbc:	e7af      	b.n	14f1e <__aeabi_fdiv+0x56>
   14fbe:	2103      	movs	r1, #3
   14fc0:	e7ad      	b.n	14f1e <__aeabi_fdiv+0x56>
   14fc2:	0020      	movs	r0, r4
   14fc4:	f002 fabc 	bl	17540 <__clzsi2>
   14fc8:	1f43      	subs	r3, r0, #5
   14fca:	409c      	lsls	r4, r3
   14fcc:	2376      	movs	r3, #118	; 0x76
   14fce:	425b      	negs	r3, r3
   14fd0:	1a1b      	subs	r3, r3, r0
   14fd2:	4698      	mov	r8, r3
   14fd4:	2300      	movs	r3, #0
   14fd6:	4699      	mov	r9, r3
   14fd8:	469b      	mov	fp, r3
   14fda:	e791      	b.n	14f00 <__aeabi_fdiv+0x38>
   14fdc:	230c      	movs	r3, #12
   14fde:	4699      	mov	r9, r3
   14fe0:	33f3      	adds	r3, #243	; 0xf3
   14fe2:	4698      	mov	r8, r3
   14fe4:	3bfc      	subs	r3, #252	; 0xfc
   14fe6:	469b      	mov	fp, r3
   14fe8:	e78a      	b.n	14f00 <__aeabi_fdiv+0x38>
   14fea:	2b03      	cmp	r3, #3
   14fec:	d100      	bne.n	14ff0 <__aeabi_fdiv+0x128>
   14fee:	e0a5      	b.n	1513c <__aeabi_fdiv+0x274>
   14ff0:	4655      	mov	r5, sl
   14ff2:	2b01      	cmp	r3, #1
   14ff4:	d000      	beq.n	14ff8 <__aeabi_fdiv+0x130>
   14ff6:	e081      	b.n	150fc <__aeabi_fdiv+0x234>
   14ff8:	2301      	movs	r3, #1
   14ffa:	2100      	movs	r1, #0
   14ffc:	2400      	movs	r4, #0
   14ffe:	402b      	ands	r3, r5
   15000:	0264      	lsls	r4, r4, #9
   15002:	05c9      	lsls	r1, r1, #23
   15004:	0a60      	lsrs	r0, r4, #9
   15006:	07db      	lsls	r3, r3, #31
   15008:	4308      	orrs	r0, r1
   1500a:	4318      	orrs	r0, r3
   1500c:	b003      	add	sp, #12
   1500e:	bc3c      	pop	{r2, r3, r4, r5}
   15010:	4690      	mov	r8, r2
   15012:	4699      	mov	r9, r3
   15014:	46a2      	mov	sl, r4
   15016:	46ab      	mov	fp, r5
   15018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1501a:	2480      	movs	r4, #128	; 0x80
   1501c:	2300      	movs	r3, #0
   1501e:	03e4      	lsls	r4, r4, #15
   15020:	21ff      	movs	r1, #255	; 0xff
   15022:	e7ed      	b.n	15000 <__aeabi_fdiv+0x138>
   15024:	21ff      	movs	r1, #255	; 0xff
   15026:	2400      	movs	r4, #0
   15028:	e7ea      	b.n	15000 <__aeabi_fdiv+0x138>
   1502a:	2301      	movs	r3, #1
   1502c:	1a59      	subs	r1, r3, r1
   1502e:	291b      	cmp	r1, #27
   15030:	dd66      	ble.n	15100 <__aeabi_fdiv+0x238>
   15032:	9a01      	ldr	r2, [sp, #4]
   15034:	4013      	ands	r3, r2
   15036:	2100      	movs	r1, #0
   15038:	2400      	movs	r4, #0
   1503a:	e7e1      	b.n	15000 <__aeabi_fdiv+0x138>
   1503c:	2380      	movs	r3, #128	; 0x80
   1503e:	03db      	lsls	r3, r3, #15
   15040:	421c      	tst	r4, r3
   15042:	d038      	beq.n	150b6 <__aeabi_fdiv+0x1ee>
   15044:	421d      	tst	r5, r3
   15046:	d051      	beq.n	150ec <__aeabi_fdiv+0x224>
   15048:	431c      	orrs	r4, r3
   1504a:	0264      	lsls	r4, r4, #9
   1504c:	0a64      	lsrs	r4, r4, #9
   1504e:	0033      	movs	r3, r6
   15050:	21ff      	movs	r1, #255	; 0xff
   15052:	e7d5      	b.n	15000 <__aeabi_fdiv+0x138>
   15054:	0163      	lsls	r3, r4, #5
   15056:	016c      	lsls	r4, r5, #5
   15058:	42a3      	cmp	r3, r4
   1505a:	d23b      	bcs.n	150d4 <__aeabi_fdiv+0x20c>
   1505c:	261b      	movs	r6, #27
   1505e:	2100      	movs	r1, #0
   15060:	3801      	subs	r0, #1
   15062:	2501      	movs	r5, #1
   15064:	001f      	movs	r7, r3
   15066:	0049      	lsls	r1, r1, #1
   15068:	005b      	lsls	r3, r3, #1
   1506a:	2f00      	cmp	r7, #0
   1506c:	db01      	blt.n	15072 <__aeabi_fdiv+0x1aa>
   1506e:	429c      	cmp	r4, r3
   15070:	d801      	bhi.n	15076 <__aeabi_fdiv+0x1ae>
   15072:	1b1b      	subs	r3, r3, r4
   15074:	4329      	orrs	r1, r5
   15076:	3e01      	subs	r6, #1
   15078:	2e00      	cmp	r6, #0
   1507a:	d1f3      	bne.n	15064 <__aeabi_fdiv+0x19c>
   1507c:	001c      	movs	r4, r3
   1507e:	1e63      	subs	r3, r4, #1
   15080:	419c      	sbcs	r4, r3
   15082:	430c      	orrs	r4, r1
   15084:	0001      	movs	r1, r0
   15086:	317f      	adds	r1, #127	; 0x7f
   15088:	2900      	cmp	r1, #0
   1508a:	ddce      	ble.n	1502a <__aeabi_fdiv+0x162>
   1508c:	0763      	lsls	r3, r4, #29
   1508e:	d004      	beq.n	1509a <__aeabi_fdiv+0x1d2>
   15090:	230f      	movs	r3, #15
   15092:	4023      	ands	r3, r4
   15094:	2b04      	cmp	r3, #4
   15096:	d000      	beq.n	1509a <__aeabi_fdiv+0x1d2>
   15098:	3404      	adds	r4, #4
   1509a:	0123      	lsls	r3, r4, #4
   1509c:	d503      	bpl.n	150a6 <__aeabi_fdiv+0x1de>
   1509e:	0001      	movs	r1, r0
   150a0:	4b2c      	ldr	r3, [pc, #176]	; (15154 <__aeabi_fdiv+0x28c>)
   150a2:	3180      	adds	r1, #128	; 0x80
   150a4:	401c      	ands	r4, r3
   150a6:	29fe      	cmp	r1, #254	; 0xfe
   150a8:	dd0d      	ble.n	150c6 <__aeabi_fdiv+0x1fe>
   150aa:	2301      	movs	r3, #1
   150ac:	9a01      	ldr	r2, [sp, #4]
   150ae:	21ff      	movs	r1, #255	; 0xff
   150b0:	4013      	ands	r3, r2
   150b2:	2400      	movs	r4, #0
   150b4:	e7a4      	b.n	15000 <__aeabi_fdiv+0x138>
   150b6:	2380      	movs	r3, #128	; 0x80
   150b8:	03db      	lsls	r3, r3, #15
   150ba:	431c      	orrs	r4, r3
   150bc:	0264      	lsls	r4, r4, #9
   150be:	0a64      	lsrs	r4, r4, #9
   150c0:	0033      	movs	r3, r6
   150c2:	21ff      	movs	r1, #255	; 0xff
   150c4:	e79c      	b.n	15000 <__aeabi_fdiv+0x138>
   150c6:	2301      	movs	r3, #1
   150c8:	9a01      	ldr	r2, [sp, #4]
   150ca:	01a4      	lsls	r4, r4, #6
   150cc:	0a64      	lsrs	r4, r4, #9
   150ce:	b2c9      	uxtb	r1, r1
   150d0:	4013      	ands	r3, r2
   150d2:	e795      	b.n	15000 <__aeabi_fdiv+0x138>
   150d4:	1b1b      	subs	r3, r3, r4
   150d6:	261a      	movs	r6, #26
   150d8:	2101      	movs	r1, #1
   150da:	e7c2      	b.n	15062 <__aeabi_fdiv+0x19a>
   150dc:	9b00      	ldr	r3, [sp, #0]
   150de:	468b      	mov	fp, r1
   150e0:	469a      	mov	sl, r3
   150e2:	2400      	movs	r4, #0
   150e4:	e74c      	b.n	14f80 <__aeabi_fdiv+0xb8>
   150e6:	0263      	lsls	r3, r4, #9
   150e8:	d5e5      	bpl.n	150b6 <__aeabi_fdiv+0x1ee>
   150ea:	2500      	movs	r5, #0
   150ec:	2480      	movs	r4, #128	; 0x80
   150ee:	03e4      	lsls	r4, r4, #15
   150f0:	432c      	orrs	r4, r5
   150f2:	0264      	lsls	r4, r4, #9
   150f4:	0a64      	lsrs	r4, r4, #9
   150f6:	9b00      	ldr	r3, [sp, #0]
   150f8:	21ff      	movs	r1, #255	; 0xff
   150fa:	e781      	b.n	15000 <__aeabi_fdiv+0x138>
   150fc:	9501      	str	r5, [sp, #4]
   150fe:	e7c1      	b.n	15084 <__aeabi_fdiv+0x1bc>
   15100:	0023      	movs	r3, r4
   15102:	2020      	movs	r0, #32
   15104:	40cb      	lsrs	r3, r1
   15106:	1a41      	subs	r1, r0, r1
   15108:	408c      	lsls	r4, r1
   1510a:	1e61      	subs	r1, r4, #1
   1510c:	418c      	sbcs	r4, r1
   1510e:	431c      	orrs	r4, r3
   15110:	0763      	lsls	r3, r4, #29
   15112:	d004      	beq.n	1511e <__aeabi_fdiv+0x256>
   15114:	230f      	movs	r3, #15
   15116:	4023      	ands	r3, r4
   15118:	2b04      	cmp	r3, #4
   1511a:	d000      	beq.n	1511e <__aeabi_fdiv+0x256>
   1511c:	3404      	adds	r4, #4
   1511e:	0163      	lsls	r3, r4, #5
   15120:	d505      	bpl.n	1512e <__aeabi_fdiv+0x266>
   15122:	2301      	movs	r3, #1
   15124:	9a01      	ldr	r2, [sp, #4]
   15126:	2101      	movs	r1, #1
   15128:	4013      	ands	r3, r2
   1512a:	2400      	movs	r4, #0
   1512c:	e768      	b.n	15000 <__aeabi_fdiv+0x138>
   1512e:	2301      	movs	r3, #1
   15130:	9a01      	ldr	r2, [sp, #4]
   15132:	01a4      	lsls	r4, r4, #6
   15134:	0a64      	lsrs	r4, r4, #9
   15136:	4013      	ands	r3, r2
   15138:	2100      	movs	r1, #0
   1513a:	e761      	b.n	15000 <__aeabi_fdiv+0x138>
   1513c:	2380      	movs	r3, #128	; 0x80
   1513e:	03db      	lsls	r3, r3, #15
   15140:	431c      	orrs	r4, r3
   15142:	0264      	lsls	r4, r4, #9
   15144:	0a64      	lsrs	r4, r4, #9
   15146:	4653      	mov	r3, sl
   15148:	21ff      	movs	r1, #255	; 0xff
   1514a:	e759      	b.n	15000 <__aeabi_fdiv+0x138>
   1514c:	0001e0d8 	.word	0x0001e0d8
   15150:	0001e118 	.word	0x0001e118
   15154:	f7ffffff 	.word	0xf7ffffff

00015158 <__eqsf2>:
   15158:	b570      	push	{r4, r5, r6, lr}
   1515a:	0042      	lsls	r2, r0, #1
   1515c:	0245      	lsls	r5, r0, #9
   1515e:	024e      	lsls	r6, r1, #9
   15160:	004c      	lsls	r4, r1, #1
   15162:	0fc3      	lsrs	r3, r0, #31
   15164:	0a6d      	lsrs	r5, r5, #9
   15166:	0e12      	lsrs	r2, r2, #24
   15168:	0a76      	lsrs	r6, r6, #9
   1516a:	0e24      	lsrs	r4, r4, #24
   1516c:	0fc9      	lsrs	r1, r1, #31
   1516e:	2001      	movs	r0, #1
   15170:	2aff      	cmp	r2, #255	; 0xff
   15172:	d006      	beq.n	15182 <__eqsf2+0x2a>
   15174:	2cff      	cmp	r4, #255	; 0xff
   15176:	d003      	beq.n	15180 <__eqsf2+0x28>
   15178:	42a2      	cmp	r2, r4
   1517a:	d101      	bne.n	15180 <__eqsf2+0x28>
   1517c:	42b5      	cmp	r5, r6
   1517e:	d006      	beq.n	1518e <__eqsf2+0x36>
   15180:	bd70      	pop	{r4, r5, r6, pc}
   15182:	2d00      	cmp	r5, #0
   15184:	d1fc      	bne.n	15180 <__eqsf2+0x28>
   15186:	2cff      	cmp	r4, #255	; 0xff
   15188:	d1fa      	bne.n	15180 <__eqsf2+0x28>
   1518a:	2e00      	cmp	r6, #0
   1518c:	d1f8      	bne.n	15180 <__eqsf2+0x28>
   1518e:	428b      	cmp	r3, r1
   15190:	d006      	beq.n	151a0 <__eqsf2+0x48>
   15192:	2001      	movs	r0, #1
   15194:	2a00      	cmp	r2, #0
   15196:	d1f3      	bne.n	15180 <__eqsf2+0x28>
   15198:	0028      	movs	r0, r5
   1519a:	1e45      	subs	r5, r0, #1
   1519c:	41a8      	sbcs	r0, r5
   1519e:	e7ef      	b.n	15180 <__eqsf2+0x28>
   151a0:	2000      	movs	r0, #0
   151a2:	e7ed      	b.n	15180 <__eqsf2+0x28>

000151a4 <__gesf2>:
   151a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   151a6:	0042      	lsls	r2, r0, #1
   151a8:	0245      	lsls	r5, r0, #9
   151aa:	024c      	lsls	r4, r1, #9
   151ac:	0fc3      	lsrs	r3, r0, #31
   151ae:	0048      	lsls	r0, r1, #1
   151b0:	0a6d      	lsrs	r5, r5, #9
   151b2:	0e12      	lsrs	r2, r2, #24
   151b4:	0a64      	lsrs	r4, r4, #9
   151b6:	0e00      	lsrs	r0, r0, #24
   151b8:	0fc9      	lsrs	r1, r1, #31
   151ba:	2aff      	cmp	r2, #255	; 0xff
   151bc:	d01e      	beq.n	151fc <__gesf2+0x58>
   151be:	28ff      	cmp	r0, #255	; 0xff
   151c0:	d021      	beq.n	15206 <__gesf2+0x62>
   151c2:	2a00      	cmp	r2, #0
   151c4:	d10a      	bne.n	151dc <__gesf2+0x38>
   151c6:	426e      	negs	r6, r5
   151c8:	416e      	adcs	r6, r5
   151ca:	b2f6      	uxtb	r6, r6
   151cc:	2800      	cmp	r0, #0
   151ce:	d10f      	bne.n	151f0 <__gesf2+0x4c>
   151d0:	2c00      	cmp	r4, #0
   151d2:	d10d      	bne.n	151f0 <__gesf2+0x4c>
   151d4:	2000      	movs	r0, #0
   151d6:	2d00      	cmp	r5, #0
   151d8:	d009      	beq.n	151ee <__gesf2+0x4a>
   151da:	e005      	b.n	151e8 <__gesf2+0x44>
   151dc:	2800      	cmp	r0, #0
   151de:	d101      	bne.n	151e4 <__gesf2+0x40>
   151e0:	2c00      	cmp	r4, #0
   151e2:	d001      	beq.n	151e8 <__gesf2+0x44>
   151e4:	428b      	cmp	r3, r1
   151e6:	d011      	beq.n	1520c <__gesf2+0x68>
   151e8:	2101      	movs	r1, #1
   151ea:	4258      	negs	r0, r3
   151ec:	4308      	orrs	r0, r1
   151ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151f0:	2e00      	cmp	r6, #0
   151f2:	d0f7      	beq.n	151e4 <__gesf2+0x40>
   151f4:	2001      	movs	r0, #1
   151f6:	3901      	subs	r1, #1
   151f8:	4308      	orrs	r0, r1
   151fa:	e7f8      	b.n	151ee <__gesf2+0x4a>
   151fc:	2d00      	cmp	r5, #0
   151fe:	d0de      	beq.n	151be <__gesf2+0x1a>
   15200:	2002      	movs	r0, #2
   15202:	4240      	negs	r0, r0
   15204:	e7f3      	b.n	151ee <__gesf2+0x4a>
   15206:	2c00      	cmp	r4, #0
   15208:	d0db      	beq.n	151c2 <__gesf2+0x1e>
   1520a:	e7f9      	b.n	15200 <__gesf2+0x5c>
   1520c:	4282      	cmp	r2, r0
   1520e:	dceb      	bgt.n	151e8 <__gesf2+0x44>
   15210:	db04      	blt.n	1521c <__gesf2+0x78>
   15212:	42a5      	cmp	r5, r4
   15214:	d8e8      	bhi.n	151e8 <__gesf2+0x44>
   15216:	2000      	movs	r0, #0
   15218:	42a5      	cmp	r5, r4
   1521a:	d2e8      	bcs.n	151ee <__gesf2+0x4a>
   1521c:	2101      	movs	r1, #1
   1521e:	1e58      	subs	r0, r3, #1
   15220:	4308      	orrs	r0, r1
   15222:	e7e4      	b.n	151ee <__gesf2+0x4a>

00015224 <__lesf2>:
   15224:	b5f0      	push	{r4, r5, r6, r7, lr}
   15226:	0042      	lsls	r2, r0, #1
   15228:	024d      	lsls	r5, r1, #9
   1522a:	004c      	lsls	r4, r1, #1
   1522c:	0246      	lsls	r6, r0, #9
   1522e:	0a76      	lsrs	r6, r6, #9
   15230:	0e12      	lsrs	r2, r2, #24
   15232:	0fc3      	lsrs	r3, r0, #31
   15234:	0a6d      	lsrs	r5, r5, #9
   15236:	0e24      	lsrs	r4, r4, #24
   15238:	0fc9      	lsrs	r1, r1, #31
   1523a:	2aff      	cmp	r2, #255	; 0xff
   1523c:	d016      	beq.n	1526c <__lesf2+0x48>
   1523e:	2cff      	cmp	r4, #255	; 0xff
   15240:	d018      	beq.n	15274 <__lesf2+0x50>
   15242:	2a00      	cmp	r2, #0
   15244:	d10a      	bne.n	1525c <__lesf2+0x38>
   15246:	4270      	negs	r0, r6
   15248:	4170      	adcs	r0, r6
   1524a:	b2c0      	uxtb	r0, r0
   1524c:	2c00      	cmp	r4, #0
   1524e:	d015      	beq.n	1527c <__lesf2+0x58>
   15250:	2800      	cmp	r0, #0
   15252:	d005      	beq.n	15260 <__lesf2+0x3c>
   15254:	2001      	movs	r0, #1
   15256:	3901      	subs	r1, #1
   15258:	4308      	orrs	r0, r1
   1525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1525c:	2c00      	cmp	r4, #0
   1525e:	d013      	beq.n	15288 <__lesf2+0x64>
   15260:	4299      	cmp	r1, r3
   15262:	d014      	beq.n	1528e <__lesf2+0x6a>
   15264:	2001      	movs	r0, #1
   15266:	425b      	negs	r3, r3
   15268:	4318      	orrs	r0, r3
   1526a:	e7f6      	b.n	1525a <__lesf2+0x36>
   1526c:	2002      	movs	r0, #2
   1526e:	2e00      	cmp	r6, #0
   15270:	d1f3      	bne.n	1525a <__lesf2+0x36>
   15272:	e7e4      	b.n	1523e <__lesf2+0x1a>
   15274:	2002      	movs	r0, #2
   15276:	2d00      	cmp	r5, #0
   15278:	d1ef      	bne.n	1525a <__lesf2+0x36>
   1527a:	e7e2      	b.n	15242 <__lesf2+0x1e>
   1527c:	2d00      	cmp	r5, #0
   1527e:	d1e7      	bne.n	15250 <__lesf2+0x2c>
   15280:	2000      	movs	r0, #0
   15282:	2e00      	cmp	r6, #0
   15284:	d0e9      	beq.n	1525a <__lesf2+0x36>
   15286:	e7ed      	b.n	15264 <__lesf2+0x40>
   15288:	2d00      	cmp	r5, #0
   1528a:	d1e9      	bne.n	15260 <__lesf2+0x3c>
   1528c:	e7ea      	b.n	15264 <__lesf2+0x40>
   1528e:	42a2      	cmp	r2, r4
   15290:	dc06      	bgt.n	152a0 <__lesf2+0x7c>
   15292:	dbdf      	blt.n	15254 <__lesf2+0x30>
   15294:	42ae      	cmp	r6, r5
   15296:	d803      	bhi.n	152a0 <__lesf2+0x7c>
   15298:	2000      	movs	r0, #0
   1529a:	42ae      	cmp	r6, r5
   1529c:	d3da      	bcc.n	15254 <__lesf2+0x30>
   1529e:	e7dc      	b.n	1525a <__lesf2+0x36>
   152a0:	2001      	movs	r0, #1
   152a2:	4249      	negs	r1, r1
   152a4:	4308      	orrs	r0, r1
   152a6:	e7d8      	b.n	1525a <__lesf2+0x36>

000152a8 <__aeabi_fmul>:
   152a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152aa:	4657      	mov	r7, sl
   152ac:	464e      	mov	r6, r9
   152ae:	4645      	mov	r5, r8
   152b0:	46de      	mov	lr, fp
   152b2:	b5e0      	push	{r5, r6, r7, lr}
   152b4:	0247      	lsls	r7, r0, #9
   152b6:	0046      	lsls	r6, r0, #1
   152b8:	4688      	mov	r8, r1
   152ba:	0a7f      	lsrs	r7, r7, #9
   152bc:	0e36      	lsrs	r6, r6, #24
   152be:	0fc4      	lsrs	r4, r0, #31
   152c0:	2e00      	cmp	r6, #0
   152c2:	d047      	beq.n	15354 <__aeabi_fmul+0xac>
   152c4:	2eff      	cmp	r6, #255	; 0xff
   152c6:	d024      	beq.n	15312 <__aeabi_fmul+0x6a>
   152c8:	00fb      	lsls	r3, r7, #3
   152ca:	2780      	movs	r7, #128	; 0x80
   152cc:	04ff      	lsls	r7, r7, #19
   152ce:	431f      	orrs	r7, r3
   152d0:	2300      	movs	r3, #0
   152d2:	4699      	mov	r9, r3
   152d4:	469a      	mov	sl, r3
   152d6:	3e7f      	subs	r6, #127	; 0x7f
   152d8:	4643      	mov	r3, r8
   152da:	025d      	lsls	r5, r3, #9
   152dc:	0058      	lsls	r0, r3, #1
   152de:	0fdb      	lsrs	r3, r3, #31
   152e0:	0a6d      	lsrs	r5, r5, #9
   152e2:	0e00      	lsrs	r0, r0, #24
   152e4:	4698      	mov	r8, r3
   152e6:	d043      	beq.n	15370 <__aeabi_fmul+0xc8>
   152e8:	28ff      	cmp	r0, #255	; 0xff
   152ea:	d03b      	beq.n	15364 <__aeabi_fmul+0xbc>
   152ec:	00eb      	lsls	r3, r5, #3
   152ee:	2580      	movs	r5, #128	; 0x80
   152f0:	2200      	movs	r2, #0
   152f2:	04ed      	lsls	r5, r5, #19
   152f4:	431d      	orrs	r5, r3
   152f6:	387f      	subs	r0, #127	; 0x7f
   152f8:	1836      	adds	r6, r6, r0
   152fa:	1c73      	adds	r3, r6, #1
   152fc:	4641      	mov	r1, r8
   152fe:	469b      	mov	fp, r3
   15300:	464b      	mov	r3, r9
   15302:	4061      	eors	r1, r4
   15304:	4313      	orrs	r3, r2
   15306:	2b0f      	cmp	r3, #15
   15308:	d864      	bhi.n	153d4 <__aeabi_fmul+0x12c>
   1530a:	4875      	ldr	r0, [pc, #468]	; (154e0 <__aeabi_fmul+0x238>)
   1530c:	009b      	lsls	r3, r3, #2
   1530e:	58c3      	ldr	r3, [r0, r3]
   15310:	469f      	mov	pc, r3
   15312:	2f00      	cmp	r7, #0
   15314:	d142      	bne.n	1539c <__aeabi_fmul+0xf4>
   15316:	2308      	movs	r3, #8
   15318:	4699      	mov	r9, r3
   1531a:	3b06      	subs	r3, #6
   1531c:	26ff      	movs	r6, #255	; 0xff
   1531e:	469a      	mov	sl, r3
   15320:	e7da      	b.n	152d8 <__aeabi_fmul+0x30>
   15322:	4641      	mov	r1, r8
   15324:	2a02      	cmp	r2, #2
   15326:	d028      	beq.n	1537a <__aeabi_fmul+0xd2>
   15328:	2a03      	cmp	r2, #3
   1532a:	d100      	bne.n	1532e <__aeabi_fmul+0x86>
   1532c:	e0ce      	b.n	154cc <__aeabi_fmul+0x224>
   1532e:	2a01      	cmp	r2, #1
   15330:	d000      	beq.n	15334 <__aeabi_fmul+0x8c>
   15332:	e0ac      	b.n	1548e <__aeabi_fmul+0x1e6>
   15334:	4011      	ands	r1, r2
   15336:	2000      	movs	r0, #0
   15338:	2200      	movs	r2, #0
   1533a:	b2cc      	uxtb	r4, r1
   1533c:	0240      	lsls	r0, r0, #9
   1533e:	05d2      	lsls	r2, r2, #23
   15340:	0a40      	lsrs	r0, r0, #9
   15342:	07e4      	lsls	r4, r4, #31
   15344:	4310      	orrs	r0, r2
   15346:	4320      	orrs	r0, r4
   15348:	bc3c      	pop	{r2, r3, r4, r5}
   1534a:	4690      	mov	r8, r2
   1534c:	4699      	mov	r9, r3
   1534e:	46a2      	mov	sl, r4
   15350:	46ab      	mov	fp, r5
   15352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15354:	2f00      	cmp	r7, #0
   15356:	d115      	bne.n	15384 <__aeabi_fmul+0xdc>
   15358:	2304      	movs	r3, #4
   1535a:	4699      	mov	r9, r3
   1535c:	3b03      	subs	r3, #3
   1535e:	2600      	movs	r6, #0
   15360:	469a      	mov	sl, r3
   15362:	e7b9      	b.n	152d8 <__aeabi_fmul+0x30>
   15364:	20ff      	movs	r0, #255	; 0xff
   15366:	2202      	movs	r2, #2
   15368:	2d00      	cmp	r5, #0
   1536a:	d0c5      	beq.n	152f8 <__aeabi_fmul+0x50>
   1536c:	2203      	movs	r2, #3
   1536e:	e7c3      	b.n	152f8 <__aeabi_fmul+0x50>
   15370:	2d00      	cmp	r5, #0
   15372:	d119      	bne.n	153a8 <__aeabi_fmul+0x100>
   15374:	2000      	movs	r0, #0
   15376:	2201      	movs	r2, #1
   15378:	e7be      	b.n	152f8 <__aeabi_fmul+0x50>
   1537a:	2401      	movs	r4, #1
   1537c:	22ff      	movs	r2, #255	; 0xff
   1537e:	400c      	ands	r4, r1
   15380:	2000      	movs	r0, #0
   15382:	e7db      	b.n	1533c <__aeabi_fmul+0x94>
   15384:	0038      	movs	r0, r7
   15386:	f002 f8db 	bl	17540 <__clzsi2>
   1538a:	2676      	movs	r6, #118	; 0x76
   1538c:	1f43      	subs	r3, r0, #5
   1538e:	409f      	lsls	r7, r3
   15390:	2300      	movs	r3, #0
   15392:	4276      	negs	r6, r6
   15394:	1a36      	subs	r6, r6, r0
   15396:	4699      	mov	r9, r3
   15398:	469a      	mov	sl, r3
   1539a:	e79d      	b.n	152d8 <__aeabi_fmul+0x30>
   1539c:	230c      	movs	r3, #12
   1539e:	4699      	mov	r9, r3
   153a0:	3b09      	subs	r3, #9
   153a2:	26ff      	movs	r6, #255	; 0xff
   153a4:	469a      	mov	sl, r3
   153a6:	e797      	b.n	152d8 <__aeabi_fmul+0x30>
   153a8:	0028      	movs	r0, r5
   153aa:	f002 f8c9 	bl	17540 <__clzsi2>
   153ae:	1f43      	subs	r3, r0, #5
   153b0:	409d      	lsls	r5, r3
   153b2:	2376      	movs	r3, #118	; 0x76
   153b4:	425b      	negs	r3, r3
   153b6:	1a18      	subs	r0, r3, r0
   153b8:	2200      	movs	r2, #0
   153ba:	e79d      	b.n	152f8 <__aeabi_fmul+0x50>
   153bc:	2080      	movs	r0, #128	; 0x80
   153be:	2400      	movs	r4, #0
   153c0:	03c0      	lsls	r0, r0, #15
   153c2:	22ff      	movs	r2, #255	; 0xff
   153c4:	e7ba      	b.n	1533c <__aeabi_fmul+0x94>
   153c6:	003d      	movs	r5, r7
   153c8:	4652      	mov	r2, sl
   153ca:	e7ab      	b.n	15324 <__aeabi_fmul+0x7c>
   153cc:	003d      	movs	r5, r7
   153ce:	0021      	movs	r1, r4
   153d0:	4652      	mov	r2, sl
   153d2:	e7a7      	b.n	15324 <__aeabi_fmul+0x7c>
   153d4:	0c3b      	lsrs	r3, r7, #16
   153d6:	469c      	mov	ip, r3
   153d8:	042a      	lsls	r2, r5, #16
   153da:	0c12      	lsrs	r2, r2, #16
   153dc:	0c2b      	lsrs	r3, r5, #16
   153de:	0014      	movs	r4, r2
   153e0:	4660      	mov	r0, ip
   153e2:	4665      	mov	r5, ip
   153e4:	043f      	lsls	r7, r7, #16
   153e6:	0c3f      	lsrs	r7, r7, #16
   153e8:	437c      	muls	r4, r7
   153ea:	4342      	muls	r2, r0
   153ec:	435d      	muls	r5, r3
   153ee:	437b      	muls	r3, r7
   153f0:	0c27      	lsrs	r7, r4, #16
   153f2:	189b      	adds	r3, r3, r2
   153f4:	18ff      	adds	r7, r7, r3
   153f6:	42ba      	cmp	r2, r7
   153f8:	d903      	bls.n	15402 <__aeabi_fmul+0x15a>
   153fa:	2380      	movs	r3, #128	; 0x80
   153fc:	025b      	lsls	r3, r3, #9
   153fe:	469c      	mov	ip, r3
   15400:	4465      	add	r5, ip
   15402:	0424      	lsls	r4, r4, #16
   15404:	043a      	lsls	r2, r7, #16
   15406:	0c24      	lsrs	r4, r4, #16
   15408:	1912      	adds	r2, r2, r4
   1540a:	0193      	lsls	r3, r2, #6
   1540c:	1e5c      	subs	r4, r3, #1
   1540e:	41a3      	sbcs	r3, r4
   15410:	0c3f      	lsrs	r7, r7, #16
   15412:	0e92      	lsrs	r2, r2, #26
   15414:	197d      	adds	r5, r7, r5
   15416:	431a      	orrs	r2, r3
   15418:	01ad      	lsls	r5, r5, #6
   1541a:	4315      	orrs	r5, r2
   1541c:	012b      	lsls	r3, r5, #4
   1541e:	d504      	bpl.n	1542a <__aeabi_fmul+0x182>
   15420:	2301      	movs	r3, #1
   15422:	465e      	mov	r6, fp
   15424:	086a      	lsrs	r2, r5, #1
   15426:	401d      	ands	r5, r3
   15428:	4315      	orrs	r5, r2
   1542a:	0032      	movs	r2, r6
   1542c:	327f      	adds	r2, #127	; 0x7f
   1542e:	2a00      	cmp	r2, #0
   15430:	dd25      	ble.n	1547e <__aeabi_fmul+0x1d6>
   15432:	076b      	lsls	r3, r5, #29
   15434:	d004      	beq.n	15440 <__aeabi_fmul+0x198>
   15436:	230f      	movs	r3, #15
   15438:	402b      	ands	r3, r5
   1543a:	2b04      	cmp	r3, #4
   1543c:	d000      	beq.n	15440 <__aeabi_fmul+0x198>
   1543e:	3504      	adds	r5, #4
   15440:	012b      	lsls	r3, r5, #4
   15442:	d503      	bpl.n	1544c <__aeabi_fmul+0x1a4>
   15444:	0032      	movs	r2, r6
   15446:	4b27      	ldr	r3, [pc, #156]	; (154e4 <__aeabi_fmul+0x23c>)
   15448:	3280      	adds	r2, #128	; 0x80
   1544a:	401d      	ands	r5, r3
   1544c:	2afe      	cmp	r2, #254	; 0xfe
   1544e:	dc94      	bgt.n	1537a <__aeabi_fmul+0xd2>
   15450:	2401      	movs	r4, #1
   15452:	01a8      	lsls	r0, r5, #6
   15454:	0a40      	lsrs	r0, r0, #9
   15456:	b2d2      	uxtb	r2, r2
   15458:	400c      	ands	r4, r1
   1545a:	e76f      	b.n	1533c <__aeabi_fmul+0x94>
   1545c:	2080      	movs	r0, #128	; 0x80
   1545e:	03c0      	lsls	r0, r0, #15
   15460:	4207      	tst	r7, r0
   15462:	d007      	beq.n	15474 <__aeabi_fmul+0x1cc>
   15464:	4205      	tst	r5, r0
   15466:	d105      	bne.n	15474 <__aeabi_fmul+0x1cc>
   15468:	4328      	orrs	r0, r5
   1546a:	0240      	lsls	r0, r0, #9
   1546c:	0a40      	lsrs	r0, r0, #9
   1546e:	4644      	mov	r4, r8
   15470:	22ff      	movs	r2, #255	; 0xff
   15472:	e763      	b.n	1533c <__aeabi_fmul+0x94>
   15474:	4338      	orrs	r0, r7
   15476:	0240      	lsls	r0, r0, #9
   15478:	0a40      	lsrs	r0, r0, #9
   1547a:	22ff      	movs	r2, #255	; 0xff
   1547c:	e75e      	b.n	1533c <__aeabi_fmul+0x94>
   1547e:	2401      	movs	r4, #1
   15480:	1aa3      	subs	r3, r4, r2
   15482:	2b1b      	cmp	r3, #27
   15484:	dd05      	ble.n	15492 <__aeabi_fmul+0x1ea>
   15486:	400c      	ands	r4, r1
   15488:	2200      	movs	r2, #0
   1548a:	2000      	movs	r0, #0
   1548c:	e756      	b.n	1533c <__aeabi_fmul+0x94>
   1548e:	465e      	mov	r6, fp
   15490:	e7cb      	b.n	1542a <__aeabi_fmul+0x182>
   15492:	002a      	movs	r2, r5
   15494:	2020      	movs	r0, #32
   15496:	40da      	lsrs	r2, r3
   15498:	1ac3      	subs	r3, r0, r3
   1549a:	409d      	lsls	r5, r3
   1549c:	002b      	movs	r3, r5
   1549e:	1e5d      	subs	r5, r3, #1
   154a0:	41ab      	sbcs	r3, r5
   154a2:	4313      	orrs	r3, r2
   154a4:	075a      	lsls	r2, r3, #29
   154a6:	d004      	beq.n	154b2 <__aeabi_fmul+0x20a>
   154a8:	220f      	movs	r2, #15
   154aa:	401a      	ands	r2, r3
   154ac:	2a04      	cmp	r2, #4
   154ae:	d000      	beq.n	154b2 <__aeabi_fmul+0x20a>
   154b0:	3304      	adds	r3, #4
   154b2:	015a      	lsls	r2, r3, #5
   154b4:	d504      	bpl.n	154c0 <__aeabi_fmul+0x218>
   154b6:	2401      	movs	r4, #1
   154b8:	2201      	movs	r2, #1
   154ba:	400c      	ands	r4, r1
   154bc:	2000      	movs	r0, #0
   154be:	e73d      	b.n	1533c <__aeabi_fmul+0x94>
   154c0:	2401      	movs	r4, #1
   154c2:	019b      	lsls	r3, r3, #6
   154c4:	0a58      	lsrs	r0, r3, #9
   154c6:	400c      	ands	r4, r1
   154c8:	2200      	movs	r2, #0
   154ca:	e737      	b.n	1533c <__aeabi_fmul+0x94>
   154cc:	2080      	movs	r0, #128	; 0x80
   154ce:	2401      	movs	r4, #1
   154d0:	03c0      	lsls	r0, r0, #15
   154d2:	4328      	orrs	r0, r5
   154d4:	0240      	lsls	r0, r0, #9
   154d6:	0a40      	lsrs	r0, r0, #9
   154d8:	400c      	ands	r4, r1
   154da:	22ff      	movs	r2, #255	; 0xff
   154dc:	e72e      	b.n	1533c <__aeabi_fmul+0x94>
   154de:	46c0      	nop			; (mov r8, r8)
   154e0:	0001e158 	.word	0x0001e158
   154e4:	f7ffffff 	.word	0xf7ffffff

000154e8 <__aeabi_fsub>:
   154e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   154ea:	464f      	mov	r7, r9
   154ec:	46d6      	mov	lr, sl
   154ee:	4646      	mov	r6, r8
   154f0:	0044      	lsls	r4, r0, #1
   154f2:	b5c0      	push	{r6, r7, lr}
   154f4:	0fc2      	lsrs	r2, r0, #31
   154f6:	0247      	lsls	r7, r0, #9
   154f8:	0248      	lsls	r0, r1, #9
   154fa:	0a40      	lsrs	r0, r0, #9
   154fc:	4684      	mov	ip, r0
   154fe:	4666      	mov	r6, ip
   15500:	0a7b      	lsrs	r3, r7, #9
   15502:	0048      	lsls	r0, r1, #1
   15504:	0fc9      	lsrs	r1, r1, #31
   15506:	469a      	mov	sl, r3
   15508:	0e24      	lsrs	r4, r4, #24
   1550a:	0015      	movs	r5, r2
   1550c:	00db      	lsls	r3, r3, #3
   1550e:	0e00      	lsrs	r0, r0, #24
   15510:	4689      	mov	r9, r1
   15512:	00f6      	lsls	r6, r6, #3
   15514:	28ff      	cmp	r0, #255	; 0xff
   15516:	d100      	bne.n	1551a <__aeabi_fsub+0x32>
   15518:	e08f      	b.n	1563a <__aeabi_fsub+0x152>
   1551a:	2101      	movs	r1, #1
   1551c:	464f      	mov	r7, r9
   1551e:	404f      	eors	r7, r1
   15520:	0039      	movs	r1, r7
   15522:	4291      	cmp	r1, r2
   15524:	d066      	beq.n	155f4 <__aeabi_fsub+0x10c>
   15526:	1a22      	subs	r2, r4, r0
   15528:	2a00      	cmp	r2, #0
   1552a:	dc00      	bgt.n	1552e <__aeabi_fsub+0x46>
   1552c:	e09d      	b.n	1566a <__aeabi_fsub+0x182>
   1552e:	2800      	cmp	r0, #0
   15530:	d13d      	bne.n	155ae <__aeabi_fsub+0xc6>
   15532:	2e00      	cmp	r6, #0
   15534:	d100      	bne.n	15538 <__aeabi_fsub+0x50>
   15536:	e08b      	b.n	15650 <__aeabi_fsub+0x168>
   15538:	1e51      	subs	r1, r2, #1
   1553a:	2900      	cmp	r1, #0
   1553c:	d000      	beq.n	15540 <__aeabi_fsub+0x58>
   1553e:	e0b5      	b.n	156ac <__aeabi_fsub+0x1c4>
   15540:	2401      	movs	r4, #1
   15542:	1b9b      	subs	r3, r3, r6
   15544:	015a      	lsls	r2, r3, #5
   15546:	d544      	bpl.n	155d2 <__aeabi_fsub+0xea>
   15548:	019b      	lsls	r3, r3, #6
   1554a:	099f      	lsrs	r7, r3, #6
   1554c:	0038      	movs	r0, r7
   1554e:	f001 fff7 	bl	17540 <__clzsi2>
   15552:	3805      	subs	r0, #5
   15554:	4087      	lsls	r7, r0
   15556:	4284      	cmp	r4, r0
   15558:	dd00      	ble.n	1555c <__aeabi_fsub+0x74>
   1555a:	e096      	b.n	1568a <__aeabi_fsub+0x1a2>
   1555c:	1b04      	subs	r4, r0, r4
   1555e:	003a      	movs	r2, r7
   15560:	2020      	movs	r0, #32
   15562:	3401      	adds	r4, #1
   15564:	40e2      	lsrs	r2, r4
   15566:	1b04      	subs	r4, r0, r4
   15568:	40a7      	lsls	r7, r4
   1556a:	003b      	movs	r3, r7
   1556c:	1e5f      	subs	r7, r3, #1
   1556e:	41bb      	sbcs	r3, r7
   15570:	2400      	movs	r4, #0
   15572:	4313      	orrs	r3, r2
   15574:	075a      	lsls	r2, r3, #29
   15576:	d004      	beq.n	15582 <__aeabi_fsub+0x9a>
   15578:	220f      	movs	r2, #15
   1557a:	401a      	ands	r2, r3
   1557c:	2a04      	cmp	r2, #4
   1557e:	d000      	beq.n	15582 <__aeabi_fsub+0x9a>
   15580:	3304      	adds	r3, #4
   15582:	015a      	lsls	r2, r3, #5
   15584:	d527      	bpl.n	155d6 <__aeabi_fsub+0xee>
   15586:	3401      	adds	r4, #1
   15588:	2cff      	cmp	r4, #255	; 0xff
   1558a:	d100      	bne.n	1558e <__aeabi_fsub+0xa6>
   1558c:	e079      	b.n	15682 <__aeabi_fsub+0x19a>
   1558e:	2201      	movs	r2, #1
   15590:	019b      	lsls	r3, r3, #6
   15592:	0a5b      	lsrs	r3, r3, #9
   15594:	b2e4      	uxtb	r4, r4
   15596:	402a      	ands	r2, r5
   15598:	025b      	lsls	r3, r3, #9
   1559a:	05e4      	lsls	r4, r4, #23
   1559c:	0a58      	lsrs	r0, r3, #9
   1559e:	07d2      	lsls	r2, r2, #31
   155a0:	4320      	orrs	r0, r4
   155a2:	4310      	orrs	r0, r2
   155a4:	bc1c      	pop	{r2, r3, r4}
   155a6:	4690      	mov	r8, r2
   155a8:	4699      	mov	r9, r3
   155aa:	46a2      	mov	sl, r4
   155ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155ae:	2cff      	cmp	r4, #255	; 0xff
   155b0:	d0e0      	beq.n	15574 <__aeabi_fsub+0x8c>
   155b2:	2180      	movs	r1, #128	; 0x80
   155b4:	04c9      	lsls	r1, r1, #19
   155b6:	430e      	orrs	r6, r1
   155b8:	2a1b      	cmp	r2, #27
   155ba:	dc7b      	bgt.n	156b4 <__aeabi_fsub+0x1cc>
   155bc:	0031      	movs	r1, r6
   155be:	2020      	movs	r0, #32
   155c0:	40d1      	lsrs	r1, r2
   155c2:	1a82      	subs	r2, r0, r2
   155c4:	4096      	lsls	r6, r2
   155c6:	1e72      	subs	r2, r6, #1
   155c8:	4196      	sbcs	r6, r2
   155ca:	430e      	orrs	r6, r1
   155cc:	1b9b      	subs	r3, r3, r6
   155ce:	015a      	lsls	r2, r3, #5
   155d0:	d4ba      	bmi.n	15548 <__aeabi_fsub+0x60>
   155d2:	075a      	lsls	r2, r3, #29
   155d4:	d1d0      	bne.n	15578 <__aeabi_fsub+0x90>
   155d6:	2201      	movs	r2, #1
   155d8:	08df      	lsrs	r7, r3, #3
   155da:	402a      	ands	r2, r5
   155dc:	2cff      	cmp	r4, #255	; 0xff
   155de:	d133      	bne.n	15648 <__aeabi_fsub+0x160>
   155e0:	2f00      	cmp	r7, #0
   155e2:	d100      	bne.n	155e6 <__aeabi_fsub+0xfe>
   155e4:	e0a8      	b.n	15738 <__aeabi_fsub+0x250>
   155e6:	2380      	movs	r3, #128	; 0x80
   155e8:	03db      	lsls	r3, r3, #15
   155ea:	433b      	orrs	r3, r7
   155ec:	025b      	lsls	r3, r3, #9
   155ee:	0a5b      	lsrs	r3, r3, #9
   155f0:	24ff      	movs	r4, #255	; 0xff
   155f2:	e7d1      	b.n	15598 <__aeabi_fsub+0xb0>
   155f4:	1a21      	subs	r1, r4, r0
   155f6:	2900      	cmp	r1, #0
   155f8:	dd4c      	ble.n	15694 <__aeabi_fsub+0x1ac>
   155fa:	2800      	cmp	r0, #0
   155fc:	d02a      	beq.n	15654 <__aeabi_fsub+0x16c>
   155fe:	2cff      	cmp	r4, #255	; 0xff
   15600:	d0b8      	beq.n	15574 <__aeabi_fsub+0x8c>
   15602:	2080      	movs	r0, #128	; 0x80
   15604:	04c0      	lsls	r0, r0, #19
   15606:	4306      	orrs	r6, r0
   15608:	291b      	cmp	r1, #27
   1560a:	dd00      	ble.n	1560e <__aeabi_fsub+0x126>
   1560c:	e0af      	b.n	1576e <__aeabi_fsub+0x286>
   1560e:	0030      	movs	r0, r6
   15610:	2720      	movs	r7, #32
   15612:	40c8      	lsrs	r0, r1
   15614:	1a79      	subs	r1, r7, r1
   15616:	408e      	lsls	r6, r1
   15618:	1e71      	subs	r1, r6, #1
   1561a:	418e      	sbcs	r6, r1
   1561c:	4306      	orrs	r6, r0
   1561e:	199b      	adds	r3, r3, r6
   15620:	0159      	lsls	r1, r3, #5
   15622:	d5d6      	bpl.n	155d2 <__aeabi_fsub+0xea>
   15624:	3401      	adds	r4, #1
   15626:	2cff      	cmp	r4, #255	; 0xff
   15628:	d100      	bne.n	1562c <__aeabi_fsub+0x144>
   1562a:	e085      	b.n	15738 <__aeabi_fsub+0x250>
   1562c:	2201      	movs	r2, #1
   1562e:	497a      	ldr	r1, [pc, #488]	; (15818 <__aeabi_fsub+0x330>)
   15630:	401a      	ands	r2, r3
   15632:	085b      	lsrs	r3, r3, #1
   15634:	400b      	ands	r3, r1
   15636:	4313      	orrs	r3, r2
   15638:	e79c      	b.n	15574 <__aeabi_fsub+0x8c>
   1563a:	2e00      	cmp	r6, #0
   1563c:	d000      	beq.n	15640 <__aeabi_fsub+0x158>
   1563e:	e770      	b.n	15522 <__aeabi_fsub+0x3a>
   15640:	e76b      	b.n	1551a <__aeabi_fsub+0x32>
   15642:	1e3b      	subs	r3, r7, #0
   15644:	d1c5      	bne.n	155d2 <__aeabi_fsub+0xea>
   15646:	2200      	movs	r2, #0
   15648:	027b      	lsls	r3, r7, #9
   1564a:	0a5b      	lsrs	r3, r3, #9
   1564c:	b2e4      	uxtb	r4, r4
   1564e:	e7a3      	b.n	15598 <__aeabi_fsub+0xb0>
   15650:	0014      	movs	r4, r2
   15652:	e78f      	b.n	15574 <__aeabi_fsub+0x8c>
   15654:	2e00      	cmp	r6, #0
   15656:	d04d      	beq.n	156f4 <__aeabi_fsub+0x20c>
   15658:	1e48      	subs	r0, r1, #1
   1565a:	2800      	cmp	r0, #0
   1565c:	d157      	bne.n	1570e <__aeabi_fsub+0x226>
   1565e:	199b      	adds	r3, r3, r6
   15660:	2401      	movs	r4, #1
   15662:	015a      	lsls	r2, r3, #5
   15664:	d5b5      	bpl.n	155d2 <__aeabi_fsub+0xea>
   15666:	2402      	movs	r4, #2
   15668:	e7e0      	b.n	1562c <__aeabi_fsub+0x144>
   1566a:	2a00      	cmp	r2, #0
   1566c:	d125      	bne.n	156ba <__aeabi_fsub+0x1d2>
   1566e:	1c62      	adds	r2, r4, #1
   15670:	b2d2      	uxtb	r2, r2
   15672:	2a01      	cmp	r2, #1
   15674:	dd72      	ble.n	1575c <__aeabi_fsub+0x274>
   15676:	1b9f      	subs	r7, r3, r6
   15678:	017a      	lsls	r2, r7, #5
   1567a:	d535      	bpl.n	156e8 <__aeabi_fsub+0x200>
   1567c:	1af7      	subs	r7, r6, r3
   1567e:	000d      	movs	r5, r1
   15680:	e764      	b.n	1554c <__aeabi_fsub+0x64>
   15682:	2201      	movs	r2, #1
   15684:	2300      	movs	r3, #0
   15686:	402a      	ands	r2, r5
   15688:	e786      	b.n	15598 <__aeabi_fsub+0xb0>
   1568a:	003b      	movs	r3, r7
   1568c:	4a63      	ldr	r2, [pc, #396]	; (1581c <__aeabi_fsub+0x334>)
   1568e:	1a24      	subs	r4, r4, r0
   15690:	4013      	ands	r3, r2
   15692:	e76f      	b.n	15574 <__aeabi_fsub+0x8c>
   15694:	2900      	cmp	r1, #0
   15696:	d16c      	bne.n	15772 <__aeabi_fsub+0x28a>
   15698:	1c61      	adds	r1, r4, #1
   1569a:	b2c8      	uxtb	r0, r1
   1569c:	2801      	cmp	r0, #1
   1569e:	dd4e      	ble.n	1573e <__aeabi_fsub+0x256>
   156a0:	29ff      	cmp	r1, #255	; 0xff
   156a2:	d049      	beq.n	15738 <__aeabi_fsub+0x250>
   156a4:	199b      	adds	r3, r3, r6
   156a6:	085b      	lsrs	r3, r3, #1
   156a8:	000c      	movs	r4, r1
   156aa:	e763      	b.n	15574 <__aeabi_fsub+0x8c>
   156ac:	2aff      	cmp	r2, #255	; 0xff
   156ae:	d041      	beq.n	15734 <__aeabi_fsub+0x24c>
   156b0:	000a      	movs	r2, r1
   156b2:	e781      	b.n	155b8 <__aeabi_fsub+0xd0>
   156b4:	2601      	movs	r6, #1
   156b6:	1b9b      	subs	r3, r3, r6
   156b8:	e789      	b.n	155ce <__aeabi_fsub+0xe6>
   156ba:	2c00      	cmp	r4, #0
   156bc:	d01c      	beq.n	156f8 <__aeabi_fsub+0x210>
   156be:	28ff      	cmp	r0, #255	; 0xff
   156c0:	d021      	beq.n	15706 <__aeabi_fsub+0x21e>
   156c2:	2480      	movs	r4, #128	; 0x80
   156c4:	04e4      	lsls	r4, r4, #19
   156c6:	4252      	negs	r2, r2
   156c8:	4323      	orrs	r3, r4
   156ca:	2a1b      	cmp	r2, #27
   156cc:	dd00      	ble.n	156d0 <__aeabi_fsub+0x1e8>
   156ce:	e096      	b.n	157fe <__aeabi_fsub+0x316>
   156d0:	001c      	movs	r4, r3
   156d2:	2520      	movs	r5, #32
   156d4:	40d4      	lsrs	r4, r2
   156d6:	1aaa      	subs	r2, r5, r2
   156d8:	4093      	lsls	r3, r2
   156da:	1e5a      	subs	r2, r3, #1
   156dc:	4193      	sbcs	r3, r2
   156de:	4323      	orrs	r3, r4
   156e0:	1af3      	subs	r3, r6, r3
   156e2:	0004      	movs	r4, r0
   156e4:	000d      	movs	r5, r1
   156e6:	e72d      	b.n	15544 <__aeabi_fsub+0x5c>
   156e8:	2f00      	cmp	r7, #0
   156ea:	d000      	beq.n	156ee <__aeabi_fsub+0x206>
   156ec:	e72e      	b.n	1554c <__aeabi_fsub+0x64>
   156ee:	2200      	movs	r2, #0
   156f0:	2400      	movs	r4, #0
   156f2:	e7a9      	b.n	15648 <__aeabi_fsub+0x160>
   156f4:	000c      	movs	r4, r1
   156f6:	e73d      	b.n	15574 <__aeabi_fsub+0x8c>
   156f8:	2b00      	cmp	r3, #0
   156fa:	d058      	beq.n	157ae <__aeabi_fsub+0x2c6>
   156fc:	43d2      	mvns	r2, r2
   156fe:	2a00      	cmp	r2, #0
   15700:	d0ee      	beq.n	156e0 <__aeabi_fsub+0x1f8>
   15702:	28ff      	cmp	r0, #255	; 0xff
   15704:	d1e1      	bne.n	156ca <__aeabi_fsub+0x1e2>
   15706:	0033      	movs	r3, r6
   15708:	24ff      	movs	r4, #255	; 0xff
   1570a:	000d      	movs	r5, r1
   1570c:	e732      	b.n	15574 <__aeabi_fsub+0x8c>
   1570e:	29ff      	cmp	r1, #255	; 0xff
   15710:	d010      	beq.n	15734 <__aeabi_fsub+0x24c>
   15712:	0001      	movs	r1, r0
   15714:	e778      	b.n	15608 <__aeabi_fsub+0x120>
   15716:	2b00      	cmp	r3, #0
   15718:	d06e      	beq.n	157f8 <__aeabi_fsub+0x310>
   1571a:	24ff      	movs	r4, #255	; 0xff
   1571c:	2e00      	cmp	r6, #0
   1571e:	d100      	bne.n	15722 <__aeabi_fsub+0x23a>
   15720:	e728      	b.n	15574 <__aeabi_fsub+0x8c>
   15722:	2280      	movs	r2, #128	; 0x80
   15724:	4651      	mov	r1, sl
   15726:	03d2      	lsls	r2, r2, #15
   15728:	4211      	tst	r1, r2
   1572a:	d003      	beq.n	15734 <__aeabi_fsub+0x24c>
   1572c:	4661      	mov	r1, ip
   1572e:	4211      	tst	r1, r2
   15730:	d100      	bne.n	15734 <__aeabi_fsub+0x24c>
   15732:	0033      	movs	r3, r6
   15734:	24ff      	movs	r4, #255	; 0xff
   15736:	e71d      	b.n	15574 <__aeabi_fsub+0x8c>
   15738:	24ff      	movs	r4, #255	; 0xff
   1573a:	2300      	movs	r3, #0
   1573c:	e72c      	b.n	15598 <__aeabi_fsub+0xb0>
   1573e:	2c00      	cmp	r4, #0
   15740:	d1e9      	bne.n	15716 <__aeabi_fsub+0x22e>
   15742:	2b00      	cmp	r3, #0
   15744:	d063      	beq.n	1580e <__aeabi_fsub+0x326>
   15746:	2e00      	cmp	r6, #0
   15748:	d100      	bne.n	1574c <__aeabi_fsub+0x264>
   1574a:	e713      	b.n	15574 <__aeabi_fsub+0x8c>
   1574c:	199b      	adds	r3, r3, r6
   1574e:	015a      	lsls	r2, r3, #5
   15750:	d400      	bmi.n	15754 <__aeabi_fsub+0x26c>
   15752:	e73e      	b.n	155d2 <__aeabi_fsub+0xea>
   15754:	4a31      	ldr	r2, [pc, #196]	; (1581c <__aeabi_fsub+0x334>)
   15756:	000c      	movs	r4, r1
   15758:	4013      	ands	r3, r2
   1575a:	e70b      	b.n	15574 <__aeabi_fsub+0x8c>
   1575c:	2c00      	cmp	r4, #0
   1575e:	d11e      	bne.n	1579e <__aeabi_fsub+0x2b6>
   15760:	2b00      	cmp	r3, #0
   15762:	d12f      	bne.n	157c4 <__aeabi_fsub+0x2dc>
   15764:	2e00      	cmp	r6, #0
   15766:	d04f      	beq.n	15808 <__aeabi_fsub+0x320>
   15768:	0033      	movs	r3, r6
   1576a:	000d      	movs	r5, r1
   1576c:	e702      	b.n	15574 <__aeabi_fsub+0x8c>
   1576e:	2601      	movs	r6, #1
   15770:	e755      	b.n	1561e <__aeabi_fsub+0x136>
   15772:	2c00      	cmp	r4, #0
   15774:	d11f      	bne.n	157b6 <__aeabi_fsub+0x2ce>
   15776:	2b00      	cmp	r3, #0
   15778:	d043      	beq.n	15802 <__aeabi_fsub+0x31a>
   1577a:	43c9      	mvns	r1, r1
   1577c:	2900      	cmp	r1, #0
   1577e:	d00b      	beq.n	15798 <__aeabi_fsub+0x2b0>
   15780:	28ff      	cmp	r0, #255	; 0xff
   15782:	d039      	beq.n	157f8 <__aeabi_fsub+0x310>
   15784:	291b      	cmp	r1, #27
   15786:	dc44      	bgt.n	15812 <__aeabi_fsub+0x32a>
   15788:	001c      	movs	r4, r3
   1578a:	2720      	movs	r7, #32
   1578c:	40cc      	lsrs	r4, r1
   1578e:	1a79      	subs	r1, r7, r1
   15790:	408b      	lsls	r3, r1
   15792:	1e59      	subs	r1, r3, #1
   15794:	418b      	sbcs	r3, r1
   15796:	4323      	orrs	r3, r4
   15798:	199b      	adds	r3, r3, r6
   1579a:	0004      	movs	r4, r0
   1579c:	e740      	b.n	15620 <__aeabi_fsub+0x138>
   1579e:	2b00      	cmp	r3, #0
   157a0:	d11a      	bne.n	157d8 <__aeabi_fsub+0x2f0>
   157a2:	2e00      	cmp	r6, #0
   157a4:	d124      	bne.n	157f0 <__aeabi_fsub+0x308>
   157a6:	2780      	movs	r7, #128	; 0x80
   157a8:	2200      	movs	r2, #0
   157aa:	03ff      	lsls	r7, r7, #15
   157ac:	e71b      	b.n	155e6 <__aeabi_fsub+0xfe>
   157ae:	0033      	movs	r3, r6
   157b0:	0004      	movs	r4, r0
   157b2:	000d      	movs	r5, r1
   157b4:	e6de      	b.n	15574 <__aeabi_fsub+0x8c>
   157b6:	28ff      	cmp	r0, #255	; 0xff
   157b8:	d01e      	beq.n	157f8 <__aeabi_fsub+0x310>
   157ba:	2480      	movs	r4, #128	; 0x80
   157bc:	04e4      	lsls	r4, r4, #19
   157be:	4249      	negs	r1, r1
   157c0:	4323      	orrs	r3, r4
   157c2:	e7df      	b.n	15784 <__aeabi_fsub+0x29c>
   157c4:	2e00      	cmp	r6, #0
   157c6:	d100      	bne.n	157ca <__aeabi_fsub+0x2e2>
   157c8:	e6d4      	b.n	15574 <__aeabi_fsub+0x8c>
   157ca:	1b9f      	subs	r7, r3, r6
   157cc:	017a      	lsls	r2, r7, #5
   157ce:	d400      	bmi.n	157d2 <__aeabi_fsub+0x2ea>
   157d0:	e737      	b.n	15642 <__aeabi_fsub+0x15a>
   157d2:	1af3      	subs	r3, r6, r3
   157d4:	000d      	movs	r5, r1
   157d6:	e6cd      	b.n	15574 <__aeabi_fsub+0x8c>
   157d8:	24ff      	movs	r4, #255	; 0xff
   157da:	2e00      	cmp	r6, #0
   157dc:	d100      	bne.n	157e0 <__aeabi_fsub+0x2f8>
   157de:	e6c9      	b.n	15574 <__aeabi_fsub+0x8c>
   157e0:	2280      	movs	r2, #128	; 0x80
   157e2:	4650      	mov	r0, sl
   157e4:	03d2      	lsls	r2, r2, #15
   157e6:	4210      	tst	r0, r2
   157e8:	d0a4      	beq.n	15734 <__aeabi_fsub+0x24c>
   157ea:	4660      	mov	r0, ip
   157ec:	4210      	tst	r0, r2
   157ee:	d1a1      	bne.n	15734 <__aeabi_fsub+0x24c>
   157f0:	0033      	movs	r3, r6
   157f2:	000d      	movs	r5, r1
   157f4:	24ff      	movs	r4, #255	; 0xff
   157f6:	e6bd      	b.n	15574 <__aeabi_fsub+0x8c>
   157f8:	0033      	movs	r3, r6
   157fa:	24ff      	movs	r4, #255	; 0xff
   157fc:	e6ba      	b.n	15574 <__aeabi_fsub+0x8c>
   157fe:	2301      	movs	r3, #1
   15800:	e76e      	b.n	156e0 <__aeabi_fsub+0x1f8>
   15802:	0033      	movs	r3, r6
   15804:	0004      	movs	r4, r0
   15806:	e6b5      	b.n	15574 <__aeabi_fsub+0x8c>
   15808:	2700      	movs	r7, #0
   1580a:	2200      	movs	r2, #0
   1580c:	e71c      	b.n	15648 <__aeabi_fsub+0x160>
   1580e:	0033      	movs	r3, r6
   15810:	e6b0      	b.n	15574 <__aeabi_fsub+0x8c>
   15812:	2301      	movs	r3, #1
   15814:	e7c0      	b.n	15798 <__aeabi_fsub+0x2b0>
   15816:	46c0      	nop			; (mov r8, r8)
   15818:	7dffffff 	.word	0x7dffffff
   1581c:	fbffffff 	.word	0xfbffffff

00015820 <__aeabi_f2iz>:
   15820:	0241      	lsls	r1, r0, #9
   15822:	0043      	lsls	r3, r0, #1
   15824:	0fc2      	lsrs	r2, r0, #31
   15826:	0a49      	lsrs	r1, r1, #9
   15828:	0e1b      	lsrs	r3, r3, #24
   1582a:	2000      	movs	r0, #0
   1582c:	2b7e      	cmp	r3, #126	; 0x7e
   1582e:	dd0d      	ble.n	1584c <__aeabi_f2iz+0x2c>
   15830:	2b9d      	cmp	r3, #157	; 0x9d
   15832:	dc0c      	bgt.n	1584e <__aeabi_f2iz+0x2e>
   15834:	2080      	movs	r0, #128	; 0x80
   15836:	0400      	lsls	r0, r0, #16
   15838:	4301      	orrs	r1, r0
   1583a:	2b95      	cmp	r3, #149	; 0x95
   1583c:	dc0a      	bgt.n	15854 <__aeabi_f2iz+0x34>
   1583e:	2096      	movs	r0, #150	; 0x96
   15840:	1ac3      	subs	r3, r0, r3
   15842:	40d9      	lsrs	r1, r3
   15844:	4248      	negs	r0, r1
   15846:	2a00      	cmp	r2, #0
   15848:	d100      	bne.n	1584c <__aeabi_f2iz+0x2c>
   1584a:	0008      	movs	r0, r1
   1584c:	4770      	bx	lr
   1584e:	4b03      	ldr	r3, [pc, #12]	; (1585c <__aeabi_f2iz+0x3c>)
   15850:	18d0      	adds	r0, r2, r3
   15852:	e7fb      	b.n	1584c <__aeabi_f2iz+0x2c>
   15854:	3b96      	subs	r3, #150	; 0x96
   15856:	4099      	lsls	r1, r3
   15858:	e7f4      	b.n	15844 <__aeabi_f2iz+0x24>
   1585a:	46c0      	nop			; (mov r8, r8)
   1585c:	7fffffff 	.word	0x7fffffff

00015860 <__aeabi_i2f>:
   15860:	b570      	push	{r4, r5, r6, lr}
   15862:	2800      	cmp	r0, #0
   15864:	d030      	beq.n	158c8 <__aeabi_i2f+0x68>
   15866:	17c3      	asrs	r3, r0, #31
   15868:	18c4      	adds	r4, r0, r3
   1586a:	405c      	eors	r4, r3
   1586c:	0fc5      	lsrs	r5, r0, #31
   1586e:	0020      	movs	r0, r4
   15870:	f001 fe66 	bl	17540 <__clzsi2>
   15874:	239e      	movs	r3, #158	; 0x9e
   15876:	1a1b      	subs	r3, r3, r0
   15878:	2b96      	cmp	r3, #150	; 0x96
   1587a:	dc0d      	bgt.n	15898 <__aeabi_i2f+0x38>
   1587c:	2296      	movs	r2, #150	; 0x96
   1587e:	1ad2      	subs	r2, r2, r3
   15880:	4094      	lsls	r4, r2
   15882:	002a      	movs	r2, r5
   15884:	0264      	lsls	r4, r4, #9
   15886:	0a64      	lsrs	r4, r4, #9
   15888:	b2db      	uxtb	r3, r3
   1588a:	0264      	lsls	r4, r4, #9
   1588c:	05db      	lsls	r3, r3, #23
   1588e:	0a60      	lsrs	r0, r4, #9
   15890:	07d2      	lsls	r2, r2, #31
   15892:	4318      	orrs	r0, r3
   15894:	4310      	orrs	r0, r2
   15896:	bd70      	pop	{r4, r5, r6, pc}
   15898:	2b99      	cmp	r3, #153	; 0x99
   1589a:	dc19      	bgt.n	158d0 <__aeabi_i2f+0x70>
   1589c:	2299      	movs	r2, #153	; 0x99
   1589e:	1ad2      	subs	r2, r2, r3
   158a0:	2a00      	cmp	r2, #0
   158a2:	dd29      	ble.n	158f8 <__aeabi_i2f+0x98>
   158a4:	4094      	lsls	r4, r2
   158a6:	0022      	movs	r2, r4
   158a8:	4c14      	ldr	r4, [pc, #80]	; (158fc <__aeabi_i2f+0x9c>)
   158aa:	4014      	ands	r4, r2
   158ac:	0751      	lsls	r1, r2, #29
   158ae:	d004      	beq.n	158ba <__aeabi_i2f+0x5a>
   158b0:	210f      	movs	r1, #15
   158b2:	400a      	ands	r2, r1
   158b4:	2a04      	cmp	r2, #4
   158b6:	d000      	beq.n	158ba <__aeabi_i2f+0x5a>
   158b8:	3404      	adds	r4, #4
   158ba:	0162      	lsls	r2, r4, #5
   158bc:	d413      	bmi.n	158e6 <__aeabi_i2f+0x86>
   158be:	01a4      	lsls	r4, r4, #6
   158c0:	0a64      	lsrs	r4, r4, #9
   158c2:	b2db      	uxtb	r3, r3
   158c4:	002a      	movs	r2, r5
   158c6:	e7e0      	b.n	1588a <__aeabi_i2f+0x2a>
   158c8:	2200      	movs	r2, #0
   158ca:	2300      	movs	r3, #0
   158cc:	2400      	movs	r4, #0
   158ce:	e7dc      	b.n	1588a <__aeabi_i2f+0x2a>
   158d0:	2205      	movs	r2, #5
   158d2:	0021      	movs	r1, r4
   158d4:	1a12      	subs	r2, r2, r0
   158d6:	40d1      	lsrs	r1, r2
   158d8:	22b9      	movs	r2, #185	; 0xb9
   158da:	1ad2      	subs	r2, r2, r3
   158dc:	4094      	lsls	r4, r2
   158de:	1e62      	subs	r2, r4, #1
   158e0:	4194      	sbcs	r4, r2
   158e2:	430c      	orrs	r4, r1
   158e4:	e7da      	b.n	1589c <__aeabi_i2f+0x3c>
   158e6:	4b05      	ldr	r3, [pc, #20]	; (158fc <__aeabi_i2f+0x9c>)
   158e8:	002a      	movs	r2, r5
   158ea:	401c      	ands	r4, r3
   158ec:	239f      	movs	r3, #159	; 0x9f
   158ee:	01a4      	lsls	r4, r4, #6
   158f0:	1a1b      	subs	r3, r3, r0
   158f2:	0a64      	lsrs	r4, r4, #9
   158f4:	b2db      	uxtb	r3, r3
   158f6:	e7c8      	b.n	1588a <__aeabi_i2f+0x2a>
   158f8:	0022      	movs	r2, r4
   158fa:	e7d5      	b.n	158a8 <__aeabi_i2f+0x48>
   158fc:	fbffffff 	.word	0xfbffffff

00015900 <__aeabi_ui2f>:
   15900:	b510      	push	{r4, lr}
   15902:	1e04      	subs	r4, r0, #0
   15904:	d027      	beq.n	15956 <__aeabi_ui2f+0x56>
   15906:	f001 fe1b 	bl	17540 <__clzsi2>
   1590a:	239e      	movs	r3, #158	; 0x9e
   1590c:	1a1b      	subs	r3, r3, r0
   1590e:	2b96      	cmp	r3, #150	; 0x96
   15910:	dc0a      	bgt.n	15928 <__aeabi_ui2f+0x28>
   15912:	2296      	movs	r2, #150	; 0x96
   15914:	1ad2      	subs	r2, r2, r3
   15916:	4094      	lsls	r4, r2
   15918:	0264      	lsls	r4, r4, #9
   1591a:	0a64      	lsrs	r4, r4, #9
   1591c:	b2db      	uxtb	r3, r3
   1591e:	0264      	lsls	r4, r4, #9
   15920:	05db      	lsls	r3, r3, #23
   15922:	0a60      	lsrs	r0, r4, #9
   15924:	4318      	orrs	r0, r3
   15926:	bd10      	pop	{r4, pc}
   15928:	2b99      	cmp	r3, #153	; 0x99
   1592a:	dc17      	bgt.n	1595c <__aeabi_ui2f+0x5c>
   1592c:	2299      	movs	r2, #153	; 0x99
   1592e:	1ad2      	subs	r2, r2, r3
   15930:	2a00      	cmp	r2, #0
   15932:	dd27      	ble.n	15984 <__aeabi_ui2f+0x84>
   15934:	4094      	lsls	r4, r2
   15936:	0022      	movs	r2, r4
   15938:	4c13      	ldr	r4, [pc, #76]	; (15988 <__aeabi_ui2f+0x88>)
   1593a:	4014      	ands	r4, r2
   1593c:	0751      	lsls	r1, r2, #29
   1593e:	d004      	beq.n	1594a <__aeabi_ui2f+0x4a>
   15940:	210f      	movs	r1, #15
   15942:	400a      	ands	r2, r1
   15944:	2a04      	cmp	r2, #4
   15946:	d000      	beq.n	1594a <__aeabi_ui2f+0x4a>
   15948:	3404      	adds	r4, #4
   1594a:	0162      	lsls	r2, r4, #5
   1594c:	d412      	bmi.n	15974 <__aeabi_ui2f+0x74>
   1594e:	01a4      	lsls	r4, r4, #6
   15950:	0a64      	lsrs	r4, r4, #9
   15952:	b2db      	uxtb	r3, r3
   15954:	e7e3      	b.n	1591e <__aeabi_ui2f+0x1e>
   15956:	2300      	movs	r3, #0
   15958:	2400      	movs	r4, #0
   1595a:	e7e0      	b.n	1591e <__aeabi_ui2f+0x1e>
   1595c:	22b9      	movs	r2, #185	; 0xb9
   1595e:	0021      	movs	r1, r4
   15960:	1ad2      	subs	r2, r2, r3
   15962:	4091      	lsls	r1, r2
   15964:	000a      	movs	r2, r1
   15966:	1e51      	subs	r1, r2, #1
   15968:	418a      	sbcs	r2, r1
   1596a:	2105      	movs	r1, #5
   1596c:	1a09      	subs	r1, r1, r0
   1596e:	40cc      	lsrs	r4, r1
   15970:	4314      	orrs	r4, r2
   15972:	e7db      	b.n	1592c <__aeabi_ui2f+0x2c>
   15974:	4b04      	ldr	r3, [pc, #16]	; (15988 <__aeabi_ui2f+0x88>)
   15976:	401c      	ands	r4, r3
   15978:	239f      	movs	r3, #159	; 0x9f
   1597a:	01a4      	lsls	r4, r4, #6
   1597c:	1a1b      	subs	r3, r3, r0
   1597e:	0a64      	lsrs	r4, r4, #9
   15980:	b2db      	uxtb	r3, r3
   15982:	e7cc      	b.n	1591e <__aeabi_ui2f+0x1e>
   15984:	0022      	movs	r2, r4
   15986:	e7d7      	b.n	15938 <__aeabi_ui2f+0x38>
   15988:	fbffffff 	.word	0xfbffffff

0001598c <__aeabi_dadd>:
   1598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1598e:	4645      	mov	r5, r8
   15990:	46de      	mov	lr, fp
   15992:	4657      	mov	r7, sl
   15994:	464e      	mov	r6, r9
   15996:	030c      	lsls	r4, r1, #12
   15998:	b5e0      	push	{r5, r6, r7, lr}
   1599a:	004e      	lsls	r6, r1, #1
   1599c:	0fc9      	lsrs	r1, r1, #31
   1599e:	4688      	mov	r8, r1
   159a0:	000d      	movs	r5, r1
   159a2:	0a61      	lsrs	r1, r4, #9
   159a4:	0f44      	lsrs	r4, r0, #29
   159a6:	430c      	orrs	r4, r1
   159a8:	00c7      	lsls	r7, r0, #3
   159aa:	0319      	lsls	r1, r3, #12
   159ac:	0058      	lsls	r0, r3, #1
   159ae:	0fdb      	lsrs	r3, r3, #31
   159b0:	469b      	mov	fp, r3
   159b2:	0a4b      	lsrs	r3, r1, #9
   159b4:	0f51      	lsrs	r1, r2, #29
   159b6:	430b      	orrs	r3, r1
   159b8:	0d76      	lsrs	r6, r6, #21
   159ba:	0d40      	lsrs	r0, r0, #21
   159bc:	0019      	movs	r1, r3
   159be:	00d2      	lsls	r2, r2, #3
   159c0:	45d8      	cmp	r8, fp
   159c2:	d100      	bne.n	159c6 <__aeabi_dadd+0x3a>
   159c4:	e0ae      	b.n	15b24 <__aeabi_dadd+0x198>
   159c6:	1a35      	subs	r5, r6, r0
   159c8:	2d00      	cmp	r5, #0
   159ca:	dc00      	bgt.n	159ce <__aeabi_dadd+0x42>
   159cc:	e0f6      	b.n	15bbc <__aeabi_dadd+0x230>
   159ce:	2800      	cmp	r0, #0
   159d0:	d10f      	bne.n	159f2 <__aeabi_dadd+0x66>
   159d2:	4313      	orrs	r3, r2
   159d4:	d100      	bne.n	159d8 <__aeabi_dadd+0x4c>
   159d6:	e0db      	b.n	15b90 <__aeabi_dadd+0x204>
   159d8:	1e6b      	subs	r3, r5, #1
   159da:	2b00      	cmp	r3, #0
   159dc:	d000      	beq.n	159e0 <__aeabi_dadd+0x54>
   159de:	e137      	b.n	15c50 <__aeabi_dadd+0x2c4>
   159e0:	1aba      	subs	r2, r7, r2
   159e2:	4297      	cmp	r7, r2
   159e4:	41bf      	sbcs	r7, r7
   159e6:	1a64      	subs	r4, r4, r1
   159e8:	427f      	negs	r7, r7
   159ea:	1be4      	subs	r4, r4, r7
   159ec:	2601      	movs	r6, #1
   159ee:	0017      	movs	r7, r2
   159f0:	e024      	b.n	15a3c <__aeabi_dadd+0xb0>
   159f2:	4bc6      	ldr	r3, [pc, #792]	; (15d0c <__aeabi_dadd+0x380>)
   159f4:	429e      	cmp	r6, r3
   159f6:	d04d      	beq.n	15a94 <__aeabi_dadd+0x108>
   159f8:	2380      	movs	r3, #128	; 0x80
   159fa:	041b      	lsls	r3, r3, #16
   159fc:	4319      	orrs	r1, r3
   159fe:	2d38      	cmp	r5, #56	; 0x38
   15a00:	dd00      	ble.n	15a04 <__aeabi_dadd+0x78>
   15a02:	e107      	b.n	15c14 <__aeabi_dadd+0x288>
   15a04:	2d1f      	cmp	r5, #31
   15a06:	dd00      	ble.n	15a0a <__aeabi_dadd+0x7e>
   15a08:	e138      	b.n	15c7c <__aeabi_dadd+0x2f0>
   15a0a:	2020      	movs	r0, #32
   15a0c:	1b43      	subs	r3, r0, r5
   15a0e:	469a      	mov	sl, r3
   15a10:	000b      	movs	r3, r1
   15a12:	4650      	mov	r0, sl
   15a14:	4083      	lsls	r3, r0
   15a16:	4699      	mov	r9, r3
   15a18:	0013      	movs	r3, r2
   15a1a:	4648      	mov	r0, r9
   15a1c:	40eb      	lsrs	r3, r5
   15a1e:	4318      	orrs	r0, r3
   15a20:	0003      	movs	r3, r0
   15a22:	4650      	mov	r0, sl
   15a24:	4082      	lsls	r2, r0
   15a26:	1e50      	subs	r0, r2, #1
   15a28:	4182      	sbcs	r2, r0
   15a2a:	40e9      	lsrs	r1, r5
   15a2c:	431a      	orrs	r2, r3
   15a2e:	1aba      	subs	r2, r7, r2
   15a30:	1a61      	subs	r1, r4, r1
   15a32:	4297      	cmp	r7, r2
   15a34:	41a4      	sbcs	r4, r4
   15a36:	0017      	movs	r7, r2
   15a38:	4264      	negs	r4, r4
   15a3a:	1b0c      	subs	r4, r1, r4
   15a3c:	0223      	lsls	r3, r4, #8
   15a3e:	d562      	bpl.n	15b06 <__aeabi_dadd+0x17a>
   15a40:	0264      	lsls	r4, r4, #9
   15a42:	0a65      	lsrs	r5, r4, #9
   15a44:	2d00      	cmp	r5, #0
   15a46:	d100      	bne.n	15a4a <__aeabi_dadd+0xbe>
   15a48:	e0df      	b.n	15c0a <__aeabi_dadd+0x27e>
   15a4a:	0028      	movs	r0, r5
   15a4c:	f001 fd78 	bl	17540 <__clzsi2>
   15a50:	0003      	movs	r3, r0
   15a52:	3b08      	subs	r3, #8
   15a54:	2b1f      	cmp	r3, #31
   15a56:	dd00      	ble.n	15a5a <__aeabi_dadd+0xce>
   15a58:	e0d2      	b.n	15c00 <__aeabi_dadd+0x274>
   15a5a:	2220      	movs	r2, #32
   15a5c:	003c      	movs	r4, r7
   15a5e:	1ad2      	subs	r2, r2, r3
   15a60:	409d      	lsls	r5, r3
   15a62:	40d4      	lsrs	r4, r2
   15a64:	409f      	lsls	r7, r3
   15a66:	4325      	orrs	r5, r4
   15a68:	429e      	cmp	r6, r3
   15a6a:	dd00      	ble.n	15a6e <__aeabi_dadd+0xe2>
   15a6c:	e0c4      	b.n	15bf8 <__aeabi_dadd+0x26c>
   15a6e:	1b9e      	subs	r6, r3, r6
   15a70:	1c73      	adds	r3, r6, #1
   15a72:	2b1f      	cmp	r3, #31
   15a74:	dd00      	ble.n	15a78 <__aeabi_dadd+0xec>
   15a76:	e0f1      	b.n	15c5c <__aeabi_dadd+0x2d0>
   15a78:	2220      	movs	r2, #32
   15a7a:	0038      	movs	r0, r7
   15a7c:	0029      	movs	r1, r5
   15a7e:	1ad2      	subs	r2, r2, r3
   15a80:	40d8      	lsrs	r0, r3
   15a82:	4091      	lsls	r1, r2
   15a84:	4097      	lsls	r7, r2
   15a86:	002c      	movs	r4, r5
   15a88:	4301      	orrs	r1, r0
   15a8a:	1e78      	subs	r0, r7, #1
   15a8c:	4187      	sbcs	r7, r0
   15a8e:	40dc      	lsrs	r4, r3
   15a90:	2600      	movs	r6, #0
   15a92:	430f      	orrs	r7, r1
   15a94:	077b      	lsls	r3, r7, #29
   15a96:	d009      	beq.n	15aac <__aeabi_dadd+0x120>
   15a98:	230f      	movs	r3, #15
   15a9a:	403b      	ands	r3, r7
   15a9c:	2b04      	cmp	r3, #4
   15a9e:	d005      	beq.n	15aac <__aeabi_dadd+0x120>
   15aa0:	1d3b      	adds	r3, r7, #4
   15aa2:	42bb      	cmp	r3, r7
   15aa4:	41bf      	sbcs	r7, r7
   15aa6:	427f      	negs	r7, r7
   15aa8:	19e4      	adds	r4, r4, r7
   15aaa:	001f      	movs	r7, r3
   15aac:	0223      	lsls	r3, r4, #8
   15aae:	d52c      	bpl.n	15b0a <__aeabi_dadd+0x17e>
   15ab0:	4b96      	ldr	r3, [pc, #600]	; (15d0c <__aeabi_dadd+0x380>)
   15ab2:	3601      	adds	r6, #1
   15ab4:	429e      	cmp	r6, r3
   15ab6:	d100      	bne.n	15aba <__aeabi_dadd+0x12e>
   15ab8:	e09a      	b.n	15bf0 <__aeabi_dadd+0x264>
   15aba:	4645      	mov	r5, r8
   15abc:	4b94      	ldr	r3, [pc, #592]	; (15d10 <__aeabi_dadd+0x384>)
   15abe:	08ff      	lsrs	r7, r7, #3
   15ac0:	401c      	ands	r4, r3
   15ac2:	0760      	lsls	r0, r4, #29
   15ac4:	0576      	lsls	r6, r6, #21
   15ac6:	0264      	lsls	r4, r4, #9
   15ac8:	4307      	orrs	r7, r0
   15aca:	0b24      	lsrs	r4, r4, #12
   15acc:	0d76      	lsrs	r6, r6, #21
   15ace:	2100      	movs	r1, #0
   15ad0:	0324      	lsls	r4, r4, #12
   15ad2:	0b23      	lsrs	r3, r4, #12
   15ad4:	0d0c      	lsrs	r4, r1, #20
   15ad6:	4a8f      	ldr	r2, [pc, #572]	; (15d14 <__aeabi_dadd+0x388>)
   15ad8:	0524      	lsls	r4, r4, #20
   15ada:	431c      	orrs	r4, r3
   15adc:	4014      	ands	r4, r2
   15ade:	0533      	lsls	r3, r6, #20
   15ae0:	4323      	orrs	r3, r4
   15ae2:	005b      	lsls	r3, r3, #1
   15ae4:	07ed      	lsls	r5, r5, #31
   15ae6:	085b      	lsrs	r3, r3, #1
   15ae8:	432b      	orrs	r3, r5
   15aea:	0038      	movs	r0, r7
   15aec:	0019      	movs	r1, r3
   15aee:	bc3c      	pop	{r2, r3, r4, r5}
   15af0:	4690      	mov	r8, r2
   15af2:	4699      	mov	r9, r3
   15af4:	46a2      	mov	sl, r4
   15af6:	46ab      	mov	fp, r5
   15af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15afa:	4664      	mov	r4, ip
   15afc:	4304      	orrs	r4, r0
   15afe:	d100      	bne.n	15b02 <__aeabi_dadd+0x176>
   15b00:	e211      	b.n	15f26 <__aeabi_dadd+0x59a>
   15b02:	0004      	movs	r4, r0
   15b04:	4667      	mov	r7, ip
   15b06:	077b      	lsls	r3, r7, #29
   15b08:	d1c6      	bne.n	15a98 <__aeabi_dadd+0x10c>
   15b0a:	4645      	mov	r5, r8
   15b0c:	0760      	lsls	r0, r4, #29
   15b0e:	08ff      	lsrs	r7, r7, #3
   15b10:	4307      	orrs	r7, r0
   15b12:	08e4      	lsrs	r4, r4, #3
   15b14:	4b7d      	ldr	r3, [pc, #500]	; (15d0c <__aeabi_dadd+0x380>)
   15b16:	429e      	cmp	r6, r3
   15b18:	d030      	beq.n	15b7c <__aeabi_dadd+0x1f0>
   15b1a:	0324      	lsls	r4, r4, #12
   15b1c:	0576      	lsls	r6, r6, #21
   15b1e:	0b24      	lsrs	r4, r4, #12
   15b20:	0d76      	lsrs	r6, r6, #21
   15b22:	e7d4      	b.n	15ace <__aeabi_dadd+0x142>
   15b24:	1a33      	subs	r3, r6, r0
   15b26:	469a      	mov	sl, r3
   15b28:	2b00      	cmp	r3, #0
   15b2a:	dd78      	ble.n	15c1e <__aeabi_dadd+0x292>
   15b2c:	2800      	cmp	r0, #0
   15b2e:	d031      	beq.n	15b94 <__aeabi_dadd+0x208>
   15b30:	4876      	ldr	r0, [pc, #472]	; (15d0c <__aeabi_dadd+0x380>)
   15b32:	4286      	cmp	r6, r0
   15b34:	d0ae      	beq.n	15a94 <__aeabi_dadd+0x108>
   15b36:	2080      	movs	r0, #128	; 0x80
   15b38:	0400      	lsls	r0, r0, #16
   15b3a:	4301      	orrs	r1, r0
   15b3c:	4653      	mov	r3, sl
   15b3e:	2b38      	cmp	r3, #56	; 0x38
   15b40:	dc00      	bgt.n	15b44 <__aeabi_dadd+0x1b8>
   15b42:	e0e9      	b.n	15d18 <__aeabi_dadd+0x38c>
   15b44:	430a      	orrs	r2, r1
   15b46:	1e51      	subs	r1, r2, #1
   15b48:	418a      	sbcs	r2, r1
   15b4a:	2100      	movs	r1, #0
   15b4c:	19d2      	adds	r2, r2, r7
   15b4e:	42ba      	cmp	r2, r7
   15b50:	41bf      	sbcs	r7, r7
   15b52:	1909      	adds	r1, r1, r4
   15b54:	427c      	negs	r4, r7
   15b56:	0017      	movs	r7, r2
   15b58:	190c      	adds	r4, r1, r4
   15b5a:	0223      	lsls	r3, r4, #8
   15b5c:	d5d3      	bpl.n	15b06 <__aeabi_dadd+0x17a>
   15b5e:	4b6b      	ldr	r3, [pc, #428]	; (15d0c <__aeabi_dadd+0x380>)
   15b60:	3601      	adds	r6, #1
   15b62:	429e      	cmp	r6, r3
   15b64:	d100      	bne.n	15b68 <__aeabi_dadd+0x1dc>
   15b66:	e13a      	b.n	15dde <__aeabi_dadd+0x452>
   15b68:	2001      	movs	r0, #1
   15b6a:	4b69      	ldr	r3, [pc, #420]	; (15d10 <__aeabi_dadd+0x384>)
   15b6c:	401c      	ands	r4, r3
   15b6e:	087b      	lsrs	r3, r7, #1
   15b70:	4007      	ands	r7, r0
   15b72:	431f      	orrs	r7, r3
   15b74:	07e0      	lsls	r0, r4, #31
   15b76:	4307      	orrs	r7, r0
   15b78:	0864      	lsrs	r4, r4, #1
   15b7a:	e78b      	b.n	15a94 <__aeabi_dadd+0x108>
   15b7c:	0023      	movs	r3, r4
   15b7e:	433b      	orrs	r3, r7
   15b80:	d100      	bne.n	15b84 <__aeabi_dadd+0x1f8>
   15b82:	e1cb      	b.n	15f1c <__aeabi_dadd+0x590>
   15b84:	2280      	movs	r2, #128	; 0x80
   15b86:	0312      	lsls	r2, r2, #12
   15b88:	4314      	orrs	r4, r2
   15b8a:	0324      	lsls	r4, r4, #12
   15b8c:	0b24      	lsrs	r4, r4, #12
   15b8e:	e79e      	b.n	15ace <__aeabi_dadd+0x142>
   15b90:	002e      	movs	r6, r5
   15b92:	e77f      	b.n	15a94 <__aeabi_dadd+0x108>
   15b94:	0008      	movs	r0, r1
   15b96:	4310      	orrs	r0, r2
   15b98:	d100      	bne.n	15b9c <__aeabi_dadd+0x210>
   15b9a:	e0b4      	b.n	15d06 <__aeabi_dadd+0x37a>
   15b9c:	1e58      	subs	r0, r3, #1
   15b9e:	2800      	cmp	r0, #0
   15ba0:	d000      	beq.n	15ba4 <__aeabi_dadd+0x218>
   15ba2:	e0de      	b.n	15d62 <__aeabi_dadd+0x3d6>
   15ba4:	18ba      	adds	r2, r7, r2
   15ba6:	42ba      	cmp	r2, r7
   15ba8:	419b      	sbcs	r3, r3
   15baa:	1864      	adds	r4, r4, r1
   15bac:	425b      	negs	r3, r3
   15bae:	18e4      	adds	r4, r4, r3
   15bb0:	0017      	movs	r7, r2
   15bb2:	2601      	movs	r6, #1
   15bb4:	0223      	lsls	r3, r4, #8
   15bb6:	d5a6      	bpl.n	15b06 <__aeabi_dadd+0x17a>
   15bb8:	2602      	movs	r6, #2
   15bba:	e7d5      	b.n	15b68 <__aeabi_dadd+0x1dc>
   15bbc:	2d00      	cmp	r5, #0
   15bbe:	d16e      	bne.n	15c9e <__aeabi_dadd+0x312>
   15bc0:	1c70      	adds	r0, r6, #1
   15bc2:	0540      	lsls	r0, r0, #21
   15bc4:	0d40      	lsrs	r0, r0, #21
   15bc6:	2801      	cmp	r0, #1
   15bc8:	dc00      	bgt.n	15bcc <__aeabi_dadd+0x240>
   15bca:	e0f9      	b.n	15dc0 <__aeabi_dadd+0x434>
   15bcc:	1ab8      	subs	r0, r7, r2
   15bce:	4684      	mov	ip, r0
   15bd0:	4287      	cmp	r7, r0
   15bd2:	4180      	sbcs	r0, r0
   15bd4:	1ae5      	subs	r5, r4, r3
   15bd6:	4240      	negs	r0, r0
   15bd8:	1a2d      	subs	r5, r5, r0
   15bda:	0228      	lsls	r0, r5, #8
   15bdc:	d400      	bmi.n	15be0 <__aeabi_dadd+0x254>
   15bde:	e089      	b.n	15cf4 <__aeabi_dadd+0x368>
   15be0:	1bd7      	subs	r7, r2, r7
   15be2:	42ba      	cmp	r2, r7
   15be4:	4192      	sbcs	r2, r2
   15be6:	1b1c      	subs	r4, r3, r4
   15be8:	4252      	negs	r2, r2
   15bea:	1aa5      	subs	r5, r4, r2
   15bec:	46d8      	mov	r8, fp
   15bee:	e729      	b.n	15a44 <__aeabi_dadd+0xb8>
   15bf0:	4645      	mov	r5, r8
   15bf2:	2400      	movs	r4, #0
   15bf4:	2700      	movs	r7, #0
   15bf6:	e76a      	b.n	15ace <__aeabi_dadd+0x142>
   15bf8:	4c45      	ldr	r4, [pc, #276]	; (15d10 <__aeabi_dadd+0x384>)
   15bfa:	1af6      	subs	r6, r6, r3
   15bfc:	402c      	ands	r4, r5
   15bfe:	e749      	b.n	15a94 <__aeabi_dadd+0x108>
   15c00:	003d      	movs	r5, r7
   15c02:	3828      	subs	r0, #40	; 0x28
   15c04:	4085      	lsls	r5, r0
   15c06:	2700      	movs	r7, #0
   15c08:	e72e      	b.n	15a68 <__aeabi_dadd+0xdc>
   15c0a:	0038      	movs	r0, r7
   15c0c:	f001 fc98 	bl	17540 <__clzsi2>
   15c10:	3020      	adds	r0, #32
   15c12:	e71d      	b.n	15a50 <__aeabi_dadd+0xc4>
   15c14:	430a      	orrs	r2, r1
   15c16:	1e51      	subs	r1, r2, #1
   15c18:	418a      	sbcs	r2, r1
   15c1a:	2100      	movs	r1, #0
   15c1c:	e707      	b.n	15a2e <__aeabi_dadd+0xa2>
   15c1e:	2b00      	cmp	r3, #0
   15c20:	d000      	beq.n	15c24 <__aeabi_dadd+0x298>
   15c22:	e0f3      	b.n	15e0c <__aeabi_dadd+0x480>
   15c24:	1c70      	adds	r0, r6, #1
   15c26:	0543      	lsls	r3, r0, #21
   15c28:	0d5b      	lsrs	r3, r3, #21
   15c2a:	2b01      	cmp	r3, #1
   15c2c:	dc00      	bgt.n	15c30 <__aeabi_dadd+0x2a4>
   15c2e:	e0ad      	b.n	15d8c <__aeabi_dadd+0x400>
   15c30:	4b36      	ldr	r3, [pc, #216]	; (15d0c <__aeabi_dadd+0x380>)
   15c32:	4298      	cmp	r0, r3
   15c34:	d100      	bne.n	15c38 <__aeabi_dadd+0x2ac>
   15c36:	e0d1      	b.n	15ddc <__aeabi_dadd+0x450>
   15c38:	18ba      	adds	r2, r7, r2
   15c3a:	42ba      	cmp	r2, r7
   15c3c:	41bf      	sbcs	r7, r7
   15c3e:	1864      	adds	r4, r4, r1
   15c40:	427f      	negs	r7, r7
   15c42:	19e4      	adds	r4, r4, r7
   15c44:	07e7      	lsls	r7, r4, #31
   15c46:	0852      	lsrs	r2, r2, #1
   15c48:	4317      	orrs	r7, r2
   15c4a:	0864      	lsrs	r4, r4, #1
   15c4c:	0006      	movs	r6, r0
   15c4e:	e721      	b.n	15a94 <__aeabi_dadd+0x108>
   15c50:	482e      	ldr	r0, [pc, #184]	; (15d0c <__aeabi_dadd+0x380>)
   15c52:	4285      	cmp	r5, r0
   15c54:	d100      	bne.n	15c58 <__aeabi_dadd+0x2cc>
   15c56:	e093      	b.n	15d80 <__aeabi_dadd+0x3f4>
   15c58:	001d      	movs	r5, r3
   15c5a:	e6d0      	b.n	159fe <__aeabi_dadd+0x72>
   15c5c:	0029      	movs	r1, r5
   15c5e:	3e1f      	subs	r6, #31
   15c60:	40f1      	lsrs	r1, r6
   15c62:	2b20      	cmp	r3, #32
   15c64:	d100      	bne.n	15c68 <__aeabi_dadd+0x2dc>
   15c66:	e08d      	b.n	15d84 <__aeabi_dadd+0x3f8>
   15c68:	2240      	movs	r2, #64	; 0x40
   15c6a:	1ad3      	subs	r3, r2, r3
   15c6c:	409d      	lsls	r5, r3
   15c6e:	432f      	orrs	r7, r5
   15c70:	1e7d      	subs	r5, r7, #1
   15c72:	41af      	sbcs	r7, r5
   15c74:	2400      	movs	r4, #0
   15c76:	430f      	orrs	r7, r1
   15c78:	2600      	movs	r6, #0
   15c7a:	e744      	b.n	15b06 <__aeabi_dadd+0x17a>
   15c7c:	002b      	movs	r3, r5
   15c7e:	0008      	movs	r0, r1
   15c80:	3b20      	subs	r3, #32
   15c82:	40d8      	lsrs	r0, r3
   15c84:	0003      	movs	r3, r0
   15c86:	2d20      	cmp	r5, #32
   15c88:	d100      	bne.n	15c8c <__aeabi_dadd+0x300>
   15c8a:	e07d      	b.n	15d88 <__aeabi_dadd+0x3fc>
   15c8c:	2040      	movs	r0, #64	; 0x40
   15c8e:	1b45      	subs	r5, r0, r5
   15c90:	40a9      	lsls	r1, r5
   15c92:	430a      	orrs	r2, r1
   15c94:	1e51      	subs	r1, r2, #1
   15c96:	418a      	sbcs	r2, r1
   15c98:	2100      	movs	r1, #0
   15c9a:	431a      	orrs	r2, r3
   15c9c:	e6c7      	b.n	15a2e <__aeabi_dadd+0xa2>
   15c9e:	2e00      	cmp	r6, #0
   15ca0:	d050      	beq.n	15d44 <__aeabi_dadd+0x3b8>
   15ca2:	4e1a      	ldr	r6, [pc, #104]	; (15d0c <__aeabi_dadd+0x380>)
   15ca4:	42b0      	cmp	r0, r6
   15ca6:	d057      	beq.n	15d58 <__aeabi_dadd+0x3cc>
   15ca8:	2680      	movs	r6, #128	; 0x80
   15caa:	426b      	negs	r3, r5
   15cac:	4699      	mov	r9, r3
   15cae:	0436      	lsls	r6, r6, #16
   15cb0:	4334      	orrs	r4, r6
   15cb2:	464b      	mov	r3, r9
   15cb4:	2b38      	cmp	r3, #56	; 0x38
   15cb6:	dd00      	ble.n	15cba <__aeabi_dadd+0x32e>
   15cb8:	e0d6      	b.n	15e68 <__aeabi_dadd+0x4dc>
   15cba:	2b1f      	cmp	r3, #31
   15cbc:	dd00      	ble.n	15cc0 <__aeabi_dadd+0x334>
   15cbe:	e135      	b.n	15f2c <__aeabi_dadd+0x5a0>
   15cc0:	2620      	movs	r6, #32
   15cc2:	1af5      	subs	r5, r6, r3
   15cc4:	0026      	movs	r6, r4
   15cc6:	40ae      	lsls	r6, r5
   15cc8:	46b2      	mov	sl, r6
   15cca:	003e      	movs	r6, r7
   15ccc:	40de      	lsrs	r6, r3
   15cce:	46ac      	mov	ip, r5
   15cd0:	0035      	movs	r5, r6
   15cd2:	4656      	mov	r6, sl
   15cd4:	432e      	orrs	r6, r5
   15cd6:	4665      	mov	r5, ip
   15cd8:	40af      	lsls	r7, r5
   15cda:	1e7d      	subs	r5, r7, #1
   15cdc:	41af      	sbcs	r7, r5
   15cde:	40dc      	lsrs	r4, r3
   15ce0:	4337      	orrs	r7, r6
   15ce2:	1bd7      	subs	r7, r2, r7
   15ce4:	42ba      	cmp	r2, r7
   15ce6:	4192      	sbcs	r2, r2
   15ce8:	1b0c      	subs	r4, r1, r4
   15cea:	4252      	negs	r2, r2
   15cec:	1aa4      	subs	r4, r4, r2
   15cee:	0006      	movs	r6, r0
   15cf0:	46d8      	mov	r8, fp
   15cf2:	e6a3      	b.n	15a3c <__aeabi_dadd+0xb0>
   15cf4:	4664      	mov	r4, ip
   15cf6:	4667      	mov	r7, ip
   15cf8:	432c      	orrs	r4, r5
   15cfa:	d000      	beq.n	15cfe <__aeabi_dadd+0x372>
   15cfc:	e6a2      	b.n	15a44 <__aeabi_dadd+0xb8>
   15cfe:	2500      	movs	r5, #0
   15d00:	2600      	movs	r6, #0
   15d02:	2700      	movs	r7, #0
   15d04:	e706      	b.n	15b14 <__aeabi_dadd+0x188>
   15d06:	001e      	movs	r6, r3
   15d08:	e6c4      	b.n	15a94 <__aeabi_dadd+0x108>
   15d0a:	46c0      	nop			; (mov r8, r8)
   15d0c:	000007ff 	.word	0x000007ff
   15d10:	ff7fffff 	.word	0xff7fffff
   15d14:	800fffff 	.word	0x800fffff
   15d18:	2b1f      	cmp	r3, #31
   15d1a:	dc63      	bgt.n	15de4 <__aeabi_dadd+0x458>
   15d1c:	2020      	movs	r0, #32
   15d1e:	1ac3      	subs	r3, r0, r3
   15d20:	0008      	movs	r0, r1
   15d22:	4098      	lsls	r0, r3
   15d24:	469c      	mov	ip, r3
   15d26:	4683      	mov	fp, r0
   15d28:	4653      	mov	r3, sl
   15d2a:	0010      	movs	r0, r2
   15d2c:	40d8      	lsrs	r0, r3
   15d2e:	0003      	movs	r3, r0
   15d30:	4658      	mov	r0, fp
   15d32:	4318      	orrs	r0, r3
   15d34:	4663      	mov	r3, ip
   15d36:	409a      	lsls	r2, r3
   15d38:	1e53      	subs	r3, r2, #1
   15d3a:	419a      	sbcs	r2, r3
   15d3c:	4653      	mov	r3, sl
   15d3e:	4302      	orrs	r2, r0
   15d40:	40d9      	lsrs	r1, r3
   15d42:	e703      	b.n	15b4c <__aeabi_dadd+0x1c0>
   15d44:	0026      	movs	r6, r4
   15d46:	433e      	orrs	r6, r7
   15d48:	d006      	beq.n	15d58 <__aeabi_dadd+0x3cc>
   15d4a:	43eb      	mvns	r3, r5
   15d4c:	4699      	mov	r9, r3
   15d4e:	2b00      	cmp	r3, #0
   15d50:	d0c7      	beq.n	15ce2 <__aeabi_dadd+0x356>
   15d52:	4e94      	ldr	r6, [pc, #592]	; (15fa4 <__aeabi_dadd+0x618>)
   15d54:	42b0      	cmp	r0, r6
   15d56:	d1ac      	bne.n	15cb2 <__aeabi_dadd+0x326>
   15d58:	000c      	movs	r4, r1
   15d5a:	0017      	movs	r7, r2
   15d5c:	0006      	movs	r6, r0
   15d5e:	46d8      	mov	r8, fp
   15d60:	e698      	b.n	15a94 <__aeabi_dadd+0x108>
   15d62:	4b90      	ldr	r3, [pc, #576]	; (15fa4 <__aeabi_dadd+0x618>)
   15d64:	459a      	cmp	sl, r3
   15d66:	d00b      	beq.n	15d80 <__aeabi_dadd+0x3f4>
   15d68:	4682      	mov	sl, r0
   15d6a:	e6e7      	b.n	15b3c <__aeabi_dadd+0x1b0>
   15d6c:	2800      	cmp	r0, #0
   15d6e:	d000      	beq.n	15d72 <__aeabi_dadd+0x3e6>
   15d70:	e09e      	b.n	15eb0 <__aeabi_dadd+0x524>
   15d72:	0018      	movs	r0, r3
   15d74:	4310      	orrs	r0, r2
   15d76:	d100      	bne.n	15d7a <__aeabi_dadd+0x3ee>
   15d78:	e0e9      	b.n	15f4e <__aeabi_dadd+0x5c2>
   15d7a:	001c      	movs	r4, r3
   15d7c:	0017      	movs	r7, r2
   15d7e:	46d8      	mov	r8, fp
   15d80:	4e88      	ldr	r6, [pc, #544]	; (15fa4 <__aeabi_dadd+0x618>)
   15d82:	e687      	b.n	15a94 <__aeabi_dadd+0x108>
   15d84:	2500      	movs	r5, #0
   15d86:	e772      	b.n	15c6e <__aeabi_dadd+0x2e2>
   15d88:	2100      	movs	r1, #0
   15d8a:	e782      	b.n	15c92 <__aeabi_dadd+0x306>
   15d8c:	0023      	movs	r3, r4
   15d8e:	433b      	orrs	r3, r7
   15d90:	2e00      	cmp	r6, #0
   15d92:	d000      	beq.n	15d96 <__aeabi_dadd+0x40a>
   15d94:	e0ab      	b.n	15eee <__aeabi_dadd+0x562>
   15d96:	2b00      	cmp	r3, #0
   15d98:	d100      	bne.n	15d9c <__aeabi_dadd+0x410>
   15d9a:	e0e7      	b.n	15f6c <__aeabi_dadd+0x5e0>
   15d9c:	000b      	movs	r3, r1
   15d9e:	4313      	orrs	r3, r2
   15da0:	d100      	bne.n	15da4 <__aeabi_dadd+0x418>
   15da2:	e677      	b.n	15a94 <__aeabi_dadd+0x108>
   15da4:	18ba      	adds	r2, r7, r2
   15da6:	42ba      	cmp	r2, r7
   15da8:	41bf      	sbcs	r7, r7
   15daa:	1864      	adds	r4, r4, r1
   15dac:	427f      	negs	r7, r7
   15dae:	19e4      	adds	r4, r4, r7
   15db0:	0223      	lsls	r3, r4, #8
   15db2:	d400      	bmi.n	15db6 <__aeabi_dadd+0x42a>
   15db4:	e0f2      	b.n	15f9c <__aeabi_dadd+0x610>
   15db6:	4b7c      	ldr	r3, [pc, #496]	; (15fa8 <__aeabi_dadd+0x61c>)
   15db8:	0017      	movs	r7, r2
   15dba:	401c      	ands	r4, r3
   15dbc:	0006      	movs	r6, r0
   15dbe:	e669      	b.n	15a94 <__aeabi_dadd+0x108>
   15dc0:	0020      	movs	r0, r4
   15dc2:	4338      	orrs	r0, r7
   15dc4:	2e00      	cmp	r6, #0
   15dc6:	d1d1      	bne.n	15d6c <__aeabi_dadd+0x3e0>
   15dc8:	2800      	cmp	r0, #0
   15dca:	d15b      	bne.n	15e84 <__aeabi_dadd+0x4f8>
   15dcc:	001c      	movs	r4, r3
   15dce:	4314      	orrs	r4, r2
   15dd0:	d100      	bne.n	15dd4 <__aeabi_dadd+0x448>
   15dd2:	e0a8      	b.n	15f26 <__aeabi_dadd+0x59a>
   15dd4:	001c      	movs	r4, r3
   15dd6:	0017      	movs	r7, r2
   15dd8:	46d8      	mov	r8, fp
   15dda:	e65b      	b.n	15a94 <__aeabi_dadd+0x108>
   15ddc:	0006      	movs	r6, r0
   15dde:	2400      	movs	r4, #0
   15de0:	2700      	movs	r7, #0
   15de2:	e697      	b.n	15b14 <__aeabi_dadd+0x188>
   15de4:	4650      	mov	r0, sl
   15de6:	000b      	movs	r3, r1
   15de8:	3820      	subs	r0, #32
   15dea:	40c3      	lsrs	r3, r0
   15dec:	4699      	mov	r9, r3
   15dee:	4653      	mov	r3, sl
   15df0:	2b20      	cmp	r3, #32
   15df2:	d100      	bne.n	15df6 <__aeabi_dadd+0x46a>
   15df4:	e095      	b.n	15f22 <__aeabi_dadd+0x596>
   15df6:	2340      	movs	r3, #64	; 0x40
   15df8:	4650      	mov	r0, sl
   15dfa:	1a1b      	subs	r3, r3, r0
   15dfc:	4099      	lsls	r1, r3
   15dfe:	430a      	orrs	r2, r1
   15e00:	1e51      	subs	r1, r2, #1
   15e02:	418a      	sbcs	r2, r1
   15e04:	464b      	mov	r3, r9
   15e06:	2100      	movs	r1, #0
   15e08:	431a      	orrs	r2, r3
   15e0a:	e69f      	b.n	15b4c <__aeabi_dadd+0x1c0>
   15e0c:	2e00      	cmp	r6, #0
   15e0e:	d130      	bne.n	15e72 <__aeabi_dadd+0x4e6>
   15e10:	0026      	movs	r6, r4
   15e12:	433e      	orrs	r6, r7
   15e14:	d067      	beq.n	15ee6 <__aeabi_dadd+0x55a>
   15e16:	43db      	mvns	r3, r3
   15e18:	469a      	mov	sl, r3
   15e1a:	2b00      	cmp	r3, #0
   15e1c:	d01c      	beq.n	15e58 <__aeabi_dadd+0x4cc>
   15e1e:	4e61      	ldr	r6, [pc, #388]	; (15fa4 <__aeabi_dadd+0x618>)
   15e20:	42b0      	cmp	r0, r6
   15e22:	d060      	beq.n	15ee6 <__aeabi_dadd+0x55a>
   15e24:	4653      	mov	r3, sl
   15e26:	2b38      	cmp	r3, #56	; 0x38
   15e28:	dd00      	ble.n	15e2c <__aeabi_dadd+0x4a0>
   15e2a:	e096      	b.n	15f5a <__aeabi_dadd+0x5ce>
   15e2c:	2b1f      	cmp	r3, #31
   15e2e:	dd00      	ble.n	15e32 <__aeabi_dadd+0x4a6>
   15e30:	e09f      	b.n	15f72 <__aeabi_dadd+0x5e6>
   15e32:	2620      	movs	r6, #32
   15e34:	1af3      	subs	r3, r6, r3
   15e36:	0026      	movs	r6, r4
   15e38:	409e      	lsls	r6, r3
   15e3a:	469c      	mov	ip, r3
   15e3c:	46b3      	mov	fp, r6
   15e3e:	4653      	mov	r3, sl
   15e40:	003e      	movs	r6, r7
   15e42:	40de      	lsrs	r6, r3
   15e44:	0033      	movs	r3, r6
   15e46:	465e      	mov	r6, fp
   15e48:	431e      	orrs	r6, r3
   15e4a:	4663      	mov	r3, ip
   15e4c:	409f      	lsls	r7, r3
   15e4e:	1e7b      	subs	r3, r7, #1
   15e50:	419f      	sbcs	r7, r3
   15e52:	4653      	mov	r3, sl
   15e54:	40dc      	lsrs	r4, r3
   15e56:	4337      	orrs	r7, r6
   15e58:	18bf      	adds	r7, r7, r2
   15e5a:	4297      	cmp	r7, r2
   15e5c:	4192      	sbcs	r2, r2
   15e5e:	1864      	adds	r4, r4, r1
   15e60:	4252      	negs	r2, r2
   15e62:	18a4      	adds	r4, r4, r2
   15e64:	0006      	movs	r6, r0
   15e66:	e678      	b.n	15b5a <__aeabi_dadd+0x1ce>
   15e68:	4327      	orrs	r7, r4
   15e6a:	1e7c      	subs	r4, r7, #1
   15e6c:	41a7      	sbcs	r7, r4
   15e6e:	2400      	movs	r4, #0
   15e70:	e737      	b.n	15ce2 <__aeabi_dadd+0x356>
   15e72:	4e4c      	ldr	r6, [pc, #304]	; (15fa4 <__aeabi_dadd+0x618>)
   15e74:	42b0      	cmp	r0, r6
   15e76:	d036      	beq.n	15ee6 <__aeabi_dadd+0x55a>
   15e78:	2680      	movs	r6, #128	; 0x80
   15e7a:	425b      	negs	r3, r3
   15e7c:	0436      	lsls	r6, r6, #16
   15e7e:	469a      	mov	sl, r3
   15e80:	4334      	orrs	r4, r6
   15e82:	e7cf      	b.n	15e24 <__aeabi_dadd+0x498>
   15e84:	0018      	movs	r0, r3
   15e86:	4310      	orrs	r0, r2
   15e88:	d100      	bne.n	15e8c <__aeabi_dadd+0x500>
   15e8a:	e603      	b.n	15a94 <__aeabi_dadd+0x108>
   15e8c:	1ab8      	subs	r0, r7, r2
   15e8e:	4684      	mov	ip, r0
   15e90:	4567      	cmp	r7, ip
   15e92:	41ad      	sbcs	r5, r5
   15e94:	1ae0      	subs	r0, r4, r3
   15e96:	426d      	negs	r5, r5
   15e98:	1b40      	subs	r0, r0, r5
   15e9a:	0205      	lsls	r5, r0, #8
   15e9c:	d400      	bmi.n	15ea0 <__aeabi_dadd+0x514>
   15e9e:	e62c      	b.n	15afa <__aeabi_dadd+0x16e>
   15ea0:	1bd7      	subs	r7, r2, r7
   15ea2:	42ba      	cmp	r2, r7
   15ea4:	4192      	sbcs	r2, r2
   15ea6:	1b1c      	subs	r4, r3, r4
   15ea8:	4252      	negs	r2, r2
   15eaa:	1aa4      	subs	r4, r4, r2
   15eac:	46d8      	mov	r8, fp
   15eae:	e5f1      	b.n	15a94 <__aeabi_dadd+0x108>
   15eb0:	0018      	movs	r0, r3
   15eb2:	4310      	orrs	r0, r2
   15eb4:	d100      	bne.n	15eb8 <__aeabi_dadd+0x52c>
   15eb6:	e763      	b.n	15d80 <__aeabi_dadd+0x3f4>
   15eb8:	08f8      	lsrs	r0, r7, #3
   15eba:	0767      	lsls	r7, r4, #29
   15ebc:	4307      	orrs	r7, r0
   15ebe:	2080      	movs	r0, #128	; 0x80
   15ec0:	08e4      	lsrs	r4, r4, #3
   15ec2:	0300      	lsls	r0, r0, #12
   15ec4:	4204      	tst	r4, r0
   15ec6:	d008      	beq.n	15eda <__aeabi_dadd+0x54e>
   15ec8:	08dd      	lsrs	r5, r3, #3
   15eca:	4205      	tst	r5, r0
   15ecc:	d105      	bne.n	15eda <__aeabi_dadd+0x54e>
   15ece:	08d2      	lsrs	r2, r2, #3
   15ed0:	0759      	lsls	r1, r3, #29
   15ed2:	4311      	orrs	r1, r2
   15ed4:	000f      	movs	r7, r1
   15ed6:	002c      	movs	r4, r5
   15ed8:	46d8      	mov	r8, fp
   15eda:	0f7b      	lsrs	r3, r7, #29
   15edc:	00e4      	lsls	r4, r4, #3
   15ede:	431c      	orrs	r4, r3
   15ee0:	00ff      	lsls	r7, r7, #3
   15ee2:	4e30      	ldr	r6, [pc, #192]	; (15fa4 <__aeabi_dadd+0x618>)
   15ee4:	e5d6      	b.n	15a94 <__aeabi_dadd+0x108>
   15ee6:	000c      	movs	r4, r1
   15ee8:	0017      	movs	r7, r2
   15eea:	0006      	movs	r6, r0
   15eec:	e5d2      	b.n	15a94 <__aeabi_dadd+0x108>
   15eee:	2b00      	cmp	r3, #0
   15ef0:	d038      	beq.n	15f64 <__aeabi_dadd+0x5d8>
   15ef2:	000b      	movs	r3, r1
   15ef4:	4313      	orrs	r3, r2
   15ef6:	d100      	bne.n	15efa <__aeabi_dadd+0x56e>
   15ef8:	e742      	b.n	15d80 <__aeabi_dadd+0x3f4>
   15efa:	08f8      	lsrs	r0, r7, #3
   15efc:	0767      	lsls	r7, r4, #29
   15efe:	4307      	orrs	r7, r0
   15f00:	2080      	movs	r0, #128	; 0x80
   15f02:	08e4      	lsrs	r4, r4, #3
   15f04:	0300      	lsls	r0, r0, #12
   15f06:	4204      	tst	r4, r0
   15f08:	d0e7      	beq.n	15eda <__aeabi_dadd+0x54e>
   15f0a:	08cb      	lsrs	r3, r1, #3
   15f0c:	4203      	tst	r3, r0
   15f0e:	d1e4      	bne.n	15eda <__aeabi_dadd+0x54e>
   15f10:	08d2      	lsrs	r2, r2, #3
   15f12:	0749      	lsls	r1, r1, #29
   15f14:	4311      	orrs	r1, r2
   15f16:	000f      	movs	r7, r1
   15f18:	001c      	movs	r4, r3
   15f1a:	e7de      	b.n	15eda <__aeabi_dadd+0x54e>
   15f1c:	2700      	movs	r7, #0
   15f1e:	2400      	movs	r4, #0
   15f20:	e5d5      	b.n	15ace <__aeabi_dadd+0x142>
   15f22:	2100      	movs	r1, #0
   15f24:	e76b      	b.n	15dfe <__aeabi_dadd+0x472>
   15f26:	2500      	movs	r5, #0
   15f28:	2700      	movs	r7, #0
   15f2a:	e5f3      	b.n	15b14 <__aeabi_dadd+0x188>
   15f2c:	464e      	mov	r6, r9
   15f2e:	0025      	movs	r5, r4
   15f30:	3e20      	subs	r6, #32
   15f32:	40f5      	lsrs	r5, r6
   15f34:	464b      	mov	r3, r9
   15f36:	002e      	movs	r6, r5
   15f38:	2b20      	cmp	r3, #32
   15f3a:	d02d      	beq.n	15f98 <__aeabi_dadd+0x60c>
   15f3c:	2540      	movs	r5, #64	; 0x40
   15f3e:	1aed      	subs	r5, r5, r3
   15f40:	40ac      	lsls	r4, r5
   15f42:	4327      	orrs	r7, r4
   15f44:	1e7c      	subs	r4, r7, #1
   15f46:	41a7      	sbcs	r7, r4
   15f48:	2400      	movs	r4, #0
   15f4a:	4337      	orrs	r7, r6
   15f4c:	e6c9      	b.n	15ce2 <__aeabi_dadd+0x356>
   15f4e:	2480      	movs	r4, #128	; 0x80
   15f50:	2500      	movs	r5, #0
   15f52:	0324      	lsls	r4, r4, #12
   15f54:	4e13      	ldr	r6, [pc, #76]	; (15fa4 <__aeabi_dadd+0x618>)
   15f56:	2700      	movs	r7, #0
   15f58:	e5dc      	b.n	15b14 <__aeabi_dadd+0x188>
   15f5a:	4327      	orrs	r7, r4
   15f5c:	1e7c      	subs	r4, r7, #1
   15f5e:	41a7      	sbcs	r7, r4
   15f60:	2400      	movs	r4, #0
   15f62:	e779      	b.n	15e58 <__aeabi_dadd+0x4cc>
   15f64:	000c      	movs	r4, r1
   15f66:	0017      	movs	r7, r2
   15f68:	4e0e      	ldr	r6, [pc, #56]	; (15fa4 <__aeabi_dadd+0x618>)
   15f6a:	e593      	b.n	15a94 <__aeabi_dadd+0x108>
   15f6c:	000c      	movs	r4, r1
   15f6e:	0017      	movs	r7, r2
   15f70:	e590      	b.n	15a94 <__aeabi_dadd+0x108>
   15f72:	4656      	mov	r6, sl
   15f74:	0023      	movs	r3, r4
   15f76:	3e20      	subs	r6, #32
   15f78:	40f3      	lsrs	r3, r6
   15f7a:	4699      	mov	r9, r3
   15f7c:	4653      	mov	r3, sl
   15f7e:	2b20      	cmp	r3, #32
   15f80:	d00e      	beq.n	15fa0 <__aeabi_dadd+0x614>
   15f82:	2340      	movs	r3, #64	; 0x40
   15f84:	4656      	mov	r6, sl
   15f86:	1b9b      	subs	r3, r3, r6
   15f88:	409c      	lsls	r4, r3
   15f8a:	4327      	orrs	r7, r4
   15f8c:	1e7c      	subs	r4, r7, #1
   15f8e:	41a7      	sbcs	r7, r4
   15f90:	464b      	mov	r3, r9
   15f92:	2400      	movs	r4, #0
   15f94:	431f      	orrs	r7, r3
   15f96:	e75f      	b.n	15e58 <__aeabi_dadd+0x4cc>
   15f98:	2400      	movs	r4, #0
   15f9a:	e7d2      	b.n	15f42 <__aeabi_dadd+0x5b6>
   15f9c:	0017      	movs	r7, r2
   15f9e:	e5b2      	b.n	15b06 <__aeabi_dadd+0x17a>
   15fa0:	2400      	movs	r4, #0
   15fa2:	e7f2      	b.n	15f8a <__aeabi_dadd+0x5fe>
   15fa4:	000007ff 	.word	0x000007ff
   15fa8:	ff7fffff 	.word	0xff7fffff

00015fac <__aeabi_ddiv>:
   15fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fae:	4657      	mov	r7, sl
   15fb0:	4645      	mov	r5, r8
   15fb2:	46de      	mov	lr, fp
   15fb4:	464e      	mov	r6, r9
   15fb6:	b5e0      	push	{r5, r6, r7, lr}
   15fb8:	004c      	lsls	r4, r1, #1
   15fba:	030e      	lsls	r6, r1, #12
   15fbc:	b087      	sub	sp, #28
   15fbe:	4683      	mov	fp, r0
   15fc0:	4692      	mov	sl, r2
   15fc2:	001d      	movs	r5, r3
   15fc4:	4680      	mov	r8, r0
   15fc6:	0b36      	lsrs	r6, r6, #12
   15fc8:	0d64      	lsrs	r4, r4, #21
   15fca:	0fcf      	lsrs	r7, r1, #31
   15fcc:	2c00      	cmp	r4, #0
   15fce:	d04f      	beq.n	16070 <__aeabi_ddiv+0xc4>
   15fd0:	4b6f      	ldr	r3, [pc, #444]	; (16190 <__aeabi_ddiv+0x1e4>)
   15fd2:	429c      	cmp	r4, r3
   15fd4:	d035      	beq.n	16042 <__aeabi_ddiv+0x96>
   15fd6:	2380      	movs	r3, #128	; 0x80
   15fd8:	0f42      	lsrs	r2, r0, #29
   15fda:	041b      	lsls	r3, r3, #16
   15fdc:	00f6      	lsls	r6, r6, #3
   15fde:	4313      	orrs	r3, r2
   15fe0:	4333      	orrs	r3, r6
   15fe2:	4699      	mov	r9, r3
   15fe4:	00c3      	lsls	r3, r0, #3
   15fe6:	4698      	mov	r8, r3
   15fe8:	4b6a      	ldr	r3, [pc, #424]	; (16194 <__aeabi_ddiv+0x1e8>)
   15fea:	2600      	movs	r6, #0
   15fec:	469c      	mov	ip, r3
   15fee:	2300      	movs	r3, #0
   15ff0:	4464      	add	r4, ip
   15ff2:	9303      	str	r3, [sp, #12]
   15ff4:	032b      	lsls	r3, r5, #12
   15ff6:	0b1b      	lsrs	r3, r3, #12
   15ff8:	469b      	mov	fp, r3
   15ffa:	006b      	lsls	r3, r5, #1
   15ffc:	0fed      	lsrs	r5, r5, #31
   15ffe:	4650      	mov	r0, sl
   16000:	0d5b      	lsrs	r3, r3, #21
   16002:	9501      	str	r5, [sp, #4]
   16004:	d05e      	beq.n	160c4 <__aeabi_ddiv+0x118>
   16006:	4a62      	ldr	r2, [pc, #392]	; (16190 <__aeabi_ddiv+0x1e4>)
   16008:	4293      	cmp	r3, r2
   1600a:	d053      	beq.n	160b4 <__aeabi_ddiv+0x108>
   1600c:	465a      	mov	r2, fp
   1600e:	00d1      	lsls	r1, r2, #3
   16010:	2280      	movs	r2, #128	; 0x80
   16012:	0f40      	lsrs	r0, r0, #29
   16014:	0412      	lsls	r2, r2, #16
   16016:	4302      	orrs	r2, r0
   16018:	430a      	orrs	r2, r1
   1601a:	4693      	mov	fp, r2
   1601c:	4652      	mov	r2, sl
   1601e:	00d1      	lsls	r1, r2, #3
   16020:	4a5c      	ldr	r2, [pc, #368]	; (16194 <__aeabi_ddiv+0x1e8>)
   16022:	4694      	mov	ip, r2
   16024:	2200      	movs	r2, #0
   16026:	4463      	add	r3, ip
   16028:	0038      	movs	r0, r7
   1602a:	4068      	eors	r0, r5
   1602c:	4684      	mov	ip, r0
   1602e:	9002      	str	r0, [sp, #8]
   16030:	1ae4      	subs	r4, r4, r3
   16032:	4316      	orrs	r6, r2
   16034:	2e0f      	cmp	r6, #15
   16036:	d900      	bls.n	1603a <__aeabi_ddiv+0x8e>
   16038:	e0b4      	b.n	161a4 <__aeabi_ddiv+0x1f8>
   1603a:	4b57      	ldr	r3, [pc, #348]	; (16198 <__aeabi_ddiv+0x1ec>)
   1603c:	00b6      	lsls	r6, r6, #2
   1603e:	599b      	ldr	r3, [r3, r6]
   16040:	469f      	mov	pc, r3
   16042:	0003      	movs	r3, r0
   16044:	4333      	orrs	r3, r6
   16046:	4699      	mov	r9, r3
   16048:	d16c      	bne.n	16124 <__aeabi_ddiv+0x178>
   1604a:	2300      	movs	r3, #0
   1604c:	4698      	mov	r8, r3
   1604e:	3302      	adds	r3, #2
   16050:	2608      	movs	r6, #8
   16052:	9303      	str	r3, [sp, #12]
   16054:	e7ce      	b.n	15ff4 <__aeabi_ddiv+0x48>
   16056:	46cb      	mov	fp, r9
   16058:	4641      	mov	r1, r8
   1605a:	9a03      	ldr	r2, [sp, #12]
   1605c:	9701      	str	r7, [sp, #4]
   1605e:	2a02      	cmp	r2, #2
   16060:	d165      	bne.n	1612e <__aeabi_ddiv+0x182>
   16062:	9b01      	ldr	r3, [sp, #4]
   16064:	4c4a      	ldr	r4, [pc, #296]	; (16190 <__aeabi_ddiv+0x1e4>)
   16066:	469c      	mov	ip, r3
   16068:	2300      	movs	r3, #0
   1606a:	2200      	movs	r2, #0
   1606c:	4698      	mov	r8, r3
   1606e:	e06b      	b.n	16148 <__aeabi_ddiv+0x19c>
   16070:	0003      	movs	r3, r0
   16072:	4333      	orrs	r3, r6
   16074:	4699      	mov	r9, r3
   16076:	d04e      	beq.n	16116 <__aeabi_ddiv+0x16a>
   16078:	2e00      	cmp	r6, #0
   1607a:	d100      	bne.n	1607e <__aeabi_ddiv+0xd2>
   1607c:	e1bc      	b.n	163f8 <__aeabi_ddiv+0x44c>
   1607e:	0030      	movs	r0, r6
   16080:	f001 fa5e 	bl	17540 <__clzsi2>
   16084:	0003      	movs	r3, r0
   16086:	3b0b      	subs	r3, #11
   16088:	2b1c      	cmp	r3, #28
   1608a:	dd00      	ble.n	1608e <__aeabi_ddiv+0xe2>
   1608c:	e1ac      	b.n	163e8 <__aeabi_ddiv+0x43c>
   1608e:	221d      	movs	r2, #29
   16090:	1ad3      	subs	r3, r2, r3
   16092:	465a      	mov	r2, fp
   16094:	0001      	movs	r1, r0
   16096:	40da      	lsrs	r2, r3
   16098:	3908      	subs	r1, #8
   1609a:	408e      	lsls	r6, r1
   1609c:	0013      	movs	r3, r2
   1609e:	4333      	orrs	r3, r6
   160a0:	4699      	mov	r9, r3
   160a2:	465b      	mov	r3, fp
   160a4:	408b      	lsls	r3, r1
   160a6:	4698      	mov	r8, r3
   160a8:	2300      	movs	r3, #0
   160aa:	4c3c      	ldr	r4, [pc, #240]	; (1619c <__aeabi_ddiv+0x1f0>)
   160ac:	2600      	movs	r6, #0
   160ae:	1a24      	subs	r4, r4, r0
   160b0:	9303      	str	r3, [sp, #12]
   160b2:	e79f      	b.n	15ff4 <__aeabi_ddiv+0x48>
   160b4:	4651      	mov	r1, sl
   160b6:	465a      	mov	r2, fp
   160b8:	4311      	orrs	r1, r2
   160ba:	d129      	bne.n	16110 <__aeabi_ddiv+0x164>
   160bc:	2200      	movs	r2, #0
   160be:	4693      	mov	fp, r2
   160c0:	3202      	adds	r2, #2
   160c2:	e7b1      	b.n	16028 <__aeabi_ddiv+0x7c>
   160c4:	4659      	mov	r1, fp
   160c6:	4301      	orrs	r1, r0
   160c8:	d01e      	beq.n	16108 <__aeabi_ddiv+0x15c>
   160ca:	465b      	mov	r3, fp
   160cc:	2b00      	cmp	r3, #0
   160ce:	d100      	bne.n	160d2 <__aeabi_ddiv+0x126>
   160d0:	e19e      	b.n	16410 <__aeabi_ddiv+0x464>
   160d2:	4658      	mov	r0, fp
   160d4:	f001 fa34 	bl	17540 <__clzsi2>
   160d8:	0003      	movs	r3, r0
   160da:	3b0b      	subs	r3, #11
   160dc:	2b1c      	cmp	r3, #28
   160de:	dd00      	ble.n	160e2 <__aeabi_ddiv+0x136>
   160e0:	e18f      	b.n	16402 <__aeabi_ddiv+0x456>
   160e2:	0002      	movs	r2, r0
   160e4:	4659      	mov	r1, fp
   160e6:	3a08      	subs	r2, #8
   160e8:	4091      	lsls	r1, r2
   160ea:	468b      	mov	fp, r1
   160ec:	211d      	movs	r1, #29
   160ee:	1acb      	subs	r3, r1, r3
   160f0:	4651      	mov	r1, sl
   160f2:	40d9      	lsrs	r1, r3
   160f4:	000b      	movs	r3, r1
   160f6:	4659      	mov	r1, fp
   160f8:	430b      	orrs	r3, r1
   160fa:	4651      	mov	r1, sl
   160fc:	469b      	mov	fp, r3
   160fe:	4091      	lsls	r1, r2
   16100:	4b26      	ldr	r3, [pc, #152]	; (1619c <__aeabi_ddiv+0x1f0>)
   16102:	2200      	movs	r2, #0
   16104:	1a1b      	subs	r3, r3, r0
   16106:	e78f      	b.n	16028 <__aeabi_ddiv+0x7c>
   16108:	2300      	movs	r3, #0
   1610a:	2201      	movs	r2, #1
   1610c:	469b      	mov	fp, r3
   1610e:	e78b      	b.n	16028 <__aeabi_ddiv+0x7c>
   16110:	4651      	mov	r1, sl
   16112:	2203      	movs	r2, #3
   16114:	e788      	b.n	16028 <__aeabi_ddiv+0x7c>
   16116:	2300      	movs	r3, #0
   16118:	4698      	mov	r8, r3
   1611a:	3301      	adds	r3, #1
   1611c:	2604      	movs	r6, #4
   1611e:	2400      	movs	r4, #0
   16120:	9303      	str	r3, [sp, #12]
   16122:	e767      	b.n	15ff4 <__aeabi_ddiv+0x48>
   16124:	2303      	movs	r3, #3
   16126:	46b1      	mov	r9, r6
   16128:	9303      	str	r3, [sp, #12]
   1612a:	260c      	movs	r6, #12
   1612c:	e762      	b.n	15ff4 <__aeabi_ddiv+0x48>
   1612e:	2a03      	cmp	r2, #3
   16130:	d100      	bne.n	16134 <__aeabi_ddiv+0x188>
   16132:	e25c      	b.n	165ee <__aeabi_ddiv+0x642>
   16134:	9b01      	ldr	r3, [sp, #4]
   16136:	2a01      	cmp	r2, #1
   16138:	d000      	beq.n	1613c <__aeabi_ddiv+0x190>
   1613a:	e1e4      	b.n	16506 <__aeabi_ddiv+0x55a>
   1613c:	4013      	ands	r3, r2
   1613e:	469c      	mov	ip, r3
   16140:	2300      	movs	r3, #0
   16142:	2400      	movs	r4, #0
   16144:	2200      	movs	r2, #0
   16146:	4698      	mov	r8, r3
   16148:	2100      	movs	r1, #0
   1614a:	0312      	lsls	r2, r2, #12
   1614c:	0b13      	lsrs	r3, r2, #12
   1614e:	0d0a      	lsrs	r2, r1, #20
   16150:	0512      	lsls	r2, r2, #20
   16152:	431a      	orrs	r2, r3
   16154:	0523      	lsls	r3, r4, #20
   16156:	4c12      	ldr	r4, [pc, #72]	; (161a0 <__aeabi_ddiv+0x1f4>)
   16158:	4640      	mov	r0, r8
   1615a:	4022      	ands	r2, r4
   1615c:	4313      	orrs	r3, r2
   1615e:	4662      	mov	r2, ip
   16160:	005b      	lsls	r3, r3, #1
   16162:	07d2      	lsls	r2, r2, #31
   16164:	085b      	lsrs	r3, r3, #1
   16166:	4313      	orrs	r3, r2
   16168:	0019      	movs	r1, r3
   1616a:	b007      	add	sp, #28
   1616c:	bc3c      	pop	{r2, r3, r4, r5}
   1616e:	4690      	mov	r8, r2
   16170:	4699      	mov	r9, r3
   16172:	46a2      	mov	sl, r4
   16174:	46ab      	mov	fp, r5
   16176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16178:	2300      	movs	r3, #0
   1617a:	2280      	movs	r2, #128	; 0x80
   1617c:	469c      	mov	ip, r3
   1617e:	0312      	lsls	r2, r2, #12
   16180:	4698      	mov	r8, r3
   16182:	4c03      	ldr	r4, [pc, #12]	; (16190 <__aeabi_ddiv+0x1e4>)
   16184:	e7e0      	b.n	16148 <__aeabi_ddiv+0x19c>
   16186:	2300      	movs	r3, #0
   16188:	4c01      	ldr	r4, [pc, #4]	; (16190 <__aeabi_ddiv+0x1e4>)
   1618a:	2200      	movs	r2, #0
   1618c:	4698      	mov	r8, r3
   1618e:	e7db      	b.n	16148 <__aeabi_ddiv+0x19c>
   16190:	000007ff 	.word	0x000007ff
   16194:	fffffc01 	.word	0xfffffc01
   16198:	0001e198 	.word	0x0001e198
   1619c:	fffffc0d 	.word	0xfffffc0d
   161a0:	800fffff 	.word	0x800fffff
   161a4:	45d9      	cmp	r9, fp
   161a6:	d900      	bls.n	161aa <__aeabi_ddiv+0x1fe>
   161a8:	e139      	b.n	1641e <__aeabi_ddiv+0x472>
   161aa:	d100      	bne.n	161ae <__aeabi_ddiv+0x202>
   161ac:	e134      	b.n	16418 <__aeabi_ddiv+0x46c>
   161ae:	2300      	movs	r3, #0
   161b0:	4646      	mov	r6, r8
   161b2:	464d      	mov	r5, r9
   161b4:	469a      	mov	sl, r3
   161b6:	3c01      	subs	r4, #1
   161b8:	465b      	mov	r3, fp
   161ba:	0e0a      	lsrs	r2, r1, #24
   161bc:	021b      	lsls	r3, r3, #8
   161be:	431a      	orrs	r2, r3
   161c0:	020b      	lsls	r3, r1, #8
   161c2:	0c17      	lsrs	r7, r2, #16
   161c4:	9303      	str	r3, [sp, #12]
   161c6:	0413      	lsls	r3, r2, #16
   161c8:	0c1b      	lsrs	r3, r3, #16
   161ca:	0039      	movs	r1, r7
   161cc:	0028      	movs	r0, r5
   161ce:	4690      	mov	r8, r2
   161d0:	9301      	str	r3, [sp, #4]
   161d2:	f7fe f999 	bl	14508 <__udivsi3>
   161d6:	0002      	movs	r2, r0
   161d8:	9b01      	ldr	r3, [sp, #4]
   161da:	4683      	mov	fp, r0
   161dc:	435a      	muls	r2, r3
   161de:	0028      	movs	r0, r5
   161e0:	0039      	movs	r1, r7
   161e2:	4691      	mov	r9, r2
   161e4:	f7fe fa16 	bl	14614 <__aeabi_uidivmod>
   161e8:	0c35      	lsrs	r5, r6, #16
   161ea:	0409      	lsls	r1, r1, #16
   161ec:	430d      	orrs	r5, r1
   161ee:	45a9      	cmp	r9, r5
   161f0:	d90d      	bls.n	1620e <__aeabi_ddiv+0x262>
   161f2:	465b      	mov	r3, fp
   161f4:	4445      	add	r5, r8
   161f6:	3b01      	subs	r3, #1
   161f8:	45a8      	cmp	r8, r5
   161fa:	d900      	bls.n	161fe <__aeabi_ddiv+0x252>
   161fc:	e13a      	b.n	16474 <__aeabi_ddiv+0x4c8>
   161fe:	45a9      	cmp	r9, r5
   16200:	d800      	bhi.n	16204 <__aeabi_ddiv+0x258>
   16202:	e137      	b.n	16474 <__aeabi_ddiv+0x4c8>
   16204:	2302      	movs	r3, #2
   16206:	425b      	negs	r3, r3
   16208:	469c      	mov	ip, r3
   1620a:	4445      	add	r5, r8
   1620c:	44e3      	add	fp, ip
   1620e:	464b      	mov	r3, r9
   16210:	1aeb      	subs	r3, r5, r3
   16212:	0039      	movs	r1, r7
   16214:	0018      	movs	r0, r3
   16216:	9304      	str	r3, [sp, #16]
   16218:	f7fe f976 	bl	14508 <__udivsi3>
   1621c:	9b01      	ldr	r3, [sp, #4]
   1621e:	0005      	movs	r5, r0
   16220:	4343      	muls	r3, r0
   16222:	0039      	movs	r1, r7
   16224:	9804      	ldr	r0, [sp, #16]
   16226:	4699      	mov	r9, r3
   16228:	f7fe f9f4 	bl	14614 <__aeabi_uidivmod>
   1622c:	0433      	lsls	r3, r6, #16
   1622e:	0409      	lsls	r1, r1, #16
   16230:	0c1b      	lsrs	r3, r3, #16
   16232:	430b      	orrs	r3, r1
   16234:	4599      	cmp	r9, r3
   16236:	d909      	bls.n	1624c <__aeabi_ddiv+0x2a0>
   16238:	4443      	add	r3, r8
   1623a:	1e6a      	subs	r2, r5, #1
   1623c:	4598      	cmp	r8, r3
   1623e:	d900      	bls.n	16242 <__aeabi_ddiv+0x296>
   16240:	e11a      	b.n	16478 <__aeabi_ddiv+0x4cc>
   16242:	4599      	cmp	r9, r3
   16244:	d800      	bhi.n	16248 <__aeabi_ddiv+0x29c>
   16246:	e117      	b.n	16478 <__aeabi_ddiv+0x4cc>
   16248:	3d02      	subs	r5, #2
   1624a:	4443      	add	r3, r8
   1624c:	464a      	mov	r2, r9
   1624e:	1a9b      	subs	r3, r3, r2
   16250:	465a      	mov	r2, fp
   16252:	0412      	lsls	r2, r2, #16
   16254:	432a      	orrs	r2, r5
   16256:	9903      	ldr	r1, [sp, #12]
   16258:	4693      	mov	fp, r2
   1625a:	0c10      	lsrs	r0, r2, #16
   1625c:	0c0a      	lsrs	r2, r1, #16
   1625e:	4691      	mov	r9, r2
   16260:	0409      	lsls	r1, r1, #16
   16262:	465a      	mov	r2, fp
   16264:	0c09      	lsrs	r1, r1, #16
   16266:	464e      	mov	r6, r9
   16268:	000d      	movs	r5, r1
   1626a:	0412      	lsls	r2, r2, #16
   1626c:	0c12      	lsrs	r2, r2, #16
   1626e:	4345      	muls	r5, r0
   16270:	9105      	str	r1, [sp, #20]
   16272:	4351      	muls	r1, r2
   16274:	4372      	muls	r2, r6
   16276:	4370      	muls	r0, r6
   16278:	1952      	adds	r2, r2, r5
   1627a:	0c0e      	lsrs	r6, r1, #16
   1627c:	18b2      	adds	r2, r6, r2
   1627e:	4295      	cmp	r5, r2
   16280:	d903      	bls.n	1628a <__aeabi_ddiv+0x2de>
   16282:	2580      	movs	r5, #128	; 0x80
   16284:	026d      	lsls	r5, r5, #9
   16286:	46ac      	mov	ip, r5
   16288:	4460      	add	r0, ip
   1628a:	0c15      	lsrs	r5, r2, #16
   1628c:	0409      	lsls	r1, r1, #16
   1628e:	0412      	lsls	r2, r2, #16
   16290:	0c09      	lsrs	r1, r1, #16
   16292:	1828      	adds	r0, r5, r0
   16294:	1852      	adds	r2, r2, r1
   16296:	4283      	cmp	r3, r0
   16298:	d200      	bcs.n	1629c <__aeabi_ddiv+0x2f0>
   1629a:	e0ce      	b.n	1643a <__aeabi_ddiv+0x48e>
   1629c:	d100      	bne.n	162a0 <__aeabi_ddiv+0x2f4>
   1629e:	e0c8      	b.n	16432 <__aeabi_ddiv+0x486>
   162a0:	1a1d      	subs	r5, r3, r0
   162a2:	4653      	mov	r3, sl
   162a4:	1a9e      	subs	r6, r3, r2
   162a6:	45b2      	cmp	sl, r6
   162a8:	4192      	sbcs	r2, r2
   162aa:	4252      	negs	r2, r2
   162ac:	1aab      	subs	r3, r5, r2
   162ae:	469a      	mov	sl, r3
   162b0:	4598      	cmp	r8, r3
   162b2:	d100      	bne.n	162b6 <__aeabi_ddiv+0x30a>
   162b4:	e117      	b.n	164e6 <__aeabi_ddiv+0x53a>
   162b6:	0039      	movs	r1, r7
   162b8:	0018      	movs	r0, r3
   162ba:	f7fe f925 	bl	14508 <__udivsi3>
   162be:	9b01      	ldr	r3, [sp, #4]
   162c0:	0005      	movs	r5, r0
   162c2:	4343      	muls	r3, r0
   162c4:	0039      	movs	r1, r7
   162c6:	4650      	mov	r0, sl
   162c8:	9304      	str	r3, [sp, #16]
   162ca:	f7fe f9a3 	bl	14614 <__aeabi_uidivmod>
   162ce:	9804      	ldr	r0, [sp, #16]
   162d0:	040b      	lsls	r3, r1, #16
   162d2:	0c31      	lsrs	r1, r6, #16
   162d4:	4319      	orrs	r1, r3
   162d6:	4288      	cmp	r0, r1
   162d8:	d909      	bls.n	162ee <__aeabi_ddiv+0x342>
   162da:	4441      	add	r1, r8
   162dc:	1e6b      	subs	r3, r5, #1
   162de:	4588      	cmp	r8, r1
   162e0:	d900      	bls.n	162e4 <__aeabi_ddiv+0x338>
   162e2:	e107      	b.n	164f4 <__aeabi_ddiv+0x548>
   162e4:	4288      	cmp	r0, r1
   162e6:	d800      	bhi.n	162ea <__aeabi_ddiv+0x33e>
   162e8:	e104      	b.n	164f4 <__aeabi_ddiv+0x548>
   162ea:	3d02      	subs	r5, #2
   162ec:	4441      	add	r1, r8
   162ee:	9b04      	ldr	r3, [sp, #16]
   162f0:	1acb      	subs	r3, r1, r3
   162f2:	0018      	movs	r0, r3
   162f4:	0039      	movs	r1, r7
   162f6:	9304      	str	r3, [sp, #16]
   162f8:	f7fe f906 	bl	14508 <__udivsi3>
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	4682      	mov	sl, r0
   16300:	4343      	muls	r3, r0
   16302:	0039      	movs	r1, r7
   16304:	9804      	ldr	r0, [sp, #16]
   16306:	9301      	str	r3, [sp, #4]
   16308:	f7fe f984 	bl	14614 <__aeabi_uidivmod>
   1630c:	9801      	ldr	r0, [sp, #4]
   1630e:	040b      	lsls	r3, r1, #16
   16310:	0431      	lsls	r1, r6, #16
   16312:	0c09      	lsrs	r1, r1, #16
   16314:	4319      	orrs	r1, r3
   16316:	4288      	cmp	r0, r1
   16318:	d90d      	bls.n	16336 <__aeabi_ddiv+0x38a>
   1631a:	4653      	mov	r3, sl
   1631c:	4441      	add	r1, r8
   1631e:	3b01      	subs	r3, #1
   16320:	4588      	cmp	r8, r1
   16322:	d900      	bls.n	16326 <__aeabi_ddiv+0x37a>
   16324:	e0e8      	b.n	164f8 <__aeabi_ddiv+0x54c>
   16326:	4288      	cmp	r0, r1
   16328:	d800      	bhi.n	1632c <__aeabi_ddiv+0x380>
   1632a:	e0e5      	b.n	164f8 <__aeabi_ddiv+0x54c>
   1632c:	2302      	movs	r3, #2
   1632e:	425b      	negs	r3, r3
   16330:	469c      	mov	ip, r3
   16332:	4441      	add	r1, r8
   16334:	44e2      	add	sl, ip
   16336:	9b01      	ldr	r3, [sp, #4]
   16338:	042d      	lsls	r5, r5, #16
   1633a:	1ace      	subs	r6, r1, r3
   1633c:	4651      	mov	r1, sl
   1633e:	4329      	orrs	r1, r5
   16340:	9d05      	ldr	r5, [sp, #20]
   16342:	464f      	mov	r7, r9
   16344:	002a      	movs	r2, r5
   16346:	040b      	lsls	r3, r1, #16
   16348:	0c08      	lsrs	r0, r1, #16
   1634a:	0c1b      	lsrs	r3, r3, #16
   1634c:	435a      	muls	r2, r3
   1634e:	4345      	muls	r5, r0
   16350:	437b      	muls	r3, r7
   16352:	4378      	muls	r0, r7
   16354:	195b      	adds	r3, r3, r5
   16356:	0c17      	lsrs	r7, r2, #16
   16358:	18fb      	adds	r3, r7, r3
   1635a:	429d      	cmp	r5, r3
   1635c:	d903      	bls.n	16366 <__aeabi_ddiv+0x3ba>
   1635e:	2580      	movs	r5, #128	; 0x80
   16360:	026d      	lsls	r5, r5, #9
   16362:	46ac      	mov	ip, r5
   16364:	4460      	add	r0, ip
   16366:	0c1d      	lsrs	r5, r3, #16
   16368:	0412      	lsls	r2, r2, #16
   1636a:	041b      	lsls	r3, r3, #16
   1636c:	0c12      	lsrs	r2, r2, #16
   1636e:	1828      	adds	r0, r5, r0
   16370:	189b      	adds	r3, r3, r2
   16372:	4286      	cmp	r6, r0
   16374:	d200      	bcs.n	16378 <__aeabi_ddiv+0x3cc>
   16376:	e093      	b.n	164a0 <__aeabi_ddiv+0x4f4>
   16378:	d100      	bne.n	1637c <__aeabi_ddiv+0x3d0>
   1637a:	e08e      	b.n	1649a <__aeabi_ddiv+0x4ee>
   1637c:	2301      	movs	r3, #1
   1637e:	4319      	orrs	r1, r3
   16380:	4ba0      	ldr	r3, [pc, #640]	; (16604 <__aeabi_ddiv+0x658>)
   16382:	18e3      	adds	r3, r4, r3
   16384:	2b00      	cmp	r3, #0
   16386:	dc00      	bgt.n	1638a <__aeabi_ddiv+0x3de>
   16388:	e099      	b.n	164be <__aeabi_ddiv+0x512>
   1638a:	074a      	lsls	r2, r1, #29
   1638c:	d000      	beq.n	16390 <__aeabi_ddiv+0x3e4>
   1638e:	e09e      	b.n	164ce <__aeabi_ddiv+0x522>
   16390:	465a      	mov	r2, fp
   16392:	01d2      	lsls	r2, r2, #7
   16394:	d506      	bpl.n	163a4 <__aeabi_ddiv+0x3f8>
   16396:	465a      	mov	r2, fp
   16398:	4b9b      	ldr	r3, [pc, #620]	; (16608 <__aeabi_ddiv+0x65c>)
   1639a:	401a      	ands	r2, r3
   1639c:	2380      	movs	r3, #128	; 0x80
   1639e:	4693      	mov	fp, r2
   163a0:	00db      	lsls	r3, r3, #3
   163a2:	18e3      	adds	r3, r4, r3
   163a4:	4a99      	ldr	r2, [pc, #612]	; (1660c <__aeabi_ddiv+0x660>)
   163a6:	4293      	cmp	r3, r2
   163a8:	dd68      	ble.n	1647c <__aeabi_ddiv+0x4d0>
   163aa:	2301      	movs	r3, #1
   163ac:	9a02      	ldr	r2, [sp, #8]
   163ae:	4c98      	ldr	r4, [pc, #608]	; (16610 <__aeabi_ddiv+0x664>)
   163b0:	401a      	ands	r2, r3
   163b2:	2300      	movs	r3, #0
   163b4:	4694      	mov	ip, r2
   163b6:	4698      	mov	r8, r3
   163b8:	2200      	movs	r2, #0
   163ba:	e6c5      	b.n	16148 <__aeabi_ddiv+0x19c>
   163bc:	2280      	movs	r2, #128	; 0x80
   163be:	464b      	mov	r3, r9
   163c0:	0312      	lsls	r2, r2, #12
   163c2:	4213      	tst	r3, r2
   163c4:	d00a      	beq.n	163dc <__aeabi_ddiv+0x430>
   163c6:	465b      	mov	r3, fp
   163c8:	4213      	tst	r3, r2
   163ca:	d106      	bne.n	163da <__aeabi_ddiv+0x42e>
   163cc:	431a      	orrs	r2, r3
   163ce:	0312      	lsls	r2, r2, #12
   163d0:	0b12      	lsrs	r2, r2, #12
   163d2:	46ac      	mov	ip, r5
   163d4:	4688      	mov	r8, r1
   163d6:	4c8e      	ldr	r4, [pc, #568]	; (16610 <__aeabi_ddiv+0x664>)
   163d8:	e6b6      	b.n	16148 <__aeabi_ddiv+0x19c>
   163da:	464b      	mov	r3, r9
   163dc:	431a      	orrs	r2, r3
   163de:	0312      	lsls	r2, r2, #12
   163e0:	0b12      	lsrs	r2, r2, #12
   163e2:	46bc      	mov	ip, r7
   163e4:	4c8a      	ldr	r4, [pc, #552]	; (16610 <__aeabi_ddiv+0x664>)
   163e6:	e6af      	b.n	16148 <__aeabi_ddiv+0x19c>
   163e8:	0003      	movs	r3, r0
   163ea:	465a      	mov	r2, fp
   163ec:	3b28      	subs	r3, #40	; 0x28
   163ee:	409a      	lsls	r2, r3
   163f0:	2300      	movs	r3, #0
   163f2:	4691      	mov	r9, r2
   163f4:	4698      	mov	r8, r3
   163f6:	e657      	b.n	160a8 <__aeabi_ddiv+0xfc>
   163f8:	4658      	mov	r0, fp
   163fa:	f001 f8a1 	bl	17540 <__clzsi2>
   163fe:	3020      	adds	r0, #32
   16400:	e640      	b.n	16084 <__aeabi_ddiv+0xd8>
   16402:	0003      	movs	r3, r0
   16404:	4652      	mov	r2, sl
   16406:	3b28      	subs	r3, #40	; 0x28
   16408:	409a      	lsls	r2, r3
   1640a:	2100      	movs	r1, #0
   1640c:	4693      	mov	fp, r2
   1640e:	e677      	b.n	16100 <__aeabi_ddiv+0x154>
   16410:	f001 f896 	bl	17540 <__clzsi2>
   16414:	3020      	adds	r0, #32
   16416:	e65f      	b.n	160d8 <__aeabi_ddiv+0x12c>
   16418:	4588      	cmp	r8, r1
   1641a:	d200      	bcs.n	1641e <__aeabi_ddiv+0x472>
   1641c:	e6c7      	b.n	161ae <__aeabi_ddiv+0x202>
   1641e:	464b      	mov	r3, r9
   16420:	07de      	lsls	r6, r3, #31
   16422:	085d      	lsrs	r5, r3, #1
   16424:	4643      	mov	r3, r8
   16426:	085b      	lsrs	r3, r3, #1
   16428:	431e      	orrs	r6, r3
   1642a:	4643      	mov	r3, r8
   1642c:	07db      	lsls	r3, r3, #31
   1642e:	469a      	mov	sl, r3
   16430:	e6c2      	b.n	161b8 <__aeabi_ddiv+0x20c>
   16432:	2500      	movs	r5, #0
   16434:	4592      	cmp	sl, r2
   16436:	d300      	bcc.n	1643a <__aeabi_ddiv+0x48e>
   16438:	e733      	b.n	162a2 <__aeabi_ddiv+0x2f6>
   1643a:	9e03      	ldr	r6, [sp, #12]
   1643c:	4659      	mov	r1, fp
   1643e:	46b4      	mov	ip, r6
   16440:	44e2      	add	sl, ip
   16442:	45b2      	cmp	sl, r6
   16444:	41ad      	sbcs	r5, r5
   16446:	426d      	negs	r5, r5
   16448:	4445      	add	r5, r8
   1644a:	18eb      	adds	r3, r5, r3
   1644c:	3901      	subs	r1, #1
   1644e:	4598      	cmp	r8, r3
   16450:	d207      	bcs.n	16462 <__aeabi_ddiv+0x4b6>
   16452:	4298      	cmp	r0, r3
   16454:	d900      	bls.n	16458 <__aeabi_ddiv+0x4ac>
   16456:	e07f      	b.n	16558 <__aeabi_ddiv+0x5ac>
   16458:	d100      	bne.n	1645c <__aeabi_ddiv+0x4b0>
   1645a:	e0bc      	b.n	165d6 <__aeabi_ddiv+0x62a>
   1645c:	1a1d      	subs	r5, r3, r0
   1645e:	468b      	mov	fp, r1
   16460:	e71f      	b.n	162a2 <__aeabi_ddiv+0x2f6>
   16462:	4598      	cmp	r8, r3
   16464:	d1fa      	bne.n	1645c <__aeabi_ddiv+0x4b0>
   16466:	9d03      	ldr	r5, [sp, #12]
   16468:	4555      	cmp	r5, sl
   1646a:	d9f2      	bls.n	16452 <__aeabi_ddiv+0x4a6>
   1646c:	4643      	mov	r3, r8
   1646e:	468b      	mov	fp, r1
   16470:	1a1d      	subs	r5, r3, r0
   16472:	e716      	b.n	162a2 <__aeabi_ddiv+0x2f6>
   16474:	469b      	mov	fp, r3
   16476:	e6ca      	b.n	1620e <__aeabi_ddiv+0x262>
   16478:	0015      	movs	r5, r2
   1647a:	e6e7      	b.n	1624c <__aeabi_ddiv+0x2a0>
   1647c:	465a      	mov	r2, fp
   1647e:	08c9      	lsrs	r1, r1, #3
   16480:	0752      	lsls	r2, r2, #29
   16482:	430a      	orrs	r2, r1
   16484:	055b      	lsls	r3, r3, #21
   16486:	4690      	mov	r8, r2
   16488:	0d5c      	lsrs	r4, r3, #21
   1648a:	465a      	mov	r2, fp
   1648c:	2301      	movs	r3, #1
   1648e:	9902      	ldr	r1, [sp, #8]
   16490:	0252      	lsls	r2, r2, #9
   16492:	4019      	ands	r1, r3
   16494:	0b12      	lsrs	r2, r2, #12
   16496:	468c      	mov	ip, r1
   16498:	e656      	b.n	16148 <__aeabi_ddiv+0x19c>
   1649a:	2b00      	cmp	r3, #0
   1649c:	d100      	bne.n	164a0 <__aeabi_ddiv+0x4f4>
   1649e:	e76f      	b.n	16380 <__aeabi_ddiv+0x3d4>
   164a0:	4446      	add	r6, r8
   164a2:	1e4a      	subs	r2, r1, #1
   164a4:	45b0      	cmp	r8, r6
   164a6:	d929      	bls.n	164fc <__aeabi_ddiv+0x550>
   164a8:	0011      	movs	r1, r2
   164aa:	4286      	cmp	r6, r0
   164ac:	d000      	beq.n	164b0 <__aeabi_ddiv+0x504>
   164ae:	e765      	b.n	1637c <__aeabi_ddiv+0x3d0>
   164b0:	9a03      	ldr	r2, [sp, #12]
   164b2:	4293      	cmp	r3, r2
   164b4:	d000      	beq.n	164b8 <__aeabi_ddiv+0x50c>
   164b6:	e761      	b.n	1637c <__aeabi_ddiv+0x3d0>
   164b8:	e762      	b.n	16380 <__aeabi_ddiv+0x3d4>
   164ba:	2101      	movs	r1, #1
   164bc:	4249      	negs	r1, r1
   164be:	2001      	movs	r0, #1
   164c0:	1ac2      	subs	r2, r0, r3
   164c2:	2a38      	cmp	r2, #56	; 0x38
   164c4:	dd21      	ble.n	1650a <__aeabi_ddiv+0x55e>
   164c6:	9b02      	ldr	r3, [sp, #8]
   164c8:	4003      	ands	r3, r0
   164ca:	469c      	mov	ip, r3
   164cc:	e638      	b.n	16140 <__aeabi_ddiv+0x194>
   164ce:	220f      	movs	r2, #15
   164d0:	400a      	ands	r2, r1
   164d2:	2a04      	cmp	r2, #4
   164d4:	d100      	bne.n	164d8 <__aeabi_ddiv+0x52c>
   164d6:	e75b      	b.n	16390 <__aeabi_ddiv+0x3e4>
   164d8:	000a      	movs	r2, r1
   164da:	1d11      	adds	r1, r2, #4
   164dc:	4291      	cmp	r1, r2
   164de:	4192      	sbcs	r2, r2
   164e0:	4252      	negs	r2, r2
   164e2:	4493      	add	fp, r2
   164e4:	e754      	b.n	16390 <__aeabi_ddiv+0x3e4>
   164e6:	4b47      	ldr	r3, [pc, #284]	; (16604 <__aeabi_ddiv+0x658>)
   164e8:	18e3      	adds	r3, r4, r3
   164ea:	2b00      	cmp	r3, #0
   164ec:	dde5      	ble.n	164ba <__aeabi_ddiv+0x50e>
   164ee:	2201      	movs	r2, #1
   164f0:	4252      	negs	r2, r2
   164f2:	e7f2      	b.n	164da <__aeabi_ddiv+0x52e>
   164f4:	001d      	movs	r5, r3
   164f6:	e6fa      	b.n	162ee <__aeabi_ddiv+0x342>
   164f8:	469a      	mov	sl, r3
   164fa:	e71c      	b.n	16336 <__aeabi_ddiv+0x38a>
   164fc:	42b0      	cmp	r0, r6
   164fe:	d839      	bhi.n	16574 <__aeabi_ddiv+0x5c8>
   16500:	d06e      	beq.n	165e0 <__aeabi_ddiv+0x634>
   16502:	0011      	movs	r1, r2
   16504:	e73a      	b.n	1637c <__aeabi_ddiv+0x3d0>
   16506:	9302      	str	r3, [sp, #8]
   16508:	e73a      	b.n	16380 <__aeabi_ddiv+0x3d4>
   1650a:	2a1f      	cmp	r2, #31
   1650c:	dc3c      	bgt.n	16588 <__aeabi_ddiv+0x5dc>
   1650e:	2320      	movs	r3, #32
   16510:	1a9b      	subs	r3, r3, r2
   16512:	000c      	movs	r4, r1
   16514:	4658      	mov	r0, fp
   16516:	4099      	lsls	r1, r3
   16518:	4098      	lsls	r0, r3
   1651a:	1e4b      	subs	r3, r1, #1
   1651c:	4199      	sbcs	r1, r3
   1651e:	465b      	mov	r3, fp
   16520:	40d4      	lsrs	r4, r2
   16522:	40d3      	lsrs	r3, r2
   16524:	4320      	orrs	r0, r4
   16526:	4308      	orrs	r0, r1
   16528:	001a      	movs	r2, r3
   1652a:	0743      	lsls	r3, r0, #29
   1652c:	d009      	beq.n	16542 <__aeabi_ddiv+0x596>
   1652e:	230f      	movs	r3, #15
   16530:	4003      	ands	r3, r0
   16532:	2b04      	cmp	r3, #4
   16534:	d005      	beq.n	16542 <__aeabi_ddiv+0x596>
   16536:	0001      	movs	r1, r0
   16538:	1d08      	adds	r0, r1, #4
   1653a:	4288      	cmp	r0, r1
   1653c:	419b      	sbcs	r3, r3
   1653e:	425b      	negs	r3, r3
   16540:	18d2      	adds	r2, r2, r3
   16542:	0213      	lsls	r3, r2, #8
   16544:	d53a      	bpl.n	165bc <__aeabi_ddiv+0x610>
   16546:	2301      	movs	r3, #1
   16548:	9a02      	ldr	r2, [sp, #8]
   1654a:	2401      	movs	r4, #1
   1654c:	401a      	ands	r2, r3
   1654e:	2300      	movs	r3, #0
   16550:	4694      	mov	ip, r2
   16552:	4698      	mov	r8, r3
   16554:	2200      	movs	r2, #0
   16556:	e5f7      	b.n	16148 <__aeabi_ddiv+0x19c>
   16558:	2102      	movs	r1, #2
   1655a:	4249      	negs	r1, r1
   1655c:	468c      	mov	ip, r1
   1655e:	9d03      	ldr	r5, [sp, #12]
   16560:	44e3      	add	fp, ip
   16562:	46ac      	mov	ip, r5
   16564:	44e2      	add	sl, ip
   16566:	45aa      	cmp	sl, r5
   16568:	41ad      	sbcs	r5, r5
   1656a:	426d      	negs	r5, r5
   1656c:	4445      	add	r5, r8
   1656e:	18ed      	adds	r5, r5, r3
   16570:	1a2d      	subs	r5, r5, r0
   16572:	e696      	b.n	162a2 <__aeabi_ddiv+0x2f6>
   16574:	1e8a      	subs	r2, r1, #2
   16576:	9903      	ldr	r1, [sp, #12]
   16578:	004d      	lsls	r5, r1, #1
   1657a:	428d      	cmp	r5, r1
   1657c:	4189      	sbcs	r1, r1
   1657e:	4249      	negs	r1, r1
   16580:	4441      	add	r1, r8
   16582:	1876      	adds	r6, r6, r1
   16584:	9503      	str	r5, [sp, #12]
   16586:	e78f      	b.n	164a8 <__aeabi_ddiv+0x4fc>
   16588:	201f      	movs	r0, #31
   1658a:	4240      	negs	r0, r0
   1658c:	1ac3      	subs	r3, r0, r3
   1658e:	4658      	mov	r0, fp
   16590:	40d8      	lsrs	r0, r3
   16592:	0003      	movs	r3, r0
   16594:	2a20      	cmp	r2, #32
   16596:	d028      	beq.n	165ea <__aeabi_ddiv+0x63e>
   16598:	2040      	movs	r0, #64	; 0x40
   1659a:	465d      	mov	r5, fp
   1659c:	1a82      	subs	r2, r0, r2
   1659e:	4095      	lsls	r5, r2
   165a0:	4329      	orrs	r1, r5
   165a2:	1e4a      	subs	r2, r1, #1
   165a4:	4191      	sbcs	r1, r2
   165a6:	4319      	orrs	r1, r3
   165a8:	2307      	movs	r3, #7
   165aa:	2200      	movs	r2, #0
   165ac:	400b      	ands	r3, r1
   165ae:	d009      	beq.n	165c4 <__aeabi_ddiv+0x618>
   165b0:	230f      	movs	r3, #15
   165b2:	2200      	movs	r2, #0
   165b4:	400b      	ands	r3, r1
   165b6:	0008      	movs	r0, r1
   165b8:	2b04      	cmp	r3, #4
   165ba:	d1bd      	bne.n	16538 <__aeabi_ddiv+0x58c>
   165bc:	0001      	movs	r1, r0
   165be:	0753      	lsls	r3, r2, #29
   165c0:	0252      	lsls	r2, r2, #9
   165c2:	0b12      	lsrs	r2, r2, #12
   165c4:	08c9      	lsrs	r1, r1, #3
   165c6:	4319      	orrs	r1, r3
   165c8:	2301      	movs	r3, #1
   165ca:	4688      	mov	r8, r1
   165cc:	9902      	ldr	r1, [sp, #8]
   165ce:	2400      	movs	r4, #0
   165d0:	4019      	ands	r1, r3
   165d2:	468c      	mov	ip, r1
   165d4:	e5b8      	b.n	16148 <__aeabi_ddiv+0x19c>
   165d6:	4552      	cmp	r2, sl
   165d8:	d8be      	bhi.n	16558 <__aeabi_ddiv+0x5ac>
   165da:	468b      	mov	fp, r1
   165dc:	2500      	movs	r5, #0
   165de:	e660      	b.n	162a2 <__aeabi_ddiv+0x2f6>
   165e0:	9d03      	ldr	r5, [sp, #12]
   165e2:	429d      	cmp	r5, r3
   165e4:	d3c6      	bcc.n	16574 <__aeabi_ddiv+0x5c8>
   165e6:	0011      	movs	r1, r2
   165e8:	e762      	b.n	164b0 <__aeabi_ddiv+0x504>
   165ea:	2500      	movs	r5, #0
   165ec:	e7d8      	b.n	165a0 <__aeabi_ddiv+0x5f4>
   165ee:	2280      	movs	r2, #128	; 0x80
   165f0:	465b      	mov	r3, fp
   165f2:	0312      	lsls	r2, r2, #12
   165f4:	431a      	orrs	r2, r3
   165f6:	9b01      	ldr	r3, [sp, #4]
   165f8:	0312      	lsls	r2, r2, #12
   165fa:	0b12      	lsrs	r2, r2, #12
   165fc:	469c      	mov	ip, r3
   165fe:	4688      	mov	r8, r1
   16600:	4c03      	ldr	r4, [pc, #12]	; (16610 <__aeabi_ddiv+0x664>)
   16602:	e5a1      	b.n	16148 <__aeabi_ddiv+0x19c>
   16604:	000003ff 	.word	0x000003ff
   16608:	feffffff 	.word	0xfeffffff
   1660c:	000007fe 	.word	0x000007fe
   16610:	000007ff 	.word	0x000007ff

00016614 <__eqdf2>:
   16614:	b5f0      	push	{r4, r5, r6, r7, lr}
   16616:	464f      	mov	r7, r9
   16618:	4646      	mov	r6, r8
   1661a:	46d6      	mov	lr, sl
   1661c:	005c      	lsls	r4, r3, #1
   1661e:	b5c0      	push	{r6, r7, lr}
   16620:	031f      	lsls	r7, r3, #12
   16622:	0fdb      	lsrs	r3, r3, #31
   16624:	469a      	mov	sl, r3
   16626:	4b17      	ldr	r3, [pc, #92]	; (16684 <__eqdf2+0x70>)
   16628:	030e      	lsls	r6, r1, #12
   1662a:	004d      	lsls	r5, r1, #1
   1662c:	4684      	mov	ip, r0
   1662e:	4680      	mov	r8, r0
   16630:	0b36      	lsrs	r6, r6, #12
   16632:	0d6d      	lsrs	r5, r5, #21
   16634:	0fc9      	lsrs	r1, r1, #31
   16636:	4691      	mov	r9, r2
   16638:	0b3f      	lsrs	r7, r7, #12
   1663a:	0d64      	lsrs	r4, r4, #21
   1663c:	2001      	movs	r0, #1
   1663e:	429d      	cmp	r5, r3
   16640:	d008      	beq.n	16654 <__eqdf2+0x40>
   16642:	429c      	cmp	r4, r3
   16644:	d001      	beq.n	1664a <__eqdf2+0x36>
   16646:	42a5      	cmp	r5, r4
   16648:	d00b      	beq.n	16662 <__eqdf2+0x4e>
   1664a:	bc1c      	pop	{r2, r3, r4}
   1664c:	4690      	mov	r8, r2
   1664e:	4699      	mov	r9, r3
   16650:	46a2      	mov	sl, r4
   16652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16654:	4663      	mov	r3, ip
   16656:	4333      	orrs	r3, r6
   16658:	d1f7      	bne.n	1664a <__eqdf2+0x36>
   1665a:	42ac      	cmp	r4, r5
   1665c:	d1f5      	bne.n	1664a <__eqdf2+0x36>
   1665e:	433a      	orrs	r2, r7
   16660:	d1f3      	bne.n	1664a <__eqdf2+0x36>
   16662:	2001      	movs	r0, #1
   16664:	42be      	cmp	r6, r7
   16666:	d1f0      	bne.n	1664a <__eqdf2+0x36>
   16668:	45c8      	cmp	r8, r9
   1666a:	d1ee      	bne.n	1664a <__eqdf2+0x36>
   1666c:	4551      	cmp	r1, sl
   1666e:	d007      	beq.n	16680 <__eqdf2+0x6c>
   16670:	2d00      	cmp	r5, #0
   16672:	d1ea      	bne.n	1664a <__eqdf2+0x36>
   16674:	4663      	mov	r3, ip
   16676:	431e      	orrs	r6, r3
   16678:	0030      	movs	r0, r6
   1667a:	1e46      	subs	r6, r0, #1
   1667c:	41b0      	sbcs	r0, r6
   1667e:	e7e4      	b.n	1664a <__eqdf2+0x36>
   16680:	2000      	movs	r0, #0
   16682:	e7e2      	b.n	1664a <__eqdf2+0x36>
   16684:	000007ff 	.word	0x000007ff

00016688 <__gedf2>:
   16688:	b5f0      	push	{r4, r5, r6, r7, lr}
   1668a:	4645      	mov	r5, r8
   1668c:	46de      	mov	lr, fp
   1668e:	4657      	mov	r7, sl
   16690:	464e      	mov	r6, r9
   16692:	b5e0      	push	{r5, r6, r7, lr}
   16694:	031f      	lsls	r7, r3, #12
   16696:	0b3d      	lsrs	r5, r7, #12
   16698:	4f2c      	ldr	r7, [pc, #176]	; (1674c <__gedf2+0xc4>)
   1669a:	030e      	lsls	r6, r1, #12
   1669c:	004c      	lsls	r4, r1, #1
   1669e:	46ab      	mov	fp, r5
   166a0:	005d      	lsls	r5, r3, #1
   166a2:	4684      	mov	ip, r0
   166a4:	0b36      	lsrs	r6, r6, #12
   166a6:	0d64      	lsrs	r4, r4, #21
   166a8:	0fc9      	lsrs	r1, r1, #31
   166aa:	4690      	mov	r8, r2
   166ac:	0d6d      	lsrs	r5, r5, #21
   166ae:	0fdb      	lsrs	r3, r3, #31
   166b0:	42bc      	cmp	r4, r7
   166b2:	d02a      	beq.n	1670a <__gedf2+0x82>
   166b4:	4f25      	ldr	r7, [pc, #148]	; (1674c <__gedf2+0xc4>)
   166b6:	42bd      	cmp	r5, r7
   166b8:	d02d      	beq.n	16716 <__gedf2+0x8e>
   166ba:	2c00      	cmp	r4, #0
   166bc:	d10f      	bne.n	166de <__gedf2+0x56>
   166be:	4330      	orrs	r0, r6
   166c0:	0007      	movs	r7, r0
   166c2:	4681      	mov	r9, r0
   166c4:	4278      	negs	r0, r7
   166c6:	4178      	adcs	r0, r7
   166c8:	b2c0      	uxtb	r0, r0
   166ca:	2d00      	cmp	r5, #0
   166cc:	d117      	bne.n	166fe <__gedf2+0x76>
   166ce:	465f      	mov	r7, fp
   166d0:	433a      	orrs	r2, r7
   166d2:	d114      	bne.n	166fe <__gedf2+0x76>
   166d4:	464b      	mov	r3, r9
   166d6:	2000      	movs	r0, #0
   166d8:	2b00      	cmp	r3, #0
   166da:	d00a      	beq.n	166f2 <__gedf2+0x6a>
   166dc:	e006      	b.n	166ec <__gedf2+0x64>
   166de:	2d00      	cmp	r5, #0
   166e0:	d102      	bne.n	166e8 <__gedf2+0x60>
   166e2:	4658      	mov	r0, fp
   166e4:	4302      	orrs	r2, r0
   166e6:	d001      	beq.n	166ec <__gedf2+0x64>
   166e8:	4299      	cmp	r1, r3
   166ea:	d018      	beq.n	1671e <__gedf2+0x96>
   166ec:	4248      	negs	r0, r1
   166ee:	2101      	movs	r1, #1
   166f0:	4308      	orrs	r0, r1
   166f2:	bc3c      	pop	{r2, r3, r4, r5}
   166f4:	4690      	mov	r8, r2
   166f6:	4699      	mov	r9, r3
   166f8:	46a2      	mov	sl, r4
   166fa:	46ab      	mov	fp, r5
   166fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   166fe:	2800      	cmp	r0, #0
   16700:	d0f2      	beq.n	166e8 <__gedf2+0x60>
   16702:	2001      	movs	r0, #1
   16704:	3b01      	subs	r3, #1
   16706:	4318      	orrs	r0, r3
   16708:	e7f3      	b.n	166f2 <__gedf2+0x6a>
   1670a:	0037      	movs	r7, r6
   1670c:	4307      	orrs	r7, r0
   1670e:	d0d1      	beq.n	166b4 <__gedf2+0x2c>
   16710:	2002      	movs	r0, #2
   16712:	4240      	negs	r0, r0
   16714:	e7ed      	b.n	166f2 <__gedf2+0x6a>
   16716:	465f      	mov	r7, fp
   16718:	4317      	orrs	r7, r2
   1671a:	d0ce      	beq.n	166ba <__gedf2+0x32>
   1671c:	e7f8      	b.n	16710 <__gedf2+0x88>
   1671e:	42ac      	cmp	r4, r5
   16720:	dce4      	bgt.n	166ec <__gedf2+0x64>
   16722:	da03      	bge.n	1672c <__gedf2+0xa4>
   16724:	1e48      	subs	r0, r1, #1
   16726:	2101      	movs	r1, #1
   16728:	4308      	orrs	r0, r1
   1672a:	e7e2      	b.n	166f2 <__gedf2+0x6a>
   1672c:	455e      	cmp	r6, fp
   1672e:	d8dd      	bhi.n	166ec <__gedf2+0x64>
   16730:	d006      	beq.n	16740 <__gedf2+0xb8>
   16732:	2000      	movs	r0, #0
   16734:	455e      	cmp	r6, fp
   16736:	d2dc      	bcs.n	166f2 <__gedf2+0x6a>
   16738:	2301      	movs	r3, #1
   1673a:	1e48      	subs	r0, r1, #1
   1673c:	4318      	orrs	r0, r3
   1673e:	e7d8      	b.n	166f2 <__gedf2+0x6a>
   16740:	45c4      	cmp	ip, r8
   16742:	d8d3      	bhi.n	166ec <__gedf2+0x64>
   16744:	2000      	movs	r0, #0
   16746:	45c4      	cmp	ip, r8
   16748:	d3f6      	bcc.n	16738 <__gedf2+0xb0>
   1674a:	e7d2      	b.n	166f2 <__gedf2+0x6a>
   1674c:	000007ff 	.word	0x000007ff

00016750 <__ledf2>:
   16750:	b5f0      	push	{r4, r5, r6, r7, lr}
   16752:	464e      	mov	r6, r9
   16754:	4645      	mov	r5, r8
   16756:	46de      	mov	lr, fp
   16758:	4657      	mov	r7, sl
   1675a:	005c      	lsls	r4, r3, #1
   1675c:	b5e0      	push	{r5, r6, r7, lr}
   1675e:	031f      	lsls	r7, r3, #12
   16760:	0fdb      	lsrs	r3, r3, #31
   16762:	4699      	mov	r9, r3
   16764:	4b2a      	ldr	r3, [pc, #168]	; (16810 <__ledf2+0xc0>)
   16766:	030e      	lsls	r6, r1, #12
   16768:	004d      	lsls	r5, r1, #1
   1676a:	0fc9      	lsrs	r1, r1, #31
   1676c:	4684      	mov	ip, r0
   1676e:	0b36      	lsrs	r6, r6, #12
   16770:	0d6d      	lsrs	r5, r5, #21
   16772:	468b      	mov	fp, r1
   16774:	4690      	mov	r8, r2
   16776:	0b3f      	lsrs	r7, r7, #12
   16778:	0d64      	lsrs	r4, r4, #21
   1677a:	429d      	cmp	r5, r3
   1677c:	d020      	beq.n	167c0 <__ledf2+0x70>
   1677e:	4b24      	ldr	r3, [pc, #144]	; (16810 <__ledf2+0xc0>)
   16780:	429c      	cmp	r4, r3
   16782:	d022      	beq.n	167ca <__ledf2+0x7a>
   16784:	2d00      	cmp	r5, #0
   16786:	d112      	bne.n	167ae <__ledf2+0x5e>
   16788:	4330      	orrs	r0, r6
   1678a:	4243      	negs	r3, r0
   1678c:	4143      	adcs	r3, r0
   1678e:	b2db      	uxtb	r3, r3
   16790:	2c00      	cmp	r4, #0
   16792:	d01f      	beq.n	167d4 <__ledf2+0x84>
   16794:	2b00      	cmp	r3, #0
   16796:	d00c      	beq.n	167b2 <__ledf2+0x62>
   16798:	464b      	mov	r3, r9
   1679a:	2001      	movs	r0, #1
   1679c:	3b01      	subs	r3, #1
   1679e:	4303      	orrs	r3, r0
   167a0:	0018      	movs	r0, r3
   167a2:	bc3c      	pop	{r2, r3, r4, r5}
   167a4:	4690      	mov	r8, r2
   167a6:	4699      	mov	r9, r3
   167a8:	46a2      	mov	sl, r4
   167aa:	46ab      	mov	fp, r5
   167ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167ae:	2c00      	cmp	r4, #0
   167b0:	d016      	beq.n	167e0 <__ledf2+0x90>
   167b2:	45cb      	cmp	fp, r9
   167b4:	d017      	beq.n	167e6 <__ledf2+0x96>
   167b6:	465b      	mov	r3, fp
   167b8:	4259      	negs	r1, r3
   167ba:	2301      	movs	r3, #1
   167bc:	430b      	orrs	r3, r1
   167be:	e7ef      	b.n	167a0 <__ledf2+0x50>
   167c0:	0031      	movs	r1, r6
   167c2:	2302      	movs	r3, #2
   167c4:	4301      	orrs	r1, r0
   167c6:	d1eb      	bne.n	167a0 <__ledf2+0x50>
   167c8:	e7d9      	b.n	1677e <__ledf2+0x2e>
   167ca:	0039      	movs	r1, r7
   167cc:	2302      	movs	r3, #2
   167ce:	4311      	orrs	r1, r2
   167d0:	d1e6      	bne.n	167a0 <__ledf2+0x50>
   167d2:	e7d7      	b.n	16784 <__ledf2+0x34>
   167d4:	433a      	orrs	r2, r7
   167d6:	d1dd      	bne.n	16794 <__ledf2+0x44>
   167d8:	2300      	movs	r3, #0
   167da:	2800      	cmp	r0, #0
   167dc:	d0e0      	beq.n	167a0 <__ledf2+0x50>
   167de:	e7ea      	b.n	167b6 <__ledf2+0x66>
   167e0:	433a      	orrs	r2, r7
   167e2:	d1e6      	bne.n	167b2 <__ledf2+0x62>
   167e4:	e7e7      	b.n	167b6 <__ledf2+0x66>
   167e6:	42a5      	cmp	r5, r4
   167e8:	dce5      	bgt.n	167b6 <__ledf2+0x66>
   167ea:	db05      	blt.n	167f8 <__ledf2+0xa8>
   167ec:	42be      	cmp	r6, r7
   167ee:	d8e2      	bhi.n	167b6 <__ledf2+0x66>
   167f0:	d007      	beq.n	16802 <__ledf2+0xb2>
   167f2:	2300      	movs	r3, #0
   167f4:	42be      	cmp	r6, r7
   167f6:	d2d3      	bcs.n	167a0 <__ledf2+0x50>
   167f8:	4659      	mov	r1, fp
   167fa:	2301      	movs	r3, #1
   167fc:	3901      	subs	r1, #1
   167fe:	430b      	orrs	r3, r1
   16800:	e7ce      	b.n	167a0 <__ledf2+0x50>
   16802:	45c4      	cmp	ip, r8
   16804:	d8d7      	bhi.n	167b6 <__ledf2+0x66>
   16806:	2300      	movs	r3, #0
   16808:	45c4      	cmp	ip, r8
   1680a:	d3f5      	bcc.n	167f8 <__ledf2+0xa8>
   1680c:	e7c8      	b.n	167a0 <__ledf2+0x50>
   1680e:	46c0      	nop			; (mov r8, r8)
   16810:	000007ff 	.word	0x000007ff

00016814 <__aeabi_dmul>:
   16814:	b5f0      	push	{r4, r5, r6, r7, lr}
   16816:	4657      	mov	r7, sl
   16818:	4645      	mov	r5, r8
   1681a:	46de      	mov	lr, fp
   1681c:	464e      	mov	r6, r9
   1681e:	b5e0      	push	{r5, r6, r7, lr}
   16820:	030c      	lsls	r4, r1, #12
   16822:	4698      	mov	r8, r3
   16824:	004e      	lsls	r6, r1, #1
   16826:	0b23      	lsrs	r3, r4, #12
   16828:	b087      	sub	sp, #28
   1682a:	0007      	movs	r7, r0
   1682c:	4692      	mov	sl, r2
   1682e:	469b      	mov	fp, r3
   16830:	0d76      	lsrs	r6, r6, #21
   16832:	0fcd      	lsrs	r5, r1, #31
   16834:	2e00      	cmp	r6, #0
   16836:	d06b      	beq.n	16910 <__aeabi_dmul+0xfc>
   16838:	4b6d      	ldr	r3, [pc, #436]	; (169f0 <__aeabi_dmul+0x1dc>)
   1683a:	429e      	cmp	r6, r3
   1683c:	d035      	beq.n	168aa <__aeabi_dmul+0x96>
   1683e:	2480      	movs	r4, #128	; 0x80
   16840:	465b      	mov	r3, fp
   16842:	0f42      	lsrs	r2, r0, #29
   16844:	0424      	lsls	r4, r4, #16
   16846:	00db      	lsls	r3, r3, #3
   16848:	4314      	orrs	r4, r2
   1684a:	431c      	orrs	r4, r3
   1684c:	00c3      	lsls	r3, r0, #3
   1684e:	4699      	mov	r9, r3
   16850:	4b68      	ldr	r3, [pc, #416]	; (169f4 <__aeabi_dmul+0x1e0>)
   16852:	46a3      	mov	fp, r4
   16854:	469c      	mov	ip, r3
   16856:	2300      	movs	r3, #0
   16858:	2700      	movs	r7, #0
   1685a:	4466      	add	r6, ip
   1685c:	9302      	str	r3, [sp, #8]
   1685e:	4643      	mov	r3, r8
   16860:	031c      	lsls	r4, r3, #12
   16862:	005a      	lsls	r2, r3, #1
   16864:	0fdb      	lsrs	r3, r3, #31
   16866:	4650      	mov	r0, sl
   16868:	0b24      	lsrs	r4, r4, #12
   1686a:	0d52      	lsrs	r2, r2, #21
   1686c:	4698      	mov	r8, r3
   1686e:	d100      	bne.n	16872 <__aeabi_dmul+0x5e>
   16870:	e076      	b.n	16960 <__aeabi_dmul+0x14c>
   16872:	4b5f      	ldr	r3, [pc, #380]	; (169f0 <__aeabi_dmul+0x1dc>)
   16874:	429a      	cmp	r2, r3
   16876:	d06d      	beq.n	16954 <__aeabi_dmul+0x140>
   16878:	2380      	movs	r3, #128	; 0x80
   1687a:	0f41      	lsrs	r1, r0, #29
   1687c:	041b      	lsls	r3, r3, #16
   1687e:	430b      	orrs	r3, r1
   16880:	495c      	ldr	r1, [pc, #368]	; (169f4 <__aeabi_dmul+0x1e0>)
   16882:	00e4      	lsls	r4, r4, #3
   16884:	468c      	mov	ip, r1
   16886:	431c      	orrs	r4, r3
   16888:	00c3      	lsls	r3, r0, #3
   1688a:	2000      	movs	r0, #0
   1688c:	4462      	add	r2, ip
   1688e:	4641      	mov	r1, r8
   16890:	18b6      	adds	r6, r6, r2
   16892:	4069      	eors	r1, r5
   16894:	1c72      	adds	r2, r6, #1
   16896:	9101      	str	r1, [sp, #4]
   16898:	4694      	mov	ip, r2
   1689a:	4307      	orrs	r7, r0
   1689c:	2f0f      	cmp	r7, #15
   1689e:	d900      	bls.n	168a2 <__aeabi_dmul+0x8e>
   168a0:	e0b0      	b.n	16a04 <__aeabi_dmul+0x1f0>
   168a2:	4a55      	ldr	r2, [pc, #340]	; (169f8 <__aeabi_dmul+0x1e4>)
   168a4:	00bf      	lsls	r7, r7, #2
   168a6:	59d2      	ldr	r2, [r2, r7]
   168a8:	4697      	mov	pc, r2
   168aa:	465b      	mov	r3, fp
   168ac:	4303      	orrs	r3, r0
   168ae:	4699      	mov	r9, r3
   168b0:	d000      	beq.n	168b4 <__aeabi_dmul+0xa0>
   168b2:	e087      	b.n	169c4 <__aeabi_dmul+0x1b0>
   168b4:	2300      	movs	r3, #0
   168b6:	469b      	mov	fp, r3
   168b8:	3302      	adds	r3, #2
   168ba:	2708      	movs	r7, #8
   168bc:	9302      	str	r3, [sp, #8]
   168be:	e7ce      	b.n	1685e <__aeabi_dmul+0x4a>
   168c0:	4642      	mov	r2, r8
   168c2:	9201      	str	r2, [sp, #4]
   168c4:	2802      	cmp	r0, #2
   168c6:	d067      	beq.n	16998 <__aeabi_dmul+0x184>
   168c8:	2803      	cmp	r0, #3
   168ca:	d100      	bne.n	168ce <__aeabi_dmul+0xba>
   168cc:	e20e      	b.n	16cec <__aeabi_dmul+0x4d8>
   168ce:	2801      	cmp	r0, #1
   168d0:	d000      	beq.n	168d4 <__aeabi_dmul+0xc0>
   168d2:	e162      	b.n	16b9a <__aeabi_dmul+0x386>
   168d4:	2300      	movs	r3, #0
   168d6:	2400      	movs	r4, #0
   168d8:	2200      	movs	r2, #0
   168da:	4699      	mov	r9, r3
   168dc:	9901      	ldr	r1, [sp, #4]
   168de:	4001      	ands	r1, r0
   168e0:	b2cd      	uxtb	r5, r1
   168e2:	2100      	movs	r1, #0
   168e4:	0312      	lsls	r2, r2, #12
   168e6:	0d0b      	lsrs	r3, r1, #20
   168e8:	0b12      	lsrs	r2, r2, #12
   168ea:	051b      	lsls	r3, r3, #20
   168ec:	4313      	orrs	r3, r2
   168ee:	4a43      	ldr	r2, [pc, #268]	; (169fc <__aeabi_dmul+0x1e8>)
   168f0:	0524      	lsls	r4, r4, #20
   168f2:	4013      	ands	r3, r2
   168f4:	431c      	orrs	r4, r3
   168f6:	0064      	lsls	r4, r4, #1
   168f8:	07ed      	lsls	r5, r5, #31
   168fa:	0864      	lsrs	r4, r4, #1
   168fc:	432c      	orrs	r4, r5
   168fe:	4648      	mov	r0, r9
   16900:	0021      	movs	r1, r4
   16902:	b007      	add	sp, #28
   16904:	bc3c      	pop	{r2, r3, r4, r5}
   16906:	4690      	mov	r8, r2
   16908:	4699      	mov	r9, r3
   1690a:	46a2      	mov	sl, r4
   1690c:	46ab      	mov	fp, r5
   1690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16910:	4303      	orrs	r3, r0
   16912:	4699      	mov	r9, r3
   16914:	d04f      	beq.n	169b6 <__aeabi_dmul+0x1a2>
   16916:	465b      	mov	r3, fp
   16918:	2b00      	cmp	r3, #0
   1691a:	d100      	bne.n	1691e <__aeabi_dmul+0x10a>
   1691c:	e189      	b.n	16c32 <__aeabi_dmul+0x41e>
   1691e:	4658      	mov	r0, fp
   16920:	f000 fe0e 	bl	17540 <__clzsi2>
   16924:	0003      	movs	r3, r0
   16926:	3b0b      	subs	r3, #11
   16928:	2b1c      	cmp	r3, #28
   1692a:	dd00      	ble.n	1692e <__aeabi_dmul+0x11a>
   1692c:	e17a      	b.n	16c24 <__aeabi_dmul+0x410>
   1692e:	221d      	movs	r2, #29
   16930:	1ad3      	subs	r3, r2, r3
   16932:	003a      	movs	r2, r7
   16934:	0001      	movs	r1, r0
   16936:	465c      	mov	r4, fp
   16938:	40da      	lsrs	r2, r3
   1693a:	3908      	subs	r1, #8
   1693c:	408c      	lsls	r4, r1
   1693e:	0013      	movs	r3, r2
   16940:	408f      	lsls	r7, r1
   16942:	4323      	orrs	r3, r4
   16944:	469b      	mov	fp, r3
   16946:	46b9      	mov	r9, r7
   16948:	2300      	movs	r3, #0
   1694a:	4e2d      	ldr	r6, [pc, #180]	; (16a00 <__aeabi_dmul+0x1ec>)
   1694c:	2700      	movs	r7, #0
   1694e:	1a36      	subs	r6, r6, r0
   16950:	9302      	str	r3, [sp, #8]
   16952:	e784      	b.n	1685e <__aeabi_dmul+0x4a>
   16954:	4653      	mov	r3, sl
   16956:	4323      	orrs	r3, r4
   16958:	d12a      	bne.n	169b0 <__aeabi_dmul+0x19c>
   1695a:	2400      	movs	r4, #0
   1695c:	2002      	movs	r0, #2
   1695e:	e796      	b.n	1688e <__aeabi_dmul+0x7a>
   16960:	4653      	mov	r3, sl
   16962:	4323      	orrs	r3, r4
   16964:	d020      	beq.n	169a8 <__aeabi_dmul+0x194>
   16966:	2c00      	cmp	r4, #0
   16968:	d100      	bne.n	1696c <__aeabi_dmul+0x158>
   1696a:	e157      	b.n	16c1c <__aeabi_dmul+0x408>
   1696c:	0020      	movs	r0, r4
   1696e:	f000 fde7 	bl	17540 <__clzsi2>
   16972:	0003      	movs	r3, r0
   16974:	3b0b      	subs	r3, #11
   16976:	2b1c      	cmp	r3, #28
   16978:	dd00      	ble.n	1697c <__aeabi_dmul+0x168>
   1697a:	e149      	b.n	16c10 <__aeabi_dmul+0x3fc>
   1697c:	211d      	movs	r1, #29
   1697e:	1acb      	subs	r3, r1, r3
   16980:	4651      	mov	r1, sl
   16982:	0002      	movs	r2, r0
   16984:	40d9      	lsrs	r1, r3
   16986:	4653      	mov	r3, sl
   16988:	3a08      	subs	r2, #8
   1698a:	4094      	lsls	r4, r2
   1698c:	4093      	lsls	r3, r2
   1698e:	430c      	orrs	r4, r1
   16990:	4a1b      	ldr	r2, [pc, #108]	; (16a00 <__aeabi_dmul+0x1ec>)
   16992:	1a12      	subs	r2, r2, r0
   16994:	2000      	movs	r0, #0
   16996:	e77a      	b.n	1688e <__aeabi_dmul+0x7a>
   16998:	2501      	movs	r5, #1
   1699a:	9b01      	ldr	r3, [sp, #4]
   1699c:	4c14      	ldr	r4, [pc, #80]	; (169f0 <__aeabi_dmul+0x1dc>)
   1699e:	401d      	ands	r5, r3
   169a0:	2300      	movs	r3, #0
   169a2:	2200      	movs	r2, #0
   169a4:	4699      	mov	r9, r3
   169a6:	e79c      	b.n	168e2 <__aeabi_dmul+0xce>
   169a8:	2400      	movs	r4, #0
   169aa:	2200      	movs	r2, #0
   169ac:	2001      	movs	r0, #1
   169ae:	e76e      	b.n	1688e <__aeabi_dmul+0x7a>
   169b0:	4653      	mov	r3, sl
   169b2:	2003      	movs	r0, #3
   169b4:	e76b      	b.n	1688e <__aeabi_dmul+0x7a>
   169b6:	2300      	movs	r3, #0
   169b8:	469b      	mov	fp, r3
   169ba:	3301      	adds	r3, #1
   169bc:	2704      	movs	r7, #4
   169be:	2600      	movs	r6, #0
   169c0:	9302      	str	r3, [sp, #8]
   169c2:	e74c      	b.n	1685e <__aeabi_dmul+0x4a>
   169c4:	2303      	movs	r3, #3
   169c6:	4681      	mov	r9, r0
   169c8:	270c      	movs	r7, #12
   169ca:	9302      	str	r3, [sp, #8]
   169cc:	e747      	b.n	1685e <__aeabi_dmul+0x4a>
   169ce:	2280      	movs	r2, #128	; 0x80
   169d0:	2300      	movs	r3, #0
   169d2:	2500      	movs	r5, #0
   169d4:	0312      	lsls	r2, r2, #12
   169d6:	4699      	mov	r9, r3
   169d8:	4c05      	ldr	r4, [pc, #20]	; (169f0 <__aeabi_dmul+0x1dc>)
   169da:	e782      	b.n	168e2 <__aeabi_dmul+0xce>
   169dc:	465c      	mov	r4, fp
   169de:	464b      	mov	r3, r9
   169e0:	9802      	ldr	r0, [sp, #8]
   169e2:	e76f      	b.n	168c4 <__aeabi_dmul+0xb0>
   169e4:	465c      	mov	r4, fp
   169e6:	464b      	mov	r3, r9
   169e8:	9501      	str	r5, [sp, #4]
   169ea:	9802      	ldr	r0, [sp, #8]
   169ec:	e76a      	b.n	168c4 <__aeabi_dmul+0xb0>
   169ee:	46c0      	nop			; (mov r8, r8)
   169f0:	000007ff 	.word	0x000007ff
   169f4:	fffffc01 	.word	0xfffffc01
   169f8:	0001e1d8 	.word	0x0001e1d8
   169fc:	800fffff 	.word	0x800fffff
   16a00:	fffffc0d 	.word	0xfffffc0d
   16a04:	464a      	mov	r2, r9
   16a06:	4649      	mov	r1, r9
   16a08:	0c17      	lsrs	r7, r2, #16
   16a0a:	0c1a      	lsrs	r2, r3, #16
   16a0c:	041b      	lsls	r3, r3, #16
   16a0e:	0c1b      	lsrs	r3, r3, #16
   16a10:	0408      	lsls	r0, r1, #16
   16a12:	0019      	movs	r1, r3
   16a14:	0c00      	lsrs	r0, r0, #16
   16a16:	4341      	muls	r1, r0
   16a18:	0015      	movs	r5, r2
   16a1a:	4688      	mov	r8, r1
   16a1c:	0019      	movs	r1, r3
   16a1e:	437d      	muls	r5, r7
   16a20:	4379      	muls	r1, r7
   16a22:	9503      	str	r5, [sp, #12]
   16a24:	4689      	mov	r9, r1
   16a26:	0029      	movs	r1, r5
   16a28:	0015      	movs	r5, r2
   16a2a:	4345      	muls	r5, r0
   16a2c:	444d      	add	r5, r9
   16a2e:	9502      	str	r5, [sp, #8]
   16a30:	4645      	mov	r5, r8
   16a32:	0c2d      	lsrs	r5, r5, #16
   16a34:	46aa      	mov	sl, r5
   16a36:	9d02      	ldr	r5, [sp, #8]
   16a38:	4455      	add	r5, sl
   16a3a:	45a9      	cmp	r9, r5
   16a3c:	d906      	bls.n	16a4c <__aeabi_dmul+0x238>
   16a3e:	468a      	mov	sl, r1
   16a40:	2180      	movs	r1, #128	; 0x80
   16a42:	0249      	lsls	r1, r1, #9
   16a44:	4689      	mov	r9, r1
   16a46:	44ca      	add	sl, r9
   16a48:	4651      	mov	r1, sl
   16a4a:	9103      	str	r1, [sp, #12]
   16a4c:	0c29      	lsrs	r1, r5, #16
   16a4e:	9104      	str	r1, [sp, #16]
   16a50:	4641      	mov	r1, r8
   16a52:	0409      	lsls	r1, r1, #16
   16a54:	042d      	lsls	r5, r5, #16
   16a56:	0c09      	lsrs	r1, r1, #16
   16a58:	4688      	mov	r8, r1
   16a5a:	0029      	movs	r1, r5
   16a5c:	0c25      	lsrs	r5, r4, #16
   16a5e:	0424      	lsls	r4, r4, #16
   16a60:	4441      	add	r1, r8
   16a62:	0c24      	lsrs	r4, r4, #16
   16a64:	9105      	str	r1, [sp, #20]
   16a66:	0021      	movs	r1, r4
   16a68:	4341      	muls	r1, r0
   16a6a:	4688      	mov	r8, r1
   16a6c:	0021      	movs	r1, r4
   16a6e:	4379      	muls	r1, r7
   16a70:	468a      	mov	sl, r1
   16a72:	4368      	muls	r0, r5
   16a74:	4641      	mov	r1, r8
   16a76:	4450      	add	r0, sl
   16a78:	4681      	mov	r9, r0
   16a7a:	0c08      	lsrs	r0, r1, #16
   16a7c:	4448      	add	r0, r9
   16a7e:	436f      	muls	r7, r5
   16a80:	4582      	cmp	sl, r0
   16a82:	d903      	bls.n	16a8c <__aeabi_dmul+0x278>
   16a84:	2180      	movs	r1, #128	; 0x80
   16a86:	0249      	lsls	r1, r1, #9
   16a88:	4689      	mov	r9, r1
   16a8a:	444f      	add	r7, r9
   16a8c:	0c01      	lsrs	r1, r0, #16
   16a8e:	4689      	mov	r9, r1
   16a90:	0039      	movs	r1, r7
   16a92:	4449      	add	r1, r9
   16a94:	9102      	str	r1, [sp, #8]
   16a96:	4641      	mov	r1, r8
   16a98:	040f      	lsls	r7, r1, #16
   16a9a:	9904      	ldr	r1, [sp, #16]
   16a9c:	0c3f      	lsrs	r7, r7, #16
   16a9e:	4688      	mov	r8, r1
   16aa0:	0400      	lsls	r0, r0, #16
   16aa2:	19c0      	adds	r0, r0, r7
   16aa4:	4480      	add	r8, r0
   16aa6:	4641      	mov	r1, r8
   16aa8:	9104      	str	r1, [sp, #16]
   16aaa:	4659      	mov	r1, fp
   16aac:	0c0f      	lsrs	r7, r1, #16
   16aae:	0409      	lsls	r1, r1, #16
   16ab0:	0c09      	lsrs	r1, r1, #16
   16ab2:	4688      	mov	r8, r1
   16ab4:	4359      	muls	r1, r3
   16ab6:	468a      	mov	sl, r1
   16ab8:	0039      	movs	r1, r7
   16aba:	4351      	muls	r1, r2
   16abc:	4689      	mov	r9, r1
   16abe:	4641      	mov	r1, r8
   16ac0:	434a      	muls	r2, r1
   16ac2:	4651      	mov	r1, sl
   16ac4:	0c09      	lsrs	r1, r1, #16
   16ac6:	468b      	mov	fp, r1
   16ac8:	437b      	muls	r3, r7
   16aca:	18d2      	adds	r2, r2, r3
   16acc:	445a      	add	r2, fp
   16ace:	4293      	cmp	r3, r2
   16ad0:	d903      	bls.n	16ada <__aeabi_dmul+0x2c6>
   16ad2:	2380      	movs	r3, #128	; 0x80
   16ad4:	025b      	lsls	r3, r3, #9
   16ad6:	469b      	mov	fp, r3
   16ad8:	44d9      	add	r9, fp
   16ada:	4651      	mov	r1, sl
   16adc:	0409      	lsls	r1, r1, #16
   16ade:	0c09      	lsrs	r1, r1, #16
   16ae0:	468a      	mov	sl, r1
   16ae2:	4641      	mov	r1, r8
   16ae4:	4361      	muls	r1, r4
   16ae6:	437c      	muls	r4, r7
   16ae8:	0c13      	lsrs	r3, r2, #16
   16aea:	0412      	lsls	r2, r2, #16
   16aec:	444b      	add	r3, r9
   16aee:	4452      	add	r2, sl
   16af0:	46a1      	mov	r9, r4
   16af2:	468a      	mov	sl, r1
   16af4:	003c      	movs	r4, r7
   16af6:	4641      	mov	r1, r8
   16af8:	436c      	muls	r4, r5
   16afa:	434d      	muls	r5, r1
   16afc:	4651      	mov	r1, sl
   16afe:	444d      	add	r5, r9
   16b00:	0c0f      	lsrs	r7, r1, #16
   16b02:	197d      	adds	r5, r7, r5
   16b04:	45a9      	cmp	r9, r5
   16b06:	d903      	bls.n	16b10 <__aeabi_dmul+0x2fc>
   16b08:	2180      	movs	r1, #128	; 0x80
   16b0a:	0249      	lsls	r1, r1, #9
   16b0c:	4688      	mov	r8, r1
   16b0e:	4444      	add	r4, r8
   16b10:	9f04      	ldr	r7, [sp, #16]
   16b12:	9903      	ldr	r1, [sp, #12]
   16b14:	46b8      	mov	r8, r7
   16b16:	4441      	add	r1, r8
   16b18:	468b      	mov	fp, r1
   16b1a:	4583      	cmp	fp, r0
   16b1c:	4180      	sbcs	r0, r0
   16b1e:	4241      	negs	r1, r0
   16b20:	4688      	mov	r8, r1
   16b22:	4651      	mov	r1, sl
   16b24:	0408      	lsls	r0, r1, #16
   16b26:	042f      	lsls	r7, r5, #16
   16b28:	0c00      	lsrs	r0, r0, #16
   16b2a:	183f      	adds	r7, r7, r0
   16b2c:	4658      	mov	r0, fp
   16b2e:	9902      	ldr	r1, [sp, #8]
   16b30:	1810      	adds	r0, r2, r0
   16b32:	4689      	mov	r9, r1
   16b34:	4290      	cmp	r0, r2
   16b36:	4192      	sbcs	r2, r2
   16b38:	444f      	add	r7, r9
   16b3a:	46ba      	mov	sl, r7
   16b3c:	4252      	negs	r2, r2
   16b3e:	4699      	mov	r9, r3
   16b40:	4693      	mov	fp, r2
   16b42:	44c2      	add	sl, r8
   16b44:	44d1      	add	r9, sl
   16b46:	44cb      	add	fp, r9
   16b48:	428f      	cmp	r7, r1
   16b4a:	41bf      	sbcs	r7, r7
   16b4c:	45c2      	cmp	sl, r8
   16b4e:	4189      	sbcs	r1, r1
   16b50:	4599      	cmp	r9, r3
   16b52:	419b      	sbcs	r3, r3
   16b54:	4593      	cmp	fp, r2
   16b56:	4192      	sbcs	r2, r2
   16b58:	427f      	negs	r7, r7
   16b5a:	4249      	negs	r1, r1
   16b5c:	0c2d      	lsrs	r5, r5, #16
   16b5e:	4252      	negs	r2, r2
   16b60:	430f      	orrs	r7, r1
   16b62:	425b      	negs	r3, r3
   16b64:	4313      	orrs	r3, r2
   16b66:	197f      	adds	r7, r7, r5
   16b68:	18ff      	adds	r7, r7, r3
   16b6a:	465b      	mov	r3, fp
   16b6c:	193c      	adds	r4, r7, r4
   16b6e:	0ddb      	lsrs	r3, r3, #23
   16b70:	9a05      	ldr	r2, [sp, #20]
   16b72:	0264      	lsls	r4, r4, #9
   16b74:	431c      	orrs	r4, r3
   16b76:	0243      	lsls	r3, r0, #9
   16b78:	4313      	orrs	r3, r2
   16b7a:	1e5d      	subs	r5, r3, #1
   16b7c:	41ab      	sbcs	r3, r5
   16b7e:	465a      	mov	r2, fp
   16b80:	0dc0      	lsrs	r0, r0, #23
   16b82:	4303      	orrs	r3, r0
   16b84:	0252      	lsls	r2, r2, #9
   16b86:	4313      	orrs	r3, r2
   16b88:	01e2      	lsls	r2, r4, #7
   16b8a:	d556      	bpl.n	16c3a <__aeabi_dmul+0x426>
   16b8c:	2001      	movs	r0, #1
   16b8e:	085a      	lsrs	r2, r3, #1
   16b90:	4003      	ands	r3, r0
   16b92:	4313      	orrs	r3, r2
   16b94:	07e2      	lsls	r2, r4, #31
   16b96:	4313      	orrs	r3, r2
   16b98:	0864      	lsrs	r4, r4, #1
   16b9a:	485a      	ldr	r0, [pc, #360]	; (16d04 <__aeabi_dmul+0x4f0>)
   16b9c:	4460      	add	r0, ip
   16b9e:	2800      	cmp	r0, #0
   16ba0:	dd4d      	ble.n	16c3e <__aeabi_dmul+0x42a>
   16ba2:	075a      	lsls	r2, r3, #29
   16ba4:	d009      	beq.n	16bba <__aeabi_dmul+0x3a6>
   16ba6:	220f      	movs	r2, #15
   16ba8:	401a      	ands	r2, r3
   16baa:	2a04      	cmp	r2, #4
   16bac:	d005      	beq.n	16bba <__aeabi_dmul+0x3a6>
   16bae:	1d1a      	adds	r2, r3, #4
   16bb0:	429a      	cmp	r2, r3
   16bb2:	419b      	sbcs	r3, r3
   16bb4:	425b      	negs	r3, r3
   16bb6:	18e4      	adds	r4, r4, r3
   16bb8:	0013      	movs	r3, r2
   16bba:	01e2      	lsls	r2, r4, #7
   16bbc:	d504      	bpl.n	16bc8 <__aeabi_dmul+0x3b4>
   16bbe:	2080      	movs	r0, #128	; 0x80
   16bc0:	4a51      	ldr	r2, [pc, #324]	; (16d08 <__aeabi_dmul+0x4f4>)
   16bc2:	00c0      	lsls	r0, r0, #3
   16bc4:	4014      	ands	r4, r2
   16bc6:	4460      	add	r0, ip
   16bc8:	4a50      	ldr	r2, [pc, #320]	; (16d0c <__aeabi_dmul+0x4f8>)
   16bca:	4290      	cmp	r0, r2
   16bcc:	dd00      	ble.n	16bd0 <__aeabi_dmul+0x3bc>
   16bce:	e6e3      	b.n	16998 <__aeabi_dmul+0x184>
   16bd0:	2501      	movs	r5, #1
   16bd2:	08db      	lsrs	r3, r3, #3
   16bd4:	0762      	lsls	r2, r4, #29
   16bd6:	431a      	orrs	r2, r3
   16bd8:	0264      	lsls	r4, r4, #9
   16bda:	9b01      	ldr	r3, [sp, #4]
   16bdc:	4691      	mov	r9, r2
   16bde:	0b22      	lsrs	r2, r4, #12
   16be0:	0544      	lsls	r4, r0, #21
   16be2:	0d64      	lsrs	r4, r4, #21
   16be4:	401d      	ands	r5, r3
   16be6:	e67c      	b.n	168e2 <__aeabi_dmul+0xce>
   16be8:	2280      	movs	r2, #128	; 0x80
   16bea:	4659      	mov	r1, fp
   16bec:	0312      	lsls	r2, r2, #12
   16bee:	4211      	tst	r1, r2
   16bf0:	d008      	beq.n	16c04 <__aeabi_dmul+0x3f0>
   16bf2:	4214      	tst	r4, r2
   16bf4:	d106      	bne.n	16c04 <__aeabi_dmul+0x3f0>
   16bf6:	4322      	orrs	r2, r4
   16bf8:	0312      	lsls	r2, r2, #12
   16bfa:	0b12      	lsrs	r2, r2, #12
   16bfc:	4645      	mov	r5, r8
   16bfe:	4699      	mov	r9, r3
   16c00:	4c43      	ldr	r4, [pc, #268]	; (16d10 <__aeabi_dmul+0x4fc>)
   16c02:	e66e      	b.n	168e2 <__aeabi_dmul+0xce>
   16c04:	465b      	mov	r3, fp
   16c06:	431a      	orrs	r2, r3
   16c08:	0312      	lsls	r2, r2, #12
   16c0a:	0b12      	lsrs	r2, r2, #12
   16c0c:	4c40      	ldr	r4, [pc, #256]	; (16d10 <__aeabi_dmul+0x4fc>)
   16c0e:	e668      	b.n	168e2 <__aeabi_dmul+0xce>
   16c10:	0003      	movs	r3, r0
   16c12:	4654      	mov	r4, sl
   16c14:	3b28      	subs	r3, #40	; 0x28
   16c16:	409c      	lsls	r4, r3
   16c18:	2300      	movs	r3, #0
   16c1a:	e6b9      	b.n	16990 <__aeabi_dmul+0x17c>
   16c1c:	f000 fc90 	bl	17540 <__clzsi2>
   16c20:	3020      	adds	r0, #32
   16c22:	e6a6      	b.n	16972 <__aeabi_dmul+0x15e>
   16c24:	0003      	movs	r3, r0
   16c26:	3b28      	subs	r3, #40	; 0x28
   16c28:	409f      	lsls	r7, r3
   16c2a:	2300      	movs	r3, #0
   16c2c:	46bb      	mov	fp, r7
   16c2e:	4699      	mov	r9, r3
   16c30:	e68a      	b.n	16948 <__aeabi_dmul+0x134>
   16c32:	f000 fc85 	bl	17540 <__clzsi2>
   16c36:	3020      	adds	r0, #32
   16c38:	e674      	b.n	16924 <__aeabi_dmul+0x110>
   16c3a:	46b4      	mov	ip, r6
   16c3c:	e7ad      	b.n	16b9a <__aeabi_dmul+0x386>
   16c3e:	2501      	movs	r5, #1
   16c40:	1a2a      	subs	r2, r5, r0
   16c42:	2a38      	cmp	r2, #56	; 0x38
   16c44:	dd06      	ble.n	16c54 <__aeabi_dmul+0x440>
   16c46:	9b01      	ldr	r3, [sp, #4]
   16c48:	2400      	movs	r4, #0
   16c4a:	401d      	ands	r5, r3
   16c4c:	2300      	movs	r3, #0
   16c4e:	2200      	movs	r2, #0
   16c50:	4699      	mov	r9, r3
   16c52:	e646      	b.n	168e2 <__aeabi_dmul+0xce>
   16c54:	2a1f      	cmp	r2, #31
   16c56:	dc21      	bgt.n	16c9c <__aeabi_dmul+0x488>
   16c58:	2520      	movs	r5, #32
   16c5a:	0020      	movs	r0, r4
   16c5c:	1aad      	subs	r5, r5, r2
   16c5e:	001e      	movs	r6, r3
   16c60:	40ab      	lsls	r3, r5
   16c62:	40a8      	lsls	r0, r5
   16c64:	40d6      	lsrs	r6, r2
   16c66:	1e5d      	subs	r5, r3, #1
   16c68:	41ab      	sbcs	r3, r5
   16c6a:	4330      	orrs	r0, r6
   16c6c:	4318      	orrs	r0, r3
   16c6e:	40d4      	lsrs	r4, r2
   16c70:	0743      	lsls	r3, r0, #29
   16c72:	d009      	beq.n	16c88 <__aeabi_dmul+0x474>
   16c74:	230f      	movs	r3, #15
   16c76:	4003      	ands	r3, r0
   16c78:	2b04      	cmp	r3, #4
   16c7a:	d005      	beq.n	16c88 <__aeabi_dmul+0x474>
   16c7c:	0003      	movs	r3, r0
   16c7e:	1d18      	adds	r0, r3, #4
   16c80:	4298      	cmp	r0, r3
   16c82:	419b      	sbcs	r3, r3
   16c84:	425b      	negs	r3, r3
   16c86:	18e4      	adds	r4, r4, r3
   16c88:	0223      	lsls	r3, r4, #8
   16c8a:	d521      	bpl.n	16cd0 <__aeabi_dmul+0x4bc>
   16c8c:	2501      	movs	r5, #1
   16c8e:	9b01      	ldr	r3, [sp, #4]
   16c90:	2401      	movs	r4, #1
   16c92:	401d      	ands	r5, r3
   16c94:	2300      	movs	r3, #0
   16c96:	2200      	movs	r2, #0
   16c98:	4699      	mov	r9, r3
   16c9a:	e622      	b.n	168e2 <__aeabi_dmul+0xce>
   16c9c:	251f      	movs	r5, #31
   16c9e:	0021      	movs	r1, r4
   16ca0:	426d      	negs	r5, r5
   16ca2:	1a28      	subs	r0, r5, r0
   16ca4:	40c1      	lsrs	r1, r0
   16ca6:	0008      	movs	r0, r1
   16ca8:	2a20      	cmp	r2, #32
   16caa:	d01d      	beq.n	16ce8 <__aeabi_dmul+0x4d4>
   16cac:	355f      	adds	r5, #95	; 0x5f
   16cae:	1aaa      	subs	r2, r5, r2
   16cb0:	4094      	lsls	r4, r2
   16cb2:	4323      	orrs	r3, r4
   16cb4:	1e5c      	subs	r4, r3, #1
   16cb6:	41a3      	sbcs	r3, r4
   16cb8:	2507      	movs	r5, #7
   16cba:	4303      	orrs	r3, r0
   16cbc:	401d      	ands	r5, r3
   16cbe:	2200      	movs	r2, #0
   16cc0:	2d00      	cmp	r5, #0
   16cc2:	d009      	beq.n	16cd8 <__aeabi_dmul+0x4c4>
   16cc4:	220f      	movs	r2, #15
   16cc6:	2400      	movs	r4, #0
   16cc8:	401a      	ands	r2, r3
   16cca:	0018      	movs	r0, r3
   16ccc:	2a04      	cmp	r2, #4
   16cce:	d1d6      	bne.n	16c7e <__aeabi_dmul+0x46a>
   16cd0:	0003      	movs	r3, r0
   16cd2:	0765      	lsls	r5, r4, #29
   16cd4:	0264      	lsls	r4, r4, #9
   16cd6:	0b22      	lsrs	r2, r4, #12
   16cd8:	08db      	lsrs	r3, r3, #3
   16cda:	432b      	orrs	r3, r5
   16cdc:	2501      	movs	r5, #1
   16cde:	4699      	mov	r9, r3
   16ce0:	9b01      	ldr	r3, [sp, #4]
   16ce2:	2400      	movs	r4, #0
   16ce4:	401d      	ands	r5, r3
   16ce6:	e5fc      	b.n	168e2 <__aeabi_dmul+0xce>
   16ce8:	2400      	movs	r4, #0
   16cea:	e7e2      	b.n	16cb2 <__aeabi_dmul+0x49e>
   16cec:	2280      	movs	r2, #128	; 0x80
   16cee:	2501      	movs	r5, #1
   16cf0:	0312      	lsls	r2, r2, #12
   16cf2:	4322      	orrs	r2, r4
   16cf4:	9901      	ldr	r1, [sp, #4]
   16cf6:	0312      	lsls	r2, r2, #12
   16cf8:	0b12      	lsrs	r2, r2, #12
   16cfa:	400d      	ands	r5, r1
   16cfc:	4699      	mov	r9, r3
   16cfe:	4c04      	ldr	r4, [pc, #16]	; (16d10 <__aeabi_dmul+0x4fc>)
   16d00:	e5ef      	b.n	168e2 <__aeabi_dmul+0xce>
   16d02:	46c0      	nop			; (mov r8, r8)
   16d04:	000003ff 	.word	0x000003ff
   16d08:	feffffff 	.word	0xfeffffff
   16d0c:	000007fe 	.word	0x000007fe
   16d10:	000007ff 	.word	0x000007ff

00016d14 <__aeabi_dsub>:
   16d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d16:	4646      	mov	r6, r8
   16d18:	46d6      	mov	lr, sl
   16d1a:	464f      	mov	r7, r9
   16d1c:	030c      	lsls	r4, r1, #12
   16d1e:	b5c0      	push	{r6, r7, lr}
   16d20:	0fcd      	lsrs	r5, r1, #31
   16d22:	004e      	lsls	r6, r1, #1
   16d24:	0a61      	lsrs	r1, r4, #9
   16d26:	0f44      	lsrs	r4, r0, #29
   16d28:	430c      	orrs	r4, r1
   16d2a:	00c1      	lsls	r1, r0, #3
   16d2c:	0058      	lsls	r0, r3, #1
   16d2e:	0d40      	lsrs	r0, r0, #21
   16d30:	4684      	mov	ip, r0
   16d32:	468a      	mov	sl, r1
   16d34:	000f      	movs	r7, r1
   16d36:	0319      	lsls	r1, r3, #12
   16d38:	0f50      	lsrs	r0, r2, #29
   16d3a:	0a49      	lsrs	r1, r1, #9
   16d3c:	4301      	orrs	r1, r0
   16d3e:	48c6      	ldr	r0, [pc, #792]	; (17058 <__aeabi_dsub+0x344>)
   16d40:	0d76      	lsrs	r6, r6, #21
   16d42:	46a8      	mov	r8, r5
   16d44:	0fdb      	lsrs	r3, r3, #31
   16d46:	00d2      	lsls	r2, r2, #3
   16d48:	4584      	cmp	ip, r0
   16d4a:	d100      	bne.n	16d4e <__aeabi_dsub+0x3a>
   16d4c:	e0d8      	b.n	16f00 <__aeabi_dsub+0x1ec>
   16d4e:	2001      	movs	r0, #1
   16d50:	4043      	eors	r3, r0
   16d52:	42ab      	cmp	r3, r5
   16d54:	d100      	bne.n	16d58 <__aeabi_dsub+0x44>
   16d56:	e0a6      	b.n	16ea6 <__aeabi_dsub+0x192>
   16d58:	4660      	mov	r0, ip
   16d5a:	1a35      	subs	r5, r6, r0
   16d5c:	2d00      	cmp	r5, #0
   16d5e:	dc00      	bgt.n	16d62 <__aeabi_dsub+0x4e>
   16d60:	e105      	b.n	16f6e <__aeabi_dsub+0x25a>
   16d62:	2800      	cmp	r0, #0
   16d64:	d110      	bne.n	16d88 <__aeabi_dsub+0x74>
   16d66:	000b      	movs	r3, r1
   16d68:	4313      	orrs	r3, r2
   16d6a:	d100      	bne.n	16d6e <__aeabi_dsub+0x5a>
   16d6c:	e0d7      	b.n	16f1e <__aeabi_dsub+0x20a>
   16d6e:	1e6b      	subs	r3, r5, #1
   16d70:	2b00      	cmp	r3, #0
   16d72:	d000      	beq.n	16d76 <__aeabi_dsub+0x62>
   16d74:	e14b      	b.n	1700e <__aeabi_dsub+0x2fa>
   16d76:	4653      	mov	r3, sl
   16d78:	1a9f      	subs	r7, r3, r2
   16d7a:	45ba      	cmp	sl, r7
   16d7c:	4180      	sbcs	r0, r0
   16d7e:	1a64      	subs	r4, r4, r1
   16d80:	4240      	negs	r0, r0
   16d82:	1a24      	subs	r4, r4, r0
   16d84:	2601      	movs	r6, #1
   16d86:	e01e      	b.n	16dc6 <__aeabi_dsub+0xb2>
   16d88:	4bb3      	ldr	r3, [pc, #716]	; (17058 <__aeabi_dsub+0x344>)
   16d8a:	429e      	cmp	r6, r3
   16d8c:	d048      	beq.n	16e20 <__aeabi_dsub+0x10c>
   16d8e:	2380      	movs	r3, #128	; 0x80
   16d90:	041b      	lsls	r3, r3, #16
   16d92:	4319      	orrs	r1, r3
   16d94:	2d38      	cmp	r5, #56	; 0x38
   16d96:	dd00      	ble.n	16d9a <__aeabi_dsub+0x86>
   16d98:	e119      	b.n	16fce <__aeabi_dsub+0x2ba>
   16d9a:	2d1f      	cmp	r5, #31
   16d9c:	dd00      	ble.n	16da0 <__aeabi_dsub+0x8c>
   16d9e:	e14c      	b.n	1703a <__aeabi_dsub+0x326>
   16da0:	2320      	movs	r3, #32
   16da2:	000f      	movs	r7, r1
   16da4:	1b5b      	subs	r3, r3, r5
   16da6:	0010      	movs	r0, r2
   16da8:	409a      	lsls	r2, r3
   16daa:	409f      	lsls	r7, r3
   16dac:	40e8      	lsrs	r0, r5
   16dae:	1e53      	subs	r3, r2, #1
   16db0:	419a      	sbcs	r2, r3
   16db2:	40e9      	lsrs	r1, r5
   16db4:	4307      	orrs	r7, r0
   16db6:	4317      	orrs	r7, r2
   16db8:	4653      	mov	r3, sl
   16dba:	1bdf      	subs	r7, r3, r7
   16dbc:	1a61      	subs	r1, r4, r1
   16dbe:	45ba      	cmp	sl, r7
   16dc0:	41a4      	sbcs	r4, r4
   16dc2:	4264      	negs	r4, r4
   16dc4:	1b0c      	subs	r4, r1, r4
   16dc6:	0223      	lsls	r3, r4, #8
   16dc8:	d400      	bmi.n	16dcc <__aeabi_dsub+0xb8>
   16dca:	e0c5      	b.n	16f58 <__aeabi_dsub+0x244>
   16dcc:	0264      	lsls	r4, r4, #9
   16dce:	0a65      	lsrs	r5, r4, #9
   16dd0:	2d00      	cmp	r5, #0
   16dd2:	d100      	bne.n	16dd6 <__aeabi_dsub+0xc2>
   16dd4:	e0f6      	b.n	16fc4 <__aeabi_dsub+0x2b0>
   16dd6:	0028      	movs	r0, r5
   16dd8:	f000 fbb2 	bl	17540 <__clzsi2>
   16ddc:	0003      	movs	r3, r0
   16dde:	3b08      	subs	r3, #8
   16de0:	2b1f      	cmp	r3, #31
   16de2:	dd00      	ble.n	16de6 <__aeabi_dsub+0xd2>
   16de4:	e0e9      	b.n	16fba <__aeabi_dsub+0x2a6>
   16de6:	2220      	movs	r2, #32
   16de8:	003c      	movs	r4, r7
   16dea:	1ad2      	subs	r2, r2, r3
   16dec:	409d      	lsls	r5, r3
   16dee:	40d4      	lsrs	r4, r2
   16df0:	409f      	lsls	r7, r3
   16df2:	4325      	orrs	r5, r4
   16df4:	429e      	cmp	r6, r3
   16df6:	dd00      	ble.n	16dfa <__aeabi_dsub+0xe6>
   16df8:	e0db      	b.n	16fb2 <__aeabi_dsub+0x29e>
   16dfa:	1b9e      	subs	r6, r3, r6
   16dfc:	1c73      	adds	r3, r6, #1
   16dfe:	2b1f      	cmp	r3, #31
   16e00:	dd00      	ble.n	16e04 <__aeabi_dsub+0xf0>
   16e02:	e10a      	b.n	1701a <__aeabi_dsub+0x306>
   16e04:	2220      	movs	r2, #32
   16e06:	0038      	movs	r0, r7
   16e08:	1ad2      	subs	r2, r2, r3
   16e0a:	0029      	movs	r1, r5
   16e0c:	4097      	lsls	r7, r2
   16e0e:	002c      	movs	r4, r5
   16e10:	4091      	lsls	r1, r2
   16e12:	40d8      	lsrs	r0, r3
   16e14:	1e7a      	subs	r2, r7, #1
   16e16:	4197      	sbcs	r7, r2
   16e18:	40dc      	lsrs	r4, r3
   16e1a:	2600      	movs	r6, #0
   16e1c:	4301      	orrs	r1, r0
   16e1e:	430f      	orrs	r7, r1
   16e20:	077b      	lsls	r3, r7, #29
   16e22:	d009      	beq.n	16e38 <__aeabi_dsub+0x124>
   16e24:	230f      	movs	r3, #15
   16e26:	403b      	ands	r3, r7
   16e28:	2b04      	cmp	r3, #4
   16e2a:	d005      	beq.n	16e38 <__aeabi_dsub+0x124>
   16e2c:	1d3b      	adds	r3, r7, #4
   16e2e:	42bb      	cmp	r3, r7
   16e30:	41bf      	sbcs	r7, r7
   16e32:	427f      	negs	r7, r7
   16e34:	19e4      	adds	r4, r4, r7
   16e36:	001f      	movs	r7, r3
   16e38:	0223      	lsls	r3, r4, #8
   16e3a:	d525      	bpl.n	16e88 <__aeabi_dsub+0x174>
   16e3c:	4b86      	ldr	r3, [pc, #536]	; (17058 <__aeabi_dsub+0x344>)
   16e3e:	3601      	adds	r6, #1
   16e40:	429e      	cmp	r6, r3
   16e42:	d100      	bne.n	16e46 <__aeabi_dsub+0x132>
   16e44:	e0af      	b.n	16fa6 <__aeabi_dsub+0x292>
   16e46:	4b85      	ldr	r3, [pc, #532]	; (1705c <__aeabi_dsub+0x348>)
   16e48:	2501      	movs	r5, #1
   16e4a:	401c      	ands	r4, r3
   16e4c:	4643      	mov	r3, r8
   16e4e:	0762      	lsls	r2, r4, #29
   16e50:	08ff      	lsrs	r7, r7, #3
   16e52:	0264      	lsls	r4, r4, #9
   16e54:	0576      	lsls	r6, r6, #21
   16e56:	4317      	orrs	r7, r2
   16e58:	0b24      	lsrs	r4, r4, #12
   16e5a:	0d76      	lsrs	r6, r6, #21
   16e5c:	401d      	ands	r5, r3
   16e5e:	2100      	movs	r1, #0
   16e60:	0324      	lsls	r4, r4, #12
   16e62:	0b23      	lsrs	r3, r4, #12
   16e64:	0d0c      	lsrs	r4, r1, #20
   16e66:	4a7e      	ldr	r2, [pc, #504]	; (17060 <__aeabi_dsub+0x34c>)
   16e68:	0524      	lsls	r4, r4, #20
   16e6a:	431c      	orrs	r4, r3
   16e6c:	4014      	ands	r4, r2
   16e6e:	0533      	lsls	r3, r6, #20
   16e70:	4323      	orrs	r3, r4
   16e72:	005b      	lsls	r3, r3, #1
   16e74:	07ed      	lsls	r5, r5, #31
   16e76:	085b      	lsrs	r3, r3, #1
   16e78:	432b      	orrs	r3, r5
   16e7a:	0038      	movs	r0, r7
   16e7c:	0019      	movs	r1, r3
   16e7e:	bc1c      	pop	{r2, r3, r4}
   16e80:	4690      	mov	r8, r2
   16e82:	4699      	mov	r9, r3
   16e84:	46a2      	mov	sl, r4
   16e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e88:	2501      	movs	r5, #1
   16e8a:	4643      	mov	r3, r8
   16e8c:	0762      	lsls	r2, r4, #29
   16e8e:	08ff      	lsrs	r7, r7, #3
   16e90:	4317      	orrs	r7, r2
   16e92:	08e4      	lsrs	r4, r4, #3
   16e94:	401d      	ands	r5, r3
   16e96:	4b70      	ldr	r3, [pc, #448]	; (17058 <__aeabi_dsub+0x344>)
   16e98:	429e      	cmp	r6, r3
   16e9a:	d036      	beq.n	16f0a <__aeabi_dsub+0x1f6>
   16e9c:	0324      	lsls	r4, r4, #12
   16e9e:	0576      	lsls	r6, r6, #21
   16ea0:	0b24      	lsrs	r4, r4, #12
   16ea2:	0d76      	lsrs	r6, r6, #21
   16ea4:	e7db      	b.n	16e5e <__aeabi_dsub+0x14a>
   16ea6:	4663      	mov	r3, ip
   16ea8:	1af3      	subs	r3, r6, r3
   16eaa:	2b00      	cmp	r3, #0
   16eac:	dc00      	bgt.n	16eb0 <__aeabi_dsub+0x19c>
   16eae:	e094      	b.n	16fda <__aeabi_dsub+0x2c6>
   16eb0:	4660      	mov	r0, ip
   16eb2:	2800      	cmp	r0, #0
   16eb4:	d035      	beq.n	16f22 <__aeabi_dsub+0x20e>
   16eb6:	4868      	ldr	r0, [pc, #416]	; (17058 <__aeabi_dsub+0x344>)
   16eb8:	4286      	cmp	r6, r0
   16eba:	d0b1      	beq.n	16e20 <__aeabi_dsub+0x10c>
   16ebc:	2780      	movs	r7, #128	; 0x80
   16ebe:	043f      	lsls	r7, r7, #16
   16ec0:	4339      	orrs	r1, r7
   16ec2:	2b38      	cmp	r3, #56	; 0x38
   16ec4:	dc00      	bgt.n	16ec8 <__aeabi_dsub+0x1b4>
   16ec6:	e0fd      	b.n	170c4 <__aeabi_dsub+0x3b0>
   16ec8:	430a      	orrs	r2, r1
   16eca:	0017      	movs	r7, r2
   16ecc:	2100      	movs	r1, #0
   16ece:	1e7a      	subs	r2, r7, #1
   16ed0:	4197      	sbcs	r7, r2
   16ed2:	4457      	add	r7, sl
   16ed4:	4557      	cmp	r7, sl
   16ed6:	4180      	sbcs	r0, r0
   16ed8:	1909      	adds	r1, r1, r4
   16eda:	4244      	negs	r4, r0
   16edc:	190c      	adds	r4, r1, r4
   16ede:	0223      	lsls	r3, r4, #8
   16ee0:	d53a      	bpl.n	16f58 <__aeabi_dsub+0x244>
   16ee2:	4b5d      	ldr	r3, [pc, #372]	; (17058 <__aeabi_dsub+0x344>)
   16ee4:	3601      	adds	r6, #1
   16ee6:	429e      	cmp	r6, r3
   16ee8:	d100      	bne.n	16eec <__aeabi_dsub+0x1d8>
   16eea:	e14b      	b.n	17184 <__aeabi_dsub+0x470>
   16eec:	2201      	movs	r2, #1
   16eee:	4b5b      	ldr	r3, [pc, #364]	; (1705c <__aeabi_dsub+0x348>)
   16ef0:	401c      	ands	r4, r3
   16ef2:	087b      	lsrs	r3, r7, #1
   16ef4:	4017      	ands	r7, r2
   16ef6:	431f      	orrs	r7, r3
   16ef8:	07e2      	lsls	r2, r4, #31
   16efa:	4317      	orrs	r7, r2
   16efc:	0864      	lsrs	r4, r4, #1
   16efe:	e78f      	b.n	16e20 <__aeabi_dsub+0x10c>
   16f00:	0008      	movs	r0, r1
   16f02:	4310      	orrs	r0, r2
   16f04:	d000      	beq.n	16f08 <__aeabi_dsub+0x1f4>
   16f06:	e724      	b.n	16d52 <__aeabi_dsub+0x3e>
   16f08:	e721      	b.n	16d4e <__aeabi_dsub+0x3a>
   16f0a:	0023      	movs	r3, r4
   16f0c:	433b      	orrs	r3, r7
   16f0e:	d100      	bne.n	16f12 <__aeabi_dsub+0x1fe>
   16f10:	e1b9      	b.n	17286 <__aeabi_dsub+0x572>
   16f12:	2280      	movs	r2, #128	; 0x80
   16f14:	0312      	lsls	r2, r2, #12
   16f16:	4314      	orrs	r4, r2
   16f18:	0324      	lsls	r4, r4, #12
   16f1a:	0b24      	lsrs	r4, r4, #12
   16f1c:	e79f      	b.n	16e5e <__aeabi_dsub+0x14a>
   16f1e:	002e      	movs	r6, r5
   16f20:	e77e      	b.n	16e20 <__aeabi_dsub+0x10c>
   16f22:	0008      	movs	r0, r1
   16f24:	4310      	orrs	r0, r2
   16f26:	d100      	bne.n	16f2a <__aeabi_dsub+0x216>
   16f28:	e0ca      	b.n	170c0 <__aeabi_dsub+0x3ac>
   16f2a:	1e58      	subs	r0, r3, #1
   16f2c:	4684      	mov	ip, r0
   16f2e:	2800      	cmp	r0, #0
   16f30:	d000      	beq.n	16f34 <__aeabi_dsub+0x220>
   16f32:	e0e7      	b.n	17104 <__aeabi_dsub+0x3f0>
   16f34:	4452      	add	r2, sl
   16f36:	4552      	cmp	r2, sl
   16f38:	4180      	sbcs	r0, r0
   16f3a:	1864      	adds	r4, r4, r1
   16f3c:	4240      	negs	r0, r0
   16f3e:	1824      	adds	r4, r4, r0
   16f40:	0017      	movs	r7, r2
   16f42:	2601      	movs	r6, #1
   16f44:	0223      	lsls	r3, r4, #8
   16f46:	d507      	bpl.n	16f58 <__aeabi_dsub+0x244>
   16f48:	2602      	movs	r6, #2
   16f4a:	e7cf      	b.n	16eec <__aeabi_dsub+0x1d8>
   16f4c:	4664      	mov	r4, ip
   16f4e:	432c      	orrs	r4, r5
   16f50:	d100      	bne.n	16f54 <__aeabi_dsub+0x240>
   16f52:	e1b3      	b.n	172bc <__aeabi_dsub+0x5a8>
   16f54:	002c      	movs	r4, r5
   16f56:	4667      	mov	r7, ip
   16f58:	077b      	lsls	r3, r7, #29
   16f5a:	d000      	beq.n	16f5e <__aeabi_dsub+0x24a>
   16f5c:	e762      	b.n	16e24 <__aeabi_dsub+0x110>
   16f5e:	0763      	lsls	r3, r4, #29
   16f60:	08ff      	lsrs	r7, r7, #3
   16f62:	431f      	orrs	r7, r3
   16f64:	2501      	movs	r5, #1
   16f66:	4643      	mov	r3, r8
   16f68:	08e4      	lsrs	r4, r4, #3
   16f6a:	401d      	ands	r5, r3
   16f6c:	e793      	b.n	16e96 <__aeabi_dsub+0x182>
   16f6e:	2d00      	cmp	r5, #0
   16f70:	d178      	bne.n	17064 <__aeabi_dsub+0x350>
   16f72:	1c75      	adds	r5, r6, #1
   16f74:	056d      	lsls	r5, r5, #21
   16f76:	0d6d      	lsrs	r5, r5, #21
   16f78:	2d01      	cmp	r5, #1
   16f7a:	dc00      	bgt.n	16f7e <__aeabi_dsub+0x26a>
   16f7c:	e0f2      	b.n	17164 <__aeabi_dsub+0x450>
   16f7e:	4650      	mov	r0, sl
   16f80:	1a80      	subs	r0, r0, r2
   16f82:	4582      	cmp	sl, r0
   16f84:	41bf      	sbcs	r7, r7
   16f86:	1a65      	subs	r5, r4, r1
   16f88:	427f      	negs	r7, r7
   16f8a:	1bed      	subs	r5, r5, r7
   16f8c:	4684      	mov	ip, r0
   16f8e:	0228      	lsls	r0, r5, #8
   16f90:	d400      	bmi.n	16f94 <__aeabi_dsub+0x280>
   16f92:	e08c      	b.n	170ae <__aeabi_dsub+0x39a>
   16f94:	4650      	mov	r0, sl
   16f96:	1a17      	subs	r7, r2, r0
   16f98:	42ba      	cmp	r2, r7
   16f9a:	4192      	sbcs	r2, r2
   16f9c:	1b0c      	subs	r4, r1, r4
   16f9e:	4255      	negs	r5, r2
   16fa0:	1b65      	subs	r5, r4, r5
   16fa2:	4698      	mov	r8, r3
   16fa4:	e714      	b.n	16dd0 <__aeabi_dsub+0xbc>
   16fa6:	2501      	movs	r5, #1
   16fa8:	4643      	mov	r3, r8
   16faa:	2400      	movs	r4, #0
   16fac:	401d      	ands	r5, r3
   16fae:	2700      	movs	r7, #0
   16fb0:	e755      	b.n	16e5e <__aeabi_dsub+0x14a>
   16fb2:	4c2a      	ldr	r4, [pc, #168]	; (1705c <__aeabi_dsub+0x348>)
   16fb4:	1af6      	subs	r6, r6, r3
   16fb6:	402c      	ands	r4, r5
   16fb8:	e732      	b.n	16e20 <__aeabi_dsub+0x10c>
   16fba:	003d      	movs	r5, r7
   16fbc:	3828      	subs	r0, #40	; 0x28
   16fbe:	4085      	lsls	r5, r0
   16fc0:	2700      	movs	r7, #0
   16fc2:	e717      	b.n	16df4 <__aeabi_dsub+0xe0>
   16fc4:	0038      	movs	r0, r7
   16fc6:	f000 fabb 	bl	17540 <__clzsi2>
   16fca:	3020      	adds	r0, #32
   16fcc:	e706      	b.n	16ddc <__aeabi_dsub+0xc8>
   16fce:	430a      	orrs	r2, r1
   16fd0:	0017      	movs	r7, r2
   16fd2:	2100      	movs	r1, #0
   16fd4:	1e7a      	subs	r2, r7, #1
   16fd6:	4197      	sbcs	r7, r2
   16fd8:	e6ee      	b.n	16db8 <__aeabi_dsub+0xa4>
   16fda:	2b00      	cmp	r3, #0
   16fdc:	d000      	beq.n	16fe0 <__aeabi_dsub+0x2cc>
   16fde:	e0e5      	b.n	171ac <__aeabi_dsub+0x498>
   16fe0:	1c73      	adds	r3, r6, #1
   16fe2:	469c      	mov	ip, r3
   16fe4:	055b      	lsls	r3, r3, #21
   16fe6:	0d5b      	lsrs	r3, r3, #21
   16fe8:	2b01      	cmp	r3, #1
   16fea:	dc00      	bgt.n	16fee <__aeabi_dsub+0x2da>
   16fec:	e09f      	b.n	1712e <__aeabi_dsub+0x41a>
   16fee:	4b1a      	ldr	r3, [pc, #104]	; (17058 <__aeabi_dsub+0x344>)
   16ff0:	459c      	cmp	ip, r3
   16ff2:	d100      	bne.n	16ff6 <__aeabi_dsub+0x2e2>
   16ff4:	e0c5      	b.n	17182 <__aeabi_dsub+0x46e>
   16ff6:	4452      	add	r2, sl
   16ff8:	4552      	cmp	r2, sl
   16ffa:	4180      	sbcs	r0, r0
   16ffc:	1864      	adds	r4, r4, r1
   16ffe:	4240      	negs	r0, r0
   17000:	1824      	adds	r4, r4, r0
   17002:	07e7      	lsls	r7, r4, #31
   17004:	0852      	lsrs	r2, r2, #1
   17006:	4317      	orrs	r7, r2
   17008:	0864      	lsrs	r4, r4, #1
   1700a:	4666      	mov	r6, ip
   1700c:	e708      	b.n	16e20 <__aeabi_dsub+0x10c>
   1700e:	4812      	ldr	r0, [pc, #72]	; (17058 <__aeabi_dsub+0x344>)
   17010:	4285      	cmp	r5, r0
   17012:	d100      	bne.n	17016 <__aeabi_dsub+0x302>
   17014:	e085      	b.n	17122 <__aeabi_dsub+0x40e>
   17016:	001d      	movs	r5, r3
   17018:	e6bc      	b.n	16d94 <__aeabi_dsub+0x80>
   1701a:	0029      	movs	r1, r5
   1701c:	3e1f      	subs	r6, #31
   1701e:	40f1      	lsrs	r1, r6
   17020:	2b20      	cmp	r3, #32
   17022:	d100      	bne.n	17026 <__aeabi_dsub+0x312>
   17024:	e07f      	b.n	17126 <__aeabi_dsub+0x412>
   17026:	2240      	movs	r2, #64	; 0x40
   17028:	1ad3      	subs	r3, r2, r3
   1702a:	409d      	lsls	r5, r3
   1702c:	432f      	orrs	r7, r5
   1702e:	1e7d      	subs	r5, r7, #1
   17030:	41af      	sbcs	r7, r5
   17032:	2400      	movs	r4, #0
   17034:	430f      	orrs	r7, r1
   17036:	2600      	movs	r6, #0
   17038:	e78e      	b.n	16f58 <__aeabi_dsub+0x244>
   1703a:	002b      	movs	r3, r5
   1703c:	000f      	movs	r7, r1
   1703e:	3b20      	subs	r3, #32
   17040:	40df      	lsrs	r7, r3
   17042:	2d20      	cmp	r5, #32
   17044:	d071      	beq.n	1712a <__aeabi_dsub+0x416>
   17046:	2340      	movs	r3, #64	; 0x40
   17048:	1b5d      	subs	r5, r3, r5
   1704a:	40a9      	lsls	r1, r5
   1704c:	430a      	orrs	r2, r1
   1704e:	1e51      	subs	r1, r2, #1
   17050:	418a      	sbcs	r2, r1
   17052:	2100      	movs	r1, #0
   17054:	4317      	orrs	r7, r2
   17056:	e6af      	b.n	16db8 <__aeabi_dsub+0xa4>
   17058:	000007ff 	.word	0x000007ff
   1705c:	ff7fffff 	.word	0xff7fffff
   17060:	800fffff 	.word	0x800fffff
   17064:	2e00      	cmp	r6, #0
   17066:	d03e      	beq.n	170e6 <__aeabi_dsub+0x3d2>
   17068:	4eb3      	ldr	r6, [pc, #716]	; (17338 <__aeabi_dsub+0x624>)
   1706a:	45b4      	cmp	ip, r6
   1706c:	d045      	beq.n	170fa <__aeabi_dsub+0x3e6>
   1706e:	2680      	movs	r6, #128	; 0x80
   17070:	0436      	lsls	r6, r6, #16
   17072:	426d      	negs	r5, r5
   17074:	4334      	orrs	r4, r6
   17076:	2d38      	cmp	r5, #56	; 0x38
   17078:	dd00      	ble.n	1707c <__aeabi_dsub+0x368>
   1707a:	e0a8      	b.n	171ce <__aeabi_dsub+0x4ba>
   1707c:	2d1f      	cmp	r5, #31
   1707e:	dd00      	ble.n	17082 <__aeabi_dsub+0x36e>
   17080:	e11f      	b.n	172c2 <__aeabi_dsub+0x5ae>
   17082:	2620      	movs	r6, #32
   17084:	0027      	movs	r7, r4
   17086:	4650      	mov	r0, sl
   17088:	1b76      	subs	r6, r6, r5
   1708a:	40b7      	lsls	r7, r6
   1708c:	40e8      	lsrs	r0, r5
   1708e:	4307      	orrs	r7, r0
   17090:	4650      	mov	r0, sl
   17092:	40b0      	lsls	r0, r6
   17094:	1e46      	subs	r6, r0, #1
   17096:	41b0      	sbcs	r0, r6
   17098:	40ec      	lsrs	r4, r5
   1709a:	4338      	orrs	r0, r7
   1709c:	1a17      	subs	r7, r2, r0
   1709e:	42ba      	cmp	r2, r7
   170a0:	4192      	sbcs	r2, r2
   170a2:	1b0c      	subs	r4, r1, r4
   170a4:	4252      	negs	r2, r2
   170a6:	1aa4      	subs	r4, r4, r2
   170a8:	4666      	mov	r6, ip
   170aa:	4698      	mov	r8, r3
   170ac:	e68b      	b.n	16dc6 <__aeabi_dsub+0xb2>
   170ae:	4664      	mov	r4, ip
   170b0:	4667      	mov	r7, ip
   170b2:	432c      	orrs	r4, r5
   170b4:	d000      	beq.n	170b8 <__aeabi_dsub+0x3a4>
   170b6:	e68b      	b.n	16dd0 <__aeabi_dsub+0xbc>
   170b8:	2500      	movs	r5, #0
   170ba:	2600      	movs	r6, #0
   170bc:	2700      	movs	r7, #0
   170be:	e6ea      	b.n	16e96 <__aeabi_dsub+0x182>
   170c0:	001e      	movs	r6, r3
   170c2:	e6ad      	b.n	16e20 <__aeabi_dsub+0x10c>
   170c4:	2b1f      	cmp	r3, #31
   170c6:	dc60      	bgt.n	1718a <__aeabi_dsub+0x476>
   170c8:	2720      	movs	r7, #32
   170ca:	1af8      	subs	r0, r7, r3
   170cc:	000f      	movs	r7, r1
   170ce:	4684      	mov	ip, r0
   170d0:	4087      	lsls	r7, r0
   170d2:	0010      	movs	r0, r2
   170d4:	40d8      	lsrs	r0, r3
   170d6:	4307      	orrs	r7, r0
   170d8:	4660      	mov	r0, ip
   170da:	4082      	lsls	r2, r0
   170dc:	1e50      	subs	r0, r2, #1
   170de:	4182      	sbcs	r2, r0
   170e0:	40d9      	lsrs	r1, r3
   170e2:	4317      	orrs	r7, r2
   170e4:	e6f5      	b.n	16ed2 <__aeabi_dsub+0x1be>
   170e6:	0026      	movs	r6, r4
   170e8:	4650      	mov	r0, sl
   170ea:	4306      	orrs	r6, r0
   170ec:	d005      	beq.n	170fa <__aeabi_dsub+0x3e6>
   170ee:	43ed      	mvns	r5, r5
   170f0:	2d00      	cmp	r5, #0
   170f2:	d0d3      	beq.n	1709c <__aeabi_dsub+0x388>
   170f4:	4e90      	ldr	r6, [pc, #576]	; (17338 <__aeabi_dsub+0x624>)
   170f6:	45b4      	cmp	ip, r6
   170f8:	d1bd      	bne.n	17076 <__aeabi_dsub+0x362>
   170fa:	000c      	movs	r4, r1
   170fc:	0017      	movs	r7, r2
   170fe:	4666      	mov	r6, ip
   17100:	4698      	mov	r8, r3
   17102:	e68d      	b.n	16e20 <__aeabi_dsub+0x10c>
   17104:	488c      	ldr	r0, [pc, #560]	; (17338 <__aeabi_dsub+0x624>)
   17106:	4283      	cmp	r3, r0
   17108:	d00b      	beq.n	17122 <__aeabi_dsub+0x40e>
   1710a:	4663      	mov	r3, ip
   1710c:	e6d9      	b.n	16ec2 <__aeabi_dsub+0x1ae>
   1710e:	2d00      	cmp	r5, #0
   17110:	d000      	beq.n	17114 <__aeabi_dsub+0x400>
   17112:	e096      	b.n	17242 <__aeabi_dsub+0x52e>
   17114:	0008      	movs	r0, r1
   17116:	4310      	orrs	r0, r2
   17118:	d100      	bne.n	1711c <__aeabi_dsub+0x408>
   1711a:	e0e2      	b.n	172e2 <__aeabi_dsub+0x5ce>
   1711c:	000c      	movs	r4, r1
   1711e:	0017      	movs	r7, r2
   17120:	4698      	mov	r8, r3
   17122:	4e85      	ldr	r6, [pc, #532]	; (17338 <__aeabi_dsub+0x624>)
   17124:	e67c      	b.n	16e20 <__aeabi_dsub+0x10c>
   17126:	2500      	movs	r5, #0
   17128:	e780      	b.n	1702c <__aeabi_dsub+0x318>
   1712a:	2100      	movs	r1, #0
   1712c:	e78e      	b.n	1704c <__aeabi_dsub+0x338>
   1712e:	0023      	movs	r3, r4
   17130:	4650      	mov	r0, sl
   17132:	4303      	orrs	r3, r0
   17134:	2e00      	cmp	r6, #0
   17136:	d000      	beq.n	1713a <__aeabi_dsub+0x426>
   17138:	e0a8      	b.n	1728c <__aeabi_dsub+0x578>
   1713a:	2b00      	cmp	r3, #0
   1713c:	d100      	bne.n	17140 <__aeabi_dsub+0x42c>
   1713e:	e0de      	b.n	172fe <__aeabi_dsub+0x5ea>
   17140:	000b      	movs	r3, r1
   17142:	4313      	orrs	r3, r2
   17144:	d100      	bne.n	17148 <__aeabi_dsub+0x434>
   17146:	e66b      	b.n	16e20 <__aeabi_dsub+0x10c>
   17148:	4452      	add	r2, sl
   1714a:	4552      	cmp	r2, sl
   1714c:	4180      	sbcs	r0, r0
   1714e:	1864      	adds	r4, r4, r1
   17150:	4240      	negs	r0, r0
   17152:	1824      	adds	r4, r4, r0
   17154:	0017      	movs	r7, r2
   17156:	0223      	lsls	r3, r4, #8
   17158:	d400      	bmi.n	1715c <__aeabi_dsub+0x448>
   1715a:	e6fd      	b.n	16f58 <__aeabi_dsub+0x244>
   1715c:	4b77      	ldr	r3, [pc, #476]	; (1733c <__aeabi_dsub+0x628>)
   1715e:	4666      	mov	r6, ip
   17160:	401c      	ands	r4, r3
   17162:	e65d      	b.n	16e20 <__aeabi_dsub+0x10c>
   17164:	0025      	movs	r5, r4
   17166:	4650      	mov	r0, sl
   17168:	4305      	orrs	r5, r0
   1716a:	2e00      	cmp	r6, #0
   1716c:	d1cf      	bne.n	1710e <__aeabi_dsub+0x3fa>
   1716e:	2d00      	cmp	r5, #0
   17170:	d14f      	bne.n	17212 <__aeabi_dsub+0x4fe>
   17172:	000c      	movs	r4, r1
   17174:	4314      	orrs	r4, r2
   17176:	d100      	bne.n	1717a <__aeabi_dsub+0x466>
   17178:	e0a0      	b.n	172bc <__aeabi_dsub+0x5a8>
   1717a:	000c      	movs	r4, r1
   1717c:	0017      	movs	r7, r2
   1717e:	4698      	mov	r8, r3
   17180:	e64e      	b.n	16e20 <__aeabi_dsub+0x10c>
   17182:	4666      	mov	r6, ip
   17184:	2400      	movs	r4, #0
   17186:	2700      	movs	r7, #0
   17188:	e685      	b.n	16e96 <__aeabi_dsub+0x182>
   1718a:	001f      	movs	r7, r3
   1718c:	0008      	movs	r0, r1
   1718e:	3f20      	subs	r7, #32
   17190:	40f8      	lsrs	r0, r7
   17192:	0007      	movs	r7, r0
   17194:	2b20      	cmp	r3, #32
   17196:	d100      	bne.n	1719a <__aeabi_dsub+0x486>
   17198:	e08e      	b.n	172b8 <__aeabi_dsub+0x5a4>
   1719a:	2040      	movs	r0, #64	; 0x40
   1719c:	1ac3      	subs	r3, r0, r3
   1719e:	4099      	lsls	r1, r3
   171a0:	430a      	orrs	r2, r1
   171a2:	1e51      	subs	r1, r2, #1
   171a4:	418a      	sbcs	r2, r1
   171a6:	2100      	movs	r1, #0
   171a8:	4317      	orrs	r7, r2
   171aa:	e692      	b.n	16ed2 <__aeabi_dsub+0x1be>
   171ac:	2e00      	cmp	r6, #0
   171ae:	d114      	bne.n	171da <__aeabi_dsub+0x4c6>
   171b0:	0026      	movs	r6, r4
   171b2:	4650      	mov	r0, sl
   171b4:	4306      	orrs	r6, r0
   171b6:	d062      	beq.n	1727e <__aeabi_dsub+0x56a>
   171b8:	43db      	mvns	r3, r3
   171ba:	2b00      	cmp	r3, #0
   171bc:	d15c      	bne.n	17278 <__aeabi_dsub+0x564>
   171be:	1887      	adds	r7, r0, r2
   171c0:	4297      	cmp	r7, r2
   171c2:	4192      	sbcs	r2, r2
   171c4:	1864      	adds	r4, r4, r1
   171c6:	4252      	negs	r2, r2
   171c8:	18a4      	adds	r4, r4, r2
   171ca:	4666      	mov	r6, ip
   171cc:	e687      	b.n	16ede <__aeabi_dsub+0x1ca>
   171ce:	4650      	mov	r0, sl
   171d0:	4320      	orrs	r0, r4
   171d2:	1e44      	subs	r4, r0, #1
   171d4:	41a0      	sbcs	r0, r4
   171d6:	2400      	movs	r4, #0
   171d8:	e760      	b.n	1709c <__aeabi_dsub+0x388>
   171da:	4e57      	ldr	r6, [pc, #348]	; (17338 <__aeabi_dsub+0x624>)
   171dc:	45b4      	cmp	ip, r6
   171de:	d04e      	beq.n	1727e <__aeabi_dsub+0x56a>
   171e0:	2680      	movs	r6, #128	; 0x80
   171e2:	0436      	lsls	r6, r6, #16
   171e4:	425b      	negs	r3, r3
   171e6:	4334      	orrs	r4, r6
   171e8:	2b38      	cmp	r3, #56	; 0x38
   171ea:	dd00      	ble.n	171ee <__aeabi_dsub+0x4da>
   171ec:	e07f      	b.n	172ee <__aeabi_dsub+0x5da>
   171ee:	2b1f      	cmp	r3, #31
   171f0:	dd00      	ble.n	171f4 <__aeabi_dsub+0x4e0>
   171f2:	e08b      	b.n	1730c <__aeabi_dsub+0x5f8>
   171f4:	2620      	movs	r6, #32
   171f6:	0027      	movs	r7, r4
   171f8:	4650      	mov	r0, sl
   171fa:	1af6      	subs	r6, r6, r3
   171fc:	40b7      	lsls	r7, r6
   171fe:	40d8      	lsrs	r0, r3
   17200:	4307      	orrs	r7, r0
   17202:	4650      	mov	r0, sl
   17204:	40b0      	lsls	r0, r6
   17206:	1e46      	subs	r6, r0, #1
   17208:	41b0      	sbcs	r0, r6
   1720a:	4307      	orrs	r7, r0
   1720c:	40dc      	lsrs	r4, r3
   1720e:	18bf      	adds	r7, r7, r2
   17210:	e7d6      	b.n	171c0 <__aeabi_dsub+0x4ac>
   17212:	000d      	movs	r5, r1
   17214:	4315      	orrs	r5, r2
   17216:	d100      	bne.n	1721a <__aeabi_dsub+0x506>
   17218:	e602      	b.n	16e20 <__aeabi_dsub+0x10c>
   1721a:	4650      	mov	r0, sl
   1721c:	1a80      	subs	r0, r0, r2
   1721e:	4582      	cmp	sl, r0
   17220:	41bf      	sbcs	r7, r7
   17222:	1a65      	subs	r5, r4, r1
   17224:	427f      	negs	r7, r7
   17226:	1bed      	subs	r5, r5, r7
   17228:	4684      	mov	ip, r0
   1722a:	0228      	lsls	r0, r5, #8
   1722c:	d400      	bmi.n	17230 <__aeabi_dsub+0x51c>
   1722e:	e68d      	b.n	16f4c <__aeabi_dsub+0x238>
   17230:	4650      	mov	r0, sl
   17232:	1a17      	subs	r7, r2, r0
   17234:	42ba      	cmp	r2, r7
   17236:	4192      	sbcs	r2, r2
   17238:	1b0c      	subs	r4, r1, r4
   1723a:	4252      	negs	r2, r2
   1723c:	1aa4      	subs	r4, r4, r2
   1723e:	4698      	mov	r8, r3
   17240:	e5ee      	b.n	16e20 <__aeabi_dsub+0x10c>
   17242:	000d      	movs	r5, r1
   17244:	4315      	orrs	r5, r2
   17246:	d100      	bne.n	1724a <__aeabi_dsub+0x536>
   17248:	e76b      	b.n	17122 <__aeabi_dsub+0x40e>
   1724a:	4650      	mov	r0, sl
   1724c:	0767      	lsls	r7, r4, #29
   1724e:	08c0      	lsrs	r0, r0, #3
   17250:	4307      	orrs	r7, r0
   17252:	2080      	movs	r0, #128	; 0x80
   17254:	08e4      	lsrs	r4, r4, #3
   17256:	0300      	lsls	r0, r0, #12
   17258:	4204      	tst	r4, r0
   1725a:	d007      	beq.n	1726c <__aeabi_dsub+0x558>
   1725c:	08cd      	lsrs	r5, r1, #3
   1725e:	4205      	tst	r5, r0
   17260:	d104      	bne.n	1726c <__aeabi_dsub+0x558>
   17262:	002c      	movs	r4, r5
   17264:	4698      	mov	r8, r3
   17266:	08d7      	lsrs	r7, r2, #3
   17268:	0749      	lsls	r1, r1, #29
   1726a:	430f      	orrs	r7, r1
   1726c:	0f7b      	lsrs	r3, r7, #29
   1726e:	00e4      	lsls	r4, r4, #3
   17270:	431c      	orrs	r4, r3
   17272:	00ff      	lsls	r7, r7, #3
   17274:	4e30      	ldr	r6, [pc, #192]	; (17338 <__aeabi_dsub+0x624>)
   17276:	e5d3      	b.n	16e20 <__aeabi_dsub+0x10c>
   17278:	4e2f      	ldr	r6, [pc, #188]	; (17338 <__aeabi_dsub+0x624>)
   1727a:	45b4      	cmp	ip, r6
   1727c:	d1b4      	bne.n	171e8 <__aeabi_dsub+0x4d4>
   1727e:	000c      	movs	r4, r1
   17280:	0017      	movs	r7, r2
   17282:	4666      	mov	r6, ip
   17284:	e5cc      	b.n	16e20 <__aeabi_dsub+0x10c>
   17286:	2700      	movs	r7, #0
   17288:	2400      	movs	r4, #0
   1728a:	e5e8      	b.n	16e5e <__aeabi_dsub+0x14a>
   1728c:	2b00      	cmp	r3, #0
   1728e:	d039      	beq.n	17304 <__aeabi_dsub+0x5f0>
   17290:	000b      	movs	r3, r1
   17292:	4313      	orrs	r3, r2
   17294:	d100      	bne.n	17298 <__aeabi_dsub+0x584>
   17296:	e744      	b.n	17122 <__aeabi_dsub+0x40e>
   17298:	08c0      	lsrs	r0, r0, #3
   1729a:	0767      	lsls	r7, r4, #29
   1729c:	4307      	orrs	r7, r0
   1729e:	2080      	movs	r0, #128	; 0x80
   172a0:	08e4      	lsrs	r4, r4, #3
   172a2:	0300      	lsls	r0, r0, #12
   172a4:	4204      	tst	r4, r0
   172a6:	d0e1      	beq.n	1726c <__aeabi_dsub+0x558>
   172a8:	08cb      	lsrs	r3, r1, #3
   172aa:	4203      	tst	r3, r0
   172ac:	d1de      	bne.n	1726c <__aeabi_dsub+0x558>
   172ae:	08d7      	lsrs	r7, r2, #3
   172b0:	0749      	lsls	r1, r1, #29
   172b2:	430f      	orrs	r7, r1
   172b4:	001c      	movs	r4, r3
   172b6:	e7d9      	b.n	1726c <__aeabi_dsub+0x558>
   172b8:	2100      	movs	r1, #0
   172ba:	e771      	b.n	171a0 <__aeabi_dsub+0x48c>
   172bc:	2500      	movs	r5, #0
   172be:	2700      	movs	r7, #0
   172c0:	e5e9      	b.n	16e96 <__aeabi_dsub+0x182>
   172c2:	002e      	movs	r6, r5
   172c4:	0027      	movs	r7, r4
   172c6:	3e20      	subs	r6, #32
   172c8:	40f7      	lsrs	r7, r6
   172ca:	2d20      	cmp	r5, #32
   172cc:	d02f      	beq.n	1732e <__aeabi_dsub+0x61a>
   172ce:	2640      	movs	r6, #64	; 0x40
   172d0:	1b75      	subs	r5, r6, r5
   172d2:	40ac      	lsls	r4, r5
   172d4:	4650      	mov	r0, sl
   172d6:	4320      	orrs	r0, r4
   172d8:	1e44      	subs	r4, r0, #1
   172da:	41a0      	sbcs	r0, r4
   172dc:	2400      	movs	r4, #0
   172de:	4338      	orrs	r0, r7
   172e0:	e6dc      	b.n	1709c <__aeabi_dsub+0x388>
   172e2:	2480      	movs	r4, #128	; 0x80
   172e4:	2500      	movs	r5, #0
   172e6:	0324      	lsls	r4, r4, #12
   172e8:	4e13      	ldr	r6, [pc, #76]	; (17338 <__aeabi_dsub+0x624>)
   172ea:	2700      	movs	r7, #0
   172ec:	e5d3      	b.n	16e96 <__aeabi_dsub+0x182>
   172ee:	4650      	mov	r0, sl
   172f0:	4320      	orrs	r0, r4
   172f2:	0007      	movs	r7, r0
   172f4:	1e78      	subs	r0, r7, #1
   172f6:	4187      	sbcs	r7, r0
   172f8:	2400      	movs	r4, #0
   172fa:	18bf      	adds	r7, r7, r2
   172fc:	e760      	b.n	171c0 <__aeabi_dsub+0x4ac>
   172fe:	000c      	movs	r4, r1
   17300:	0017      	movs	r7, r2
   17302:	e58d      	b.n	16e20 <__aeabi_dsub+0x10c>
   17304:	000c      	movs	r4, r1
   17306:	0017      	movs	r7, r2
   17308:	4e0b      	ldr	r6, [pc, #44]	; (17338 <__aeabi_dsub+0x624>)
   1730a:	e589      	b.n	16e20 <__aeabi_dsub+0x10c>
   1730c:	001e      	movs	r6, r3
   1730e:	0027      	movs	r7, r4
   17310:	3e20      	subs	r6, #32
   17312:	40f7      	lsrs	r7, r6
   17314:	2b20      	cmp	r3, #32
   17316:	d00c      	beq.n	17332 <__aeabi_dsub+0x61e>
   17318:	2640      	movs	r6, #64	; 0x40
   1731a:	1af3      	subs	r3, r6, r3
   1731c:	409c      	lsls	r4, r3
   1731e:	4650      	mov	r0, sl
   17320:	4320      	orrs	r0, r4
   17322:	1e44      	subs	r4, r0, #1
   17324:	41a0      	sbcs	r0, r4
   17326:	4307      	orrs	r7, r0
   17328:	2400      	movs	r4, #0
   1732a:	18bf      	adds	r7, r7, r2
   1732c:	e748      	b.n	171c0 <__aeabi_dsub+0x4ac>
   1732e:	2400      	movs	r4, #0
   17330:	e7d0      	b.n	172d4 <__aeabi_dsub+0x5c0>
   17332:	2400      	movs	r4, #0
   17334:	e7f3      	b.n	1731e <__aeabi_dsub+0x60a>
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	000007ff 	.word	0x000007ff
   1733c:	ff7fffff 	.word	0xff7fffff

00017340 <__aeabi_d2iz>:
   17340:	b530      	push	{r4, r5, lr}
   17342:	4d13      	ldr	r5, [pc, #76]	; (17390 <__aeabi_d2iz+0x50>)
   17344:	030a      	lsls	r2, r1, #12
   17346:	004b      	lsls	r3, r1, #1
   17348:	0b12      	lsrs	r2, r2, #12
   1734a:	0d5b      	lsrs	r3, r3, #21
   1734c:	0fc9      	lsrs	r1, r1, #31
   1734e:	2400      	movs	r4, #0
   17350:	42ab      	cmp	r3, r5
   17352:	dd10      	ble.n	17376 <__aeabi_d2iz+0x36>
   17354:	4c0f      	ldr	r4, [pc, #60]	; (17394 <__aeabi_d2iz+0x54>)
   17356:	42a3      	cmp	r3, r4
   17358:	dc0f      	bgt.n	1737a <__aeabi_d2iz+0x3a>
   1735a:	2480      	movs	r4, #128	; 0x80
   1735c:	4d0e      	ldr	r5, [pc, #56]	; (17398 <__aeabi_d2iz+0x58>)
   1735e:	0364      	lsls	r4, r4, #13
   17360:	4322      	orrs	r2, r4
   17362:	1aed      	subs	r5, r5, r3
   17364:	2d1f      	cmp	r5, #31
   17366:	dd0b      	ble.n	17380 <__aeabi_d2iz+0x40>
   17368:	480c      	ldr	r0, [pc, #48]	; (1739c <__aeabi_d2iz+0x5c>)
   1736a:	1ac3      	subs	r3, r0, r3
   1736c:	40da      	lsrs	r2, r3
   1736e:	4254      	negs	r4, r2
   17370:	2900      	cmp	r1, #0
   17372:	d100      	bne.n	17376 <__aeabi_d2iz+0x36>
   17374:	0014      	movs	r4, r2
   17376:	0020      	movs	r0, r4
   17378:	bd30      	pop	{r4, r5, pc}
   1737a:	4b09      	ldr	r3, [pc, #36]	; (173a0 <__aeabi_d2iz+0x60>)
   1737c:	18cc      	adds	r4, r1, r3
   1737e:	e7fa      	b.n	17376 <__aeabi_d2iz+0x36>
   17380:	4c08      	ldr	r4, [pc, #32]	; (173a4 <__aeabi_d2iz+0x64>)
   17382:	40e8      	lsrs	r0, r5
   17384:	46a4      	mov	ip, r4
   17386:	4463      	add	r3, ip
   17388:	409a      	lsls	r2, r3
   1738a:	4302      	orrs	r2, r0
   1738c:	e7ef      	b.n	1736e <__aeabi_d2iz+0x2e>
   1738e:	46c0      	nop			; (mov r8, r8)
   17390:	000003fe 	.word	0x000003fe
   17394:	0000041d 	.word	0x0000041d
   17398:	00000433 	.word	0x00000433
   1739c:	00000413 	.word	0x00000413
   173a0:	7fffffff 	.word	0x7fffffff
   173a4:	fffffbed 	.word	0xfffffbed

000173a8 <__aeabi_i2d>:
   173a8:	b570      	push	{r4, r5, r6, lr}
   173aa:	2800      	cmp	r0, #0
   173ac:	d030      	beq.n	17410 <__aeabi_i2d+0x68>
   173ae:	17c3      	asrs	r3, r0, #31
   173b0:	18c4      	adds	r4, r0, r3
   173b2:	405c      	eors	r4, r3
   173b4:	0fc5      	lsrs	r5, r0, #31
   173b6:	0020      	movs	r0, r4
   173b8:	f000 f8c2 	bl	17540 <__clzsi2>
   173bc:	4b17      	ldr	r3, [pc, #92]	; (1741c <__aeabi_i2d+0x74>)
   173be:	4a18      	ldr	r2, [pc, #96]	; (17420 <__aeabi_i2d+0x78>)
   173c0:	1a1b      	subs	r3, r3, r0
   173c2:	1ad2      	subs	r2, r2, r3
   173c4:	2a1f      	cmp	r2, #31
   173c6:	dd18      	ble.n	173fa <__aeabi_i2d+0x52>
   173c8:	4a16      	ldr	r2, [pc, #88]	; (17424 <__aeabi_i2d+0x7c>)
   173ca:	1ad2      	subs	r2, r2, r3
   173cc:	4094      	lsls	r4, r2
   173ce:	2200      	movs	r2, #0
   173d0:	0324      	lsls	r4, r4, #12
   173d2:	055b      	lsls	r3, r3, #21
   173d4:	0b24      	lsrs	r4, r4, #12
   173d6:	0d5b      	lsrs	r3, r3, #21
   173d8:	2100      	movs	r1, #0
   173da:	0010      	movs	r0, r2
   173dc:	0324      	lsls	r4, r4, #12
   173de:	0d0a      	lsrs	r2, r1, #20
   173e0:	0b24      	lsrs	r4, r4, #12
   173e2:	0512      	lsls	r2, r2, #20
   173e4:	4322      	orrs	r2, r4
   173e6:	4c10      	ldr	r4, [pc, #64]	; (17428 <__aeabi_i2d+0x80>)
   173e8:	051b      	lsls	r3, r3, #20
   173ea:	4022      	ands	r2, r4
   173ec:	4313      	orrs	r3, r2
   173ee:	005b      	lsls	r3, r3, #1
   173f0:	07ed      	lsls	r5, r5, #31
   173f2:	085b      	lsrs	r3, r3, #1
   173f4:	432b      	orrs	r3, r5
   173f6:	0019      	movs	r1, r3
   173f8:	bd70      	pop	{r4, r5, r6, pc}
   173fa:	0021      	movs	r1, r4
   173fc:	4091      	lsls	r1, r2
   173fe:	000a      	movs	r2, r1
   17400:	210b      	movs	r1, #11
   17402:	1a08      	subs	r0, r1, r0
   17404:	40c4      	lsrs	r4, r0
   17406:	055b      	lsls	r3, r3, #21
   17408:	0324      	lsls	r4, r4, #12
   1740a:	0b24      	lsrs	r4, r4, #12
   1740c:	0d5b      	lsrs	r3, r3, #21
   1740e:	e7e3      	b.n	173d8 <__aeabi_i2d+0x30>
   17410:	2500      	movs	r5, #0
   17412:	2300      	movs	r3, #0
   17414:	2400      	movs	r4, #0
   17416:	2200      	movs	r2, #0
   17418:	e7de      	b.n	173d8 <__aeabi_i2d+0x30>
   1741a:	46c0      	nop			; (mov r8, r8)
   1741c:	0000041e 	.word	0x0000041e
   17420:	00000433 	.word	0x00000433
   17424:	00000413 	.word	0x00000413
   17428:	800fffff 	.word	0x800fffff

0001742c <__aeabi_ui2d>:
   1742c:	b510      	push	{r4, lr}
   1742e:	1e04      	subs	r4, r0, #0
   17430:	d028      	beq.n	17484 <__aeabi_ui2d+0x58>
   17432:	f000 f885 	bl	17540 <__clzsi2>
   17436:	4b15      	ldr	r3, [pc, #84]	; (1748c <__aeabi_ui2d+0x60>)
   17438:	4a15      	ldr	r2, [pc, #84]	; (17490 <__aeabi_ui2d+0x64>)
   1743a:	1a1b      	subs	r3, r3, r0
   1743c:	1ad2      	subs	r2, r2, r3
   1743e:	2a1f      	cmp	r2, #31
   17440:	dd15      	ble.n	1746e <__aeabi_ui2d+0x42>
   17442:	4a14      	ldr	r2, [pc, #80]	; (17494 <__aeabi_ui2d+0x68>)
   17444:	1ad2      	subs	r2, r2, r3
   17446:	4094      	lsls	r4, r2
   17448:	2200      	movs	r2, #0
   1744a:	0324      	lsls	r4, r4, #12
   1744c:	055b      	lsls	r3, r3, #21
   1744e:	0b24      	lsrs	r4, r4, #12
   17450:	0d5b      	lsrs	r3, r3, #21
   17452:	2100      	movs	r1, #0
   17454:	0010      	movs	r0, r2
   17456:	0324      	lsls	r4, r4, #12
   17458:	0d0a      	lsrs	r2, r1, #20
   1745a:	0b24      	lsrs	r4, r4, #12
   1745c:	0512      	lsls	r2, r2, #20
   1745e:	4322      	orrs	r2, r4
   17460:	4c0d      	ldr	r4, [pc, #52]	; (17498 <__aeabi_ui2d+0x6c>)
   17462:	051b      	lsls	r3, r3, #20
   17464:	4022      	ands	r2, r4
   17466:	4313      	orrs	r3, r2
   17468:	005b      	lsls	r3, r3, #1
   1746a:	0859      	lsrs	r1, r3, #1
   1746c:	bd10      	pop	{r4, pc}
   1746e:	0021      	movs	r1, r4
   17470:	4091      	lsls	r1, r2
   17472:	000a      	movs	r2, r1
   17474:	210b      	movs	r1, #11
   17476:	1a08      	subs	r0, r1, r0
   17478:	40c4      	lsrs	r4, r0
   1747a:	055b      	lsls	r3, r3, #21
   1747c:	0324      	lsls	r4, r4, #12
   1747e:	0b24      	lsrs	r4, r4, #12
   17480:	0d5b      	lsrs	r3, r3, #21
   17482:	e7e6      	b.n	17452 <__aeabi_ui2d+0x26>
   17484:	2300      	movs	r3, #0
   17486:	2400      	movs	r4, #0
   17488:	2200      	movs	r2, #0
   1748a:	e7e2      	b.n	17452 <__aeabi_ui2d+0x26>
   1748c:	0000041e 	.word	0x0000041e
   17490:	00000433 	.word	0x00000433
   17494:	00000413 	.word	0x00000413
   17498:	800fffff 	.word	0x800fffff

0001749c <__aeabi_f2d>:
   1749c:	0041      	lsls	r1, r0, #1
   1749e:	0e09      	lsrs	r1, r1, #24
   174a0:	1c4b      	adds	r3, r1, #1
   174a2:	b570      	push	{r4, r5, r6, lr}
   174a4:	b2db      	uxtb	r3, r3
   174a6:	0246      	lsls	r6, r0, #9
   174a8:	0a75      	lsrs	r5, r6, #9
   174aa:	0fc4      	lsrs	r4, r0, #31
   174ac:	2b01      	cmp	r3, #1
   174ae:	dd14      	ble.n	174da <__aeabi_f2d+0x3e>
   174b0:	23e0      	movs	r3, #224	; 0xe0
   174b2:	009b      	lsls	r3, r3, #2
   174b4:	076d      	lsls	r5, r5, #29
   174b6:	0b36      	lsrs	r6, r6, #12
   174b8:	18cb      	adds	r3, r1, r3
   174ba:	2100      	movs	r1, #0
   174bc:	0d0a      	lsrs	r2, r1, #20
   174be:	0028      	movs	r0, r5
   174c0:	0512      	lsls	r2, r2, #20
   174c2:	4d1c      	ldr	r5, [pc, #112]	; (17534 <__aeabi_f2d+0x98>)
   174c4:	4332      	orrs	r2, r6
   174c6:	055b      	lsls	r3, r3, #21
   174c8:	402a      	ands	r2, r5
   174ca:	085b      	lsrs	r3, r3, #1
   174cc:	4313      	orrs	r3, r2
   174ce:	005b      	lsls	r3, r3, #1
   174d0:	07e4      	lsls	r4, r4, #31
   174d2:	085b      	lsrs	r3, r3, #1
   174d4:	4323      	orrs	r3, r4
   174d6:	0019      	movs	r1, r3
   174d8:	bd70      	pop	{r4, r5, r6, pc}
   174da:	2900      	cmp	r1, #0
   174dc:	d114      	bne.n	17508 <__aeabi_f2d+0x6c>
   174de:	2d00      	cmp	r5, #0
   174e0:	d01e      	beq.n	17520 <__aeabi_f2d+0x84>
   174e2:	0028      	movs	r0, r5
   174e4:	f000 f82c 	bl	17540 <__clzsi2>
   174e8:	280a      	cmp	r0, #10
   174ea:	dc1c      	bgt.n	17526 <__aeabi_f2d+0x8a>
   174ec:	230b      	movs	r3, #11
   174ee:	002a      	movs	r2, r5
   174f0:	1a1b      	subs	r3, r3, r0
   174f2:	40da      	lsrs	r2, r3
   174f4:	0003      	movs	r3, r0
   174f6:	3315      	adds	r3, #21
   174f8:	409d      	lsls	r5, r3
   174fa:	4b0f      	ldr	r3, [pc, #60]	; (17538 <__aeabi_f2d+0x9c>)
   174fc:	0312      	lsls	r2, r2, #12
   174fe:	1a1b      	subs	r3, r3, r0
   17500:	055b      	lsls	r3, r3, #21
   17502:	0b16      	lsrs	r6, r2, #12
   17504:	0d5b      	lsrs	r3, r3, #21
   17506:	e7d8      	b.n	174ba <__aeabi_f2d+0x1e>
   17508:	2d00      	cmp	r5, #0
   1750a:	d006      	beq.n	1751a <__aeabi_f2d+0x7e>
   1750c:	0b32      	lsrs	r2, r6, #12
   1750e:	2680      	movs	r6, #128	; 0x80
   17510:	0336      	lsls	r6, r6, #12
   17512:	076d      	lsls	r5, r5, #29
   17514:	4316      	orrs	r6, r2
   17516:	4b09      	ldr	r3, [pc, #36]	; (1753c <__aeabi_f2d+0xa0>)
   17518:	e7cf      	b.n	174ba <__aeabi_f2d+0x1e>
   1751a:	4b08      	ldr	r3, [pc, #32]	; (1753c <__aeabi_f2d+0xa0>)
   1751c:	2600      	movs	r6, #0
   1751e:	e7cc      	b.n	174ba <__aeabi_f2d+0x1e>
   17520:	2300      	movs	r3, #0
   17522:	2600      	movs	r6, #0
   17524:	e7c9      	b.n	174ba <__aeabi_f2d+0x1e>
   17526:	0003      	movs	r3, r0
   17528:	002a      	movs	r2, r5
   1752a:	3b0b      	subs	r3, #11
   1752c:	409a      	lsls	r2, r3
   1752e:	2500      	movs	r5, #0
   17530:	e7e3      	b.n	174fa <__aeabi_f2d+0x5e>
   17532:	46c0      	nop			; (mov r8, r8)
   17534:	800fffff 	.word	0x800fffff
   17538:	00000389 	.word	0x00000389
   1753c:	000007ff 	.word	0x000007ff

00017540 <__clzsi2>:
   17540:	211c      	movs	r1, #28
   17542:	2301      	movs	r3, #1
   17544:	041b      	lsls	r3, r3, #16
   17546:	4298      	cmp	r0, r3
   17548:	d301      	bcc.n	1754e <__clzsi2+0xe>
   1754a:	0c00      	lsrs	r0, r0, #16
   1754c:	3910      	subs	r1, #16
   1754e:	0a1b      	lsrs	r3, r3, #8
   17550:	4298      	cmp	r0, r3
   17552:	d301      	bcc.n	17558 <__clzsi2+0x18>
   17554:	0a00      	lsrs	r0, r0, #8
   17556:	3908      	subs	r1, #8
   17558:	091b      	lsrs	r3, r3, #4
   1755a:	4298      	cmp	r0, r3
   1755c:	d301      	bcc.n	17562 <__clzsi2+0x22>
   1755e:	0900      	lsrs	r0, r0, #4
   17560:	3904      	subs	r1, #4
   17562:	a202      	add	r2, pc, #8	; (adr r2, 1756c <__clzsi2+0x2c>)
   17564:	5c10      	ldrb	r0, [r2, r0]
   17566:	1840      	adds	r0, r0, r1
   17568:	4770      	bx	lr
   1756a:	46c0      	nop			; (mov r8, r8)
   1756c:	02020304 	.word	0x02020304
   17570:	01010101 	.word	0x01010101
	...

0001757c <__clzdi2>:
   1757c:	b510      	push	{r4, lr}
   1757e:	2900      	cmp	r1, #0
   17580:	d103      	bne.n	1758a <__clzdi2+0xe>
   17582:	f7ff ffdd 	bl	17540 <__clzsi2>
   17586:	3020      	adds	r0, #32
   17588:	e002      	b.n	17590 <__clzdi2+0x14>
   1758a:	1c08      	adds	r0, r1, #0
   1758c:	f7ff ffd8 	bl	17540 <__clzsi2>
   17590:	bd10      	pop	{r4, pc}
   17592:	46c0      	nop			; (mov r8, r8)

00017594 <atoi>:
   17594:	b510      	push	{r4, lr}
   17596:	220a      	movs	r2, #10
   17598:	2100      	movs	r1, #0
   1759a:	f000 fb7d 	bl	17c98 <strtol>
   1759e:	bd10      	pop	{r4, pc}

000175a0 <__libc_init_array>:
   175a0:	b570      	push	{r4, r5, r6, lr}
   175a2:	4e0d      	ldr	r6, [pc, #52]	; (175d8 <__libc_init_array+0x38>)
   175a4:	4d0d      	ldr	r5, [pc, #52]	; (175dc <__libc_init_array+0x3c>)
   175a6:	2400      	movs	r4, #0
   175a8:	1bad      	subs	r5, r5, r6
   175aa:	10ad      	asrs	r5, r5, #2
   175ac:	d005      	beq.n	175ba <__libc_init_array+0x1a>
   175ae:	00a3      	lsls	r3, r4, #2
   175b0:	58f3      	ldr	r3, [r6, r3]
   175b2:	3401      	adds	r4, #1
   175b4:	4798      	blx	r3
   175b6:	42a5      	cmp	r5, r4
   175b8:	d1f9      	bne.n	175ae <__libc_init_array+0xe>
   175ba:	f007 f837 	bl	1e62c <_init>
   175be:	4e08      	ldr	r6, [pc, #32]	; (175e0 <__libc_init_array+0x40>)
   175c0:	4d08      	ldr	r5, [pc, #32]	; (175e4 <__libc_init_array+0x44>)
   175c2:	2400      	movs	r4, #0
   175c4:	1bad      	subs	r5, r5, r6
   175c6:	10ad      	asrs	r5, r5, #2
   175c8:	d005      	beq.n	175d6 <__libc_init_array+0x36>
   175ca:	00a3      	lsls	r3, r4, #2
   175cc:	58f3      	ldr	r3, [r6, r3]
   175ce:	3401      	adds	r4, #1
   175d0:	4798      	blx	r3
   175d2:	42a5      	cmp	r5, r4
   175d4:	d1f9      	bne.n	175ca <__libc_init_array+0x2a>
   175d6:	bd70      	pop	{r4, r5, r6, pc}
   175d8:	0001e638 	.word	0x0001e638
   175dc:	0001e638 	.word	0x0001e638
   175e0:	0001e638 	.word	0x0001e638
   175e4:	0001e640 	.word	0x0001e640

000175e8 <__itoa>:
   175e8:	1e93      	subs	r3, r2, #2
   175ea:	b510      	push	{r4, lr}
   175ec:	000c      	movs	r4, r1
   175ee:	2b22      	cmp	r3, #34	; 0x22
   175f0:	d80e      	bhi.n	17610 <__itoa+0x28>
   175f2:	2a0a      	cmp	r2, #10
   175f4:	d005      	beq.n	17602 <__itoa+0x1a>
   175f6:	2100      	movs	r1, #0
   175f8:	1861      	adds	r1, r4, r1
   175fa:	f000 fc1f 	bl	17e3c <__utoa>
   175fe:	0020      	movs	r0, r4
   17600:	bd10      	pop	{r4, pc}
   17602:	2800      	cmp	r0, #0
   17604:	daf7      	bge.n	175f6 <__itoa+0xe>
   17606:	232d      	movs	r3, #45	; 0x2d
   17608:	4240      	negs	r0, r0
   1760a:	700b      	strb	r3, [r1, #0]
   1760c:	2101      	movs	r1, #1
   1760e:	e7f3      	b.n	175f8 <__itoa+0x10>
   17610:	2300      	movs	r3, #0
   17612:	2000      	movs	r0, #0
   17614:	700b      	strb	r3, [r1, #0]
   17616:	e7f3      	b.n	17600 <__itoa+0x18>

00017618 <itoa>:
   17618:	b510      	push	{r4, lr}
   1761a:	f7ff ffe5 	bl	175e8 <__itoa>
   1761e:	bd10      	pop	{r4, pc}

00017620 <__locale_mb_cur_max>:
   17620:	4b05      	ldr	r3, [pc, #20]	; (17638 <__locale_mb_cur_max+0x18>)
   17622:	681b      	ldr	r3, [r3, #0]
   17624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17626:	2b00      	cmp	r3, #0
   17628:	d003      	beq.n	17632 <__locale_mb_cur_max+0x12>
   1762a:	2294      	movs	r2, #148	; 0x94
   1762c:	0052      	lsls	r2, r2, #1
   1762e:	5c98      	ldrb	r0, [r3, r2]
   17630:	4770      	bx	lr
   17632:	4b02      	ldr	r3, [pc, #8]	; (1763c <__locale_mb_cur_max+0x1c>)
   17634:	e7f9      	b.n	1762a <__locale_mb_cur_max+0xa>
   17636:	46c0      	nop			; (mov r8, r8)
   17638:	20000018 	.word	0x20000018
   1763c:	20000448 	.word	0x20000448

00017640 <__locale_ctype_ptr_l>:
   17640:	23ec      	movs	r3, #236	; 0xec
   17642:	58c0      	ldr	r0, [r0, r3]
   17644:	4770      	bx	lr
   17646:	46c0      	nop			; (mov r8, r8)

00017648 <__locale_ctype_ptr>:
   17648:	4b04      	ldr	r3, [pc, #16]	; (1765c <__locale_ctype_ptr+0x14>)
   1764a:	681b      	ldr	r3, [r3, #0]
   1764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1764e:	2b00      	cmp	r3, #0
   17650:	d002      	beq.n	17658 <__locale_ctype_ptr+0x10>
   17652:	22ec      	movs	r2, #236	; 0xec
   17654:	5898      	ldr	r0, [r3, r2]
   17656:	4770      	bx	lr
   17658:	4b01      	ldr	r3, [pc, #4]	; (17660 <__locale_ctype_ptr+0x18>)
   1765a:	e7fa      	b.n	17652 <__locale_ctype_ptr+0xa>
   1765c:	20000018 	.word	0x20000018
   17660:	20000448 	.word	0x20000448

00017664 <__ascii_mbtowc>:
   17664:	b082      	sub	sp, #8
   17666:	2900      	cmp	r1, #0
   17668:	d00a      	beq.n	17680 <__ascii_mbtowc+0x1c>
   1766a:	2a00      	cmp	r2, #0
   1766c:	d00b      	beq.n	17686 <__ascii_mbtowc+0x22>
   1766e:	2b00      	cmp	r3, #0
   17670:	d00b      	beq.n	1768a <__ascii_mbtowc+0x26>
   17672:	7813      	ldrb	r3, [r2, #0]
   17674:	600b      	str	r3, [r1, #0]
   17676:	7810      	ldrb	r0, [r2, #0]
   17678:	1e43      	subs	r3, r0, #1
   1767a:	4198      	sbcs	r0, r3
   1767c:	b002      	add	sp, #8
   1767e:	4770      	bx	lr
   17680:	a901      	add	r1, sp, #4
   17682:	2a00      	cmp	r2, #0
   17684:	d1f3      	bne.n	1766e <__ascii_mbtowc+0xa>
   17686:	2000      	movs	r0, #0
   17688:	e7f8      	b.n	1767c <__ascii_mbtowc+0x18>
   1768a:	2002      	movs	r0, #2
   1768c:	4240      	negs	r0, r0
   1768e:	e7f5      	b.n	1767c <__ascii_mbtowc+0x18>

00017690 <memcpy>:
   17690:	b5f0      	push	{r4, r5, r6, r7, lr}
   17692:	0005      	movs	r5, r0
   17694:	2a0f      	cmp	r2, #15
   17696:	d92f      	bls.n	176f8 <memcpy+0x68>
   17698:	000b      	movs	r3, r1
   1769a:	4303      	orrs	r3, r0
   1769c:	079b      	lsls	r3, r3, #30
   1769e:	d134      	bne.n	1770a <memcpy+0x7a>
   176a0:	0016      	movs	r6, r2
   176a2:	000c      	movs	r4, r1
   176a4:	0003      	movs	r3, r0
   176a6:	3e10      	subs	r6, #16
   176a8:	0935      	lsrs	r5, r6, #4
   176aa:	3501      	adds	r5, #1
   176ac:	012d      	lsls	r5, r5, #4
   176ae:	1945      	adds	r5, r0, r5
   176b0:	6827      	ldr	r7, [r4, #0]
   176b2:	601f      	str	r7, [r3, #0]
   176b4:	6867      	ldr	r7, [r4, #4]
   176b6:	605f      	str	r7, [r3, #4]
   176b8:	68a7      	ldr	r7, [r4, #8]
   176ba:	609f      	str	r7, [r3, #8]
   176bc:	68e7      	ldr	r7, [r4, #12]
   176be:	3410      	adds	r4, #16
   176c0:	60df      	str	r7, [r3, #12]
   176c2:	3310      	adds	r3, #16
   176c4:	429d      	cmp	r5, r3
   176c6:	d1f3      	bne.n	176b0 <memcpy+0x20>
   176c8:	230f      	movs	r3, #15
   176ca:	439e      	bics	r6, r3
   176cc:	3610      	adds	r6, #16
   176ce:	1985      	adds	r5, r0, r6
   176d0:	1989      	adds	r1, r1, r6
   176d2:	4013      	ands	r3, r2
   176d4:	2b03      	cmp	r3, #3
   176d6:	d91a      	bls.n	1770e <memcpy+0x7e>
   176d8:	1f1e      	subs	r6, r3, #4
   176da:	2300      	movs	r3, #0
   176dc:	08b4      	lsrs	r4, r6, #2
   176de:	3401      	adds	r4, #1
   176e0:	00a4      	lsls	r4, r4, #2
   176e2:	58cf      	ldr	r7, [r1, r3]
   176e4:	50ef      	str	r7, [r5, r3]
   176e6:	3304      	adds	r3, #4
   176e8:	42a3      	cmp	r3, r4
   176ea:	d1fa      	bne.n	176e2 <memcpy+0x52>
   176ec:	2403      	movs	r4, #3
   176ee:	43a6      	bics	r6, r4
   176f0:	1d33      	adds	r3, r6, #4
   176f2:	4022      	ands	r2, r4
   176f4:	18c9      	adds	r1, r1, r3
   176f6:	18ed      	adds	r5, r5, r3
   176f8:	2a00      	cmp	r2, #0
   176fa:	d005      	beq.n	17708 <memcpy+0x78>
   176fc:	2300      	movs	r3, #0
   176fe:	5ccc      	ldrb	r4, [r1, r3]
   17700:	54ec      	strb	r4, [r5, r3]
   17702:	3301      	adds	r3, #1
   17704:	4293      	cmp	r3, r2
   17706:	d1fa      	bne.n	176fe <memcpy+0x6e>
   17708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1770a:	0005      	movs	r5, r0
   1770c:	e7f6      	b.n	176fc <memcpy+0x6c>
   1770e:	001a      	movs	r2, r3
   17710:	e7f2      	b.n	176f8 <memcpy+0x68>
   17712:	46c0      	nop			; (mov r8, r8)

00017714 <memset>:
   17714:	b5f0      	push	{r4, r5, r6, r7, lr}
   17716:	0783      	lsls	r3, r0, #30
   17718:	d043      	beq.n	177a2 <memset+0x8e>
   1771a:	1e54      	subs	r4, r2, #1
   1771c:	2a00      	cmp	r2, #0
   1771e:	d03f      	beq.n	177a0 <memset+0x8c>
   17720:	b2ce      	uxtb	r6, r1
   17722:	0002      	movs	r2, r0
   17724:	2503      	movs	r5, #3
   17726:	e002      	b.n	1772e <memset+0x1a>
   17728:	001a      	movs	r2, r3
   1772a:	3c01      	subs	r4, #1
   1772c:	d338      	bcc.n	177a0 <memset+0x8c>
   1772e:	1c53      	adds	r3, r2, #1
   17730:	7016      	strb	r6, [r2, #0]
   17732:	422b      	tst	r3, r5
   17734:	d1f8      	bne.n	17728 <memset+0x14>
   17736:	2c03      	cmp	r4, #3
   17738:	d92a      	bls.n	17790 <memset+0x7c>
   1773a:	22ff      	movs	r2, #255	; 0xff
   1773c:	400a      	ands	r2, r1
   1773e:	0215      	lsls	r5, r2, #8
   17740:	4315      	orrs	r5, r2
   17742:	042a      	lsls	r2, r5, #16
   17744:	4315      	orrs	r5, r2
   17746:	2c0f      	cmp	r4, #15
   17748:	d914      	bls.n	17774 <memset+0x60>
   1774a:	0027      	movs	r7, r4
   1774c:	001a      	movs	r2, r3
   1774e:	3f10      	subs	r7, #16
   17750:	093e      	lsrs	r6, r7, #4
   17752:	3601      	adds	r6, #1
   17754:	0136      	lsls	r6, r6, #4
   17756:	199e      	adds	r6, r3, r6
   17758:	6015      	str	r5, [r2, #0]
   1775a:	6055      	str	r5, [r2, #4]
   1775c:	6095      	str	r5, [r2, #8]
   1775e:	60d5      	str	r5, [r2, #12]
   17760:	3210      	adds	r2, #16
   17762:	4296      	cmp	r6, r2
   17764:	d1f8      	bne.n	17758 <memset+0x44>
   17766:	220f      	movs	r2, #15
   17768:	4397      	bics	r7, r2
   1776a:	3710      	adds	r7, #16
   1776c:	19db      	adds	r3, r3, r7
   1776e:	4014      	ands	r4, r2
   17770:	2c03      	cmp	r4, #3
   17772:	d90d      	bls.n	17790 <memset+0x7c>
   17774:	001a      	movs	r2, r3
   17776:	1f27      	subs	r7, r4, #4
   17778:	08be      	lsrs	r6, r7, #2
   1777a:	3601      	adds	r6, #1
   1777c:	00b6      	lsls	r6, r6, #2
   1777e:	199e      	adds	r6, r3, r6
   17780:	c220      	stmia	r2!, {r5}
   17782:	42b2      	cmp	r2, r6
   17784:	d1fc      	bne.n	17780 <memset+0x6c>
   17786:	2203      	movs	r2, #3
   17788:	4397      	bics	r7, r2
   1778a:	3704      	adds	r7, #4
   1778c:	19db      	adds	r3, r3, r7
   1778e:	4014      	ands	r4, r2
   17790:	2c00      	cmp	r4, #0
   17792:	d005      	beq.n	177a0 <memset+0x8c>
   17794:	b2c9      	uxtb	r1, r1
   17796:	191c      	adds	r4, r3, r4
   17798:	7019      	strb	r1, [r3, #0]
   1779a:	3301      	adds	r3, #1
   1779c:	429c      	cmp	r4, r3
   1779e:	d1fb      	bne.n	17798 <memset+0x84>
   177a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177a2:	0014      	movs	r4, r2
   177a4:	0003      	movs	r3, r0
   177a6:	e7c6      	b.n	17736 <memset+0x22>

000177a8 <printf>:
   177a8:	b40f      	push	{r0, r1, r2, r3}
   177aa:	b500      	push	{lr}
   177ac:	4906      	ldr	r1, [pc, #24]	; (177c8 <printf+0x20>)
   177ae:	b083      	sub	sp, #12
   177b0:	ab04      	add	r3, sp, #16
   177b2:	6808      	ldr	r0, [r1, #0]
   177b4:	cb04      	ldmia	r3!, {r2}
   177b6:	6881      	ldr	r1, [r0, #8]
   177b8:	9301      	str	r3, [sp, #4]
   177ba:	f000 fb89 	bl	17ed0 <_vfprintf_r>
   177be:	b003      	add	sp, #12
   177c0:	bc08      	pop	{r3}
   177c2:	b004      	add	sp, #16
   177c4:	4718      	bx	r3
   177c6:	46c0      	nop			; (mov r8, r8)
   177c8:	20000018 	.word	0x20000018

000177cc <_puts_r>:
   177cc:	b530      	push	{r4, r5, lr}
   177ce:	0004      	movs	r4, r0
   177d0:	b089      	sub	sp, #36	; 0x24
   177d2:	0008      	movs	r0, r1
   177d4:	000d      	movs	r5, r1
   177d6:	f000 f995 	bl	17b04 <strlen>
   177da:	ab04      	add	r3, sp, #16
   177dc:	4a21      	ldr	r2, [pc, #132]	; (17864 <_puts_r+0x98>)
   177de:	9301      	str	r3, [sp, #4]
   177e0:	2302      	movs	r3, #2
   177e2:	9206      	str	r2, [sp, #24]
   177e4:	2201      	movs	r2, #1
   177e6:	9302      	str	r3, [sp, #8]
   177e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   177ea:	9005      	str	r0, [sp, #20]
   177ec:	3001      	adds	r0, #1
   177ee:	9504      	str	r5, [sp, #16]
   177f0:	9207      	str	r2, [sp, #28]
   177f2:	9003      	str	r0, [sp, #12]
   177f4:	68a5      	ldr	r5, [r4, #8]
   177f6:	2b00      	cmp	r3, #0
   177f8:	d02f      	beq.n	1785a <_puts_r+0x8e>
   177fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   177fc:	07db      	lsls	r3, r3, #31
   177fe:	d424      	bmi.n	1784a <_puts_r+0x7e>
   17800:	230c      	movs	r3, #12
   17802:	5eea      	ldrsh	r2, [r5, r3]
   17804:	b291      	uxth	r1, r2
   17806:	058b      	lsls	r3, r1, #22
   17808:	d51c      	bpl.n	17844 <_puts_r+0x78>
   1780a:	2380      	movs	r3, #128	; 0x80
   1780c:	019b      	lsls	r3, r3, #6
   1780e:	4219      	tst	r1, r3
   17810:	d105      	bne.n	1781e <_puts_r+0x52>
   17812:	4313      	orrs	r3, r2
   17814:	81ab      	strh	r3, [r5, #12]
   17816:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   17818:	4b13      	ldr	r3, [pc, #76]	; (17868 <_puts_r+0x9c>)
   1781a:	4013      	ands	r3, r2
   1781c:	666b      	str	r3, [r5, #100]	; 0x64
   1781e:	0020      	movs	r0, r4
   17820:	aa01      	add	r2, sp, #4
   17822:	0029      	movs	r1, r5
   17824:	f003 fa88 	bl	1ad38 <__sfvwrite_r>
   17828:	1e44      	subs	r4, r0, #1
   1782a:	41a0      	sbcs	r0, r4
   1782c:	4244      	negs	r4, r0
   1782e:	200a      	movs	r0, #10
   17830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   17832:	4304      	orrs	r4, r0
   17834:	07db      	lsls	r3, r3, #31
   17836:	d402      	bmi.n	1783e <_puts_r+0x72>
   17838:	89ab      	ldrh	r3, [r5, #12]
   1783a:	059b      	lsls	r3, r3, #22
   1783c:	d509      	bpl.n	17852 <_puts_r+0x86>
   1783e:	0020      	movs	r0, r4
   17840:	b009      	add	sp, #36	; 0x24
   17842:	bd30      	pop	{r4, r5, pc}
   17844:	6da8      	ldr	r0, [r5, #88]	; 0x58
   17846:	f003 fc31 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1784a:	230c      	movs	r3, #12
   1784c:	5eea      	ldrsh	r2, [r5, r3]
   1784e:	b291      	uxth	r1, r2
   17850:	e7db      	b.n	1780a <_puts_r+0x3e>
   17852:	6da8      	ldr	r0, [r5, #88]	; 0x58
   17854:	f003 fc2c 	bl	1b0b0 <__retarget_lock_release_recursive>
   17858:	e7f1      	b.n	1783e <_puts_r+0x72>
   1785a:	0020      	movs	r0, r4
   1785c:	f003 f8e4 	bl	1aa28 <__sinit>
   17860:	e7cb      	b.n	177fa <_puts_r+0x2e>
   17862:	46c0      	nop			; (mov r8, r8)
   17864:	0001e22c 	.word	0x0001e22c
   17868:	ffffdfff 	.word	0xffffdfff

0001786c <puts>:
   1786c:	b510      	push	{r4, lr}
   1786e:	4b03      	ldr	r3, [pc, #12]	; (1787c <puts+0x10>)
   17870:	0001      	movs	r1, r0
   17872:	6818      	ldr	r0, [r3, #0]
   17874:	f7ff ffaa 	bl	177cc <_puts_r>
   17878:	bd10      	pop	{r4, pc}
   1787a:	46c0      	nop			; (mov r8, r8)
   1787c:	20000018 	.word	0x20000018

00017880 <srand>:
   17880:	2200      	movs	r2, #0
   17882:	4b03      	ldr	r3, [pc, #12]	; (17890 <srand+0x10>)
   17884:	681b      	ldr	r3, [r3, #0]
   17886:	33a8      	adds	r3, #168	; 0xa8
   17888:	6018      	str	r0, [r3, #0]
   1788a:	605a      	str	r2, [r3, #4]
   1788c:	4770      	bx	lr
   1788e:	46c0      	nop			; (mov r8, r8)
   17890:	20000018 	.word	0x20000018

00017894 <rand>:
   17894:	b510      	push	{r4, lr}
   17896:	4b09      	ldr	r3, [pc, #36]	; (178bc <rand+0x28>)
   17898:	4a09      	ldr	r2, [pc, #36]	; (178c0 <rand+0x2c>)
   1789a:	681c      	ldr	r4, [r3, #0]
   1789c:	4b09      	ldr	r3, [pc, #36]	; (178c4 <rand+0x30>)
   1789e:	34a8      	adds	r4, #168	; 0xa8
   178a0:	6820      	ldr	r0, [r4, #0]
   178a2:	6861      	ldr	r1, [r4, #4]
   178a4:	f7fd f83e 	bl	14924 <__aeabi_lmul>
   178a8:	2201      	movs	r2, #1
   178aa:	2300      	movs	r3, #0
   178ac:	1880      	adds	r0, r0, r2
   178ae:	4159      	adcs	r1, r3
   178b0:	6020      	str	r0, [r4, #0]
   178b2:	6061      	str	r1, [r4, #4]
   178b4:	0048      	lsls	r0, r1, #1
   178b6:	0840      	lsrs	r0, r0, #1
   178b8:	bd10      	pop	{r4, pc}
   178ba:	46c0      	nop			; (mov r8, r8)
   178bc:	20000018 	.word	0x20000018
   178c0:	4c957f2d 	.word	0x4c957f2d
   178c4:	5851f42d 	.word	0x5851f42d

000178c8 <setbuf>:
   178c8:	424a      	negs	r2, r1
   178ca:	414a      	adcs	r2, r1
   178cc:	2380      	movs	r3, #128	; 0x80
   178ce:	b510      	push	{r4, lr}
   178d0:	0052      	lsls	r2, r2, #1
   178d2:	00db      	lsls	r3, r3, #3
   178d4:	f000 f802 	bl	178dc <setvbuf>
   178d8:	bd10      	pop	{r4, pc}
   178da:	46c0      	nop			; (mov r8, r8)

000178dc <setvbuf>:
   178dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   178de:	4647      	mov	r7, r8
   178e0:	46ce      	mov	lr, r9
   178e2:	b580      	push	{r7, lr}
   178e4:	001f      	movs	r7, r3
   178e6:	4b63      	ldr	r3, [pc, #396]	; (17a74 <setvbuf+0x198>)
   178e8:	b083      	sub	sp, #12
   178ea:	681d      	ldr	r5, [r3, #0]
   178ec:	0004      	movs	r4, r0
   178ee:	4688      	mov	r8, r1
   178f0:	0016      	movs	r6, r2
   178f2:	2d00      	cmp	r5, #0
   178f4:	d002      	beq.n	178fc <setvbuf+0x20>
   178f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   178f8:	2b00      	cmp	r3, #0
   178fa:	d066      	beq.n	179ca <setvbuf+0xee>
   178fc:	2e02      	cmp	r6, #2
   178fe:	d005      	beq.n	1790c <setvbuf+0x30>
   17900:	2e01      	cmp	r6, #1
   17902:	d900      	bls.n	17906 <setvbuf+0x2a>
   17904:	e0a1      	b.n	17a4a <setvbuf+0x16e>
   17906:	2f00      	cmp	r7, #0
   17908:	da00      	bge.n	1790c <setvbuf+0x30>
   1790a:	e09e      	b.n	17a4a <setvbuf+0x16e>
   1790c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1790e:	07db      	lsls	r3, r3, #31
   17910:	d533      	bpl.n	1797a <setvbuf+0x9e>
   17912:	0021      	movs	r1, r4
   17914:	0028      	movs	r0, r5
   17916:	f003 f82d 	bl	1a974 <_fflush_r>
   1791a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1791c:	2900      	cmp	r1, #0
   1791e:	d008      	beq.n	17932 <setvbuf+0x56>
   17920:	0023      	movs	r3, r4
   17922:	3340      	adds	r3, #64	; 0x40
   17924:	4299      	cmp	r1, r3
   17926:	d002      	beq.n	1792e <setvbuf+0x52>
   17928:	0028      	movs	r0, r5
   1792a:	f003 f927 	bl	1ab7c <_free_r>
   1792e:	2300      	movs	r3, #0
   17930:	6323      	str	r3, [r4, #48]	; 0x30
   17932:	2300      	movs	r3, #0
   17934:	61a3      	str	r3, [r4, #24]
   17936:	6063      	str	r3, [r4, #4]
   17938:	220c      	movs	r2, #12
   1793a:	5ea3      	ldrsh	r3, [r4, r2]
   1793c:	061a      	lsls	r2, r3, #24
   1793e:	d43d      	bmi.n	179bc <setvbuf+0xe0>
   17940:	4a4d      	ldr	r2, [pc, #308]	; (17a78 <setvbuf+0x19c>)
   17942:	4013      	ands	r3, r2
   17944:	81a3      	strh	r3, [r4, #12]
   17946:	2e02      	cmp	r6, #2
   17948:	d01e      	beq.n	17988 <setvbuf+0xac>
   1794a:	ab01      	add	r3, sp, #4
   1794c:	466a      	mov	r2, sp
   1794e:	0021      	movs	r1, r4
   17950:	0028      	movs	r0, r5
   17952:	f003 fbaf 	bl	1b0b4 <__swhatbuf_r>
   17956:	89a3      	ldrh	r3, [r4, #12]
   17958:	4318      	orrs	r0, r3
   1795a:	81a0      	strh	r0, [r4, #12]
   1795c:	2f00      	cmp	r7, #0
   1795e:	d138      	bne.n	179d2 <setvbuf+0xf6>
   17960:	9f00      	ldr	r7, [sp, #0]
   17962:	0038      	movs	r0, r7
   17964:	f003 fc1e 	bl	1b1a4 <malloc>
   17968:	4680      	mov	r8, r0
   1796a:	2800      	cmp	r0, #0
   1796c:	d100      	bne.n	17970 <setvbuf+0x94>
   1796e:	e06f      	b.n	17a50 <setvbuf+0x174>
   17970:	2280      	movs	r2, #128	; 0x80
   17972:	89a3      	ldrh	r3, [r4, #12]
   17974:	4313      	orrs	r3, r2
   17976:	81a3      	strh	r3, [r4, #12]
   17978:	e02e      	b.n	179d8 <setvbuf+0xfc>
   1797a:	89a3      	ldrh	r3, [r4, #12]
   1797c:	059b      	lsls	r3, r3, #22
   1797e:	d4c8      	bmi.n	17912 <setvbuf+0x36>
   17980:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17982:	f003 fb93 	bl	1b0ac <__retarget_lock_acquire_recursive>
   17986:	e7c4      	b.n	17912 <setvbuf+0x36>
   17988:	2500      	movs	r5, #0
   1798a:	2202      	movs	r2, #2
   1798c:	4313      	orrs	r3, r2
   1798e:	2200      	movs	r2, #0
   17990:	60a2      	str	r2, [r4, #8]
   17992:	0022      	movs	r2, r4
   17994:	3243      	adds	r2, #67	; 0x43
   17996:	6022      	str	r2, [r4, #0]
   17998:	6122      	str	r2, [r4, #16]
   1799a:	2201      	movs	r2, #1
   1799c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1799e:	81a3      	strh	r3, [r4, #12]
   179a0:	6162      	str	r2, [r4, #20]
   179a2:	4211      	tst	r1, r2
   179a4:	d104      	bne.n	179b0 <setvbuf+0xd4>
   179a6:	059b      	lsls	r3, r3, #22
   179a8:	d402      	bmi.n	179b0 <setvbuf+0xd4>
   179aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   179ac:	f003 fb80 	bl	1b0b0 <__retarget_lock_release_recursive>
   179b0:	0028      	movs	r0, r5
   179b2:	b003      	add	sp, #12
   179b4:	bc0c      	pop	{r2, r3}
   179b6:	4690      	mov	r8, r2
   179b8:	4699      	mov	r9, r3
   179ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179bc:	6921      	ldr	r1, [r4, #16]
   179be:	0028      	movs	r0, r5
   179c0:	f003 f8dc 	bl	1ab7c <_free_r>
   179c4:	220c      	movs	r2, #12
   179c6:	5ea3      	ldrsh	r3, [r4, r2]
   179c8:	e7ba      	b.n	17940 <setvbuf+0x64>
   179ca:	0028      	movs	r0, r5
   179cc:	f003 f82c 	bl	1aa28 <__sinit>
   179d0:	e794      	b.n	178fc <setvbuf+0x20>
   179d2:	4643      	mov	r3, r8
   179d4:	2b00      	cmp	r3, #0
   179d6:	d0c4      	beq.n	17962 <setvbuf+0x86>
   179d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   179da:	2b00      	cmp	r3, #0
   179dc:	d027      	beq.n	17a2e <setvbuf+0x152>
   179de:	9b00      	ldr	r3, [sp, #0]
   179e0:	429f      	cmp	r7, r3
   179e2:	d02a      	beq.n	17a3a <setvbuf+0x15e>
   179e4:	2380      	movs	r3, #128	; 0x80
   179e6:	89a2      	ldrh	r2, [r4, #12]
   179e8:	011b      	lsls	r3, r3, #4
   179ea:	4313      	orrs	r3, r2
   179ec:	b21b      	sxth	r3, r3
   179ee:	81a3      	strh	r3, [r4, #12]
   179f0:	2e01      	cmp	r6, #1
   179f2:	d026      	beq.n	17a42 <setvbuf+0x166>
   179f4:	4642      	mov	r2, r8
   179f6:	6022      	str	r2, [r4, #0]
   179f8:	6122      	str	r2, [r4, #16]
   179fa:	2208      	movs	r2, #8
   179fc:	b29b      	uxth	r3, r3
   179fe:	6167      	str	r7, [r4, #20]
   17a00:	401a      	ands	r2, r3
   17a02:	d00b      	beq.n	17a1c <setvbuf+0x140>
   17a04:	07da      	lsls	r2, r3, #31
   17a06:	d510      	bpl.n	17a2a <setvbuf+0x14e>
   17a08:	2200      	movs	r2, #0
   17a0a:	2501      	movs	r5, #1
   17a0c:	60a2      	str	r2, [r4, #8]
   17a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   17a10:	427f      	negs	r7, r7
   17a12:	61a7      	str	r7, [r4, #24]
   17a14:	4015      	ands	r5, r2
   17a16:	d0c6      	beq.n	179a6 <setvbuf+0xca>
   17a18:	2500      	movs	r5, #0
   17a1a:	e7c9      	b.n	179b0 <setvbuf+0xd4>
   17a1c:	60a2      	str	r2, [r4, #8]
   17a1e:	2501      	movs	r5, #1
   17a20:	6e62      	ldr	r2, [r4, #100]	; 0x64
   17a22:	4015      	ands	r5, r2
   17a24:	d0bf      	beq.n	179a6 <setvbuf+0xca>
   17a26:	2500      	movs	r5, #0
   17a28:	e7c2      	b.n	179b0 <setvbuf+0xd4>
   17a2a:	60a7      	str	r7, [r4, #8]
   17a2c:	e7f7      	b.n	17a1e <setvbuf+0x142>
   17a2e:	0028      	movs	r0, r5
   17a30:	f002 fffa 	bl	1aa28 <__sinit>
   17a34:	9b00      	ldr	r3, [sp, #0]
   17a36:	429f      	cmp	r7, r3
   17a38:	d1d4      	bne.n	179e4 <setvbuf+0x108>
   17a3a:	220c      	movs	r2, #12
   17a3c:	5ea3      	ldrsh	r3, [r4, r2]
   17a3e:	2e01      	cmp	r6, #1
   17a40:	d1d8      	bne.n	179f4 <setvbuf+0x118>
   17a42:	2201      	movs	r2, #1
   17a44:	4313      	orrs	r3, r2
   17a46:	81a3      	strh	r3, [r4, #12]
   17a48:	e7d4      	b.n	179f4 <setvbuf+0x118>
   17a4a:	2501      	movs	r5, #1
   17a4c:	426d      	negs	r5, r5
   17a4e:	e7af      	b.n	179b0 <setvbuf+0xd4>
   17a50:	9b00      	ldr	r3, [sp, #0]
   17a52:	4699      	mov	r9, r3
   17a54:	42bb      	cmp	r3, r7
   17a56:	d005      	beq.n	17a64 <setvbuf+0x188>
   17a58:	0018      	movs	r0, r3
   17a5a:	f003 fba3 	bl	1b1a4 <malloc>
   17a5e:	4680      	mov	r8, r0
   17a60:	2800      	cmp	r0, #0
   17a62:	d104      	bne.n	17a6e <setvbuf+0x192>
   17a64:	2501      	movs	r5, #1
   17a66:	220c      	movs	r2, #12
   17a68:	5ea3      	ldrsh	r3, [r4, r2]
   17a6a:	426d      	negs	r5, r5
   17a6c:	e78d      	b.n	1798a <setvbuf+0xae>
   17a6e:	464f      	mov	r7, r9
   17a70:	e77e      	b.n	17970 <setvbuf+0x94>
   17a72:	46c0      	nop			; (mov r8, r8)
   17a74:	20000018 	.word	0x20000018
   17a78:	fffff35c 	.word	0xfffff35c

00017a7c <strcmp>:
   17a7c:	4602      	mov	r2, r0
   17a7e:	b570      	push	{r4, r5, r6, lr}
   17a80:	430a      	orrs	r2, r1
   17a82:	0792      	lsls	r2, r2, #30
   17a84:	d12a      	bne.n	17adc <strcmp+0x60>
   17a86:	4d1e      	ldr	r5, [pc, #120]	; (17b00 <strcmp+0x84>)
   17a88:	01ee      	lsls	r6, r5, #7
   17a8a:	c804      	ldmia	r0!, {r2}
   17a8c:	c908      	ldmia	r1!, {r3}
   17a8e:	1b54      	subs	r4, r2, r5
   17a90:	4394      	bics	r4, r2
   17a92:	4034      	ands	r4, r6
   17a94:	d017      	beq.n	17ac6 <strcmp+0x4a>
   17a96:	b2d0      	uxtb	r0, r2
   17a98:	b2d9      	uxtb	r1, r3
   17a9a:	1a40      	subs	r0, r0, r1
   17a9c:	0621      	lsls	r1, r4, #24
   17a9e:	4301      	orrs	r1, r0
   17aa0:	d110      	bne.n	17ac4 <strcmp+0x48>
   17aa2:	b290      	uxth	r0, r2
   17aa4:	b299      	uxth	r1, r3
   17aa6:	1a40      	subs	r0, r0, r1
   17aa8:	0421      	lsls	r1, r4, #16
   17aaa:	4301      	orrs	r1, r0
   17aac:	d10a      	bne.n	17ac4 <strcmp+0x48>
   17aae:	0210      	lsls	r0, r2, #8
   17ab0:	0219      	lsls	r1, r3, #8
   17ab2:	0a00      	lsrs	r0, r0, #8
   17ab4:	0a09      	lsrs	r1, r1, #8
   17ab6:	1a40      	subs	r0, r0, r1
   17ab8:	0221      	lsls	r1, r4, #8
   17aba:	4301      	orrs	r1, r0
   17abc:	d102      	bne.n	17ac4 <strcmp+0x48>
   17abe:	0e10      	lsrs	r0, r2, #24
   17ac0:	0e19      	lsrs	r1, r3, #24
   17ac2:	1a40      	subs	r0, r0, r1
   17ac4:	bd70      	pop	{r4, r5, r6, pc}
   17ac6:	429a      	cmp	r2, r3
   17ac8:	d0df      	beq.n	17a8a <strcmp+0xe>
   17aca:	ba10      	rev	r0, r2
   17acc:	ba19      	rev	r1, r3
   17ace:	4288      	cmp	r0, r1
   17ad0:	d901      	bls.n	17ad6 <strcmp+0x5a>
   17ad2:	2001      	movs	r0, #1
   17ad4:	bd70      	pop	{r4, r5, r6, pc}
   17ad6:	2000      	movs	r0, #0
   17ad8:	43c0      	mvns	r0, r0
   17ada:	bd70      	pop	{r4, r5, r6, pc}
   17adc:	7802      	ldrb	r2, [r0, #0]
   17ade:	780b      	ldrb	r3, [r1, #0]
   17ae0:	3001      	adds	r0, #1
   17ae2:	3101      	adds	r1, #1
   17ae4:	2a00      	cmp	r2, #0
   17ae6:	d009      	beq.n	17afc <strcmp+0x80>
   17ae8:	429a      	cmp	r2, r3
   17aea:	d107      	bne.n	17afc <strcmp+0x80>
   17aec:	7802      	ldrb	r2, [r0, #0]
   17aee:	780b      	ldrb	r3, [r1, #0]
   17af0:	3001      	adds	r0, #1
   17af2:	3101      	adds	r1, #1
   17af4:	2a00      	cmp	r2, #0
   17af6:	d001      	beq.n	17afc <strcmp+0x80>
   17af8:	429a      	cmp	r2, r3
   17afa:	d0ef      	beq.n	17adc <strcmp+0x60>
   17afc:	1ad0      	subs	r0, r2, r3
   17afe:	bd70      	pop	{r4, r5, r6, pc}
   17b00:	01010101 	.word	0x01010101

00017b04 <strlen>:
   17b04:	b510      	push	{r4, lr}
   17b06:	0783      	lsls	r3, r0, #30
   17b08:	d025      	beq.n	17b56 <strlen+0x52>
   17b0a:	7803      	ldrb	r3, [r0, #0]
   17b0c:	2b00      	cmp	r3, #0
   17b0e:	d024      	beq.n	17b5a <strlen+0x56>
   17b10:	0003      	movs	r3, r0
   17b12:	2103      	movs	r1, #3
   17b14:	e002      	b.n	17b1c <strlen+0x18>
   17b16:	781a      	ldrb	r2, [r3, #0]
   17b18:	2a00      	cmp	r2, #0
   17b1a:	d01a      	beq.n	17b52 <strlen+0x4e>
   17b1c:	3301      	adds	r3, #1
   17b1e:	420b      	tst	r3, r1
   17b20:	d1f9      	bne.n	17b16 <strlen+0x12>
   17b22:	6819      	ldr	r1, [r3, #0]
   17b24:	4a0e      	ldr	r2, [pc, #56]	; (17b60 <strlen+0x5c>)
   17b26:	4c0f      	ldr	r4, [pc, #60]	; (17b64 <strlen+0x60>)
   17b28:	188a      	adds	r2, r1, r2
   17b2a:	438a      	bics	r2, r1
   17b2c:	4222      	tst	r2, r4
   17b2e:	d106      	bne.n	17b3e <strlen+0x3a>
   17b30:	3304      	adds	r3, #4
   17b32:	6819      	ldr	r1, [r3, #0]
   17b34:	4a0a      	ldr	r2, [pc, #40]	; (17b60 <strlen+0x5c>)
   17b36:	188a      	adds	r2, r1, r2
   17b38:	438a      	bics	r2, r1
   17b3a:	4222      	tst	r2, r4
   17b3c:	d0f8      	beq.n	17b30 <strlen+0x2c>
   17b3e:	001a      	movs	r2, r3
   17b40:	781b      	ldrb	r3, [r3, #0]
   17b42:	2b00      	cmp	r3, #0
   17b44:	d003      	beq.n	17b4e <strlen+0x4a>
   17b46:	3201      	adds	r2, #1
   17b48:	7811      	ldrb	r1, [r2, #0]
   17b4a:	2900      	cmp	r1, #0
   17b4c:	d1fb      	bne.n	17b46 <strlen+0x42>
   17b4e:	1a10      	subs	r0, r2, r0
   17b50:	bd10      	pop	{r4, pc}
   17b52:	1a18      	subs	r0, r3, r0
   17b54:	e7fc      	b.n	17b50 <strlen+0x4c>
   17b56:	0003      	movs	r3, r0
   17b58:	e7e3      	b.n	17b22 <strlen+0x1e>
   17b5a:	2000      	movs	r0, #0
   17b5c:	e7f8      	b.n	17b50 <strlen+0x4c>
   17b5e:	46c0      	nop			; (mov r8, r8)
   17b60:	fefefeff 	.word	0xfefefeff
   17b64:	80808080 	.word	0x80808080

00017b68 <_strtol_l.isra.0>:
   17b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b6a:	4657      	mov	r7, sl
   17b6c:	464e      	mov	r6, r9
   17b6e:	46de      	mov	lr, fp
   17b70:	4645      	mov	r5, r8
   17b72:	b5e0      	push	{r5, r6, r7, lr}
   17b74:	001e      	movs	r6, r3
   17b76:	2308      	movs	r3, #8
   17b78:	b083      	sub	sp, #12
   17b7a:	9001      	str	r0, [sp, #4]
   17b7c:	9100      	str	r1, [sp, #0]
   17b7e:	4692      	mov	sl, r2
   17b80:	000f      	movs	r7, r1
   17b82:	4699      	mov	r9, r3
   17b84:	e000      	b.n	17b88 <_strtol_l.isra.0+0x20>
   17b86:	002f      	movs	r7, r5
   17b88:	980c      	ldr	r0, [sp, #48]	; 0x30
   17b8a:	783c      	ldrb	r4, [r7, #0]
   17b8c:	f7ff fd58 	bl	17640 <__locale_ctype_ptr_l>
   17b90:	464a      	mov	r2, r9
   17b92:	1900      	adds	r0, r0, r4
   17b94:	7843      	ldrb	r3, [r0, #1]
   17b96:	1c7d      	adds	r5, r7, #1
   17b98:	421a      	tst	r2, r3
   17b9a:	d1f4      	bne.n	17b86 <_strtol_l.isra.0+0x1e>
   17b9c:	2c2d      	cmp	r4, #45	; 0x2d
   17b9e:	d04f      	beq.n	17c40 <_strtol_l.isra.0+0xd8>
   17ba0:	2300      	movs	r3, #0
   17ba2:	4698      	mov	r8, r3
   17ba4:	2c2b      	cmp	r4, #43	; 0x2b
   17ba6:	d05c      	beq.n	17c62 <_strtol_l.isra.0+0xfa>
   17ba8:	2e00      	cmp	r6, #0
   17baa:	d003      	beq.n	17bb4 <_strtol_l.isra.0+0x4c>
   17bac:	2e10      	cmp	r6, #16
   17bae:	d05b      	beq.n	17c68 <_strtol_l.isra.0+0x100>
   17bb0:	0037      	movs	r7, r6
   17bb2:	e003      	b.n	17bbc <_strtol_l.isra.0+0x54>
   17bb4:	2c30      	cmp	r4, #48	; 0x30
   17bb6:	d063      	beq.n	17c80 <_strtol_l.isra.0+0x118>
   17bb8:	270a      	movs	r7, #10
   17bba:	260a      	movs	r6, #10
   17bbc:	4b35      	ldr	r3, [pc, #212]	; (17c94 <_strtol_l.isra.0+0x12c>)
   17bbe:	0039      	movs	r1, r7
   17bc0:	4443      	add	r3, r8
   17bc2:	0018      	movs	r0, r3
   17bc4:	4699      	mov	r9, r3
   17bc6:	f7fc fd25 	bl	14614 <__aeabi_uidivmod>
   17bca:	4648      	mov	r0, r9
   17bcc:	468b      	mov	fp, r1
   17bce:	0039      	movs	r1, r7
   17bd0:	f7fc fc9a 	bl	14508 <__udivsi3>
   17bd4:	2200      	movs	r2, #0
   17bd6:	0001      	movs	r1, r0
   17bd8:	2000      	movs	r0, #0
   17bda:	0023      	movs	r3, r4
   17bdc:	3b30      	subs	r3, #48	; 0x30
   17bde:	2b09      	cmp	r3, #9
   17be0:	d907      	bls.n	17bf2 <_strtol_l.isra.0+0x8a>
   17be2:	3b11      	subs	r3, #17
   17be4:	2b19      	cmp	r3, #25
   17be6:	d903      	bls.n	17bf0 <_strtol_l.isra.0+0x88>
   17be8:	0023      	movs	r3, r4
   17bea:	3b61      	subs	r3, #97	; 0x61
   17bec:	2b19      	cmp	r3, #25
   17bee:	d80d      	bhi.n	17c0c <_strtol_l.isra.0+0xa4>
   17bf0:	330a      	adds	r3, #10
   17bf2:	429e      	cmp	r6, r3
   17bf4:	dd0a      	ble.n	17c0c <_strtol_l.isra.0+0xa4>
   17bf6:	1c54      	adds	r4, r2, #1
   17bf8:	d005      	beq.n	17c06 <_strtol_l.isra.0+0x9e>
   17bfa:	4281      	cmp	r1, r0
   17bfc:	d31d      	bcc.n	17c3a <_strtol_l.isra.0+0xd2>
   17bfe:	d01a      	beq.n	17c36 <_strtol_l.isra.0+0xce>
   17c00:	2201      	movs	r2, #1
   17c02:	4378      	muls	r0, r7
   17c04:	1818      	adds	r0, r3, r0
   17c06:	782c      	ldrb	r4, [r5, #0]
   17c08:	3501      	adds	r5, #1
   17c0a:	e7e6      	b.n	17bda <_strtol_l.isra.0+0x72>
   17c0c:	1c53      	adds	r3, r2, #1
   17c0e:	d01c      	beq.n	17c4a <_strtol_l.isra.0+0xe2>
   17c10:	4643      	mov	r3, r8
   17c12:	2b00      	cmp	r3, #0
   17c14:	d000      	beq.n	17c18 <_strtol_l.isra.0+0xb0>
   17c16:	4240      	negs	r0, r0
   17c18:	4653      	mov	r3, sl
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d004      	beq.n	17c28 <_strtol_l.isra.0+0xc0>
   17c1e:	9b00      	ldr	r3, [sp, #0]
   17c20:	2a00      	cmp	r2, #0
   17c22:	d11c      	bne.n	17c5e <_strtol_l.isra.0+0xf6>
   17c24:	4652      	mov	r2, sl
   17c26:	6013      	str	r3, [r2, #0]
   17c28:	b003      	add	sp, #12
   17c2a:	bc3c      	pop	{r2, r3, r4, r5}
   17c2c:	4690      	mov	r8, r2
   17c2e:	4699      	mov	r9, r3
   17c30:	46a2      	mov	sl, r4
   17c32:	46ab      	mov	fp, r5
   17c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c36:	459b      	cmp	fp, r3
   17c38:	dae2      	bge.n	17c00 <_strtol_l.isra.0+0x98>
   17c3a:	2201      	movs	r2, #1
   17c3c:	4252      	negs	r2, r2
   17c3e:	e7e2      	b.n	17c06 <_strtol_l.isra.0+0x9e>
   17c40:	2301      	movs	r3, #1
   17c42:	782c      	ldrb	r4, [r5, #0]
   17c44:	4698      	mov	r8, r3
   17c46:	1cbd      	adds	r5, r7, #2
   17c48:	e7ae      	b.n	17ba8 <_strtol_l.isra.0+0x40>
   17c4a:	2322      	movs	r3, #34	; 0x22
   17c4c:	9a01      	ldr	r2, [sp, #4]
   17c4e:	4648      	mov	r0, r9
   17c50:	6013      	str	r3, [r2, #0]
   17c52:	4653      	mov	r3, sl
   17c54:	2b00      	cmp	r3, #0
   17c56:	d0e7      	beq.n	17c28 <_strtol_l.isra.0+0xc0>
   17c58:	1e6b      	subs	r3, r5, #1
   17c5a:	4648      	mov	r0, r9
   17c5c:	e7e2      	b.n	17c24 <_strtol_l.isra.0+0xbc>
   17c5e:	4681      	mov	r9, r0
   17c60:	e7fa      	b.n	17c58 <_strtol_l.isra.0+0xf0>
   17c62:	782c      	ldrb	r4, [r5, #0]
   17c64:	1cbd      	adds	r5, r7, #2
   17c66:	e79f      	b.n	17ba8 <_strtol_l.isra.0+0x40>
   17c68:	2c30      	cmp	r4, #48	; 0x30
   17c6a:	d111      	bne.n	17c90 <_strtol_l.isra.0+0x128>
   17c6c:	2220      	movs	r2, #32
   17c6e:	782b      	ldrb	r3, [r5, #0]
   17c70:	4393      	bics	r3, r2
   17c72:	2b58      	cmp	r3, #88	; 0x58
   17c74:	d10c      	bne.n	17c90 <_strtol_l.isra.0+0x128>
   17c76:	786c      	ldrb	r4, [r5, #1]
   17c78:	2710      	movs	r7, #16
   17c7a:	3502      	adds	r5, #2
   17c7c:	2610      	movs	r6, #16
   17c7e:	e79d      	b.n	17bbc <_strtol_l.isra.0+0x54>
   17c80:	2220      	movs	r2, #32
   17c82:	782b      	ldrb	r3, [r5, #0]
   17c84:	4393      	bics	r3, r2
   17c86:	2b58      	cmp	r3, #88	; 0x58
   17c88:	d0f5      	beq.n	17c76 <_strtol_l.isra.0+0x10e>
   17c8a:	2708      	movs	r7, #8
   17c8c:	2608      	movs	r6, #8
   17c8e:	e795      	b.n	17bbc <_strtol_l.isra.0+0x54>
   17c90:	2710      	movs	r7, #16
   17c92:	e793      	b.n	17bbc <_strtol_l.isra.0+0x54>
   17c94:	7fffffff 	.word	0x7fffffff

00017c98 <strtol>:
   17c98:	0013      	movs	r3, r2
   17c9a:	4a08      	ldr	r2, [pc, #32]	; (17cbc <strtol+0x24>)
   17c9c:	b530      	push	{r4, r5, lr}
   17c9e:	0005      	movs	r5, r0
   17ca0:	6810      	ldr	r0, [r2, #0]
   17ca2:	b083      	sub	sp, #12
   17ca4:	6b44      	ldr	r4, [r0, #52]	; 0x34
   17ca6:	2c00      	cmp	r4, #0
   17ca8:	d006      	beq.n	17cb8 <strtol+0x20>
   17caa:	000a      	movs	r2, r1
   17cac:	9400      	str	r4, [sp, #0]
   17cae:	0029      	movs	r1, r5
   17cb0:	f7ff ff5a 	bl	17b68 <_strtol_l.isra.0>
   17cb4:	b003      	add	sp, #12
   17cb6:	bd30      	pop	{r4, r5, pc}
   17cb8:	4c01      	ldr	r4, [pc, #4]	; (17cc0 <strtol+0x28>)
   17cba:	e7f6      	b.n	17caa <strtol+0x12>
   17cbc:	20000018 	.word	0x20000018
   17cc0:	20000448 	.word	0x20000448

00017cc4 <_strtoul_l.isra.0>:
   17cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17cc6:	4657      	mov	r7, sl
   17cc8:	464e      	mov	r6, r9
   17cca:	46de      	mov	lr, fp
   17ccc:	4645      	mov	r5, r8
   17cce:	b5e0      	push	{r5, r6, r7, lr}
   17cd0:	001e      	movs	r6, r3
   17cd2:	2308      	movs	r3, #8
   17cd4:	b083      	sub	sp, #12
   17cd6:	4683      	mov	fp, r0
   17cd8:	4689      	mov	r9, r1
   17cda:	4692      	mov	sl, r2
   17cdc:	000f      	movs	r7, r1
   17cde:	4698      	mov	r8, r3
   17ce0:	e000      	b.n	17ce4 <_strtoul_l.isra.0+0x20>
   17ce2:	002f      	movs	r7, r5
   17ce4:	980c      	ldr	r0, [sp, #48]	; 0x30
   17ce6:	783c      	ldrb	r4, [r7, #0]
   17ce8:	f7ff fcaa 	bl	17640 <__locale_ctype_ptr_l>
   17cec:	4642      	mov	r2, r8
   17cee:	1900      	adds	r0, r0, r4
   17cf0:	7843      	ldrb	r3, [r0, #1]
   17cf2:	1c7d      	adds	r5, r7, #1
   17cf4:	421a      	tst	r2, r3
   17cf6:	d1f4      	bne.n	17ce2 <_strtoul_l.isra.0+0x1e>
   17cf8:	2c2d      	cmp	r4, #45	; 0x2d
   17cfa:	d05b      	beq.n	17db4 <_strtoul_l.isra.0+0xf0>
   17cfc:	2300      	movs	r3, #0
   17cfe:	9301      	str	r3, [sp, #4]
   17d00:	2c2b      	cmp	r4, #43	; 0x2b
   17d02:	d05c      	beq.n	17dbe <_strtoul_l.isra.0+0xfa>
   17d04:	2e00      	cmp	r6, #0
   17d06:	d00e      	beq.n	17d26 <_strtoul_l.isra.0+0x62>
   17d08:	2e10      	cmp	r6, #16
   17d0a:	d05b      	beq.n	17dc4 <_strtoul_l.isra.0+0x100>
   17d0c:	2001      	movs	r0, #1
   17d0e:	0031      	movs	r1, r6
   17d10:	4240      	negs	r0, r0
   17d12:	f7fc fbf9 	bl	14508 <__udivsi3>
   17d16:	0007      	movs	r7, r0
   17d18:	2001      	movs	r0, #1
   17d1a:	0031      	movs	r1, r6
   17d1c:	4240      	negs	r0, r0
   17d1e:	46b0      	mov	r8, r6
   17d20:	f7fc fc78 	bl	14614 <__aeabi_uidivmod>
   17d24:	e006      	b.n	17d34 <_strtoul_l.isra.0+0x70>
   17d26:	2c30      	cmp	r4, #48	; 0x30
   17d28:	d05b      	beq.n	17de2 <_strtoul_l.isra.0+0x11e>
   17d2a:	230a      	movs	r3, #10
   17d2c:	2105      	movs	r1, #5
   17d2e:	4698      	mov	r8, r3
   17d30:	260a      	movs	r6, #10
   17d32:	4f34      	ldr	r7, [pc, #208]	; (17e04 <_strtoul_l.isra.0+0x140>)
   17d34:	2200      	movs	r2, #0
   17d36:	2000      	movs	r0, #0
   17d38:	0023      	movs	r3, r4
   17d3a:	3b30      	subs	r3, #48	; 0x30
   17d3c:	2b09      	cmp	r3, #9
   17d3e:	d907      	bls.n	17d50 <_strtoul_l.isra.0+0x8c>
   17d40:	3b11      	subs	r3, #17
   17d42:	2b19      	cmp	r3, #25
   17d44:	d903      	bls.n	17d4e <_strtoul_l.isra.0+0x8a>
   17d46:	0023      	movs	r3, r4
   17d48:	3b61      	subs	r3, #97	; 0x61
   17d4a:	2b19      	cmp	r3, #25
   17d4c:	d80e      	bhi.n	17d6c <_strtoul_l.isra.0+0xa8>
   17d4e:	330a      	adds	r3, #10
   17d50:	429e      	cmp	r6, r3
   17d52:	dd0b      	ble.n	17d6c <_strtoul_l.isra.0+0xa8>
   17d54:	2a00      	cmp	r2, #0
   17d56:	db20      	blt.n	17d9a <_strtoul_l.isra.0+0xd6>
   17d58:	42b8      	cmp	r0, r7
   17d5a:	d81e      	bhi.n	17d9a <_strtoul_l.isra.0+0xd6>
   17d5c:	d01b      	beq.n	17d96 <_strtoul_l.isra.0+0xd2>
   17d5e:	4642      	mov	r2, r8
   17d60:	4350      	muls	r0, r2
   17d62:	2201      	movs	r2, #1
   17d64:	1818      	adds	r0, r3, r0
   17d66:	782c      	ldrb	r4, [r5, #0]
   17d68:	3501      	adds	r5, #1
   17d6a:	e7e5      	b.n	17d38 <_strtoul_l.isra.0+0x74>
   17d6c:	2a00      	cmp	r2, #0
   17d6e:	db17      	blt.n	17da0 <_strtoul_l.isra.0+0xdc>
   17d70:	9b01      	ldr	r3, [sp, #4]
   17d72:	2b00      	cmp	r3, #0
   17d74:	d000      	beq.n	17d78 <_strtoul_l.isra.0+0xb4>
   17d76:	4240      	negs	r0, r0
   17d78:	4653      	mov	r3, sl
   17d7a:	2b00      	cmp	r3, #0
   17d7c:	d004      	beq.n	17d88 <_strtoul_l.isra.0+0xc4>
   17d7e:	464b      	mov	r3, r9
   17d80:	2a00      	cmp	r2, #0
   17d82:	d115      	bne.n	17db0 <_strtoul_l.isra.0+0xec>
   17d84:	4652      	mov	r2, sl
   17d86:	6013      	str	r3, [r2, #0]
   17d88:	b003      	add	sp, #12
   17d8a:	bc3c      	pop	{r2, r3, r4, r5}
   17d8c:	4690      	mov	r8, r2
   17d8e:	4699      	mov	r9, r3
   17d90:	46a2      	mov	sl, r4
   17d92:	46ab      	mov	fp, r5
   17d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d96:	428b      	cmp	r3, r1
   17d98:	dde1      	ble.n	17d5e <_strtoul_l.isra.0+0x9a>
   17d9a:	2201      	movs	r2, #1
   17d9c:	4252      	negs	r2, r2
   17d9e:	e7e2      	b.n	17d66 <_strtoul_l.isra.0+0xa2>
   17da0:	2322      	movs	r3, #34	; 0x22
   17da2:	465a      	mov	r2, fp
   17da4:	2001      	movs	r0, #1
   17da6:	6013      	str	r3, [r2, #0]
   17da8:	4653      	mov	r3, sl
   17daa:	4240      	negs	r0, r0
   17dac:	2b00      	cmp	r3, #0
   17dae:	d0eb      	beq.n	17d88 <_strtoul_l.isra.0+0xc4>
   17db0:	1e6b      	subs	r3, r5, #1
   17db2:	e7e7      	b.n	17d84 <_strtoul_l.isra.0+0xc0>
   17db4:	2301      	movs	r3, #1
   17db6:	782c      	ldrb	r4, [r5, #0]
   17db8:	9301      	str	r3, [sp, #4]
   17dba:	1cbd      	adds	r5, r7, #2
   17dbc:	e7a2      	b.n	17d04 <_strtoul_l.isra.0+0x40>
   17dbe:	782c      	ldrb	r4, [r5, #0]
   17dc0:	1cbd      	adds	r5, r7, #2
   17dc2:	e79f      	b.n	17d04 <_strtoul_l.isra.0+0x40>
   17dc4:	2c30      	cmp	r4, #48	; 0x30
   17dc6:	d117      	bne.n	17df8 <_strtoul_l.isra.0+0x134>
   17dc8:	2220      	movs	r2, #32
   17dca:	782b      	ldrb	r3, [r5, #0]
   17dcc:	4393      	bics	r3, r2
   17dce:	2b58      	cmp	r3, #88	; 0x58
   17dd0:	d112      	bne.n	17df8 <_strtoul_l.isra.0+0x134>
   17dd2:	2310      	movs	r3, #16
   17dd4:	786c      	ldrb	r4, [r5, #1]
   17dd6:	210f      	movs	r1, #15
   17dd8:	3502      	adds	r5, #2
   17dda:	4f0b      	ldr	r7, [pc, #44]	; (17e08 <_strtoul_l.isra.0+0x144>)
   17ddc:	4698      	mov	r8, r3
   17dde:	2610      	movs	r6, #16
   17de0:	e7a8      	b.n	17d34 <_strtoul_l.isra.0+0x70>
   17de2:	2220      	movs	r2, #32
   17de4:	782b      	ldrb	r3, [r5, #0]
   17de6:	4393      	bics	r3, r2
   17de8:	2b58      	cmp	r3, #88	; 0x58
   17dea:	d0f2      	beq.n	17dd2 <_strtoul_l.isra.0+0x10e>
   17dec:	2308      	movs	r3, #8
   17dee:	2107      	movs	r1, #7
   17df0:	4f06      	ldr	r7, [pc, #24]	; (17e0c <_strtoul_l.isra.0+0x148>)
   17df2:	4698      	mov	r8, r3
   17df4:	2608      	movs	r6, #8
   17df6:	e79d      	b.n	17d34 <_strtoul_l.isra.0+0x70>
   17df8:	2310      	movs	r3, #16
   17dfa:	210f      	movs	r1, #15
   17dfc:	4f02      	ldr	r7, [pc, #8]	; (17e08 <_strtoul_l.isra.0+0x144>)
   17dfe:	4698      	mov	r8, r3
   17e00:	e798      	b.n	17d34 <_strtoul_l.isra.0+0x70>
   17e02:	46c0      	nop			; (mov r8, r8)
   17e04:	19999999 	.word	0x19999999
   17e08:	0fffffff 	.word	0x0fffffff
   17e0c:	1fffffff 	.word	0x1fffffff

00017e10 <strtoul>:
   17e10:	0013      	movs	r3, r2
   17e12:	4a08      	ldr	r2, [pc, #32]	; (17e34 <strtoul+0x24>)
   17e14:	b530      	push	{r4, r5, lr}
   17e16:	0005      	movs	r5, r0
   17e18:	6810      	ldr	r0, [r2, #0]
   17e1a:	b083      	sub	sp, #12
   17e1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
   17e1e:	2c00      	cmp	r4, #0
   17e20:	d006      	beq.n	17e30 <strtoul+0x20>
   17e22:	000a      	movs	r2, r1
   17e24:	9400      	str	r4, [sp, #0]
   17e26:	0029      	movs	r1, r5
   17e28:	f7ff ff4c 	bl	17cc4 <_strtoul_l.isra.0>
   17e2c:	b003      	add	sp, #12
   17e2e:	bd30      	pop	{r4, r5, pc}
   17e30:	4c01      	ldr	r4, [pc, #4]	; (17e38 <strtoul+0x28>)
   17e32:	e7f6      	b.n	17e22 <strtoul+0x12>
   17e34:	20000018 	.word	0x20000018
   17e38:	20000448 	.word	0x20000448

00017e3c <__utoa>:
   17e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e3e:	4646      	mov	r6, r8
   17e40:	46d6      	mov	lr, sl
   17e42:	464f      	mov	r7, r9
   17e44:	b5c0      	push	{r6, r7, lr}
   17e46:	b08a      	sub	sp, #40	; 0x28
   17e48:	4690      	mov	r8, r2
   17e4a:	466a      	mov	r2, sp
   17e4c:	4b1d      	ldr	r3, [pc, #116]	; (17ec4 <__utoa+0x88>)
   17e4e:	000d      	movs	r5, r1
   17e50:	0006      	movs	r6, r0
   17e52:	cb13      	ldmia	r3!, {r0, r1, r4}
   17e54:	c213      	stmia	r2!, {r0, r1, r4}
   17e56:	cb13      	ldmia	r3!, {r0, r1, r4}
   17e58:	c213      	stmia	r2!, {r0, r1, r4}
   17e5a:	cb13      	ldmia	r3!, {r0, r1, r4}
   17e5c:	c213      	stmia	r2!, {r0, r1, r4}
   17e5e:	781b      	ldrb	r3, [r3, #0]
   17e60:	46ea      	mov	sl, sp
   17e62:	7013      	strb	r3, [r2, #0]
   17e64:	4643      	mov	r3, r8
   17e66:	3b02      	subs	r3, #2
   17e68:	002f      	movs	r7, r5
   17e6a:	2400      	movs	r4, #0
   17e6c:	2b22      	cmp	r3, #34	; 0x22
   17e6e:	d901      	bls.n	17e74 <__utoa+0x38>
   17e70:	e024      	b.n	17ebc <__utoa+0x80>
   17e72:	464c      	mov	r4, r9
   17e74:	1c63      	adds	r3, r4, #1
   17e76:	0030      	movs	r0, r6
   17e78:	4641      	mov	r1, r8
   17e7a:	4699      	mov	r9, r3
   17e7c:	f7fc fbca 	bl	14614 <__aeabi_uidivmod>
   17e80:	4653      	mov	r3, sl
   17e82:	5c5b      	ldrb	r3, [r3, r1]
   17e84:	0030      	movs	r0, r6
   17e86:	703b      	strb	r3, [r7, #0]
   17e88:	4641      	mov	r1, r8
   17e8a:	f7fc fb3d 	bl	14508 <__udivsi3>
   17e8e:	3701      	adds	r7, #1
   17e90:	1e06      	subs	r6, r0, #0
   17e92:	d1ee      	bne.n	17e72 <__utoa+0x36>
   17e94:	464b      	mov	r3, r9
   17e96:	54e8      	strb	r0, [r5, r3]
   17e98:	2300      	movs	r3, #0
   17e9a:	2c00      	cmp	r4, #0
   17e9c:	d007      	beq.n	17eae <__utoa+0x72>
   17e9e:	5cea      	ldrb	r2, [r5, r3]
   17ea0:	5d29      	ldrb	r1, [r5, r4]
   17ea2:	54e9      	strb	r1, [r5, r3]
   17ea4:	552a      	strb	r2, [r5, r4]
   17ea6:	3301      	adds	r3, #1
   17ea8:	3c01      	subs	r4, #1
   17eaa:	42a3      	cmp	r3, r4
   17eac:	dbf7      	blt.n	17e9e <__utoa+0x62>
   17eae:	0028      	movs	r0, r5
   17eb0:	b00a      	add	sp, #40	; 0x28
   17eb2:	bc1c      	pop	{r2, r3, r4}
   17eb4:	4690      	mov	r8, r2
   17eb6:	4699      	mov	r9, r3
   17eb8:	46a2      	mov	sl, r4
   17eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ebc:	702c      	strb	r4, [r5, #0]
   17ebe:	2000      	movs	r0, #0
   17ec0:	e7f6      	b.n	17eb0 <__utoa+0x74>
   17ec2:	46c0      	nop			; (mov r8, r8)
   17ec4:	0001e230 	.word	0x0001e230

00017ec8 <utoa>:
   17ec8:	b510      	push	{r4, lr}
   17eca:	f7ff ffb7 	bl	17e3c <__utoa>
   17ece:	bd10      	pop	{r4, pc}

00017ed0 <_vfprintf_r>:
   17ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ed2:	46de      	mov	lr, fp
   17ed4:	464e      	mov	r6, r9
   17ed6:	4645      	mov	r5, r8
   17ed8:	4657      	mov	r7, sl
   17eda:	b5e0      	push	{r5, r6, r7, lr}
   17edc:	b0c3      	sub	sp, #268	; 0x10c
   17ede:	4689      	mov	r9, r1
   17ee0:	0014      	movs	r4, r2
   17ee2:	001d      	movs	r5, r3
   17ee4:	930f      	str	r3, [sp, #60]	; 0x3c
   17ee6:	0006      	movs	r6, r0
   17ee8:	9006      	str	r0, [sp, #24]
   17eea:	f003 f8cd 	bl	1b088 <_localeconv_r>
   17eee:	6803      	ldr	r3, [r0, #0]
   17ef0:	0018      	movs	r0, r3
   17ef2:	9318      	str	r3, [sp, #96]	; 0x60
   17ef4:	f7ff fe06 	bl	17b04 <strlen>
   17ef8:	9017      	str	r0, [sp, #92]	; 0x5c
   17efa:	2e00      	cmp	r6, #0
   17efc:	d004      	beq.n	17f08 <_vfprintf_r+0x38>
   17efe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   17f00:	9307      	str	r3, [sp, #28]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d100      	bne.n	17f08 <_vfprintf_r+0x38>
   17f06:	e0a7      	b.n	18058 <_vfprintf_r+0x188>
   17f08:	464b      	mov	r3, r9
   17f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17f0c:	07db      	lsls	r3, r3, #31
   17f0e:	d478      	bmi.n	18002 <_vfprintf_r+0x132>
   17f10:	464b      	mov	r3, r9
   17f12:	210c      	movs	r1, #12
   17f14:	5e59      	ldrsh	r1, [r3, r1]
   17f16:	b28b      	uxth	r3, r1
   17f18:	059a      	lsls	r2, r3, #22
   17f1a:	d56e      	bpl.n	17ffa <_vfprintf_r+0x12a>
   17f1c:	2280      	movs	r2, #128	; 0x80
   17f1e:	0192      	lsls	r2, r2, #6
   17f20:	4213      	tst	r3, r2
   17f22:	d109      	bne.n	17f38 <_vfprintf_r+0x68>
   17f24:	430a      	orrs	r2, r1
   17f26:	464b      	mov	r3, r9
   17f28:	4649      	mov	r1, r9
   17f2a:	819a      	strh	r2, [r3, #12]
   17f2c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   17f2e:	4bcc      	ldr	r3, [pc, #816]	; (18260 <_vfprintf_r+0x390>)
   17f30:	400b      	ands	r3, r1
   17f32:	4649      	mov	r1, r9
   17f34:	664b      	str	r3, [r1, #100]	; 0x64
   17f36:	b293      	uxth	r3, r2
   17f38:	071a      	lsls	r2, r3, #28
   17f3a:	d567      	bpl.n	1800c <_vfprintf_r+0x13c>
   17f3c:	464a      	mov	r2, r9
   17f3e:	6912      	ldr	r2, [r2, #16]
   17f40:	2a00      	cmp	r2, #0
   17f42:	d063      	beq.n	1800c <_vfprintf_r+0x13c>
   17f44:	221a      	movs	r2, #26
   17f46:	401a      	ands	r2, r3
   17f48:	2a0a      	cmp	r2, #10
   17f4a:	d100      	bne.n	17f4e <_vfprintf_r+0x7e>
   17f4c:	e088      	b.n	18060 <_vfprintf_r+0x190>
   17f4e:	ab32      	add	r3, sp, #200	; 0xc8
   17f50:	9325      	str	r3, [sp, #148]	; 0x94
   17f52:	2300      	movs	r3, #0
   17f54:	46cb      	mov	fp, r9
   17f56:	af25      	add	r7, sp, #148	; 0x94
   17f58:	60bb      	str	r3, [r7, #8]
   17f5a:	607b      	str	r3, [r7, #4]
   17f5c:	9407      	str	r4, [sp, #28]
   17f5e:	9314      	str	r3, [sp, #80]	; 0x50
   17f60:	9316      	str	r3, [sp, #88]	; 0x58
   17f62:	9315      	str	r3, [sp, #84]	; 0x54
   17f64:	ae32      	add	r6, sp, #200	; 0xc8
   17f66:	9319      	str	r3, [sp, #100]	; 0x64
   17f68:	931a      	str	r3, [sp, #104]	; 0x68
   17f6a:	930a      	str	r3, [sp, #40]	; 0x28
   17f6c:	9c07      	ldr	r4, [sp, #28]
   17f6e:	7823      	ldrb	r3, [r4, #0]
   17f70:	2b00      	cmp	r3, #0
   17f72:	d101      	bne.n	17f78 <_vfprintf_r+0xa8>
   17f74:	f000 fd9e 	bl	18ab4 <_vfprintf_r+0xbe4>
   17f78:	2b25      	cmp	r3, #37	; 0x25
   17f7a:	d103      	bne.n	17f84 <_vfprintf_r+0xb4>
   17f7c:	f000 fd9a 	bl	18ab4 <_vfprintf_r+0xbe4>
   17f80:	2b25      	cmp	r3, #37	; 0x25
   17f82:	d003      	beq.n	17f8c <_vfprintf_r+0xbc>
   17f84:	3401      	adds	r4, #1
   17f86:	7823      	ldrb	r3, [r4, #0]
   17f88:	2b00      	cmp	r3, #0
   17f8a:	d1f9      	bne.n	17f80 <_vfprintf_r+0xb0>
   17f8c:	9b07      	ldr	r3, [sp, #28]
   17f8e:	1ae5      	subs	r5, r4, r3
   17f90:	d010      	beq.n	17fb4 <_vfprintf_r+0xe4>
   17f92:	9b07      	ldr	r3, [sp, #28]
   17f94:	6075      	str	r5, [r6, #4]
   17f96:	6033      	str	r3, [r6, #0]
   17f98:	68bb      	ldr	r3, [r7, #8]
   17f9a:	195b      	adds	r3, r3, r5
   17f9c:	60bb      	str	r3, [r7, #8]
   17f9e:	687b      	ldr	r3, [r7, #4]
   17fa0:	3301      	adds	r3, #1
   17fa2:	607b      	str	r3, [r7, #4]
   17fa4:	2b07      	cmp	r3, #7
   17fa6:	dc4c      	bgt.n	18042 <_vfprintf_r+0x172>
   17fa8:	3608      	adds	r6, #8
   17faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17fac:	469c      	mov	ip, r3
   17fae:	44ac      	add	ip, r5
   17fb0:	4663      	mov	r3, ip
   17fb2:	930a      	str	r3, [sp, #40]	; 0x28
   17fb4:	7823      	ldrb	r3, [r4, #0]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	d101      	bne.n	17fbe <_vfprintf_r+0xee>
   17fba:	f000 fc99 	bl	188f0 <_vfprintf_r+0xa20>
   17fbe:	1c63      	adds	r3, r4, #1
   17fc0:	9307      	str	r3, [sp, #28]
   17fc2:	2300      	movs	r3, #0
   17fc4:	aa16      	add	r2, sp, #88	; 0x58
   17fc6:	77d3      	strb	r3, [r2, #31]
   17fc8:	2201      	movs	r2, #1
   17fca:	4252      	negs	r2, r2
   17fcc:	4692      	mov	sl, r2
   17fce:	2200      	movs	r2, #0
   17fd0:	920b      	str	r2, [sp, #44]	; 0x2c
   17fd2:	3220      	adds	r2, #32
   17fd4:	4691      	mov	r9, r2
   17fd6:	3220      	adds	r2, #32
   17fd8:	7863      	ldrb	r3, [r4, #1]
   17fda:	2100      	movs	r1, #0
   17fdc:	2000      	movs	r0, #0
   17fde:	2400      	movs	r4, #0
   17fe0:	4694      	mov	ip, r2
   17fe2:	9a07      	ldr	r2, [sp, #28]
   17fe4:	3201      	adds	r2, #1
   17fe6:	9207      	str	r2, [sp, #28]
   17fe8:	001a      	movs	r2, r3
   17fea:	3a20      	subs	r2, #32
   17fec:	2a58      	cmp	r2, #88	; 0x58
   17fee:	d900      	bls.n	17ff2 <_vfprintf_r+0x122>
   17ff0:	e2e7      	b.n	185c2 <_vfprintf_r+0x6f2>
   17ff2:	4d9c      	ldr	r5, [pc, #624]	; (18264 <_vfprintf_r+0x394>)
   17ff4:	0092      	lsls	r2, r2, #2
   17ff6:	58aa      	ldr	r2, [r5, r2]
   17ff8:	4697      	mov	pc, r2
   17ffa:	464b      	mov	r3, r9
   17ffc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   17ffe:	f003 f855 	bl	1b0ac <__retarget_lock_acquire_recursive>
   18002:	464b      	mov	r3, r9
   18004:	210c      	movs	r1, #12
   18006:	5e59      	ldrsh	r1, [r3, r1]
   18008:	b28b      	uxth	r3, r1
   1800a:	e787      	b.n	17f1c <_vfprintf_r+0x4c>
   1800c:	4649      	mov	r1, r9
   1800e:	9806      	ldr	r0, [sp, #24]
   18010:	f001 fb1c 	bl	1964c <__swsetup_r>
   18014:	464b      	mov	r3, r9
   18016:	2800      	cmp	r0, #0
   18018:	d03a      	beq.n	18090 <_vfprintf_r+0x1c0>
   1801a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1801c:	07db      	lsls	r3, r3, #31
   1801e:	d405      	bmi.n	1802c <_vfprintf_r+0x15c>
   18020:	464b      	mov	r3, r9
   18022:	899b      	ldrh	r3, [r3, #12]
   18024:	059b      	lsls	r3, r3, #22
   18026:	d401      	bmi.n	1802c <_vfprintf_r+0x15c>
   18028:	f000 ffcf 	bl	18fca <_vfprintf_r+0x10fa>
   1802c:	2301      	movs	r3, #1
   1802e:	425b      	negs	r3, r3
   18030:	930a      	str	r3, [sp, #40]	; 0x28
   18032:	980a      	ldr	r0, [sp, #40]	; 0x28
   18034:	b043      	add	sp, #268	; 0x10c
   18036:	bc3c      	pop	{r2, r3, r4, r5}
   18038:	4690      	mov	r8, r2
   1803a:	4699      	mov	r9, r3
   1803c:	46a2      	mov	sl, r4
   1803e:	46ab      	mov	fp, r5
   18040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18042:	003a      	movs	r2, r7
   18044:	4659      	mov	r1, fp
   18046:	9806      	ldr	r0, [sp, #24]
   18048:	f004 f9b2 	bl	1c3b0 <__sprint_r>
   1804c:	2800      	cmp	r0, #0
   1804e:	d001      	beq.n	18054 <_vfprintf_r+0x184>
   18050:	f000 fcce 	bl	189f0 <_vfprintf_r+0xb20>
   18054:	ae32      	add	r6, sp, #200	; 0xc8
   18056:	e7a8      	b.n	17faa <_vfprintf_r+0xda>
   18058:	9806      	ldr	r0, [sp, #24]
   1805a:	f002 fce5 	bl	1aa28 <__sinit>
   1805e:	e753      	b.n	17f08 <_vfprintf_r+0x38>
   18060:	464a      	mov	r2, r9
   18062:	210e      	movs	r1, #14
   18064:	5e52      	ldrsh	r2, [r2, r1]
   18066:	2a00      	cmp	r2, #0
   18068:	da00      	bge.n	1806c <_vfprintf_r+0x19c>
   1806a:	e770      	b.n	17f4e <_vfprintf_r+0x7e>
   1806c:	464a      	mov	r2, r9
   1806e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   18070:	07d2      	lsls	r2, r2, #31
   18072:	d405      	bmi.n	18080 <_vfprintf_r+0x1b0>
   18074:	059b      	lsls	r3, r3, #22
   18076:	d403      	bmi.n	18080 <_vfprintf_r+0x1b0>
   18078:	464b      	mov	r3, r9
   1807a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1807c:	f003 f818 	bl	1b0b0 <__retarget_lock_release_recursive>
   18080:	002b      	movs	r3, r5
   18082:	0022      	movs	r2, r4
   18084:	4649      	mov	r1, r9
   18086:	9806      	ldr	r0, [sp, #24]
   18088:	f001 fa8e 	bl	195a8 <__sbprintf>
   1808c:	900a      	str	r0, [sp, #40]	; 0x28
   1808e:	e7d0      	b.n	18032 <_vfprintf_r+0x162>
   18090:	899b      	ldrh	r3, [r3, #12]
   18092:	e757      	b.n	17f44 <_vfprintf_r+0x74>
   18094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18096:	920f      	str	r2, [sp, #60]	; 0x3c
   18098:	425b      	negs	r3, r3
   1809a:	930b      	str	r3, [sp, #44]	; 0x2c
   1809c:	2304      	movs	r3, #4
   1809e:	431c      	orrs	r4, r3
   180a0:	9b07      	ldr	r3, [sp, #28]
   180a2:	781b      	ldrb	r3, [r3, #0]
   180a4:	e79d      	b.n	17fe2 <_vfprintf_r+0x112>
   180a6:	9b07      	ldr	r3, [sp, #28]
   180a8:	2101      	movs	r1, #1
   180aa:	781b      	ldrb	r3, [r3, #0]
   180ac:	202b      	movs	r0, #43	; 0x2b
   180ae:	e798      	b.n	17fe2 <_vfprintf_r+0x112>
   180b0:	9b07      	ldr	r3, [sp, #28]
   180b2:	1c5a      	adds	r2, r3, #1
   180b4:	781b      	ldrb	r3, [r3, #0]
   180b6:	4690      	mov	r8, r2
   180b8:	2b2a      	cmp	r3, #42	; 0x2a
   180ba:	d101      	bne.n	180c0 <_vfprintf_r+0x1f0>
   180bc:	f001 fa38 	bl	19530 <_vfprintf_r+0x1660>
   180c0:	001a      	movs	r2, r3
   180c2:	2500      	movs	r5, #0
   180c4:	3a30      	subs	r2, #48	; 0x30
   180c6:	46aa      	mov	sl, r5
   180c8:	2a09      	cmp	r2, #9
   180ca:	d901      	bls.n	180d0 <_vfprintf_r+0x200>
   180cc:	f001 f96d 	bl	193aa <_vfprintf_r+0x14da>
   180d0:	0025      	movs	r5, r4
   180d2:	4643      	mov	r3, r8
   180d4:	4654      	mov	r4, sl
   180d6:	4688      	mov	r8, r1
   180d8:	4682      	mov	sl, r0
   180da:	00a1      	lsls	r1, r4, #2
   180dc:	190c      	adds	r4, r1, r4
   180de:	7818      	ldrb	r0, [r3, #0]
   180e0:	0064      	lsls	r4, r4, #1
   180e2:	18a4      	adds	r4, r4, r2
   180e4:	0002      	movs	r2, r0
   180e6:	1c59      	adds	r1, r3, #1
   180e8:	3a30      	subs	r2, #48	; 0x30
   180ea:	000b      	movs	r3, r1
   180ec:	2a09      	cmp	r2, #9
   180ee:	d9f4      	bls.n	180da <_vfprintf_r+0x20a>
   180f0:	9107      	str	r1, [sp, #28]
   180f2:	0003      	movs	r3, r0
   180f4:	4641      	mov	r1, r8
   180f6:	4650      	mov	r0, sl
   180f8:	46a2      	mov	sl, r4
   180fa:	002c      	movs	r4, r5
   180fc:	e774      	b.n	17fe8 <_vfprintf_r+0x118>
   180fe:	9312      	str	r3, [sp, #72]	; 0x48
   18100:	2900      	cmp	r1, #0
   18102:	d001      	beq.n	18108 <_vfprintf_r+0x238>
   18104:	f001 fa2e 	bl	19564 <_vfprintf_r+0x1694>
   18108:	4b57      	ldr	r3, [pc, #348]	; (18268 <_vfprintf_r+0x398>)
   1810a:	9319      	str	r3, [sp, #100]	; 0x64
   1810c:	06a3      	lsls	r3, r4, #26
   1810e:	d501      	bpl.n	18114 <_vfprintf_r+0x244>
   18110:	f000 fe9a 	bl	18e48 <_vfprintf_r+0xf78>
   18114:	06e3      	lsls	r3, r4, #27
   18116:	d501      	bpl.n	1811c <_vfprintf_r+0x24c>
   18118:	f000 fd9a 	bl	18c50 <_vfprintf_r+0xd80>
   1811c:	0663      	lsls	r3, r4, #25
   1811e:	d401      	bmi.n	18124 <_vfprintf_r+0x254>
   18120:	f000 fd96 	bl	18c50 <_vfprintf_r+0xd80>
   18124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18126:	881a      	ldrh	r2, [r3, #0]
   18128:	920c      	str	r2, [sp, #48]	; 0x30
   1812a:	2200      	movs	r2, #0
   1812c:	3304      	adds	r3, #4
   1812e:	920d      	str	r2, [sp, #52]	; 0x34
   18130:	930f      	str	r3, [sp, #60]	; 0x3c
   18132:	07e3      	lsls	r3, r4, #31
   18134:	d401      	bmi.n	1813a <_vfprintf_r+0x26a>
   18136:	f000 fd76 	bl	18c26 <_vfprintf_r+0xd56>
   1813a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1813c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1813e:	000b      	movs	r3, r1
   18140:	4313      	orrs	r3, r2
   18142:	001a      	movs	r2, r3
   18144:	2302      	movs	r3, #2
   18146:	2a00      	cmp	r2, #0
   18148:	d008      	beq.n	1815c <_vfprintf_r+0x28c>
   1814a:	2030      	movs	r0, #48	; 0x30
   1814c:	a91e      	add	r1, sp, #120	; 0x78
   1814e:	7008      	strb	r0, [r1, #0]
   18150:	2548      	movs	r5, #72	; 0x48
   18152:	4668      	mov	r0, sp
   18154:	1940      	adds	r0, r0, r5
   18156:	7800      	ldrb	r0, [r0, #0]
   18158:	431c      	orrs	r4, r3
   1815a:	7048      	strb	r0, [r1, #1]
   1815c:	2100      	movs	r1, #0
   1815e:	4688      	mov	r8, r1
   18160:	a816      	add	r0, sp, #88	; 0x58
   18162:	77c1      	strb	r1, [r0, #31]
   18164:	4651      	mov	r1, sl
   18166:	3101      	adds	r1, #1
   18168:	d100      	bne.n	1816c <_vfprintf_r+0x29c>
   1816a:	e0e6      	b.n	1833a <_vfprintf_r+0x46a>
   1816c:	2180      	movs	r1, #128	; 0x80
   1816e:	0020      	movs	r0, r4
   18170:	4388      	bics	r0, r1
   18172:	9009      	str	r0, [sp, #36]	; 0x24
   18174:	2a00      	cmp	r2, #0
   18176:	d000      	beq.n	1817a <_vfprintf_r+0x2aa>
   18178:	e0e3      	b.n	18342 <_vfprintf_r+0x472>
   1817a:	4652      	mov	r2, sl
   1817c:	2a00      	cmp	r2, #0
   1817e:	d001      	beq.n	18184 <_vfprintf_r+0x2b4>
   18180:	f000 fc38 	bl	189f4 <_vfprintf_r+0xb24>
   18184:	2b00      	cmp	r3, #0
   18186:	d001      	beq.n	1818c <_vfprintf_r+0x2bc>
   18188:	f000 fd0c 	bl	18ba4 <_vfprintf_r+0xcd4>
   1818c:	2001      	movs	r0, #1
   1818e:	ab32      	add	r3, sp, #200	; 0xc8
   18190:	4020      	ands	r0, r4
   18192:	900e      	str	r0, [sp, #56]	; 0x38
   18194:	9311      	str	r3, [sp, #68]	; 0x44
   18196:	d008      	beq.n	181aa <_vfprintf_r+0x2da>
   18198:	2327      	movs	r3, #39	; 0x27
   1819a:	2130      	movs	r1, #48	; 0x30
   1819c:	aa28      	add	r2, sp, #160	; 0xa0
   1819e:	54d1      	strb	r1, [r2, r3]
   181a0:	aa16      	add	r2, sp, #88	; 0x58
   181a2:	4694      	mov	ip, r2
   181a4:	3348      	adds	r3, #72	; 0x48
   181a6:	4463      	add	r3, ip
   181a8:	9311      	str	r3, [sp, #68]	; 0x44
   181aa:	4653      	mov	r3, sl
   181ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   181ae:	9308      	str	r3, [sp, #32]
   181b0:	4592      	cmp	sl, r2
   181b2:	da00      	bge.n	181b6 <_vfprintf_r+0x2e6>
   181b4:	9208      	str	r2, [sp, #32]
   181b6:	2300      	movs	r3, #0
   181b8:	9313      	str	r3, [sp, #76]	; 0x4c
   181ba:	4643      	mov	r3, r8
   181bc:	2b00      	cmp	r3, #0
   181be:	d002      	beq.n	181c6 <_vfprintf_r+0x2f6>
   181c0:	9b08      	ldr	r3, [sp, #32]
   181c2:	3301      	adds	r3, #1
   181c4:	9308      	str	r3, [sp, #32]
   181c6:	2302      	movs	r3, #2
   181c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   181ca:	401a      	ands	r2, r3
   181cc:	4691      	mov	r9, r2
   181ce:	d002      	beq.n	181d6 <_vfprintf_r+0x306>
   181d0:	9b08      	ldr	r3, [sp, #32]
   181d2:	3302      	adds	r3, #2
   181d4:	9308      	str	r3, [sp, #32]
   181d6:	2384      	movs	r3, #132	; 0x84
   181d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   181da:	401a      	ands	r2, r3
   181dc:	9210      	str	r2, [sp, #64]	; 0x40
   181de:	d000      	beq.n	181e2 <_vfprintf_r+0x312>
   181e0:	e207      	b.n	185f2 <_vfprintf_r+0x722>
   181e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   181e4:	9a08      	ldr	r2, [sp, #32]
   181e6:	1a9c      	subs	r4, r3, r2
   181e8:	2c00      	cmp	r4, #0
   181ea:	dc00      	bgt.n	181ee <_vfprintf_r+0x31e>
   181ec:	e201      	b.n	185f2 <_vfprintf_r+0x722>
   181ee:	491f      	ldr	r1, [pc, #124]	; (1826c <_vfprintf_r+0x39c>)
   181f0:	68ba      	ldr	r2, [r7, #8]
   181f2:	687b      	ldr	r3, [r7, #4]
   181f4:	4688      	mov	r8, r1
   181f6:	2c10      	cmp	r4, #16
   181f8:	dd21      	ble.n	1823e <_vfprintf_r+0x36e>
   181fa:	0031      	movs	r1, r6
   181fc:	2510      	movs	r5, #16
   181fe:	465e      	mov	r6, fp
   18200:	e003      	b.n	1820a <_vfprintf_r+0x33a>
   18202:	3c10      	subs	r4, #16
   18204:	3108      	adds	r1, #8
   18206:	2c10      	cmp	r4, #16
   18208:	dd17      	ble.n	1823a <_vfprintf_r+0x36a>
   1820a:	4640      	mov	r0, r8
   1820c:	3210      	adds	r2, #16
   1820e:	3301      	adds	r3, #1
   18210:	6008      	str	r0, [r1, #0]
   18212:	604d      	str	r5, [r1, #4]
   18214:	60ba      	str	r2, [r7, #8]
   18216:	607b      	str	r3, [r7, #4]
   18218:	2b07      	cmp	r3, #7
   1821a:	ddf2      	ble.n	18202 <_vfprintf_r+0x332>
   1821c:	003a      	movs	r2, r7
   1821e:	0031      	movs	r1, r6
   18220:	9806      	ldr	r0, [sp, #24]
   18222:	f004 f8c5 	bl	1c3b0 <__sprint_r>
   18226:	2800      	cmp	r0, #0
   18228:	d001      	beq.n	1822e <_vfprintf_r+0x35e>
   1822a:	f000 fccf 	bl	18bcc <_vfprintf_r+0xcfc>
   1822e:	3c10      	subs	r4, #16
   18230:	68ba      	ldr	r2, [r7, #8]
   18232:	687b      	ldr	r3, [r7, #4]
   18234:	a932      	add	r1, sp, #200	; 0xc8
   18236:	2c10      	cmp	r4, #16
   18238:	dce7      	bgt.n	1820a <_vfprintf_r+0x33a>
   1823a:	46b3      	mov	fp, r6
   1823c:	000e      	movs	r6, r1
   1823e:	4641      	mov	r1, r8
   18240:	6074      	str	r4, [r6, #4]
   18242:	3301      	adds	r3, #1
   18244:	18a4      	adds	r4, r4, r2
   18246:	6031      	str	r1, [r6, #0]
   18248:	60bc      	str	r4, [r7, #8]
   1824a:	607b      	str	r3, [r7, #4]
   1824c:	2b07      	cmp	r3, #7
   1824e:	dd01      	ble.n	18254 <_vfprintf_r+0x384>
   18250:	f000 fcae 	bl	18bb0 <_vfprintf_r+0xce0>
   18254:	ab16      	add	r3, sp, #88	; 0x58
   18256:	7fdb      	ldrb	r3, [r3, #31]
   18258:	3608      	adds	r6, #8
   1825a:	4698      	mov	r8, r3
   1825c:	e1ca      	b.n	185f4 <_vfprintf_r+0x724>
   1825e:	46c0      	nop			; (mov r8, r8)
   18260:	ffffdfff 	.word	0xffffdfff
   18264:	0001e258 	.word	0x0001e258
   18268:	0001e3e0 	.word	0x0001e3e0
   1826c:	0001e3fc 	.word	0x0001e3fc
   18270:	2200      	movs	r2, #0
   18272:	9d07      	ldr	r5, [sp, #28]
   18274:	3b30      	subs	r3, #48	; 0x30
   18276:	46a8      	mov	r8, r5
   18278:	920b      	str	r2, [sp, #44]	; 0x2c
   1827a:	001a      	movs	r2, r3
   1827c:	9408      	str	r4, [sp, #32]
   1827e:	002c      	movs	r4, r5
   18280:	4655      	mov	r5, sl
   18282:	4682      	mov	sl, r0
   18284:	4640      	mov	r0, r8
   18286:	4688      	mov	r8, r1
   18288:	0011      	movs	r1, r2
   1828a:	2200      	movs	r2, #0
   1828c:	0093      	lsls	r3, r2, #2
   1828e:	189a      	adds	r2, r3, r2
   18290:	7803      	ldrb	r3, [r0, #0]
   18292:	0052      	lsls	r2, r2, #1
   18294:	188a      	adds	r2, r1, r2
   18296:	0019      	movs	r1, r3
   18298:	3401      	adds	r4, #1
   1829a:	3930      	subs	r1, #48	; 0x30
   1829c:	0020      	movs	r0, r4
   1829e:	2909      	cmp	r1, #9
   182a0:	d9f4      	bls.n	1828c <_vfprintf_r+0x3bc>
   182a2:	9407      	str	r4, [sp, #28]
   182a4:	4650      	mov	r0, sl
   182a6:	9c08      	ldr	r4, [sp, #32]
   182a8:	920b      	str	r2, [sp, #44]	; 0x2c
   182aa:	4641      	mov	r1, r8
   182ac:	46aa      	mov	sl, r5
   182ae:	e69b      	b.n	17fe8 <_vfprintf_r+0x118>
   182b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   182b2:	9312      	str	r3, [sp, #72]	; 0x48
   182b4:	6813      	ldr	r3, [r2, #0]
   182b6:	2120      	movs	r1, #32
   182b8:	9308      	str	r3, [sp, #32]
   182ba:	466b      	mov	r3, sp
   182bc:	185b      	adds	r3, r3, r1
   182be:	781b      	ldrb	r3, [r3, #0]
   182c0:	ad28      	add	r5, sp, #160	; 0xa0
   182c2:	702b      	strb	r3, [r5, #0]
   182c4:	2300      	movs	r3, #0
   182c6:	a916      	add	r1, sp, #88	; 0x58
   182c8:	77cb      	strb	r3, [r1, #31]
   182ca:	0013      	movs	r3, r2
   182cc:	3304      	adds	r3, #4
   182ce:	930f      	str	r3, [sp, #60]	; 0x3c
   182d0:	2300      	movs	r3, #0
   182d2:	9409      	str	r4, [sp, #36]	; 0x24
   182d4:	4698      	mov	r8, r3
   182d6:	3301      	adds	r3, #1
   182d8:	9308      	str	r3, [sp, #32]
   182da:	930e      	str	r3, [sp, #56]	; 0x38
   182dc:	2300      	movs	r3, #0
   182de:	9511      	str	r5, [sp, #68]	; 0x44
   182e0:	469a      	mov	sl, r3
   182e2:	9313      	str	r3, [sp, #76]	; 0x4c
   182e4:	e76f      	b.n	181c6 <_vfprintf_r+0x2f6>
   182e6:	9312      	str	r3, [sp, #72]	; 0x48
   182e8:	2900      	cmp	r1, #0
   182ea:	d001      	beq.n	182f0 <_vfprintf_r+0x420>
   182ec:	f001 f94d 	bl	1958a <_vfprintf_r+0x16ba>
   182f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   182f2:	06a3      	lsls	r3, r4, #26
   182f4:	d501      	bpl.n	182fa <_vfprintf_r+0x42a>
   182f6:	f000 fd5a 	bl	18dae <_vfprintf_r+0xede>
   182fa:	06e3      	lsls	r3, r4, #27
   182fc:	d501      	bpl.n	18302 <_vfprintf_r+0x432>
   182fe:	f000 fcab 	bl	18c58 <_vfprintf_r+0xd88>
   18302:	0663      	lsls	r3, r4, #25
   18304:	d401      	bmi.n	1830a <_vfprintf_r+0x43a>
   18306:	f000 fca7 	bl	18c58 <_vfprintf_r+0xd88>
   1830a:	2100      	movs	r1, #0
   1830c:	5e53      	ldrsh	r3, [r2, r1]
   1830e:	930c      	str	r3, [sp, #48]	; 0x30
   18310:	3204      	adds	r2, #4
   18312:	17db      	asrs	r3, r3, #31
   18314:	930d      	str	r3, [sp, #52]	; 0x34
   18316:	920f      	str	r2, [sp, #60]	; 0x3c
   18318:	2b00      	cmp	r3, #0
   1831a:	da01      	bge.n	18320 <_vfprintf_r+0x450>
   1831c:	f000 fdb2 	bl	18e84 <_vfprintf_r+0xfb4>
   18320:	990c      	ldr	r1, [sp, #48]	; 0x30
   18322:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18324:	0008      	movs	r0, r1
   18326:	4651      	mov	r1, sl
   18328:	ab16      	add	r3, sp, #88	; 0x58
   1832a:	7fdb      	ldrb	r3, [r3, #31]
   1832c:	4310      	orrs	r0, r2
   1832e:	4698      	mov	r8, r3
   18330:	0002      	movs	r2, r0
   18332:	2301      	movs	r3, #1
   18334:	3101      	adds	r1, #1
   18336:	d000      	beq.n	1833a <_vfprintf_r+0x46a>
   18338:	e718      	b.n	1816c <_vfprintf_r+0x29c>
   1833a:	2a00      	cmp	r2, #0
   1833c:	d100      	bne.n	18340 <_vfprintf_r+0x470>
   1833e:	e35a      	b.n	189f6 <_vfprintf_r+0xb26>
   18340:	9409      	str	r4, [sp, #36]	; 0x24
   18342:	2b01      	cmp	r3, #1
   18344:	d101      	bne.n	1834a <_vfprintf_r+0x47a>
   18346:	f000 fc06 	bl	18b56 <_vfprintf_r+0xc86>
   1834a:	2b02      	cmp	r3, #2
   1834c:	d000      	beq.n	18350 <_vfprintf_r+0x480>
   1834e:	e380      	b.n	18a52 <_vfprintf_r+0xb82>
   18350:	9c19      	ldr	r4, [sp, #100]	; 0x64
   18352:	200f      	movs	r0, #15
   18354:	46a1      	mov	r9, r4
   18356:	46b4      	mov	ip, r6
   18358:	ab32      	add	r3, sp, #200	; 0xc8
   1835a:	0019      	movs	r1, r3
   1835c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1835e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18360:	0004      	movs	r4, r0
   18362:	464d      	mov	r5, r9
   18364:	4014      	ands	r4, r2
   18366:	5d2c      	ldrb	r4, [r5, r4]
   18368:	071e      	lsls	r6, r3, #28
   1836a:	0915      	lsrs	r5, r2, #4
   1836c:	3901      	subs	r1, #1
   1836e:	432e      	orrs	r6, r5
   18370:	700c      	strb	r4, [r1, #0]
   18372:	091c      	lsrs	r4, r3, #4
   18374:	0023      	movs	r3, r4
   18376:	0034      	movs	r4, r6
   18378:	0032      	movs	r2, r6
   1837a:	431c      	orrs	r4, r3
   1837c:	d1f0      	bne.n	18360 <_vfprintf_r+0x490>
   1837e:	920c      	str	r2, [sp, #48]	; 0x30
   18380:	930d      	str	r3, [sp, #52]	; 0x34
   18382:	ab32      	add	r3, sp, #200	; 0xc8
   18384:	1a5b      	subs	r3, r3, r1
   18386:	9111      	str	r1, [sp, #68]	; 0x44
   18388:	4666      	mov	r6, ip
   1838a:	930e      	str	r3, [sp, #56]	; 0x38
   1838c:	e70d      	b.n	181aa <_vfprintf_r+0x2da>
   1838e:	4663      	mov	r3, ip
   18390:	431c      	orrs	r4, r3
   18392:	9b07      	ldr	r3, [sp, #28]
   18394:	781b      	ldrb	r3, [r3, #0]
   18396:	e624      	b.n	17fe2 <_vfprintf_r+0x112>
   18398:	9b07      	ldr	r3, [sp, #28]
   1839a:	781b      	ldrb	r3, [r3, #0]
   1839c:	2b6c      	cmp	r3, #108	; 0x6c
   1839e:	d101      	bne.n	183a4 <_vfprintf_r+0x4d4>
   183a0:	f000 fe8c 	bl	190bc <_vfprintf_r+0x11ec>
   183a4:	2210      	movs	r2, #16
   183a6:	4314      	orrs	r4, r2
   183a8:	e61b      	b.n	17fe2 <_vfprintf_r+0x112>
   183aa:	2900      	cmp	r1, #0
   183ac:	d001      	beq.n	183b2 <_vfprintf_r+0x4e2>
   183ae:	f001 f8d5 	bl	1955c <_vfprintf_r+0x168c>
   183b2:	06a3      	lsls	r3, r4, #26
   183b4:	d501      	bpl.n	183ba <_vfprintf_r+0x4ea>
   183b6:	f000 fe76 	bl	190a6 <_vfprintf_r+0x11d6>
   183ba:	06e3      	lsls	r3, r4, #27
   183bc:	d500      	bpl.n	183c0 <_vfprintf_r+0x4f0>
   183be:	e110      	b.n	185e2 <_vfprintf_r+0x712>
   183c0:	0663      	lsls	r3, r4, #25
   183c2:	d400      	bmi.n	183c6 <_vfprintf_r+0x4f6>
   183c4:	e10d      	b.n	185e2 <_vfprintf_r+0x712>
   183c6:	4669      	mov	r1, sp
   183c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   183ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   183cc:	681a      	ldr	r2, [r3, #0]
   183ce:	3304      	adds	r3, #4
   183d0:	9208      	str	r2, [sp, #32]
   183d2:	8011      	strh	r1, [r2, #0]
   183d4:	930f      	str	r3, [sp, #60]	; 0x3c
   183d6:	e5c9      	b.n	17f6c <_vfprintf_r+0x9c>
   183d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   183da:	2230      	movs	r2, #48	; 0x30
   183dc:	680b      	ldr	r3, [r1, #0]
   183de:	930c      	str	r3, [sp, #48]	; 0x30
   183e0:	2300      	movs	r3, #0
   183e2:	930d      	str	r3, [sp, #52]	; 0x34
   183e4:	3302      	adds	r3, #2
   183e6:	431c      	orrs	r4, r3
   183e8:	ab1e      	add	r3, sp, #120	; 0x78
   183ea:	701a      	strb	r2, [r3, #0]
   183ec:	3248      	adds	r2, #72	; 0x48
   183ee:	705a      	strb	r2, [r3, #1]
   183f0:	000b      	movs	r3, r1
   183f2:	3304      	adds	r3, #4
   183f4:	930f      	str	r3, [sp, #60]	; 0x3c
   183f6:	4bc1      	ldr	r3, [pc, #772]	; (186fc <_vfprintf_r+0x82c>)
   183f8:	9212      	str	r2, [sp, #72]	; 0x48
   183fa:	9319      	str	r3, [sp, #100]	; 0x64
   183fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   183fe:	2302      	movs	r3, #2
   18400:	e6ac      	b.n	1815c <_vfprintf_r+0x28c>
   18402:	464b      	mov	r3, r9
   18404:	431c      	orrs	r4, r3
   18406:	9b07      	ldr	r3, [sp, #28]
   18408:	781b      	ldrb	r3, [r3, #0]
   1840a:	e5ea      	b.n	17fe2 <_vfprintf_r+0x112>
   1840c:	9312      	str	r3, [sp, #72]	; 0x48
   1840e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18410:	a916      	add	r1, sp, #88	; 0x58
   18412:	1d1d      	adds	r5, r3, #4
   18414:	681b      	ldr	r3, [r3, #0]
   18416:	001a      	movs	r2, r3
   18418:	9311      	str	r3, [sp, #68]	; 0x44
   1841a:	2300      	movs	r3, #0
   1841c:	77cb      	strb	r3, [r1, #31]
   1841e:	2a00      	cmp	r2, #0
   18420:	d101      	bne.n	18426 <_vfprintf_r+0x556>
   18422:	f000 ff01 	bl	19228 <_vfprintf_r+0x1358>
   18426:	4653      	mov	r3, sl
   18428:	3301      	adds	r3, #1
   1842a:	d101      	bne.n	18430 <_vfprintf_r+0x560>
   1842c:	f000 fe64 	bl	190f8 <_vfprintf_r+0x1228>
   18430:	4652      	mov	r2, sl
   18432:	2100      	movs	r1, #0
   18434:	9811      	ldr	r0, [sp, #68]	; 0x44
   18436:	f003 f973 	bl	1b720 <memchr>
   1843a:	2800      	cmp	r0, #0
   1843c:	d101      	bne.n	18442 <_vfprintf_r+0x572>
   1843e:	f000 ff78 	bl	19332 <_vfprintf_r+0x1462>
   18442:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18444:	1ac3      	subs	r3, r0, r3
   18446:	001a      	movs	r2, r3
   18448:	930e      	str	r3, [sp, #56]	; 0x38
   1844a:	43db      	mvns	r3, r3
   1844c:	17db      	asrs	r3, r3, #31
   1844e:	401a      	ands	r2, r3
   18450:	ab16      	add	r3, sp, #88	; 0x58
   18452:	7fdb      	ldrb	r3, [r3, #31]
   18454:	9208      	str	r2, [sp, #32]
   18456:	4698      	mov	r8, r3
   18458:	2300      	movs	r3, #0
   1845a:	950f      	str	r5, [sp, #60]	; 0x3c
   1845c:	9409      	str	r4, [sp, #36]	; 0x24
   1845e:	469a      	mov	sl, r3
   18460:	9313      	str	r3, [sp, #76]	; 0x4c
   18462:	e6aa      	b.n	181ba <_vfprintf_r+0x2ea>
   18464:	2308      	movs	r3, #8
   18466:	431c      	orrs	r4, r3
   18468:	9b07      	ldr	r3, [sp, #28]
   1846a:	781b      	ldrb	r3, [r3, #0]
   1846c:	e5b9      	b.n	17fe2 <_vfprintf_r+0x112>
   1846e:	9312      	str	r3, [sp, #72]	; 0x48
   18470:	2310      	movs	r3, #16
   18472:	431c      	orrs	r4, r3
   18474:	06a3      	lsls	r3, r4, #26
   18476:	d501      	bpl.n	1847c <_vfprintf_r+0x5ac>
   18478:	f000 fca7 	bl	18dca <_vfprintf_r+0xefa>
   1847c:	06e3      	lsls	r3, r4, #27
   1847e:	d500      	bpl.n	18482 <_vfprintf_r+0x5b2>
   18480:	e3ee      	b.n	18c60 <_vfprintf_r+0xd90>
   18482:	0663      	lsls	r3, r4, #25
   18484:	d400      	bmi.n	18488 <_vfprintf_r+0x5b8>
   18486:	e3eb      	b.n	18c60 <_vfprintf_r+0xd90>
   18488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1848a:	881a      	ldrh	r2, [r3, #0]
   1848c:	920c      	str	r2, [sp, #48]	; 0x30
   1848e:	2200      	movs	r2, #0
   18490:	3304      	adds	r3, #4
   18492:	920d      	str	r2, [sp, #52]	; 0x34
   18494:	930f      	str	r3, [sp, #60]	; 0x3c
   18496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18498:	2300      	movs	r3, #0
   1849a:	e65f      	b.n	1815c <_vfprintf_r+0x28c>
   1849c:	9312      	str	r3, [sp, #72]	; 0x48
   1849e:	2310      	movs	r3, #16
   184a0:	431c      	orrs	r4, r3
   184a2:	06a3      	lsls	r3, r4, #26
   184a4:	d501      	bpl.n	184aa <_vfprintf_r+0x5da>
   184a6:	f000 fcba 	bl	18e1e <_vfprintf_r+0xf4e>
   184aa:	06e3      	lsls	r3, r4, #27
   184ac:	d500      	bpl.n	184b0 <_vfprintf_r+0x5e0>
   184ae:	e3da      	b.n	18c66 <_vfprintf_r+0xd96>
   184b0:	0663      	lsls	r3, r4, #25
   184b2:	d400      	bmi.n	184b6 <_vfprintf_r+0x5e6>
   184b4:	e3d7      	b.n	18c66 <_vfprintf_r+0xd96>
   184b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   184b8:	881a      	ldrh	r2, [r3, #0]
   184ba:	920c      	str	r2, [sp, #48]	; 0x30
   184bc:	2200      	movs	r2, #0
   184be:	3304      	adds	r3, #4
   184c0:	920d      	str	r2, [sp, #52]	; 0x34
   184c2:	930f      	str	r3, [sp, #60]	; 0x3c
   184c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   184c6:	2301      	movs	r3, #1
   184c8:	e648      	b.n	1815c <_vfprintf_r+0x28c>
   184ca:	9312      	str	r3, [sp, #72]	; 0x48
   184cc:	2900      	cmp	r1, #0
   184ce:	d001      	beq.n	184d4 <_vfprintf_r+0x604>
   184d0:	f001 f857 	bl	19582 <_vfprintf_r+0x16b2>
   184d4:	4b8a      	ldr	r3, [pc, #552]	; (18700 <_vfprintf_r+0x830>)
   184d6:	9319      	str	r3, [sp, #100]	; 0x64
   184d8:	e618      	b.n	1810c <_vfprintf_r+0x23c>
   184da:	2301      	movs	r3, #1
   184dc:	431c      	orrs	r4, r3
   184de:	9b07      	ldr	r3, [sp, #28]
   184e0:	781b      	ldrb	r3, [r3, #0]
   184e2:	e57e      	b.n	17fe2 <_vfprintf_r+0x112>
   184e4:	2380      	movs	r3, #128	; 0x80
   184e6:	431c      	orrs	r4, r3
   184e8:	9b07      	ldr	r3, [sp, #28]
   184ea:	781b      	ldrb	r3, [r3, #0]
   184ec:	e579      	b.n	17fe2 <_vfprintf_r+0x112>
   184ee:	9b07      	ldr	r3, [sp, #28]
   184f0:	781b      	ldrb	r3, [r3, #0]
   184f2:	2800      	cmp	r0, #0
   184f4:	d000      	beq.n	184f8 <_vfprintf_r+0x628>
   184f6:	e574      	b.n	17fe2 <_vfprintf_r+0x112>
   184f8:	2101      	movs	r1, #1
   184fa:	3020      	adds	r0, #32
   184fc:	e571      	b.n	17fe2 <_vfprintf_r+0x112>
   184fe:	9312      	str	r3, [sp, #72]	; 0x48
   18500:	2900      	cmp	r1, #0
   18502:	d001      	beq.n	18508 <_vfprintf_r+0x638>
   18504:	f001 f839 	bl	1957a <_vfprintf_r+0x16aa>
   18508:	2207      	movs	r2, #7
   1850a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1850c:	3307      	adds	r3, #7
   1850e:	4393      	bics	r3, r2
   18510:	3201      	adds	r2, #1
   18512:	4694      	mov	ip, r2
   18514:	449c      	add	ip, r3
   18516:	4662      	mov	r2, ip
   18518:	920f      	str	r2, [sp, #60]	; 0x3c
   1851a:	681a      	ldr	r2, [r3, #0]
   1851c:	9216      	str	r2, [sp, #88]	; 0x58
   1851e:	685b      	ldr	r3, [r3, #4]
   18520:	2201      	movs	r2, #1
   18522:	9315      	str	r3, [sp, #84]	; 0x54
   18524:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18526:	9d16      	ldr	r5, [sp, #88]	; 0x58
   18528:	005b      	lsls	r3, r3, #1
   1852a:	085b      	lsrs	r3, r3, #1
   1852c:	4698      	mov	r8, r3
   1852e:	4252      	negs	r2, r2
   18530:	4b74      	ldr	r3, [pc, #464]	; (18704 <_vfprintf_r+0x834>)
   18532:	0028      	movs	r0, r5
   18534:	4641      	mov	r1, r8
   18536:	f004 f9c7 	bl	1c8c8 <__aeabi_dcmpun>
   1853a:	2800      	cmp	r0, #0
   1853c:	d001      	beq.n	18542 <_vfprintf_r+0x672>
   1853e:	f000 fcb4 	bl	18eaa <_vfprintf_r+0xfda>
   18542:	2201      	movs	r2, #1
   18544:	4b6f      	ldr	r3, [pc, #444]	; (18704 <_vfprintf_r+0x834>)
   18546:	4252      	negs	r2, r2
   18548:	0028      	movs	r0, r5
   1854a:	4641      	mov	r1, r8
   1854c:	f7fc f972 	bl	14834 <__aeabi_dcmple>
   18550:	2800      	cmp	r0, #0
   18552:	d001      	beq.n	18558 <_vfprintf_r+0x688>
   18554:	f000 fca9 	bl	18eaa <_vfprintf_r+0xfda>
   18558:	2200      	movs	r2, #0
   1855a:	2300      	movs	r3, #0
   1855c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1855e:	9915      	ldr	r1, [sp, #84]	; 0x54
   18560:	f7fc f95e 	bl	14820 <__aeabi_dcmplt>
   18564:	2800      	cmp	r0, #0
   18566:	d001      	beq.n	1856c <_vfprintf_r+0x69c>
   18568:	f000 fd55 	bl	19016 <_vfprintf_r+0x1146>
   1856c:	ab16      	add	r3, sp, #88	; 0x58
   1856e:	7fdb      	ldrb	r3, [r3, #31]
   18570:	4698      	mov	r8, r3
   18572:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18574:	2b47      	cmp	r3, #71	; 0x47
   18576:	dd01      	ble.n	1857c <_vfprintf_r+0x6ac>
   18578:	f000 fdb4 	bl	190e4 <_vfprintf_r+0x1214>
   1857c:	4b62      	ldr	r3, [pc, #392]	; (18708 <_vfprintf_r+0x838>)
   1857e:	9311      	str	r3, [sp, #68]	; 0x44
   18580:	2380      	movs	r3, #128	; 0x80
   18582:	439c      	bics	r4, r3
   18584:	3b7d      	subs	r3, #125	; 0x7d
   18586:	9308      	str	r3, [sp, #32]
   18588:	930e      	str	r3, [sp, #56]	; 0x38
   1858a:	2300      	movs	r3, #0
   1858c:	9409      	str	r4, [sp, #36]	; 0x24
   1858e:	469a      	mov	sl, r3
   18590:	9313      	str	r3, [sp, #76]	; 0x4c
   18592:	e612      	b.n	181ba <_vfprintf_r+0x2ea>
   18594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18596:	1d1a      	adds	r2, r3, #4
   18598:	681b      	ldr	r3, [r3, #0]
   1859a:	930b      	str	r3, [sp, #44]	; 0x2c
   1859c:	2b00      	cmp	r3, #0
   1859e:	da00      	bge.n	185a2 <_vfprintf_r+0x6d2>
   185a0:	e578      	b.n	18094 <_vfprintf_r+0x1c4>
   185a2:	9b07      	ldr	r3, [sp, #28]
   185a4:	920f      	str	r2, [sp, #60]	; 0x3c
   185a6:	781b      	ldrb	r3, [r3, #0]
   185a8:	e51b      	b.n	17fe2 <_vfprintf_r+0x112>
   185aa:	9312      	str	r3, [sp, #72]	; 0x48
   185ac:	2900      	cmp	r1, #0
   185ae:	d001      	beq.n	185b4 <_vfprintf_r+0x6e4>
   185b0:	f000 ffcc 	bl	1954c <_vfprintf_r+0x167c>
   185b4:	2310      	movs	r3, #16
   185b6:	431c      	orrs	r4, r3
   185b8:	e69a      	b.n	182f0 <_vfprintf_r+0x420>
   185ba:	9312      	str	r3, [sp, #72]	; 0x48
   185bc:	e771      	b.n	184a2 <_vfprintf_r+0x5d2>
   185be:	9312      	str	r3, [sp, #72]	; 0x48
   185c0:	e758      	b.n	18474 <_vfprintf_r+0x5a4>
   185c2:	9312      	str	r3, [sp, #72]	; 0x48
   185c4:	2900      	cmp	r1, #0
   185c6:	d001      	beq.n	185cc <_vfprintf_r+0x6fc>
   185c8:	f000 ffd3 	bl	19572 <_vfprintf_r+0x16a2>
   185cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   185ce:	2b00      	cmp	r3, #0
   185d0:	d100      	bne.n	185d4 <_vfprintf_r+0x704>
   185d2:	e18d      	b.n	188f0 <_vfprintf_r+0xa20>
   185d4:	ad28      	add	r5, sp, #160	; 0xa0
   185d6:	702b      	strb	r3, [r5, #0]
   185d8:	2300      	movs	r3, #0
   185da:	aa16      	add	r2, sp, #88	; 0x58
   185dc:	77d3      	strb	r3, [r2, #31]
   185de:	9409      	str	r4, [sp, #36]	; 0x24
   185e0:	e678      	b.n	182d4 <_vfprintf_r+0x404>
   185e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   185e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   185e6:	6813      	ldr	r3, [r2, #0]
   185e8:	6019      	str	r1, [r3, #0]
   185ea:	0013      	movs	r3, r2
   185ec:	3304      	adds	r3, #4
   185ee:	930f      	str	r3, [sp, #60]	; 0x3c
   185f0:	e4bc      	b.n	17f6c <_vfprintf_r+0x9c>
   185f2:	68bc      	ldr	r4, [r7, #8]
   185f4:	4643      	mov	r3, r8
   185f6:	2b00      	cmp	r3, #0
   185f8:	d00f      	beq.n	1861a <_vfprintf_r+0x74a>
   185fa:	aa16      	add	r2, sp, #88	; 0x58
   185fc:	231f      	movs	r3, #31
   185fe:	4694      	mov	ip, r2
   18600:	4463      	add	r3, ip
   18602:	6033      	str	r3, [r6, #0]
   18604:	2301      	movs	r3, #1
   18606:	6073      	str	r3, [r6, #4]
   18608:	687b      	ldr	r3, [r7, #4]
   1860a:	3401      	adds	r4, #1
   1860c:	3301      	adds	r3, #1
   1860e:	60bc      	str	r4, [r7, #8]
   18610:	607b      	str	r3, [r7, #4]
   18612:	2b07      	cmp	r3, #7
   18614:	dd00      	ble.n	18618 <_vfprintf_r+0x748>
   18616:	e203      	b.n	18a20 <_vfprintf_r+0xb50>
   18618:	3608      	adds	r6, #8
   1861a:	464b      	mov	r3, r9
   1861c:	2b00      	cmp	r3, #0
   1861e:	d00c      	beq.n	1863a <_vfprintf_r+0x76a>
   18620:	ab1e      	add	r3, sp, #120	; 0x78
   18622:	6033      	str	r3, [r6, #0]
   18624:	2302      	movs	r3, #2
   18626:	6073      	str	r3, [r6, #4]
   18628:	687b      	ldr	r3, [r7, #4]
   1862a:	3402      	adds	r4, #2
   1862c:	3301      	adds	r3, #1
   1862e:	60bc      	str	r4, [r7, #8]
   18630:	607b      	str	r3, [r7, #4]
   18632:	2b07      	cmp	r3, #7
   18634:	dd00      	ble.n	18638 <_vfprintf_r+0x768>
   18636:	e1fd      	b.n	18a34 <_vfprintf_r+0xb64>
   18638:	3608      	adds	r6, #8
   1863a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1863c:	2b80      	cmp	r3, #128	; 0x80
   1863e:	d100      	bne.n	18642 <_vfprintf_r+0x772>
   18640:	e173      	b.n	1892a <_vfprintf_r+0xa5a>
   18642:	4653      	mov	r3, sl
   18644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18646:	1a9d      	subs	r5, r3, r2
   18648:	2d00      	cmp	r5, #0
   1864a:	dd32      	ble.n	186b2 <_vfprintf_r+0x7e2>
   1864c:	4a2f      	ldr	r2, [pc, #188]	; (1870c <_vfprintf_r+0x83c>)
   1864e:	687b      	ldr	r3, [r7, #4]
   18650:	4691      	mov	r9, r2
   18652:	2d10      	cmp	r5, #16
   18654:	dd22      	ble.n	1869c <_vfprintf_r+0x7cc>
   18656:	2210      	movs	r2, #16
   18658:	4692      	mov	sl, r2
   1865a:	0022      	movs	r2, r4
   1865c:	465c      	mov	r4, fp
   1865e:	e003      	b.n	18668 <_vfprintf_r+0x798>
   18660:	3d10      	subs	r5, #16
   18662:	3608      	adds	r6, #8
   18664:	2d10      	cmp	r5, #16
   18666:	dd17      	ble.n	18698 <_vfprintf_r+0x7c8>
   18668:	4649      	mov	r1, r9
   1866a:	6031      	str	r1, [r6, #0]
   1866c:	4651      	mov	r1, sl
   1866e:	3210      	adds	r2, #16
   18670:	3301      	adds	r3, #1
   18672:	6071      	str	r1, [r6, #4]
   18674:	60ba      	str	r2, [r7, #8]
   18676:	607b      	str	r3, [r7, #4]
   18678:	2b07      	cmp	r3, #7
   1867a:	ddf1      	ble.n	18660 <_vfprintf_r+0x790>
   1867c:	003a      	movs	r2, r7
   1867e:	0021      	movs	r1, r4
   18680:	9806      	ldr	r0, [sp, #24]
   18682:	f003 fe95 	bl	1c3b0 <__sprint_r>
   18686:	2800      	cmp	r0, #0
   18688:	d000      	beq.n	1868c <_vfprintf_r+0x7bc>
   1868a:	e18a      	b.n	189a2 <_vfprintf_r+0xad2>
   1868c:	3d10      	subs	r5, #16
   1868e:	68ba      	ldr	r2, [r7, #8]
   18690:	687b      	ldr	r3, [r7, #4]
   18692:	ae32      	add	r6, sp, #200	; 0xc8
   18694:	2d10      	cmp	r5, #16
   18696:	dce7      	bgt.n	18668 <_vfprintf_r+0x798>
   18698:	46a3      	mov	fp, r4
   1869a:	0014      	movs	r4, r2
   1869c:	464a      	mov	r2, r9
   1869e:	1964      	adds	r4, r4, r5
   186a0:	3301      	adds	r3, #1
   186a2:	6032      	str	r2, [r6, #0]
   186a4:	6075      	str	r5, [r6, #4]
   186a6:	60bc      	str	r4, [r7, #8]
   186a8:	607b      	str	r3, [r7, #4]
   186aa:	2b07      	cmp	r3, #7
   186ac:	dd00      	ble.n	186b0 <_vfprintf_r+0x7e0>
   186ae:	e1ad      	b.n	18a0c <_vfprintf_r+0xb3c>
   186b0:	3608      	adds	r6, #8
   186b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   186b4:	05db      	lsls	r3, r3, #23
   186b6:	d500      	bpl.n	186ba <_vfprintf_r+0x7ea>
   186b8:	e0be      	b.n	18838 <_vfprintf_r+0x968>
   186ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   186bc:	6033      	str	r3, [r6, #0]
   186be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   186c0:	469c      	mov	ip, r3
   186c2:	6073      	str	r3, [r6, #4]
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	4464      	add	r4, ip
   186c8:	3301      	adds	r3, #1
   186ca:	60bc      	str	r4, [r7, #8]
   186cc:	607b      	str	r3, [r7, #4]
   186ce:	2b07      	cmp	r3, #7
   186d0:	dd00      	ble.n	186d4 <_vfprintf_r+0x804>
   186d2:	e0a6      	b.n	18822 <_vfprintf_r+0x952>
   186d4:	3608      	adds	r6, #8
   186d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   186d8:	075b      	lsls	r3, r3, #29
   186da:	d54a      	bpl.n	18772 <_vfprintf_r+0x8a2>
   186dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   186de:	9a08      	ldr	r2, [sp, #32]
   186e0:	1a9d      	subs	r5, r3, r2
   186e2:	2d00      	cmp	r5, #0
   186e4:	dd45      	ble.n	18772 <_vfprintf_r+0x8a2>
   186e6:	4a0a      	ldr	r2, [pc, #40]	; (18710 <_vfprintf_r+0x840>)
   186e8:	687b      	ldr	r3, [r7, #4]
   186ea:	4690      	mov	r8, r2
   186ec:	2d10      	cmp	r5, #16
   186ee:	dd2f      	ble.n	18750 <_vfprintf_r+0x880>
   186f0:	2210      	movs	r2, #16
   186f2:	4691      	mov	r9, r2
   186f4:	0022      	movs	r2, r4
   186f6:	465c      	mov	r4, fp
   186f8:	e010      	b.n	1871c <_vfprintf_r+0x84c>
   186fa:	46c0      	nop			; (mov r8, r8)
   186fc:	0001e3e0 	.word	0x0001e3e0
   18700:	0001e3cc 	.word	0x0001e3cc
   18704:	7fefffff 	.word	0x7fefffff
   18708:	0001e3bc 	.word	0x0001e3bc
   1870c:	0001e40c 	.word	0x0001e40c
   18710:	0001e3fc 	.word	0x0001e3fc
   18714:	3d10      	subs	r5, #16
   18716:	3608      	adds	r6, #8
   18718:	2d10      	cmp	r5, #16
   1871a:	dd17      	ble.n	1874c <_vfprintf_r+0x87c>
   1871c:	49d1      	ldr	r1, [pc, #836]	; (18a64 <_vfprintf_r+0xb94>)
   1871e:	3210      	adds	r2, #16
   18720:	6031      	str	r1, [r6, #0]
   18722:	4649      	mov	r1, r9
   18724:	3301      	adds	r3, #1
   18726:	6071      	str	r1, [r6, #4]
   18728:	60ba      	str	r2, [r7, #8]
   1872a:	607b      	str	r3, [r7, #4]
   1872c:	2b07      	cmp	r3, #7
   1872e:	ddf1      	ble.n	18714 <_vfprintf_r+0x844>
   18730:	003a      	movs	r2, r7
   18732:	0021      	movs	r1, r4
   18734:	9806      	ldr	r0, [sp, #24]
   18736:	f003 fe3b 	bl	1c3b0 <__sprint_r>
   1873a:	2800      	cmp	r0, #0
   1873c:	d000      	beq.n	18740 <_vfprintf_r+0x870>
   1873e:	e130      	b.n	189a2 <_vfprintf_r+0xad2>
   18740:	3d10      	subs	r5, #16
   18742:	68ba      	ldr	r2, [r7, #8]
   18744:	687b      	ldr	r3, [r7, #4]
   18746:	ae32      	add	r6, sp, #200	; 0xc8
   18748:	2d10      	cmp	r5, #16
   1874a:	dce7      	bgt.n	1871c <_vfprintf_r+0x84c>
   1874c:	46a3      	mov	fp, r4
   1874e:	0014      	movs	r4, r2
   18750:	4642      	mov	r2, r8
   18752:	1964      	adds	r4, r4, r5
   18754:	3301      	adds	r3, #1
   18756:	c624      	stmia	r6!, {r2, r5}
   18758:	60bc      	str	r4, [r7, #8]
   1875a:	607b      	str	r3, [r7, #4]
   1875c:	2b07      	cmp	r3, #7
   1875e:	dd08      	ble.n	18772 <_vfprintf_r+0x8a2>
   18760:	003a      	movs	r2, r7
   18762:	4659      	mov	r1, fp
   18764:	9806      	ldr	r0, [sp, #24]
   18766:	f003 fe23 	bl	1c3b0 <__sprint_r>
   1876a:	2800      	cmp	r0, #0
   1876c:	d000      	beq.n	18770 <_vfprintf_r+0x8a0>
   1876e:	e13f      	b.n	189f0 <_vfprintf_r+0xb20>
   18770:	68bc      	ldr	r4, [r7, #8]
   18772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18774:	9908      	ldr	r1, [sp, #32]
   18776:	428b      	cmp	r3, r1
   18778:	da00      	bge.n	1877c <_vfprintf_r+0x8ac>
   1877a:	000b      	movs	r3, r1
   1877c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1877e:	4694      	mov	ip, r2
   18780:	449c      	add	ip, r3
   18782:	4663      	mov	r3, ip
   18784:	930a      	str	r3, [sp, #40]	; 0x28
   18786:	2c00      	cmp	r4, #0
   18788:	d000      	beq.n	1878c <_vfprintf_r+0x8bc>
   1878a:	e129      	b.n	189e0 <_vfprintf_r+0xb10>
   1878c:	2300      	movs	r3, #0
   1878e:	ae32      	add	r6, sp, #200	; 0xc8
   18790:	607b      	str	r3, [r7, #4]
   18792:	f7ff fbeb 	bl	17f6c <_vfprintf_r+0x9c>
   18796:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18798:	2b01      	cmp	r3, #1
   1879a:	dc00      	bgt.n	1879e <_vfprintf_r+0x8ce>
   1879c:	e103      	b.n	189a6 <_vfprintf_r+0xad6>
   1879e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   187a0:	3401      	adds	r4, #1
   187a2:	6033      	str	r3, [r6, #0]
   187a4:	2301      	movs	r3, #1
   187a6:	6073      	str	r3, [r6, #4]
   187a8:	687b      	ldr	r3, [r7, #4]
   187aa:	60bc      	str	r4, [r7, #8]
   187ac:	3301      	adds	r3, #1
   187ae:	607b      	str	r3, [r7, #4]
   187b0:	2b07      	cmp	r3, #7
   187b2:	dd00      	ble.n	187b6 <_vfprintf_r+0x8e6>
   187b4:	e2ef      	b.n	18d96 <_vfprintf_r+0xec6>
   187b6:	3608      	adds	r6, #8
   187b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   187ba:	3301      	adds	r3, #1
   187bc:	6032      	str	r2, [r6, #0]
   187be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   187c0:	4698      	mov	r8, r3
   187c2:	4694      	mov	ip, r2
   187c4:	4464      	add	r4, ip
   187c6:	6072      	str	r2, [r6, #4]
   187c8:	60bc      	str	r4, [r7, #8]
   187ca:	607b      	str	r3, [r7, #4]
   187cc:	2b07      	cmp	r3, #7
   187ce:	dd00      	ble.n	187d2 <_vfprintf_r+0x902>
   187d0:	e318      	b.n	18e04 <_vfprintf_r+0xf34>
   187d2:	3608      	adds	r6, #8
   187d4:	2200      	movs	r2, #0
   187d6:	2300      	movs	r3, #0
   187d8:	9816      	ldr	r0, [sp, #88]	; 0x58
   187da:	9915      	ldr	r1, [sp, #84]	; 0x54
   187dc:	f7fc f81a 	bl	14814 <__aeabi_dcmpeq>
   187e0:	2800      	cmp	r0, #0
   187e2:	d000      	beq.n	187e6 <_vfprintf_r+0x916>
   187e4:	e1f4      	b.n	18bd0 <_vfprintf_r+0xd00>
   187e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   187e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   187ea:	3501      	adds	r5, #1
   187ec:	3b01      	subs	r3, #1
   187ee:	6035      	str	r5, [r6, #0]
   187f0:	6073      	str	r3, [r6, #4]
   187f2:	18e4      	adds	r4, r4, r3
   187f4:	2301      	movs	r3, #1
   187f6:	469c      	mov	ip, r3
   187f8:	44e0      	add	r8, ip
   187fa:	4643      	mov	r3, r8
   187fc:	60bc      	str	r4, [r7, #8]
   187fe:	607b      	str	r3, [r7, #4]
   18800:	2b07      	cmp	r3, #7
   18802:	dd00      	ble.n	18806 <_vfprintf_r+0x936>
   18804:	e0e0      	b.n	189c8 <_vfprintf_r+0xaf8>
   18806:	3608      	adds	r6, #8
   18808:	ab21      	add	r3, sp, #132	; 0x84
   1880a:	6033      	str	r3, [r6, #0]
   1880c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1880e:	469c      	mov	ip, r3
   18810:	6073      	str	r3, [r6, #4]
   18812:	4643      	mov	r3, r8
   18814:	4464      	add	r4, ip
   18816:	3301      	adds	r3, #1
   18818:	60bc      	str	r4, [r7, #8]
   1881a:	607b      	str	r3, [r7, #4]
   1881c:	2b07      	cmp	r3, #7
   1881e:	dc00      	bgt.n	18822 <_vfprintf_r+0x952>
   18820:	e758      	b.n	186d4 <_vfprintf_r+0x804>
   18822:	003a      	movs	r2, r7
   18824:	4659      	mov	r1, fp
   18826:	9806      	ldr	r0, [sp, #24]
   18828:	f003 fdc2 	bl	1c3b0 <__sprint_r>
   1882c:	2800      	cmp	r0, #0
   1882e:	d000      	beq.n	18832 <_vfprintf_r+0x962>
   18830:	e0de      	b.n	189f0 <_vfprintf_r+0xb20>
   18832:	68bc      	ldr	r4, [r7, #8]
   18834:	ae32      	add	r6, sp, #200	; 0xc8
   18836:	e74e      	b.n	186d6 <_vfprintf_r+0x806>
   18838:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1883a:	2b65      	cmp	r3, #101	; 0x65
   1883c:	ddab      	ble.n	18796 <_vfprintf_r+0x8c6>
   1883e:	2200      	movs	r2, #0
   18840:	2300      	movs	r3, #0
   18842:	9816      	ldr	r0, [sp, #88]	; 0x58
   18844:	9915      	ldr	r1, [sp, #84]	; 0x54
   18846:	f7fb ffe5 	bl	14814 <__aeabi_dcmpeq>
   1884a:	2800      	cmp	r0, #0
   1884c:	d100      	bne.n	18850 <_vfprintf_r+0x980>
   1884e:	e134      	b.n	18aba <_vfprintf_r+0xbea>
   18850:	4b85      	ldr	r3, [pc, #532]	; (18a68 <_vfprintf_r+0xb98>)
   18852:	3401      	adds	r4, #1
   18854:	6033      	str	r3, [r6, #0]
   18856:	2301      	movs	r3, #1
   18858:	6073      	str	r3, [r6, #4]
   1885a:	687b      	ldr	r3, [r7, #4]
   1885c:	60bc      	str	r4, [r7, #8]
   1885e:	3301      	adds	r3, #1
   18860:	607b      	str	r3, [r7, #4]
   18862:	2b07      	cmp	r3, #7
   18864:	dd00      	ble.n	18868 <_vfprintf_r+0x998>
   18866:	e3dc      	b.n	19022 <_vfprintf_r+0x1152>
   18868:	3608      	adds	r6, #8
   1886a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1886c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1886e:	4293      	cmp	r3, r2
   18870:	db03      	blt.n	1887a <_vfprintf_r+0x9aa>
   18872:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18874:	07db      	lsls	r3, r3, #31
   18876:	d400      	bmi.n	1887a <_vfprintf_r+0x9aa>
   18878:	e3b7      	b.n	18fea <_vfprintf_r+0x111a>
   1887a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1887c:	68ba      	ldr	r2, [r7, #8]
   1887e:	6033      	str	r3, [r6, #0]
   18880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18882:	469c      	mov	ip, r3
   18884:	6073      	str	r3, [r6, #4]
   18886:	687b      	ldr	r3, [r7, #4]
   18888:	4462      	add	r2, ip
   1888a:	3301      	adds	r3, #1
   1888c:	0014      	movs	r4, r2
   1888e:	60ba      	str	r2, [r7, #8]
   18890:	607b      	str	r3, [r7, #4]
   18892:	2b07      	cmp	r3, #7
   18894:	dd01      	ble.n	1889a <_vfprintf_r+0x9ca>
   18896:	f000 fc19 	bl	190cc <_vfprintf_r+0x11fc>
   1889a:	3608      	adds	r6, #8
   1889c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1889e:	1e5d      	subs	r5, r3, #1
   188a0:	2d00      	cmp	r5, #0
   188a2:	dc00      	bgt.n	188a6 <_vfprintf_r+0x9d6>
   188a4:	e717      	b.n	186d6 <_vfprintf_r+0x806>
   188a6:	4a71      	ldr	r2, [pc, #452]	; (18a6c <_vfprintf_r+0xb9c>)
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	4691      	mov	r9, r2
   188ac:	2d10      	cmp	r5, #16
   188ae:	dc00      	bgt.n	188b2 <_vfprintf_r+0x9e2>
   188b0:	e1c3      	b.n	18c3a <_vfprintf_r+0xd6a>
   188b2:	2210      	movs	r2, #16
   188b4:	4690      	mov	r8, r2
   188b6:	0022      	movs	r2, r4
   188b8:	464c      	mov	r4, r9
   188ba:	46d9      	mov	r9, fp
   188bc:	e004      	b.n	188c8 <_vfprintf_r+0x9f8>
   188be:	3608      	adds	r6, #8
   188c0:	3d10      	subs	r5, #16
   188c2:	2d10      	cmp	r5, #16
   188c4:	dc00      	bgt.n	188c8 <_vfprintf_r+0x9f8>
   188c6:	e37c      	b.n	18fc2 <_vfprintf_r+0x10f2>
   188c8:	4641      	mov	r1, r8
   188ca:	3210      	adds	r2, #16
   188cc:	3301      	adds	r3, #1
   188ce:	6034      	str	r4, [r6, #0]
   188d0:	6071      	str	r1, [r6, #4]
   188d2:	60ba      	str	r2, [r7, #8]
   188d4:	607b      	str	r3, [r7, #4]
   188d6:	2b07      	cmp	r3, #7
   188d8:	ddf1      	ble.n	188be <_vfprintf_r+0x9ee>
   188da:	003a      	movs	r2, r7
   188dc:	4649      	mov	r1, r9
   188de:	9806      	ldr	r0, [sp, #24]
   188e0:	f003 fd66 	bl	1c3b0 <__sprint_r>
   188e4:	2800      	cmp	r0, #0
   188e6:	d10b      	bne.n	18900 <_vfprintf_r+0xa30>
   188e8:	68ba      	ldr	r2, [r7, #8]
   188ea:	687b      	ldr	r3, [r7, #4]
   188ec:	ae32      	add	r6, sp, #200	; 0xc8
   188ee:	e7e7      	b.n	188c0 <_vfprintf_r+0x9f0>
   188f0:	68bb      	ldr	r3, [r7, #8]
   188f2:	46d9      	mov	r9, fp
   188f4:	2b00      	cmp	r3, #0
   188f6:	d001      	beq.n	188fc <_vfprintf_r+0xa2c>
   188f8:	f000 fd4c 	bl	19394 <_vfprintf_r+0x14c4>
   188fc:	2300      	movs	r3, #0
   188fe:	607b      	str	r3, [r7, #4]
   18900:	464b      	mov	r3, r9
   18902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   18904:	07db      	lsls	r3, r3, #31
   18906:	d40d      	bmi.n	18924 <_vfprintf_r+0xa54>
   18908:	464b      	mov	r3, r9
   1890a:	899b      	ldrh	r3, [r3, #12]
   1890c:	059a      	lsls	r2, r3, #22
   1890e:	d505      	bpl.n	1891c <_vfprintf_r+0xa4c>
   18910:	065b      	lsls	r3, r3, #25
   18912:	d401      	bmi.n	18918 <_vfprintf_r+0xa48>
   18914:	f7ff fb8d 	bl	18032 <_vfprintf_r+0x162>
   18918:	f7ff fb88 	bl	1802c <_vfprintf_r+0x15c>
   1891c:	464b      	mov	r3, r9
   1891e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18920:	f002 fbc6 	bl	1b0b0 <__retarget_lock_release_recursive>
   18924:	464b      	mov	r3, r9
   18926:	899b      	ldrh	r3, [r3, #12]
   18928:	e7f2      	b.n	18910 <_vfprintf_r+0xa40>
   1892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1892c:	9a08      	ldr	r2, [sp, #32]
   1892e:	1a9d      	subs	r5, r3, r2
   18930:	2d00      	cmp	r5, #0
   18932:	dc00      	bgt.n	18936 <_vfprintf_r+0xa66>
   18934:	e685      	b.n	18642 <_vfprintf_r+0x772>
   18936:	4a4d      	ldr	r2, [pc, #308]	; (18a6c <_vfprintf_r+0xb9c>)
   18938:	687b      	ldr	r3, [r7, #4]
   1893a:	4691      	mov	r9, r2
   1893c:	2d10      	cmp	r5, #16
   1893e:	dd24      	ble.n	1898a <_vfprintf_r+0xaba>
   18940:	2210      	movs	r2, #16
   18942:	0021      	movs	r1, r4
   18944:	4690      	mov	r8, r2
   18946:	465c      	mov	r4, fp
   18948:	0032      	movs	r2, r6
   1894a:	464e      	mov	r6, r9
   1894c:	e003      	b.n	18956 <_vfprintf_r+0xa86>
   1894e:	3d10      	subs	r5, #16
   18950:	3208      	adds	r2, #8
   18952:	2d10      	cmp	r5, #16
   18954:	dd15      	ble.n	18982 <_vfprintf_r+0xab2>
   18956:	4640      	mov	r0, r8
   18958:	3110      	adds	r1, #16
   1895a:	3301      	adds	r3, #1
   1895c:	6016      	str	r6, [r2, #0]
   1895e:	6050      	str	r0, [r2, #4]
   18960:	60b9      	str	r1, [r7, #8]
   18962:	607b      	str	r3, [r7, #4]
   18964:	2b07      	cmp	r3, #7
   18966:	ddf2      	ble.n	1894e <_vfprintf_r+0xa7e>
   18968:	003a      	movs	r2, r7
   1896a:	0021      	movs	r1, r4
   1896c:	9806      	ldr	r0, [sp, #24]
   1896e:	f003 fd1f 	bl	1c3b0 <__sprint_r>
   18972:	2800      	cmp	r0, #0
   18974:	d115      	bne.n	189a2 <_vfprintf_r+0xad2>
   18976:	3d10      	subs	r5, #16
   18978:	68b9      	ldr	r1, [r7, #8]
   1897a:	687b      	ldr	r3, [r7, #4]
   1897c:	aa32      	add	r2, sp, #200	; 0xc8
   1897e:	2d10      	cmp	r5, #16
   18980:	dce9      	bgt.n	18956 <_vfprintf_r+0xa86>
   18982:	46a3      	mov	fp, r4
   18984:	46b1      	mov	r9, r6
   18986:	000c      	movs	r4, r1
   18988:	0016      	movs	r6, r2
   1898a:	464a      	mov	r2, r9
   1898c:	1964      	adds	r4, r4, r5
   1898e:	3301      	adds	r3, #1
   18990:	6032      	str	r2, [r6, #0]
   18992:	6075      	str	r5, [r6, #4]
   18994:	60bc      	str	r4, [r7, #8]
   18996:	607b      	str	r3, [r7, #4]
   18998:	2b07      	cmp	r3, #7
   1899a:	dd00      	ble.n	1899e <_vfprintf_r+0xace>
   1899c:	e263      	b.n	18e66 <_vfprintf_r+0xf96>
   1899e:	3608      	adds	r6, #8
   189a0:	e64f      	b.n	18642 <_vfprintf_r+0x772>
   189a2:	46a1      	mov	r9, r4
   189a4:	e7ac      	b.n	18900 <_vfprintf_r+0xa30>
   189a6:	2301      	movs	r3, #1
   189a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   189aa:	4213      	tst	r3, r2
   189ac:	d000      	beq.n	189b0 <_vfprintf_r+0xae0>
   189ae:	e6f6      	b.n	1879e <_vfprintf_r+0x8ce>
   189b0:	6073      	str	r3, [r6, #4]
   189b2:	687b      	ldr	r3, [r7, #4]
   189b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   189b6:	3301      	adds	r3, #1
   189b8:	3401      	adds	r4, #1
   189ba:	6032      	str	r2, [r6, #0]
   189bc:	60bc      	str	r4, [r7, #8]
   189be:	4698      	mov	r8, r3
   189c0:	607b      	str	r3, [r7, #4]
   189c2:	2b07      	cmp	r3, #7
   189c4:	dc00      	bgt.n	189c8 <_vfprintf_r+0xaf8>
   189c6:	e71e      	b.n	18806 <_vfprintf_r+0x936>
   189c8:	003a      	movs	r2, r7
   189ca:	4659      	mov	r1, fp
   189cc:	9806      	ldr	r0, [sp, #24]
   189ce:	f003 fcef 	bl	1c3b0 <__sprint_r>
   189d2:	2800      	cmp	r0, #0
   189d4:	d10c      	bne.n	189f0 <_vfprintf_r+0xb20>
   189d6:	687b      	ldr	r3, [r7, #4]
   189d8:	68bc      	ldr	r4, [r7, #8]
   189da:	4698      	mov	r8, r3
   189dc:	ae32      	add	r6, sp, #200	; 0xc8
   189de:	e713      	b.n	18808 <_vfprintf_r+0x938>
   189e0:	003a      	movs	r2, r7
   189e2:	4659      	mov	r1, fp
   189e4:	9806      	ldr	r0, [sp, #24]
   189e6:	f003 fce3 	bl	1c3b0 <__sprint_r>
   189ea:	2800      	cmp	r0, #0
   189ec:	d100      	bne.n	189f0 <_vfprintf_r+0xb20>
   189ee:	e6cd      	b.n	1878c <_vfprintf_r+0x8bc>
   189f0:	46d9      	mov	r9, fp
   189f2:	e785      	b.n	18900 <_vfprintf_r+0xa30>
   189f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   189f6:	2b01      	cmp	r3, #1
   189f8:	d100      	bne.n	189fc <_vfprintf_r+0xb2c>
   189fa:	e148      	b.n	18c8e <_vfprintf_r+0xdbe>
   189fc:	2b02      	cmp	r3, #2
   189fe:	d123      	bne.n	18a48 <_vfprintf_r+0xb78>
   18a00:	9409      	str	r4, [sp, #36]	; 0x24
   18a02:	2300      	movs	r3, #0
   18a04:	2400      	movs	r4, #0
   18a06:	930c      	str	r3, [sp, #48]	; 0x30
   18a08:	940d      	str	r4, [sp, #52]	; 0x34
   18a0a:	e4a1      	b.n	18350 <_vfprintf_r+0x480>
   18a0c:	003a      	movs	r2, r7
   18a0e:	4659      	mov	r1, fp
   18a10:	9806      	ldr	r0, [sp, #24]
   18a12:	f003 fccd 	bl	1c3b0 <__sprint_r>
   18a16:	2800      	cmp	r0, #0
   18a18:	d1ea      	bne.n	189f0 <_vfprintf_r+0xb20>
   18a1a:	68bc      	ldr	r4, [r7, #8]
   18a1c:	ae32      	add	r6, sp, #200	; 0xc8
   18a1e:	e648      	b.n	186b2 <_vfprintf_r+0x7e2>
   18a20:	003a      	movs	r2, r7
   18a22:	4659      	mov	r1, fp
   18a24:	9806      	ldr	r0, [sp, #24]
   18a26:	f003 fcc3 	bl	1c3b0 <__sprint_r>
   18a2a:	2800      	cmp	r0, #0
   18a2c:	d1e0      	bne.n	189f0 <_vfprintf_r+0xb20>
   18a2e:	68bc      	ldr	r4, [r7, #8]
   18a30:	ae32      	add	r6, sp, #200	; 0xc8
   18a32:	e5f2      	b.n	1861a <_vfprintf_r+0x74a>
   18a34:	003a      	movs	r2, r7
   18a36:	4659      	mov	r1, fp
   18a38:	9806      	ldr	r0, [sp, #24]
   18a3a:	f003 fcb9 	bl	1c3b0 <__sprint_r>
   18a3e:	2800      	cmp	r0, #0
   18a40:	d1d6      	bne.n	189f0 <_vfprintf_r+0xb20>
   18a42:	68bc      	ldr	r4, [r7, #8]
   18a44:	ae32      	add	r6, sp, #200	; 0xc8
   18a46:	e5f8      	b.n	1863a <_vfprintf_r+0x76a>
   18a48:	9409      	str	r4, [sp, #36]	; 0x24
   18a4a:	2300      	movs	r3, #0
   18a4c:	2400      	movs	r4, #0
   18a4e:	930c      	str	r3, [sp, #48]	; 0x30
   18a50:	940d      	str	r4, [sp, #52]	; 0x34
   18a52:	980c      	ldr	r0, [sp, #48]	; 0x30
   18a54:	990d      	ldr	r1, [sp, #52]	; 0x34
   18a56:	4653      	mov	r3, sl
   18a58:	aa32      	add	r2, sp, #200	; 0xc8
   18a5a:	4691      	mov	r9, r2
   18a5c:	9308      	str	r3, [sp, #32]
   18a5e:	46b2      	mov	sl, r6
   18a60:	e007      	b.n	18a72 <_vfprintf_r+0xba2>
   18a62:	46c0      	nop			; (mov r8, r8)
   18a64:	0001e3fc 	.word	0x0001e3fc
   18a68:	0001d658 	.word	0x0001d658
   18a6c:	0001e40c 	.word	0x0001e40c
   18a70:	46a1      	mov	r9, r4
   18a72:	074a      	lsls	r2, r1, #29
   18a74:	4694      	mov	ip, r2
   18a76:	464b      	mov	r3, r9
   18a78:	4665      	mov	r5, ip
   18a7a:	1e5c      	subs	r4, r3, #1
   18a7c:	08c6      	lsrs	r6, r0, #3
   18a7e:	2307      	movs	r3, #7
   18a80:	08ca      	lsrs	r2, r1, #3
   18a82:	4335      	orrs	r5, r6
   18a84:	0011      	movs	r1, r2
   18a86:	002a      	movs	r2, r5
   18a88:	4003      	ands	r3, r0
   18a8a:	3330      	adds	r3, #48	; 0x30
   18a8c:	7023      	strb	r3, [r4, #0]
   18a8e:	0028      	movs	r0, r5
   18a90:	430a      	orrs	r2, r1
   18a92:	d1ed      	bne.n	18a70 <_vfprintf_r+0xba0>
   18a94:	900c      	str	r0, [sp, #48]	; 0x30
   18a96:	910d      	str	r1, [sp, #52]	; 0x34
   18a98:	9908      	ldr	r1, [sp, #32]
   18a9a:	4656      	mov	r6, sl
   18a9c:	468a      	mov	sl, r1
   18a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   18aa0:	464a      	mov	r2, r9
   18aa2:	9411      	str	r4, [sp, #68]	; 0x44
   18aa4:	07c9      	lsls	r1, r1, #31
   18aa6:	d500      	bpl.n	18aaa <_vfprintf_r+0xbda>
   18aa8:	e0e0      	b.n	18c6c <_vfprintf_r+0xd9c>
   18aaa:	ab32      	add	r3, sp, #200	; 0xc8
   18aac:	1b1b      	subs	r3, r3, r4
   18aae:	930e      	str	r3, [sp, #56]	; 0x38
   18ab0:	f7ff fb7b 	bl	181aa <_vfprintf_r+0x2da>
   18ab4:	9c07      	ldr	r4, [sp, #28]
   18ab6:	f7ff fa7d 	bl	17fb4 <_vfprintf_r+0xe4>
   18aba:	981f      	ldr	r0, [sp, #124]	; 0x7c
   18abc:	2800      	cmp	r0, #0
   18abe:	dc00      	bgt.n	18ac2 <_vfprintf_r+0xbf2>
   18ac0:	e2b9      	b.n	19036 <_vfprintf_r+0x1166>
   18ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18ac4:	9914      	ldr	r1, [sp, #80]	; 0x50
   18ac6:	0013      	movs	r3, r2
   18ac8:	4690      	mov	r8, r2
   18aca:	428b      	cmp	r3, r1
   18acc:	dd00      	ble.n	18ad0 <_vfprintf_r+0xc00>
   18ace:	4688      	mov	r8, r1
   18ad0:	4643      	mov	r3, r8
   18ad2:	2b00      	cmp	r3, #0
   18ad4:	dd0c      	ble.n	18af0 <_vfprintf_r+0xc20>
   18ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18ad8:	4444      	add	r4, r8
   18ada:	6033      	str	r3, [r6, #0]
   18adc:	4643      	mov	r3, r8
   18ade:	6073      	str	r3, [r6, #4]
   18ae0:	687b      	ldr	r3, [r7, #4]
   18ae2:	60bc      	str	r4, [r7, #8]
   18ae4:	3301      	adds	r3, #1
   18ae6:	607b      	str	r3, [r7, #4]
   18ae8:	2b07      	cmp	r3, #7
   18aea:	dd00      	ble.n	18aee <_vfprintf_r+0xc1e>
   18aec:	e389      	b.n	19202 <_vfprintf_r+0x1332>
   18aee:	3608      	adds	r6, #8
   18af0:	4643      	mov	r3, r8
   18af2:	43db      	mvns	r3, r3
   18af4:	4642      	mov	r2, r8
   18af6:	17db      	asrs	r3, r3, #31
   18af8:	4013      	ands	r3, r2
   18afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18afc:	1ad3      	subs	r3, r2, r3
   18afe:	4698      	mov	r8, r3
   18b00:	2b00      	cmp	r3, #0
   18b02:	dc00      	bgt.n	18b06 <_vfprintf_r+0xc36>
   18b04:	e0eb      	b.n	18cde <_vfprintf_r+0xe0e>
   18b06:	2b10      	cmp	r3, #16
   18b08:	dc01      	bgt.n	18b0e <_vfprintf_r+0xc3e>
   18b0a:	f000 fcd9 	bl	194c0 <_vfprintf_r+0x15f0>
   18b0e:	4adc      	ldr	r2, [pc, #880]	; (18e80 <_vfprintf_r+0xfb0>)
   18b10:	687b      	ldr	r3, [r7, #4]
   18b12:	4691      	mov	r9, r2
   18b14:	2210      	movs	r2, #16
   18b16:	464d      	mov	r5, r9
   18b18:	4692      	mov	sl, r2
   18b1a:	0022      	movs	r2, r4
   18b1c:	4644      	mov	r4, r8
   18b1e:	46d8      	mov	r8, fp
   18b20:	e004      	b.n	18b2c <_vfprintf_r+0xc5c>
   18b22:	3608      	adds	r6, #8
   18b24:	3c10      	subs	r4, #16
   18b26:	2c10      	cmp	r4, #16
   18b28:	dc00      	bgt.n	18b2c <_vfprintf_r+0xc5c>
   18b2a:	e0bf      	b.n	18cac <_vfprintf_r+0xddc>
   18b2c:	4651      	mov	r1, sl
   18b2e:	3210      	adds	r2, #16
   18b30:	3301      	adds	r3, #1
   18b32:	6035      	str	r5, [r6, #0]
   18b34:	6071      	str	r1, [r6, #4]
   18b36:	60ba      	str	r2, [r7, #8]
   18b38:	607b      	str	r3, [r7, #4]
   18b3a:	2b07      	cmp	r3, #7
   18b3c:	ddf1      	ble.n	18b22 <_vfprintf_r+0xc52>
   18b3e:	003a      	movs	r2, r7
   18b40:	4641      	mov	r1, r8
   18b42:	9806      	ldr	r0, [sp, #24]
   18b44:	f003 fc34 	bl	1c3b0 <__sprint_r>
   18b48:	2800      	cmp	r0, #0
   18b4a:	d000      	beq.n	18b4e <_vfprintf_r+0xc7e>
   18b4c:	e3b6      	b.n	192bc <_vfprintf_r+0x13ec>
   18b4e:	68ba      	ldr	r2, [r7, #8]
   18b50:	687b      	ldr	r3, [r7, #4]
   18b52:	ae32      	add	r6, sp, #200	; 0xc8
   18b54:	e7e6      	b.n	18b24 <_vfprintf_r+0xc54>
   18b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18b58:	2b00      	cmp	r3, #0
   18b5a:	d100      	bne.n	18b5e <_vfprintf_r+0xc8e>
   18b5c:	e092      	b.n	18c84 <_vfprintf_r+0xdb4>
   18b5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18b60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18b62:	ab32      	add	r3, sp, #200	; 0xc8
   18b64:	46b1      	mov	r9, r6
   18b66:	001e      	movs	r6, r3
   18b68:	0020      	movs	r0, r4
   18b6a:	0029      	movs	r1, r5
   18b6c:	220a      	movs	r2, #10
   18b6e:	2300      	movs	r3, #0
   18b70:	f7fb feb8 	bl	148e4 <__aeabi_uldivmod>
   18b74:	3e01      	subs	r6, #1
   18b76:	3230      	adds	r2, #48	; 0x30
   18b78:	7032      	strb	r2, [r6, #0]
   18b7a:	2300      	movs	r3, #0
   18b7c:	0020      	movs	r0, r4
   18b7e:	0029      	movs	r1, r5
   18b80:	220a      	movs	r2, #10
   18b82:	f7fb feaf 	bl	148e4 <__aeabi_uldivmod>
   18b86:	0003      	movs	r3, r0
   18b88:	0004      	movs	r4, r0
   18b8a:	000d      	movs	r5, r1
   18b8c:	430b      	orrs	r3, r1
   18b8e:	d1eb      	bne.n	18b68 <_vfprintf_r+0xc98>
   18b90:	0032      	movs	r2, r6
   18b92:	ab32      	add	r3, sp, #200	; 0xc8
   18b94:	1a9b      	subs	r3, r3, r2
   18b96:	9611      	str	r6, [sp, #68]	; 0x44
   18b98:	940c      	str	r4, [sp, #48]	; 0x30
   18b9a:	950d      	str	r5, [sp, #52]	; 0x34
   18b9c:	464e      	mov	r6, r9
   18b9e:	930e      	str	r3, [sp, #56]	; 0x38
   18ba0:	f7ff fb03 	bl	181aa <_vfprintf_r+0x2da>
   18ba4:	2300      	movs	r3, #0
   18ba6:	930e      	str	r3, [sp, #56]	; 0x38
   18ba8:	ab32      	add	r3, sp, #200	; 0xc8
   18baa:	9311      	str	r3, [sp, #68]	; 0x44
   18bac:	f7ff fafd 	bl	181aa <_vfprintf_r+0x2da>
   18bb0:	003a      	movs	r2, r7
   18bb2:	4659      	mov	r1, fp
   18bb4:	9806      	ldr	r0, [sp, #24]
   18bb6:	f003 fbfb 	bl	1c3b0 <__sprint_r>
   18bba:	2800      	cmp	r0, #0
   18bbc:	d000      	beq.n	18bc0 <_vfprintf_r+0xcf0>
   18bbe:	e717      	b.n	189f0 <_vfprintf_r+0xb20>
   18bc0:	ab16      	add	r3, sp, #88	; 0x58
   18bc2:	7fdb      	ldrb	r3, [r3, #31]
   18bc4:	68bc      	ldr	r4, [r7, #8]
   18bc6:	4698      	mov	r8, r3
   18bc8:	ae32      	add	r6, sp, #200	; 0xc8
   18bca:	e513      	b.n	185f4 <_vfprintf_r+0x724>
   18bcc:	46b1      	mov	r9, r6
   18bce:	e697      	b.n	18900 <_vfprintf_r+0xa30>
   18bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18bd2:	1e5d      	subs	r5, r3, #1
   18bd4:	2d00      	cmp	r5, #0
   18bd6:	dc00      	bgt.n	18bda <_vfprintf_r+0xd0a>
   18bd8:	e616      	b.n	18808 <_vfprintf_r+0x938>
   18bda:	4ba9      	ldr	r3, [pc, #676]	; (18e80 <_vfprintf_r+0xfb0>)
   18bdc:	4699      	mov	r9, r3
   18bde:	2d10      	cmp	r5, #16
   18be0:	dc00      	bgt.n	18be4 <_vfprintf_r+0xd14>
   18be2:	e10a      	b.n	18dfa <_vfprintf_r+0xf2a>
   18be4:	2310      	movs	r3, #16
   18be6:	0022      	movs	r2, r4
   18be8:	469a      	mov	sl, r3
   18bea:	465c      	mov	r4, fp
   18bec:	4643      	mov	r3, r8
   18bee:	e004      	b.n	18bfa <_vfprintf_r+0xd2a>
   18bf0:	3608      	adds	r6, #8
   18bf2:	3d10      	subs	r5, #16
   18bf4:	2d10      	cmp	r5, #16
   18bf6:	dc00      	bgt.n	18bfa <_vfprintf_r+0xd2a>
   18bf8:	e0fc      	b.n	18df4 <_vfprintf_r+0xf24>
   18bfa:	4649      	mov	r1, r9
   18bfc:	6031      	str	r1, [r6, #0]
   18bfe:	4651      	mov	r1, sl
   18c00:	3210      	adds	r2, #16
   18c02:	3301      	adds	r3, #1
   18c04:	6071      	str	r1, [r6, #4]
   18c06:	60ba      	str	r2, [r7, #8]
   18c08:	607b      	str	r3, [r7, #4]
   18c0a:	2b07      	cmp	r3, #7
   18c0c:	ddf0      	ble.n	18bf0 <_vfprintf_r+0xd20>
   18c0e:	003a      	movs	r2, r7
   18c10:	0021      	movs	r1, r4
   18c12:	9806      	ldr	r0, [sp, #24]
   18c14:	f003 fbcc 	bl	1c3b0 <__sprint_r>
   18c18:	2800      	cmp	r0, #0
   18c1a:	d000      	beq.n	18c1e <_vfprintf_r+0xd4e>
   18c1c:	e6c1      	b.n	189a2 <_vfprintf_r+0xad2>
   18c1e:	68ba      	ldr	r2, [r7, #8]
   18c20:	687b      	ldr	r3, [r7, #4]
   18c22:	ae32      	add	r6, sp, #200	; 0xc8
   18c24:	e7e5      	b.n	18bf2 <_vfprintf_r+0xd22>
   18c26:	990c      	ldr	r1, [sp, #48]	; 0x30
   18c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18c2a:	0008      	movs	r0, r1
   18c2c:	4310      	orrs	r0, r2
   18c2e:	2302      	movs	r3, #2
   18c30:	0002      	movs	r2, r0
   18c32:	f7ff fa93 	bl	1815c <_vfprintf_r+0x28c>
   18c36:	46a3      	mov	fp, r4
   18c38:	0014      	movs	r4, r2
   18c3a:	464a      	mov	r2, r9
   18c3c:	1964      	adds	r4, r4, r5
   18c3e:	3301      	adds	r3, #1
   18c40:	6032      	str	r2, [r6, #0]
   18c42:	6075      	str	r5, [r6, #4]
   18c44:	60bc      	str	r4, [r7, #8]
   18c46:	607b      	str	r3, [r7, #4]
   18c48:	2b07      	cmp	r3, #7
   18c4a:	dc00      	bgt.n	18c4e <_vfprintf_r+0xd7e>
   18c4c:	e542      	b.n	186d4 <_vfprintf_r+0x804>
   18c4e:	e5e8      	b.n	18822 <_vfprintf_r+0x952>
   18c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c52:	681a      	ldr	r2, [r3, #0]
   18c54:	f7ff fa68 	bl	18128 <_vfprintf_r+0x258>
   18c58:	6813      	ldr	r3, [r2, #0]
   18c5a:	9308      	str	r3, [sp, #32]
   18c5c:	f7ff fb57 	bl	1830e <_vfprintf_r+0x43e>
   18c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c62:	681a      	ldr	r2, [r3, #0]
   18c64:	e412      	b.n	1848c <_vfprintf_r+0x5bc>
   18c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c68:	681a      	ldr	r2, [r3, #0]
   18c6a:	e426      	b.n	184ba <_vfprintf_r+0x5ea>
   18c6c:	2b30      	cmp	r3, #48	; 0x30
   18c6e:	d100      	bne.n	18c72 <_vfprintf_r+0xda2>
   18c70:	e23c      	b.n	190ec <_vfprintf_r+0x121c>
   18c72:	2330      	movs	r3, #48	; 0x30
   18c74:	3a02      	subs	r2, #2
   18c76:	7013      	strb	r3, [r2, #0]
   18c78:	ab32      	add	r3, sp, #200	; 0xc8
   18c7a:	1a9b      	subs	r3, r3, r2
   18c7c:	930e      	str	r3, [sp, #56]	; 0x38
   18c7e:	9211      	str	r2, [sp, #68]	; 0x44
   18c80:	f7ff fa93 	bl	181aa <_vfprintf_r+0x2da>
   18c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18c86:	2b09      	cmp	r3, #9
   18c88:	d900      	bls.n	18c8c <_vfprintf_r+0xdbc>
   18c8a:	e768      	b.n	18b5e <_vfprintf_r+0xc8e>
   18c8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18c8e:	2227      	movs	r2, #39	; 0x27
   18c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18c92:	a928      	add	r1, sp, #160	; 0xa0
   18c94:	3330      	adds	r3, #48	; 0x30
   18c96:	548b      	strb	r3, [r1, r2]
   18c98:	2301      	movs	r3, #1
   18c9a:	aa16      	add	r2, sp, #88	; 0x58
   18c9c:	4694      	mov	ip, r2
   18c9e:	930e      	str	r3, [sp, #56]	; 0x38
   18ca0:	336e      	adds	r3, #110	; 0x6e
   18ca2:	4463      	add	r3, ip
   18ca4:	9409      	str	r4, [sp, #36]	; 0x24
   18ca6:	9311      	str	r3, [sp, #68]	; 0x44
   18ca8:	f7ff fa7f 	bl	181aa <_vfprintf_r+0x2da>
   18cac:	46c3      	mov	fp, r8
   18cae:	46a9      	mov	r9, r5
   18cb0:	46a0      	mov	r8, r4
   18cb2:	0014      	movs	r4, r2
   18cb4:	464a      	mov	r2, r9
   18cb6:	6032      	str	r2, [r6, #0]
   18cb8:	4642      	mov	r2, r8
   18cba:	4444      	add	r4, r8
   18cbc:	3301      	adds	r3, #1
   18cbe:	6072      	str	r2, [r6, #4]
   18cc0:	60bc      	str	r4, [r7, #8]
   18cc2:	607b      	str	r3, [r7, #4]
   18cc4:	2b07      	cmp	r3, #7
   18cc6:	dc00      	bgt.n	18cca <_vfprintf_r+0xdfa>
   18cc8:	e18d      	b.n	18fe6 <_vfprintf_r+0x1116>
   18cca:	003a      	movs	r2, r7
   18ccc:	4659      	mov	r1, fp
   18cce:	9806      	ldr	r0, [sp, #24]
   18cd0:	f003 fb6e 	bl	1c3b0 <__sprint_r>
   18cd4:	2800      	cmp	r0, #0
   18cd6:	d000      	beq.n	18cda <_vfprintf_r+0xe0a>
   18cd8:	e68a      	b.n	189f0 <_vfprintf_r+0xb20>
   18cda:	68bc      	ldr	r4, [r7, #8]
   18cdc:	ae32      	add	r6, sp, #200	; 0xc8
   18cde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18ce2:	4293      	cmp	r3, r2
   18ce4:	db00      	blt.n	18ce8 <_vfprintf_r+0xe18>
   18ce6:	e179      	b.n	18fdc <_vfprintf_r+0x110c>
   18ce8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   18cea:	6032      	str	r2, [r6, #0]
   18cec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18cee:	4694      	mov	ip, r2
   18cf0:	6072      	str	r2, [r6, #4]
   18cf2:	687a      	ldr	r2, [r7, #4]
   18cf4:	4464      	add	r4, ip
   18cf6:	3201      	adds	r2, #1
   18cf8:	60bc      	str	r4, [r7, #8]
   18cfa:	607a      	str	r2, [r7, #4]
   18cfc:	2a07      	cmp	r2, #7
   18cfe:	dd00      	ble.n	18d02 <_vfprintf_r+0xe32>
   18d00:	e176      	b.n	18ff0 <_vfprintf_r+0x1120>
   18d02:	3608      	adds	r6, #8
   18d04:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18d06:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18d08:	1ad3      	subs	r3, r2, r3
   18d0a:	1a52      	subs	r2, r2, r1
   18d0c:	4690      	mov	r8, r2
   18d0e:	429a      	cmp	r2, r3
   18d10:	dd00      	ble.n	18d14 <_vfprintf_r+0xe44>
   18d12:	4698      	mov	r8, r3
   18d14:	4642      	mov	r2, r8
   18d16:	2a00      	cmp	r2, #0
   18d18:	dd0f      	ble.n	18d3a <_vfprintf_r+0xe6a>
   18d1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18d1e:	468c      	mov	ip, r1
   18d20:	4462      	add	r2, ip
   18d22:	6032      	str	r2, [r6, #0]
   18d24:	4642      	mov	r2, r8
   18d26:	6072      	str	r2, [r6, #4]
   18d28:	687a      	ldr	r2, [r7, #4]
   18d2a:	4444      	add	r4, r8
   18d2c:	3201      	adds	r2, #1
   18d2e:	60bc      	str	r4, [r7, #8]
   18d30:	607a      	str	r2, [r7, #4]
   18d32:	2a07      	cmp	r2, #7
   18d34:	dd00      	ble.n	18d38 <_vfprintf_r+0xe68>
   18d36:	e289      	b.n	1924c <_vfprintf_r+0x137c>
   18d38:	3608      	adds	r6, #8
   18d3a:	4642      	mov	r2, r8
   18d3c:	43d5      	mvns	r5, r2
   18d3e:	17ed      	asrs	r5, r5, #31
   18d40:	4015      	ands	r5, r2
   18d42:	1b5d      	subs	r5, r3, r5
   18d44:	2d00      	cmp	r5, #0
   18d46:	dc00      	bgt.n	18d4a <_vfprintf_r+0xe7a>
   18d48:	e4c5      	b.n	186d6 <_vfprintf_r+0x806>
   18d4a:	4a4d      	ldr	r2, [pc, #308]	; (18e80 <_vfprintf_r+0xfb0>)
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	4691      	mov	r9, r2
   18d50:	2d10      	cmp	r5, #16
   18d52:	dc00      	bgt.n	18d56 <_vfprintf_r+0xe86>
   18d54:	e771      	b.n	18c3a <_vfprintf_r+0xd6a>
   18d56:	2210      	movs	r2, #16
   18d58:	4690      	mov	r8, r2
   18d5a:	0022      	movs	r2, r4
   18d5c:	465c      	mov	r4, fp
   18d5e:	e004      	b.n	18d6a <_vfprintf_r+0xe9a>
   18d60:	3608      	adds	r6, #8
   18d62:	3d10      	subs	r5, #16
   18d64:	2d10      	cmp	r5, #16
   18d66:	dc00      	bgt.n	18d6a <_vfprintf_r+0xe9a>
   18d68:	e765      	b.n	18c36 <_vfprintf_r+0xd66>
   18d6a:	4649      	mov	r1, r9
   18d6c:	6031      	str	r1, [r6, #0]
   18d6e:	4641      	mov	r1, r8
   18d70:	3210      	adds	r2, #16
   18d72:	3301      	adds	r3, #1
   18d74:	6071      	str	r1, [r6, #4]
   18d76:	60ba      	str	r2, [r7, #8]
   18d78:	607b      	str	r3, [r7, #4]
   18d7a:	2b07      	cmp	r3, #7
   18d7c:	ddf0      	ble.n	18d60 <_vfprintf_r+0xe90>
   18d7e:	003a      	movs	r2, r7
   18d80:	0021      	movs	r1, r4
   18d82:	9806      	ldr	r0, [sp, #24]
   18d84:	f003 fb14 	bl	1c3b0 <__sprint_r>
   18d88:	2800      	cmp	r0, #0
   18d8a:	d000      	beq.n	18d8e <_vfprintf_r+0xebe>
   18d8c:	e609      	b.n	189a2 <_vfprintf_r+0xad2>
   18d8e:	68ba      	ldr	r2, [r7, #8]
   18d90:	687b      	ldr	r3, [r7, #4]
   18d92:	ae32      	add	r6, sp, #200	; 0xc8
   18d94:	e7e5      	b.n	18d62 <_vfprintf_r+0xe92>
   18d96:	003a      	movs	r2, r7
   18d98:	4659      	mov	r1, fp
   18d9a:	9806      	ldr	r0, [sp, #24]
   18d9c:	f003 fb08 	bl	1c3b0 <__sprint_r>
   18da0:	2800      	cmp	r0, #0
   18da2:	d000      	beq.n	18da6 <_vfprintf_r+0xed6>
   18da4:	e624      	b.n	189f0 <_vfprintf_r+0xb20>
   18da6:	68bc      	ldr	r4, [r7, #8]
   18da8:	687b      	ldr	r3, [r7, #4]
   18daa:	ae32      	add	r6, sp, #200	; 0xc8
   18dac:	e504      	b.n	187b8 <_vfprintf_r+0x8e8>
   18dae:	2307      	movs	r3, #7
   18db0:	3207      	adds	r2, #7
   18db2:	439a      	bics	r2, r3
   18db4:	3301      	adds	r3, #1
   18db6:	469c      	mov	ip, r3
   18db8:	4494      	add	ip, r2
   18dba:	4663      	mov	r3, ip
   18dbc:	930f      	str	r3, [sp, #60]	; 0x3c
   18dbe:	6853      	ldr	r3, [r2, #4]
   18dc0:	6812      	ldr	r2, [r2, #0]
   18dc2:	930d      	str	r3, [sp, #52]	; 0x34
   18dc4:	920c      	str	r2, [sp, #48]	; 0x30
   18dc6:	f7ff faa7 	bl	18318 <_vfprintf_r+0x448>
   18dca:	2207      	movs	r2, #7
   18dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18dce:	3307      	adds	r3, #7
   18dd0:	4393      	bics	r3, r2
   18dd2:	3201      	adds	r2, #1
   18dd4:	4694      	mov	ip, r2
   18dd6:	449c      	add	ip, r3
   18dd8:	4662      	mov	r2, ip
   18dda:	920f      	str	r2, [sp, #60]	; 0x3c
   18ddc:	681a      	ldr	r2, [r3, #0]
   18dde:	685b      	ldr	r3, [r3, #4]
   18de0:	0011      	movs	r1, r2
   18de2:	001a      	movs	r2, r3
   18de4:	0008      	movs	r0, r1
   18de6:	4310      	orrs	r0, r2
   18de8:	910c      	str	r1, [sp, #48]	; 0x30
   18dea:	920d      	str	r2, [sp, #52]	; 0x34
   18dec:	2300      	movs	r3, #0
   18dee:	0002      	movs	r2, r0
   18df0:	f7ff f9b4 	bl	1815c <_vfprintf_r+0x28c>
   18df4:	46a3      	mov	fp, r4
   18df6:	4698      	mov	r8, r3
   18df8:	0014      	movs	r4, r2
   18dfa:	464b      	mov	r3, r9
   18dfc:	6075      	str	r5, [r6, #4]
   18dfe:	6033      	str	r3, [r6, #0]
   18e00:	1964      	adds	r4, r4, r5
   18e02:	e4f7      	b.n	187f4 <_vfprintf_r+0x924>
   18e04:	003a      	movs	r2, r7
   18e06:	4659      	mov	r1, fp
   18e08:	9806      	ldr	r0, [sp, #24]
   18e0a:	f003 fad1 	bl	1c3b0 <__sprint_r>
   18e0e:	2800      	cmp	r0, #0
   18e10:	d000      	beq.n	18e14 <_vfprintf_r+0xf44>
   18e12:	e5ed      	b.n	189f0 <_vfprintf_r+0xb20>
   18e14:	687b      	ldr	r3, [r7, #4]
   18e16:	68bc      	ldr	r4, [r7, #8]
   18e18:	4698      	mov	r8, r3
   18e1a:	ae32      	add	r6, sp, #200	; 0xc8
   18e1c:	e4da      	b.n	187d4 <_vfprintf_r+0x904>
   18e1e:	2207      	movs	r2, #7
   18e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18e22:	3307      	adds	r3, #7
   18e24:	4393      	bics	r3, r2
   18e26:	3201      	adds	r2, #1
   18e28:	4694      	mov	ip, r2
   18e2a:	449c      	add	ip, r3
   18e2c:	4662      	mov	r2, ip
   18e2e:	920f      	str	r2, [sp, #60]	; 0x3c
   18e30:	681a      	ldr	r2, [r3, #0]
   18e32:	685b      	ldr	r3, [r3, #4]
   18e34:	0011      	movs	r1, r2
   18e36:	001a      	movs	r2, r3
   18e38:	0008      	movs	r0, r1
   18e3a:	4310      	orrs	r0, r2
   18e3c:	910c      	str	r1, [sp, #48]	; 0x30
   18e3e:	920d      	str	r2, [sp, #52]	; 0x34
   18e40:	2301      	movs	r3, #1
   18e42:	0002      	movs	r2, r0
   18e44:	f7ff f98a 	bl	1815c <_vfprintf_r+0x28c>
   18e48:	2207      	movs	r2, #7
   18e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18e4c:	3307      	adds	r3, #7
   18e4e:	4393      	bics	r3, r2
   18e50:	3201      	adds	r2, #1
   18e52:	4694      	mov	ip, r2
   18e54:	449c      	add	ip, r3
   18e56:	4662      	mov	r2, ip
   18e58:	920f      	str	r2, [sp, #60]	; 0x3c
   18e5a:	681a      	ldr	r2, [r3, #0]
   18e5c:	685b      	ldr	r3, [r3, #4]
   18e5e:	920c      	str	r2, [sp, #48]	; 0x30
   18e60:	930d      	str	r3, [sp, #52]	; 0x34
   18e62:	f7ff f966 	bl	18132 <_vfprintf_r+0x262>
   18e66:	003a      	movs	r2, r7
   18e68:	4659      	mov	r1, fp
   18e6a:	9806      	ldr	r0, [sp, #24]
   18e6c:	f003 faa0 	bl	1c3b0 <__sprint_r>
   18e70:	2800      	cmp	r0, #0
   18e72:	d000      	beq.n	18e76 <_vfprintf_r+0xfa6>
   18e74:	e5bc      	b.n	189f0 <_vfprintf_r+0xb20>
   18e76:	68bc      	ldr	r4, [r7, #8]
   18e78:	ae32      	add	r6, sp, #200	; 0xc8
   18e7a:	f7ff fbe2 	bl	18642 <_vfprintf_r+0x772>
   18e7e:	46c0      	nop			; (mov r8, r8)
   18e80:	0001e40c 	.word	0x0001e40c
   18e84:	980c      	ldr	r0, [sp, #48]	; 0x30
   18e86:	990d      	ldr	r1, [sp, #52]	; 0x34
   18e88:	2300      	movs	r3, #0
   18e8a:	4242      	negs	r2, r0
   18e8c:	418b      	sbcs	r3, r1
   18e8e:	0011      	movs	r1, r2
   18e90:	001a      	movs	r2, r3
   18e92:	232d      	movs	r3, #45	; 0x2d
   18e94:	a816      	add	r0, sp, #88	; 0x58
   18e96:	77c3      	strb	r3, [r0, #31]
   18e98:	0008      	movs	r0, r1
   18e9a:	4310      	orrs	r0, r2
   18e9c:	910c      	str	r1, [sp, #48]	; 0x30
   18e9e:	920d      	str	r2, [sp, #52]	; 0x34
   18ea0:	4698      	mov	r8, r3
   18ea2:	0002      	movs	r2, r0
   18ea4:	3b2c      	subs	r3, #44	; 0x2c
   18ea6:	f7ff f95d 	bl	18164 <_vfprintf_r+0x294>
   18eaa:	9916      	ldr	r1, [sp, #88]	; 0x58
   18eac:	9d15      	ldr	r5, [sp, #84]	; 0x54
   18eae:	000a      	movs	r2, r1
   18eb0:	0008      	movs	r0, r1
   18eb2:	002b      	movs	r3, r5
   18eb4:	0029      	movs	r1, r5
   18eb6:	f003 fd07 	bl	1c8c8 <__aeabi_dcmpun>
   18eba:	2800      	cmp	r0, #0
   18ebc:	d000      	beq.n	18ec0 <_vfprintf_r+0xff0>
   18ebe:	e2c6      	b.n	1944e <_vfprintf_r+0x157e>
   18ec0:	4653      	mov	r3, sl
   18ec2:	3301      	adds	r3, #1
   18ec4:	d100      	bne.n	18ec8 <_vfprintf_r+0xff8>
   18ec6:	e09f      	b.n	19008 <_vfprintf_r+0x1138>
   18ec8:	2320      	movs	r3, #32
   18eca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18ecc:	439a      	bics	r2, r3
   18ece:	920e      	str	r2, [sp, #56]	; 0x38
   18ed0:	2a47      	cmp	r2, #71	; 0x47
   18ed2:	d100      	bne.n	18ed6 <_vfprintf_r+0x1006>
   18ed4:	e1a1      	b.n	1921a <_vfprintf_r+0x134a>
   18ed6:	2380      	movs	r3, #128	; 0x80
   18ed8:	005b      	lsls	r3, r3, #1
   18eda:	4323      	orrs	r3, r4
   18edc:	9309      	str	r3, [sp, #36]	; 0x24
   18ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18ee0:	2b00      	cmp	r3, #0
   18ee2:	da00      	bge.n	18ee6 <_vfprintf_r+0x1016>
   18ee4:	e1ed      	b.n	192c2 <_vfprintf_r+0x13f2>
   18ee6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18ee8:	9308      	str	r3, [sp, #32]
   18eea:	2300      	movs	r3, #0
   18eec:	4691      	mov	r9, r2
   18eee:	9310      	str	r3, [sp, #64]	; 0x40
   18ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18ef2:	2b66      	cmp	r3, #102	; 0x66
   18ef4:	d100      	bne.n	18ef8 <_vfprintf_r+0x1028>
   18ef6:	e1b8      	b.n	1926a <_vfprintf_r+0x139a>
   18ef8:	2b46      	cmp	r3, #70	; 0x46
   18efa:	d100      	bne.n	18efe <_vfprintf_r+0x102e>
   18efc:	e237      	b.n	1936e <_vfprintf_r+0x149e>
   18efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18f00:	9806      	ldr	r0, [sp, #24]
   18f02:	3a45      	subs	r2, #69	; 0x45
   18f04:	0013      	movs	r3, r2
   18f06:	4259      	negs	r1, r3
   18f08:	4159      	adcs	r1, r3
   18f0a:	ab20      	add	r3, sp, #128	; 0x80
   18f0c:	000d      	movs	r5, r1
   18f0e:	9303      	str	r3, [sp, #12]
   18f10:	ab1f      	add	r3, sp, #124	; 0x7c
   18f12:	9302      	str	r3, [sp, #8]
   18f14:	2302      	movs	r3, #2
   18f16:	aa23      	add	r2, sp, #140	; 0x8c
   18f18:	4455      	add	r5, sl
   18f1a:	921b      	str	r2, [sp, #108]	; 0x6c
   18f1c:	9204      	str	r2, [sp, #16]
   18f1e:	9300      	str	r3, [sp, #0]
   18f20:	9501      	str	r5, [sp, #4]
   18f22:	9b08      	ldr	r3, [sp, #32]
   18f24:	464a      	mov	r2, r9
   18f26:	f000 fcb9 	bl	1989c <_dtoa_r>
   18f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18f2c:	9011      	str	r0, [sp, #68]	; 0x44
   18f2e:	2b67      	cmp	r3, #103	; 0x67
   18f30:	d000      	beq.n	18f34 <_vfprintf_r+0x1064>
   18f32:	e20b      	b.n	1934c <_vfprintf_r+0x147c>
   18f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18f36:	4698      	mov	r8, r3
   18f38:	44a8      	add	r8, r5
   18f3a:	07e3      	lsls	r3, r4, #31
   18f3c:	d400      	bmi.n	18f40 <_vfprintf_r+0x1070>
   18f3e:	e277      	b.n	19430 <_vfprintf_r+0x1560>
   18f40:	2300      	movs	r3, #0
   18f42:	2200      	movs	r2, #0
   18f44:	4648      	mov	r0, r9
   18f46:	9908      	ldr	r1, [sp, #32]
   18f48:	f7fb fc64 	bl	14814 <__aeabi_dcmpeq>
   18f4c:	4643      	mov	r3, r8
   18f4e:	2800      	cmp	r0, #0
   18f50:	d10a      	bne.n	18f68 <_vfprintf_r+0x1098>
   18f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18f54:	4543      	cmp	r3, r8
   18f56:	d207      	bcs.n	18f68 <_vfprintf_r+0x1098>
   18f58:	2130      	movs	r1, #48	; 0x30
   18f5a:	4640      	mov	r0, r8
   18f5c:	1c5a      	adds	r2, r3, #1
   18f5e:	9223      	str	r2, [sp, #140]	; 0x8c
   18f60:	7019      	strb	r1, [r3, #0]
   18f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18f64:	4298      	cmp	r0, r3
   18f66:	d8f9      	bhi.n	18f5c <_vfprintf_r+0x108c>
   18f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18f6a:	1a9b      	subs	r3, r3, r2
   18f6c:	9314      	str	r3, [sp, #80]	; 0x50
   18f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18f70:	2b47      	cmp	r3, #71	; 0x47
   18f72:	d100      	bne.n	18f76 <_vfprintf_r+0x10a6>
   18f74:	e0d0      	b.n	19118 <_vfprintf_r+0x1248>
   18f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18f78:	2b65      	cmp	r3, #101	; 0x65
   18f7a:	dc00      	bgt.n	18f7e <_vfprintf_r+0x10ae>
   18f7c:	e2d5      	b.n	1952a <_vfprintf_r+0x165a>
   18f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18f80:	2b66      	cmp	r3, #102	; 0x66
   18f82:	d100      	bne.n	18f86 <_vfprintf_r+0x10b6>
   18f84:	e1c6      	b.n	19314 <_vfprintf_r+0x1444>
   18f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18f88:	9313      	str	r3, [sp, #76]	; 0x4c
   18f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18f8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18f8e:	0019      	movs	r1, r3
   18f90:	4291      	cmp	r1, r2
   18f92:	dd00      	ble.n	18f96 <_vfprintf_r+0x10c6>
   18f94:	e1a0      	b.n	192d8 <_vfprintf_r+0x1408>
   18f96:	07e3      	lsls	r3, r4, #31
   18f98:	d500      	bpl.n	18f9c <_vfprintf_r+0x10cc>
   18f9a:	e242      	b.n	19422 <_vfprintf_r+0x1552>
   18f9c:	43d3      	mvns	r3, r2
   18f9e:	17db      	asrs	r3, r3, #31
   18fa0:	0011      	movs	r1, r2
   18fa2:	401a      	ands	r2, r3
   18fa4:	2367      	movs	r3, #103	; 0x67
   18fa6:	9208      	str	r2, [sp, #32]
   18fa8:	910e      	str	r1, [sp, #56]	; 0x38
   18faa:	9312      	str	r3, [sp, #72]	; 0x48
   18fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18fae:	2b00      	cmp	r3, #0
   18fb0:	d000      	beq.n	18fb4 <_vfprintf_r+0x10e4>
   18fb2:	e0a9      	b.n	19108 <_vfprintf_r+0x1238>
   18fb4:	ab16      	add	r3, sp, #88	; 0x58
   18fb6:	7fdb      	ldrb	r3, [r3, #31]
   18fb8:	4698      	mov	r8, r3
   18fba:	2300      	movs	r3, #0
   18fbc:	469a      	mov	sl, r3
   18fbe:	f7ff f8fc 	bl	181ba <_vfprintf_r+0x2ea>
   18fc2:	46cb      	mov	fp, r9
   18fc4:	46a1      	mov	r9, r4
   18fc6:	0014      	movs	r4, r2
   18fc8:	e637      	b.n	18c3a <_vfprintf_r+0xd6a>
   18fca:	464b      	mov	r3, r9
   18fcc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18fce:	f002 f86f 	bl	1b0b0 <__retarget_lock_release_recursive>
   18fd2:	2301      	movs	r3, #1
   18fd4:	425b      	negs	r3, r3
   18fd6:	930a      	str	r3, [sp, #40]	; 0x28
   18fd8:	f7ff f82b 	bl	18032 <_vfprintf_r+0x162>
   18fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18fde:	07d2      	lsls	r2, r2, #31
   18fe0:	d400      	bmi.n	18fe4 <_vfprintf_r+0x1114>
   18fe2:	e68f      	b.n	18d04 <_vfprintf_r+0xe34>
   18fe4:	e680      	b.n	18ce8 <_vfprintf_r+0xe18>
   18fe6:	3608      	adds	r6, #8
   18fe8:	e679      	b.n	18cde <_vfprintf_r+0xe0e>
   18fea:	68bc      	ldr	r4, [r7, #8]
   18fec:	f7ff fb73 	bl	186d6 <_vfprintf_r+0x806>
   18ff0:	003a      	movs	r2, r7
   18ff2:	4659      	mov	r1, fp
   18ff4:	9806      	ldr	r0, [sp, #24]
   18ff6:	f003 f9db 	bl	1c3b0 <__sprint_r>
   18ffa:	2800      	cmp	r0, #0
   18ffc:	d000      	beq.n	19000 <_vfprintf_r+0x1130>
   18ffe:	e4f7      	b.n	189f0 <_vfprintf_r+0xb20>
   19000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19002:	68bc      	ldr	r4, [r7, #8]
   19004:	ae32      	add	r6, sp, #200	; 0xc8
   19006:	e67d      	b.n	18d04 <_vfprintf_r+0xe34>
   19008:	2320      	movs	r3, #32
   1900a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1900c:	439a      	bics	r2, r3
   1900e:	3b1a      	subs	r3, #26
   19010:	920e      	str	r2, [sp, #56]	; 0x38
   19012:	469a      	mov	sl, r3
   19014:	e75f      	b.n	18ed6 <_vfprintf_r+0x1006>
   19016:	232d      	movs	r3, #45	; 0x2d
   19018:	aa16      	add	r2, sp, #88	; 0x58
   1901a:	77d3      	strb	r3, [r2, #31]
   1901c:	4698      	mov	r8, r3
   1901e:	f7ff faa8 	bl	18572 <_vfprintf_r+0x6a2>
   19022:	003a      	movs	r2, r7
   19024:	4659      	mov	r1, fp
   19026:	9806      	ldr	r0, [sp, #24]
   19028:	f003 f9c2 	bl	1c3b0 <__sprint_r>
   1902c:	2800      	cmp	r0, #0
   1902e:	d000      	beq.n	19032 <_vfprintf_r+0x1162>
   19030:	e4de      	b.n	189f0 <_vfprintf_r+0xb20>
   19032:	ae32      	add	r6, sp, #200	; 0xc8
   19034:	e419      	b.n	1886a <_vfprintf_r+0x99a>
   19036:	4be3      	ldr	r3, [pc, #908]	; (193c4 <_vfprintf_r+0x14f4>)
   19038:	3401      	adds	r4, #1
   1903a:	6033      	str	r3, [r6, #0]
   1903c:	2301      	movs	r3, #1
   1903e:	6073      	str	r3, [r6, #4]
   19040:	687b      	ldr	r3, [r7, #4]
   19042:	60bc      	str	r4, [r7, #8]
   19044:	3301      	adds	r3, #1
   19046:	607b      	str	r3, [r7, #4]
   19048:	2b07      	cmp	r3, #7
   1904a:	dd00      	ble.n	1904e <_vfprintf_r+0x117e>
   1904c:	e155      	b.n	192fa <_vfprintf_r+0x142a>
   1904e:	3608      	adds	r6, #8
   19050:	2800      	cmp	r0, #0
   19052:	d107      	bne.n	19064 <_vfprintf_r+0x1194>
   19054:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19056:	2b00      	cmp	r3, #0
   19058:	d104      	bne.n	19064 <_vfprintf_r+0x1194>
   1905a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1905c:	07db      	lsls	r3, r3, #31
   1905e:	d401      	bmi.n	19064 <_vfprintf_r+0x1194>
   19060:	f7ff fb39 	bl	186d6 <_vfprintf_r+0x806>
   19064:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19066:	6033      	str	r3, [r6, #0]
   19068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1906a:	1919      	adds	r1, r3, r4
   1906c:	6073      	str	r3, [r6, #4]
   1906e:	687b      	ldr	r3, [r7, #4]
   19070:	60b9      	str	r1, [r7, #8]
   19072:	3301      	adds	r3, #1
   19074:	607b      	str	r3, [r7, #4]
   19076:	2b07      	cmp	r3, #7
   19078:	dd00      	ble.n	1907c <_vfprintf_r+0x11ac>
   1907a:	e1c4      	b.n	19406 <_vfprintf_r+0x1536>
   1907c:	0032      	movs	r2, r6
   1907e:	3208      	adds	r2, #8
   19080:	2800      	cmp	r0, #0
   19082:	da00      	bge.n	19086 <_vfprintf_r+0x11b6>
   19084:	e195      	b.n	193b2 <_vfprintf_r+0x14e2>
   19086:	9811      	ldr	r0, [sp, #68]	; 0x44
   19088:	3301      	adds	r3, #1
   1908a:	6010      	str	r0, [r2, #0]
   1908c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1908e:	607b      	str	r3, [r7, #4]
   19090:	1844      	adds	r4, r0, r1
   19092:	6050      	str	r0, [r2, #4]
   19094:	60bc      	str	r4, [r7, #8]
   19096:	2b07      	cmp	r3, #7
   19098:	dd01      	ble.n	1909e <_vfprintf_r+0x11ce>
   1909a:	f7ff fbc2 	bl	18822 <_vfprintf_r+0x952>
   1909e:	3208      	adds	r2, #8
   190a0:	0016      	movs	r6, r2
   190a2:	f7ff fb18 	bl	186d6 <_vfprintf_r+0x806>
   190a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   190a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   190aa:	680b      	ldr	r3, [r1, #0]
   190ac:	601a      	str	r2, [r3, #0]
   190ae:	17d2      	asrs	r2, r2, #31
   190b0:	605a      	str	r2, [r3, #4]
   190b2:	000b      	movs	r3, r1
   190b4:	3304      	adds	r3, #4
   190b6:	930f      	str	r3, [sp, #60]	; 0x3c
   190b8:	f7fe ff58 	bl	17f6c <_vfprintf_r+0x9c>
   190bc:	464b      	mov	r3, r9
   190be:	9a07      	ldr	r2, [sp, #28]
   190c0:	431c      	orrs	r4, r3
   190c2:	3201      	adds	r2, #1
   190c4:	7813      	ldrb	r3, [r2, #0]
   190c6:	9207      	str	r2, [sp, #28]
   190c8:	f7fe ff8b 	bl	17fe2 <_vfprintf_r+0x112>
   190cc:	003a      	movs	r2, r7
   190ce:	4659      	mov	r1, fp
   190d0:	9806      	ldr	r0, [sp, #24]
   190d2:	f003 f96d 	bl	1c3b0 <__sprint_r>
   190d6:	2800      	cmp	r0, #0
   190d8:	d000      	beq.n	190dc <_vfprintf_r+0x120c>
   190da:	e489      	b.n	189f0 <_vfprintf_r+0xb20>
   190dc:	68bc      	ldr	r4, [r7, #8]
   190de:	ae32      	add	r6, sp, #200	; 0xc8
   190e0:	f7ff fbdc 	bl	1889c <_vfprintf_r+0x9cc>
   190e4:	4bb8      	ldr	r3, [pc, #736]	; (193c8 <_vfprintf_r+0x14f8>)
   190e6:	9311      	str	r3, [sp, #68]	; 0x44
   190e8:	f7ff fa4a 	bl	18580 <_vfprintf_r+0x6b0>
   190ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   190ee:	ab32      	add	r3, sp, #200	; 0xc8
   190f0:	1a9b      	subs	r3, r3, r2
   190f2:	930e      	str	r3, [sp, #56]	; 0x38
   190f4:	f7ff f859 	bl	181aa <_vfprintf_r+0x2da>
   190f8:	9811      	ldr	r0, [sp, #68]	; 0x44
   190fa:	f7fe fd03 	bl	17b04 <strlen>
   190fe:	0002      	movs	r2, r0
   19100:	900e      	str	r0, [sp, #56]	; 0x38
   19102:	0003      	movs	r3, r0
   19104:	f7ff f9a1 	bl	1844a <_vfprintf_r+0x57a>
   19108:	232d      	movs	r3, #45	; 0x2d
   1910a:	aa16      	add	r2, sp, #88	; 0x58
   1910c:	77d3      	strb	r3, [r2, #31]
   1910e:	4698      	mov	r8, r3
   19110:	2300      	movs	r3, #0
   19112:	469a      	mov	sl, r3
   19114:	f7ff f854 	bl	181c0 <_vfprintf_r+0x2f0>
   19118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1911a:	9313      	str	r3, [sp, #76]	; 0x4c
   1911c:	1cda      	adds	r2, r3, #3
   1911e:	db02      	blt.n	19126 <_vfprintf_r+0x1256>
   19120:	459a      	cmp	sl, r3
   19122:	db00      	blt.n	19126 <_vfprintf_r+0x1256>
   19124:	e731      	b.n	18f8a <_vfprintf_r+0x10ba>
   19126:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19128:	3b02      	subs	r3, #2
   1912a:	9312      	str	r3, [sp, #72]	; 0x48
   1912c:	222c      	movs	r2, #44	; 0x2c
   1912e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19130:	2148      	movs	r1, #72	; 0x48
   19132:	1e5d      	subs	r5, r3, #1
   19134:	ab16      	add	r3, sp, #88	; 0x58
   19136:	189b      	adds	r3, r3, r2
   19138:	466a      	mov	r2, sp
   1913a:	1852      	adds	r2, r2, r1
   1913c:	7812      	ldrb	r2, [r2, #0]
   1913e:	951f      	str	r5, [sp, #124]	; 0x7c
   19140:	701a      	strb	r2, [r3, #0]
   19142:	2d00      	cmp	r5, #0
   19144:	da00      	bge.n	19148 <_vfprintf_r+0x1278>
   19146:	e1cb      	b.n	194e0 <_vfprintf_r+0x1610>
   19148:	212d      	movs	r1, #45	; 0x2d
   1914a:	232b      	movs	r3, #43	; 0x2b
   1914c:	aa16      	add	r2, sp, #88	; 0x58
   1914e:	1852      	adds	r2, r2, r1
   19150:	7013      	strb	r3, [r2, #0]
   19152:	2d09      	cmp	r5, #9
   19154:	dc00      	bgt.n	19158 <_vfprintf_r+0x1288>
   19156:	e16d      	b.n	19434 <_vfprintf_r+0x1564>
   19158:	aa16      	add	r2, sp, #88	; 0x58
   1915a:	233b      	movs	r3, #59	; 0x3b
   1915c:	4694      	mov	ip, r2
   1915e:	4463      	add	r3, ip
   19160:	469a      	mov	sl, r3
   19162:	46b1      	mov	r9, r6
   19164:	46a0      	mov	r8, r4
   19166:	4656      	mov	r6, sl
   19168:	e000      	b.n	1916c <_vfprintf_r+0x129c>
   1916a:	0026      	movs	r6, r4
   1916c:	0028      	movs	r0, r5
   1916e:	210a      	movs	r1, #10
   19170:	f7fb fb3a 	bl	147e8 <__aeabi_idivmod>
   19174:	1e74      	subs	r4, r6, #1
   19176:	3130      	adds	r1, #48	; 0x30
   19178:	7021      	strb	r1, [r4, #0]
   1917a:	0028      	movs	r0, r5
   1917c:	210a      	movs	r1, #10
   1917e:	f7fb fa4d 	bl	1461c <__divsi3>
   19182:	0005      	movs	r5, r0
   19184:	2809      	cmp	r0, #9
   19186:	dcf0      	bgt.n	1916a <_vfprintf_r+0x129a>
   19188:	0023      	movs	r3, r4
   1918a:	4644      	mov	r4, r8
   1918c:	46b0      	mov	r8, r6
   1918e:	464e      	mov	r6, r9
   19190:	4699      	mov	r9, r3
   19192:	0003      	movs	r3, r0
   19194:	3330      	adds	r3, #48	; 0x30
   19196:	b2d8      	uxtb	r0, r3
   19198:	4643      	mov	r3, r8
   1919a:	3b02      	subs	r3, #2
   1919c:	7018      	strb	r0, [r3, #0]
   1919e:	459a      	cmp	sl, r3
   191a0:	d800      	bhi.n	191a4 <_vfprintf_r+0x12d4>
   191a2:	e1f6      	b.n	19592 <_vfprintf_r+0x16c2>
   191a4:	4642      	mov	r2, r8
   191a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   191a8:	4645      	mov	r5, r8
   191aa:	1a99      	subs	r1, r3, r2
   191ac:	2301      	movs	r3, #1
   191ae:	3107      	adds	r1, #7
   191b0:	425b      	negs	r3, r3
   191b2:	e001      	b.n	191b8 <_vfprintf_r+0x12e8>
   191b4:	5ce8      	ldrb	r0, [r5, r3]
   191b6:	3301      	adds	r3, #1
   191b8:	aa21      	add	r2, sp, #132	; 0x84
   191ba:	18d2      	adds	r2, r2, r3
   191bc:	70d0      	strb	r0, [r2, #3]
   191be:	428b      	cmp	r3, r1
   191c0:	d1f8      	bne.n	191b4 <_vfprintf_r+0x12e4>
   191c2:	a916      	add	r1, sp, #88	; 0x58
   191c4:	468c      	mov	ip, r1
   191c6:	222e      	movs	r2, #46	; 0x2e
   191c8:	464b      	mov	r3, r9
   191ca:	4462      	add	r2, ip
   191cc:	4694      	mov	ip, r2
   191ce:	1afb      	subs	r3, r7, r3
   191d0:	4463      	add	r3, ip
   191d2:	aa21      	add	r2, sp, #132	; 0x84
   191d4:	9914      	ldr	r1, [sp, #80]	; 0x50
   191d6:	1a9b      	subs	r3, r3, r2
   191d8:	469c      	mov	ip, r3
   191da:	000a      	movs	r2, r1
   191dc:	4462      	add	r2, ip
   191de:	931a      	str	r3, [sp, #104]	; 0x68
   191e0:	920e      	str	r2, [sp, #56]	; 0x38
   191e2:	2901      	cmp	r1, #1
   191e4:	dc00      	bgt.n	191e8 <_vfprintf_r+0x1318>
   191e6:	e170      	b.n	194ca <_vfprintf_r+0x15fa>
   191e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   191ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   191ec:	4694      	mov	ip, r2
   191ee:	4463      	add	r3, ip
   191f0:	001a      	movs	r2, r3
   191f2:	930e      	str	r3, [sp, #56]	; 0x38
   191f4:	43db      	mvns	r3, r3
   191f6:	17db      	asrs	r3, r3, #31
   191f8:	401a      	ands	r2, r3
   191fa:	2300      	movs	r3, #0
   191fc:	9208      	str	r2, [sp, #32]
   191fe:	9313      	str	r3, [sp, #76]	; 0x4c
   19200:	e6d4      	b.n	18fac <_vfprintf_r+0x10dc>
   19202:	003a      	movs	r2, r7
   19204:	4659      	mov	r1, fp
   19206:	9806      	ldr	r0, [sp, #24]
   19208:	f003 f8d2 	bl	1c3b0 <__sprint_r>
   1920c:	2800      	cmp	r0, #0
   1920e:	d001      	beq.n	19214 <_vfprintf_r+0x1344>
   19210:	f7ff fbee 	bl	189f0 <_vfprintf_r+0xb20>
   19214:	68bc      	ldr	r4, [r7, #8]
   19216:	ae32      	add	r6, sp, #200	; 0xc8
   19218:	e46a      	b.n	18af0 <_vfprintf_r+0xc20>
   1921a:	4653      	mov	r3, sl
   1921c:	2b00      	cmp	r3, #0
   1921e:	d000      	beq.n	19222 <_vfprintf_r+0x1352>
   19220:	e659      	b.n	18ed6 <_vfprintf_r+0x1006>
   19222:	3301      	adds	r3, #1
   19224:	469a      	mov	sl, r3
   19226:	e656      	b.n	18ed6 <_vfprintf_r+0x1006>
   19228:	4653      	mov	r3, sl
   1922a:	9308      	str	r3, [sp, #32]
   1922c:	2b06      	cmp	r3, #6
   1922e:	d901      	bls.n	19234 <_vfprintf_r+0x1364>
   19230:	2306      	movs	r3, #6
   19232:	9308      	str	r3, [sp, #32]
   19234:	9b08      	ldr	r3, [sp, #32]
   19236:	950f      	str	r5, [sp, #60]	; 0x3c
   19238:	930e      	str	r3, [sp, #56]	; 0x38
   1923a:	2300      	movs	r3, #0
   1923c:	4698      	mov	r8, r3
   1923e:	469a      	mov	sl, r3
   19240:	9313      	str	r3, [sp, #76]	; 0x4c
   19242:	4b62      	ldr	r3, [pc, #392]	; (193cc <_vfprintf_r+0x14fc>)
   19244:	9409      	str	r4, [sp, #36]	; 0x24
   19246:	9311      	str	r3, [sp, #68]	; 0x44
   19248:	f7fe ffbd 	bl	181c6 <_vfprintf_r+0x2f6>
   1924c:	003a      	movs	r2, r7
   1924e:	4659      	mov	r1, fp
   19250:	9806      	ldr	r0, [sp, #24]
   19252:	f003 f8ad 	bl	1c3b0 <__sprint_r>
   19256:	2800      	cmp	r0, #0
   19258:	d001      	beq.n	1925e <_vfprintf_r+0x138e>
   1925a:	f7ff fbc9 	bl	189f0 <_vfprintf_r+0xb20>
   1925e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19260:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19262:	68bc      	ldr	r4, [r7, #8]
   19264:	1a9b      	subs	r3, r3, r2
   19266:	ae32      	add	r6, sp, #200	; 0xc8
   19268:	e567      	b.n	18d3a <_vfprintf_r+0xe6a>
   1926a:	ab23      	add	r3, sp, #140	; 0x8c
   1926c:	931b      	str	r3, [sp, #108]	; 0x6c
   1926e:	9304      	str	r3, [sp, #16]
   19270:	ab20      	add	r3, sp, #128	; 0x80
   19272:	9303      	str	r3, [sp, #12]
   19274:	ab1f      	add	r3, sp, #124	; 0x7c
   19276:	9302      	str	r3, [sp, #8]
   19278:	4653      	mov	r3, sl
   1927a:	9301      	str	r3, [sp, #4]
   1927c:	2303      	movs	r3, #3
   1927e:	464a      	mov	r2, r9
   19280:	9300      	str	r3, [sp, #0]
   19282:	9806      	ldr	r0, [sp, #24]
   19284:	9b08      	ldr	r3, [sp, #32]
   19286:	f000 fb09 	bl	1989c <_dtoa_r>
   1928a:	0003      	movs	r3, r0
   1928c:	4453      	add	r3, sl
   1928e:	4698      	mov	r8, r3
   19290:	4655      	mov	r5, sl
   19292:	9011      	str	r0, [sp, #68]	; 0x44
   19294:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19296:	781b      	ldrb	r3, [r3, #0]
   19298:	2b30      	cmp	r3, #48	; 0x30
   1929a:	d002      	beq.n	192a2 <_vfprintf_r+0x13d2>
   1929c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1929e:	4498      	add	r8, r3
   192a0:	e64e      	b.n	18f40 <_vfprintf_r+0x1070>
   192a2:	2200      	movs	r2, #0
   192a4:	2300      	movs	r3, #0
   192a6:	4648      	mov	r0, r9
   192a8:	9908      	ldr	r1, [sp, #32]
   192aa:	f7fb fab3 	bl	14814 <__aeabi_dcmpeq>
   192ae:	2800      	cmp	r0, #0
   192b0:	d1f4      	bne.n	1929c <_vfprintf_r+0x13cc>
   192b2:	2301      	movs	r3, #1
   192b4:	1b5b      	subs	r3, r3, r5
   192b6:	931f      	str	r3, [sp, #124]	; 0x7c
   192b8:	4498      	add	r8, r3
   192ba:	e641      	b.n	18f40 <_vfprintf_r+0x1070>
   192bc:	46c1      	mov	r9, r8
   192be:	f7ff fb1f 	bl	18900 <_vfprintf_r+0xa30>
   192c2:	2280      	movs	r2, #128	; 0x80
   192c4:	0612      	lsls	r2, r2, #24
   192c6:	4694      	mov	ip, r2
   192c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   192ca:	4699      	mov	r9, r3
   192cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   192ce:	4463      	add	r3, ip
   192d0:	9308      	str	r3, [sp, #32]
   192d2:	232d      	movs	r3, #45	; 0x2d
   192d4:	9310      	str	r3, [sp, #64]	; 0x40
   192d6:	e60b      	b.n	18ef0 <_vfprintf_r+0x1020>
   192d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   192da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   192dc:	4694      	mov	ip, r2
   192de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   192e0:	4463      	add	r3, ip
   192e2:	930e      	str	r3, [sp, #56]	; 0x38
   192e4:	2a00      	cmp	r2, #0
   192e6:	dc00      	bgt.n	192ea <_vfprintf_r+0x141a>
   192e8:	e0e3      	b.n	194b2 <_vfprintf_r+0x15e2>
   192ea:	001a      	movs	r2, r3
   192ec:	43db      	mvns	r3, r3
   192ee:	17db      	asrs	r3, r3, #31
   192f0:	401a      	ands	r2, r3
   192f2:	2367      	movs	r3, #103	; 0x67
   192f4:	9208      	str	r2, [sp, #32]
   192f6:	9312      	str	r3, [sp, #72]	; 0x48
   192f8:	e658      	b.n	18fac <_vfprintf_r+0x10dc>
   192fa:	003a      	movs	r2, r7
   192fc:	4659      	mov	r1, fp
   192fe:	9806      	ldr	r0, [sp, #24]
   19300:	f003 f856 	bl	1c3b0 <__sprint_r>
   19304:	2800      	cmp	r0, #0
   19306:	d001      	beq.n	1930c <_vfprintf_r+0x143c>
   19308:	f7ff fb72 	bl	189f0 <_vfprintf_r+0xb20>
   1930c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1930e:	68bc      	ldr	r4, [r7, #8]
   19310:	ae32      	add	r6, sp, #200	; 0xc8
   19312:	e69d      	b.n	19050 <_vfprintf_r+0x1180>
   19314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19316:	9313      	str	r3, [sp, #76]	; 0x4c
   19318:	2b00      	cmp	r3, #0
   1931a:	dc00      	bgt.n	1931e <_vfprintf_r+0x144e>
   1931c:	e0f2      	b.n	19504 <_vfprintf_r+0x1634>
   1931e:	4652      	mov	r2, sl
   19320:	2a00      	cmp	r2, #0
   19322:	d000      	beq.n	19326 <_vfprintf_r+0x1456>
   19324:	e0a0      	b.n	19468 <_vfprintf_r+0x1598>
   19326:	07e2      	lsls	r2, r4, #31
   19328:	d500      	bpl.n	1932c <_vfprintf_r+0x145c>
   1932a:	e09d      	b.n	19468 <_vfprintf_r+0x1598>
   1932c:	9308      	str	r3, [sp, #32]
   1932e:	930e      	str	r3, [sp, #56]	; 0x38
   19330:	e63c      	b.n	18fac <_vfprintf_r+0x10dc>
   19332:	ab16      	add	r3, sp, #88	; 0x58
   19334:	7fdb      	ldrb	r3, [r3, #31]
   19336:	950f      	str	r5, [sp, #60]	; 0x3c
   19338:	4698      	mov	r8, r3
   1933a:	4653      	mov	r3, sl
   1933c:	9308      	str	r3, [sp, #32]
   1933e:	930e      	str	r3, [sp, #56]	; 0x38
   19340:	2300      	movs	r3, #0
   19342:	9409      	str	r4, [sp, #36]	; 0x24
   19344:	469a      	mov	sl, r3
   19346:	9313      	str	r3, [sp, #76]	; 0x4c
   19348:	f7fe ff37 	bl	181ba <_vfprintf_r+0x2ea>
   1934c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1934e:	4698      	mov	r8, r3
   19350:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19352:	44a8      	add	r8, r5
   19354:	2b47      	cmp	r3, #71	; 0x47
   19356:	d000      	beq.n	1935a <_vfprintf_r+0x148a>
   19358:	e5f2      	b.n	18f40 <_vfprintf_r+0x1070>
   1935a:	07e3      	lsls	r3, r4, #31
   1935c:	d400      	bmi.n	19360 <_vfprintf_r+0x1490>
   1935e:	e0dc      	b.n	1951a <_vfprintf_r+0x164a>
   19360:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19362:	4698      	mov	r8, r3
   19364:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19366:	44a8      	add	r8, r5
   19368:	2b46      	cmp	r3, #70	; 0x46
   1936a:	d093      	beq.n	19294 <_vfprintf_r+0x13c4>
   1936c:	e5e8      	b.n	18f40 <_vfprintf_r+0x1070>
   1936e:	ab23      	add	r3, sp, #140	; 0x8c
   19370:	931b      	str	r3, [sp, #108]	; 0x6c
   19372:	9304      	str	r3, [sp, #16]
   19374:	ab20      	add	r3, sp, #128	; 0x80
   19376:	9303      	str	r3, [sp, #12]
   19378:	ab1f      	add	r3, sp, #124	; 0x7c
   1937a:	9302      	str	r3, [sp, #8]
   1937c:	4653      	mov	r3, sl
   1937e:	9301      	str	r3, [sp, #4]
   19380:	2303      	movs	r3, #3
   19382:	464a      	mov	r2, r9
   19384:	9300      	str	r3, [sp, #0]
   19386:	9806      	ldr	r0, [sp, #24]
   19388:	9b08      	ldr	r3, [sp, #32]
   1938a:	f000 fa87 	bl	1989c <_dtoa_r>
   1938e:	4655      	mov	r5, sl
   19390:	9011      	str	r0, [sp, #68]	; 0x44
   19392:	e7e5      	b.n	19360 <_vfprintf_r+0x1490>
   19394:	003a      	movs	r2, r7
   19396:	4659      	mov	r1, fp
   19398:	9806      	ldr	r0, [sp, #24]
   1939a:	f003 f809 	bl	1c3b0 <__sprint_r>
   1939e:	2800      	cmp	r0, #0
   193a0:	d101      	bne.n	193a6 <_vfprintf_r+0x14d6>
   193a2:	f7ff faab 	bl	188fc <_vfprintf_r+0xa2c>
   193a6:	f7ff faab 	bl	18900 <_vfprintf_r+0xa30>
   193aa:	4642      	mov	r2, r8
   193ac:	9207      	str	r2, [sp, #28]
   193ae:	f7fe fe1b 	bl	17fe8 <_vfprintf_r+0x118>
   193b2:	4244      	negs	r4, r0
   193b4:	3010      	adds	r0, #16
   193b6:	db00      	blt.n	193ba <_vfprintf_r+0x14ea>
   193b8:	e0d8      	b.n	1956c <_vfprintf_r+0x169c>
   193ba:	4805      	ldr	r0, [pc, #20]	; (193d0 <_vfprintf_r+0x1500>)
   193bc:	2610      	movs	r6, #16
   193be:	0005      	movs	r5, r0
   193c0:	e00c      	b.n	193dc <_vfprintf_r+0x150c>
   193c2:	46c0      	nop			; (mov r8, r8)
   193c4:	0001d658 	.word	0x0001d658
   193c8:	0001e3c0 	.word	0x0001e3c0
   193cc:	0001e3f4 	.word	0x0001e3f4
   193d0:	0001e40c 	.word	0x0001e40c
   193d4:	3208      	adds	r2, #8
   193d6:	3c10      	subs	r4, #16
   193d8:	2c10      	cmp	r4, #16
   193da:	dd51      	ble.n	19480 <_vfprintf_r+0x15b0>
   193dc:	3110      	adds	r1, #16
   193de:	3301      	adds	r3, #1
   193e0:	6015      	str	r5, [r2, #0]
   193e2:	6056      	str	r6, [r2, #4]
   193e4:	60b9      	str	r1, [r7, #8]
   193e6:	607b      	str	r3, [r7, #4]
   193e8:	2b07      	cmp	r3, #7
   193ea:	ddf3      	ble.n	193d4 <_vfprintf_r+0x1504>
   193ec:	003a      	movs	r2, r7
   193ee:	4659      	mov	r1, fp
   193f0:	9806      	ldr	r0, [sp, #24]
   193f2:	f002 ffdd 	bl	1c3b0 <__sprint_r>
   193f6:	2800      	cmp	r0, #0
   193f8:	d001      	beq.n	193fe <_vfprintf_r+0x152e>
   193fa:	f7ff faf9 	bl	189f0 <_vfprintf_r+0xb20>
   193fe:	68b9      	ldr	r1, [r7, #8]
   19400:	687b      	ldr	r3, [r7, #4]
   19402:	aa32      	add	r2, sp, #200	; 0xc8
   19404:	e7e7      	b.n	193d6 <_vfprintf_r+0x1506>
   19406:	003a      	movs	r2, r7
   19408:	4659      	mov	r1, fp
   1940a:	9806      	ldr	r0, [sp, #24]
   1940c:	f002 ffd0 	bl	1c3b0 <__sprint_r>
   19410:	2800      	cmp	r0, #0
   19412:	d001      	beq.n	19418 <_vfprintf_r+0x1548>
   19414:	f7ff faec 	bl	189f0 <_vfprintf_r+0xb20>
   19418:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1941a:	68b9      	ldr	r1, [r7, #8]
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	aa32      	add	r2, sp, #200	; 0xc8
   19420:	e62e      	b.n	19080 <_vfprintf_r+0x11b0>
   19422:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19426:	4694      	mov	ip, r2
   19428:	4463      	add	r3, ip
   1942a:	001a      	movs	r2, r3
   1942c:	930e      	str	r3, [sp, #56]	; 0x38
   1942e:	e75d      	b.n	192ec <_vfprintf_r+0x141c>
   19430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19432:	e599      	b.n	18f68 <_vfprintf_r+0x1098>
   19434:	212e      	movs	r1, #46	; 0x2e
   19436:	2330      	movs	r3, #48	; 0x30
   19438:	aa16      	add	r2, sp, #88	; 0x58
   1943a:	1852      	adds	r2, r2, r1
   1943c:	7013      	strb	r3, [r2, #0]
   1943e:	002b      	movs	r3, r5
   19440:	aa16      	add	r2, sp, #88	; 0x58
   19442:	3101      	adds	r1, #1
   19444:	3330      	adds	r3, #48	; 0x30
   19446:	1852      	adds	r2, r2, r1
   19448:	7013      	strb	r3, [r2, #0]
   1944a:	ab22      	add	r3, sp, #136	; 0x88
   1944c:	e6c1      	b.n	191d2 <_vfprintf_r+0x1302>
   1944e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19450:	2b00      	cmp	r3, #0
   19452:	db52      	blt.n	194fa <_vfprintf_r+0x162a>
   19454:	ab16      	add	r3, sp, #88	; 0x58
   19456:	7fdb      	ldrb	r3, [r3, #31]
   19458:	4698      	mov	r8, r3
   1945a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1945c:	2b47      	cmp	r3, #71	; 0x47
   1945e:	dc48      	bgt.n	194f2 <_vfprintf_r+0x1622>
   19460:	4b4e      	ldr	r3, [pc, #312]	; (1959c <_vfprintf_r+0x16cc>)
   19462:	9311      	str	r3, [sp, #68]	; 0x44
   19464:	f7ff f88c 	bl	18580 <_vfprintf_r+0x6b0>
   19468:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1946a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1946c:	4694      	mov	ip, r2
   1946e:	4463      	add	r3, ip
   19470:	4453      	add	r3, sl
   19472:	001a      	movs	r2, r3
   19474:	930e      	str	r3, [sp, #56]	; 0x38
   19476:	43db      	mvns	r3, r3
   19478:	17db      	asrs	r3, r3, #31
   1947a:	401a      	ands	r2, r3
   1947c:	9208      	str	r2, [sp, #32]
   1947e:	e595      	b.n	18fac <_vfprintf_r+0x10dc>
   19480:	46a9      	mov	r9, r5
   19482:	4648      	mov	r0, r9
   19484:	1909      	adds	r1, r1, r4
   19486:	3301      	adds	r3, #1
   19488:	6010      	str	r0, [r2, #0]
   1948a:	6054      	str	r4, [r2, #4]
   1948c:	60b9      	str	r1, [r7, #8]
   1948e:	3208      	adds	r2, #8
   19490:	607b      	str	r3, [r7, #4]
   19492:	2b07      	cmp	r3, #7
   19494:	dc00      	bgt.n	19498 <_vfprintf_r+0x15c8>
   19496:	e5f6      	b.n	19086 <_vfprintf_r+0x11b6>
   19498:	003a      	movs	r2, r7
   1949a:	4659      	mov	r1, fp
   1949c:	9806      	ldr	r0, [sp, #24]
   1949e:	f002 ff87 	bl	1c3b0 <__sprint_r>
   194a2:	2800      	cmp	r0, #0
   194a4:	d001      	beq.n	194aa <_vfprintf_r+0x15da>
   194a6:	f7ff faa3 	bl	189f0 <_vfprintf_r+0xb20>
   194aa:	68b9      	ldr	r1, [r7, #8]
   194ac:	687b      	ldr	r3, [r7, #4]
   194ae:	aa32      	add	r2, sp, #200	; 0xc8
   194b0:	e5e9      	b.n	19086 <_vfprintf_r+0x11b6>
   194b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   194b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   194b6:	1a98      	subs	r0, r3, r2
   194b8:	1c43      	adds	r3, r0, #1
   194ba:	001a      	movs	r2, r3
   194bc:	930e      	str	r3, [sp, #56]	; 0x38
   194be:	e715      	b.n	192ec <_vfprintf_r+0x141c>
   194c0:	4a37      	ldr	r2, [pc, #220]	; (195a0 <_vfprintf_r+0x16d0>)
   194c2:	687b      	ldr	r3, [r7, #4]
   194c4:	4691      	mov	r9, r2
   194c6:	f7ff fbf5 	bl	18cb4 <_vfprintf_r+0xde4>
   194ca:	2301      	movs	r3, #1
   194cc:	4023      	ands	r3, r4
   194ce:	9313      	str	r3, [sp, #76]	; 0x4c
   194d0:	d000      	beq.n	194d4 <_vfprintf_r+0x1604>
   194d2:	e689      	b.n	191e8 <_vfprintf_r+0x1318>
   194d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   194d6:	43d3      	mvns	r3, r2
   194d8:	17db      	asrs	r3, r3, #31
   194da:	401a      	ands	r2, r3
   194dc:	9208      	str	r2, [sp, #32]
   194de:	e565      	b.n	18fac <_vfprintf_r+0x10dc>
   194e0:	2301      	movs	r3, #1
   194e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   194e4:	391b      	subs	r1, #27
   194e6:	1a9d      	subs	r5, r3, r2
   194e8:	aa16      	add	r2, sp, #88	; 0x58
   194ea:	332c      	adds	r3, #44	; 0x2c
   194ec:	1852      	adds	r2, r2, r1
   194ee:	7013      	strb	r3, [r2, #0]
   194f0:	e62f      	b.n	19152 <_vfprintf_r+0x1282>
   194f2:	4b2c      	ldr	r3, [pc, #176]	; (195a4 <_vfprintf_r+0x16d4>)
   194f4:	9311      	str	r3, [sp, #68]	; 0x44
   194f6:	f7ff f843 	bl	18580 <_vfprintf_r+0x6b0>
   194fa:	232d      	movs	r3, #45	; 0x2d
   194fc:	aa16      	add	r2, sp, #88	; 0x58
   194fe:	77d3      	strb	r3, [r2, #31]
   19500:	4698      	mov	r8, r3
   19502:	e7aa      	b.n	1945a <_vfprintf_r+0x158a>
   19504:	4653      	mov	r3, sl
   19506:	2b00      	cmp	r3, #0
   19508:	d101      	bne.n	1950e <_vfprintf_r+0x163e>
   1950a:	07e3      	lsls	r3, r4, #31
   1950c:	d503      	bpl.n	19516 <_vfprintf_r+0x1646>
   1950e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19510:	1c58      	adds	r0, r3, #1
   19512:	0003      	movs	r3, r0
   19514:	e7ac      	b.n	19470 <_vfprintf_r+0x15a0>
   19516:	2301      	movs	r3, #1
   19518:	e708      	b.n	1932c <_vfprintf_r+0x145c>
   1951a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1951c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1951e:	1a9b      	subs	r3, r3, r2
   19520:	9314      	str	r3, [sp, #80]	; 0x50
   19522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19524:	2b47      	cmp	r3, #71	; 0x47
   19526:	d100      	bne.n	1952a <_vfprintf_r+0x165a>
   19528:	e5f6      	b.n	19118 <_vfprintf_r+0x1248>
   1952a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1952c:	9313      	str	r3, [sp, #76]	; 0x4c
   1952e:	e5fd      	b.n	1912c <_vfprintf_r+0x125c>
   19530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19532:	1d1d      	adds	r5, r3, #4
   19534:	681b      	ldr	r3, [r3, #0]
   19536:	46a8      	mov	r8, r5
   19538:	469a      	mov	sl, r3
   1953a:	2b00      	cmp	r3, #0
   1953c:	db0a      	blt.n	19554 <_vfprintf_r+0x1684>
   1953e:	4645      	mov	r5, r8
   19540:	9b07      	ldr	r3, [sp, #28]
   19542:	950f      	str	r5, [sp, #60]	; 0x3c
   19544:	785b      	ldrb	r3, [r3, #1]
   19546:	9207      	str	r2, [sp, #28]
   19548:	f7fe fd4b 	bl	17fe2 <_vfprintf_r+0x112>
   1954c:	ab16      	add	r3, sp, #88	; 0x58
   1954e:	77d8      	strb	r0, [r3, #31]
   19550:	f7ff f830 	bl	185b4 <_vfprintf_r+0x6e4>
   19554:	2301      	movs	r3, #1
   19556:	425b      	negs	r3, r3
   19558:	469a      	mov	sl, r3
   1955a:	e7f0      	b.n	1953e <_vfprintf_r+0x166e>
   1955c:	ab16      	add	r3, sp, #88	; 0x58
   1955e:	77d8      	strb	r0, [r3, #31]
   19560:	f7fe ff27 	bl	183b2 <_vfprintf_r+0x4e2>
   19564:	ab16      	add	r3, sp, #88	; 0x58
   19566:	77d8      	strb	r0, [r3, #31]
   19568:	f7fe fdce 	bl	18108 <_vfprintf_r+0x238>
   1956c:	480c      	ldr	r0, [pc, #48]	; (195a0 <_vfprintf_r+0x16d0>)
   1956e:	4681      	mov	r9, r0
   19570:	e787      	b.n	19482 <_vfprintf_r+0x15b2>
   19572:	ab16      	add	r3, sp, #88	; 0x58
   19574:	77d8      	strb	r0, [r3, #31]
   19576:	f7ff f829 	bl	185cc <_vfprintf_r+0x6fc>
   1957a:	ab16      	add	r3, sp, #88	; 0x58
   1957c:	77d8      	strb	r0, [r3, #31]
   1957e:	f7fe ffc3 	bl	18508 <_vfprintf_r+0x638>
   19582:	ab16      	add	r3, sp, #88	; 0x58
   19584:	77d8      	strb	r0, [r3, #31]
   19586:	f7fe ffa5 	bl	184d4 <_vfprintf_r+0x604>
   1958a:	ab16      	add	r3, sp, #88	; 0x58
   1958c:	77d8      	strb	r0, [r3, #31]
   1958e:	f7fe feaf 	bl	182f0 <_vfprintf_r+0x420>
   19592:	aa16      	add	r2, sp, #88	; 0x58
   19594:	232e      	movs	r3, #46	; 0x2e
   19596:	4694      	mov	ip, r2
   19598:	4463      	add	r3, ip
   1959a:	e61a      	b.n	191d2 <_vfprintf_r+0x1302>
   1959c:	0001e3c4 	.word	0x0001e3c4
   195a0:	0001e40c 	.word	0x0001e40c
   195a4:	0001e3c8 	.word	0x0001e3c8

000195a8 <__sbprintf>:
   195a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   195aa:	0015      	movs	r5, r2
   195ac:	2202      	movs	r2, #2
   195ae:	4c1e      	ldr	r4, [pc, #120]	; (19628 <__sbprintf+0x80>)
   195b0:	001f      	movs	r7, r3
   195b2:	898b      	ldrh	r3, [r1, #12]
   195b4:	44a5      	add	sp, r4
   195b6:	4393      	bics	r3, r2
   195b8:	466a      	mov	r2, sp
   195ba:	8193      	strh	r3, [r2, #12]
   195bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   195be:	0006      	movs	r6, r0
   195c0:	9319      	str	r3, [sp, #100]	; 0x64
   195c2:	89cb      	ldrh	r3, [r1, #14]
   195c4:	a816      	add	r0, sp, #88	; 0x58
   195c6:	81d3      	strh	r3, [r2, #14]
   195c8:	69cb      	ldr	r3, [r1, #28]
   195ca:	000c      	movs	r4, r1
   195cc:	9307      	str	r3, [sp, #28]
   195ce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   195d0:	9309      	str	r3, [sp, #36]	; 0x24
   195d2:	ab1a      	add	r3, sp, #104	; 0x68
   195d4:	9300      	str	r3, [sp, #0]
   195d6:	9304      	str	r3, [sp, #16]
   195d8:	2380      	movs	r3, #128	; 0x80
   195da:	00db      	lsls	r3, r3, #3
   195dc:	9302      	str	r3, [sp, #8]
   195de:	9305      	str	r3, [sp, #20]
   195e0:	2300      	movs	r3, #0
   195e2:	9306      	str	r3, [sp, #24]
   195e4:	f001 fd5e 	bl	1b0a4 <__retarget_lock_init_recursive>
   195e8:	002a      	movs	r2, r5
   195ea:	003b      	movs	r3, r7
   195ec:	4669      	mov	r1, sp
   195ee:	0030      	movs	r0, r6
   195f0:	f7fe fc6e 	bl	17ed0 <_vfprintf_r>
   195f4:	1e05      	subs	r5, r0, #0
   195f6:	db05      	blt.n	19604 <__sbprintf+0x5c>
   195f8:	4669      	mov	r1, sp
   195fa:	0030      	movs	r0, r6
   195fc:	f001 f9ba 	bl	1a974 <_fflush_r>
   19600:	2800      	cmp	r0, #0
   19602:	d10e      	bne.n	19622 <__sbprintf+0x7a>
   19604:	466b      	mov	r3, sp
   19606:	899b      	ldrh	r3, [r3, #12]
   19608:	065b      	lsls	r3, r3, #25
   1960a:	d503      	bpl.n	19614 <__sbprintf+0x6c>
   1960c:	2240      	movs	r2, #64	; 0x40
   1960e:	89a3      	ldrh	r3, [r4, #12]
   19610:	4313      	orrs	r3, r2
   19612:	81a3      	strh	r3, [r4, #12]
   19614:	9816      	ldr	r0, [sp, #88]	; 0x58
   19616:	f001 fd47 	bl	1b0a8 <__retarget_lock_close_recursive>
   1961a:	0028      	movs	r0, r5
   1961c:	4b03      	ldr	r3, [pc, #12]	; (1962c <__sbprintf+0x84>)
   1961e:	449d      	add	sp, r3
   19620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19622:	2501      	movs	r5, #1
   19624:	426d      	negs	r5, r5
   19626:	e7ed      	b.n	19604 <__sbprintf+0x5c>
   19628:	fffffb94 	.word	0xfffffb94
   1962c:	0000046c 	.word	0x0000046c

00019630 <__ascii_wctomb>:
   19630:	2900      	cmp	r1, #0
   19632:	d004      	beq.n	1963e <__ascii_wctomb+0xe>
   19634:	2aff      	cmp	r2, #255	; 0xff
   19636:	d804      	bhi.n	19642 <__ascii_wctomb+0x12>
   19638:	2001      	movs	r0, #1
   1963a:	700a      	strb	r2, [r1, #0]
   1963c:	4770      	bx	lr
   1963e:	2000      	movs	r0, #0
   19640:	e7fc      	b.n	1963c <__ascii_wctomb+0xc>
   19642:	238a      	movs	r3, #138	; 0x8a
   19644:	6003      	str	r3, [r0, #0]
   19646:	2001      	movs	r0, #1
   19648:	4240      	negs	r0, r0
   1964a:	e7f7      	b.n	1963c <__ascii_wctomb+0xc>

0001964c <__swsetup_r>:
   1964c:	4b33      	ldr	r3, [pc, #204]	; (1971c <__swsetup_r+0xd0>)
   1964e:	b570      	push	{r4, r5, r6, lr}
   19650:	0005      	movs	r5, r0
   19652:	6818      	ldr	r0, [r3, #0]
   19654:	000c      	movs	r4, r1
   19656:	2800      	cmp	r0, #0
   19658:	d002      	beq.n	19660 <__swsetup_r+0x14>
   1965a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1965c:	2b00      	cmp	r3, #0
   1965e:	d03c      	beq.n	196da <__swsetup_r+0x8e>
   19660:	230c      	movs	r3, #12
   19662:	5ee2      	ldrsh	r2, [r4, r3]
   19664:	b293      	uxth	r3, r2
   19666:	0719      	lsls	r1, r3, #28
   19668:	d50d      	bpl.n	19686 <__swsetup_r+0x3a>
   1966a:	6921      	ldr	r1, [r4, #16]
   1966c:	2900      	cmp	r1, #0
   1966e:	d015      	beq.n	1969c <__swsetup_r+0x50>
   19670:	07da      	lsls	r2, r3, #31
   19672:	d521      	bpl.n	196b8 <__swsetup_r+0x6c>
   19674:	2300      	movs	r3, #0
   19676:	60a3      	str	r3, [r4, #8]
   19678:	6963      	ldr	r3, [r4, #20]
   1967a:	2000      	movs	r0, #0
   1967c:	425b      	negs	r3, r3
   1967e:	61a3      	str	r3, [r4, #24]
   19680:	2900      	cmp	r1, #0
   19682:	d021      	beq.n	196c8 <__swsetup_r+0x7c>
   19684:	bd70      	pop	{r4, r5, r6, pc}
   19686:	06d9      	lsls	r1, r3, #27
   19688:	d53f      	bpl.n	1970a <__swsetup_r+0xbe>
   1968a:	075b      	lsls	r3, r3, #29
   1968c:	d428      	bmi.n	196e0 <__swsetup_r+0x94>
   1968e:	6921      	ldr	r1, [r4, #16]
   19690:	2308      	movs	r3, #8
   19692:	4313      	orrs	r3, r2
   19694:	81a3      	strh	r3, [r4, #12]
   19696:	b29b      	uxth	r3, r3
   19698:	2900      	cmp	r1, #0
   1969a:	d1e9      	bne.n	19670 <__swsetup_r+0x24>
   1969c:	22a0      	movs	r2, #160	; 0xa0
   1969e:	2080      	movs	r0, #128	; 0x80
   196a0:	0092      	lsls	r2, r2, #2
   196a2:	0080      	lsls	r0, r0, #2
   196a4:	401a      	ands	r2, r3
   196a6:	4282      	cmp	r2, r0
   196a8:	d0e2      	beq.n	19670 <__swsetup_r+0x24>
   196aa:	0021      	movs	r1, r4
   196ac:	0028      	movs	r0, r5
   196ae:	f001 fd31 	bl	1b114 <__smakebuf_r>
   196b2:	89a3      	ldrh	r3, [r4, #12]
   196b4:	6921      	ldr	r1, [r4, #16]
   196b6:	e7db      	b.n	19670 <__swsetup_r+0x24>
   196b8:	2200      	movs	r2, #0
   196ba:	079b      	lsls	r3, r3, #30
   196bc:	d400      	bmi.n	196c0 <__swsetup_r+0x74>
   196be:	6962      	ldr	r2, [r4, #20]
   196c0:	60a2      	str	r2, [r4, #8]
   196c2:	2000      	movs	r0, #0
   196c4:	2900      	cmp	r1, #0
   196c6:	d1dd      	bne.n	19684 <__swsetup_r+0x38>
   196c8:	220c      	movs	r2, #12
   196ca:	5ea3      	ldrsh	r3, [r4, r2]
   196cc:	061a      	lsls	r2, r3, #24
   196ce:	d5d9      	bpl.n	19684 <__swsetup_r+0x38>
   196d0:	2240      	movs	r2, #64	; 0x40
   196d2:	4313      	orrs	r3, r2
   196d4:	81a3      	strh	r3, [r4, #12]
   196d6:	3801      	subs	r0, #1
   196d8:	e7d4      	b.n	19684 <__swsetup_r+0x38>
   196da:	f001 f9a5 	bl	1aa28 <__sinit>
   196de:	e7bf      	b.n	19660 <__swsetup_r+0x14>
   196e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   196e2:	2900      	cmp	r1, #0
   196e4:	d00a      	beq.n	196fc <__swsetup_r+0xb0>
   196e6:	0023      	movs	r3, r4
   196e8:	3340      	adds	r3, #64	; 0x40
   196ea:	4299      	cmp	r1, r3
   196ec:	d004      	beq.n	196f8 <__swsetup_r+0xac>
   196ee:	0028      	movs	r0, r5
   196f0:	f001 fa44 	bl	1ab7c <_free_r>
   196f4:	230c      	movs	r3, #12
   196f6:	5ee2      	ldrsh	r2, [r4, r3]
   196f8:	2300      	movs	r3, #0
   196fa:	6323      	str	r3, [r4, #48]	; 0x30
   196fc:	2324      	movs	r3, #36	; 0x24
   196fe:	439a      	bics	r2, r3
   19700:	2300      	movs	r3, #0
   19702:	6921      	ldr	r1, [r4, #16]
   19704:	6063      	str	r3, [r4, #4]
   19706:	6021      	str	r1, [r4, #0]
   19708:	e7c2      	b.n	19690 <__swsetup_r+0x44>
   1970a:	2309      	movs	r3, #9
   1970c:	602b      	str	r3, [r5, #0]
   1970e:	2340      	movs	r3, #64	; 0x40
   19710:	2001      	movs	r0, #1
   19712:	431a      	orrs	r2, r3
   19714:	81a2      	strh	r2, [r4, #12]
   19716:	4240      	negs	r0, r0
   19718:	e7b4      	b.n	19684 <__swsetup_r+0x38>
   1971a:	46c0      	nop			; (mov r8, r8)
   1971c:	20000018 	.word	0x20000018

00019720 <register_fini>:
   19720:	4b03      	ldr	r3, [pc, #12]	; (19730 <register_fini+0x10>)
   19722:	b510      	push	{r4, lr}
   19724:	2b00      	cmp	r3, #0
   19726:	d002      	beq.n	1972e <register_fini+0xe>
   19728:	4802      	ldr	r0, [pc, #8]	; (19734 <register_fini+0x14>)
   1972a:	f000 f805 	bl	19738 <atexit>
   1972e:	bd10      	pop	{r4, pc}
   19730:	00000000 	.word	0x00000000
   19734:	0001aaa9 	.word	0x0001aaa9

00019738 <atexit>:
   19738:	b510      	push	{r4, lr}
   1973a:	0001      	movs	r1, r0
   1973c:	2300      	movs	r3, #0
   1973e:	2200      	movs	r2, #0
   19740:	2000      	movs	r0, #0
   19742:	f002 fe53 	bl	1c3ec <__register_exitproc>
   19746:	bd10      	pop	{r4, pc}

00019748 <quorem>:
   19748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1974a:	4645      	mov	r5, r8
   1974c:	4680      	mov	r8, r0
   1974e:	46de      	mov	lr, fp
   19750:	4657      	mov	r7, sl
   19752:	464e      	mov	r6, r9
   19754:	4642      	mov	r2, r8
   19756:	b5e0      	push	{r5, r6, r7, lr}
   19758:	690c      	ldr	r4, [r1, #16]
   1975a:	6912      	ldr	r2, [r2, #16]
   1975c:	b085      	sub	sp, #20
   1975e:	000b      	movs	r3, r1
   19760:	9102      	str	r1, [sp, #8]
   19762:	2000      	movs	r0, #0
   19764:	4294      	cmp	r4, r2
   19766:	dd00      	ble.n	1976a <quorem+0x22>
   19768:	e090      	b.n	1988c <quorem+0x144>
   1976a:	2214      	movs	r2, #20
   1976c:	4694      	mov	ip, r2
   1976e:	4463      	add	r3, ip
   19770:	4699      	mov	r9, r3
   19772:	464a      	mov	r2, r9
   19774:	3c01      	subs	r4, #1
   19776:	00a3      	lsls	r3, r4, #2
   19778:	18d6      	adds	r6, r2, r3
   1977a:	2214      	movs	r2, #20
   1977c:	4442      	add	r2, r8
   1977e:	4693      	mov	fp, r2
   19780:	449b      	add	fp, r3
   19782:	6833      	ldr	r3, [r6, #0]
   19784:	0015      	movs	r5, r2
   19786:	1c59      	adds	r1, r3, #1
   19788:	465b      	mov	r3, fp
   1978a:	6818      	ldr	r0, [r3, #0]
   1978c:	9201      	str	r2, [sp, #4]
   1978e:	f7fa febb 	bl	14508 <__udivsi3>
   19792:	1e03      	subs	r3, r0, #0
   19794:	9000      	str	r0, [sp, #0]
   19796:	d042      	beq.n	1981e <quorem+0xd6>
   19798:	0029      	movs	r1, r5
   1979a:	2700      	movs	r7, #0
   1979c:	464d      	mov	r5, r9
   1979e:	2000      	movs	r0, #0
   197a0:	46b1      	mov	r9, r6
   197a2:	46a2      	mov	sl, r4
   197a4:	003e      	movs	r6, r7
   197a6:	0004      	movs	r4, r0
   197a8:	469c      	mov	ip, r3
   197aa:	002f      	movs	r7, r5
   197ac:	0008      	movs	r0, r1
   197ae:	9503      	str	r5, [sp, #12]
   197b0:	4663      	mov	r3, ip
   197b2:	cf04      	ldmia	r7!, {r2}
   197b4:	0415      	lsls	r5, r2, #16
   197b6:	0c2d      	lsrs	r5, r5, #16
   197b8:	435d      	muls	r5, r3
   197ba:	0c12      	lsrs	r2, r2, #16
   197bc:	435a      	muls	r2, r3
   197be:	19ad      	adds	r5, r5, r6
   197c0:	0c2b      	lsrs	r3, r5, #16
   197c2:	18d2      	adds	r2, r2, r3
   197c4:	6803      	ldr	r3, [r0, #0]
   197c6:	042d      	lsls	r5, r5, #16
   197c8:	0419      	lsls	r1, r3, #16
   197ca:	0c09      	lsrs	r1, r1, #16
   197cc:	1909      	adds	r1, r1, r4
   197ce:	0c16      	lsrs	r6, r2, #16
   197d0:	0c2d      	lsrs	r5, r5, #16
   197d2:	0412      	lsls	r2, r2, #16
   197d4:	1b49      	subs	r1, r1, r5
   197d6:	0c12      	lsrs	r2, r2, #16
   197d8:	0c1b      	lsrs	r3, r3, #16
   197da:	1a9b      	subs	r3, r3, r2
   197dc:	140a      	asrs	r2, r1, #16
   197de:	189b      	adds	r3, r3, r2
   197e0:	0409      	lsls	r1, r1, #16
   197e2:	141c      	asrs	r4, r3, #16
   197e4:	0c09      	lsrs	r1, r1, #16
   197e6:	041b      	lsls	r3, r3, #16
   197e8:	4319      	orrs	r1, r3
   197ea:	c002      	stmia	r0!, {r1}
   197ec:	45b9      	cmp	r9, r7
   197ee:	d2df      	bcs.n	197b0 <quorem+0x68>
   197f0:	9b03      	ldr	r3, [sp, #12]
   197f2:	464e      	mov	r6, r9
   197f4:	4699      	mov	r9, r3
   197f6:	465b      	mov	r3, fp
   197f8:	681b      	ldr	r3, [r3, #0]
   197fa:	4654      	mov	r4, sl
   197fc:	2b00      	cmp	r3, #0
   197fe:	d10e      	bne.n	1981e <quorem+0xd6>
   19800:	465b      	mov	r3, fp
   19802:	9a01      	ldr	r2, [sp, #4]
   19804:	3b04      	subs	r3, #4
   19806:	429a      	cmp	r2, r3
   19808:	d304      	bcc.n	19814 <quorem+0xcc>
   1980a:	e006      	b.n	1981a <quorem+0xd2>
   1980c:	3b04      	subs	r3, #4
   1980e:	3c01      	subs	r4, #1
   19810:	429a      	cmp	r2, r3
   19812:	d202      	bcs.n	1981a <quorem+0xd2>
   19814:	6819      	ldr	r1, [r3, #0]
   19816:	2900      	cmp	r1, #0
   19818:	d0f8      	beq.n	1980c <quorem+0xc4>
   1981a:	4643      	mov	r3, r8
   1981c:	611c      	str	r4, [r3, #16]
   1981e:	9902      	ldr	r1, [sp, #8]
   19820:	4640      	mov	r0, r8
   19822:	f002 fa51 	bl	1bcc8 <__mcmp>
   19826:	2800      	cmp	r0, #0
   19828:	db2f      	blt.n	1988a <quorem+0x142>
   1982a:	464f      	mov	r7, r9
   1982c:	2000      	movs	r0, #0
   1982e:	9b00      	ldr	r3, [sp, #0]
   19830:	9d01      	ldr	r5, [sp, #4]
   19832:	3301      	adds	r3, #1
   19834:	9300      	str	r3, [sp, #0]
   19836:	682b      	ldr	r3, [r5, #0]
   19838:	cf02      	ldmia	r7!, {r1}
   1983a:	041a      	lsls	r2, r3, #16
   1983c:	0c12      	lsrs	r2, r2, #16
   1983e:	1810      	adds	r0, r2, r0
   19840:	040a      	lsls	r2, r1, #16
   19842:	0c12      	lsrs	r2, r2, #16
   19844:	1a82      	subs	r2, r0, r2
   19846:	0c09      	lsrs	r1, r1, #16
   19848:	0c1b      	lsrs	r3, r3, #16
   1984a:	1a5b      	subs	r3, r3, r1
   1984c:	1411      	asrs	r1, r2, #16
   1984e:	185b      	adds	r3, r3, r1
   19850:	0412      	lsls	r2, r2, #16
   19852:	1418      	asrs	r0, r3, #16
   19854:	0c12      	lsrs	r2, r2, #16
   19856:	041b      	lsls	r3, r3, #16
   19858:	4313      	orrs	r3, r2
   1985a:	c508      	stmia	r5!, {r3}
   1985c:	42be      	cmp	r6, r7
   1985e:	d2ea      	bcs.n	19836 <quorem+0xee>
   19860:	9901      	ldr	r1, [sp, #4]
   19862:	00a3      	lsls	r3, r4, #2
   19864:	468c      	mov	ip, r1
   19866:	4463      	add	r3, ip
   19868:	681a      	ldr	r2, [r3, #0]
   1986a:	2a00      	cmp	r2, #0
   1986c:	d10d      	bne.n	1988a <quorem+0x142>
   1986e:	3b04      	subs	r3, #4
   19870:	000a      	movs	r2, r1
   19872:	4299      	cmp	r1, r3
   19874:	d304      	bcc.n	19880 <quorem+0x138>
   19876:	e006      	b.n	19886 <quorem+0x13e>
   19878:	3b04      	subs	r3, #4
   1987a:	3c01      	subs	r4, #1
   1987c:	429a      	cmp	r2, r3
   1987e:	d202      	bcs.n	19886 <quorem+0x13e>
   19880:	6819      	ldr	r1, [r3, #0]
   19882:	2900      	cmp	r1, #0
   19884:	d0f8      	beq.n	19878 <quorem+0x130>
   19886:	4643      	mov	r3, r8
   19888:	611c      	str	r4, [r3, #16]
   1988a:	9800      	ldr	r0, [sp, #0]
   1988c:	b005      	add	sp, #20
   1988e:	bc3c      	pop	{r2, r3, r4, r5}
   19890:	4690      	mov	r8, r2
   19892:	4699      	mov	r9, r3
   19894:	46a2      	mov	sl, r4
   19896:	46ab      	mov	fp, r5
   19898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1989a:	46c0      	nop			; (mov r8, r8)

0001989c <_dtoa_r>:
   1989c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1989e:	4657      	mov	r7, sl
   198a0:	464e      	mov	r6, r9
   198a2:	4645      	mov	r5, r8
   198a4:	46de      	mov	lr, fp
   198a6:	b5e0      	push	{r5, r6, r7, lr}
   198a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   198aa:	b099      	sub	sp, #100	; 0x64
   198ac:	4682      	mov	sl, r0
   198ae:	001d      	movs	r5, r3
   198b0:	0016      	movs	r6, r2
   198b2:	001f      	movs	r7, r3
   198b4:	2900      	cmp	r1, #0
   198b6:	d009      	beq.n	198cc <_dtoa_r+0x30>
   198b8:	2301      	movs	r3, #1
   198ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
   198bc:	4093      	lsls	r3, r2
   198be:	604a      	str	r2, [r1, #4]
   198c0:	608b      	str	r3, [r1, #8]
   198c2:	f001 fff5 	bl	1b8b0 <_Bfree>
   198c6:	2300      	movs	r3, #0
   198c8:	4652      	mov	r2, sl
   198ca:	6413      	str	r3, [r2, #64]	; 0x40
   198cc:	46b8      	mov	r8, r7
   198ce:	2f00      	cmp	r7, #0
   198d0:	db37      	blt.n	19942 <_dtoa_r+0xa6>
   198d2:	2300      	movs	r3, #0
   198d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   198d6:	6013      	str	r3, [r2, #0]
   198d8:	4642      	mov	r2, r8
   198da:	4bd6      	ldr	r3, [pc, #856]	; (19c34 <_dtoa_r+0x398>)
   198dc:	401a      	ands	r2, r3
   198de:	429a      	cmp	r2, r3
   198e0:	d018      	beq.n	19914 <_dtoa_r+0x78>
   198e2:	2200      	movs	r2, #0
   198e4:	2300      	movs	r3, #0
   198e6:	0030      	movs	r0, r6
   198e8:	0039      	movs	r1, r7
   198ea:	f7fa ff93 	bl	14814 <__aeabi_dcmpeq>
   198ee:	2800      	cmp	r0, #0
   198f0:	d02f      	beq.n	19952 <_dtoa_r+0xb6>
   198f2:	2301      	movs	r3, #1
   198f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   198f6:	6013      	str	r3, [r2, #0]
   198f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   198fa:	2b00      	cmp	r3, #0
   198fc:	d100      	bne.n	19900 <_dtoa_r+0x64>
   198fe:	e22a      	b.n	19d56 <_dtoa_r+0x4ba>
   19900:	48cd      	ldr	r0, [pc, #820]	; (19c38 <_dtoa_r+0x39c>)
   19902:	6018      	str	r0, [r3, #0]
   19904:	3801      	subs	r0, #1
   19906:	b019      	add	sp, #100	; 0x64
   19908:	bc3c      	pop	{r2, r3, r4, r5}
   1990a:	4690      	mov	r8, r2
   1990c:	4699      	mov	r9, r3
   1990e:	46a2      	mov	sl, r4
   19910:	46ab      	mov	fp, r5
   19912:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19914:	4bc9      	ldr	r3, [pc, #804]	; (19c3c <_dtoa_r+0x3a0>)
   19916:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19918:	6013      	str	r3, [r2, #0]
   1991a:	2e00      	cmp	r6, #0
   1991c:	d10b      	bne.n	19936 <_dtoa_r+0x9a>
   1991e:	4643      	mov	r3, r8
   19920:	0318      	lsls	r0, r3, #12
   19922:	d108      	bne.n	19936 <_dtoa_r+0x9a>
   19924:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19926:	48c6      	ldr	r0, [pc, #792]	; (19c40 <_dtoa_r+0x3a4>)
   19928:	2b00      	cmp	r3, #0
   1992a:	d0ec      	beq.n	19906 <_dtoa_r+0x6a>
   1992c:	0003      	movs	r3, r0
   1992e:	3308      	adds	r3, #8
   19930:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19932:	6013      	str	r3, [r2, #0]
   19934:	e7e7      	b.n	19906 <_dtoa_r+0x6a>
   19936:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19938:	48c2      	ldr	r0, [pc, #776]	; (19c44 <_dtoa_r+0x3a8>)
   1993a:	2b00      	cmp	r3, #0
   1993c:	d0e3      	beq.n	19906 <_dtoa_r+0x6a>
   1993e:	1cc3      	adds	r3, r0, #3
   19940:	e7f6      	b.n	19930 <_dtoa_r+0x94>
   19942:	2301      	movs	r3, #1
   19944:	9a25      	ldr	r2, [sp, #148]	; 0x94
   19946:	0068      	lsls	r0, r5, #1
   19948:	6013      	str	r3, [r2, #0]
   1994a:	0843      	lsrs	r3, r0, #1
   1994c:	4698      	mov	r8, r3
   1994e:	001f      	movs	r7, r3
   19950:	e7c2      	b.n	198d8 <_dtoa_r+0x3c>
   19952:	ab16      	add	r3, sp, #88	; 0x58
   19954:	9301      	str	r3, [sp, #4]
   19956:	ab17      	add	r3, sp, #92	; 0x5c
   19958:	9300      	str	r3, [sp, #0]
   1995a:	0032      	movs	r2, r6
   1995c:	003b      	movs	r3, r7
   1995e:	4650      	mov	r0, sl
   19960:	f002 fa68 	bl	1be34 <__d2b>
   19964:	4643      	mov	r3, r8
   19966:	4683      	mov	fp, r0
   19968:	0d1a      	lsrs	r2, r3, #20
   1996a:	d100      	bne.n	1996e <_dtoa_r+0xd2>
   1996c:	e1d6      	b.n	19d1c <_dtoa_r+0x480>
   1996e:	033b      	lsls	r3, r7, #12
   19970:	4cb5      	ldr	r4, [pc, #724]	; (19c48 <_dtoa_r+0x3ac>)
   19972:	0b1b      	lsrs	r3, r3, #12
   19974:	431c      	orrs	r4, r3
   19976:	4bb5      	ldr	r3, [pc, #724]	; (19c4c <_dtoa_r+0x3b0>)
   19978:	0030      	movs	r0, r6
   1997a:	4698      	mov	r8, r3
   1997c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1997e:	0021      	movs	r1, r4
   19980:	4699      	mov	r9, r3
   19982:	2300      	movs	r3, #0
   19984:	4490      	add	r8, r2
   19986:	930f      	str	r3, [sp, #60]	; 0x3c
   19988:	2200      	movs	r2, #0
   1998a:	4bb1      	ldr	r3, [pc, #708]	; (19c50 <_dtoa_r+0x3b4>)
   1998c:	f7fd f9c2 	bl	16d14 <__aeabi_dsub>
   19990:	4ab0      	ldr	r2, [pc, #704]	; (19c54 <_dtoa_r+0x3b8>)
   19992:	4bb1      	ldr	r3, [pc, #708]	; (19c58 <_dtoa_r+0x3bc>)
   19994:	f7fc ff3e 	bl	16814 <__aeabi_dmul>
   19998:	4ab0      	ldr	r2, [pc, #704]	; (19c5c <_dtoa_r+0x3c0>)
   1999a:	4bb1      	ldr	r3, [pc, #708]	; (19c60 <_dtoa_r+0x3c4>)
   1999c:	f7fb fff6 	bl	1598c <__aeabi_dadd>
   199a0:	0004      	movs	r4, r0
   199a2:	4640      	mov	r0, r8
   199a4:	000d      	movs	r5, r1
   199a6:	f7fd fcff 	bl	173a8 <__aeabi_i2d>
   199aa:	4aae      	ldr	r2, [pc, #696]	; (19c64 <_dtoa_r+0x3c8>)
   199ac:	4bae      	ldr	r3, [pc, #696]	; (19c68 <_dtoa_r+0x3cc>)
   199ae:	f7fc ff31 	bl	16814 <__aeabi_dmul>
   199b2:	0002      	movs	r2, r0
   199b4:	000b      	movs	r3, r1
   199b6:	0020      	movs	r0, r4
   199b8:	0029      	movs	r1, r5
   199ba:	f7fb ffe7 	bl	1598c <__aeabi_dadd>
   199be:	0004      	movs	r4, r0
   199c0:	000d      	movs	r5, r1
   199c2:	f7fd fcbd 	bl	17340 <__aeabi_d2iz>
   199c6:	2200      	movs	r2, #0
   199c8:	9003      	str	r0, [sp, #12]
   199ca:	2300      	movs	r3, #0
   199cc:	0020      	movs	r0, r4
   199ce:	0029      	movs	r1, r5
   199d0:	f7fa ff26 	bl	14820 <__aeabi_dcmplt>
   199d4:	2800      	cmp	r0, #0
   199d6:	d000      	beq.n	199da <_dtoa_r+0x13e>
   199d8:	e2b1      	b.n	19f3e <_dtoa_r+0x6a2>
   199da:	2301      	movs	r3, #1
   199dc:	9c03      	ldr	r4, [sp, #12]
   199de:	930c      	str	r3, [sp, #48]	; 0x30
   199e0:	2c16      	cmp	r4, #22
   199e2:	d810      	bhi.n	19a06 <_dtoa_r+0x16a>
   199e4:	49a1      	ldr	r1, [pc, #644]	; (19c6c <_dtoa_r+0x3d0>)
   199e6:	00e3      	lsls	r3, r4, #3
   199e8:	18c9      	adds	r1, r1, r3
   199ea:	0032      	movs	r2, r6
   199ec:	6808      	ldr	r0, [r1, #0]
   199ee:	6849      	ldr	r1, [r1, #4]
   199f0:	003b      	movs	r3, r7
   199f2:	f7fa ff29 	bl	14848 <__aeabi_dcmpgt>
   199f6:	2800      	cmp	r0, #0
   199f8:	d100      	bne.n	199fc <_dtoa_r+0x160>
   199fa:	e31d      	b.n	1a038 <_dtoa_r+0x79c>
   199fc:	0023      	movs	r3, r4
   199fe:	3b01      	subs	r3, #1
   19a00:	9303      	str	r3, [sp, #12]
   19a02:	2300      	movs	r3, #0
   19a04:	930c      	str	r3, [sp, #48]	; 0x30
   19a06:	464b      	mov	r3, r9
   19a08:	4642      	mov	r2, r8
   19a0a:	1a9a      	subs	r2, r3, r2
   19a0c:	2300      	movs	r3, #0
   19a0e:	9306      	str	r3, [sp, #24]
   19a10:	0013      	movs	r3, r2
   19a12:	3b01      	subs	r3, #1
   19a14:	9304      	str	r3, [sp, #16]
   19a16:	d500      	bpl.n	19a1a <_dtoa_r+0x17e>
   19a18:	e2a1      	b.n	19f5e <_dtoa_r+0x6c2>
   19a1a:	9b03      	ldr	r3, [sp, #12]
   19a1c:	2b00      	cmp	r3, #0
   19a1e:	da00      	bge.n	19a22 <_dtoa_r+0x186>
   19a20:	e284      	b.n	19f2c <_dtoa_r+0x690>
   19a22:	469c      	mov	ip, r3
   19a24:	930d      	str	r3, [sp, #52]	; 0x34
   19a26:	2300      	movs	r3, #0
   19a28:	9a04      	ldr	r2, [sp, #16]
   19a2a:	4699      	mov	r9, r3
   19a2c:	0011      	movs	r1, r2
   19a2e:	4461      	add	r1, ip
   19a30:	9104      	str	r1, [sp, #16]
   19a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19a34:	2b09      	cmp	r3, #9
   19a36:	d900      	bls.n	19a3a <_dtoa_r+0x19e>
   19a38:	e18f      	b.n	19d5a <_dtoa_r+0x4be>
   19a3a:	2401      	movs	r4, #1
   19a3c:	2b05      	cmp	r3, #5
   19a3e:	dd02      	ble.n	19a46 <_dtoa_r+0x1aa>
   19a40:	2400      	movs	r4, #0
   19a42:	3b04      	subs	r3, #4
   19a44:	9322      	str	r3, [sp, #136]	; 0x88
   19a46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19a48:	2b03      	cmp	r3, #3
   19a4a:	d101      	bne.n	19a50 <_dtoa_r+0x1b4>
   19a4c:	f000 fcce 	bl	1a3ec <_dtoa_r+0xb50>
   19a50:	dc01      	bgt.n	19a56 <_dtoa_r+0x1ba>
   19a52:	f000 fc92 	bl	1a37a <_dtoa_r+0xade>
   19a56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19a58:	2b04      	cmp	r3, #4
   19a5a:	d101      	bne.n	19a60 <_dtoa_r+0x1c4>
   19a5c:	f000 fc40 	bl	1a2e0 <_dtoa_r+0xa44>
   19a60:	2301      	movs	r3, #1
   19a62:	930b      	str	r3, [sp, #44]	; 0x2c
   19a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19a66:	2b05      	cmp	r3, #5
   19a68:	d001      	beq.n	19a6e <_dtoa_r+0x1d2>
   19a6a:	f000 fc8b 	bl	1a384 <_dtoa_r+0xae8>
   19a6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   19a70:	9b03      	ldr	r3, [sp, #12]
   19a72:	4694      	mov	ip, r2
   19a74:	4463      	add	r3, ip
   19a76:	930e      	str	r3, [sp, #56]	; 0x38
   19a78:	3301      	adds	r3, #1
   19a7a:	9307      	str	r3, [sp, #28]
   19a7c:	1e1d      	subs	r5, r3, #0
   19a7e:	dc01      	bgt.n	19a84 <_dtoa_r+0x1e8>
   19a80:	f000 fd49 	bl	1a516 <_dtoa_r+0xc7a>
   19a84:	9b07      	ldr	r3, [sp, #28]
   19a86:	4698      	mov	r8, r3
   19a88:	2300      	movs	r3, #0
   19a8a:	4652      	mov	r2, sl
   19a8c:	2100      	movs	r1, #0
   19a8e:	6453      	str	r3, [r2, #68]	; 0x44
   19a90:	2d17      	cmp	r5, #23
   19a92:	d90a      	bls.n	19aaa <_dtoa_r+0x20e>
   19a94:	2201      	movs	r2, #1
   19a96:	3304      	adds	r3, #4
   19a98:	005b      	lsls	r3, r3, #1
   19a9a:	0018      	movs	r0, r3
   19a9c:	3014      	adds	r0, #20
   19a9e:	0011      	movs	r1, r2
   19aa0:	3201      	adds	r2, #1
   19aa2:	4285      	cmp	r5, r0
   19aa4:	d2f8      	bcs.n	19a98 <_dtoa_r+0x1fc>
   19aa6:	4653      	mov	r3, sl
   19aa8:	6459      	str	r1, [r3, #68]	; 0x44
   19aaa:	4650      	mov	r0, sl
   19aac:	f001 fed8 	bl	1b860 <_Balloc>
   19ab0:	4653      	mov	r3, sl
   19ab2:	6418      	str	r0, [r3, #64]	; 0x40
   19ab4:	4643      	mov	r3, r8
   19ab6:	900a      	str	r0, [sp, #40]	; 0x28
   19ab8:	2b0e      	cmp	r3, #14
   19aba:	d900      	bls.n	19abe <_dtoa_r+0x222>
   19abc:	e161      	b.n	19d82 <_dtoa_r+0x4e6>
   19abe:	2c00      	cmp	r4, #0
   19ac0:	d100      	bne.n	19ac4 <_dtoa_r+0x228>
   19ac2:	e15e      	b.n	19d82 <_dtoa_r+0x4e6>
   19ac4:	9610      	str	r6, [sp, #64]	; 0x40
   19ac6:	9711      	str	r7, [sp, #68]	; 0x44
   19ac8:	9e03      	ldr	r6, [sp, #12]
   19aca:	2e00      	cmp	r6, #0
   19acc:	dc01      	bgt.n	19ad2 <_dtoa_r+0x236>
   19ace:	f000 fd25 	bl	1a51c <_dtoa_r+0xc80>
   19ad2:	0032      	movs	r2, r6
   19ad4:	210f      	movs	r1, #15
   19ad6:	4b65      	ldr	r3, [pc, #404]	; (19c6c <_dtoa_r+0x3d0>)
   19ad8:	400a      	ands	r2, r1
   19ada:	00d2      	lsls	r2, r2, #3
   19adc:	189b      	adds	r3, r3, r2
   19ade:	1136      	asrs	r6, r6, #4
   19ae0:	681c      	ldr	r4, [r3, #0]
   19ae2:	685d      	ldr	r5, [r3, #4]
   19ae4:	06f3      	lsls	r3, r6, #27
   19ae6:	d401      	bmi.n	19aec <_dtoa_r+0x250>
   19ae8:	f000 fcca 	bl	1a480 <_dtoa_r+0xbe4>
   19aec:	4b60      	ldr	r3, [pc, #384]	; (19c70 <_dtoa_r+0x3d4>)
   19aee:	400e      	ands	r6, r1
   19af0:	6a1a      	ldr	r2, [r3, #32]
   19af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19af4:	9810      	ldr	r0, [sp, #64]	; 0x40
   19af6:	9911      	ldr	r1, [sp, #68]	; 0x44
   19af8:	f7fc fa58 	bl	15fac <__aeabi_ddiv>
   19afc:	2303      	movs	r3, #3
   19afe:	4698      	mov	r8, r3
   19b00:	9008      	str	r0, [sp, #32]
   19b02:	9109      	str	r1, [sp, #36]	; 0x24
   19b04:	2e00      	cmp	r6, #0
   19b06:	d011      	beq.n	19b2c <_dtoa_r+0x290>
   19b08:	4f59      	ldr	r7, [pc, #356]	; (19c70 <_dtoa_r+0x3d4>)
   19b0a:	2301      	movs	r3, #1
   19b0c:	4233      	tst	r3, r6
   19b0e:	d009      	beq.n	19b24 <_dtoa_r+0x288>
   19b10:	469c      	mov	ip, r3
   19b12:	683a      	ldr	r2, [r7, #0]
   19b14:	687b      	ldr	r3, [r7, #4]
   19b16:	0020      	movs	r0, r4
   19b18:	0029      	movs	r1, r5
   19b1a:	44e0      	add	r8, ip
   19b1c:	f7fc fe7a 	bl	16814 <__aeabi_dmul>
   19b20:	0004      	movs	r4, r0
   19b22:	000d      	movs	r5, r1
   19b24:	1076      	asrs	r6, r6, #1
   19b26:	3708      	adds	r7, #8
   19b28:	2e00      	cmp	r6, #0
   19b2a:	d1ee      	bne.n	19b0a <_dtoa_r+0x26e>
   19b2c:	0022      	movs	r2, r4
   19b2e:	9808      	ldr	r0, [sp, #32]
   19b30:	9909      	ldr	r1, [sp, #36]	; 0x24
   19b32:	002b      	movs	r3, r5
   19b34:	f7fc fa3a 	bl	15fac <__aeabi_ddiv>
   19b38:	0006      	movs	r6, r0
   19b3a:	000f      	movs	r7, r1
   19b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19b3e:	2b00      	cmp	r3, #0
   19b40:	d009      	beq.n	19b56 <_dtoa_r+0x2ba>
   19b42:	2200      	movs	r2, #0
   19b44:	4b40      	ldr	r3, [pc, #256]	; (19c48 <_dtoa_r+0x3ac>)
   19b46:	0030      	movs	r0, r6
   19b48:	0039      	movs	r1, r7
   19b4a:	f7fa fe69 	bl	14820 <__aeabi_dcmplt>
   19b4e:	2800      	cmp	r0, #0
   19b50:	d001      	beq.n	19b56 <_dtoa_r+0x2ba>
   19b52:	f000 fdc2 	bl	1a6da <_dtoa_r+0xe3e>
   19b56:	4640      	mov	r0, r8
   19b58:	f7fd fc26 	bl	173a8 <__aeabi_i2d>
   19b5c:	0032      	movs	r2, r6
   19b5e:	003b      	movs	r3, r7
   19b60:	f7fc fe58 	bl	16814 <__aeabi_dmul>
   19b64:	2200      	movs	r2, #0
   19b66:	4b43      	ldr	r3, [pc, #268]	; (19c74 <_dtoa_r+0x3d8>)
   19b68:	f7fb ff10 	bl	1598c <__aeabi_dadd>
   19b6c:	4a42      	ldr	r2, [pc, #264]	; (19c78 <_dtoa_r+0x3dc>)
   19b6e:	000b      	movs	r3, r1
   19b70:	4694      	mov	ip, r2
   19b72:	4463      	add	r3, ip
   19b74:	9008      	str	r0, [sp, #32]
   19b76:	9109      	str	r1, [sp, #36]	; 0x24
   19b78:	9309      	str	r3, [sp, #36]	; 0x24
   19b7a:	9b07      	ldr	r3, [sp, #28]
   19b7c:	2b00      	cmp	r3, #0
   19b7e:	d101      	bne.n	19b84 <_dtoa_r+0x2e8>
   19b80:	f000 fc50 	bl	1a424 <_dtoa_r+0xb88>
   19b84:	9b03      	ldr	r3, [sp, #12]
   19b86:	9313      	str	r3, [sp, #76]	; 0x4c
   19b88:	9b07      	ldr	r3, [sp, #28]
   19b8a:	9312      	str	r3, [sp, #72]	; 0x48
   19b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19b8e:	2b00      	cmp	r3, #0
   19b90:	d101      	bne.n	19b96 <_dtoa_r+0x2fa>
   19b92:	f000 fd1d 	bl	1a5d0 <_dtoa_r+0xd34>
   19b96:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19b98:	2000      	movs	r0, #0
   19b9a:	1e5a      	subs	r2, r3, #1
   19b9c:	4b33      	ldr	r3, [pc, #204]	; (19c6c <_dtoa_r+0x3d0>)
   19b9e:	00d2      	lsls	r2, r2, #3
   19ba0:	189b      	adds	r3, r3, r2
   19ba2:	681a      	ldr	r2, [r3, #0]
   19ba4:	685b      	ldr	r3, [r3, #4]
   19ba6:	4935      	ldr	r1, [pc, #212]	; (19c7c <_dtoa_r+0x3e0>)
   19ba8:	f7fc fa00 	bl	15fac <__aeabi_ddiv>
   19bac:	9a08      	ldr	r2, [sp, #32]
   19bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19bb0:	f7fd f8b0 	bl	16d14 <__aeabi_dsub>
   19bb4:	9008      	str	r0, [sp, #32]
   19bb6:	9109      	str	r1, [sp, #36]	; 0x24
   19bb8:	0039      	movs	r1, r7
   19bba:	0030      	movs	r0, r6
   19bbc:	f7fd fbc0 	bl	17340 <__aeabi_d2iz>
   19bc0:	0004      	movs	r4, r0
   19bc2:	f7fd fbf1 	bl	173a8 <__aeabi_i2d>
   19bc6:	0002      	movs	r2, r0
   19bc8:	000b      	movs	r3, r1
   19bca:	0030      	movs	r0, r6
   19bcc:	0039      	movs	r1, r7
   19bce:	f7fd f8a1 	bl	16d14 <__aeabi_dsub>
   19bd2:	0005      	movs	r5, r0
   19bd4:	000e      	movs	r6, r1
   19bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19bd8:	3430      	adds	r4, #48	; 0x30
   19bda:	1c51      	adds	r1, r2, #1
   19bdc:	b2e7      	uxtb	r7, r4
   19bde:	9114      	str	r1, [sp, #80]	; 0x50
   19be0:	7017      	strb	r7, [r2, #0]
   19be2:	0033      	movs	r3, r6
   19be4:	9808      	ldr	r0, [sp, #32]
   19be6:	9909      	ldr	r1, [sp, #36]	; 0x24
   19be8:	002a      	movs	r2, r5
   19bea:	f7fa fe2d 	bl	14848 <__aeabi_dcmpgt>
   19bee:	2800      	cmp	r0, #0
   19bf0:	d001      	beq.n	19bf6 <_dtoa_r+0x35a>
   19bf2:	f000 fdfe 	bl	1a7f2 <_dtoa_r+0xf56>
   19bf6:	002a      	movs	r2, r5
   19bf8:	0033      	movs	r3, r6
   19bfa:	2000      	movs	r0, #0
   19bfc:	4912      	ldr	r1, [pc, #72]	; (19c48 <_dtoa_r+0x3ac>)
   19bfe:	f7fd f889 	bl	16d14 <__aeabi_dsub>
   19c02:	0002      	movs	r2, r0
   19c04:	000b      	movs	r3, r1
   19c06:	9808      	ldr	r0, [sp, #32]
   19c08:	9909      	ldr	r1, [sp, #36]	; 0x24
   19c0a:	f7fa fe1d 	bl	14848 <__aeabi_dcmpgt>
   19c0e:	2800      	cmp	r0, #0
   19c10:	d001      	beq.n	19c16 <_dtoa_r+0x37a>
   19c12:	f000 fde7 	bl	1a7e4 <_dtoa_r+0xf48>
   19c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19c18:	2b01      	cmp	r3, #1
   19c1a:	d101      	bne.n	19c20 <_dtoa_r+0x384>
   19c1c:	f000 fc78 	bl	1a510 <_dtoa_r+0xc74>
   19c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19c24:	4694      	mov	ip, r2
   19c26:	4463      	add	r3, ip
   19c28:	4698      	mov	r8, r3
   19c2a:	464b      	mov	r3, r9
   19c2c:	9312      	str	r3, [sp, #72]	; 0x48
   19c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19c30:	4699      	mov	r9, r3
   19c32:	e038      	b.n	19ca6 <_dtoa_r+0x40a>
   19c34:	7ff00000 	.word	0x7ff00000
   19c38:	0001d659 	.word	0x0001d659
   19c3c:	0000270f 	.word	0x0000270f
   19c40:	0001e520 	.word	0x0001e520
   19c44:	0001e52c 	.word	0x0001e52c
   19c48:	3ff00000 	.word	0x3ff00000
   19c4c:	fffffc01 	.word	0xfffffc01
   19c50:	3ff80000 	.word	0x3ff80000
   19c54:	636f4361 	.word	0x636f4361
   19c58:	3fd287a7 	.word	0x3fd287a7
   19c5c:	8b60c8b3 	.word	0x8b60c8b3
   19c60:	3fc68a28 	.word	0x3fc68a28
   19c64:	509f79fb 	.word	0x509f79fb
   19c68:	3fd34413 	.word	0x3fd34413
   19c6c:	0001e558 	.word	0x0001e558
   19c70:	0001e530 	.word	0x0001e530
   19c74:	401c0000 	.word	0x401c0000
   19c78:	fcc00000 	.word	0xfcc00000
   19c7c:	3fe00000 	.word	0x3fe00000
   19c80:	002a      	movs	r2, r5
   19c82:	0033      	movs	r3, r6
   19c84:	2000      	movs	r0, #0
   19c86:	49b9      	ldr	r1, [pc, #740]	; (19f6c <_dtoa_r+0x6d0>)
   19c88:	f7fd f844 	bl	16d14 <__aeabi_dsub>
   19c8c:	9a08      	ldr	r2, [sp, #32]
   19c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19c90:	f7fa fdc6 	bl	14820 <__aeabi_dcmplt>
   19c94:	2800      	cmp	r0, #0
   19c96:	d001      	beq.n	19c9c <_dtoa_r+0x400>
   19c98:	f000 fd74 	bl	1a784 <_dtoa_r+0xee8>
   19c9c:	46a1      	mov	r9, r4
   19c9e:	4544      	cmp	r4, r8
   19ca0:	d101      	bne.n	19ca6 <_dtoa_r+0x40a>
   19ca2:	f000 fc33 	bl	1a50c <_dtoa_r+0xc70>
   19ca6:	9808      	ldr	r0, [sp, #32]
   19ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
   19caa:	2200      	movs	r2, #0
   19cac:	4bb0      	ldr	r3, [pc, #704]	; (19f70 <_dtoa_r+0x6d4>)
   19cae:	f7fc fdb1 	bl	16814 <__aeabi_dmul>
   19cb2:	2200      	movs	r2, #0
   19cb4:	4bae      	ldr	r3, [pc, #696]	; (19f70 <_dtoa_r+0x6d4>)
   19cb6:	9008      	str	r0, [sp, #32]
   19cb8:	9109      	str	r1, [sp, #36]	; 0x24
   19cba:	0028      	movs	r0, r5
   19cbc:	0031      	movs	r1, r6
   19cbe:	f7fc fda9 	bl	16814 <__aeabi_dmul>
   19cc2:	000d      	movs	r5, r1
   19cc4:	0004      	movs	r4, r0
   19cc6:	f7fd fb3b 	bl	17340 <__aeabi_d2iz>
   19cca:	0007      	movs	r7, r0
   19ccc:	f7fd fb6c 	bl	173a8 <__aeabi_i2d>
   19cd0:	0002      	movs	r2, r0
   19cd2:	000b      	movs	r3, r1
   19cd4:	0020      	movs	r0, r4
   19cd6:	0029      	movs	r1, r5
   19cd8:	f7fd f81c 	bl	16d14 <__aeabi_dsub>
   19cdc:	464b      	mov	r3, r9
   19cde:	3730      	adds	r7, #48	; 0x30
   19ce0:	b2ff      	uxtb	r7, r7
   19ce2:	1c5c      	adds	r4, r3, #1
   19ce4:	701f      	strb	r7, [r3, #0]
   19ce6:	9a08      	ldr	r2, [sp, #32]
   19ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19cea:	0005      	movs	r5, r0
   19cec:	000e      	movs	r6, r1
   19cee:	f7fa fd97 	bl	14820 <__aeabi_dcmplt>
   19cf2:	2800      	cmp	r0, #0
   19cf4:	d0c4      	beq.n	19c80 <_dtoa_r+0x3e4>
   19cf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19cf8:	9303      	str	r3, [sp, #12]
   19cfa:	4659      	mov	r1, fp
   19cfc:	4650      	mov	r0, sl
   19cfe:	f001 fdd7 	bl	1b8b0 <_Bfree>
   19d02:	2300      	movs	r3, #0
   19d04:	7023      	strb	r3, [r4, #0]
   19d06:	9b03      	ldr	r3, [sp, #12]
   19d08:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19d0a:	3301      	adds	r3, #1
   19d0c:	6013      	str	r3, [r2, #0]
   19d0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19d10:	2b00      	cmp	r3, #0
   19d12:	d100      	bne.n	19d16 <_dtoa_r+0x47a>
   19d14:	e3a8      	b.n	1a468 <_dtoa_r+0xbcc>
   19d16:	601c      	str	r4, [r3, #0]
   19d18:	980a      	ldr	r0, [sp, #40]	; 0x28
   19d1a:	e5f4      	b.n	19906 <_dtoa_r+0x6a>
   19d1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19d1e:	4699      	mov	r9, r3
   19d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19d22:	444b      	add	r3, r9
   19d24:	001c      	movs	r4, r3
   19d26:	4b93      	ldr	r3, [pc, #588]	; (19f74 <_dtoa_r+0x6d8>)
   19d28:	18e3      	adds	r3, r4, r3
   19d2a:	2b20      	cmp	r3, #32
   19d2c:	dc00      	bgt.n	19d30 <_dtoa_r+0x494>
   19d2e:	e17e      	b.n	1a02e <_dtoa_r+0x792>
   19d30:	0031      	movs	r1, r6
   19d32:	4a91      	ldr	r2, [pc, #580]	; (19f78 <_dtoa_r+0x6dc>)
   19d34:	4640      	mov	r0, r8
   19d36:	18a2      	adds	r2, r4, r2
   19d38:	40d1      	lsrs	r1, r2
   19d3a:	000a      	movs	r2, r1
   19d3c:	2140      	movs	r1, #64	; 0x40
   19d3e:	1acb      	subs	r3, r1, r3
   19d40:	4098      	lsls	r0, r3
   19d42:	4310      	orrs	r0, r2
   19d44:	f7fd fb72 	bl	1742c <__aeabi_ui2d>
   19d48:	1e63      	subs	r3, r4, #1
   19d4a:	4698      	mov	r8, r3
   19d4c:	2301      	movs	r3, #1
   19d4e:	4d8b      	ldr	r5, [pc, #556]	; (19f7c <_dtoa_r+0x6e0>)
   19d50:	930f      	str	r3, [sp, #60]	; 0x3c
   19d52:	1949      	adds	r1, r1, r5
   19d54:	e618      	b.n	19988 <_dtoa_r+0xec>
   19d56:	488a      	ldr	r0, [pc, #552]	; (19f80 <_dtoa_r+0x6e4>)
   19d58:	e5d5      	b.n	19906 <_dtoa_r+0x6a>
   19d5a:	2300      	movs	r3, #0
   19d5c:	4652      	mov	r2, sl
   19d5e:	2100      	movs	r1, #0
   19d60:	6453      	str	r3, [r2, #68]	; 0x44
   19d62:	4650      	mov	r0, sl
   19d64:	f001 fd7c 	bl	1b860 <_Balloc>
   19d68:	4653      	mov	r3, sl
   19d6a:	6418      	str	r0, [r3, #64]	; 0x40
   19d6c:	2301      	movs	r3, #1
   19d6e:	425b      	negs	r3, r3
   19d70:	9307      	str	r3, [sp, #28]
   19d72:	930e      	str	r3, [sp, #56]	; 0x38
   19d74:	3302      	adds	r3, #2
   19d76:	2200      	movs	r2, #0
   19d78:	930b      	str	r3, [sp, #44]	; 0x2c
   19d7a:	2300      	movs	r3, #0
   19d7c:	900a      	str	r0, [sp, #40]	; 0x28
   19d7e:	9223      	str	r2, [sp, #140]	; 0x8c
   19d80:	9322      	str	r3, [sp, #136]	; 0x88
   19d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19d84:	2b00      	cmp	r3, #0
   19d86:	da00      	bge.n	19d8a <_dtoa_r+0x4ee>
   19d88:	e0ab      	b.n	19ee2 <_dtoa_r+0x646>
   19d8a:	9a03      	ldr	r2, [sp, #12]
   19d8c:	2a0e      	cmp	r2, #14
   19d8e:	dd00      	ble.n	19d92 <_dtoa_r+0x4f6>
   19d90:	e0a7      	b.n	19ee2 <_dtoa_r+0x646>
   19d92:	4b7c      	ldr	r3, [pc, #496]	; (19f84 <_dtoa_r+0x6e8>)
   19d94:	00d2      	lsls	r2, r2, #3
   19d96:	189b      	adds	r3, r3, r2
   19d98:	685c      	ldr	r4, [r3, #4]
   19d9a:	681b      	ldr	r3, [r3, #0]
   19d9c:	9304      	str	r3, [sp, #16]
   19d9e:	9405      	str	r4, [sp, #20]
   19da0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19da2:	2b00      	cmp	r3, #0
   19da4:	da00      	bge.n	19da8 <_dtoa_r+0x50c>
   19da6:	e2a7      	b.n	1a2f8 <_dtoa_r+0xa5c>
   19da8:	9c04      	ldr	r4, [sp, #16]
   19daa:	9d05      	ldr	r5, [sp, #20]
   19dac:	0030      	movs	r0, r6
   19dae:	0022      	movs	r2, r4
   19db0:	002b      	movs	r3, r5
   19db2:	0039      	movs	r1, r7
   19db4:	f7fc f8fa 	bl	15fac <__aeabi_ddiv>
   19db8:	f7fd fac2 	bl	17340 <__aeabi_d2iz>
   19dbc:	4680      	mov	r8, r0
   19dbe:	f7fd faf3 	bl	173a8 <__aeabi_i2d>
   19dc2:	0022      	movs	r2, r4
   19dc4:	002b      	movs	r3, r5
   19dc6:	f7fc fd25 	bl	16814 <__aeabi_dmul>
   19dca:	0002      	movs	r2, r0
   19dcc:	000b      	movs	r3, r1
   19dce:	0030      	movs	r0, r6
   19dd0:	0039      	movs	r1, r7
   19dd2:	f7fc ff9f 	bl	16d14 <__aeabi_dsub>
   19dd6:	4643      	mov	r3, r8
   19dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19dda:	3330      	adds	r3, #48	; 0x30
   19ddc:	7013      	strb	r3, [r2, #0]
   19dde:	9b07      	ldr	r3, [sp, #28]
   19de0:	0006      	movs	r6, r0
   19de2:	000f      	movs	r7, r1
   19de4:	1c54      	adds	r4, r2, #1
   19de6:	2b01      	cmp	r3, #1
   19de8:	d04e      	beq.n	19e88 <_dtoa_r+0x5ec>
   19dea:	2200      	movs	r2, #0
   19dec:	4b60      	ldr	r3, [pc, #384]	; (19f70 <_dtoa_r+0x6d4>)
   19dee:	f7fc fd11 	bl	16814 <__aeabi_dmul>
   19df2:	2200      	movs	r2, #0
   19df4:	2300      	movs	r3, #0
   19df6:	0006      	movs	r6, r0
   19df8:	000f      	movs	r7, r1
   19dfa:	f7fa fd0b 	bl	14814 <__aeabi_dcmpeq>
   19dfe:	2800      	cmp	r0, #0
   19e00:	d000      	beq.n	19e04 <_dtoa_r+0x568>
   19e02:	e77a      	b.n	19cfa <_dtoa_r+0x45e>
   19e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e06:	9a07      	ldr	r2, [sp, #28]
   19e08:	1c9d      	adds	r5, r3, #2
   19e0a:	469c      	mov	ip, r3
   19e0c:	465b      	mov	r3, fp
   19e0e:	9306      	str	r3, [sp, #24]
   19e10:	4653      	mov	r3, sl
   19e12:	4462      	add	r2, ip
   19e14:	46aa      	mov	sl, r5
   19e16:	9c04      	ldr	r4, [sp, #16]
   19e18:	9d05      	ldr	r5, [sp, #20]
   19e1a:	4691      	mov	r9, r2
   19e1c:	9307      	str	r3, [sp, #28]
   19e1e:	e00f      	b.n	19e40 <_dtoa_r+0x5a4>
   19e20:	2200      	movs	r2, #0
   19e22:	4b53      	ldr	r3, [pc, #332]	; (19f70 <_dtoa_r+0x6d4>)
   19e24:	f7fc fcf6 	bl	16814 <__aeabi_dmul>
   19e28:	2301      	movs	r3, #1
   19e2a:	469c      	mov	ip, r3
   19e2c:	2200      	movs	r2, #0
   19e2e:	2300      	movs	r3, #0
   19e30:	0006      	movs	r6, r0
   19e32:	000f      	movs	r7, r1
   19e34:	44e2      	add	sl, ip
   19e36:	f7fa fced 	bl	14814 <__aeabi_dcmpeq>
   19e3a:	2800      	cmp	r0, #0
   19e3c:	d000      	beq.n	19e40 <_dtoa_r+0x5a4>
   19e3e:	e2d9      	b.n	1a3f4 <_dtoa_r+0xb58>
   19e40:	0022      	movs	r2, r4
   19e42:	002b      	movs	r3, r5
   19e44:	0030      	movs	r0, r6
   19e46:	0039      	movs	r1, r7
   19e48:	f7fc f8b0 	bl	15fac <__aeabi_ddiv>
   19e4c:	f7fd fa78 	bl	17340 <__aeabi_d2iz>
   19e50:	4680      	mov	r8, r0
   19e52:	f7fd faa9 	bl	173a8 <__aeabi_i2d>
   19e56:	0022      	movs	r2, r4
   19e58:	002b      	movs	r3, r5
   19e5a:	f7fc fcdb 	bl	16814 <__aeabi_dmul>
   19e5e:	0002      	movs	r2, r0
   19e60:	000b      	movs	r3, r1
   19e62:	0030      	movs	r0, r6
   19e64:	0039      	movs	r1, r7
   19e66:	f7fc ff55 	bl	16d14 <__aeabi_dsub>
   19e6a:	4653      	mov	r3, sl
   19e6c:	4642      	mov	r2, r8
   19e6e:	3b01      	subs	r3, #1
   19e70:	3230      	adds	r2, #48	; 0x30
   19e72:	0006      	movs	r6, r0
   19e74:	000f      	movs	r7, r1
   19e76:	46d3      	mov	fp, sl
   19e78:	701a      	strb	r2, [r3, #0]
   19e7a:	45d1      	cmp	r9, sl
   19e7c:	d1d0      	bne.n	19e20 <_dtoa_r+0x584>
   19e7e:	9b06      	ldr	r3, [sp, #24]
   19e80:	4654      	mov	r4, sl
   19e82:	469b      	mov	fp, r3
   19e84:	9b07      	ldr	r3, [sp, #28]
   19e86:	469a      	mov	sl, r3
   19e88:	0032      	movs	r2, r6
   19e8a:	003b      	movs	r3, r7
   19e8c:	0030      	movs	r0, r6
   19e8e:	0039      	movs	r1, r7
   19e90:	f7fb fd7c 	bl	1598c <__aeabi_dadd>
   19e94:	0006      	movs	r6, r0
   19e96:	000f      	movs	r7, r1
   19e98:	0002      	movs	r2, r0
   19e9a:	000b      	movs	r3, r1
   19e9c:	9804      	ldr	r0, [sp, #16]
   19e9e:	9905      	ldr	r1, [sp, #20]
   19ea0:	f7fa fcbe 	bl	14820 <__aeabi_dcmplt>
   19ea4:	2800      	cmp	r0, #0
   19ea6:	d10c      	bne.n	19ec2 <_dtoa_r+0x626>
   19ea8:	9804      	ldr	r0, [sp, #16]
   19eaa:	9905      	ldr	r1, [sp, #20]
   19eac:	0032      	movs	r2, r6
   19eae:	003b      	movs	r3, r7
   19eb0:	f7fa fcb0 	bl	14814 <__aeabi_dcmpeq>
   19eb4:	2800      	cmp	r0, #0
   19eb6:	d100      	bne.n	19eba <_dtoa_r+0x61e>
   19eb8:	e71f      	b.n	19cfa <_dtoa_r+0x45e>
   19eba:	4643      	mov	r3, r8
   19ebc:	07db      	lsls	r3, r3, #31
   19ebe:	d400      	bmi.n	19ec2 <_dtoa_r+0x626>
   19ec0:	e71b      	b.n	19cfa <_dtoa_r+0x45e>
   19ec2:	1e65      	subs	r5, r4, #1
   19ec4:	782f      	ldrb	r7, [r5, #0]
   19ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19ec8:	e006      	b.n	19ed8 <_dtoa_r+0x63c>
   19eca:	429d      	cmp	r5, r3
   19ecc:	d100      	bne.n	19ed0 <_dtoa_r+0x634>
   19ece:	e351      	b.n	1a574 <_dtoa_r+0xcd8>
   19ed0:	3c02      	subs	r4, #2
   19ed2:	7827      	ldrb	r7, [r4, #0]
   19ed4:	002c      	movs	r4, r5
   19ed6:	3d01      	subs	r5, #1
   19ed8:	2f39      	cmp	r7, #57	; 0x39
   19eda:	d0f6      	beq.n	19eca <_dtoa_r+0x62e>
   19edc:	3701      	adds	r7, #1
   19ede:	702f      	strb	r7, [r5, #0]
   19ee0:	e70b      	b.n	19cfa <_dtoa_r+0x45e>
   19ee2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19ee4:	2a00      	cmp	r2, #0
   19ee6:	d04f      	beq.n	19f88 <_dtoa_r+0x6ec>
   19ee8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19eea:	2a01      	cmp	r2, #1
   19eec:	dc00      	bgt.n	19ef0 <_dtoa_r+0x654>
   19eee:	e22c      	b.n	1a34a <_dtoa_r+0xaae>
   19ef0:	9b07      	ldr	r3, [sp, #28]
   19ef2:	1e5c      	subs	r4, r3, #1
   19ef4:	464b      	mov	r3, r9
   19ef6:	45a1      	cmp	r9, r4
   19ef8:	da00      	bge.n	19efc <_dtoa_r+0x660>
   19efa:	e2b8      	b.n	1a46e <_dtoa_r+0xbd2>
   19efc:	1b1c      	subs	r4, r3, r4
   19efe:	9b07      	ldr	r3, [sp, #28]
   19f00:	2b00      	cmp	r3, #0
   19f02:	da00      	bge.n	19f06 <_dtoa_r+0x66a>
   19f04:	e3d4      	b.n	1a6b0 <_dtoa_r+0xe14>
   19f06:	9b06      	ldr	r3, [sp, #24]
   19f08:	9308      	str	r3, [sp, #32]
   19f0a:	9b07      	ldr	r3, [sp, #28]
   19f0c:	9a06      	ldr	r2, [sp, #24]
   19f0e:	2101      	movs	r1, #1
   19f10:	4694      	mov	ip, r2
   19f12:	449c      	add	ip, r3
   19f14:	4662      	mov	r2, ip
   19f16:	9206      	str	r2, [sp, #24]
   19f18:	9a04      	ldr	r2, [sp, #16]
   19f1a:	4650      	mov	r0, sl
   19f1c:	4694      	mov	ip, r2
   19f1e:	449c      	add	ip, r3
   19f20:	4663      	mov	r3, ip
   19f22:	9304      	str	r3, [sp, #16]
   19f24:	f001 fd5c 	bl	1b9e0 <__i2b>
   19f28:	4680      	mov	r8, r0
   19f2a:	e032      	b.n	19f92 <_dtoa_r+0x6f6>
   19f2c:	9a06      	ldr	r2, [sp, #24]
   19f2e:	9b03      	ldr	r3, [sp, #12]
   19f30:	1ad2      	subs	r2, r2, r3
   19f32:	425b      	negs	r3, r3
   19f34:	4699      	mov	r9, r3
   19f36:	2300      	movs	r3, #0
   19f38:	9206      	str	r2, [sp, #24]
   19f3a:	930d      	str	r3, [sp, #52]	; 0x34
   19f3c:	e579      	b.n	19a32 <_dtoa_r+0x196>
   19f3e:	9803      	ldr	r0, [sp, #12]
   19f40:	f7fd fa32 	bl	173a8 <__aeabi_i2d>
   19f44:	000b      	movs	r3, r1
   19f46:	0002      	movs	r2, r0
   19f48:	0029      	movs	r1, r5
   19f4a:	0020      	movs	r0, r4
   19f4c:	f7fa fc62 	bl	14814 <__aeabi_dcmpeq>
   19f50:	0002      	movs	r2, r0
   19f52:	4250      	negs	r0, r2
   19f54:	4150      	adcs	r0, r2
   19f56:	9b03      	ldr	r3, [sp, #12]
   19f58:	1a1b      	subs	r3, r3, r0
   19f5a:	9303      	str	r3, [sp, #12]
   19f5c:	e53d      	b.n	199da <_dtoa_r+0x13e>
   19f5e:	2301      	movs	r3, #1
   19f60:	1a9b      	subs	r3, r3, r2
   19f62:	9306      	str	r3, [sp, #24]
   19f64:	2300      	movs	r3, #0
   19f66:	9304      	str	r3, [sp, #16]
   19f68:	e557      	b.n	19a1a <_dtoa_r+0x17e>
   19f6a:	46c0      	nop			; (mov r8, r8)
   19f6c:	3ff00000 	.word	0x3ff00000
   19f70:	40240000 	.word	0x40240000
   19f74:	00000432 	.word	0x00000432
   19f78:	00000412 	.word	0x00000412
   19f7c:	fe100000 	.word	0xfe100000
   19f80:	0001d658 	.word	0x0001d658
   19f84:	0001e558 	.word	0x0001e558
   19f88:	9b06      	ldr	r3, [sp, #24]
   19f8a:	464c      	mov	r4, r9
   19f8c:	9308      	str	r3, [sp, #32]
   19f8e:	2300      	movs	r3, #0
   19f90:	4698      	mov	r8, r3
   19f92:	9908      	ldr	r1, [sp, #32]
   19f94:	1e0b      	subs	r3, r1, #0
   19f96:	dd0e      	ble.n	19fb6 <_dtoa_r+0x71a>
   19f98:	9a04      	ldr	r2, [sp, #16]
   19f9a:	2a00      	cmp	r2, #0
   19f9c:	dd0b      	ble.n	19fb6 <_dtoa_r+0x71a>
   19f9e:	4293      	cmp	r3, r2
   19fa0:	dd00      	ble.n	19fa4 <_dtoa_r+0x708>
   19fa2:	e187      	b.n	1a2b4 <_dtoa_r+0xa18>
   19fa4:	9a06      	ldr	r2, [sp, #24]
   19fa6:	1ad2      	subs	r2, r2, r3
   19fa8:	9206      	str	r2, [sp, #24]
   19faa:	9a08      	ldr	r2, [sp, #32]
   19fac:	1ad2      	subs	r2, r2, r3
   19fae:	9208      	str	r2, [sp, #32]
   19fb0:	9a04      	ldr	r2, [sp, #16]
   19fb2:	1ad3      	subs	r3, r2, r3
   19fb4:	9304      	str	r3, [sp, #16]
   19fb6:	464b      	mov	r3, r9
   19fb8:	2b00      	cmp	r3, #0
   19fba:	d01a      	beq.n	19ff2 <_dtoa_r+0x756>
   19fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19fbe:	2b00      	cmp	r3, #0
   19fc0:	d100      	bne.n	19fc4 <_dtoa_r+0x728>
   19fc2:	e1bb      	b.n	1a33c <_dtoa_r+0xaa0>
   19fc4:	2c00      	cmp	r4, #0
   19fc6:	dd10      	ble.n	19fea <_dtoa_r+0x74e>
   19fc8:	4641      	mov	r1, r8
   19fca:	0022      	movs	r2, r4
   19fcc:	4650      	mov	r0, sl
   19fce:	f001 fdbb 	bl	1bb48 <__pow5mult>
   19fd2:	465a      	mov	r2, fp
   19fd4:	0001      	movs	r1, r0
   19fd6:	4680      	mov	r8, r0
   19fd8:	4650      	mov	r0, sl
   19fda:	f001 fd0b 	bl	1b9f4 <__multiply>
   19fde:	0005      	movs	r5, r0
   19fe0:	4659      	mov	r1, fp
   19fe2:	4650      	mov	r0, sl
   19fe4:	f001 fc64 	bl	1b8b0 <_Bfree>
   19fe8:	46ab      	mov	fp, r5
   19fea:	464b      	mov	r3, r9
   19fec:	1b1a      	subs	r2, r3, r4
   19fee:	d000      	beq.n	19ff2 <_dtoa_r+0x756>
   19ff0:	e1a5      	b.n	1a33e <_dtoa_r+0xaa2>
   19ff2:	2101      	movs	r1, #1
   19ff4:	4650      	mov	r0, sl
   19ff6:	f001 fcf3 	bl	1b9e0 <__i2b>
   19ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19ffc:	4681      	mov	r9, r0
   19ffe:	2b00      	cmp	r3, #0
   1a000:	dd1d      	ble.n	1a03e <_dtoa_r+0x7a2>
   1a002:	001a      	movs	r2, r3
   1a004:	0001      	movs	r1, r0
   1a006:	4650      	mov	r0, sl
   1a008:	f001 fd9e 	bl	1bb48 <__pow5mult>
   1a00c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a00e:	4681      	mov	r9, r0
   1a010:	2b01      	cmp	r3, #1
   1a012:	dc00      	bgt.n	1a016 <_dtoa_r+0x77a>
   1a014:	e150      	b.n	1a2b8 <_dtoa_r+0xa1c>
   1a016:	2400      	movs	r4, #0
   1a018:	464b      	mov	r3, r9
   1a01a:	691b      	ldr	r3, [r3, #16]
   1a01c:	3303      	adds	r3, #3
   1a01e:	009b      	lsls	r3, r3, #2
   1a020:	444b      	add	r3, r9
   1a022:	6858      	ldr	r0, [r3, #4]
   1a024:	f001 fc94 	bl	1b950 <__hi0bits>
   1a028:	2320      	movs	r3, #32
   1a02a:	1a1b      	subs	r3, r3, r0
   1a02c:	e010      	b.n	1a050 <_dtoa_r+0x7b4>
   1a02e:	2220      	movs	r2, #32
   1a030:	0030      	movs	r0, r6
   1a032:	1ad3      	subs	r3, r2, r3
   1a034:	4098      	lsls	r0, r3
   1a036:	e685      	b.n	19d44 <_dtoa_r+0x4a8>
   1a038:	2300      	movs	r3, #0
   1a03a:	930c      	str	r3, [sp, #48]	; 0x30
   1a03c:	e4e3      	b.n	19a06 <_dtoa_r+0x16a>
   1a03e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a040:	2400      	movs	r4, #0
   1a042:	2b01      	cmp	r3, #1
   1a044:	dc00      	bgt.n	1a048 <_dtoa_r+0x7ac>
   1a046:	e18b      	b.n	1a360 <_dtoa_r+0xac4>
   1a048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a04a:	2301      	movs	r3, #1
   1a04c:	2a00      	cmp	r2, #0
   1a04e:	d1e3      	bne.n	1a018 <_dtoa_r+0x77c>
   1a050:	9904      	ldr	r1, [sp, #16]
   1a052:	201f      	movs	r0, #31
   1a054:	468c      	mov	ip, r1
   1a056:	4463      	add	r3, ip
   1a058:	4018      	ands	r0, r3
   1a05a:	d100      	bne.n	1a05e <_dtoa_r+0x7c2>
   1a05c:	e0ae      	b.n	1a1bc <_dtoa_r+0x920>
   1a05e:	2320      	movs	r3, #32
   1a060:	1a1b      	subs	r3, r3, r0
   1a062:	2b04      	cmp	r3, #4
   1a064:	dc00      	bgt.n	1a068 <_dtoa_r+0x7cc>
   1a066:	e3cc      	b.n	1a802 <_dtoa_r+0xf66>
   1a068:	231c      	movs	r3, #28
   1a06a:	1a18      	subs	r0, r3, r0
   1a06c:	9b06      	ldr	r3, [sp, #24]
   1a06e:	469c      	mov	ip, r3
   1a070:	4484      	add	ip, r0
   1a072:	4663      	mov	r3, ip
   1a074:	9306      	str	r3, [sp, #24]
   1a076:	9b08      	ldr	r3, [sp, #32]
   1a078:	469c      	mov	ip, r3
   1a07a:	4484      	add	ip, r0
   1a07c:	4663      	mov	r3, ip
   1a07e:	468c      	mov	ip, r1
   1a080:	4484      	add	ip, r0
   1a082:	9308      	str	r3, [sp, #32]
   1a084:	4663      	mov	r3, ip
   1a086:	9304      	str	r3, [sp, #16]
   1a088:	9b06      	ldr	r3, [sp, #24]
   1a08a:	2b00      	cmp	r3, #0
   1a08c:	dd05      	ble.n	1a09a <_dtoa_r+0x7fe>
   1a08e:	4659      	mov	r1, fp
   1a090:	001a      	movs	r2, r3
   1a092:	4650      	mov	r0, sl
   1a094:	f001 fdb8 	bl	1bc08 <__lshift>
   1a098:	4683      	mov	fp, r0
   1a09a:	9b04      	ldr	r3, [sp, #16]
   1a09c:	2b00      	cmp	r3, #0
   1a09e:	dd05      	ble.n	1a0ac <_dtoa_r+0x810>
   1a0a0:	4649      	mov	r1, r9
   1a0a2:	001a      	movs	r2, r3
   1a0a4:	4650      	mov	r0, sl
   1a0a6:	f001 fdaf 	bl	1bc08 <__lshift>
   1a0aa:	4681      	mov	r9, r0
   1a0ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a0ae:	2b00      	cmp	r3, #0
   1a0b0:	d000      	beq.n	1a0b4 <_dtoa_r+0x818>
   1a0b2:	e094      	b.n	1a1de <_dtoa_r+0x942>
   1a0b4:	9b07      	ldr	r3, [sp, #28]
   1a0b6:	2b00      	cmp	r3, #0
   1a0b8:	dc00      	bgt.n	1a0bc <_dtoa_r+0x820>
   1a0ba:	e175      	b.n	1a3a8 <_dtoa_r+0xb0c>
   1a0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a0be:	2b00      	cmp	r3, #0
   1a0c0:	d100      	bne.n	1a0c4 <_dtoa_r+0x828>
   1a0c2:	e0a6      	b.n	1a212 <_dtoa_r+0x976>
   1a0c4:	9b08      	ldr	r3, [sp, #32]
   1a0c6:	2b00      	cmp	r3, #0
   1a0c8:	dd05      	ble.n	1a0d6 <_dtoa_r+0x83a>
   1a0ca:	4641      	mov	r1, r8
   1a0cc:	001a      	movs	r2, r3
   1a0ce:	4650      	mov	r0, sl
   1a0d0:	f001 fd9a 	bl	1bc08 <__lshift>
   1a0d4:	4680      	mov	r8, r0
   1a0d6:	4643      	mov	r3, r8
   1a0d8:	930c      	str	r3, [sp, #48]	; 0x30
   1a0da:	2c00      	cmp	r4, #0
   1a0dc:	d000      	beq.n	1a0e0 <_dtoa_r+0x844>
   1a0de:	e250      	b.n	1a582 <_dtoa_r+0xce6>
   1a0e0:	9c07      	ldr	r4, [sp, #28]
   1a0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a0e4:	3c01      	subs	r4, #1
   1a0e6:	0023      	movs	r3, r4
   1a0e8:	4694      	mov	ip, r2
   1a0ea:	4463      	add	r3, ip
   1a0ec:	9308      	str	r3, [sp, #32]
   1a0ee:	2301      	movs	r3, #1
   1a0f0:	4033      	ands	r3, r6
   1a0f2:	9307      	str	r3, [sp, #28]
   1a0f4:	464b      	mov	r3, r9
   1a0f6:	9306      	str	r3, [sp, #24]
   1a0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a0fa:	4657      	mov	r7, sl
   1a0fc:	4645      	mov	r5, r8
   1a0fe:	465e      	mov	r6, fp
   1a100:	4692      	mov	sl, r2
   1a102:	4698      	mov	r8, r3
   1a104:	9b06      	ldr	r3, [sp, #24]
   1a106:	0030      	movs	r0, r6
   1a108:	0019      	movs	r1, r3
   1a10a:	4699      	mov	r9, r3
   1a10c:	f7ff fb1c 	bl	19748 <quorem>
   1a110:	0003      	movs	r3, r0
   1a112:	900b      	str	r0, [sp, #44]	; 0x2c
   1a114:	3330      	adds	r3, #48	; 0x30
   1a116:	0029      	movs	r1, r5
   1a118:	0030      	movs	r0, r6
   1a11a:	9304      	str	r3, [sp, #16]
   1a11c:	f001 fdd4 	bl	1bcc8 <__mcmp>
   1a120:	4649      	mov	r1, r9
   1a122:	0004      	movs	r4, r0
   1a124:	4642      	mov	r2, r8
   1a126:	0038      	movs	r0, r7
   1a128:	f001 fde8 	bl	1bcfc <__mdiff>
   1a12c:	68c3      	ldr	r3, [r0, #12]
   1a12e:	4681      	mov	r9, r0
   1a130:	2b00      	cmp	r3, #0
   1a132:	d000      	beq.n	1a136 <_dtoa_r+0x89a>
   1a134:	e11e      	b.n	1a374 <_dtoa_r+0xad8>
   1a136:	0001      	movs	r1, r0
   1a138:	0030      	movs	r0, r6
   1a13a:	f001 fdc5 	bl	1bcc8 <__mcmp>
   1a13e:	4683      	mov	fp, r0
   1a140:	4649      	mov	r1, r9
   1a142:	0038      	movs	r0, r7
   1a144:	f001 fbb4 	bl	1b8b0 <_Bfree>
   1a148:	465b      	mov	r3, fp
   1a14a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1a14c:	4313      	orrs	r3, r2
   1a14e:	d103      	bne.n	1a158 <_dtoa_r+0x8bc>
   1a150:	9b07      	ldr	r3, [sp, #28]
   1a152:	2b00      	cmp	r3, #0
   1a154:	d100      	bne.n	1a158 <_dtoa_r+0x8bc>
   1a156:	e306      	b.n	1a766 <_dtoa_r+0xeca>
   1a158:	2c00      	cmp	r4, #0
   1a15a:	da00      	bge.n	1a15e <_dtoa_r+0x8c2>
   1a15c:	e1a8      	b.n	1a4b0 <_dtoa_r+0xc14>
   1a15e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a160:	431c      	orrs	r4, r3
   1a162:	d103      	bne.n	1a16c <_dtoa_r+0x8d0>
   1a164:	9b07      	ldr	r3, [sp, #28]
   1a166:	2b00      	cmp	r3, #0
   1a168:	d100      	bne.n	1a16c <_dtoa_r+0x8d0>
   1a16a:	e1a1      	b.n	1a4b0 <_dtoa_r+0xc14>
   1a16c:	465b      	mov	r3, fp
   1a16e:	2b00      	cmp	r3, #0
   1a170:	dd00      	ble.n	1a174 <_dtoa_r+0x8d8>
   1a172:	e282      	b.n	1a67a <_dtoa_r+0xdde>
   1a174:	4669      	mov	r1, sp
   1a176:	4652      	mov	r2, sl
   1a178:	4653      	mov	r3, sl
   1a17a:	7c09      	ldrb	r1, [r1, #16]
   1a17c:	1c5c      	adds	r4, r3, #1
   1a17e:	7011      	strb	r1, [r2, #0]
   1a180:	9a08      	ldr	r2, [sp, #32]
   1a182:	4552      	cmp	r2, sl
   1a184:	d100      	bne.n	1a188 <_dtoa_r+0x8ec>
   1a186:	e28a      	b.n	1a69e <_dtoa_r+0xe02>
   1a188:	0031      	movs	r1, r6
   1a18a:	2300      	movs	r3, #0
   1a18c:	220a      	movs	r2, #10
   1a18e:	0038      	movs	r0, r7
   1a190:	f001 fb98 	bl	1b8c4 <__multadd>
   1a194:	2300      	movs	r3, #0
   1a196:	0006      	movs	r6, r0
   1a198:	220a      	movs	r2, #10
   1a19a:	0029      	movs	r1, r5
   1a19c:	0038      	movs	r0, r7
   1a19e:	4545      	cmp	r5, r8
   1a1a0:	d100      	bne.n	1a1a4 <_dtoa_r+0x908>
   1a1a2:	e0e1      	b.n	1a368 <_dtoa_r+0xacc>
   1a1a4:	f001 fb8e 	bl	1b8c4 <__multadd>
   1a1a8:	4641      	mov	r1, r8
   1a1aa:	0005      	movs	r5, r0
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	220a      	movs	r2, #10
   1a1b0:	0038      	movs	r0, r7
   1a1b2:	f001 fb87 	bl	1b8c4 <__multadd>
   1a1b6:	46a2      	mov	sl, r4
   1a1b8:	4680      	mov	r8, r0
   1a1ba:	e7a3      	b.n	1a104 <_dtoa_r+0x868>
   1a1bc:	201c      	movs	r0, #28
   1a1be:	9b06      	ldr	r3, [sp, #24]
   1a1c0:	469c      	mov	ip, r3
   1a1c2:	4484      	add	ip, r0
   1a1c4:	4663      	mov	r3, ip
   1a1c6:	9306      	str	r3, [sp, #24]
   1a1c8:	9b08      	ldr	r3, [sp, #32]
   1a1ca:	469c      	mov	ip, r3
   1a1cc:	4484      	add	ip, r0
   1a1ce:	4663      	mov	r3, ip
   1a1d0:	9308      	str	r3, [sp, #32]
   1a1d2:	9b04      	ldr	r3, [sp, #16]
   1a1d4:	469c      	mov	ip, r3
   1a1d6:	4484      	add	ip, r0
   1a1d8:	4663      	mov	r3, ip
   1a1da:	9304      	str	r3, [sp, #16]
   1a1dc:	e754      	b.n	1a088 <_dtoa_r+0x7ec>
   1a1de:	4649      	mov	r1, r9
   1a1e0:	4658      	mov	r0, fp
   1a1e2:	f001 fd71 	bl	1bcc8 <__mcmp>
   1a1e6:	2800      	cmp	r0, #0
   1a1e8:	db00      	blt.n	1a1ec <_dtoa_r+0x950>
   1a1ea:	e763      	b.n	1a0b4 <_dtoa_r+0x818>
   1a1ec:	9b03      	ldr	r3, [sp, #12]
   1a1ee:	4659      	mov	r1, fp
   1a1f0:	3b01      	subs	r3, #1
   1a1f2:	9303      	str	r3, [sp, #12]
   1a1f4:	220a      	movs	r2, #10
   1a1f6:	2300      	movs	r3, #0
   1a1f8:	4650      	mov	r0, sl
   1a1fa:	f001 fb63 	bl	1b8c4 <__multadd>
   1a1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a200:	4683      	mov	fp, r0
   1a202:	2b00      	cmp	r3, #0
   1a204:	d000      	beq.n	1a208 <_dtoa_r+0x96c>
   1a206:	e2ca      	b.n	1a79e <_dtoa_r+0xf02>
   1a208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a20a:	2b00      	cmp	r3, #0
   1a20c:	dc00      	bgt.n	1a210 <_dtoa_r+0x974>
   1a20e:	e2d8      	b.n	1a7c2 <_dtoa_r+0xf26>
   1a210:	9307      	str	r3, [sp, #28]
   1a212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a214:	465d      	mov	r5, fp
   1a216:	2400      	movs	r4, #0
   1a218:	9f07      	ldr	r7, [sp, #28]
   1a21a:	469b      	mov	fp, r3
   1a21c:	e006      	b.n	1a22c <_dtoa_r+0x990>
   1a21e:	0029      	movs	r1, r5
   1a220:	2300      	movs	r3, #0
   1a222:	220a      	movs	r2, #10
   1a224:	4650      	mov	r0, sl
   1a226:	f001 fb4d 	bl	1b8c4 <__multadd>
   1a22a:	0005      	movs	r5, r0
   1a22c:	4649      	mov	r1, r9
   1a22e:	0028      	movs	r0, r5
   1a230:	f7ff fa8a 	bl	19748 <quorem>
   1a234:	465b      	mov	r3, fp
   1a236:	3030      	adds	r0, #48	; 0x30
   1a238:	5518      	strb	r0, [r3, r4]
   1a23a:	3401      	adds	r4, #1
   1a23c:	42bc      	cmp	r4, r7
   1a23e:	dbee      	blt.n	1a21e <_dtoa_r+0x982>
   1a240:	46ab      	mov	fp, r5
   1a242:	0006      	movs	r6, r0
   1a244:	9c07      	ldr	r4, [sp, #28]
   1a246:	2c00      	cmp	r4, #0
   1a248:	dc00      	bgt.n	1a24c <_dtoa_r+0x9b0>
   1a24a:	e237      	b.n	1a6bc <_dtoa_r+0xe20>
   1a24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a24e:	2700      	movs	r7, #0
   1a250:	469c      	mov	ip, r3
   1a252:	4464      	add	r4, ip
   1a254:	4659      	mov	r1, fp
   1a256:	2201      	movs	r2, #1
   1a258:	4650      	mov	r0, sl
   1a25a:	f001 fcd5 	bl	1bc08 <__lshift>
   1a25e:	4649      	mov	r1, r9
   1a260:	4683      	mov	fp, r0
   1a262:	f001 fd31 	bl	1bcc8 <__mcmp>
   1a266:	2800      	cmp	r0, #0
   1a268:	dc00      	bgt.n	1a26c <_dtoa_r+0x9d0>
   1a26a:	e144      	b.n	1a4f6 <_dtoa_r+0xc5a>
   1a26c:	1e65      	subs	r5, r4, #1
   1a26e:	782b      	ldrb	r3, [r5, #0]
   1a270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a272:	e006      	b.n	1a282 <_dtoa_r+0x9e6>
   1a274:	4295      	cmp	r5, r2
   1a276:	d100      	bne.n	1a27a <_dtoa_r+0x9de>
   1a278:	e0b1      	b.n	1a3de <_dtoa_r+0xb42>
   1a27a:	3c02      	subs	r4, #2
   1a27c:	7823      	ldrb	r3, [r4, #0]
   1a27e:	002c      	movs	r4, r5
   1a280:	3d01      	subs	r5, #1
   1a282:	2b39      	cmp	r3, #57	; 0x39
   1a284:	d0f6      	beq.n	1a274 <_dtoa_r+0x9d8>
   1a286:	3301      	adds	r3, #1
   1a288:	702b      	strb	r3, [r5, #0]
   1a28a:	4649      	mov	r1, r9
   1a28c:	4650      	mov	r0, sl
   1a28e:	f001 fb0f 	bl	1b8b0 <_Bfree>
   1a292:	4643      	mov	r3, r8
   1a294:	2b00      	cmp	r3, #0
   1a296:	d100      	bne.n	1a29a <_dtoa_r+0x9fe>
   1a298:	e52f      	b.n	19cfa <_dtoa_r+0x45e>
   1a29a:	2f00      	cmp	r7, #0
   1a29c:	d005      	beq.n	1a2aa <_dtoa_r+0xa0e>
   1a29e:	4547      	cmp	r7, r8
   1a2a0:	d003      	beq.n	1a2aa <_dtoa_r+0xa0e>
   1a2a2:	0039      	movs	r1, r7
   1a2a4:	4650      	mov	r0, sl
   1a2a6:	f001 fb03 	bl	1b8b0 <_Bfree>
   1a2aa:	4641      	mov	r1, r8
   1a2ac:	4650      	mov	r0, sl
   1a2ae:	f001 faff 	bl	1b8b0 <_Bfree>
   1a2b2:	e522      	b.n	19cfa <_dtoa_r+0x45e>
   1a2b4:	0013      	movs	r3, r2
   1a2b6:	e675      	b.n	19fa4 <_dtoa_r+0x708>
   1a2b8:	2e00      	cmp	r6, #0
   1a2ba:	d000      	beq.n	1a2be <_dtoa_r+0xa22>
   1a2bc:	e6ab      	b.n	1a016 <_dtoa_r+0x77a>
   1a2be:	033b      	lsls	r3, r7, #12
   1a2c0:	2400      	movs	r4, #0
   1a2c2:	2b00      	cmp	r3, #0
   1a2c4:	d000      	beq.n	1a2c8 <_dtoa_r+0xa2c>
   1a2c6:	e6bf      	b.n	1a048 <_dtoa_r+0x7ac>
   1a2c8:	4bba      	ldr	r3, [pc, #744]	; (1a5b4 <_dtoa_r+0xd18>)
   1a2ca:	423b      	tst	r3, r7
   1a2cc:	d100      	bne.n	1a2d0 <_dtoa_r+0xa34>
   1a2ce:	e6bb      	b.n	1a048 <_dtoa_r+0x7ac>
   1a2d0:	9b06      	ldr	r3, [sp, #24]
   1a2d2:	3401      	adds	r4, #1
   1a2d4:	3301      	adds	r3, #1
   1a2d6:	9306      	str	r3, [sp, #24]
   1a2d8:	9b04      	ldr	r3, [sp, #16]
   1a2da:	3301      	adds	r3, #1
   1a2dc:	9304      	str	r3, [sp, #16]
   1a2de:	e6b3      	b.n	1a048 <_dtoa_r+0x7ac>
   1a2e0:	2301      	movs	r3, #1
   1a2e2:	930b      	str	r3, [sp, #44]	; 0x2c
   1a2e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a2e6:	2b00      	cmp	r3, #0
   1a2e8:	dc00      	bgt.n	1a2ec <_dtoa_r+0xa50>
   1a2ea:	e0d1      	b.n	1a490 <_dtoa_r+0xbf4>
   1a2ec:	001d      	movs	r5, r3
   1a2ee:	4698      	mov	r8, r3
   1a2f0:	930e      	str	r3, [sp, #56]	; 0x38
   1a2f2:	9307      	str	r3, [sp, #28]
   1a2f4:	f7ff fbc8 	bl	19a88 <_dtoa_r+0x1ec>
   1a2f8:	9b07      	ldr	r3, [sp, #28]
   1a2fa:	2b00      	cmp	r3, #0
   1a2fc:	dd00      	ble.n	1a300 <_dtoa_r+0xa64>
   1a2fe:	e553      	b.n	19da8 <_dtoa_r+0x50c>
   1a300:	d000      	beq.n	1a304 <_dtoa_r+0xa68>
   1a302:	e0ad      	b.n	1a460 <_dtoa_r+0xbc4>
   1a304:	9804      	ldr	r0, [sp, #16]
   1a306:	9905      	ldr	r1, [sp, #20]
   1a308:	2200      	movs	r2, #0
   1a30a:	4bab      	ldr	r3, [pc, #684]	; (1a5b8 <_dtoa_r+0xd1c>)
   1a30c:	f7fc fa82 	bl	16814 <__aeabi_dmul>
   1a310:	003b      	movs	r3, r7
   1a312:	0032      	movs	r2, r6
   1a314:	f7fa faa2 	bl	1485c <__aeabi_dcmpge>
   1a318:	2300      	movs	r3, #0
   1a31a:	4699      	mov	r9, r3
   1a31c:	4698      	mov	r8, r3
   1a31e:	2800      	cmp	r0, #0
   1a320:	d055      	beq.n	1a3ce <_dtoa_r+0xb32>
   1a322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a326:	43db      	mvns	r3, r3
   1a328:	9303      	str	r3, [sp, #12]
   1a32a:	4649      	mov	r1, r9
   1a32c:	4650      	mov	r0, sl
   1a32e:	f001 fabf 	bl	1b8b0 <_Bfree>
   1a332:	4643      	mov	r3, r8
   1a334:	2b00      	cmp	r3, #0
   1a336:	d100      	bne.n	1a33a <_dtoa_r+0xa9e>
   1a338:	e4df      	b.n	19cfa <_dtoa_r+0x45e>
   1a33a:	e7b6      	b.n	1a2aa <_dtoa_r+0xa0e>
   1a33c:	464a      	mov	r2, r9
   1a33e:	4659      	mov	r1, fp
   1a340:	4650      	mov	r0, sl
   1a342:	f001 fc01 	bl	1bb48 <__pow5mult>
   1a346:	4683      	mov	fp, r0
   1a348:	e653      	b.n	19ff2 <_dtoa_r+0x756>
   1a34a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a34c:	2a00      	cmp	r2, #0
   1a34e:	d100      	bne.n	1a352 <_dtoa_r+0xab6>
   1a350:	e1b6      	b.n	1a6c0 <_dtoa_r+0xe24>
   1a352:	4a9a      	ldr	r2, [pc, #616]	; (1a5bc <_dtoa_r+0xd20>)
   1a354:	464c      	mov	r4, r9
   1a356:	4694      	mov	ip, r2
   1a358:	9a06      	ldr	r2, [sp, #24]
   1a35a:	4463      	add	r3, ip
   1a35c:	9208      	str	r2, [sp, #32]
   1a35e:	e5d5      	b.n	19f0c <_dtoa_r+0x670>
   1a360:	2e00      	cmp	r6, #0
   1a362:	d000      	beq.n	1a366 <_dtoa_r+0xaca>
   1a364:	e670      	b.n	1a048 <_dtoa_r+0x7ac>
   1a366:	e7aa      	b.n	1a2be <_dtoa_r+0xa22>
   1a368:	f001 faac 	bl	1b8c4 <__multadd>
   1a36c:	46a2      	mov	sl, r4
   1a36e:	0005      	movs	r5, r0
   1a370:	4680      	mov	r8, r0
   1a372:	e6c7      	b.n	1a104 <_dtoa_r+0x868>
   1a374:	2301      	movs	r3, #1
   1a376:	469b      	mov	fp, r3
   1a378:	e6e2      	b.n	1a140 <_dtoa_r+0x8a4>
   1a37a:	2300      	movs	r3, #0
   1a37c:	930b      	str	r3, [sp, #44]	; 0x2c
   1a37e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a380:	2b02      	cmp	r3, #2
   1a382:	d0af      	beq.n	1a2e4 <_dtoa_r+0xa48>
   1a384:	2400      	movs	r4, #0
   1a386:	4653      	mov	r3, sl
   1a388:	0021      	movs	r1, r4
   1a38a:	645c      	str	r4, [r3, #68]	; 0x44
   1a38c:	4650      	mov	r0, sl
   1a38e:	f001 fa67 	bl	1b860 <_Balloc>
   1a392:	4653      	mov	r3, sl
   1a394:	6418      	str	r0, [r3, #64]	; 0x40
   1a396:	2301      	movs	r3, #1
   1a398:	425b      	negs	r3, r3
   1a39a:	9307      	str	r3, [sp, #28]
   1a39c:	930e      	str	r3, [sp, #56]	; 0x38
   1a39e:	3302      	adds	r3, #2
   1a3a0:	900a      	str	r0, [sp, #40]	; 0x28
   1a3a2:	9423      	str	r4, [sp, #140]	; 0x8c
   1a3a4:	930b      	str	r3, [sp, #44]	; 0x2c
   1a3a6:	e4ec      	b.n	19d82 <_dtoa_r+0x4e6>
   1a3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a3aa:	2b02      	cmp	r3, #2
   1a3ac:	dc00      	bgt.n	1a3b0 <_dtoa_r+0xb14>
   1a3ae:	e685      	b.n	1a0bc <_dtoa_r+0x820>
   1a3b0:	9b07      	ldr	r3, [sp, #28]
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	d1b5      	bne.n	1a322 <_dtoa_r+0xa86>
   1a3b6:	4649      	mov	r1, r9
   1a3b8:	2205      	movs	r2, #5
   1a3ba:	4650      	mov	r0, sl
   1a3bc:	f001 fa82 	bl	1b8c4 <__multadd>
   1a3c0:	4681      	mov	r9, r0
   1a3c2:	0001      	movs	r1, r0
   1a3c4:	4658      	mov	r0, fp
   1a3c6:	f001 fc7f 	bl	1bcc8 <__mcmp>
   1a3ca:	2800      	cmp	r0, #0
   1a3cc:	dda9      	ble.n	1a322 <_dtoa_r+0xa86>
   1a3ce:	2331      	movs	r3, #49	; 0x31
   1a3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a3d2:	7013      	strb	r3, [r2, #0]
   1a3d4:	9b03      	ldr	r3, [sp, #12]
   1a3d6:	1c54      	adds	r4, r2, #1
   1a3d8:	3301      	adds	r3, #1
   1a3da:	9303      	str	r3, [sp, #12]
   1a3dc:	e7a5      	b.n	1a32a <_dtoa_r+0xa8e>
   1a3de:	9b03      	ldr	r3, [sp, #12]
   1a3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a3e2:	3301      	adds	r3, #1
   1a3e4:	9303      	str	r3, [sp, #12]
   1a3e6:	2331      	movs	r3, #49	; 0x31
   1a3e8:	7013      	strb	r3, [r2, #0]
   1a3ea:	e74e      	b.n	1a28a <_dtoa_r+0x9ee>
   1a3ec:	2300      	movs	r3, #0
   1a3ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1a3f0:	f7ff fb3d 	bl	19a6e <_dtoa_r+0x1d2>
   1a3f4:	9b06      	ldr	r3, [sp, #24]
   1a3f6:	465c      	mov	r4, fp
   1a3f8:	469b      	mov	fp, r3
   1a3fa:	9b07      	ldr	r3, [sp, #28]
   1a3fc:	469a      	mov	sl, r3
   1a3fe:	e47c      	b.n	19cfa <_dtoa_r+0x45e>
   1a400:	4640      	mov	r0, r8
   1a402:	f7fc ffd1 	bl	173a8 <__aeabi_i2d>
   1a406:	0032      	movs	r2, r6
   1a408:	003b      	movs	r3, r7
   1a40a:	f7fc fa03 	bl	16814 <__aeabi_dmul>
   1a40e:	2200      	movs	r2, #0
   1a410:	4b6b      	ldr	r3, [pc, #428]	; (1a5c0 <_dtoa_r+0xd24>)
   1a412:	f7fb fabb 	bl	1598c <__aeabi_dadd>
   1a416:	4a6b      	ldr	r2, [pc, #428]	; (1a5c4 <_dtoa_r+0xd28>)
   1a418:	000b      	movs	r3, r1
   1a41a:	4694      	mov	ip, r2
   1a41c:	4463      	add	r3, ip
   1a41e:	9008      	str	r0, [sp, #32]
   1a420:	9109      	str	r1, [sp, #36]	; 0x24
   1a422:	9309      	str	r3, [sp, #36]	; 0x24
   1a424:	2200      	movs	r2, #0
   1a426:	4b64      	ldr	r3, [pc, #400]	; (1a5b8 <_dtoa_r+0xd1c>)
   1a428:	0030      	movs	r0, r6
   1a42a:	0039      	movs	r1, r7
   1a42c:	f7fc fc72 	bl	16d14 <__aeabi_dsub>
   1a430:	9e08      	ldr	r6, [sp, #32]
   1a432:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1a434:	0032      	movs	r2, r6
   1a436:	003b      	movs	r3, r7
   1a438:	0004      	movs	r4, r0
   1a43a:	000d      	movs	r5, r1
   1a43c:	f7fa fa04 	bl	14848 <__aeabi_dcmpgt>
   1a440:	2800      	cmp	r0, #0
   1a442:	d000      	beq.n	1a446 <_dtoa_r+0xbaa>
   1a444:	e0b2      	b.n	1a5ac <_dtoa_r+0xd10>
   1a446:	2080      	movs	r0, #128	; 0x80
   1a448:	0600      	lsls	r0, r0, #24
   1a44a:	4684      	mov	ip, r0
   1a44c:	0039      	movs	r1, r7
   1a44e:	4461      	add	r1, ip
   1a450:	000b      	movs	r3, r1
   1a452:	0032      	movs	r2, r6
   1a454:	0020      	movs	r0, r4
   1a456:	0029      	movs	r1, r5
   1a458:	f7fa f9e2 	bl	14820 <__aeabi_dcmplt>
   1a45c:	2800      	cmp	r0, #0
   1a45e:	d057      	beq.n	1a510 <_dtoa_r+0xc74>
   1a460:	2300      	movs	r3, #0
   1a462:	4699      	mov	r9, r3
   1a464:	4698      	mov	r8, r3
   1a466:	e75c      	b.n	1a322 <_dtoa_r+0xa86>
   1a468:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a46a:	f7ff fa4c 	bl	19906 <_dtoa_r+0x6a>
   1a46e:	1ae2      	subs	r2, r4, r3
   1a470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a472:	46a1      	mov	r9, r4
   1a474:	469c      	mov	ip, r3
   1a476:	4494      	add	ip, r2
   1a478:	4663      	mov	r3, ip
   1a47a:	2400      	movs	r4, #0
   1a47c:	930d      	str	r3, [sp, #52]	; 0x34
   1a47e:	e53e      	b.n	19efe <_dtoa_r+0x662>
   1a480:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a482:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a484:	9208      	str	r2, [sp, #32]
   1a486:	9309      	str	r3, [sp, #36]	; 0x24
   1a488:	2302      	movs	r3, #2
   1a48a:	4698      	mov	r8, r3
   1a48c:	f7ff fb3a 	bl	19b04 <_dtoa_r+0x268>
   1a490:	2300      	movs	r3, #0
   1a492:	4652      	mov	r2, sl
   1a494:	2100      	movs	r1, #0
   1a496:	6453      	str	r3, [r2, #68]	; 0x44
   1a498:	4650      	mov	r0, sl
   1a49a:	f001 f9e1 	bl	1b860 <_Balloc>
   1a49e:	4653      	mov	r3, sl
   1a4a0:	6418      	str	r0, [r3, #64]	; 0x40
   1a4a2:	2301      	movs	r3, #1
   1a4a4:	900a      	str	r0, [sp, #40]	; 0x28
   1a4a6:	9307      	str	r3, [sp, #28]
   1a4a8:	9323      	str	r3, [sp, #140]	; 0x8c
   1a4aa:	930e      	str	r3, [sp, #56]	; 0x38
   1a4ac:	f7ff fb07 	bl	19abe <_dtoa_r+0x222>
   1a4b0:	4643      	mov	r3, r8
   1a4b2:	930c      	str	r3, [sp, #48]	; 0x30
   1a4b4:	465b      	mov	r3, fp
   1a4b6:	9a06      	ldr	r2, [sp, #24]
   1a4b8:	46a8      	mov	r8, r5
   1a4ba:	46b3      	mov	fp, r6
   1a4bc:	4655      	mov	r5, sl
   1a4be:	9e04      	ldr	r6, [sp, #16]
   1a4c0:	4691      	mov	r9, r2
   1a4c2:	46ba      	mov	sl, r7
   1a4c4:	2b00      	cmp	r3, #0
   1a4c6:	dd10      	ble.n	1a4ea <_dtoa_r+0xc4e>
   1a4c8:	4659      	mov	r1, fp
   1a4ca:	2201      	movs	r2, #1
   1a4cc:	0038      	movs	r0, r7
   1a4ce:	f001 fb9b 	bl	1bc08 <__lshift>
   1a4d2:	4649      	mov	r1, r9
   1a4d4:	4683      	mov	fp, r0
   1a4d6:	f001 fbf7 	bl	1bcc8 <__mcmp>
   1a4da:	2800      	cmp	r0, #0
   1a4dc:	dc00      	bgt.n	1a4e0 <_dtoa_r+0xc44>
   1a4de:	e157      	b.n	1a790 <_dtoa_r+0xef4>
   1a4e0:	2e39      	cmp	r6, #57	; 0x39
   1a4e2:	d100      	bne.n	1a4e6 <_dtoa_r+0xc4a>
   1a4e4:	e122      	b.n	1a72c <_dtoa_r+0xe90>
   1a4e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a4e8:	3631      	adds	r6, #49	; 0x31
   1a4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a4ec:	4647      	mov	r7, r8
   1a4ee:	1c6c      	adds	r4, r5, #1
   1a4f0:	702e      	strb	r6, [r5, #0]
   1a4f2:	4698      	mov	r8, r3
   1a4f4:	e6c9      	b.n	1a28a <_dtoa_r+0x9ee>
   1a4f6:	2800      	cmp	r0, #0
   1a4f8:	d103      	bne.n	1a502 <_dtoa_r+0xc66>
   1a4fa:	07f3      	lsls	r3, r6, #31
   1a4fc:	d501      	bpl.n	1a502 <_dtoa_r+0xc66>
   1a4fe:	e6b5      	b.n	1a26c <_dtoa_r+0x9d0>
   1a500:	001c      	movs	r4, r3
   1a502:	1e63      	subs	r3, r4, #1
   1a504:	781a      	ldrb	r2, [r3, #0]
   1a506:	2a30      	cmp	r2, #48	; 0x30
   1a508:	d0fa      	beq.n	1a500 <_dtoa_r+0xc64>
   1a50a:	e6be      	b.n	1a28a <_dtoa_r+0x9ee>
   1a50c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a50e:	4699      	mov	r9, r3
   1a510:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1a512:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a514:	e435      	b.n	19d82 <_dtoa_r+0x4e6>
   1a516:	2501      	movs	r5, #1
   1a518:	f7ff fab4 	bl	19a84 <_dtoa_r+0x1e8>
   1a51c:	9b03      	ldr	r3, [sp, #12]
   1a51e:	2b00      	cmp	r3, #0
   1a520:	d100      	bne.n	1a524 <_dtoa_r+0xc88>
   1a522:	e0d4      	b.n	1a6ce <_dtoa_r+0xe32>
   1a524:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a526:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a528:	425c      	negs	r4, r3
   1a52a:	230f      	movs	r3, #15
   1a52c:	4a26      	ldr	r2, [pc, #152]	; (1a5c8 <_dtoa_r+0xd2c>)
   1a52e:	4023      	ands	r3, r4
   1a530:	00db      	lsls	r3, r3, #3
   1a532:	18d3      	adds	r3, r2, r3
   1a534:	681a      	ldr	r2, [r3, #0]
   1a536:	685b      	ldr	r3, [r3, #4]
   1a538:	f7fc f96c 	bl	16814 <__aeabi_dmul>
   1a53c:	1124      	asrs	r4, r4, #4
   1a53e:	0006      	movs	r6, r0
   1a540:	000f      	movs	r7, r1
   1a542:	2c00      	cmp	r4, #0
   1a544:	d100      	bne.n	1a548 <_dtoa_r+0xcac>
   1a546:	e149      	b.n	1a7dc <_dtoa_r+0xf40>
   1a548:	2302      	movs	r3, #2
   1a54a:	4698      	mov	r8, r3
   1a54c:	4d1f      	ldr	r5, [pc, #124]	; (1a5cc <_dtoa_r+0xd30>)
   1a54e:	2301      	movs	r3, #1
   1a550:	4223      	tst	r3, r4
   1a552:	d009      	beq.n	1a568 <_dtoa_r+0xccc>
   1a554:	469c      	mov	ip, r3
   1a556:	682a      	ldr	r2, [r5, #0]
   1a558:	686b      	ldr	r3, [r5, #4]
   1a55a:	0030      	movs	r0, r6
   1a55c:	0039      	movs	r1, r7
   1a55e:	44e0      	add	r8, ip
   1a560:	f7fc f958 	bl	16814 <__aeabi_dmul>
   1a564:	0006      	movs	r6, r0
   1a566:	000f      	movs	r7, r1
   1a568:	1064      	asrs	r4, r4, #1
   1a56a:	3508      	adds	r5, #8
   1a56c:	2c00      	cmp	r4, #0
   1a56e:	d1ee      	bne.n	1a54e <_dtoa_r+0xcb2>
   1a570:	f7ff fae4 	bl	19b3c <_dtoa_r+0x2a0>
   1a574:	9b03      	ldr	r3, [sp, #12]
   1a576:	2730      	movs	r7, #48	; 0x30
   1a578:	3301      	adds	r3, #1
   1a57a:	9303      	str	r3, [sp, #12]
   1a57c:	2330      	movs	r3, #48	; 0x30
   1a57e:	702b      	strb	r3, [r5, #0]
   1a580:	e4ac      	b.n	19edc <_dtoa_r+0x640>
   1a582:	6859      	ldr	r1, [r3, #4]
   1a584:	4650      	mov	r0, sl
   1a586:	f001 f96b 	bl	1b860 <_Balloc>
   1a58a:	4643      	mov	r3, r8
   1a58c:	4641      	mov	r1, r8
   1a58e:	0004      	movs	r4, r0
   1a590:	691b      	ldr	r3, [r3, #16]
   1a592:	310c      	adds	r1, #12
   1a594:	1c9a      	adds	r2, r3, #2
   1a596:	0092      	lsls	r2, r2, #2
   1a598:	300c      	adds	r0, #12
   1a59a:	f7fd f879 	bl	17690 <memcpy>
   1a59e:	2201      	movs	r2, #1
   1a5a0:	0021      	movs	r1, r4
   1a5a2:	4650      	mov	r0, sl
   1a5a4:	f001 fb30 	bl	1bc08 <__lshift>
   1a5a8:	900c      	str	r0, [sp, #48]	; 0x30
   1a5aa:	e599      	b.n	1a0e0 <_dtoa_r+0x844>
   1a5ac:	2300      	movs	r3, #0
   1a5ae:	4699      	mov	r9, r3
   1a5b0:	4698      	mov	r8, r3
   1a5b2:	e70c      	b.n	1a3ce <_dtoa_r+0xb32>
   1a5b4:	7ff00000 	.word	0x7ff00000
   1a5b8:	40140000 	.word	0x40140000
   1a5bc:	00000433 	.word	0x00000433
   1a5c0:	401c0000 	.word	0x401c0000
   1a5c4:	fcc00000 	.word	0xfcc00000
   1a5c8:	0001e558 	.word	0x0001e558
   1a5cc:	0001e530 	.word	0x0001e530
   1a5d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a5d2:	498f      	ldr	r1, [pc, #572]	; (1a810 <_dtoa_r+0xf74>)
   1a5d4:	3b01      	subs	r3, #1
   1a5d6:	00db      	lsls	r3, r3, #3
   1a5d8:	18c9      	adds	r1, r1, r3
   1a5da:	6808      	ldr	r0, [r1, #0]
   1a5dc:	6849      	ldr	r1, [r1, #4]
   1a5de:	9a08      	ldr	r2, [sp, #32]
   1a5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a5e2:	f7fc f917 	bl	16814 <__aeabi_dmul>
   1a5e6:	9014      	str	r0, [sp, #80]	; 0x50
   1a5e8:	9115      	str	r1, [sp, #84]	; 0x54
   1a5ea:	0039      	movs	r1, r7
   1a5ec:	0030      	movs	r0, r6
   1a5ee:	f7fc fea7 	bl	17340 <__aeabi_d2iz>
   1a5f2:	0005      	movs	r5, r0
   1a5f4:	f7fc fed8 	bl	173a8 <__aeabi_i2d>
   1a5f8:	0002      	movs	r2, r0
   1a5fa:	000b      	movs	r3, r1
   1a5fc:	0030      	movs	r0, r6
   1a5fe:	0039      	movs	r1, r7
   1a600:	f7fc fb88 	bl	16d14 <__aeabi_dsub>
   1a604:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a606:	9008      	str	r0, [sp, #32]
   1a608:	9109      	str	r1, [sp, #36]	; 0x24
   1a60a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a60c:	001a      	movs	r2, r3
   1a60e:	468c      	mov	ip, r1
   1a610:	3530      	adds	r5, #48	; 0x30
   1a612:	4462      	add	r2, ip
   1a614:	1c4c      	adds	r4, r1, #1
   1a616:	700d      	strb	r5, [r1, #0]
   1a618:	4690      	mov	r8, r2
   1a61a:	2b01      	cmp	r3, #1
   1a61c:	d01b      	beq.n	1a656 <_dtoa_r+0xdba>
   1a61e:	9808      	ldr	r0, [sp, #32]
   1a620:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a622:	0025      	movs	r5, r4
   1a624:	2200      	movs	r2, #0
   1a626:	4b7b      	ldr	r3, [pc, #492]	; (1a814 <_dtoa_r+0xf78>)
   1a628:	f7fc f8f4 	bl	16814 <__aeabi_dmul>
   1a62c:	000f      	movs	r7, r1
   1a62e:	0006      	movs	r6, r0
   1a630:	f7fc fe86 	bl	17340 <__aeabi_d2iz>
   1a634:	0004      	movs	r4, r0
   1a636:	f7fc feb7 	bl	173a8 <__aeabi_i2d>
   1a63a:	3430      	adds	r4, #48	; 0x30
   1a63c:	0002      	movs	r2, r0
   1a63e:	000b      	movs	r3, r1
   1a640:	0030      	movs	r0, r6
   1a642:	0039      	movs	r1, r7
   1a644:	f7fc fb66 	bl	16d14 <__aeabi_dsub>
   1a648:	702c      	strb	r4, [r5, #0]
   1a64a:	3501      	adds	r5, #1
   1a64c:	45a8      	cmp	r8, r5
   1a64e:	d1e9      	bne.n	1a624 <_dtoa_r+0xd88>
   1a650:	4644      	mov	r4, r8
   1a652:	9008      	str	r0, [sp, #32]
   1a654:	9109      	str	r1, [sp, #36]	; 0x24
   1a656:	9814      	ldr	r0, [sp, #80]	; 0x50
   1a658:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a65a:	2200      	movs	r2, #0
   1a65c:	4b6e      	ldr	r3, [pc, #440]	; (1a818 <_dtoa_r+0xf7c>)
   1a65e:	f7fb f995 	bl	1598c <__aeabi_dadd>
   1a662:	9a08      	ldr	r2, [sp, #32]
   1a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a666:	f7fa f8db 	bl	14820 <__aeabi_dcmplt>
   1a66a:	2800      	cmp	r0, #0
   1a66c:	d067      	beq.n	1a73e <_dtoa_r+0xea2>
   1a66e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a670:	1e65      	subs	r5, r4, #1
   1a672:	9303      	str	r3, [sp, #12]
   1a674:	782f      	ldrb	r7, [r5, #0]
   1a676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a678:	e42e      	b.n	19ed8 <_dtoa_r+0x63c>
   1a67a:	4643      	mov	r3, r8
   1a67c:	46b3      	mov	fp, r6
   1a67e:	930c      	str	r3, [sp, #48]	; 0x30
   1a680:	9e04      	ldr	r6, [sp, #16]
   1a682:	9b06      	ldr	r3, [sp, #24]
   1a684:	46a8      	mov	r8, r5
   1a686:	4699      	mov	r9, r3
   1a688:	4655      	mov	r5, sl
   1a68a:	46ba      	mov	sl, r7
   1a68c:	2e39      	cmp	r6, #57	; 0x39
   1a68e:	d04d      	beq.n	1a72c <_dtoa_r+0xe90>
   1a690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a692:	3601      	adds	r6, #1
   1a694:	4647      	mov	r7, r8
   1a696:	1c6c      	adds	r4, r5, #1
   1a698:	702e      	strb	r6, [r5, #0]
   1a69a:	4698      	mov	r8, r3
   1a69c:	e5f5      	b.n	1a28a <_dtoa_r+0x9ee>
   1a69e:	4642      	mov	r2, r8
   1a6a0:	9b06      	ldr	r3, [sp, #24]
   1a6a2:	46b3      	mov	fp, r6
   1a6a4:	46ba      	mov	sl, r7
   1a6a6:	9e04      	ldr	r6, [sp, #16]
   1a6a8:	4699      	mov	r9, r3
   1a6aa:	002f      	movs	r7, r5
   1a6ac:	4690      	mov	r8, r2
   1a6ae:	e5d1      	b.n	1a254 <_dtoa_r+0x9b8>
   1a6b0:	9b06      	ldr	r3, [sp, #24]
   1a6b2:	9a07      	ldr	r2, [sp, #28]
   1a6b4:	1a9b      	subs	r3, r3, r2
   1a6b6:	9308      	str	r3, [sp, #32]
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	e427      	b.n	19f0c <_dtoa_r+0x670>
   1a6bc:	2401      	movs	r4, #1
   1a6be:	e5c5      	b.n	1a24c <_dtoa_r+0x9b0>
   1a6c0:	2336      	movs	r3, #54	; 0x36
   1a6c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a6c4:	464c      	mov	r4, r9
   1a6c6:	1a9b      	subs	r3, r3, r2
   1a6c8:	9a06      	ldr	r2, [sp, #24]
   1a6ca:	9208      	str	r2, [sp, #32]
   1a6cc:	e41e      	b.n	19f0c <_dtoa_r+0x670>
   1a6ce:	2302      	movs	r3, #2
   1a6d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1a6d2:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a6d4:	4698      	mov	r8, r3
   1a6d6:	f7ff fa31 	bl	19b3c <_dtoa_r+0x2a0>
   1a6da:	9b07      	ldr	r3, [sp, #28]
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	d100      	bne.n	1a6e2 <_dtoa_r+0xe46>
   1a6e0:	e68e      	b.n	1a400 <_dtoa_r+0xb64>
   1a6e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1a6e4:	2c00      	cmp	r4, #0
   1a6e6:	dc00      	bgt.n	1a6ea <_dtoa_r+0xe4e>
   1a6e8:	e712      	b.n	1a510 <_dtoa_r+0xc74>
   1a6ea:	9b03      	ldr	r3, [sp, #12]
   1a6ec:	2200      	movs	r2, #0
   1a6ee:	3b01      	subs	r3, #1
   1a6f0:	9313      	str	r3, [sp, #76]	; 0x4c
   1a6f2:	0030      	movs	r0, r6
   1a6f4:	4b47      	ldr	r3, [pc, #284]	; (1a814 <_dtoa_r+0xf78>)
   1a6f6:	0039      	movs	r1, r7
   1a6f8:	f7fc f88c 	bl	16814 <__aeabi_dmul>
   1a6fc:	0006      	movs	r6, r0
   1a6fe:	4640      	mov	r0, r8
   1a700:	000f      	movs	r7, r1
   1a702:	3001      	adds	r0, #1
   1a704:	f7fc fe50 	bl	173a8 <__aeabi_i2d>
   1a708:	0032      	movs	r2, r6
   1a70a:	003b      	movs	r3, r7
   1a70c:	f7fc f882 	bl	16814 <__aeabi_dmul>
   1a710:	2200      	movs	r2, #0
   1a712:	4b42      	ldr	r3, [pc, #264]	; (1a81c <_dtoa_r+0xf80>)
   1a714:	f7fb f93a 	bl	1598c <__aeabi_dadd>
   1a718:	4a41      	ldr	r2, [pc, #260]	; (1a820 <_dtoa_r+0xf84>)
   1a71a:	000b      	movs	r3, r1
   1a71c:	4694      	mov	ip, r2
   1a71e:	4463      	add	r3, ip
   1a720:	9008      	str	r0, [sp, #32]
   1a722:	9109      	str	r1, [sp, #36]	; 0x24
   1a724:	9412      	str	r4, [sp, #72]	; 0x48
   1a726:	9309      	str	r3, [sp, #36]	; 0x24
   1a728:	f7ff fa30 	bl	19b8c <_dtoa_r+0x2f0>
   1a72c:	2339      	movs	r3, #57	; 0x39
   1a72e:	702b      	strb	r3, [r5, #0]
   1a730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a732:	4647      	mov	r7, r8
   1a734:	1c6c      	adds	r4, r5, #1
   1a736:	4698      	mov	r8, r3
   1a738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a73a:	2339      	movs	r3, #57	; 0x39
   1a73c:	e5a1      	b.n	1a282 <_dtoa_r+0x9e6>
   1a73e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a740:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a742:	2000      	movs	r0, #0
   1a744:	4934      	ldr	r1, [pc, #208]	; (1a818 <_dtoa_r+0xf7c>)
   1a746:	f7fc fae5 	bl	16d14 <__aeabi_dsub>
   1a74a:	9a08      	ldr	r2, [sp, #32]
   1a74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a74e:	f7fa f87b 	bl	14848 <__aeabi_dcmpgt>
   1a752:	2800      	cmp	r0, #0
   1a754:	d101      	bne.n	1a75a <_dtoa_r+0xebe>
   1a756:	e6db      	b.n	1a510 <_dtoa_r+0xc74>
   1a758:	001c      	movs	r4, r3
   1a75a:	1e63      	subs	r3, r4, #1
   1a75c:	781a      	ldrb	r2, [r3, #0]
   1a75e:	2a30      	cmp	r2, #48	; 0x30
   1a760:	d0fa      	beq.n	1a758 <_dtoa_r+0xebc>
   1a762:	f7ff fac8 	bl	19cf6 <_dtoa_r+0x45a>
   1a766:	4643      	mov	r3, r8
   1a768:	46b3      	mov	fp, r6
   1a76a:	930c      	str	r3, [sp, #48]	; 0x30
   1a76c:	9e04      	ldr	r6, [sp, #16]
   1a76e:	9b06      	ldr	r3, [sp, #24]
   1a770:	46a8      	mov	r8, r5
   1a772:	4699      	mov	r9, r3
   1a774:	4655      	mov	r5, sl
   1a776:	46ba      	mov	sl, r7
   1a778:	2e39      	cmp	r6, #57	; 0x39
   1a77a:	d0d7      	beq.n	1a72c <_dtoa_r+0xe90>
   1a77c:	2c00      	cmp	r4, #0
   1a77e:	dd00      	ble.n	1a782 <_dtoa_r+0xee6>
   1a780:	e6b1      	b.n	1a4e6 <_dtoa_r+0xc4a>
   1a782:	e6b2      	b.n	1a4ea <_dtoa_r+0xc4e>
   1a784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a786:	464d      	mov	r5, r9
   1a788:	9203      	str	r2, [sp, #12]
   1a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a78c:	f7ff fba4 	bl	19ed8 <_dtoa_r+0x63c>
   1a790:	2800      	cmp	r0, #0
   1a792:	d000      	beq.n	1a796 <_dtoa_r+0xefa>
   1a794:	e6a9      	b.n	1a4ea <_dtoa_r+0xc4e>
   1a796:	07f3      	lsls	r3, r6, #31
   1a798:	d400      	bmi.n	1a79c <_dtoa_r+0xf00>
   1a79a:	e6a6      	b.n	1a4ea <_dtoa_r+0xc4e>
   1a79c:	e6a0      	b.n	1a4e0 <_dtoa_r+0xc44>
   1a79e:	2300      	movs	r3, #0
   1a7a0:	4641      	mov	r1, r8
   1a7a2:	220a      	movs	r2, #10
   1a7a4:	4650      	mov	r0, sl
   1a7a6:	f001 f88d 	bl	1b8c4 <__multadd>
   1a7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7ac:	4680      	mov	r8, r0
   1a7ae:	2b00      	cmp	r3, #0
   1a7b0:	dd01      	ble.n	1a7b6 <_dtoa_r+0xf1a>
   1a7b2:	9307      	str	r3, [sp, #28]
   1a7b4:	e486      	b.n	1a0c4 <_dtoa_r+0x828>
   1a7b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a7b8:	2b02      	cmp	r3, #2
   1a7ba:	dc1f      	bgt.n	1a7fc <_dtoa_r+0xf60>
   1a7bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7be:	9307      	str	r3, [sp, #28]
   1a7c0:	e480      	b.n	1a0c4 <_dtoa_r+0x828>
   1a7c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a7c4:	2b02      	cmp	r3, #2
   1a7c6:	dc19      	bgt.n	1a7fc <_dtoa_r+0xf60>
   1a7c8:	4649      	mov	r1, r9
   1a7ca:	f7fe ffbd 	bl	19748 <quorem>
   1a7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7d0:	3030      	adds	r0, #48	; 0x30
   1a7d2:	7018      	strb	r0, [r3, #0]
   1a7d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7d6:	0006      	movs	r6, r0
   1a7d8:	9307      	str	r3, [sp, #28]
   1a7da:	e533      	b.n	1a244 <_dtoa_r+0x9a8>
   1a7dc:	2302      	movs	r3, #2
   1a7de:	4698      	mov	r8, r3
   1a7e0:	f7ff f9ac 	bl	19b3c <_dtoa_r+0x2a0>
   1a7e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a7e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a7e8:	9303      	str	r3, [sp, #12]
   1a7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7ec:	001d      	movs	r5, r3
   1a7ee:	f7ff fb73 	bl	19ed8 <_dtoa_r+0x63c>
   1a7f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a7f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a7f6:	9303      	str	r3, [sp, #12]
   1a7f8:	f7ff fa7f 	bl	19cfa <_dtoa_r+0x45e>
   1a7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7fe:	9307      	str	r3, [sp, #28]
   1a800:	e5d6      	b.n	1a3b0 <_dtoa_r+0xb14>
   1a802:	2b04      	cmp	r3, #4
   1a804:	d100      	bne.n	1a808 <_dtoa_r+0xf6c>
   1a806:	e43f      	b.n	1a088 <_dtoa_r+0x7ec>
   1a808:	233c      	movs	r3, #60	; 0x3c
   1a80a:	1a18      	subs	r0, r3, r0
   1a80c:	e4d7      	b.n	1a1be <_dtoa_r+0x922>
   1a80e:	46c0      	nop			; (mov r8, r8)
   1a810:	0001e558 	.word	0x0001e558
   1a814:	40240000 	.word	0x40240000
   1a818:	3fe00000 	.word	0x3fe00000
   1a81c:	401c0000 	.word	0x401c0000
   1a820:	fcc00000 	.word	0xfcc00000

0001a824 <__sflush_r>:
   1a824:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a826:	46c6      	mov	lr, r8
   1a828:	b500      	push	{lr}
   1a82a:	230c      	movs	r3, #12
   1a82c:	5eca      	ldrsh	r2, [r1, r3]
   1a82e:	4680      	mov	r8, r0
   1a830:	b293      	uxth	r3, r2
   1a832:	000c      	movs	r4, r1
   1a834:	0719      	lsls	r1, r3, #28
   1a836:	d440      	bmi.n	1a8ba <__sflush_r+0x96>
   1a838:	2380      	movs	r3, #128	; 0x80
   1a83a:	011b      	lsls	r3, r3, #4
   1a83c:	4313      	orrs	r3, r2
   1a83e:	6862      	ldr	r2, [r4, #4]
   1a840:	81a3      	strh	r3, [r4, #12]
   1a842:	2a00      	cmp	r2, #0
   1a844:	dc00      	bgt.n	1a848 <__sflush_r+0x24>
   1a846:	e070      	b.n	1a92a <__sflush_r+0x106>
   1a848:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a84a:	2e00      	cmp	r6, #0
   1a84c:	d031      	beq.n	1a8b2 <__sflush_r+0x8e>
   1a84e:	4642      	mov	r2, r8
   1a850:	4641      	mov	r1, r8
   1a852:	6815      	ldr	r5, [r2, #0]
   1a854:	2200      	movs	r2, #0
   1a856:	b29b      	uxth	r3, r3
   1a858:	600a      	str	r2, [r1, #0]
   1a85a:	04da      	lsls	r2, r3, #19
   1a85c:	d400      	bmi.n	1a860 <__sflush_r+0x3c>
   1a85e:	e069      	b.n	1a934 <__sflush_r+0x110>
   1a860:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1a862:	075b      	lsls	r3, r3, #29
   1a864:	d506      	bpl.n	1a874 <__sflush_r+0x50>
   1a866:	6863      	ldr	r3, [r4, #4]
   1a868:	1ad2      	subs	r2, r2, r3
   1a86a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a86c:	2b00      	cmp	r3, #0
   1a86e:	d001      	beq.n	1a874 <__sflush_r+0x50>
   1a870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a872:	1ad2      	subs	r2, r2, r3
   1a874:	2300      	movs	r3, #0
   1a876:	69e1      	ldr	r1, [r4, #28]
   1a878:	4640      	mov	r0, r8
   1a87a:	47b0      	blx	r6
   1a87c:	1c43      	adds	r3, r0, #1
   1a87e:	d03d      	beq.n	1a8fc <__sflush_r+0xd8>
   1a880:	89a3      	ldrh	r3, [r4, #12]
   1a882:	4a3a      	ldr	r2, [pc, #232]	; (1a96c <__sflush_r+0x148>)
   1a884:	4013      	ands	r3, r2
   1a886:	2200      	movs	r2, #0
   1a888:	6062      	str	r2, [r4, #4]
   1a88a:	6922      	ldr	r2, [r4, #16]
   1a88c:	b21b      	sxth	r3, r3
   1a88e:	81a3      	strh	r3, [r4, #12]
   1a890:	6022      	str	r2, [r4, #0]
   1a892:	04db      	lsls	r3, r3, #19
   1a894:	d447      	bmi.n	1a926 <__sflush_r+0x102>
   1a896:	4643      	mov	r3, r8
   1a898:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a89a:	601d      	str	r5, [r3, #0]
   1a89c:	2900      	cmp	r1, #0
   1a89e:	d008      	beq.n	1a8b2 <__sflush_r+0x8e>
   1a8a0:	0023      	movs	r3, r4
   1a8a2:	3340      	adds	r3, #64	; 0x40
   1a8a4:	4299      	cmp	r1, r3
   1a8a6:	d002      	beq.n	1a8ae <__sflush_r+0x8a>
   1a8a8:	4640      	mov	r0, r8
   1a8aa:	f000 f967 	bl	1ab7c <_free_r>
   1a8ae:	2300      	movs	r3, #0
   1a8b0:	6323      	str	r3, [r4, #48]	; 0x30
   1a8b2:	2000      	movs	r0, #0
   1a8b4:	bc04      	pop	{r2}
   1a8b6:	4690      	mov	r8, r2
   1a8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8ba:	6926      	ldr	r6, [r4, #16]
   1a8bc:	2e00      	cmp	r6, #0
   1a8be:	d0f8      	beq.n	1a8b2 <__sflush_r+0x8e>
   1a8c0:	6822      	ldr	r2, [r4, #0]
   1a8c2:	6026      	str	r6, [r4, #0]
   1a8c4:	1b95      	subs	r5, r2, r6
   1a8c6:	2200      	movs	r2, #0
   1a8c8:	079b      	lsls	r3, r3, #30
   1a8ca:	d100      	bne.n	1a8ce <__sflush_r+0xaa>
   1a8cc:	6962      	ldr	r2, [r4, #20]
   1a8ce:	60a2      	str	r2, [r4, #8]
   1a8d0:	2d00      	cmp	r5, #0
   1a8d2:	dc04      	bgt.n	1a8de <__sflush_r+0xba>
   1a8d4:	e7ed      	b.n	1a8b2 <__sflush_r+0x8e>
   1a8d6:	1836      	adds	r6, r6, r0
   1a8d8:	1a2d      	subs	r5, r5, r0
   1a8da:	2d00      	cmp	r5, #0
   1a8dc:	dde9      	ble.n	1a8b2 <__sflush_r+0x8e>
   1a8de:	002b      	movs	r3, r5
   1a8e0:	0032      	movs	r2, r6
   1a8e2:	69e1      	ldr	r1, [r4, #28]
   1a8e4:	4640      	mov	r0, r8
   1a8e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a8e8:	47b8      	blx	r7
   1a8ea:	2800      	cmp	r0, #0
   1a8ec:	dcf3      	bgt.n	1a8d6 <__sflush_r+0xb2>
   1a8ee:	2240      	movs	r2, #64	; 0x40
   1a8f0:	2001      	movs	r0, #1
   1a8f2:	89a3      	ldrh	r3, [r4, #12]
   1a8f4:	4240      	negs	r0, r0
   1a8f6:	4313      	orrs	r3, r2
   1a8f8:	81a3      	strh	r3, [r4, #12]
   1a8fa:	e7db      	b.n	1a8b4 <__sflush_r+0x90>
   1a8fc:	4643      	mov	r3, r8
   1a8fe:	6819      	ldr	r1, [r3, #0]
   1a900:	291d      	cmp	r1, #29
   1a902:	d8f4      	bhi.n	1a8ee <__sflush_r+0xca>
   1a904:	4b1a      	ldr	r3, [pc, #104]	; (1a970 <__sflush_r+0x14c>)
   1a906:	2201      	movs	r2, #1
   1a908:	40cb      	lsrs	r3, r1
   1a90a:	439a      	bics	r2, r3
   1a90c:	d1ef      	bne.n	1a8ee <__sflush_r+0xca>
   1a90e:	89a3      	ldrh	r3, [r4, #12]
   1a910:	4e16      	ldr	r6, [pc, #88]	; (1a96c <__sflush_r+0x148>)
   1a912:	6062      	str	r2, [r4, #4]
   1a914:	4033      	ands	r3, r6
   1a916:	6922      	ldr	r2, [r4, #16]
   1a918:	b21b      	sxth	r3, r3
   1a91a:	81a3      	strh	r3, [r4, #12]
   1a91c:	6022      	str	r2, [r4, #0]
   1a91e:	04db      	lsls	r3, r3, #19
   1a920:	d5b9      	bpl.n	1a896 <__sflush_r+0x72>
   1a922:	2900      	cmp	r1, #0
   1a924:	d1b7      	bne.n	1a896 <__sflush_r+0x72>
   1a926:	6520      	str	r0, [r4, #80]	; 0x50
   1a928:	e7b5      	b.n	1a896 <__sflush_r+0x72>
   1a92a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1a92c:	2a00      	cmp	r2, #0
   1a92e:	dd00      	ble.n	1a932 <__sflush_r+0x10e>
   1a930:	e78a      	b.n	1a848 <__sflush_r+0x24>
   1a932:	e7be      	b.n	1a8b2 <__sflush_r+0x8e>
   1a934:	2200      	movs	r2, #0
   1a936:	2301      	movs	r3, #1
   1a938:	69e1      	ldr	r1, [r4, #28]
   1a93a:	4640      	mov	r0, r8
   1a93c:	47b0      	blx	r6
   1a93e:	0002      	movs	r2, r0
   1a940:	1c43      	adds	r3, r0, #1
   1a942:	d002      	beq.n	1a94a <__sflush_r+0x126>
   1a944:	89a3      	ldrh	r3, [r4, #12]
   1a946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a948:	e78b      	b.n	1a862 <__sflush_r+0x3e>
   1a94a:	4643      	mov	r3, r8
   1a94c:	681b      	ldr	r3, [r3, #0]
   1a94e:	2b00      	cmp	r3, #0
   1a950:	d0f8      	beq.n	1a944 <__sflush_r+0x120>
   1a952:	2b1d      	cmp	r3, #29
   1a954:	d001      	beq.n	1a95a <__sflush_r+0x136>
   1a956:	2b16      	cmp	r3, #22
   1a958:	d103      	bne.n	1a962 <__sflush_r+0x13e>
   1a95a:	4643      	mov	r3, r8
   1a95c:	2000      	movs	r0, #0
   1a95e:	601d      	str	r5, [r3, #0]
   1a960:	e7a8      	b.n	1a8b4 <__sflush_r+0x90>
   1a962:	2140      	movs	r1, #64	; 0x40
   1a964:	89a3      	ldrh	r3, [r4, #12]
   1a966:	430b      	orrs	r3, r1
   1a968:	81a3      	strh	r3, [r4, #12]
   1a96a:	e7a3      	b.n	1a8b4 <__sflush_r+0x90>
   1a96c:	fffff7ff 	.word	0xfffff7ff
   1a970:	20400001 	.word	0x20400001

0001a974 <_fflush_r>:
   1a974:	b570      	push	{r4, r5, r6, lr}
   1a976:	0005      	movs	r5, r0
   1a978:	000c      	movs	r4, r1
   1a97a:	2800      	cmp	r0, #0
   1a97c:	d002      	beq.n	1a984 <_fflush_r+0x10>
   1a97e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a980:	2b00      	cmp	r3, #0
   1a982:	d016      	beq.n	1a9b2 <_fflush_r+0x3e>
   1a984:	220c      	movs	r2, #12
   1a986:	5ea3      	ldrsh	r3, [r4, r2]
   1a988:	2600      	movs	r6, #0
   1a98a:	2b00      	cmp	r3, #0
   1a98c:	d00f      	beq.n	1a9ae <_fflush_r+0x3a>
   1a98e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a990:	07d2      	lsls	r2, r2, #31
   1a992:	d401      	bmi.n	1a998 <_fflush_r+0x24>
   1a994:	059b      	lsls	r3, r3, #22
   1a996:	d513      	bpl.n	1a9c0 <_fflush_r+0x4c>
   1a998:	0021      	movs	r1, r4
   1a99a:	0028      	movs	r0, r5
   1a99c:	f7ff ff42 	bl	1a824 <__sflush_r>
   1a9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a9a2:	0006      	movs	r6, r0
   1a9a4:	07db      	lsls	r3, r3, #31
   1a9a6:	d402      	bmi.n	1a9ae <_fflush_r+0x3a>
   1a9a8:	89a3      	ldrh	r3, [r4, #12]
   1a9aa:	059b      	lsls	r3, r3, #22
   1a9ac:	d504      	bpl.n	1a9b8 <_fflush_r+0x44>
   1a9ae:	0030      	movs	r0, r6
   1a9b0:	bd70      	pop	{r4, r5, r6, pc}
   1a9b2:	f000 f839 	bl	1aa28 <__sinit>
   1a9b6:	e7e5      	b.n	1a984 <_fflush_r+0x10>
   1a9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a9ba:	f000 fb79 	bl	1b0b0 <__retarget_lock_release_recursive>
   1a9be:	e7f6      	b.n	1a9ae <_fflush_r+0x3a>
   1a9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a9c2:	f000 fb73 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1a9c6:	e7e7      	b.n	1a998 <_fflush_r+0x24>

0001a9c8 <_cleanup_r>:
   1a9c8:	b510      	push	{r4, lr}
   1a9ca:	4902      	ldr	r1, [pc, #8]	; (1a9d4 <_cleanup_r+0xc>)
   1a9cc:	f000 fb36 	bl	1b03c <_fwalk_reent>
   1a9d0:	bd10      	pop	{r4, pc}
   1a9d2:	46c0      	nop			; (mov r8, r8)
   1a9d4:	0001c55d 	.word	0x0001c55d

0001a9d8 <std.isra.0>:
   1a9d8:	2300      	movs	r3, #0
   1a9da:	b510      	push	{r4, lr}
   1a9dc:	0004      	movs	r4, r0
   1a9de:	6003      	str	r3, [r0, #0]
   1a9e0:	6043      	str	r3, [r0, #4]
   1a9e2:	6083      	str	r3, [r0, #8]
   1a9e4:	8181      	strh	r1, [r0, #12]
   1a9e6:	6643      	str	r3, [r0, #100]	; 0x64
   1a9e8:	81c2      	strh	r2, [r0, #14]
   1a9ea:	6103      	str	r3, [r0, #16]
   1a9ec:	6143      	str	r3, [r0, #20]
   1a9ee:	6183      	str	r3, [r0, #24]
   1a9f0:	2208      	movs	r2, #8
   1a9f2:	2100      	movs	r1, #0
   1a9f4:	305c      	adds	r0, #92	; 0x5c
   1a9f6:	f7fc fe8d 	bl	17714 <memset>
   1a9fa:	0020      	movs	r0, r4
   1a9fc:	4b06      	ldr	r3, [pc, #24]	; (1aa18 <std.isra.0+0x40>)
   1a9fe:	61e4      	str	r4, [r4, #28]
   1aa00:	6223      	str	r3, [r4, #32]
   1aa02:	4b06      	ldr	r3, [pc, #24]	; (1aa1c <std.isra.0+0x44>)
   1aa04:	3058      	adds	r0, #88	; 0x58
   1aa06:	6263      	str	r3, [r4, #36]	; 0x24
   1aa08:	4b05      	ldr	r3, [pc, #20]	; (1aa20 <std.isra.0+0x48>)
   1aa0a:	62a3      	str	r3, [r4, #40]	; 0x28
   1aa0c:	4b05      	ldr	r3, [pc, #20]	; (1aa24 <std.isra.0+0x4c>)
   1aa0e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1aa10:	f000 fb48 	bl	1b0a4 <__retarget_lock_init_recursive>
   1aa14:	bd10      	pop	{r4, pc}
   1aa16:	46c0      	nop			; (mov r8, r8)
   1aa18:	0001c291 	.word	0x0001c291
   1aa1c:	0001c2b9 	.word	0x0001c2b9
   1aa20:	0001c2f5 	.word	0x0001c2f5
   1aa24:	0001c321 	.word	0x0001c321

0001aa28 <__sinit>:
   1aa28:	b570      	push	{r4, r5, r6, lr}
   1aa2a:	0004      	movs	r4, r0
   1aa2c:	4d14      	ldr	r5, [pc, #80]	; (1aa80 <__sinit+0x58>)
   1aa2e:	0028      	movs	r0, r5
   1aa30:	f000 fb3c 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1aa34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d11d      	bne.n	1aa76 <__sinit+0x4e>
   1aa3a:	4a12      	ldr	r2, [pc, #72]	; (1aa84 <__sinit+0x5c>)
   1aa3c:	2104      	movs	r1, #4
   1aa3e:	63e2      	str	r2, [r4, #60]	; 0x3c
   1aa40:	22b8      	movs	r2, #184	; 0xb8
   1aa42:	0092      	lsls	r2, r2, #2
   1aa44:	50a3      	str	r3, [r4, r2]
   1aa46:	23b9      	movs	r3, #185	; 0xb9
   1aa48:	2203      	movs	r2, #3
   1aa4a:	009b      	lsls	r3, r3, #2
   1aa4c:	50e2      	str	r2, [r4, r3]
   1aa4e:	3308      	adds	r3, #8
   1aa50:	18e2      	adds	r2, r4, r3
   1aa52:	3b04      	subs	r3, #4
   1aa54:	50e2      	str	r2, [r4, r3]
   1aa56:	6860      	ldr	r0, [r4, #4]
   1aa58:	2200      	movs	r2, #0
   1aa5a:	f7ff ffbd 	bl	1a9d8 <std.isra.0>
   1aa5e:	2201      	movs	r2, #1
   1aa60:	2109      	movs	r1, #9
   1aa62:	68a0      	ldr	r0, [r4, #8]
   1aa64:	f7ff ffb8 	bl	1a9d8 <std.isra.0>
   1aa68:	2202      	movs	r2, #2
   1aa6a:	2112      	movs	r1, #18
   1aa6c:	68e0      	ldr	r0, [r4, #12]
   1aa6e:	f7ff ffb3 	bl	1a9d8 <std.isra.0>
   1aa72:	2301      	movs	r3, #1
   1aa74:	63a3      	str	r3, [r4, #56]	; 0x38
   1aa76:	0028      	movs	r0, r5
   1aa78:	f000 fb1a 	bl	1b0b0 <__retarget_lock_release_recursive>
   1aa7c:	bd70      	pop	{r4, r5, r6, pc}
   1aa7e:	46c0      	nop			; (mov r8, r8)
   1aa80:	20002e28 	.word	0x20002e28
   1aa84:	0001a9c9 	.word	0x0001a9c9

0001aa88 <__sfp_lock_acquire>:
   1aa88:	b510      	push	{r4, lr}
   1aa8a:	4802      	ldr	r0, [pc, #8]	; (1aa94 <__sfp_lock_acquire+0xc>)
   1aa8c:	f000 fb0e 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1aa90:	bd10      	pop	{r4, pc}
   1aa92:	46c0      	nop			; (mov r8, r8)
   1aa94:	20002e3c 	.word	0x20002e3c

0001aa98 <__sfp_lock_release>:
   1aa98:	b510      	push	{r4, lr}
   1aa9a:	4802      	ldr	r0, [pc, #8]	; (1aaa4 <__sfp_lock_release+0xc>)
   1aa9c:	f000 fb08 	bl	1b0b0 <__retarget_lock_release_recursive>
   1aaa0:	bd10      	pop	{r4, pc}
   1aaa2:	46c0      	nop			; (mov r8, r8)
   1aaa4:	20002e3c 	.word	0x20002e3c

0001aaa8 <__libc_fini_array>:
   1aaa8:	b570      	push	{r4, r5, r6, lr}
   1aaaa:	4b09      	ldr	r3, [pc, #36]	; (1aad0 <__libc_fini_array+0x28>)
   1aaac:	4c09      	ldr	r4, [pc, #36]	; (1aad4 <__libc_fini_array+0x2c>)
   1aaae:	1ae4      	subs	r4, r4, r3
   1aab0:	10a4      	asrs	r4, r4, #2
   1aab2:	d009      	beq.n	1aac8 <__libc_fini_array+0x20>
   1aab4:	4a08      	ldr	r2, [pc, #32]	; (1aad8 <__libc_fini_array+0x30>)
   1aab6:	18a5      	adds	r5, r4, r2
   1aab8:	00ad      	lsls	r5, r5, #2
   1aaba:	18ed      	adds	r5, r5, r3
   1aabc:	682b      	ldr	r3, [r5, #0]
   1aabe:	3c01      	subs	r4, #1
   1aac0:	4798      	blx	r3
   1aac2:	3d04      	subs	r5, #4
   1aac4:	2c00      	cmp	r4, #0
   1aac6:	d1f9      	bne.n	1aabc <__libc_fini_array+0x14>
   1aac8:	f003 fdba 	bl	1e640 <_fini>
   1aacc:	bd70      	pop	{r4, r5, r6, pc}
   1aace:	46c0      	nop			; (mov r8, r8)
   1aad0:	0001e64c 	.word	0x0001e64c
   1aad4:	0001e650 	.word	0x0001e650
   1aad8:	3fffffff 	.word	0x3fffffff

0001aadc <_malloc_trim_r>:
   1aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aade:	000c      	movs	r4, r1
   1aae0:	0006      	movs	r6, r0
   1aae2:	f000 fead 	bl	1b840 <__malloc_lock>
   1aae6:	4f20      	ldr	r7, [pc, #128]	; (1ab68 <_malloc_trim_r+0x8c>)
   1aae8:	68bb      	ldr	r3, [r7, #8]
   1aaea:	685d      	ldr	r5, [r3, #4]
   1aaec:	2303      	movs	r3, #3
   1aaee:	439d      	bics	r5, r3
   1aaf0:	4b1e      	ldr	r3, [pc, #120]	; (1ab6c <_malloc_trim_r+0x90>)
   1aaf2:	1b2c      	subs	r4, r5, r4
   1aaf4:	469c      	mov	ip, r3
   1aaf6:	4464      	add	r4, ip
   1aaf8:	0b24      	lsrs	r4, r4, #12
   1aafa:	4b1d      	ldr	r3, [pc, #116]	; (1ab70 <_malloc_trim_r+0x94>)
   1aafc:	3c01      	subs	r4, #1
   1aafe:	0324      	lsls	r4, r4, #12
   1ab00:	429c      	cmp	r4, r3
   1ab02:	dd07      	ble.n	1ab14 <_malloc_trim_r+0x38>
   1ab04:	2100      	movs	r1, #0
   1ab06:	0030      	movs	r0, r6
   1ab08:	f001 fbb0 	bl	1c26c <_sbrk_r>
   1ab0c:	68bb      	ldr	r3, [r7, #8]
   1ab0e:	195b      	adds	r3, r3, r5
   1ab10:	4298      	cmp	r0, r3
   1ab12:	d004      	beq.n	1ab1e <_malloc_trim_r+0x42>
   1ab14:	0030      	movs	r0, r6
   1ab16:	f000 fe9b 	bl	1b850 <__malloc_unlock>
   1ab1a:	2000      	movs	r0, #0
   1ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab1e:	4261      	negs	r1, r4
   1ab20:	0030      	movs	r0, r6
   1ab22:	f001 fba3 	bl	1c26c <_sbrk_r>
   1ab26:	1c43      	adds	r3, r0, #1
   1ab28:	d00d      	beq.n	1ab46 <_malloc_trim_r+0x6a>
   1ab2a:	2201      	movs	r2, #1
   1ab2c:	68bb      	ldr	r3, [r7, #8]
   1ab2e:	1b2d      	subs	r5, r5, r4
   1ab30:	4315      	orrs	r5, r2
   1ab32:	605d      	str	r5, [r3, #4]
   1ab34:	4b0f      	ldr	r3, [pc, #60]	; (1ab74 <_malloc_trim_r+0x98>)
   1ab36:	0030      	movs	r0, r6
   1ab38:	681a      	ldr	r2, [r3, #0]
   1ab3a:	1b14      	subs	r4, r2, r4
   1ab3c:	601c      	str	r4, [r3, #0]
   1ab3e:	f000 fe87 	bl	1b850 <__malloc_unlock>
   1ab42:	2001      	movs	r0, #1
   1ab44:	e7ea      	b.n	1ab1c <_malloc_trim_r+0x40>
   1ab46:	2100      	movs	r1, #0
   1ab48:	0030      	movs	r0, r6
   1ab4a:	f001 fb8f 	bl	1c26c <_sbrk_r>
   1ab4e:	68ba      	ldr	r2, [r7, #8]
   1ab50:	1a83      	subs	r3, r0, r2
   1ab52:	2b0f      	cmp	r3, #15
   1ab54:	ddde      	ble.n	1ab14 <_malloc_trim_r+0x38>
   1ab56:	4908      	ldr	r1, [pc, #32]	; (1ab78 <_malloc_trim_r+0x9c>)
   1ab58:	6809      	ldr	r1, [r1, #0]
   1ab5a:	1a40      	subs	r0, r0, r1
   1ab5c:	4905      	ldr	r1, [pc, #20]	; (1ab74 <_malloc_trim_r+0x98>)
   1ab5e:	6008      	str	r0, [r1, #0]
   1ab60:	2101      	movs	r1, #1
   1ab62:	430b      	orrs	r3, r1
   1ab64:	6053      	str	r3, [r2, #4]
   1ab66:	e7d5      	b.n	1ab14 <_malloc_trim_r+0x38>
   1ab68:	200005b8 	.word	0x200005b8
   1ab6c:	00000fef 	.word	0x00000fef
   1ab70:	00000fff 	.word	0x00000fff
   1ab74:	20000f78 	.word	0x20000f78
   1ab78:	200009c0 	.word	0x200009c0

0001ab7c <_free_r>:
   1ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab7e:	0004      	movs	r4, r0
   1ab80:	1e0d      	subs	r5, r1, #0
   1ab82:	d03c      	beq.n	1abfe <_free_r+0x82>
   1ab84:	f000 fe5c 	bl	1b840 <__malloc_lock>
   1ab88:	0029      	movs	r1, r5
   1ab8a:	3908      	subs	r1, #8
   1ab8c:	6848      	ldr	r0, [r1, #4]
   1ab8e:	2301      	movs	r3, #1
   1ab90:	0005      	movs	r5, r0
   1ab92:	2603      	movs	r6, #3
   1ab94:	439d      	bics	r5, r3
   1ab96:	194a      	adds	r2, r1, r5
   1ab98:	469c      	mov	ip, r3
   1ab9a:	4f61      	ldr	r7, [pc, #388]	; (1ad20 <_free_r+0x1a4>)
   1ab9c:	6853      	ldr	r3, [r2, #4]
   1ab9e:	43b3      	bics	r3, r6
   1aba0:	68be      	ldr	r6, [r7, #8]
   1aba2:	42b2      	cmp	r2, r6
   1aba4:	d056      	beq.n	1ac54 <_free_r+0xd8>
   1aba6:	4666      	mov	r6, ip
   1aba8:	6053      	str	r3, [r2, #4]
   1abaa:	4206      	tst	r6, r0
   1abac:	d10a      	bne.n	1abc4 <_free_r+0x48>
   1abae:	003e      	movs	r6, r7
   1abb0:	6808      	ldr	r0, [r1, #0]
   1abb2:	3608      	adds	r6, #8
   1abb4:	1a09      	subs	r1, r1, r0
   1abb6:	182d      	adds	r5, r5, r0
   1abb8:	6888      	ldr	r0, [r1, #8]
   1abba:	42b0      	cmp	r0, r6
   1abbc:	d065      	beq.n	1ac8a <_free_r+0x10e>
   1abbe:	68ce      	ldr	r6, [r1, #12]
   1abc0:	60c6      	str	r6, [r0, #12]
   1abc2:	60b0      	str	r0, [r6, #8]
   1abc4:	2001      	movs	r0, #1
   1abc6:	18d6      	adds	r6, r2, r3
   1abc8:	6876      	ldr	r6, [r6, #4]
   1abca:	4206      	tst	r6, r0
   1abcc:	d033      	beq.n	1ac36 <_free_r+0xba>
   1abce:	4b55      	ldr	r3, [pc, #340]	; (1ad24 <_free_r+0x1a8>)
   1abd0:	4328      	orrs	r0, r5
   1abd2:	6048      	str	r0, [r1, #4]
   1abd4:	514d      	str	r5, [r1, r5]
   1abd6:	429d      	cmp	r5, r3
   1abd8:	d812      	bhi.n	1ac00 <_free_r+0x84>
   1abda:	08ed      	lsrs	r5, r5, #3
   1abdc:	3bff      	subs	r3, #255	; 0xff
   1abde:	10aa      	asrs	r2, r5, #2
   1abe0:	3bff      	subs	r3, #255	; 0xff
   1abe2:	4093      	lsls	r3, r2
   1abe4:	687a      	ldr	r2, [r7, #4]
   1abe6:	00ed      	lsls	r5, r5, #3
   1abe8:	4313      	orrs	r3, r2
   1abea:	607b      	str	r3, [r7, #4]
   1abec:	19ef      	adds	r7, r5, r7
   1abee:	68bb      	ldr	r3, [r7, #8]
   1abf0:	60cf      	str	r7, [r1, #12]
   1abf2:	608b      	str	r3, [r1, #8]
   1abf4:	60b9      	str	r1, [r7, #8]
   1abf6:	60d9      	str	r1, [r3, #12]
   1abf8:	0020      	movs	r0, r4
   1abfa:	f000 fe29 	bl	1b850 <__malloc_unlock>
   1abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ac00:	0a68      	lsrs	r0, r5, #9
   1ac02:	2804      	cmp	r0, #4
   1ac04:	d850      	bhi.n	1aca8 <_free_r+0x12c>
   1ac06:	09a8      	lsrs	r0, r5, #6
   1ac08:	0002      	movs	r2, r0
   1ac0a:	3039      	adds	r0, #57	; 0x39
   1ac0c:	3238      	adds	r2, #56	; 0x38
   1ac0e:	00c0      	lsls	r0, r0, #3
   1ac10:	1838      	adds	r0, r7, r0
   1ac12:	3808      	subs	r0, #8
   1ac14:	6883      	ldr	r3, [r0, #8]
   1ac16:	2603      	movs	r6, #3
   1ac18:	4298      	cmp	r0, r3
   1ac1a:	d04c      	beq.n	1acb6 <_free_r+0x13a>
   1ac1c:	685a      	ldr	r2, [r3, #4]
   1ac1e:	43b2      	bics	r2, r6
   1ac20:	4295      	cmp	r5, r2
   1ac22:	d230      	bcs.n	1ac86 <_free_r+0x10a>
   1ac24:	689b      	ldr	r3, [r3, #8]
   1ac26:	4298      	cmp	r0, r3
   1ac28:	d1f8      	bne.n	1ac1c <_free_r+0xa0>
   1ac2a:	68c3      	ldr	r3, [r0, #12]
   1ac2c:	60cb      	str	r3, [r1, #12]
   1ac2e:	6088      	str	r0, [r1, #8]
   1ac30:	6099      	str	r1, [r3, #8]
   1ac32:	60c1      	str	r1, [r0, #12]
   1ac34:	e7e0      	b.n	1abf8 <_free_r+0x7c>
   1ac36:	18ed      	adds	r5, r5, r3
   1ac38:	4e3b      	ldr	r6, [pc, #236]	; (1ad28 <_free_r+0x1ac>)
   1ac3a:	6893      	ldr	r3, [r2, #8]
   1ac3c:	42b3      	cmp	r3, r6
   1ac3e:	d042      	beq.n	1acc6 <_free_r+0x14a>
   1ac40:	68d2      	ldr	r2, [r2, #12]
   1ac42:	4328      	orrs	r0, r5
   1ac44:	60da      	str	r2, [r3, #12]
   1ac46:	6093      	str	r3, [r2, #8]
   1ac48:	4b36      	ldr	r3, [pc, #216]	; (1ad24 <_free_r+0x1a8>)
   1ac4a:	6048      	str	r0, [r1, #4]
   1ac4c:	514d      	str	r5, [r1, r5]
   1ac4e:	429d      	cmp	r5, r3
   1ac50:	d8d6      	bhi.n	1ac00 <_free_r+0x84>
   1ac52:	e7c2      	b.n	1abda <_free_r+0x5e>
   1ac54:	4662      	mov	r2, ip
   1ac56:	18eb      	adds	r3, r5, r3
   1ac58:	4202      	tst	r2, r0
   1ac5a:	d106      	bne.n	1ac6a <_free_r+0xee>
   1ac5c:	680a      	ldr	r2, [r1, #0]
   1ac5e:	1a89      	subs	r1, r1, r2
   1ac60:	6888      	ldr	r0, [r1, #8]
   1ac62:	189b      	adds	r3, r3, r2
   1ac64:	68ca      	ldr	r2, [r1, #12]
   1ac66:	60c2      	str	r2, [r0, #12]
   1ac68:	6090      	str	r0, [r2, #8]
   1ac6a:	2201      	movs	r2, #1
   1ac6c:	431a      	orrs	r2, r3
   1ac6e:	604a      	str	r2, [r1, #4]
   1ac70:	4a2e      	ldr	r2, [pc, #184]	; (1ad2c <_free_r+0x1b0>)
   1ac72:	60b9      	str	r1, [r7, #8]
   1ac74:	6812      	ldr	r2, [r2, #0]
   1ac76:	4293      	cmp	r3, r2
   1ac78:	d3be      	bcc.n	1abf8 <_free_r+0x7c>
   1ac7a:	4b2d      	ldr	r3, [pc, #180]	; (1ad30 <_free_r+0x1b4>)
   1ac7c:	0020      	movs	r0, r4
   1ac7e:	6819      	ldr	r1, [r3, #0]
   1ac80:	f7ff ff2c 	bl	1aadc <_malloc_trim_r>
   1ac84:	e7b8      	b.n	1abf8 <_free_r+0x7c>
   1ac86:	0018      	movs	r0, r3
   1ac88:	e7cf      	b.n	1ac2a <_free_r+0xae>
   1ac8a:	4666      	mov	r6, ip
   1ac8c:	18d0      	adds	r0, r2, r3
   1ac8e:	6840      	ldr	r0, [r0, #4]
   1ac90:	4230      	tst	r0, r6
   1ac92:	d13f      	bne.n	1ad14 <_free_r+0x198>
   1ac94:	6890      	ldr	r0, [r2, #8]
   1ac96:	195d      	adds	r5, r3, r5
   1ac98:	68d3      	ldr	r3, [r2, #12]
   1ac9a:	60c3      	str	r3, [r0, #12]
   1ac9c:	6098      	str	r0, [r3, #8]
   1ac9e:	4663      	mov	r3, ip
   1aca0:	432b      	orrs	r3, r5
   1aca2:	604b      	str	r3, [r1, #4]
   1aca4:	514d      	str	r5, [r1, r5]
   1aca6:	e7a7      	b.n	1abf8 <_free_r+0x7c>
   1aca8:	2814      	cmp	r0, #20
   1acaa:	d814      	bhi.n	1acd6 <_free_r+0x15a>
   1acac:	0002      	movs	r2, r0
   1acae:	305c      	adds	r0, #92	; 0x5c
   1acb0:	325b      	adds	r2, #91	; 0x5b
   1acb2:	00c0      	lsls	r0, r0, #3
   1acb4:	e7ac      	b.n	1ac10 <_free_r+0x94>
   1acb6:	2301      	movs	r3, #1
   1acb8:	1092      	asrs	r2, r2, #2
   1acba:	4093      	lsls	r3, r2
   1acbc:	687a      	ldr	r2, [r7, #4]
   1acbe:	4313      	orrs	r3, r2
   1acc0:	607b      	str	r3, [r7, #4]
   1acc2:	0003      	movs	r3, r0
   1acc4:	e7b2      	b.n	1ac2c <_free_r+0xb0>
   1acc6:	4328      	orrs	r0, r5
   1acc8:	60d9      	str	r1, [r3, #12]
   1acca:	6099      	str	r1, [r3, #8]
   1accc:	60cb      	str	r3, [r1, #12]
   1acce:	608b      	str	r3, [r1, #8]
   1acd0:	6048      	str	r0, [r1, #4]
   1acd2:	514d      	str	r5, [r1, r5]
   1acd4:	e790      	b.n	1abf8 <_free_r+0x7c>
   1acd6:	2854      	cmp	r0, #84	; 0x54
   1acd8:	d805      	bhi.n	1ace6 <_free_r+0x16a>
   1acda:	0b28      	lsrs	r0, r5, #12
   1acdc:	0002      	movs	r2, r0
   1acde:	306f      	adds	r0, #111	; 0x6f
   1ace0:	326e      	adds	r2, #110	; 0x6e
   1ace2:	00c0      	lsls	r0, r0, #3
   1ace4:	e794      	b.n	1ac10 <_free_r+0x94>
   1ace6:	22aa      	movs	r2, #170	; 0xaa
   1ace8:	0052      	lsls	r2, r2, #1
   1acea:	4290      	cmp	r0, r2
   1acec:	d805      	bhi.n	1acfa <_free_r+0x17e>
   1acee:	0be8      	lsrs	r0, r5, #15
   1acf0:	0002      	movs	r2, r0
   1acf2:	3078      	adds	r0, #120	; 0x78
   1acf4:	3277      	adds	r2, #119	; 0x77
   1acf6:	00c0      	lsls	r0, r0, #3
   1acf8:	e78a      	b.n	1ac10 <_free_r+0x94>
   1acfa:	4a0e      	ldr	r2, [pc, #56]	; (1ad34 <_free_r+0x1b8>)
   1acfc:	4290      	cmp	r0, r2
   1acfe:	d805      	bhi.n	1ad0c <_free_r+0x190>
   1ad00:	0ca8      	lsrs	r0, r5, #18
   1ad02:	0002      	movs	r2, r0
   1ad04:	307d      	adds	r0, #125	; 0x7d
   1ad06:	327c      	adds	r2, #124	; 0x7c
   1ad08:	00c0      	lsls	r0, r0, #3
   1ad0a:	e781      	b.n	1ac10 <_free_r+0x94>
   1ad0c:	20fe      	movs	r0, #254	; 0xfe
   1ad0e:	227e      	movs	r2, #126	; 0x7e
   1ad10:	0080      	lsls	r0, r0, #2
   1ad12:	e77d      	b.n	1ac10 <_free_r+0x94>
   1ad14:	4663      	mov	r3, ip
   1ad16:	432b      	orrs	r3, r5
   1ad18:	604b      	str	r3, [r1, #4]
   1ad1a:	6015      	str	r5, [r2, #0]
   1ad1c:	e76c      	b.n	1abf8 <_free_r+0x7c>
   1ad1e:	46c0      	nop			; (mov r8, r8)
   1ad20:	200005b8 	.word	0x200005b8
   1ad24:	000001ff 	.word	0x000001ff
   1ad28:	200005c0 	.word	0x200005c0
   1ad2c:	200009c4 	.word	0x200009c4
   1ad30:	20000fa8 	.word	0x20000fa8
   1ad34:	00000554 	.word	0x00000554

0001ad38 <__sfvwrite_r>:
   1ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad3a:	464e      	mov	r6, r9
   1ad3c:	46de      	mov	lr, fp
   1ad3e:	4657      	mov	r7, sl
   1ad40:	4645      	mov	r5, r8
   1ad42:	b5e0      	push	{r5, r6, r7, lr}
   1ad44:	6893      	ldr	r3, [r2, #8]
   1ad46:	b083      	sub	sp, #12
   1ad48:	9000      	str	r0, [sp, #0]
   1ad4a:	000c      	movs	r4, r1
   1ad4c:	0016      	movs	r6, r2
   1ad4e:	2b00      	cmp	r3, #0
   1ad50:	d025      	beq.n	1ad9e <__sfvwrite_r+0x66>
   1ad52:	898b      	ldrh	r3, [r1, #12]
   1ad54:	071a      	lsls	r2, r3, #28
   1ad56:	d52a      	bpl.n	1adae <__sfvwrite_r+0x76>
   1ad58:	690a      	ldr	r2, [r1, #16]
   1ad5a:	2a00      	cmp	r2, #0
   1ad5c:	d027      	beq.n	1adae <__sfvwrite_r+0x76>
   1ad5e:	6832      	ldr	r2, [r6, #0]
   1ad60:	4693      	mov	fp, r2
   1ad62:	079a      	lsls	r2, r3, #30
   1ad64:	d52f      	bpl.n	1adc6 <__sfvwrite_r+0x8e>
   1ad66:	4bb2      	ldr	r3, [pc, #712]	; (1b030 <__sfvwrite_r+0x2f8>)
   1ad68:	2700      	movs	r7, #0
   1ad6a:	2500      	movs	r5, #0
   1ad6c:	4698      	mov	r8, r3
   1ad6e:	46b1      	mov	r9, r6
   1ad70:	2d00      	cmp	r5, #0
   1ad72:	d100      	bne.n	1ad76 <__sfvwrite_r+0x3e>
   1ad74:	e072      	b.n	1ae5c <__sfvwrite_r+0x124>
   1ad76:	002b      	movs	r3, r5
   1ad78:	4545      	cmp	r5, r8
   1ad7a:	d900      	bls.n	1ad7e <__sfvwrite_r+0x46>
   1ad7c:	4bac      	ldr	r3, [pc, #688]	; (1b030 <__sfvwrite_r+0x2f8>)
   1ad7e:	003a      	movs	r2, r7
   1ad80:	69e1      	ldr	r1, [r4, #28]
   1ad82:	9800      	ldr	r0, [sp, #0]
   1ad84:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1ad86:	47b0      	blx	r6
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	dc00      	bgt.n	1ad8e <__sfvwrite_r+0x56>
   1ad8c:	e073      	b.n	1ae76 <__sfvwrite_r+0x13e>
   1ad8e:	464b      	mov	r3, r9
   1ad90:	689b      	ldr	r3, [r3, #8]
   1ad92:	183f      	adds	r7, r7, r0
   1ad94:	1a2d      	subs	r5, r5, r0
   1ad96:	1a18      	subs	r0, r3, r0
   1ad98:	464b      	mov	r3, r9
   1ad9a:	6098      	str	r0, [r3, #8]
   1ad9c:	d1e8      	bne.n	1ad70 <__sfvwrite_r+0x38>
   1ad9e:	2000      	movs	r0, #0
   1ada0:	b003      	add	sp, #12
   1ada2:	bc3c      	pop	{r2, r3, r4, r5}
   1ada4:	4690      	mov	r8, r2
   1ada6:	4699      	mov	r9, r3
   1ada8:	46a2      	mov	sl, r4
   1adaa:	46ab      	mov	fp, r5
   1adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1adae:	0021      	movs	r1, r4
   1adb0:	9800      	ldr	r0, [sp, #0]
   1adb2:	f7fe fc4b 	bl	1964c <__swsetup_r>
   1adb6:	2800      	cmp	r0, #0
   1adb8:	d000      	beq.n	1adbc <__sfvwrite_r+0x84>
   1adba:	e130      	b.n	1b01e <__sfvwrite_r+0x2e6>
   1adbc:	6832      	ldr	r2, [r6, #0]
   1adbe:	89a3      	ldrh	r3, [r4, #12]
   1adc0:	4693      	mov	fp, r2
   1adc2:	079a      	lsls	r2, r3, #30
   1adc4:	d4cf      	bmi.n	1ad66 <__sfvwrite_r+0x2e>
   1adc6:	07da      	lsls	r2, r3, #31
   1adc8:	d55d      	bpl.n	1ae86 <__sfvwrite_r+0x14e>
   1adca:	2300      	movs	r3, #0
   1adcc:	2000      	movs	r0, #0
   1adce:	469a      	mov	sl, r3
   1add0:	2700      	movs	r7, #0
   1add2:	001d      	movs	r5, r3
   1add4:	46b1      	mov	r9, r6
   1add6:	e029      	b.n	1ae2c <__sfvwrite_r+0xf4>
   1add8:	2800      	cmp	r0, #0
   1adda:	d033      	beq.n	1ae44 <__sfvwrite_r+0x10c>
   1addc:	46a8      	mov	r8, r5
   1adde:	42bd      	cmp	r5, r7
   1ade0:	d900      	bls.n	1ade4 <__sfvwrite_r+0xac>
   1ade2:	46b8      	mov	r8, r7
   1ade4:	6820      	ldr	r0, [r4, #0]
   1ade6:	6922      	ldr	r2, [r4, #16]
   1ade8:	4646      	mov	r6, r8
   1adea:	6963      	ldr	r3, [r4, #20]
   1adec:	4290      	cmp	r0, r2
   1adee:	d907      	bls.n	1ae00 <__sfvwrite_r+0xc8>
   1adf0:	68a2      	ldr	r2, [r4, #8]
   1adf2:	4694      	mov	ip, r2
   1adf4:	449c      	add	ip, r3
   1adf6:	4662      	mov	r2, ip
   1adf8:	9201      	str	r2, [sp, #4]
   1adfa:	45e0      	cmp	r8, ip
   1adfc:	dd00      	ble.n	1ae00 <__sfvwrite_r+0xc8>
   1adfe:	e0e9      	b.n	1afd4 <__sfvwrite_r+0x29c>
   1ae00:	4598      	cmp	r8, r3
   1ae02:	da00      	bge.n	1ae06 <__sfvwrite_r+0xce>
   1ae04:	e08f      	b.n	1af26 <__sfvwrite_r+0x1ee>
   1ae06:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1ae08:	4652      	mov	r2, sl
   1ae0a:	69e1      	ldr	r1, [r4, #28]
   1ae0c:	9800      	ldr	r0, [sp, #0]
   1ae0e:	47b0      	blx	r6
   1ae10:	1e06      	subs	r6, r0, #0
   1ae12:	dd30      	ble.n	1ae76 <__sfvwrite_r+0x13e>
   1ae14:	1bad      	subs	r5, r5, r6
   1ae16:	2001      	movs	r0, #1
   1ae18:	2d00      	cmp	r5, #0
   1ae1a:	d026      	beq.n	1ae6a <__sfvwrite_r+0x132>
   1ae1c:	464b      	mov	r3, r9
   1ae1e:	689b      	ldr	r3, [r3, #8]
   1ae20:	44b2      	add	sl, r6
   1ae22:	1bbf      	subs	r7, r7, r6
   1ae24:	1b9e      	subs	r6, r3, r6
   1ae26:	464b      	mov	r3, r9
   1ae28:	609e      	str	r6, [r3, #8]
   1ae2a:	d0b8      	beq.n	1ad9e <__sfvwrite_r+0x66>
   1ae2c:	2f00      	cmp	r7, #0
   1ae2e:	d1d3      	bne.n	1add8 <__sfvwrite_r+0xa0>
   1ae30:	465b      	mov	r3, fp
   1ae32:	681b      	ldr	r3, [r3, #0]
   1ae34:	469a      	mov	sl, r3
   1ae36:	465b      	mov	r3, fp
   1ae38:	685f      	ldr	r7, [r3, #4]
   1ae3a:	2308      	movs	r3, #8
   1ae3c:	469c      	mov	ip, r3
   1ae3e:	44e3      	add	fp, ip
   1ae40:	2f00      	cmp	r7, #0
   1ae42:	d0f5      	beq.n	1ae30 <__sfvwrite_r+0xf8>
   1ae44:	003a      	movs	r2, r7
   1ae46:	210a      	movs	r1, #10
   1ae48:	4650      	mov	r0, sl
   1ae4a:	f000 fc69 	bl	1b720 <memchr>
   1ae4e:	2800      	cmp	r0, #0
   1ae50:	d100      	bne.n	1ae54 <__sfvwrite_r+0x11c>
   1ae52:	e0e2      	b.n	1b01a <__sfvwrite_r+0x2e2>
   1ae54:	4653      	mov	r3, sl
   1ae56:	3001      	adds	r0, #1
   1ae58:	1ac5      	subs	r5, r0, r3
   1ae5a:	e7bf      	b.n	1addc <__sfvwrite_r+0xa4>
   1ae5c:	465b      	mov	r3, fp
   1ae5e:	681f      	ldr	r7, [r3, #0]
   1ae60:	685d      	ldr	r5, [r3, #4]
   1ae62:	2308      	movs	r3, #8
   1ae64:	469c      	mov	ip, r3
   1ae66:	44e3      	add	fp, ip
   1ae68:	e782      	b.n	1ad70 <__sfvwrite_r+0x38>
   1ae6a:	0021      	movs	r1, r4
   1ae6c:	9800      	ldr	r0, [sp, #0]
   1ae6e:	f7ff fd81 	bl	1a974 <_fflush_r>
   1ae72:	2800      	cmp	r0, #0
   1ae74:	d0d2      	beq.n	1ae1c <__sfvwrite_r+0xe4>
   1ae76:	220c      	movs	r2, #12
   1ae78:	5ea3      	ldrsh	r3, [r4, r2]
   1ae7a:	2240      	movs	r2, #64	; 0x40
   1ae7c:	2001      	movs	r0, #1
   1ae7e:	4313      	orrs	r3, r2
   1ae80:	81a3      	strh	r3, [r4, #12]
   1ae82:	4240      	negs	r0, r0
   1ae84:	e78c      	b.n	1ada0 <__sfvwrite_r+0x68>
   1ae86:	2200      	movs	r2, #0
   1ae88:	4691      	mov	r9, r2
   1ae8a:	464d      	mov	r5, r9
   1ae8c:	2d00      	cmp	r5, #0
   1ae8e:	d023      	beq.n	1aed8 <__sfvwrite_r+0x1a0>
   1ae90:	68a2      	ldr	r2, [r4, #8]
   1ae92:	4690      	mov	r8, r2
   1ae94:	2280      	movs	r2, #128	; 0x80
   1ae96:	0092      	lsls	r2, r2, #2
   1ae98:	4213      	tst	r3, r2
   1ae9a:	d026      	beq.n	1aeea <__sfvwrite_r+0x1b2>
   1ae9c:	46c2      	mov	sl, r8
   1ae9e:	4545      	cmp	r5, r8
   1aea0:	d34d      	bcc.n	1af3e <__sfvwrite_r+0x206>
   1aea2:	2290      	movs	r2, #144	; 0x90
   1aea4:	00d2      	lsls	r2, r2, #3
   1aea6:	4213      	tst	r3, r2
   1aea8:	d14e      	bne.n	1af48 <__sfvwrite_r+0x210>
   1aeaa:	002f      	movs	r7, r5
   1aeac:	6820      	ldr	r0, [r4, #0]
   1aeae:	4652      	mov	r2, sl
   1aeb0:	4649      	mov	r1, r9
   1aeb2:	f000 fc75 	bl	1b7a0 <memmove>
   1aeb6:	4642      	mov	r2, r8
   1aeb8:	68a3      	ldr	r3, [r4, #8]
   1aeba:	1a98      	subs	r0, r3, r2
   1aebc:	6823      	ldr	r3, [r4, #0]
   1aebe:	60a0      	str	r0, [r4, #8]
   1aec0:	4453      	add	r3, sl
   1aec2:	6023      	str	r3, [r4, #0]
   1aec4:	68b3      	ldr	r3, [r6, #8]
   1aec6:	44b9      	add	r9, r7
   1aec8:	1bed      	subs	r5, r5, r7
   1aeca:	1bdf      	subs	r7, r3, r7
   1aecc:	60b7      	str	r7, [r6, #8]
   1aece:	d100      	bne.n	1aed2 <__sfvwrite_r+0x19a>
   1aed0:	e765      	b.n	1ad9e <__sfvwrite_r+0x66>
   1aed2:	89a3      	ldrh	r3, [r4, #12]
   1aed4:	2d00      	cmp	r5, #0
   1aed6:	d1db      	bne.n	1ae90 <__sfvwrite_r+0x158>
   1aed8:	465a      	mov	r2, fp
   1aeda:	6812      	ldr	r2, [r2, #0]
   1aedc:	4691      	mov	r9, r2
   1aede:	465a      	mov	r2, fp
   1aee0:	6855      	ldr	r5, [r2, #4]
   1aee2:	2208      	movs	r2, #8
   1aee4:	4694      	mov	ip, r2
   1aee6:	44e3      	add	fp, ip
   1aee8:	e7d0      	b.n	1ae8c <__sfvwrite_r+0x154>
   1aeea:	6820      	ldr	r0, [r4, #0]
   1aeec:	6923      	ldr	r3, [r4, #16]
   1aeee:	4298      	cmp	r0, r3
   1aef0:	d802      	bhi.n	1aef8 <__sfvwrite_r+0x1c0>
   1aef2:	6967      	ldr	r7, [r4, #20]
   1aef4:	42bd      	cmp	r5, r7
   1aef6:	d259      	bcs.n	1afac <__sfvwrite_r+0x274>
   1aef8:	4647      	mov	r7, r8
   1aefa:	42af      	cmp	r7, r5
   1aefc:	d900      	bls.n	1af00 <__sfvwrite_r+0x1c8>
   1aefe:	002f      	movs	r7, r5
   1af00:	003a      	movs	r2, r7
   1af02:	4649      	mov	r1, r9
   1af04:	f000 fc4c 	bl	1b7a0 <memmove>
   1af08:	68a3      	ldr	r3, [r4, #8]
   1af0a:	6822      	ldr	r2, [r4, #0]
   1af0c:	1bdb      	subs	r3, r3, r7
   1af0e:	19d2      	adds	r2, r2, r7
   1af10:	60a3      	str	r3, [r4, #8]
   1af12:	6022      	str	r2, [r4, #0]
   1af14:	2b00      	cmp	r3, #0
   1af16:	d1d5      	bne.n	1aec4 <__sfvwrite_r+0x18c>
   1af18:	0021      	movs	r1, r4
   1af1a:	9800      	ldr	r0, [sp, #0]
   1af1c:	f7ff fd2a 	bl	1a974 <_fflush_r>
   1af20:	2800      	cmp	r0, #0
   1af22:	d0cf      	beq.n	1aec4 <__sfvwrite_r+0x18c>
   1af24:	e7a7      	b.n	1ae76 <__sfvwrite_r+0x13e>
   1af26:	4642      	mov	r2, r8
   1af28:	4651      	mov	r1, sl
   1af2a:	f000 fc39 	bl	1b7a0 <memmove>
   1af2e:	4642      	mov	r2, r8
   1af30:	68a3      	ldr	r3, [r4, #8]
   1af32:	1a9b      	subs	r3, r3, r2
   1af34:	60a3      	str	r3, [r4, #8]
   1af36:	6823      	ldr	r3, [r4, #0]
   1af38:	4443      	add	r3, r8
   1af3a:	6023      	str	r3, [r4, #0]
   1af3c:	e76a      	b.n	1ae14 <__sfvwrite_r+0xdc>
   1af3e:	46a8      	mov	r8, r5
   1af40:	6820      	ldr	r0, [r4, #0]
   1af42:	002f      	movs	r7, r5
   1af44:	46aa      	mov	sl, r5
   1af46:	e7b2      	b.n	1aeae <__sfvwrite_r+0x176>
   1af48:	6921      	ldr	r1, [r4, #16]
   1af4a:	6822      	ldr	r2, [r4, #0]
   1af4c:	1a52      	subs	r2, r2, r1
   1af4e:	4692      	mov	sl, r2
   1af50:	6962      	ldr	r2, [r4, #20]
   1af52:	0057      	lsls	r7, r2, #1
   1af54:	18bf      	adds	r7, r7, r2
   1af56:	0ffa      	lsrs	r2, r7, #31
   1af58:	19d7      	adds	r7, r2, r7
   1af5a:	4652      	mov	r2, sl
   1af5c:	1c50      	adds	r0, r2, #1
   1af5e:	107f      	asrs	r7, r7, #1
   1af60:	1940      	adds	r0, r0, r5
   1af62:	003a      	movs	r2, r7
   1af64:	42b8      	cmp	r0, r7
   1af66:	d901      	bls.n	1af6c <__sfvwrite_r+0x234>
   1af68:	0007      	movs	r7, r0
   1af6a:	0002      	movs	r2, r0
   1af6c:	055b      	lsls	r3, r3, #21
   1af6e:	d542      	bpl.n	1aff6 <__sfvwrite_r+0x2be>
   1af70:	0011      	movs	r1, r2
   1af72:	9800      	ldr	r0, [sp, #0]
   1af74:	f000 f920 	bl	1b1b8 <_malloc_r>
   1af78:	4680      	mov	r8, r0
   1af7a:	1e03      	subs	r3, r0, #0
   1af7c:	d052      	beq.n	1b024 <__sfvwrite_r+0x2ec>
   1af7e:	4652      	mov	r2, sl
   1af80:	6921      	ldr	r1, [r4, #16]
   1af82:	f7fc fb85 	bl	17690 <memcpy>
   1af86:	89a3      	ldrh	r3, [r4, #12]
   1af88:	4a2a      	ldr	r2, [pc, #168]	; (1b034 <__sfvwrite_r+0x2fc>)
   1af8a:	4013      	ands	r3, r2
   1af8c:	2280      	movs	r2, #128	; 0x80
   1af8e:	4313      	orrs	r3, r2
   1af90:	81a3      	strh	r3, [r4, #12]
   1af92:	4643      	mov	r3, r8
   1af94:	4640      	mov	r0, r8
   1af96:	6123      	str	r3, [r4, #16]
   1af98:	4653      	mov	r3, sl
   1af9a:	4450      	add	r0, sl
   1af9c:	6167      	str	r7, [r4, #20]
   1af9e:	1aff      	subs	r7, r7, r3
   1afa0:	60a7      	str	r7, [r4, #8]
   1afa2:	6020      	str	r0, [r4, #0]
   1afa4:	46a8      	mov	r8, r5
   1afa6:	002f      	movs	r7, r5
   1afa8:	46aa      	mov	sl, r5
   1afaa:	e780      	b.n	1aeae <__sfvwrite_r+0x176>
   1afac:	4b22      	ldr	r3, [pc, #136]	; (1b038 <__sfvwrite_r+0x300>)
   1afae:	0028      	movs	r0, r5
   1afb0:	429d      	cmp	r5, r3
   1afb2:	d900      	bls.n	1afb6 <__sfvwrite_r+0x27e>
   1afb4:	0018      	movs	r0, r3
   1afb6:	0039      	movs	r1, r7
   1afb8:	f7f9 fb30 	bl	1461c <__divsi3>
   1afbc:	003b      	movs	r3, r7
   1afbe:	464a      	mov	r2, r9
   1afc0:	4343      	muls	r3, r0
   1afc2:	69e1      	ldr	r1, [r4, #28]
   1afc4:	9800      	ldr	r0, [sp, #0]
   1afc6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1afc8:	47b8      	blx	r7
   1afca:	2800      	cmp	r0, #0
   1afcc:	dc00      	bgt.n	1afd0 <__sfvwrite_r+0x298>
   1afce:	e752      	b.n	1ae76 <__sfvwrite_r+0x13e>
   1afd0:	0007      	movs	r7, r0
   1afd2:	e777      	b.n	1aec4 <__sfvwrite_r+0x18c>
   1afd4:	4666      	mov	r6, ip
   1afd6:	4651      	mov	r1, sl
   1afd8:	f000 fbe2 	bl	1b7a0 <memmove>
   1afdc:	46b4      	mov	ip, r6
   1afde:	6823      	ldr	r3, [r4, #0]
   1afe0:	0021      	movs	r1, r4
   1afe2:	4463      	add	r3, ip
   1afe4:	6023      	str	r3, [r4, #0]
   1afe6:	9800      	ldr	r0, [sp, #0]
   1afe8:	f7ff fcc4 	bl	1a974 <_fflush_r>
   1afec:	2800      	cmp	r0, #0
   1afee:	d000      	beq.n	1aff2 <__sfvwrite_r+0x2ba>
   1aff0:	e741      	b.n	1ae76 <__sfvwrite_r+0x13e>
   1aff2:	9e01      	ldr	r6, [sp, #4]
   1aff4:	e70e      	b.n	1ae14 <__sfvwrite_r+0xdc>
   1aff6:	9800      	ldr	r0, [sp, #0]
   1aff8:	f000 ff7a 	bl	1bef0 <_realloc_r>
   1affc:	4680      	mov	r8, r0
   1affe:	2800      	cmp	r0, #0
   1b000:	d1c7      	bne.n	1af92 <__sfvwrite_r+0x25a>
   1b002:	9d00      	ldr	r5, [sp, #0]
   1b004:	6921      	ldr	r1, [r4, #16]
   1b006:	0028      	movs	r0, r5
   1b008:	f7ff fdb8 	bl	1ab7c <_free_r>
   1b00c:	2280      	movs	r2, #128	; 0x80
   1b00e:	89a3      	ldrh	r3, [r4, #12]
   1b010:	4393      	bics	r3, r2
   1b012:	3a74      	subs	r2, #116	; 0x74
   1b014:	b21b      	sxth	r3, r3
   1b016:	602a      	str	r2, [r5, #0]
   1b018:	e72f      	b.n	1ae7a <__sfvwrite_r+0x142>
   1b01a:	1c7d      	adds	r5, r7, #1
   1b01c:	e6de      	b.n	1addc <__sfvwrite_r+0xa4>
   1b01e:	2001      	movs	r0, #1
   1b020:	4240      	negs	r0, r0
   1b022:	e6bd      	b.n	1ada0 <__sfvwrite_r+0x68>
   1b024:	9a00      	ldr	r2, [sp, #0]
   1b026:	330c      	adds	r3, #12
   1b028:	6013      	str	r3, [r2, #0]
   1b02a:	220c      	movs	r2, #12
   1b02c:	5ea3      	ldrsh	r3, [r4, r2]
   1b02e:	e724      	b.n	1ae7a <__sfvwrite_r+0x142>
   1b030:	7ffffc00 	.word	0x7ffffc00
   1b034:	fffffb7f 	.word	0xfffffb7f
   1b038:	7fffffff 	.word	0x7fffffff

0001b03c <_fwalk_reent>:
   1b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b03e:	4647      	mov	r7, r8
   1b040:	46ce      	mov	lr, r9
   1b042:	b580      	push	{r7, lr}
   1b044:	27b8      	movs	r7, #184	; 0xb8
   1b046:	4680      	mov	r8, r0
   1b048:	00bf      	lsls	r7, r7, #2
   1b04a:	4447      	add	r7, r8
   1b04c:	4689      	mov	r9, r1
   1b04e:	2600      	movs	r6, #0
   1b050:	2f00      	cmp	r7, #0
   1b052:	d014      	beq.n	1b07e <_fwalk_reent+0x42>
   1b054:	687b      	ldr	r3, [r7, #4]
   1b056:	68bc      	ldr	r4, [r7, #8]
   1b058:	1e5d      	subs	r5, r3, #1
   1b05a:	d40d      	bmi.n	1b078 <_fwalk_reent+0x3c>
   1b05c:	89a3      	ldrh	r3, [r4, #12]
   1b05e:	2b01      	cmp	r3, #1
   1b060:	d907      	bls.n	1b072 <_fwalk_reent+0x36>
   1b062:	220e      	movs	r2, #14
   1b064:	5ea3      	ldrsh	r3, [r4, r2]
   1b066:	3301      	adds	r3, #1
   1b068:	d003      	beq.n	1b072 <_fwalk_reent+0x36>
   1b06a:	0021      	movs	r1, r4
   1b06c:	4640      	mov	r0, r8
   1b06e:	47c8      	blx	r9
   1b070:	4306      	orrs	r6, r0
   1b072:	3468      	adds	r4, #104	; 0x68
   1b074:	3d01      	subs	r5, #1
   1b076:	d2f1      	bcs.n	1b05c <_fwalk_reent+0x20>
   1b078:	683f      	ldr	r7, [r7, #0]
   1b07a:	2f00      	cmp	r7, #0
   1b07c:	d1ea      	bne.n	1b054 <_fwalk_reent+0x18>
   1b07e:	0030      	movs	r0, r6
   1b080:	bc0c      	pop	{r2, r3}
   1b082:	4690      	mov	r8, r2
   1b084:	4699      	mov	r9, r3
   1b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b088 <_localeconv_r>:
   1b088:	4b04      	ldr	r3, [pc, #16]	; (1b09c <_localeconv_r+0x14>)
   1b08a:	681b      	ldr	r3, [r3, #0]
   1b08c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b08e:	2800      	cmp	r0, #0
   1b090:	d001      	beq.n	1b096 <_localeconv_r+0xe>
   1b092:	30f0      	adds	r0, #240	; 0xf0
   1b094:	4770      	bx	lr
   1b096:	4802      	ldr	r0, [pc, #8]	; (1b0a0 <_localeconv_r+0x18>)
   1b098:	e7fb      	b.n	1b092 <_localeconv_r+0xa>
   1b09a:	46c0      	nop			; (mov r8, r8)
   1b09c:	20000018 	.word	0x20000018
   1b0a0:	20000448 	.word	0x20000448

0001b0a4 <__retarget_lock_init_recursive>:
   1b0a4:	4770      	bx	lr
   1b0a6:	46c0      	nop			; (mov r8, r8)

0001b0a8 <__retarget_lock_close_recursive>:
   1b0a8:	4770      	bx	lr
   1b0aa:	46c0      	nop			; (mov r8, r8)

0001b0ac <__retarget_lock_acquire_recursive>:
   1b0ac:	4770      	bx	lr
   1b0ae:	46c0      	nop			; (mov r8, r8)

0001b0b0 <__retarget_lock_release_recursive>:
   1b0b0:	4770      	bx	lr
   1b0b2:	46c0      	nop			; (mov r8, r8)

0001b0b4 <__swhatbuf_r>:
   1b0b4:	b570      	push	{r4, r5, r6, lr}
   1b0b6:	000c      	movs	r4, r1
   1b0b8:	001e      	movs	r6, r3
   1b0ba:	230e      	movs	r3, #14
   1b0bc:	5ec9      	ldrsh	r1, [r1, r3]
   1b0be:	b090      	sub	sp, #64	; 0x40
   1b0c0:	0015      	movs	r5, r2
   1b0c2:	2900      	cmp	r1, #0
   1b0c4:	db15      	blt.n	1b0f2 <__swhatbuf_r+0x3e>
   1b0c6:	aa01      	add	r2, sp, #4
   1b0c8:	f001 fb28 	bl	1c71c <_fstat_r>
   1b0cc:	2800      	cmp	r0, #0
   1b0ce:	db10      	blt.n	1b0f2 <__swhatbuf_r+0x3e>
   1b0d0:	22f0      	movs	r2, #240	; 0xf0
   1b0d2:	9b02      	ldr	r3, [sp, #8]
   1b0d4:	0212      	lsls	r2, r2, #8
   1b0d6:	4013      	ands	r3, r2
   1b0d8:	4a0d      	ldr	r2, [pc, #52]	; (1b110 <__swhatbuf_r+0x5c>)
   1b0da:	2080      	movs	r0, #128	; 0x80
   1b0dc:	4694      	mov	ip, r2
   1b0de:	4463      	add	r3, ip
   1b0e0:	425a      	negs	r2, r3
   1b0e2:	4153      	adcs	r3, r2
   1b0e4:	6033      	str	r3, [r6, #0]
   1b0e6:	2380      	movs	r3, #128	; 0x80
   1b0e8:	00db      	lsls	r3, r3, #3
   1b0ea:	602b      	str	r3, [r5, #0]
   1b0ec:	0100      	lsls	r0, r0, #4
   1b0ee:	b010      	add	sp, #64	; 0x40
   1b0f0:	bd70      	pop	{r4, r5, r6, pc}
   1b0f2:	2300      	movs	r3, #0
   1b0f4:	6033      	str	r3, [r6, #0]
   1b0f6:	89a3      	ldrh	r3, [r4, #12]
   1b0f8:	061b      	lsls	r3, r3, #24
   1b0fa:	d503      	bpl.n	1b104 <__swhatbuf_r+0x50>
   1b0fc:	2340      	movs	r3, #64	; 0x40
   1b0fe:	2000      	movs	r0, #0
   1b100:	602b      	str	r3, [r5, #0]
   1b102:	e7f4      	b.n	1b0ee <__swhatbuf_r+0x3a>
   1b104:	2380      	movs	r3, #128	; 0x80
   1b106:	00db      	lsls	r3, r3, #3
   1b108:	602b      	str	r3, [r5, #0]
   1b10a:	2000      	movs	r0, #0
   1b10c:	e7ef      	b.n	1b0ee <__swhatbuf_r+0x3a>
   1b10e:	46c0      	nop			; (mov r8, r8)
   1b110:	ffffe000 	.word	0xffffe000

0001b114 <__smakebuf_r>:
   1b114:	b570      	push	{r4, r5, r6, lr}
   1b116:	898b      	ldrh	r3, [r1, #12]
   1b118:	b082      	sub	sp, #8
   1b11a:	0006      	movs	r6, r0
   1b11c:	000c      	movs	r4, r1
   1b11e:	079b      	lsls	r3, r3, #30
   1b120:	d507      	bpl.n	1b132 <__smakebuf_r+0x1e>
   1b122:	0023      	movs	r3, r4
   1b124:	3343      	adds	r3, #67	; 0x43
   1b126:	6023      	str	r3, [r4, #0]
   1b128:	6123      	str	r3, [r4, #16]
   1b12a:	2301      	movs	r3, #1
   1b12c:	6163      	str	r3, [r4, #20]
   1b12e:	b002      	add	sp, #8
   1b130:	bd70      	pop	{r4, r5, r6, pc}
   1b132:	ab01      	add	r3, sp, #4
   1b134:	466a      	mov	r2, sp
   1b136:	f7ff ffbd 	bl	1b0b4 <__swhatbuf_r>
   1b13a:	9900      	ldr	r1, [sp, #0]
   1b13c:	0005      	movs	r5, r0
   1b13e:	0030      	movs	r0, r6
   1b140:	f000 f83a 	bl	1b1b8 <_malloc_r>
   1b144:	2800      	cmp	r0, #0
   1b146:	d01e      	beq.n	1b186 <__smakebuf_r+0x72>
   1b148:	2280      	movs	r2, #128	; 0x80
   1b14a:	4b15      	ldr	r3, [pc, #84]	; (1b1a0 <__smakebuf_r+0x8c>)
   1b14c:	63f3      	str	r3, [r6, #60]	; 0x3c
   1b14e:	89a3      	ldrh	r3, [r4, #12]
   1b150:	6020      	str	r0, [r4, #0]
   1b152:	4313      	orrs	r3, r2
   1b154:	9a00      	ldr	r2, [sp, #0]
   1b156:	b21b      	sxth	r3, r3
   1b158:	6162      	str	r2, [r4, #20]
   1b15a:	9a01      	ldr	r2, [sp, #4]
   1b15c:	81a3      	strh	r3, [r4, #12]
   1b15e:	6120      	str	r0, [r4, #16]
   1b160:	2a00      	cmp	r2, #0
   1b162:	d102      	bne.n	1b16a <__smakebuf_r+0x56>
   1b164:	432b      	orrs	r3, r5
   1b166:	81a3      	strh	r3, [r4, #12]
   1b168:	e7e1      	b.n	1b12e <__smakebuf_r+0x1a>
   1b16a:	230e      	movs	r3, #14
   1b16c:	5ee1      	ldrsh	r1, [r4, r3]
   1b16e:	0030      	movs	r0, r6
   1b170:	f001 fae8 	bl	1c744 <_isatty_r>
   1b174:	2800      	cmp	r0, #0
   1b176:	d010      	beq.n	1b19a <__smakebuf_r+0x86>
   1b178:	2203      	movs	r2, #3
   1b17a:	89a3      	ldrh	r3, [r4, #12]
   1b17c:	4393      	bics	r3, r2
   1b17e:	2201      	movs	r2, #1
   1b180:	4313      	orrs	r3, r2
   1b182:	b21b      	sxth	r3, r3
   1b184:	e7ee      	b.n	1b164 <__smakebuf_r+0x50>
   1b186:	220c      	movs	r2, #12
   1b188:	5ea3      	ldrsh	r3, [r4, r2]
   1b18a:	059a      	lsls	r2, r3, #22
   1b18c:	d4cf      	bmi.n	1b12e <__smakebuf_r+0x1a>
   1b18e:	2203      	movs	r2, #3
   1b190:	4393      	bics	r3, r2
   1b192:	2202      	movs	r2, #2
   1b194:	4313      	orrs	r3, r2
   1b196:	81a3      	strh	r3, [r4, #12]
   1b198:	e7c3      	b.n	1b122 <__smakebuf_r+0xe>
   1b19a:	220c      	movs	r2, #12
   1b19c:	5ea3      	ldrsh	r3, [r4, r2]
   1b19e:	e7e1      	b.n	1b164 <__smakebuf_r+0x50>
   1b1a0:	0001a9c9 	.word	0x0001a9c9

0001b1a4 <malloc>:
   1b1a4:	b510      	push	{r4, lr}
   1b1a6:	4b03      	ldr	r3, [pc, #12]	; (1b1b4 <malloc+0x10>)
   1b1a8:	0001      	movs	r1, r0
   1b1aa:	6818      	ldr	r0, [r3, #0]
   1b1ac:	f000 f804 	bl	1b1b8 <_malloc_r>
   1b1b0:	bd10      	pop	{r4, pc}
   1b1b2:	46c0      	nop			; (mov r8, r8)
   1b1b4:	20000018 	.word	0x20000018

0001b1b8 <_malloc_r>:
   1b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1ba:	4657      	mov	r7, sl
   1b1bc:	4645      	mov	r5, r8
   1b1be:	46de      	mov	lr, fp
   1b1c0:	464e      	mov	r6, r9
   1b1c2:	b5e0      	push	{r5, r6, r7, lr}
   1b1c4:	000d      	movs	r5, r1
   1b1c6:	350b      	adds	r5, #11
   1b1c8:	b083      	sub	sp, #12
   1b1ca:	0007      	movs	r7, r0
   1b1cc:	2d16      	cmp	r5, #22
   1b1ce:	d800      	bhi.n	1b1d2 <_malloc_r+0x1a>
   1b1d0:	e09f      	b.n	1b312 <_malloc_r+0x15a>
   1b1d2:	2307      	movs	r3, #7
   1b1d4:	439d      	bics	r5, r3
   1b1d6:	d500      	bpl.n	1b1da <_malloc_r+0x22>
   1b1d8:	e0c4      	b.n	1b364 <_malloc_r+0x1ac>
   1b1da:	42a9      	cmp	r1, r5
   1b1dc:	d900      	bls.n	1b1e0 <_malloc_r+0x28>
   1b1de:	e0c1      	b.n	1b364 <_malloc_r+0x1ac>
   1b1e0:	f000 fb2e 	bl	1b840 <__malloc_lock>
   1b1e4:	23f8      	movs	r3, #248	; 0xf8
   1b1e6:	33ff      	adds	r3, #255	; 0xff
   1b1e8:	429d      	cmp	r5, r3
   1b1ea:	d800      	bhi.n	1b1ee <_malloc_r+0x36>
   1b1ec:	e28f      	b.n	1b70e <_malloc_r+0x556>
   1b1ee:	0a68      	lsrs	r0, r5, #9
   1b1f0:	d100      	bne.n	1b1f4 <_malloc_r+0x3c>
   1b1f2:	e0bb      	b.n	1b36c <_malloc_r+0x1b4>
   1b1f4:	2804      	cmp	r0, #4
   1b1f6:	d900      	bls.n	1b1fa <_malloc_r+0x42>
   1b1f8:	e162      	b.n	1b4c0 <_malloc_r+0x308>
   1b1fa:	2338      	movs	r3, #56	; 0x38
   1b1fc:	4698      	mov	r8, r3
   1b1fe:	09a8      	lsrs	r0, r5, #6
   1b200:	4480      	add	r8, r0
   1b202:	3039      	adds	r0, #57	; 0x39
   1b204:	00c1      	lsls	r1, r0, #3
   1b206:	4ed2      	ldr	r6, [pc, #840]	; (1b550 <_malloc_r+0x398>)
   1b208:	1871      	adds	r1, r6, r1
   1b20a:	3908      	subs	r1, #8
   1b20c:	68cc      	ldr	r4, [r1, #12]
   1b20e:	42a1      	cmp	r1, r4
   1b210:	d019      	beq.n	1b246 <_malloc_r+0x8e>
   1b212:	2303      	movs	r3, #3
   1b214:	6862      	ldr	r2, [r4, #4]
   1b216:	439a      	bics	r2, r3
   1b218:	0013      	movs	r3, r2
   1b21a:	1b52      	subs	r2, r2, r5
   1b21c:	2a0f      	cmp	r2, #15
   1b21e:	dd00      	ble.n	1b222 <_malloc_r+0x6a>
   1b220:	e0aa      	b.n	1b378 <_malloc_r+0x1c0>
   1b222:	2a00      	cmp	r2, #0
   1b224:	db00      	blt.n	1b228 <_malloc_r+0x70>
   1b226:	e088      	b.n	1b33a <_malloc_r+0x182>
   1b228:	2303      	movs	r3, #3
   1b22a:	469c      	mov	ip, r3
   1b22c:	e008      	b.n	1b240 <_malloc_r+0x88>
   1b22e:	4662      	mov	r2, ip
   1b230:	6863      	ldr	r3, [r4, #4]
   1b232:	4393      	bics	r3, r2
   1b234:	1b5a      	subs	r2, r3, r5
   1b236:	2a0f      	cmp	r2, #15
   1b238:	dd00      	ble.n	1b23c <_malloc_r+0x84>
   1b23a:	e09d      	b.n	1b378 <_malloc_r+0x1c0>
   1b23c:	2a00      	cmp	r2, #0
   1b23e:	da7c      	bge.n	1b33a <_malloc_r+0x182>
   1b240:	68e4      	ldr	r4, [r4, #12]
   1b242:	42a1      	cmp	r1, r4
   1b244:	d1f3      	bne.n	1b22e <_malloc_r+0x76>
   1b246:	0032      	movs	r2, r6
   1b248:	6934      	ldr	r4, [r6, #16]
   1b24a:	3208      	adds	r2, #8
   1b24c:	4294      	cmp	r4, r2
   1b24e:	d100      	bne.n	1b252 <_malloc_r+0x9a>
   1b250:	e190      	b.n	1b574 <_malloc_r+0x3bc>
   1b252:	2303      	movs	r3, #3
   1b254:	6861      	ldr	r1, [r4, #4]
   1b256:	4399      	bics	r1, r3
   1b258:	4689      	mov	r9, r1
   1b25a:	1b49      	subs	r1, r1, r5
   1b25c:	290f      	cmp	r1, #15
   1b25e:	dd00      	ble.n	1b262 <_malloc_r+0xaa>
   1b260:	e162      	b.n	1b528 <_malloc_r+0x370>
   1b262:	6172      	str	r2, [r6, #20]
   1b264:	6132      	str	r2, [r6, #16]
   1b266:	2900      	cmp	r1, #0
   1b268:	db00      	blt.n	1b26c <_malloc_r+0xb4>
   1b26a:	e087      	b.n	1b37c <_malloc_r+0x1c4>
   1b26c:	4ab9      	ldr	r2, [pc, #740]	; (1b554 <_malloc_r+0x39c>)
   1b26e:	464b      	mov	r3, r9
   1b270:	4591      	cmp	r9, r2
   1b272:	d900      	bls.n	1b276 <_malloc_r+0xbe>
   1b274:	e130      	b.n	1b4d8 <_malloc_r+0x320>
   1b276:	08db      	lsrs	r3, r3, #3
   1b278:	3aff      	subs	r2, #255	; 0xff
   1b27a:	1099      	asrs	r1, r3, #2
   1b27c:	3aff      	subs	r2, #255	; 0xff
   1b27e:	408a      	lsls	r2, r1
   1b280:	00db      	lsls	r3, r3, #3
   1b282:	6871      	ldr	r1, [r6, #4]
   1b284:	199b      	adds	r3, r3, r6
   1b286:	430a      	orrs	r2, r1
   1b288:	6899      	ldr	r1, [r3, #8]
   1b28a:	6072      	str	r2, [r6, #4]
   1b28c:	60e3      	str	r3, [r4, #12]
   1b28e:	60a1      	str	r1, [r4, #8]
   1b290:	609c      	str	r4, [r3, #8]
   1b292:	0013      	movs	r3, r2
   1b294:	60cc      	str	r4, [r1, #12]
   1b296:	2101      	movs	r1, #1
   1b298:	1082      	asrs	r2, r0, #2
   1b29a:	4091      	lsls	r1, r2
   1b29c:	4299      	cmp	r1, r3
   1b29e:	d86f      	bhi.n	1b380 <_malloc_r+0x1c8>
   1b2a0:	420b      	tst	r3, r1
   1b2a2:	d105      	bne.n	1b2b0 <_malloc_r+0xf8>
   1b2a4:	2203      	movs	r2, #3
   1b2a6:	4390      	bics	r0, r2
   1b2a8:	0049      	lsls	r1, r1, #1
   1b2aa:	3004      	adds	r0, #4
   1b2ac:	420b      	tst	r3, r1
   1b2ae:	d0fb      	beq.n	1b2a8 <_malloc_r+0xf0>
   1b2b0:	2303      	movs	r3, #3
   1b2b2:	4698      	mov	r8, r3
   1b2b4:	00c3      	lsls	r3, r0, #3
   1b2b6:	4699      	mov	r9, r3
   1b2b8:	44b1      	add	r9, r6
   1b2ba:	46cc      	mov	ip, r9
   1b2bc:	4682      	mov	sl, r0
   1b2be:	4663      	mov	r3, ip
   1b2c0:	68dc      	ldr	r4, [r3, #12]
   1b2c2:	45a4      	cmp	ip, r4
   1b2c4:	d107      	bne.n	1b2d6 <_malloc_r+0x11e>
   1b2c6:	e157      	b.n	1b578 <_malloc_r+0x3c0>
   1b2c8:	2a00      	cmp	r2, #0
   1b2ca:	db00      	blt.n	1b2ce <_malloc_r+0x116>
   1b2cc:	e166      	b.n	1b59c <_malloc_r+0x3e4>
   1b2ce:	68e4      	ldr	r4, [r4, #12]
   1b2d0:	45a4      	cmp	ip, r4
   1b2d2:	d100      	bne.n	1b2d6 <_malloc_r+0x11e>
   1b2d4:	e150      	b.n	1b578 <_malloc_r+0x3c0>
   1b2d6:	4642      	mov	r2, r8
   1b2d8:	6863      	ldr	r3, [r4, #4]
   1b2da:	4393      	bics	r3, r2
   1b2dc:	1b5a      	subs	r2, r3, r5
   1b2de:	2a0f      	cmp	r2, #15
   1b2e0:	ddf2      	ble.n	1b2c8 <_malloc_r+0x110>
   1b2e2:	2001      	movs	r0, #1
   1b2e4:	4680      	mov	r8, r0
   1b2e6:	1961      	adds	r1, r4, r5
   1b2e8:	4305      	orrs	r5, r0
   1b2ea:	6065      	str	r5, [r4, #4]
   1b2ec:	68a0      	ldr	r0, [r4, #8]
   1b2ee:	68e5      	ldr	r5, [r4, #12]
   1b2f0:	3608      	adds	r6, #8
   1b2f2:	60c5      	str	r5, [r0, #12]
   1b2f4:	60a8      	str	r0, [r5, #8]
   1b2f6:	4640      	mov	r0, r8
   1b2f8:	60f1      	str	r1, [r6, #12]
   1b2fa:	60b1      	str	r1, [r6, #8]
   1b2fc:	4310      	orrs	r0, r2
   1b2fe:	6048      	str	r0, [r1, #4]
   1b300:	60ce      	str	r6, [r1, #12]
   1b302:	608e      	str	r6, [r1, #8]
   1b304:	0038      	movs	r0, r7
   1b306:	50e2      	str	r2, [r4, r3]
   1b308:	f000 faa2 	bl	1b850 <__malloc_unlock>
   1b30c:	0020      	movs	r0, r4
   1b30e:	3008      	adds	r0, #8
   1b310:	e021      	b.n	1b356 <_malloc_r+0x19e>
   1b312:	2910      	cmp	r1, #16
   1b314:	d826      	bhi.n	1b364 <_malloc_r+0x1ac>
   1b316:	0038      	movs	r0, r7
   1b318:	f000 fa92 	bl	1b840 <__malloc_lock>
   1b31c:	2510      	movs	r5, #16
   1b31e:	2318      	movs	r3, #24
   1b320:	2002      	movs	r0, #2
   1b322:	4e8b      	ldr	r6, [pc, #556]	; (1b550 <_malloc_r+0x398>)
   1b324:	18f3      	adds	r3, r6, r3
   1b326:	001a      	movs	r2, r3
   1b328:	685c      	ldr	r4, [r3, #4]
   1b32a:	3a08      	subs	r2, #8
   1b32c:	4294      	cmp	r4, r2
   1b32e:	d100      	bne.n	1b332 <_malloc_r+0x17a>
   1b330:	e12e      	b.n	1b590 <_malloc_r+0x3d8>
   1b332:	2303      	movs	r3, #3
   1b334:	6862      	ldr	r2, [r4, #4]
   1b336:	439a      	bics	r2, r3
   1b338:	0013      	movs	r3, r2
   1b33a:	68e2      	ldr	r2, [r4, #12]
   1b33c:	68a1      	ldr	r1, [r4, #8]
   1b33e:	60ca      	str	r2, [r1, #12]
   1b340:	6091      	str	r1, [r2, #8]
   1b342:	2201      	movs	r2, #1
   1b344:	18e3      	adds	r3, r4, r3
   1b346:	6859      	ldr	r1, [r3, #4]
   1b348:	0038      	movs	r0, r7
   1b34a:	430a      	orrs	r2, r1
   1b34c:	605a      	str	r2, [r3, #4]
   1b34e:	f000 fa7f 	bl	1b850 <__malloc_unlock>
   1b352:	0020      	movs	r0, r4
   1b354:	3008      	adds	r0, #8
   1b356:	b003      	add	sp, #12
   1b358:	bc3c      	pop	{r2, r3, r4, r5}
   1b35a:	4690      	mov	r8, r2
   1b35c:	4699      	mov	r9, r3
   1b35e:	46a2      	mov	sl, r4
   1b360:	46ab      	mov	fp, r5
   1b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b364:	230c      	movs	r3, #12
   1b366:	2000      	movs	r0, #0
   1b368:	603b      	str	r3, [r7, #0]
   1b36a:	e7f4      	b.n	1b356 <_malloc_r+0x19e>
   1b36c:	2180      	movs	r1, #128	; 0x80
   1b36e:	233f      	movs	r3, #63	; 0x3f
   1b370:	2040      	movs	r0, #64	; 0x40
   1b372:	0089      	lsls	r1, r1, #2
   1b374:	4698      	mov	r8, r3
   1b376:	e746      	b.n	1b206 <_malloc_r+0x4e>
   1b378:	4640      	mov	r0, r8
   1b37a:	e764      	b.n	1b246 <_malloc_r+0x8e>
   1b37c:	464b      	mov	r3, r9
   1b37e:	e7e0      	b.n	1b342 <_malloc_r+0x18a>
   1b380:	2303      	movs	r3, #3
   1b382:	68b4      	ldr	r4, [r6, #8]
   1b384:	6862      	ldr	r2, [r4, #4]
   1b386:	439a      	bics	r2, r3
   1b388:	4690      	mov	r8, r2
   1b38a:	42aa      	cmp	r2, r5
   1b38c:	d303      	bcc.n	1b396 <_malloc_r+0x1de>
   1b38e:	1b53      	subs	r3, r2, r5
   1b390:	2b0f      	cmp	r3, #15
   1b392:	dd00      	ble.n	1b396 <_malloc_r+0x1de>
   1b394:	e086      	b.n	1b4a4 <_malloc_r+0x2ec>
   1b396:	0023      	movs	r3, r4
   1b398:	4443      	add	r3, r8
   1b39a:	4a6f      	ldr	r2, [pc, #444]	; (1b558 <_malloc_r+0x3a0>)
   1b39c:	9301      	str	r3, [sp, #4]
   1b39e:	4b6f      	ldr	r3, [pc, #444]	; (1b55c <_malloc_r+0x3a4>)
   1b3a0:	4693      	mov	fp, r2
   1b3a2:	681b      	ldr	r3, [r3, #0]
   1b3a4:	6812      	ldr	r2, [r2, #0]
   1b3a6:	18eb      	adds	r3, r5, r3
   1b3a8:	3201      	adds	r2, #1
   1b3aa:	d100      	bne.n	1b3ae <_malloc_r+0x1f6>
   1b3ac:	e168      	b.n	1b680 <_malloc_r+0x4c8>
   1b3ae:	4a6c      	ldr	r2, [pc, #432]	; (1b560 <_malloc_r+0x3a8>)
   1b3b0:	4694      	mov	ip, r2
   1b3b2:	4463      	add	r3, ip
   1b3b4:	0b1b      	lsrs	r3, r3, #12
   1b3b6:	031b      	lsls	r3, r3, #12
   1b3b8:	9300      	str	r3, [sp, #0]
   1b3ba:	9900      	ldr	r1, [sp, #0]
   1b3bc:	0038      	movs	r0, r7
   1b3be:	f000 ff55 	bl	1c26c <_sbrk_r>
   1b3c2:	0003      	movs	r3, r0
   1b3c4:	4681      	mov	r9, r0
   1b3c6:	3301      	adds	r3, #1
   1b3c8:	d061      	beq.n	1b48e <_malloc_r+0x2d6>
   1b3ca:	9b01      	ldr	r3, [sp, #4]
   1b3cc:	4283      	cmp	r3, r0
   1b3ce:	d900      	bls.n	1b3d2 <_malloc_r+0x21a>
   1b3d0:	e0ff      	b.n	1b5d2 <_malloc_r+0x41a>
   1b3d2:	4b64      	ldr	r3, [pc, #400]	; (1b564 <_malloc_r+0x3ac>)
   1b3d4:	9a00      	ldr	r2, [sp, #0]
   1b3d6:	469a      	mov	sl, r3
   1b3d8:	681b      	ldr	r3, [r3, #0]
   1b3da:	469c      	mov	ip, r3
   1b3dc:	4653      	mov	r3, sl
   1b3de:	4462      	add	r2, ip
   1b3e0:	601a      	str	r2, [r3, #0]
   1b3e2:	9b01      	ldr	r3, [sp, #4]
   1b3e4:	0011      	movs	r1, r2
   1b3e6:	4283      	cmp	r3, r0
   1b3e8:	d100      	bne.n	1b3ec <_malloc_r+0x234>
   1b3ea:	e155      	b.n	1b698 <_malloc_r+0x4e0>
   1b3ec:	465b      	mov	r3, fp
   1b3ee:	681b      	ldr	r3, [r3, #0]
   1b3f0:	3301      	adds	r3, #1
   1b3f2:	d100      	bne.n	1b3f6 <_malloc_r+0x23e>
   1b3f4:	e16c      	b.n	1b6d0 <_malloc_r+0x518>
   1b3f6:	464b      	mov	r3, r9
   1b3f8:	9a01      	ldr	r2, [sp, #4]
   1b3fa:	1a9b      	subs	r3, r3, r2
   1b3fc:	1859      	adds	r1, r3, r1
   1b3fe:	4653      	mov	r3, sl
   1b400:	6019      	str	r1, [r3, #0]
   1b402:	2307      	movs	r3, #7
   1b404:	464a      	mov	r2, r9
   1b406:	4013      	ands	r3, r2
   1b408:	d100      	bne.n	1b40c <_malloc_r+0x254>
   1b40a:	e124      	b.n	1b656 <_malloc_r+0x49e>
   1b40c:	2108      	movs	r1, #8
   1b40e:	4689      	mov	r9, r1
   1b410:	4955      	ldr	r1, [pc, #340]	; (1b568 <_malloc_r+0x3b0>)
   1b412:	1ad2      	subs	r2, r2, r3
   1b414:	4491      	add	r9, r2
   1b416:	1acb      	subs	r3, r1, r3
   1b418:	9a00      	ldr	r2, [sp, #0]
   1b41a:	0038      	movs	r0, r7
   1b41c:	444a      	add	r2, r9
   1b41e:	0511      	lsls	r1, r2, #20
   1b420:	0d09      	lsrs	r1, r1, #20
   1b422:	1a5b      	subs	r3, r3, r1
   1b424:	0019      	movs	r1, r3
   1b426:	469b      	mov	fp, r3
   1b428:	f000 ff20 	bl	1c26c <_sbrk_r>
   1b42c:	1c43      	adds	r3, r0, #1
   1b42e:	d100      	bne.n	1b432 <_malloc_r+0x27a>
   1b430:	e142      	b.n	1b6b8 <_malloc_r+0x500>
   1b432:	464b      	mov	r3, r9
   1b434:	1ac0      	subs	r0, r0, r3
   1b436:	2301      	movs	r3, #1
   1b438:	4458      	add	r0, fp
   1b43a:	4318      	orrs	r0, r3
   1b43c:	4653      	mov	r3, sl
   1b43e:	681b      	ldr	r3, [r3, #0]
   1b440:	445b      	add	r3, fp
   1b442:	0019      	movs	r1, r3
   1b444:	4653      	mov	r3, sl
   1b446:	6019      	str	r1, [r3, #0]
   1b448:	464b      	mov	r3, r9
   1b44a:	60b3      	str	r3, [r6, #8]
   1b44c:	6058      	str	r0, [r3, #4]
   1b44e:	42b4      	cmp	r4, r6
   1b450:	d013      	beq.n	1b47a <_malloc_r+0x2c2>
   1b452:	4643      	mov	r3, r8
   1b454:	2b0f      	cmp	r3, #15
   1b456:	d800      	bhi.n	1b45a <_malloc_r+0x2a2>
   1b458:	e0e8      	b.n	1b62c <_malloc_r+0x474>
   1b45a:	4643      	mov	r3, r8
   1b45c:	2207      	movs	r2, #7
   1b45e:	6860      	ldr	r0, [r4, #4]
   1b460:	3b0c      	subs	r3, #12
   1b462:	4393      	bics	r3, r2
   1b464:	3a06      	subs	r2, #6
   1b466:	4002      	ands	r2, r0
   1b468:	2005      	movs	r0, #5
   1b46a:	431a      	orrs	r2, r3
   1b46c:	6062      	str	r2, [r4, #4]
   1b46e:	18e2      	adds	r2, r4, r3
   1b470:	6050      	str	r0, [r2, #4]
   1b472:	6090      	str	r0, [r2, #8]
   1b474:	2b0f      	cmp	r3, #15
   1b476:	d900      	bls.n	1b47a <_malloc_r+0x2c2>
   1b478:	e122      	b.n	1b6c0 <_malloc_r+0x508>
   1b47a:	4b3c      	ldr	r3, [pc, #240]	; (1b56c <_malloc_r+0x3b4>)
   1b47c:	681a      	ldr	r2, [r3, #0]
   1b47e:	4291      	cmp	r1, r2
   1b480:	d900      	bls.n	1b484 <_malloc_r+0x2cc>
   1b482:	6019      	str	r1, [r3, #0]
   1b484:	4b3a      	ldr	r3, [pc, #232]	; (1b570 <_malloc_r+0x3b8>)
   1b486:	681a      	ldr	r2, [r3, #0]
   1b488:	4291      	cmp	r1, r2
   1b48a:	d900      	bls.n	1b48e <_malloc_r+0x2d6>
   1b48c:	6019      	str	r1, [r3, #0]
   1b48e:	2303      	movs	r3, #3
   1b490:	68b4      	ldr	r4, [r6, #8]
   1b492:	6862      	ldr	r2, [r4, #4]
   1b494:	439a      	bics	r2, r3
   1b496:	1b53      	subs	r3, r2, r5
   1b498:	4295      	cmp	r5, r2
   1b49a:	d900      	bls.n	1b49e <_malloc_r+0x2e6>
   1b49c:	e0c9      	b.n	1b632 <_malloc_r+0x47a>
   1b49e:	2b0f      	cmp	r3, #15
   1b4a0:	dc00      	bgt.n	1b4a4 <_malloc_r+0x2ec>
   1b4a2:	e0c6      	b.n	1b632 <_malloc_r+0x47a>
   1b4a4:	2201      	movs	r2, #1
   1b4a6:	0029      	movs	r1, r5
   1b4a8:	4313      	orrs	r3, r2
   1b4aa:	4311      	orrs	r1, r2
   1b4ac:	1965      	adds	r5, r4, r5
   1b4ae:	6061      	str	r1, [r4, #4]
   1b4b0:	0038      	movs	r0, r7
   1b4b2:	60b5      	str	r5, [r6, #8]
   1b4b4:	606b      	str	r3, [r5, #4]
   1b4b6:	f000 f9cb 	bl	1b850 <__malloc_unlock>
   1b4ba:	0020      	movs	r0, r4
   1b4bc:	3008      	adds	r0, #8
   1b4be:	e74a      	b.n	1b356 <_malloc_r+0x19e>
   1b4c0:	2814      	cmp	r0, #20
   1b4c2:	d97a      	bls.n	1b5ba <_malloc_r+0x402>
   1b4c4:	2854      	cmp	r0, #84	; 0x54
   1b4c6:	d900      	bls.n	1b4ca <_malloc_r+0x312>
   1b4c8:	e0ba      	b.n	1b640 <_malloc_r+0x488>
   1b4ca:	236e      	movs	r3, #110	; 0x6e
   1b4cc:	4698      	mov	r8, r3
   1b4ce:	0b28      	lsrs	r0, r5, #12
   1b4d0:	4480      	add	r8, r0
   1b4d2:	306f      	adds	r0, #111	; 0x6f
   1b4d4:	00c1      	lsls	r1, r0, #3
   1b4d6:	e696      	b.n	1b206 <_malloc_r+0x4e>
   1b4d8:	0a5a      	lsrs	r2, r3, #9
   1b4da:	2a04      	cmp	r2, #4
   1b4dc:	d973      	bls.n	1b5c6 <_malloc_r+0x40e>
   1b4de:	2a14      	cmp	r2, #20
   1b4e0:	d900      	bls.n	1b4e4 <_malloc_r+0x32c>
   1b4e2:	e0d0      	b.n	1b686 <_malloc_r+0x4ce>
   1b4e4:	0011      	movs	r1, r2
   1b4e6:	325c      	adds	r2, #92	; 0x5c
   1b4e8:	315b      	adds	r1, #91	; 0x5b
   1b4ea:	00d2      	lsls	r2, r2, #3
   1b4ec:	2308      	movs	r3, #8
   1b4ee:	425b      	negs	r3, r3
   1b4f0:	469c      	mov	ip, r3
   1b4f2:	18b2      	adds	r2, r6, r2
   1b4f4:	4494      	add	ip, r2
   1b4f6:	4663      	mov	r3, ip
   1b4f8:	689a      	ldr	r2, [r3, #8]
   1b4fa:	2303      	movs	r3, #3
   1b4fc:	4698      	mov	r8, r3
   1b4fe:	4594      	cmp	ip, r2
   1b500:	d100      	bne.n	1b504 <_malloc_r+0x34c>
   1b502:	e0ab      	b.n	1b65c <_malloc_r+0x4a4>
   1b504:	4643      	mov	r3, r8
   1b506:	6851      	ldr	r1, [r2, #4]
   1b508:	4399      	bics	r1, r3
   1b50a:	4589      	cmp	r9, r1
   1b50c:	d300      	bcc.n	1b510 <_malloc_r+0x358>
   1b50e:	e095      	b.n	1b63c <_malloc_r+0x484>
   1b510:	6892      	ldr	r2, [r2, #8]
   1b512:	4594      	cmp	ip, r2
   1b514:	d1f6      	bne.n	1b504 <_malloc_r+0x34c>
   1b516:	4663      	mov	r3, ip
   1b518:	68da      	ldr	r2, [r3, #12]
   1b51a:	6873      	ldr	r3, [r6, #4]
   1b51c:	4661      	mov	r1, ip
   1b51e:	60e2      	str	r2, [r4, #12]
   1b520:	60a1      	str	r1, [r4, #8]
   1b522:	6094      	str	r4, [r2, #8]
   1b524:	60cc      	str	r4, [r1, #12]
   1b526:	e6b6      	b.n	1b296 <_malloc_r+0xde>
   1b528:	2301      	movs	r3, #1
   1b52a:	1960      	adds	r0, r4, r5
   1b52c:	431d      	orrs	r5, r3
   1b52e:	6065      	str	r5, [r4, #4]
   1b530:	6170      	str	r0, [r6, #20]
   1b532:	6130      	str	r0, [r6, #16]
   1b534:	60c2      	str	r2, [r0, #12]
   1b536:	6082      	str	r2, [r0, #8]
   1b538:	001a      	movs	r2, r3
   1b53a:	464b      	mov	r3, r9
   1b53c:	430a      	orrs	r2, r1
   1b53e:	6042      	str	r2, [r0, #4]
   1b540:	0038      	movs	r0, r7
   1b542:	50e1      	str	r1, [r4, r3]
   1b544:	f000 f984 	bl	1b850 <__malloc_unlock>
   1b548:	0020      	movs	r0, r4
   1b54a:	3008      	adds	r0, #8
   1b54c:	e703      	b.n	1b356 <_malloc_r+0x19e>
   1b54e:	46c0      	nop			; (mov r8, r8)
   1b550:	200005b8 	.word	0x200005b8
   1b554:	000001ff 	.word	0x000001ff
   1b558:	200009c0 	.word	0x200009c0
   1b55c:	20000fa8 	.word	0x20000fa8
   1b560:	0000100f 	.word	0x0000100f
   1b564:	20000f78 	.word	0x20000f78
   1b568:	00001008 	.word	0x00001008
   1b56c:	20000fa0 	.word	0x20000fa0
   1b570:	20000fa4 	.word	0x20000fa4
   1b574:	6873      	ldr	r3, [r6, #4]
   1b576:	e68e      	b.n	1b296 <_malloc_r+0xde>
   1b578:	2308      	movs	r3, #8
   1b57a:	469b      	mov	fp, r3
   1b57c:	3b07      	subs	r3, #7
   1b57e:	44dc      	add	ip, fp
   1b580:	469b      	mov	fp, r3
   1b582:	44da      	add	sl, fp
   1b584:	4643      	mov	r3, r8
   1b586:	4652      	mov	r2, sl
   1b588:	4213      	tst	r3, r2
   1b58a:	d000      	beq.n	1b58e <_malloc_r+0x3d6>
   1b58c:	e697      	b.n	1b2be <_malloc_r+0x106>
   1b58e:	e037      	b.n	1b600 <_malloc_r+0x448>
   1b590:	68dc      	ldr	r4, [r3, #12]
   1b592:	3002      	adds	r0, #2
   1b594:	42a3      	cmp	r3, r4
   1b596:	d100      	bne.n	1b59a <_malloc_r+0x3e2>
   1b598:	e655      	b.n	1b246 <_malloc_r+0x8e>
   1b59a:	e6ca      	b.n	1b332 <_malloc_r+0x17a>
   1b59c:	2201      	movs	r2, #1
   1b59e:	18e3      	adds	r3, r4, r3
   1b5a0:	6859      	ldr	r1, [r3, #4]
   1b5a2:	0038      	movs	r0, r7
   1b5a4:	430a      	orrs	r2, r1
   1b5a6:	605a      	str	r2, [r3, #4]
   1b5a8:	68e3      	ldr	r3, [r4, #12]
   1b5aa:	68a2      	ldr	r2, [r4, #8]
   1b5ac:	60d3      	str	r3, [r2, #12]
   1b5ae:	609a      	str	r2, [r3, #8]
   1b5b0:	f000 f94e 	bl	1b850 <__malloc_unlock>
   1b5b4:	0020      	movs	r0, r4
   1b5b6:	3008      	adds	r0, #8
   1b5b8:	e6cd      	b.n	1b356 <_malloc_r+0x19e>
   1b5ba:	235b      	movs	r3, #91	; 0x5b
   1b5bc:	4698      	mov	r8, r3
   1b5be:	4480      	add	r8, r0
   1b5c0:	305c      	adds	r0, #92	; 0x5c
   1b5c2:	00c1      	lsls	r1, r0, #3
   1b5c4:	e61f      	b.n	1b206 <_malloc_r+0x4e>
   1b5c6:	099a      	lsrs	r2, r3, #6
   1b5c8:	0011      	movs	r1, r2
   1b5ca:	3239      	adds	r2, #57	; 0x39
   1b5cc:	3138      	adds	r1, #56	; 0x38
   1b5ce:	00d2      	lsls	r2, r2, #3
   1b5d0:	e78c      	b.n	1b4ec <_malloc_r+0x334>
   1b5d2:	42b4      	cmp	r4, r6
   1b5d4:	d000      	beq.n	1b5d8 <_malloc_r+0x420>
   1b5d6:	e75a      	b.n	1b48e <_malloc_r+0x2d6>
   1b5d8:	4b4f      	ldr	r3, [pc, #316]	; (1b718 <_malloc_r+0x560>)
   1b5da:	9a00      	ldr	r2, [sp, #0]
   1b5dc:	469a      	mov	sl, r3
   1b5de:	681b      	ldr	r3, [r3, #0]
   1b5e0:	469c      	mov	ip, r3
   1b5e2:	4653      	mov	r3, sl
   1b5e4:	4462      	add	r2, ip
   1b5e6:	0011      	movs	r1, r2
   1b5e8:	601a      	str	r2, [r3, #0]
   1b5ea:	e6ff      	b.n	1b3ec <_malloc_r+0x234>
   1b5ec:	2308      	movs	r3, #8
   1b5ee:	425b      	negs	r3, r3
   1b5f0:	469c      	mov	ip, r3
   1b5f2:	44e1      	add	r9, ip
   1b5f4:	464b      	mov	r3, r9
   1b5f6:	689b      	ldr	r3, [r3, #8]
   1b5f8:	3801      	subs	r0, #1
   1b5fa:	4599      	cmp	r9, r3
   1b5fc:	d000      	beq.n	1b600 <_malloc_r+0x448>
   1b5fe:	e084      	b.n	1b70a <_malloc_r+0x552>
   1b600:	4643      	mov	r3, r8
   1b602:	4203      	tst	r3, r0
   1b604:	d1f2      	bne.n	1b5ec <_malloc_r+0x434>
   1b606:	6873      	ldr	r3, [r6, #4]
   1b608:	438b      	bics	r3, r1
   1b60a:	6073      	str	r3, [r6, #4]
   1b60c:	0049      	lsls	r1, r1, #1
   1b60e:	4299      	cmp	r1, r3
   1b610:	d900      	bls.n	1b614 <_malloc_r+0x45c>
   1b612:	e6b5      	b.n	1b380 <_malloc_r+0x1c8>
   1b614:	2900      	cmp	r1, #0
   1b616:	d100      	bne.n	1b61a <_malloc_r+0x462>
   1b618:	e6b2      	b.n	1b380 <_malloc_r+0x1c8>
   1b61a:	4650      	mov	r0, sl
   1b61c:	420b      	tst	r3, r1
   1b61e:	d000      	beq.n	1b622 <_malloc_r+0x46a>
   1b620:	e648      	b.n	1b2b4 <_malloc_r+0xfc>
   1b622:	0049      	lsls	r1, r1, #1
   1b624:	3004      	adds	r0, #4
   1b626:	420b      	tst	r3, r1
   1b628:	d0fb      	beq.n	1b622 <_malloc_r+0x46a>
   1b62a:	e643      	b.n	1b2b4 <_malloc_r+0xfc>
   1b62c:	2301      	movs	r3, #1
   1b62e:	464a      	mov	r2, r9
   1b630:	6053      	str	r3, [r2, #4]
   1b632:	0038      	movs	r0, r7
   1b634:	f000 f90c 	bl	1b850 <__malloc_unlock>
   1b638:	2000      	movs	r0, #0
   1b63a:	e68c      	b.n	1b356 <_malloc_r+0x19e>
   1b63c:	4694      	mov	ip, r2
   1b63e:	e76a      	b.n	1b516 <_malloc_r+0x35e>
   1b640:	23aa      	movs	r3, #170	; 0xaa
   1b642:	005b      	lsls	r3, r3, #1
   1b644:	4298      	cmp	r0, r3
   1b646:	d811      	bhi.n	1b66c <_malloc_r+0x4b4>
   1b648:	3bdd      	subs	r3, #221	; 0xdd
   1b64a:	4698      	mov	r8, r3
   1b64c:	0be8      	lsrs	r0, r5, #15
   1b64e:	4480      	add	r8, r0
   1b650:	3078      	adds	r0, #120	; 0x78
   1b652:	00c1      	lsls	r1, r0, #3
   1b654:	e5d7      	b.n	1b206 <_malloc_r+0x4e>
   1b656:	2380      	movs	r3, #128	; 0x80
   1b658:	015b      	lsls	r3, r3, #5
   1b65a:	e6dd      	b.n	1b418 <_malloc_r+0x260>
   1b65c:	1089      	asrs	r1, r1, #2
   1b65e:	3b02      	subs	r3, #2
   1b660:	408b      	lsls	r3, r1
   1b662:	6872      	ldr	r2, [r6, #4]
   1b664:	4313      	orrs	r3, r2
   1b666:	6073      	str	r3, [r6, #4]
   1b668:	4662      	mov	r2, ip
   1b66a:	e757      	b.n	1b51c <_malloc_r+0x364>
   1b66c:	4b2b      	ldr	r3, [pc, #172]	; (1b71c <_malloc_r+0x564>)
   1b66e:	4298      	cmp	r0, r3
   1b670:	d81c      	bhi.n	1b6ac <_malloc_r+0x4f4>
   1b672:	237c      	movs	r3, #124	; 0x7c
   1b674:	4698      	mov	r8, r3
   1b676:	0ca8      	lsrs	r0, r5, #18
   1b678:	4480      	add	r8, r0
   1b67a:	307d      	adds	r0, #125	; 0x7d
   1b67c:	00c1      	lsls	r1, r0, #3
   1b67e:	e5c2      	b.n	1b206 <_malloc_r+0x4e>
   1b680:	3310      	adds	r3, #16
   1b682:	9300      	str	r3, [sp, #0]
   1b684:	e699      	b.n	1b3ba <_malloc_r+0x202>
   1b686:	2a54      	cmp	r2, #84	; 0x54
   1b688:	d826      	bhi.n	1b6d8 <_malloc_r+0x520>
   1b68a:	464b      	mov	r3, r9
   1b68c:	0b1a      	lsrs	r2, r3, #12
   1b68e:	0011      	movs	r1, r2
   1b690:	326f      	adds	r2, #111	; 0x6f
   1b692:	316e      	adds	r1, #110	; 0x6e
   1b694:	00d2      	lsls	r2, r2, #3
   1b696:	e729      	b.n	1b4ec <_malloc_r+0x334>
   1b698:	051b      	lsls	r3, r3, #20
   1b69a:	d000      	beq.n	1b69e <_malloc_r+0x4e6>
   1b69c:	e6a6      	b.n	1b3ec <_malloc_r+0x234>
   1b69e:	2001      	movs	r0, #1
   1b6a0:	9b00      	ldr	r3, [sp, #0]
   1b6a2:	68b2      	ldr	r2, [r6, #8]
   1b6a4:	4443      	add	r3, r8
   1b6a6:	4303      	orrs	r3, r0
   1b6a8:	6053      	str	r3, [r2, #4]
   1b6aa:	e6e6      	b.n	1b47a <_malloc_r+0x2c2>
   1b6ac:	21fe      	movs	r1, #254	; 0xfe
   1b6ae:	237e      	movs	r3, #126	; 0x7e
   1b6b0:	207f      	movs	r0, #127	; 0x7f
   1b6b2:	0089      	lsls	r1, r1, #2
   1b6b4:	4698      	mov	r8, r3
   1b6b6:	e5a6      	b.n	1b206 <_malloc_r+0x4e>
   1b6b8:	2300      	movs	r3, #0
   1b6ba:	2001      	movs	r0, #1
   1b6bc:	469b      	mov	fp, r3
   1b6be:	e6bd      	b.n	1b43c <_malloc_r+0x284>
   1b6c0:	0021      	movs	r1, r4
   1b6c2:	0038      	movs	r0, r7
   1b6c4:	3108      	adds	r1, #8
   1b6c6:	f7ff fa59 	bl	1ab7c <_free_r>
   1b6ca:	4653      	mov	r3, sl
   1b6cc:	6819      	ldr	r1, [r3, #0]
   1b6ce:	e6d4      	b.n	1b47a <_malloc_r+0x2c2>
   1b6d0:	465b      	mov	r3, fp
   1b6d2:	464a      	mov	r2, r9
   1b6d4:	601a      	str	r2, [r3, #0]
   1b6d6:	e694      	b.n	1b402 <_malloc_r+0x24a>
   1b6d8:	21aa      	movs	r1, #170	; 0xaa
   1b6da:	0049      	lsls	r1, r1, #1
   1b6dc:	428a      	cmp	r2, r1
   1b6de:	d806      	bhi.n	1b6ee <_malloc_r+0x536>
   1b6e0:	464b      	mov	r3, r9
   1b6e2:	0bda      	lsrs	r2, r3, #15
   1b6e4:	0011      	movs	r1, r2
   1b6e6:	3278      	adds	r2, #120	; 0x78
   1b6e8:	3177      	adds	r1, #119	; 0x77
   1b6ea:	00d2      	lsls	r2, r2, #3
   1b6ec:	e6fe      	b.n	1b4ec <_malloc_r+0x334>
   1b6ee:	490b      	ldr	r1, [pc, #44]	; (1b71c <_malloc_r+0x564>)
   1b6f0:	428a      	cmp	r2, r1
   1b6f2:	d806      	bhi.n	1b702 <_malloc_r+0x54a>
   1b6f4:	464b      	mov	r3, r9
   1b6f6:	0c9a      	lsrs	r2, r3, #18
   1b6f8:	0011      	movs	r1, r2
   1b6fa:	327d      	adds	r2, #125	; 0x7d
   1b6fc:	317c      	adds	r1, #124	; 0x7c
   1b6fe:	00d2      	lsls	r2, r2, #3
   1b700:	e6f4      	b.n	1b4ec <_malloc_r+0x334>
   1b702:	22fe      	movs	r2, #254	; 0xfe
   1b704:	217e      	movs	r1, #126	; 0x7e
   1b706:	0092      	lsls	r2, r2, #2
   1b708:	e6f0      	b.n	1b4ec <_malloc_r+0x334>
   1b70a:	6873      	ldr	r3, [r6, #4]
   1b70c:	e77e      	b.n	1b60c <_malloc_r+0x454>
   1b70e:	002b      	movs	r3, r5
   1b710:	08e8      	lsrs	r0, r5, #3
   1b712:	3308      	adds	r3, #8
   1b714:	e605      	b.n	1b322 <_malloc_r+0x16a>
   1b716:	46c0      	nop			; (mov r8, r8)
   1b718:	20000f78 	.word	0x20000f78
   1b71c:	00000554 	.word	0x00000554

0001b720 <memchr>:
   1b720:	b570      	push	{r4, r5, r6, lr}
   1b722:	b2cd      	uxtb	r5, r1
   1b724:	0783      	lsls	r3, r0, #30
   1b726:	d034      	beq.n	1b792 <memchr+0x72>
   1b728:	1e54      	subs	r4, r2, #1
   1b72a:	2a00      	cmp	r2, #0
   1b72c:	d01b      	beq.n	1b766 <memchr+0x46>
   1b72e:	7803      	ldrb	r3, [r0, #0]
   1b730:	42ab      	cmp	r3, r5
   1b732:	d019      	beq.n	1b768 <memchr+0x48>
   1b734:	2203      	movs	r2, #3
   1b736:	e004      	b.n	1b742 <memchr+0x22>
   1b738:	3c01      	subs	r4, #1
   1b73a:	d314      	bcc.n	1b766 <memchr+0x46>
   1b73c:	7803      	ldrb	r3, [r0, #0]
   1b73e:	42ab      	cmp	r3, r5
   1b740:	d012      	beq.n	1b768 <memchr+0x48>
   1b742:	3001      	adds	r0, #1
   1b744:	4210      	tst	r0, r2
   1b746:	d1f7      	bne.n	1b738 <memchr+0x18>
   1b748:	2c03      	cmp	r4, #3
   1b74a:	d80e      	bhi.n	1b76a <memchr+0x4a>
   1b74c:	2c00      	cmp	r4, #0
   1b74e:	d00a      	beq.n	1b766 <memchr+0x46>
   1b750:	7803      	ldrb	r3, [r0, #0]
   1b752:	42ab      	cmp	r3, r5
   1b754:	d008      	beq.n	1b768 <memchr+0x48>
   1b756:	1904      	adds	r4, r0, r4
   1b758:	e002      	b.n	1b760 <memchr+0x40>
   1b75a:	7803      	ldrb	r3, [r0, #0]
   1b75c:	42ab      	cmp	r3, r5
   1b75e:	d003      	beq.n	1b768 <memchr+0x48>
   1b760:	3001      	adds	r0, #1
   1b762:	4284      	cmp	r4, r0
   1b764:	d1f9      	bne.n	1b75a <memchr+0x3a>
   1b766:	2000      	movs	r0, #0
   1b768:	bd70      	pop	{r4, r5, r6, pc}
   1b76a:	22ff      	movs	r2, #255	; 0xff
   1b76c:	060b      	lsls	r3, r1, #24
   1b76e:	0c1b      	lsrs	r3, r3, #16
   1b770:	4011      	ands	r1, r2
   1b772:	4319      	orrs	r1, r3
   1b774:	040b      	lsls	r3, r1, #16
   1b776:	4e08      	ldr	r6, [pc, #32]	; (1b798 <memchr+0x78>)
   1b778:	4319      	orrs	r1, r3
   1b77a:	6803      	ldr	r3, [r0, #0]
   1b77c:	4a07      	ldr	r2, [pc, #28]	; (1b79c <memchr+0x7c>)
   1b77e:	404b      	eors	r3, r1
   1b780:	189a      	adds	r2, r3, r2
   1b782:	439a      	bics	r2, r3
   1b784:	4232      	tst	r2, r6
   1b786:	d1e3      	bne.n	1b750 <memchr+0x30>
   1b788:	3c04      	subs	r4, #4
   1b78a:	3004      	adds	r0, #4
   1b78c:	2c03      	cmp	r4, #3
   1b78e:	d8f4      	bhi.n	1b77a <memchr+0x5a>
   1b790:	e7dc      	b.n	1b74c <memchr+0x2c>
   1b792:	0014      	movs	r4, r2
   1b794:	e7d8      	b.n	1b748 <memchr+0x28>
   1b796:	46c0      	nop			; (mov r8, r8)
   1b798:	80808080 	.word	0x80808080
   1b79c:	fefefeff 	.word	0xfefefeff

0001b7a0 <memmove>:
   1b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7a2:	4288      	cmp	r0, r1
   1b7a4:	d90a      	bls.n	1b7bc <memmove+0x1c>
   1b7a6:	188b      	adds	r3, r1, r2
   1b7a8:	4298      	cmp	r0, r3
   1b7aa:	d207      	bcs.n	1b7bc <memmove+0x1c>
   1b7ac:	1e53      	subs	r3, r2, #1
   1b7ae:	2a00      	cmp	r2, #0
   1b7b0:	d003      	beq.n	1b7ba <memmove+0x1a>
   1b7b2:	5cca      	ldrb	r2, [r1, r3]
   1b7b4:	54c2      	strb	r2, [r0, r3]
   1b7b6:	3b01      	subs	r3, #1
   1b7b8:	d2fb      	bcs.n	1b7b2 <memmove+0x12>
   1b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7bc:	0005      	movs	r5, r0
   1b7be:	2a0f      	cmp	r2, #15
   1b7c0:	d808      	bhi.n	1b7d4 <memmove+0x34>
   1b7c2:	2a00      	cmp	r2, #0
   1b7c4:	d0f9      	beq.n	1b7ba <memmove+0x1a>
   1b7c6:	2300      	movs	r3, #0
   1b7c8:	5ccc      	ldrb	r4, [r1, r3]
   1b7ca:	54ec      	strb	r4, [r5, r3]
   1b7cc:	3301      	adds	r3, #1
   1b7ce:	4293      	cmp	r3, r2
   1b7d0:	d1fa      	bne.n	1b7c8 <memmove+0x28>
   1b7d2:	e7f2      	b.n	1b7ba <memmove+0x1a>
   1b7d4:	000b      	movs	r3, r1
   1b7d6:	4303      	orrs	r3, r0
   1b7d8:	079b      	lsls	r3, r3, #30
   1b7da:	d12d      	bne.n	1b838 <memmove+0x98>
   1b7dc:	0015      	movs	r5, r2
   1b7de:	000c      	movs	r4, r1
   1b7e0:	0003      	movs	r3, r0
   1b7e2:	3d10      	subs	r5, #16
   1b7e4:	092f      	lsrs	r7, r5, #4
   1b7e6:	3701      	adds	r7, #1
   1b7e8:	013f      	lsls	r7, r7, #4
   1b7ea:	19c7      	adds	r7, r0, r7
   1b7ec:	6826      	ldr	r6, [r4, #0]
   1b7ee:	601e      	str	r6, [r3, #0]
   1b7f0:	6866      	ldr	r6, [r4, #4]
   1b7f2:	605e      	str	r6, [r3, #4]
   1b7f4:	68a6      	ldr	r6, [r4, #8]
   1b7f6:	609e      	str	r6, [r3, #8]
   1b7f8:	68e6      	ldr	r6, [r4, #12]
   1b7fa:	3410      	adds	r4, #16
   1b7fc:	60de      	str	r6, [r3, #12]
   1b7fe:	3310      	adds	r3, #16
   1b800:	429f      	cmp	r7, r3
   1b802:	d1f3      	bne.n	1b7ec <memmove+0x4c>
   1b804:	240f      	movs	r4, #15
   1b806:	43a5      	bics	r5, r4
   1b808:	3510      	adds	r5, #16
   1b80a:	1949      	adds	r1, r1, r5
   1b80c:	4014      	ands	r4, r2
   1b80e:	1945      	adds	r5, r0, r5
   1b810:	2c03      	cmp	r4, #3
   1b812:	d913      	bls.n	1b83c <memmove+0x9c>
   1b814:	2300      	movs	r3, #0
   1b816:	1f27      	subs	r7, r4, #4
   1b818:	08be      	lsrs	r6, r7, #2
   1b81a:	3601      	adds	r6, #1
   1b81c:	00b6      	lsls	r6, r6, #2
   1b81e:	58cc      	ldr	r4, [r1, r3]
   1b820:	50ec      	str	r4, [r5, r3]
   1b822:	3304      	adds	r3, #4
   1b824:	42b3      	cmp	r3, r6
   1b826:	d1fa      	bne.n	1b81e <memmove+0x7e>
   1b828:	2603      	movs	r6, #3
   1b82a:	43b7      	bics	r7, r6
   1b82c:	1d3c      	adds	r4, r7, #4
   1b82e:	1909      	adds	r1, r1, r4
   1b830:	192d      	adds	r5, r5, r4
   1b832:	4032      	ands	r2, r6
   1b834:	d1c7      	bne.n	1b7c6 <memmove+0x26>
   1b836:	e7c0      	b.n	1b7ba <memmove+0x1a>
   1b838:	0005      	movs	r5, r0
   1b83a:	e7c4      	b.n	1b7c6 <memmove+0x26>
   1b83c:	0022      	movs	r2, r4
   1b83e:	e7c0      	b.n	1b7c2 <memmove+0x22>

0001b840 <__malloc_lock>:
   1b840:	b510      	push	{r4, lr}
   1b842:	4802      	ldr	r0, [pc, #8]	; (1b84c <__malloc_lock+0xc>)
   1b844:	f7ff fc32 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1b848:	bd10      	pop	{r4, pc}
   1b84a:	46c0      	nop			; (mov r8, r8)
   1b84c:	20002e2c 	.word	0x20002e2c

0001b850 <__malloc_unlock>:
   1b850:	b510      	push	{r4, lr}
   1b852:	4802      	ldr	r0, [pc, #8]	; (1b85c <__malloc_unlock+0xc>)
   1b854:	f7ff fc2c 	bl	1b0b0 <__retarget_lock_release_recursive>
   1b858:	bd10      	pop	{r4, pc}
   1b85a:	46c0      	nop			; (mov r8, r8)
   1b85c:	20002e2c 	.word	0x20002e2c

0001b860 <_Balloc>:
   1b860:	b570      	push	{r4, r5, r6, lr}
   1b862:	0004      	movs	r4, r0
   1b864:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1b866:	000d      	movs	r5, r1
   1b868:	2800      	cmp	r0, #0
   1b86a:	d00a      	beq.n	1b882 <_Balloc+0x22>
   1b86c:	00ab      	lsls	r3, r5, #2
   1b86e:	18c3      	adds	r3, r0, r3
   1b870:	6818      	ldr	r0, [r3, #0]
   1b872:	2800      	cmp	r0, #0
   1b874:	d00f      	beq.n	1b896 <_Balloc+0x36>
   1b876:	6802      	ldr	r2, [r0, #0]
   1b878:	601a      	str	r2, [r3, #0]
   1b87a:	2300      	movs	r3, #0
   1b87c:	6103      	str	r3, [r0, #16]
   1b87e:	60c3      	str	r3, [r0, #12]
   1b880:	bd70      	pop	{r4, r5, r6, pc}
   1b882:	2221      	movs	r2, #33	; 0x21
   1b884:	2104      	movs	r1, #4
   1b886:	0020      	movs	r0, r4
   1b888:	f000 fe2a 	bl	1c4e0 <_calloc_r>
   1b88c:	64e0      	str	r0, [r4, #76]	; 0x4c
   1b88e:	2800      	cmp	r0, #0
   1b890:	d1ec      	bne.n	1b86c <_Balloc+0xc>
   1b892:	2000      	movs	r0, #0
   1b894:	e7f4      	b.n	1b880 <_Balloc+0x20>
   1b896:	2601      	movs	r6, #1
   1b898:	40ae      	lsls	r6, r5
   1b89a:	1d72      	adds	r2, r6, #5
   1b89c:	0092      	lsls	r2, r2, #2
   1b89e:	2101      	movs	r1, #1
   1b8a0:	0020      	movs	r0, r4
   1b8a2:	f000 fe1d 	bl	1c4e0 <_calloc_r>
   1b8a6:	2800      	cmp	r0, #0
   1b8a8:	d0f3      	beq.n	1b892 <_Balloc+0x32>
   1b8aa:	6045      	str	r5, [r0, #4]
   1b8ac:	6086      	str	r6, [r0, #8]
   1b8ae:	e7e4      	b.n	1b87a <_Balloc+0x1a>

0001b8b0 <_Bfree>:
   1b8b0:	2900      	cmp	r1, #0
   1b8b2:	d006      	beq.n	1b8c2 <_Bfree+0x12>
   1b8b4:	684b      	ldr	r3, [r1, #4]
   1b8b6:	009a      	lsls	r2, r3, #2
   1b8b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1b8ba:	189b      	adds	r3, r3, r2
   1b8bc:	681a      	ldr	r2, [r3, #0]
   1b8be:	600a      	str	r2, [r1, #0]
   1b8c0:	6019      	str	r1, [r3, #0]
   1b8c2:	4770      	bx	lr

0001b8c4 <__multadd>:
   1b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8c6:	46ce      	mov	lr, r9
   1b8c8:	4647      	mov	r7, r8
   1b8ca:	4681      	mov	r9, r0
   1b8cc:	0008      	movs	r0, r1
   1b8ce:	b580      	push	{r7, lr}
   1b8d0:	000d      	movs	r5, r1
   1b8d2:	690c      	ldr	r4, [r1, #16]
   1b8d4:	001f      	movs	r7, r3
   1b8d6:	2100      	movs	r1, #0
   1b8d8:	3014      	adds	r0, #20
   1b8da:	6803      	ldr	r3, [r0, #0]
   1b8dc:	3101      	adds	r1, #1
   1b8de:	041e      	lsls	r6, r3, #16
   1b8e0:	0c36      	lsrs	r6, r6, #16
   1b8e2:	4356      	muls	r6, r2
   1b8e4:	0c1b      	lsrs	r3, r3, #16
   1b8e6:	4353      	muls	r3, r2
   1b8e8:	19f6      	adds	r6, r6, r7
   1b8ea:	0c37      	lsrs	r7, r6, #16
   1b8ec:	19db      	adds	r3, r3, r7
   1b8ee:	0436      	lsls	r6, r6, #16
   1b8f0:	0c1f      	lsrs	r7, r3, #16
   1b8f2:	0c36      	lsrs	r6, r6, #16
   1b8f4:	041b      	lsls	r3, r3, #16
   1b8f6:	199b      	adds	r3, r3, r6
   1b8f8:	c008      	stmia	r0!, {r3}
   1b8fa:	428c      	cmp	r4, r1
   1b8fc:	dced      	bgt.n	1b8da <__multadd+0x16>
   1b8fe:	2f00      	cmp	r7, #0
   1b900:	d008      	beq.n	1b914 <__multadd+0x50>
   1b902:	68ab      	ldr	r3, [r5, #8]
   1b904:	429c      	cmp	r4, r3
   1b906:	da0a      	bge.n	1b91e <__multadd+0x5a>
   1b908:	1d23      	adds	r3, r4, #4
   1b90a:	009b      	lsls	r3, r3, #2
   1b90c:	18eb      	adds	r3, r5, r3
   1b90e:	3401      	adds	r4, #1
   1b910:	605f      	str	r7, [r3, #4]
   1b912:	612c      	str	r4, [r5, #16]
   1b914:	0028      	movs	r0, r5
   1b916:	bc0c      	pop	{r2, r3}
   1b918:	4690      	mov	r8, r2
   1b91a:	4699      	mov	r9, r3
   1b91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b91e:	686b      	ldr	r3, [r5, #4]
   1b920:	4648      	mov	r0, r9
   1b922:	1c59      	adds	r1, r3, #1
   1b924:	f7ff ff9c 	bl	1b860 <_Balloc>
   1b928:	0029      	movs	r1, r5
   1b92a:	692b      	ldr	r3, [r5, #16]
   1b92c:	4680      	mov	r8, r0
   1b92e:	1c9a      	adds	r2, r3, #2
   1b930:	0092      	lsls	r2, r2, #2
   1b932:	310c      	adds	r1, #12
   1b934:	300c      	adds	r0, #12
   1b936:	f7fb feab 	bl	17690 <memcpy>
   1b93a:	686b      	ldr	r3, [r5, #4]
   1b93c:	009a      	lsls	r2, r3, #2
   1b93e:	464b      	mov	r3, r9
   1b940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b942:	189b      	adds	r3, r3, r2
   1b944:	681a      	ldr	r2, [r3, #0]
   1b946:	602a      	str	r2, [r5, #0]
   1b948:	601d      	str	r5, [r3, #0]
   1b94a:	4645      	mov	r5, r8
   1b94c:	e7dc      	b.n	1b908 <__multadd+0x44>
   1b94e:	46c0      	nop			; (mov r8, r8)

0001b950 <__hi0bits>:
   1b950:	0003      	movs	r3, r0
   1b952:	0c02      	lsrs	r2, r0, #16
   1b954:	2000      	movs	r0, #0
   1b956:	2a00      	cmp	r2, #0
   1b958:	d101      	bne.n	1b95e <__hi0bits+0xe>
   1b95a:	041b      	lsls	r3, r3, #16
   1b95c:	3010      	adds	r0, #16
   1b95e:	0e1a      	lsrs	r2, r3, #24
   1b960:	d101      	bne.n	1b966 <__hi0bits+0x16>
   1b962:	3008      	adds	r0, #8
   1b964:	021b      	lsls	r3, r3, #8
   1b966:	0f1a      	lsrs	r2, r3, #28
   1b968:	d101      	bne.n	1b96e <__hi0bits+0x1e>
   1b96a:	3004      	adds	r0, #4
   1b96c:	011b      	lsls	r3, r3, #4
   1b96e:	0f9a      	lsrs	r2, r3, #30
   1b970:	d101      	bne.n	1b976 <__hi0bits+0x26>
   1b972:	3002      	adds	r0, #2
   1b974:	009b      	lsls	r3, r3, #2
   1b976:	2b00      	cmp	r3, #0
   1b978:	db03      	blt.n	1b982 <__hi0bits+0x32>
   1b97a:	3001      	adds	r0, #1
   1b97c:	005b      	lsls	r3, r3, #1
   1b97e:	d400      	bmi.n	1b982 <__hi0bits+0x32>
   1b980:	2020      	movs	r0, #32
   1b982:	4770      	bx	lr

0001b984 <__lo0bits>:
   1b984:	6803      	ldr	r3, [r0, #0]
   1b986:	075a      	lsls	r2, r3, #29
   1b988:	d009      	beq.n	1b99e <__lo0bits+0x1a>
   1b98a:	2200      	movs	r2, #0
   1b98c:	07d9      	lsls	r1, r3, #31
   1b98e:	d404      	bmi.n	1b99a <__lo0bits+0x16>
   1b990:	079a      	lsls	r2, r3, #30
   1b992:	d420      	bmi.n	1b9d6 <__lo0bits+0x52>
   1b994:	2202      	movs	r2, #2
   1b996:	089b      	lsrs	r3, r3, #2
   1b998:	6003      	str	r3, [r0, #0]
   1b99a:	0010      	movs	r0, r2
   1b99c:	4770      	bx	lr
   1b99e:	0419      	lsls	r1, r3, #16
   1b9a0:	2200      	movs	r2, #0
   1b9a2:	2900      	cmp	r1, #0
   1b9a4:	d101      	bne.n	1b9aa <__lo0bits+0x26>
   1b9a6:	0c1b      	lsrs	r3, r3, #16
   1b9a8:	3210      	adds	r2, #16
   1b9aa:	21ff      	movs	r1, #255	; 0xff
   1b9ac:	4219      	tst	r1, r3
   1b9ae:	d101      	bne.n	1b9b4 <__lo0bits+0x30>
   1b9b0:	3208      	adds	r2, #8
   1b9b2:	0a1b      	lsrs	r3, r3, #8
   1b9b4:	0719      	lsls	r1, r3, #28
   1b9b6:	d101      	bne.n	1b9bc <__lo0bits+0x38>
   1b9b8:	3204      	adds	r2, #4
   1b9ba:	091b      	lsrs	r3, r3, #4
   1b9bc:	0799      	lsls	r1, r3, #30
   1b9be:	d101      	bne.n	1b9c4 <__lo0bits+0x40>
   1b9c0:	3202      	adds	r2, #2
   1b9c2:	089b      	lsrs	r3, r3, #2
   1b9c4:	07d9      	lsls	r1, r3, #31
   1b9c6:	d404      	bmi.n	1b9d2 <__lo0bits+0x4e>
   1b9c8:	085b      	lsrs	r3, r3, #1
   1b9ca:	d101      	bne.n	1b9d0 <__lo0bits+0x4c>
   1b9cc:	2220      	movs	r2, #32
   1b9ce:	e7e4      	b.n	1b99a <__lo0bits+0x16>
   1b9d0:	3201      	adds	r2, #1
   1b9d2:	6003      	str	r3, [r0, #0]
   1b9d4:	e7e1      	b.n	1b99a <__lo0bits+0x16>
   1b9d6:	085b      	lsrs	r3, r3, #1
   1b9d8:	6003      	str	r3, [r0, #0]
   1b9da:	2201      	movs	r2, #1
   1b9dc:	e7dd      	b.n	1b99a <__lo0bits+0x16>
   1b9de:	46c0      	nop			; (mov r8, r8)

0001b9e0 <__i2b>:
   1b9e0:	b510      	push	{r4, lr}
   1b9e2:	000c      	movs	r4, r1
   1b9e4:	2101      	movs	r1, #1
   1b9e6:	f7ff ff3b 	bl	1b860 <_Balloc>
   1b9ea:	2301      	movs	r3, #1
   1b9ec:	6144      	str	r4, [r0, #20]
   1b9ee:	6103      	str	r3, [r0, #16]
   1b9f0:	bd10      	pop	{r4, pc}
   1b9f2:	46c0      	nop			; (mov r8, r8)

0001b9f4 <__multiply>:
   1b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9f6:	4657      	mov	r7, sl
   1b9f8:	464e      	mov	r6, r9
   1b9fa:	4645      	mov	r5, r8
   1b9fc:	46de      	mov	lr, fp
   1b9fe:	b5e0      	push	{r5, r6, r7, lr}
   1ba00:	6914      	ldr	r4, [r2, #16]
   1ba02:	690e      	ldr	r6, [r1, #16]
   1ba04:	b085      	sub	sp, #20
   1ba06:	000f      	movs	r7, r1
   1ba08:	0015      	movs	r5, r2
   1ba0a:	42a6      	cmp	r6, r4
   1ba0c:	da04      	bge.n	1ba18 <__multiply+0x24>
   1ba0e:	0033      	movs	r3, r6
   1ba10:	0017      	movs	r7, r2
   1ba12:	0026      	movs	r6, r4
   1ba14:	000d      	movs	r5, r1
   1ba16:	001c      	movs	r4, r3
   1ba18:	1933      	adds	r3, r6, r4
   1ba1a:	4698      	mov	r8, r3
   1ba1c:	68bb      	ldr	r3, [r7, #8]
   1ba1e:	6879      	ldr	r1, [r7, #4]
   1ba20:	4598      	cmp	r8, r3
   1ba22:	dd00      	ble.n	1ba26 <__multiply+0x32>
   1ba24:	3101      	adds	r1, #1
   1ba26:	f7ff ff1b 	bl	1b860 <_Balloc>
   1ba2a:	2214      	movs	r2, #20
   1ba2c:	0003      	movs	r3, r0
   1ba2e:	4694      	mov	ip, r2
   1ba30:	4463      	add	r3, ip
   1ba32:	469b      	mov	fp, r3
   1ba34:	4643      	mov	r3, r8
   1ba36:	009b      	lsls	r3, r3, #2
   1ba38:	445b      	add	r3, fp
   1ba3a:	0019      	movs	r1, r3
   1ba3c:	9302      	str	r3, [sp, #8]
   1ba3e:	9003      	str	r0, [sp, #12]
   1ba40:	465b      	mov	r3, fp
   1ba42:	2200      	movs	r2, #0
   1ba44:	458b      	cmp	fp, r1
   1ba46:	d203      	bcs.n	1ba50 <__multiply+0x5c>
   1ba48:	9902      	ldr	r1, [sp, #8]
   1ba4a:	c304      	stmia	r3!, {r2}
   1ba4c:	4299      	cmp	r1, r3
   1ba4e:	d8fc      	bhi.n	1ba4a <__multiply+0x56>
   1ba50:	2314      	movs	r3, #20
   1ba52:	00a4      	lsls	r4, r4, #2
   1ba54:	469a      	mov	sl, r3
   1ba56:	3714      	adds	r7, #20
   1ba58:	0023      	movs	r3, r4
   1ba5a:	46bc      	mov	ip, r7
   1ba5c:	44aa      	add	sl, r5
   1ba5e:	00b6      	lsls	r6, r6, #2
   1ba60:	4453      	add	r3, sl
   1ba62:	9700      	str	r7, [sp, #0]
   1ba64:	44b4      	add	ip, r6
   1ba66:	9301      	str	r3, [sp, #4]
   1ba68:	459a      	cmp	sl, r3
   1ba6a:	d24f      	bcs.n	1bb0c <__multiply+0x118>
   1ba6c:	4653      	mov	r3, sl
   1ba6e:	681b      	ldr	r3, [r3, #0]
   1ba70:	041e      	lsls	r6, r3, #16
   1ba72:	0c36      	lsrs	r6, r6, #16
   1ba74:	d020      	beq.n	1bab8 <__multiply+0xc4>
   1ba76:	465c      	mov	r4, fp
   1ba78:	2700      	movs	r7, #0
   1ba7a:	9d00      	ldr	r5, [sp, #0]
   1ba7c:	0021      	movs	r1, r4
   1ba7e:	cc08      	ldmia	r4!, {r3}
   1ba80:	cd04      	ldmia	r5!, {r2}
   1ba82:	4699      	mov	r9, r3
   1ba84:	4648      	mov	r0, r9
   1ba86:	0413      	lsls	r3, r2, #16
   1ba88:	0c1b      	lsrs	r3, r3, #16
   1ba8a:	4373      	muls	r3, r6
   1ba8c:	0400      	lsls	r0, r0, #16
   1ba8e:	0c00      	lsrs	r0, r0, #16
   1ba90:	181b      	adds	r3, r3, r0
   1ba92:	19d8      	adds	r0, r3, r7
   1ba94:	0c13      	lsrs	r3, r2, #16
   1ba96:	464a      	mov	r2, r9
   1ba98:	4373      	muls	r3, r6
   1ba9a:	0c12      	lsrs	r2, r2, #16
   1ba9c:	189b      	adds	r3, r3, r2
   1ba9e:	0c02      	lsrs	r2, r0, #16
   1baa0:	189b      	adds	r3, r3, r2
   1baa2:	0402      	lsls	r2, r0, #16
   1baa4:	0c1f      	lsrs	r7, r3, #16
   1baa6:	0c12      	lsrs	r2, r2, #16
   1baa8:	041b      	lsls	r3, r3, #16
   1baaa:	4313      	orrs	r3, r2
   1baac:	600b      	str	r3, [r1, #0]
   1baae:	45ac      	cmp	ip, r5
   1bab0:	d8e4      	bhi.n	1ba7c <__multiply+0x88>
   1bab2:	4653      	mov	r3, sl
   1bab4:	6027      	str	r7, [r4, #0]
   1bab6:	681b      	ldr	r3, [r3, #0]
   1bab8:	0c1e      	lsrs	r6, r3, #16
   1baba:	d020      	beq.n	1bafe <__multiply+0x10a>
   1babc:	465b      	mov	r3, fp
   1babe:	2100      	movs	r1, #0
   1bac0:	681b      	ldr	r3, [r3, #0]
   1bac2:	465c      	mov	r4, fp
   1bac4:	0018      	movs	r0, r3
   1bac6:	000f      	movs	r7, r1
   1bac8:	4662      	mov	r2, ip
   1baca:	9d00      	ldr	r5, [sp, #0]
   1bacc:	8829      	ldrh	r1, [r5, #0]
   1bace:	0c00      	lsrs	r0, r0, #16
   1bad0:	4371      	muls	r1, r6
   1bad2:	1809      	adds	r1, r1, r0
   1bad4:	19c9      	adds	r1, r1, r7
   1bad6:	041b      	lsls	r3, r3, #16
   1bad8:	0408      	lsls	r0, r1, #16
   1bada:	0c1b      	lsrs	r3, r3, #16
   1badc:	4303      	orrs	r3, r0
   1bade:	6023      	str	r3, [r4, #0]
   1bae0:	cd08      	ldmia	r5!, {r3}
   1bae2:	6860      	ldr	r0, [r4, #4]
   1bae4:	0c1b      	lsrs	r3, r3, #16
   1bae6:	4373      	muls	r3, r6
   1bae8:	0407      	lsls	r7, r0, #16
   1baea:	0c3f      	lsrs	r7, r7, #16
   1baec:	19db      	adds	r3, r3, r7
   1baee:	0c09      	lsrs	r1, r1, #16
   1baf0:	185b      	adds	r3, r3, r1
   1baf2:	0c1f      	lsrs	r7, r3, #16
   1baf4:	3404      	adds	r4, #4
   1baf6:	42aa      	cmp	r2, r5
   1baf8:	d8e8      	bhi.n	1bacc <__multiply+0xd8>
   1bafa:	4694      	mov	ip, r2
   1bafc:	6023      	str	r3, [r4, #0]
   1bafe:	2304      	movs	r3, #4
   1bb00:	4699      	mov	r9, r3
   1bb02:	9b01      	ldr	r3, [sp, #4]
   1bb04:	44ca      	add	sl, r9
   1bb06:	44cb      	add	fp, r9
   1bb08:	4553      	cmp	r3, sl
   1bb0a:	d8af      	bhi.n	1ba6c <__multiply+0x78>
   1bb0c:	4643      	mov	r3, r8
   1bb0e:	2b00      	cmp	r3, #0
   1bb10:	dd0e      	ble.n	1bb30 <__multiply+0x13c>
   1bb12:	9b02      	ldr	r3, [sp, #8]
   1bb14:	3b04      	subs	r3, #4
   1bb16:	681a      	ldr	r2, [r3, #0]
   1bb18:	2a00      	cmp	r2, #0
   1bb1a:	d109      	bne.n	1bb30 <__multiply+0x13c>
   1bb1c:	4642      	mov	r2, r8
   1bb1e:	e003      	b.n	1bb28 <__multiply+0x134>
   1bb20:	3b04      	subs	r3, #4
   1bb22:	6819      	ldr	r1, [r3, #0]
   1bb24:	2900      	cmp	r1, #0
   1bb26:	d102      	bne.n	1bb2e <__multiply+0x13a>
   1bb28:	3a01      	subs	r2, #1
   1bb2a:	2a00      	cmp	r2, #0
   1bb2c:	d1f8      	bne.n	1bb20 <__multiply+0x12c>
   1bb2e:	4690      	mov	r8, r2
   1bb30:	9b03      	ldr	r3, [sp, #12]
   1bb32:	4642      	mov	r2, r8
   1bb34:	0018      	movs	r0, r3
   1bb36:	611a      	str	r2, [r3, #16]
   1bb38:	b005      	add	sp, #20
   1bb3a:	bc3c      	pop	{r2, r3, r4, r5}
   1bb3c:	4690      	mov	r8, r2
   1bb3e:	4699      	mov	r9, r3
   1bb40:	46a2      	mov	sl, r4
   1bb42:	46ab      	mov	fp, r5
   1bb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb46:	46c0      	nop			; (mov r8, r8)

0001bb48 <__pow5mult>:
   1bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb4a:	4647      	mov	r7, r8
   1bb4c:	46ce      	mov	lr, r9
   1bb4e:	2303      	movs	r3, #3
   1bb50:	b580      	push	{r7, lr}
   1bb52:	4680      	mov	r8, r0
   1bb54:	000f      	movs	r7, r1
   1bb56:	0014      	movs	r4, r2
   1bb58:	4013      	ands	r3, r2
   1bb5a:	d13a      	bne.n	1bbd2 <__pow5mult+0x8a>
   1bb5c:	10a4      	asrs	r4, r4, #2
   1bb5e:	003e      	movs	r6, r7
   1bb60:	2c00      	cmp	r4, #0
   1bb62:	d025      	beq.n	1bbb0 <__pow5mult+0x68>
   1bb64:	4643      	mov	r3, r8
   1bb66:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1bb68:	2d00      	cmp	r5, #0
   1bb6a:	d03b      	beq.n	1bbe4 <__pow5mult+0x9c>
   1bb6c:	003e      	movs	r6, r7
   1bb6e:	2300      	movs	r3, #0
   1bb70:	2701      	movs	r7, #1
   1bb72:	4699      	mov	r9, r3
   1bb74:	4227      	tst	r7, r4
   1bb76:	d107      	bne.n	1bb88 <__pow5mult+0x40>
   1bb78:	1064      	asrs	r4, r4, #1
   1bb7a:	d019      	beq.n	1bbb0 <__pow5mult+0x68>
   1bb7c:	6828      	ldr	r0, [r5, #0]
   1bb7e:	2800      	cmp	r0, #0
   1bb80:	d01b      	beq.n	1bbba <__pow5mult+0x72>
   1bb82:	0005      	movs	r5, r0
   1bb84:	4227      	tst	r7, r4
   1bb86:	d0f7      	beq.n	1bb78 <__pow5mult+0x30>
   1bb88:	002a      	movs	r2, r5
   1bb8a:	0031      	movs	r1, r6
   1bb8c:	4640      	mov	r0, r8
   1bb8e:	f7ff ff31 	bl	1b9f4 <__multiply>
   1bb92:	2e00      	cmp	r6, #0
   1bb94:	d01b      	beq.n	1bbce <__pow5mult+0x86>
   1bb96:	4642      	mov	r2, r8
   1bb98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1bb9a:	6873      	ldr	r3, [r6, #4]
   1bb9c:	4694      	mov	ip, r2
   1bb9e:	009b      	lsls	r3, r3, #2
   1bba0:	4463      	add	r3, ip
   1bba2:	681a      	ldr	r2, [r3, #0]
   1bba4:	1064      	asrs	r4, r4, #1
   1bba6:	6032      	str	r2, [r6, #0]
   1bba8:	601e      	str	r6, [r3, #0]
   1bbaa:	0006      	movs	r6, r0
   1bbac:	2c00      	cmp	r4, #0
   1bbae:	d1e5      	bne.n	1bb7c <__pow5mult+0x34>
   1bbb0:	0030      	movs	r0, r6
   1bbb2:	bc0c      	pop	{r2, r3}
   1bbb4:	4690      	mov	r8, r2
   1bbb6:	4699      	mov	r9, r3
   1bbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbba:	002a      	movs	r2, r5
   1bbbc:	0029      	movs	r1, r5
   1bbbe:	4640      	mov	r0, r8
   1bbc0:	f7ff ff18 	bl	1b9f4 <__multiply>
   1bbc4:	464b      	mov	r3, r9
   1bbc6:	6028      	str	r0, [r5, #0]
   1bbc8:	6003      	str	r3, [r0, #0]
   1bbca:	0005      	movs	r5, r0
   1bbcc:	e7da      	b.n	1bb84 <__pow5mult+0x3c>
   1bbce:	0006      	movs	r6, r0
   1bbd0:	e7d2      	b.n	1bb78 <__pow5mult+0x30>
   1bbd2:	4a0b      	ldr	r2, [pc, #44]	; (1bc00 <__pow5mult+0xb8>)
   1bbd4:	3b01      	subs	r3, #1
   1bbd6:	009b      	lsls	r3, r3, #2
   1bbd8:	589a      	ldr	r2, [r3, r2]
   1bbda:	2300      	movs	r3, #0
   1bbdc:	f7ff fe72 	bl	1b8c4 <__multadd>
   1bbe0:	0007      	movs	r7, r0
   1bbe2:	e7bb      	b.n	1bb5c <__pow5mult+0x14>
   1bbe4:	2101      	movs	r1, #1
   1bbe6:	4640      	mov	r0, r8
   1bbe8:	f7ff fe3a 	bl	1b860 <_Balloc>
   1bbec:	4b05      	ldr	r3, [pc, #20]	; (1bc04 <__pow5mult+0xbc>)
   1bbee:	0005      	movs	r5, r0
   1bbf0:	6143      	str	r3, [r0, #20]
   1bbf2:	2301      	movs	r3, #1
   1bbf4:	6103      	str	r3, [r0, #16]
   1bbf6:	4643      	mov	r3, r8
   1bbf8:	6498      	str	r0, [r3, #72]	; 0x48
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	6003      	str	r3, [r0, #0]
   1bbfe:	e7b5      	b.n	1bb6c <__pow5mult+0x24>
   1bc00:	0001e620 	.word	0x0001e620
   1bc04:	00000271 	.word	0x00000271

0001bc08 <__lshift>:
   1bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc0a:	464e      	mov	r6, r9
   1bc0c:	4645      	mov	r5, r8
   1bc0e:	46de      	mov	lr, fp
   1bc10:	4657      	mov	r7, sl
   1bc12:	b5e0      	push	{r5, r6, r7, lr}
   1bc14:	000e      	movs	r6, r1
   1bc16:	6933      	ldr	r3, [r6, #16]
   1bc18:	1154      	asrs	r4, r2, #5
   1bc1a:	4698      	mov	r8, r3
   1bc1c:	44a0      	add	r8, r4
   1bc1e:	4643      	mov	r3, r8
   1bc20:	1c5d      	adds	r5, r3, #1
   1bc22:	68b3      	ldr	r3, [r6, #8]
   1bc24:	4683      	mov	fp, r0
   1bc26:	4691      	mov	r9, r2
   1bc28:	6849      	ldr	r1, [r1, #4]
   1bc2a:	429d      	cmp	r5, r3
   1bc2c:	dd03      	ble.n	1bc36 <__lshift+0x2e>
   1bc2e:	3101      	adds	r1, #1
   1bc30:	005b      	lsls	r3, r3, #1
   1bc32:	429d      	cmp	r5, r3
   1bc34:	dcfb      	bgt.n	1bc2e <__lshift+0x26>
   1bc36:	4658      	mov	r0, fp
   1bc38:	f7ff fe12 	bl	1b860 <_Balloc>
   1bc3c:	0003      	movs	r3, r0
   1bc3e:	4684      	mov	ip, r0
   1bc40:	3314      	adds	r3, #20
   1bc42:	2c00      	cmp	r4, #0
   1bc44:	dd06      	ble.n	1bc54 <__lshift+0x4c>
   1bc46:	2100      	movs	r1, #0
   1bc48:	00a4      	lsls	r4, r4, #2
   1bc4a:	001a      	movs	r2, r3
   1bc4c:	191b      	adds	r3, r3, r4
   1bc4e:	c202      	stmia	r2!, {r1}
   1bc50:	4293      	cmp	r3, r2
   1bc52:	d1fc      	bne.n	1bc4e <__lshift+0x46>
   1bc54:	6932      	ldr	r2, [r6, #16]
   1bc56:	4648      	mov	r0, r9
   1bc58:	0097      	lsls	r7, r2, #2
   1bc5a:	0031      	movs	r1, r6
   1bc5c:	221f      	movs	r2, #31
   1bc5e:	3114      	adds	r1, #20
   1bc60:	4010      	ands	r0, r2
   1bc62:	19cf      	adds	r7, r1, r7
   1bc64:	4681      	mov	r9, r0
   1bc66:	2800      	cmp	r0, #0
   1bc68:	d025      	beq.n	1bcb6 <__lshift+0xae>
   1bc6a:	2220      	movs	r2, #32
   1bc6c:	1a12      	subs	r2, r2, r0
   1bc6e:	4692      	mov	sl, r2
   1bc70:	2200      	movs	r2, #0
   1bc72:	4648      	mov	r0, r9
   1bc74:	680c      	ldr	r4, [r1, #0]
   1bc76:	4084      	lsls	r4, r0
   1bc78:	4650      	mov	r0, sl
   1bc7a:	4314      	orrs	r4, r2
   1bc7c:	601c      	str	r4, [r3, #0]
   1bc7e:	c904      	ldmia	r1!, {r2}
   1bc80:	3304      	adds	r3, #4
   1bc82:	40c2      	lsrs	r2, r0
   1bc84:	428f      	cmp	r7, r1
   1bc86:	d8f4      	bhi.n	1bc72 <__lshift+0x6a>
   1bc88:	601a      	str	r2, [r3, #0]
   1bc8a:	2a00      	cmp	r2, #0
   1bc8c:	d001      	beq.n	1bc92 <__lshift+0x8a>
   1bc8e:	4645      	mov	r5, r8
   1bc90:	3502      	adds	r5, #2
   1bc92:	4663      	mov	r3, ip
   1bc94:	3d01      	subs	r5, #1
   1bc96:	611d      	str	r5, [r3, #16]
   1bc98:	6873      	ldr	r3, [r6, #4]
   1bc9a:	4660      	mov	r0, ip
   1bc9c:	009a      	lsls	r2, r3, #2
   1bc9e:	465b      	mov	r3, fp
   1bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1bca2:	189b      	adds	r3, r3, r2
   1bca4:	681a      	ldr	r2, [r3, #0]
   1bca6:	6032      	str	r2, [r6, #0]
   1bca8:	601e      	str	r6, [r3, #0]
   1bcaa:	bc3c      	pop	{r2, r3, r4, r5}
   1bcac:	4690      	mov	r8, r2
   1bcae:	4699      	mov	r9, r3
   1bcb0:	46a2      	mov	sl, r4
   1bcb2:	46ab      	mov	fp, r5
   1bcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcb6:	c904      	ldmia	r1!, {r2}
   1bcb8:	c304      	stmia	r3!, {r2}
   1bcba:	428f      	cmp	r7, r1
   1bcbc:	d9e9      	bls.n	1bc92 <__lshift+0x8a>
   1bcbe:	c904      	ldmia	r1!, {r2}
   1bcc0:	c304      	stmia	r3!, {r2}
   1bcc2:	428f      	cmp	r7, r1
   1bcc4:	d8f7      	bhi.n	1bcb6 <__lshift+0xae>
   1bcc6:	e7e4      	b.n	1bc92 <__lshift+0x8a>

0001bcc8 <__mcmp>:
   1bcc8:	690a      	ldr	r2, [r1, #16]
   1bcca:	6903      	ldr	r3, [r0, #16]
   1bccc:	b530      	push	{r4, r5, lr}
   1bcce:	0005      	movs	r5, r0
   1bcd0:	1a98      	subs	r0, r3, r2
   1bcd2:	d111      	bne.n	1bcf8 <__mcmp+0x30>
   1bcd4:	0092      	lsls	r2, r2, #2
   1bcd6:	3514      	adds	r5, #20
   1bcd8:	3114      	adds	r1, #20
   1bcda:	18ab      	adds	r3, r5, r2
   1bcdc:	1889      	adds	r1, r1, r2
   1bcde:	e001      	b.n	1bce4 <__mcmp+0x1c>
   1bce0:	429d      	cmp	r5, r3
   1bce2:	d209      	bcs.n	1bcf8 <__mcmp+0x30>
   1bce4:	3b04      	subs	r3, #4
   1bce6:	3904      	subs	r1, #4
   1bce8:	681c      	ldr	r4, [r3, #0]
   1bcea:	680a      	ldr	r2, [r1, #0]
   1bcec:	4294      	cmp	r4, r2
   1bcee:	d0f7      	beq.n	1bce0 <__mcmp+0x18>
   1bcf0:	4294      	cmp	r4, r2
   1bcf2:	4180      	sbcs	r0, r0
   1bcf4:	2201      	movs	r2, #1
   1bcf6:	4310      	orrs	r0, r2
   1bcf8:	bd30      	pop	{r4, r5, pc}
   1bcfa:	46c0      	nop			; (mov r8, r8)

0001bcfc <__mdiff>:
   1bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcfe:	4645      	mov	r5, r8
   1bd00:	46de      	mov	lr, fp
   1bd02:	4657      	mov	r7, sl
   1bd04:	464e      	mov	r6, r9
   1bd06:	0014      	movs	r4, r2
   1bd08:	690b      	ldr	r3, [r1, #16]
   1bd0a:	6912      	ldr	r2, [r2, #16]
   1bd0c:	b5e0      	push	{r5, r6, r7, lr}
   1bd0e:	4688      	mov	r8, r1
   1bd10:	1a9d      	subs	r5, r3, r2
   1bd12:	d11a      	bne.n	1bd4a <__mdiff+0x4e>
   1bd14:	000f      	movs	r7, r1
   1bd16:	2114      	movs	r1, #20
   1bd18:	468c      	mov	ip, r1
   1bd1a:	0092      	lsls	r2, r2, #2
   1bd1c:	3714      	adds	r7, #20
   1bd1e:	44a4      	add	ip, r4
   1bd20:	18bb      	adds	r3, r7, r2
   1bd22:	4462      	add	r2, ip
   1bd24:	e002      	b.n	1bd2c <__mdiff+0x30>
   1bd26:	429f      	cmp	r7, r3
   1bd28:	d300      	bcc.n	1bd2c <__mdiff+0x30>
   1bd2a:	e070      	b.n	1be0e <__mdiff+0x112>
   1bd2c:	3b04      	subs	r3, #4
   1bd2e:	3a04      	subs	r2, #4
   1bd30:	681e      	ldr	r6, [r3, #0]
   1bd32:	6811      	ldr	r1, [r2, #0]
   1bd34:	428e      	cmp	r6, r1
   1bd36:	d0f6      	beq.n	1bd26 <__mdiff+0x2a>
   1bd38:	d300      	bcc.n	1bd3c <__mdiff+0x40>
   1bd3a:	e071      	b.n	1be20 <__mdiff+0x124>
   1bd3c:	4643      	mov	r3, r8
   1bd3e:	003e      	movs	r6, r7
   1bd40:	46a0      	mov	r8, r4
   1bd42:	4667      	mov	r7, ip
   1bd44:	001c      	movs	r4, r3
   1bd46:	2501      	movs	r5, #1
   1bd48:	e006      	b.n	1bd58 <__mdiff+0x5c>
   1bd4a:	2d00      	cmp	r5, #0
   1bd4c:	db6a      	blt.n	1be24 <__mdiff+0x128>
   1bd4e:	4647      	mov	r7, r8
   1bd50:	0026      	movs	r6, r4
   1bd52:	2500      	movs	r5, #0
   1bd54:	3714      	adds	r7, #20
   1bd56:	3614      	adds	r6, #20
   1bd58:	4643      	mov	r3, r8
   1bd5a:	6859      	ldr	r1, [r3, #4]
   1bd5c:	f7ff fd80 	bl	1b860 <_Balloc>
   1bd60:	4643      	mov	r3, r8
   1bd62:	4681      	mov	r9, r0
   1bd64:	60c5      	str	r5, [r0, #12]
   1bd66:	6918      	ldr	r0, [r3, #16]
   1bd68:	464d      	mov	r5, r9
   1bd6a:	0083      	lsls	r3, r0, #2
   1bd6c:	469c      	mov	ip, r3
   1bd6e:	6923      	ldr	r3, [r4, #16]
   1bd70:	44bc      	add	ip, r7
   1bd72:	009b      	lsls	r3, r3, #2
   1bd74:	4698      	mov	r8, r3
   1bd76:	2300      	movs	r3, #0
   1bd78:	44b0      	add	r8, r6
   1bd7a:	3514      	adds	r5, #20
   1bd7c:	469a      	mov	sl, r3
   1bd7e:	e000      	b.n	1bd82 <__mdiff+0x86>
   1bd80:	0027      	movs	r7, r4
   1bd82:	ce04      	ldmia	r6!, {r2}
   1bd84:	003c      	movs	r4, r7
   1bd86:	4693      	mov	fp, r2
   1bd88:	4659      	mov	r1, fp
   1bd8a:	cc08      	ldmia	r4!, {r3}
   1bd8c:	0409      	lsls	r1, r1, #16
   1bd8e:	041a      	lsls	r2, r3, #16
   1bd90:	0c12      	lsrs	r2, r2, #16
   1bd92:	4452      	add	r2, sl
   1bd94:	0c09      	lsrs	r1, r1, #16
   1bd96:	1a52      	subs	r2, r2, r1
   1bd98:	0c19      	lsrs	r1, r3, #16
   1bd9a:	465b      	mov	r3, fp
   1bd9c:	0c1b      	lsrs	r3, r3, #16
   1bd9e:	1acb      	subs	r3, r1, r3
   1bda0:	1411      	asrs	r1, r2, #16
   1bda2:	185b      	adds	r3, r3, r1
   1bda4:	0412      	lsls	r2, r2, #16
   1bda6:	1419      	asrs	r1, r3, #16
   1bda8:	0c12      	lsrs	r2, r2, #16
   1bdaa:	041b      	lsls	r3, r3, #16
   1bdac:	468a      	mov	sl, r1
   1bdae:	4313      	orrs	r3, r2
   1bdb0:	1d29      	adds	r1, r5, #4
   1bdb2:	602b      	str	r3, [r5, #0]
   1bdb4:	000d      	movs	r5, r1
   1bdb6:	45b0      	cmp	r8, r6
   1bdb8:	d8e2      	bhi.n	1bd80 <__mdiff+0x84>
   1bdba:	45a4      	cmp	ip, r4
   1bdbc:	d916      	bls.n	1bdec <__mdiff+0xf0>
   1bdbe:	cc08      	ldmia	r4!, {r3}
   1bdc0:	041a      	lsls	r2, r3, #16
   1bdc2:	0c12      	lsrs	r2, r2, #16
   1bdc4:	4452      	add	r2, sl
   1bdc6:	1416      	asrs	r6, r2, #16
   1bdc8:	0c1b      	lsrs	r3, r3, #16
   1bdca:	199b      	adds	r3, r3, r6
   1bdcc:	0412      	lsls	r2, r2, #16
   1bdce:	141e      	asrs	r6, r3, #16
   1bdd0:	0c12      	lsrs	r2, r2, #16
   1bdd2:	041b      	lsls	r3, r3, #16
   1bdd4:	4313      	orrs	r3, r2
   1bdd6:	46b2      	mov	sl, r6
   1bdd8:	c508      	stmia	r5!, {r3}
   1bdda:	45a4      	cmp	ip, r4
   1bddc:	d8ef      	bhi.n	1bdbe <__mdiff+0xc2>
   1bdde:	4662      	mov	r2, ip
   1bde0:	2403      	movs	r4, #3
   1bde2:	1bd2      	subs	r2, r2, r7
   1bde4:	3a05      	subs	r2, #5
   1bde6:	43a2      	bics	r2, r4
   1bde8:	3204      	adds	r2, #4
   1bdea:	1889      	adds	r1, r1, r2
   1bdec:	3904      	subs	r1, #4
   1bdee:	2b00      	cmp	r3, #0
   1bdf0:	d104      	bne.n	1bdfc <__mdiff+0x100>
   1bdf2:	3904      	subs	r1, #4
   1bdf4:	680b      	ldr	r3, [r1, #0]
   1bdf6:	3801      	subs	r0, #1
   1bdf8:	2b00      	cmp	r3, #0
   1bdfa:	d0fa      	beq.n	1bdf2 <__mdiff+0xf6>
   1bdfc:	464b      	mov	r3, r9
   1bdfe:	6118      	str	r0, [r3, #16]
   1be00:	4648      	mov	r0, r9
   1be02:	bc3c      	pop	{r2, r3, r4, r5}
   1be04:	4690      	mov	r8, r2
   1be06:	4699      	mov	r9, r3
   1be08:	46a2      	mov	sl, r4
   1be0a:	46ab      	mov	fp, r5
   1be0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be0e:	2100      	movs	r1, #0
   1be10:	f7ff fd26 	bl	1b860 <_Balloc>
   1be14:	2301      	movs	r3, #1
   1be16:	6103      	str	r3, [r0, #16]
   1be18:	2300      	movs	r3, #0
   1be1a:	4681      	mov	r9, r0
   1be1c:	6143      	str	r3, [r0, #20]
   1be1e:	e7ef      	b.n	1be00 <__mdiff+0x104>
   1be20:	4666      	mov	r6, ip
   1be22:	e799      	b.n	1bd58 <__mdiff+0x5c>
   1be24:	0027      	movs	r7, r4
   1be26:	000e      	movs	r6, r1
   1be28:	46a0      	mov	r8, r4
   1be2a:	3714      	adds	r7, #20
   1be2c:	3614      	adds	r6, #20
   1be2e:	000c      	movs	r4, r1
   1be30:	2501      	movs	r5, #1
   1be32:	e791      	b.n	1bd58 <__mdiff+0x5c>

0001be34 <__d2b>:
   1be34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be36:	2101      	movs	r1, #1
   1be38:	001c      	movs	r4, r3
   1be3a:	b083      	sub	sp, #12
   1be3c:	9e08      	ldr	r6, [sp, #32]
   1be3e:	0015      	movs	r5, r2
   1be40:	f7ff fd0e 	bl	1b860 <_Balloc>
   1be44:	0323      	lsls	r3, r4, #12
   1be46:	0064      	lsls	r4, r4, #1
   1be48:	0007      	movs	r7, r0
   1be4a:	0b1b      	lsrs	r3, r3, #12
   1be4c:	0d64      	lsrs	r4, r4, #21
   1be4e:	d002      	beq.n	1be56 <__d2b+0x22>
   1be50:	2280      	movs	r2, #128	; 0x80
   1be52:	0352      	lsls	r2, r2, #13
   1be54:	4313      	orrs	r3, r2
   1be56:	9301      	str	r3, [sp, #4]
   1be58:	2d00      	cmp	r5, #0
   1be5a:	d019      	beq.n	1be90 <__d2b+0x5c>
   1be5c:	4668      	mov	r0, sp
   1be5e:	9500      	str	r5, [sp, #0]
   1be60:	f7ff fd90 	bl	1b984 <__lo0bits>
   1be64:	2800      	cmp	r0, #0
   1be66:	d130      	bne.n	1beca <__d2b+0x96>
   1be68:	9b00      	ldr	r3, [sp, #0]
   1be6a:	617b      	str	r3, [r7, #20]
   1be6c:	9b01      	ldr	r3, [sp, #4]
   1be6e:	61bb      	str	r3, [r7, #24]
   1be70:	1e5a      	subs	r2, r3, #1
   1be72:	4193      	sbcs	r3, r2
   1be74:	1c5d      	adds	r5, r3, #1
   1be76:	613d      	str	r5, [r7, #16]
   1be78:	2c00      	cmp	r4, #0
   1be7a:	d014      	beq.n	1bea6 <__d2b+0x72>
   1be7c:	4b19      	ldr	r3, [pc, #100]	; (1bee4 <__d2b+0xb0>)
   1be7e:	469c      	mov	ip, r3
   1be80:	2335      	movs	r3, #53	; 0x35
   1be82:	4464      	add	r4, ip
   1be84:	1824      	adds	r4, r4, r0
   1be86:	1a18      	subs	r0, r3, r0
   1be88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1be8a:	6034      	str	r4, [r6, #0]
   1be8c:	6018      	str	r0, [r3, #0]
   1be8e:	e019      	b.n	1bec4 <__d2b+0x90>
   1be90:	a801      	add	r0, sp, #4
   1be92:	f7ff fd77 	bl	1b984 <__lo0bits>
   1be96:	9b01      	ldr	r3, [sp, #4]
   1be98:	3020      	adds	r0, #32
   1be9a:	617b      	str	r3, [r7, #20]
   1be9c:	2301      	movs	r3, #1
   1be9e:	2501      	movs	r5, #1
   1bea0:	613b      	str	r3, [r7, #16]
   1bea2:	2c00      	cmp	r4, #0
   1bea4:	d1ea      	bne.n	1be7c <__d2b+0x48>
   1bea6:	4b10      	ldr	r3, [pc, #64]	; (1bee8 <__d2b+0xb4>)
   1bea8:	469c      	mov	ip, r3
   1beaa:	4b10      	ldr	r3, [pc, #64]	; (1beec <__d2b+0xb8>)
   1beac:	4460      	add	r0, ip
   1beae:	18eb      	adds	r3, r5, r3
   1beb0:	009b      	lsls	r3, r3, #2
   1beb2:	18fb      	adds	r3, r7, r3
   1beb4:	6030      	str	r0, [r6, #0]
   1beb6:	6958      	ldr	r0, [r3, #20]
   1beb8:	f7ff fd4a 	bl	1b950 <__hi0bits>
   1bebc:	016b      	lsls	r3, r5, #5
   1bebe:	1a18      	subs	r0, r3, r0
   1bec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bec2:	6018      	str	r0, [r3, #0]
   1bec4:	0038      	movs	r0, r7
   1bec6:	b003      	add	sp, #12
   1bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1beca:	9b01      	ldr	r3, [sp, #4]
   1becc:	2220      	movs	r2, #32
   1bece:	0019      	movs	r1, r3
   1bed0:	1a12      	subs	r2, r2, r0
   1bed2:	4091      	lsls	r1, r2
   1bed4:	000a      	movs	r2, r1
   1bed6:	40c3      	lsrs	r3, r0
   1bed8:	9900      	ldr	r1, [sp, #0]
   1beda:	9301      	str	r3, [sp, #4]
   1bedc:	430a      	orrs	r2, r1
   1bede:	617a      	str	r2, [r7, #20]
   1bee0:	e7c5      	b.n	1be6e <__d2b+0x3a>
   1bee2:	46c0      	nop			; (mov r8, r8)
   1bee4:	fffffbcd 	.word	0xfffffbcd
   1bee8:	fffffbce 	.word	0xfffffbce
   1beec:	3fffffff 	.word	0x3fffffff

0001bef0 <_realloc_r>:
   1bef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bef2:	464e      	mov	r6, r9
   1bef4:	4645      	mov	r5, r8
   1bef6:	46de      	mov	lr, fp
   1bef8:	4657      	mov	r7, sl
   1befa:	b5e0      	push	{r5, r6, r7, lr}
   1befc:	b085      	sub	sp, #20
   1befe:	9001      	str	r0, [sp, #4]
   1bf00:	000e      	movs	r6, r1
   1bf02:	0015      	movs	r5, r2
   1bf04:	2900      	cmp	r1, #0
   1bf06:	d100      	bne.n	1bf0a <_realloc_r+0x1a>
   1bf08:	e09e      	b.n	1c048 <_realloc_r+0x158>
   1bf0a:	0037      	movs	r7, r6
   1bf0c:	9801      	ldr	r0, [sp, #4]
   1bf0e:	3f08      	subs	r7, #8
   1bf10:	f7ff fc96 	bl	1b840 <__malloc_lock>
   1bf14:	687a      	ldr	r2, [r7, #4]
   1bf16:	2303      	movs	r3, #3
   1bf18:	0014      	movs	r4, r2
   1bf1a:	439c      	bics	r4, r3
   1bf1c:	002b      	movs	r3, r5
   1bf1e:	330b      	adds	r3, #11
   1bf20:	46b9      	mov	r9, r7
   1bf22:	2b16      	cmp	r3, #22
   1bf24:	d847      	bhi.n	1bfb6 <_realloc_r+0xc6>
   1bf26:	2110      	movs	r1, #16
   1bf28:	2310      	movs	r3, #16
   1bf2a:	4688      	mov	r8, r1
   1bf2c:	4545      	cmp	r5, r8
   1bf2e:	d846      	bhi.n	1bfbe <_realloc_r+0xce>
   1bf30:	429c      	cmp	r4, r3
   1bf32:	da49      	bge.n	1bfc8 <_realloc_r+0xd8>
   1bf34:	49cc      	ldr	r1, [pc, #816]	; (1c268 <_realloc_r+0x378>)
   1bf36:	1938      	adds	r0, r7, r4
   1bf38:	468b      	mov	fp, r1
   1bf3a:	6889      	ldr	r1, [r1, #8]
   1bf3c:	9002      	str	r0, [sp, #8]
   1bf3e:	4288      	cmp	r0, r1
   1bf40:	d100      	bne.n	1bf44 <_realloc_r+0x54>
   1bf42:	e0c2      	b.n	1c0ca <_realloc_r+0x1da>
   1bf44:	2101      	movs	r1, #1
   1bf46:	468a      	mov	sl, r1
   1bf48:	6840      	ldr	r0, [r0, #4]
   1bf4a:	0001      	movs	r1, r0
   1bf4c:	9003      	str	r0, [sp, #12]
   1bf4e:	4650      	mov	r0, sl
   1bf50:	4381      	bics	r1, r0
   1bf52:	468c      	mov	ip, r1
   1bf54:	9902      	ldr	r1, [sp, #8]
   1bf56:	468b      	mov	fp, r1
   1bf58:	44dc      	add	ip, fp
   1bf5a:	4661      	mov	r1, ip
   1bf5c:	6849      	ldr	r1, [r1, #4]
   1bf5e:	4201      	tst	r1, r0
   1bf60:	d04d      	beq.n	1bffe <_realloc_r+0x10e>
   1bf62:	4210      	tst	r0, r2
   1bf64:	d100      	bne.n	1bf68 <_realloc_r+0x78>
   1bf66:	e0a2      	b.n	1c0ae <_realloc_r+0x1be>
   1bf68:	0029      	movs	r1, r5
   1bf6a:	9801      	ldr	r0, [sp, #4]
   1bf6c:	f7ff f924 	bl	1b1b8 <_malloc_r>
   1bf70:	1e05      	subs	r5, r0, #0
   1bf72:	d039      	beq.n	1bfe8 <_realloc_r+0xf8>
   1bf74:	2301      	movs	r3, #1
   1bf76:	0002      	movs	r2, r0
   1bf78:	6879      	ldr	r1, [r7, #4]
   1bf7a:	3a08      	subs	r2, #8
   1bf7c:	4399      	bics	r1, r3
   1bf7e:	187f      	adds	r7, r7, r1
   1bf80:	42ba      	cmp	r2, r7
   1bf82:	d100      	bne.n	1bf86 <_realloc_r+0x96>
   1bf84:	e12e      	b.n	1c1e4 <_realloc_r+0x2f4>
   1bf86:	1f22      	subs	r2, r4, #4
   1bf88:	2a24      	cmp	r2, #36	; 0x24
   1bf8a:	d900      	bls.n	1bf8e <_realloc_r+0x9e>
   1bf8c:	e114      	b.n	1c1b8 <_realloc_r+0x2c8>
   1bf8e:	2a13      	cmp	r2, #19
   1bf90:	d900      	bls.n	1bf94 <_realloc_r+0xa4>
   1bf92:	e0e8      	b.n	1c166 <_realloc_r+0x276>
   1bf94:	0003      	movs	r3, r0
   1bf96:	0032      	movs	r2, r6
   1bf98:	6811      	ldr	r1, [r2, #0]
   1bf9a:	6019      	str	r1, [r3, #0]
   1bf9c:	6851      	ldr	r1, [r2, #4]
   1bf9e:	6059      	str	r1, [r3, #4]
   1bfa0:	6892      	ldr	r2, [r2, #8]
   1bfa2:	609a      	str	r2, [r3, #8]
   1bfa4:	9c01      	ldr	r4, [sp, #4]
   1bfa6:	0031      	movs	r1, r6
   1bfa8:	0020      	movs	r0, r4
   1bfaa:	f7fe fde7 	bl	1ab7c <_free_r>
   1bfae:	0020      	movs	r0, r4
   1bfb0:	f7ff fc4e 	bl	1b850 <__malloc_unlock>
   1bfb4:	e01b      	b.n	1bfee <_realloc_r+0xfe>
   1bfb6:	2107      	movs	r1, #7
   1bfb8:	438b      	bics	r3, r1
   1bfba:	4698      	mov	r8, r3
   1bfbc:	d5b6      	bpl.n	1bf2c <_realloc_r+0x3c>
   1bfbe:	230c      	movs	r3, #12
   1bfc0:	9a01      	ldr	r2, [sp, #4]
   1bfc2:	2500      	movs	r5, #0
   1bfc4:	6013      	str	r3, [r2, #0]
   1bfc6:	e012      	b.n	1bfee <_realloc_r+0xfe>
   1bfc8:	0035      	movs	r5, r6
   1bfca:	4643      	mov	r3, r8
   1bfcc:	1ae3      	subs	r3, r4, r3
   1bfce:	2b0f      	cmp	r3, #15
   1bfd0:	d825      	bhi.n	1c01e <_realloc_r+0x12e>
   1bfd2:	464b      	mov	r3, r9
   1bfd4:	2201      	movs	r2, #1
   1bfd6:	4649      	mov	r1, r9
   1bfd8:	685b      	ldr	r3, [r3, #4]
   1bfda:	4013      	ands	r3, r2
   1bfdc:	4323      	orrs	r3, r4
   1bfde:	604b      	str	r3, [r1, #4]
   1bfe0:	444c      	add	r4, r9
   1bfe2:	6863      	ldr	r3, [r4, #4]
   1bfe4:	431a      	orrs	r2, r3
   1bfe6:	6062      	str	r2, [r4, #4]
   1bfe8:	9801      	ldr	r0, [sp, #4]
   1bfea:	f7ff fc31 	bl	1b850 <__malloc_unlock>
   1bfee:	0028      	movs	r0, r5
   1bff0:	b005      	add	sp, #20
   1bff2:	bc3c      	pop	{r2, r3, r4, r5}
   1bff4:	4690      	mov	r8, r2
   1bff6:	4699      	mov	r9, r3
   1bff8:	46a2      	mov	sl, r4
   1bffa:	46ab      	mov	fp, r5
   1bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bffe:	2103      	movs	r1, #3
   1c000:	9803      	ldr	r0, [sp, #12]
   1c002:	468c      	mov	ip, r1
   1c004:	4388      	bics	r0, r1
   1c006:	1821      	adds	r1, r4, r0
   1c008:	468b      	mov	fp, r1
   1c00a:	4299      	cmp	r1, r3
   1c00c:	db21      	blt.n	1c052 <_realloc_r+0x162>
   1c00e:	9a02      	ldr	r2, [sp, #8]
   1c010:	0035      	movs	r5, r6
   1c012:	68d3      	ldr	r3, [r2, #12]
   1c014:	6892      	ldr	r2, [r2, #8]
   1c016:	465c      	mov	r4, fp
   1c018:	60d3      	str	r3, [r2, #12]
   1c01a:	609a      	str	r2, [r3, #8]
   1c01c:	e7d5      	b.n	1bfca <_realloc_r+0xda>
   1c01e:	464a      	mov	r2, r9
   1c020:	2001      	movs	r0, #1
   1c022:	4646      	mov	r6, r8
   1c024:	6852      	ldr	r2, [r2, #4]
   1c026:	4649      	mov	r1, r9
   1c028:	4002      	ands	r2, r0
   1c02a:	4332      	orrs	r2, r6
   1c02c:	464e      	mov	r6, r9
   1c02e:	4441      	add	r1, r8
   1c030:	4303      	orrs	r3, r0
   1c032:	6072      	str	r2, [r6, #4]
   1c034:	444c      	add	r4, r9
   1c036:	604b      	str	r3, [r1, #4]
   1c038:	6863      	ldr	r3, [r4, #4]
   1c03a:	3108      	adds	r1, #8
   1c03c:	4318      	orrs	r0, r3
   1c03e:	6060      	str	r0, [r4, #4]
   1c040:	9801      	ldr	r0, [sp, #4]
   1c042:	f7fe fd9b 	bl	1ab7c <_free_r>
   1c046:	e7cf      	b.n	1bfe8 <_realloc_r+0xf8>
   1c048:	0011      	movs	r1, r2
   1c04a:	f7ff f8b5 	bl	1b1b8 <_malloc_r>
   1c04e:	0005      	movs	r5, r0
   1c050:	e7cd      	b.n	1bfee <_realloc_r+0xfe>
   1c052:	4651      	mov	r1, sl
   1c054:	4211      	tst	r1, r2
   1c056:	d000      	beq.n	1c05a <_realloc_r+0x16a>
   1c058:	e786      	b.n	1bf68 <_realloc_r+0x78>
   1c05a:	4661      	mov	r1, ip
   1c05c:	683a      	ldr	r2, [r7, #0]
   1c05e:	1aba      	subs	r2, r7, r2
   1c060:	4692      	mov	sl, r2
   1c062:	6852      	ldr	r2, [r2, #4]
   1c064:	438a      	bics	r2, r1
   1c066:	1880      	adds	r0, r0, r2
   1c068:	4683      	mov	fp, r0
   1c06a:	44a3      	add	fp, r4
   1c06c:	459b      	cmp	fp, r3
   1c06e:	db26      	blt.n	1c0be <_realloc_r+0x1ce>
   1c070:	9a02      	ldr	r2, [sp, #8]
   1c072:	68d3      	ldr	r3, [r2, #12]
   1c074:	6892      	ldr	r2, [r2, #8]
   1c076:	60d3      	str	r3, [r2, #12]
   1c078:	609a      	str	r2, [r3, #8]
   1c07a:	4653      	mov	r3, sl
   1c07c:	4652      	mov	r2, sl
   1c07e:	4655      	mov	r5, sl
   1c080:	6892      	ldr	r2, [r2, #8]
   1c082:	68db      	ldr	r3, [r3, #12]
   1c084:	3508      	adds	r5, #8
   1c086:	60d3      	str	r3, [r2, #12]
   1c088:	609a      	str	r2, [r3, #8]
   1c08a:	1f22      	subs	r2, r4, #4
   1c08c:	2a24      	cmp	r2, #36	; 0x24
   1c08e:	d900      	bls.n	1c092 <_realloc_r+0x1a2>
   1c090:	e096      	b.n	1c1c0 <_realloc_r+0x2d0>
   1c092:	2a13      	cmp	r2, #19
   1c094:	d972      	bls.n	1c17c <_realloc_r+0x28c>
   1c096:	4653      	mov	r3, sl
   1c098:	6831      	ldr	r1, [r6, #0]
   1c09a:	6099      	str	r1, [r3, #8]
   1c09c:	6871      	ldr	r1, [r6, #4]
   1c09e:	60d9      	str	r1, [r3, #12]
   1c0a0:	2a1b      	cmp	r2, #27
   1c0a2:	d900      	bls.n	1c0a6 <_realloc_r+0x1b6>
   1c0a4:	e0a4      	b.n	1c1f0 <_realloc_r+0x300>
   1c0a6:	0032      	movs	r2, r6
   1c0a8:	3310      	adds	r3, #16
   1c0aa:	3208      	adds	r2, #8
   1c0ac:	e068      	b.n	1c180 <_realloc_r+0x290>
   1c0ae:	683a      	ldr	r2, [r7, #0]
   1c0b0:	1aba      	subs	r2, r7, r2
   1c0b2:	4692      	mov	sl, r2
   1c0b4:	4651      	mov	r1, sl
   1c0b6:	2203      	movs	r2, #3
   1c0b8:	6849      	ldr	r1, [r1, #4]
   1c0ba:	4391      	bics	r1, r2
   1c0bc:	000a      	movs	r2, r1
   1c0be:	4693      	mov	fp, r2
   1c0c0:	44a3      	add	fp, r4
   1c0c2:	459b      	cmp	fp, r3
   1c0c4:	da00      	bge.n	1c0c8 <_realloc_r+0x1d8>
   1c0c6:	e74f      	b.n	1bf68 <_realloc_r+0x78>
   1c0c8:	e7d7      	b.n	1c07a <_realloc_r+0x18a>
   1c0ca:	2003      	movs	r0, #3
   1c0cc:	9902      	ldr	r1, [sp, #8]
   1c0ce:	4684      	mov	ip, r0
   1c0d0:	6849      	ldr	r1, [r1, #4]
   1c0d2:	4381      	bics	r1, r0
   1c0d4:	4640      	mov	r0, r8
   1c0d6:	1909      	adds	r1, r1, r4
   1c0d8:	3010      	adds	r0, #16
   1c0da:	9002      	str	r0, [sp, #8]
   1c0dc:	4281      	cmp	r1, r0
   1c0de:	da58      	bge.n	1c192 <_realloc_r+0x2a2>
   1c0e0:	07d2      	lsls	r2, r2, #31
   1c0e2:	d500      	bpl.n	1c0e6 <_realloc_r+0x1f6>
   1c0e4:	e740      	b.n	1bf68 <_realloc_r+0x78>
   1c0e6:	4660      	mov	r0, ip
   1c0e8:	683a      	ldr	r2, [r7, #0]
   1c0ea:	1aba      	subs	r2, r7, r2
   1c0ec:	4692      	mov	sl, r2
   1c0ee:	6852      	ldr	r2, [r2, #4]
   1c0f0:	4382      	bics	r2, r0
   1c0f2:	9802      	ldr	r0, [sp, #8]
   1c0f4:	1851      	adds	r1, r2, r1
   1c0f6:	9103      	str	r1, [sp, #12]
   1c0f8:	4288      	cmp	r0, r1
   1c0fa:	dce0      	bgt.n	1c0be <_realloc_r+0x1ce>
   1c0fc:	4653      	mov	r3, sl
   1c0fe:	4652      	mov	r2, sl
   1c100:	4655      	mov	r5, sl
   1c102:	6892      	ldr	r2, [r2, #8]
   1c104:	68db      	ldr	r3, [r3, #12]
   1c106:	3508      	adds	r5, #8
   1c108:	60d3      	str	r3, [r2, #12]
   1c10a:	609a      	str	r2, [r3, #8]
   1c10c:	1f22      	subs	r2, r4, #4
   1c10e:	2a24      	cmp	r2, #36	; 0x24
   1c110:	d900      	bls.n	1c114 <_realloc_r+0x224>
   1c112:	e08e      	b.n	1c232 <_realloc_r+0x342>
   1c114:	2a13      	cmp	r2, #19
   1c116:	d800      	bhi.n	1c11a <_realloc_r+0x22a>
   1c118:	e088      	b.n	1c22c <_realloc_r+0x33c>
   1c11a:	4653      	mov	r3, sl
   1c11c:	6831      	ldr	r1, [r6, #0]
   1c11e:	6099      	str	r1, [r3, #8]
   1c120:	6871      	ldr	r1, [r6, #4]
   1c122:	60d9      	str	r1, [r3, #12]
   1c124:	2a1b      	cmp	r2, #27
   1c126:	d900      	bls.n	1c12a <_realloc_r+0x23a>
   1c128:	e088      	b.n	1c23c <_realloc_r+0x34c>
   1c12a:	0032      	movs	r2, r6
   1c12c:	3310      	adds	r3, #16
   1c12e:	3208      	adds	r2, #8
   1c130:	6811      	ldr	r1, [r2, #0]
   1c132:	6019      	str	r1, [r3, #0]
   1c134:	6851      	ldr	r1, [r2, #4]
   1c136:	6059      	str	r1, [r3, #4]
   1c138:	6892      	ldr	r2, [r2, #8]
   1c13a:	609a      	str	r2, [r3, #8]
   1c13c:	4651      	mov	r1, sl
   1c13e:	465b      	mov	r3, fp
   1c140:	4642      	mov	r2, r8
   1c142:	4441      	add	r1, r8
   1c144:	6099      	str	r1, [r3, #8]
   1c146:	9b03      	ldr	r3, [sp, #12]
   1c148:	9801      	ldr	r0, [sp, #4]
   1c14a:	1a9a      	subs	r2, r3, r2
   1c14c:	2301      	movs	r3, #1
   1c14e:	431a      	orrs	r2, r3
   1c150:	604a      	str	r2, [r1, #4]
   1c152:	4652      	mov	r2, sl
   1c154:	6852      	ldr	r2, [r2, #4]
   1c156:	4013      	ands	r3, r2
   1c158:	4642      	mov	r2, r8
   1c15a:	4313      	orrs	r3, r2
   1c15c:	4652      	mov	r2, sl
   1c15e:	6053      	str	r3, [r2, #4]
   1c160:	f7ff fb76 	bl	1b850 <__malloc_unlock>
   1c164:	e743      	b.n	1bfee <_realloc_r+0xfe>
   1c166:	6833      	ldr	r3, [r6, #0]
   1c168:	6003      	str	r3, [r0, #0]
   1c16a:	6873      	ldr	r3, [r6, #4]
   1c16c:	6043      	str	r3, [r0, #4]
   1c16e:	2a1b      	cmp	r2, #27
   1c170:	d82d      	bhi.n	1c1ce <_realloc_r+0x2de>
   1c172:	0003      	movs	r3, r0
   1c174:	0032      	movs	r2, r6
   1c176:	3308      	adds	r3, #8
   1c178:	3208      	adds	r2, #8
   1c17a:	e70d      	b.n	1bf98 <_realloc_r+0xa8>
   1c17c:	002b      	movs	r3, r5
   1c17e:	0032      	movs	r2, r6
   1c180:	6811      	ldr	r1, [r2, #0]
   1c182:	465c      	mov	r4, fp
   1c184:	6019      	str	r1, [r3, #0]
   1c186:	6851      	ldr	r1, [r2, #4]
   1c188:	46d1      	mov	r9, sl
   1c18a:	6059      	str	r1, [r3, #4]
   1c18c:	6892      	ldr	r2, [r2, #8]
   1c18e:	609a      	str	r2, [r3, #8]
   1c190:	e71b      	b.n	1bfca <_realloc_r+0xda>
   1c192:	4643      	mov	r3, r8
   1c194:	18fa      	adds	r2, r7, r3
   1c196:	465b      	mov	r3, fp
   1c198:	609a      	str	r2, [r3, #8]
   1c19a:	4643      	mov	r3, r8
   1c19c:	1ac9      	subs	r1, r1, r3
   1c19e:	2301      	movs	r3, #1
   1c1a0:	4319      	orrs	r1, r3
   1c1a2:	6051      	str	r1, [r2, #4]
   1c1a4:	687a      	ldr	r2, [r7, #4]
   1c1a6:	9801      	ldr	r0, [sp, #4]
   1c1a8:	4013      	ands	r3, r2
   1c1aa:	4642      	mov	r2, r8
   1c1ac:	4313      	orrs	r3, r2
   1c1ae:	607b      	str	r3, [r7, #4]
   1c1b0:	f7ff fb4e 	bl	1b850 <__malloc_unlock>
   1c1b4:	0035      	movs	r5, r6
   1c1b6:	e71a      	b.n	1bfee <_realloc_r+0xfe>
   1c1b8:	0031      	movs	r1, r6
   1c1ba:	f7ff faf1 	bl	1b7a0 <memmove>
   1c1be:	e6f1      	b.n	1bfa4 <_realloc_r+0xb4>
   1c1c0:	0031      	movs	r1, r6
   1c1c2:	0028      	movs	r0, r5
   1c1c4:	f7ff faec 	bl	1b7a0 <memmove>
   1c1c8:	465c      	mov	r4, fp
   1c1ca:	46d1      	mov	r9, sl
   1c1cc:	e6fd      	b.n	1bfca <_realloc_r+0xda>
   1c1ce:	68b3      	ldr	r3, [r6, #8]
   1c1d0:	6083      	str	r3, [r0, #8]
   1c1d2:	68f3      	ldr	r3, [r6, #12]
   1c1d4:	60c3      	str	r3, [r0, #12]
   1c1d6:	2a24      	cmp	r2, #36	; 0x24
   1c1d8:	d015      	beq.n	1c206 <_realloc_r+0x316>
   1c1da:	0003      	movs	r3, r0
   1c1dc:	0032      	movs	r2, r6
   1c1de:	3310      	adds	r3, #16
   1c1e0:	3210      	adds	r2, #16
   1c1e2:	e6d9      	b.n	1bf98 <_realloc_r+0xa8>
   1c1e4:	6853      	ldr	r3, [r2, #4]
   1c1e6:	2203      	movs	r2, #3
   1c1e8:	4393      	bics	r3, r2
   1c1ea:	18e4      	adds	r4, r4, r3
   1c1ec:	0035      	movs	r5, r6
   1c1ee:	e6ec      	b.n	1bfca <_realloc_r+0xda>
   1c1f0:	4653      	mov	r3, sl
   1c1f2:	68b1      	ldr	r1, [r6, #8]
   1c1f4:	6119      	str	r1, [r3, #16]
   1c1f6:	68f1      	ldr	r1, [r6, #12]
   1c1f8:	6159      	str	r1, [r3, #20]
   1c1fa:	2a24      	cmp	r2, #36	; 0x24
   1c1fc:	d00c      	beq.n	1c218 <_realloc_r+0x328>
   1c1fe:	0032      	movs	r2, r6
   1c200:	3318      	adds	r3, #24
   1c202:	3210      	adds	r2, #16
   1c204:	e7bc      	b.n	1c180 <_realloc_r+0x290>
   1c206:	6933      	ldr	r3, [r6, #16]
   1c208:	0032      	movs	r2, r6
   1c20a:	6103      	str	r3, [r0, #16]
   1c20c:	0003      	movs	r3, r0
   1c20e:	6971      	ldr	r1, [r6, #20]
   1c210:	3318      	adds	r3, #24
   1c212:	3218      	adds	r2, #24
   1c214:	6141      	str	r1, [r0, #20]
   1c216:	e6bf      	b.n	1bf98 <_realloc_r+0xa8>
   1c218:	4653      	mov	r3, sl
   1c21a:	6932      	ldr	r2, [r6, #16]
   1c21c:	4651      	mov	r1, sl
   1c21e:	619a      	str	r2, [r3, #24]
   1c220:	0032      	movs	r2, r6
   1c222:	6970      	ldr	r0, [r6, #20]
   1c224:	3320      	adds	r3, #32
   1c226:	3218      	adds	r2, #24
   1c228:	61c8      	str	r0, [r1, #28]
   1c22a:	e7a9      	b.n	1c180 <_realloc_r+0x290>
   1c22c:	002b      	movs	r3, r5
   1c22e:	0032      	movs	r2, r6
   1c230:	e77e      	b.n	1c130 <_realloc_r+0x240>
   1c232:	0031      	movs	r1, r6
   1c234:	0028      	movs	r0, r5
   1c236:	f7ff fab3 	bl	1b7a0 <memmove>
   1c23a:	e77f      	b.n	1c13c <_realloc_r+0x24c>
   1c23c:	4653      	mov	r3, sl
   1c23e:	68b1      	ldr	r1, [r6, #8]
   1c240:	6119      	str	r1, [r3, #16]
   1c242:	68f1      	ldr	r1, [r6, #12]
   1c244:	6159      	str	r1, [r3, #20]
   1c246:	2a24      	cmp	r2, #36	; 0x24
   1c248:	d003      	beq.n	1c252 <_realloc_r+0x362>
   1c24a:	0032      	movs	r2, r6
   1c24c:	3318      	adds	r3, #24
   1c24e:	3210      	adds	r2, #16
   1c250:	e76e      	b.n	1c130 <_realloc_r+0x240>
   1c252:	4653      	mov	r3, sl
   1c254:	6932      	ldr	r2, [r6, #16]
   1c256:	4651      	mov	r1, sl
   1c258:	619a      	str	r2, [r3, #24]
   1c25a:	0032      	movs	r2, r6
   1c25c:	6970      	ldr	r0, [r6, #20]
   1c25e:	3320      	adds	r3, #32
   1c260:	3218      	adds	r2, #24
   1c262:	61c8      	str	r0, [r1, #28]
   1c264:	e764      	b.n	1c130 <_realloc_r+0x240>
   1c266:	46c0      	nop			; (mov r8, r8)
   1c268:	200005b8 	.word	0x200005b8

0001c26c <_sbrk_r>:
   1c26c:	2300      	movs	r3, #0
   1c26e:	b570      	push	{r4, r5, r6, lr}
   1c270:	4c06      	ldr	r4, [pc, #24]	; (1c28c <_sbrk_r+0x20>)
   1c272:	0005      	movs	r5, r0
   1c274:	0008      	movs	r0, r1
   1c276:	6023      	str	r3, [r4, #0]
   1c278:	f7e9 f8ec 	bl	5454 <_sbrk>
   1c27c:	1c43      	adds	r3, r0, #1
   1c27e:	d000      	beq.n	1c282 <_sbrk_r+0x16>
   1c280:	bd70      	pop	{r4, r5, r6, pc}
   1c282:	6823      	ldr	r3, [r4, #0]
   1c284:	2b00      	cmp	r3, #0
   1c286:	d0fb      	beq.n	1c280 <_sbrk_r+0x14>
   1c288:	602b      	str	r3, [r5, #0]
   1c28a:	e7f9      	b.n	1c280 <_sbrk_r+0x14>
   1c28c:	20002e40 	.word	0x20002e40

0001c290 <__sread>:
   1c290:	b570      	push	{r4, r5, r6, lr}
   1c292:	000c      	movs	r4, r1
   1c294:	250e      	movs	r5, #14
   1c296:	5f49      	ldrsh	r1, [r1, r5]
   1c298:	f000 fa7a 	bl	1c790 <_read_r>
   1c29c:	2800      	cmp	r0, #0
   1c29e:	db03      	blt.n	1c2a8 <__sread+0x18>
   1c2a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c2a2:	181b      	adds	r3, r3, r0
   1c2a4:	6523      	str	r3, [r4, #80]	; 0x50
   1c2a6:	bd70      	pop	{r4, r5, r6, pc}
   1c2a8:	89a3      	ldrh	r3, [r4, #12]
   1c2aa:	4a02      	ldr	r2, [pc, #8]	; (1c2b4 <__sread+0x24>)
   1c2ac:	4013      	ands	r3, r2
   1c2ae:	81a3      	strh	r3, [r4, #12]
   1c2b0:	e7f9      	b.n	1c2a6 <__sread+0x16>
   1c2b2:	46c0      	nop			; (mov r8, r8)
   1c2b4:	ffffefff 	.word	0xffffefff

0001c2b8 <__swrite>:
   1c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2ba:	0016      	movs	r6, r2
   1c2bc:	001f      	movs	r7, r3
   1c2be:	220c      	movs	r2, #12
   1c2c0:	5e8b      	ldrsh	r3, [r1, r2]
   1c2c2:	0005      	movs	r5, r0
   1c2c4:	000c      	movs	r4, r1
   1c2c6:	05da      	lsls	r2, r3, #23
   1c2c8:	d507      	bpl.n	1c2da <__swrite+0x22>
   1c2ca:	230e      	movs	r3, #14
   1c2cc:	5ec9      	ldrsh	r1, [r1, r3]
   1c2ce:	2200      	movs	r2, #0
   1c2d0:	2302      	movs	r3, #2
   1c2d2:	f000 fa49 	bl	1c768 <_lseek_r>
   1c2d6:	220c      	movs	r2, #12
   1c2d8:	5ea3      	ldrsh	r3, [r4, r2]
   1c2da:	4a05      	ldr	r2, [pc, #20]	; (1c2f0 <__swrite+0x38>)
   1c2dc:	0028      	movs	r0, r5
   1c2de:	4013      	ands	r3, r2
   1c2e0:	81a3      	strh	r3, [r4, #12]
   1c2e2:	0032      	movs	r2, r6
   1c2e4:	230e      	movs	r3, #14
   1c2e6:	5ee1      	ldrsh	r1, [r4, r3]
   1c2e8:	003b      	movs	r3, r7
   1c2ea:	f000 f86b 	bl	1c3c4 <_write_r>
   1c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c2f0:	ffffefff 	.word	0xffffefff

0001c2f4 <__sseek>:
   1c2f4:	b570      	push	{r4, r5, r6, lr}
   1c2f6:	000c      	movs	r4, r1
   1c2f8:	250e      	movs	r5, #14
   1c2fa:	5f49      	ldrsh	r1, [r1, r5]
   1c2fc:	f000 fa34 	bl	1c768 <_lseek_r>
   1c300:	1c43      	adds	r3, r0, #1
   1c302:	d006      	beq.n	1c312 <__sseek+0x1e>
   1c304:	2380      	movs	r3, #128	; 0x80
   1c306:	89a2      	ldrh	r2, [r4, #12]
   1c308:	015b      	lsls	r3, r3, #5
   1c30a:	4313      	orrs	r3, r2
   1c30c:	81a3      	strh	r3, [r4, #12]
   1c30e:	6520      	str	r0, [r4, #80]	; 0x50
   1c310:	bd70      	pop	{r4, r5, r6, pc}
   1c312:	89a3      	ldrh	r3, [r4, #12]
   1c314:	4a01      	ldr	r2, [pc, #4]	; (1c31c <__sseek+0x28>)
   1c316:	4013      	ands	r3, r2
   1c318:	81a3      	strh	r3, [r4, #12]
   1c31a:	e7f9      	b.n	1c310 <__sseek+0x1c>
   1c31c:	ffffefff 	.word	0xffffefff

0001c320 <__sclose>:
   1c320:	b510      	push	{r4, lr}
   1c322:	230e      	movs	r3, #14
   1c324:	5ec9      	ldrsh	r1, [r1, r3]
   1c326:	f000 f907 	bl	1c538 <_close_r>
   1c32a:	bd10      	pop	{r4, pc}

0001c32c <__sprint_r.part.0>:
   1c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c32e:	464e      	mov	r6, r9
   1c330:	4645      	mov	r5, r8
   1c332:	46de      	mov	lr, fp
   1c334:	4657      	mov	r7, sl
   1c336:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1c338:	b5e0      	push	{r5, r6, r7, lr}
   1c33a:	4680      	mov	r8, r0
   1c33c:	000e      	movs	r6, r1
   1c33e:	4691      	mov	r9, r2
   1c340:	049b      	lsls	r3, r3, #18
   1c342:	d531      	bpl.n	1c3a8 <__sprint_r.part.0+0x7c>
   1c344:	6813      	ldr	r3, [r2, #0]
   1c346:	469a      	mov	sl, r3
   1c348:	6893      	ldr	r3, [r2, #8]
   1c34a:	2b00      	cmp	r3, #0
   1c34c:	d02a      	beq.n	1c3a4 <__sprint_r.part.0+0x78>
   1c34e:	4652      	mov	r2, sl
   1c350:	6852      	ldr	r2, [r2, #4]
   1c352:	2500      	movs	r5, #0
   1c354:	4693      	mov	fp, r2
   1c356:	0897      	lsrs	r7, r2, #2
   1c358:	4652      	mov	r2, sl
   1c35a:	6814      	ldr	r4, [r2, #0]
   1c35c:	d104      	bne.n	1c368 <__sprint_r.part.0+0x3c>
   1c35e:	e016      	b.n	1c38e <__sprint_r.part.0+0x62>
   1c360:	3501      	adds	r5, #1
   1c362:	3404      	adds	r4, #4
   1c364:	42af      	cmp	r7, r5
   1c366:	d010      	beq.n	1c38a <__sprint_r.part.0+0x5e>
   1c368:	0032      	movs	r2, r6
   1c36a:	6821      	ldr	r1, [r4, #0]
   1c36c:	4640      	mov	r0, r8
   1c36e:	f000 f9a7 	bl	1c6c0 <_fputwc_r>
   1c372:	1c43      	adds	r3, r0, #1
   1c374:	d1f4      	bne.n	1c360 <__sprint_r.part.0+0x34>
   1c376:	464a      	mov	r2, r9
   1c378:	2300      	movs	r3, #0
   1c37a:	6093      	str	r3, [r2, #8]
   1c37c:	6053      	str	r3, [r2, #4]
   1c37e:	bc3c      	pop	{r2, r3, r4, r5}
   1c380:	4690      	mov	r8, r2
   1c382:	4699      	mov	r9, r3
   1c384:	46a2      	mov	sl, r4
   1c386:	46ab      	mov	fp, r5
   1c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c38a:	464b      	mov	r3, r9
   1c38c:	689b      	ldr	r3, [r3, #8]
   1c38e:	465a      	mov	r2, fp
   1c390:	2103      	movs	r1, #3
   1c392:	438a      	bics	r2, r1
   1c394:	1a9b      	subs	r3, r3, r2
   1c396:	464a      	mov	r2, r9
   1c398:	6093      	str	r3, [r2, #8]
   1c39a:	2208      	movs	r2, #8
   1c39c:	4694      	mov	ip, r2
   1c39e:	44e2      	add	sl, ip
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	d1d4      	bne.n	1c34e <__sprint_r.part.0+0x22>
   1c3a4:	2000      	movs	r0, #0
   1c3a6:	e7e6      	b.n	1c376 <__sprint_r.part.0+0x4a>
   1c3a8:	f7fe fcc6 	bl	1ad38 <__sfvwrite_r>
   1c3ac:	e7e3      	b.n	1c376 <__sprint_r.part.0+0x4a>
   1c3ae:	46c0      	nop			; (mov r8, r8)

0001c3b0 <__sprint_r>:
   1c3b0:	6893      	ldr	r3, [r2, #8]
   1c3b2:	b510      	push	{r4, lr}
   1c3b4:	2b00      	cmp	r3, #0
   1c3b6:	d002      	beq.n	1c3be <__sprint_r+0xe>
   1c3b8:	f7ff ffb8 	bl	1c32c <__sprint_r.part.0>
   1c3bc:	bd10      	pop	{r4, pc}
   1c3be:	6053      	str	r3, [r2, #4]
   1c3c0:	2000      	movs	r0, #0
   1c3c2:	e7fb      	b.n	1c3bc <__sprint_r+0xc>

0001c3c4 <_write_r>:
   1c3c4:	b570      	push	{r4, r5, r6, lr}
   1c3c6:	0005      	movs	r5, r0
   1c3c8:	0008      	movs	r0, r1
   1c3ca:	0011      	movs	r1, r2
   1c3cc:	2200      	movs	r2, #0
   1c3ce:	4c06      	ldr	r4, [pc, #24]	; (1c3e8 <_write_r+0x24>)
   1c3d0:	6022      	str	r2, [r4, #0]
   1c3d2:	001a      	movs	r2, r3
   1c3d4:	f7e9 f816 	bl	5404 <_write>
   1c3d8:	1c43      	adds	r3, r0, #1
   1c3da:	d000      	beq.n	1c3de <_write_r+0x1a>
   1c3dc:	bd70      	pop	{r4, r5, r6, pc}
   1c3de:	6823      	ldr	r3, [r4, #0]
   1c3e0:	2b00      	cmp	r3, #0
   1c3e2:	d0fb      	beq.n	1c3dc <_write_r+0x18>
   1c3e4:	602b      	str	r3, [r5, #0]
   1c3e6:	e7f9      	b.n	1c3dc <_write_r+0x18>
   1c3e8:	20002e40 	.word	0x20002e40

0001c3ec <__register_exitproc>:
   1c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3ee:	464e      	mov	r6, r9
   1c3f0:	4645      	mov	r5, r8
   1c3f2:	46de      	mov	lr, fp
   1c3f4:	4657      	mov	r7, sl
   1c3f6:	b5e0      	push	{r5, r6, r7, lr}
   1c3f8:	4d36      	ldr	r5, [pc, #216]	; (1c4d4 <__register_exitproc+0xe8>)
   1c3fa:	b083      	sub	sp, #12
   1c3fc:	0006      	movs	r6, r0
   1c3fe:	6828      	ldr	r0, [r5, #0]
   1c400:	4698      	mov	r8, r3
   1c402:	000f      	movs	r7, r1
   1c404:	4691      	mov	r9, r2
   1c406:	f7fe fe51 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1c40a:	4b33      	ldr	r3, [pc, #204]	; (1c4d8 <__register_exitproc+0xec>)
   1c40c:	681c      	ldr	r4, [r3, #0]
   1c40e:	23a4      	movs	r3, #164	; 0xa4
   1c410:	005b      	lsls	r3, r3, #1
   1c412:	58e0      	ldr	r0, [r4, r3]
   1c414:	2800      	cmp	r0, #0
   1c416:	d052      	beq.n	1c4be <__register_exitproc+0xd2>
   1c418:	6843      	ldr	r3, [r0, #4]
   1c41a:	2b1f      	cmp	r3, #31
   1c41c:	dc13      	bgt.n	1c446 <__register_exitproc+0x5a>
   1c41e:	1c5a      	adds	r2, r3, #1
   1c420:	9201      	str	r2, [sp, #4]
   1c422:	2e00      	cmp	r6, #0
   1c424:	d128      	bne.n	1c478 <__register_exitproc+0x8c>
   1c426:	9a01      	ldr	r2, [sp, #4]
   1c428:	3302      	adds	r3, #2
   1c42a:	009b      	lsls	r3, r3, #2
   1c42c:	6042      	str	r2, [r0, #4]
   1c42e:	501f      	str	r7, [r3, r0]
   1c430:	6828      	ldr	r0, [r5, #0]
   1c432:	f7fe fe3d 	bl	1b0b0 <__retarget_lock_release_recursive>
   1c436:	2000      	movs	r0, #0
   1c438:	b003      	add	sp, #12
   1c43a:	bc3c      	pop	{r2, r3, r4, r5}
   1c43c:	4690      	mov	r8, r2
   1c43e:	4699      	mov	r9, r3
   1c440:	46a2      	mov	sl, r4
   1c442:	46ab      	mov	fp, r5
   1c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c446:	4b25      	ldr	r3, [pc, #148]	; (1c4dc <__register_exitproc+0xf0>)
   1c448:	2b00      	cmp	r3, #0
   1c44a:	d03d      	beq.n	1c4c8 <__register_exitproc+0xdc>
   1c44c:	20c8      	movs	r0, #200	; 0xc8
   1c44e:	0040      	lsls	r0, r0, #1
   1c450:	f7fe fea8 	bl	1b1a4 <malloc>
   1c454:	2800      	cmp	r0, #0
   1c456:	d037      	beq.n	1c4c8 <__register_exitproc+0xdc>
   1c458:	22a4      	movs	r2, #164	; 0xa4
   1c45a:	2300      	movs	r3, #0
   1c45c:	0052      	lsls	r2, r2, #1
   1c45e:	58a1      	ldr	r1, [r4, r2]
   1c460:	6043      	str	r3, [r0, #4]
   1c462:	6001      	str	r1, [r0, #0]
   1c464:	50a0      	str	r0, [r4, r2]
   1c466:	3240      	adds	r2, #64	; 0x40
   1c468:	5083      	str	r3, [r0, r2]
   1c46a:	3204      	adds	r2, #4
   1c46c:	5083      	str	r3, [r0, r2]
   1c46e:	3301      	adds	r3, #1
   1c470:	9301      	str	r3, [sp, #4]
   1c472:	2300      	movs	r3, #0
   1c474:	2e00      	cmp	r6, #0
   1c476:	d0d6      	beq.n	1c426 <__register_exitproc+0x3a>
   1c478:	009a      	lsls	r2, r3, #2
   1c47a:	4692      	mov	sl, r2
   1c47c:	4482      	add	sl, r0
   1c47e:	464a      	mov	r2, r9
   1c480:	2188      	movs	r1, #136	; 0x88
   1c482:	4654      	mov	r4, sl
   1c484:	5062      	str	r2, [r4, r1]
   1c486:	22c4      	movs	r2, #196	; 0xc4
   1c488:	0052      	lsls	r2, r2, #1
   1c48a:	4691      	mov	r9, r2
   1c48c:	4481      	add	r9, r0
   1c48e:	464a      	mov	r2, r9
   1c490:	3987      	subs	r1, #135	; 0x87
   1c492:	4099      	lsls	r1, r3
   1c494:	6812      	ldr	r2, [r2, #0]
   1c496:	468b      	mov	fp, r1
   1c498:	430a      	orrs	r2, r1
   1c49a:	4694      	mov	ip, r2
   1c49c:	464a      	mov	r2, r9
   1c49e:	4661      	mov	r1, ip
   1c4a0:	6011      	str	r1, [r2, #0]
   1c4a2:	2284      	movs	r2, #132	; 0x84
   1c4a4:	4641      	mov	r1, r8
   1c4a6:	0052      	lsls	r2, r2, #1
   1c4a8:	50a1      	str	r1, [r4, r2]
   1c4aa:	2e02      	cmp	r6, #2
   1c4ac:	d1bb      	bne.n	1c426 <__register_exitproc+0x3a>
   1c4ae:	0002      	movs	r2, r0
   1c4b0:	465c      	mov	r4, fp
   1c4b2:	328d      	adds	r2, #141	; 0x8d
   1c4b4:	32ff      	adds	r2, #255	; 0xff
   1c4b6:	6811      	ldr	r1, [r2, #0]
   1c4b8:	430c      	orrs	r4, r1
   1c4ba:	6014      	str	r4, [r2, #0]
   1c4bc:	e7b3      	b.n	1c426 <__register_exitproc+0x3a>
   1c4be:	0020      	movs	r0, r4
   1c4c0:	304d      	adds	r0, #77	; 0x4d
   1c4c2:	30ff      	adds	r0, #255	; 0xff
   1c4c4:	50e0      	str	r0, [r4, r3]
   1c4c6:	e7a7      	b.n	1c418 <__register_exitproc+0x2c>
   1c4c8:	6828      	ldr	r0, [r5, #0]
   1c4ca:	f7fe fdf1 	bl	1b0b0 <__retarget_lock_release_recursive>
   1c4ce:	2001      	movs	r0, #1
   1c4d0:	4240      	negs	r0, r0
   1c4d2:	e7b1      	b.n	1c438 <__register_exitproc+0x4c>
   1c4d4:	200005b4 	.word	0x200005b4
   1c4d8:	0001e218 	.word	0x0001e218
   1c4dc:	0001b1a5 	.word	0x0001b1a5

0001c4e0 <_calloc_r>:
   1c4e0:	b510      	push	{r4, lr}
   1c4e2:	4351      	muls	r1, r2
   1c4e4:	f7fe fe68 	bl	1b1b8 <_malloc_r>
   1c4e8:	1e04      	subs	r4, r0, #0
   1c4ea:	d01c      	beq.n	1c526 <_calloc_r+0x46>
   1c4ec:	0003      	movs	r3, r0
   1c4ee:	3b08      	subs	r3, #8
   1c4f0:	685a      	ldr	r2, [r3, #4]
   1c4f2:	2303      	movs	r3, #3
   1c4f4:	439a      	bics	r2, r3
   1c4f6:	3a04      	subs	r2, #4
   1c4f8:	2a24      	cmp	r2, #36	; 0x24
   1c4fa:	d816      	bhi.n	1c52a <_calloc_r+0x4a>
   1c4fc:	0003      	movs	r3, r0
   1c4fe:	2a13      	cmp	r2, #19
   1c500:	d90d      	bls.n	1c51e <_calloc_r+0x3e>
   1c502:	2100      	movs	r1, #0
   1c504:	3308      	adds	r3, #8
   1c506:	6001      	str	r1, [r0, #0]
   1c508:	6041      	str	r1, [r0, #4]
   1c50a:	2a1b      	cmp	r2, #27
   1c50c:	d907      	bls.n	1c51e <_calloc_r+0x3e>
   1c50e:	6081      	str	r1, [r0, #8]
   1c510:	60c1      	str	r1, [r0, #12]
   1c512:	2a24      	cmp	r2, #36	; 0x24
   1c514:	d10d      	bne.n	1c532 <_calloc_r+0x52>
   1c516:	0003      	movs	r3, r0
   1c518:	6101      	str	r1, [r0, #16]
   1c51a:	3318      	adds	r3, #24
   1c51c:	6141      	str	r1, [r0, #20]
   1c51e:	2200      	movs	r2, #0
   1c520:	601a      	str	r2, [r3, #0]
   1c522:	605a      	str	r2, [r3, #4]
   1c524:	609a      	str	r2, [r3, #8]
   1c526:	0020      	movs	r0, r4
   1c528:	bd10      	pop	{r4, pc}
   1c52a:	2100      	movs	r1, #0
   1c52c:	f7fb f8f2 	bl	17714 <memset>
   1c530:	e7f9      	b.n	1c526 <_calloc_r+0x46>
   1c532:	0003      	movs	r3, r0
   1c534:	3310      	adds	r3, #16
   1c536:	e7f2      	b.n	1c51e <_calloc_r+0x3e>

0001c538 <_close_r>:
   1c538:	2300      	movs	r3, #0
   1c53a:	b570      	push	{r4, r5, r6, lr}
   1c53c:	4c06      	ldr	r4, [pc, #24]	; (1c558 <_close_r+0x20>)
   1c53e:	0005      	movs	r5, r0
   1c540:	0008      	movs	r0, r1
   1c542:	6023      	str	r3, [r4, #0]
   1c544:	f7e8 ff98 	bl	5478 <_close>
   1c548:	1c43      	adds	r3, r0, #1
   1c54a:	d000      	beq.n	1c54e <_close_r+0x16>
   1c54c:	bd70      	pop	{r4, r5, r6, pc}
   1c54e:	6823      	ldr	r3, [r4, #0]
   1c550:	2b00      	cmp	r3, #0
   1c552:	d0fb      	beq.n	1c54c <_close_r+0x14>
   1c554:	602b      	str	r3, [r5, #0]
   1c556:	e7f9      	b.n	1c54c <_close_r+0x14>
   1c558:	20002e40 	.word	0x20002e40

0001c55c <_fclose_r>:
   1c55c:	b570      	push	{r4, r5, r6, lr}
   1c55e:	0005      	movs	r5, r0
   1c560:	1e0c      	subs	r4, r1, #0
   1c562:	d040      	beq.n	1c5e6 <_fclose_r+0x8a>
   1c564:	2800      	cmp	r0, #0
   1c566:	d002      	beq.n	1c56e <_fclose_r+0x12>
   1c568:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d03e      	beq.n	1c5ec <_fclose_r+0x90>
   1c56e:	2601      	movs	r6, #1
   1c570:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c572:	4233      	tst	r3, r6
   1c574:	d133      	bne.n	1c5de <_fclose_r+0x82>
   1c576:	89a3      	ldrh	r3, [r4, #12]
   1c578:	059b      	lsls	r3, r3, #22
   1c57a:	d543      	bpl.n	1c604 <_fclose_r+0xa8>
   1c57c:	0021      	movs	r1, r4
   1c57e:	0028      	movs	r0, r5
   1c580:	f7fe f950 	bl	1a824 <__sflush_r>
   1c584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c586:	0006      	movs	r6, r0
   1c588:	2b00      	cmp	r3, #0
   1c58a:	d004      	beq.n	1c596 <_fclose_r+0x3a>
   1c58c:	69e1      	ldr	r1, [r4, #28]
   1c58e:	0028      	movs	r0, r5
   1c590:	4798      	blx	r3
   1c592:	2800      	cmp	r0, #0
   1c594:	db44      	blt.n	1c620 <_fclose_r+0xc4>
   1c596:	89a3      	ldrh	r3, [r4, #12]
   1c598:	061b      	lsls	r3, r3, #24
   1c59a:	d42a      	bmi.n	1c5f2 <_fclose_r+0x96>
   1c59c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c59e:	2900      	cmp	r1, #0
   1c5a0:	d008      	beq.n	1c5b4 <_fclose_r+0x58>
   1c5a2:	0023      	movs	r3, r4
   1c5a4:	3340      	adds	r3, #64	; 0x40
   1c5a6:	4299      	cmp	r1, r3
   1c5a8:	d002      	beq.n	1c5b0 <_fclose_r+0x54>
   1c5aa:	0028      	movs	r0, r5
   1c5ac:	f7fe fae6 	bl	1ab7c <_free_r>
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	6323      	str	r3, [r4, #48]	; 0x30
   1c5b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1c5b6:	2900      	cmp	r1, #0
   1c5b8:	d004      	beq.n	1c5c4 <_fclose_r+0x68>
   1c5ba:	0028      	movs	r0, r5
   1c5bc:	f7fe fade 	bl	1ab7c <_free_r>
   1c5c0:	2300      	movs	r3, #0
   1c5c2:	6463      	str	r3, [r4, #68]	; 0x44
   1c5c4:	f7fe fa60 	bl	1aa88 <__sfp_lock_acquire>
   1c5c8:	2300      	movs	r3, #0
   1c5ca:	81a3      	strh	r3, [r4, #12]
   1c5cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c5ce:	07db      	lsls	r3, r3, #31
   1c5d0:	d514      	bpl.n	1c5fc <_fclose_r+0xa0>
   1c5d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c5d4:	f7fe fd68 	bl	1b0a8 <__retarget_lock_close_recursive>
   1c5d8:	f7fe fa5e 	bl	1aa98 <__sfp_lock_release>
   1c5dc:	e004      	b.n	1c5e8 <_fclose_r+0x8c>
   1c5de:	220c      	movs	r2, #12
   1c5e0:	5ea3      	ldrsh	r3, [r4, r2]
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d1ca      	bne.n	1c57c <_fclose_r+0x20>
   1c5e6:	2600      	movs	r6, #0
   1c5e8:	0030      	movs	r0, r6
   1c5ea:	bd70      	pop	{r4, r5, r6, pc}
   1c5ec:	f7fe fa1c 	bl	1aa28 <__sinit>
   1c5f0:	e7bd      	b.n	1c56e <_fclose_r+0x12>
   1c5f2:	6921      	ldr	r1, [r4, #16]
   1c5f4:	0028      	movs	r0, r5
   1c5f6:	f7fe fac1 	bl	1ab7c <_free_r>
   1c5fa:	e7cf      	b.n	1c59c <_fclose_r+0x40>
   1c5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c5fe:	f7fe fd57 	bl	1b0b0 <__retarget_lock_release_recursive>
   1c602:	e7e6      	b.n	1c5d2 <_fclose_r+0x76>
   1c604:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c606:	f7fe fd51 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1c60a:	220c      	movs	r2, #12
   1c60c:	5ea3      	ldrsh	r3, [r4, r2]
   1c60e:	2b00      	cmp	r3, #0
   1c610:	d1b4      	bne.n	1c57c <_fclose_r+0x20>
   1c612:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c614:	401e      	ands	r6, r3
   1c616:	d1e6      	bne.n	1c5e6 <_fclose_r+0x8a>
   1c618:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c61a:	f7fe fd49 	bl	1b0b0 <__retarget_lock_release_recursive>
   1c61e:	e7e3      	b.n	1c5e8 <_fclose_r+0x8c>
   1c620:	2601      	movs	r6, #1
   1c622:	4276      	negs	r6, r6
   1c624:	e7b7      	b.n	1c596 <_fclose_r+0x3a>
   1c626:	46c0      	nop			; (mov r8, r8)

0001c628 <__fputwc>:
   1c628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c62a:	46ce      	mov	lr, r9
   1c62c:	4647      	mov	r7, r8
   1c62e:	b580      	push	{r7, lr}
   1c630:	b085      	sub	sp, #20
   1c632:	4680      	mov	r8, r0
   1c634:	4689      	mov	r9, r1
   1c636:	0014      	movs	r4, r2
   1c638:	f7fa fff2 	bl	17620 <__locale_mb_cur_max>
   1c63c:	2801      	cmp	r0, #1
   1c63e:	d031      	beq.n	1c6a4 <__fputwc+0x7c>
   1c640:	0023      	movs	r3, r4
   1c642:	af03      	add	r7, sp, #12
   1c644:	335c      	adds	r3, #92	; 0x5c
   1c646:	464a      	mov	r2, r9
   1c648:	0039      	movs	r1, r7
   1c64a:	4640      	mov	r0, r8
   1c64c:	f000 f912 	bl	1c874 <_wcrtomb_r>
   1c650:	0006      	movs	r6, r0
   1c652:	1c43      	adds	r3, r0, #1
   1c654:	d021      	beq.n	1c69a <__fputwc+0x72>
   1c656:	2800      	cmp	r0, #0
   1c658:	d030      	beq.n	1c6bc <__fputwc+0x94>
   1c65a:	7839      	ldrb	r1, [r7, #0]
   1c65c:	2500      	movs	r5, #0
   1c65e:	e007      	b.n	1c670 <__fputwc+0x48>
   1c660:	6823      	ldr	r3, [r4, #0]
   1c662:	1c5a      	adds	r2, r3, #1
   1c664:	6022      	str	r2, [r4, #0]
   1c666:	7019      	strb	r1, [r3, #0]
   1c668:	3501      	adds	r5, #1
   1c66a:	42b5      	cmp	r5, r6
   1c66c:	d226      	bcs.n	1c6bc <__fputwc+0x94>
   1c66e:	5d79      	ldrb	r1, [r7, r5]
   1c670:	68a3      	ldr	r3, [r4, #8]
   1c672:	3b01      	subs	r3, #1
   1c674:	60a3      	str	r3, [r4, #8]
   1c676:	2b00      	cmp	r3, #0
   1c678:	daf2      	bge.n	1c660 <__fputwc+0x38>
   1c67a:	69a2      	ldr	r2, [r4, #24]
   1c67c:	4293      	cmp	r3, r2
   1c67e:	db01      	blt.n	1c684 <__fputwc+0x5c>
   1c680:	290a      	cmp	r1, #10
   1c682:	d1ed      	bne.n	1c660 <__fputwc+0x38>
   1c684:	0022      	movs	r2, r4
   1c686:	4640      	mov	r0, r8
   1c688:	f000 f896 	bl	1c7b8 <__swbuf_r>
   1c68c:	1c43      	adds	r3, r0, #1
   1c68e:	d1eb      	bne.n	1c668 <__fputwc+0x40>
   1c690:	b005      	add	sp, #20
   1c692:	bc0c      	pop	{r2, r3}
   1c694:	4690      	mov	r8, r2
   1c696:	4699      	mov	r9, r3
   1c698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c69a:	2240      	movs	r2, #64	; 0x40
   1c69c:	89a3      	ldrh	r3, [r4, #12]
   1c69e:	4313      	orrs	r3, r2
   1c6a0:	81a3      	strh	r3, [r4, #12]
   1c6a2:	e7f5      	b.n	1c690 <__fputwc+0x68>
   1c6a4:	464b      	mov	r3, r9
   1c6a6:	3b01      	subs	r3, #1
   1c6a8:	2bfe      	cmp	r3, #254	; 0xfe
   1c6aa:	d8c9      	bhi.n	1c640 <__fputwc+0x18>
   1c6ac:	466a      	mov	r2, sp
   1c6ae:	464b      	mov	r3, r9
   1c6b0:	71d3      	strb	r3, [r2, #7]
   1c6b2:	79d1      	ldrb	r1, [r2, #7]
   1c6b4:	af03      	add	r7, sp, #12
   1c6b6:	7039      	strb	r1, [r7, #0]
   1c6b8:	2601      	movs	r6, #1
   1c6ba:	e7cf      	b.n	1c65c <__fputwc+0x34>
   1c6bc:	4648      	mov	r0, r9
   1c6be:	e7e7      	b.n	1c690 <__fputwc+0x68>

0001c6c0 <_fputwc_r>:
   1c6c0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1c6c2:	b570      	push	{r4, r5, r6, lr}
   1c6c4:	0005      	movs	r5, r0
   1c6c6:	000e      	movs	r6, r1
   1c6c8:	0014      	movs	r4, r2
   1c6ca:	07db      	lsls	r3, r3, #31
   1c6cc:	d41e      	bmi.n	1c70c <_fputwc_r+0x4c>
   1c6ce:	230c      	movs	r3, #12
   1c6d0:	5ed2      	ldrsh	r2, [r2, r3]
   1c6d2:	b291      	uxth	r1, r2
   1c6d4:	058b      	lsls	r3, r1, #22
   1c6d6:	d516      	bpl.n	1c706 <_fputwc_r+0x46>
   1c6d8:	2380      	movs	r3, #128	; 0x80
   1c6da:	019b      	lsls	r3, r3, #6
   1c6dc:	4219      	tst	r1, r3
   1c6de:	d104      	bne.n	1c6ea <_fputwc_r+0x2a>
   1c6e0:	431a      	orrs	r2, r3
   1c6e2:	81a2      	strh	r2, [r4, #12]
   1c6e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1c6e6:	4313      	orrs	r3, r2
   1c6e8:	6663      	str	r3, [r4, #100]	; 0x64
   1c6ea:	0028      	movs	r0, r5
   1c6ec:	0022      	movs	r2, r4
   1c6ee:	0031      	movs	r1, r6
   1c6f0:	f7ff ff9a 	bl	1c628 <__fputwc>
   1c6f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c6f6:	0005      	movs	r5, r0
   1c6f8:	07db      	lsls	r3, r3, #31
   1c6fa:	d402      	bmi.n	1c702 <_fputwc_r+0x42>
   1c6fc:	89a3      	ldrh	r3, [r4, #12]
   1c6fe:	059b      	lsls	r3, r3, #22
   1c700:	d508      	bpl.n	1c714 <_fputwc_r+0x54>
   1c702:	0028      	movs	r0, r5
   1c704:	bd70      	pop	{r4, r5, r6, pc}
   1c706:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c708:	f7fe fcd0 	bl	1b0ac <__retarget_lock_acquire_recursive>
   1c70c:	230c      	movs	r3, #12
   1c70e:	5ee2      	ldrsh	r2, [r4, r3]
   1c710:	b291      	uxth	r1, r2
   1c712:	e7e1      	b.n	1c6d8 <_fputwc_r+0x18>
   1c714:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c716:	f7fe fccb 	bl	1b0b0 <__retarget_lock_release_recursive>
   1c71a:	e7f2      	b.n	1c702 <_fputwc_r+0x42>

0001c71c <_fstat_r>:
   1c71c:	2300      	movs	r3, #0
   1c71e:	b570      	push	{r4, r5, r6, lr}
   1c720:	4c07      	ldr	r4, [pc, #28]	; (1c740 <_fstat_r+0x24>)
   1c722:	0005      	movs	r5, r0
   1c724:	0008      	movs	r0, r1
   1c726:	0011      	movs	r1, r2
   1c728:	6023      	str	r3, [r4, #0]
   1c72a:	f7e8 fea8 	bl	547e <_fstat>
   1c72e:	1c43      	adds	r3, r0, #1
   1c730:	d000      	beq.n	1c734 <_fstat_r+0x18>
   1c732:	bd70      	pop	{r4, r5, r6, pc}
   1c734:	6823      	ldr	r3, [r4, #0]
   1c736:	2b00      	cmp	r3, #0
   1c738:	d0fb      	beq.n	1c732 <_fstat_r+0x16>
   1c73a:	602b      	str	r3, [r5, #0]
   1c73c:	e7f9      	b.n	1c732 <_fstat_r+0x16>
   1c73e:	46c0      	nop			; (mov r8, r8)
   1c740:	20002e40 	.word	0x20002e40

0001c744 <_isatty_r>:
   1c744:	2300      	movs	r3, #0
   1c746:	b570      	push	{r4, r5, r6, lr}
   1c748:	4c06      	ldr	r4, [pc, #24]	; (1c764 <_isatty_r+0x20>)
   1c74a:	0005      	movs	r5, r0
   1c74c:	0008      	movs	r0, r1
   1c74e:	6023      	str	r3, [r4, #0]
   1c750:	f7e8 fe9a 	bl	5488 <_isatty>
   1c754:	1c43      	adds	r3, r0, #1
   1c756:	d000      	beq.n	1c75a <_isatty_r+0x16>
   1c758:	bd70      	pop	{r4, r5, r6, pc}
   1c75a:	6823      	ldr	r3, [r4, #0]
   1c75c:	2b00      	cmp	r3, #0
   1c75e:	d0fb      	beq.n	1c758 <_isatty_r+0x14>
   1c760:	602b      	str	r3, [r5, #0]
   1c762:	e7f9      	b.n	1c758 <_isatty_r+0x14>
   1c764:	20002e40 	.word	0x20002e40

0001c768 <_lseek_r>:
   1c768:	b570      	push	{r4, r5, r6, lr}
   1c76a:	0005      	movs	r5, r0
   1c76c:	0008      	movs	r0, r1
   1c76e:	0011      	movs	r1, r2
   1c770:	2200      	movs	r2, #0
   1c772:	4c06      	ldr	r4, [pc, #24]	; (1c78c <_lseek_r+0x24>)
   1c774:	6022      	str	r2, [r4, #0]
   1c776:	001a      	movs	r2, r3
   1c778:	f7e8 fe88 	bl	548c <_lseek>
   1c77c:	1c43      	adds	r3, r0, #1
   1c77e:	d000      	beq.n	1c782 <_lseek_r+0x1a>
   1c780:	bd70      	pop	{r4, r5, r6, pc}
   1c782:	6823      	ldr	r3, [r4, #0]
   1c784:	2b00      	cmp	r3, #0
   1c786:	d0fb      	beq.n	1c780 <_lseek_r+0x18>
   1c788:	602b      	str	r3, [r5, #0]
   1c78a:	e7f9      	b.n	1c780 <_lseek_r+0x18>
   1c78c:	20002e40 	.word	0x20002e40

0001c790 <_read_r>:
   1c790:	b570      	push	{r4, r5, r6, lr}
   1c792:	0005      	movs	r5, r0
   1c794:	0008      	movs	r0, r1
   1c796:	0011      	movs	r1, r2
   1c798:	2200      	movs	r2, #0
   1c79a:	4c06      	ldr	r4, [pc, #24]	; (1c7b4 <_read_r+0x24>)
   1c79c:	6022      	str	r2, [r4, #0]
   1c79e:	001a      	movs	r2, r3
   1c7a0:	f7e8 fe0e 	bl	53c0 <_read>
   1c7a4:	1c43      	adds	r3, r0, #1
   1c7a6:	d000      	beq.n	1c7aa <_read_r+0x1a>
   1c7a8:	bd70      	pop	{r4, r5, r6, pc}
   1c7aa:	6823      	ldr	r3, [r4, #0]
   1c7ac:	2b00      	cmp	r3, #0
   1c7ae:	d0fb      	beq.n	1c7a8 <_read_r+0x18>
   1c7b0:	602b      	str	r3, [r5, #0]
   1c7b2:	e7f9      	b.n	1c7a8 <_read_r+0x18>
   1c7b4:	20002e40 	.word	0x20002e40

0001c7b8 <__swbuf_r>:
   1c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7ba:	0006      	movs	r6, r0
   1c7bc:	000d      	movs	r5, r1
   1c7be:	0014      	movs	r4, r2
   1c7c0:	2800      	cmp	r0, #0
   1c7c2:	d002      	beq.n	1c7ca <__swbuf_r+0x12>
   1c7c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c7c6:	2b00      	cmp	r3, #0
   1c7c8:	d04e      	beq.n	1c868 <__swbuf_r+0xb0>
   1c7ca:	69a3      	ldr	r3, [r4, #24]
   1c7cc:	60a3      	str	r3, [r4, #8]
   1c7ce:	230c      	movs	r3, #12
   1c7d0:	5ee0      	ldrsh	r0, [r4, r3]
   1c7d2:	b281      	uxth	r1, r0
   1c7d4:	070b      	lsls	r3, r1, #28
   1c7d6:	d53c      	bpl.n	1c852 <__swbuf_r+0x9a>
   1c7d8:	6923      	ldr	r3, [r4, #16]
   1c7da:	2b00      	cmp	r3, #0
   1c7dc:	d039      	beq.n	1c852 <__swbuf_r+0x9a>
   1c7de:	22ff      	movs	r2, #255	; 0xff
   1c7e0:	b2ef      	uxtb	r7, r5
   1c7e2:	4015      	ands	r5, r2
   1c7e4:	2280      	movs	r2, #128	; 0x80
   1c7e6:	0192      	lsls	r2, r2, #6
   1c7e8:	4211      	tst	r1, r2
   1c7ea:	d015      	beq.n	1c818 <__swbuf_r+0x60>
   1c7ec:	6822      	ldr	r2, [r4, #0]
   1c7ee:	6961      	ldr	r1, [r4, #20]
   1c7f0:	1ad3      	subs	r3, r2, r3
   1c7f2:	428b      	cmp	r3, r1
   1c7f4:	da1b      	bge.n	1c82e <__swbuf_r+0x76>
   1c7f6:	3301      	adds	r3, #1
   1c7f8:	68a1      	ldr	r1, [r4, #8]
   1c7fa:	3901      	subs	r1, #1
   1c7fc:	60a1      	str	r1, [r4, #8]
   1c7fe:	1c51      	adds	r1, r2, #1
   1c800:	6021      	str	r1, [r4, #0]
   1c802:	7017      	strb	r7, [r2, #0]
   1c804:	6962      	ldr	r2, [r4, #20]
   1c806:	429a      	cmp	r2, r3
   1c808:	d01a      	beq.n	1c840 <__swbuf_r+0x88>
   1c80a:	89a3      	ldrh	r3, [r4, #12]
   1c80c:	07db      	lsls	r3, r3, #31
   1c80e:	d501      	bpl.n	1c814 <__swbuf_r+0x5c>
   1c810:	2d0a      	cmp	r5, #10
   1c812:	d015      	beq.n	1c840 <__swbuf_r+0x88>
   1c814:	0028      	movs	r0, r5
   1c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c818:	4302      	orrs	r2, r0
   1c81a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1c81c:	81a2      	strh	r2, [r4, #12]
   1c81e:	4a14      	ldr	r2, [pc, #80]	; (1c870 <__swbuf_r+0xb8>)
   1c820:	400a      	ands	r2, r1
   1c822:	6662      	str	r2, [r4, #100]	; 0x64
   1c824:	6961      	ldr	r1, [r4, #20]
   1c826:	6822      	ldr	r2, [r4, #0]
   1c828:	1ad3      	subs	r3, r2, r3
   1c82a:	428b      	cmp	r3, r1
   1c82c:	dbe3      	blt.n	1c7f6 <__swbuf_r+0x3e>
   1c82e:	0021      	movs	r1, r4
   1c830:	0030      	movs	r0, r6
   1c832:	f7fe f89f 	bl	1a974 <_fflush_r>
   1c836:	2800      	cmp	r0, #0
   1c838:	d108      	bne.n	1c84c <__swbuf_r+0x94>
   1c83a:	6822      	ldr	r2, [r4, #0]
   1c83c:	2301      	movs	r3, #1
   1c83e:	e7db      	b.n	1c7f8 <__swbuf_r+0x40>
   1c840:	0021      	movs	r1, r4
   1c842:	0030      	movs	r0, r6
   1c844:	f7fe f896 	bl	1a974 <_fflush_r>
   1c848:	2800      	cmp	r0, #0
   1c84a:	d0e3      	beq.n	1c814 <__swbuf_r+0x5c>
   1c84c:	2501      	movs	r5, #1
   1c84e:	426d      	negs	r5, r5
   1c850:	e7e0      	b.n	1c814 <__swbuf_r+0x5c>
   1c852:	0021      	movs	r1, r4
   1c854:	0030      	movs	r0, r6
   1c856:	f7fc fef9 	bl	1964c <__swsetup_r>
   1c85a:	2800      	cmp	r0, #0
   1c85c:	d1f6      	bne.n	1c84c <__swbuf_r+0x94>
   1c85e:	230c      	movs	r3, #12
   1c860:	5ee0      	ldrsh	r0, [r4, r3]
   1c862:	6923      	ldr	r3, [r4, #16]
   1c864:	b281      	uxth	r1, r0
   1c866:	e7ba      	b.n	1c7de <__swbuf_r+0x26>
   1c868:	f7fe f8de 	bl	1aa28 <__sinit>
   1c86c:	e7ad      	b.n	1c7ca <__swbuf_r+0x12>
   1c86e:	46c0      	nop			; (mov r8, r8)
   1c870:	ffffdfff 	.word	0xffffdfff

0001c874 <_wcrtomb_r>:
   1c874:	b570      	push	{r4, r5, r6, lr}
   1c876:	001d      	movs	r5, r3
   1c878:	4b11      	ldr	r3, [pc, #68]	; (1c8c0 <_wcrtomb_r+0x4c>)
   1c87a:	b084      	sub	sp, #16
   1c87c:	681b      	ldr	r3, [r3, #0]
   1c87e:	0004      	movs	r4, r0
   1c880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c882:	2900      	cmp	r1, #0
   1c884:	d00e      	beq.n	1c8a4 <_wcrtomb_r+0x30>
   1c886:	2b00      	cmp	r3, #0
   1c888:	d016      	beq.n	1c8b8 <_wcrtomb_r+0x44>
   1c88a:	20e0      	movs	r0, #224	; 0xe0
   1c88c:	581e      	ldr	r6, [r3, r0]
   1c88e:	002b      	movs	r3, r5
   1c890:	0020      	movs	r0, r4
   1c892:	47b0      	blx	r6
   1c894:	1c43      	adds	r3, r0, #1
   1c896:	d103      	bne.n	1c8a0 <_wcrtomb_r+0x2c>
   1c898:	2300      	movs	r3, #0
   1c89a:	602b      	str	r3, [r5, #0]
   1c89c:	338a      	adds	r3, #138	; 0x8a
   1c89e:	6023      	str	r3, [r4, #0]
   1c8a0:	b004      	add	sp, #16
   1c8a2:	bd70      	pop	{r4, r5, r6, pc}
   1c8a4:	2b00      	cmp	r3, #0
   1c8a6:	d009      	beq.n	1c8bc <_wcrtomb_r+0x48>
   1c8a8:	22e0      	movs	r2, #224	; 0xe0
   1c8aa:	a901      	add	r1, sp, #4
   1c8ac:	589e      	ldr	r6, [r3, r2]
   1c8ae:	0020      	movs	r0, r4
   1c8b0:	002b      	movs	r3, r5
   1c8b2:	2200      	movs	r2, #0
   1c8b4:	47b0      	blx	r6
   1c8b6:	e7ed      	b.n	1c894 <_wcrtomb_r+0x20>
   1c8b8:	4b02      	ldr	r3, [pc, #8]	; (1c8c4 <_wcrtomb_r+0x50>)
   1c8ba:	e7e6      	b.n	1c88a <_wcrtomb_r+0x16>
   1c8bc:	4b01      	ldr	r3, [pc, #4]	; (1c8c4 <_wcrtomb_r+0x50>)
   1c8be:	e7f3      	b.n	1c8a8 <_wcrtomb_r+0x34>
   1c8c0:	20000018 	.word	0x20000018
   1c8c4:	20000448 	.word	0x20000448

0001c8c8 <__aeabi_dcmpun>:
   1c8c8:	b570      	push	{r4, r5, r6, lr}
   1c8ca:	4e0e      	ldr	r6, [pc, #56]	; (1c904 <__aeabi_dcmpun+0x3c>)
   1c8cc:	030d      	lsls	r5, r1, #12
   1c8ce:	031c      	lsls	r4, r3, #12
   1c8d0:	0049      	lsls	r1, r1, #1
   1c8d2:	005b      	lsls	r3, r3, #1
   1c8d4:	0b2d      	lsrs	r5, r5, #12
   1c8d6:	0d49      	lsrs	r1, r1, #21
   1c8d8:	0b24      	lsrs	r4, r4, #12
   1c8da:	0d5b      	lsrs	r3, r3, #21
   1c8dc:	42b1      	cmp	r1, r6
   1c8de:	d004      	beq.n	1c8ea <__aeabi_dcmpun+0x22>
   1c8e0:	4908      	ldr	r1, [pc, #32]	; (1c904 <__aeabi_dcmpun+0x3c>)
   1c8e2:	2000      	movs	r0, #0
   1c8e4:	428b      	cmp	r3, r1
   1c8e6:	d008      	beq.n	1c8fa <__aeabi_dcmpun+0x32>
   1c8e8:	bd70      	pop	{r4, r5, r6, pc}
   1c8ea:	4305      	orrs	r5, r0
   1c8ec:	2001      	movs	r0, #1
   1c8ee:	2d00      	cmp	r5, #0
   1c8f0:	d1fa      	bne.n	1c8e8 <__aeabi_dcmpun+0x20>
   1c8f2:	4904      	ldr	r1, [pc, #16]	; (1c904 <__aeabi_dcmpun+0x3c>)
   1c8f4:	2000      	movs	r0, #0
   1c8f6:	428b      	cmp	r3, r1
   1c8f8:	d1f6      	bne.n	1c8e8 <__aeabi_dcmpun+0x20>
   1c8fa:	4314      	orrs	r4, r2
   1c8fc:	0020      	movs	r0, r4
   1c8fe:	1e44      	subs	r4, r0, #1
   1c900:	41a0      	sbcs	r0, r4
   1c902:	e7f1      	b.n	1c8e8 <__aeabi_dcmpun+0x20>
   1c904:	000007ff 	.word	0x000007ff
   1c908:	52455355 	.word	0x52455355
   1c90c:	414f4220 	.word	0x414f4220
   1c910:	00004452 	.word	0x00004452
   1c914:	5f534c4d 	.word	0x5f534c4d
   1c918:	5f4b4453 	.word	0x5f4b4453
   1c91c:	5f305f31 	.word	0x5f305f31
   1c920:	00355f50 	.word	0x00355f50
   1c924:	2074634f 	.word	0x2074634f
   1c928:	32203033 	.word	0x32203033
   1c92c:	00303230 	.word	0x00303230
   1c930:	333a3830 	.word	0x333a3830
   1c934:	30343a37 	.word	0x30343a37
   1c938:	00000000 	.word	0x00000000
   1c93c:	61766e69 	.word	0x61766e69
   1c940:	5f64696c 	.word	0x5f64696c
   1c944:	61726170 	.word	0x61726170
   1c948:	006d      	.short	0x006d

0001c94a <gParserStartCmdSize>:
   1c94a:	0002                                        ..

0001c94c <maParserBaseCmd>:
   1c94c:	cf9c 0001 c96c 0001 0000 0000 0009 0000     ....l...........
   1c95c:	cfa0 0001 cf0c 0001 0000 0000 0005 0000     ................

0001c96c <maParserLoraCmd>:
   1c96c:	cfb8 0001 0000 0000 07b5 0000 0100 0000     ................
   1c97c:	cfe4 0001 0000 0000 08b1 0000 0100 0000     ................
   1c98c:	cfec 0001 0000 0000 08ed 0000 0300 0000     ................
   1c99c:	cfa4 0001 ccec 0001 0000 0000 0021 0000     ............!...
   1c9ac:	cfc0 0001 ca2c 0001 0000 0000 0028 0000     ....,.......(...
   1c9bc:	cff0 0001 0000 0000 118d 0000 0000 0000     ................
   1c9cc:	cff8 0001 0000 0000 11b1 0000 0000 0000     ................
   1c9dc:	d000 0001 0000 0000 11c9 0000 0000 0000     ................
   1c9ec:	d008 0001 0000 0000 13bd 0000 0000 0000     ................

0001c9fc <maParserLoraGetChCmd>:
   1c9fc:	d1f4 0001 0000 0000 0db1 0000 0100 0000     ................
   1ca0c:	d04c 0001 0000 0000 0fbd 0000 0100 0000     L...............
   1ca1c:	d1fc 0001 0000 0000 1099 0000 0100 0000     ................

0001ca2c <maParserLoraGetCmd>:
   1ca2c:	d014 0001 0000 0000 09d5 0000 0000 0000     ................
   1ca3c:	d018 0001 0000 0000 0a45 0000 0000 0000     ........E.......
   1ca4c:	d01c 0001 0000 0000 0ae1 0000 0000 0000     ................
   1ca5c:	d024 0001 0000 0000 0b79 0000 0000 0000     $.......y.......
   1ca6c:	d02c 0001 0000 0000 0c01 0000 0000 0000     ,...............
   1ca7c:	d3a4 0001 c9fc 0001 0000 0000 0003 0000     ................
   1ca8c:	d034 0001 0000 0000 1159 0000 0000 0000     4.......Y.......
   1ca9c:	d03c 0001 0000 0000 1241 0000 0000 0000     <.......A.......
   1caac:	d040 0001 0000 0000 15b9 0000 0000 0000     @...............
   1cabc:	d04c 0001 0000 0000 1675 0000 0000 0000     L.......u.......
   1cacc:	d054 0001 0000 0000 1799 0000 0000 0000     T...............
   1cadc:	d05c 0001 0000 0000 17cd 0000 0000 0000     \...............
   1caec:	d064 0001 0000 0000 1801 0000 0000 0000     d...............
   1cafc:	d06c 0001 0000 0000 1835 0000 0000 0000     l.......5.......
   1cb0c:	d074 0001 0000 0000 18a5 0000 0000 0000     t...............
   1cb1c:	d078 0001 0000 0000 1921 0000 0000 0000     x.......!.......
   1cb2c:	d084 0001 0000 0000 1955 0000 0000 0000     ........U.......
   1cb3c:	d634 0001 0000 0000 1989 0000 0000 0000     4...............
   1cb4c:	d090 0001 0000 0000 14d1 0000 0000 0000     ................
   1cb5c:	d098 0001 0000 0000 1505 0000 0000 0000     ................
   1cb6c:	d0a0 0001 0000 0000 1535 0000 0000 0000     ........5.......
   1cb7c:	d0a8 0001 0000 0000 12f5 0000 0000 0000     ................
   1cb8c:	d0ac 0001 0000 0000 1a01 0000 0000 0000     ................
   1cb9c:	d0b4 0001 0000 0000 1a45 0000 0000 0000     ........E.......
   1cbac:	d0c8 0001 0000 0000 1af1 0000 0100 0000     ................
   1cbbc:	d0d4 0001 0000 0000 1b3d 0000 0100 0000     ........=.......
   1cbcc:	d0e0 0001 0000 0000 1c0d 0000 0100 0000     ................
   1cbdc:	d0f0 0001 0000 0000 1da5 0000 0100 0000     ................
   1cbec:	d0fc 0001 0000 0000 1e3d 0000 0100 0000     ........=.......
   1cbfc:	d104 0001 ccac 0001 0000 0000 0001 0000     ................
   1cc0c:	d10c 0001 0000 0000 1e8d 0000 0000 0000     ................
   1cc1c:	d114 0001 0000 0000 1ec1 0000 0000 0000     ................
   1cc2c:	d120 0001 0000 0000 1eed 0000 0000 0000      ...............
   1cc3c:	d128 0001 0000 0000 1f19 0000 0000 0000     (...............
   1cc4c:	d164 0001 0000 0000 1f4d 0000 0000 0000     d.......M.......
   1cc5c:	d134 0001 0000 0000 1f7d 0000 0000 0000     4.......}.......
   1cc6c:	d140 0001 0000 0000 1fb1 0000 0000 0000     @...............
   1cc7c:	d150 0001 0000 0000 1fe5 0000 0000 0000     P...............
   1cc8c:	d160 0001 0000 0000 2019 0000 0000 0000     `........ ......
   1cc9c:	d174 0001 0000 0000 20c5 0000 0000 0000     t........ ......

0001ccac <maParserLoraGetSubBandCmd>:
   1ccac:	d04c 0001 0000 0000 0ead 0000 0100 0000     L...............

0001ccbc <maParserLoraSetChCmd>:
   1ccbc:	d1f4 0001 0000 0000 0d39 0000 0200 0000     ........9.......
   1cccc:	d04c 0001 0000 0000 0f55 0000 0200 0000     L.......U.......
   1ccdc:	d1fc 0001 0000 0000 1009 0000 0300 0000     ................

0001ccec <maParserLoraSetCmd>:
   1ccec:	d014 0001 0000 0000 0999 0000 0100 0000     ................
   1ccfc:	d018 0001 0000 0000 0a09 0000 0100 0000     ................
   1cd0c:	d01c 0001 0000 0000 0a71 0000 0100 0000     ........q.......
   1cd1c:	d024 0001 0000 0000 0b21 0000 0100 0000     $.......!.......
   1cd2c:	d02c 0001 0000 0000 0ba9 0000 0100 0000     ,...............
   1cd3c:	d188 0001 0000 0000 0c31 0000 0100 0000     ........1.......
   1cd4c:	d190 0001 0000 0000 0c89 0000 0100 0000     ................
   1cd5c:	d198 0001 0000 0000 0ce1 0000 0100 0000     ................
   1cd6c:	d034 0001 0000 0000 110d 0000 0100 0000     4...............
   1cd7c:	d3a4 0001 ccbc 0001 0000 0000 0003 0000     ................
   1cd8c:	d03c 0001 0000 0000 11d5 0000 0200 0000     <...............
   1cd9c:	d1a0 0001 0000 0000 16b5 0000 0100 0000     ................
   1cdac:	d054 0001 0000 0000 1701 0000 0100 0000     T...............
   1cdbc:	d05c 0001 0000 0000 174d 0000 0100 0000     \.......M.......
   1cdcc:	d074 0001 0000 0000 1869 0000 0100 0000     t.......i.......
   1cddc:	d078 0001 0000 0000 18d1 0000 0100 0000     x...............
   1cdec:	d1a4 0001 0000 0000 1565 0000 0100 0000     ........e.......
   1cdfc:	d090 0001 0000 0000 146d 0000 0100 0000     ........m.......
   1ce0c:	d098 0001 0000 0000 13d5 0000 0100 0000     ................
   1ce1c:	d0a0 0001 0000 0000 1421 0000 0100 0000     ........!.......
   1ce2c:	d0a8 0001 0000 0000 12a1 0000 0500 0000     ................
   1ce3c:	d0ac 0001 0000 0000 19b5 0000 0100 0000     ................
   1ce4c:	d0c8 0001 0000 0000 1aa5 0000 0200 0000     ................
   1ce5c:	d0e0 0001 0000 0000 1b8d 0000 0200 0000     ................
   1ce6c:	d1ac 0001 0000 0000 1c6d 0000 0200 0000     ........m.......
   1ce7c:	d1bc 0001 0000 0000 1cd5 0000 0200 0000     ................
   1ce8c:	d0f0 0001 0000 0000 1d3d 0000 0200 0000     ........=.......
   1ce9c:	d0fc 0001 0000 0000 1df5 0000 0200 0000     ................
   1ceac:	d040 0001 0000 0000 15ed 0000 0100 0000     @...............
   1cebc:	d1cc 0001 0000 0000 1639 0000 0100 0000     ........9.......
   1cecc:	d104 0001 cefc 0001 0000 0000 0001 0000     ................
   1cedc:	d174 0001 0000 0000 2049 0000 0100 0000     t.......I ......
   1ceec:	d1e0 0001 0000 0000 2089 0000 0100 0000     ......... ......

0001cefc <maParserLoraSetSubBandCmd>:
   1cefc:	d04c 0001 0000 0000 0e01 0000 0200 0000     L...............

0001cf0c <maParserSysCmd>:
   1cf0c:	cfa4 0001 cf8c 0001 0000 0000 0001 0000     ................
   1cf1c:	cfa8 0001 0000 0000 225d 0000 0000 0000     ........]"......
   1cf2c:	cfb8 0001 0000 0000 2241 0000 0000 0000     ........A"......
   1cf3c:	cfc0 0001 cf5c 0001 0000 0000 0003 0000     ....\...........
   1cf4c:	cfc4 0001 0000 0000 2281 0000 0200 0000     ........."......

0001cf5c <maParserSysGetCmd>:
   1cf5c:	cfcc 0001 0000 0000 2199 0000 0000 0000     .........!......
   1cf6c:	cfd0 0001 0000 0000 216d 0000 0000 0000     ........m!......
   1cf7c:	cfd8 0001 0000 0000 21b1 0000 0000 0000     .........!......

0001cf8c <maParserSysSetCmd>:
   1cf8c:	cfd8 0001 0000 0000 21e1 0000 0100 0000     .........!......
   1cf9c:	616d 0063 7973 0073 6573 0074 6166 7463     mac.sys.set.fact
   1cfac:	726f 5279 5345 5445 0000 0000 6572 6573     oryRESET....rese
   1cfbc:	0074 0000 6567 0074 6c73 6565 0070 0000     t...get.sleep...
   1cfcc:	6576 0072 7768 7565 0069 0000 7563 7473     ver.hweui...cust
   1cfdc:	6d6f 6170 6172 006d 6f6a 6e69 0000 0000     omparam.join....
   1cfec:	7874 0000 6170 7375 0065 0000 6572 7573     tx..pause...resu
   1cffc:	656d 0000 6173 6576 0000 0000 6f66 6372     me..save....forc
   1d00c:	4565 414e 4c42 0045 7264 0000 6461 0072     eENABLE.dr..adr.
   1d01c:	6564 6176 6464 0072 6564 6576 6975 0000     devaddr.deveui..
   1d02c:	6f6a 6e69 7565 0069 7770 6972 7864 0000     joineui.pwridx..
   1d03c:	7872 0032 6761 6467 7963 6c63 0065 0000     rx2.aggdcycle...
   1d04c:	7473 7461 7375 0000 6572 7874 0000 0000     status..retx....
   1d05c:	6572 7370 0000 0000 726d 6e67 0000 0000     reps....mrgn....
   1d06c:	7767 626e 0000 0000 7261 0000 7872 6564     gwnb....ar..rxde
   1d07c:	616c 3179 0000 0000 7872 6564 616c 3279     lay1....rxdelay2
   1d08c:	0000 0000 7973 636e 0000 0000 7075 7463     ....sync....upct
   1d09c:	0072 0000 6e64 7463 0072 0000 626c 0074     r...dnctr...lbt.
   1d0ac:	6465 6c63 7361 0073 6465 6c63 7361 7373     edclass.edclasss
   1d0bc:	7075 6f70 7472 6465 0000 0000 636d 7361     upported....mcas
   1d0cc:	6574 616e 6c62 0065 636d 7361 6474 636e     tenable.mcastdnc
   1d0dc:	7274 0000 636d 7361 6474 7665 6461 7264     tr..mcastdevaddr
   1d0ec:	0000 0000 636d 7361 6674 6572 0071 0000     ....mcastfreq...
   1d0fc:	636d 7361 6474 0072 7573 6262 6e61 0064     mcastdr.subband.
   1d10c:	6b70 7274 7373 0069 7369 7066 6e65 6964     pktrssi.isfpendi
   1d11c:	676e 0000 7369 6c64 6361 006b 616c 7473     ng..isdlack.last
   1d12c:	6863 6469 0000 0000 6e63 7266 7465 7972     chid....cnfretry
   1d13c:	6e63 0074 6e75 6e63 7266 7465 7972 6e63     cnt.uncnfretrycn
   1d14c:	0074 0000 786e 5074 7961 6f6c 6461 6953     t...nxtPayloadSi
   1d15c:	657a 0000 6f6a 6e69 7564 7974 7963 6c63     ze..joindutycycl
   1d16c:	7465 6d69 0065 0000 6f6a 6e69 6162 6b63     etime...joinback
   1d17c:	666f 6566 616e 6c62 0065 0000 776e 736b     offenable...nwks
   1d18c:	656b 0079 7061 7370 656b 0079 7061 6b70     key.appskey.appk
   1d19c:	7965 0000 6162 0074 696c 6b6e 6863 006b     ey..bat.linkchk.
   1d1ac:	636d 7361 6e74 6b77 6b73 7965 0000 0000     mcastnwkskey....
   1d1bc:	636d 7361 6174 7070 6b73 7965 0000 0000     mcastappskey....
   1d1cc:	7263 7079 6f74 6564 6576 616e 6c62 6465     cryptodevenabled
   1d1dc:	0000 0000 616d 4678 6e63 5074 7364 7055     ....maxFcntPdsUp
   1d1ec:	7464 6156 006c 0000 7266 7165 0000 0000     dtVal...freq....
   1d1fc:	7264 6172 676e 0065 048a 0000 04fc 0000     drrange.........
   1d20c:	0506 0000 0510 0000 051a 0000 0524 0000     ............$...
   1d21c:	054c 0000 0556 0000 056a 0000 0574 0000     L...V...j...t...
   1d22c:	057e 0000 0588 0000 0592 0000 059c 0000     ~...............
   1d23c:	0476 0000 052e 0000 0538 0000 0542 0000     v.......8...B...
   1d24c:	0560 0000 0476 0000 0476 0000 0476 0000     `...v...v...v...
   1d25c:	05a6 0000 05ca 0000 05d4 0000 05f2 0000     ................
   1d26c:	05fc 0000 0606 0000 0610 0000 061a 0000     ................
   1d27c:	0624 0000 05c0 0000 062e 0000 0638 0000     $...........8...
   1d28c:	0642 0000 064c 0000 0656 0000 067e 0000     B...L...V...~...
   1d29c:	0688 0000 069c 0000 06a6 0000 06b0 0000     ................
   1d2ac:	06ba 0000 06c4 0000 06ce 0000 0476 0000     ............v...
   1d2bc:	0660 0000 066a 0000 0674 0000 0692 0000     `...j...t.......
   1d2cc:	05e8 0000 05de 0000 0476 0000 06d8 0000     ........v.......
   1d2dc:	616d 5f63 7872 0020 6361 5f6b 6572 6563     mac_rx .ack_rece
   1d2ec:	7669 6465 0000 0000 6f6e 5f74 6f6a 6e69     ived....not_join
   1d2fc:	6465 0000 656b 7379 6e5f 746f 695f 696e     ed..keys_not_ini
   1d30c:	0074 0000 6973 656c 746e 0000 7266 6d61     t...silent..fram
   1d31c:	635f 756f 746e 7265 655f 7272 725f 6a65     _counter_err_rej
   1d32c:	696f 5f6e 656e 6465 6465 0000 6e69 6176     oin_needed..inva
   1d33c:	696c 5f64 6366 746e 0072 0000 696d 5f63     lid_fcntr...mic_
   1d34c:	7265 6f72 0072 0000 6e69 6176 696c 5f64     error...invalid_
   1d35c:	746d 7079 0065 0000 6e69 6176 696c 5f64     mtype...invalid_
   1d36c:	7562 6666 7265 6c5f 6e65 7467 0068 0000     buffer_length...
   1d37c:	616d 5f63 6170 7375 6465 0000 636d 7361     mac_paused..mcas
   1d38c:	5f74 6468 5f72 6e69 6176 696c 0064 0000     t_hdr_invalid...
   1d39c:	6f6e 665f 6572 5f65 6863 0000 7562 7973     no_free_ch..busy
   1d3ac:	0000 0000 6f6e 615f 6b63 0020 6f6a 6e69     ....no_ack .join
   1d3bc:	695f 5f6e 7270 676f 6572 7373 0000 0000     _in_progress....
   1d3cc:	6572 6f73 7275 6563 755f 616e 6176 6c69     resource_unavail
   1d3dc:	6261 656c 0000 0000 6e69 6176 696c 5f64     able....invalid_
   1d3ec:	6572 7571 7365 0074 6e69 6176 696c 5f64     request.invalid_
   1d3fc:	6170 6b63 7465 0000 616d 5f63 7874 6f5f     packet..mac_tx_o
   1d40c:	006b 0000 6172 6964 5f6f 7874 6f5f 006b     k...radio_tx_ok.
   1d41c:	6172 6964 5f6f 6f6e 645f 7461 0061 0000     radio_no_data...
   1d42c:	6172 6964 5f6f 7874 745f 6d69 6f65 7475     radio_tx_timeout
   1d43c:	0000 0000 7874 745f 6d69 6f65 7475 0000     ....tx_timeout..
   1d44c:	6172 6964 5f6f 6164 6174 735f 7a69 0065     radio_data_size.
   1d45c:	6172 6964 5f6f 6e69 6176 696c 5f64 6572     radio_invalid_re
   1d46c:	0071 0000 6172 6964 5f6f 7562 7973 0000     q...radio_busy..
   1d47c:	6172 6964 5f6f 756f 5f74 666f 725f 6e61     radio_out_of_ran
   1d48c:	6567 0000 6172 6964 5f6f 6e75 7573 5f70     ge..radio_unsup_
   1d49c:	7461 7274 0000 0000 6172 6964 5f6f 6863     attr....radio_ch
   1d4ac:	6e61 656e 5f6c 7562 7973 0000 6261 0070     annel_busy..abp.
   1d4bc:	746f 6161 0000 0000 6142 646e 2520 2073     otaa....Band %s 
   1d4cc:	6f6e 2074 7573 7070 726f 6574 0d64 000a     not supported...
   1d4dc:	6b6f 0000 6e63 0066 6e75 6e63 0066 0000     ok..cnf.uncnf...

0001d4ec <gapParseIsmBand>:
   1d4ec:	d63c 0001 d640 0001 d644 0001 d64c 0001     <...@...D...L...
   1d4fc:	d654 0001 d65c 0001 d664 0001 d66c 0001     T...\...d...l...
   1d50c:	d674 0001 d67c 0001 d684 0001 d68c 0001     t...|...........
   1d51c:	d694 0001 d69c 0001 d6a4 0001 d6ac 0001     ................

0001d52c <gapParseJoinStatus>:
   1d52c:	d6bc 0001 d6c4 0001 d39c 0001 d440 0001     ............@...
   1d53c:	d348 0001                                   H...

0001d540 <gapParseOnOff>:
   1d540:	d6b4 0001 d6b8 0001                         ........

0001d548 <gapParserBool>:
   1d548:	d5c8 0001 d5d0 0001                         ........

0001d550 <gapParserEdClass>:
   1d550:	d5d8 0001 d5e0 0001 d5e8 0001 d5f0 0001     ................

0001d560 <gapParserLorawanStatus>:
   1d560:	d600 0001 d41c 0001 d44c 0001 d45c 0001     ........L...\...
   1d570:	d470 0001 d47c 0001 d490 0001 d4a4 0001     p...|...........
   1d580:	d4dc 0001 d2f4 0001 c93c 0001 d300 0001     ........<.......
   1d590:	d310 0001 d318 0001 d60c 0001 d37c 0001     ............|...
   1d5a0:	d39c 0001 d3a8 0001 d620 0001 d3b8 0001     ........ .......
   1d5b0:	d3cc 0001 d3e4 0001 d628 0001 d440 0001     ........(...@...
   1d5c0:	d42c 0001 d3f4 0001 6166 736c 0065 0000     ,.......false...
   1d5d0:	7274 6575 0000 0000 4c43 5341 2053 0041     true....CLASS A.
   1d5e0:	4c43 5341 2053 0042 4c43 5341 2053 0043     CLASS B.CLASS C.
   1d5f0:	4c43 5341 2053 4e49 4156 494c 0044 0000     CLASS INVALID...
   1d600:	6172 6964 5f6f 6b6f 0000 0000 6e69 6176     radio_ok....inva
   1d610:	696c 5f64 6164 6174 6c5f 6e65 0000 0000     lid_data_len....
   1d620:	6f6e 615f 6b63 0000 6e75 7573 7070 726f     no_ack..unsuppor
   1d630:	6574 5f64 6162 646e 0000 0000 3638 0038     ted_band....868.
   1d640:	3334 0033 616e 3139 0035 0000 7561 3139     433.na915...au91
   1d650:	0035 0000 726b 3239 0030 0000 706a 396e     5...kr920...jpn9
   1d660:	3332 0000 7262 396e 3332 0000 6d63 3962     23..brn923..cmb9
   1d670:	3332 0000 6e69 3973 3332 0000 616c 736f     23..ins923..laos
   1d680:	3239 0033 7a6e 3239 0033 0000 7073 3239     923.nz923...sp92
   1d690:	0033 0000 7774 396e 3332 0000 6874 6961     3...twn923..thai
   1d6a0:	3239 0033 7476 396d 3332 0000 6e69 3864     923.vtm923..ind8
   1d6b0:	3536 0000 666f 0066 6e6f 0000 6564 696e     65..off.on..deni
   1d6c0:	6465 0000 6361 6563 7470 6465 0000 0000     ed..accepted....
   1d6d0:	0a0d 6c25 0d64 000a 7473 6e61 6264 0079     ..%ld...standby.
   1d6e0:	6162 6b63 7075 0000 7265 0072 450a 6978     backup..err..Exi
   1d6f0:	6974 676e 5320 656c 7065 0d0a 0000 0000     ting Sleep......

0001d700 <gapParserSysStatus>:
   1d700:	d4dc 0001 c93c 0001 d6e8 0001 730a 656c     ....<........sle
   1d710:	7065 6f5f 206b 6c25 2064 736d 0d0a 0000     ep_ok %ld ms....
   1d720:	0a0d 0000 3060 0000 3060 0000 302e 0000     ....`0..`0...0..
   1d730:	3060 0000 302e 0000 3014 0000 3014 0000     `0...0...0...0..
   1d740:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d750:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d760:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d770:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d780:	3060 0000 3060 0000 3060 0000 302e 0000     `0..`0..`0...0..
   1d790:	3060 0000 302e 0000 3060 0000 3060 0000     `0...0..`0..`0..
   1d7a0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d7b0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d7c0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d7d0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d7e0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d7f0:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d800:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d810:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1d820:	3060 0000 302e 0000 302e 0000 3036 0000     `0...0...0..60..
   1d830:	3036 0000 3036 0000 3036 0000 0000 4200     60..60..60.....B
   1d840:	0400 4200 0800 4200 0c00 4200 1000 4200     ...B...B...B...B
   1d850:	0400 4300 45b6 0000 45b2 0000 45b2 0000     ...C.E...E...E..
   1d860:	4618 0000 4618 0000 45cc 0000 45bc 0000     .F...F...E...E..
   1d870:	45d2 0000 4606 0000 47bc 0000 479c 0000     .E...F...G...G..
   1d880:	479c 0000 4836 0000 47ae 0000 47ca 0000     .G..6H...G...G..
   1d890:	47a0 0000 47d8 0000 481a 0000 4874 0000     .G...G...H..tH..
   1d8a0:	48b6 0000 48b6 0000 48b6 0000 4866 0000     .H...H...H..fH..
   1d8b0:	4882 0000 4858 0000 4890 0000 48a6 0000     .H..XH...H...H..
   1d8c0:	505e 0000 5154 0000 515e 0000 5168 0000     ^P..TQ..^Q..hQ..
   1d8d0:	5172 0000 51a4 0000 51ae 0000 51b8 0000     rQ...Q...Q...Q..
   1d8e0:	51c2 0000 51cc 0000 2000 4200 2400 4200     .Q...Q... .B.$.B
   1d8f0:	2800 4200 2c00 4200 0800 4300 0002 0000     .(.B.,.B...C....
   1d900:	0100 0000 0002 0000 0200 0000 0002 0000     ................
   1d910:	0400 0000 0002 0000 0800 0000 0003 0000     ................
   1d920:	0004 0000                                   ....

0001d924 <AdvChannels923>:
   1d924:	ea00 3706 ea00 3706 0100 ff10 f740 3709     ...7...7....@..7
   1d934:	f740 3709 0100 ff10                         @..7....

0001d93c <DefaultChannels923>:
   1d93c:	5001 5001                                   .P.P

0001d940 <DefaultDrParamsAS>:
   1d940:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1d950:	000e 0b33 0ac6 0107 001a 3573 09c2 0107     ..3.......s5....
   1d960:	0031 7df2 08be 0107 0053 f2f2 07bc 0107     1..}....S.......
   1d970:	003c f2f2 07f1 0108 0064 f2f2 00ce 000a     <.......d.......

0001d980 <SubBandDutyCycle923>:
   1d980:	0064 0000                                   d...

0001d984 <SubBandParams923>:
   1d984:	6d80 35c3 2800 3750 0000 0000               .m.5.(P7....

0001d990 <pds_reg_as_item_list>:
   1d990:	2394 2000 0004 0020 23b4 2000 0104 25c0     .#. .. ..#. ...%
   1d9a0:	233f 2000 0204 ea01                         ?#. ....

0001d9a8 <DefaultChannels915AU>:
   1d9a8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1d9b8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1d9c8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1d9d8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1d9e8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1d9f8:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1da08:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1da18:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1da28:	6601 6601 6601 6601 6601 6601 6601 6601     .f.f.f.f.f.f.f.f

0001da38 <DefaultDrParamsAU>:
   1da38:	0008 0033 0cdf 0107 000b 0033 0bce 0107     ..3.......3.....
   1da48:	0012 0033 0ac6 0107 001c 0073 09c2 0107     ..3.......s.....
   1da58:	003d 00f2 08be 0107 0053 00f2 07bc 0107     =.......S.......
   1da68:	003d 00f2 08be 0109 0000 0000 0000 010a     =...............
   1da78:	0007 0035 0c0c 0109 0005 0081 0b06 0109     ..5.............
   1da88:	0007 00f2 0a01 0109 000c 00f2 09fe 0109     ................
   1da98:	0016 00f2 08fc 0109 002a 00f2 07fc 0109     ........*.......

0001daa8 <pds_reg_au_item_list>:
   1daa8:	23c4 2000 0008 0090 2468 2000 0108 9501     .#. ....h$. ....

0001dab8 <AdvChannels433>:
   1dab8:	b9d8 19d1 b9d8 19d1 0101 ff0c c718 19d4     ................
   1dac8:	c718 19d4 0101 ff0c d458 19d7 d458 19d7     ........X...X...
   1dad8:	0101 ff0c                                   ....

0001dadc <AdvChannels868>:
   1dadc:	27a0 33be 27a0 33be 0101 ff10 34e0 33c1     .'.3.'.3.....4.3
   1daec:	34e0 33c1 0101 ff10 4220 33c4 4220 33c4     .4.3.... B.3 B.3
   1dafc:	0101 ff10                                   ....

0001db00 <DefaultChannels433>:
   1db00:	5001 5001 5001 0000                         .P.P.P..

0001db08 <DefaultChannels868>:
   1db08:	5001 5001 5001 0000                         .P.P.P..

0001db10 <DefaultDrparamsEU>:
   1db10:	0008 0033 0cdf 0107 000b 0033 0bd3 0107     ..3.......3.....
   1db20:	0017 0033 0acc 0107 001c 0073 09c2 0107     ..3.......s.....
   1db30:	003d 00f2 08be 0107 0053 00f2 07bc 0107     =.......S.......
   1db40:	003c 00f2 07f1 0108 0064 00f2 00ce 000a     <.......d.......

0001db50 <SubBandDutyCycle868>:
   1db50:	03e8 0064 0064 03e8 000a 0064               ..d.d.....d.

0001db5c <SubBandParams433>:
   1db5c:	0e40 19cf 8580 19ea 0000 0000               @...........

0001db68 <SubBandParams868>:
   1db68:	55c0 3370 da40 338e 0000 0000 da41 338e     .Up3@..3....A..3
   1db78:	a100 33bc 0000 0000 a101 33bc c8c0 33c5     ...3.......3...3
   1db88:	0000 0000 4f60 33c7 f080 33ce 0000 0000     ....`O.3...3....
   1db98:	fdc0 33d1 ce50 33d5 0000 0000 91a0 33d6     ...3P..3.......3
   1dba8:	2580 33db 0000 0000                         .%.3....

0001dbb0 <pds_reg_eu868_fid1_item_list>:
   1dbb0:	2394 2000 0003 0020                         .#. .. .

0001dbb8 <pds_reg_eu868_fid2_item_list>:
   1dbb8:	23b4 2000 000b 00c0                         .#. ....

0001dbc0 <AdvChannels865>:
   1dbc0:	ce64 338f ce64 338f 0100 ff1e fe84 3394     d..3d..3.......3
   1dbd0:	fe84 3394 0100 ff1e e1e8 339d e1e8 339d     ...3.......3...3
   1dbe0:	0100 ff1e                                   ....

0001dbe4 <DefaultChannels865>:
   1dbe4:	5001 5001 5001 0000                         .P.P.P..

0001dbec <DefaultDrParamsIN>:
   1dbec:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1dbfc:	000e 0033 0ac6 0107 001a 0073 09c2 0107     ..3.......s.....
   1dc0c:	0031 00f2 08be 0107 0053 00f2 07bc 0107     1.......S.......
   1dc1c:	0000 0000 0000 010a 0008 00f2 00fe 000a     ................

0001dc2c <pds_reg_ind_item_list>:
   1dc2c:	2394 2000 0006 0020 23b4 2000 0106 25c0     .#. .. ..#. ...%

0001dc3c <AdvChannels923JP>:
   1dc3c:	ea00 3706 ea00 3706 0101 ff10 f740 3709     ...7...7....@..7
   1dc4c:	f740 3709 0101 ff10                         @..7....

0001dc54 <DefaultChannels923JP>:
   1dc54:	5001 5001                                   .P.P

0001dc58 <DefaultDrParamsJP>:
   1dc58:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1dc68:	000e 0b33 0ac6 0107 001a 3573 09c2 0107     ..3.......s5....
   1dc78:	0031 7df2 08be 0107 0053 f2f2 07bc 0107     1..}....S.......
   1dc88:	003c f2f2 07f1 0108 0064 f2f2 00ce 000a     <.......d.......

0001dc98 <SubBandDutyCycleJP923>:
   1dc98:	0064 000a                                   d...

0001dc9c <SubBandParamsJP923>:
   1dc9c:	1600 36d6 a7c0 36f7 0000 0000 b500 36fa     ...6...6.......6
   1dcac:	2800 3750 0000 0000                         .(P7....

0001dcb4 <pds_reg_jpn_fid1_item_list>:
   1dcb4:	2394 2000 0007 0020 23b4 2000 0107 25c0     .#. .. ..#. ...%

0001dcc4 <AdvChannels920KR>:
   1dcc4:	2120 36f6 2120 36f6 0100 ff0e 2e60 36f9      !.6 !.6....`..6
   1dcd4:	2e60 36f9 0100 ff0e 3ba0 36fc 3ba0 36fc     `..6.....;.6.;.6
   1dce4:	0100 ff0e                                   ....

0001dce8 <DefaultChannels920KR>:
   1dce8:	5001 5001 5001 0000                         .P.P.P..

0001dcf0 <DefaultDrParamsKR>:
   1dcf0:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1dd00:	000e 0033 0ac6 0107 001a 0073 09c2 0107     ..3.......s.....
   1dd10:	0031 00f2 08be 0107 0053 00f2 07bc 0107     1.......S.......

0001dd20 <pds_reg_kr_fid1_item_list>:
   1dd20:	2394 2000 0005 0020 23b4 2000 0105 25c0     .#. .. ..#. ...%

0001dd30 <DefaultChannels915>:
   1dd30:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd40:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd50:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd60:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd70:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd80:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dd90:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1dda0:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1ddb0:	4401 4401 4401 4401 4401 4401 4401 4401     .D.D.D.D.D.D.D.D

0001ddc0 <DefaultDrParamsNA>:
   1ddc0:	0012 000b 0ac6 0107 0005 0035 0906 0107     ..........5.....
   1ddd0:	0007 007d 0801 0107 000c 00f2 07fe 0107     ..}.............
   1dde0:	0016 00f2 08fc 0109 0000 0000 0000 010a     ................
   1ddf0:	0000 0000 0000 010a 0000 0000 0000 010a     ................
   1de00:	0023 0035 0cd5 0109 0007 0081 0b06 0109     #.5.............
   1de10:	0007 00f2 0a01 0109 000c 00f2 09fe 0109     ................
   1de20:	0016 00f2 08fc 0109 002a 00f2 07fc 0109     ........*.......

0001de30 <pds_reg_na_item_list>:
   1de30:	23c4 2000 0002 0090 2468 2000 0102 9501     .#. ....h$. ....
   1de40:	873c 0000 873c 0000 873c 0000 873c 0000     <...<...<...<...
   1de50:	87a2 0000 8808 0000 87ba 0000 87a2 0000     ................

0001de60 <taskHandlers>:
   1de60:	ce3d 0000 33dd 0001 29f1 0001 c4b5 0000     =....3...)......
   1de70:	d8ed 0000                                   ....

0001de74 <tc_interrupt_vectors.13496>:
   1de74:	1211 1413 0015 0000 0a0d 614c 7473 7220     ..........Last r
   1de84:	7365 7465 6320 7561 6573 203a 0000 0000     eset cause: ....
   1de94:	7953 7473 6d65 5220 7365 7465 5220 7165     System Reset Req
   1dea4:	6575 7473 000d 0000 6157 6374 6468 676f     uest....Watchdog
   1deb4:	5220 7365 7465 000d 7845 6574 6e72 6c61      Reset..External
   1dec4:	5220 7365 7465 000d 7242 776f 206e 754f      Reset..Brown Ou
   1ded4:	2074 3333 4420 7465 6365 6f74 2072 6552     t 33 Detector Re
   1dee4:	6573 0d74 0000 0000 7242 776f 206e 754f     set.....Brown Ou
   1def4:	2074 3231 4420 7465 6365 6f74 2072 6552     t 12 Detector Re
   1df04:	6573 0d74 0000 0000 6f50 6577 2d72 6e4f     set.....Power-On
   1df14:	5220 7365 7465 000d 6f4c 6152 4157 204e      Reset..LoRaWAN 
   1df24:	7453 6361 206b 5055 000d 0000               Stack UP....

0001df30 <CSWTCH.152>:
   1df30:	0000 0000 8480 40fe 0000 0000 8480 410e     .......@.......A
   1df40:	0000 0000 8480 411e                         .......A

0001df48 <FskSyncWordBuff>:
   1df48:	94c1 02c1                                        ...

0001df4b <macEndDevCmdInputLen>:
   1df4b:	0402 0401 0500 0101 0004 0500               ............

0001df57 <macEndDevCmdReplyLen>:
   1df57:	0201 0201 0203 0101 0002 0100 0000 0202     ................
   1df67:	0200                                        ..

0001df69 <maxEIRPTable>:
   1df69:	0a08 0d0c 100e 1412 1815 1b1a 1e1d 2421     ..............!$
   1df79:	0000 a300                                        ...

0001df7c <pds_mac_fid1_item_list>:
   1df7c:	2aa3 2000 0000 0001 2aa1 2000 0100 0601     .*. .....*. ....
   1df8c:	2a34 2000 0200 0c04 2aa4 2000 0300 1501     4*. .....*. ....
   1df9c:	2aa8 2000 0400 1b04 2af8 2000 0500 2404     .*. .....*. ...$
   1dfac:	2ad4 2000 0600 2d04 2ae8 2000 0700 3610     .*. ...-.*. ...6
   1dfbc:	2ad8 2000 0800 4b10 2ac2 2000 0900 6004     .*. ...K.*. ...`
   1dfcc:	2a8d 2000 0b00 6901 2a3c 2000 0a00 6f01     .*. ...i<*. ...o
   1dfdc:	2a74 2000 0c00 7502 2a76 2000 0d00 7c02     t*. ...uv*. ...|
   1dfec:	2a78 2000 0e00 8302 2a7a 2000 0f00 8a02     x*. ....z*. ....
   1dffc:	2a7e 2000 1000 9102 2a80 2000 1100 9801     ~*. .....*. ....
   1e00c:	2a81 2000 1200 9e01 2a86 2000 1400 aa01     .*. .....*. ....
   1e01c:	2a85 2000 1300 a401 2a2c 2000 1500 b004     .*. ....,*. ....
   1e02c:	2a70 2000 1600 b902                         p*. ....

0001e034 <pds_mac_fid2_item_list>:
   1e034:	2a0e 2000 0001 0005 2a9b 2000 0101 0a01     .*. .....*. ....
   1e044:	29a4 2000 0201 1001 29a5 2000 0301 1604     .). .....). ....
   1e054:	29a9 2000 0401 1f10 29b9 2000 0501 3410     .). .....). ...4
   1e064:	29e9 2000 0601 4910 29f9 2000 0701 5e08     .). ...I.). ...^
   1e074:	2a01 2000 0801 6b08 2a82 2000 0901 7802     .*. ...k.*. ...x
   1e084:	2a30 2000 0a01 7f04 2a28 2000 0b01 8804     0*. ....(*. ....
   1e094:	2a8b 2000 0c01 9101 2bd0 2000 0d01 9701     .*. .....+. ....
   1e0a4:	2bd1 2000 0e01 9d01 2be8 2000 0f01 a304     .+. .....+. ....

0001e0b4 <lorawanHandlers>:
   1e0b4:	28b5 0001 27c9 0001 2979 0001 00fd 0000     .(...'..y)......

0001e0c4 <radioTaskHandlers>:
   1e0c4:	3fad 0001 40ad 0001 3df1 0001 3675 0001     .?...@...=..u6..
   1e0d4:	43d5 0001 5054 0001 5024 0001 5036 0001     .C..TP..$P..6P..
   1e0e4:	4f78 0001 5036 0001 501a 0001 5036 0001     xO..6P...P..6P..
   1e0f4:	4f78 0001 5024 0001 5024 0001 501a 0001     xO..$P..$P...P..
   1e104:	4f78 0001 4f80 0001 4f80 0001 4f80 0001     xO...O...O...O..
   1e114:	503c 0001 5024 0001 5024 0001 4ff8 0001     <P..$P..$P...O..
   1e124:	50dc 0001 4ff8 0001 501a 0001 4ff8 0001     .P...O...P...O..
   1e134:	50dc 0001 5024 0001 5024 0001 501a 0001     .P..$P..$P...P..
   1e144:	50dc 0001 4f80 0001 4f80 0001 4f80 0001     .P...O...O...O..
   1e154:	50e6 0001 53d4 0001 5324 0001 5324 0001     .P...S..$S..$S..
   1e164:	5322 0001 53c6 0001 53c6 0001 53bc 0001     "S...S...S...S..
   1e174:	5322 0001 53c6 0001 53bc 0001 53c6 0001     "S...S...S...S..
   1e184:	5322 0001 53cc 0001 53cc 0001 53cc 0001     "S...S...S...S..
   1e194:	545c 0001 61a4 0001 6186 0001 6140 0001     \T...a...a..@a..
   1e1a4:	605e 0001 6140 0001 6178 0001 6140 0001     ^`..@a..xa..@a..
   1e1b4:	605e 0001 6186 0001 6186 0001 6178 0001     ^`...a...a..xa..
   1e1c4:	605e 0001 6056 0001 6056 0001 6056 0001     ^`..V`..V`..V`..
   1e1d4:	63bc 0001 6a04 0001 68c4 0001 68c4 0001     .c...j...h...h..
   1e1e4:	68c0 0001 69dc 0001 69dc 0001 69ce 0001     .h...i...i...i..
   1e1f4:	68c0 0001 69dc 0001 69ce 0001 69dc 0001     .h...i...i...i..
   1e204:	68c0 0001 69e4 0001 69e4 0001 69e4 0001     .h...i...i...i..
   1e214:	6be8 0001                                   .k..

0001e218 <_global_impure_ptr>:
   1e218:	0020 2000 0043 0000 4f50 4953 0058 0000      .. C...POSIX...
   1e228:	002e 0000 000a 0000 3130 3332 3534 3736     ........01234567
   1e238:	3938 6261 6463 6665 6867 6a69 6c6b 6e6d     89abcdefghijklmn
   1e248:	706f 7271 7473 7675 7877 7a79 0000 0000     opqrstuvwxyz....
   1e258:	84ee 0001 85c2 0001 85c2 0001 84da 0001     ................
   1e268:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e278:	85c2 0001 85c2 0001 8594 0001 80a6 0001     ................
   1e288:	85c2 0001 809c 0001 80b0 0001 85c2 0001     ................
   1e298:	84e4 0001 8270 0001 8270 0001 8270 0001     ....p...p...p...
   1e2a8:	8270 0001 8270 0001 8270 0001 8270 0001     p...p...p...p...
   1e2b8:	8270 0001 8270 0001 85c2 0001 85c2 0001     p...p...........
   1e2c8:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e2d8:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e2e8:	85aa 0001 84fe 0001 85c2 0001 84fe 0001     ................
   1e2f8:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e308:	8464 0001 85c2 0001 85c2 0001 846e 0001     d...........n...
   1e318:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e328:	85c2 0001 849c 0001 85c2 0001 85c2 0001     ................
   1e338:	84ca 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e348:	85c2 0001 85c2 0001 85c2 0001 85c2 0001     ................
   1e358:	85c2 0001 85c2 0001 85c2 0001 82b0 0001     ................
   1e368:	82e6 0001 84fe 0001 84fe 0001 84fe 0001     ................
   1e378:	838e 0001 82e6 0001 85c2 0001 85c2 0001     ................
   1e388:	8398 0001 85c2 0001 83aa 0001 85be 0001     ................
   1e398:	83d8 0001 8402 0001 85c2 0001 840c 0001     ................
   1e3a8:	85c2 0001 85ba 0001 85c2 0001 85c2 0001     ................
   1e3b8:	80fe 0001 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
   1e3c8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   1e3d8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   1e3e8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   1e3f8:	296c 0000                                   l)..

0001e3fc <blanks.7238>:
   1e3fc:	2020 2020 2020 2020 2020 2020 2020 2020                     

0001e40c <zeroes.7239>:
   1e40c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0001e41c <_ctype_>:
   1e41c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1e42c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1e43c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1e44c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1e45c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1e46c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1e47c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1e48c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1e49c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   1e520:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0001e530 <__mprec_bigtens>:
   1e530:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   1e540:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   1e550:	bf3c 7f73 4fdd 7515                         <.s..O.u

0001e558 <__mprec_tens>:
   1e558:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   1e568:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   1e578:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   1e588:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   1e598:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   1e5a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   1e5b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   1e5c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   1e5d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   1e5e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   1e5f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   1e608:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   1e618:	9db4 79d9 7843 44ea                         ...yCx.D

0001e620 <p05.6055>:
   1e620:	0005 0000 0019 0000 007d 0000               ........}...

0001e62c <_init>:
   1e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e62e:	46c0      	nop			; (mov r8, r8)
   1e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e632:	bc08      	pop	{r3}
   1e634:	469e      	mov	lr, r3
   1e636:	4770      	bx	lr

0001e638 <__init_array_start>:
   1e638:	00019721 	.word	0x00019721

0001e63c <__frame_dummy_init_array_entry>:
   1e63c:	000000dd                                ....

0001e640 <_fini>:
   1e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e642:	46c0      	nop			; (mov r8, r8)
   1e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e646:	bc08      	pop	{r3}
   1e648:	469e      	mov	lr, r3
   1e64a:	4770      	bx	lr

0001e64c <__fini_array_start>:
   1e64c:	000000b5 	.word	0x000000b5
