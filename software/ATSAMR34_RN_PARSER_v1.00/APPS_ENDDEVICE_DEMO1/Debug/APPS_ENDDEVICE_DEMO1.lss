
APPS_ENDDEVICE_DEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001f098  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001f098  0001f098  0002f098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  0001f0a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000309c8  2**0
                  CONTENTS
  4 .bss          000026ac  200009c8  0001fa68  000309c8  2**3
                  ALLOC
  5 .stack        00002004  20003074  00022114  000309c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   00089486  00000000  00000000  00030a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d0e5  00000000  00000000  000b9f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ceb7  00000000  00000000  000c6fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019d8  00000000  00000000  000e3e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ff8  00000000  00000000  000e5876  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031aa8  00000000  00000000  000e786e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033415  00000000  00000000  00119316  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b41b3  00000000  00000000  0014c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005c78  00000000  00000000  002008e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 50 00 20 55 5c 00 00 51 5c 00 00 51 5c 00 00     xP. U\..Q\..Q\..
	...
      2c:	51 5c 00 00 00 00 00 00 00 00 00 00 51 5c 00 00     Q\..........Q\..
      3c:	51 5c 00 00 51 5c 00 00 51 5c 00 00 0d 36 00 00     Q\..Q\..Q\...6..
      4c:	a5 2d 00 00 51 5c 00 00 51 5c 00 00 51 5c 00 00     .-..Q\..Q\..Q\..
      5c:	51 5c 00 00 c5 43 00 00 d5 43 00 00 e5 43 00 00     Q\...C...C...C..
      6c:	f5 43 00 00 05 44 00 00 15 44 00 00 51 5c 00 00     .C...D...D..Q\..
      7c:	51 5c 00 00 51 5c 00 00 0d 58 00 00 1d 58 00 00     Q\..Q\...X...X..
      8c:	2d 58 00 00 3d 58 00 00 4d 58 00 00 f1 2a 00 00     -X..=X..MX...*..
      9c:	51 5c 00 00 51 5c 00 00 51 5c 00 00 51 5c 00 00     Q\..Q\..Q\..Q\..
      ac:	51 5c 00 00 00 00 00 00                             Q\......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	0001f0a0 	.word	0x0001f0a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	0001f0a0 	.word	0x0001f0a0
     10c:	0001f0a0 	.word	0x0001f0a0
     110:	00000000 	.word	0x00000000

00000114 <parser_serial_data_handler>:
};

char aParserData[PARSER_MAX_DATA_LEN];

void parser_serial_data_handler(void)
{
     114:	b510      	push	{r4, lr}
    int rxChar;
   /* verify if there was any character received*/
    if((-1) != (rxChar = sio2host_getchar_nowait()))
     116:	4b05      	ldr	r3, [pc, #20]	; (12c <parser_serial_data_handler+0x18>)
     118:	4798      	blx	r3
     11a:	1c43      	adds	r3, r0, #1
     11c:	d005      	beq.n	12a <parser_serial_data_handler+0x16>
    {
        Parser_RxAddChar( (uint8_t)rxChar );
     11e:	b2c0      	uxtb	r0, r0
     120:	4b03      	ldr	r3, [pc, #12]	; (130 <parser_serial_data_handler+0x1c>)
     122:	4798      	blx	r3
        SYSTEM_PostTask(APP_TASK_ID);
     124:	2010      	movs	r0, #16
     126:	4b03      	ldr	r3, [pc, #12]	; (134 <parser_serial_data_handler+0x20>)
     128:	4798      	blx	r3
    }
}
     12a:	bd10      	pop	{r4, pc}
     12c:	000060d9 	.word	0x000060d9
     130:	00002451 	.word	0x00002451
     134:	0000dc11 	.word	0x0000dc11

00000138 <Parser_Init>:

void Parser_Init(void)
{
     138:	b510      	push	{r4, lr}
     13a:	b086      	sub	sp, #24
    Parser_RxClearBuffer();
     13c:	4b08      	ldr	r3, [pc, #32]	; (160 <Parser_Init+0x28>)
     13e:	4798      	blx	r3
    /* Initialize LoRaWAN stack */
    Parser_LorawanInit();
     140:	4b08      	ldr	r3, [pc, #32]	; (164 <Parser_Init+0x2c>)
     142:	4798      	blx	r3
	
	{
		PdsFileMarks_t appFileMarks;
		appFileMarks.fileMarkListAddr = appPdsFileOps;
     144:	ab02      	add	r3, sp, #8
		appFileMarks.numItems = (uint8_t)(PDS_APP_FILEID_MAX_VALUE & 0x00FF);
     146:	2201      	movs	r2, #1
     148:	711a      	strb	r2, [r3, #4]
		appFileMarks.itemListAddr = appPdsFileItemList;
		appFileMarks.fIDcb = NULL;
     14a:	2200      	movs	r2, #0
		PDS_RegFile(PDS_FILE_APP_DATA1_13_IDX, appFileMarks);
     14c:	9200      	str	r2, [sp, #0]
     14e:	4906      	ldr	r1, [pc, #24]	; (168 <Parser_Init+0x30>)
     150:	9a03      	ldr	r2, [sp, #12]
     152:	4b06      	ldr	r3, [pc, #24]	; (16c <Parser_Init+0x34>)
     154:	200c      	movs	r0, #12
     156:	4c06      	ldr	r4, [pc, #24]	; (170 <Parser_Init+0x38>)
     158:	47a0      	blx	r4
	}
}
     15a:	b006      	add	sp, #24
     15c:	bd10      	pop	{r4, pc}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	000023c9 	.word	0x000023c9
     164:	00000791 	.word	0x00000791
     168:	200011c4 	.word	0x200011c4
     16c:	20000000 	.word	0x20000000
     170:	0000cb31 	.word	0x0000cb31

00000174 <Parser_Main>:

void Parser_Main (void)
{
     174:	b5f0      	push	{r4, r5, r6, r7, lr}
     176:	46de      	mov	lr, fp
     178:	4657      	mov	r7, sl
     17a:	464e      	mov	r6, r9
     17c:	4645      	mov	r5, r8
     17e:	b5e0      	push	{r5, r6, r7, lr}
     180:	b08b      	sub	sp, #44	; 0x2c
    uint8_t cmdTotalNb;
    uint8_t startCmdSize = gParserStartCmdSize;
     182:	4b87      	ldr	r3, [pc, #540]	; (3a0 <Parser_Main+0x22c>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	4698      	mov	r8, r3
    const parserCmdEntry_t* pStartCmd = gpParserStartCmd;
     188:	4b86      	ldr	r3, [pc, #536]	; (3a4 <Parser_Main+0x230>)
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	9301      	str	r3, [sp, #4]
    uint8_t savedCmdIdx;
    parserCmdEntry_t tempCmd;

    /* verify if there was any character received */
    int rxChar;
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     18e:	4c86      	ldr	r4, [pc, #536]	; (3a8 <Parser_Main+0x234>)
    {
        Parser_RxAddChar( (uint8_t)rxChar );
     190:	4d86      	ldr	r5, [pc, #536]	; (3ac <Parser_Main+0x238>)
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     192:	e001      	b.n	198 <Parser_Main+0x24>
        Parser_RxAddChar( (uint8_t)rxChar );
     194:	b2c0      	uxtb	r0, r0
     196:	47a8      	blx	r5
    while((-1) != (rxChar = sio2host_getchar_nowait()))
     198:	47a0      	blx	r4
     19a:	1c43      	adds	r3, r0, #1
     19c:	d1fa      	bne.n	194 <Parser_Main+0x20>
    }

    /* Verify if an entire command is received */
    if(mRxParserCmd.bCmdStatus)
     19e:	4b84      	ldr	r3, [pc, #528]	; (3b0 <Parser_Main+0x23c>)
     1a0:	4a84      	ldr	r2, [pc, #528]	; (3b4 <Parser_Main+0x240>)
     1a2:	5cd3      	ldrb	r3, [r2, r3]
     1a4:	2b00      	cmp	r3, #0
     1a6:	d04f      	beq.n	248 <Parser_Main+0xd4>
    {
        cmdTotalNb = mRxParserCmd.crtWordIdx + 1;
     1a8:	4b83      	ldr	r3, [pc, #524]	; (3b8 <Parser_Main+0x244>)
     1aa:	5cd3      	ldrb	r3, [r2, r3]
     1ac:	3301      	adds	r3, #1
     1ae:	b2db      	uxtb	r3, r3
     1b0:	469a      	mov	sl, r3
        crtWordIdx = 0;

        while(cmdTotalNb)
     1b2:	2b00      	cmp	r3, #0
     1b4:	d046      	beq.n	244 <Parser_Main+0xd0>
     1b6:	2300      	movs	r3, #0
     1b8:	469b      	mov	fp, r3

    /* Validate and find the group command */
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    {
        parserCmdEntry = *(pParserCmd + cmdCtr);
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     1ba:	4691      	mov	r9, r2
     1bc:	4f7f      	ldr	r7, [pc, #508]	; (3bc <Parser_Main+0x248>)
     1be:	4646      	mov	r6, r8
     1c0:	46d8      	mov	r8, fp
     1c2:	46d3      	mov	fp, sl
     1c4:	e01a      	b.n	1fc <Parser_Main+0x88>
     1c6:	4656      	mov	r6, sl
            /* Command found */
            break;
        }
    }

    if(cmdCtr < nbParserCmd)
     1c8:	42a6      	cmp	r6, r4
     1ca:	d800      	bhi.n	1ce <Parser_Main+0x5a>
     1cc:	e0e1      	b.n	392 <Parser_Main+0x21e>
    {
        if(parserCmdEntry.pNextParserCmd == NULL)
     1ce:	9b00      	ldr	r3, [sp, #0]
     1d0:	685b      	ldr	r3, [r3, #4]
     1d2:	9303      	str	r3, [sp, #12]
     1d4:	2b00      	cmp	r3, #0
     1d6:	d03e      	beq.n	256 <Parser_Main+0xe2>
                tempCmd = *(pStartCmd + savedCmdIdx);
     1d8:	0124      	lsls	r4, r4, #4
     1da:	9b01      	ldr	r3, [sp, #4]
     1dc:	469c      	mov	ip, r3
     1de:	4464      	add	r4, ip
                crtWordIdx ++;
     1e0:	4643      	mov	r3, r8
     1e2:	3301      	adds	r3, #1
     1e4:	b2db      	uxtb	r3, r3
     1e6:	4698      	mov	r8, r3
                cmdTotalNb --;
     1e8:	465b      	mov	r3, fp
     1ea:	3b01      	subs	r3, #1
     1ec:	b2db      	uxtb	r3, r3
     1ee:	469b      	mov	fp, r3
                startCmdSize = tempCmd.nextParserCmdSize;
     1f0:	7b26      	ldrb	r6, [r4, #12]
                pStartCmd = tempCmd.pNextParserCmd;
     1f2:	6863      	ldr	r3, [r4, #4]
     1f4:	9301      	str	r3, [sp, #4]
        while(cmdTotalNb)
     1f6:	465b      	mov	r3, fp
     1f8:	2b00      	cmp	r3, #0
     1fa:	d023      	beq.n	244 <Parser_Main+0xd0>
    parserCmdInfo.pReplyCmd = (char*)gapParserStatus[INVALID_PARAM_IDX]; /* Reply with error by default */;
     1fc:	4b70      	ldr	r3, [pc, #448]	; (3c0 <Parser_Main+0x24c>)
     1fe:	9309      	str	r3, [sp, #36]	; 0x24
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
     200:	2e00      	cmp	r6, #0
     202:	d100      	bne.n	206 <Parser_Main+0x92>
     204:	e0c3      	b.n	38e <Parser_Main+0x21a>
     206:	9d01      	ldr	r5, [sp, #4]
     208:	2400      	movs	r4, #0
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     20a:	4643      	mov	r3, r8
     20c:	9302      	str	r3, [sp, #8]
     20e:	331d      	adds	r3, #29
     210:	33ff      	adds	r3, #255	; 0xff
     212:	005b      	lsls	r3, r3, #1
     214:	444b      	add	r3, r9
     216:	3302      	adds	r3, #2
     218:	46b2      	mov	sl, r6
     21a:	001e      	movs	r6, r3
        parserCmdEntry = *(pParserCmd + cmdCtr);
     21c:	9500      	str	r5, [sp, #0]
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
     21e:	8831      	ldrh	r1, [r6, #0]
     220:	4449      	add	r1, r9
     222:	6828      	ldr	r0, [r5, #0]
     224:	47b8      	blx	r7
     226:	2800      	cmp	r0, #0
     228:	d0cd      	beq.n	1c6 <Parser_Main+0x52>
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
     22a:	3401      	adds	r4, #1
     22c:	b2e4      	uxtb	r4, r4
     22e:	3510      	adds	r5, #16
     230:	4554      	cmp	r4, sl
     232:	d1f3      	bne.n	21c <Parser_Main+0xa8>
            /* DO not send a reply yet */
            parserCmdInfo.pReplyCmd = NULL;
        }
    }

    if(parserCmdInfo.pReplyCmd)
     234:	4c62      	ldr	r4, [pc, #392]	; (3c0 <Parser_Main+0x24c>)
    {
        Parser_TxAddReply(parserCmdInfo.pReplyCmd, strlen(parserCmdInfo.pReplyCmd));
     236:	0020      	movs	r0, r4
     238:	4b62      	ldr	r3, [pc, #392]	; (3c4 <Parser_Main+0x250>)
     23a:	4798      	blx	r3
     23c:	b281      	uxth	r1, r0
     23e:	0020      	movs	r0, r4
     240:	4b61      	ldr	r3, [pc, #388]	; (3c8 <Parser_Main+0x254>)
     242:	4798      	blx	r3
        Parser_RxClearBuffer();
     244:	4b61      	ldr	r3, [pc, #388]	; (3cc <Parser_Main+0x258>)
     246:	4798      	blx	r3
}
     248:	b00b      	add	sp, #44	; 0x2c
     24a:	bc3c      	pop	{r2, r3, r4, r5}
     24c:	4690      	mov	r8, r2
     24e:	4699      	mov	r9, r3
     250:	46a2      	mov	sl, r4
     252:	46ab      	mov	fp, r5
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
     256:	46c3      	mov	fp, r8
        parserCmdEntry = *(pParserCmd + cmdCtr);
     258:	9b00      	ldr	r3, [sp, #0]
     25a:	689c      	ldr	r4, [r3, #8]
            if(parserCmdEntry.pActionCbFct)
     25c:	2c00      	cmp	r4, #0
     25e:	d100      	bne.n	262 <Parser_Main+0xee>
     260:	e099      	b.n	396 <Parser_Main+0x222>
        parserCmdEntry = *(pParserCmd + cmdCtr);
     262:	7b5a      	ldrb	r2, [r3, #13]
                if((mRxParserCmd.crtWordIdx - rxCmdIdx) == parserCmdEntry.flags)
     264:	4b54      	ldr	r3, [pc, #336]	; (3b8 <Parser_Main+0x244>)
     266:	4953      	ldr	r1, [pc, #332]	; (3b4 <Parser_Main+0x240>)
     268:	5ccb      	ldrb	r3, [r1, r3]
     26a:	9902      	ldr	r1, [sp, #8]
     26c:	1a5b      	subs	r3, r3, r1
     26e:	4293      	cmp	r3, r2
     270:	d001      	beq.n	276 <Parser_Main+0x102>
    if(parserCmdInfo.pReplyCmd)
     272:	4c53      	ldr	r4, [pc, #332]	; (3c0 <Parser_Main+0x24c>)
     274:	e7df      	b.n	236 <Parser_Main+0xc2>
                    if(parserCmdEntry.flags > 0)
     276:	2a00      	cmp	r2, #0
     278:	d015      	beq.n	2a6 <Parser_Main+0x132>
                    uint8_t iCtr = rxCmdIdx + 1;
     27a:	4643      	mov	r3, r8
     27c:	3301      	adds	r3, #1
     27e:	b2db      	uxtb	r3, r3
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     280:	4e4c      	ldr	r6, [pc, #304]	; (3b4 <Parser_Main+0x240>)
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     282:	0035      	movs	r5, r6
     284:	484c      	ldr	r0, [pc, #304]	; (3b8 <Parser_Main+0x244>)
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     286:	1c59      	adds	r1, r3, #1
     288:	b2c9      	uxtb	r1, r1
     28a:	3311      	adds	r3, #17
     28c:	33ff      	adds	r3, #255	; 0xff
     28e:	005b      	lsls	r3, r3, #1
     290:	18f3      	adds	r3, r6, r3
     292:	88db      	ldrh	r3, [r3, #6]
     294:	b29b      	uxth	r3, r3
     296:	2b00      	cmp	r3, #0
     298:	d100      	bne.n	29c <Parser_Main+0x128>
     29a:	e07e      	b.n	39a <Parser_Main+0x226>
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     29c:	5c2a      	ldrb	r2, [r5, r0]
     29e:	b2d2      	uxtb	r2, r2
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
     2a0:	000b      	movs	r3, r1
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
     2a2:	4291      	cmp	r1, r2
     2a4:	d9ef      	bls.n	286 <Parser_Main+0x112>
                        memset(&parserCmdInfo, 0, sizeof(parserCmdInfo_t));
     2a6:	2218      	movs	r2, #24
     2a8:	2100      	movs	r1, #0
     2aa:	a804      	add	r0, sp, #16
     2ac:	4b48      	ldr	r3, [pc, #288]	; (3d0 <Parser_Main+0x25c>)
     2ae:	4798      	blx	r3
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
     2b0:	465a      	mov	r2, fp
     2b2:	465b      	mov	r3, fp
     2b4:	3301      	adds	r3, #1
     2b6:	2b09      	cmp	r3, #9
     2b8:	d957      	bls.n	36a <Parser_Main+0x1f6>
                        if((rxCmdIdx + 2U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 2U] > 0U))
     2ba:	1c93      	adds	r3, r2, #2
     2bc:	2b09      	cmp	r3, #9
     2be:	d810      	bhi.n	2e2 <Parser_Main+0x16e>
     2c0:	3311      	adds	r3, #17
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	005b      	lsls	r3, r3, #1
     2c6:	493b      	ldr	r1, [pc, #236]	; (3b4 <Parser_Main+0x240>)
     2c8:	18cb      	adds	r3, r1, r3
     2ca:	88db      	ldrh	r3, [r3, #6]
     2cc:	b29b      	uxth	r3, r3
     2ce:	2b00      	cmp	r3, #0
     2d0:	d007      	beq.n	2e2 <Parser_Main+0x16e>
                            parserCmdInfo.pParam2 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 2]]);
     2d2:	9b02      	ldr	r3, [sp, #8]
     2d4:	331f      	adds	r3, #31
     2d6:	33ff      	adds	r3, #255	; 0xff
     2d8:	005b      	lsls	r3, r3, #1
     2da:	18cb      	adds	r3, r1, r3
     2dc:	885b      	ldrh	r3, [r3, #2]
     2de:	18c9      	adds	r1, r1, r3
     2e0:	9105      	str	r1, [sp, #20]
                        if((rxCmdIdx + 3U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 3U] > 0U))
     2e2:	1cd3      	adds	r3, r2, #3
     2e4:	2b09      	cmp	r3, #9
     2e6:	d810      	bhi.n	30a <Parser_Main+0x196>
     2e8:	3311      	adds	r3, #17
     2ea:	33ff      	adds	r3, #255	; 0xff
     2ec:	005b      	lsls	r3, r3, #1
     2ee:	4931      	ldr	r1, [pc, #196]	; (3b4 <Parser_Main+0x240>)
     2f0:	18cb      	adds	r3, r1, r3
     2f2:	88db      	ldrh	r3, [r3, #6]
     2f4:	b29b      	uxth	r3, r3
     2f6:	2b00      	cmp	r3, #0
     2f8:	d007      	beq.n	30a <Parser_Main+0x196>
                            parserCmdInfo.pParam3 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 3]]);
     2fa:	9b02      	ldr	r3, [sp, #8]
     2fc:	3320      	adds	r3, #32
     2fe:	33ff      	adds	r3, #255	; 0xff
     300:	005b      	lsls	r3, r3, #1
     302:	18cb      	adds	r3, r1, r3
     304:	885b      	ldrh	r3, [r3, #2]
     306:	18c9      	adds	r1, r1, r3
     308:	9106      	str	r1, [sp, #24]
                        if((rxCmdIdx + 4U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 4U] > 0U))
     30a:	1d13      	adds	r3, r2, #4
     30c:	2b09      	cmp	r3, #9
     30e:	d810      	bhi.n	332 <Parser_Main+0x1be>
     310:	3311      	adds	r3, #17
     312:	33ff      	adds	r3, #255	; 0xff
     314:	005b      	lsls	r3, r3, #1
     316:	4927      	ldr	r1, [pc, #156]	; (3b4 <Parser_Main+0x240>)
     318:	18cb      	adds	r3, r1, r3
     31a:	88db      	ldrh	r3, [r3, #6]
     31c:	b29b      	uxth	r3, r3
     31e:	2b00      	cmp	r3, #0
     320:	d007      	beq.n	332 <Parser_Main+0x1be>
                            parserCmdInfo.pParam4 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 4]]);
     322:	9b02      	ldr	r3, [sp, #8]
     324:	3321      	adds	r3, #33	; 0x21
     326:	33ff      	adds	r3, #255	; 0xff
     328:	005b      	lsls	r3, r3, #1
     32a:	18cb      	adds	r3, r1, r3
     32c:	885b      	ldrh	r3, [r3, #2]
     32e:	18c9      	adds	r1, r1, r3
     330:	9107      	str	r1, [sp, #28]
                        if((rxCmdIdx + 5U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 5U] > 0U))
     332:	3205      	adds	r2, #5
     334:	2a09      	cmp	r2, #9
     336:	d811      	bhi.n	35c <Parser_Main+0x1e8>
     338:	3211      	adds	r2, #17
     33a:	32ff      	adds	r2, #255	; 0xff
     33c:	0052      	lsls	r2, r2, #1
     33e:	4b1d      	ldr	r3, [pc, #116]	; (3b4 <Parser_Main+0x240>)
     340:	189a      	adds	r2, r3, r2
     342:	88d3      	ldrh	r3, [r2, #6]
     344:	b29b      	uxth	r3, r3
     346:	2b00      	cmp	r3, #0
     348:	d008      	beq.n	35c <Parser_Main+0x1e8>
                            parserCmdInfo.pParam5 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 5]]);
     34a:	4a1a      	ldr	r2, [pc, #104]	; (3b4 <Parser_Main+0x240>)
     34c:	9b02      	ldr	r3, [sp, #8]
     34e:	3322      	adds	r3, #34	; 0x22
     350:	33ff      	adds	r3, #255	; 0xff
     352:	005b      	lsls	r3, r3, #1
     354:	18d3      	adds	r3, r2, r3
     356:	885b      	ldrh	r3, [r3, #2]
     358:	18d2      	adds	r2, r2, r3
     35a:	9208      	str	r2, [sp, #32]
                        parserCmdEntry.pActionCbFct(&parserCmdInfo);
     35c:	a804      	add	r0, sp, #16
     35e:	47a0      	blx	r4
    if(parserCmdInfo.pReplyCmd)
     360:	9c09      	ldr	r4, [sp, #36]	; 0x24
     362:	2c00      	cmp	r4, #0
     364:	d000      	beq.n	368 <Parser_Main+0x1f4>
     366:	e766      	b.n	236 <Parser_Main+0xc2>
     368:	e76c      	b.n	244 <Parser_Main+0xd0>
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
     36a:	3311      	adds	r3, #17
     36c:	33ff      	adds	r3, #255	; 0xff
     36e:	005b      	lsls	r3, r3, #1
     370:	4910      	ldr	r1, [pc, #64]	; (3b4 <Parser_Main+0x240>)
     372:	18cb      	adds	r3, r1, r3
     374:	88db      	ldrh	r3, [r3, #6]
     376:	b29b      	uxth	r3, r3
     378:	2b00      	cmp	r3, #0
     37a:	d09e      	beq.n	2ba <Parser_Main+0x146>
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
     37c:	9b02      	ldr	r3, [sp, #8]
     37e:	331e      	adds	r3, #30
     380:	33ff      	adds	r3, #255	; 0xff
     382:	005b      	lsls	r3, r3, #1
     384:	18cb      	adds	r3, r1, r3
     386:	885b      	ldrh	r3, [r3, #2]
     388:	18c9      	adds	r1, r1, r3
     38a:	9104      	str	r1, [sp, #16]
     38c:	e795      	b.n	2ba <Parser_Main+0x146>
    if(parserCmdInfo.pReplyCmd)
     38e:	4c0c      	ldr	r4, [pc, #48]	; (3c0 <Parser_Main+0x24c>)
     390:	e751      	b.n	236 <Parser_Main+0xc2>
     392:	4c0b      	ldr	r4, [pc, #44]	; (3c0 <Parser_Main+0x24c>)
     394:	e74f      	b.n	236 <Parser_Main+0xc2>
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <Parser_Main+0x24c>)
     398:	e74d      	b.n	236 <Parser_Main+0xc2>
     39a:	4c09      	ldr	r4, [pc, #36]	; (3c0 <Parser_Main+0x24c>)
     39c:	e74b      	b.n	236 <Parser_Main+0xc2>
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	0001d392 	.word	0x0001d392
     3a4:	20000008 	.word	0x20000008
     3a8:	000060d9 	.word	0x000060d9
     3ac:	00002451 	.word	0x00002451
     3b0:	0000024e 	.word	0x0000024e
     3b4:	20001dd8 	.word	0x20001dd8
     3b8:	0000024f 	.word	0x0000024f
     3bc:	00018b25 	.word	0x00018b25
     3c0:	0001d384 	.word	0x0001d384
     3c4:	00018bad 	.word	0x00018bad
     3c8:	00002415 	.word	0x00002415
     3cc:	000023c9 	.word	0x000023c9
     3d0:	00018779 	.word	0x00018779

000003d4 <Parser_GetSwVersion>:
{
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	0004      	movs	r4, r0
    memcpy(pBuffData, HW_STR, sizeof(HW_STR));
     3d8:	220b      	movs	r2, #11
     3da:	490d      	ldr	r1, [pc, #52]	; (410 <Parser_GetSwVersion+0x3c>)
     3dc:	4d0d      	ldr	r5, [pc, #52]	; (414 <Parser_GetSwVersion+0x40>)
     3de:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) - 1] = ' ';
     3e0:	2620      	movs	r6, #32
     3e2:	72a6      	strb	r6, [r4, #10]
    memcpy(&pBuffData[sizeof(HW_STR)], VER_STR, sizeof(VER_STR));
     3e4:	0020      	movs	r0, r4
     3e6:	300b      	adds	r0, #11
     3e8:	2210      	movs	r2, #16
     3ea:	490b      	ldr	r1, [pc, #44]	; (418 <Parser_GetSwVersion+0x44>)
     3ec:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) - 1] = ' ';
     3ee:	76a6      	strb	r6, [r4, #26]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR)], __DATE__, sizeof(__DATE__));
     3f0:	0020      	movs	r0, r4
     3f2:	301b      	adds	r0, #27
     3f4:	220c      	movs	r2, #12
     3f6:	4909      	ldr	r1, [pc, #36]	; (41c <Parser_GetSwVersion+0x48>)
     3f8:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) - 1] = ' ';
     3fa:	2326      	movs	r3, #38	; 0x26
     3fc:	54e6      	strb	r6, [r4, r3]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__)], __TIME__, sizeof(__TIME__));
     3fe:	0020      	movs	r0, r4
     400:	3027      	adds	r0, #39	; 0x27
     402:	2209      	movs	r2, #9
     404:	4906      	ldr	r1, [pc, #24]	; (420 <Parser_GetSwVersion+0x4c>)
     406:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) + sizeof(__TIME__)] = '\0';
     408:	2200      	movs	r2, #0
     40a:	2330      	movs	r3, #48	; 0x30
     40c:	54e2      	strb	r2, [r4, r3]
}
     40e:	bd70      	pop	{r4, r5, r6, pc}
     410:	0001d350 	.word	0x0001d350
     414:	00018655 	.word	0x00018655
     418:	0001d35c 	.word	0x0001d35c
     41c:	0001d36c 	.word	0x0001d36c
     420:	0001d378 	.word	0x0001d378

00000424 <ParserJoinData>:
	
	appHandle = NULL;
}

static void ParserJoinData(StackRetStatus_t status)
{
     424:	b510      	push	{r4, lr}
    uint8_t statusIdx = JOIN_DENY_STR_IDX;

    //TODO: make sure this does not interfere with the receiving commands

    //This is called every time the join process is finished
    if(LORAWAN_SUCCESS == status)
     426:	2808      	cmp	r0, #8
     428:	d012      	beq.n	450 <ParserJoinData+0x2c>
    {
        //Sucessful join
        statusIdx = JOIN_ACCEPT_STR_IDX;
    }
	else if (LORAWAN_NO_CHANNELS_FOUND == status)
     42a:	2810      	cmp	r0, #16
     42c:	d012      	beq.n	454 <ParserJoinData+0x30>
	{
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
	}
	else if (LORAWAN_TX_TIMEOUT == status)
     42e:	281b      	cmp	r0, #27
     430:	d012      	beq.n	458 <ParserJoinData+0x34>
	{
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
	}
	else if (LORAWAN_MIC_ERROR == status)
	{
		statusIdx = JOIN_MIC_ERROR_STR_IDX;
     432:	3818      	subs	r0, #24
     434:	4243      	negs	r3, r0
     436:	4158      	adcs	r0, r3
     438:	0080      	lsls	r0, r0, #2
	}
				
    Parser_TxAddReply((char*)gapParseJoinStatus[statusIdx], strlen((char*)gapParseJoinStatus[statusIdx]));
     43a:	0080      	lsls	r0, r0, #2
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <ParserJoinData+0x38>)
     43e:	58c4      	ldr	r4, [r0, r3]
     440:	0020      	movs	r0, r4
     442:	4b07      	ldr	r3, [pc, #28]	; (460 <ParserJoinData+0x3c>)
     444:	4798      	blx	r3
     446:	b281      	uxth	r1, r0
     448:	0020      	movs	r0, r4
     44a:	4b06      	ldr	r3, [pc, #24]	; (464 <ParserJoinData+0x40>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
        statusIdx = JOIN_ACCEPT_STR_IDX;
     450:	2001      	movs	r0, #1
     452:	e7f2      	b.n	43a <ParserJoinData+0x16>
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
     454:	2002      	movs	r0, #2
     456:	e7f0      	b.n	43a <ParserJoinData+0x16>
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
     458:	2003      	movs	r0, #3
     45a:	e7ee      	b.n	43a <ParserJoinData+0x16>
     45c:	0001df74 	.word	0x0001df74
     460:	00018bad 	.word	0x00018bad
     464:	00002415 	.word	0x00002415

00000468 <ParserAppData>:
{
     468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (data->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
     46a:	780b      	ldrb	r3, [r1, #0]
     46c:	2b02      	cmp	r3, #2
     46e:	d003      	beq.n	478 <ParserAppData+0x10>
    else if(data->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
     470:	2b04      	cmp	r3, #4
     472:	d100      	bne.n	476 <ParserAppData+0xe>
     474:	e09c      	b.n	5b0 <ParserAppData+0x148>
}
     476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch(status)
     478:	7b4b      	ldrb	r3, [r1, #13]
     47a:	3b08      	subs	r3, #8
     47c:	b2da      	uxtb	r2, r3
     47e:	2a16      	cmp	r2, #22
     480:	d8f9      	bhi.n	476 <ParserAppData+0xe>
     482:	0093      	lsls	r3, r2, #2
     484:	4a97      	ldr	r2, [pc, #604]	; (6e4 <ParserAppData+0x27c>)
     486:	58d3      	ldr	r3, [r2, r3]
     488:	469f      	mov	pc, r3
        uint8_t dataLength = data->param.rxData.dataLength;
     48a:	7b0d      	ldrb	r5, [r1, #12]
                if((dataLength > 0U) && (NULL != pData))
     48c:	2d00      	cmp	r5, #0
     48e:	d030      	beq.n	4f2 <ParserAppData+0x8a>
        uint8_t *pData = data->param.rxData.pData;
     490:	688e      	ldr	r6, [r1, #8]
                if((dataLength > 0U) && (NULL != pData))
     492:	2e00      	cmp	r6, #0
     494:	d02d      	beq.n	4f2 <ParserAppData+0x8a>
                    strcpy(aParserData, gapParserRxStatus[MAC_RX_DATA_STR_IDX]);
     496:	4c94      	ldr	r4, [pc, #592]	; (6e8 <ParserAppData+0x280>)
     498:	2208      	movs	r2, #8
     49a:	4994      	ldr	r1, [pc, #592]	; (6ec <ParserAppData+0x284>)
     49c:	0020      	movs	r0, r4
     49e:	4b94      	ldr	r3, [pc, #592]	; (6f0 <ParserAppData+0x288>)
     4a0:	4798      	blx	r3
                    dataLen = strlen(aParserData);
     4a2:	0020      	movs	r0, r4
     4a4:	4f93      	ldr	r7, [pc, #588]	; (6f4 <ParserAppData+0x28c>)
     4a6:	47b8      	blx	r7
                    itoa( *pData, &aParserData[dataLen],10);
     4a8:	0401      	lsls	r1, r0, #16
     4aa:	0c09      	lsrs	r1, r1, #16
     4ac:	1909      	adds	r1, r1, r4
     4ae:	7830      	ldrb	r0, [r6, #0]
     4b0:	220a      	movs	r2, #10
     4b2:	4b91      	ldr	r3, [pc, #580]	; (6f8 <ParserAppData+0x290>)
     4b4:	4798      	blx	r3
                    dataLen = strlen(aParserData);
     4b6:	0020      	movs	r0, r4
     4b8:	47b8      	blx	r7
                    aParserData[dataLen] = ' ';
     4ba:	0403      	lsls	r3, r0, #16
     4bc:	0c1b      	lsrs	r3, r3, #16
     4be:	2220      	movs	r2, #32
     4c0:	54e2      	strb	r2, [r4, r3]
                    dataLen ++;
     4c2:	3001      	adds	r0, #1
     4c4:	b280      	uxth	r0, r0
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
     4c6:	1902      	adds	r2, r0, r4
     4c8:	1c71      	adds	r1, r6, #1
                    maxDataLenToTx = ((dataLength - 1) <= ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1))) ? (dataLength - 1) : ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1));
     4ca:	4b8c      	ldr	r3, [pc, #560]	; (6fc <ParserAppData+0x294>)
     4cc:	1a1b      	subs	r3, r3, r0
     4ce:	03db      	lsls	r3, r3, #15
     4d0:	3d01      	subs	r5, #1
     4d2:	0c1b      	lsrs	r3, r3, #16
     4d4:	42ab      	cmp	r3, r5
     4d6:	dd00      	ble.n	4da <ParserAppData+0x72>
     4d8:	002b      	movs	r3, r5
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
     4da:	b2d8      	uxtb	r0, r3
     4dc:	4b88      	ldr	r3, [pc, #544]	; (700 <ParserAppData+0x298>)
     4de:	4798      	blx	r3
                    Parser_TxAddReply(aParserData, strlen(aParserData));
     4e0:	4c81      	ldr	r4, [pc, #516]	; (6e8 <ParserAppData+0x280>)
     4e2:	0020      	movs	r0, r4
     4e4:	4b83      	ldr	r3, [pc, #524]	; (6f4 <ParserAppData+0x28c>)
     4e6:	4798      	blx	r3
     4e8:	b281      	uxth	r1, r0
     4ea:	0020      	movs	r0, r4
     4ec:	4b85      	ldr	r3, [pc, #532]	; (704 <ParserAppData+0x29c>)
     4ee:	4798      	blx	r3
     4f0:	e7c1      	b.n	476 <ParserAppData+0xe>
                    Parser_TxAddReply((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX], strlen((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX]));
     4f2:	210c      	movs	r1, #12
     4f4:	4884      	ldr	r0, [pc, #528]	; (708 <ParserAppData+0x2a0>)
     4f6:	4b83      	ldr	r3, [pc, #524]	; (704 <ParserAppData+0x29c>)
     4f8:	4798      	blx	r3
     4fa:	e7bc      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
     4fc:	2109      	movs	r1, #9
     4fe:	4883      	ldr	r0, [pc, #524]	; (70c <ParserAppData+0x2a4>)
     500:	4b80      	ldr	r3, [pc, #512]	; (704 <ParserAppData+0x29c>)
     502:	4798      	blx	r3
				break;
     504:	e7b7      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
     506:	210d      	movs	r1, #13
     508:	4881      	ldr	r0, [pc, #516]	; (710 <ParserAppData+0x2a8>)
     50a:	4b7e      	ldr	r3, [pc, #504]	; (704 <ParserAppData+0x29c>)
     50c:	4798      	blx	r3
				break;
     50e:	e7b2      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
     510:	210d      	movs	r1, #13
     512:	4880      	ldr	r0, [pc, #512]	; (714 <ParserAppData+0x2ac>)
     514:	4b7b      	ldr	r3, [pc, #492]	; (704 <ParserAppData+0x29c>)
     516:	4798      	blx	r3
				break;
     518:	e7ad      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
     51a:	2106      	movs	r1, #6
     51c:	487e      	ldr	r0, [pc, #504]	; (718 <ParserAppData+0x2b0>)
     51e:	4b79      	ldr	r3, [pc, #484]	; (704 <ParserAppData+0x29c>)
     520:	4798      	blx	r3
				break;
     522:	e7a8      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
     524:	211e      	movs	r1, #30
     526:	487d      	ldr	r0, [pc, #500]	; (71c <ParserAppData+0x2b4>)
     528:	4b76      	ldr	r3, [pc, #472]	; (704 <ParserAppData+0x29c>)
     52a:	4798      	blx	r3
				break;
     52c:	e7a3      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
     52e:	210d      	movs	r1, #13
     530:	487b      	ldr	r0, [pc, #492]	; (720 <ParserAppData+0x2b8>)
     532:	4b74      	ldr	r3, [pc, #464]	; (704 <ParserAppData+0x29c>)
     534:	4798      	blx	r3
				break;
     536:	e79e      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
     538:	2109      	movs	r1, #9
     53a:	487a      	ldr	r0, [pc, #488]	; (724 <ParserAppData+0x2bc>)
     53c:	4b71      	ldr	r3, [pc, #452]	; (704 <ParserAppData+0x29c>)
     53e:	4798      	blx	r3
				break;
     540:	e799      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
     542:	210d      	movs	r1, #13
     544:	4878      	ldr	r0, [pc, #480]	; (728 <ParserAppData+0x2c0>)
     546:	4b6f      	ldr	r3, [pc, #444]	; (704 <ParserAppData+0x29c>)
     548:	4798      	blx	r3
				break;
     54a:	e794      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
     54c:	2115      	movs	r1, #21
     54e:	4877      	ldr	r0, [pc, #476]	; (72c <ParserAppData+0x2c4>)
     550:	4b6c      	ldr	r3, [pc, #432]	; (704 <ParserAppData+0x29c>)
     552:	4798      	blx	r3
				break;
     554:	e78f      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
     556:	210a      	movs	r1, #10
     558:	4875      	ldr	r0, [pc, #468]	; (730 <ParserAppData+0x2c8>)
     55a:	4b6a      	ldr	r3, [pc, #424]	; (704 <ParserAppData+0x29c>)
     55c:	4798      	blx	r3
				break;
     55e:	e78a      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
     560:	2111      	movs	r1, #17
     562:	4874      	ldr	r0, [pc, #464]	; (734 <ParserAppData+0x2cc>)
     564:	4b67      	ldr	r3, [pc, #412]	; (704 <ParserAppData+0x29c>)
     566:	4798      	blx	r3
				break;
     568:	e785      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
     56a:	210a      	movs	r1, #10
     56c:	4872      	ldr	r0, [pc, #456]	; (738 <ParserAppData+0x2d0>)
     56e:	4b65      	ldr	r3, [pc, #404]	; (704 <ParserAppData+0x29c>)
     570:	4798      	blx	r3
				break;
     572:	e780      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
     574:	2104      	movs	r1, #4
     576:	4871      	ldr	r0, [pc, #452]	; (73c <ParserAppData+0x2d4>)
     578:	4b62      	ldr	r3, [pc, #392]	; (704 <ParserAppData+0x29c>)
     57a:	4798      	blx	r3
				break;
     57c:	e77b      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
     57e:	2107      	movs	r1, #7
     580:	486f      	ldr	r0, [pc, #444]	; (740 <ParserAppData+0x2d8>)
     582:	4b60      	ldr	r3, [pc, #384]	; (704 <ParserAppData+0x29c>)
     584:	4798      	blx	r3
				break;
     586:	e776      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
     588:	2110      	movs	r1, #16
     58a:	486e      	ldr	r0, [pc, #440]	; (744 <ParserAppData+0x2dc>)
     58c:	4b5d      	ldr	r3, [pc, #372]	; (704 <ParserAppData+0x29c>)
     58e:	4798      	blx	r3
				break;
     590:	e771      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
     592:	2114      	movs	r1, #20
     594:	486c      	ldr	r0, [pc, #432]	; (748 <ParserAppData+0x2e0>)
     596:	4b5b      	ldr	r3, [pc, #364]	; (704 <ParserAppData+0x29c>)
     598:	4798      	blx	r3
				break;
     59a:	e76c      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
     59c:	210f      	movs	r1, #15
     59e:	486b      	ldr	r0, [pc, #428]	; (74c <ParserAppData+0x2e4>)
     5a0:	4b58      	ldr	r3, [pc, #352]	; (704 <ParserAppData+0x29c>)
     5a2:	4798      	blx	r3
				break;	
     5a4:	e767      	b.n	476 <ParserAppData+0xe>
           		Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
     5a6:	210e      	movs	r1, #14
     5a8:	4869      	ldr	r0, [pc, #420]	; (750 <ParserAppData+0x2e8>)
     5aa:	4b56      	ldr	r3, [pc, #344]	; (704 <ParserAppData+0x29c>)
     5ac:	4798      	blx	r3
           		break;
     5ae:	e762      	b.n	476 <ParserAppData+0xe>
        switch(data->param.transCmpl.status)
     5b0:	790b      	ldrb	r3, [r1, #4]
     5b2:	2b1e      	cmp	r3, #30
     5b4:	d900      	bls.n	5b8 <ParserAppData+0x150>
     5b6:	e75e      	b.n	476 <ParserAppData+0xe>
     5b8:	009b      	lsls	r3, r3, #2
     5ba:	4a66      	ldr	r2, [pc, #408]	; (754 <ParserAppData+0x2ec>)
     5bc:	58d3      	ldr	r3, [r2, r3]
     5be:	469f      	mov	pc, r3
		        Parser_TxAddReply((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX]));
     5c0:	2109      	movs	r1, #9
     5c2:	4865      	ldr	r0, [pc, #404]	; (758 <ParserAppData+0x2f0>)
     5c4:	4b4f      	ldr	r3, [pc, #316]	; (704 <ParserAppData+0x29c>)
     5c6:	4798      	blx	r3
	        break;
     5c8:	e755      	b.n	476 <ParserAppData+0xe>
		        Parser_TxAddReply((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX]));
     5ca:	210b      	movs	r1, #11
     5cc:	4863      	ldr	r0, [pc, #396]	; (75c <ParserAppData+0x2f4>)
     5ce:	4b4d      	ldr	r3, [pc, #308]	; (704 <ParserAppData+0x29c>)
     5d0:	4798      	blx	r3
	        break;
     5d2:	e750      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX]));
     5d4:	210d      	movs	r1, #13
     5d6:	4862      	ldr	r0, [pc, #392]	; (760 <ParserAppData+0x2f8>)
     5d8:	4b4a      	ldr	r3, [pc, #296]	; (704 <ParserAppData+0x29c>)
     5da:	4798      	blx	r3
			    break;
     5dc:	e74b      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX]));
     5de:	2110      	movs	r1, #16
     5e0:	4860      	ldr	r0, [pc, #384]	; (764 <ParserAppData+0x2fc>)
     5e2:	4b48      	ldr	r3, [pc, #288]	; (704 <ParserAppData+0x29c>)
     5e4:	4798      	blx	r3
				break;
     5e6:	e746      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX]));
     5e8:	210a      	movs	r1, #10
     5ea:	485f      	ldr	r0, [pc, #380]	; (768 <ParserAppData+0x300>)
     5ec:	4b45      	ldr	r3, [pc, #276]	; (704 <ParserAppData+0x29c>)
     5ee:	4798      	blx	r3
				break;				
     5f0:	e741      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX]));
     5f2:	210f      	movs	r1, #15
     5f4:	485d      	ldr	r0, [pc, #372]	; (76c <ParserAppData+0x304>)
     5f6:	4b43      	ldr	r3, [pc, #268]	; (704 <ParserAppData+0x29c>)
     5f8:	4798      	blx	r3
				break;
     5fa:	e73c      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX]));
     5fc:	2111      	movs	r1, #17
     5fe:	485c      	ldr	r0, [pc, #368]	; (770 <ParserAppData+0x308>)
     600:	4b40      	ldr	r3, [pc, #256]	; (704 <ParserAppData+0x29c>)
     602:	4798      	blx	r3
				break;
     604:	e737      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX]));
     606:	210a      	movs	r1, #10
     608:	485a      	ldr	r0, [pc, #360]	; (774 <ParserAppData+0x30c>)
     60a:	4b3e      	ldr	r3, [pc, #248]	; (704 <ParserAppData+0x29c>)
     60c:	4798      	blx	r3
				break;
     60e:	e732      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX]));
     610:	2112      	movs	r1, #18
     612:	4859      	ldr	r0, [pc, #356]	; (778 <ParserAppData+0x310>)
     614:	4b3b      	ldr	r3, [pc, #236]	; (704 <ParserAppData+0x29c>)
     616:	4798      	blx	r3
				break;
     618:	e72d      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX]));
     61a:	2110      	movs	r1, #16
     61c:	4857      	ldr	r0, [pc, #348]	; (77c <ParserAppData+0x314>)
     61e:	4b39      	ldr	r3, [pc, #228]	; (704 <ParserAppData+0x29c>)
     620:	4798      	blx	r3
				break;
     622:	e728      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX]));
     624:	2112      	movs	r1, #18
     626:	4856      	ldr	r0, [pc, #344]	; (780 <ParserAppData+0x318>)
     628:	4b36      	ldr	r3, [pc, #216]	; (704 <ParserAppData+0x29c>)
     62a:	4798      	blx	r3
				break;
     62c:	e723      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
     62e:	2109      	movs	r1, #9
     630:	4836      	ldr	r0, [pc, #216]	; (70c <ParserAppData+0x2a4>)
     632:	4b34      	ldr	r3, [pc, #208]	; (704 <ParserAppData+0x29c>)
     634:	4798      	blx	r3
				break;
     636:	e71e      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
     638:	210d      	movs	r1, #13
     63a:	4835      	ldr	r0, [pc, #212]	; (710 <ParserAppData+0x2a8>)
     63c:	4b31      	ldr	r3, [pc, #196]	; (704 <ParserAppData+0x29c>)
     63e:	4798      	blx	r3
				break;
     640:	e719      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
     642:	210d      	movs	r1, #13
     644:	4833      	ldr	r0, [pc, #204]	; (714 <ParserAppData+0x2ac>)
     646:	4b2f      	ldr	r3, [pc, #188]	; (704 <ParserAppData+0x29c>)
     648:	4798      	blx	r3
				break;
     64a:	e714      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
     64c:	2106      	movs	r1, #6
     64e:	4832      	ldr	r0, [pc, #200]	; (718 <ParserAppData+0x2b0>)
     650:	4b2c      	ldr	r3, [pc, #176]	; (704 <ParserAppData+0x29c>)
     652:	4798      	blx	r3
				break;
     654:	e70f      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
     656:	211e      	movs	r1, #30
     658:	4830      	ldr	r0, [pc, #192]	; (71c <ParserAppData+0x2b4>)
     65a:	4b2a      	ldr	r3, [pc, #168]	; (704 <ParserAppData+0x29c>)
     65c:	4798      	blx	r3
				break;
     65e:	e70a      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
     660:	210d      	movs	r1, #13
     662:	482f      	ldr	r0, [pc, #188]	; (720 <ParserAppData+0x2b8>)
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <ParserAppData+0x29c>)
     666:	4798      	blx	r3
				break;
     668:	e705      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
     66a:	2109      	movs	r1, #9
     66c:	482d      	ldr	r0, [pc, #180]	; (724 <ParserAppData+0x2bc>)
     66e:	4b25      	ldr	r3, [pc, #148]	; (704 <ParserAppData+0x29c>)
     670:	4798      	blx	r3
				break;
     672:	e700      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
     674:	210d      	movs	r1, #13
     676:	482c      	ldr	r0, [pc, #176]	; (728 <ParserAppData+0x2c0>)
     678:	4b22      	ldr	r3, [pc, #136]	; (704 <ParserAppData+0x29c>)
     67a:	4798      	blx	r3
				break;
     67c:	e6fb      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
     67e:	2115      	movs	r1, #21
     680:	482a      	ldr	r0, [pc, #168]	; (72c <ParserAppData+0x2c4>)
     682:	4b20      	ldr	r3, [pc, #128]	; (704 <ParserAppData+0x29c>)
     684:	4798      	blx	r3
				break;
     686:	e6f6      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
     688:	210a      	movs	r1, #10
     68a:	4829      	ldr	r0, [pc, #164]	; (730 <ParserAppData+0x2c8>)
     68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <ParserAppData+0x29c>)
     68e:	4798      	blx	r3
				break;
     690:	e6f1      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
     692:	2111      	movs	r1, #17
     694:	4827      	ldr	r0, [pc, #156]	; (734 <ParserAppData+0x2cc>)
     696:	4b1b      	ldr	r3, [pc, #108]	; (704 <ParserAppData+0x29c>)
     698:	4798      	blx	r3
				break;
     69a:	e6ec      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
     69c:	210a      	movs	r1, #10
     69e:	4826      	ldr	r0, [pc, #152]	; (738 <ParserAppData+0x2d0>)
     6a0:	4b18      	ldr	r3, [pc, #96]	; (704 <ParserAppData+0x29c>)
     6a2:	4798      	blx	r3
				break;
     6a4:	e6e7      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
     6a6:	2104      	movs	r1, #4
     6a8:	4824      	ldr	r0, [pc, #144]	; (73c <ParserAppData+0x2d4>)
     6aa:	4b16      	ldr	r3, [pc, #88]	; (704 <ParserAppData+0x29c>)
     6ac:	4798      	blx	r3
				break;
     6ae:	e6e2      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
     6b0:	2107      	movs	r1, #7
     6b2:	4823      	ldr	r0, [pc, #140]	; (740 <ParserAppData+0x2d8>)
     6b4:	4b13      	ldr	r3, [pc, #76]	; (704 <ParserAppData+0x29c>)
     6b6:	4798      	blx	r3
				break;
     6b8:	e6dd      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
     6ba:	2110      	movs	r1, #16
     6bc:	4821      	ldr	r0, [pc, #132]	; (744 <ParserAppData+0x2dc>)
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <ParserAppData+0x29c>)
     6c0:	4798      	blx	r3
				break;
     6c2:	e6d8      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
     6c4:	2114      	movs	r1, #20
     6c6:	4820      	ldr	r0, [pc, #128]	; (748 <ParserAppData+0x2e0>)
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <ParserAppData+0x29c>)
     6ca:	4798      	blx	r3
				break;
     6cc:	e6d3      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
     6ce:	210f      	movs	r1, #15
     6d0:	481e      	ldr	r0, [pc, #120]	; (74c <ParserAppData+0x2e4>)
     6d2:	4b0c      	ldr	r3, [pc, #48]	; (704 <ParserAppData+0x29c>)
     6d4:	4798      	blx	r3
				break;
     6d6:	e6ce      	b.n	476 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
     6d8:	210e      	movs	r1, #14
     6da:	481d      	ldr	r0, [pc, #116]	; (750 <ParserAppData+0x2e8>)
     6dc:	4b09      	ldr	r3, [pc, #36]	; (704 <ParserAppData+0x29c>)
     6de:	4798      	blx	r3
}
     6e0:	e6c9      	b.n	476 <ParserAppData+0xe>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	0001dc4c 	.word	0x0001dc4c
     6e8:	20000fac 	.word	0x20000fac
     6ec:	0001dd24 	.word	0x0001dd24
     6f0:	00018655 	.word	0x00018655
     6f4:	00018bad 	.word	0x00018bad
     6f8:	00018061 	.word	0x00018061
     6fc:	00000212 	.word	0x00000212
     700:	0000260d 	.word	0x0000260d
     704:	00002415 	.word	0x00002415
     708:	0001dd2c 	.word	0x0001dd2c
     70c:	0001dd3c 	.word	0x0001dd3c
     710:	0001d384 	.word	0x0001d384
     714:	0001dd48 	.word	0x0001dd48
     718:	0001dd58 	.word	0x0001dd58
     71c:	0001dd60 	.word	0x0001dd60
     720:	0001dd80 	.word	0x0001dd80
     724:	0001dd90 	.word	0x0001dd90
     728:	0001dd9c 	.word	0x0001dd9c
     72c:	0001ddac 	.word	0x0001ddac
     730:	0001ddc4 	.word	0x0001ddc4
     734:	0001ddd0 	.word	0x0001ddd0
     738:	0001dde4 	.word	0x0001dde4
     73c:	0001ddf0 	.word	0x0001ddf0
     740:	0001ddf8 	.word	0x0001ddf8
     744:	0001de00 	.word	0x0001de00
     748:	0001de14 	.word	0x0001de14
     74c:	0001de2c 	.word	0x0001de2c
     750:	0001de3c 	.word	0x0001de3c
     754:	0001dca8 	.word	0x0001dca8
     758:	0001de4c 	.word	0x0001de4c
     75c:	0001de58 	.word	0x0001de58
     760:	0001de64 	.word	0x0001de64
     764:	0001de74 	.word	0x0001de74
     768:	0001de88 	.word	0x0001de88
     76c:	0001de94 	.word	0x0001de94
     770:	0001dea4 	.word	0x0001dea4
     774:	0001deb8 	.word	0x0001deb8
     778:	0001dec4 	.word	0x0001dec4
     77c:	0001ded8 	.word	0x0001ded8
     780:	0001deec 	.word	0x0001deec

00000784 <Parser_SetConfiguredJoinParameters>:
    gParserConfiguredJoinParameters.value = val;
     784:	4b01      	ldr	r3, [pc, #4]	; (78c <Parser_SetConfiguredJoinParameters+0x8>)
     786:	8018      	strh	r0, [r3, #0]
}
     788:	4770      	bx	lr
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	20001dc8 	.word	0x20001dc8

00000790 <Parser_LorawanInit>:
{
     790:	b510      	push	{r4, lr}
    LORAWAN_Init(ParserAppData, ParserJoinData);
     792:	4904      	ldr	r1, [pc, #16]	; (7a4 <Parser_LorawanInit+0x14>)
     794:	4804      	ldr	r0, [pc, #16]	; (7a8 <Parser_LorawanInit+0x18>)
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <Parser_LorawanInit+0x1c>)
     798:	4798      	blx	r3
    gParserConfiguredJoinParameters.value = 0x00;
     79a:	2200      	movs	r2, #0
     79c:	4b04      	ldr	r3, [pc, #16]	; (7b0 <Parser_LorawanInit+0x20>)
     79e:	801a      	strh	r2, [r3, #0]
}
     7a0:	bd10      	pop	{r4, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	00000425 	.word	0x00000425
     7a8:	00000469 	.word	0x00000469
     7ac:	0000ead5 	.word	0x0000ead5
     7b0:	20001dc8 	.word	0x20001dc8

000007b4 <Parser_LoraReset>:
{
     7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b6:	46d6      	mov	lr, sl
     7b8:	4647      	mov	r7, r8
     7ba:	b580      	push	{r7, lr}
     7bc:	b085      	sub	sp, #20
     7be:	0007      	movs	r7, r0
     7c0:	4d2f      	ldr	r5, [pc, #188]	; (880 <Parser_LoraReset+0xcc>)
     7c2:	2400      	movs	r4, #0
	    if(0 == stricmp(pParserCmdInfo->pParam1, gapParseIsmBand[iCount]))
     7c4:	4b2f      	ldr	r3, [pc, #188]	; (884 <Parser_LoraReset+0xd0>)
     7c6:	469a      	mov	sl, r3
     7c8:	b2e3      	uxtb	r3, r4
     7ca:	4698      	mov	r8, r3
     7cc:	9401      	str	r4, [sp, #4]
     7ce:	682e      	ldr	r6, [r5, #0]
     7d0:	0031      	movs	r1, r6
     7d2:	6838      	ldr	r0, [r7, #0]
     7d4:	47d0      	blx	sl
     7d6:	2800      	cmp	r0, #0
     7d8:	d00d      	beq.n	7f6 <Parser_LoraReset+0x42>
     7da:	3401      	adds	r4, #1
     7dc:	3504      	adds	r5, #4
    for(iCount = 0; iCount < sizeof(gapParseIsmBand)/sizeof(gapParseIsmBand[0]); iCount++)
     7de:	2c10      	cmp	r4, #16
     7e0:	d1f2      	bne.n	7c8 <Parser_LoraReset+0x14>
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     7e2:	3c06      	subs	r4, #6
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     7e4:	00a4      	lsls	r4, r4, #2
     7e6:	4b28      	ldr	r3, [pc, #160]	; (888 <Parser_LoraReset+0xd4>)
     7e8:	58e3      	ldr	r3, [r4, r3]
     7ea:	617b      	str	r3, [r7, #20]
}
     7ec:	b005      	add	sp, #20
     7ee:	bc0c      	pop	{r2, r3}
     7f0:	4690      	mov	r8, r2
     7f2:	469a      	mov	sl, r3
     7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t supportedBands = 0;
     7f6:	ab02      	add	r3, sp, #8
     7f8:	1d9c      	adds	r4, r3, #6
     7fa:	2300      	movs	r3, #0
     7fc:	8023      	strh	r3, [r4, #0]
			LORAWAN_GetAttr(SUPPORTED_BANDS,NULL,&supportedBands);
     7fe:	0022      	movs	r2, r4
     800:	2100      	movs	r1, #0
     802:	3035      	adds	r0, #53	; 0x35
     804:	4b21      	ldr	r3, [pc, #132]	; (88c <Parser_LoraReset+0xd8>)
     806:	4798      	blx	r3
			if(((1 << iCount) & supportedBands) == 0)
     808:	8823      	ldrh	r3, [r4, #0]
     80a:	9a01      	ldr	r2, [sp, #4]
     80c:	4113      	asrs	r3, r2
     80e:	07db      	lsls	r3, r3, #31
     810:	d405      	bmi.n	81e <Parser_LoraReset+0x6a>
				printf("Band %s not supported\r\n",gapParseIsmBand[iCount]);
     812:	0031      	movs	r1, r6
     814:	481e      	ldr	r0, [pc, #120]	; (890 <Parser_LoraReset+0xdc>)
     816:	4b1f      	ldr	r3, [pc, #124]	; (894 <Parser_LoraReset+0xe0>)
     818:	4798      	blx	r3
				status = LORAWAN_UNSUPPORTED_BAND;
     81a:	2416      	movs	r4, #22
				break;
     81c:	e7e2      	b.n	7e4 <Parser_LoraReset+0x30>
			if(PDS_IsRestorable())
     81e:	4b1e      	ldr	r3, [pc, #120]	; (898 <Parser_LoraReset+0xe4>)
     820:	4798      	blx	r3
     822:	2800      	cmp	r0, #0
     824:	d018      	beq.n	858 <Parser_LoraReset+0xa4>
				uint8_t prevBand = 0xFF;
     826:	ab02      	add	r3, sp, #8
     828:	1d5c      	adds	r4, r3, #5
     82a:	23ff      	movs	r3, #255	; 0xff
     82c:	7023      	strb	r3, [r4, #0]
				PDS_RestoreAll();
     82e:	4b1b      	ldr	r3, [pc, #108]	; (89c <Parser_LoraReset+0xe8>)
     830:	4798      	blx	r3
				LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
     832:	0022      	movs	r2, r4
     834:	2100      	movs	r1, #0
     836:	2024      	movs	r0, #36	; 0x24
     838:	4b14      	ldr	r3, [pc, #80]	; (88c <Parser_LoraReset+0xd8>)
     83a:	4798      	blx	r3
				if(prevBand != iCount)
     83c:	7823      	ldrb	r3, [r4, #0]
     83e:	4543      	cmp	r3, r8
     840:	d013      	beq.n	86a <Parser_LoraReset+0xb6>
					PDS_DeleteAll();
     842:	4b17      	ldr	r3, [pc, #92]	; (8a0 <Parser_LoraReset+0xec>)
     844:	4798      	blx	r3
				status = LORAWAN_Reset(iCount);
     846:	4640      	mov	r0, r8
     848:	4b16      	ldr	r3, [pc, #88]	; (8a4 <Parser_LoraReset+0xf0>)
     84a:	4798      	blx	r3
     84c:	0004      	movs	r4, r0
				if(isSwitchReq == true && status == LORAWAN_SUCCESS)
     84e:	2808      	cmp	r0, #8
     850:	d10f      	bne.n	872 <Parser_LoraReset+0xbe>
					PDS_StoreAll();
     852:	4b15      	ldr	r3, [pc, #84]	; (8a8 <Parser_LoraReset+0xf4>)
     854:	4798      	blx	r3
     856:	e00e      	b.n	876 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
     858:	4640      	mov	r0, r8
     85a:	4b12      	ldr	r3, [pc, #72]	; (8a4 <Parser_LoraReset+0xf0>)
     85c:	4798      	blx	r3
     85e:	0004      	movs	r4, r0
				if(status == LORAWAN_SUCCESS)
     860:	2808      	cmp	r0, #8
     862:	d108      	bne.n	876 <Parser_LoraReset+0xc2>
				    PDS_StoreAll();					
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <Parser_LoraReset+0xf4>)
     866:	4798      	blx	r3
     868:	e005      	b.n	876 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
     86a:	4640      	mov	r0, r8
     86c:	4b0d      	ldr	r3, [pc, #52]	; (8a4 <Parser_LoraReset+0xf0>)
     86e:	4798      	blx	r3
     870:	0004      	movs	r4, r0
					PDS_RestoreAll();
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <Parser_LoraReset+0xe8>)
     874:	4798      	blx	r3
		    gParserConfiguredJoinParameters.value = 0x00;		    
     876:	2200      	movs	r2, #0
     878:	4b0c      	ldr	r3, [pc, #48]	; (8ac <Parser_LoraReset+0xf8>)
     87a:	801a      	strh	r2, [r3, #0]
		    break;
     87c:	e7b2      	b.n	7e4 <Parser_LoraReset+0x30>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	0001df34 	.word	0x0001df34
     884:	00002785 	.word	0x00002785
     888:	0001dfa8 	.word	0x0001dfa8
     88c:	0000fed1 	.word	0x0000fed1
     890:	0001df0c 	.word	0x0001df0c
     894:	0001882d 	.word	0x0001882d
     898:	0000c97d 	.word	0x0000c97d
     89c:	0000c9e1 	.word	0x0000c9e1
     8a0:	0000c9c5 	.word	0x0000c9c5
     8a4:	000123fd 	.word	0x000123fd
     8a8:	0000cacd 	.word	0x0000cacd
     8ac:	20001dc8 	.word	0x20001dc8

000008b0 <Parser_LoraJoin>:
{
     8b0:	b510      	push	{r4, lr}
     8b2:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParseJoinMode[OTAA_STR_IDX], gapParseJoinMode[ABP_STR_IDX]);
     8b4:	4a08      	ldr	r2, [pc, #32]	; (8d8 <Parser_LoraJoin+0x28>)
     8b6:	4909      	ldr	r1, [pc, #36]	; (8dc <Parser_LoraJoin+0x2c>)
     8b8:	6800      	ldr	r0, [r0, #0]
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <Parser_LoraJoin+0x30>)
     8bc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     8be:	230a      	movs	r3, #10
    if(validationVal < 2U)
     8c0:	2801      	cmp	r0, #1
     8c2:	d904      	bls.n	8ce <Parser_LoraJoin+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     8c4:	009b      	lsls	r3, r3, #2
     8c6:	4a07      	ldr	r2, [pc, #28]	; (8e4 <Parser_LoraJoin+0x34>)
     8c8:	589b      	ldr	r3, [r3, r2]
     8ca:	6163      	str	r3, [r4, #20]
}
     8cc:	bd10      	pop	{r4, pc}
        status = LORAWAN_Join(validationVal);
     8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <Parser_LoraJoin+0x38>)
     8d0:	4798      	blx	r3
     8d2:	0003      	movs	r3, r0
     8d4:	e7f6      	b.n	8c4 <Parser_LoraJoin+0x14>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	0001df00 	.word	0x0001df00
     8dc:	0001df04 	.word	0x0001df04
     8e0:	00002849 	.word	0x00002849
     8e4:	0001dfa8 	.word	0x0001dfa8
     8e8:	0000facd 	.word	0x0000facd

000008ec <Parser_LoraSend>:
{    
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	b085      	sub	sp, #20
     8f0:	0007      	movs	r7, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
     8f2:	6880      	ldr	r0, [r0, #8]
     8f4:	4b1d      	ldr	r3, [pc, #116]	; (96c <Parser_LoraSend+0x80>)
     8f6:	4798      	blx	r3
     8f8:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParserSendMode[UNCNF_STR_IDX], gapParserSendMode[CNF_STR_IDX]);
     8fa:	4a1d      	ldr	r2, [pc, #116]	; (970 <Parser_LoraSend+0x84>)
     8fc:	491d      	ldr	r1, [pc, #116]	; (974 <Parser_LoraSend+0x88>)
     8fe:	6838      	ldr	r0, [r7, #0]
     900:	4b1d      	ldr	r3, [pc, #116]	; (978 <Parser_LoraSend+0x8c>)
     902:	4798      	blx	r3
     904:	9001      	str	r0, [sp, #4]
     906:	0006      	movs	r6, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     908:	ab02      	add	r3, sp, #8
     90a:	1dd9      	adds	r1, r3, #7
     90c:	6878      	ldr	r0, [r7, #4]
     90e:	4b1b      	ldr	r3, [pc, #108]	; (97c <Parser_LoraSend+0x90>)
     910:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     912:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     914:	2800      	cmp	r0, #0
     916:	d005      	beq.n	924 <Parser_LoraSend+0x38>
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
     918:	b2a4      	uxth	r4, r4
    uint16_t  dataLen = asciiDataLen >> 1;
     91a:	0865      	lsrs	r5, r4, #1
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
     91c:	2dff      	cmp	r5, #255	; 0xff
     91e:	d801      	bhi.n	924 <Parser_LoraSend+0x38>
     920:	2e01      	cmp	r6, #1
     922:	d905      	bls.n	930 <Parser_LoraSend+0x44>
        pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     924:	009b      	lsls	r3, r3, #2
     926:	4a16      	ldr	r2, [pc, #88]	; (980 <Parser_LoraSend+0x94>)
     928:	589b      	ldr	r3, [r3, r2]
     92a:	617b      	str	r3, [r7, #20]
}
     92c:	b005      	add	sp, #20
     92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
     930:	68b8      	ldr	r0, [r7, #8]
     932:	4b14      	ldr	r3, [pc, #80]	; (984 <Parser_LoraSend+0x98>)
     934:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     936:	230a      	movs	r3, #10
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
     938:	2800      	cmp	r0, #0
     93a:	d0f3      	beq.n	924 <Parser_LoraSend+0x38>
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam3, (uint8_t *)aParserData);
     93c:	4a12      	ldr	r2, [pc, #72]	; (988 <Parser_LoraSend+0x9c>)
     93e:	68b9      	ldr	r1, [r7, #8]
     940:	0020      	movs	r0, r4
     942:	4b12      	ldr	r3, [pc, #72]	; (98c <Parser_LoraSend+0xa0>)
     944:	4798      	blx	r3
        if(asciiDataLen % 2 == 1)
     946:	07e3      	lsls	r3, r4, #31
     948:	d500      	bpl.n	94c <Parser_LoraSend+0x60>
            dataLen += 1;
     94a:	3501      	adds	r5, #1
        parser_data.confirmed = validationVal;
     94c:	4810      	ldr	r0, [pc, #64]	; (990 <Parser_LoraSend+0xa4>)
     94e:	466b      	mov	r3, sp
     950:	791b      	ldrb	r3, [r3, #4]
     952:	7003      	strb	r3, [r0, #0]
        parser_data.port = portValue;
     954:	ab02      	add	r3, sp, #8
     956:	3307      	adds	r3, #7
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	7043      	strb	r3, [r0, #1]
        parser_data.buffer = aParserData;
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <Parser_LoraSend+0x9c>)
     95e:	6043      	str	r3, [r0, #4]
        parser_data.bufferLength = (uint8_t)dataLen;
     960:	7205      	strb	r5, [r0, #8]
        status = LORAWAN_Send(&parser_data);
     962:	4b0c      	ldr	r3, [pc, #48]	; (994 <Parser_LoraSend+0xa8>)
     964:	4798      	blx	r3
     966:	0003      	movs	r3, r0
     968:	e7dc      	b.n	924 <Parser_LoraSend+0x38>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00018bad 	.word	0x00018bad
     970:	0001df28 	.word	0x0001df28
     974:	0001df2c 	.word	0x0001df2c
     978:	00002849 	.word	0x00002849
     97c:	0000266d 	.word	0x0000266d
     980:	0001dfa8 	.word	0x0001dfa8
     984:	000025d9 	.word	0x000025d9
     988:	20000fac 	.word	0x20000fac
     98c:	000028e1 	.word	0x000028e1
     990:	20001dcc 	.word	0x20001dcc
     994:	0000ecad 	.word	0x0000ecad

00000998 <Parser_LoraSetCrtDataRate>:
{
     998:	b510      	push	{r4, lr}
     99a:	b082      	sub	sp, #8
     99c:	0004      	movs	r4, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
     99e:	466b      	mov	r3, sp
     9a0:	1dd9      	adds	r1, r3, #7
     9a2:	6800      	ldr	r0, [r0, #0]
     9a4:	4b08      	ldr	r3, [pc, #32]	; (9c8 <Parser_LoraSetCrtDataRate+0x30>)
     9a6:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     9a8:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
     9aa:	2800      	cmp	r0, #0
     9ac:	d105      	bne.n	9ba <Parser_LoraSetCrtDataRate+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     9ae:	009b      	lsls	r3, r3, #2
     9b0:	4a06      	ldr	r2, [pc, #24]	; (9cc <Parser_LoraSetCrtDataRate+0x34>)
     9b2:	589b      	ldr	r3, [r3, r2]
     9b4:	6163      	str	r3, [r4, #20]
}
     9b6:	b002      	add	sp, #8
     9b8:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CURRENT_DATARATE,&datarate);
     9ba:	466b      	mov	r3, sp
     9bc:	1dd9      	adds	r1, r3, #7
     9be:	2007      	movs	r0, #7
     9c0:	4b03      	ldr	r3, [pc, #12]	; (9d0 <Parser_LoraSetCrtDataRate+0x38>)
     9c2:	4798      	blx	r3
     9c4:	0003      	movs	r3, r0
     9c6:	e7f2      	b.n	9ae <Parser_LoraSetCrtDataRate+0x16>
     9c8:	0000266d 	.word	0x0000266d
     9cc:	0001dfa8 	.word	0x0001dfa8
     9d0:	00011e81 	.word	0x00011e81

000009d4 <Parser_LoraGetCrtDataRate>:
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	b082      	sub	sp, #8
     9d8:	0006      	movs	r6, r0
	LORAWAN_GetAttr(CURRENT_DATARATE,NULL,&crtDatarate);
     9da:	466b      	mov	r3, sp
     9dc:	1ddd      	adds	r5, r3, #7
     9de:	002a      	movs	r2, r5
     9e0:	2100      	movs	r1, #0
     9e2:	2007      	movs	r0, #7
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <Parser_LoraGetCrtDataRate+0x28>)
     9e6:	4798      	blx	r3
 	itoa(crtDatarate, aParserData, 10U);
     9e8:	4c05      	ldr	r4, [pc, #20]	; (a00 <Parser_LoraGetCrtDataRate+0x2c>)
     9ea:	7828      	ldrb	r0, [r5, #0]
     9ec:	220a      	movs	r2, #10
     9ee:	0021      	movs	r1, r4
     9f0:	4b04      	ldr	r3, [pc, #16]	; (a04 <Parser_LoraGetCrtDataRate+0x30>)
     9f2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     9f4:	6174      	str	r4, [r6, #20]
}
     9f6:	b002      	add	sp, #8
     9f8:	bd70      	pop	{r4, r5, r6, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	0000fed1 	.word	0x0000fed1
     a00:	20000fac 	.word	0x20000fac
     a04:	00018061 	.word	0x00018061

00000a08 <Parser_LoraSetAdr>:
{
     a08:	b510      	push	{r4, lr}
     a0a:	b082      	sub	sp, #8
     a0c:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
     a0e:	6800      	ldr	r0, [r0, #0]
     a10:	4b09      	ldr	r3, [pc, #36]	; (a38 <Parser_LoraSetAdr+0x30>)
     a12:	4798      	blx	r3
     a14:	466b      	mov	r3, sp
     a16:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     a18:	230a      	movs	r3, #10
    if(validationVal < 2U)
     a1a:	2801      	cmp	r0, #1
     a1c:	d905      	bls.n	a2a <Parser_LoraSetAdr+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     a1e:	009b      	lsls	r3, r3, #2
     a20:	4a06      	ldr	r2, [pc, #24]	; (a3c <Parser_LoraSetAdr+0x34>)
     a22:	589b      	ldr	r3, [r3, r2]
     a24:	6163      	str	r3, [r4, #20]
}
     a26:	b002      	add	sp, #8
     a28:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(ADR,&validationVal);
     a2a:	466b      	mov	r3, sp
     a2c:	1dd9      	adds	r1, r3, #7
     a2e:	2006      	movs	r0, #6
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <Parser_LoraSetAdr+0x38>)
     a32:	4798      	blx	r3
     a34:	0003      	movs	r3, r0
     a36:	e7f2      	b.n	a1e <Parser_LoraSetAdr+0x16>
     a38:	00002815 	.word	0x00002815
     a3c:	0001dfa8 	.word	0x0001dfa8
     a40:	00011e81 	.word	0x00011e81

00000a44 <Parser_LoraGetAdr>:
{
     a44:	b530      	push	{r4, r5, lr}
     a46:	b083      	sub	sp, #12
     a48:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ADR,NULL,&adrEnabled);
     a4a:	466b      	mov	r3, sp
     a4c:	1ddc      	adds	r4, r3, #7
     a4e:	0022      	movs	r2, r4
     a50:	2100      	movs	r1, #0
     a52:	2006      	movs	r0, #6
     a54:	4b04      	ldr	r3, [pc, #16]	; (a68 <Parser_LoraGetAdr+0x24>)
     a56:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[adrEnabled];
     a58:	7823      	ldrb	r3, [r4, #0]
     a5a:	009b      	lsls	r3, r3, #2
     a5c:	4a03      	ldr	r2, [pc, #12]	; (a6c <Parser_LoraGetAdr+0x28>)
     a5e:	589b      	ldr	r3, [r3, r2]
     a60:	616b      	str	r3, [r5, #20]
}
     a62:	b003      	add	sp, #12
     a64:	bd30      	pop	{r4, r5, pc}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	0000fed1 	.word	0x0000fed1
     a6c:	0001df88 	.word	0x0001df88

00000a70 <Parser_LoraSetDevAddr>:
{
     a70:	b510      	push	{r4, lr}
     a72:	b082      	sub	sp, #8
     a74:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     a76:	6800      	ldr	r0, [r0, #0]
     a78:	4b14      	ldr	r3, [pc, #80]	; (acc <Parser_LoraSetDevAddr+0x5c>)
     a7a:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     a7c:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     a7e:	2800      	cmp	r0, #0
     a80:	d105      	bne.n	a8e <Parser_LoraSetDevAddr+0x1e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     a82:	009b      	lsls	r3, r3, #2
     a84:	4a12      	ldr	r2, [pc, #72]	; (ad0 <Parser_LoraSetDevAddr+0x60>)
     a86:	589b      	ldr	r3, [r3, r2]
     a88:	6163      	str	r3, [r4, #20]
}
     a8a:	b002      	add	sp, #8
     a8c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
     a8e:	aa01      	add	r2, sp, #4
     a90:	6821      	ldr	r1, [r4, #0]
     a92:	2008      	movs	r0, #8
     a94:	4b0f      	ldr	r3, [pc, #60]	; (ad4 <Parser_LoraSetDevAddr+0x64>)
     a96:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     a98:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
     a9a:	2800      	cmp	r0, #0
     a9c:	d0f1      	beq.n	a82 <Parser_LoraSetDevAddr+0x12>
            devAddr += ((uint32_t)tempBuff[2]) << 8;
     a9e:	aa01      	add	r2, sp, #4
     aa0:	7893      	ldrb	r3, [r2, #2]
     aa2:	021b      	lsls	r3, r3, #8
            devAddr += ((uint32_t)tempBuff[1]) << 16;
     aa4:	7851      	ldrb	r1, [r2, #1]
     aa6:	0409      	lsls	r1, r1, #16
     aa8:	185b      	adds	r3, r3, r1
            devAddr = (uint32_t)tempBuff[3];
     aaa:	78d1      	ldrb	r1, [r2, #3]
            devAddr += ((uint32_t)tempBuff[1]) << 16;
     aac:	185b      	adds	r3, r3, r1
            devAddr += ((uint32_t)tempBuff[0]) << 24;
     aae:	7812      	ldrb	r2, [r2, #0]
     ab0:	0612      	lsls	r2, r2, #24
     ab2:	189b      	adds	r3, r3, r2
     ab4:	9300      	str	r3, [sp, #0]
            statusIdx = LORAWAN_SetAttr (DEV_ADDR,&devAddr);
     ab6:	4669      	mov	r1, sp
     ab8:	2002      	movs	r0, #2
     aba:	4b07      	ldr	r3, [pc, #28]	; (ad8 <Parser_LoraSetDevAddr+0x68>)
     abc:	4798      	blx	r3
     abe:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.devaddr = 1;
     ac0:	4906      	ldr	r1, [pc, #24]	; (adc <Parser_LoraSetDevAddr+0x6c>)
     ac2:	780a      	ldrb	r2, [r1, #0]
     ac4:	2008      	movs	r0, #8
     ac6:	4302      	orrs	r2, r0
     ac8:	700a      	strb	r2, [r1, #0]
     aca:	e7da      	b.n	a82 <Parser_LoraSetDevAddr+0x12>
     acc:	000025d9 	.word	0x000025d9
     ad0:	0001dfa8 	.word	0x0001dfa8
     ad4:	000028e1 	.word	0x000028e1
     ad8:	00011e81 	.word	0x00011e81
     adc:	20001dc8 	.word	0x20001dc8

00000ae0 <Parser_LoraGetDevAddr>:
{
     ae0:	b530      	push	{r4, r5, lr}
     ae2:	b083      	sub	sp, #12
     ae4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddr);
     ae6:	aa01      	add	r2, sp, #4
     ae8:	2100      	movs	r1, #0
     aea:	2002      	movs	r0, #2
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <Parser_LoraGetDevAddr+0x34>)
     aee:	4798      	blx	r3
    tempBuff[3] = (uint8_t)devAddr;
     af0:	9b01      	ldr	r3, [sp, #4]
     af2:	466a      	mov	r2, sp
     af4:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(devAddr >> 8);
     af6:	0a1a      	lsrs	r2, r3, #8
     af8:	4669      	mov	r1, sp
     afa:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(devAddr >> 16);
     afc:	0c1a      	lsrs	r2, r3, #16
     afe:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(devAddr >> 24);
     b00:	0e1b      	lsrs	r3, r3, #24
     b02:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
     b04:	4c04      	ldr	r4, [pc, #16]	; (b18 <Parser_LoraGetDevAddr+0x38>)
     b06:	0022      	movs	r2, r4
     b08:	2004      	movs	r0, #4
     b0a:	4b04      	ldr	r3, [pc, #16]	; (b1c <Parser_LoraGetDevAddr+0x3c>)
     b0c:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
     b0e:	616c      	str	r4, [r5, #20]
}
     b10:	b003      	add	sp, #12
     b12:	bd30      	pop	{r4, r5, pc}
     b14:	0000fed1 	.word	0x0000fed1
     b18:	20000fac 	.word	0x20000fac
     b1c:	0000260d 	.word	0x0000260d

00000b20 <Parser_LoraSetDevEui>:
{
     b20:	b510      	push	{r4, lr}
     b22:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     b24:	6800      	ldr	r0, [r0, #0]
     b26:	4b0e      	ldr	r3, [pc, #56]	; (b60 <Parser_LoraSetDevEui+0x40>)
     b28:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     b2a:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     b2c:	2800      	cmp	r0, #0
     b2e:	d104      	bne.n	b3a <Parser_LoraSetDevEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     b30:	009b      	lsls	r3, r3, #2
     b32:	4a0c      	ldr	r2, [pc, #48]	; (b64 <Parser_LoraSetDevEui+0x44>)
     b34:	589b      	ldr	r3, [r3, r2]
     b36:	6163      	str	r3, [r4, #20]
}
     b38:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     b3a:	4a0b      	ldr	r2, [pc, #44]	; (b68 <Parser_LoraSetDevEui+0x48>)
     b3c:	6821      	ldr	r1, [r4, #0]
     b3e:	2010      	movs	r0, #16
     b40:	4b0a      	ldr	r3, [pc, #40]	; (b6c <Parser_LoraSetDevEui+0x4c>)
     b42:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     b44:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     b46:	2800      	cmp	r0, #0
     b48:	d0f2      	beq.n	b30 <Parser_LoraSetDevEui+0x10>
            statusIdx = LORAWAN_SetAttr (DEV_EUI,aParserData);
     b4a:	4907      	ldr	r1, [pc, #28]	; (b68 <Parser_LoraSetDevEui+0x48>)
     b4c:	2000      	movs	r0, #0
     b4e:	4b08      	ldr	r3, [pc, #32]	; (b70 <Parser_LoraSetDevEui+0x50>)
     b50:	4798      	blx	r3
     b52:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.deveui = 1;
     b54:	4907      	ldr	r1, [pc, #28]	; (b74 <Parser_LoraSetDevEui+0x54>)
     b56:	780a      	ldrb	r2, [r1, #0]
     b58:	2001      	movs	r0, #1
     b5a:	4302      	orrs	r2, r0
     b5c:	700a      	strb	r2, [r1, #0]
     b5e:	e7e7      	b.n	b30 <Parser_LoraSetDevEui+0x10>
     b60:	000025d9 	.word	0x000025d9
     b64:	0001dfa8 	.word	0x0001dfa8
     b68:	20000fac 	.word	0x20000fac
     b6c:	000028e1 	.word	0x000028e1
     b70:	00011e81 	.word	0x00011e81
     b74:	20001dc8 	.word	0x20001dc8

00000b78 <Parser_LoraGetDevEui>:
{
     b78:	b530      	push	{r4, r5, lr}
     b7a:	b083      	sub	sp, #12
     b7c:	0005      	movs	r5, r0
    LORAWAN_GetAttr (DEV_EUI, NULL, aDevEui);
     b7e:	466a      	mov	r2, sp
     b80:	2100      	movs	r1, #0
     b82:	2000      	movs	r0, #0
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <Parser_LoraGetDevEui+0x24>)
     b86:	4798      	blx	r3
	Parser_IntArrayToHexAscii(DEV_EUI_LEN, aDevEui, aParserData);
     b88:	4c05      	ldr	r4, [pc, #20]	; (ba0 <Parser_LoraGetDevEui+0x28>)
     b8a:	0022      	movs	r2, r4
     b8c:	4669      	mov	r1, sp
     b8e:	2008      	movs	r0, #8
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <Parser_LoraGetDevEui+0x2c>)
     b92:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     b94:	616c      	str	r4, [r5, #20]
}
     b96:	b003      	add	sp, #12
     b98:	bd30      	pop	{r4, r5, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	0000fed1 	.word	0x0000fed1
     ba0:	20000fac 	.word	0x20000fac
     ba4:	0000260d 	.word	0x0000260d

00000ba8 <Parser_LoraSetJoinEui>:
{
     ba8:	b510      	push	{r4, lr}
     baa:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     bac:	6800      	ldr	r0, [r0, #0]
     bae:	4b0e      	ldr	r3, [pc, #56]	; (be8 <Parser_LoraSetJoinEui+0x40>)
     bb0:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     bb2:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     bb4:	2800      	cmp	r0, #0
     bb6:	d104      	bne.n	bc2 <Parser_LoraSetJoinEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     bb8:	009b      	lsls	r3, r3, #2
     bba:	4a0c      	ldr	r2, [pc, #48]	; (bec <Parser_LoraSetJoinEui+0x44>)
     bbc:	589b      	ldr	r3, [r3, r2]
     bbe:	6163      	str	r3, [r4, #20]
}
     bc0:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     bc2:	4a0b      	ldr	r2, [pc, #44]	; (bf0 <Parser_LoraSetJoinEui+0x48>)
     bc4:	6821      	ldr	r1, [r4, #0]
     bc6:	2010      	movs	r0, #16
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <Parser_LoraSetJoinEui+0x4c>)
     bca:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     bcc:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     bce:	2800      	cmp	r0, #0
     bd0:	d0f2      	beq.n	bb8 <Parser_LoraSetJoinEui+0x10>
            statusIdx = LORAWAN_SetAttr(JOIN_EUI,aParserData);
     bd2:	4907      	ldr	r1, [pc, #28]	; (bf0 <Parser_LoraSetJoinEui+0x48>)
     bd4:	2001      	movs	r0, #1
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <Parser_LoraSetJoinEui+0x50>)
     bd8:	4798      	blx	r3
     bda:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.joineui = 1;          
     bdc:	4907      	ldr	r1, [pc, #28]	; (bfc <Parser_LoraSetJoinEui+0x54>)
     bde:	780a      	ldrb	r2, [r1, #0]
     be0:	2002      	movs	r0, #2
     be2:	4302      	orrs	r2, r0
     be4:	700a      	strb	r2, [r1, #0]
     be6:	e7e7      	b.n	bb8 <Parser_LoraSetJoinEui+0x10>
     be8:	000025d9 	.word	0x000025d9
     bec:	0001dfa8 	.word	0x0001dfa8
     bf0:	20000fac 	.word	0x20000fac
     bf4:	000028e1 	.word	0x000028e1
     bf8:	00011e81 	.word	0x00011e81
     bfc:	20001dc8 	.word	0x20001dc8

00000c00 <Parser_LoraGetJoinEui>:
{
     c00:	b530      	push	{r4, r5, lr}
     c02:	b083      	sub	sp, #12
     c04:	0005      	movs	r5, r0
    LORAWAN_GetAttr(JOIN_EUI, NULL, aJoinEui);
     c06:	466a      	mov	r2, sp
     c08:	2100      	movs	r1, #0
     c0a:	2001      	movs	r0, #1
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <Parser_LoraGetJoinEui+0x24>)
     c0e:	4798      	blx	r3
	Parser_IntArrayToHexAscii(JOIN_EUI_LEN, aJoinEui, aParserData);
     c10:	4c05      	ldr	r4, [pc, #20]	; (c28 <Parser_LoraGetJoinEui+0x28>)
     c12:	0022      	movs	r2, r4
     c14:	4669      	mov	r1, sp
     c16:	2008      	movs	r0, #8
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <Parser_LoraGetJoinEui+0x2c>)
     c1a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
     c1c:	616c      	str	r4, [r5, #20]
}
     c1e:	b003      	add	sp, #12
     c20:	bd30      	pop	{r4, r5, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	0000fed1 	.word	0x0000fed1
     c28:	20000fac 	.word	0x20000fac
     c2c:	0000260d 	.word	0x0000260d

00000c30 <Parser_LoraSetNwkSKey>:
{
     c30:	b510      	push	{r4, lr}
     c32:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c34:	6800      	ldr	r0, [r0, #0]
     c36:	4b0e      	ldr	r3, [pc, #56]	; (c70 <Parser_LoraSetNwkSKey+0x40>)
     c38:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c3a:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c3c:	2800      	cmp	r0, #0
     c3e:	d104      	bne.n	c4a <Parser_LoraSetNwkSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     c40:	009b      	lsls	r3, r3, #2
     c42:	4a0c      	ldr	r2, [pc, #48]	; (c74 <Parser_LoraSetNwkSKey+0x44>)
     c44:	589b      	ldr	r3, [r3, r2]
     c46:	6163      	str	r3, [r4, #20]
}
     c48:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     c4a:	4a0b      	ldr	r2, [pc, #44]	; (c78 <Parser_LoraSetNwkSKey+0x48>)
     c4c:	6821      	ldr	r1, [r4, #0]
     c4e:	2020      	movs	r0, #32
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <Parser_LoraSetNwkSKey+0x4c>)
     c52:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c54:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     c56:	2800      	cmp	r0, #0
     c58:	d0f2      	beq.n	c40 <Parser_LoraSetNwkSKey+0x10>
            statusIdx = LORAWAN_SetAttr(NWKS_KEY,aParserData);
     c5a:	4907      	ldr	r1, [pc, #28]	; (c78 <Parser_LoraSetNwkSKey+0x48>)
     c5c:	2004      	movs	r0, #4
     c5e:	4b08      	ldr	r3, [pc, #32]	; (c80 <Parser_LoraSetNwkSKey+0x50>)
     c60:	4798      	blx	r3
     c62:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.nwkskey = 1;
     c64:	4907      	ldr	r1, [pc, #28]	; (c84 <Parser_LoraSetNwkSKey+0x54>)
     c66:	780a      	ldrb	r2, [r1, #0]
     c68:	2010      	movs	r0, #16
     c6a:	4302      	orrs	r2, r0
     c6c:	700a      	strb	r2, [r1, #0]
     c6e:	e7e7      	b.n	c40 <Parser_LoraSetNwkSKey+0x10>
     c70:	000025d9 	.word	0x000025d9
     c74:	0001dfa8 	.word	0x0001dfa8
     c78:	20000fac 	.word	0x20000fac
     c7c:	000028e1 	.word	0x000028e1
     c80:	00011e81 	.word	0x00011e81
     c84:	20001dc8 	.word	0x20001dc8

00000c88 <Parser_LoraSetAppSKey>:
{
     c88:	b510      	push	{r4, lr}
     c8a:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c8c:	6800      	ldr	r0, [r0, #0]
     c8e:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <Parser_LoraSetAppSKey+0x40>)
     c90:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     c92:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     c94:	2800      	cmp	r0, #0
     c96:	d104      	bne.n	ca2 <Parser_LoraSetAppSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     c98:	009b      	lsls	r3, r3, #2
     c9a:	4a0c      	ldr	r2, [pc, #48]	; (ccc <Parser_LoraSetAppSKey+0x44>)
     c9c:	589b      	ldr	r3, [r3, r2]
     c9e:	6163      	str	r3, [r4, #20]
}
     ca0:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     ca2:	4a0b      	ldr	r2, [pc, #44]	; (cd0 <Parser_LoraSetAppSKey+0x48>)
     ca4:	6821      	ldr	r1, [r4, #0]
     ca6:	2020      	movs	r0, #32
     ca8:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <Parser_LoraSetAppSKey+0x4c>)
     caa:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     cac:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     cae:	2800      	cmp	r0, #0
     cb0:	d0f2      	beq.n	c98 <Parser_LoraSetAppSKey+0x10>
            statusIdx = LORAWAN_SetAttr(APPS_KEY, aParserData);
     cb2:	4907      	ldr	r1, [pc, #28]	; (cd0 <Parser_LoraSetAppSKey+0x48>)
     cb4:	2005      	movs	r0, #5
     cb6:	4b08      	ldr	r3, [pc, #32]	; (cd8 <Parser_LoraSetAppSKey+0x50>)
     cb8:	4798      	blx	r3
     cba:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appskey = 1;
     cbc:	4907      	ldr	r1, [pc, #28]	; (cdc <Parser_LoraSetAppSKey+0x54>)
     cbe:	780a      	ldrb	r2, [r1, #0]
     cc0:	2020      	movs	r0, #32
     cc2:	4302      	orrs	r2, r0
     cc4:	700a      	strb	r2, [r1, #0]
     cc6:	e7e7      	b.n	c98 <Parser_LoraSetAppSKey+0x10>
     cc8:	000025d9 	.word	0x000025d9
     ccc:	0001dfa8 	.word	0x0001dfa8
     cd0:	20000fac 	.word	0x20000fac
     cd4:	000028e1 	.word	0x000028e1
     cd8:	00011e81 	.word	0x00011e81
     cdc:	20001dc8 	.word	0x20001dc8

00000ce0 <Parser_LoraSetAppKey>:
{
     ce0:	b510      	push	{r4, lr}
     ce2:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     ce4:	6800      	ldr	r0, [r0, #0]
     ce6:	4b0e      	ldr	r3, [pc, #56]	; (d20 <Parser_LoraSetAppKey+0x40>)
     ce8:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     cea:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
     cec:	2800      	cmp	r0, #0
     cee:	d104      	bne.n	cfa <Parser_LoraSetAppKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
     cf0:	009b      	lsls	r3, r3, #2
     cf2:	4a0c      	ldr	r2, [pc, #48]	; (d24 <Parser_LoraSetAppKey+0x44>)
     cf4:	589b      	ldr	r3, [r3, r2]
     cf6:	6163      	str	r3, [r4, #20]
}
     cf8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     cfa:	4a0b      	ldr	r2, [pc, #44]	; (d28 <Parser_LoraSetAppKey+0x48>)
     cfc:	6821      	ldr	r1, [r4, #0]
     cfe:	2020      	movs	r0, #32
     d00:	4b0a      	ldr	r3, [pc, #40]	; (d2c <Parser_LoraSetAppKey+0x4c>)
     d02:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
     d04:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
     d06:	2800      	cmp	r0, #0
     d08:	d0f2      	beq.n	cf0 <Parser_LoraSetAppKey+0x10>
             statusIdx = LORAWAN_SetAttr(APP_KEY,aParserData);
     d0a:	4907      	ldr	r1, [pc, #28]	; (d28 <Parser_LoraSetAppKey+0x48>)
     d0c:	2003      	movs	r0, #3
     d0e:	4b08      	ldr	r3, [pc, #32]	; (d30 <Parser_LoraSetAppKey+0x50>)
     d10:	4798      	blx	r3
     d12:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appkey = 1;
     d14:	4907      	ldr	r1, [pc, #28]	; (d34 <Parser_LoraSetAppKey+0x54>)
     d16:	780a      	ldrb	r2, [r1, #0]
     d18:	2004      	movs	r0, #4
     d1a:	4302      	orrs	r2, r0
     d1c:	700a      	strb	r2, [r1, #0]
     d1e:	e7e7      	b.n	cf0 <Parser_LoraSetAppKey+0x10>
     d20:	000025d9 	.word	0x000025d9
     d24:	0001dfa8 	.word	0x0001dfa8
     d28:	20000fac 	.word	0x20000fac
     d2c:	000028e1 	.word	0x000028e1
     d30:	00011e81 	.word	0x00011e81
     d34:	20001dc8 	.word	0x20001dc8

00000d38 <Parser_LoraSetChannelFreq>:
{
     d38:	b530      	push	{r4, r5, lr}
     d3a:	b085      	sub	sp, #20
     d3c:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
     d3e:	220a      	movs	r2, #10
     d40:	2100      	movs	r1, #0
     d42:	6840      	ldr	r0, [r0, #4]
     d44:	4b14      	ldr	r3, [pc, #80]	; (d98 <Parser_LoraSetChannelFreq+0x60>)
     d46:	4798      	blx	r3
     d48:	0005      	movs	r5, r0
    ChannelParameters_t ch_params = {0};
     d4a:	2208      	movs	r2, #8
     d4c:	2100      	movs	r1, #0
     d4e:	a801      	add	r0, sp, #4
     d50:	4b12      	ldr	r3, [pc, #72]	; (d9c <Parser_LoraSetChannelFreq+0x64>)
     d52:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d54:	210f      	movs	r1, #15
     d56:	4469      	add	r1, sp
     d58:	6820      	ldr	r0, [r4, #0]
     d5a:	4b11      	ldr	r3, [pc, #68]	; (da0 <Parser_LoraSetChannelFreq+0x68>)
     d5c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     d5e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d60:	2800      	cmp	r0, #0
     d62:	d105      	bne.n	d70 <Parser_LoraSetChannelFreq+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     d64:	009b      	lsls	r3, r3, #2
     d66:	4a0f      	ldr	r2, [pc, #60]	; (da4 <Parser_LoraSetChannelFreq+0x6c>)
     d68:	589b      	ldr	r3, [r3, r2]
     d6a:	6163      	str	r3, [r4, #20]
}
     d6c:	b005      	add	sp, #20
     d6e:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
     d70:	2201      	movs	r2, #1
     d72:	4252      	negs	r2, r2
     d74:	210a      	movs	r1, #10
     d76:	6860      	ldr	r0, [r4, #4]
     d78:	4b0b      	ldr	r3, [pc, #44]	; (da8 <Parser_LoraSetChannelFreq+0x70>)
     d7a:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     d7c:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
     d7e:	2800      	cmp	r0, #0
     d80:	d0f0      	beq.n	d64 <Parser_LoraSetChannelFreq+0x2c>
        ch_params.channelId = channelId;
     d82:	a901      	add	r1, sp, #4
     d84:	3305      	adds	r3, #5
     d86:	446b      	add	r3, sp
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.frequency = (uint32_t)freq;
     d8c:	604d      	str	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_FREQUENCY,&ch_params);
     d8e:	201b      	movs	r0, #27
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <Parser_LoraSetChannelFreq+0x74>)
     d92:	4798      	blx	r3
     d94:	0003      	movs	r3, r0
     d96:	e7e5      	b.n	d64 <Parser_LoraSetChannelFreq+0x2c>
     d98:	00018eb9 	.word	0x00018eb9
     d9c:	00018779 	.word	0x00018779
     da0:	0000266d 	.word	0x0000266d
     da4:	0001dfa8 	.word	0x0001dfa8
     da8:	00002741 	.word	0x00002741
     dac:	00011e81 	.word	0x00011e81

00000db0 <Parser_LoraGetChannelFreq>:
{
     db0:	b530      	push	{r4, r5, lr}
     db2:	b083      	sub	sp, #12
     db4:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     db6:	4b0d      	ldr	r3, [pc, #52]	; (dec <Parser_LoraGetChannelFreq+0x3c>)
     db8:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
     dba:	466b      	mov	r3, sp
     dbc:	1cd9      	adds	r1, r3, #3
     dbe:	6800      	ldr	r0, [r0, #0]
     dc0:	4b0b      	ldr	r3, [pc, #44]	; (df0 <Parser_LoraGetChannelFreq+0x40>)
     dc2:	4798      	blx	r3
     dc4:	2800      	cmp	r0, #0
     dc6:	d101      	bne.n	dcc <Parser_LoraGetChannelFreq+0x1c>
}
     dc8:	b003      	add	sp, #12
     dca:	bd30      	pop	{r4, r5, pc}
        status = LORAWAN_GetAttr(CH_PARAM_FREQUENCY,&channelId,&freq);
     dcc:	aa01      	add	r2, sp, #4
     dce:	466b      	mov	r3, sp
     dd0:	1cd9      	adds	r1, r3, #3
     dd2:	201b      	movs	r0, #27
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <Parser_LoraGetChannelFreq+0x44>)
     dd6:	4798      	blx	r3
		if(status == LORAWAN_SUCCESS)
     dd8:	2808      	cmp	r0, #8
     dda:	d1f5      	bne.n	dc8 <Parser_LoraGetChannelFreq+0x18>
			ultoa(aParserData, freq, 10U);
     ddc:	4d06      	ldr	r5, [pc, #24]	; (df8 <Parser_LoraGetChannelFreq+0x48>)
     dde:	220a      	movs	r2, #10
     de0:	9901      	ldr	r1, [sp, #4]
     de2:	0028      	movs	r0, r5
     de4:	4b05      	ldr	r3, [pc, #20]	; (dfc <Parser_LoraGetChannelFreq+0x4c>)
     de6:	4798      	blx	r3
			pParserCmdInfo->pReplyCmd = aParserData;	
     de8:	6165      	str	r5, [r4, #20]
}
     dea:	e7ed      	b.n	dc8 <Parser_LoraGetChannelFreq+0x18>
     dec:	0001d384 	.word	0x0001d384
     df0:	0000266d 	.word	0x0000266d
     df4:	0000fed1 	.word	0x0000fed1
     df8:	20000fac 	.word	0x20000fac
     dfc:	000026c5 	.word	0x000026c5

00000e00 <Parser_LoraSetSubBandStatus>:
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	46ce      	mov	lr, r9
     e04:	b500      	push	{lr}
     e06:	b086      	sub	sp, #24
     e08:	0006      	movs	r6, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
     e0a:	6840      	ldr	r0, [r0, #4]
     e0c:	4b23      	ldr	r3, [pc, #140]	; (e9c <Parser_LoraSetSubBandStatus+0x9c>)
     e0e:	4798      	blx	r3
     e10:	9001      	str	r0, [sp, #4]
     e12:	0005      	movs	r5, r0
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     e14:	210f      	movs	r1, #15
     e16:	ab02      	add	r3, sp, #8
     e18:	469c      	mov	ip, r3
     e1a:	4461      	add	r1, ip
     e1c:	6830      	ldr	r0, [r6, #0]
     e1e:	4b20      	ldr	r3, [pc, #128]	; (ea0 <Parser_LoraSetSubBandStatus+0xa0>)
     e20:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     e22:	230a      	movs	r3, #10
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     e24:	2800      	cmp	r0, #0
     e26:	d001      	beq.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
     e28:	2d01      	cmp	r5, #1
     e2a:	d907      	bls.n	e3c <Parser_LoraSetSubBandStatus+0x3c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     e2c:	009b      	lsls	r3, r3, #2
     e2e:	4a1d      	ldr	r2, [pc, #116]	; (ea4 <Parser_LoraSetSubBandStatus+0xa4>)
     e30:	589b      	ldr	r3, [r3, r2]
     e32:	6173      	str	r3, [r6, #20]
}
     e34:	b006      	add	sp, #24
     e36:	bc04      	pop	{r2}
     e38:	4691      	mov	r9, r2
     e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (subBandId >= 1) && 
     e3c:	3305      	adds	r3, #5
     e3e:	aa02      	add	r2, sp, #8
     e40:	4694      	mov	ip, r2
     e42:	4463      	add	r3, ip
     e44:	781a      	ldrb	r2, [r3, #0]
            (validationVal < 2U) && 
     e46:	1e51      	subs	r1, r2, #1
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     e48:	230a      	movs	r3, #10
            (validationVal < 2U) && 
     e4a:	2907      	cmp	r1, #7
     e4c:	d8ee      	bhi.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     e4e:	00cc      	lsls	r4, r1, #3
     e50:	b2e4      	uxtb	r4, r4
     e52:	00d3      	lsls	r3, r2, #3
     e54:	3b01      	subs	r3, #1
     e56:	429c      	cmp	r4, r3
     e58:	dc14      	bgt.n	e84 <Parser_LoraSetSubBandStatus+0x84>
			   ch_params.channelId = i;
     e5a:	af03      	add	r7, sp, #12
			   ch_params.channelAttr.status = validationVal;
     e5c:	1e6b      	subs	r3, r5, #1
     e5e:	419d      	sbcs	r5, r3
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e60:	4b11      	ldr	r3, [pc, #68]	; (ea8 <Parser_LoraSetSubBandStatus+0xa8>)
     e62:	4699      	mov	r9, r3
			   ch_params.channelId = i;
     e64:	703c      	strb	r4, [r7, #0]
			   ch_params.channelAttr.status = validationVal;
     e66:	713d      	strb	r5, [r7, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e68:	0039      	movs	r1, r7
     e6a:	201d      	movs	r0, #29
     e6c:	47c8      	blx	r9
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     e6e:	3401      	adds	r4, #1
     e70:	b2e4      	uxtb	r4, r4
     e72:	230f      	movs	r3, #15
     e74:	aa02      	add	r2, sp, #8
     e76:	4694      	mov	ip, r2
     e78:	4463      	add	r3, ip
     e7a:	781a      	ldrb	r2, [r3, #0]
     e7c:	00d3      	lsls	r3, r2, #3
     e7e:	3b01      	subs	r3, #1
     e80:	429c      	cmp	r4, r3
     e82:	ddef      	ble.n	e64 <Parser_LoraSetSubBandStatus+0x64>
               ch_params.channelId = (63 + subBandId);
     e84:	a903      	add	r1, sp, #12
     e86:	323f      	adds	r2, #63	; 0x3f
     e88:	700a      	strb	r2, [r1, #0]
               ch_params.channelAttr.status = validationVal;
     e8a:	9a01      	ldr	r2, [sp, #4]
     e8c:	1e53      	subs	r3, r2, #1
     e8e:	419a      	sbcs	r2, r3
     e90:	710a      	strb	r2, [r1, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
     e92:	201d      	movs	r0, #29
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <Parser_LoraSetSubBandStatus+0xa8>)
     e96:	4798      	blx	r3
     e98:	0003      	movs	r3, r0
     e9a:	e7c7      	b.n	e2c <Parser_LoraSetSubBandStatus+0x2c>
     e9c:	00002815 	.word	0x00002815
     ea0:	0000266d 	.word	0x0000266d
     ea4:	0001dfa8 	.word	0x0001dfa8
     ea8:	00011e81 	.word	0x00011e81

00000eac <Parser_LoraGetSubBandStatus>:
{
     eac:	b5f0      	push	{r4, r5, r6, r7, lr}
     eae:	46c6      	mov	lr, r8
     eb0:	b500      	push	{lr}
     eb2:	b082      	sub	sp, #8
     eb4:	0006      	movs	r6, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     eb6:	4b23      	ldr	r3, [pc, #140]	; (f44 <Parser_LoraGetSubBandStatus+0x98>)
     eb8:	6143      	str	r3, [r0, #20]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     eba:	466b      	mov	r3, sp
     ebc:	1dd9      	adds	r1, r3, #7
     ebe:	6800      	ldr	r0, [r0, #0]
     ec0:	4b21      	ldr	r3, [pc, #132]	; (f48 <Parser_LoraGetSubBandStatus+0x9c>)
     ec2:	4798      	blx	r3
     ec4:	2800      	cmp	r0, #0
     ec6:	d030      	beq.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
            (subBandId >= 1) && 
     ec8:	466b      	mov	r3, sp
     eca:	79da      	ldrb	r2, [r3, #7]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
     ecc:	1e53      	subs	r3, r2, #1
     ece:	2b07      	cmp	r3, #7
     ed0:	d82b      	bhi.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     ed2:	00dc      	lsls	r4, r3, #3
     ed4:	b2e4      	uxtb	r4, r4
     ed6:	00d3      	lsls	r3, r2, #3
     ed8:	3b01      	subs	r3, #1
     eda:	429c      	cmp	r4, r3
     edc:	dc1b      	bgt.n	f16 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
     ede:	466b      	mov	r3, sp
     ee0:	1ddd      	adds	r5, r3, #7
     ee2:	4f1a      	ldr	r7, [pc, #104]	; (f4c <Parser_LoraGetSubBandStatus+0xa0>)
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     ee4:	4b1a      	ldr	r3, [pc, #104]	; (f50 <Parser_LoraGetSubBandStatus+0xa4>)
     ee6:	4698      	mov	r8, r3
     ee8:	e006      	b.n	ef8 <Parser_LoraGetSubBandStatus+0x4c>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
     eea:	3401      	adds	r4, #1
     eec:	b2e4      	uxtb	r4, r4
     eee:	782a      	ldrb	r2, [r5, #0]
     ef0:	00d3      	lsls	r3, r2, #3
     ef2:	3b01      	subs	r3, #1
     ef4:	429c      	cmp	r4, r3
     ef6:	dc0e      	bgt.n	f16 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
     ef8:	466b      	mov	r3, sp
     efa:	1d9a      	adds	r2, r3, #6
     efc:	0029      	movs	r1, r5
     efe:	201d      	movs	r0, #29
     f00:	47b8      	blx	r7
     f02:	2808      	cmp	r0, #8
     f04:	d1f1      	bne.n	eea <Parser_LoraGetSubBandStatus+0x3e>
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     f06:	466b      	mov	r3, sp
     f08:	3306      	adds	r3, #6
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	009b      	lsls	r3, r3, #2
     f0e:	4642      	mov	r2, r8
     f10:	589b      	ldr	r3, [r3, r2]
     f12:	6173      	str	r3, [r6, #20]
     f14:	e7e9      	b.n	eea <Parser_LoraGetSubBandStatus+0x3e>
             uint8_t chId = 63 + subBandId;
     f16:	466b      	mov	r3, sp
     f18:	1d59      	adds	r1, r3, #5
     f1a:	323f      	adds	r2, #63	; 0x3f
     f1c:	700a      	strb	r2, [r1, #0]
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &chId, &chStatus) == LORAWAN_SUCCESS)
     f1e:	1d9a      	adds	r2, r3, #6
     f20:	201d      	movs	r0, #29
     f22:	4b0a      	ldr	r3, [pc, #40]	; (f4c <Parser_LoraGetSubBandStatus+0xa0>)
     f24:	4798      	blx	r3
     f26:	2808      	cmp	r0, #8
     f28:	d003      	beq.n	f32 <Parser_LoraGetSubBandStatus+0x86>
}
     f2a:	b002      	add	sp, #8
     f2c:	bc04      	pop	{r2}
     f2e:	4690      	mov	r8, r2
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     f32:	466b      	mov	r3, sp
     f34:	3306      	adds	r3, #6
     f36:	781b      	ldrb	r3, [r3, #0]
     f38:	009b      	lsls	r3, r3, #2
     f3a:	4a05      	ldr	r2, [pc, #20]	; (f50 <Parser_LoraGetSubBandStatus+0xa4>)
     f3c:	589b      	ldr	r3, [r3, r2]
     f3e:	6173      	str	r3, [r6, #20]
}
     f40:	e7f3      	b.n	f2a <Parser_LoraGetSubBandStatus+0x7e>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	0001d384 	.word	0x0001d384
     f48:	0000266d 	.word	0x0000266d
     f4c:	0000fed1 	.word	0x0000fed1
     f50:	0001df88 	.word	0x0001df88

00000f54 <Parser_LoraSetChannelStatus>:
{
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	b084      	sub	sp, #16
     f58:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
     f5a:	2208      	movs	r2, #8
     f5c:	2100      	movs	r1, #0
     f5e:	a801      	add	r0, sp, #4
     f60:	4b11      	ldr	r3, [pc, #68]	; (fa8 <Parser_LoraSetChannelStatus+0x54>)
     f62:	4798      	blx	r3
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
     f64:	6860      	ldr	r0, [r4, #4]
     f66:	4b11      	ldr	r3, [pc, #68]	; (fac <Parser_LoraSetChannelStatus+0x58>)
     f68:	4798      	blx	r3
     f6a:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
     f6c:	210f      	movs	r1, #15
     f6e:	4469      	add	r1, sp
     f70:	6820      	ldr	r0, [r4, #0]
     f72:	4b0f      	ldr	r3, [pc, #60]	; (fb0 <Parser_LoraSetChannelStatus+0x5c>)
     f74:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
     f76:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
     f78:	2800      	cmp	r0, #0
     f7a:	d001      	beq.n	f80 <Parser_LoraSetChannelStatus+0x2c>
     f7c:	2d01      	cmp	r5, #1
     f7e:	d905      	bls.n	f8c <Parser_LoraSetChannelStatus+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
     f80:	009b      	lsls	r3, r3, #2
     f82:	4a0c      	ldr	r2, [pc, #48]	; (fb4 <Parser_LoraSetChannelStatus+0x60>)
     f84:	589b      	ldr	r3, [r3, r2]
     f86:	6163      	str	r3, [r4, #20]
}
     f88:	b004      	add	sp, #16
     f8a:	bd70      	pop	{r4, r5, r6, pc}
        ch_params.channelId = channelId;
     f8c:	a901      	add	r1, sp, #4
     f8e:	3305      	adds	r3, #5
     f90:	446b      	add	r3, sp
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.status = validationVal;
     f96:	1e6b      	subs	r3, r5, #1
     f98:	419d      	sbcs	r5, r3
     f9a:	710d      	strb	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_STATUS,&ch_params);
     f9c:	201d      	movs	r0, #29
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <Parser_LoraSetChannelStatus+0x64>)
     fa0:	4798      	blx	r3
     fa2:	0003      	movs	r3, r0
     fa4:	e7ec      	b.n	f80 <Parser_LoraSetChannelStatus+0x2c>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	00018779 	.word	0x00018779
     fac:	00002815 	.word	0x00002815
     fb0:	0000266d 	.word	0x0000266d
     fb4:	0001dfa8 	.word	0x0001dfa8
     fb8:	00011e81 	.word	0x00011e81

00000fbc <Parser_LoraGetChannelStatus>:
{
     fbc:	b510      	push	{r4, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
     fc2:	4b0d      	ldr	r3, [pc, #52]	; (ff8 <Parser_LoraGetChannelStatus+0x3c>)
     fc4:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
     fc6:	466b      	mov	r3, sp
     fc8:	1d99      	adds	r1, r3, #6
     fca:	6800      	ldr	r0, [r0, #0]
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <Parser_LoraGetChannelStatus+0x40>)
     fce:	4798      	blx	r3
     fd0:	2800      	cmp	r0, #0
     fd2:	d101      	bne.n	fd8 <Parser_LoraGetChannelStatus+0x1c>
}
     fd4:	b002      	add	sp, #8
     fd6:	bd10      	pop	{r4, pc}
        if(LORAWAN_GetAttr(CH_PARAM_STATUS,&channelId,&chStatus) == LORAWAN_SUCCESS)
     fd8:	466b      	mov	r3, sp
     fda:	1dda      	adds	r2, r3, #7
     fdc:	1d99      	adds	r1, r3, #6
     fde:	201d      	movs	r0, #29
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <Parser_LoraGetChannelStatus+0x44>)
     fe2:	4798      	blx	r3
     fe4:	2808      	cmp	r0, #8
     fe6:	d1f5      	bne.n	fd4 <Parser_LoraGetChannelStatus+0x18>
			pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
     fe8:	466b      	mov	r3, sp
     fea:	3307      	adds	r3, #7
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	009b      	lsls	r3, r3, #2
     ff0:	4a04      	ldr	r2, [pc, #16]	; (1004 <Parser_LoraGetChannelStatus+0x48>)
     ff2:	589b      	ldr	r3, [r3, r2]
     ff4:	6163      	str	r3, [r4, #20]
}
     ff6:	e7ed      	b.n	fd4 <Parser_LoraGetChannelStatus+0x18>
     ff8:	0001d384 	.word	0x0001d384
     ffc:	0000266d 	.word	0x0000266d
    1000:	0000fed1 	.word	0x0000fed1
    1004:	0001df88 	.word	0x0001df88

00001008 <Parser_LoraSetDatarateRange>:
{
    1008:	b510      	push	{r4, lr}
    100a:	b084      	sub	sp, #16
    100c:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    100e:	2208      	movs	r2, #8
    1010:	2100      	movs	r1, #0
    1012:	a801      	add	r0, sp, #4
    1014:	4b1c      	ldr	r3, [pc, #112]	; (1088 <Parser_LoraSetDatarateRange+0x80>)
    1016:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1018:	210f      	movs	r1, #15
    101a:	4469      	add	r1, sp
    101c:	6820      	ldr	r0, [r4, #0]
    101e:	4b1b      	ldr	r3, [pc, #108]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    1020:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1022:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1024:	2800      	cmp	r0, #0
    1026:	d105      	bne.n	1034 <Parser_LoraSetDatarateRange+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1028:	009b      	lsls	r3, r3, #2
    102a:	4a19      	ldr	r2, [pc, #100]	; (1090 <Parser_LoraSetDatarateRange+0x88>)
    102c:	589b      	ldr	r3, [r3, r2]
    102e:	6163      	str	r3, [r4, #20]
}
    1030:	b004      	add	sp, #16
    1032:	bd10      	pop	{r4, pc}
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    1034:	210e      	movs	r1, #14
    1036:	4469      	add	r1, sp
    1038:	6860      	ldr	r0, [r4, #4]
    103a:	4b14      	ldr	r3, [pc, #80]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    103c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    103e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    1040:	2800      	cmp	r0, #0
    1042:	d0f1      	beq.n	1028 <Parser_LoraSetDatarateRange+0x20>
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    1044:	210d      	movs	r1, #13
    1046:	4469      	add	r1, sp
    1048:	68a0      	ldr	r0, [r4, #8]
    104a:	4b10      	ldr	r3, [pc, #64]	; (108c <Parser_LoraSetDatarateRange+0x84>)
    104c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    104e:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    1050:	2800      	cmp	r0, #0
    1052:	d0e9      	beq.n	1028 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    1054:	3304      	adds	r3, #4
    1056:	446b      	add	r3, sp
    1058:	7818      	ldrb	r0, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    105a:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    105c:	280f      	cmp	r0, #15
    105e:	d8e3      	bhi.n	1028 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    1060:	3303      	adds	r3, #3
    1062:	446b      	add	r3, sp
    1064:	781a      	ldrb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1066:	230a      	movs	r3, #10
       minDr < 16 && maxDr < 16)
    1068:	2a0f      	cmp	r2, #15
    106a:	d8dd      	bhi.n	1028 <Parser_LoraSetDatarateRange+0x20>
        ch_params.channelId = channelId;
    106c:	a901      	add	r1, sp, #4
    106e:	3305      	adds	r3, #5
    1070:	446b      	add	r3, sp
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.dataRange = ((maxDr << 4) | minDr);
    1076:	0112      	lsls	r2, r2, #4
    1078:	4302      	orrs	r2, r0
    107a:	710a      	strb	r2, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_DR_RANGE, &ch_params);
    107c:	201c      	movs	r0, #28
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <Parser_LoraSetDatarateRange+0x8c>)
    1080:	4798      	blx	r3
    1082:	0003      	movs	r3, r0
    1084:	e7d0      	b.n	1028 <Parser_LoraSetDatarateRange+0x20>
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00018779 	.word	0x00018779
    108c:	0000266d 	.word	0x0000266d
    1090:	0001dfa8 	.word	0x0001dfa8
    1094:	00011e81 	.word	0x00011e81

00001098 <Parser_LoraGetDatarateRange>:
{
    1098:	b5f0      	push	{r4, r5, r6, r7, lr}
    109a:	b083      	sub	sp, #12
    109c:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    109e:	4b15      	ldr	r3, [pc, #84]	; (10f4 <Parser_LoraGetDatarateRange+0x5c>)
    10a0:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    10a2:	466b      	mov	r3, sp
    10a4:	1dd9      	adds	r1, r3, #7
    10a6:	6800      	ldr	r0, [r0, #0]
    10a8:	4b13      	ldr	r3, [pc, #76]	; (10f8 <Parser_LoraGetDatarateRange+0x60>)
    10aa:	4798      	blx	r3
    10ac:	2800      	cmp	r0, #0
    10ae:	d101      	bne.n	10b4 <Parser_LoraGetDatarateRange+0x1c>
}
    10b0:	b003      	add	sp, #12
    10b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LORAWAN_GetAttr(CH_PARAM_DR_RANGE,&channelId,&drRange) == LORAWAN_SUCCESS)
    10b4:	466b      	mov	r3, sp
    10b6:	1d9a      	adds	r2, r3, #6
    10b8:	1dd9      	adds	r1, r3, #7
    10ba:	201c      	movs	r0, #28
    10bc:	4b0f      	ldr	r3, [pc, #60]	; (10fc <Parser_LoraGetDatarateRange+0x64>)
    10be:	4798      	blx	r3
    10c0:	2808      	cmp	r0, #8
    10c2:	d1f5      	bne.n	10b0 <Parser_LoraGetDatarateRange+0x18>
			minDr = drRange & 0x0F;
    10c4:	466b      	mov	r3, sp
    10c6:	799e      	ldrb	r6, [r3, #6]
			itoa(minDr, aParserData, 10U);
    10c8:	4d0d      	ldr	r5, [pc, #52]	; (1100 <Parser_LoraGetDatarateRange+0x68>)
    10ca:	3007      	adds	r0, #7
    10cc:	4030      	ands	r0, r6
    10ce:	220a      	movs	r2, #10
    10d0:	0029      	movs	r1, r5
    10d2:	4f0c      	ldr	r7, [pc, #48]	; (1104 <Parser_LoraGetDatarateRange+0x6c>)
    10d4:	47b8      	blx	r7
			crtIdx = strlen(aParserData);
    10d6:	0028      	movs	r0, r5
    10d8:	4b0b      	ldr	r3, [pc, #44]	; (1108 <Parser_LoraGetDatarateRange+0x70>)
    10da:	4798      	blx	r3
			aParserData[crtIdx] = ' ';
    10dc:	0403      	lsls	r3, r0, #16
    10de:	0c1b      	lsrs	r3, r3, #16
    10e0:	2220      	movs	r2, #32
    10e2:	54ea      	strb	r2, [r5, r3]
			crtIdx ++;
    10e4:	3001      	adds	r0, #1
			itoa(maxDr, &aParserData[crtIdx], 10U);
    10e6:	b281      	uxth	r1, r0
    10e8:	1949      	adds	r1, r1, r5
    10ea:	0930      	lsrs	r0, r6, #4
    10ec:	3a16      	subs	r2, #22
    10ee:	47b8      	blx	r7
			pParserCmdInfo->pReplyCmd = aParserData;
    10f0:	6165      	str	r5, [r4, #20]
}
    10f2:	e7dd      	b.n	10b0 <Parser_LoraGetDatarateRange+0x18>
    10f4:	0001d384 	.word	0x0001d384
    10f8:	0000266d 	.word	0x0000266d
    10fc:	0000fed1 	.word	0x0000fed1
    1100:	20000fac 	.word	0x20000fac
    1104:	00018061 	.word	0x00018061
    1108:	00018bad 	.word	0x00018bad

0000110c <Parser_LoraSetTxPower>:
{
    110c:	b510      	push	{r4, lr}
    110e:	b082      	sub	sp, #8
    1110:	0004      	movs	r4, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    1112:	466b      	mov	r3, sp
    1114:	1d9a      	adds	r2, r3, #6
    1116:	2100      	movs	r1, #0
    1118:	2024      	movs	r0, #36	; 0x24
    111a:	4b0b      	ldr	r3, [pc, #44]	; (1148 <Parser_LoraSetTxPower+0x3c>)
    111c:	4798      	blx	r3
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPowerIdx)))
    111e:	466b      	mov	r3, sp
    1120:	1dd9      	adds	r1, r3, #7
    1122:	6820      	ldr	r0, [r4, #0]
    1124:	4b09      	ldr	r3, [pc, #36]	; (114c <Parser_LoraSetTxPower+0x40>)
    1126:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1128:	230a      	movs	r3, #10
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPowerIdx)))
    112a:	2800      	cmp	r0, #0
    112c:	d105      	bne.n	113a <Parser_LoraSetTxPower+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    112e:	009b      	lsls	r3, r3, #2
    1130:	4a07      	ldr	r2, [pc, #28]	; (1150 <Parser_LoraSetTxPower+0x44>)
    1132:	589b      	ldr	r3, [r3, r2]
    1134:	6163      	str	r3, [r4, #20]
}
    1136:	b002      	add	sp, #8
    1138:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(TX_POWER,&txPowerIdx);
    113a:	466b      	mov	r3, sp
    113c:	1dd9      	adds	r1, r3, #7
    113e:	2008      	movs	r0, #8
    1140:	4b04      	ldr	r3, [pc, #16]	; (1154 <Parser_LoraSetTxPower+0x48>)
    1142:	4798      	blx	r3
    1144:	0003      	movs	r3, r0
    1146:	e7f2      	b.n	112e <Parser_LoraSetTxPower+0x22>
    1148:	0000fed1 	.word	0x0000fed1
    114c:	0000266d 	.word	0x0000266d
    1150:	0001dfa8 	.word	0x0001dfa8
    1154:	00011e81 	.word	0x00011e81

00001158 <Parser_LoraGetTxPower>:
{
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	b082      	sub	sp, #8
    115c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(TX_POWER,NULL,&txPowerIdx);
    115e:	466b      	mov	r3, sp
    1160:	1ddd      	adds	r5, r3, #7
    1162:	002a      	movs	r2, r5
    1164:	2100      	movs	r1, #0
    1166:	2008      	movs	r0, #8
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <Parser_LoraGetTxPower+0x28>)
    116a:	4798      	blx	r3
    itoa( txPowerIdx, aParserData, 10);
    116c:	4c05      	ldr	r4, [pc, #20]	; (1184 <Parser_LoraGetTxPower+0x2c>)
    116e:	7828      	ldrb	r0, [r5, #0]
    1170:	220a      	movs	r2, #10
    1172:	0021      	movs	r1, r4
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <Parser_LoraGetTxPower+0x30>)
    1176:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1178:	6174      	str	r4, [r6, #20]
}
    117a:	b002      	add	sp, #8
    117c:	bd70      	pop	{r4, r5, r6, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	0000fed1 	.word	0x0000fed1
    1184:	20000fac 	.word	0x20000fac
    1188:	00018061 	.word	0x00018061

0000118c <Parser_LoraPause>:
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	0005      	movs	r5, r0
    resumeInterval = LORAWAN_Pause();
    1190:	4b04      	ldr	r3, [pc, #16]	; (11a4 <Parser_LoraPause+0x18>)
    1192:	4798      	blx	r3
    1194:	0001      	movs	r1, r0
    ultoa(aParserData, resumeInterval, 10);
    1196:	4c04      	ldr	r4, [pc, #16]	; (11a8 <Parser_LoraPause+0x1c>)
    1198:	220a      	movs	r2, #10
    119a:	0020      	movs	r0, r4
    119c:	4b03      	ldr	r3, [pc, #12]	; (11ac <Parser_LoraPause+0x20>)
    119e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    11a0:	616c      	str	r4, [r5, #20]
}
    11a2:	bd70      	pop	{r4, r5, r6, pc}
    11a4:	0000ede9 	.word	0x0000ede9
    11a8:	20000fac 	.word	0x20000fac
    11ac:	000026c5 	.word	0x000026c5

000011b0 <Parser_LoraResume>:
{
    11b0:	b510      	push	{r4, lr}
    11b2:	0004      	movs	r4, r0
    LORAWAN_Resume();
    11b4:	4b02      	ldr	r3, [pc, #8]	; (11c0 <Parser_LoraResume+0x10>)
    11b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    11b8:	4b02      	ldr	r3, [pc, #8]	; (11c4 <Parser_LoraResume+0x14>)
    11ba:	6163      	str	r3, [r4, #20]
}
    11bc:	bd10      	pop	{r4, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	0000eead 	.word	0x0000eead
    11c4:	0001df24 	.word	0x0001df24

000011c8 <Parser_LoraSave>:
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    11c8:	4b01      	ldr	r3, [pc, #4]	; (11d0 <Parser_LoraSave+0x8>)
    11ca:	6143      	str	r3, [r0, #20]
}
    11cc:	4770      	bx	lr
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	0001df24 	.word	0x0001df24

000011d4 <Parser_LoraSetRx2WindowParams>:
{
    11d4:	b530      	push	{r4, r5, lr}
    11d6:	b085      	sub	sp, #20
    11d8:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    11da:	220a      	movs	r2, #10
    11dc:	2100      	movs	r1, #0
    11de:	6840      	ldr	r0, [r0, #4]
    11e0:	4b12      	ldr	r3, [pc, #72]	; (122c <Parser_LoraSetRx2WindowParams+0x58>)
    11e2:	4798      	blx	r3
    11e4:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    11e6:	210f      	movs	r1, #15
    11e8:	4469      	add	r1, sp
    11ea:	6820      	ldr	r0, [r4, #0]
    11ec:	4b10      	ldr	r3, [pc, #64]	; (1230 <Parser_LoraSetRx2WindowParams+0x5c>)
    11ee:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    11f0:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    11f2:	2800      	cmp	r0, #0
    11f4:	d105      	bne.n	1202 <Parser_LoraSetRx2WindowParams+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    11f6:	009b      	lsls	r3, r3, #2
    11f8:	4a0e      	ldr	r2, [pc, #56]	; (1234 <Parser_LoraSetRx2WindowParams+0x60>)
    11fa:	589b      	ldr	r3, [r3, r2]
    11fc:	6163      	str	r3, [r4, #20]
}
    11fe:	b005      	add	sp, #20
    1200:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    1202:	2201      	movs	r2, #1
    1204:	4252      	negs	r2, r2
    1206:	210a      	movs	r1, #10
    1208:	6860      	ldr	r0, [r4, #4]
    120a:	4b0b      	ldr	r3, [pc, #44]	; (1238 <Parser_LoraSetRx2WindowParams+0x64>)
    120c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    120e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    1210:	2800      	cmp	r0, #0
    1212:	d0f0      	beq.n	11f6 <Parser_LoraSetRx2WindowParams+0x22>
        rx2Params.dataRate = datarate;
    1214:	a901      	add	r1, sp, #4
    1216:	3305      	adds	r3, #5
    1218:	446b      	add	r3, sp
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	710b      	strb	r3, [r1, #4]
        rx2Params.frequency = freq;
    121e:	9501      	str	r5, [sp, #4]
        status = LORAWAN_SetAttr(RX2_WINDOW_PARAMS,&rx2Params);
    1220:	2015      	movs	r0, #21
    1222:	4b06      	ldr	r3, [pc, #24]	; (123c <Parser_LoraSetRx2WindowParams+0x68>)
    1224:	4798      	blx	r3
    1226:	0003      	movs	r3, r0
    1228:	e7e5      	b.n	11f6 <Parser_LoraSetRx2WindowParams+0x22>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00018eb9 	.word	0x00018eb9
    1230:	0000266d 	.word	0x0000266d
    1234:	0001dfa8 	.word	0x0001dfa8
    1238:	00002741 	.word	0x00002741
    123c:	00011e81 	.word	0x00011e81

00001240 <Parser_LoraGetRx2WindowParams>:
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	b083      	sub	sp, #12
    1244:	0004      	movs	r4, r0
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    1246:	4b11      	ldr	r3, [pc, #68]	; (128c <Parser_LoraGetRx2WindowParams+0x4c>)
    1248:	6143      	str	r3, [r0, #20]
    if(LORAWAN_GetAttr(RX2_WINDOW_PARAMS, NULL, &rx2Params) == LORAWAN_SUCCESS)
    124a:	466a      	mov	r2, sp
    124c:	2100      	movs	r1, #0
    124e:	2015      	movs	r0, #21
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <Parser_LoraGetRx2WindowParams+0x50>)
    1252:	4798      	blx	r3
    1254:	2808      	cmp	r0, #8
    1256:	d001      	beq.n	125c <Parser_LoraGetRx2WindowParams+0x1c>
}
    1258:	b003      	add	sp, #12
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		freq = rx2Params.frequency;
    125c:	9f00      	ldr	r7, [sp, #0]
		ultoa(aParserData, datarate, 10U);
    125e:	466b      	mov	r3, sp
    1260:	7919      	ldrb	r1, [r3, #4]
    1262:	4d0c      	ldr	r5, [pc, #48]	; (1294 <Parser_LoraGetRx2WindowParams+0x54>)
    1264:	220a      	movs	r2, #10
    1266:	0028      	movs	r0, r5
    1268:	4e0b      	ldr	r6, [pc, #44]	; (1298 <Parser_LoraGetRx2WindowParams+0x58>)
    126a:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    126c:	0028      	movs	r0, r5
    126e:	4b0b      	ldr	r3, [pc, #44]	; (129c <Parser_LoraGetRx2WindowParams+0x5c>)
    1270:	4798      	blx	r3
		aParserData[dataLen ++] = ' ';
    1272:	23ff      	movs	r3, #255	; 0xff
    1274:	4003      	ands	r3, r0
    1276:	2220      	movs	r2, #32
    1278:	54ea      	strb	r2, [r5, r3]
    127a:	3001      	adds	r0, #1
		ultoa(&aParserData[dataLen], freq, 10U);
    127c:	b2c0      	uxtb	r0, r0
    127e:	1940      	adds	r0, r0, r5
    1280:	3a16      	subs	r2, #22
    1282:	0039      	movs	r1, r7
    1284:	47b0      	blx	r6
		pParserCmdInfo->pReplyCmd = aParserData;
    1286:	6165      	str	r5, [r4, #20]
}
    1288:	e7e6      	b.n	1258 <Parser_LoraGetRx2WindowParams+0x18>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	0001d384 	.word	0x0001d384
    1290:	0000fed1 	.word	0x0000fed1
    1294:	20000fac 	.word	0x20000fac
    1298:	000026c5 	.word	0x000026c5
    129c:	00018bad 	.word	0x00018bad

000012a0 <Parser_LoraSetLbt>:
{
    12a0:	b530      	push	{r4, r5, lr}
    12a2:	b083      	sub	sp, #12
    12a4:	0004      	movs	r4, r0
	lorawanLBTParams.lbtScanPeriod = atoi(pParserCmdInfo->pParam1);
    12a6:	6800      	ldr	r0, [r0, #0]
    12a8:	4d0f      	ldr	r5, [pc, #60]	; (12e8 <Parser_LoraSetLbt+0x48>)
    12aa:	47a8      	blx	r5
    12ac:	466b      	mov	r3, sp
    12ae:	8018      	strh	r0, [r3, #0]
	lorawanLBTParams.lbtThreshold = atoi(pParserCmdInfo->pParam2);
    12b0:	6860      	ldr	r0, [r4, #4]
    12b2:	47a8      	blx	r5
    12b4:	466b      	mov	r3, sp
    12b6:	8058      	strh	r0, [r3, #2]
	lorawanLBTParams.maxRetryChannels = atoi(pParserCmdInfo->pParam3);
    12b8:	68a0      	ldr	r0, [r4, #8]
    12ba:	47a8      	blx	r5
    12bc:	466b      	mov	r3, sp
    12be:	8098      	strh	r0, [r3, #4]
	lorawanLBTParams.lbtNumOfSamples = atoi(pParserCmdInfo->pParam4);
    12c0:	68e0      	ldr	r0, [r4, #12]
    12c2:	47a8      	blx	r5
    12c4:	466b      	mov	r3, sp
    12c6:	7198      	strb	r0, [r3, #6]
	lorawanLBTParams.lbtTransmitOn = atoi(pParserCmdInfo->pParam5);
    12c8:	6920      	ldr	r0, [r4, #16]
    12ca:	47a8      	blx	r5
    12cc:	1e43      	subs	r3, r0, #1
    12ce:	4198      	sbcs	r0, r3
    12d0:	466b      	mov	r3, sp
    12d2:	71d8      	strb	r0, [r3, #7]
	status = LORAWAN_SetAttr(LORAWAN_LBT_PARAMS, &lorawanLBTParams);
    12d4:	4669      	mov	r1, sp
    12d6:	2028      	movs	r0, #40	; 0x28
    12d8:	4b04      	ldr	r3, [pc, #16]	; (12ec <Parser_LoraSetLbt+0x4c>)
    12da:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    12dc:	0080      	lsls	r0, r0, #2
    12de:	4b04      	ldr	r3, [pc, #16]	; (12f0 <Parser_LoraSetLbt+0x50>)
    12e0:	58c3      	ldr	r3, [r0, r3]
    12e2:	6163      	str	r3, [r4, #20]
}
    12e4:	b003      	add	sp, #12
    12e6:	bd30      	pop	{r4, r5, pc}
    12e8:	00017fdd 	.word	0x00017fdd
    12ec:	00011e81 	.word	0x00011e81
    12f0:	0001dfa8 	.word	0x0001dfa8

000012f4 <Parser_LoraGetLbt>:
{
    12f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f6:	46ce      	mov	lr, r9
    12f8:	4647      	mov	r7, r8
    12fa:	b580      	push	{r7, lr}
    12fc:	b083      	sub	sp, #12
    12fe:	0005      	movs	r5, r0
	status = LORAWAN_GetAttr(LORAWAN_LBT_PARAMS, NULL, &lorawanLBTParams);
    1300:	466a      	mov	r2, sp
    1302:	2100      	movs	r1, #0
    1304:	2028      	movs	r0, #40	; 0x28
    1306:	4b27      	ldr	r3, [pc, #156]	; (13a4 <Parser_LoraGetLbt+0xb0>)
    1308:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    130a:	0082      	lsls	r2, r0, #2
    130c:	4b26      	ldr	r3, [pc, #152]	; (13a8 <Parser_LoraGetLbt+0xb4>)
    130e:	58d3      	ldr	r3, [r2, r3]
    1310:	616b      	str	r3, [r5, #20]
	if (LORAWAN_SUCCESS == status)
    1312:	2808      	cmp	r0, #8
    1314:	d004      	beq.n	1320 <Parser_LoraGetLbt+0x2c>
}
    1316:	b003      	add	sp, #12
    1318:	bc0c      	pop	{r2, r3}
    131a:	4690      	mov	r8, r2
    131c:	4699      	mov	r9, r3
    131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ultoa(aParserData, lorawanLBTParams.lbtScanPeriod, 10U);
    1320:	466b      	mov	r3, sp
    1322:	8819      	ldrh	r1, [r3, #0]
    1324:	4c21      	ldr	r4, [pc, #132]	; (13ac <Parser_LoraGetLbt+0xb8>)
    1326:	220a      	movs	r2, #10
    1328:	0020      	movs	r0, r4
    132a:	4e21      	ldr	r6, [pc, #132]	; (13b0 <Parser_LoraGetLbt+0xbc>)
    132c:	47b0      	blx	r6
        dataLen = strlen(aParserData);
    132e:	0020      	movs	r0, r4
    1330:	4b20      	ldr	r3, [pc, #128]	; (13b4 <Parser_LoraGetLbt+0xc0>)
    1332:	4699      	mov	r9, r3
    1334:	4798      	blx	r3
        aParserData[dataLen ++] = ' ';
    1336:	27ff      	movs	r7, #255	; 0xff
    1338:	003b      	movs	r3, r7
    133a:	4003      	ands	r3, r0
    133c:	2220      	movs	r2, #32
    133e:	4690      	mov	r8, r2
    1340:	54e2      	strb	r2, [r4, r3]
    1342:	3001      	adds	r0, #1
		itoa(lorawanLBTParams.lbtThreshold, &aParserData[dataLen], 10U);
    1344:	b2c1      	uxtb	r1, r0
    1346:	1909      	adds	r1, r1, r4
    1348:	466b      	mov	r3, sp
    134a:	2002      	movs	r0, #2
    134c:	5e18      	ldrsh	r0, [r3, r0]
    134e:	220a      	movs	r2, #10
    1350:	4b19      	ldr	r3, [pc, #100]	; (13b8 <Parser_LoraGetLbt+0xc4>)
    1352:	4798      	blx	r3
		dataLen = strlen(aParserData);
    1354:	0020      	movs	r0, r4
    1356:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    1358:	003b      	movs	r3, r7
    135a:	4003      	ands	r3, r0
    135c:	4642      	mov	r2, r8
    135e:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    1360:	466b      	mov	r3, sp
    1362:	8899      	ldrh	r1, [r3, #4]
        aParserData[dataLen ++] = ' ';
    1364:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    1366:	b2c0      	uxtb	r0, r0
    1368:	1900      	adds	r0, r0, r4
    136a:	220a      	movs	r2, #10
    136c:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    136e:	0020      	movs	r0, r4
    1370:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    1372:	003b      	movs	r3, r7
    1374:	4003      	ands	r3, r0
    1376:	4642      	mov	r2, r8
    1378:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    137a:	466b      	mov	r3, sp
    137c:	7999      	ldrb	r1, [r3, #6]
        aParserData[dataLen ++] = ' ';
    137e:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    1380:	b2c0      	uxtb	r0, r0
    1382:	1900      	adds	r0, r0, r4
    1384:	220a      	movs	r2, #10
    1386:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    1388:	0020      	movs	r0, r4
    138a:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    138c:	4007      	ands	r7, r0
    138e:	4643      	mov	r3, r8
    1390:	55e3      	strb	r3, [r4, r7]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    1392:	466b      	mov	r3, sp
    1394:	79d9      	ldrb	r1, [r3, #7]
        aParserData[dataLen ++] = ' ';
    1396:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    1398:	b2c0      	uxtb	r0, r0
    139a:	1900      	adds	r0, r0, r4
    139c:	220a      	movs	r2, #10
    139e:	47b0      	blx	r6
        pParserCmdInfo->pReplyCmd = aParserData;
    13a0:	616c      	str	r4, [r5, #20]
}
    13a2:	e7b8      	b.n	1316 <Parser_LoraGetLbt+0x22>
    13a4:	0000fed1 	.word	0x0000fed1
    13a8:	0001dfa8 	.word	0x0001dfa8
    13ac:	20000fac 	.word	0x20000fac
    13b0:	000026c5 	.word	0x000026c5
    13b4:	00018bad 	.word	0x00018bad
    13b8:	00018061 	.word	0x00018061

000013bc <Parser_LoraForceEnable>:
{
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
    LORAWAN_ForceEnable();
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <Parser_LoraForceEnable+0x10>)
    13c2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    13c4:	4b02      	ldr	r3, [pc, #8]	; (13d0 <Parser_LoraForceEnable+0x14>)
    13c6:	6163      	str	r3, [r4, #20]
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	0000efad 	.word	0x0000efad
    13d0:	0001df24 	.word	0x0001df24

000013d4 <Parser_LoraSetUplinkCounter>:
{
    13d4:	b510      	push	{r4, lr}
    13d6:	b082      	sub	sp, #8
    13d8:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    13da:	220a      	movs	r2, #10
    13dc:	2100      	movs	r1, #0
    13de:	6800      	ldr	r0, [r0, #0]
    13e0:	4b0b      	ldr	r3, [pc, #44]	; (1410 <Parser_LoraSetUplinkCounter+0x3c>)
    13e2:	4798      	blx	r3
    13e4:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    13e6:	2201      	movs	r2, #1
    13e8:	4252      	negs	r2, r2
    13ea:	210a      	movs	r1, #10
    13ec:	6820      	ldr	r0, [r4, #0]
    13ee:	4b09      	ldr	r3, [pc, #36]	; (1414 <Parser_LoraSetUplinkCounter+0x40>)
    13f0:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    13f2:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    13f4:	2800      	cmp	r0, #0
    13f6:	d105      	bne.n	1404 <Parser_LoraSetUplinkCounter+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	4a07      	ldr	r2, [pc, #28]	; (1418 <Parser_LoraSetUplinkCounter+0x44>)
    13fc:	589b      	ldr	r3, [r3, r2]
    13fe:	6163      	str	r3, [r4, #20]
}
    1400:	b002      	add	sp, #8
    1402:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(UPLINK_COUNTER, &param1Value);       
    1404:	a901      	add	r1, sp, #4
    1406:	200a      	movs	r0, #10
    1408:	4b04      	ldr	r3, [pc, #16]	; (141c <Parser_LoraSetUplinkCounter+0x48>)
    140a:	4798      	blx	r3
    140c:	0003      	movs	r3, r0
    140e:	e7f3      	b.n	13f8 <Parser_LoraSetUplinkCounter+0x24>
    1410:	00018eb9 	.word	0x00018eb9
    1414:	00002741 	.word	0x00002741
    1418:	0001dfa8 	.word	0x0001dfa8
    141c:	00011e81 	.word	0x00011e81

00001420 <Parser_LoraSetDownlinkCounter>:
{
    1420:	b510      	push	{r4, lr}
    1422:	b082      	sub	sp, #8
    1424:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    1426:	220a      	movs	r2, #10
    1428:	2100      	movs	r1, #0
    142a:	6800      	ldr	r0, [r0, #0]
    142c:	4b0b      	ldr	r3, [pc, #44]	; (145c <Parser_LoraSetDownlinkCounter+0x3c>)
    142e:	4798      	blx	r3
    1430:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1432:	2201      	movs	r2, #1
    1434:	4252      	negs	r2, r2
    1436:	210a      	movs	r1, #10
    1438:	6820      	ldr	r0, [r4, #0]
    143a:	4b09      	ldr	r3, [pc, #36]	; (1460 <Parser_LoraSetDownlinkCounter+0x40>)
    143c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    143e:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1440:	2800      	cmp	r0, #0
    1442:	d105      	bne.n	1450 <Parser_LoraSetDownlinkCounter+0x30>
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1444:	009b      	lsls	r3, r3, #2
    1446:	4a07      	ldr	r2, [pc, #28]	; (1464 <Parser_LoraSetDownlinkCounter+0x44>)
    1448:	589b      	ldr	r3, [r3, r2]
    144a:	6163      	str	r3, [r4, #20]
}
    144c:	b002      	add	sp, #8
    144e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(DOWNLINK_COUNTER, &param1Value);   
    1450:	a901      	add	r1, sp, #4
    1452:	200b      	movs	r0, #11
    1454:	4b04      	ldr	r3, [pc, #16]	; (1468 <Parser_LoraSetDownlinkCounter+0x48>)
    1456:	4798      	blx	r3
    1458:	0003      	movs	r3, r0
    145a:	e7f3      	b.n	1444 <Parser_LoraSetDownlinkCounter+0x24>
    145c:	00018eb9 	.word	0x00018eb9
    1460:	00002741 	.word	0x00002741
    1464:	0001dfa8 	.word	0x0001dfa8
    1468:	00011e81 	.word	0x00011e81

0000146c <Parser_LoraSetSyncWord>:
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146e:	0004      	movs	r4, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam1);
    1470:	6805      	ldr	r5, [r0, #0]
    1472:	0028      	movs	r0, r5
    1474:	4b10      	ldr	r3, [pc, #64]	; (14b8 <Parser_LoraSetSyncWord+0x4c>)
    1476:	4798      	blx	r3
    1478:	0006      	movs	r6, r0
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    147a:	0028      	movs	r0, r5
    147c:	4b0f      	ldr	r3, [pc, #60]	; (14bc <Parser_LoraSetSyncWord+0x50>)
    147e:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1480:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    1482:	2800      	cmp	r0, #0
    1484:	d006      	beq.n	1494 <Parser_LoraSetSyncWord+0x28>
    1486:	6827      	ldr	r7, [r4, #0]
    1488:	0038      	movs	r0, r7
    148a:	4b0b      	ldr	r3, [pc, #44]	; (14b8 <Parser_LoraSetSyncWord+0x4c>)
    148c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    148e:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    1490:	2802      	cmp	r0, #2
    1492:	d004      	beq.n	149e <Parser_LoraSetSyncWord+0x32>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1494:	009b      	lsls	r3, r3, #2
    1496:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <Parser_LoraSetSyncWord+0x54>)
    1498:	589b      	ldr	r3, [r3, r2]
    149a:	6163      	str	r3, [r4, #20]
}
    149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam1, (uint8_t *)aParserData);
    149e:	4d09      	ldr	r5, [pc, #36]	; (14c4 <Parser_LoraSetSyncWord+0x58>)
    14a0:	b2b0      	uxth	r0, r6
    14a2:	002a      	movs	r2, r5
    14a4:	0039      	movs	r1, r7
    14a6:	4b08      	ldr	r3, [pc, #32]	; (14c8 <Parser_LoraSetSyncWord+0x5c>)
    14a8:	4798      	blx	r3
        status = LORAWAN_SetAttr(SYNC_WORD,aParserData);    
    14aa:	0029      	movs	r1, r5
    14ac:	2009      	movs	r0, #9
    14ae:	4b07      	ldr	r3, [pc, #28]	; (14cc <Parser_LoraSetSyncWord+0x60>)
    14b0:	4798      	blx	r3
    14b2:	0003      	movs	r3, r0
    14b4:	e7ee      	b.n	1494 <Parser_LoraSetSyncWord+0x28>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	00018bad 	.word	0x00018bad
    14bc:	000025d9 	.word	0x000025d9
    14c0:	0001dfa8 	.word	0x0001dfa8
    14c4:	20000fac 	.word	0x20000fac
    14c8:	000028e1 	.word	0x000028e1
    14cc:	00011e81 	.word	0x00011e81

000014d0 <Parser_LoraGetSyncWord>:
{
    14d0:	b530      	push	{r4, r5, lr}
    14d2:	b083      	sub	sp, #12
    14d4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(SYNC_WORD, NULL, &syncWord);
    14d6:	466b      	mov	r3, sp
    14d8:	1dda      	adds	r2, r3, #7
    14da:	2100      	movs	r1, #0
    14dc:	2009      	movs	r0, #9
    14de:	4b06      	ldr	r3, [pc, #24]	; (14f8 <Parser_LoraGetSyncWord+0x28>)
    14e0:	4798      	blx	r3
    Parser_IntArrayToHexAscii(1, &syncWord, aParserData);
    14e2:	4c06      	ldr	r4, [pc, #24]	; (14fc <Parser_LoraGetSyncWord+0x2c>)
    14e4:	0022      	movs	r2, r4
    14e6:	466b      	mov	r3, sp
    14e8:	1dd9      	adds	r1, r3, #7
    14ea:	2001      	movs	r0, #1
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <Parser_LoraGetSyncWord+0x30>)
    14ee:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    14f0:	616c      	str	r4, [r5, #20]
}
    14f2:	b003      	add	sp, #12
    14f4:	bd30      	pop	{r4, r5, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	0000fed1 	.word	0x0000fed1
    14fc:	20000fac 	.word	0x20000fac
    1500:	0000260d 	.word	0x0000260d

00001504 <Parser_LoraGetUplinkCounter>:
{
    1504:	b530      	push	{r4, r5, lr}
    1506:	b083      	sub	sp, #12
    1508:	0005      	movs	r5, r0
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &ctr);
    150a:	aa01      	add	r2, sp, #4
    150c:	2100      	movs	r1, #0
    150e:	200a      	movs	r0, #10
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <Parser_LoraGetUplinkCounter+0x24>)
    1512:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    1514:	4c05      	ldr	r4, [pc, #20]	; (152c <Parser_LoraGetUplinkCounter+0x28>)
    1516:	220a      	movs	r2, #10
    1518:	9901      	ldr	r1, [sp, #4]
    151a:	0020      	movs	r0, r4
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <Parser_LoraGetUplinkCounter+0x2c>)
    151e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1520:	616c      	str	r4, [r5, #20]
}
    1522:	b003      	add	sp, #12
    1524:	bd30      	pop	{r4, r5, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	0000fed1 	.word	0x0000fed1
    152c:	20000fac 	.word	0x20000fac
    1530:	000026c5 	.word	0x000026c5

00001534 <Parser_LoraGetDownlinkCounter>:
{
    1534:	b530      	push	{r4, r5, lr}
    1536:	b083      	sub	sp, #12
    1538:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &ctr);
    153a:	aa01      	add	r2, sp, #4
    153c:	2100      	movs	r1, #0
    153e:	200b      	movs	r0, #11
    1540:	4b05      	ldr	r3, [pc, #20]	; (1558 <Parser_LoraGetDownlinkCounter+0x24>)
    1542:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    1544:	4c05      	ldr	r4, [pc, #20]	; (155c <Parser_LoraGetDownlinkCounter+0x28>)
    1546:	220a      	movs	r2, #10
    1548:	9901      	ldr	r1, [sp, #4]
    154a:	0020      	movs	r0, r4
    154c:	4b04      	ldr	r3, [pc, #16]	; (1560 <Parser_LoraGetDownlinkCounter+0x2c>)
    154e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1550:	616c      	str	r4, [r5, #20]
}
    1552:	b003      	add	sp, #12
    1554:	bd30      	pop	{r4, r5, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	0000fed1 	.word	0x0000fed1
    155c:	20000fac 	.word	0x20000fac
    1560:	000026c5 	.word	0x000026c5

00001564 <Parser_LoraLinkCheck>:
{
    1564:	b510      	push	{r4, lr}
    1566:	b082      	sub	sp, #8
    1568:	0004      	movs	r4, r0
    uint16_t period = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    156a:	220a      	movs	r2, #10
    156c:	2100      	movs	r1, #0
    156e:	6800      	ldr	r0, [r0, #0]
    1570:	4b0c      	ldr	r3, [pc, #48]	; (15a4 <Parser_LoraLinkCheck+0x40>)
    1572:	4798      	blx	r3
    1574:	466b      	mov	r3, sp
    1576:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    1578:	4a0b      	ldr	r2, [pc, #44]	; (15a8 <Parser_LoraLinkCheck+0x44>)
    157a:	2105      	movs	r1, #5
    157c:	6820      	ldr	r0, [r4, #0]
    157e:	4b0b      	ldr	r3, [pc, #44]	; (15ac <Parser_LoraLinkCheck+0x48>)
    1580:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1582:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    1584:	2800      	cmp	r0, #0
    1586:	d105      	bne.n	1594 <Parser_LoraLinkCheck+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1588:	009b      	lsls	r3, r3, #2
    158a:	4a09      	ldr	r2, [pc, #36]	; (15b0 <Parser_LoraLinkCheck+0x4c>)
    158c:	589b      	ldr	r3, [r3, r2]
    158e:	6163      	str	r3, [r4, #20]
}
    1590:	b002      	add	sp, #8
    1592:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(LINK_CHECK_PERIOD,&period);      
    1594:	466b      	mov	r3, sp
    1596:	1d99      	adds	r1, r3, #6
    1598:	2019      	movs	r0, #25
    159a:	4b06      	ldr	r3, [pc, #24]	; (15b4 <Parser_LoraLinkCheck+0x50>)
    159c:	4798      	blx	r3
    159e:	0003      	movs	r3, r0
    15a0:	e7f2      	b.n	1588 <Parser_LoraLinkCheck+0x24>
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	00018eb9 	.word	0x00018eb9
    15a8:	0000ffff 	.word	0x0000ffff
    15ac:	00002741 	.word	0x00002741
    15b0:	0001dfa8 	.word	0x0001dfa8
    15b4:	00011e81 	.word	0x00011e81

000015b8 <Parser_LoraGetAggregatedDutyCycle>:
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	0006      	movs	r6, r0
    LORAWAN_GetAttr(AGGREGATED_DUTYCYCLE, NULL, &aggregatedDutyCycle);
    15be:	466b      	mov	r3, sp
    15c0:	1d9d      	adds	r5, r3, #6
    15c2:	002a      	movs	r2, r5
    15c4:	2100      	movs	r1, #0
    15c6:	2020      	movs	r0, #32
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    15ca:	4798      	blx	r3
    utoa(aggregatedDutyCycle, aParserData,  10);
    15cc:	4c05      	ldr	r4, [pc, #20]	; (15e4 <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    15ce:	8828      	ldrh	r0, [r5, #0]
    15d0:	220a      	movs	r2, #10
    15d2:	0021      	movs	r1, r4
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <Parser_LoraGetAggregatedDutyCycle+0x30>)
    15d6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    15d8:	6174      	str	r4, [r6, #20]
}
    15da:	b002      	add	sp, #8
    15dc:	bd70      	pop	{r4, r5, r6, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	0000fed1 	.word	0x0000fed1
    15e4:	20000fac 	.word	0x20000fac
    15e8:	00018f71 	.word	0x00018f71

000015ec <Parser_LoraSetAggregatedDutyCycle>:
{
    15ec:	b510      	push	{r4, lr}
    15ee:	b082      	sub	sp, #8
    15f0:	0004      	movs	r4, r0
    uint16_t aggregatedDutyCycle = atoi(pParserCmdInfo->pParam1);
    15f2:	6800      	ldr	r0, [r0, #0]
    15f4:	4b0c      	ldr	r3, [pc, #48]	; (1628 <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    15f6:	4798      	blx	r3
    15f8:	466b      	mov	r3, sp
    15fa:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    15fc:	22ff      	movs	r2, #255	; 0xff
    15fe:	2102      	movs	r1, #2
    1600:	6820      	ldr	r0, [r4, #0]
    1602:	4b0a      	ldr	r3, [pc, #40]	; (162c <Parser_LoraSetAggregatedDutyCycle+0x40>)
    1604:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1606:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    1608:	2800      	cmp	r0, #0
    160a:	d105      	bne.n	1618 <Parser_LoraSetAggregatedDutyCycle+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    160c:	009b      	lsls	r3, r3, #2
    160e:	4a08      	ldr	r2, [pc, #32]	; (1630 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    1610:	589b      	ldr	r3, [r3, r2]
    1612:	6163      	str	r3, [r4, #20]
}
    1614:	b002      	add	sp, #8
    1616:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(AGGREGATED_DUTYCYCLE,&aggregatedDutyCycle);
    1618:	466b      	mov	r3, sp
    161a:	1d99      	adds	r1, r3, #6
    161c:	2020      	movs	r0, #32
    161e:	4b05      	ldr	r3, [pc, #20]	; (1634 <Parser_LoraSetAggregatedDutyCycle+0x48>)
    1620:	4798      	blx	r3
    1622:	0003      	movs	r3, r0
    1624:	e7f2      	b.n	160c <Parser_LoraSetAggregatedDutyCycle+0x20>
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	00017fdd 	.word	0x00017fdd
    162c:	00002741 	.word	0x00002741
    1630:	0001dfa8 	.word	0x0001dfa8
    1634:	00011e81 	.word	0x00011e81

00001638 <Parser_LoraSetCryptoDevEnabled>:
{
    1638:	b510      	push	{r4, lr}
    163a:	b082      	sub	sp, #8
    163c:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    163e:	6800      	ldr	r0, [r0, #0]
    1640:	4b09      	ldr	r3, [pc, #36]	; (1668 <Parser_LoraSetCryptoDevEnabled+0x30>)
    1642:	4798      	blx	r3
    1644:	466b      	mov	r3, sp
    1646:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    1648:	230a      	movs	r3, #10
	if (validationVal < 2U)
    164a:	2801      	cmp	r0, #1
    164c:	d905      	bls.n	165a <Parser_LoraSetCryptoDevEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    164e:	009b      	lsls	r3, r3, #2
    1650:	4a06      	ldr	r2, [pc, #24]	; (166c <Parser_LoraSetCryptoDevEnabled+0x34>)
    1652:	589b      	ldr	r3, [r3, r2]
    1654:	6163      	str	r3, [r4, #20]
}
    1656:	b002      	add	sp, #8
    1658:	bd10      	pop	{r4, pc}
		returnVal = LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &validationVal);
    165a:	466b      	mov	r3, sp
    165c:	1dd9      	adds	r1, r3, #7
    165e:	2040      	movs	r0, #64	; 0x40
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <Parser_LoraSetCryptoDevEnabled+0x38>)
    1662:	4798      	blx	r3
    1664:	0003      	movs	r3, r0
    1666:	e7f2      	b.n	164e <Parser_LoraSetCryptoDevEnabled+0x16>
    1668:	00002815 	.word	0x00002815
    166c:	0001dfa8 	.word	0x0001dfa8
    1670:	00011e81 	.word	0x00011e81

00001674 <Parser_LoraGetMacStatus>:
{
    1674:	b530      	push	{r4, r5, lr}
    1676:	b083      	sub	sp, #12
    1678:	0005      	movs	r5, r0
    LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &macStatusMask);
    167a:	aa01      	add	r2, sp, #4
    167c:	2100      	movs	r1, #0
    167e:	2021      	movs	r0, #33	; 0x21
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <Parser_LoraGetMacStatus+0x34>)
    1682:	4798      	blx	r3
    tempBuff[3] = (uint8_t)macStatusMask;
    1684:	9b01      	ldr	r3, [sp, #4]
    1686:	466a      	mov	r2, sp
    1688:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(macStatusMask >> 8);
    168a:	0a1a      	lsrs	r2, r3, #8
    168c:	4669      	mov	r1, sp
    168e:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(macStatusMask >> 16);
    1690:	0c1a      	lsrs	r2, r3, #16
    1692:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(macStatusMask >> 24);    
    1694:	0e1b      	lsrs	r3, r3, #24
    1696:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    1698:	4c04      	ldr	r4, [pc, #16]	; (16ac <Parser_LoraGetMacStatus+0x38>)
    169a:	0022      	movs	r2, r4
    169c:	2004      	movs	r0, #4
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <Parser_LoraGetMacStatus+0x3c>)
    16a0:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    16a2:	616c      	str	r4, [r5, #20]
}
    16a4:	b003      	add	sp, #12
    16a6:	bd30      	pop	{r4, r5, pc}
    16a8:	0000fed1 	.word	0x0000fed1
    16ac:	20000fac 	.word	0x20000fac
    16b0:	0000260d 	.word	0x0000260d

000016b4 <Parser_LoraSetBatLevel>:
{
    16b4:	b510      	push	{r4, lr}
    16b6:	b082      	sub	sp, #8
    16b8:	0004      	movs	r4, r0
    uint8_t batLevel = atoi(pParserCmdInfo->pParam1);
    16ba:	6800      	ldr	r0, [r0, #0]
    16bc:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <Parser_LoraSetBatLevel+0x3c>)
    16be:	4798      	blx	r3
    16c0:	466b      	mov	r3, sp
    16c2:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    16c4:	22ff      	movs	r2, #255	; 0xff
    16c6:	2103      	movs	r1, #3
    16c8:	6820      	ldr	r0, [r4, #0]
    16ca:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <Parser_LoraSetBatLevel+0x40>)
    16cc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    16ce:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    16d0:	2800      	cmp	r0, #0
    16d2:	d105      	bne.n	16e0 <Parser_LoraSetBatLevel+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    16d4:	009b      	lsls	r3, r3, #2
    16d6:	4a08      	ldr	r2, [pc, #32]	; (16f8 <Parser_LoraSetBatLevel+0x44>)
    16d8:	589b      	ldr	r3, [r3, r2]
    16da:	6163      	str	r3, [r4, #20]
}
    16dc:	b002      	add	sp, #8
    16de:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(BATTERY, &batLevel);
    16e0:	466b      	mov	r3, sp
    16e2:	1dd9      	adds	r1, r3, #7
    16e4:	2018      	movs	r0, #24
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <Parser_LoraSetBatLevel+0x48>)
    16e8:	4798      	blx	r3
    16ea:	0003      	movs	r3, r0
    16ec:	e7f2      	b.n	16d4 <Parser_LoraSetBatLevel+0x20>
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00017fdd 	.word	0x00017fdd
    16f4:	00002741 	.word	0x00002741
    16f8:	0001dfa8 	.word	0x0001dfa8
    16fc:	00011e81 	.word	0x00011e81

00001700 <Parser_LoraSetReTxNb>:
{
    1700:	b510      	push	{r4, lr}
    1702:	b082      	sub	sp, #8
    1704:	0004      	movs	r4, r0
    uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    1706:	6800      	ldr	r0, [r0, #0]
    1708:	4b0c      	ldr	r3, [pc, #48]	; (173c <Parser_LoraSetReTxNb+0x3c>)
    170a:	4798      	blx	r3
    170c:	466b      	mov	r3, sp
    170e:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    1710:	22ff      	movs	r2, #255	; 0xff
    1712:	2103      	movs	r1, #3
    1714:	6820      	ldr	r0, [r4, #0]
    1716:	4b0a      	ldr	r3, [pc, #40]	; (1740 <Parser_LoraSetReTxNb+0x40>)
    1718:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    171a:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    171c:	2800      	cmp	r0, #0
    171e:	d105      	bne.n	172c <Parser_LoraSetReTxNb+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1720:	009b      	lsls	r3, r3, #2
    1722:	4a08      	ldr	r2, [pc, #32]	; (1744 <Parser_LoraSetReTxNb+0x44>)
    1724:	589b      	ldr	r3, [r3, r2]
    1726:	6163      	str	r3, [r4, #20]
}
    1728:	b002      	add	sp, #8
    172a:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CNF_RETRANSMISSION_NUM,&reTxNb);
    172c:	466b      	mov	r3, sp
    172e:	1dd9      	adds	r1, r3, #7
    1730:	2013      	movs	r0, #19
    1732:	4b05      	ldr	r3, [pc, #20]	; (1748 <Parser_LoraSetReTxNb+0x48>)
    1734:	4798      	blx	r3
    1736:	0003      	movs	r3, r0
    1738:	e7f2      	b.n	1720 <Parser_LoraSetReTxNb+0x20>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00017fdd 	.word	0x00017fdd
    1740:	00002741 	.word	0x00002741
    1744:	0001dfa8 	.word	0x0001dfa8
    1748:	00011e81 	.word	0x00011e81

0000174c <Parser_LoraSetRepsNb>:
{
    174c:	b510      	push	{r4, lr}
    174e:	b082      	sub	sp, #8
    1750:	0004      	movs	r4, r0
	uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    1752:	6800      	ldr	r0, [r0, #0]
    1754:	4b0c      	ldr	r3, [pc, #48]	; (1788 <Parser_LoraSetRepsNb+0x3c>)
    1756:	4798      	blx	r3
    1758:	466b      	mov	r3, sp
    175a:	71d8      	strb	r0, [r3, #7]
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    175c:	22ff      	movs	r2, #255	; 0xff
    175e:	2103      	movs	r1, #3
    1760:	6820      	ldr	r0, [r4, #0]
    1762:	4b0a      	ldr	r3, [pc, #40]	; (178c <Parser_LoraSetRepsNb+0x40>)
    1764:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1766:	230a      	movs	r3, #10
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    1768:	2800      	cmp	r0, #0
    176a:	d105      	bne.n	1778 <Parser_LoraSetRepsNb+0x2c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    176c:	009b      	lsls	r3, r3, #2
    176e:	4a08      	ldr	r2, [pc, #32]	; (1790 <Parser_LoraSetRepsNb+0x44>)
    1770:	589b      	ldr	r3, [r3, r2]
    1772:	6163      	str	r3, [r4, #20]
}
    1774:	b002      	add	sp, #8
    1776:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(UNCNF_REPETITION_NUM,&reTxNb);
    1778:	466b      	mov	r3, sp
    177a:	1dd9      	adds	r1, r3, #7
    177c:	2014      	movs	r0, #20
    177e:	4b05      	ldr	r3, [pc, #20]	; (1794 <Parser_LoraSetRepsNb+0x48>)
    1780:	4798      	blx	r3
    1782:	0003      	movs	r3, r0
    1784:	e7f2      	b.n	176c <Parser_LoraSetRepsNb+0x20>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	00017fdd 	.word	0x00017fdd
    178c:	00002741 	.word	0x00002741
    1790:	0001dfa8 	.word	0x0001dfa8
    1794:	00011e81 	.word	0x00011e81

00001798 <Parser_LoraGetReTxNb>:
{
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	b082      	sub	sp, #8
    179c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(CNF_RETRANSMISSION_NUM, NULL, &reTxNb);
    179e:	466b      	mov	r3, sp
    17a0:	1ddd      	adds	r5, r3, #7
    17a2:	002a      	movs	r2, r5
    17a4:	2100      	movs	r1, #0
    17a6:	2013      	movs	r0, #19
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <Parser_LoraGetReTxNb+0x28>)
    17aa:	4798      	blx	r3
    utoa(reTxNb, aParserData, 10);
    17ac:	4c05      	ldr	r4, [pc, #20]	; (17c4 <Parser_LoraGetReTxNb+0x2c>)
    17ae:	7828      	ldrb	r0, [r5, #0]
    17b0:	220a      	movs	r2, #10
    17b2:	0021      	movs	r1, r4
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <Parser_LoraGetReTxNb+0x30>)
    17b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    17b8:	6174      	str	r4, [r6, #20]
}
    17ba:	b002      	add	sp, #8
    17bc:	bd70      	pop	{r4, r5, r6, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	0000fed1 	.word	0x0000fed1
    17c4:	20000fac 	.word	0x20000fac
    17c8:	00018f71 	.word	0x00018f71

000017cc <Parser_LoraGetRepsNb>:
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	0006      	movs	r6, r0
	LORAWAN_GetAttr(UNCNF_REPETITION_NUM, NULL, &reTxNb);
    17d2:	466b      	mov	r3, sp
    17d4:	1ddd      	adds	r5, r3, #7
    17d6:	002a      	movs	r2, r5
    17d8:	2100      	movs	r1, #0
    17da:	2014      	movs	r0, #20
    17dc:	4b05      	ldr	r3, [pc, #20]	; (17f4 <Parser_LoraGetRepsNb+0x28>)
    17de:	4798      	blx	r3
	utoa(reTxNb, aParserData, 10);
    17e0:	4c05      	ldr	r4, [pc, #20]	; (17f8 <Parser_LoraGetRepsNb+0x2c>)
    17e2:	7828      	ldrb	r0, [r5, #0]
    17e4:	220a      	movs	r2, #10
    17e6:	0021      	movs	r1, r4
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <Parser_LoraGetRepsNb+0x30>)
    17ea:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    17ec:	6174      	str	r4, [r6, #20]
}
    17ee:	b002      	add	sp, #8
    17f0:	bd70      	pop	{r4, r5, r6, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	0000fed1 	.word	0x0000fed1
    17f8:	20000fac 	.word	0x20000fac
    17fc:	00018f71 	.word	0x00018f71

00001800 <Parser_LoraGetLinkCheckMargin>:
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	b082      	sub	sp, #8
    1804:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_MARGIN, NULL, &mrgn);
    1806:	466b      	mov	r3, sp
    1808:	1ddd      	adds	r5, r3, #7
    180a:	002a      	movs	r2, r5
    180c:	2100      	movs	r1, #0
    180e:	2022      	movs	r0, #34	; 0x22
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <Parser_LoraGetLinkCheckMargin+0x28>)
    1812:	4798      	blx	r3
    utoa(mrgn, aParserData,  10);
    1814:	4c05      	ldr	r4, [pc, #20]	; (182c <Parser_LoraGetLinkCheckMargin+0x2c>)
    1816:	7828      	ldrb	r0, [r5, #0]
    1818:	220a      	movs	r2, #10
    181a:	0021      	movs	r1, r4
    181c:	4b04      	ldr	r3, [pc, #16]	; (1830 <Parser_LoraGetLinkCheckMargin+0x30>)
    181e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1820:	6174      	str	r4, [r6, #20]
}
    1822:	b002      	add	sp, #8
    1824:	bd70      	pop	{r4, r5, r6, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	0000fed1 	.word	0x0000fed1
    182c:	20000fac 	.word	0x20000fac
    1830:	00018f71 	.word	0x00018f71

00001834 <Parser_LoraGetLinkCheckGwCnt>:
{
    1834:	b570      	push	{r4, r5, r6, lr}
    1836:	b082      	sub	sp, #8
    1838:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_GWCNT, NULL, &gwCnt);
    183a:	466b      	mov	r3, sp
    183c:	1ddd      	adds	r5, r3, #7
    183e:	002a      	movs	r2, r5
    1840:	2100      	movs	r1, #0
    1842:	2023      	movs	r0, #35	; 0x23
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <Parser_LoraGetLinkCheckGwCnt+0x28>)
    1846:	4798      	blx	r3
    utoa(gwCnt, aParserData, 10);
    1848:	4c05      	ldr	r4, [pc, #20]	; (1860 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    184a:	7828      	ldrb	r0, [r5, #0]
    184c:	220a      	movs	r2, #10
    184e:	0021      	movs	r1, r4
    1850:	4b04      	ldr	r3, [pc, #16]	; (1864 <Parser_LoraGetLinkCheckGwCnt+0x30>)
    1852:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1854:	6174      	str	r4, [r6, #20]
}
    1856:	b002      	add	sp, #8
    1858:	bd70      	pop	{r4, r5, r6, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	0000fed1 	.word	0x0000fed1
    1860:	20000fac 	.word	0x20000fac
    1864:	00018f71 	.word	0x00018f71

00001868 <Parser_LoraSetAutoReply>:
{
    1868:	b510      	push	{r4, lr}
    186a:	b082      	sub	sp, #8
    186c:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    186e:	6800      	ldr	r0, [r0, #0]
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <Parser_LoraSetAutoReply+0x30>)
    1872:	4798      	blx	r3
    1874:	466b      	mov	r3, sp
    1876:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    1878:	230a      	movs	r3, #10
    if(validationVal < 2U)
    187a:	2801      	cmp	r0, #1
    187c:	d905      	bls.n	188a <Parser_LoraSetAutoReply+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    187e:	009b      	lsls	r3, r3, #2
    1880:	4a06      	ldr	r2, [pc, #24]	; (189c <Parser_LoraSetAutoReply+0x34>)
    1882:	589b      	ldr	r3, [r3, r2]
    1884:	6163      	str	r3, [r4, #20]
}
    1886:	b002      	add	sp, #8
    1888:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(AUTOREPLY, &validationVal);      
    188a:	466b      	mov	r3, sp
    188c:	1dd9      	adds	r1, r3, #7
    188e:	2017      	movs	r0, #23
    1890:	4b03      	ldr	r3, [pc, #12]	; (18a0 <Parser_LoraSetAutoReply+0x38>)
    1892:	4798      	blx	r3
    1894:	0003      	movs	r3, r0
    1896:	e7f2      	b.n	187e <Parser_LoraSetAutoReply+0x16>
    1898:	00002815 	.word	0x00002815
    189c:	0001dfa8 	.word	0x0001dfa8
    18a0:	00011e81 	.word	0x00011e81

000018a4 <Parser_LoraGetAutoReply>:
{
    18a4:	b530      	push	{r4, r5, lr}
    18a6:	b083      	sub	sp, #12
    18a8:	0005      	movs	r5, r0
    LORAWAN_GetAttr(AUTOREPLY, NULL, &arEnabled);
    18aa:	466b      	mov	r3, sp
    18ac:	1ddc      	adds	r4, r3, #7
    18ae:	0022      	movs	r2, r4
    18b0:	2100      	movs	r1, #0
    18b2:	2017      	movs	r0, #23
    18b4:	4b04      	ldr	r3, [pc, #16]	; (18c8 <Parser_LoraGetAutoReply+0x24>)
    18b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[arEnabled];
    18b8:	7823      	ldrb	r3, [r4, #0]
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	4a03      	ldr	r2, [pc, #12]	; (18cc <Parser_LoraGetAutoReply+0x28>)
    18be:	589b      	ldr	r3, [r3, r2]
    18c0:	616b      	str	r3, [r5, #20]
}
    18c2:	b003      	add	sp, #12
    18c4:	bd30      	pop	{r4, r5, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	0000fed1 	.word	0x0000fed1
    18cc:	0001df88 	.word	0x0001df88

000018d0 <Parser_LoraSetRxDelay1>:
{
    18d0:	b510      	push	{r4, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	0004      	movs	r4, r0
    uint16_t rxDelay1 = atoi(pParserCmdInfo->pParam1);
    18d6:	6800      	ldr	r0, [r0, #0]
    18d8:	4b0c      	ldr	r3, [pc, #48]	; (190c <Parser_LoraSetRxDelay1+0x3c>)
    18da:	4798      	blx	r3
    18dc:	466b      	mov	r3, sp
    18de:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    18e0:	4a0b      	ldr	r2, [pc, #44]	; (1910 <Parser_LoraSetRxDelay1+0x40>)
    18e2:	2105      	movs	r1, #5
    18e4:	6820      	ldr	r0, [r4, #0]
    18e6:	4b0b      	ldr	r3, [pc, #44]	; (1914 <Parser_LoraSetRxDelay1+0x44>)
    18e8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    18ea:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    18ec:	2800      	cmp	r0, #0
    18ee:	d105      	bne.n	18fc <Parser_LoraSetRxDelay1+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    18f0:	009b      	lsls	r3, r3, #2
    18f2:	4a09      	ldr	r2, [pc, #36]	; (1918 <Parser_LoraSetRxDelay1+0x48>)
    18f4:	589b      	ldr	r3, [r3, r2]
    18f6:	6163      	str	r3, [r4, #20]
}
    18f8:	b002      	add	sp, #8
    18fa:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(RX_DELAY1,&rxDelay1);        
    18fc:	466b      	mov	r3, sp
    18fe:	1d99      	adds	r1, r3, #6
    1900:	200c      	movs	r0, #12
    1902:	4b06      	ldr	r3, [pc, #24]	; (191c <Parser_LoraSetRxDelay1+0x4c>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    1908:	e7f2      	b.n	18f0 <Parser_LoraSetRxDelay1+0x20>
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00017fdd 	.word	0x00017fdd
    1910:	0000ffff 	.word	0x0000ffff
    1914:	00002741 	.word	0x00002741
    1918:	0001dfa8 	.word	0x0001dfa8
    191c:	00011e81 	.word	0x00011e81

00001920 <Parser_LoraGetRxDelay1>:
{
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	b082      	sub	sp, #8
    1924:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY1,NULL,&rxDelay1);
    1926:	466b      	mov	r3, sp
    1928:	1d9d      	adds	r5, r3, #6
    192a:	002a      	movs	r2, r5
    192c:	2100      	movs	r1, #0
    192e:	200c      	movs	r0, #12
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <Parser_LoraGetRxDelay1+0x28>)
    1932:	4798      	blx	r3
    utoa(rxDelay1, aParserData, 10);
    1934:	4c05      	ldr	r4, [pc, #20]	; (194c <Parser_LoraGetRxDelay1+0x2c>)
    1936:	8828      	ldrh	r0, [r5, #0]
    1938:	220a      	movs	r2, #10
    193a:	0021      	movs	r1, r4
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <Parser_LoraGetRxDelay1+0x30>)
    193e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1940:	6174      	str	r4, [r6, #20]
}
    1942:	b002      	add	sp, #8
    1944:	bd70      	pop	{r4, r5, r6, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	0000fed1 	.word	0x0000fed1
    194c:	20000fac 	.word	0x20000fac
    1950:	00018f71 	.word	0x00018f71

00001954 <Parser_LoraGetRxDelay2>:
{
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	b082      	sub	sp, #8
    1958:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY2, NULL, &rxDelay2);
    195a:	466b      	mov	r3, sp
    195c:	1d9d      	adds	r5, r3, #6
    195e:	002a      	movs	r2, r5
    1960:	2100      	movs	r1, #0
    1962:	201f      	movs	r0, #31
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <Parser_LoraGetRxDelay2+0x28>)
    1966:	4798      	blx	r3
    utoa(rxDelay2, aParserData, 10);
    1968:	4c05      	ldr	r4, [pc, #20]	; (1980 <Parser_LoraGetRxDelay2+0x2c>)
    196a:	8828      	ldrh	r0, [r5, #0]
    196c:	220a      	movs	r2, #10
    196e:	0021      	movs	r1, r4
    1970:	4b04      	ldr	r3, [pc, #16]	; (1984 <Parser_LoraGetRxDelay2+0x30>)
    1972:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    1974:	6174      	str	r4, [r6, #20]
}
    1976:	b002      	add	sp, #8
    1978:	bd70      	pop	{r4, r5, r6, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	0000fed1 	.word	0x0000fed1
    1980:	20000fac 	.word	0x20000fac
    1984:	00018f71 	.word	0x00018f71

00001988 <Parser_LoraGetIsm>:
{
    1988:	b530      	push	{r4, r5, lr}
    198a:	b083      	sub	sp, #12
    198c:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    198e:	466b      	mov	r3, sp
    1990:	1ddc      	adds	r4, r3, #7
    1992:	0022      	movs	r2, r4
    1994:	2100      	movs	r1, #0
    1996:	2024      	movs	r0, #36	; 0x24
    1998:	4b04      	ldr	r3, [pc, #16]	; (19ac <Parser_LoraGetIsm+0x24>)
    199a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseIsmBand[ismBand];
    199c:	7823      	ldrb	r3, [r4, #0]
    199e:	009b      	lsls	r3, r3, #2
    19a0:	4a03      	ldr	r2, [pc, #12]	; (19b0 <Parser_LoraGetIsm+0x28>)
    19a2:	589b      	ldr	r3, [r3, r2]
    19a4:	616b      	str	r3, [r5, #20]
}
    19a6:	b003      	add	sp, #12
    19a8:	bd30      	pop	{r4, r5, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	0000fed1 	.word	0x0000fed1
    19b0:	0001df34 	.word	0x0001df34

000019b4 <Parser_LoraSetClass>:
{
    19b4:	b510      	push	{r4, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	0004      	movs	r4, r0
	if ((pParserCmdInfo->pParam1[0] == 'A') || (pParserCmdInfo->pParam1[0] == 'a'))
    19ba:	6803      	ldr	r3, [r0, #0]
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	2220      	movs	r2, #32
    19c0:	4393      	bics	r3, r2
    19c2:	2b41      	cmp	r3, #65	; 0x41
    19c4:	d008      	beq.n	19d8 <Parser_LoraSetClass+0x24>
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    19c6:	200a      	movs	r0, #10
	else if ((pParserCmdInfo->pParam1[0] == 'C') || (pParserCmdInfo->pParam1[0] == 'c'))
    19c8:	2b43      	cmp	r3, #67	; 0x43
    19ca:	d00d      	beq.n	19e8 <Parser_LoraSetClass+0x34>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    19cc:	0080      	lsls	r0, r0, #2
    19ce:	4b0a      	ldr	r3, [pc, #40]	; (19f8 <Parser_LoraSetClass+0x44>)
    19d0:	58c3      	ldr	r3, [r0, r3]
    19d2:	6163      	str	r3, [r4, #20]
}
    19d4:	b002      	add	sp, #8
    19d6:	bd10      	pop	{r4, pc}
		edClass = CLASS_A;
    19d8:	466b      	mov	r3, sp
    19da:	1dd9      	adds	r1, r3, #7
    19dc:	2301      	movs	r3, #1
    19de:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    19e0:	201a      	movs	r0, #26
    19e2:	4b06      	ldr	r3, [pc, #24]	; (19fc <Parser_LoraSetClass+0x48>)
    19e4:	4798      	blx	r3
    19e6:	e7f1      	b.n	19cc <Parser_LoraSetClass+0x18>
		edClass = CLASS_C;
    19e8:	466b      	mov	r3, sp
    19ea:	1dd9      	adds	r1, r3, #7
    19ec:	2304      	movs	r3, #4
    19ee:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    19f0:	3010      	adds	r0, #16
    19f2:	4b02      	ldr	r3, [pc, #8]	; (19fc <Parser_LoraSetClass+0x48>)
    19f4:	4798      	blx	r3
    19f6:	e7e9      	b.n	19cc <Parser_LoraSetClass+0x18>
    19f8:	0001dfa8 	.word	0x0001dfa8
    19fc:	00011e81 	.word	0x00011e81

00001a00 <Parser_LoraGetClass>:
{
    1a00:	b530      	push	{r4, r5, lr}
    1a02:	b083      	sub	sp, #12
    1a04:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    1a06:	466b      	mov	r3, sp
    1a08:	1ddc      	adds	r4, r3, #7
    1a0a:	0022      	movs	r2, r4
    1a0c:	2100      	movs	r1, #0
    1a0e:	201a      	movs	r0, #26
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <Parser_LoraGetClass+0x3c>)
    1a12:	4798      	blx	r3
	switch (edClass)
    1a14:	7823      	ldrb	r3, [r4, #0]
    1a16:	2b02      	cmp	r3, #2
    1a18:	d005      	beq.n	1a26 <Parser_LoraGetClass+0x26>
    1a1a:	2b04      	cmp	r3, #4
    1a1c:	d00a      	beq.n	1a34 <Parser_LoraGetClass+0x34>
    1a1e:	2b01      	cmp	r3, #1
    1a20:	d00a      	beq.n	1a38 <Parser_LoraGetClass+0x38>
			index = 3;
    1a22:	2303      	movs	r3, #3
		break;
    1a24:	e000      	b.n	1a28 <Parser_LoraGetClass+0x28>
			index = 1;
    1a26:	2301      	movs	r3, #1
	pParserCmdInfo->pReplyCmd = (char *)gapParserEdClass[index];
    1a28:	009b      	lsls	r3, r3, #2
    1a2a:	4a05      	ldr	r2, [pc, #20]	; (1a40 <Parser_LoraGetClass+0x40>)
    1a2c:	589b      	ldr	r3, [r3, r2]
    1a2e:	616b      	str	r3, [r5, #20]
}
    1a30:	b003      	add	sp, #12
    1a32:	bd30      	pop	{r4, r5, pc}
			index = 2;
    1a34:	2302      	movs	r3, #2
		break;
    1a36:	e7f7      	b.n	1a28 <Parser_LoraGetClass+0x28>
			index = 0;
    1a38:	2300      	movs	r3, #0
    1a3a:	e7f5      	b.n	1a28 <Parser_LoraGetClass+0x28>
    1a3c:	0000fed1 	.word	0x0000fed1
    1a40:	0001df98 	.word	0x0001df98

00001a44 <Parser_LoraGetSupportedEdClass>:
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b083      	sub	sp, #12
    1a48:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS_SUPPORTED, NULL, &edClassSupported);
    1a4a:	466b      	mov	r3, sp
    1a4c:	1ddc      	adds	r4, r3, #7
    1a4e:	0022      	movs	r2, r4
    1a50:	2100      	movs	r1, #0
    1a52:	2025      	movs	r0, #37	; 0x25
    1a54:	4b11      	ldr	r3, [pc, #68]	; (1a9c <Parser_LoraGetSupportedEdClass+0x58>)
    1a56:	4798      	blx	r3
	if ((CLASS_A | CLASS_B) == edClassSupported)
    1a58:	7823      	ldrb	r3, [r4, #0]
    1a5a:	2b03      	cmp	r3, #3
    1a5c:	d00a      	beq.n	1a74 <Parser_LoraGetSupportedEdClass+0x30>
	else if  ((CLASS_A | CLASS_C) == edClassSupported)
    1a5e:	2b05      	cmp	r3, #5
    1a60:	d012      	beq.n	1a88 <Parser_LoraGetSupportedEdClass+0x44>
		aParserData[0] = 'A';
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a64:	2241      	movs	r2, #65	; 0x41
    1a66:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '\0';
    1a68:	2200      	movs	r2, #0
    1a6a:	705a      	strb	r2, [r3, #1]
 	pParserCmdInfo->pReplyCmd = aParserData;
    1a6c:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a6e:	616b      	str	r3, [r5, #20]
}
    1a70:	b003      	add	sp, #12
    1a72:	bd30      	pop	{r4, r5, pc}
		aParserData[0] = 'A';
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a76:	2241      	movs	r2, #65	; 0x41
    1a78:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    1a7a:	3a1b      	subs	r2, #27
    1a7c:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'B';
    1a7e:	321c      	adds	r2, #28
    1a80:	709a      	strb	r2, [r3, #2]
		aParserData[3] = '\0';
    1a82:	2200      	movs	r2, #0
    1a84:	70da      	strb	r2, [r3, #3]
    1a86:	e7f1      	b.n	1a6c <Parser_LoraGetSupportedEdClass+0x28>
		aParserData[0] = 'A';
    1a88:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <Parser_LoraGetSupportedEdClass+0x5c>)
    1a8a:	2241      	movs	r2, #65	; 0x41
    1a8c:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    1a8e:	3a1b      	subs	r2, #27
    1a90:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'C';
    1a92:	321d      	adds	r2, #29
    1a94:	709a      	strb	r2, [r3, #2]
	    aParserData[3] = '\0';
    1a96:	2200      	movs	r2, #0
    1a98:	70da      	strb	r2, [r3, #3]
    1a9a:	e7e7      	b.n	1a6c <Parser_LoraGetSupportedEdClass+0x28>
    1a9c:	0000fed1 	.word	0x0000fed1
    1aa0:	20000fac 	.word	0x20000fac

00001aa4 <Parser_LoraSetMcast>:
{
    1aa4:	b530      	push	{r4, r5, lr}
    1aa6:	b083      	sub	sp, #12
    1aa8:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    1aaa:	6800      	ldr	r0, [r0, #0]
    1aac:	4b0c      	ldr	r3, [pc, #48]	; (1ae0 <Parser_LoraSetMcast+0x3c>)
    1aae:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    1ab0:	230a      	movs	r3, #10
	if (validationVal < 2U)
    1ab2:	2801      	cmp	r0, #1
    1ab4:	d905      	bls.n	1ac2 <Parser_LoraSetMcast+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    1ab6:	009b      	lsls	r3, r3, #2
    1ab8:	4a0a      	ldr	r2, [pc, #40]	; (1ae4 <Parser_LoraSetMcast+0x40>)
    1aba:	589b      	ldr	r3, [r3, r2]
    1abc:	6163      	str	r3, [r4, #20]
}
    1abe:	b003      	add	sp, #12
    1ac0:	bd30      	pop	{r4, r5, pc}
		mcastStatus.status = validationVal;
    1ac2:	ad01      	add	r5, sp, #4
    1ac4:	1e43      	subs	r3, r0, #1
    1ac6:	4198      	sbcs	r0, r3
    1ac8:	7068      	strb	r0, [r5, #1]
		mcastStatus.groupId = atoi(pParserCmdInfo->pParam2);
    1aca:	6860      	ldr	r0, [r4, #4]
    1acc:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <Parser_LoraSetMcast+0x44>)
    1ace:	4798      	blx	r3
    1ad0:	7028      	strb	r0, [r5, #0]
		returnVal = LORAWAN_SetMulticastParam(MCAST_ENABLE, &mcastStatus);
    1ad2:	0029      	movs	r1, r5
    1ad4:	2029      	movs	r0, #41	; 0x29
    1ad6:	4b05      	ldr	r3, [pc, #20]	; (1aec <Parser_LoraSetMcast+0x48>)
    1ad8:	4798      	blx	r3
    1ada:	0003      	movs	r3, r0
    1adc:	e7eb      	b.n	1ab6 <Parser_LoraSetMcast+0x12>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	00002815 	.word	0x00002815
    1ae4:	0001dfa8 	.word	0x0001dfa8
    1ae8:	00017fdd 	.word	0x00017fdd
    1aec:	00012a5d 	.word	0x00012a5d

00001af0 <Parser_LoraGetMcast>:
{
    1af0:	b510      	push	{r4, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1af6:	6800      	ldr	r0, [r0, #0]
    1af8:	4b0c      	ldr	r3, [pc, #48]	; (1b2c <Parser_LoraGetMcast+0x3c>)
    1afa:	4798      	blx	r3
    1afc:	466b      	mov	r3, sp
    1afe:	1d99      	adds	r1, r3, #6
    1b00:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_ENABLE, &groupId, &mcastStatus);
    1b02:	1dda      	adds	r2, r3, #7
    1b04:	2029      	movs	r0, #41	; 0x29
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <Parser_LoraGetMcast+0x40>)
    1b08:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1b0a:	2808      	cmp	r0, #8
    1b0c:	d005      	beq.n	1b1a <Parser_LoraGetMcast+0x2a>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1b0e:	0080      	lsls	r0, r0, #2
    1b10:	4b08      	ldr	r3, [pc, #32]	; (1b34 <Parser_LoraGetMcast+0x44>)
    1b12:	58c3      	ldr	r3, [r0, r3]
    1b14:	6163      	str	r3, [r4, #20]
}
    1b16:	b002      	add	sp, #8
    1b18:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[mcastStatus];
    1b1a:	466b      	mov	r3, sp
    1b1c:	3307      	adds	r3, #7
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4a05      	ldr	r2, [pc, #20]	; (1b38 <Parser_LoraGetMcast+0x48>)
    1b24:	589b      	ldr	r3, [r3, r2]
    1b26:	6163      	str	r3, [r4, #20]
    1b28:	e7f5      	b.n	1b16 <Parser_LoraGetMcast+0x26>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00017fdd 	.word	0x00017fdd
    1b30:	0000fed1 	.word	0x0000fed1
    1b34:	0001dfa8 	.word	0x0001dfa8
    1b38:	0001df88 	.word	0x0001df88

00001b3c <Parser_LoraGetMcastDownCounter>:
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	b082      	sub	sp, #8
    1b40:	0005      	movs	r5, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1b42:	6800      	ldr	r0, [r0, #0]
    1b44:	4b0c      	ldr	r3, [pc, #48]	; (1b78 <Parser_LoraGetMcastDownCounter+0x3c>)
    1b46:	4798      	blx	r3
    1b48:	466b      	mov	r3, sp
    1b4a:	1cd9      	adds	r1, r3, #3
    1b4c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_FCNT_DOWN, &groupId, &ctr);
    1b4e:	aa01      	add	r2, sp, #4
    1b50:	202d      	movs	r0, #45	; 0x2d
    1b52:	4b0a      	ldr	r3, [pc, #40]	; (1b7c <Parser_LoraGetMcastDownCounter+0x40>)
    1b54:	4798      	blx	r3
    1b56:	0004      	movs	r4, r0
	ultoa(aParserData, ctr, 10U);
    1b58:	220a      	movs	r2, #10
    1b5a:	9901      	ldr	r1, [sp, #4]
    1b5c:	4808      	ldr	r0, [pc, #32]	; (1b80 <Parser_LoraGetMcastDownCounter+0x44>)
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <Parser_LoraGetMcastDownCounter+0x48>)
    1b60:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1b62:	2c08      	cmp	r4, #8
    1b64:	d005      	beq.n	1b72 <Parser_LoraGetMcastDownCounter+0x36>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1b66:	00a4      	lsls	r4, r4, #2
    1b68:	4b07      	ldr	r3, [pc, #28]	; (1b88 <Parser_LoraGetMcastDownCounter+0x4c>)
    1b6a:	58e3      	ldr	r3, [r4, r3]
    1b6c:	616b      	str	r3, [r5, #20]
}
    1b6e:	b002      	add	sp, #8
    1b70:	bd70      	pop	{r4, r5, r6, pc}
		pParserCmdInfo->pReplyCmd = aParserData;
    1b72:	4b03      	ldr	r3, [pc, #12]	; (1b80 <Parser_LoraGetMcastDownCounter+0x44>)
    1b74:	616b      	str	r3, [r5, #20]
    1b76:	e7fa      	b.n	1b6e <Parser_LoraGetMcastDownCounter+0x32>
    1b78:	00017fdd 	.word	0x00017fdd
    1b7c:	0000fed1 	.word	0x0000fed1
    1b80:	20000fac 	.word	0x20000fac
    1b84:	000026c5 	.word	0x000026c5
    1b88:	0001dfa8 	.word	0x0001dfa8

00001b8c <Parser_LoraSetMcastDevAddr>:
{
    1b8c:	b530      	push	{r4, r5, lr}
    1b8e:	b085      	sub	sp, #20
    1b90:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1b92:	6800      	ldr	r0, [r0, #0]
    1b94:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <Parser_LoraSetMcastDevAddr+0x68>)
    1b96:	4798      	blx	r3
	int8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1b98:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d105      	bne.n	1baa <Parser_LoraSetMcastDevAddr+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1b9e:	009b      	lsls	r3, r3, #2
    1ba0:	4a15      	ldr	r2, [pc, #84]	; (1bf8 <Parser_LoraSetMcastDevAddr+0x6c>)
    1ba2:	589b      	ldr	r3, [r3, r2]
    1ba4:	6163      	str	r3, [r4, #20]
}
    1ba6:	b005      	add	sp, #20
    1ba8:	bd30      	pop	{r4, r5, pc}
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    1baa:	aa03      	add	r2, sp, #12
    1bac:	6821      	ldr	r1, [r4, #0]
    1bae:	2008      	movs	r0, #8
    1bb0:	4b12      	ldr	r3, [pc, #72]	; (1bfc <Parser_LoraSetMcastDevAddr+0x70>)
    1bb2:	4798      	blx	r3
	int8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1bb4:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    1bb6:	2800      	cmp	r0, #0
    1bb8:	d0f1      	beq.n	1b9e <Parser_LoraSetMcastDevAddr+0x12>
			devMultiAddr = (uint32_t)tempBuff[3];
    1bba:	aa03      	add	r2, sp, #12
    1bbc:	78d0      	ldrb	r0, [r2, #3]
			devMultiAddr += ((uint32_t)tempBuff[2]) << 8;
    1bbe:	7893      	ldrb	r3, [r2, #2]
    1bc0:	021b      	lsls	r3, r3, #8
			devMultiAddr += ((uint32_t)tempBuff[1]) << 16;
    1bc2:	7851      	ldrb	r1, [r2, #1]
    1bc4:	0409      	lsls	r1, r1, #16
    1bc6:	185b      	adds	r3, r3, r1
    1bc8:	181b      	adds	r3, r3, r0
			addr.mcast_dev_addr = devMultiAddr;
    1bca:	ad01      	add	r5, sp, #4
			devMultiAddr += ((uint32_t)tempBuff[0]) << 24;
    1bcc:	7812      	ldrb	r2, [r2, #0]
    1bce:	0612      	lsls	r2, r2, #24
    1bd0:	18d3      	adds	r3, r2, r3
			addr.mcast_dev_addr = devMultiAddr;
    1bd2:	9302      	str	r3, [sp, #8]
			addr.groupId = atoi(pParserCmdInfo->pParam2);
    1bd4:	6860      	ldr	r0, [r4, #4]
    1bd6:	4b0a      	ldr	r3, [pc, #40]	; (1c00 <Parser_LoraSetMcastDevAddr+0x74>)
    1bd8:	4798      	blx	r3
    1bda:	7028      	strb	r0, [r5, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_GROUP_ADDR, &addr);
    1bdc:	0029      	movs	r1, r5
    1bde:	202a      	movs	r0, #42	; 0x2a
    1be0:	4b08      	ldr	r3, [pc, #32]	; (1c04 <Parser_LoraSetMcastDevAddr+0x78>)
    1be2:	4798      	blx	r3
    1be4:	b243      	sxtb	r3, r0
			gParserConfiguredJoinParameters.flags.mcastdevaddr = 1;
    1be6:	4908      	ldr	r1, [pc, #32]	; (1c08 <Parser_LoraSetMcastDevAddr+0x7c>)
    1be8:	780a      	ldrb	r2, [r1, #0]
    1bea:	2040      	movs	r0, #64	; 0x40
    1bec:	4302      	orrs	r2, r0
    1bee:	700a      	strb	r2, [r1, #0]
    1bf0:	e7d5      	b.n	1b9e <Parser_LoraSetMcastDevAddr+0x12>
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	000025d9 	.word	0x000025d9
    1bf8:	0001dfa8 	.word	0x0001dfa8
    1bfc:	000028e1 	.word	0x000028e1
    1c00:	00017fdd 	.word	0x00017fdd
    1c04:	00012a5d 	.word	0x00012a5d
    1c08:	20001dc8 	.word	0x20001dc8

00001c0c <Parser_LoraGetMcastDevAddr>:
{
    1c0c:	b530      	push	{r4, r5, lr}
    1c0e:	b085      	sub	sp, #20
    1c10:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1c12:	6800      	ldr	r0, [r0, #0]
    1c14:	4b10      	ldr	r3, [pc, #64]	; (1c58 <Parser_LoraGetMcastDevAddr+0x4c>)
    1c16:	4798      	blx	r3
    1c18:	466b      	mov	r3, sp
    1c1a:	1dd9      	adds	r1, r3, #7
    1c1c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_GROUP_ADDR, &groupId, &devMultiAddr);
    1c1e:	aa03      	add	r2, sp, #12
    1c20:	202a      	movs	r0, #42	; 0x2a
    1c22:	4b0e      	ldr	r3, [pc, #56]	; (1c5c <Parser_LoraGetMcastDevAddr+0x50>)
    1c24:	4798      	blx	r3
	tempBuff[3] = (uint8_t)devMultiAddr;
    1c26:	9b03      	ldr	r3, [sp, #12]
    1c28:	aa02      	add	r2, sp, #8
    1c2a:	70d3      	strb	r3, [r2, #3]
	tempBuff[2] = (uint8_t)(devMultiAddr >> 8);
    1c2c:	0a19      	lsrs	r1, r3, #8
    1c2e:	7091      	strb	r1, [r2, #2]
	tempBuff[1] = (uint8_t)(devMultiAddr >> 16);
    1c30:	0c19      	lsrs	r1, r3, #16
    1c32:	7051      	strb	r1, [r2, #1]
	tempBuff[0] = (uint8_t)(devMultiAddr >> 24);
    1c34:	0e1b      	lsrs	r3, r3, #24
    1c36:	7013      	strb	r3, [r2, #0]
	if (status == LORAWAN_SUCCESS)
    1c38:	2808      	cmp	r0, #8
    1c3a:	d005      	beq.n	1c48 <Parser_LoraGetMcastDevAddr+0x3c>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1c3c:	0080      	lsls	r0, r0, #2
    1c3e:	4b08      	ldr	r3, [pc, #32]	; (1c60 <Parser_LoraGetMcastDevAddr+0x54>)
    1c40:	58c3      	ldr	r3, [r0, r3]
    1c42:	6163      	str	r3, [r4, #20]
}
    1c44:	b005      	add	sp, #20
    1c46:	bd30      	pop	{r4, r5, pc}
		Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    1c48:	4d06      	ldr	r5, [pc, #24]	; (1c64 <Parser_LoraGetMcastDevAddr+0x58>)
    1c4a:	002a      	movs	r2, r5
    1c4c:	a902      	add	r1, sp, #8
    1c4e:	3804      	subs	r0, #4
    1c50:	4b05      	ldr	r3, [pc, #20]	; (1c68 <Parser_LoraGetMcastDevAddr+0x5c>)
    1c52:	4798      	blx	r3
		pParserCmdInfo->pReplyCmd = aParserData;
    1c54:	6165      	str	r5, [r4, #20]
    1c56:	e7f5      	b.n	1c44 <Parser_LoraGetMcastDevAddr+0x38>
    1c58:	00017fdd 	.word	0x00017fdd
    1c5c:	0000fed1 	.word	0x0000fed1
    1c60:	0001dfa8 	.word	0x0001dfa8
    1c64:	20000fac 	.word	0x20000fac
    1c68:	0000260d 	.word	0x0000260d

00001c6c <Parser_LoraSetMcastNwksKey>:
{
    1c6c:	b510      	push	{r4, lr}
    1c6e:	b086      	sub	sp, #24
    1c70:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1c72:	6800      	ldr	r0, [r0, #0]
    1c74:	4b11      	ldr	r3, [pc, #68]	; (1cbc <Parser_LoraSetMcastNwksKey+0x50>)
    1c76:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1c78:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d105      	bne.n	1c8a <Parser_LoraSetMcastNwksKey+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1c7e:	009b      	lsls	r3, r3, #2
    1c80:	4a0f      	ldr	r2, [pc, #60]	; (1cc0 <Parser_LoraSetMcastNwksKey+0x54>)
    1c82:	589b      	ldr	r3, [r3, r2]
    1c84:	6163      	str	r3, [r4, #20]
}
    1c86:	b006      	add	sp, #24
    1c88:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    1c8a:	466b      	mov	r3, sp
    1c8c:	1d5a      	adds	r2, r3, #5
    1c8e:	6821      	ldr	r1, [r4, #0]
    1c90:	2020      	movs	r0, #32
    1c92:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <Parser_LoraSetMcastNwksKey+0x58>)
    1c94:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1c96:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    1c98:	2800      	cmp	r0, #0
    1c9a:	d0f0      	beq.n	1c7e <Parser_LoraSetMcastNwksKey+0x12>
			key.groupId = atoi(pParserCmdInfo->pParam2);
    1c9c:	6860      	ldr	r0, [r4, #4]
    1c9e:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <Parser_LoraSetMcastNwksKey+0x5c>)
    1ca0:	4798      	blx	r3
    1ca2:	a901      	add	r1, sp, #4
    1ca4:	7008      	strb	r0, [r1, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_NWKS_KEY, &key);
    1ca6:	202b      	movs	r0, #43	; 0x2b
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <Parser_LoraSetMcastNwksKey+0x60>)
    1caa:	4798      	blx	r3
    1cac:	0003      	movs	r3, r0
			gParserConfiguredJoinParameters.flags.mcastnwkskey = 1;
    1cae:	4908      	ldr	r1, [pc, #32]	; (1cd0 <Parser_LoraSetMcastNwksKey+0x64>)
    1cb0:	7808      	ldrb	r0, [r1, #0]
    1cb2:	2280      	movs	r2, #128	; 0x80
    1cb4:	4252      	negs	r2, r2
    1cb6:	4302      	orrs	r2, r0
    1cb8:	700a      	strb	r2, [r1, #0]
    1cba:	e7e0      	b.n	1c7e <Parser_LoraSetMcastNwksKey+0x12>
    1cbc:	000025d9 	.word	0x000025d9
    1cc0:	0001dfa8 	.word	0x0001dfa8
    1cc4:	000028e1 	.word	0x000028e1
    1cc8:	00017fdd 	.word	0x00017fdd
    1ccc:	00012a5d 	.word	0x00012a5d
    1cd0:	20001dc8 	.word	0x20001dc8

00001cd4 <Parser_LoraSetMcastAppsKey>:
{
    1cd4:	b510      	push	{r4, lr}
    1cd6:	b086      	sub	sp, #24
    1cd8:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1cda:	6800      	ldr	r0, [r0, #0]
    1cdc:	4b11      	ldr	r3, [pc, #68]	; (1d24 <Parser_LoraSetMcastAppsKey+0x50>)
    1cde:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1ce0:	230a      	movs	r3, #10
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d105      	bne.n	1cf2 <Parser_LoraSetMcastAppsKey+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1ce6:	009b      	lsls	r3, r3, #2
    1ce8:	4a0f      	ldr	r2, [pc, #60]	; (1d28 <Parser_LoraSetMcastAppsKey+0x54>)
    1cea:	589b      	ldr	r3, [r3, r2]
    1cec:	6163      	str	r3, [r4, #20]
}
    1cee:	b006      	add	sp, #24
    1cf0:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    1cf2:	466b      	mov	r3, sp
    1cf4:	1d5a      	adds	r2, r3, #5
    1cf6:	6821      	ldr	r1, [r4, #0]
    1cf8:	2020      	movs	r0, #32
    1cfa:	4b0c      	ldr	r3, [pc, #48]	; (1d2c <Parser_LoraSetMcastAppsKey+0x58>)
    1cfc:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1cfe:	230a      	movs	r3, #10
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    1d00:	2800      	cmp	r0, #0
    1d02:	d0f0      	beq.n	1ce6 <Parser_LoraSetMcastAppsKey+0x12>
			key.groupId = atoi(pParserCmdInfo->pParam2);			
    1d04:	6860      	ldr	r0, [r4, #4]
    1d06:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <Parser_LoraSetMcastAppsKey+0x5c>)
    1d08:	4798      	blx	r3
    1d0a:	a901      	add	r1, sp, #4
    1d0c:	7008      	strb	r0, [r1, #0]
			statusIdx = LORAWAN_SetMulticastParam(MCAST_APPS_KEY, &key);
    1d0e:	202c      	movs	r0, #44	; 0x2c
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <Parser_LoraSetMcastAppsKey+0x60>)
    1d12:	4798      	blx	r3
    1d14:	0003      	movs	r3, r0
			gParserConfiguredJoinParameters.flags.mcastappskey = 1;
    1d16:	4908      	ldr	r1, [pc, #32]	; (1d38 <Parser_LoraSetMcastAppsKey+0x64>)
    1d18:	784a      	ldrb	r2, [r1, #1]
    1d1a:	2001      	movs	r0, #1
    1d1c:	4302      	orrs	r2, r0
    1d1e:	704a      	strb	r2, [r1, #1]
    1d20:	e7e1      	b.n	1ce6 <Parser_LoraSetMcastAppsKey+0x12>
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	000025d9 	.word	0x000025d9
    1d28:	0001dfa8 	.word	0x0001dfa8
    1d2c:	000028e1 	.word	0x000028e1
    1d30:	00017fdd 	.word	0x00017fdd
    1d34:	00012a5d 	.word	0x00012a5d
    1d38:	20001dc8 	.word	0x20001dc8

00001d3c <Parser_LoraSetMcastFreq>:
{
    1d3c:	b510      	push	{r4, lr}
    1d3e:	b082      	sub	sp, #8
    1d40:	0004      	movs	r4, r0
	key.dlFrequency = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    1d42:	220a      	movs	r2, #10
    1d44:	2100      	movs	r1, #0
    1d46:	6800      	ldr	r0, [r0, #0]
    1d48:	4b10      	ldr	r3, [pc, #64]	; (1d8c <Parser_LoraSetMcastFreq+0x50>)
    1d4a:	4798      	blx	r3
    1d4c:	9001      	str	r0, [sp, #4]
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1d4e:	2201      	movs	r2, #1
    1d50:	4252      	negs	r2, r2
    1d52:	210a      	movs	r1, #10
    1d54:	6820      	ldr	r0, [r4, #0]
    1d56:	4b0e      	ldr	r3, [pc, #56]	; (1d90 <Parser_LoraSetMcastFreq+0x54>)
    1d58:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1d5a:	230a      	movs	r3, #10
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    1d5c:	2800      	cmp	r0, #0
    1d5e:	d105      	bne.n	1d6c <Parser_LoraSetMcastFreq+0x30>
	 pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1d60:	009b      	lsls	r3, r3, #2
    1d62:	4a0c      	ldr	r2, [pc, #48]	; (1d94 <Parser_LoraSetMcastFreq+0x58>)
    1d64:	589b      	ldr	r3, [r3, r2]
    1d66:	6163      	str	r3, [r4, #20]
}
    1d68:	b002      	add	sp, #8
    1d6a:	bd10      	pop	{r4, pc}
		  key.groupId = atoi(pParserCmdInfo->pParam2);
    1d6c:	6860      	ldr	r0, [r4, #4]
    1d6e:	4b0a      	ldr	r3, [pc, #40]	; (1d98 <Parser_LoraSetMcastFreq+0x5c>)
    1d70:	4798      	blx	r3
    1d72:	466b      	mov	r3, sp
    1d74:	7018      	strb	r0, [r3, #0]
		  statusIdx = LORAWAN_SetMulticastParam(MCAST_FREQUENCY,(void*)&key);
    1d76:	4669      	mov	r1, sp
    1d78:	2030      	movs	r0, #48	; 0x30
    1d7a:	4b08      	ldr	r3, [pc, #32]	; (1d9c <Parser_LoraSetMcastFreq+0x60>)
    1d7c:	4798      	blx	r3
    1d7e:	0003      	movs	r3, r0
		  gParserConfiguredJoinParameters.flags.mcastfreq = 1;
    1d80:	4907      	ldr	r1, [pc, #28]	; (1da0 <Parser_LoraSetMcastFreq+0x64>)
    1d82:	784a      	ldrb	r2, [r1, #1]
    1d84:	2002      	movs	r0, #2
    1d86:	4302      	orrs	r2, r0
    1d88:	704a      	strb	r2, [r1, #1]
    1d8a:	e7e9      	b.n	1d60 <Parser_LoraSetMcastFreq+0x24>
    1d8c:	00018eb9 	.word	0x00018eb9
    1d90:	00002741 	.word	0x00002741
    1d94:	0001dfa8 	.word	0x0001dfa8
    1d98:	00017fdd 	.word	0x00017fdd
    1d9c:	00012a5d 	.word	0x00012a5d
    1da0:	20001dc8 	.word	0x20001dc8

00001da4 <Parser_LoraGetMcastFreq>:
{
    1da4:	b570      	push	{r4, r5, r6, lr}
    1da6:	b082      	sub	sp, #8
    1da8:	0005      	movs	r5, r0
  uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1daa:	6800      	ldr	r0, [r0, #0]
    1dac:	4b0c      	ldr	r3, [pc, #48]	; (1de0 <Parser_LoraGetMcastFreq+0x3c>)
    1dae:	4798      	blx	r3
    1db0:	466b      	mov	r3, sp
    1db2:	1cd9      	adds	r1, r3, #3
    1db4:	7008      	strb	r0, [r1, #0]
  status = LORAWAN_GetAttr(MCAST_FREQUENCY,&groupId,&freq);
    1db6:	aa01      	add	r2, sp, #4
    1db8:	2030      	movs	r0, #48	; 0x30
    1dba:	4b0a      	ldr	r3, [pc, #40]	; (1de4 <Parser_LoraGetMcastFreq+0x40>)
    1dbc:	4798      	blx	r3
    1dbe:	0004      	movs	r4, r0
  ultoa(aParserData, freq, 10U);
    1dc0:	220a      	movs	r2, #10
    1dc2:	9901      	ldr	r1, [sp, #4]
    1dc4:	4808      	ldr	r0, [pc, #32]	; (1de8 <Parser_LoraGetMcastFreq+0x44>)
    1dc6:	4b09      	ldr	r3, [pc, #36]	; (1dec <Parser_LoraGetMcastFreq+0x48>)
    1dc8:	4798      	blx	r3
  if(status == LORAWAN_SUCCESS)
    1dca:	2c08      	cmp	r4, #8
    1dcc:	d005      	beq.n	1dda <Parser_LoraGetMcastFreq+0x36>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    1dce:	00a4      	lsls	r4, r4, #2
    1dd0:	4b07      	ldr	r3, [pc, #28]	; (1df0 <Parser_LoraGetMcastFreq+0x4c>)
    1dd2:	58e3      	ldr	r3, [r4, r3]
    1dd4:	616b      	str	r3, [r5, #20]
}
    1dd6:	b002      	add	sp, #8
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
	  pParserCmdInfo->pReplyCmd = aParserData;
    1dda:	4b03      	ldr	r3, [pc, #12]	; (1de8 <Parser_LoraGetMcastFreq+0x44>)
    1ddc:	616b      	str	r3, [r5, #20]
    1dde:	e7fa      	b.n	1dd6 <Parser_LoraGetMcastFreq+0x32>
    1de0:	00017fdd 	.word	0x00017fdd
    1de4:	0000fed1 	.word	0x0000fed1
    1de8:	20000fac 	.word	0x20000fac
    1dec:	000026c5 	.word	0x000026c5
    1df0:	0001dfa8 	.word	0x0001dfa8

00001df4 <Parser_LoraSetMcastDr>:
{
    1df4:	b510      	push	{r4, lr}
    1df6:	b082      	sub	sp, #8
    1df8:	0004      	movs	r4, r0
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    1dfa:	466b      	mov	r3, sp
    1dfc:	1d59      	adds	r1, r3, #5
    1dfe:	6800      	ldr	r0, [r0, #0]
    1e00:	4b0a      	ldr	r3, [pc, #40]	; (1e2c <Parser_LoraSetMcastDr+0x38>)
    1e02:	4798      	blx	r3
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    1e04:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    1e06:	2800      	cmp	r0, #0
    1e08:	d105      	bne.n	1e16 <Parser_LoraSetMcastDr+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    1e0a:	009b      	lsls	r3, r3, #2
    1e0c:	4a08      	ldr	r2, [pc, #32]	; (1e30 <Parser_LoraSetMcastDr+0x3c>)
    1e0e:	589b      	ldr	r3, [r3, r2]
    1e10:	6163      	str	r3, [r4, #20]
}
    1e12:	b002      	add	sp, #8
    1e14:	bd10      	pop	{r4, pc}
		key.groupId = atoi(pParserCmdInfo->pParam2);
    1e16:	6860      	ldr	r0, [r4, #4]
    1e18:	4b06      	ldr	r3, [pc, #24]	; (1e34 <Parser_LoraSetMcastDr+0x40>)
    1e1a:	4798      	blx	r3
    1e1c:	a901      	add	r1, sp, #4
    1e1e:	7008      	strb	r0, [r1, #0]
		statusIdx = LORAWAN_SetMulticastParam(MCAST_DATARATE,&key);
    1e20:	2031      	movs	r0, #49	; 0x31
    1e22:	4b05      	ldr	r3, [pc, #20]	; (1e38 <Parser_LoraSetMcastDr+0x44>)
    1e24:	4798      	blx	r3
    1e26:	0003      	movs	r3, r0
    1e28:	e7ef      	b.n	1e0a <Parser_LoraSetMcastDr+0x16>
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	0000266d 	.word	0x0000266d
    1e30:	0001dfa8 	.word	0x0001dfa8
    1e34:	00017fdd 	.word	0x00017fdd
    1e38:	00012a5d 	.word	0x00012a5d

00001e3c <Parser_LoraGetMcastDr>:
{
    1e3c:	b530      	push	{r4, r5, lr}
    1e3e:	b083      	sub	sp, #12
    1e40:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    1e42:	6800      	ldr	r0, [r0, #0]
    1e44:	4b0c      	ldr	r3, [pc, #48]	; (1e78 <Parser_LoraGetMcastDr+0x3c>)
    1e46:	4798      	blx	r3
    1e48:	466b      	mov	r3, sp
    1e4a:	1d99      	adds	r1, r3, #6
    1e4c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_DATARATE,&groupId,&dr);
    1e4e:	1dda      	adds	r2, r3, #7
    1e50:	2031      	movs	r0, #49	; 0x31
    1e52:	4b0a      	ldr	r3, [pc, #40]	; (1e7c <Parser_LoraGetMcastDr+0x40>)
    1e54:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    1e56:	2808      	cmp	r0, #8
    1e58:	d005      	beq.n	1e66 <Parser_LoraGetMcastDr+0x2a>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];	
    1e5a:	0080      	lsls	r0, r0, #2
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <Parser_LoraGetMcastDr+0x44>)
    1e5e:	58c3      	ldr	r3, [r0, r3]
    1e60:	6163      	str	r3, [r4, #20]
}
    1e62:	b003      	add	sp, #12
    1e64:	bd30      	pop	{r4, r5, pc}
	   itoa(dr, aParserData, 10U);
    1e66:	4d07      	ldr	r5, [pc, #28]	; (1e84 <Parser_LoraGetMcastDr+0x48>)
    1e68:	466b      	mov	r3, sp
    1e6a:	79d8      	ldrb	r0, [r3, #7]
    1e6c:	220a      	movs	r2, #10
    1e6e:	0029      	movs	r1, r5
    1e70:	4b05      	ldr	r3, [pc, #20]	; (1e88 <Parser_LoraGetMcastDr+0x4c>)
    1e72:	4798      	blx	r3
	   pParserCmdInfo->pReplyCmd = aParserData;
    1e74:	6165      	str	r5, [r4, #20]
    1e76:	e7f4      	b.n	1e62 <Parser_LoraGetMcastDr+0x26>
    1e78:	00017fdd 	.word	0x00017fdd
    1e7c:	0000fed1 	.word	0x0000fed1
    1e80:	0001dfa8 	.word	0x0001dfa8
    1e84:	20000fac 	.word	0x20000fac
    1e88:	00018061 	.word	0x00018061

00001e8c <Parser_LoraGetMacLastPacketRssi>:

void Parser_LoraGetMacLastPacketRssi(parserCmdInfo_t* pParserCmdInfo)
{
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	b082      	sub	sp, #8
    1e90:	0006      	movs	r6, r0
	int16_t rssi;

	LORAWAN_GetAttr(LAST_PACKET_RSSI, NULL, &rssi);
    1e92:	466b      	mov	r3, sp
    1e94:	1d9d      	adds	r5, r3, #6
    1e96:	002a      	movs	r2, r5
    1e98:	2100      	movs	r1, #0
    1e9a:	2036      	movs	r0, #54	; 0x36
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <Parser_LoraGetMacLastPacketRssi+0x28>)
    1e9e:	4798      	blx	r3
	itoa(rssi,aParserData, 10U);
    1ea0:	4c05      	ldr	r4, [pc, #20]	; (1eb8 <Parser_LoraGetMacLastPacketRssi+0x2c>)
    1ea2:	2300      	movs	r3, #0
    1ea4:	5ee8      	ldrsh	r0, [r5, r3]
    1ea6:	220a      	movs	r2, #10
    1ea8:	0021      	movs	r1, r4
    1eaa:	4b04      	ldr	r3, [pc, #16]	; (1ebc <Parser_LoraGetMacLastPacketRssi+0x30>)
    1eac:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;
    1eae:	6174      	str	r4, [r6, #20]
}
    1eb0:	b002      	add	sp, #8
    1eb2:	bd70      	pop	{r4, r5, r6, pc}
    1eb4:	0000fed1 	.word	0x0000fed1
    1eb8:	20000fac 	.word	0x20000fac
    1ebc:	00018061 	.word	0x00018061

00001ec0 <Parser_LoraGetIsFpending>:
void Parser_LoraGetIsFpending(parserCmdInfo_t* pParserCmdInfo)
{
    1ec0:	b530      	push	{r4, r5, lr}
    1ec2:	b083      	sub	sp, #12
    1ec4:	0005      	movs	r5, r0
	bool isFpending;

	LORAWAN_GetAttr(IS_FPENDING, NULL, &isFpending);
    1ec6:	466b      	mov	r3, sp
    1ec8:	1ddc      	adds	r4, r3, #7
    1eca:	0022      	movs	r2, r4
    1ecc:	2100      	movs	r1, #0
    1ece:	2037      	movs	r0, #55	; 0x37
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <Parser_LoraGetIsFpending+0x24>)
    1ed2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[isFpending];
    1ed4:	7823      	ldrb	r3, [r4, #0]
    1ed6:	009b      	lsls	r3, r3, #2
    1ed8:	4a03      	ldr	r2, [pc, #12]	; (1ee8 <Parser_LoraGetIsFpending+0x28>)
    1eda:	589b      	ldr	r3, [r3, r2]
    1edc:	616b      	str	r3, [r5, #20]
}
    1ede:	b003      	add	sp, #12
    1ee0:	bd30      	pop	{r4, r5, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	0000fed1 	.word	0x0000fed1
    1ee8:	0001df90 	.word	0x0001df90

00001eec <Parser_LoraGetMacDlAckReqd>:
void Parser_LoraGetMacDlAckReqd(parserCmdInfo_t* pParserCmdInfo)
{
    1eec:	b530      	push	{r4, r5, lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	0005      	movs	r5, r0
	uint8_t req;

	LORAWAN_GetAttr(DL_ACK_REQD, NULL, &req);
    1ef2:	466b      	mov	r3, sp
    1ef4:	1ddc      	adds	r4, r3, #7
    1ef6:	0022      	movs	r2, r4
    1ef8:	2100      	movs	r1, #0
    1efa:	2038      	movs	r0, #56	; 0x38
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <Parser_LoraGetMacDlAckReqd+0x24>)
    1efe:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[req];
    1f00:	7823      	ldrb	r3, [r4, #0]
    1f02:	009b      	lsls	r3, r3, #2
    1f04:	4a03      	ldr	r2, [pc, #12]	; (1f14 <Parser_LoraGetMacDlAckReqd+0x28>)
    1f06:	589b      	ldr	r3, [r3, r2]
    1f08:	616b      	str	r3, [r5, #20]
	
}
    1f0a:	b003      	add	sp, #12
    1f0c:	bd30      	pop	{r4, r5, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	0000fed1 	.word	0x0000fed1
    1f14:	0001df90 	.word	0x0001df90

00001f18 <Parser_LoraGetMacLastChId>:
void Parser_LoraGetMacLastChId(parserCmdInfo_t* pParserCmdInfo)
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	b082      	sub	sp, #8
    1f1c:	0006      	movs	r6, r0
	uint8_t id;

	LORAWAN_GetAttr(LAST_CH_ID, NULL, &id);
    1f1e:	466b      	mov	r3, sp
    1f20:	1ddd      	adds	r5, r3, #7
    1f22:	002a      	movs	r2, r5
    1f24:	2100      	movs	r1, #0
    1f26:	2039      	movs	r0, #57	; 0x39
    1f28:	4b05      	ldr	r3, [pc, #20]	; (1f40 <Parser_LoraGetMacLastChId+0x28>)
    1f2a:	4798      	blx	r3
	utoa(id, aParserData,  10U);
    1f2c:	4c05      	ldr	r4, [pc, #20]	; (1f44 <Parser_LoraGetMacLastChId+0x2c>)
    1f2e:	7828      	ldrb	r0, [r5, #0]
    1f30:	220a      	movs	r2, #10
    1f32:	0021      	movs	r1, r4
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <Parser_LoraGetMacLastChId+0x30>)
    1f36:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f38:	6174      	str	r4, [r6, #20]
}
    1f3a:	b002      	add	sp, #8
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	0000fed1 	.word	0x0000fed1
    1f44:	20000fac 	.word	0x20000fac
    1f48:	00018f71 	.word	0x00018f71

00001f4c <Parser_LoraGetMacPendingDutyCycle>:
void Parser_LoraGetMacPendingDutyCycle(parserCmdInfo_t* pParserCmdInfo)
{
    1f4c:	b530      	push	{r4, r5, lr}
    1f4e:	b083      	sub	sp, #12
    1f50:	0005      	movs	r5, r0
	uint32_t value;

	LORAWAN_GetAttr(PENDING_DUTY_CYCLE_TIME, NULL, &value);
    1f52:	aa01      	add	r2, sp, #4
    1f54:	2100      	movs	r1, #0
    1f56:	203a      	movs	r0, #58	; 0x3a
    1f58:	4b05      	ldr	r3, [pc, #20]	; (1f70 <Parser_LoraGetMacPendingDutyCycle+0x24>)
    1f5a:	4798      	blx	r3
	utoa(value, aParserData,  10U);
    1f5c:	4c05      	ldr	r4, [pc, #20]	; (1f74 <Parser_LoraGetMacPendingDutyCycle+0x28>)
    1f5e:	220a      	movs	r2, #10
    1f60:	0021      	movs	r1, r4
    1f62:	9801      	ldr	r0, [sp, #4]
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    1f66:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f68:	616c      	str	r4, [r5, #20]
}
    1f6a:	b003      	add	sp, #12
    1f6c:	bd30      	pop	{r4, r5, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	0000fed1 	.word	0x0000fed1
    1f74:	20000fac 	.word	0x20000fac
    1f78:	00018f71 	.word	0x00018f71

00001f7c <Parser_LoraGetMacCnfRetryCnt>:
void Parser_LoraGetMacCnfRetryCnt(parserCmdInfo_t* pParserCmdInfo)
{
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	0006      	movs	r6, r0
	uint8_t ctr;

	LORAWAN_GetAttr(RETRY_COUNTER_CNF, NULL, &ctr);
    1f82:	466b      	mov	r3, sp
    1f84:	1ddd      	adds	r5, r3, #7
    1f86:	002a      	movs	r2, r5
    1f88:	2100      	movs	r1, #0
    1f8a:	203b      	movs	r0, #59	; 0x3b
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <Parser_LoraGetMacCnfRetryCnt+0x28>)
    1f8e:	4798      	blx	r3
	utoa(ctr, aParserData,  10U);
    1f90:	4c05      	ldr	r4, [pc, #20]	; (1fa8 <Parser_LoraGetMacCnfRetryCnt+0x2c>)
    1f92:	7828      	ldrb	r0, [r5, #0]
    1f94:	220a      	movs	r2, #10
    1f96:	0021      	movs	r1, r4
    1f98:	4b04      	ldr	r3, [pc, #16]	; (1fac <Parser_LoraGetMacCnfRetryCnt+0x30>)
    1f9a:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1f9c:	6174      	str	r4, [r6, #20]
}
    1f9e:	b002      	add	sp, #8
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	0000fed1 	.word	0x0000fed1
    1fa8:	20000fac 	.word	0x20000fac
    1fac:	00018f71 	.word	0x00018f71

00001fb0 <Parser_LoraGetMacUncnfRetryCnt>:
void Parser_LoraGetMacUncnfRetryCnt(parserCmdInfo_t* pParserCmdInfo)
{
    1fb0:	b570      	push	{r4, r5, r6, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	0006      	movs	r6, r0
	uint8_t ctr;

	LORAWAN_GetAttr(RETRY_COUNTER_UNCNF, NULL, &ctr);
    1fb6:	466b      	mov	r3, sp
    1fb8:	1ddd      	adds	r5, r3, #7
    1fba:	002a      	movs	r2, r5
    1fbc:	2100      	movs	r1, #0
    1fbe:	203c      	movs	r0, #60	; 0x3c
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <Parser_LoraGetMacUncnfRetryCnt+0x28>)
    1fc2:	4798      	blx	r3
	utoa(ctr, aParserData,  10U);
    1fc4:	4c05      	ldr	r4, [pc, #20]	; (1fdc <Parser_LoraGetMacUncnfRetryCnt+0x2c>)
    1fc6:	7828      	ldrb	r0, [r5, #0]
    1fc8:	220a      	movs	r2, #10
    1fca:	0021      	movs	r1, r4
    1fcc:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <Parser_LoraGetMacUncnfRetryCnt+0x30>)
    1fce:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    1fd0:	6174      	str	r4, [r6, #20]
}
    1fd2:	b002      	add	sp, #8
    1fd4:	bd70      	pop	{r4, r5, r6, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	0000fed1 	.word	0x0000fed1
    1fdc:	20000fac 	.word	0x20000fac
    1fe0:	00018f71 	.word	0x00018f71

00001fe4 <Parser_LoraGetMacNextPayloadSize>:
void Parser_LoraGetMacNextPayloadSize(parserCmdInfo_t* pParserCmdInfo)
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    1fe6:	b082      	sub	sp, #8
    1fe8:	0006      	movs	r6, r0
	uint16_t size;

	LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &size);
    1fea:	466b      	mov	r3, sp
    1fec:	1d9d      	adds	r5, r3, #6
    1fee:	002a      	movs	r2, r5
    1ff0:	2100      	movs	r1, #0
    1ff2:	203d      	movs	r0, #61	; 0x3d
    1ff4:	4b05      	ldr	r3, [pc, #20]	; (200c <STACK_SIZE+0xc>)
    1ff6:	4798      	blx	r3
	utoa(size, aParserData,  10U);
    1ff8:	4c05      	ldr	r4, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffa:	8828      	ldrh	r0, [r5, #0]
    1ffc:	220a      	movs	r2, #10
    1ffe:	0021      	movs	r1, r4
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    2004:	6174      	str	r4, [r6, #20]
}
    2006:	b002      	add	sp, #8
    2008:	bd70      	pop	{r4, r5, r6, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	0000fed1 	.word	0x0000fed1
    2010:	20000fac 	.word	0x20000fac
    2014:	00018f71 	.word	0x00018f71

00002018 <Parser_LoraGetJoindutycycleremaining>:

void Parser_LoraGetJoindutycycleremaining(parserCmdInfo_t* pParserCmdInfo)
{
    2018:	b530      	push	{r4, r5, lr}
    201a:	b083      	sub	sp, #12
    201c:	0005      	movs	r5, r0
	uint32_t remainingtime;
	LORAWAN_GetAttr(PENDING_JOIN_DUTY_CYCLE_TIME,NULL, &remainingtime);
    201e:	aa01      	add	r2, sp, #4
    2020:	2100      	movs	r1, #0
    2022:	203e      	movs	r0, #62	; 0x3e
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <Parser_LoraGetJoindutycycleremaining+0x24>)
    2026:	4798      	blx	r3
	utoa(remainingtime, aParserData, 10U);
    2028:	4c05      	ldr	r4, [pc, #20]	; (2040 <Parser_LoraGetJoindutycycleremaining+0x28>)
    202a:	220a      	movs	r2, #10
    202c:	0021      	movs	r1, r4
    202e:	9801      	ldr	r0, [sp, #4]
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <Parser_LoraGetJoindutycycleremaining+0x2c>)
    2032:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2034:	616c      	str	r4, [r5, #20]
}
    2036:	b003      	add	sp, #12
    2038:	bd30      	pop	{r4, r5, pc}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	0000fed1 	.word	0x0000fed1
    2040:	20000fac 	.word	0x20000fac
    2044:	00018f71 	.word	0x00018f71

00002048 <Parser_LoraSetJoinBackoff>:

void Parser_LoraSetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    2048:	b510      	push	{r4, lr}
    204a:	b082      	sub	sp, #8
    204c:	0004      	movs	r4, r0
	uint8_t validationVal;
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
	bool joinBackoffEnable;

	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    204e:	6800      	ldr	r0, [r0, #0]
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <Parser_LoraSetJoinBackoff+0x34>)
    2052:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    2054:	230a      	movs	r3, #10
	if (validationVal < 2U)
    2056:	2801      	cmp	r0, #1
    2058:	d905      	bls.n	2066 <Parser_LoraSetJoinBackoff+0x1e>
	{
		joinBackoffEnable = validationVal;
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
	}
	
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    205a:	009b      	lsls	r3, r3, #2
    205c:	4a08      	ldr	r2, [pc, #32]	; (2080 <Parser_LoraSetJoinBackoff+0x38>)
    205e:	589b      	ldr	r3, [r3, r2]
    2060:	6163      	str	r3, [r4, #20]
}
    2062:	b002      	add	sp, #8
    2064:	bd10      	pop	{r4, pc}
		joinBackoffEnable = validationVal;
    2066:	466b      	mov	r3, sp
    2068:	1dd9      	adds	r1, r3, #7
    206a:	1e43      	subs	r3, r0, #1
    206c:	4198      	sbcs	r0, r3
    206e:	7008      	strb	r0, [r1, #0]
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    2070:	2034      	movs	r0, #52	; 0x34
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <Parser_LoraSetJoinBackoff+0x3c>)
    2074:	4798      	blx	r3
    2076:	0003      	movs	r3, r0
    2078:	e7ef      	b.n	205a <Parser_LoraSetJoinBackoff+0x12>
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	00002815 	.word	0x00002815
    2080:	0001dfa8 	.word	0x0001dfa8
    2084:	00011e81 	.word	0x00011e81

00002088 <Parser_LoraSetMaxFcntPdsUpdtVal>:

void Parser_LoraSetMaxFcntPdsUpdtVal(parserCmdInfo_t* pParserCmdInfo)
{
    2088:	b510      	push	{r4, lr}
    208a:	b082      	sub	sp, #8
    208c:	0004      	movs	r4, r0
	uint8_t status = LORAWAN_INVALID_PARAMETER;
	uint8_t fcnt;

	// Parameter validation
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    208e:	466b      	mov	r3, sp
    2090:	1dd9      	adds	r1, r3, #7
    2092:	6800      	ldr	r0, [r0, #0]
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    2096:	4798      	blx	r3
	uint8_t status = LORAWAN_INVALID_PARAMETER;
    2098:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    209a:	2800      	cmp	r0, #0
    209c:	d105      	bne.n	20aa <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
	{
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
	}

	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    209e:	009b      	lsls	r3, r3, #2
    20a0:	4a06      	ldr	r2, [pc, #24]	; (20bc <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    20a2:	589b      	ldr	r3, [r3, r2]
    20a4:	6163      	str	r3, [r4, #20]
}
    20a6:	b002      	add	sp, #8
    20a8:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
    20aa:	466b      	mov	r3, sp
    20ac:	1dd9      	adds	r1, r3, #7
    20ae:	203f      	movs	r0, #63	; 0x3f
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    20b2:	4798      	blx	r3
    20b4:	0003      	movs	r3, r0
    20b6:	e7f2      	b.n	209e <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    20b8:	0000266d 	.word	0x0000266d
    20bc:	0001dfa8 	.word	0x0001dfa8
    20c0:	00011e81 	.word	0x00011e81

000020c4 <Parser_LoraGetJoinBackoff>:

void Parser_LoraGetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    20c4:	b510      	push	{r4, lr}
    20c6:	b082      	sub	sp, #8
    20c8:	0004      	movs	r4, r0
	bool joinBackoffEnable ;
	StackRetStatus_t status;

	status = LORAWAN_GetAttr(JOIN_BACKOFF_ENABLE, NULL, &joinBackoffEnable);
    20ca:	466b      	mov	r3, sp
    20cc:	1dda      	adds	r2, r3, #7
    20ce:	2100      	movs	r1, #0
    20d0:	2034      	movs	r0, #52	; 0x34
    20d2:	4b09      	ldr	r3, [pc, #36]	; (20f8 <Parser_LoraGetJoinBackoff+0x34>)
    20d4:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    20d6:	2808      	cmp	r0, #8
    20d8:	d005      	beq.n	20e6 <Parser_LoraGetJoinBackoff+0x22>
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
	}
	else
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    20da:	0080      	lsls	r0, r0, #2
    20dc:	4b07      	ldr	r3, [pc, #28]	; (20fc <Parser_LoraGetJoinBackoff+0x38>)
    20de:	58c3      	ldr	r3, [r0, r3]
    20e0:	6163      	str	r3, [r4, #20]
	}
    20e2:	b002      	add	sp, #8
    20e4:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
    20e6:	466b      	mov	r3, sp
    20e8:	3307      	adds	r3, #7
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	009b      	lsls	r3, r3, #2
    20ee:	4a04      	ldr	r2, [pc, #16]	; (2100 <Parser_LoraGetJoinBackoff+0x3c>)
    20f0:	589b      	ldr	r3, [r3, r2]
    20f2:	6163      	str	r3, [r4, #20]
    20f4:	e7f5      	b.n	20e2 <Parser_LoraGetJoinBackoff+0x1e>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0000fed1 	.word	0x0000fed1
    20fc:	0001dfa8 	.word	0x0001dfa8
    2100:	0001df88 	.word	0x0001df88

00002104 <parserSleepCallback>:
/*********************************************************************//**
\brief	Callback function of parser to power manager.
\param[in]	sleptDuration - duration for which sleep is done
*************************************************************************/
static void parserSleepCallback(uint32_t sleptDuration)
{
    2104:	b510      	push	{r4, lr}
    2106:	0004      	movs	r4, r0
	HAL_Radio_resources_init();
    2108:	4b04      	ldr	r3, [pc, #16]	; (211c <parserSleepCallback+0x18>)
    210a:	4798      	blx	r3
	sio2host_init();
    210c:	4b04      	ldr	r3, [pc, #16]	; (2120 <parserSleepCallback+0x1c>)
    210e:	4798      	blx	r3
	printf("\nsleep_ok %ld ms\n\r", sleptDuration);
    2110:	0021      	movs	r1, r4
    2112:	4804      	ldr	r0, [pc, #16]	; (2124 <parserSleepCallback+0x20>)
    2114:	4b04      	ldr	r3, [pc, #16]	; (2128 <parserSleepCallback+0x24>)
    2116:	4798      	blx	r3
}
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	000063c1 	.word	0x000063c1
    2120:	00005e61 	.word	0x00005e61
    2124:	0001e154 	.word	0x0001e154
    2128:	0001882d 	.word	0x0001882d

0000212c <extint_callback>:
{
    212c:	b510      	push	{r4, lr}
	PMM_Wakeup();
    212e:	4b09      	ldr	r3, [pc, #36]	; (2154 <extint_callback+0x28>)
    2130:	4798      	blx	r3
	if(SleepEnabled)
    2132:	4b09      	ldr	r3, [pc, #36]	; (2158 <extint_callback+0x2c>)
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	2b00      	cmp	r3, #0
    2138:	d100      	bne.n	213c <extint_callback+0x10>
}
    213a:	bd10      	pop	{r4, pc}
	    HAL_Radio_resources_init();
    213c:	4b07      	ldr	r3, [pc, #28]	; (215c <extint_callback+0x30>)
    213e:	4798      	blx	r3
		sio2host_init();
    2140:	4b07      	ldr	r3, [pc, #28]	; (2160 <extint_callback+0x34>)
    2142:	4798      	blx	r3
		printf("\nExiting Sleep\n\r");
    2144:	4807      	ldr	r0, [pc, #28]	; (2164 <extint_callback+0x38>)
    2146:	4b08      	ldr	r3, [pc, #32]	; (2168 <extint_callback+0x3c>)
    2148:	4798      	blx	r3
		SleepEnabled = false;
    214a:	2200      	movs	r2, #0
    214c:	4b02      	ldr	r3, [pc, #8]	; (2158 <extint_callback+0x2c>)
    214e:	701a      	strb	r2, [r3, #0]
}
    2150:	e7f3      	b.n	213a <extint_callback+0xe>
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	000066f9 	.word	0x000066f9
    2158:	200009e4 	.word	0x200009e4
    215c:	000063c1 	.word	0x000063c1
    2160:	00005e61 	.word	0x00005e61
    2164:	0001e134 	.word	0x0001e134
    2168:	0001882d 	.word	0x0001882d

0000216c <Parser_SystemGetHwEui>:
{
    216c:	b530      	push	{r4, r5, lr}
    216e:	b083      	sub	sp, #12
    2170:	0005      	movs	r5, r0
    System_GetExternalEui(aDevEui);
    2172:	4668      	mov	r0, sp
    2174:	4b05      	ldr	r3, [pc, #20]	; (218c <Parser_SystemGetHwEui+0x20>)
    2176:	4798      	blx	r3
    Parser_IntArrayToHexAscii(8, aDevEui, aParserData);
    2178:	4c05      	ldr	r4, [pc, #20]	; (2190 <Parser_SystemGetHwEui+0x24>)
    217a:	0022      	movs	r2, r4
    217c:	4669      	mov	r1, sp
    217e:	2008      	movs	r0, #8
    2180:	4b04      	ldr	r3, [pc, #16]	; (2194 <Parser_SystemGetHwEui+0x28>)
    2182:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2184:	616c      	str	r4, [r5, #20]
}
    2186:	b003      	add	sp, #12
    2188:	bd30      	pop	{r4, r5, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	000066bd 	.word	0x000066bd
    2190:	20000fac 	.word	0x20000fac
    2194:	0000260d 	.word	0x0000260d

00002198 <Parser_SystemGetVer>:
{
    2198:	b570      	push	{r4, r5, r6, lr}
    219a:	0005      	movs	r5, r0
	Parser_GetSwVersion(aParserData);
    219c:	4c02      	ldr	r4, [pc, #8]	; (21a8 <Parser_SystemGetVer+0x10>)
    219e:	0020      	movs	r0, r4
    21a0:	4b02      	ldr	r3, [pc, #8]	; (21ac <Parser_SystemGetVer+0x14>)
    21a2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    21a4:	616c      	str	r4, [r5, #20]
}
    21a6:	bd70      	pop	{r4, r5, r6, pc}
    21a8:	20000fac 	.word	0x20000fac
    21ac:	000003d5 	.word	0x000003d5

000021b0 <Parser_SystemGetCustomParam>:
{
    21b0:	b570      	push	{r4, r5, r6, lr}
    21b2:	0005      	movs	r5, r0
	PDS_RESTORE(PDS_APP_CUSTOMPARAMETER) ;
    21b4:	2100      	movs	r1, #0
    21b6:	200c      	movs	r0, #12
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <Parser_SystemGetCustomParam+0x20>)
    21ba:	4798      	blx	r3
	utoa(pdsAppCustomParameter, aParserData,  10U);
    21bc:	4c05      	ldr	r4, [pc, #20]	; (21d4 <Parser_SystemGetCustomParam+0x24>)
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <Parser_SystemGetCustomParam+0x28>)
    21c0:	6818      	ldr	r0, [r3, #0]
    21c2:	220a      	movs	r2, #10
    21c4:	0021      	movs	r1, r4
    21c6:	4b05      	ldr	r3, [pc, #20]	; (21dc <Parser_SystemGetCustomParam+0x2c>)
    21c8:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    21ca:	616c      	str	r4, [r5, #20]
}
    21cc:	bd70      	pop	{r4, r5, r6, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	0000c8b1 	.word	0x0000c8b1
    21d4:	20000fac 	.word	0x20000fac
    21d8:	200011c0 	.word	0x200011c0
    21dc:	00018f71 	.word	0x00018f71

000021e0 <Parser_SystemSetCustomParam>:
{
    21e0:	b510      	push	{r4, lr}
    21e2:	0004      	movs	r4, r0
	pdsAppCustomParameter = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10);
    21e4:	220a      	movs	r2, #10
    21e6:	2100      	movs	r1, #0
    21e8:	6800      	ldr	r0, [r0, #0]
    21ea:	4b0e      	ldr	r3, [pc, #56]	; (2224 <Parser_SystemSetCustomParam+0x44>)
    21ec:	4798      	blx	r3
    21ee:	4b0e      	ldr	r3, [pc, #56]	; (2228 <Parser_SystemSetCustomParam+0x48>)
    21f0:	6018      	str	r0, [r3, #0]
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    21f2:	2201      	movs	r2, #1
    21f4:	4252      	negs	r2, r2
    21f6:	210a      	movs	r1, #10
    21f8:	6820      	ldr	r0, [r4, #0]
    21fa:	4b0c      	ldr	r3, [pc, #48]	; (222c <Parser_SystemSetCustomParam+0x4c>)
    21fc:	4798      	blx	r3
	StackRetStatus_t status = INVALID_PARAM_IDX ;
    21fe:	2301      	movs	r3, #1
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2200:	2800      	cmp	r0, #0
    2202:	d104      	bne.n	220e <Parser_SystemSetCustomParam+0x2e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserSysStatus[status] ;
    2204:	009b      	lsls	r3, r3, #2
    2206:	4a0a      	ldr	r2, [pc, #40]	; (2230 <Parser_SystemSetCustomParam+0x50>)
    2208:	589b      	ldr	r3, [r3, r2]
    220a:	6163      	str	r3, [r4, #20]
}
    220c:	bd10      	pop	{r4, pc}
		printf("\r\n%ld\r\n", pdsAppCustomParameter) ;
    220e:	4b06      	ldr	r3, [pc, #24]	; (2228 <Parser_SystemSetCustomParam+0x48>)
    2210:	6819      	ldr	r1, [r3, #0]
    2212:	4808      	ldr	r0, [pc, #32]	; (2234 <Parser_SystemSetCustomParam+0x54>)
    2214:	4b08      	ldr	r3, [pc, #32]	; (2238 <Parser_SystemSetCustomParam+0x58>)
    2216:	4798      	blx	r3
		PDS_STORE(PDS_APP_CUSTOMPARAMETER) ;
    2218:	2100      	movs	r1, #0
    221a:	200c      	movs	r0, #12
    221c:	4b07      	ldr	r3, [pc, #28]	; (223c <Parser_SystemSetCustomParam+0x5c>)
    221e:	4798      	blx	r3
		status = OK_STATUS_IDX ;
    2220:	2300      	movs	r3, #0
    2222:	e7ef      	b.n	2204 <Parser_SystemSetCustomParam+0x24>
    2224:	00018eb9 	.word	0x00018eb9
    2228:	200011c0 	.word	0x200011c0
    222c:	00002741 	.word	0x00002741
    2230:	0001e148 	.word	0x0001e148
    2234:	0001e118 	.word	0x0001e118
    2238:	0001882d 	.word	0x0001882d
    223c:	0000c84d 	.word	0x0000c84d

00002240 <Parser_SystemReboot>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2240:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2244:	4a03      	ldr	r2, [pc, #12]	; (2254 <Parser_SystemReboot+0x14>)
    2246:	4b04      	ldr	r3, [pc, #16]	; (2258 <Parser_SystemReboot+0x18>)
    2248:	60da      	str	r2, [r3, #12]
    224a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	e7fd      	b.n	224e <Parser_SystemReboot+0xe>
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	05fa0004 	.word	0x05fa0004
    2258:	e000ed00 	.word	0xe000ed00

0000225c <Parser_SystemFactReset>:
{
    225c:	b510      	push	{r4, lr}
	PDS_DeleteAll();
    225e:	4b05      	ldr	r3, [pc, #20]	; (2274 <Parser_SystemFactReset+0x18>)
    2260:	4798      	blx	r3
    2262:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2266:	4a04      	ldr	r2, [pc, #16]	; (2278 <Parser_SystemFactReset+0x1c>)
    2268:	4b04      	ldr	r3, [pc, #16]	; (227c <Parser_SystemFactReset+0x20>)
    226a:	60da      	str	r2, [r3, #12]
    226c:	f3bf 8f4f 	dsb	sy
    __NOP();
    2270:	46c0      	nop			; (mov r8, r8)
    2272:	e7fd      	b.n	2270 <Parser_SystemFactReset+0x14>
    2274:	0000c9c5 	.word	0x0000c9c5
    2278:	05fa0004 	.word	0x05fa0004
    227c:	e000ed00 	.word	0xe000ed00

00002280 <Parser_SystemSleep>:
{
    2280:	b530      	push	{r4, r5, lr}
    2282:	b085      	sub	sp, #20
    2284:	0004      	movs	r4, r0
    PMM_SleepReq_t sleepRequest = {
    2286:	ab01      	add	r3, sp, #4
    2288:	2200      	movs	r2, #0
    228a:	9201      	str	r2, [sp, #4]
    228c:	21ff      	movs	r1, #255	; 0xff
    228e:	7119      	strb	r1, [r3, #4]
    2290:	9203      	str	r2, [sp, #12]
    uint32_t sleepDuration = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2292:	320a      	adds	r2, #10
    2294:	2100      	movs	r1, #0
    2296:	6840      	ldr	r0, [r0, #4]
    2298:	4b24      	ldr	r3, [pc, #144]	; (232c <Parser_SystemSleep+0xac>)
    229a:	4798      	blx	r3
    229c:	0005      	movs	r5, r0
		if(0 == stricmp(pParserCmdInfo->pParam1, gapParseSleepMode[iCount]))
    229e:	4924      	ldr	r1, [pc, #144]	; (2330 <Parser_SystemSleep+0xb0>)
    22a0:	6820      	ldr	r0, [r4, #0]
    22a2:	4b24      	ldr	r3, [pc, #144]	; (2334 <Parser_SystemSleep+0xb4>)
    22a4:	4798      	blx	r3
    22a6:	2800      	cmp	r0, #0
    22a8:	d009      	beq.n	22be <Parser_SystemSleep+0x3e>
    22aa:	4923      	ldr	r1, [pc, #140]	; (2338 <Parser_SystemSleep+0xb8>)
    22ac:	6820      	ldr	r0, [r4, #0]
    22ae:	4b21      	ldr	r3, [pc, #132]	; (2334 <Parser_SystemSleep+0xb4>)
    22b0:	4798      	blx	r3
    22b2:	2800      	cmp	r0, #0
    22b4:	d038      	beq.n	2328 <Parser_SystemSleep+0xa8>
        pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[INVALID_PARAM_IDX];
    22b6:	4b21      	ldr	r3, [pc, #132]	; (233c <Parser_SystemSleep+0xbc>)
    22b8:	6163      	str	r3, [r4, #20]
}
    22ba:	b005      	add	sp, #20
    22bc:	bd30      	pop	{r4, r5, pc}
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    22be:	2200      	movs	r2, #0
    if ( (1 /* invalid range */ < sleepModeValue) || \
    22c0:	491f      	ldr	r1, [pc, #124]	; (2340 <Parser_SystemSleep+0xc0>)
    22c2:	4b20      	ldr	r3, [pc, #128]	; (2344 <Parser_SystemSleep+0xc4>)
    22c4:	18eb      	adds	r3, r5, r3
    22c6:	428b      	cmp	r3, r1
    22c8:	d8f5      	bhi.n	22b6 <Parser_SystemSleep+0x36>
        sleepRequest.sleepTimeMs = sleepDuration;
    22ca:	9501      	str	r5, [sp, #4]
        sleepRequest.pmmWakeupCallback = parserSleepCallback;
    22cc:	4b1e      	ldr	r3, [pc, #120]	; (2348 <Parser_SystemSleep+0xc8>)
    22ce:	9303      	str	r3, [sp, #12]
        sleepRequest.sleep_mode = ( 0 /* standby */ == sleepModeValue ) ? SLEEP_MODE_STANDBY : SLEEP_MODE_BACKUP;
    22d0:	0013      	movs	r3, r2
    22d2:	1e5a      	subs	r2, r3, #1
    22d4:	4193      	sbcs	r3, r2
    22d6:	3301      	adds	r3, #1
    22d8:	aa01      	add	r2, sp, #4
    22da:	7113      	strb	r3, [r2, #4]
    SleepEnabled = true;
    22dc:	2201      	movs	r2, #1
    22de:	4b1b      	ldr	r3, [pc, #108]	; (234c <Parser_SystemSleep+0xcc>)
    22e0:	701a      	strb	r2, [r3, #0]
    if ( LORAWAN_ReadyToSleep( deviceResetsForWakeup ) )
    22e2:	4b1b      	ldr	r3, [pc, #108]	; (2350 <Parser_SystemSleep+0xd0>)
    22e4:	7818      	ldrb	r0, [r3, #0]
    22e6:	4b1b      	ldr	r3, [pc, #108]	; (2354 <Parser_SystemSleep+0xd4>)
    22e8:	4798      	blx	r3
    22ea:	2800      	cmp	r0, #0
    22ec:	d0e5      	beq.n	22ba <Parser_SystemSleep+0x3a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    22ee:	2300      	movs	r3, #0
    22f0:	466a      	mov	r2, sp
    22f2:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    22f4:	3301      	adds	r3, #1
    22f6:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    22f8:	7093      	strb	r3, [r2, #2]
#ifdef HOST_SERCOM_PAD0_PIN
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    22fa:	4669      	mov	r1, sp
    22fc:	2004      	movs	r0, #4
    22fe:	4d16      	ldr	r5, [pc, #88]	; (2358 <Parser_SystemSleep+0xd8>)
    2300:	47a8      	blx	r5
#endif
#ifdef HOST_SERCOM_PAD1_PIN
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    2302:	4669      	mov	r1, sp
    2304:	2005      	movs	r0, #5
    2306:	47a8      	blx	r5
#endif
	/* Disable UART module */
	sio2host_deinit();
    2308:	4b14      	ldr	r3, [pc, #80]	; (235c <Parser_SystemSleep+0xdc>)
    230a:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    230c:	4b14      	ldr	r3, [pc, #80]	; (2360 <Parser_SystemSleep+0xe0>)
    230e:	4798      	blx	r3
        if ( PMM_SLEEP_REQ_DENIED == PMM_Sleep( &sleepRequest ) )
    2310:	a801      	add	r0, sp, #4
    2312:	4b14      	ldr	r3, [pc, #80]	; (2364 <Parser_SystemSleep+0xe4>)
    2314:	4798      	blx	r3
    2316:	2800      	cmp	r0, #0
    2318:	d1cf      	bne.n	22ba <Parser_SystemSleep+0x3a>
            HAL_Radio_resources_init();
    231a:	4b13      	ldr	r3, [pc, #76]	; (2368 <Parser_SystemSleep+0xe8>)
    231c:	4798      	blx	r3
            sio2host_init();
    231e:	4b13      	ldr	r3, [pc, #76]	; (236c <Parser_SystemSleep+0xec>)
    2320:	4798      	blx	r3
            pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[ERR_STATUS_IDX];
    2322:	4b13      	ldr	r3, [pc, #76]	; (2370 <Parser_SystemSleep+0xf0>)
    2324:	6163      	str	r3, [r4, #20]
    2326:	e7c8      	b.n	22ba <Parser_SystemSleep+0x3a>
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    2328:	2201      	movs	r2, #1
    232a:	e7c9      	b.n	22c0 <Parser_SystemSleep+0x40>
    232c:	00018eb9 	.word	0x00018eb9
    2330:	0001e120 	.word	0x0001e120
    2334:	00002785 	.word	0x00002785
    2338:	0001e128 	.word	0x0001e128
    233c:	0001d384 	.word	0x0001d384
    2340:	07cebbc8 	.word	0x07cebbc8
    2344:	fffffc18 	.word	0xfffffc18
    2348:	00002105 	.word	0x00002105
    234c:	200009e4 	.word	0x200009e4
    2350:	200009e5 	.word	0x200009e5
    2354:	00012a69 	.word	0x00012a69
    2358:	00003301 	.word	0x00003301
    235c:	00005fad 	.word	0x00005fad
    2360:	000063e5 	.word	0x000063e5
    2364:	0000677d 	.word	0x0000677d
    2368:	000063c1 	.word	0x000063c1
    236c:	00005e61 	.word	0x00005e61
    2370:	0001e130 	.word	0x0001e130

00002374 <configure_extint>:
{
    2374:	b510      	push	{r4, lr}
    2376:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&eint_chan_conf);
    2378:	ac01      	add	r4, sp, #4
    237a:	0020      	movs	r0, r4
    237c:	4b07      	ldr	r3, [pc, #28]	; (239c <configure_extint+0x28>)
    237e:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    2380:	231c      	movs	r3, #28
    2382:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    2384:	2300      	movs	r3, #0
    2386:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    2388:	3302      	adds	r3, #2
    238a:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    238c:	3b01      	subs	r3, #1
    238e:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    2390:	0021      	movs	r1, r4
    2392:	2008      	movs	r0, #8
    2394:	4b02      	ldr	r3, [pc, #8]	; (23a0 <configure_extint+0x2c>)
    2396:	4798      	blx	r3
}
    2398:	b004      	add	sp, #16
    239a:	bd10      	pop	{r4, pc}
    239c:	00002e99 	.word	0x00002e99
    23a0:	00002ead 	.word	0x00002ead

000023a4 <configure_eic_callback>:
{
    23a4:	b510      	push	{r4, lr}
	extint_register_callback(
    23a6:	2200      	movs	r2, #0
    23a8:	2108      	movs	r1, #8
    23aa:	4804      	ldr	r0, [pc, #16]	; (23bc <configure_eic_callback+0x18>)
    23ac:	4b04      	ldr	r3, [pc, #16]	; (23c0 <configure_eic_callback+0x1c>)
    23ae:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    23b0:	2100      	movs	r1, #0
    23b2:	2008      	movs	r0, #8
    23b4:	4b03      	ldr	r3, [pc, #12]	; (23c4 <configure_eic_callback+0x20>)
    23b6:	4798      	blx	r3
}
    23b8:	bd10      	pop	{r4, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	0000212d 	.word	0x0000212d
    23c0:	00002d59 	.word	0x00002d59
    23c4:	00002d85 	.word	0x00002d85

000023c8 <Parser_RxClearBuffer>:
    "invalid_param",
    "err"
};

void Parser_RxClearBuffer(void)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    mRxParserCmd.bCmdStatus = 0;
    23ca:	4c0b      	ldr	r4, [pc, #44]	; (23f8 <Parser_RxClearBuffer+0x30>)
    23cc:	2300      	movs	r3, #0
    23ce:	4a0b      	ldr	r2, [pc, #44]	; (23fc <Parser_RxClearBuffer+0x34>)
    23d0:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtWordIdx = 0;
    23d2:	4a0b      	ldr	r2, [pc, #44]	; (2400 <Parser_RxClearBuffer+0x38>)
    23d4:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtCmdPos = 0;
    23d6:	3201      	adds	r2, #1
    23d8:	52a3      	strh	r3, [r4, r2]
    mRxParserCmd.crtWordPos = 0;
    23da:	4a0a      	ldr	r2, [pc, #40]	; (2404 <Parser_RxClearBuffer+0x3c>)
    23dc:	52a3      	strh	r3, [r4, r2]
    
    memset((_PTR)mRxParserCmd.wordLen, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    23de:	4b0a      	ldr	r3, [pc, #40]	; (2408 <Parser_RxClearBuffer+0x40>)
    23e0:	18e0      	adds	r0, r4, r3
    23e2:	2214      	movs	r2, #20
    23e4:	2100      	movs	r1, #0
    23e6:	4d09      	ldr	r5, [pc, #36]	; (240c <Parser_RxClearBuffer+0x44>)
    23e8:	47a8      	blx	r5
    memset((_PTR)mRxParserCmd.wordStartPos, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    23ea:	4b09      	ldr	r3, [pc, #36]	; (2410 <Parser_RxClearBuffer+0x48>)
    23ec:	18e0      	adds	r0, r4, r3
    23ee:	2214      	movs	r2, #20
    23f0:	2100      	movs	r1, #0
    23f2:	47a8      	blx	r5
}
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	20001dd8 	.word	0x20001dd8
    23fc:	0000024e 	.word	0x0000024e
    2400:	0000024f 	.word	0x0000024f
    2404:	00000252 	.word	0x00000252
    2408:	00000226 	.word	0x00000226
    240c:	00018779 	.word	0x00018779
    2410:	0000023a 	.word	0x0000023a

00002414 <Parser_TxAddReply>:
    }

}

void Parser_TxAddReply(char* pReplyStr, uint16_t replyStrLen)
{
    2414:	b570      	push	{r4, r5, r6, lr}
    2416:	0005      	movs	r5, r0
    2418:	1e0c      	subs	r4, r1, #0
    uint16_t iCtr = replyStrLen;
	
	/* Check if the length of UART String is can be fit in SIO2HOST TX Buffer */
	while(0 != iCtr)
    241a:	d00f      	beq.n	243c <Parser_TxAddReply+0x28>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
			iCtr = 0;
		}
		else
		{
			sio2host_tx((uint8_t *)pReplyStr, BYTE_VALUE_LEN);
    241c:	4e0a      	ldr	r6, [pc, #40]	; (2448 <Parser_TxAddReply+0x34>)
    241e:	e007      	b.n	2430 <Parser_TxAddReply+0x1c>
    2420:	21ff      	movs	r1, #255	; 0xff
    2422:	0028      	movs	r0, r5
    2424:	47b0      	blx	r6
			iCtr -= BYTE_VALUE_LEN;
    2426:	3cff      	subs	r4, #255	; 0xff
    2428:	b2a4      	uxth	r4, r4
			pReplyStr = pReplyStr + BYTE_VALUE_LEN;
    242a:	35ff      	adds	r5, #255	; 0xff
	while(0 != iCtr)
    242c:	2c00      	cmp	r4, #0
    242e:	d005      	beq.n	243c <Parser_TxAddReply+0x28>
		if(BYTE_VALUE_LEN >= iCtr)
    2430:	2cff      	cmp	r4, #255	; 0xff
    2432:	d8f5      	bhi.n	2420 <Parser_TxAddReply+0xc>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
    2434:	b2e1      	uxtb	r1, r4
    2436:	0028      	movs	r0, r5
    2438:	4b03      	ldr	r3, [pc, #12]	; (2448 <Parser_TxAddReply+0x34>)
    243a:	4798      	blx	r3
		}
	}
	
    /* Put the delimiter string in UART */
	sio2host_tx((uint8_t *)gpParserLineDelim,strlen(gpParserLineDelim));
    243c:	2102      	movs	r1, #2
    243e:	4803      	ldr	r0, [pc, #12]	; (244c <Parser_TxAddReply+0x38>)
    2440:	4b01      	ldr	r3, [pc, #4]	; (2448 <Parser_TxAddReply+0x34>)
    2442:	4798      	blx	r3
	
}
    2444:	bd70      	pop	{r4, r5, r6, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	00006019 	.word	0x00006019
    244c:	0001e168 	.word	0x0001e168

00002450 <Parser_RxAddChar>:
{
    2450:	b570      	push	{r4, r5, r6, lr}
    if(rxChar == '\b')
    2452:	2808      	cmp	r0, #8
    2454:	d047      	beq.n	24e6 <Parser_RxAddChar+0x96>
    if(mRxParserCmd.crtCmdPos < PARSER_DEF_CMD_MAX_LEN - 1)
    2456:	2394      	movs	r3, #148	; 0x94
    2458:	009b      	lsls	r3, r3, #2
    245a:	4a58      	ldr	r2, [pc, #352]	; (25bc <Parser_RxAddChar+0x16c>)
    245c:	5ad3      	ldrh	r3, [r2, r3]
    245e:	b29b      	uxth	r3, r3
    2460:	2289      	movs	r2, #137	; 0x89
    2462:	0092      	lsls	r2, r2, #2
    2464:	4293      	cmp	r3, r2
    2466:	d900      	bls.n	246a <Parser_RxAddChar+0x1a>
    2468:	e0a1      	b.n	25ae <Parser_RxAddChar+0x15e>
        if(rxChar == ' ')
    246a:	2820      	cmp	r0, #32
    246c:	d100      	bne.n	2470 <Parser_RxAddChar+0x20>
    246e:	e073      	b.n	2558 <Parser_RxAddChar+0x108>
            mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = rxChar;
    2470:	4b52      	ldr	r3, [pc, #328]	; (25bc <Parser_RxAddChar+0x16c>)
    2472:	2194      	movs	r1, #148	; 0x94
    2474:	0089      	lsls	r1, r1, #2
    2476:	5a5a      	ldrh	r2, [r3, r1]
    2478:	b292      	uxth	r2, r2
    247a:	1c54      	adds	r4, r2, #1
    247c:	b2a4      	uxth	r4, r4
    247e:	525c      	strh	r4, [r3, r1]
    2480:	5498      	strb	r0, [r3, r2]
            mRxParserCmd.crtWordPos ++;
    2482:	484f      	ldr	r0, [pc, #316]	; (25c0 <Parser_RxAddChar+0x170>)
    2484:	5a1a      	ldrh	r2, [r3, r0]
    2486:	3201      	adds	r2, #1
    2488:	b292      	uxth	r2, r2
    248a:	521a      	strh	r2, [r3, r0]
            if(mRxParserCmd.crtCmdPos >= strlen(gpParserLineDelim))
    248c:	5a5b      	ldrh	r3, [r3, r1]
    248e:	b29b      	uxth	r3, r3
    2490:	2b01      	cmp	r3, #1
    2492:	d959      	bls.n	2548 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    2494:	4a49      	ldr	r2, [pc, #292]	; (25bc <Parser_RxAddChar+0x16c>)
    2496:	5a53      	ldrh	r3, [r2, r1]
    2498:	3b02      	subs	r3, #2
    249a:	5cd3      	ldrb	r3, [r2, r3]
                for(iCount = strlen(gpParserLineDelim); (iCount > 0U) && bIsEndLine; iCount --)
    249c:	2b0d      	cmp	r3, #13
    249e:	d153      	bne.n	2548 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    24a0:	5a53      	ldrh	r3, [r2, r1]
    24a2:	3b01      	subs	r3, #1
    24a4:	5cd3      	ldrb	r3, [r2, r3]
            if(bIsEndLine)
    24a6:	2b0a      	cmp	r3, #10
    24a8:	d14e      	bne.n	2548 <Parser_RxAddChar+0xf8>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - strlen(gpParserLineDelim)] = '\0';
    24aa:	0013      	movs	r3, r2
    24ac:	000c      	movs	r4, r1
    24ae:	5a52      	ldrh	r2, [r2, r1]
    24b0:	3a02      	subs	r2, #2
    24b2:	2100      	movs	r1, #0
    24b4:	5499      	strb	r1, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos - strlen(gpParserLineDelim);
    24b6:	4d43      	ldr	r5, [pc, #268]	; (25c4 <Parser_RxAddChar+0x174>)
    24b8:	5d5a      	ldrb	r2, [r3, r5]
    24ba:	5a19      	ldrh	r1, [r3, r0]
    24bc:	3902      	subs	r1, #2
    24be:	b289      	uxth	r1, r1
    24c0:	3211      	adds	r2, #17
    24c2:	32ff      	adds	r2, #255	; 0xff
    24c4:	0052      	lsls	r2, r2, #1
    24c6:	189a      	adds	r2, r3, r2
    24c8:	80d1      	strh	r1, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos;
    24ca:	5d5a      	ldrb	r2, [r3, r5]
    24cc:	5b19      	ldrh	r1, [r3, r4]
    24ce:	5a18      	ldrh	r0, [r3, r0]
    24d0:	1a09      	subs	r1, r1, r0
    24d2:	b289      	uxth	r1, r1
    24d4:	321d      	adds	r2, #29
    24d6:	32ff      	adds	r2, #255	; 0xff
    24d8:	0052      	lsls	r2, r2, #1
    24da:	189a      	adds	r2, r3, r2
    24dc:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.bCmdStatus = 1;
    24de:	2101      	movs	r1, #1
    24e0:	4a39      	ldr	r2, [pc, #228]	; (25c8 <Parser_RxAddChar+0x178>)
    24e2:	5499      	strb	r1, [r3, r2]
    24e4:	e030      	b.n	2548 <Parser_RxAddChar+0xf8>
        if(mRxParserCmd.crtCmdPos > 0U)
    24e6:	2394      	movs	r3, #148	; 0x94
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	4a34      	ldr	r2, [pc, #208]	; (25bc <Parser_RxAddChar+0x16c>)
    24ec:	5ad3      	ldrh	r3, [r2, r3]
    24ee:	b29b      	uxth	r3, r3
    24f0:	2b00      	cmp	r3, #0
    24f2:	d029      	beq.n	2548 <Parser_RxAddChar+0xf8>
            if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - 1] == '\0')
    24f4:	2394      	movs	r3, #148	; 0x94
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	5ad3      	ldrh	r3, [r2, r3]
    24fa:	3b01      	subs	r3, #1
    24fc:	5cd3      	ldrb	r3, [r2, r3]
    24fe:	2b00      	cmp	r3, #0
    2500:	d123      	bne.n	254a <Parser_RxAddChar+0xfa>
                mRxParserCmd.crtWordIdx --;
    2502:	0013      	movs	r3, r2
    2504:	492f      	ldr	r1, [pc, #188]	; (25c4 <Parser_RxAddChar+0x174>)
    2506:	5c52      	ldrb	r2, [r2, r1]
    2508:	3a01      	subs	r2, #1
    250a:	b2d2      	uxtb	r2, r2
    250c:	545a      	strb	r2, [r3, r1]
                mRxParserCmd.crtWordPos = mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx];
    250e:	5c5a      	ldrb	r2, [r3, r1]
    2510:	3211      	adds	r2, #17
    2512:	32ff      	adds	r2, #255	; 0xff
    2514:	0052      	lsls	r2, r2, #1
    2516:	189a      	adds	r2, r3, r2
    2518:	88d2      	ldrh	r2, [r2, #6]
    251a:	b292      	uxth	r2, r2
    251c:	4828      	ldr	r0, [pc, #160]	; (25c0 <Parser_RxAddChar+0x170>)
    251e:	521a      	strh	r2, [r3, r0]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = 0U;
    2520:	5c5a      	ldrb	r2, [r3, r1]
    2522:	3211      	adds	r2, #17
    2524:	32ff      	adds	r2, #255	; 0xff
    2526:	0052      	lsls	r2, r2, #1
    2528:	189a      	adds	r2, r3, r2
    252a:	2000      	movs	r0, #0
    252c:	80d0      	strh	r0, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = 0U;
    252e:	5c5a      	ldrb	r2, [r3, r1]
    2530:	321d      	adds	r2, #29
    2532:	32ff      	adds	r2, #255	; 0xff
    2534:	0052      	lsls	r2, r2, #1
    2536:	189b      	adds	r3, r3, r2
    2538:	8058      	strh	r0, [r3, #2]
            mRxParserCmd.crtCmdPos --;
    253a:	4920      	ldr	r1, [pc, #128]	; (25bc <Parser_RxAddChar+0x16c>)
    253c:	2294      	movs	r2, #148	; 0x94
    253e:	0092      	lsls	r2, r2, #2
    2540:	5a8b      	ldrh	r3, [r1, r2]
    2542:	3b01      	subs	r3, #1
    2544:	b29b      	uxth	r3, r3
    2546:	528b      	strh	r3, [r1, r2]
}
    2548:	bd70      	pop	{r4, r5, r6, pc}
                mRxParserCmd.crtWordPos --;
    254a:	491c      	ldr	r1, [pc, #112]	; (25bc <Parser_RxAddChar+0x16c>)
    254c:	4a1c      	ldr	r2, [pc, #112]	; (25c0 <Parser_RxAddChar+0x170>)
    254e:	5a8b      	ldrh	r3, [r1, r2]
    2550:	3b01      	subs	r3, #1
    2552:	b29b      	uxth	r3, r3
    2554:	528b      	strh	r3, [r1, r2]
    2556:	e7f0      	b.n	253a <Parser_RxAddChar+0xea>
            if(mRxParserCmd.crtWordIdx < PARSER_DEF_CMD_MAX_IDX - 1)
    2558:	4b1a      	ldr	r3, [pc, #104]	; (25c4 <Parser_RxAddChar+0x174>)
    255a:	4a18      	ldr	r2, [pc, #96]	; (25bc <Parser_RxAddChar+0x16c>)
    255c:	5cd3      	ldrb	r3, [r2, r3]
    255e:	b2db      	uxtb	r3, r3
    2560:	2b08      	cmp	r3, #8
    2562:	d824      	bhi.n	25ae <Parser_RxAddChar+0x15e>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = '\0';
    2564:	0013      	movs	r3, r2
    2566:	2194      	movs	r1, #148	; 0x94
    2568:	0089      	lsls	r1, r1, #2
    256a:	5a52      	ldrh	r2, [r2, r1]
    256c:	b292      	uxth	r2, r2
    256e:	1c50      	adds	r0, r2, #1
    2570:	b280      	uxth	r0, r0
    2572:	5258      	strh	r0, [r3, r1]
    2574:	2500      	movs	r5, #0
    2576:	549d      	strb	r5, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos;
    2578:	4812      	ldr	r0, [pc, #72]	; (25c4 <Parser_RxAddChar+0x174>)
    257a:	5c1a      	ldrb	r2, [r3, r0]
    257c:	4c10      	ldr	r4, [pc, #64]	; (25c0 <Parser_RxAddChar+0x170>)
    257e:	5b1e      	ldrh	r6, [r3, r4]
    2580:	b2b6      	uxth	r6, r6
    2582:	3211      	adds	r2, #17
    2584:	32ff      	adds	r2, #255	; 0xff
    2586:	0052      	lsls	r2, r2, #1
    2588:	189a      	adds	r2, r3, r2
    258a:	80d6      	strh	r6, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos - 1;
    258c:	5c1a      	ldrb	r2, [r3, r0]
    258e:	5a59      	ldrh	r1, [r3, r1]
    2590:	5b1e      	ldrh	r6, [r3, r4]
    2592:	3901      	subs	r1, #1
    2594:	1b89      	subs	r1, r1, r6
    2596:	b289      	uxth	r1, r1
    2598:	321d      	adds	r2, #29
    259a:	32ff      	adds	r2, #255	; 0xff
    259c:	0052      	lsls	r2, r2, #1
    259e:	189a      	adds	r2, r3, r2
    25a0:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.crtWordIdx ++;
    25a2:	5c1a      	ldrb	r2, [r3, r0]
    25a4:	3201      	adds	r2, #1
    25a6:	b2d2      	uxtb	r2, r2
    25a8:	541a      	strb	r2, [r3, r0]
                mRxParserCmd.crtWordPos = 0;
    25aa:	531d      	strh	r5, [r3, r4]
    25ac:	e7cc      	b.n	2548 <Parser_RxAddChar+0xf8>
        Parser_RxClearBuffer();
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <Parser_RxAddChar+0x17c>)
    25b0:	4798      	blx	r3
        Parser_TxAddReply((char*)gapParserTspStatus[ERR_STATUS_IDX], strlen(gapParserTspStatus[ERR_STATUS_IDX]));
    25b2:	2103      	movs	r1, #3
    25b4:	4806      	ldr	r0, [pc, #24]	; (25d0 <Parser_RxAddChar+0x180>)
    25b6:	4b07      	ldr	r3, [pc, #28]	; (25d4 <Parser_RxAddChar+0x184>)
    25b8:	4798      	blx	r3
    25ba:	e7c5      	b.n	2548 <Parser_RxAddChar+0xf8>
    25bc:	20001dd8 	.word	0x20001dd8
    25c0:	00000252 	.word	0x00000252
    25c4:	0000024f 	.word	0x0000024f
    25c8:	0000024e 	.word	0x0000024e
    25cc:	000023c9 	.word	0x000023c9
    25d0:	0001e130 	.word	0x0001e130
    25d4:	00002415 	.word	0x00002415

000025d8 <Validate_HexValue>:
    "off",
    "on"
};

bool Validate_HexValue(void* pValue)
 {
    25d8:	b570      	push	{r4, r5, r6, lr}
    bool flag = true;
    char* character;

    for(character = pValue; *character; character++)
    25da:	7803      	ldrb	r3, [r0, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d00e      	beq.n	25fe <Validate_HexValue+0x26>
    25e0:	0004      	movs	r4, r0
    {
        if(isxdigit(*character) == 0)
    25e2:	4e09      	ldr	r6, [pc, #36]	; (2608 <Validate_HexValue+0x30>)
    25e4:	2544      	movs	r5, #68	; 0x44
    25e6:	47b0      	blx	r6
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	18c0      	adds	r0, r0, r3
    25ec:	7843      	ldrb	r3, [r0, #1]
    25ee:	421d      	tst	r5, r3
    25f0:	d007      	beq.n	2602 <Validate_HexValue+0x2a>
    for(character = pValue; *character; character++)
    25f2:	3401      	adds	r4, #1
    25f4:	7823      	ldrb	r3, [r4, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1f5      	bne.n	25e6 <Validate_HexValue+0xe>
    bool flag = true;
    25fa:	2001      	movs	r0, #1
    25fc:	e002      	b.n	2604 <Validate_HexValue+0x2c>
    25fe:	2001      	movs	r0, #1
    2600:	e000      	b.n	2604 <Validate_HexValue+0x2c>
        {
            flag = false;
    2602:	2000      	movs	r0, #0
            break;
        }
    }

    return flag;
}
    2604:	bd70      	pop	{r4, r5, r6, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	00018091 	.word	0x00018091

0000260c <Parser_IntArrayToHexAscii>:

    return retValue;
}

void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, char* pOutHexAscii)
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	46ce      	mov	lr, r9
    2610:	4647      	mov	r7, r8
    2612:	b580      	push	{r7, lr}
    2614:	b083      	sub	sp, #12
    2616:	4680      	mov	r8, r0
    2618:	9201      	str	r2, [sp, #4]
    uint8_t iCtr = 0U;

    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    261a:	2800      	cmp	r0, #0
    261c:	d019      	beq.n	2652 <Parser_IntArrayToHexAscii+0x46>
    261e:	000c      	movs	r4, r1
    2620:	0015      	movs	r5, r2
    2622:	1e47      	subs	r7, r0, #1
    2624:	b2ff      	uxtb	r7, r7
    2626:	3701      	adds	r7, #1
    2628:	19cf      	adds	r7, r1, r7
    {
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    262a:	4e0f      	ldr	r6, [pc, #60]	; (2668 <Parser_IntArrayToHexAscii+0x5c>)

        if(pInArray[iCtr] <= 15)
        {
            /* Special treatment for figures [0..9]  */
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
            pOutHexAscii[iCtr << 1] = '0';
    262c:	2330      	movs	r3, #48	; 0x30
    262e:	4699      	mov	r9, r3
    2630:	e003      	b.n	263a <Parser_IntArrayToHexAscii+0x2e>
    2632:	3401      	adds	r4, #1
    2634:	3502      	adds	r5, #2
    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    2636:	42bc      	cmp	r4, r7
    2638:	d00b      	beq.n	2652 <Parser_IntArrayToHexAscii+0x46>
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    263a:	7820      	ldrb	r0, [r4, #0]
    263c:	2210      	movs	r2, #16
    263e:	0029      	movs	r1, r5
    2640:	47b0      	blx	r6
        if(pInArray[iCtr] <= 15)
    2642:	7823      	ldrb	r3, [r4, #0]
    2644:	2b0f      	cmp	r3, #15
    2646:	d8f4      	bhi.n	2632 <Parser_IntArrayToHexAscii+0x26>
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
    2648:	782b      	ldrb	r3, [r5, #0]
    264a:	706b      	strb	r3, [r5, #1]
            pOutHexAscii[iCtr << 1] = '0';
    264c:	464b      	mov	r3, r9
    264e:	702b      	strb	r3, [r5, #0]
    2650:	e7ef      	b.n	2632 <Parser_IntArrayToHexAscii+0x26>
        }
    }

    pOutHexAscii[(iCtr << 1)] = '\0';
    2652:	4643      	mov	r3, r8
    2654:	005b      	lsls	r3, r3, #1
    2656:	2200      	movs	r2, #0
    2658:	9901      	ldr	r1, [sp, #4]
    265a:	54ca      	strb	r2, [r1, r3]
}
    265c:	b003      	add	sp, #12
    265e:	bc0c      	pop	{r2, r3}
    2660:	4690      	mov	r8, r2
    2662:	4699      	mov	r9, r3
    2664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	00018061 	.word	0x00018061

0000266c <Validate_Uint8DecAsciiValue>:

bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	b083      	sub	sp, #12
    2670:	0004      	movs	r4, r0
    2672:	9101      	str	r1, [sp, #4]
    bool flag = false;
    char* character;
    uint16_t valueLen = strlen(pValue);
    2674:	4b10      	ldr	r3, [pc, #64]	; (26b8 <Validate_Uint8DecAsciiValue+0x4c>)
    2676:	4798      	blx	r3
    2678:	0006      	movs	r6, r0
    int32_t value = atoi(pValue);
    267a:	0020      	movs	r0, r4
    267c:	4b0f      	ldr	r3, [pc, #60]	; (26bc <Validate_Uint8DecAsciiValue+0x50>)
    267e:	4798      	blx	r3
    2680:	0007      	movs	r7, r0

    // Maximum 3 ascii characters 0-> 255
    if((valueLen <= 3U) && (value >= 0) && (value <= 255))
    2682:	b2b6      	uxth	r6, r6
    2684:	2e03      	cmp	r6, #3
    2686:	d814      	bhi.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
    2688:	28ff      	cmp	r0, #255	; 0xff
    268a:	d812      	bhi.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
    {
        flag = true;

        for(character = pValue; *character; character++)
    268c:	7823      	ldrb	r3, [r4, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d00b      	beq.n	26aa <Validate_Uint8DecAsciiValue+0x3e>
        {
            if(isdigit(*character) == 0)
    2692:	4d0b      	ldr	r5, [pc, #44]	; (26c0 <Validate_Uint8DecAsciiValue+0x54>)
    2694:	2604      	movs	r6, #4
    2696:	47a8      	blx	r5
    2698:	7823      	ldrb	r3, [r4, #0]
    269a:	18c0      	adds	r0, r0, r3
    269c:	7843      	ldrb	r3, [r0, #1]
    269e:	421e      	tst	r6, r3
    26a0:	d007      	beq.n	26b2 <Validate_Uint8DecAsciiValue+0x46>
        for(character = pValue; *character; character++)
    26a2:	3401      	adds	r4, #1
    26a4:	7823      	ldrb	r3, [r4, #0]
    26a6:	2b00      	cmp	r3, #0
    26a8:	d1f5      	bne.n	2696 <Validate_Uint8DecAsciiValue+0x2a>
        }
    }

    if(flag)
    {
        *pDecValue = (uint8_t)value;
    26aa:	9b01      	ldr	r3, [sp, #4]
    26ac:	701f      	strb	r7, [r3, #0]
    26ae:	2001      	movs	r0, #1
    26b0:	e000      	b.n	26b4 <Validate_Uint8DecAsciiValue+0x48>
        for(character = pValue; *character; character++)
    26b2:	2000      	movs	r0, #0
    }

    return flag;
}
    26b4:	b003      	add	sp, #12
    26b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b8:	00018bad 	.word	0x00018bad
    26bc:	00017fdd 	.word	0x00017fdd
    26c0:	00018091 	.word	0x00018091

000026c4 <ultoa>:

/*
 * \brief Converts String to Un-singed Long Integer
 */ 
char * ultoa(char * str, unsigned long num,  int radix)
{
    26c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c6:	46d6      	mov	lr, sl
    26c8:	b500      	push	{lr}
    26ca:	b08e      	sub	sp, #56	; 0x38
    26cc:	9003      	str	r0, [sp, #12]
    26ce:	000c      	movs	r4, r1
    26d0:	9201      	str	r2, [sp, #4]
    26d2:	2500      	movs	r5, #0
   int digit;
   int str_loc = 0;

   /*construct a backward string of the number. */
   do {
	   digit = (unsigned long)num % radix;
    26d4:	4b18      	ldr	r3, [pc, #96]	; (2738 <ultoa+0x74>)
    26d6:	469a      	mov	sl, r3
	   if (digit < 10)
	   temp[temp_loc++] = digit + '0';
	   else
	   temp[temp_loc++] = digit - 10 + 'A';
    26d8:	af05      	add	r7, sp, #20
	   num = ((unsigned long)num) / radix;
    26da:	4e18      	ldr	r6, [pc, #96]	; (273c <ultoa+0x78>)
    26dc:	e009      	b.n	26f2 <ultoa+0x2e>
	   temp[temp_loc++] = digit - 10 + 'A';
    26de:	3137      	adds	r1, #55	; 0x37
    26e0:	55e9      	strb	r1, [r5, r7]
	   num = ((unsigned long)num) / radix;
    26e2:	9901      	ldr	r1, [sp, #4]
    26e4:	0020      	movs	r0, r4
    26e6:	47b0      	blx	r6
    26e8:	0004      	movs	r4, r0
    26ea:	1c6b      	adds	r3, r5, #1
   } while ((unsigned long)num > 0);
    26ec:	2800      	cmp	r0, #0
    26ee:	d009      	beq.n	2704 <ultoa+0x40>
    26f0:	001d      	movs	r5, r3
    26f2:	9502      	str	r5, [sp, #8]
	   digit = (unsigned long)num % radix;
    26f4:	9901      	ldr	r1, [sp, #4]
    26f6:	0020      	movs	r0, r4
    26f8:	47d0      	blx	sl
	   if (digit < 10)
    26fa:	2909      	cmp	r1, #9
    26fc:	dcef      	bgt.n	26de <ultoa+0x1a>
	   temp[temp_loc++] = digit + '0';
    26fe:	3130      	adds	r1, #48	; 0x30
    2700:	55e9      	strb	r1, [r5, r7]
    2702:	e7ee      	b.n	26e2 <ultoa+0x1e>

   temp_loc--;


   /* now reverse the string. */
   while ( temp_loc >=0 ) {
    2704:	9b02      	ldr	r3, [sp, #8]
    2706:	2b00      	cmp	r3, #0
    2708:	db14      	blt.n	2734 <ultoa+0x70>
    270a:	ab05      	add	r3, sp, #20
    270c:	195b      	adds	r3, r3, r5
    270e:	9a03      	ldr	r2, [sp, #12]
    2710:	a904      	add	r1, sp, #16
    2712:	1cc8      	adds	r0, r1, #3
	   /* while there are still chars */
	   str[str_loc++] = temp[temp_loc--];
    2714:	7819      	ldrb	r1, [r3, #0]
    2716:	7011      	strb	r1, [r2, #0]
    2718:	3b01      	subs	r3, #1
    271a:	3201      	adds	r2, #1
   while ( temp_loc >=0 ) {
    271c:	4283      	cmp	r3, r0
    271e:	d1f9      	bne.n	2714 <ultoa+0x50>
    2720:	9e02      	ldr	r6, [sp, #8]
    2722:	3601      	adds	r6, #1
   }
   /* add null termination. */
   str[str_loc] = 0; 
    2724:	2300      	movs	r3, #0
    2726:	9a03      	ldr	r2, [sp, #12]
    2728:	5593      	strb	r3, [r2, r6]

   return str;
}
    272a:	0010      	movs	r0, r2
    272c:	b00e      	add	sp, #56	; 0x38
    272e:	bc04      	pop	{r2}
    2730:	4692      	mov	sl, r2
    2732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   while ( temp_loc >=0 ) {
    2734:	2600      	movs	r6, #0
    2736:	e7f5      	b.n	2724 <ultoa+0x60>
    2738:	0001505d 	.word	0x0001505d
    273c:	00014f51 	.word	0x00014f51

00002740 <Validate_UintDecAsciiValue>:
{
    2740:	b570      	push	{r4, r5, r6, lr}
    2742:	b084      	sub	sp, #16
    2744:	0005      	movs	r5, r0
    2746:	0016      	movs	r6, r2
    unsigned long value = strtoul(pValue, NULL, 10);
    2748:	220a      	movs	r2, #10
    274a:	2100      	movs	r1, #0
    274c:	4b0a      	ldr	r3, [pc, #40]	; (2778 <Validate_UintDecAsciiValue+0x38>)
    274e:	4798      	blx	r3
    2750:	0004      	movs	r4, r0
    ultoa(buf, value, 10U);
    2752:	220a      	movs	r2, #10
    2754:	0001      	movs	r1, r0
    2756:	a801      	add	r0, sp, #4
    2758:	4b08      	ldr	r3, [pc, #32]	; (277c <Validate_UintDecAsciiValue+0x3c>)
    275a:	4798      	blx	r3
    if (0 != strcmp((char*)pValue, buf))
    275c:	a901      	add	r1, sp, #4
    275e:	0028      	movs	r0, r5
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <Validate_UintDecAsciiValue+0x40>)
    2762:	4798      	blx	r3
    2764:	0003      	movs	r3, r0
        flag = false;
    2766:	2000      	movs	r0, #0
    if (value > maxValue)
    2768:	42b4      	cmp	r4, r6
    276a:	d901      	bls.n	2770 <Validate_UintDecAsciiValue+0x30>
}
    276c:	b004      	add	sp, #16
    276e:	bd70      	pop	{r4, r5, r6, pc}
    if (0 != strcmp((char*)pValue, buf))
    2770:	4258      	negs	r0, r3
    2772:	4158      	adcs	r0, r3
    2774:	b2c0      	uxtb	r0, r0
    2776:	e7f9      	b.n	276c <Validate_UintDecAsciiValue+0x2c>
    2778:	00018eb9 	.word	0x00018eb9
    277c:	000026c5 	.word	0x000026c5
    2780:	00018b25 	.word	0x00018b25

00002784 <stricmp>:

/*
 * \brief Compare Strings without Case Sensitivity
 */ 
int stricmp( char *s1, const char *s2 )
{
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	46de      	mov	lr, fp
    2788:	4657      	mov	r7, sl
    278a:	464e      	mov	r6, r9
    278c:	b5c0      	push	{r6, r7, lr}
    278e:	b082      	sub	sp, #8
    2790:	0004      	movs	r4, r0
    2792:	000e      	movs	r6, r1
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    2794:	2800      	cmp	r0, #0
    2796:	d006      	beq.n	27a6 <stricmp+0x22>
	if (s2 == NULL) return *s1;
    2798:	2900      	cmp	r1, #0
    279a:	d009      	beq.n	27b0 <stricmp+0x2c>

	char c1, c2;
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    279c:	4b1c      	ldr	r3, [pc, #112]	; (2810 <stricmp+0x8c>)
    279e:	469b      	mov	fp, r3
    27a0:	2703      	movs	r7, #3
    27a2:	469a      	mov	sl, r3
    27a4:	e011      	b.n	27ca <stricmp+0x46>
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    27a6:	2900      	cmp	r1, #0
    27a8:	d02f      	beq.n	280a <stricmp+0x86>
    27aa:	7808      	ldrb	r0, [r1, #0]
    27ac:	4240      	negs	r0, r0
    27ae:	e026      	b.n	27fe <stricmp+0x7a>
	if (s2 == NULL) return *s1;
    27b0:	7800      	ldrb	r0, [r0, #0]
    27b2:	e024      	b.n	27fe <stricmp+0x7a>
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    27b4:	3520      	adds	r5, #32
    27b6:	9501      	str	r5, [sp, #4]
    27b8:	e00f      	b.n	27da <stricmp+0x56>
    27ba:	b2d3      	uxtb	r3, r2
    27bc:	4599      	cmp	r9, r3
    27be:	d119      	bne.n	27f4 <stricmp+0x70>
	{
		if (*s1 == '\0') break;
    27c0:	7823      	ldrb	r3, [r4, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d016      	beq.n	27f4 <stricmp+0x70>
		++s1; ++s2;
    27c6:	3401      	adds	r4, #1
    27c8:	3601      	adds	r6, #1
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    27ca:	7825      	ldrb	r5, [r4, #0]
    27cc:	47d8      	blx	fp
    27ce:	1940      	adds	r0, r0, r5
    27d0:	7843      	ldrb	r3, [r0, #1]
    27d2:	403b      	ands	r3, r7
    27d4:	9501      	str	r5, [sp, #4]
    27d6:	2b01      	cmp	r3, #1
    27d8:	d0ec      	beq.n	27b4 <stricmp+0x30>
    27da:	466b      	mov	r3, sp
    27dc:	791b      	ldrb	r3, [r3, #4]
    27de:	4699      	mov	r9, r3
    27e0:	7835      	ldrb	r5, [r6, #0]
    27e2:	47d0      	blx	sl
    27e4:	1940      	adds	r0, r0, r5
    27e6:	7843      	ldrb	r3, [r0, #1]
    27e8:	403b      	ands	r3, r7
    27ea:	002a      	movs	r2, r5
    27ec:	2b01      	cmp	r3, #1
    27ee:	d1e4      	bne.n	27ba <stricmp+0x36>
    27f0:	3220      	adds	r2, #32
    27f2:	e7e2      	b.n	27ba <stricmp+0x36>
	}

	return c1 - c2;
    27f4:	20ff      	movs	r0, #255	; 0xff
    27f6:	9f01      	ldr	r7, [sp, #4]
    27f8:	4007      	ands	r7, r0
    27fa:	4010      	ands	r0, r2
    27fc:	1a38      	subs	r0, r7, r0
}
    27fe:	b002      	add	sp, #8
    2800:	bc1c      	pop	{r2, r3, r4}
    2802:	4691      	mov	r9, r2
    2804:	469a      	mov	sl, r3
    2806:	46a3      	mov	fp, r4
    2808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    280a:	2000      	movs	r0, #0
    280c:	e7f7      	b.n	27fe <stricmp+0x7a>
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	00018091 	.word	0x00018091

00002814 <Validate_OnOffAsciiValue>:
{
    2814:	b510      	push	{r4, lr}
    2816:	0004      	movs	r4, r0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    2818:	4908      	ldr	r1, [pc, #32]	; (283c <Validate_OnOffAsciiValue+0x28>)
    281a:	4b09      	ldr	r3, [pc, #36]	; (2840 <Validate_OnOffAsciiValue+0x2c>)
    281c:	4798      	blx	r3
        result = OFF_STR_IDX;
    281e:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    2820:	2800      	cmp	r0, #0
    2822:	d101      	bne.n	2828 <Validate_OnOffAsciiValue+0x14>
}
    2824:	0018      	movs	r0, r3
    2826:	bd10      	pop	{r4, pc}
    else if (0U == stricmp(pValue, gapParseOnOff[ON_STR_IDX]))
    2828:	4906      	ldr	r1, [pc, #24]	; (2844 <Validate_OnOffAsciiValue+0x30>)
    282a:	0020      	movs	r0, r4
    282c:	4b04      	ldr	r3, [pc, #16]	; (2840 <Validate_OnOffAsciiValue+0x2c>)
    282e:	4798      	blx	r3
        result = ON_STR_IDX;
    2830:	0003      	movs	r3, r0
    2832:	1e58      	subs	r0, r3, #1
    2834:	4183      	sbcs	r3, r0
    2836:	3301      	adds	r3, #1
    2838:	e7f4      	b.n	2824 <Validate_OnOffAsciiValue+0x10>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	0001e0fc 	.word	0x0001e0fc
    2840:	00002785 	.word	0x00002785
    2844:	0001e100 	.word	0x0001e100

00002848 <Validate_Str1Str2AsciiValue>:
{
    2848:	b570      	push	{r4, r5, r6, lr}
    284a:	0004      	movs	r4, r0
    284c:	0015      	movs	r5, r2
    if(0U == stricmp(pValue, pStr1))
    284e:	4b08      	ldr	r3, [pc, #32]	; (2870 <Validate_Str1Str2AsciiValue+0x28>)
    2850:	4798      	blx	r3
        result = FIRST_STR_IDX;
    2852:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, pStr1))
    2854:	2800      	cmp	r0, #0
    2856:	d101      	bne.n	285c <Validate_Str1Str2AsciiValue+0x14>
}
    2858:	0018      	movs	r0, r3
    285a:	bd70      	pop	{r4, r5, r6, pc}
    else if (0U == stricmp(pValue, pStr2))
    285c:	0029      	movs	r1, r5
    285e:	0020      	movs	r0, r4
    2860:	4b03      	ldr	r3, [pc, #12]	; (2870 <Validate_Str1Str2AsciiValue+0x28>)
    2862:	4798      	blx	r3
        result = SECOND_STR_IDX;
    2864:	0003      	movs	r3, r0
    2866:	1e58      	subs	r0, r3, #1
    2868:	4183      	sbcs	r3, r0
    286a:	3301      	adds	r3, #1
    286c:	e7f4      	b.n	2858 <Validate_Str1Str2AsciiValue+0x10>
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	00002785 	.word	0x00002785

00002874 <xtoi>:

/*
 * \brief Converts the input string consisting of hexadecimal digits into an integer value
 */ 
int xtoi(char *c)
{
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	46ce      	mov	lr, r9
    2878:	4647      	mov	r7, r8
    287a:	b580      	push	{r7, lr}
    287c:	0007      	movs	r7, r0
  size_t szlen = strlen(c);
    287e:	4b16      	ldr	r3, [pc, #88]	; (28d8 <xtoi+0x64>)
    2880:	4798      	blx	r3
  int idx, ptr, factor,result =0;

  if(szlen > 0){
    2882:	3801      	subs	r0, #1
  int idx, ptr, factor,result =0;
    2884:	2600      	movs	r6, #0
  if(szlen > 0){
    2886:	2807      	cmp	r0, #7
    2888:	d821      	bhi.n	28ce <xtoi+0x5a>
    if(szlen > 8) return 0;
    result = 0;
    factor = 1;

    for(idx = szlen-1; idx >= 0; --idx){
    288a:	1e04      	subs	r4, r0, #0
    288c:	db1c      	blt.n	28c8 <xtoi+0x54>
    288e:	2501      	movs	r5, #1
    if(isxdigit( *(c+idx))){
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <xtoi+0x68>)
    2892:	4699      	mov	r9, r3
    2894:	2344      	movs	r3, #68	; 0x44
    2896:	4698      	mov	r8, r3
    2898:	e00a      	b.n	28b0 <xtoi+0x3c>
	if( *(c + idx) >= 97){
	  ptr = ( *(c + idx) - 97) + 10;
	}else if( *(c + idx) >= 65){
	  ptr = ( *(c + idx) - 65) + 10;
	}else{
	  ptr = *(c + idx) - 48;
    289a:	001a      	movs	r2, r3
    289c:	3a30      	subs	r2, #48	; 0x30
	}else if( *(c + idx) >= 65){
    289e:	2b40      	cmp	r3, #64	; 0x40
    28a0:	d901      	bls.n	28a6 <xtoi+0x32>
	  ptr = ( *(c + idx) - 65) + 10;
    28a2:	3b37      	subs	r3, #55	; 0x37
    28a4:	001a      	movs	r2, r3
	}
	result += (ptr * factor);
    28a6:	436a      	muls	r2, r5
    28a8:	18b6      	adds	r6, r6, r2
	factor *= 16;
    28aa:	012d      	lsls	r5, r5, #4
    for(idx = szlen-1; idx >= 0; --idx){
    28ac:	3c01      	subs	r4, #1
    28ae:	d40e      	bmi.n	28ce <xtoi+0x5a>
    if(isxdigit( *(c+idx))){
    28b0:	47c8      	blx	r9
    28b2:	5d3b      	ldrb	r3, [r7, r4]
    28b4:	18c0      	adds	r0, r0, r3
    28b6:	7842      	ldrb	r2, [r0, #1]
    28b8:	4641      	mov	r1, r8
    28ba:	4211      	tst	r1, r2
    28bc:	d006      	beq.n	28cc <xtoi+0x58>
	if( *(c + idx) >= 97){
    28be:	2b60      	cmp	r3, #96	; 0x60
    28c0:	d9eb      	bls.n	289a <xtoi+0x26>
	  ptr = ( *(c + idx) - 97) + 10;
    28c2:	3b57      	subs	r3, #87	; 0x57
    28c4:	001a      	movs	r2, r3
    28c6:	e7ee      	b.n	28a6 <xtoi+0x32>
    result = 0;
    28c8:	2600      	movs	r6, #0
    28ca:	e000      	b.n	28ce <xtoi+0x5a>
    }else{
		return 4;
    28cc:	2604      	movs	r6, #4
    }
    }
  }

  return result;
    28ce:	0030      	movs	r0, r6
    28d0:	bc0c      	pop	{r2, r3}
    28d2:	4690      	mov	r8, r2
    28d4:	4699      	mov	r9, r3
    28d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d8:	00018bad 	.word	0x00018bad
    28dc:	00018091 	.word	0x00018091

000028e0 <Parser_HexAsciiToInt>:
{
    28e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28e2:	46de      	mov	lr, fp
    28e4:	4657      	mov	r7, sl
    28e6:	464e      	mov	r6, r9
    28e8:	4645      	mov	r5, r8
    28ea:	b5e0      	push	{r5, r6, r7, lr}
    28ec:	b083      	sub	sp, #12
    28ee:	0004      	movs	r4, r0
    28f0:	000f      	movs	r7, r1
    28f2:	4690      	mov	r8, r2
    uint16_t rxHexAsciiLen = strlen(pInHexAscii);
    28f4:	0008      	movs	r0, r1
    28f6:	4b1f      	ldr	r3, [pc, #124]	; (2974 <Parser_HexAsciiToInt+0x94>)
    28f8:	4798      	blx	r3
    28fa:	b283      	uxth	r3, r0
    uint16_t jCtr = rxHexAsciiLen >> 1;
    28fc:	085d      	lsrs	r5, r3, #1
    if(rxHexAsciiLen % 2 == 0)
    28fe:	07da      	lsls	r2, r3, #31
    2900:	d401      	bmi.n	2906 <Parser_HexAsciiToInt+0x26>
        jCtr --;
    2902:	3d01      	subs	r5, #1
    2904:	b2ad      	uxth	r5, r5
    uint8_t retValue = 0;
    2906:	2000      	movs	r0, #0
    if(hexAsciiLen == rxHexAsciiLen)
    2908:	42a3      	cmp	r3, r4
    290a:	d006      	beq.n	291a <Parser_HexAsciiToInt+0x3a>
}
    290c:	b003      	add	sp, #12
    290e:	bc3c      	pop	{r2, r3, r4, r5}
    2910:	4690      	mov	r8, r2
    2912:	4699      	mov	r9, r3
    2914:	46a2      	mov	sl, r4
    2916:	46ab      	mov	fp, r5
    2918:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(rxHexAsciiLen > 0)
    291a:	2c00      	cmp	r4, #0
    291c:	d027      	beq.n	296e <Parser_HexAsciiToInt+0x8e>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    291e:	ae01      	add	r6, sp, #4
            tempBuff[iCtr] = '\0';
    2920:	2300      	movs	r3, #0
    2922:	469a      	mov	sl, r3
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    2924:	4b14      	ldr	r3, [pc, #80]	; (2978 <Parser_HexAsciiToInt+0x98>)
    2926:	4699      	mov	r9, r3
    2928:	e013      	b.n	2952 <Parser_HexAsciiToInt+0x72>
                tempBuff[iCtr] = '0';
    292a:	2330      	movs	r3, #48	; 0x30
    292c:	7033      	strb	r3, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    292e:	193b      	adds	r3, r7, r4
    2930:	3b01      	subs	r3, #1
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen --;
    2936:	3c01      	subs	r4, #1
    2938:	b2a4      	uxth	r4, r4
            tempBuff[iCtr] = '\0';
    293a:	4653      	mov	r3, sl
    293c:	70b3      	strb	r3, [r6, #2]
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    293e:	46ab      	mov	fp, r5
    2940:	44c3      	add	fp, r8
    2942:	0030      	movs	r0, r6
    2944:	47c8      	blx	r9
    2946:	465b      	mov	r3, fp
    2948:	7018      	strb	r0, [r3, #0]
            jCtr --;
    294a:	3d01      	subs	r5, #1
    294c:	b2ad      	uxth	r5, r5
        while(rxHexAsciiLen > 0)
    294e:	2c00      	cmp	r4, #0
    2950:	d00b      	beq.n	296a <Parser_HexAsciiToInt+0x8a>
            if(rxHexAsciiLen >= 2U)
    2952:	2c01      	cmp	r4, #1
    2954:	d9e9      	bls.n	292a <Parser_HexAsciiToInt+0x4a>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    2956:	193b      	adds	r3, r7, r4
    2958:	1e9a      	subs	r2, r3, #2
    295a:	7812      	ldrb	r2, [r2, #0]
    295c:	7032      	strb	r2, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    295e:	3b01      	subs	r3, #1
    2960:	781b      	ldrb	r3, [r3, #0]
    2962:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen -= 2U;
    2964:	3c02      	subs	r4, #2
    2966:	b2a4      	uxth	r4, r4
    2968:	e7e7      	b.n	293a <Parser_HexAsciiToInt+0x5a>
        retValue = 1;
    296a:	2001      	movs	r0, #1
    296c:	e7ce      	b.n	290c <Parser_HexAsciiToInt+0x2c>
    296e:	2001      	movs	r0, #1
    2970:	e7cc      	b.n	290c <Parser_HexAsciiToInt+0x2c>
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	00018bad 	.word	0x00018bad
    2978:	00002875 	.word	0x00002875

0000297c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    297c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    297e:	2000      	movs	r0, #0
    2980:	4b08      	ldr	r3, [pc, #32]	; (29a4 <delay_init+0x28>)
    2982:	4798      	blx	r3
    2984:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2986:	4c08      	ldr	r4, [pc, #32]	; (29a8 <delay_init+0x2c>)
    2988:	21fa      	movs	r1, #250	; 0xfa
    298a:	0089      	lsls	r1, r1, #2
    298c:	47a0      	blx	r4
    298e:	4b07      	ldr	r3, [pc, #28]	; (29ac <delay_init+0x30>)
    2990:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2992:	4907      	ldr	r1, [pc, #28]	; (29b0 <delay_init+0x34>)
    2994:	0028      	movs	r0, r5
    2996:	47a0      	blx	r4
    2998:	4b06      	ldr	r3, [pc, #24]	; (29b4 <delay_init+0x38>)
    299a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    299c:	2205      	movs	r2, #5
    299e:	4b06      	ldr	r3, [pc, #24]	; (29b8 <delay_init+0x3c>)
    29a0:	601a      	str	r2, [r3, #0]
}
    29a2:	bd70      	pop	{r4, r5, r6, pc}
    29a4:	0000553d 	.word	0x0000553d
    29a8:	00014f51 	.word	0x00014f51
    29ac:	2000000c 	.word	0x2000000c
    29b0:	000f4240 	.word	0x000f4240
    29b4:	20000010 	.word	0x20000010
    29b8:	e000e010 	.word	0xe000e010

000029bc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    29bc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <delay_cycles_us+0x24>)
    29c0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    29c2:	4a08      	ldr	r2, [pc, #32]	; (29e4 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    29c4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29c6:	2180      	movs	r1, #128	; 0x80
    29c8:	0249      	lsls	r1, r1, #9
	while (n--) {
    29ca:	3801      	subs	r0, #1
    29cc:	d307      	bcc.n	29de <delay_cycles_us+0x22>
	if (n > 0) {
    29ce:	2c00      	cmp	r4, #0
    29d0:	d0fb      	beq.n	29ca <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    29d2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29d4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29d6:	6813      	ldr	r3, [r2, #0]
    29d8:	420b      	tst	r3, r1
    29da:	d0fc      	beq.n	29d6 <delay_cycles_us+0x1a>
    29dc:	e7f5      	b.n	29ca <delay_cycles_us+0xe>
	}
}
    29de:	bd30      	pop	{r4, r5, pc}
    29e0:	20000010 	.word	0x20000010
    29e4:	e000e010 	.word	0xe000e010

000029e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    29e8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    29ea:	4b08      	ldr	r3, [pc, #32]	; (2a0c <delay_cycles_ms+0x24>)
    29ec:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    29ee:	4a08      	ldr	r2, [pc, #32]	; (2a10 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    29f0:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29f2:	2180      	movs	r1, #128	; 0x80
    29f4:	0249      	lsls	r1, r1, #9
	while (n--) {
    29f6:	3801      	subs	r0, #1
    29f8:	d307      	bcc.n	2a0a <delay_cycles_ms+0x22>
	if (n > 0) {
    29fa:	2c00      	cmp	r4, #0
    29fc:	d0fb      	beq.n	29f6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    29fe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2a00:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2a02:	6813      	ldr	r3, [r2, #0]
    2a04:	420b      	tst	r3, r1
    2a06:	d0fc      	beq.n	2a02 <delay_cycles_ms+0x1a>
    2a08:	e7f5      	b.n	29f6 <delay_cycles_ms+0xe>
	}
}
    2a0a:	bd30      	pop	{r4, r5, pc}
    2a0c:	2000000c 	.word	0x2000000c
    2a10:	e000e010 	.word	0xe000e010

00002a14 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2a14:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <cpu_irq_enter_critical+0x34>)
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d106      	bne.n	2a2a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a1c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2a20:	2b00      	cmp	r3, #0
    2a22:	d007      	beq.n	2a34 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a24:	2200      	movs	r2, #0
    2a26:	4b09      	ldr	r3, [pc, #36]	; (2a4c <cpu_irq_enter_critical+0x38>)
    2a28:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a2a:	4a07      	ldr	r2, [pc, #28]	; (2a48 <cpu_irq_enter_critical+0x34>)
    2a2c:	6813      	ldr	r3, [r2, #0]
    2a2e:	3301      	adds	r3, #1
    2a30:	6013      	str	r3, [r2, #0]
}
    2a32:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2a34:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2a36:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a3a:	2200      	movs	r2, #0
    2a3c:	4b04      	ldr	r3, [pc, #16]	; (2a50 <cpu_irq_enter_critical+0x3c>)
    2a3e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a40:	3201      	adds	r2, #1
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <cpu_irq_enter_critical+0x38>)
    2a44:	701a      	strb	r2, [r3, #0]
    2a46:	e7f0      	b.n	2a2a <cpu_irq_enter_critical+0x16>
    2a48:	200009e8 	.word	0x200009e8
    2a4c:	200009ec 	.word	0x200009ec
    2a50:	20000014 	.word	0x20000014

00002a54 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a54:	4b08      	ldr	r3, [pc, #32]	; (2a78 <cpu_irq_leave_critical+0x24>)
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	3a01      	subs	r2, #1
    2a5a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d109      	bne.n	2a76 <cpu_irq_leave_critical+0x22>
    2a62:	4b06      	ldr	r3, [pc, #24]	; (2a7c <cpu_irq_leave_critical+0x28>)
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d005      	beq.n	2a76 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a6a:	2201      	movs	r2, #1
    2a6c:	4b04      	ldr	r3, [pc, #16]	; (2a80 <cpu_irq_leave_critical+0x2c>)
    2a6e:	701a      	strb	r2, [r3, #0]
    2a70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a74:	b662      	cpsie	i
	}
}
    2a76:	4770      	bx	lr
    2a78:	200009e8 	.word	0x200009e8
    2a7c:	200009ec 	.word	0x200009ec
    2a80:	20000014 	.word	0x20000014

00002a84 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a86:	46c6      	mov	lr, r8
    2a88:	b500      	push	{lr}
    2a8a:	b082      	sub	sp, #8
    2a8c:	ac01      	add	r4, sp, #4
    2a8e:	2501      	movs	r5, #1
    2a90:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2a92:	2300      	movs	r3, #0
    2a94:	4698      	mov	r8, r3
    2a96:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2a98:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2a9a:	0021      	movs	r1, r4
    2a9c:	2013      	movs	r0, #19
    2a9e:	4e12      	ldr	r6, [pc, #72]	; (2ae8 <system_board_init+0x64>)
    2aa0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2aa2:	4f12      	ldr	r7, [pc, #72]	; (2aec <system_board_init+0x68>)
    2aa4:	2380      	movs	r3, #128	; 0x80
    2aa6:	031b      	lsls	r3, r3, #12
    2aa8:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2aaa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    2aac:	0021      	movs	r1, r4
    2aae:	2012      	movs	r0, #18
    2ab0:	47b0      	blx	r6
    2ab2:	2380      	movs	r3, #128	; 0x80
    2ab4:	02db      	lsls	r3, r3, #11
    2ab6:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ab8:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    2aba:	0021      	movs	r1, r4
    2abc:	200d      	movs	r0, #13
    2abe:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ac0:	2380      	movs	r3, #128	; 0x80
    2ac2:	019b      	lsls	r3, r3, #6
    2ac4:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ac6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    2ac8:	0021      	movs	r1, r4
    2aca:	2009      	movs	r0, #9
    2acc:	47b0      	blx	r6
    2ace:	2380      	movs	r3, #128	; 0x80
    2ad0:	009b      	lsls	r3, r3, #2
    2ad2:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2ad4:	4643      	mov	r3, r8
    2ad6:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2ad8:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2ada:	0021      	movs	r1, r4
    2adc:	201c      	movs	r0, #28
    2ade:	47b0      	blx	r6
		
}
    2ae0:	b002      	add	sp, #8
    2ae2:	bc04      	pop	{r2}
    2ae4:	4690      	mov	r8, r2
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	00003301 	.word	0x00003301
    2aec:	40002800 	.word	0x40002800

00002af0 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    2af0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2af2:	4b2f      	ldr	r3, [pc, #188]	; (2bb0 <ADC_Handler+0xc0>)
    2af4:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2af6:	6823      	ldr	r3, [r4, #0]
    2af8:	799a      	ldrb	r2, [r3, #6]
    2afa:	795d      	ldrb	r5, [r3, #5]
    2afc:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    2afe:	07ea      	lsls	r2, r5, #31
    2b00:	d52a      	bpl.n	2b58 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2b02:	2201      	movs	r2, #1
    2b04:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    2b06:	6962      	ldr	r2, [r4, #20]
    2b08:	1c93      	adds	r3, r2, #2
    2b0a:	6163      	str	r3, [r4, #20]
    2b0c:	6823      	ldr	r3, [r4, #0]
    2b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2b10:	b29b      	uxth	r3, r3
    2b12:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    2b14:	8b23      	ldrh	r3, [r4, #24]
    2b16:	3b01      	subs	r3, #1
    2b18:	b29b      	uxth	r3, r3
    2b1a:	8323      	strh	r3, [r4, #24]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d015      	beq.n	2b4c <ADC_Handler+0x5c>
			if (module->software_trigger == true
    2b20:	7f63      	ldrb	r3, [r4, #29]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d018      	beq.n	2b58 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    2b26:	6822      	ldr	r2, [r4, #0]
    2b28:	79d3      	ldrb	r3, [r2, #7]
    2b2a:	b25b      	sxtb	r3, r3
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	db13      	blt.n	2b58 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    2b30:	8c13      	ldrh	r3, [r2, #32]
    2b32:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	d1fb      	bne.n	2b30 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2b38:	7e13      	ldrb	r3, [r2, #24]
    2b3a:	2102      	movs	r1, #2
    2b3c:	430b      	orrs	r3, r1
    2b3e:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    2b40:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    2b42:	8c13      	ldrh	r3, [r2, #32]
    2b44:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2b46:	2b00      	cmp	r3, #0
    2b48:	d1fb      	bne.n	2b42 <ADC_Handler+0x52>
    2b4a:	e005      	b.n	2b58 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2b4c:	2301      	movs	r3, #1
    2b4e:	6822      	ldr	r2, [r4, #0]
    2b50:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    2b52:	7f23      	ldrb	r3, [r4, #28]
    2b54:	2b05      	cmp	r3, #5
    2b56:	d016      	beq.n	2b86 <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    2b58:	076b      	lsls	r3, r5, #29
    2b5a:	d508      	bpl.n	2b6e <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2b5c:	2304      	movs	r3, #4
    2b5e:	6822      	ldr	r2, [r4, #0]
    2b60:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2b62:	7ee3      	ldrb	r3, [r4, #27]
    2b64:	079b      	lsls	r3, r3, #30
    2b66:	d502      	bpl.n	2b6e <ADC_Handler+0x7e>
    2b68:	7ea3      	ldrb	r3, [r4, #26]
    2b6a:	079b      	lsls	r3, r3, #30
    2b6c:	d417      	bmi.n	2b9e <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2b6e:	07ab      	lsls	r3, r5, #30
    2b70:	d508      	bpl.n	2b84 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2b72:	2302      	movs	r3, #2
    2b74:	6822      	ldr	r2, [r4, #0]
    2b76:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2b78:	7ee3      	ldrb	r3, [r4, #27]
    2b7a:	075b      	lsls	r3, r3, #29
    2b7c:	d502      	bpl.n	2b84 <ADC_Handler+0x94>
    2b7e:	7ea3      	ldrb	r3, [r4, #26]
    2b80:	075b      	lsls	r3, r3, #29
    2b82:	d410      	bmi.n	2ba6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    2b84:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    2b86:	2300      	movs	r3, #0
    2b88:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    2b8a:	7ee3      	ldrb	r3, [r4, #27]
    2b8c:	07db      	lsls	r3, r3, #31
    2b8e:	d5e3      	bpl.n	2b58 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2b90:	7ea3      	ldrb	r3, [r4, #26]
    2b92:	07db      	lsls	r3, r3, #31
    2b94:	d5e0      	bpl.n	2b58 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2b96:	0020      	movs	r0, r4
    2b98:	68a3      	ldr	r3, [r4, #8]
    2b9a:	4798      	blx	r3
    2b9c:	e7dc      	b.n	2b58 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2b9e:	0020      	movs	r0, r4
    2ba0:	68e3      	ldr	r3, [r4, #12]
    2ba2:	4798      	blx	r3
    2ba4:	e7e3      	b.n	2b6e <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2ba6:	6923      	ldr	r3, [r4, #16]
    2ba8:	0020      	movs	r0, r4
    2baa:	4798      	blx	r3
}
    2bac:	e7ea      	b.n	2b84 <ADC_Handler+0x94>
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	2000202c 	.word	0x2000202c

00002bb4 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    2bb4:	2301      	movs	r3, #1
    2bb6:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    2bb8:	2300      	movs	r3, #0
    2bba:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    2bbc:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    2bbe:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    2bc0:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    2bc2:	220f      	movs	r2, #15
    2bc4:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    2bc6:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    2bc8:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    2bca:	7203      	strb	r3, [r0, #8]
}
    2bcc:	4770      	bx	lr

00002bce <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    2bce:	6802      	ldr	r2, [r0, #0]
    2bd0:	6813      	ldr	r3, [r2, #0]
    2bd2:	2102      	movs	r1, #2
    2bd4:	430b      	orrs	r3, r1
    2bd6:	6013      	str	r3, [r2, #0]

}
    2bd8:	4770      	bx	lr

00002bda <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    2bda:	2303      	movs	r3, #3
    2bdc:	6802      	ldr	r2, [r0, #0]
    2bde:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    2be0:	6802      	ldr	r2, [r0, #0]
    2be2:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    2be4:	6802      	ldr	r2, [r0, #0]
    2be6:	6813      	ldr	r3, [r2, #0]
    2be8:	2102      	movs	r1, #2
    2bea:	438b      	bics	r3, r1
    2bec:	6013      	str	r3, [r2, #0]
}
    2bee:	4770      	bx	lr

00002bf0 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	0004      	movs	r4, r0
    2bf4:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    2bf6:	78d3      	ldrb	r3, [r2, #3]
    2bf8:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    2bfa:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    2bfc:	7853      	ldrb	r3, [r2, #1]
    2bfe:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    2c00:	7913      	ldrb	r3, [r2, #4]
    2c02:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    2c04:	7813      	ldrb	r3, [r2, #0]
    2c06:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    2c08:	7891      	ldrb	r1, [r2, #2]
    2c0a:	02c9      	lsls	r1, r1, #11
    2c0c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    2c0e:	7851      	ldrb	r1, [r2, #1]
    2c10:	0209      	lsls	r1, r1, #8
    2c12:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    2c14:	78d1      	ldrb	r1, [r2, #3]
    2c16:	0089      	lsls	r1, r1, #2
    2c18:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    2c1a:	7911      	ldrb	r1, [r2, #4]
    2c1c:	0149      	lsls	r1, r1, #5
    2c1e:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    2c20:	7991      	ldrb	r1, [r2, #6]
    2c22:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    2c24:	79d0      	ldrb	r0, [r2, #7]
    2c26:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    2c28:	4301      	orrs	r1, r0
    2c2a:	7a10      	ldrb	r0, [r2, #8]
    2c2c:	0300      	lsls	r0, r0, #12
    2c2e:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    2c30:	7952      	ldrb	r2, [r2, #5]
    2c32:	0412      	lsls	r2, r2, #16
    2c34:	20f0      	movs	r0, #240	; 0xf0
    2c36:	0300      	lsls	r0, r0, #12
    2c38:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    2c3a:	430a      	orrs	r2, r1
    2c3c:	4313      	orrs	r3, r2
    2c3e:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    2c40:	682b      	ldr	r3, [r5, #0]
    2c42:	079b      	lsls	r3, r3, #30
    2c44:	d401      	bmi.n	2c4a <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    2c46:	602e      	str	r6, [r5, #0]
	}
}
    2c48:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    2c4a:	0020      	movs	r0, r4
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <aes_set_config+0x6c>)
    2c4e:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    2c50:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    2c52:	0020      	movs	r0, r4
    2c54:	4b02      	ldr	r3, [pc, #8]	; (2c60 <aes_set_config+0x70>)
    2c56:	4798      	blx	r3
    2c58:	e7f6      	b.n	2c48 <aes_set_config+0x58>
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00002bdb 	.word	0x00002bdb
    2c60:	00002bcf 	.word	0x00002bcf

00002c64 <aes_init>:
{
    2c64:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2c66:	4c05      	ldr	r4, [pc, #20]	; (2c7c <aes_init+0x18>)
    2c68:	69e5      	ldr	r5, [r4, #28]
    2c6a:	2380      	movs	r3, #128	; 0x80
    2c6c:	019b      	lsls	r3, r3, #6
    2c6e:	432b      	orrs	r3, r5
    2c70:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    2c72:	2301      	movs	r3, #1
    2c74:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    2c76:	4b02      	ldr	r3, [pc, #8]	; (2c80 <aes_init+0x1c>)
    2c78:	4798      	blx	r3
}
    2c7a:	bd70      	pop	{r4, r5, r6, pc}
    2c7c:	40000400 	.word	0x40000400
    2c80:	00002bf1 	.word	0x00002bf1

00002c84 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    2c84:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    2c86:	7943      	ldrb	r3, [r0, #5]
    2c88:	2b01      	cmp	r3, #1
    2c8a:	d005      	beq.n	2c98 <aes_write_key+0x14>
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d010      	beq.n	2cb2 <aes_write_key+0x2e>
    2c90:	2b02      	cmp	r3, #2
    2c92:	d10d      	bne.n	2cb0 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    2c94:	2508      	movs	r5, #8
    2c96:	e000      	b.n	2c9a <aes_write_key+0x16>
		key_length = 6;
    2c98:	2506      	movs	r5, #6
{
    2c9a:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    2c9c:	c910      	ldmia	r1!, {r4}
    2c9e:	1c9a      	adds	r2, r3, #2
    2ca0:	0092      	lsls	r2, r2, #2
    2ca2:	6806      	ldr	r6, [r0, #0]
    2ca4:	46b4      	mov	ip, r6
    2ca6:	4462      	add	r2, ip
    2ca8:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    2caa:	3301      	adds	r3, #1
    2cac:	42ab      	cmp	r3, r5
    2cae:	d3f5      	bcc.n	2c9c <aes_write_key+0x18>
		key++;
	}
}
    2cb0:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    2cb2:	2504      	movs	r5, #4
    2cb4:	e7f1      	b.n	2c9a <aes_write_key+0x16>
	...

00002cb8 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    2cb8:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    2cba:	2300      	movs	r3, #0
    2cbc:	6802      	ldr	r2, [r0, #0]
    2cbe:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    2cc0:	4b0f      	ldr	r3, [pc, #60]	; (2d00 <aes_write_input_data+0x48>)
    2cc2:	6842      	ldr	r2, [r0, #4]
    2cc4:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    2cc6:	4a0f      	ldr	r2, [pc, #60]	; (2d04 <aes_write_input_data+0x4c>)
    2cc8:	4293      	cmp	r3, r2
    2cca:	d00a      	beq.n	2ce2 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    2ccc:	7903      	ldrb	r3, [r0, #4]
    2cce:	2b03      	cmp	r3, #3
    2cd0:	d00e      	beq.n	2cf0 <aes_write_input_data+0x38>
    2cd2:	000c      	movs	r4, r1
    2cd4:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    2cd6:	6803      	ldr	r3, [r0, #0]
    2cd8:	c904      	ldmia	r1!, {r2}
    2cda:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    2cdc:	428c      	cmp	r4, r1
    2cde:	d1fa      	bne.n	2cd6 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    2ce0:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    2ce2:	6803      	ldr	r3, [r0, #0]
    2ce4:	680a      	ldr	r2, [r1, #0]
    2ce6:	639a      	str	r2, [r3, #56]	; 0x38
    2ce8:	6803      	ldr	r3, [r0, #0]
    2cea:	684a      	ldr	r2, [r1, #4]
    2cec:	639a      	str	r2, [r3, #56]	; 0x38
    2cee:	e7f7      	b.n	2ce0 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    2cf0:	7983      	ldrb	r3, [r0, #6]
    2cf2:	3b02      	subs	r3, #2
    2cf4:	2b01      	cmp	r3, #1
    2cf6:	d8ec      	bhi.n	2cd2 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    2cf8:	6803      	ldr	r3, [r0, #0]
    2cfa:	680a      	ldr	r2, [r1, #0]
    2cfc:	639a      	str	r2, [r3, #56]	; 0x38
    2cfe:	e7ef      	b.n	2ce0 <aes_write_input_data+0x28>
    2d00:	00ff00ff 	.word	0x00ff00ff
    2d04:	00010003 	.word	0x00010003

00002d08 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    2d08:	2300      	movs	r3, #0
    2d0a:	6802      	ldr	r2, [r0, #0]
    2d0c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    2d0e:	4b10      	ldr	r3, [pc, #64]	; (2d50 <aes_read_output_data+0x48>)
    2d10:	6842      	ldr	r2, [r0, #4]
    2d12:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    2d14:	4a0f      	ldr	r2, [pc, #60]	; (2d54 <aes_read_output_data+0x4c>)
    2d16:	4293      	cmp	r3, r2
    2d18:	d00a      	beq.n	2d30 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    2d1a:	7903      	ldrb	r3, [r0, #4]
    2d1c:	2b03      	cmp	r3, #3
    2d1e:	d00e      	beq.n	2d3e <aes_read_output_data+0x36>
    2d20:	000a      	movs	r2, r1
    2d22:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    2d24:	6803      	ldr	r3, [r0, #0]
    2d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d28:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    2d2a:	428a      	cmp	r2, r1
    2d2c:	d1fa      	bne.n	2d24 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    2d2e:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    2d30:	6803      	ldr	r3, [r0, #0]
    2d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d34:	600b      	str	r3, [r1, #0]
    2d36:	6803      	ldr	r3, [r0, #0]
    2d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d3a:	604b      	str	r3, [r1, #4]
    2d3c:	e7f7      	b.n	2d2e <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    2d3e:	7983      	ldrb	r3, [r0, #6]
    2d40:	3b02      	subs	r3, #2
    2d42:	2b01      	cmp	r3, #1
    2d44:	d8ec      	bhi.n	2d20 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    2d46:	6803      	ldr	r3, [r0, #0]
    2d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d4a:	600b      	str	r3, [r1, #0]
    2d4c:	e7ef      	b.n	2d2e <aes_read_output_data+0x26>
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	00ff00ff 	.word	0x00ff00ff
    2d54:	00010003 	.word	0x00010003

00002d58 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d58:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2d5a:	2a00      	cmp	r2, #0
    2d5c:	d001      	beq.n	2d62 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2d5e:	0018      	movs	r0, r3
    2d60:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    2d62:	008b      	lsls	r3, r1, #2
    2d64:	4a06      	ldr	r2, [pc, #24]	; (2d80 <extint_register_callback+0x28>)
    2d66:	589b      	ldr	r3, [r3, r2]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d003      	beq.n	2d74 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2d6c:	4283      	cmp	r3, r0
    2d6e:	d005      	beq.n	2d7c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    2d70:	231d      	movs	r3, #29
    2d72:	e7f4      	b.n	2d5e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    2d74:	0089      	lsls	r1, r1, #2
    2d76:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    2d78:	2300      	movs	r3, #0
    2d7a:	e7f0      	b.n	2d5e <extint_register_callback+0x6>
		return STATUS_OK;
    2d7c:	2300      	movs	r3, #0
    2d7e:	e7ee      	b.n	2d5e <extint_register_callback+0x6>
    2d80:	20002034 	.word	0x20002034

00002d84 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d84:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2d86:	2900      	cmp	r1, #0
    2d88:	d001      	beq.n	2d8e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    2d8a:	0018      	movs	r0, r3
    2d8c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2d8e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    2d90:	281f      	cmp	r0, #31
    2d92:	d800      	bhi.n	2d96 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    2d94:	4a02      	ldr	r2, [pc, #8]	; (2da0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    2d96:	2301      	movs	r3, #1
    2d98:	4083      	lsls	r3, r0
    2d9a:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    2d9c:	2300      	movs	r3, #0
    2d9e:	e7f4      	b.n	2d8a <extint_chan_enable_callback+0x6>
    2da0:	40002400 	.word	0x40002400

00002da4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2da4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2da6:	2200      	movs	r2, #0
    2da8:	4b10      	ldr	r3, [pc, #64]	; (2dec <EIC_Handler+0x48>)
    2daa:	701a      	strb	r2, [r3, #0]
    2dac:	2300      	movs	r3, #0
    2dae:	4910      	ldr	r1, [pc, #64]	; (2df0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2db0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2db2:	4e10      	ldr	r6, [pc, #64]	; (2df4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2db4:	4c0d      	ldr	r4, [pc, #52]	; (2dec <EIC_Handler+0x48>)
    2db6:	e00a      	b.n	2dce <EIC_Handler+0x2a>
		return eics[eic_index];
    2db8:	490d      	ldr	r1, [pc, #52]	; (2df0 <EIC_Handler+0x4c>)
    2dba:	e008      	b.n	2dce <EIC_Handler+0x2a>
    2dbc:	7823      	ldrb	r3, [r4, #0]
    2dbe:	3301      	adds	r3, #1
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	7023      	strb	r3, [r4, #0]
    2dc4:	2b0f      	cmp	r3, #15
    2dc6:	d810      	bhi.n	2dea <EIC_Handler+0x46>
		return NULL;
    2dc8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2dca:	2b1f      	cmp	r3, #31
    2dcc:	d9f4      	bls.n	2db8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2dce:	0028      	movs	r0, r5
    2dd0:	4018      	ands	r0, r3
    2dd2:	2201      	movs	r2, #1
    2dd4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2dd6:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    2dd8:	4210      	tst	r0, r2
    2dda:	d0ef      	beq.n	2dbc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2ddc:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2dde:	009b      	lsls	r3, r3, #2
    2de0:	599b      	ldr	r3, [r3, r6]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d0ea      	beq.n	2dbc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2de6:	4798      	blx	r3
    2de8:	e7e8      	b.n	2dbc <EIC_Handler+0x18>
			}
		}
	}
}
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	20002030 	.word	0x20002030
    2df0:	40002400 	.word	0x40002400
    2df4:	20002034 	.word	0x20002034

00002df8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2df8:	4a06      	ldr	r2, [pc, #24]	; (2e14 <_extint_enable+0x1c>)
    2dfa:	7813      	ldrb	r3, [r2, #0]
    2dfc:	2102      	movs	r1, #2
    2dfe:	430b      	orrs	r3, r1
    2e00:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e02:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e04:	6853      	ldr	r3, [r2, #4]
    2e06:	4219      	tst	r1, r3
    2e08:	d1fc      	bne.n	2e04 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e0a:	6853      	ldr	r3, [r2, #4]
    2e0c:	4218      	tst	r0, r3
    2e0e:	d1f9      	bne.n	2e04 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2e10:	4770      	bx	lr
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	40002400 	.word	0x40002400

00002e18 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    2e18:	4a06      	ldr	r2, [pc, #24]	; (2e34 <_extint_disable+0x1c>)
    2e1a:	7813      	ldrb	r3, [r2, #0]
    2e1c:	2102      	movs	r1, #2
    2e1e:	438b      	bics	r3, r1
    2e20:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e22:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e24:	6853      	ldr	r3, [r2, #4]
    2e26:	4219      	tst	r1, r3
    2e28:	d1fc      	bne.n	2e24 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e2a:	6853      	ldr	r3, [r2, #4]
    2e2c:	4218      	tst	r0, r3
    2e2e:	d1f9      	bne.n	2e24 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2e30:	4770      	bx	lr
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	40002400 	.word	0x40002400

00002e38 <_system_extint_init>:
{
    2e38:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    2e3a:	4a12      	ldr	r2, [pc, #72]	; (2e84 <_system_extint_init+0x4c>)
    2e3c:	6951      	ldr	r1, [r2, #20]
    2e3e:	2380      	movs	r3, #128	; 0x80
    2e40:	009b      	lsls	r3, r3, #2
    2e42:	430b      	orrs	r3, r1
    2e44:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    2e46:	4a10      	ldr	r2, [pc, #64]	; (2e88 <_system_extint_init+0x50>)
    2e48:	7813      	ldrb	r3, [r2, #0]
    2e4a:	2101      	movs	r1, #1
    2e4c:	430b      	orrs	r3, r1
    2e4e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e50:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e52:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2e54:	6853      	ldr	r3, [r2, #4]
    2e56:	4219      	tst	r1, r3
    2e58:	d1fc      	bne.n	2e54 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2e5a:	6853      	ldr	r3, [r2, #4]
    2e5c:	4218      	tst	r0, r3
    2e5e:	d1f9      	bne.n	2e54 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    2e60:	4a09      	ldr	r2, [pc, #36]	; (2e88 <_system_extint_init+0x50>)
    2e62:	7813      	ldrb	r3, [r2, #0]
    2e64:	2110      	movs	r1, #16
    2e66:	430b      	orrs	r3, r1
    2e68:	7013      	strb	r3, [r2, #0]
    2e6a:	4b08      	ldr	r3, [pc, #32]	; (2e8c <_system_extint_init+0x54>)
    2e6c:	0019      	movs	r1, r3
    2e6e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2e70:	2200      	movs	r2, #0
    2e72:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2e74:	428b      	cmp	r3, r1
    2e76:	d1fc      	bne.n	2e72 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e78:	2208      	movs	r2, #8
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <_system_extint_init+0x58>)
    2e7c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2e7e:	4b05      	ldr	r3, [pc, #20]	; (2e94 <_system_extint_init+0x5c>)
    2e80:	4798      	blx	r3
}
    2e82:	bd10      	pop	{r4, pc}
    2e84:	40000400 	.word	0x40000400
    2e88:	40002400 	.word	0x40002400
    2e8c:	20002034 	.word	0x20002034
    2e90:	e000e100 	.word	0xe000e100
    2e94:	00002df9 	.word	0x00002df9

00002e98 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2e98:	2300      	movs	r3, #0
    2e9a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2e9c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2e9e:	2201      	movs	r2, #1
    2ea0:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    2ea2:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2ea4:	3201      	adds	r2, #1
    2ea6:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    2ea8:	7243      	strb	r3, [r0, #9]
}
    2eaa:	4770      	bx	lr

00002eac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	b083      	sub	sp, #12
    2eb0:	0005      	movs	r5, r0
    2eb2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    2eb4:	4b1c      	ldr	r3, [pc, #112]	; (2f28 <extint_chan_set_config+0x7c>)
    2eb6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2eb8:	a901      	add	r1, sp, #4
    2eba:	2300      	movs	r3, #0
    2ebc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2ebe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2ec0:	7923      	ldrb	r3, [r4, #4]
    2ec2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2ec4:	7a23      	ldrb	r3, [r4, #8]
    2ec6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2ec8:	7820      	ldrb	r0, [r4, #0]
    2eca:	4b18      	ldr	r3, [pc, #96]	; (2f2c <extint_chan_set_config+0x80>)
    2ecc:	4798      	blx	r3
		return NULL;
    2ece:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2ed0:	2d1f      	cmp	r5, #31
    2ed2:	d800      	bhi.n	2ed6 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    2ed4:	4916      	ldr	r1, [pc, #88]	; (2f30 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2ed6:	2207      	movs	r2, #7
    2ed8:	402a      	ands	r2, r5
    2eda:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2edc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2ede:	7aa3      	ldrb	r3, [r4, #10]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d001      	beq.n	2ee8 <extint_chan_set_config+0x3c>
    2ee4:	2308      	movs	r3, #8
    2ee6:	431f      	orrs	r7, r3
    2ee8:	08eb      	lsrs	r3, r5, #3
    2eea:	009b      	lsls	r3, r3, #2
    2eec:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2eee:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2ef0:	260f      	movs	r6, #15
    2ef2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2ef4:	43b0      	bics	r0, r6
			(new_config << config_pos);
    2ef6:	4097      	lsls	r7, r2
    2ef8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2efa:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    2efc:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    2efe:	7a63      	ldrb	r3, [r4, #9]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d10b      	bne.n	2f1c <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    2f04:	698a      	ldr	r2, [r1, #24]
    2f06:	2301      	movs	r3, #1
    2f08:	40ab      	lsls	r3, r5
    2f0a:	43db      	mvns	r3, r3
    2f0c:	041b      	lsls	r3, r3, #16
    2f0e:	0c1b      	lsrs	r3, r3, #16
    2f10:	4013      	ands	r3, r2
    2f12:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    2f14:	4b07      	ldr	r3, [pc, #28]	; (2f34 <extint_chan_set_config+0x88>)
    2f16:	4798      	blx	r3
}
    2f18:	b003      	add	sp, #12
    2f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    2f1c:	698a      	ldr	r2, [r1, #24]
    2f1e:	2301      	movs	r3, #1
    2f20:	40ab      	lsls	r3, r5
    2f22:	4313      	orrs	r3, r2
    2f24:	618b      	str	r3, [r1, #24]
    2f26:	e7f5      	b.n	2f14 <extint_chan_set_config+0x68>
    2f28:	00002e19 	.word	0x00002e19
    2f2c:	00005715 	.word	0x00005715
    2f30:	40002400 	.word	0x40002400
    2f34:	00002df9 	.word	0x00002df9

00002f38 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2f38:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    2f3a:	4a1e      	ldr	r2, [pc, #120]	; (2fb4 <nvm_set_config+0x7c>)
    2f3c:	6993      	ldr	r3, [r2, #24]
    2f3e:	2104      	movs	r1, #4
    2f40:	430b      	orrs	r3, r1
    2f42:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f44:	4b1c      	ldr	r3, [pc, #112]	; (2fb8 <nvm_set_config+0x80>)
    2f46:	2220      	movs	r2, #32
    2f48:	32ff      	adds	r2, #255	; 0xff
    2f4a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2f4c:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    2f4e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    2f50:	07d2      	lsls	r2, r2, #31
    2f52:	d401      	bmi.n	2f58 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    2f54:	0018      	movs	r0, r3
    2f56:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2f58:	7803      	ldrb	r3, [r0, #0]
    2f5a:	021b      	lsls	r3, r3, #8
    2f5c:	22c0      	movs	r2, #192	; 0xc0
    2f5e:	0092      	lsls	r2, r2, #2
    2f60:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2f62:	7841      	ldrb	r1, [r0, #1]
    2f64:	01c9      	lsls	r1, r1, #7
    2f66:	22ff      	movs	r2, #255	; 0xff
    2f68:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2f6a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2f6c:	7881      	ldrb	r1, [r0, #2]
    2f6e:	0049      	lsls	r1, r1, #1
    2f70:	221e      	movs	r2, #30
    2f72:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2f74:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2f76:	78c2      	ldrb	r2, [r0, #3]
    2f78:	0492      	lsls	r2, r2, #18
    2f7a:	2180      	movs	r1, #128	; 0x80
    2f7c:	02c9      	lsls	r1, r1, #11
    2f7e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2f80:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2f82:	7902      	ldrb	r2, [r0, #4]
    2f84:	0412      	lsls	r2, r2, #16
    2f86:	21c0      	movs	r1, #192	; 0xc0
    2f88:	0289      	lsls	r1, r1, #10
    2f8a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2f8c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    2f8e:	4a0a      	ldr	r2, [pc, #40]	; (2fb8 <nvm_set_config+0x80>)
    2f90:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2f92:	6893      	ldr	r3, [r2, #8]
    2f94:	035b      	lsls	r3, r3, #13
    2f96:	0f5b      	lsrs	r3, r3, #29
    2f98:	4908      	ldr	r1, [pc, #32]	; (2fbc <nvm_set_config+0x84>)
    2f9a:	2408      	movs	r4, #8
    2f9c:	409c      	lsls	r4, r3
    2f9e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2fa0:	6893      	ldr	r3, [r2, #8]
    2fa2:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2fa4:	7843      	ldrb	r3, [r0, #1]
    2fa6:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2fa8:	8b13      	ldrh	r3, [r2, #24]
    2faa:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    2fac:	0fdb      	lsrs	r3, r3, #31
    2fae:	011b      	lsls	r3, r3, #4
    2fb0:	e7d0      	b.n	2f54 <nvm_set_config+0x1c>
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	40000400 	.word	0x40000400
    2fb8:	41004000 	.word	0x41004000
    2fbc:	200009f0 	.word	0x200009f0

00002fc0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2fc0:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2fc2:	4a30      	ldr	r2, [pc, #192]	; (3084 <nvm_execute_command+0xc4>)
    2fc4:	8814      	ldrh	r4, [r2, #0]
    2fc6:	8853      	ldrh	r3, [r2, #2]
    2fc8:	4363      	muls	r3, r4
    2fca:	428b      	cmp	r3, r1
    2fcc:	d20b      	bcs.n	2fe6 <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2fce:	2280      	movs	r2, #128	; 0x80
    2fd0:	0192      	lsls	r2, r2, #6
    2fd2:	4b2d      	ldr	r3, [pc, #180]	; (3088 <nvm_execute_command+0xc8>)
    2fd4:	18cb      	adds	r3, r1, r3
    2fd6:	4293      	cmp	r3, r2
    2fd8:	d905      	bls.n	2fe6 <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    2fda:	4c2c      	ldr	r4, [pc, #176]	; (308c <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    2fdc:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    2fde:	4a2c      	ldr	r2, [pc, #176]	; (3090 <nvm_execute_command+0xd0>)
    2fe0:	188a      	adds	r2, r1, r2
    2fe2:	42a2      	cmp	r2, r4
    2fe4:	d80e      	bhi.n	3004 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2fe6:	4b2b      	ldr	r3, [pc, #172]	; (3094 <nvm_execute_command+0xd4>)
    2fe8:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2fea:	2280      	movs	r2, #128	; 0x80
    2fec:	02d2      	lsls	r2, r2, #11
    2fee:	4322      	orrs	r2, r4
    2ff0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ff2:	2220      	movs	r2, #32
    2ff4:	32ff      	adds	r2, #255	; 0xff
    2ff6:	831a      	strh	r2, [r3, #24]
    2ff8:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2ffa:	07db      	lsls	r3, r3, #31
    2ffc:	d404      	bmi.n	3008 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2ffe:	4b25      	ldr	r3, [pc, #148]	; (3094 <nvm_execute_command+0xd4>)
    3000:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    3002:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    3004:	0018      	movs	r0, r3
    3006:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    3008:	2845      	cmp	r0, #69	; 0x45
    300a:	d829      	bhi.n	3060 <nvm_execute_command+0xa0>
    300c:	0083      	lsls	r3, r0, #2
    300e:	4a22      	ldr	r2, [pc, #136]	; (3098 <nvm_execute_command+0xd8>)
    3010:	58d3      	ldr	r3, [r2, r3]
    3012:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3014:	4b1f      	ldr	r3, [pc, #124]	; (3094 <nvm_execute_command+0xd4>)
    3016:	8b1b      	ldrh	r3, [r3, #24]
    3018:	05db      	lsls	r3, r3, #23
    301a:	d503      	bpl.n	3024 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    301c:	4b1d      	ldr	r3, [pc, #116]	; (3094 <nvm_execute_command+0xd4>)
    301e:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    3020:	2310      	movs	r3, #16
    3022:	e7ef      	b.n	3004 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    3024:	0889      	lsrs	r1, r1, #2
    3026:	0049      	lsls	r1, r1, #1
    3028:	4b1a      	ldr	r3, [pc, #104]	; (3094 <nvm_execute_command+0xd4>)
    302a:	61d9      	str	r1, [r3, #28]
			break;
    302c:	e003      	b.n	3036 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    302e:	0889      	lsrs	r1, r1, #2
    3030:	0049      	lsls	r1, r1, #1
    3032:	4b18      	ldr	r3, [pc, #96]	; (3094 <nvm_execute_command+0xd4>)
    3034:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    3036:	23fd      	movs	r3, #253	; 0xfd
    3038:	0005      	movs	r5, r0
    303a:	3d1a      	subs	r5, #26
    303c:	401d      	ands	r5, r3
    303e:	d013      	beq.n	3068 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    3040:	23a5      	movs	r3, #165	; 0xa5
    3042:	021b      	lsls	r3, r3, #8
    3044:	4318      	orrs	r0, r3
    3046:	4b13      	ldr	r3, [pc, #76]	; (3094 <nvm_execute_command+0xd4>)
    3048:	8018      	strh	r0, [r3, #0]
    304a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    304c:	2201      	movs	r2, #1
    304e:	7d0b      	ldrb	r3, [r1, #20]
    3050:	4213      	tst	r3, r2
    3052:	d0fc      	beq.n	304e <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    3054:	2d00      	cmp	r5, #0
    3056:	d00f      	beq.n	3078 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <nvm_execute_command+0xd4>)
    305a:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    305c:	2300      	movs	r3, #0
    305e:	e7d1      	b.n	3004 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    3060:	4b0c      	ldr	r3, [pc, #48]	; (3094 <nvm_execute_command+0xd4>)
    3062:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    3064:	2317      	movs	r3, #23
    3066:	e7cd      	b.n	3004 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    3068:	4b0a      	ldr	r3, [pc, #40]	; (3094 <nvm_execute_command+0xd4>)
    306a:	6859      	ldr	r1, [r3, #4]
    306c:	2280      	movs	r2, #128	; 0x80
    306e:	02d2      	lsls	r2, r2, #11
    3070:	430a      	orrs	r2, r1
    3072:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    3074:	685b      	ldr	r3, [r3, #4]
    3076:	e7e3      	b.n	3040 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    3078:	4a06      	ldr	r2, [pc, #24]	; (3094 <nvm_execute_command+0xd4>)
    307a:	6853      	ldr	r3, [r2, #4]
    307c:	4907      	ldr	r1, [pc, #28]	; (309c <nvm_execute_command+0xdc>)
    307e:	400b      	ands	r3, r1
    3080:	6053      	str	r3, [r2, #4]
    3082:	e7e9      	b.n	3058 <nvm_execute_command+0x98>
    3084:	200009f0 	.word	0x200009f0
    3088:	ff7fc000 	.word	0xff7fc000
    308c:	00001fff 	.word	0x00001fff
    3090:	ffc00000 	.word	0xffc00000
    3094:	41004000 	.word	0x41004000
    3098:	0001e16c 	.word	0x0001e16c
    309c:	fffbffff 	.word	0xfffbffff

000030a0 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    30a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    30a2:	4b2f      	ldr	r3, [pc, #188]	; (3160 <nvm_write_buffer+0xc0>)
    30a4:	881c      	ldrh	r4, [r3, #0]
    30a6:	885b      	ldrh	r3, [r3, #2]
    30a8:	4363      	muls	r3, r4
	if (destination_address >
    30aa:	4283      	cmp	r3, r0
    30ac:	d207      	bcs.n	30be <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    30ae:	4e2d      	ldr	r6, [pc, #180]	; (3164 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    30b0:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    30b2:	4b2d      	ldr	r3, [pc, #180]	; (3168 <nvm_write_buffer+0xc8>)
    30b4:	18c3      	adds	r3, r0, r3
    30b6:	42b3      	cmp	r3, r6
    30b8:	d806      	bhi.n	30c8 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    30ba:	2601      	movs	r6, #1
    30bc:	e000      	b.n	30c0 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    30be:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    30c0:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    30c2:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    30c4:	4218      	tst	r0, r3
    30c6:	d001      	beq.n	30cc <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    30c8:	0028      	movs	r0, r5
    30ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    30cc:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    30ce:	4294      	cmp	r4, r2
    30d0:	d3fa      	bcc.n	30c8 <nvm_write_buffer+0x28>
    30d2:	4b26      	ldr	r3, [pc, #152]	; (316c <nvm_write_buffer+0xcc>)
    30d4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    30d6:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    30d8:	07db      	lsls	r3, r3, #31
    30da:	d5f5      	bpl.n	30c8 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    30dc:	4c24      	ldr	r4, [pc, #144]	; (3170 <nvm_write_buffer+0xd0>)
    30de:	4b23      	ldr	r3, [pc, #140]	; (316c <nvm_write_buffer+0xcc>)
    30e0:	801c      	strh	r4, [r3, #0]
    30e2:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    30e4:	2401      	movs	r4, #1
    30e6:	7d2b      	ldrb	r3, [r5, #20]
    30e8:	4223      	tst	r3, r4
    30ea:	d0fc      	beq.n	30e6 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    30ec:	2420      	movs	r4, #32
    30ee:	34ff      	adds	r4, #255	; 0xff
    30f0:	4b1e      	ldr	r3, [pc, #120]	; (316c <nvm_write_buffer+0xcc>)
    30f2:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    30f4:	2a00      	cmp	r2, #0
    30f6:	d02c      	beq.n	3152 <nvm_write_buffer+0xb2>
    30f8:	2301      	movs	r3, #1
    30fa:	0005      	movs	r5, r0
    30fc:	439d      	bics	r5, r3
    30fe:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    3100:	1e54      	subs	r4, r2, #1
    3102:	46a4      	mov	ip, r4
    3104:	e009      	b.n	311a <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    3106:	18cf      	adds	r7, r1, r3
    3108:	787f      	ldrb	r7, [r7, #1]
    310a:	023f      	lsls	r7, r7, #8
    310c:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    310e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    3110:	3302      	adds	r3, #2
    3112:	b29b      	uxth	r3, r3
    3114:	3502      	adds	r5, #2
    3116:	429a      	cmp	r2, r3
    3118:	d904      	bls.n	3124 <nvm_write_buffer+0x84>
		data = buffer[i];
    311a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    311c:	4563      	cmp	r3, ip
    311e:	dbf2      	blt.n	3106 <nvm_write_buffer+0x66>
		data = buffer[i];
    3120:	b2a4      	uxth	r4, r4
    3122:	e7f4      	b.n	310e <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3124:	4b0e      	ldr	r3, [pc, #56]	; (3160 <nvm_write_buffer+0xc0>)
    3126:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3128:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    312a:	2b00      	cmp	r3, #0
    312c:	d1cc      	bne.n	30c8 <nvm_write_buffer+0x28>
    312e:	2a3f      	cmp	r2, #63	; 0x3f
    3130:	d8ca      	bhi.n	30c8 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    3132:	2e00      	cmp	r6, #0
    3134:	d106      	bne.n	3144 <nvm_write_buffer+0xa4>
    3136:	2200      	movs	r2, #0
    3138:	0001      	movs	r1, r0
    313a:	2004      	movs	r0, #4
    313c:	4b0d      	ldr	r3, [pc, #52]	; (3174 <nvm_write_buffer+0xd4>)
    313e:	4798      	blx	r3
    3140:	0005      	movs	r5, r0
    3142:	e7c1      	b.n	30c8 <nvm_write_buffer+0x28>
    3144:	2200      	movs	r2, #0
    3146:	0001      	movs	r1, r0
    3148:	201c      	movs	r0, #28
    314a:	4b0a      	ldr	r3, [pc, #40]	; (3174 <nvm_write_buffer+0xd4>)
    314c:	4798      	blx	r3
    314e:	0005      	movs	r5, r0
    3150:	e7ba      	b.n	30c8 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3152:	4b03      	ldr	r3, [pc, #12]	; (3160 <nvm_write_buffer+0xc0>)
    3154:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3156:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3158:	2b00      	cmp	r3, #0
    315a:	d0ea      	beq.n	3132 <nvm_write_buffer+0x92>
    315c:	e7b4      	b.n	30c8 <nvm_write_buffer+0x28>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	200009f0 	.word	0x200009f0
    3164:	00001fff 	.word	0x00001fff
    3168:	ffc00000 	.word	0xffc00000
    316c:	41004000 	.word	0x41004000
    3170:	ffffa544 	.word	0xffffa544
    3174:	00002fc1 	.word	0x00002fc1

00003178 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    3178:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    317a:	4b1b      	ldr	r3, [pc, #108]	; (31e8 <nvm_read_buffer+0x70>)
    317c:	881c      	ldrh	r4, [r3, #0]
    317e:	885b      	ldrh	r3, [r3, #2]
    3180:	4363      	muls	r3, r4
	if (source_address >
    3182:	4283      	cmp	r3, r0
    3184:	d205      	bcs.n	3192 <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3186:	4e19      	ldr	r6, [pc, #100]	; (31ec <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3188:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    318a:	4b19      	ldr	r3, [pc, #100]	; (31f0 <nvm_read_buffer+0x78>)
    318c:	18c3      	adds	r3, r0, r3
    318e:	42b3      	cmp	r3, r6
    3190:	d803      	bhi.n	319a <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    3192:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    3194:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    3196:	4218      	tst	r0, r3
    3198:	d001      	beq.n	319e <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    319a:	0028      	movs	r0, r5
    319c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    319e:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    31a0:	4294      	cmp	r4, r2
    31a2:	d3fa      	bcc.n	319a <nvm_read_buffer+0x22>
    31a4:	4b13      	ldr	r3, [pc, #76]	; (31f4 <nvm_read_buffer+0x7c>)
    31a6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    31a8:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    31aa:	07db      	lsls	r3, r3, #31
    31ac:	d5f5      	bpl.n	319a <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    31ae:	2420      	movs	r4, #32
    31b0:	34ff      	adds	r4, #255	; 0xff
    31b2:	4b10      	ldr	r3, [pc, #64]	; (31f4 <nvm_read_buffer+0x7c>)
    31b4:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    31b6:	2a00      	cmp	r2, #0
    31b8:	d014      	beq.n	31e4 <nvm_read_buffer+0x6c>
    31ba:	2301      	movs	r3, #1
    31bc:	4398      	bics	r0, r3
    31be:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    31c0:	1e56      	subs	r6, r2, #1
    31c2:	e004      	b.n	31ce <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    31c4:	3302      	adds	r3, #2
    31c6:	b29b      	uxth	r3, r3
    31c8:	3002      	adds	r0, #2
    31ca:	429a      	cmp	r2, r3
    31cc:	d908      	bls.n	31e0 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    31ce:	8804      	ldrh	r4, [r0, #0]
    31d0:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    31d2:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    31d4:	42b3      	cmp	r3, r6
    31d6:	daf5      	bge.n	31c4 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    31d8:	18cd      	adds	r5, r1, r3
    31da:	0a24      	lsrs	r4, r4, #8
    31dc:	706c      	strb	r4, [r5, #1]
    31de:	e7f1      	b.n	31c4 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    31e0:	2500      	movs	r5, #0
    31e2:	e7da      	b.n	319a <nvm_read_buffer+0x22>
    31e4:	2500      	movs	r5, #0
    31e6:	e7d8      	b.n	319a <nvm_read_buffer+0x22>
    31e8:	200009f0 	.word	0x200009f0
    31ec:	00001fff 	.word	0x00001fff
    31f0:	ffc00000 	.word	0xffc00000
    31f4:	41004000 	.word	0x41004000

000031f8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    31f8:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    31fa:	4a22      	ldr	r2, [pc, #136]	; (3284 <nvm_erase_row+0x8c>)
    31fc:	8813      	ldrh	r3, [r2, #0]
    31fe:	8852      	ldrh	r2, [r2, #2]
    3200:	435a      	muls	r2, r3
	if (row_address >
    3202:	4282      	cmp	r2, r0
    3204:	d207      	bcs.n	3216 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3206:	4c20      	ldr	r4, [pc, #128]	; (3288 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3208:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    320a:	4920      	ldr	r1, [pc, #128]	; (328c <nvm_erase_row+0x94>)
    320c:	1841      	adds	r1, r0, r1
    320e:	42a1      	cmp	r1, r4
    3210:	d807      	bhi.n	3222 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    3212:	2401      	movs	r4, #1
    3214:	e000      	b.n	3218 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    3216:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    3218:	009b      	lsls	r3, r3, #2
    321a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    321c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    321e:	4218      	tst	r0, r3
    3220:	d001      	beq.n	3226 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    3222:	0010      	movs	r0, r2
    3224:	bd10      	pop	{r4, pc}
    3226:	4b1a      	ldr	r3, [pc, #104]	; (3290 <nvm_erase_row+0x98>)
    3228:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    322a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    322c:	07db      	lsls	r3, r3, #31
    322e:	d5f8      	bpl.n	3222 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3230:	4b17      	ldr	r3, [pc, #92]	; (3290 <nvm_erase_row+0x98>)
    3232:	2220      	movs	r2, #32
    3234:	32ff      	adds	r2, #255	; 0xff
    3236:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3238:	0880      	lsrs	r0, r0, #2
    323a:	0040      	lsls	r0, r0, #1
    323c:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    323e:	2c00      	cmp	r4, #0
    3240:	d01b      	beq.n	327a <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    3242:	6859      	ldr	r1, [r3, #4]
    3244:	2280      	movs	r2, #128	; 0x80
    3246:	02d2      	lsls	r2, r2, #11
    3248:	430a      	orrs	r2, r1
    324a:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    324c:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    324e:	4a11      	ldr	r2, [pc, #68]	; (3294 <nvm_erase_row+0x9c>)
    3250:	801a      	strh	r2, [r3, #0]
    3252:	490f      	ldr	r1, [pc, #60]	; (3290 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    3254:	2201      	movs	r2, #1
    3256:	7d0b      	ldrb	r3, [r1, #20]
    3258:	4213      	tst	r3, r2
    325a:	d0fc      	beq.n	3256 <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    325c:	2c00      	cmp	r4, #0
    325e:	d004      	beq.n	326a <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    3260:	4a0b      	ldr	r2, [pc, #44]	; (3290 <nvm_erase_row+0x98>)
    3262:	6853      	ldr	r3, [r2, #4]
    3264:	490c      	ldr	r1, [pc, #48]	; (3298 <nvm_erase_row+0xa0>)
    3266:	400b      	ands	r3, r1
    3268:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    326a:	4b09      	ldr	r3, [pc, #36]	; (3290 <nvm_erase_row+0x98>)
    326c:	8b1a      	ldrh	r2, [r3, #24]
    326e:	201c      	movs	r0, #28
    3270:	4002      	ands	r2, r0
	return STATUS_OK;
    3272:	1e50      	subs	r0, r2, #1
    3274:	4182      	sbcs	r2, r0
    3276:	0092      	lsls	r2, r2, #2
    3278:	e7d3      	b.n	3222 <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    327a:	4a08      	ldr	r2, [pc, #32]	; (329c <nvm_erase_row+0xa4>)
    327c:	4b04      	ldr	r3, [pc, #16]	; (3290 <nvm_erase_row+0x98>)
    327e:	801a      	strh	r2, [r3, #0]
    3280:	e7e7      	b.n	3252 <nvm_erase_row+0x5a>
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	200009f0 	.word	0x200009f0
    3288:	00001fff 	.word	0x00001fff
    328c:	ffc00000 	.word	0xffc00000
    3290:	41004000 	.word	0x41004000
    3294:	ffffa51a 	.word	0xffffa51a
    3298:	fffbffff 	.word	0xfffbffff
    329c:	ffffa502 	.word	0xffffa502

000032a0 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    32a0:	4b15      	ldr	r3, [pc, #84]	; (32f8 <nvm_get_parameters+0x58>)
    32a2:	2220      	movs	r2, #32
    32a4:	32ff      	adds	r2, #255	; 0xff
    32a6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    32a8:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    32aa:	0359      	lsls	r1, r3, #13
    32ac:	0f49      	lsrs	r1, r1, #29
    32ae:	3a18      	subs	r2, #24
    32b0:	3aff      	subs	r2, #255	; 0xff
    32b2:	408a      	lsls	r2, r1
	parameters->page_size =
    32b4:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    32b6:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    32b8:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    32ba:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    32bc:	4b0f      	ldr	r3, [pc, #60]	; (32fc <nvm_get_parameters+0x5c>)
    32be:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    32c0:	065b      	lsls	r3, r3, #25
    32c2:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    32c4:	2b07      	cmp	r3, #7
    32c6:	d010      	beq.n	32ea <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    32c8:	2206      	movs	r2, #6
    32ca:	1ad2      	subs	r2, r2, r3
    32cc:	2304      	movs	r3, #4
    32ce:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    32d0:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    32d2:	4b0a      	ldr	r3, [pc, #40]	; (32fc <nvm_get_parameters+0x5c>)
    32d4:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    32da:	2b07      	cmp	r3, #7
    32dc:	d008      	beq.n	32f0 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    32de:	2207      	movs	r2, #7
    32e0:	1ad2      	subs	r2, r2, r3
    32e2:	2304      	movs	r3, #4
    32e4:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    32e6:	6083      	str	r3, [r0, #8]
	}
}
    32e8:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    32ea:	2300      	movs	r3, #0
    32ec:	6043      	str	r3, [r0, #4]
    32ee:	e7f0      	b.n	32d2 <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    32f0:	2300      	movs	r3, #0
    32f2:	6083      	str	r3, [r0, #8]
    32f4:	e7f8      	b.n	32e8 <nvm_get_parameters+0x48>
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	41004000 	.word	0x41004000
    32fc:	00804000 	.word	0x00804000

00003300 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3300:	b500      	push	{lr}
    3302:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3304:	ab01      	add	r3, sp, #4
    3306:	2280      	movs	r2, #128	; 0x80
    3308:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    330a:	780a      	ldrb	r2, [r1, #0]
    330c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    330e:	784a      	ldrb	r2, [r1, #1]
    3310:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3312:	788a      	ldrb	r2, [r1, #2]
    3314:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3316:	0019      	movs	r1, r3
    3318:	4b01      	ldr	r3, [pc, #4]	; (3320 <port_pin_set_config+0x20>)
    331a:	4798      	blx	r3
}
    331c:	b003      	add	sp, #12
    331e:	bd00      	pop	{pc}
    3320:	00005715 	.word	0x00005715

00003324 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3324:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    3326:	6918      	ldr	r0, [r3, #16]
    3328:	1e43      	subs	r3, r0, #1
    332a:	4198      	sbcs	r0, r3
    332c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    332e:	4770      	bx	lr

00003330 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    3330:	b570      	push	{r4, r5, r6, lr}
    3332:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3334:	6806      	ldr	r6, [r0, #0]
    3336:	2204      	movs	r2, #4
    3338:	4b08      	ldr	r3, [pc, #32]	; (335c <rtc_count_enable+0x2c>)
    333a:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    333c:	4d08      	ldr	r5, [pc, #32]	; (3360 <rtc_count_enable+0x30>)
    333e:	0020      	movs	r0, r4
    3340:	47a8      	blx	r5
    3342:	2800      	cmp	r0, #0
    3344:	d1fb      	bne.n	333e <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    3346:	8833      	ldrh	r3, [r6, #0]
    3348:	2202      	movs	r2, #2
    334a:	4313      	orrs	r3, r2
    334c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    334e:	4d04      	ldr	r5, [pc, #16]	; (3360 <rtc_count_enable+0x30>)
    3350:	0020      	movs	r0, r4
    3352:	47a8      	blx	r5
    3354:	2800      	cmp	r0, #0
    3356:	d1fb      	bne.n	3350 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    3358:	bd70      	pop	{r4, r5, r6, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	e000e100 	.word	0xe000e100
    3360:	00003325 	.word	0x00003325

00003364 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3368:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    336a:	2104      	movs	r1, #4
    336c:	2380      	movs	r3, #128	; 0x80
    336e:	4a0a      	ldr	r2, [pc, #40]	; (3398 <rtc_count_disable+0x34>)
    3370:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    3372:	4d0a      	ldr	r5, [pc, #40]	; (339c <rtc_count_disable+0x38>)
    3374:	0020      	movs	r0, r4
    3376:	47a8      	blx	r5
    3378:	2800      	cmp	r0, #0
    337a:	d1fb      	bne.n	3374 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    337c:	4b08      	ldr	r3, [pc, #32]	; (33a0 <rtc_count_disable+0x3c>)
    337e:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    3380:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    3382:	8833      	ldrh	r3, [r6, #0]
    3384:	2202      	movs	r2, #2
    3386:	4393      	bics	r3, r2
    3388:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    338a:	4d04      	ldr	r5, [pc, #16]	; (339c <rtc_count_disable+0x38>)
    338c:	0020      	movs	r0, r4
    338e:	47a8      	blx	r5
    3390:	2800      	cmp	r0, #0
    3392:	d1fb      	bne.n	338c <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	e000e100 	.word	0xe000e100
    339c:	00003325 	.word	0x00003325
    33a0:	ffff81ff 	.word	0xffff81ff

000033a4 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    33a4:	b570      	push	{r4, r5, r6, lr}
    33a6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33a8:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <rtc_count_reset+0x30>)
    33ac:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    33ae:	2300      	movs	r3, #0
    33b0:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    33b2:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    33b4:	4d08      	ldr	r5, [pc, #32]	; (33d8 <rtc_count_reset+0x34>)
    33b6:	0020      	movs	r0, r4
    33b8:	47a8      	blx	r5
    33ba:	2800      	cmp	r0, #0
    33bc:	d1fb      	bne.n	33b6 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    33be:	8833      	ldrh	r3, [r6, #0]
    33c0:	2201      	movs	r2, #1
    33c2:	4313      	orrs	r3, r2
    33c4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    33c6:	4d04      	ldr	r5, [pc, #16]	; (33d8 <rtc_count_reset+0x34>)
    33c8:	0020      	movs	r0, r4
    33ca:	47a8      	blx	r5
    33cc:	2800      	cmp	r0, #0
    33ce:	d1fb      	bne.n	33c8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	00003365 	.word	0x00003365
    33d8:	00003325 	.word	0x00003325

000033dc <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33de:	0004      	movs	r4, r0
    33e0:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33e2:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    33e4:	4d0c      	ldr	r5, [pc, #48]	; (3418 <rtc_count_set_count+0x3c>)
    33e6:	0020      	movs	r0, r4
    33e8:	47a8      	blx	r5
    33ea:	2800      	cmp	r0, #0
    33ec:	d1fb      	bne.n	33e6 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    33ee:	7923      	ldrb	r3, [r4, #4]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d009      	beq.n	3408 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    33f4:	2017      	movs	r0, #23
	switch(module->mode){
    33f6:	2b01      	cmp	r3, #1
    33f8:	d105      	bne.n	3406 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    33fa:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    33fc:	4d06      	ldr	r5, [pc, #24]	; (3418 <rtc_count_set_count+0x3c>)
    33fe:	0020      	movs	r0, r4
    3400:	47a8      	blx	r5
    3402:	2800      	cmp	r0, #0
    3404:	d1fb      	bne.n	33fe <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    3406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    3408:	4b04      	ldr	r3, [pc, #16]	; (341c <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    340a:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    340c:	429e      	cmp	r6, r3
    340e:	d8fa      	bhi.n	3406 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    3410:	b2b6      	uxth	r6, r6
    3412:	833e      	strh	r6, [r7, #24]
			break;
    3414:	e7f2      	b.n	33fc <rtc_count_set_count+0x20>
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	00003325 	.word	0x00003325
    341c:	0000ffff 	.word	0x0000ffff

00003420 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3424:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    3426:	4d08      	ldr	r5, [pc, #32]	; (3448 <rtc_count_get_count+0x28>)
    3428:	0020      	movs	r0, r4
    342a:	47a8      	blx	r5
    342c:	2800      	cmp	r0, #0
    342e:	d1fb      	bne.n	3428 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    3430:	7923      	ldrb	r3, [r4, #4]
    3432:	2b00      	cmp	r3, #0
    3434:	d004      	beq.n	3440 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    3436:	2000      	movs	r0, #0
	switch (module->mode) {
    3438:	2b01      	cmp	r3, #1
    343a:	d100      	bne.n	343e <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    343c:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    343e:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    3440:	8b30      	ldrh	r0, [r6, #24]
    3442:	b280      	uxth	r0, r0
			break;
    3444:	e7fb      	b.n	343e <rtc_count_get_count+0x1e>
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	00003325 	.word	0x00003325

0000344c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    344c:	b5f0      	push	{r4, r5, r6, r7, lr}
    344e:	b083      	sub	sp, #12
    3450:	0004      	movs	r4, r0
    3452:	9101      	str	r1, [sp, #4]
    3454:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3456:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    3458:	4f13      	ldr	r7, [pc, #76]	; (34a8 <rtc_count_set_compare+0x5c>)
    345a:	0020      	movs	r0, r4
    345c:	47b8      	blx	r7
    345e:	2800      	cmp	r0, #0
    3460:	d1fb      	bne.n	345a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    3462:	7923      	ldrb	r3, [r4, #4]
    3464:	2b00      	cmp	r3, #0
    3466:	d00e      	beq.n	3486 <rtc_count_set_compare+0x3a>
    3468:	2b01      	cmp	r3, #1
    346a:	d119      	bne.n	34a0 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    346c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    346e:	2d01      	cmp	r5, #1
    3470:	d817      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    3472:	3508      	adds	r5, #8
    3474:	00ad      	lsls	r5, r5, #2
    3476:	9b01      	ldr	r3, [sp, #4]
    3478:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    347a:	4d0b      	ldr	r5, [pc, #44]	; (34a8 <rtc_count_set_compare+0x5c>)
    347c:	0020      	movs	r0, r4
    347e:	47a8      	blx	r5
    3480:	2800      	cmp	r0, #0
    3482:	d1fb      	bne.n	347c <rtc_count_set_compare+0x30>
    3484:	e00d      	b.n	34a2 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    3486:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    3488:	2d02      	cmp	r5, #2
    348a:	d80a      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    348c:	4b07      	ldr	r3, [pc, #28]	; (34ac <rtc_count_set_compare+0x60>)
    348e:	9a01      	ldr	r2, [sp, #4]
    3490:	429a      	cmp	r2, r3
    3492:	d806      	bhi.n	34a2 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    3494:	466b      	mov	r3, sp
    3496:	889b      	ldrh	r3, [r3, #4]
    3498:	3510      	adds	r5, #16
    349a:	006d      	lsls	r5, r5, #1
    349c:	53ab      	strh	r3, [r5, r6]
			break;
    349e:	e7ec      	b.n	347a <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    34a0:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    34a2:	b003      	add	sp, #12
    34a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	00003325 	.word	0x00003325
    34ac:	0000ffff 	.word	0x0000ffff

000034b0 <rtc_count_init>:
{
    34b0:	b570      	push	{r4, r5, r6, lr}
    34b2:	0004      	movs	r4, r0
    34b4:	0015      	movs	r5, r2
	module->hw = hw;
    34b6:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    34b8:	4a1f      	ldr	r2, [pc, #124]	; (3538 <rtc_count_init+0x88>)
    34ba:	6951      	ldr	r1, [r2, #20]
    34bc:	2380      	movs	r3, #128	; 0x80
    34be:	005b      	lsls	r3, r3, #1
    34c0:	430b      	orrs	r3, r1
    34c2:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    34c4:	2205      	movs	r2, #5
    34c6:	4b1d      	ldr	r3, [pc, #116]	; (353c <rtc_count_init+0x8c>)
    34c8:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    34ca:	4b1d      	ldr	r3, [pc, #116]	; (3540 <rtc_count_init+0x90>)
    34cc:	4798      	blx	r3
	module->mode                = config->mode;
    34ce:	78ab      	ldrb	r3, [r5, #2]
    34d0:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    34d2:	4b1c      	ldr	r3, [pc, #112]	; (3544 <rtc_count_init+0x94>)
    34d4:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    34d6:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    34d8:	792b      	ldrb	r3, [r5, #4]
    34da:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    34dc:	8829      	ldrh	r1, [r5, #0]
    34de:	430b      	orrs	r3, r1
    34e0:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    34e2:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    34e4:	78ab      	ldrb	r3, [r5, #2]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d013      	beq.n	3512 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    34ea:	2017      	movs	r0, #23
	switch (config->mode) {
    34ec:	2b01      	cmp	r3, #1
    34ee:	d10f      	bne.n	3510 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    34f0:	8813      	ldrh	r3, [r2, #0]
    34f2:	b29b      	uxth	r3, r3
    34f4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    34f6:	78eb      	ldrb	r3, [r5, #3]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d003      	beq.n	3504 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    34fc:	8813      	ldrh	r3, [r2, #0]
    34fe:	2180      	movs	r1, #128	; 0x80
    3500:	430b      	orrs	r3, r1
    3502:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    3504:	68a9      	ldr	r1, [r5, #8]
    3506:	2200      	movs	r2, #0
    3508:	0020      	movs	r0, r4
    350a:	4b0f      	ldr	r3, [pc, #60]	; (3548 <rtc_count_init+0x98>)
    350c:	4798      	blx	r3
	return STATUS_OK;
    350e:	2000      	movs	r0, #0
}
    3510:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    3512:	8813      	ldrh	r3, [r2, #0]
    3514:	2104      	movs	r1, #4
    3516:	430b      	orrs	r3, r1
    3518:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    351a:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    351c:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    351e:	2b00      	cmp	r3, #0
    3520:	d1f6      	bne.n	3510 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    3522:	2200      	movs	r2, #0
    3524:	68a9      	ldr	r1, [r5, #8]
    3526:	0020      	movs	r0, r4
    3528:	4e07      	ldr	r6, [pc, #28]	; (3548 <rtc_count_init+0x98>)
    352a:	47b0      	blx	r6
    352c:	68e9      	ldr	r1, [r5, #12]
    352e:	2201      	movs	r2, #1
    3530:	0020      	movs	r0, r4
    3532:	47b0      	blx	r6
	return STATUS_OK;
    3534:	2000      	movs	r0, #0
    3536:	e7eb      	b.n	3510 <rtc_count_init+0x60>
    3538:	40000400 	.word	0x40000400
    353c:	40001000 	.word	0x40001000
    3540:	000033a5 	.word	0x000033a5
    3544:	20002074 	.word	0x20002074
    3548:	0000344d 	.word	0x0000344d

0000354c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    354c:	2a0a      	cmp	r2, #10
    354e:	d009      	beq.n	3564 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    3550:	2a07      	cmp	r2, #7
    3552:	d907      	bls.n	3564 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    3554:	7903      	ldrb	r3, [r0, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d010      	beq.n	357c <rtc_count_register_callback+0x30>
    355a:	2b01      	cmp	r3, #1
    355c:	d112      	bne.n	3584 <rtc_count_register_callback+0x38>
    355e:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    3560:	2a09      	cmp	r2, #9
    3562:	d809      	bhi.n	3578 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    3564:	1c93      	adds	r3, r2, #2
    3566:	009b      	lsls	r3, r3, #2
    3568:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    356a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    356c:	2101      	movs	r1, #1
    356e:	4091      	lsls	r1, r2
    3570:	430b      	orrs	r3, r1
    3572:	b29b      	uxth	r3, r3
    3574:	8683      	strh	r3, [r0, #52]	; 0x34
    3576:	2300      	movs	r3, #0
	}

	return status;
}
    3578:	0018      	movs	r0, r3
    357a:	4770      	bx	lr
    357c:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    357e:	2a0a      	cmp	r2, #10
    3580:	d8fa      	bhi.n	3578 <rtc_count_register_callback+0x2c>
    3582:	e7ef      	b.n	3564 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    3584:	2317      	movs	r3, #23
    3586:	e7f7      	b.n	3578 <rtc_count_register_callback+0x2c>

00003588 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    3588:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    358a:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    358c:	290a      	cmp	r1, #10
    358e:	d011      	beq.n	35b4 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    3590:	2907      	cmp	r1, #7
    3592:	d912      	bls.n	35ba <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    3594:	2380      	movs	r3, #128	; 0x80
    3596:	005b      	lsls	r3, r3, #1
    3598:	000c      	movs	r4, r1
    359a:	3c08      	subs	r4, #8
    359c:	40a3      	lsls	r3, r4
    359e:	24c0      	movs	r4, #192	; 0xc0
    35a0:	00a4      	lsls	r4, r4, #2
    35a2:	4023      	ands	r3, r4
    35a4:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    35a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    35a8:	2201      	movs	r2, #1
    35aa:	408a      	lsls	r2, r1
    35ac:	4313      	orrs	r3, r2
    35ae:	b29b      	uxth	r3, r3
    35b0:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    35b2:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    35b4:	4b04      	ldr	r3, [pc, #16]	; (35c8 <rtc_count_enable_callback+0x40>)
    35b6:	8153      	strh	r3, [r2, #10]
    35b8:	e7f5      	b.n	35a6 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    35ba:	2401      	movs	r4, #1
    35bc:	408c      	lsls	r4, r1
    35be:	23ff      	movs	r3, #255	; 0xff
    35c0:	4023      	ands	r3, r4
    35c2:	8153      	strh	r3, [r2, #10]
    35c4:	e7ef      	b.n	35a6 <rtc_count_enable_callback+0x1e>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	ffff8000 	.word	0xffff8000

000035cc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    35cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35ce:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    35d0:	290a      	cmp	r1, #10
    35d2:	d010      	beq.n	35f6 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    35d4:	2907      	cmp	r1, #7
    35d6:	d911      	bls.n	35fc <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    35d8:	2380      	movs	r3, #128	; 0x80
    35da:	005b      	lsls	r3, r3, #1
    35dc:	000c      	movs	r4, r1
    35de:	3c08      	subs	r4, #8
    35e0:	40a3      	lsls	r3, r4
    35e2:	24c0      	movs	r4, #192	; 0xc0
    35e4:	00a4      	lsls	r4, r4, #2
    35e6:	4023      	ands	r3, r4
    35e8:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    35ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    35ec:	2201      	movs	r2, #1
    35ee:	408a      	lsls	r2, r1
    35f0:	4393      	bics	r3, r2
    35f2:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    35f4:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    35f6:	4b04      	ldr	r3, [pc, #16]	; (3608 <rtc_count_disable_callback+0x3c>)
    35f8:	8113      	strh	r3, [r2, #8]
    35fa:	e7f6      	b.n	35ea <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    35fc:	2401      	movs	r4, #1
    35fe:	408c      	lsls	r4, r1
    3600:	23ff      	movs	r3, #255	; 0xff
    3602:	4023      	ands	r3, r4
    3604:	8113      	strh	r3, [r2, #8]
    3606:	e7f0      	b.n	35ea <rtc_count_disable_callback+0x1e>
    3608:	ffff8000 	.word	0xffff8000

0000360c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    360e:	46de      	mov	lr, fp
    3610:	4657      	mov	r7, sl
    3612:	464e      	mov	r6, r9
    3614:	4645      	mov	r5, r8
    3616:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    3618:	4b2b      	ldr	r3, [pc, #172]	; (36c8 <RTC_Handler+0xbc>)
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    361e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    3620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    3622:	4652      	mov	r2, sl
    3624:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    3626:	401a      	ands	r2, r3
    3628:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    362a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    362c:	8973      	ldrh	r3, [r6, #10]
    362e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    3630:	b21a      	sxth	r2, r3
    3632:	2a00      	cmp	r2, #0
    3634:	db08      	blt.n	3648 <RTC_Handler+0x3c>
    3636:	27ff      	movs	r7, #255	; 0xff
    3638:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    363a:	d02a      	beq.n	3692 <RTC_Handler+0x86>
    363c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    363e:	2301      	movs	r3, #1
    3640:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3642:	33fe      	adds	r3, #254	; 0xfe
    3644:	469b      	mov	fp, r3
    3646:	e014      	b.n	3672 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    3648:	4643      	mov	r3, r8
    364a:	055b      	lsls	r3, r3, #21
    364c:	d407      	bmi.n	365e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    364e:	4b1f      	ldr	r3, [pc, #124]	; (36cc <RTC_Handler+0xc0>)
    3650:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    3652:	bc3c      	pop	{r2, r3, r4, r5}
    3654:	4690      	mov	r8, r2
    3656:	4699      	mov	r9, r3
    3658:	46a2      	mov	sl, r4
    365a:	46ab      	mov	fp, r5
    365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    365e:	4653      	mov	r3, sl
    3660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3662:	4798      	blx	r3
    3664:	e7f3      	b.n	364e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3666:	465b      	mov	r3, fp
    3668:	401d      	ands	r5, r3
    366a:	81b5      	strh	r5, [r6, #12]
    366c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    366e:	2c08      	cmp	r4, #8
    3670:	d0ef      	beq.n	3652 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    3672:	0023      	movs	r3, r4
    3674:	464d      	mov	r5, r9
    3676:	40a5      	lsls	r5, r4
    3678:	422f      	tst	r7, r5
    367a:	d0f4      	beq.n	3666 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    367c:	4642      	mov	r2, r8
    367e:	4122      	asrs	r2, r4
    3680:	4649      	mov	r1, r9
    3682:	4211      	tst	r1, r2
    3684:	d0ef      	beq.n	3666 <RTC_Handler+0x5a>
				module->callbacks[i]();
    3686:	3302      	adds	r3, #2
    3688:	009b      	lsls	r3, r3, #2
    368a:	4652      	mov	r2, sl
    368c:	589b      	ldr	r3, [r3, r2]
    368e:	4798      	blx	r3
    3690:	e7e9      	b.n	3666 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    3692:	05da      	lsls	r2, r3, #23
    3694:	d50a      	bpl.n	36ac <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    3696:	4643      	mov	r3, r8
    3698:	05db      	lsls	r3, r3, #23
    369a:	d403      	bmi.n	36a4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    369c:	2380      	movs	r3, #128	; 0x80
    369e:	005b      	lsls	r3, r3, #1
    36a0:	81b3      	strh	r3, [r6, #12]
    36a2:	e7d6      	b.n	3652 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    36a4:	4653      	mov	r3, sl
    36a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36a8:	4798      	blx	r3
    36aa:	e7f7      	b.n	369c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    36ac:	059b      	lsls	r3, r3, #22
    36ae:	d5d0      	bpl.n	3652 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    36b0:	4643      	mov	r3, r8
    36b2:	059b      	lsls	r3, r3, #22
    36b4:	d403      	bmi.n	36be <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    36b6:	2380      	movs	r3, #128	; 0x80
    36b8:	009b      	lsls	r3, r3, #2
    36ba:	81b3      	strh	r3, [r6, #12]
}
    36bc:	e7c9      	b.n	3652 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    36be:	4653      	mov	r3, sl
    36c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36c2:	4798      	blx	r3
    36c4:	e7f7      	b.n	36b6 <RTC_Handler+0xaa>
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	20002074 	.word	0x20002074
    36cc:	ffff8000 	.word	0xffff8000

000036d0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    36d0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    36d2:	2207      	movs	r2, #7
    36d4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    36d6:	421a      	tst	r2, r3
    36d8:	d1fc      	bne.n	36d4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    36da:	4770      	bx	lr

000036dc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    36dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36de:	46d6      	mov	lr, sl
    36e0:	464f      	mov	r7, r9
    36e2:	4646      	mov	r6, r8
    36e4:	b5c0      	push	{r6, r7, lr}
    36e6:	b08a      	sub	sp, #40	; 0x28
    36e8:	0007      	movs	r7, r0
    36ea:	000e      	movs	r6, r1
    36ec:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    36ee:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    36f0:	0008      	movs	r0, r1
    36f2:	4ba5      	ldr	r3, [pc, #660]	; (3988 <i2c_master_init+0x2ac>)
    36f4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    36f6:	2805      	cmp	r0, #5
    36f8:	d100      	bne.n	36fc <i2c_master_init+0x20>
    36fa:	e13d      	b.n	3978 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    36fc:	0005      	movs	r5, r0
    36fe:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    3700:	4aa2      	ldr	r2, [pc, #648]	; (398c <i2c_master_init+0x2b0>)
    3702:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3704:	2301      	movs	r3, #1
    3706:	4083      	lsls	r3, r0
    3708:	430b      	orrs	r3, r1
    370a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    370c:	a909      	add	r1, sp, #36	; 0x24
    370e:	7b23      	ldrb	r3, [r4, #12]
    3710:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3712:	b2ed      	uxtb	r5, r5
    3714:	0028      	movs	r0, r5
    3716:	4b9e      	ldr	r3, [pc, #632]	; (3990 <i2c_master_init+0x2b4>)
    3718:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    371a:	0028      	movs	r0, r5
    371c:	4b9d      	ldr	r3, [pc, #628]	; (3994 <i2c_master_init+0x2b8>)
    371e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3720:	7b20      	ldrb	r0, [r4, #12]
    3722:	2100      	movs	r1, #0
    3724:	4b9c      	ldr	r3, [pc, #624]	; (3998 <i2c_master_init+0x2bc>)
    3726:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3728:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    372a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    372c:	079b      	lsls	r3, r3, #30
    372e:	d505      	bpl.n	373c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    3730:	b00a      	add	sp, #40	; 0x28
    3732:	bc1c      	pop	{r2, r3, r4}
    3734:	4690      	mov	r8, r2
    3736:	4699      	mov	r9, r3
    3738:	46a2      	mov	sl, r4
    373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    373c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    373e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3740:	07db      	lsls	r3, r3, #31
    3742:	d4f5      	bmi.n	3730 <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3744:	6838      	ldr	r0, [r7, #0]
    3746:	4b90      	ldr	r3, [pc, #576]	; (3988 <i2c_master_init+0x2ac>)
    3748:	4699      	mov	r9, r3
    374a:	4798      	blx	r3
    374c:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    374e:	4993      	ldr	r1, [pc, #588]	; (399c <i2c_master_init+0x2c0>)
    3750:	4b93      	ldr	r3, [pc, #588]	; (39a0 <i2c_master_init+0x2c4>)
    3752:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3754:	00ad      	lsls	r5, r5, #2
    3756:	4b93      	ldr	r3, [pc, #588]	; (39a4 <i2c_master_init+0x2c8>)
    3758:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    375a:	2300      	movs	r3, #0
    375c:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    375e:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    3760:	2500      	movs	r5, #0
    3762:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    3764:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    3766:	2225      	movs	r2, #37	; 0x25
    3768:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    376a:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    376c:	3314      	adds	r3, #20
    376e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3770:	683b      	ldr	r3, [r7, #0]
    3772:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3774:	0018      	movs	r0, r3
    3776:	47c8      	blx	r9
    3778:	4681      	mov	r9, r0
    377a:	2380      	movs	r3, #128	; 0x80
    377c:	aa08      	add	r2, sp, #32
    377e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3780:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3782:	2301      	movs	r3, #1
    3784:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    3786:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    3788:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    378a:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    378c:	2800      	cmp	r0, #0
    378e:	d100      	bne.n	3792 <i2c_master_init+0xb6>
    3790:	e0af      	b.n	38f2 <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    3792:	ab08      	add	r3, sp, #32
    3794:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3796:	2302      	movs	r3, #2
    3798:	aa08      	add	r2, sp, #32
    379a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    379c:	0c00      	lsrs	r0, r0, #16
    379e:	b2c0      	uxtb	r0, r0
    37a0:	0011      	movs	r1, r2
    37a2:	4b81      	ldr	r3, [pc, #516]	; (39a8 <i2c_master_init+0x2cc>)
    37a4:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    37a6:	2e00      	cmp	r6, #0
    37a8:	d100      	bne.n	37ac <i2c_master_init+0xd0>
    37aa:	e0a7      	b.n	38fc <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    37ac:	ab08      	add	r3, sp, #32
    37ae:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    37b0:	2302      	movs	r3, #2
    37b2:	aa08      	add	r2, sp, #32
    37b4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    37b6:	0c36      	lsrs	r6, r6, #16
    37b8:	b2f0      	uxtb	r0, r6
    37ba:	0011      	movs	r1, r2
    37bc:	4b7a      	ldr	r3, [pc, #488]	; (39a8 <i2c_master_init+0x2cc>)
    37be:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    37c0:	8aa3      	ldrh	r3, [r4, #20]
    37c2:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    37c4:	8ae3      	ldrh	r3, [r4, #22]
    37c6:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    37c8:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    37ca:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    37cc:	2b00      	cmp	r3, #0
    37ce:	d104      	bne.n	37da <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    37d0:	4b76      	ldr	r3, [pc, #472]	; (39ac <i2c_master_init+0x2d0>)
    37d2:	789b      	ldrb	r3, [r3, #2]
    37d4:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    37d6:	0fdb      	lsrs	r3, r3, #31
    37d8:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    37da:	68a1      	ldr	r1, [r4, #8]
    37dc:	6923      	ldr	r3, [r4, #16]
    37de:	430b      	orrs	r3, r1
    37e0:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    37e2:	2224      	movs	r2, #36	; 0x24
    37e4:	5ca2      	ldrb	r2, [r4, r2]
    37e6:	2a00      	cmp	r2, #0
    37e8:	d002      	beq.n	37f0 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    37ea:	2280      	movs	r2, #128	; 0x80
    37ec:	05d2      	lsls	r2, r2, #23
    37ee:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    37f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    37f2:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    37f4:	222c      	movs	r2, #44	; 0x2c
    37f6:	5ca2      	ldrb	r2, [r4, r2]
    37f8:	2a00      	cmp	r2, #0
    37fa:	d103      	bne.n	3804 <i2c_master_init+0x128>
    37fc:	2280      	movs	r2, #128	; 0x80
    37fe:	0492      	lsls	r2, r2, #18
    3800:	4291      	cmp	r1, r2
    3802:	d102      	bne.n	380a <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3804:	2280      	movs	r2, #128	; 0x80
    3806:	0512      	lsls	r2, r2, #20
    3808:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    380a:	222d      	movs	r2, #45	; 0x2d
    380c:	5ca2      	ldrb	r2, [r4, r2]
    380e:	2a00      	cmp	r2, #0
    3810:	d002      	beq.n	3818 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3812:	2280      	movs	r2, #128	; 0x80
    3814:	0412      	lsls	r2, r2, #16
    3816:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    3818:	222e      	movs	r2, #46	; 0x2e
    381a:	5ca2      	ldrb	r2, [r4, r2]
    381c:	2a00      	cmp	r2, #0
    381e:	d002      	beq.n	3826 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3820:	2280      	movs	r2, #128	; 0x80
    3822:	03d2      	lsls	r2, r2, #15
    3824:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3826:	4642      	mov	r2, r8
    3828:	6812      	ldr	r2, [r2, #0]
    382a:	4313      	orrs	r3, r2
    382c:	4642      	mov	r2, r8
    382e:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3830:	2380      	movs	r3, #128	; 0x80
    3832:	005b      	lsls	r3, r3, #1
    3834:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3836:	464d      	mov	r5, r9
    3838:	3512      	adds	r5, #18
    383a:	b2e8      	uxtb	r0, r5
    383c:	4b5c      	ldr	r3, [pc, #368]	; (39b0 <i2c_master_init+0x2d4>)
    383e:	4798      	blx	r3
    3840:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    3842:	23fa      	movs	r3, #250	; 0xfa
    3844:	009b      	lsls	r3, r3, #2
    3846:	6822      	ldr	r2, [r4, #0]
    3848:	435a      	muls	r2, r3
    384a:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    384c:	6863      	ldr	r3, [r4, #4]
    384e:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    3850:	4d58      	ldr	r5, [pc, #352]	; (39b4 <i2c_master_init+0x2d8>)
    3852:	47a8      	blx	r5
    3854:	9000      	str	r0, [sp, #0]
    3856:	9101      	str	r1, [sp, #4]
    3858:	464b      	mov	r3, r9
    385a:	0058      	lsls	r0, r3, #1
    385c:	47a8      	blx	r5
    385e:	9002      	str	r0, [sp, #8]
    3860:	9103      	str	r1, [sp, #12]
    3862:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    3864:	47a8      	blx	r5
    3866:	9004      	str	r0, [sp, #16]
    3868:	9105      	str	r1, [sp, #20]
    386a:	4f53      	ldr	r7, [pc, #332]	; (39b8 <i2c_master_init+0x2dc>)
    386c:	4a53      	ldr	r2, [pc, #332]	; (39bc <i2c_master_init+0x2e0>)
    386e:	4b54      	ldr	r3, [pc, #336]	; (39c0 <i2c_master_init+0x2e4>)
    3870:	9800      	ldr	r0, [sp, #0]
    3872:	9901      	ldr	r1, [sp, #4]
    3874:	47b8      	blx	r7
    3876:	0002      	movs	r2, r0
    3878:	000b      	movs	r3, r1
    387a:	9804      	ldr	r0, [sp, #16]
    387c:	9905      	ldr	r1, [sp, #20]
    387e:	47b8      	blx	r7
    3880:	4e50      	ldr	r6, [pc, #320]	; (39c4 <i2c_master_init+0x2e8>)
    3882:	2200      	movs	r2, #0
    3884:	4b50      	ldr	r3, [pc, #320]	; (39c8 <i2c_master_init+0x2ec>)
    3886:	47b0      	blx	r6
    3888:	9004      	str	r0, [sp, #16]
    388a:	9105      	str	r1, [sp, #20]
    388c:	4648      	mov	r0, r9
    388e:	47a8      	blx	r5
    3890:	0002      	movs	r2, r0
    3892:	000b      	movs	r3, r1
    3894:	9804      	ldr	r0, [sp, #16]
    3896:	9905      	ldr	r1, [sp, #20]
    3898:	47b8      	blx	r7
    389a:	0002      	movs	r2, r0
    389c:	000b      	movs	r3, r1
    389e:	4d4b      	ldr	r5, [pc, #300]	; (39cc <i2c_master_init+0x2f0>)
    38a0:	9800      	ldr	r0, [sp, #0]
    38a2:	9901      	ldr	r1, [sp, #4]
    38a4:	47a8      	blx	r5
    38a6:	9a02      	ldr	r2, [sp, #8]
    38a8:	9b03      	ldr	r3, [sp, #12]
    38aa:	47b0      	blx	r6
    38ac:	2200      	movs	r2, #0
    38ae:	4b48      	ldr	r3, [pc, #288]	; (39d0 <i2c_master_init+0x2f4>)
    38b0:	47a8      	blx	r5
    38b2:	9a02      	ldr	r2, [sp, #8]
    38b4:	9b03      	ldr	r3, [sp, #12]
    38b6:	4d47      	ldr	r5, [pc, #284]	; (39d4 <i2c_master_init+0x2f8>)
    38b8:	47a8      	blx	r5
    38ba:	4b47      	ldr	r3, [pc, #284]	; (39d8 <i2c_master_init+0x2fc>)
    38bc:	4798      	blx	r3
    38be:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    38c0:	2380      	movs	r3, #128	; 0x80
    38c2:	049b      	lsls	r3, r3, #18
    38c4:	68a2      	ldr	r2, [r4, #8]
    38c6:	429a      	cmp	r2, r3
    38c8:	d01e      	beq.n	3908 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    38ca:	0003      	movs	r3, r0
    38cc:	2040      	movs	r0, #64	; 0x40
    38ce:	2dff      	cmp	r5, #255	; 0xff
    38d0:	d900      	bls.n	38d4 <i2c_master_init+0x1f8>
    38d2:	e72d      	b.n	3730 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    38d4:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    38d6:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    38d8:	25ff      	movs	r5, #255	; 0xff
    38da:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    38dc:	0624      	lsls	r4, r4, #24
    38de:	4325      	orrs	r5, r4
    38e0:	0400      	lsls	r0, r0, #16
    38e2:	23ff      	movs	r3, #255	; 0xff
    38e4:	041b      	lsls	r3, r3, #16
    38e6:	4018      	ands	r0, r3
    38e8:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    38ea:	4643      	mov	r3, r8
    38ec:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    38ee:	2000      	movs	r0, #0
    38f0:	e71e      	b.n	3730 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    38f2:	2100      	movs	r1, #0
    38f4:	4640      	mov	r0, r8
    38f6:	4b39      	ldr	r3, [pc, #228]	; (39dc <i2c_master_init+0x300>)
    38f8:	4798      	blx	r3
    38fa:	e74a      	b.n	3792 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    38fc:	2101      	movs	r1, #1
    38fe:	4640      	mov	r0, r8
    3900:	4b36      	ldr	r3, [pc, #216]	; (39dc <i2c_master_init+0x300>)
    3902:	4798      	blx	r3
    3904:	0006      	movs	r6, r0
    3906:	e751      	b.n	37ac <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3908:	26fa      	movs	r6, #250	; 0xfa
    390a:	00b6      	lsls	r6, r6, #2
    390c:	4653      	mov	r3, sl
    390e:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3910:	9800      	ldr	r0, [sp, #0]
    3912:	9901      	ldr	r1, [sp, #4]
    3914:	0002      	movs	r2, r0
    3916:	000b      	movs	r3, r1
    3918:	4c2a      	ldr	r4, [pc, #168]	; (39c4 <i2c_master_init+0x2e8>)
    391a:	47a0      	blx	r4
    391c:	9000      	str	r0, [sp, #0]
    391e:	9101      	str	r1, [sp, #4]
    3920:	0030      	movs	r0, r6
    3922:	4b24      	ldr	r3, [pc, #144]	; (39b4 <i2c_master_init+0x2d8>)
    3924:	4798      	blx	r3
    3926:	2200      	movs	r2, #0
    3928:	4b2d      	ldr	r3, [pc, #180]	; (39e0 <i2c_master_init+0x304>)
    392a:	47b8      	blx	r7
    392c:	0002      	movs	r2, r0
    392e:	000b      	movs	r3, r1
    3930:	9800      	ldr	r0, [sp, #0]
    3932:	9901      	ldr	r1, [sp, #4]
    3934:	4c27      	ldr	r4, [pc, #156]	; (39d4 <i2c_master_init+0x2f8>)
    3936:	47a0      	blx	r4
    3938:	2200      	movs	r2, #0
    393a:	4b25      	ldr	r3, [pc, #148]	; (39d0 <i2c_master_init+0x2f4>)
    393c:	4c23      	ldr	r4, [pc, #140]	; (39cc <i2c_master_init+0x2f0>)
    393e:	47a0      	blx	r4
    3940:	4b25      	ldr	r3, [pc, #148]	; (39d8 <i2c_master_init+0x2fc>)
    3942:	4798      	blx	r3
    3944:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    3946:	d00c      	beq.n	3962 <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3948:	0031      	movs	r1, r6
    394a:	9807      	ldr	r0, [sp, #28]
    394c:	4b25      	ldr	r3, [pc, #148]	; (39e4 <i2c_master_init+0x308>)
    394e:	4798      	blx	r3
    3950:	3802      	subs	r0, #2
    3952:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3954:	002b      	movs	r3, r5
    3956:	2dff      	cmp	r5, #255	; 0xff
    3958:	d80c      	bhi.n	3974 <i2c_master_init+0x298>
    395a:	28ff      	cmp	r0, #255	; 0xff
    395c:	d9bc      	bls.n	38d8 <i2c_master_init+0x1fc>
    395e:	2040      	movs	r0, #64	; 0x40
    3960:	e6e6      	b.n	3730 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3962:	0071      	lsls	r1, r6, #1
    3964:	1e48      	subs	r0, r1, #1
    3966:	9b07      	ldr	r3, [sp, #28]
    3968:	469c      	mov	ip, r3
    396a:	4460      	add	r0, ip
    396c:	4b1d      	ldr	r3, [pc, #116]	; (39e4 <i2c_master_init+0x308>)
    396e:	4798      	blx	r3
    3970:	3801      	subs	r0, #1
    3972:	e7ef      	b.n	3954 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3974:	2040      	movs	r0, #64	; 0x40
    3976:	e6db      	b.n	3730 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    3978:	4a04      	ldr	r2, [pc, #16]	; (398c <i2c_master_init+0x2b0>)
    397a:	6a13      	ldr	r3, [r2, #32]
    397c:	2102      	movs	r1, #2
    397e:	430b      	orrs	r3, r1
    3980:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3982:	2518      	movs	r5, #24
    3984:	e6c2      	b.n	370c <i2c_master_init+0x30>
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	0000431d 	.word	0x0000431d
    398c:	40000400 	.word	0x40000400
    3990:	00005619 	.word	0x00005619
    3994:	000055a9 	.word	0x000055a9
    3998:	00004175 	.word	0x00004175
    399c:	00003e11 	.word	0x00003e11
    39a0:	00004359 	.word	0x00004359
    39a4:	20002078 	.word	0x20002078
    39a8:	00005715 	.word	0x00005715
    39ac:	41002000 	.word	0x41002000
    39b0:	0000563d 	.word	0x0000563d
    39b4:	00017e75 	.word	0x00017e75
    39b8:	0001725d 	.word	0x0001725d
    39bc:	e826d695 	.word	0xe826d695
    39c0:	3e112e0b 	.word	0x3e112e0b
    39c4:	000163d5 	.word	0x000163d5
    39c8:	40240000 	.word	0x40240000
    39cc:	0001775d 	.word	0x0001775d
    39d0:	3ff00000 	.word	0x3ff00000
    39d4:	000169f5 	.word	0x000169f5
    39d8:	00017d89 	.word	0x00017d89
    39dc:	000041c1 	.word	0x000041c1
    39e0:	40080000 	.word	0x40080000
    39e4:	00014f51 	.word	0x00014f51

000039e8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    39e8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    39ea:	7e1a      	ldrb	r2, [r3, #24]
    39ec:	0792      	lsls	r2, r2, #30
    39ee:	d507      	bpl.n	3a00 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    39f0:	2202      	movs	r2, #2
    39f2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    39f4:	8b5b      	ldrh	r3, [r3, #26]
    39f6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    39f8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    39fa:	17db      	asrs	r3, r3, #31
    39fc:	4018      	ands	r0, r3
}
    39fe:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3a00:	8b5a      	ldrh	r2, [r3, #26]
    3a02:	0752      	lsls	r2, r2, #29
    3a04:	d506      	bpl.n	3a14 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3a06:	6859      	ldr	r1, [r3, #4]
    3a08:	22c0      	movs	r2, #192	; 0xc0
    3a0a:	0292      	lsls	r2, r2, #10
    3a0c:	430a      	orrs	r2, r1
    3a0e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    3a10:	2018      	movs	r0, #24
    3a12:	e7f4      	b.n	39fe <_i2c_master_address_response+0x16>
	return STATUS_OK;
    3a14:	2000      	movs	r0, #0
    3a16:	e7f2      	b.n	39fe <_i2c_master_address_response+0x16>

00003a18 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3a18:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a1a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3a1c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3a1e:	2401      	movs	r4, #1
    3a20:	2502      	movs	r5, #2
    3a22:	7e11      	ldrb	r1, [r2, #24]
    3a24:	4221      	tst	r1, r4
    3a26:	d10b      	bne.n	3a40 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3a28:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3a2a:	4229      	tst	r1, r5
    3a2c:	d106      	bne.n	3a3c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3a2e:	3301      	adds	r3, #1
    3a30:	b29b      	uxth	r3, r3
    3a32:	8901      	ldrh	r1, [r0, #8]
    3a34:	4299      	cmp	r1, r3
    3a36:	d8f4      	bhi.n	3a22 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    3a38:	2012      	movs	r0, #18
    3a3a:	e002      	b.n	3a42 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    3a3c:	2000      	movs	r0, #0
    3a3e:	e000      	b.n	3a42 <_i2c_master_wait_for_bus+0x2a>
    3a40:	2000      	movs	r0, #0
}
    3a42:	bd30      	pop	{r4, r5, pc}

00003a44 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3a44:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a46:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a48:	6862      	ldr	r2, [r4, #4]
    3a4a:	2380      	movs	r3, #128	; 0x80
    3a4c:	02db      	lsls	r3, r3, #11
    3a4e:	4313      	orrs	r3, r2
    3a50:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3a52:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a54:	4b02      	ldr	r3, [pc, #8]	; (3a60 <_i2c_master_send_hs_master_code+0x1c>)
    3a56:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3a58:	2301      	movs	r3, #1
    3a5a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	00003a19 	.word	0x00003a19

00003a64 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a66:	46de      	mov	lr, fp
    3a68:	4657      	mov	r7, sl
    3a6a:	464e      	mov	r6, r9
    3a6c:	4645      	mov	r5, r8
    3a6e:	b5e0      	push	{r5, r6, r7, lr}
    3a70:	b083      	sub	sp, #12
    3a72:	0006      	movs	r6, r0
    3a74:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a76:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3a78:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3a7a:	682b      	ldr	r3, [r5, #0]
    3a7c:	011b      	lsls	r3, r3, #4
    3a7e:	0fdb      	lsrs	r3, r3, #31
    3a80:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3a82:	7a4b      	ldrb	r3, [r1, #9]
    3a84:	2b00      	cmp	r3, #0
    3a86:	d12b      	bne.n	3ae0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3a88:	686b      	ldr	r3, [r5, #4]
    3a8a:	4a58      	ldr	r2, [pc, #352]	; (3bec <_i2c_master_read_packet+0x188>)
    3a8c:	4013      	ands	r3, r2
    3a8e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3a90:	464b      	mov	r3, r9
    3a92:	7a1b      	ldrb	r3, [r3, #8]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d127      	bne.n	3ae8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a98:	464b      	mov	r3, r9
    3a9a:	881b      	ldrh	r3, [r3, #0]
    3a9c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a9e:	464a      	mov	r2, r9
    3aa0:	7a52      	ldrb	r2, [r2, #9]
    3aa2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3aa4:	4313      	orrs	r3, r2
    3aa6:	2201      	movs	r2, #1
    3aa8:	4313      	orrs	r3, r2
    3aaa:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3aac:	0030      	movs	r0, r6
    3aae:	4b50      	ldr	r3, [pc, #320]	; (3bf0 <_i2c_master_read_packet+0x18c>)
    3ab0:	4798      	blx	r3
    3ab2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3ab4:	4653      	mov	r3, sl
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d003      	beq.n	3ac2 <_i2c_master_read_packet+0x5e>
    3aba:	464b      	mov	r3, r9
    3abc:	885b      	ldrh	r3, [r3, #2]
    3abe:	2b01      	cmp	r3, #1
    3ac0:	d03b      	beq.n	3b3a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3ac2:	686b      	ldr	r3, [r5, #4]
    3ac4:	4a49      	ldr	r2, [pc, #292]	; (3bec <_i2c_master_read_packet+0x188>)
    3ac6:	4013      	ands	r3, r2
    3ac8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3aca:	9b01      	ldr	r3, [sp, #4]
    3acc:	2b00      	cmp	r3, #0
    3ace:	d03a      	beq.n	3b46 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    3ad0:	9801      	ldr	r0, [sp, #4]
    3ad2:	b003      	add	sp, #12
    3ad4:	bc3c      	pop	{r2, r3, r4, r5}
    3ad6:	4690      	mov	r8, r2
    3ad8:	4699      	mov	r9, r3
    3ada:	46a2      	mov	sl, r4
    3adc:	46ab      	mov	fp, r5
    3ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3ae0:	7a89      	ldrb	r1, [r1, #10]
    3ae2:	4b44      	ldr	r3, [pc, #272]	; (3bf4 <_i2c_master_read_packet+0x190>)
    3ae4:	4798      	blx	r3
    3ae6:	e7cf      	b.n	3a88 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    3ae8:	464b      	mov	r3, r9
    3aea:	881b      	ldrh	r3, [r3, #0]
    3aec:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3aee:	464a      	mov	r2, r9
    3af0:	7a52      	ldrb	r2, [r2, #9]
    3af2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3af4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	0212      	lsls	r2, r2, #8
    3afa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    3afc:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    3afe:	0030      	movs	r0, r6
    3b00:	4b3b      	ldr	r3, [pc, #236]	; (3bf0 <_i2c_master_read_packet+0x18c>)
    3b02:	4798      	blx	r3
    3b04:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3b06:	686b      	ldr	r3, [r5, #4]
    3b08:	4a38      	ldr	r2, [pc, #224]	; (3bec <_i2c_master_read_packet+0x188>)
    3b0a:	4013      	ands	r3, r2
    3b0c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    3b0e:	2800      	cmp	r0, #0
    3b10:	d1de      	bne.n	3ad0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    3b12:	0030      	movs	r0, r6
    3b14:	4b38      	ldr	r3, [pc, #224]	; (3bf8 <_i2c_master_read_packet+0x194>)
    3b16:	4798      	blx	r3
    3b18:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d1d8      	bne.n	3ad0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3b1e:	464b      	mov	r3, r9
    3b20:	881b      	ldrh	r3, [r3, #0]
    3b22:	0a1b      	lsrs	r3, r3, #8
    3b24:	2278      	movs	r2, #120	; 0x78
    3b26:	4313      	orrs	r3, r2
    3b28:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3b2a:	464a      	mov	r2, r9
    3b2c:	7a52      	ldrb	r2, [r2, #9]
    3b2e:	0392      	lsls	r2, r2, #14
    3b30:	2101      	movs	r1, #1
    3b32:	430a      	orrs	r2, r1
    3b34:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3b36:	626b      	str	r3, [r5, #36]	; 0x24
    3b38:	e7b8      	b.n	3aac <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b3a:	686a      	ldr	r2, [r5, #4]
    3b3c:	2380      	movs	r3, #128	; 0x80
    3b3e:	02db      	lsls	r3, r3, #11
    3b40:	4313      	orrs	r3, r2
    3b42:	606b      	str	r3, [r5, #4]
    3b44:	e7c1      	b.n	3aca <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    3b46:	0030      	movs	r0, r6
    3b48:	4b2b      	ldr	r3, [pc, #172]	; (3bf8 <_i2c_master_read_packet+0x194>)
    3b4a:	4798      	blx	r3
    3b4c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3b4e:	2800      	cmp	r0, #0
    3b50:	d1be      	bne.n	3ad0 <_i2c_master_read_packet+0x6c>
    3b52:	3c01      	subs	r4, #1
    3b54:	b2a4      	uxth	r4, r4
    3b56:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    3b58:	4b28      	ldr	r3, [pc, #160]	; (3bfc <_i2c_master_read_packet+0x198>)
    3b5a:	469b      	mov	fp, r3
    3b5c:	e015      	b.n	3b8a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3b5e:	2c01      	cmp	r4, #1
    3b60:	d020      	beq.n	3ba4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    3b62:	0030      	movs	r0, r6
    3b64:	4b26      	ldr	r3, [pc, #152]	; (3c00 <_i2c_master_read_packet+0x19c>)
    3b66:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b68:	4643      	mov	r3, r8
    3b6a:	1c5f      	adds	r7, r3, #1
    3b6c:	b2bf      	uxth	r7, r7
    3b6e:	2328      	movs	r3, #40	; 0x28
    3b70:	5ceb      	ldrb	r3, [r5, r3]
    3b72:	464a      	mov	r2, r9
    3b74:	6852      	ldr	r2, [r2, #4]
    3b76:	4641      	mov	r1, r8
    3b78:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    3b7a:	0030      	movs	r0, r6
    3b7c:	4b1c      	ldr	r3, [pc, #112]	; (3bf0 <_i2c_master_read_packet+0x18c>)
    3b7e:	4798      	blx	r3
    3b80:	3c01      	subs	r4, #1
    3b82:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    3b84:	2800      	cmp	r0, #0
    3b86:	d115      	bne.n	3bb4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    3b88:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    3b8a:	455c      	cmp	r4, fp
    3b8c:	d014      	beq.n	3bb8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3b8e:	8b6b      	ldrh	r3, [r5, #26]
    3b90:	069b      	lsls	r3, r3, #26
    3b92:	d527      	bpl.n	3be4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3b94:	7af3      	ldrb	r3, [r6, #11]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d0e3      	beq.n	3b62 <_i2c_master_read_packet+0xfe>
    3b9a:	4653      	mov	r3, sl
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d1de      	bne.n	3b5e <_i2c_master_read_packet+0xfa>
    3ba0:	2c00      	cmp	r4, #0
    3ba2:	d1de      	bne.n	3b62 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3ba4:	686a      	ldr	r2, [r5, #4]
    3ba6:	2380      	movs	r3, #128	; 0x80
    3ba8:	02db      	lsls	r3, r3, #11
    3baa:	4313      	orrs	r3, r2
    3bac:	606b      	str	r3, [r5, #4]
    3bae:	3c01      	subs	r4, #1
    3bb0:	b2a4      	uxth	r4, r4
    3bb2:	e7ea      	b.n	3b8a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    3bb4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    3bb6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3bb8:	7ab3      	ldrb	r3, [r6, #10]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d109      	bne.n	3bd2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    3bbe:	0030      	movs	r0, r6
    3bc0:	4b0f      	ldr	r3, [pc, #60]	; (3c00 <_i2c_master_read_packet+0x19c>)
    3bc2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3bc4:	2328      	movs	r3, #40	; 0x28
    3bc6:	5cea      	ldrb	r2, [r5, r3]
    3bc8:	464b      	mov	r3, r9
    3bca:	685b      	ldr	r3, [r3, #4]
    3bcc:	4641      	mov	r1, r8
    3bce:	545a      	strb	r2, [r3, r1]
    3bd0:	e77e      	b.n	3ad0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    3bd2:	0030      	movs	r0, r6
    3bd4:	4b0a      	ldr	r3, [pc, #40]	; (3c00 <_i2c_master_read_packet+0x19c>)
    3bd6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3bd8:	686a      	ldr	r2, [r5, #4]
    3bda:	23c0      	movs	r3, #192	; 0xc0
    3bdc:	029b      	lsls	r3, r3, #10
    3bde:	4313      	orrs	r3, r2
    3be0:	606b      	str	r3, [r5, #4]
    3be2:	e7ec      	b.n	3bbe <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    3be4:	2341      	movs	r3, #65	; 0x41
    3be6:	9301      	str	r3, [sp, #4]
    3be8:	e772      	b.n	3ad0 <_i2c_master_read_packet+0x6c>
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	fffbffff 	.word	0xfffbffff
    3bf0:	00003a19 	.word	0x00003a19
    3bf4:	00003a45 	.word	0x00003a45
    3bf8:	000039e9 	.word	0x000039e9
    3bfc:	0000ffff 	.word	0x0000ffff
    3c00:	000036d1 	.word	0x000036d1

00003c04 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c06:	46de      	mov	lr, fp
    3c08:	4657      	mov	r7, sl
    3c0a:	464e      	mov	r6, r9
    3c0c:	4645      	mov	r5, r8
    3c0e:	b5e0      	push	{r5, r6, r7, lr}
    3c10:	b083      	sub	sp, #12
    3c12:	0006      	movs	r6, r0
    3c14:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c16:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c18:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    3c1a:	4b32      	ldr	r3, [pc, #200]	; (3ce4 <_i2c_master_write_packet+0xe0>)
    3c1c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1e:	7a7b      	ldrb	r3, [r7, #9]
    3c20:	2b00      	cmp	r3, #0
    3c22:	d11d      	bne.n	3c60 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c24:	686b      	ldr	r3, [r5, #4]
    3c26:	4a30      	ldr	r2, [pc, #192]	; (3ce8 <_i2c_master_write_packet+0xe4>)
    3c28:	4013      	ands	r3, r2
    3c2a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c2c:	7a3b      	ldrb	r3, [r7, #8]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d01b      	beq.n	3c6a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c32:	883b      	ldrh	r3, [r7, #0]
    3c34:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c36:	7a7a      	ldrb	r2, [r7, #9]
    3c38:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c3a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c3c:	2280      	movs	r2, #128	; 0x80
    3c3e:	0212      	lsls	r2, r2, #8
    3c40:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c42:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c44:	0030      	movs	r0, r6
    3c46:	4b29      	ldr	r3, [pc, #164]	; (3cec <_i2c_master_write_packet+0xe8>)
    3c48:	4798      	blx	r3
    3c4a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d013      	beq.n	3c78 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    3c50:	9801      	ldr	r0, [sp, #4]
    3c52:	b003      	add	sp, #12
    3c54:	bc3c      	pop	{r2, r3, r4, r5}
    3c56:	4690      	mov	r8, r2
    3c58:	4699      	mov	r9, r3
    3c5a:	46a2      	mov	sl, r4
    3c5c:	46ab      	mov	fp, r5
    3c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c60:	7ab9      	ldrb	r1, [r7, #10]
    3c62:	0030      	movs	r0, r6
    3c64:	4b22      	ldr	r3, [pc, #136]	; (3cf0 <_i2c_master_write_packet+0xec>)
    3c66:	4798      	blx	r3
    3c68:	e7dc      	b.n	3c24 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6a:	883b      	ldrh	r3, [r7, #0]
    3c6c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c6e:	7a7a      	ldrb	r2, [r7, #9]
    3c70:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c72:	4313      	orrs	r3, r2
    3c74:	626b      	str	r3, [r5, #36]	; 0x24
    3c76:	e7e5      	b.n	3c44 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    3c78:	0030      	movs	r0, r6
    3c7a:	4b1e      	ldr	r3, [pc, #120]	; (3cf4 <_i2c_master_write_packet+0xf0>)
    3c7c:	4798      	blx	r3
    3c7e:	1e03      	subs	r3, r0, #0
    3c80:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3c82:	d1e5      	bne.n	3c50 <_i2c_master_write_packet+0x4c>
    3c84:	46a0      	mov	r8, r4
    3c86:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3c88:	3320      	adds	r3, #32
    3c8a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    3c8c:	4b15      	ldr	r3, [pc, #84]	; (3ce4 <_i2c_master_write_packet+0xe0>)
    3c8e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    3c90:	4b16      	ldr	r3, [pc, #88]	; (3cec <_i2c_master_write_packet+0xe8>)
    3c92:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    3c94:	4544      	cmp	r4, r8
    3c96:	d015      	beq.n	3cc4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3c98:	8b6b      	ldrh	r3, [r5, #26]
    3c9a:	464a      	mov	r2, r9
    3c9c:	4213      	tst	r3, r2
    3c9e:	d01d      	beq.n	3cdc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    3ca0:	0030      	movs	r0, r6
    3ca2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	5d1a      	ldrb	r2, [r3, r4]
    3ca8:	2328      	movs	r3, #40	; 0x28
    3caa:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    3cac:	0030      	movs	r0, r6
    3cae:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d106      	bne.n	3cc2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3cb4:	8b6b      	ldrh	r3, [r5, #26]
    3cb6:	3401      	adds	r4, #1
    3cb8:	075b      	lsls	r3, r3, #29
    3cba:	d5eb      	bpl.n	3c94 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    3cbc:	231e      	movs	r3, #30
    3cbe:	9301      	str	r3, [sp, #4]
    3cc0:	e000      	b.n	3cc4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    3cc2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3cc4:	7ab3      	ldrb	r3, [r6, #10]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d0c2      	beq.n	3c50 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    3cca:	0030      	movs	r0, r6
    3ccc:	4b05      	ldr	r3, [pc, #20]	; (3ce4 <_i2c_master_write_packet+0xe0>)
    3cce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3cd0:	686a      	ldr	r2, [r5, #4]
    3cd2:	23c0      	movs	r3, #192	; 0xc0
    3cd4:	029b      	lsls	r3, r3, #10
    3cd6:	4313      	orrs	r3, r2
    3cd8:	606b      	str	r3, [r5, #4]
    3cda:	e7b9      	b.n	3c50 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    3cdc:	2341      	movs	r3, #65	; 0x41
    3cde:	9301      	str	r3, [sp, #4]
    3ce0:	e7b6      	b.n	3c50 <_i2c_master_write_packet+0x4c>
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	000036d1 	.word	0x000036d1
    3ce8:	fffbffff 	.word	0xfffbffff
    3cec:	00003a19 	.word	0x00003a19
    3cf0:	00003a45 	.word	0x00003a45
    3cf4:	000039e9 	.word	0x000039e9

00003cf8 <i2c_master_read_packet_wait>:
{
    3cf8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    3cfa:	8b83      	ldrh	r3, [r0, #28]
    3cfc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3cfe:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3d00:	2b00      	cmp	r3, #0
    3d02:	d001      	beq.n	3d08 <i2c_master_read_packet_wait+0x10>
}
    3d04:	0010      	movs	r0, r2
    3d06:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    3d08:	3301      	adds	r3, #1
    3d0a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3d0c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    3d0e:	4b02      	ldr	r3, [pc, #8]	; (3d18 <i2c_master_read_packet_wait+0x20>)
    3d10:	4798      	blx	r3
    3d12:	0002      	movs	r2, r0
    3d14:	e7f6      	b.n	3d04 <i2c_master_read_packet_wait+0xc>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00003a65 	.word	0x00003a65

00003d1c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d1c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d1e:	8b83      	ldrh	r3, [r0, #28]
    3d20:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3d22:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3d24:	2b00      	cmp	r3, #0
    3d26:	d001      	beq.n	3d2c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    3d28:	0010      	movs	r0, r2
    3d2a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    3d2c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3d2e:	3301      	adds	r3, #1
    3d30:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    3d32:	4b02      	ldr	r3, [pc, #8]	; (3d3c <i2c_master_write_packet_wait_no_stop+0x20>)
    3d34:	4798      	blx	r3
    3d36:	0002      	movs	r2, r0
    3d38:	e7f6      	b.n	3d28 <i2c_master_write_packet_wait_no_stop+0xc>
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	00003c05 	.word	0x00003c05

00003d40 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3d40:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3d42:	2207      	movs	r2, #7
    3d44:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    3d46:	421a      	tst	r2, r3
    3d48:	d1fc      	bne.n	3d44 <_i2c_master_wait_for_sync+0x4>
}
    3d4a:	4770      	bx	lr

00003d4c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3d4c:	b570      	push	{r4, r5, r6, lr}
    3d4e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3d50:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3d52:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3d54:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3d56:	8b83      	ldrh	r3, [r0, #28]
    3d58:	1aed      	subs	r5, r5, r3
    3d5a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    3d5c:	8b83      	ldrh	r3, [r0, #28]
    3d5e:	3b01      	subs	r3, #1
    3d60:	b29b      	uxth	r3, r3
    3d62:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    3d64:	0113      	lsls	r3, r2, #4
    3d66:	d51d      	bpl.n	3da4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    3d68:	7ac3      	ldrb	r3, [r0, #11]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d003      	beq.n	3d76 <_i2c_master_read+0x2a>
    3d6e:	8b83      	ldrh	r3, [r0, #28]
    3d70:	b29b      	uxth	r3, r3
    3d72:	2b01      	cmp	r3, #1
    3d74:	d010      	beq.n	3d98 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    3d76:	8ba3      	ldrh	r3, [r4, #28]
    3d78:	b29b      	uxth	r3, r3
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d102      	bne.n	3d84 <_i2c_master_read+0x38>
		if (module->send_stop) {
    3d7e:	7aa3      	ldrb	r3, [r4, #10]
    3d80:	2b00      	cmp	r3, #0
    3d82:	d11c      	bne.n	3dbe <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3d84:	0020      	movs	r0, r4
    3d86:	4b12      	ldr	r3, [pc, #72]	; (3dd0 <_i2c_master_read+0x84>)
    3d88:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3d8a:	6a23      	ldr	r3, [r4, #32]
    3d8c:	195d      	adds	r5, r3, r5
    3d8e:	2328      	movs	r3, #40	; 0x28
    3d90:	5cf3      	ldrb	r3, [r6, r3]
    3d92:	b2db      	uxtb	r3, r3
    3d94:	702b      	strb	r3, [r5, #0]
}
    3d96:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3d98:	6872      	ldr	r2, [r6, #4]
    3d9a:	2380      	movs	r3, #128	; 0x80
    3d9c:	02db      	lsls	r3, r3, #11
    3d9e:	4313      	orrs	r3, r2
    3da0:	6073      	str	r3, [r6, #4]
    3da2:	e7e8      	b.n	3d76 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    3da4:	7ac3      	ldrb	r3, [r0, #11]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d0e5      	beq.n	3d76 <_i2c_master_read+0x2a>
    3daa:	8b83      	ldrh	r3, [r0, #28]
    3dac:	b29b      	uxth	r3, r3
    3dae:	2b00      	cmp	r3, #0
    3db0:	d1e1      	bne.n	3d76 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3db2:	6872      	ldr	r2, [r6, #4]
    3db4:	2380      	movs	r3, #128	; 0x80
    3db6:	02db      	lsls	r3, r3, #11
    3db8:	4313      	orrs	r3, r2
    3dba:	6073      	str	r3, [r6, #4]
    3dbc:	e7db      	b.n	3d76 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    3dbe:	0020      	movs	r0, r4
    3dc0:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <_i2c_master_read+0x84>)
    3dc2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3dc4:	6872      	ldr	r2, [r6, #4]
    3dc6:	23c0      	movs	r3, #192	; 0xc0
    3dc8:	029b      	lsls	r3, r3, #10
    3dca:	4313      	orrs	r3, r2
    3dcc:	6073      	str	r3, [r6, #4]
    3dce:	e7d9      	b.n	3d84 <_i2c_master_read+0x38>
    3dd0:	00003d41 	.word	0x00003d41

00003dd4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3dd4:	b570      	push	{r4, r5, r6, lr}
    3dd6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3dd8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3dda:	8b6b      	ldrh	r3, [r5, #26]
    3ddc:	075b      	lsls	r3, r3, #29
    3dde:	d503      	bpl.n	3de8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3de0:	221e      	movs	r2, #30
    3de2:	2325      	movs	r3, #37	; 0x25
    3de4:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    3de6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    3de8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3dea:	8b83      	ldrh	r3, [r0, #28]
    3dec:	1af6      	subs	r6, r6, r3
    3dee:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    3df0:	8b83      	ldrh	r3, [r0, #28]
    3df2:	3b01      	subs	r3, #1
    3df4:	b29b      	uxth	r3, r3
    3df6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    3df8:	4b04      	ldr	r3, [pc, #16]	; (3e0c <_i2c_master_write+0x38>)
    3dfa:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3dfc:	6a23      	ldr	r3, [r4, #32]
    3dfe:	199e      	adds	r6, r3, r6
    3e00:	7833      	ldrb	r3, [r6, #0]
    3e02:	b2db      	uxtb	r3, r3
    3e04:	2228      	movs	r2, #40	; 0x28
    3e06:	54ab      	strb	r3, [r5, r2]
    3e08:	e7ed      	b.n	3de6 <_i2c_master_write+0x12>
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	00003d41 	.word	0x00003d41

00003e10 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    3e10:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    3e12:	0080      	lsls	r0, r0, #2
    3e14:	4b75      	ldr	r3, [pc, #468]	; (3fec <_i2c_master_interrupt_handler+0x1dc>)
    3e16:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e18:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e1a:	682b      	ldr	r3, [r5, #0]
    3e1c:	011b      	lsls	r3, r3, #4
    3e1e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    3e20:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    3e22:	7e26      	ldrb	r6, [r4, #24]
    3e24:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    3e26:	8b63      	ldrh	r3, [r4, #26]
    3e28:	b29b      	uxth	r3, r3
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d103      	bne.n	3e36 <_i2c_master_interrupt_handler+0x26>
    3e2e:	8ba3      	ldrh	r3, [r4, #28]
    3e30:	b29b      	uxth	r3, r3
    3e32:	2b00      	cmp	r3, #0
    3e34:	d123      	bne.n	3e7e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3e36:	8b63      	ldrh	r3, [r4, #26]
    3e38:	b29b      	uxth	r3, r3
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d008      	beq.n	3e50 <_i2c_master_interrupt_handler+0x40>
    3e3e:	8ba3      	ldrh	r3, [r4, #28]
    3e40:	b29b      	uxth	r3, r3
    3e42:	2b00      	cmp	r3, #0
    3e44:	d104      	bne.n	3e50 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    3e46:	3325      	adds	r3, #37	; 0x25
    3e48:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3e4a:	2b05      	cmp	r3, #5
    3e4c:	d100      	bne.n	3e50 <_i2c_master_interrupt_handler+0x40>
    3e4e:	e06d      	b.n	3f2c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    3e50:	8b63      	ldrh	r3, [r4, #26]
    3e52:	b29b      	uxth	r3, r3
    3e54:	2b00      	cmp	r3, #0
    3e56:	d024      	beq.n	3ea2 <_i2c_master_interrupt_handler+0x92>
    3e58:	8ba3      	ldrh	r3, [r4, #28]
    3e5a:	b29b      	uxth	r3, r3
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d020      	beq.n	3ea2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3e60:	8b6b      	ldrh	r3, [r5, #26]
    3e62:	069b      	lsls	r3, r3, #26
    3e64:	d500      	bpl.n	3e68 <_i2c_master_interrupt_handler+0x58>
    3e66:	e081      	b.n	3f6c <_i2c_master_interrupt_handler+0x15c>
    3e68:	2a00      	cmp	r2, #0
    3e6a:	d004      	beq.n	3e76 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3e6c:	8ba3      	ldrh	r3, [r4, #28]
    3e6e:	b29b      	uxth	r3, r3
    3e70:	2b01      	cmp	r3, #1
    3e72:	d100      	bne.n	3e76 <_i2c_master_interrupt_handler+0x66>
    3e74:	e07a      	b.n	3f6c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3e76:	2241      	movs	r2, #65	; 0x41
    3e78:	2325      	movs	r3, #37	; 0x25
    3e7a:	54e2      	strb	r2, [r4, r3]
    3e7c:	e011      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3e7e:	7e2b      	ldrb	r3, [r5, #24]
    3e80:	07db      	lsls	r3, r3, #31
    3e82:	d507      	bpl.n	3e94 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3e84:	2301      	movs	r3, #1
    3e86:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3e88:	8b6b      	ldrh	r3, [r5, #26]
    3e8a:	079b      	lsls	r3, r3, #30
    3e8c:	d52e      	bpl.n	3eec <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3e8e:	2241      	movs	r2, #65	; 0x41
    3e90:	2325      	movs	r3, #37	; 0x25
    3e92:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    3e94:	8ba3      	ldrh	r3, [r4, #28]
    3e96:	b29b      	uxth	r3, r3
    3e98:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    3e9a:	2325      	movs	r3, #37	; 0x25
    3e9c:	5ce3      	ldrb	r3, [r4, r3]
    3e9e:	2b05      	cmp	r3, #5
    3ea0:	d038      	beq.n	3f14 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3ea2:	8b63      	ldrh	r3, [r4, #26]
    3ea4:	b29b      	uxth	r3, r3
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d007      	beq.n	3eba <_i2c_master_interrupt_handler+0xaa>
    3eaa:	8ba3      	ldrh	r3, [r4, #28]
    3eac:	b29b      	uxth	r3, r3
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d103      	bne.n	3eba <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    3eb2:	3325      	adds	r3, #37	; 0x25
    3eb4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3eb6:	2b05      	cmp	r3, #5
    3eb8:	d064      	beq.n	3f84 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    3eba:	2325      	movs	r3, #37	; 0x25
    3ebc:	5ce3      	ldrb	r3, [r4, r3]
    3ebe:	2b05      	cmp	r3, #5
    3ec0:	d013      	beq.n	3eea <_i2c_master_interrupt_handler+0xda>
    3ec2:	2325      	movs	r3, #37	; 0x25
    3ec4:	5ce3      	ldrb	r3, [r4, r3]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d00f      	beq.n	3eea <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    3eca:	2303      	movs	r3, #3
    3ecc:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3ece:	2300      	movs	r3, #0
    3ed0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    3ed2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3ed4:	3325      	adds	r3, #37	; 0x25
    3ed6:	5ce3      	ldrb	r3, [r4, r3]
    3ed8:	2b41      	cmp	r3, #65	; 0x41
    3eda:	d003      	beq.n	3ee4 <_i2c_master_interrupt_handler+0xd4>
    3edc:	7aa3      	ldrb	r3, [r4, #10]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d000      	beq.n	3ee4 <_i2c_master_interrupt_handler+0xd4>
    3ee2:	e075      	b.n	3fd0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    3ee4:	0773      	lsls	r3, r6, #29
    3ee6:	d500      	bpl.n	3eea <_i2c_master_interrupt_handler+0xda>
    3ee8:	e07b      	b.n	3fe2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    3eea:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3eec:	8b6b      	ldrh	r3, [r5, #26]
    3eee:	075b      	lsls	r3, r3, #29
    3ef0:	d5d0      	bpl.n	3e94 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3ef2:	2218      	movs	r2, #24
    3ef4:	2325      	movs	r3, #37	; 0x25
    3ef6:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    3ef8:	2300      	movs	r3, #0
    3efa:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    3efc:	7aa3      	ldrb	r3, [r4, #10]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d0c8      	beq.n	3e94 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    3f02:	0020      	movs	r0, r4
    3f04:	4b3a      	ldr	r3, [pc, #232]	; (3ff0 <_i2c_master_interrupt_handler+0x1e0>)
    3f06:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3f08:	686a      	ldr	r2, [r5, #4]
    3f0a:	23c0      	movs	r3, #192	; 0xc0
    3f0c:	029b      	lsls	r3, r3, #10
    3f0e:	4313      	orrs	r3, r2
    3f10:	606b      	str	r3, [r5, #4]
    3f12:	e7bf      	b.n	3e94 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3f14:	331f      	adds	r3, #31
    3f16:	5ce3      	ldrb	r3, [r4, r3]
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d003      	beq.n	3f24 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    3f1c:	0020      	movs	r0, r4
    3f1e:	4b35      	ldr	r3, [pc, #212]	; (3ff4 <_i2c_master_interrupt_handler+0x1e4>)
    3f20:	4798      	blx	r3
    3f22:	e7be      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    3f24:	0020      	movs	r0, r4
    3f26:	4b34      	ldr	r3, [pc, #208]	; (3ff8 <_i2c_master_interrupt_handler+0x1e8>)
    3f28:	4798      	blx	r3
    3f2a:	e7ba      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3f2c:	331f      	adds	r3, #31
    3f2e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3f30:	2b00      	cmp	r3, #0
    3f32:	d000      	beq.n	3f36 <_i2c_master_interrupt_handler+0x126>
    3f34:	e78c      	b.n	3e50 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    3f36:	3303      	adds	r3, #3
    3f38:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3f3a:	2300      	movs	r3, #0
    3f3c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3f3e:	3325      	adds	r3, #37	; 0x25
    3f40:	2200      	movs	r2, #0
    3f42:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    3f44:	7aa3      	ldrb	r3, [r4, #10]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d107      	bne.n	3f5a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3f4a:	2301      	movs	r3, #1
    3f4c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3f4e:	07f3      	lsls	r3, r6, #31
    3f50:	d5a7      	bpl.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3f52:	68e3      	ldr	r3, [r4, #12]
    3f54:	0020      	movs	r0, r4
    3f56:	4798      	blx	r3
    3f58:	e7a3      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    3f5a:	0020      	movs	r0, r4
    3f5c:	4b24      	ldr	r3, [pc, #144]	; (3ff0 <_i2c_master_interrupt_handler+0x1e0>)
    3f5e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3f60:	686a      	ldr	r2, [r5, #4]
    3f62:	23c0      	movs	r3, #192	; 0xc0
    3f64:	029b      	lsls	r3, r3, #10
    3f66:	4313      	orrs	r3, r2
    3f68:	606b      	str	r3, [r5, #4]
    3f6a:	e7f0      	b.n	3f4e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3f6c:	2324      	movs	r3, #36	; 0x24
    3f6e:	5ce3      	ldrb	r3, [r4, r3]
    3f70:	2b00      	cmp	r3, #0
    3f72:	d103      	bne.n	3f7c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    3f74:	0020      	movs	r0, r4
    3f76:	4b20      	ldr	r3, [pc, #128]	; (3ff8 <_i2c_master_interrupt_handler+0x1e8>)
    3f78:	4798      	blx	r3
    3f7a:	e792      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    3f7c:	0020      	movs	r0, r4
    3f7e:	4b1d      	ldr	r3, [pc, #116]	; (3ff4 <_i2c_master_interrupt_handler+0x1e4>)
    3f80:	4798      	blx	r3
    3f82:	e78e      	b.n	3ea2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    3f84:	331f      	adds	r3, #31
    3f86:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3f88:	2b01      	cmp	r3, #1
    3f8a:	d196      	bne.n	3eba <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3f8c:	7e2b      	ldrb	r3, [r5, #24]
    3f8e:	079b      	lsls	r3, r3, #30
    3f90:	d501      	bpl.n	3f96 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3f92:	2302      	movs	r3, #2
    3f94:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    3f96:	2303      	movs	r3, #3
    3f98:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3f9a:	2300      	movs	r3, #0
    3f9c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3f9e:	3325      	adds	r3, #37	; 0x25
    3fa0:	2200      	movs	r2, #0
    3fa2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3fa4:	07b3      	lsls	r3, r6, #30
    3fa6:	d503      	bpl.n	3fb0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    3fa8:	2324      	movs	r3, #36	; 0x24
    3faa:	5ce3      	ldrb	r3, [r4, r3]
    3fac:	2b01      	cmp	r3, #1
    3fae:	d00b      	beq.n	3fc8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3fb0:	07f3      	lsls	r3, r6, #31
    3fb2:	d400      	bmi.n	3fb6 <_i2c_master_interrupt_handler+0x1a6>
    3fb4:	e781      	b.n	3eba <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3fb6:	2324      	movs	r3, #36	; 0x24
    3fb8:	5ce3      	ldrb	r3, [r4, r3]
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d000      	beq.n	3fc0 <_i2c_master_interrupt_handler+0x1b0>
    3fbe:	e77c      	b.n	3eba <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3fc0:	68e3      	ldr	r3, [r4, #12]
    3fc2:	0020      	movs	r0, r4
    3fc4:	4798      	blx	r3
    3fc6:	e778      	b.n	3eba <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    3fc8:	6923      	ldr	r3, [r4, #16]
    3fca:	0020      	movs	r0, r4
    3fcc:	4798      	blx	r3
    3fce:	e774      	b.n	3eba <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    3fd0:	0020      	movs	r0, r4
    3fd2:	4b07      	ldr	r3, [pc, #28]	; (3ff0 <_i2c_master_interrupt_handler+0x1e0>)
    3fd4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    3fd6:	686a      	ldr	r2, [r5, #4]
    3fd8:	23e0      	movs	r3, #224	; 0xe0
    3fda:	02db      	lsls	r3, r3, #11
    3fdc:	4313      	orrs	r3, r2
    3fde:	606b      	str	r3, [r5, #4]
    3fe0:	e780      	b.n	3ee4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3fe2:	6963      	ldr	r3, [r4, #20]
    3fe4:	0020      	movs	r0, r4
    3fe6:	4798      	blx	r3
}
    3fe8:	e77f      	b.n	3eea <_i2c_master_interrupt_handler+0xda>
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	20002078 	.word	0x20002078
    3ff0:	00003d41 	.word	0x00003d41
    3ff4:	00003d4d 	.word	0x00003d4d
    3ff8:	00003dd5 	.word	0x00003dd5

00003ffc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ffe:	46de      	mov	lr, fp
    4000:	4657      	mov	r7, sl
    4002:	464e      	mov	r6, r9
    4004:	4645      	mov	r5, r8
    4006:	b5e0      	push	{r5, r6, r7, lr}
    4008:	b087      	sub	sp, #28
    400a:	4680      	mov	r8, r0
    400c:	9104      	str	r1, [sp, #16]
    400e:	0016      	movs	r6, r2
    4010:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4012:	2200      	movs	r2, #0
    4014:	2300      	movs	r3, #0
    4016:	2100      	movs	r1, #0
    4018:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    401a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    401c:	2001      	movs	r0, #1
    401e:	0021      	movs	r1, r4
    4020:	9600      	str	r6, [sp, #0]
    4022:	9701      	str	r7, [sp, #4]
    4024:	465c      	mov	r4, fp
    4026:	9403      	str	r4, [sp, #12]
    4028:	4644      	mov	r4, r8
    402a:	9405      	str	r4, [sp, #20]
    402c:	e013      	b.n	4056 <long_division+0x5a>
    402e:	2420      	movs	r4, #32
    4030:	1a64      	subs	r4, r4, r1
    4032:	0005      	movs	r5, r0
    4034:	40e5      	lsrs	r5, r4
    4036:	46a8      	mov	r8, r5
    4038:	e014      	b.n	4064 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    403a:	9c00      	ldr	r4, [sp, #0]
    403c:	9d01      	ldr	r5, [sp, #4]
    403e:	1b12      	subs	r2, r2, r4
    4040:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4042:	465c      	mov	r4, fp
    4044:	464d      	mov	r5, r9
    4046:	432c      	orrs	r4, r5
    4048:	46a3      	mov	fp, r4
    404a:	9c03      	ldr	r4, [sp, #12]
    404c:	4645      	mov	r5, r8
    404e:	432c      	orrs	r4, r5
    4050:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4052:	3901      	subs	r1, #1
    4054:	d325      	bcc.n	40a2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4056:	2420      	movs	r4, #32
    4058:	4264      	negs	r4, r4
    405a:	190c      	adds	r4, r1, r4
    405c:	d4e7      	bmi.n	402e <long_division+0x32>
    405e:	0005      	movs	r5, r0
    4060:	40a5      	lsls	r5, r4
    4062:	46a8      	mov	r8, r5
    4064:	0004      	movs	r4, r0
    4066:	408c      	lsls	r4, r1
    4068:	46a1      	mov	r9, r4
		r = r << 1;
    406a:	1892      	adds	r2, r2, r2
    406c:	415b      	adcs	r3, r3
    406e:	0014      	movs	r4, r2
    4070:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4072:	9e05      	ldr	r6, [sp, #20]
    4074:	464f      	mov	r7, r9
    4076:	403e      	ands	r6, r7
    4078:	46b4      	mov	ip, r6
    407a:	9e04      	ldr	r6, [sp, #16]
    407c:	4647      	mov	r7, r8
    407e:	403e      	ands	r6, r7
    4080:	46b2      	mov	sl, r6
    4082:	4666      	mov	r6, ip
    4084:	4657      	mov	r7, sl
    4086:	433e      	orrs	r6, r7
    4088:	d003      	beq.n	4092 <long_division+0x96>
			r |= 0x01;
    408a:	0006      	movs	r6, r0
    408c:	4326      	orrs	r6, r4
    408e:	0032      	movs	r2, r6
    4090:	002b      	movs	r3, r5
		if (r >= d) {
    4092:	9c00      	ldr	r4, [sp, #0]
    4094:	9d01      	ldr	r5, [sp, #4]
    4096:	429d      	cmp	r5, r3
    4098:	d8db      	bhi.n	4052 <long_division+0x56>
    409a:	d1ce      	bne.n	403a <long_division+0x3e>
    409c:	4294      	cmp	r4, r2
    409e:	d8d8      	bhi.n	4052 <long_division+0x56>
    40a0:	e7cb      	b.n	403a <long_division+0x3e>
    40a2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    40a4:	4658      	mov	r0, fp
    40a6:	0019      	movs	r1, r3
    40a8:	b007      	add	sp, #28
    40aa:	bc3c      	pop	{r2, r3, r4, r5}
    40ac:	4690      	mov	r8, r2
    40ae:	4699      	mov	r9, r3
    40b0:	46a2      	mov	sl, r4
    40b2:	46ab      	mov	fp, r5
    40b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000040b6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    40b6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    40b8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    40ba:	2340      	movs	r3, #64	; 0x40
    40bc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    40be:	4281      	cmp	r1, r0
    40c0:	d202      	bcs.n	40c8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    40c2:	0018      	movs	r0, r3
    40c4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    40c6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    40c8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    40ca:	1c63      	adds	r3, r4, #1
    40cc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    40ce:	4288      	cmp	r0, r1
    40d0:	d9f9      	bls.n	40c6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    40d2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    40d4:	2cff      	cmp	r4, #255	; 0xff
    40d6:	d8f4      	bhi.n	40c2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    40d8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    40da:	2300      	movs	r3, #0
    40dc:	e7f1      	b.n	40c2 <_sercom_get_sync_baud_val+0xc>
	...

000040e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    40e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40e2:	b083      	sub	sp, #12
    40e4:	000f      	movs	r7, r1
    40e6:	0016      	movs	r6, r2
    40e8:	aa08      	add	r2, sp, #32
    40ea:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    40ec:	0004      	movs	r4, r0
    40ee:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    40f0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    40f2:	42bc      	cmp	r4, r7
    40f4:	d902      	bls.n	40fc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    40f6:	0010      	movs	r0, r2
    40f8:	b003      	add	sp, #12
    40fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    40fc:	2b00      	cmp	r3, #0
    40fe:	d114      	bne.n	412a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4100:	0002      	movs	r2, r0
    4102:	0008      	movs	r0, r1
    4104:	2100      	movs	r1, #0
    4106:	4c19      	ldr	r4, [pc, #100]	; (416c <_sercom_get_async_baud_val+0x8c>)
    4108:	47a0      	blx	r4
    410a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    410c:	003a      	movs	r2, r7
    410e:	2300      	movs	r3, #0
    4110:	2000      	movs	r0, #0
    4112:	4c17      	ldr	r4, [pc, #92]	; (4170 <_sercom_get_async_baud_val+0x90>)
    4114:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4116:	2200      	movs	r2, #0
    4118:	2301      	movs	r3, #1
    411a:	1a12      	subs	r2, r2, r0
    411c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    411e:	0c12      	lsrs	r2, r2, #16
    4120:	041b      	lsls	r3, r3, #16
    4122:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4124:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4126:	2200      	movs	r2, #0
    4128:	e7e5      	b.n	40f6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    412a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    412c:	2b01      	cmp	r3, #1
    412e:	d1f9      	bne.n	4124 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4130:	000a      	movs	r2, r1
    4132:	2300      	movs	r3, #0
    4134:	2100      	movs	r1, #0
    4136:	4c0d      	ldr	r4, [pc, #52]	; (416c <_sercom_get_async_baud_val+0x8c>)
    4138:	47a0      	blx	r4
    413a:	0002      	movs	r2, r0
    413c:	000b      	movs	r3, r1
    413e:	9200      	str	r2, [sp, #0]
    4140:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4142:	0038      	movs	r0, r7
    4144:	2100      	movs	r1, #0
    4146:	4c0a      	ldr	r4, [pc, #40]	; (4170 <_sercom_get_async_baud_val+0x90>)
    4148:	47a0      	blx	r4
    414a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    414c:	2380      	movs	r3, #128	; 0x80
    414e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4150:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4152:	4298      	cmp	r0, r3
    4154:	d8cf      	bhi.n	40f6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4156:	0f79      	lsrs	r1, r7, #29
    4158:	00f8      	lsls	r0, r7, #3
    415a:	9a00      	ldr	r2, [sp, #0]
    415c:	9b01      	ldr	r3, [sp, #4]
    415e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4160:	00ea      	lsls	r2, r5, #3
    4162:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4164:	b2d2      	uxtb	r2, r2
    4166:	0352      	lsls	r2, r2, #13
    4168:	432a      	orrs	r2, r5
    416a:	e7db      	b.n	4124 <_sercom_get_async_baud_val+0x44>
    416c:	0001536d 	.word	0x0001536d
    4170:	00003ffd 	.word	0x00003ffd

00004174 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4174:	b510      	push	{r4, lr}
    4176:	b082      	sub	sp, #8
    4178:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    417a:	4b0e      	ldr	r3, [pc, #56]	; (41b4 <sercom_set_gclk_generator+0x40>)
    417c:	781b      	ldrb	r3, [r3, #0]
    417e:	2b00      	cmp	r3, #0
    4180:	d007      	beq.n	4192 <sercom_set_gclk_generator+0x1e>
    4182:	2900      	cmp	r1, #0
    4184:	d105      	bne.n	4192 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4186:	4b0b      	ldr	r3, [pc, #44]	; (41b4 <sercom_set_gclk_generator+0x40>)
    4188:	785b      	ldrb	r3, [r3, #1]
    418a:	4283      	cmp	r3, r0
    418c:	d010      	beq.n	41b0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    418e:	201d      	movs	r0, #29
    4190:	e00c      	b.n	41ac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4192:	a901      	add	r1, sp, #4
    4194:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4196:	2011      	movs	r0, #17
    4198:	4b07      	ldr	r3, [pc, #28]	; (41b8 <sercom_set_gclk_generator+0x44>)
    419a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    419c:	2011      	movs	r0, #17
    419e:	4b07      	ldr	r3, [pc, #28]	; (41bc <sercom_set_gclk_generator+0x48>)
    41a0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    41a2:	4b04      	ldr	r3, [pc, #16]	; (41b4 <sercom_set_gclk_generator+0x40>)
    41a4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    41a6:	2201      	movs	r2, #1
    41a8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    41aa:	2000      	movs	r0, #0
}
    41ac:	b002      	add	sp, #8
    41ae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    41b0:	2000      	movs	r0, #0
    41b2:	e7fb      	b.n	41ac <sercom_set_gclk_generator+0x38>
    41b4:	200009f8 	.word	0x200009f8
    41b8:	00005619 	.word	0x00005619
    41bc:	000055a9 	.word	0x000055a9

000041c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    41c0:	4b3c      	ldr	r3, [pc, #240]	; (42b4 <_sercom_get_default_pad+0xf4>)
    41c2:	4298      	cmp	r0, r3
    41c4:	d032      	beq.n	422c <_sercom_get_default_pad+0x6c>
    41c6:	d90a      	bls.n	41de <_sercom_get_default_pad+0x1e>
    41c8:	4b3b      	ldr	r3, [pc, #236]	; (42b8 <_sercom_get_default_pad+0xf8>)
    41ca:	4298      	cmp	r0, r3
    41cc:	d04e      	beq.n	426c <_sercom_get_default_pad+0xac>
    41ce:	4b3b      	ldr	r3, [pc, #236]	; (42bc <_sercom_get_default_pad+0xfc>)
    41d0:	4298      	cmp	r0, r3
    41d2:	d055      	beq.n	4280 <_sercom_get_default_pad+0xc0>
    41d4:	4b3a      	ldr	r3, [pc, #232]	; (42c0 <_sercom_get_default_pad+0x100>)
    41d6:	4298      	cmp	r0, r3
    41d8:	d038      	beq.n	424c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    41da:	2000      	movs	r0, #0
}
    41dc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    41de:	2384      	movs	r3, #132	; 0x84
    41e0:	05db      	lsls	r3, r3, #23
    41e2:	4298      	cmp	r0, r3
    41e4:	d00c      	beq.n	4200 <_sercom_get_default_pad+0x40>
    41e6:	4b37      	ldr	r3, [pc, #220]	; (42c4 <_sercom_get_default_pad+0x104>)
    41e8:	4298      	cmp	r0, r3
    41ea:	d1f6      	bne.n	41da <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    41ec:	2901      	cmp	r1, #1
    41ee:	d017      	beq.n	4220 <_sercom_get_default_pad+0x60>
    41f0:	2900      	cmp	r1, #0
    41f2:	d057      	beq.n	42a4 <_sercom_get_default_pad+0xe4>
    41f4:	2902      	cmp	r1, #2
    41f6:	d015      	beq.n	4224 <_sercom_get_default_pad+0x64>
    41f8:	2903      	cmp	r1, #3
    41fa:	d015      	beq.n	4228 <_sercom_get_default_pad+0x68>
	return 0;
    41fc:	2000      	movs	r0, #0
    41fe:	e7ed      	b.n	41dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4200:	2901      	cmp	r1, #1
    4202:	d007      	beq.n	4214 <_sercom_get_default_pad+0x54>
    4204:	2900      	cmp	r1, #0
    4206:	d04b      	beq.n	42a0 <_sercom_get_default_pad+0xe0>
    4208:	2902      	cmp	r1, #2
    420a:	d005      	beq.n	4218 <_sercom_get_default_pad+0x58>
    420c:	2903      	cmp	r1, #3
    420e:	d005      	beq.n	421c <_sercom_get_default_pad+0x5c>
	return 0;
    4210:	2000      	movs	r0, #0
    4212:	e7e3      	b.n	41dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4214:	482c      	ldr	r0, [pc, #176]	; (42c8 <_sercom_get_default_pad+0x108>)
    4216:	e7e1      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4218:	482c      	ldr	r0, [pc, #176]	; (42cc <_sercom_get_default_pad+0x10c>)
    421a:	e7df      	b.n	41dc <_sercom_get_default_pad+0x1c>
    421c:	482c      	ldr	r0, [pc, #176]	; (42d0 <_sercom_get_default_pad+0x110>)
    421e:	e7dd      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4220:	482c      	ldr	r0, [pc, #176]	; (42d4 <_sercom_get_default_pad+0x114>)
    4222:	e7db      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4224:	482c      	ldr	r0, [pc, #176]	; (42d8 <_sercom_get_default_pad+0x118>)
    4226:	e7d9      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4228:	482c      	ldr	r0, [pc, #176]	; (42dc <_sercom_get_default_pad+0x11c>)
    422a:	e7d7      	b.n	41dc <_sercom_get_default_pad+0x1c>
    422c:	2901      	cmp	r1, #1
    422e:	d007      	beq.n	4240 <_sercom_get_default_pad+0x80>
    4230:	2900      	cmp	r1, #0
    4232:	d039      	beq.n	42a8 <_sercom_get_default_pad+0xe8>
    4234:	2902      	cmp	r1, #2
    4236:	d005      	beq.n	4244 <_sercom_get_default_pad+0x84>
    4238:	2903      	cmp	r1, #3
    423a:	d005      	beq.n	4248 <_sercom_get_default_pad+0x88>
	return 0;
    423c:	2000      	movs	r0, #0
    423e:	e7cd      	b.n	41dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4240:	4827      	ldr	r0, [pc, #156]	; (42e0 <_sercom_get_default_pad+0x120>)
    4242:	e7cb      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4244:	4827      	ldr	r0, [pc, #156]	; (42e4 <_sercom_get_default_pad+0x124>)
    4246:	e7c9      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4248:	4827      	ldr	r0, [pc, #156]	; (42e8 <_sercom_get_default_pad+0x128>)
    424a:	e7c7      	b.n	41dc <_sercom_get_default_pad+0x1c>
    424c:	2901      	cmp	r1, #1
    424e:	d007      	beq.n	4260 <_sercom_get_default_pad+0xa0>
    4250:	2900      	cmp	r1, #0
    4252:	d02b      	beq.n	42ac <_sercom_get_default_pad+0xec>
    4254:	2902      	cmp	r1, #2
    4256:	d005      	beq.n	4264 <_sercom_get_default_pad+0xa4>
    4258:	2903      	cmp	r1, #3
    425a:	d005      	beq.n	4268 <_sercom_get_default_pad+0xa8>
	return 0;
    425c:	2000      	movs	r0, #0
    425e:	e7bd      	b.n	41dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4260:	4822      	ldr	r0, [pc, #136]	; (42ec <_sercom_get_default_pad+0x12c>)
    4262:	e7bb      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4264:	4822      	ldr	r0, [pc, #136]	; (42f0 <_sercom_get_default_pad+0x130>)
    4266:	e7b9      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4268:	4822      	ldr	r0, [pc, #136]	; (42f4 <_sercom_get_default_pad+0x134>)
    426a:	e7b7      	b.n	41dc <_sercom_get_default_pad+0x1c>
    426c:	2902      	cmp	r1, #2
    426e:	d003      	beq.n	4278 <_sercom_get_default_pad+0xb8>
    4270:	2903      	cmp	r1, #3
    4272:	d003      	beq.n	427c <_sercom_get_default_pad+0xbc>
    4274:	2000      	movs	r0, #0
    4276:	e7b1      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4278:	481f      	ldr	r0, [pc, #124]	; (42f8 <_sercom_get_default_pad+0x138>)
    427a:	e7af      	b.n	41dc <_sercom_get_default_pad+0x1c>
    427c:	481f      	ldr	r0, [pc, #124]	; (42fc <_sercom_get_default_pad+0x13c>)
    427e:	e7ad      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4280:	2901      	cmp	r1, #1
    4282:	d007      	beq.n	4294 <_sercom_get_default_pad+0xd4>
    4284:	2900      	cmp	r1, #0
    4286:	d013      	beq.n	42b0 <_sercom_get_default_pad+0xf0>
    4288:	2902      	cmp	r1, #2
    428a:	d005      	beq.n	4298 <_sercom_get_default_pad+0xd8>
    428c:	2903      	cmp	r1, #3
    428e:	d005      	beq.n	429c <_sercom_get_default_pad+0xdc>
	return 0;
    4290:	2000      	movs	r0, #0
    4292:	e7a3      	b.n	41dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4294:	481a      	ldr	r0, [pc, #104]	; (4300 <_sercom_get_default_pad+0x140>)
    4296:	e7a1      	b.n	41dc <_sercom_get_default_pad+0x1c>
    4298:	481a      	ldr	r0, [pc, #104]	; (4304 <_sercom_get_default_pad+0x144>)
    429a:	e79f      	b.n	41dc <_sercom_get_default_pad+0x1c>
    429c:	481a      	ldr	r0, [pc, #104]	; (4308 <_sercom_get_default_pad+0x148>)
    429e:	e79d      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42a0:	481a      	ldr	r0, [pc, #104]	; (430c <_sercom_get_default_pad+0x14c>)
    42a2:	e79b      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42a4:	2003      	movs	r0, #3
    42a6:	e799      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42a8:	4819      	ldr	r0, [pc, #100]	; (4310 <_sercom_get_default_pad+0x150>)
    42aa:	e797      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42ac:	4819      	ldr	r0, [pc, #100]	; (4314 <_sercom_get_default_pad+0x154>)
    42ae:	e795      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42b0:	4819      	ldr	r0, [pc, #100]	; (4318 <_sercom_get_default_pad+0x158>)
    42b2:	e793      	b.n	41dc <_sercom_get_default_pad+0x1c>
    42b4:	42000800 	.word	0x42000800
    42b8:	42001000 	.word	0x42001000
    42bc:	43000400 	.word	0x43000400
    42c0:	42000c00 	.word	0x42000c00
    42c4:	42000400 	.word	0x42000400
    42c8:	00050003 	.word	0x00050003
    42cc:	00060003 	.word	0x00060003
    42d0:	00070003 	.word	0x00070003
    42d4:	00010003 	.word	0x00010003
    42d8:	001e0003 	.word	0x001e0003
    42dc:	001f0003 	.word	0x001f0003
    42e0:	00090003 	.word	0x00090003
    42e4:	000a0003 	.word	0x000a0003
    42e8:	000b0003 	.word	0x000b0003
    42ec:	00110003 	.word	0x00110003
    42f0:	00120003 	.word	0x00120003
    42f4:	00130003 	.word	0x00130003
    42f8:	000e0003 	.word	0x000e0003
    42fc:	000f0003 	.word	0x000f0003
    4300:	00170003 	.word	0x00170003
    4304:	00180003 	.word	0x00180003
    4308:	00190003 	.word	0x00190003
    430c:	00040003 	.word	0x00040003
    4310:	00080003 	.word	0x00080003
    4314:	00100003 	.word	0x00100003
    4318:	00160003 	.word	0x00160003

0000431c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    431c:	b530      	push	{r4, r5, lr}
    431e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4320:	4b0b      	ldr	r3, [pc, #44]	; (4350 <_sercom_get_sercom_inst_index+0x34>)
    4322:	466a      	mov	r2, sp
    4324:	cb32      	ldmia	r3!, {r1, r4, r5}
    4326:	c232      	stmia	r2!, {r1, r4, r5}
    4328:	cb32      	ldmia	r3!, {r1, r4, r5}
    432a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    432c:	9b00      	ldr	r3, [sp, #0]
    432e:	4283      	cmp	r3, r0
    4330:	d00b      	beq.n	434a <_sercom_get_sercom_inst_index+0x2e>
    4332:	2301      	movs	r3, #1
    4334:	009a      	lsls	r2, r3, #2
    4336:	4669      	mov	r1, sp
    4338:	5852      	ldr	r2, [r2, r1]
    433a:	4282      	cmp	r2, r0
    433c:	d006      	beq.n	434c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    433e:	3301      	adds	r3, #1
    4340:	2b06      	cmp	r3, #6
    4342:	d1f7      	bne.n	4334 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4344:	2000      	movs	r0, #0
}
    4346:	b007      	add	sp, #28
    4348:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    434a:	2300      	movs	r3, #0
			return i;
    434c:	b2d8      	uxtb	r0, r3
    434e:	e7fa      	b.n	4346 <_sercom_get_sercom_inst_index+0x2a>
    4350:	0001e284 	.word	0x0001e284

00004354 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4354:	4770      	bx	lr
	...

00004358 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    435a:	4b0a      	ldr	r3, [pc, #40]	; (4384 <_sercom_set_handler+0x2c>)
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	2b00      	cmp	r3, #0
    4360:	d10c      	bne.n	437c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4362:	4f09      	ldr	r7, [pc, #36]	; (4388 <_sercom_set_handler+0x30>)
    4364:	4e09      	ldr	r6, [pc, #36]	; (438c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4366:	4d0a      	ldr	r5, [pc, #40]	; (4390 <_sercom_set_handler+0x38>)
    4368:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    436a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    436c:	195a      	adds	r2, r3, r5
    436e:	6014      	str	r4, [r2, #0]
    4370:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4372:	2b18      	cmp	r3, #24
    4374:	d1f9      	bne.n	436a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4376:	2201      	movs	r2, #1
    4378:	4b02      	ldr	r3, [pc, #8]	; (4384 <_sercom_set_handler+0x2c>)
    437a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    437c:	0080      	lsls	r0, r0, #2
    437e:	4b02      	ldr	r3, [pc, #8]	; (4388 <_sercom_set_handler+0x30>)
    4380:	50c1      	str	r1, [r0, r3]
}
    4382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4384:	200009fa 	.word	0x200009fa
    4388:	200009fc 	.word	0x200009fc
    438c:	00004355 	.word	0x00004355
    4390:	20002078 	.word	0x20002078

00004394 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4394:	b500      	push	{lr}
    4396:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4398:	2308      	movs	r3, #8
    439a:	466a      	mov	r2, sp
    439c:	7013      	strb	r3, [r2, #0]
    439e:	3301      	adds	r3, #1
    43a0:	7053      	strb	r3, [r2, #1]
    43a2:	3301      	adds	r3, #1
    43a4:	7093      	strb	r3, [r2, #2]
    43a6:	3301      	adds	r3, #1
    43a8:	70d3      	strb	r3, [r2, #3]
    43aa:	3301      	adds	r3, #1
    43ac:	7113      	strb	r3, [r2, #4]
    43ae:	3301      	adds	r3, #1
    43b0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    43b2:	4b03      	ldr	r3, [pc, #12]	; (43c0 <_sercom_get_interrupt_vector+0x2c>)
    43b4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    43b6:	466b      	mov	r3, sp
    43b8:	5618      	ldrsb	r0, [r3, r0]
}
    43ba:	b003      	add	sp, #12
    43bc:	bd00      	pop	{pc}
    43be:	46c0      	nop			; (mov r8, r8)
    43c0:	0000431d 	.word	0x0000431d

000043c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    43c4:	b510      	push	{r4, lr}
    43c6:	4b02      	ldr	r3, [pc, #8]	; (43d0 <SERCOM0_Handler+0xc>)
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	2000      	movs	r0, #0
    43cc:	4798      	blx	r3
    43ce:	bd10      	pop	{r4, pc}
    43d0:	200009fc 	.word	0x200009fc

000043d4 <SERCOM1_Handler>:
    43d4:	b510      	push	{r4, lr}
    43d6:	4b02      	ldr	r3, [pc, #8]	; (43e0 <SERCOM1_Handler+0xc>)
    43d8:	685b      	ldr	r3, [r3, #4]
    43da:	2001      	movs	r0, #1
    43dc:	4798      	blx	r3
    43de:	bd10      	pop	{r4, pc}
    43e0:	200009fc 	.word	0x200009fc

000043e4 <SERCOM2_Handler>:
    43e4:	b510      	push	{r4, lr}
    43e6:	4b02      	ldr	r3, [pc, #8]	; (43f0 <SERCOM2_Handler+0xc>)
    43e8:	689b      	ldr	r3, [r3, #8]
    43ea:	2002      	movs	r0, #2
    43ec:	4798      	blx	r3
    43ee:	bd10      	pop	{r4, pc}
    43f0:	200009fc 	.word	0x200009fc

000043f4 <SERCOM3_Handler>:
    43f4:	b510      	push	{r4, lr}
    43f6:	4b02      	ldr	r3, [pc, #8]	; (4400 <SERCOM3_Handler+0xc>)
    43f8:	68db      	ldr	r3, [r3, #12]
    43fa:	2003      	movs	r0, #3
    43fc:	4798      	blx	r3
    43fe:	bd10      	pop	{r4, pc}
    4400:	200009fc 	.word	0x200009fc

00004404 <SERCOM4_Handler>:
    4404:	b510      	push	{r4, lr}
    4406:	4b02      	ldr	r3, [pc, #8]	; (4410 <SERCOM4_Handler+0xc>)
    4408:	691b      	ldr	r3, [r3, #16]
    440a:	2004      	movs	r0, #4
    440c:	4798      	blx	r3
    440e:	bd10      	pop	{r4, pc}
    4410:	200009fc 	.word	0x200009fc

00004414 <SERCOM5_Handler>:
    4414:	b510      	push	{r4, lr}
    4416:	4b02      	ldr	r3, [pc, #8]	; (4420 <SERCOM5_Handler+0xc>)
    4418:	695b      	ldr	r3, [r3, #20]
    441a:	2005      	movs	r0, #5
    441c:	4798      	blx	r3
    441e:	bd10      	pop	{r4, pc}
    4420:	200009fc 	.word	0x200009fc

00004424 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4424:	b5f0      	push	{r4, r5, r6, r7, lr}
    4426:	46d6      	mov	lr, sl
    4428:	464f      	mov	r7, r9
    442a:	4646      	mov	r6, r8
    442c:	b5c0      	push	{r6, r7, lr}
    442e:	b08a      	sub	sp, #40	; 0x28
    4430:	0006      	movs	r6, r0
    4432:	000f      	movs	r7, r1
    4434:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4436:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4438:	680b      	ldr	r3, [r1, #0]
    443a:	079b      	lsls	r3, r3, #30
    443c:	d40a      	bmi.n	4454 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    443e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4440:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4442:	07db      	lsls	r3, r3, #31
    4444:	d400      	bmi.n	4448 <spi_init+0x24>
    4446:	e097      	b.n	4578 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4448:	b00a      	add	sp, #40	; 0x28
    444a:	bc1c      	pop	{r2, r3, r4}
    444c:	4690      	mov	r8, r2
    444e:	4699      	mov	r9, r3
    4450:	46a2      	mov	sl, r4
    4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    4454:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4456:	9305      	str	r3, [sp, #20]
    4458:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    445a:	9306      	str	r3, [sp, #24]
    445c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    445e:	9307      	str	r3, [sp, #28]
    4460:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4462:	9308      	str	r3, [sp, #32]
    4464:	2500      	movs	r5, #0
    4466:	e00a      	b.n	447e <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4468:	0038      	movs	r0, r7
    446a:	4b9a      	ldr	r3, [pc, #616]	; (46d4 <spi_init+0x2b0>)
    446c:	4798      	blx	r3
    446e:	e00e      	b.n	448e <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    4470:	230f      	movs	r3, #15
    4472:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    4474:	4581      	cmp	r9, r0
    4476:	d130      	bne.n	44da <spi_init+0xb6>
    4478:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    447a:	2d04      	cmp	r5, #4
    447c:	d031      	beq.n	44e2 <spi_init+0xbe>
    447e:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4480:	00ab      	lsls	r3, r5, #2
    4482:	aa02      	add	r2, sp, #8
    4484:	200c      	movs	r0, #12
    4486:	1812      	adds	r2, r2, r0
    4488:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    448a:	2800      	cmp	r0, #0
    448c:	d0ec      	beq.n	4468 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    448e:	1c43      	adds	r3, r0, #1
    4490:	d0f2      	beq.n	4478 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    4492:	0401      	lsls	r1, r0, #16
    4494:	0c0b      	lsrs	r3, r1, #16
    4496:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4498:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    449a:	b2c3      	uxtb	r3, r0
    449c:	469c      	mov	ip, r3
		return NULL;
    449e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    44a0:	0602      	lsls	r2, r0, #24
    44a2:	d405      	bmi.n	44b0 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    44a4:	4663      	mov	r3, ip
    44a6:	095b      	lsrs	r3, r3, #5
    44a8:	01db      	lsls	r3, r3, #7
    44aa:	4a8b      	ldr	r2, [pc, #556]	; (46d8 <spi_init+0x2b4>)
    44ac:	4690      	mov	r8, r2
    44ae:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    44b0:	221f      	movs	r2, #31
    44b2:	4660      	mov	r0, ip
    44b4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    44b6:	1898      	adds	r0, r3, r2
    44b8:	3040      	adds	r0, #64	; 0x40
    44ba:	7800      	ldrb	r0, [r0, #0]
    44bc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    44be:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    44c0:	4651      	mov	r1, sl
    44c2:	07c9      	lsls	r1, r1, #31
    44c4:	d5d6      	bpl.n	4474 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    44c6:	0852      	lsrs	r2, r2, #1
    44c8:	189b      	adds	r3, r3, r2
    44ca:	3330      	adds	r3, #48	; 0x30
    44cc:	7818      	ldrb	r0, [r3, #0]
    44ce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    44d0:	4663      	mov	r3, ip
    44d2:	07db      	lsls	r3, r3, #31
    44d4:	d5cc      	bpl.n	4470 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    44d6:	0900      	lsrs	r0, r0, #4
    44d8:	e7cc      	b.n	4474 <spi_init+0x50>
			module->hw = NULL;
    44da:	2300      	movs	r3, #0
    44dc:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    44de:	201c      	movs	r0, #28
    44e0:	e7b2      	b.n	4448 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    44e2:	2011      	movs	r0, #17
    44e4:	4b7d      	ldr	r3, [pc, #500]	; (46dc <spi_init+0x2b8>)
    44e6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    44e8:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    44ea:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    44ec:	2a01      	cmp	r2, #1
    44ee:	d026      	beq.n	453e <spi_init+0x11a>
	ctrla |= config->mux_setting;
    44f0:	6863      	ldr	r3, [r4, #4]
    44f2:	68a2      	ldr	r2, [r4, #8]
    44f4:	4313      	orrs	r3, r2
    44f6:	68e2      	ldr	r2, [r4, #12]
    44f8:	4313      	orrs	r3, r2
    44fa:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    44fc:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    44fe:	7c61      	ldrb	r1, [r4, #17]
    4500:	2900      	cmp	r1, #0
    4502:	d001      	beq.n	4508 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4504:	2180      	movs	r1, #128	; 0x80
    4506:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    4508:	7ca1      	ldrb	r1, [r4, #18]
    450a:	2900      	cmp	r1, #0
    450c:	d002      	beq.n	4514 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    450e:	2180      	movs	r1, #128	; 0x80
    4510:	0289      	lsls	r1, r1, #10
    4512:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    4514:	7ce1      	ldrb	r1, [r4, #19]
    4516:	2900      	cmp	r1, #0
    4518:	d002      	beq.n	4520 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    451a:	2180      	movs	r1, #128	; 0x80
    451c:	0089      	lsls	r1, r1, #2
    451e:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    4520:	7d21      	ldrb	r1, [r4, #20]
    4522:	2900      	cmp	r1, #0
    4524:	d002      	beq.n	452c <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4526:	2180      	movs	r1, #128	; 0x80
    4528:	0189      	lsls	r1, r1, #6
    452a:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    452c:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    452e:	2002      	movs	r0, #2
    4530:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    4532:	428b      	cmp	r3, r1
    4534:	d017      	beq.n	4566 <spi_init+0x142>
	module->hw = NULL;
    4536:	2300      	movs	r3, #0
    4538:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    453a:	201c      	movs	r0, #28
    453c:	e784      	b.n	4448 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    453e:	aa04      	add	r2, sp, #16
    4540:	0001      	movs	r1, r0
    4542:	69a0      	ldr	r0, [r4, #24]
    4544:	4b66      	ldr	r3, [pc, #408]	; (46e0 <spi_init+0x2bc>)
    4546:	4798      	blx	r3
    4548:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    454a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    454c:	2b00      	cmp	r3, #0
    454e:	d000      	beq.n	4552 <spi_init+0x12e>
    4550:	e77a      	b.n	4448 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4552:	7b3b      	ldrb	r3, [r7, #12]
    4554:	b2db      	uxtb	r3, r3
    4556:	aa04      	add	r2, sp, #16
    4558:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    455a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    455c:	429a      	cmp	r2, r3
    455e:	d000      	beq.n	4562 <spi_init+0x13e>
    4560:	e772      	b.n	4448 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    4562:	350c      	adds	r5, #12
    4564:	e7c4      	b.n	44f0 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    4566:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    4568:	4293      	cmp	r3, r2
    456a:	d1e4      	bne.n	4536 <spi_init+0x112>
		module->mode           = config->mode;
    456c:	7823      	ldrb	r3, [r4, #0]
    456e:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    4570:	7c23      	ldrb	r3, [r4, #16]
    4572:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    4574:	2000      	movs	r0, #0
    4576:	e767      	b.n	4448 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4578:	0008      	movs	r0, r1
    457a:	4b5a      	ldr	r3, [pc, #360]	; (46e4 <spi_init+0x2c0>)
    457c:	4798      	blx	r3
	if (sercom_index == 5) {
    457e:	2805      	cmp	r0, #5
    4580:	d100      	bne.n	4584 <spi_init+0x160>
    4582:	e09f      	b.n	46c4 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4584:	0003      	movs	r3, r0
    4586:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    4588:	4957      	ldr	r1, [pc, #348]	; (46e8 <spi_init+0x2c4>)
    458a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    458c:	2201      	movs	r2, #1
    458e:	4082      	lsls	r2, r0
    4590:	432a      	orrs	r2, r5
    4592:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    4594:	a909      	add	r1, sp, #36	; 0x24
    4596:	2524      	movs	r5, #36	; 0x24
    4598:	5d62      	ldrb	r2, [r4, r5]
    459a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    459c:	b2db      	uxtb	r3, r3
    459e:	9301      	str	r3, [sp, #4]
    45a0:	0018      	movs	r0, r3
    45a2:	4b52      	ldr	r3, [pc, #328]	; (46ec <spi_init+0x2c8>)
    45a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    45a6:	9801      	ldr	r0, [sp, #4]
    45a8:	4b51      	ldr	r3, [pc, #324]	; (46f0 <spi_init+0x2cc>)
    45aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    45ac:	5d60      	ldrb	r0, [r4, r5]
    45ae:	2100      	movs	r1, #0
    45b0:	4b50      	ldr	r3, [pc, #320]	; (46f4 <spi_init+0x2d0>)
    45b2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    45b4:	7823      	ldrb	r3, [r4, #0]
    45b6:	2b01      	cmp	r3, #1
    45b8:	d019      	beq.n	45ee <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    45ba:	6833      	ldr	r3, [r6, #0]
    45bc:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    45be:	ab04      	add	r3, sp, #16
    45c0:	2280      	movs	r2, #128	; 0x80
    45c2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    45c4:	2200      	movs	r2, #0
    45c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    45c8:	2101      	movs	r1, #1
    45ca:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    45cc:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    45ce:	7823      	ldrb	r3, [r4, #0]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d101      	bne.n	45d8 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    45d4:	ab04      	add	r3, sp, #16
    45d6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    45d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    45da:	9305      	str	r3, [sp, #20]
    45dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    45de:	9306      	str	r3, [sp, #24]
    45e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    45e2:	9307      	str	r3, [sp, #28]
    45e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    45e6:	9308      	str	r3, [sp, #32]
    45e8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    45ea:	ad05      	add	r5, sp, #20
    45ec:	e011      	b.n	4612 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    45ee:	683b      	ldr	r3, [r7, #0]
    45f0:	220c      	movs	r2, #12
    45f2:	4313      	orrs	r3, r2
    45f4:	603b      	str	r3, [r7, #0]
    45f6:	e7e0      	b.n	45ba <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    45f8:	4640      	mov	r0, r8
    45fa:	4b36      	ldr	r3, [pc, #216]	; (46d4 <spi_init+0x2b0>)
    45fc:	4798      	blx	r3
    45fe:	e00d      	b.n	461c <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4600:	a904      	add	r1, sp, #16
    4602:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4604:	0c00      	lsrs	r0, r0, #16
    4606:	b2c0      	uxtb	r0, r0
    4608:	4b3b      	ldr	r3, [pc, #236]	; (46f8 <spi_init+0x2d4>)
    460a:	4798      	blx	r3
    460c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    460e:	2f04      	cmp	r7, #4
    4610:	d007      	beq.n	4622 <spi_init+0x1fe>
    4612:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4614:	00bb      	lsls	r3, r7, #2
    4616:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    4618:	2800      	cmp	r0, #0
    461a:	d0ed      	beq.n	45f8 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    461c:	1c43      	adds	r3, r0, #1
    461e:	d1ef      	bne.n	4600 <spi_init+0x1dc>
    4620:	e7f4      	b.n	460c <spi_init+0x1e8>
	module->mode             = config->mode;
    4622:	7823      	ldrb	r3, [r4, #0]
    4624:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    4626:	7c23      	ldrb	r3, [r4, #16]
    4628:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    462a:	7ca3      	ldrb	r3, [r4, #18]
    462c:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    462e:	7d23      	ldrb	r3, [r4, #20]
    4630:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    4632:	2200      	movs	r2, #0
    4634:	ab02      	add	r3, sp, #8
    4636:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4638:	7823      	ldrb	r3, [r4, #0]
    463a:	2b01      	cmp	r3, #1
    463c:	d02a      	beq.n	4694 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    463e:	6863      	ldr	r3, [r4, #4]
    4640:	68a2      	ldr	r2, [r4, #8]
    4642:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4644:	68e2      	ldr	r2, [r4, #12]
    4646:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4648:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    464a:	7c62      	ldrb	r2, [r4, #17]
    464c:	2a00      	cmp	r2, #0
    464e:	d103      	bne.n	4658 <spi_init+0x234>
    4650:	4a2a      	ldr	r2, [pc, #168]	; (46fc <spi_init+0x2d8>)
    4652:	7892      	ldrb	r2, [r2, #2]
    4654:	0792      	lsls	r2, r2, #30
    4656:	d501      	bpl.n	465c <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4658:	2280      	movs	r2, #128	; 0x80
    465a:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    465c:	7ca2      	ldrb	r2, [r4, #18]
    465e:	2a00      	cmp	r2, #0
    4660:	d002      	beq.n	4668 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4662:	2280      	movs	r2, #128	; 0x80
    4664:	0292      	lsls	r2, r2, #10
    4666:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4668:	7ce2      	ldrb	r2, [r4, #19]
    466a:	2a00      	cmp	r2, #0
    466c:	d002      	beq.n	4674 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    466e:	2280      	movs	r2, #128	; 0x80
    4670:	0092      	lsls	r2, r2, #2
    4672:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4674:	7d22      	ldrb	r2, [r4, #20]
    4676:	2a00      	cmp	r2, #0
    4678:	d002      	beq.n	4680 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    467a:	2280      	movs	r2, #128	; 0x80
    467c:	0192      	lsls	r2, r2, #6
    467e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4680:	4642      	mov	r2, r8
    4682:	6812      	ldr	r2, [r2, #0]
    4684:	4313      	orrs	r3, r2
    4686:	4642      	mov	r2, r8
    4688:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    468a:	6853      	ldr	r3, [r2, #4]
    468c:	430b      	orrs	r3, r1
    468e:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    4690:	2000      	movs	r0, #0
    4692:	e6d9      	b.n	4448 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4694:	6830      	ldr	r0, [r6, #0]
    4696:	4b13      	ldr	r3, [pc, #76]	; (46e4 <spi_init+0x2c0>)
    4698:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    469a:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    469c:	b2c0      	uxtb	r0, r0
    469e:	4b0f      	ldr	r3, [pc, #60]	; (46dc <spi_init+0x2b8>)
    46a0:	4798      	blx	r3
    46a2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    46a4:	ab02      	add	r3, sp, #8
    46a6:	1d9a      	adds	r2, r3, #6
    46a8:	69a0      	ldr	r0, [r4, #24]
    46aa:	4b0d      	ldr	r3, [pc, #52]	; (46e0 <spi_init+0x2bc>)
    46ac:	4798      	blx	r3
    46ae:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    46b0:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    46b2:	2b00      	cmp	r3, #0
    46b4:	d000      	beq.n	46b8 <spi_init+0x294>
    46b6:	e6c7      	b.n	4448 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    46b8:	ab02      	add	r3, sp, #8
    46ba:	3306      	adds	r3, #6
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	4642      	mov	r2, r8
    46c0:	7313      	strb	r3, [r2, #12]
    46c2:	e7bc      	b.n	463e <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    46c4:	4a08      	ldr	r2, [pc, #32]	; (46e8 <spi_init+0x2c4>)
    46c6:	6a13      	ldr	r3, [r2, #32]
    46c8:	2102      	movs	r1, #2
    46ca:	430b      	orrs	r3, r1
    46cc:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    46ce:	2318      	movs	r3, #24
    46d0:	e760      	b.n	4594 <spi_init+0x170>
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	000041c1 	.word	0x000041c1
    46d8:	40002800 	.word	0x40002800
    46dc:	0000563d 	.word	0x0000563d
    46e0:	000040b7 	.word	0x000040b7
    46e4:	0000431d 	.word	0x0000431d
    46e8:	40000400 	.word	0x40000400
    46ec:	00005619 	.word	0x00005619
    46f0:	000055a9 	.word	0x000055a9
    46f4:	00004175 	.word	0x00004175
    46f8:	00005715 	.word	0x00005715
    46fc:	41002000 	.word	0x41002000

00004700 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4700:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4702:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4704:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4706:	2c01      	cmp	r4, #1
    4708:	d001      	beq.n	470e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    470a:	0018      	movs	r0, r3
    470c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    470e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4710:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4712:	2c00      	cmp	r4, #0
    4714:	d1f9      	bne.n	470a <spi_select_slave+0xa>
		if (select) {
    4716:	2a00      	cmp	r2, #0
    4718:	d058      	beq.n	47cc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    471a:	784b      	ldrb	r3, [r1, #1]
    471c:	2b00      	cmp	r3, #0
    471e:	d044      	beq.n	47aa <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4720:	6803      	ldr	r3, [r0, #0]
    4722:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4724:	07db      	lsls	r3, r3, #31
    4726:	d410      	bmi.n	474a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4728:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    472a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    472c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    472e:	2900      	cmp	r1, #0
    4730:	d104      	bne.n	473c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4732:	0953      	lsrs	r3, r2, #5
    4734:	01db      	lsls	r3, r3, #7
    4736:	492e      	ldr	r1, [pc, #184]	; (47f0 <spi_select_slave+0xf0>)
    4738:	468c      	mov	ip, r1
    473a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    473c:	211f      	movs	r1, #31
    473e:	4011      	ands	r1, r2
    4740:	2201      	movs	r2, #1
    4742:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4744:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4746:	2305      	movs	r3, #5
    4748:	e7df      	b.n	470a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    474a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    474c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    474e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4750:	2c00      	cmp	r4, #0
    4752:	d104      	bne.n	475e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4754:	0953      	lsrs	r3, r2, #5
    4756:	01db      	lsls	r3, r3, #7
    4758:	4c25      	ldr	r4, [pc, #148]	; (47f0 <spi_select_slave+0xf0>)
    475a:	46a4      	mov	ip, r4
    475c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    475e:	241f      	movs	r4, #31
    4760:	4014      	ands	r4, r2
    4762:	2201      	movs	r2, #1
    4764:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4766:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4768:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    476a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    476c:	07d2      	lsls	r2, r2, #31
    476e:	d501      	bpl.n	4774 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4770:	788a      	ldrb	r2, [r1, #2]
    4772:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4774:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4776:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4778:	2a00      	cmp	r2, #0
    477a:	d1c6      	bne.n	470a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    477c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    477e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4780:	7e13      	ldrb	r3, [r2, #24]
    4782:	420b      	tst	r3, r1
    4784:	d0fc      	beq.n	4780 <spi_select_slave+0x80>
    4786:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4788:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    478a:	0749      	lsls	r1, r1, #29
    478c:	d5bd      	bpl.n	470a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    478e:	8b53      	ldrh	r3, [r2, #26]
    4790:	075b      	lsls	r3, r3, #29
    4792:	d501      	bpl.n	4798 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4794:	2304      	movs	r3, #4
    4796:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4798:	7983      	ldrb	r3, [r0, #6]
    479a:	2b01      	cmp	r3, #1
    479c:	d002      	beq.n	47a4 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    479e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47a0:	2300      	movs	r3, #0
    47a2:	e7b2      	b.n	470a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    47a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47a6:	2300      	movs	r3, #0
    47a8:	e7af      	b.n	470a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    47aa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    47ac:	09d1      	lsrs	r1, r2, #7
		return NULL;
    47ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    47b0:	2900      	cmp	r1, #0
    47b2:	d104      	bne.n	47be <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    47b4:	0953      	lsrs	r3, r2, #5
    47b6:	01db      	lsls	r3, r3, #7
    47b8:	490d      	ldr	r1, [pc, #52]	; (47f0 <spi_select_slave+0xf0>)
    47ba:	468c      	mov	ip, r1
    47bc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47be:	211f      	movs	r1, #31
    47c0:	4011      	ands	r1, r2
    47c2:	2201      	movs	r2, #1
    47c4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    47c6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
    47ca:	e79e      	b.n	470a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    47cc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    47ce:	09d1      	lsrs	r1, r2, #7
		return NULL;
    47d0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    47d2:	2900      	cmp	r1, #0
    47d4:	d104      	bne.n	47e0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    47d6:	0953      	lsrs	r3, r2, #5
    47d8:	01db      	lsls	r3, r3, #7
    47da:	4905      	ldr	r1, [pc, #20]	; (47f0 <spi_select_slave+0xf0>)
    47dc:	468c      	mov	ip, r1
    47de:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47e0:	211f      	movs	r1, #31
    47e2:	4011      	ands	r1, r2
    47e4:	2201      	movs	r2, #1
    47e6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    47e8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    47ea:	2300      	movs	r3, #0
    47ec:	e78d      	b.n	470a <spi_select_slave+0xa>
    47ee:	46c0      	nop			; (mov r8, r8)
    47f0:	40002800 	.word	0x40002800

000047f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    47f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f6:	46de      	mov	lr, fp
    47f8:	4657      	mov	r7, sl
    47fa:	464e      	mov	r6, r9
    47fc:	4645      	mov	r5, r8
    47fe:	b5e0      	push	{r5, r6, r7, lr}
    4800:	b091      	sub	sp, #68	; 0x44
    4802:	0005      	movs	r5, r0
    4804:	000c      	movs	r4, r1
    4806:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4808:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    480a:	0008      	movs	r0, r1
    480c:	4bc4      	ldr	r3, [pc, #784]	; (4b20 <usart_init+0x32c>)
    480e:	4798      	blx	r3
    4810:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4812:	2805      	cmp	r0, #5
    4814:	d00d      	beq.n	4832 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4816:	0007      	movs	r7, r0
    4818:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    481a:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    481c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    481e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4820:	07c9      	lsls	r1, r1, #31
    4822:	d509      	bpl.n	4838 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4824:	b011      	add	sp, #68	; 0x44
    4826:	bc3c      	pop	{r2, r3, r4, r5}
    4828:	4690      	mov	r8, r2
    482a:	4699      	mov	r9, r3
    482c:	46a2      	mov	sl, r4
    482e:	46ab      	mov	fp, r5
    4830:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    4832:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    4834:	2301      	movs	r3, #1
    4836:	e7f1      	b.n	481c <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4838:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    483a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    483c:	0789      	lsls	r1, r1, #30
    483e:	d4f1      	bmi.n	4824 <usart_init+0x30>
	if (sercom_index == 5) {
    4840:	2a05      	cmp	r2, #5
    4842:	d049      	beq.n	48d8 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    4844:	49b7      	ldr	r1, [pc, #732]	; (4b24 <usart_init+0x330>)
    4846:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    4848:	2201      	movs	r2, #1
    484a:	409a      	lsls	r2, r3
    484c:	0013      	movs	r3, r2
    484e:	4303      	orrs	r3, r0
    4850:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    4852:	a90f      	add	r1, sp, #60	; 0x3c
    4854:	232d      	movs	r3, #45	; 0x2d
    4856:	4698      	mov	r8, r3
    4858:	5cf3      	ldrb	r3, [r6, r3]
    485a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    485c:	b2ff      	uxtb	r7, r7
    485e:	0038      	movs	r0, r7
    4860:	4bb1      	ldr	r3, [pc, #708]	; (4b28 <usart_init+0x334>)
    4862:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4864:	0038      	movs	r0, r7
    4866:	4bb1      	ldr	r3, [pc, #708]	; (4b2c <usart_init+0x338>)
    4868:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    486a:	4643      	mov	r3, r8
    486c:	5cf0      	ldrb	r0, [r6, r3]
    486e:	2100      	movs	r1, #0
    4870:	4baf      	ldr	r3, [pc, #700]	; (4b30 <usart_init+0x33c>)
    4872:	4798      	blx	r3
	module->character_size = config->character_size;
    4874:	7af3      	ldrb	r3, [r6, #11]
    4876:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4878:	2324      	movs	r3, #36	; 0x24
    487a:	5cf3      	ldrb	r3, [r6, r3]
    487c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    487e:	2325      	movs	r3, #37	; 0x25
    4880:	5cf3      	ldrb	r3, [r6, r3]
    4882:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4884:	7ef3      	ldrb	r3, [r6, #27]
    4886:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4888:	7f33      	ldrb	r3, [r6, #28]
    488a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    488c:	682b      	ldr	r3, [r5, #0]
    488e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4890:	0018      	movs	r0, r3
    4892:	4ba3      	ldr	r3, [pc, #652]	; (4b20 <usart_init+0x32c>)
    4894:	4798      	blx	r3
	if (sercom_index == 5) {
    4896:	2805      	cmp	r0, #5
    4898:	d026      	beq.n	48e8 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    489a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    489c:	2200      	movs	r2, #0
    489e:	230e      	movs	r3, #14
    48a0:	a906      	add	r1, sp, #24
    48a2:	468c      	mov	ip, r1
    48a4:	4463      	add	r3, ip
    48a6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    48a8:	8a32      	ldrh	r2, [r6, #16]
    48aa:	9202      	str	r2, [sp, #8]
    48ac:	2380      	movs	r3, #128	; 0x80
    48ae:	01db      	lsls	r3, r3, #7
    48b0:	429a      	cmp	r2, r3
    48b2:	d100      	bne.n	48b6 <usart_init+0xc2>
    48b4:	e0a7      	b.n	4a06 <usart_init+0x212>
    48b6:	d919      	bls.n	48ec <usart_init+0xf8>
    48b8:	23c0      	movs	r3, #192	; 0xc0
    48ba:	01db      	lsls	r3, r3, #7
    48bc:	9a02      	ldr	r2, [sp, #8]
    48be:	429a      	cmp	r2, r3
    48c0:	d100      	bne.n	48c4 <usart_init+0xd0>
    48c2:	e09b      	b.n	49fc <usart_init+0x208>
    48c4:	2380      	movs	r3, #128	; 0x80
    48c6:	021b      	lsls	r3, r3, #8
    48c8:	429a      	cmp	r2, r3
    48ca:	d000      	beq.n	48ce <usart_init+0xda>
    48cc:	e123      	b.n	4b16 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    48ce:	2303      	movs	r3, #3
    48d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48d2:	2300      	movs	r3, #0
    48d4:	9307      	str	r3, [sp, #28]
    48d6:	e012      	b.n	48fe <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    48d8:	4992      	ldr	r1, [pc, #584]	; (4b24 <usart_init+0x330>)
    48da:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    48dc:	3a04      	subs	r2, #4
    48de:	409a      	lsls	r2, r3
    48e0:	0013      	movs	r3, r2
    48e2:	4303      	orrs	r3, r0
    48e4:	620b      	str	r3, [r1, #32]
    48e6:	e7b4      	b.n	4852 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    48e8:	2018      	movs	r0, #24
    48ea:	e7d7      	b.n	489c <usart_init+0xa8>
	switch (config->sample_rate) {
    48ec:	2380      	movs	r3, #128	; 0x80
    48ee:	019b      	lsls	r3, r3, #6
    48f0:	429a      	cmp	r2, r3
    48f2:	d000      	beq.n	48f6 <usart_init+0x102>
    48f4:	e10f      	b.n	4b16 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48f6:	2310      	movs	r3, #16
    48f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    48fa:	3b0f      	subs	r3, #15
    48fc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    48fe:	6833      	ldr	r3, [r6, #0]
    4900:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4902:	68f3      	ldr	r3, [r6, #12]
    4904:	469b      	mov	fp, r3
		config->sample_adjustment |
    4906:	6973      	ldr	r3, [r6, #20]
    4908:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    490a:	7e33      	ldrb	r3, [r6, #24]
    490c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    490e:	2326      	movs	r3, #38	; 0x26
    4910:	5cf3      	ldrb	r3, [r6, r3]
    4912:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4914:	6873      	ldr	r3, [r6, #4]
    4916:	4699      	mov	r9, r3
	switch (transfer_mode)
    4918:	2b00      	cmp	r3, #0
    491a:	d100      	bne.n	491e <usart_init+0x12a>
    491c:	e09b      	b.n	4a56 <usart_init+0x262>
    491e:	2380      	movs	r3, #128	; 0x80
    4920:	055b      	lsls	r3, r3, #21
    4922:	4599      	cmp	r9, r3
    4924:	d104      	bne.n	4930 <usart_init+0x13c>
			if (!config->use_external_clock) {
    4926:	2327      	movs	r3, #39	; 0x27
    4928:	5cf3      	ldrb	r3, [r6, r3]
    492a:	2b00      	cmp	r3, #0
    492c:	d100      	bne.n	4930 <usart_init+0x13c>
    492e:	e080      	b.n	4a32 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    4930:	7e73      	ldrb	r3, [r6, #25]
    4932:	2b00      	cmp	r3, #0
    4934:	d002      	beq.n	493c <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4936:	7eb3      	ldrb	r3, [r6, #26]
    4938:	4642      	mov	r2, r8
    493a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    493c:	230e      	movs	r3, #14
    493e:	aa06      	add	r2, sp, #24
    4940:	4694      	mov	ip, r2
    4942:	4463      	add	r3, ip
    4944:	881b      	ldrh	r3, [r3, #0]
    4946:	4642      	mov	r2, r8
    4948:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    494a:	9b05      	ldr	r3, [sp, #20]
    494c:	465a      	mov	r2, fp
    494e:	4313      	orrs	r3, r2
    4950:	9a03      	ldr	r2, [sp, #12]
    4952:	4313      	orrs	r3, r2
    4954:	464a      	mov	r2, r9
    4956:	4313      	orrs	r3, r2
    4958:	9f02      	ldr	r7, [sp, #8]
    495a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    495c:	9b04      	ldr	r3, [sp, #16]
    495e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4960:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4962:	4653      	mov	r3, sl
    4964:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4966:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4968:	2327      	movs	r3, #39	; 0x27
    496a:	5cf3      	ldrb	r3, [r6, r3]
    496c:	2b00      	cmp	r3, #0
    496e:	d101      	bne.n	4974 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4970:	3304      	adds	r3, #4
    4972:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4974:	7e73      	ldrb	r3, [r6, #25]
    4976:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4978:	7f32      	ldrb	r2, [r6, #28]
    497a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    497c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    497e:	7f72      	ldrb	r2, [r6, #29]
    4980:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4982:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4984:	2224      	movs	r2, #36	; 0x24
    4986:	5cb2      	ldrb	r2, [r6, r2]
    4988:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    498a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    498c:	2225      	movs	r2, #37	; 0x25
    498e:	5cb2      	ldrb	r2, [r6, r2]
    4990:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4992:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4994:	7ab1      	ldrb	r1, [r6, #10]
    4996:	7af2      	ldrb	r2, [r6, #11]
    4998:	4311      	orrs	r1, r2
    499a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    499c:	8933      	ldrh	r3, [r6, #8]
    499e:	2bff      	cmp	r3, #255	; 0xff
    49a0:	d07d      	beq.n	4a9e <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    49a2:	2280      	movs	r2, #128	; 0x80
    49a4:	0452      	lsls	r2, r2, #17
    49a6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    49a8:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    49aa:	232c      	movs	r3, #44	; 0x2c
    49ac:	5cf3      	ldrb	r3, [r6, r3]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d103      	bne.n	49ba <usart_init+0x1c6>
    49b2:	4b60      	ldr	r3, [pc, #384]	; (4b34 <usart_init+0x340>)
    49b4:	789b      	ldrb	r3, [r3, #2]
    49b6:	079b      	lsls	r3, r3, #30
    49b8:	d501      	bpl.n	49be <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    49ba:	2380      	movs	r3, #128	; 0x80
    49bc:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    49be:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    49c0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    49c2:	2b00      	cmp	r3, #0
    49c4:	d1fc      	bne.n	49c0 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    49c6:	4643      	mov	r3, r8
    49c8:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    49ca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    49cc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    49ce:	2b00      	cmp	r3, #0
    49d0:	d1fc      	bne.n	49cc <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    49d2:	4643      	mov	r3, r8
    49d4:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    49d6:	ab0e      	add	r3, sp, #56	; 0x38
    49d8:	2280      	movs	r2, #128	; 0x80
    49da:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    49dc:	2200      	movs	r2, #0
    49de:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    49e0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    49e2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    49e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    49e6:	930a      	str	r3, [sp, #40]	; 0x28
    49e8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    49ea:	930b      	str	r3, [sp, #44]	; 0x2c
    49ec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    49ee:	930c      	str	r3, [sp, #48]	; 0x30
    49f0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    49f2:	9302      	str	r3, [sp, #8]
    49f4:	930d      	str	r3, [sp, #52]	; 0x34
    49f6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    49f8:	ae0a      	add	r6, sp, #40	; 0x28
    49fa:	e05e      	b.n	4aba <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    49fc:	2308      	movs	r3, #8
    49fe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4a00:	3b07      	subs	r3, #7
    4a02:	9307      	str	r3, [sp, #28]
    4a04:	e77b      	b.n	48fe <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    4a06:	6833      	ldr	r3, [r6, #0]
    4a08:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4a0a:	68f3      	ldr	r3, [r6, #12]
    4a0c:	469b      	mov	fp, r3
		config->sample_adjustment |
    4a0e:	6973      	ldr	r3, [r6, #20]
    4a10:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4a12:	7e33      	ldrb	r3, [r6, #24]
    4a14:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4a16:	2326      	movs	r3, #38	; 0x26
    4a18:	5cf3      	ldrb	r3, [r6, r3]
    4a1a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4a1c:	6873      	ldr	r3, [r6, #4]
    4a1e:	4699      	mov	r9, r3
	switch (transfer_mode)
    4a20:	2b00      	cmp	r3, #0
    4a22:	d014      	beq.n	4a4e <usart_init+0x25a>
    4a24:	2380      	movs	r3, #128	; 0x80
    4a26:	055b      	lsls	r3, r3, #21
    4a28:	4599      	cmp	r9, r3
    4a2a:	d100      	bne.n	4a2e <usart_init+0x23a>
    4a2c:	e77b      	b.n	4926 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    4a2e:	2000      	movs	r0, #0
    4a30:	e020      	b.n	4a74 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4a32:	6a33      	ldr	r3, [r6, #32]
    4a34:	001f      	movs	r7, r3
    4a36:	b2c0      	uxtb	r0, r0
    4a38:	4b3f      	ldr	r3, [pc, #252]	; (4b38 <usart_init+0x344>)
    4a3a:	4798      	blx	r3
    4a3c:	0001      	movs	r1, r0
    4a3e:	220e      	movs	r2, #14
    4a40:	ab06      	add	r3, sp, #24
    4a42:	469c      	mov	ip, r3
    4a44:	4462      	add	r2, ip
    4a46:	0038      	movs	r0, r7
    4a48:	4b3c      	ldr	r3, [pc, #240]	; (4b3c <usart_init+0x348>)
    4a4a:	4798      	blx	r3
    4a4c:	e012      	b.n	4a74 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4a4e:	2308      	movs	r3, #8
    4a50:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4a52:	2300      	movs	r3, #0
    4a54:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4a56:	2327      	movs	r3, #39	; 0x27
    4a58:	5cf3      	ldrb	r3, [r6, r3]
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d00e      	beq.n	4a7c <usart_init+0x288>
				status_code =
    4a5e:	9b06      	ldr	r3, [sp, #24]
    4a60:	9300      	str	r3, [sp, #0]
    4a62:	9b07      	ldr	r3, [sp, #28]
    4a64:	220e      	movs	r2, #14
    4a66:	a906      	add	r1, sp, #24
    4a68:	468c      	mov	ip, r1
    4a6a:	4462      	add	r2, ip
    4a6c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4a6e:	6a30      	ldr	r0, [r6, #32]
    4a70:	4f33      	ldr	r7, [pc, #204]	; (4b40 <usart_init+0x34c>)
    4a72:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4a74:	2800      	cmp	r0, #0
    4a76:	d000      	beq.n	4a7a <usart_init+0x286>
    4a78:	e6d4      	b.n	4824 <usart_init+0x30>
    4a7a:	e759      	b.n	4930 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    4a7c:	6a33      	ldr	r3, [r6, #32]
    4a7e:	001f      	movs	r7, r3
    4a80:	b2c0      	uxtb	r0, r0
    4a82:	4b2d      	ldr	r3, [pc, #180]	; (4b38 <usart_init+0x344>)
    4a84:	4798      	blx	r3
    4a86:	0001      	movs	r1, r0
				status_code =
    4a88:	9b06      	ldr	r3, [sp, #24]
    4a8a:	9300      	str	r3, [sp, #0]
    4a8c:	9b07      	ldr	r3, [sp, #28]
    4a8e:	220e      	movs	r2, #14
    4a90:	a806      	add	r0, sp, #24
    4a92:	4684      	mov	ip, r0
    4a94:	4462      	add	r2, ip
    4a96:	0038      	movs	r0, r7
    4a98:	4f29      	ldr	r7, [pc, #164]	; (4b40 <usart_init+0x34c>)
    4a9a:	47b8      	blx	r7
    4a9c:	e7ea      	b.n	4a74 <usart_init+0x280>
		if(config->lin_slave_enable) {
    4a9e:	7ef3      	ldrb	r3, [r6, #27]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d082      	beq.n	49aa <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4aa4:	2380      	movs	r3, #128	; 0x80
    4aa6:	04db      	lsls	r3, r3, #19
    4aa8:	431f      	orrs	r7, r3
    4aaa:	e77e      	b.n	49aa <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4aac:	0020      	movs	r0, r4
    4aae:	4b25      	ldr	r3, [pc, #148]	; (4b44 <usart_init+0x350>)
    4ab0:	4798      	blx	r3
    4ab2:	e007      	b.n	4ac4 <usart_init+0x2d0>
    4ab4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4ab6:	2f04      	cmp	r7, #4
    4ab8:	d00d      	beq.n	4ad6 <usart_init+0x2e2>
    4aba:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4abc:	00bb      	lsls	r3, r7, #2
    4abe:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d0f3      	beq.n	4aac <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    4ac4:	1c43      	adds	r3, r0, #1
    4ac6:	d0f5      	beq.n	4ab4 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4ac8:	a90e      	add	r1, sp, #56	; 0x38
    4aca:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4acc:	0c00      	lsrs	r0, r0, #16
    4ace:	b2c0      	uxtb	r0, r0
    4ad0:	4b1d      	ldr	r3, [pc, #116]	; (4b48 <usart_init+0x354>)
    4ad2:	4798      	blx	r3
    4ad4:	e7ee      	b.n	4ab4 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    4ad6:	2300      	movs	r3, #0
    4ad8:	60eb      	str	r3, [r5, #12]
    4ada:	612b      	str	r3, [r5, #16]
    4adc:	616b      	str	r3, [r5, #20]
    4ade:	61ab      	str	r3, [r5, #24]
    4ae0:	61eb      	str	r3, [r5, #28]
    4ae2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4ae4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4ae6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4ae8:	2200      	movs	r2, #0
    4aea:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4aec:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4aee:	3330      	adds	r3, #48	; 0x30
    4af0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4af2:	3301      	adds	r3, #1
    4af4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4af6:	3301      	adds	r3, #1
    4af8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4afa:	3301      	adds	r3, #1
    4afc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4afe:	6828      	ldr	r0, [r5, #0]
    4b00:	4b07      	ldr	r3, [pc, #28]	; (4b20 <usart_init+0x32c>)
    4b02:	4798      	blx	r3
    4b04:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4b06:	4911      	ldr	r1, [pc, #68]	; (4b4c <usart_init+0x358>)
    4b08:	4b11      	ldr	r3, [pc, #68]	; (4b50 <usart_init+0x35c>)
    4b0a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4b0c:	00a4      	lsls	r4, r4, #2
    4b0e:	4b11      	ldr	r3, [pc, #68]	; (4b54 <usart_init+0x360>)
    4b10:	50e5      	str	r5, [r4, r3]
	return status_code;
    4b12:	2000      	movs	r0, #0
    4b14:	e686      	b.n	4824 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4b16:	2310      	movs	r3, #16
    4b18:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4b1a:	2300      	movs	r3, #0
    4b1c:	9307      	str	r3, [sp, #28]
    4b1e:	e6ee      	b.n	48fe <usart_init+0x10a>
    4b20:	0000431d 	.word	0x0000431d
    4b24:	40000400 	.word	0x40000400
    4b28:	00005619 	.word	0x00005619
    4b2c:	000055a9 	.word	0x000055a9
    4b30:	00004175 	.word	0x00004175
    4b34:	41002000 	.word	0x41002000
    4b38:	0000563d 	.word	0x0000563d
    4b3c:	000040b7 	.word	0x000040b7
    4b40:	000040e1 	.word	0x000040e1
    4b44:	000041c1 	.word	0x000041c1
    4b48:	00005715 	.word	0x00005715
    4b4c:	00004d3d 	.word	0x00004d3d
    4b50:	00004359 	.word	0x00004359
    4b54:	20002078 	.word	0x20002078

00004b58 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4b58:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4b5a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4b5c:	2a00      	cmp	r2, #0
    4b5e:	d101      	bne.n	4b64 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4b60:	0018      	movs	r0, r3
    4b62:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4b64:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4b66:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4b68:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4b6a:	2a00      	cmp	r2, #0
    4b6c:	d1f8      	bne.n	4b60 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b6e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    4b70:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4b72:	2102      	movs	r1, #2
    4b74:	7e13      	ldrb	r3, [r2, #24]
    4b76:	420b      	tst	r3, r1
    4b78:	d0fc      	beq.n	4b74 <usart_write_wait+0x1c>
	return STATUS_OK;
    4b7a:	2300      	movs	r3, #0
    4b7c:	e7f0      	b.n	4b60 <usart_write_wait+0x8>

00004b7e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4b7e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4b80:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4b82:	2a00      	cmp	r2, #0
    4b84:	d101      	bne.n	4b8a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4b86:	0018      	movs	r0, r3
    4b88:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4b8a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4b8c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4b8e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4b90:	2a00      	cmp	r2, #0
    4b92:	d1f8      	bne.n	4b86 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b94:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4b96:	7e10      	ldrb	r0, [r2, #24]
    4b98:	0740      	lsls	r0, r0, #29
    4b9a:	d5f4      	bpl.n	4b86 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4b9c:	8b53      	ldrh	r3, [r2, #26]
    4b9e:	b2db      	uxtb	r3, r3
	if (error_code) {
    4ba0:	0698      	lsls	r0, r3, #26
    4ba2:	d01d      	beq.n	4be0 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4ba4:	0798      	lsls	r0, r3, #30
    4ba6:	d503      	bpl.n	4bb0 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4ba8:	2302      	movs	r3, #2
    4baa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4bac:	3318      	adds	r3, #24
    4bae:	e7ea      	b.n	4b86 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4bb0:	0758      	lsls	r0, r3, #29
    4bb2:	d503      	bpl.n	4bbc <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4bb4:	2304      	movs	r3, #4
    4bb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4bb8:	331a      	adds	r3, #26
    4bba:	e7e4      	b.n	4b86 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4bbc:	07d8      	lsls	r0, r3, #31
    4bbe:	d503      	bpl.n	4bc8 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4bc0:	2301      	movs	r3, #1
    4bc2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4bc4:	3312      	adds	r3, #18
    4bc6:	e7de      	b.n	4b86 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4bc8:	06d8      	lsls	r0, r3, #27
    4bca:	d503      	bpl.n	4bd4 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4bcc:	2310      	movs	r3, #16
    4bce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4bd0:	3332      	adds	r3, #50	; 0x32
    4bd2:	e7d8      	b.n	4b86 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4bd4:	069b      	lsls	r3, r3, #26
    4bd6:	d503      	bpl.n	4be0 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4bd8:	2320      	movs	r3, #32
    4bda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4bdc:	3321      	adds	r3, #33	; 0x21
    4bde:	e7d2      	b.n	4b86 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4be0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4be2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4be4:	2300      	movs	r3, #0
    4be6:	e7ce      	b.n	4b86 <usart_read_wait+0x8>

00004be8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bea:	46ce      	mov	lr, r9
    4bec:	4647      	mov	r7, r8
    4bee:	b580      	push	{r7, lr}
    4bf0:	b083      	sub	sp, #12
    4bf2:	0005      	movs	r5, r0
    4bf4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4bf6:	2017      	movs	r0, #23
	if (length == 0) {
    4bf8:	2a00      	cmp	r2, #0
    4bfa:	d104      	bne.n	4c06 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    4bfc:	b003      	add	sp, #12
    4bfe:	bc0c      	pop	{r2, r3}
    4c00:	4690      	mov	r8, r2
    4c02:	4699      	mov	r9, r3
    4c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    4c06:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    4c08:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d0f6      	beq.n	4bfc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c0e:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    4c10:	3a01      	subs	r2, #1
    4c12:	b293      	uxth	r3, r2
    4c14:	4699      	mov	r9, r3
    4c16:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    4c18:	2701      	movs	r7, #1
	while (length--) {
    4c1a:	4b20      	ldr	r3, [pc, #128]	; (4c9c <usart_write_buffer_wait+0xb4>)
    4c1c:	4698      	mov	r8, r3
    4c1e:	e011      	b.n	4c44 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    4c20:	1c73      	adds	r3, r6, #1
    4c22:	b29b      	uxth	r3, r3
    4c24:	9a01      	ldr	r2, [sp, #4]
    4c26:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4c28:	796a      	ldrb	r2, [r5, #5]
    4c2a:	2a01      	cmp	r2, #1
    4c2c:	d017      	beq.n	4c5e <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    4c2e:	b289      	uxth	r1, r1
    4c30:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    4c32:	0028      	movs	r0, r5
    4c34:	4b1a      	ldr	r3, [pc, #104]	; (4ca0 <usart_write_buffer_wait+0xb8>)
    4c36:	4798      	blx	r3
	while (length--) {
    4c38:	464b      	mov	r3, r9
    4c3a:	3b01      	subs	r3, #1
    4c3c:	b29b      	uxth	r3, r3
    4c3e:	4699      	mov	r9, r3
    4c40:	4543      	cmp	r3, r8
    4c42:	d013      	beq.n	4c6c <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    4c44:	7e23      	ldrb	r3, [r4, #24]
    4c46:	423b      	tst	r3, r7
    4c48:	d1ea      	bne.n	4c20 <usart_write_buffer_wait+0x38>
    4c4a:	4b14      	ldr	r3, [pc, #80]	; (4c9c <usart_write_buffer_wait+0xb4>)
    4c4c:	7e22      	ldrb	r2, [r4, #24]
    4c4e:	423a      	tst	r2, r7
    4c50:	d1e6      	bne.n	4c20 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    4c52:	2b01      	cmp	r3, #1
    4c54:	d019      	beq.n	4c8a <usart_write_buffer_wait+0xa2>
    4c56:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d1f7      	bne.n	4c4c <usart_write_buffer_wait+0x64>
    4c5c:	e7e0      	b.n	4c20 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4c5e:	3602      	adds	r6, #2
    4c60:	b2b6      	uxth	r6, r6
    4c62:	9a01      	ldr	r2, [sp, #4]
    4c64:	5cd3      	ldrb	r3, [r2, r3]
    4c66:	021b      	lsls	r3, r3, #8
    4c68:	4319      	orrs	r1, r3
    4c6a:	e7e2      	b.n	4c32 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    4c6c:	7e23      	ldrb	r3, [r4, #24]
    4c6e:	079b      	lsls	r3, r3, #30
    4c70:	d40d      	bmi.n	4c8e <usart_write_buffer_wait+0xa6>
    4c72:	4b0a      	ldr	r3, [pc, #40]	; (4c9c <usart_write_buffer_wait+0xb4>)
    4c74:	2102      	movs	r1, #2
    4c76:	7e22      	ldrb	r2, [r4, #24]
    4c78:	420a      	tst	r2, r1
    4c7a:	d10a      	bne.n	4c92 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    4c7c:	2b01      	cmp	r3, #1
    4c7e:	d00a      	beq.n	4c96 <usart_write_buffer_wait+0xae>
    4c80:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4c82:	2b00      	cmp	r3, #0
    4c84:	d1f7      	bne.n	4c76 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    4c86:	2000      	movs	r0, #0
    4c88:	e7b8      	b.n	4bfc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    4c8a:	2012      	movs	r0, #18
    4c8c:	e7b6      	b.n	4bfc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    4c8e:	2000      	movs	r0, #0
    4c90:	e7b4      	b.n	4bfc <usart_write_buffer_wait+0x14>
    4c92:	2000      	movs	r0, #0
    4c94:	e7b2      	b.n	4bfc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    4c96:	2012      	movs	r0, #18
    4c98:	e7b0      	b.n	4bfc <usart_write_buffer_wait+0x14>
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	0000ffff 	.word	0x0000ffff
    4ca0:	00004b59 	.word	0x00004b59

00004ca4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ca6:	46d6      	mov	lr, sl
    4ca8:	b500      	push	{lr}
    4caa:	b084      	sub	sp, #16
    4cac:	0004      	movs	r4, r0
    4cae:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4cb0:	2017      	movs	r0, #23
	if (length == 0) {
    4cb2:	2a00      	cmp	r2, #0
    4cb4:	d103      	bne.n	4cbe <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    4cb6:	b004      	add	sp, #16
    4cb8:	bc04      	pop	{r2}
    4cba:	4692      	mov	sl, r2
    4cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4cbe:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    4cc0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d0f7      	beq.n	4cb6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4cc6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    4cc8:	3a01      	subs	r2, #1
    4cca:	b293      	uxth	r3, r2
    4ccc:	469a      	mov	sl, r3
    4cce:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    4cd0:	2704      	movs	r7, #4
    4cd2:	e019      	b.n	4d08 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    4cd4:	2300      	movs	r3, #0
    4cd6:	aa02      	add	r2, sp, #8
    4cd8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    4cda:	1d91      	adds	r1, r2, #6
    4cdc:	0020      	movs	r0, r4
    4cde:	4b15      	ldr	r3, [pc, #84]	; (4d34 <usart_read_buffer_wait+0x90>)
    4ce0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d1e7      	bne.n	4cb6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    4ce6:	1c69      	adds	r1, r5, #1
    4ce8:	b289      	uxth	r1, r1
    4cea:	ab02      	add	r3, sp, #8
    4cec:	88db      	ldrh	r3, [r3, #6]
    4cee:	9a01      	ldr	r2, [sp, #4]
    4cf0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4cf2:	7962      	ldrb	r2, [r4, #5]
    4cf4:	2a01      	cmp	r2, #1
    4cf6:	d014      	beq.n	4d22 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    4cf8:	000d      	movs	r5, r1
	while (length--) {
    4cfa:	4653      	mov	r3, sl
    4cfc:	3b01      	subs	r3, #1
    4cfe:	b29b      	uxth	r3, r3
    4d00:	469a      	mov	sl, r3
    4d02:	4b0d      	ldr	r3, [pc, #52]	; (4d38 <usart_read_buffer_wait+0x94>)
    4d04:	459a      	cmp	sl, r3
    4d06:	d0d6      	beq.n	4cb6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    4d08:	7e33      	ldrb	r3, [r6, #24]
    4d0a:	423b      	tst	r3, r7
    4d0c:	d1e2      	bne.n	4cd4 <usart_read_buffer_wait+0x30>
    4d0e:	4b0a      	ldr	r3, [pc, #40]	; (4d38 <usart_read_buffer_wait+0x94>)
    4d10:	7e32      	ldrb	r2, [r6, #24]
    4d12:	423a      	tst	r2, r7
    4d14:	d1de      	bne.n	4cd4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    4d16:	2b01      	cmp	r3, #1
    4d18:	d009      	beq.n	4d2e <usart_read_buffer_wait+0x8a>
    4d1a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d1f7      	bne.n	4d10 <usart_read_buffer_wait+0x6c>
    4d20:	e7d8      	b.n	4cd4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    4d22:	3502      	adds	r5, #2
    4d24:	b2ad      	uxth	r5, r5
    4d26:	0a1b      	lsrs	r3, r3, #8
    4d28:	9a01      	ldr	r2, [sp, #4]
    4d2a:	5453      	strb	r3, [r2, r1]
    4d2c:	e7e5      	b.n	4cfa <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    4d2e:	2012      	movs	r0, #18
    4d30:	e7c1      	b.n	4cb6 <usart_read_buffer_wait+0x12>
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	00004b7f 	.word	0x00004b7f
    4d38:	0000ffff 	.word	0x0000ffff

00004d3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4d3e:	0080      	lsls	r0, r0, #2
    4d40:	4b62      	ldr	r3, [pc, #392]	; (4ecc <_usart_interrupt_handler+0x190>)
    4d42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4d44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d1fc      	bne.n	4d46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4d4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4d4e:	7da6      	ldrb	r6, [r4, #22]
    4d50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4d52:	2330      	movs	r3, #48	; 0x30
    4d54:	5ceb      	ldrb	r3, [r5, r3]
    4d56:	2231      	movs	r2, #49	; 0x31
    4d58:	5caf      	ldrb	r7, [r5, r2]
    4d5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4d5c:	07f3      	lsls	r3, r6, #31
    4d5e:	d522      	bpl.n	4da6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4d60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4d62:	b29b      	uxth	r3, r3
    4d64:	2b00      	cmp	r3, #0
    4d66:	d01c      	beq.n	4da2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4d6a:	7813      	ldrb	r3, [r2, #0]
    4d6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4d6e:	1c51      	adds	r1, r2, #1
    4d70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4d72:	7969      	ldrb	r1, [r5, #5]
    4d74:	2901      	cmp	r1, #1
    4d76:	d00e      	beq.n	4d96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4d7a:	05db      	lsls	r3, r3, #23
    4d7c:	0ddb      	lsrs	r3, r3, #23
    4d7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4d80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4d82:	3b01      	subs	r3, #1
    4d84:	b29b      	uxth	r3, r3
    4d86:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d10c      	bne.n	4da6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4d8c:	3301      	adds	r3, #1
    4d8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4d90:	3301      	adds	r3, #1
    4d92:	75a3      	strb	r3, [r4, #22]
    4d94:	e007      	b.n	4da6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4d96:	7851      	ldrb	r1, [r2, #1]
    4d98:	0209      	lsls	r1, r1, #8
    4d9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4d9c:	3202      	adds	r2, #2
    4d9e:	62aa      	str	r2, [r5, #40]	; 0x28
    4da0:	e7eb      	b.n	4d7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4da2:	2301      	movs	r3, #1
    4da4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4da6:	07b3      	lsls	r3, r6, #30
    4da8:	d506      	bpl.n	4db8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4daa:	2302      	movs	r3, #2
    4dac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4dae:	2200      	movs	r2, #0
    4db0:	3331      	adds	r3, #49	; 0x31
    4db2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4db4:	07fb      	lsls	r3, r7, #31
    4db6:	d41a      	bmi.n	4dee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4db8:	0773      	lsls	r3, r6, #29
    4dba:	d565      	bpl.n	4e88 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4dbc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d05f      	beq.n	4e84 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4dc4:	8b63      	ldrh	r3, [r4, #26]
    4dc6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4dc8:	071a      	lsls	r2, r3, #28
    4dca:	d414      	bmi.n	4df6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4dcc:	223f      	movs	r2, #63	; 0x3f
    4dce:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d034      	beq.n	4e3e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4dd4:	079a      	lsls	r2, r3, #30
    4dd6:	d511      	bpl.n	4dfc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4dd8:	221a      	movs	r2, #26
    4dda:	2332      	movs	r3, #50	; 0x32
    4ddc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4dde:	3b30      	subs	r3, #48	; 0x30
    4de0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4de2:	077b      	lsls	r3, r7, #29
    4de4:	d550      	bpl.n	4e88 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4de6:	0028      	movs	r0, r5
    4de8:	696b      	ldr	r3, [r5, #20]
    4dea:	4798      	blx	r3
    4dec:	e04c      	b.n	4e88 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4dee:	0028      	movs	r0, r5
    4df0:	68eb      	ldr	r3, [r5, #12]
    4df2:	4798      	blx	r3
    4df4:	e7e0      	b.n	4db8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4df6:	2237      	movs	r2, #55	; 0x37
    4df8:	4013      	ands	r3, r2
    4dfa:	e7e9      	b.n	4dd0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4dfc:	075a      	lsls	r2, r3, #29
    4dfe:	d505      	bpl.n	4e0c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4e00:	221e      	movs	r2, #30
    4e02:	2332      	movs	r3, #50	; 0x32
    4e04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4e06:	3b2e      	subs	r3, #46	; 0x2e
    4e08:	8363      	strh	r3, [r4, #26]
    4e0a:	e7ea      	b.n	4de2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4e0c:	07da      	lsls	r2, r3, #31
    4e0e:	d505      	bpl.n	4e1c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4e10:	2213      	movs	r2, #19
    4e12:	2332      	movs	r3, #50	; 0x32
    4e14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4e16:	3b31      	subs	r3, #49	; 0x31
    4e18:	8363      	strh	r3, [r4, #26]
    4e1a:	e7e2      	b.n	4de2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4e1c:	06da      	lsls	r2, r3, #27
    4e1e:	d505      	bpl.n	4e2c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4e20:	2242      	movs	r2, #66	; 0x42
    4e22:	2332      	movs	r3, #50	; 0x32
    4e24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4e26:	3b22      	subs	r3, #34	; 0x22
    4e28:	8363      	strh	r3, [r4, #26]
    4e2a:	e7da      	b.n	4de2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4e2c:	2220      	movs	r2, #32
    4e2e:	421a      	tst	r2, r3
    4e30:	d0d7      	beq.n	4de2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4e32:	3221      	adds	r2, #33	; 0x21
    4e34:	2332      	movs	r3, #50	; 0x32
    4e36:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4e38:	3b12      	subs	r3, #18
    4e3a:	8363      	strh	r3, [r4, #26]
    4e3c:	e7d1      	b.n	4de2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4e3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4e40:	05db      	lsls	r3, r3, #23
    4e42:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4e44:	b2da      	uxtb	r2, r3
    4e46:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4e48:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4e4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4e4c:	1c51      	adds	r1, r2, #1
    4e4e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4e50:	7969      	ldrb	r1, [r5, #5]
    4e52:	2901      	cmp	r1, #1
    4e54:	d010      	beq.n	4e78 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4e56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4e58:	3b01      	subs	r3, #1
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d112      	bne.n	4e88 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4e62:	3304      	adds	r3, #4
    4e64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4e66:	2200      	movs	r2, #0
    4e68:	332e      	adds	r3, #46	; 0x2e
    4e6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4e6c:	07bb      	lsls	r3, r7, #30
    4e6e:	d50b      	bpl.n	4e88 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4e70:	0028      	movs	r0, r5
    4e72:	692b      	ldr	r3, [r5, #16]
    4e74:	4798      	blx	r3
    4e76:	e007      	b.n	4e88 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4e78:	0a1b      	lsrs	r3, r3, #8
    4e7a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4e7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e7e:	3301      	adds	r3, #1
    4e80:	626b      	str	r3, [r5, #36]	; 0x24
    4e82:	e7e8      	b.n	4e56 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4e84:	2304      	movs	r3, #4
    4e86:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4e88:	06f3      	lsls	r3, r6, #27
    4e8a:	d504      	bpl.n	4e96 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4e8c:	2310      	movs	r3, #16
    4e8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4e90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4e92:	06fb      	lsls	r3, r7, #27
    4e94:	d40e      	bmi.n	4eb4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4e96:	06b3      	lsls	r3, r6, #26
    4e98:	d504      	bpl.n	4ea4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4e9a:	2320      	movs	r3, #32
    4e9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4e9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4ea0:	073b      	lsls	r3, r7, #28
    4ea2:	d40b      	bmi.n	4ebc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4ea4:	0733      	lsls	r3, r6, #28
    4ea6:	d504      	bpl.n	4eb2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4ea8:	2308      	movs	r3, #8
    4eaa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4eac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4eae:	06bb      	lsls	r3, r7, #26
    4eb0:	d408      	bmi.n	4ec4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4eb4:	0028      	movs	r0, r5
    4eb6:	69eb      	ldr	r3, [r5, #28]
    4eb8:	4798      	blx	r3
    4eba:	e7ec      	b.n	4e96 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4ebc:	0028      	movs	r0, r5
    4ebe:	69ab      	ldr	r3, [r5, #24]
    4ec0:	4798      	blx	r3
    4ec2:	e7ef      	b.n	4ea4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4ec4:	6a2b      	ldr	r3, [r5, #32]
    4ec6:	0028      	movs	r0, r5
    4ec8:	4798      	blx	r3
}
    4eca:	e7f2      	b.n	4eb2 <_usart_interrupt_handler+0x176>
    4ecc:	20002078 	.word	0x20002078

00004ed0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ed0:	b510      	push	{r4, lr}
	switch (clock_source) {
    4ed2:	2808      	cmp	r0, #8
    4ed4:	d803      	bhi.n	4ede <system_clock_source_get_hz+0xe>
    4ed6:	0080      	lsls	r0, r0, #2
    4ed8:	4b1c      	ldr	r3, [pc, #112]	; (4f4c <system_clock_source_get_hz+0x7c>)
    4eda:	581b      	ldr	r3, [r3, r0]
    4edc:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    4ede:	2000      	movs	r0, #0
    4ee0:	e032      	b.n	4f48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    4ee2:	4b1b      	ldr	r3, [pc, #108]	; (4f50 <system_clock_source_get_hz+0x80>)
    4ee4:	6918      	ldr	r0, [r3, #16]
    4ee6:	e02f      	b.n	4f48 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    4ee8:	4b1a      	ldr	r3, [pc, #104]	; (4f54 <system_clock_source_get_hz+0x84>)
    4eea:	7d18      	ldrb	r0, [r3, #20]
    4eec:	0700      	lsls	r0, r0, #28
    4eee:	0f80      	lsrs	r0, r0, #30
    4ef0:	1c43      	adds	r3, r0, #1
    4ef2:	4819      	ldr	r0, [pc, #100]	; (4f58 <system_clock_source_get_hz+0x88>)
    4ef4:	4358      	muls	r0, r3
    4ef6:	e027      	b.n	4f48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    4ef8:	4b15      	ldr	r3, [pc, #84]	; (4f50 <system_clock_source_get_hz+0x80>)
    4efa:	6958      	ldr	r0, [r3, #20]
    4efc:	e024      	b.n	4f48 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    4efe:	4b14      	ldr	r3, [pc, #80]	; (4f50 <system_clock_source_get_hz+0x80>)
    4f00:	681b      	ldr	r3, [r3, #0]
			return 0;
    4f02:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    4f04:	079b      	lsls	r3, r3, #30
    4f06:	d51f      	bpl.n	4f48 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    4f08:	4912      	ldr	r1, [pc, #72]	; (4f54 <system_clock_source_get_hz+0x84>)
    4f0a:	2280      	movs	r2, #128	; 0x80
    4f0c:	0052      	lsls	r2, r2, #1
    4f0e:	68cb      	ldr	r3, [r1, #12]
    4f10:	4213      	tst	r3, r2
    4f12:	d0fc      	beq.n	4f0e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    4f14:	4b0e      	ldr	r3, [pc, #56]	; (4f50 <system_clock_source_get_hz+0x80>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	075b      	lsls	r3, r3, #29
    4f1a:	d401      	bmi.n	4f20 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    4f1c:	480f      	ldr	r0, [pc, #60]	; (4f5c <system_clock_source_get_hz+0x8c>)
    4f1e:	e013      	b.n	4f48 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    4f20:	2000      	movs	r0, #0
    4f22:	4b0f      	ldr	r3, [pc, #60]	; (4f60 <system_clock_source_get_hz+0x90>)
    4f24:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4f26:	4b0a      	ldr	r3, [pc, #40]	; (4f50 <system_clock_source_get_hz+0x80>)
    4f28:	689b      	ldr	r3, [r3, #8]
    4f2a:	041b      	lsls	r3, r3, #16
    4f2c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    4f2e:	4358      	muls	r0, r3
    4f30:	e00a      	b.n	4f48 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    4f32:	2328      	movs	r3, #40	; 0x28
    4f34:	4a07      	ldr	r2, [pc, #28]	; (4f54 <system_clock_source_get_hz+0x84>)
    4f36:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4f38:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    4f3a:	079b      	lsls	r3, r3, #30
    4f3c:	d504      	bpl.n	4f48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    4f3e:	4b04      	ldr	r3, [pc, #16]	; (4f50 <system_clock_source_get_hz+0x80>)
    4f40:	68d8      	ldr	r0, [r3, #12]
    4f42:	e001      	b.n	4f48 <system_clock_source_get_hz+0x78>
		return 32768UL;
    4f44:	2080      	movs	r0, #128	; 0x80
    4f46:	0200      	lsls	r0, r0, #8
	}
}
    4f48:	bd10      	pop	{r4, pc}
    4f4a:	46c0      	nop			; (mov r8, r8)
    4f4c:	0001e29c 	.word	0x0001e29c
    4f50:	20000a14 	.word	0x20000a14
    4f54:	40000c00 	.word	0x40000c00
    4f58:	003d0900 	.word	0x003d0900
    4f5c:	02dc6c00 	.word	0x02dc6c00
    4f60:	0000563d 	.word	0x0000563d

00004f64 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    4f64:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    4f66:	4c0b      	ldr	r4, [pc, #44]	; (4f94 <system_clock_source_osc16m_set_config+0x30>)
    4f68:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    4f6a:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4f6c:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    4f6e:	7802      	ldrb	r2, [r0, #0]
    4f70:	2103      	movs	r1, #3
    4f72:	4011      	ands	r1, r2
    4f74:	0089      	lsls	r1, r1, #2
    4f76:	220c      	movs	r2, #12
    4f78:	4393      	bics	r3, r2
    4f7a:	430b      	orrs	r3, r1
    4f7c:	3a0b      	subs	r2, #11
    4f7e:	4032      	ands	r2, r6
    4f80:	0192      	lsls	r2, r2, #6
    4f82:	2140      	movs	r1, #64	; 0x40
    4f84:	438b      	bics	r3, r1
    4f86:	4313      	orrs	r3, r2
    4f88:	01ed      	lsls	r5, r5, #7
    4f8a:	227f      	movs	r2, #127	; 0x7f
    4f8c:	4013      	ands	r3, r2
    4f8e:	432b      	orrs	r3, r5
    4f90:	7523      	strb	r3, [r4, #20]
}
    4f92:	bd70      	pop	{r4, r5, r6, pc}
    4f94:	40000c00 	.word	0x40000c00

00004f98 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9a:	46d6      	mov	lr, sl
    4f9c:	464f      	mov	r7, r9
    4f9e:	4646      	mov	r6, r8
    4fa0:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    4fa2:	4b20      	ldr	r3, [pc, #128]	; (5024 <system_clock_source_xosc32k_set_config+0x8c>)
    4fa4:	469a      	mov	sl, r3
    4fa6:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    4fa8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4faa:	7801      	ldrb	r1, [r0, #0]
    4fac:	424c      	negs	r4, r1
    4fae:	414c      	adcs	r4, r1
    4fb0:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    4fb2:	7881      	ldrb	r1, [r0, #2]
    4fb4:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    4fb6:	78c1      	ldrb	r1, [r0, #3]
    4fb8:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    4fba:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4fbc:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    4fbe:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4fc0:	6840      	ldr	r0, [r0, #4]
    4fc2:	4919      	ldr	r1, [pc, #100]	; (5028 <system_clock_source_xosc32k_set_config+0x90>)
    4fc4:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    4fc6:	2101      	movs	r1, #1
    4fc8:	4648      	mov	r0, r9
    4fca:	0080      	lsls	r0, r0, #2
    4fcc:	2204      	movs	r2, #4
    4fce:	4393      	bics	r3, r2
    4fd0:	4303      	orrs	r3, r0
    4fd2:	4640      	mov	r0, r8
    4fd4:	4008      	ands	r0, r1
    4fd6:	00c0      	lsls	r0, r0, #3
    4fd8:	3204      	adds	r2, #4
    4fda:	4393      	bics	r3, r2
    4fdc:	4303      	orrs	r3, r0
    4fde:	4660      	mov	r0, ip
    4fe0:	4008      	ands	r0, r1
    4fe2:	0100      	lsls	r0, r0, #4
    4fe4:	3208      	adds	r2, #8
    4fe6:	4393      	bics	r3, r2
    4fe8:	4303      	orrs	r3, r0
    4fea:	400f      	ands	r7, r1
    4fec:	01bf      	lsls	r7, r7, #6
    4fee:	2040      	movs	r0, #64	; 0x40
    4ff0:	4383      	bics	r3, r0
    4ff2:	433b      	orrs	r3, r7
    4ff4:	400e      	ands	r6, r1
    4ff6:	01f6      	lsls	r6, r6, #7
    4ff8:	3040      	adds	r0, #64	; 0x40
    4ffa:	4383      	bics	r3, r0
    4ffc:	4333      	orrs	r3, r6
    4ffe:	3879      	subs	r0, #121	; 0x79
    5000:	4005      	ands	r5, r0
    5002:	022d      	lsls	r5, r5, #8
    5004:	4809      	ldr	r0, [pc, #36]	; (502c <system_clock_source_xosc32k_set_config+0x94>)
    5006:	4003      	ands	r3, r0
    5008:	432b      	orrs	r3, r5
    500a:	4021      	ands	r1, r4
    500c:	0309      	lsls	r1, r1, #12
    500e:	4808      	ldr	r0, [pc, #32]	; (5030 <system_clock_source_xosc32k_set_config+0x98>)
    5010:	4003      	ands	r3, r0
    5012:	430b      	orrs	r3, r1
    5014:	4652      	mov	r2, sl
    5016:	6153      	str	r3, [r2, #20]
}
    5018:	bc1c      	pop	{r2, r3, r4}
    501a:	4690      	mov	r8, r2
    501c:	4699      	mov	r9, r3
    501e:	46a2      	mov	sl, r4
    5020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	40001000 	.word	0x40001000
    5028:	20000a14 	.word	0x20000a14
    502c:	fffff8ff 	.word	0xfffff8ff
    5030:	ffffefff 	.word	0xffffefff

00005034 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5034:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5036:	7a83      	ldrb	r3, [r0, #10]
    5038:	069b      	lsls	r3, r3, #26
    503a:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    503c:	8982      	ldrh	r2, [r0, #12]
    503e:	0592      	lsls	r2, r2, #22
    5040:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5042:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5044:	491a      	ldr	r1, [pc, #104]	; (50b0 <system_clock_source_dfll_set_config+0x7c>)
    5046:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5048:	7a03      	ldrb	r3, [r0, #8]
    504a:	7a42      	ldrb	r2, [r0, #9]
    504c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    504e:	8882      	ldrh	r2, [r0, #4]
    5050:	88c4      	ldrh	r4, [r0, #6]
    5052:	4322      	orrs	r2, r4
    5054:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    5056:	7842      	ldrb	r2, [r0, #1]
    5058:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    505a:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    505c:	7882      	ldrb	r2, [r0, #2]
    505e:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    5060:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5062:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5064:	7803      	ldrb	r3, [r0, #0]
    5066:	2b04      	cmp	r3, #4
    5068:	d011      	beq.n	508e <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    506a:	2b20      	cmp	r3, #32
    506c:	d10e      	bne.n	508c <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    506e:	7b83      	ldrb	r3, [r0, #14]
    5070:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    5072:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5074:	4313      	orrs	r3, r2
    5076:	8a02      	ldrh	r2, [r0, #16]
    5078:	0412      	lsls	r2, r2, #16
    507a:	490e      	ldr	r1, [pc, #56]	; (50b4 <system_clock_source_dfll_set_config+0x80>)
    507c:	400a      	ands	r2, r1
    507e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5080:	4a0b      	ldr	r2, [pc, #44]	; (50b0 <system_clock_source_dfll_set_config+0x7c>)
    5082:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5084:	6811      	ldr	r1, [r2, #0]
    5086:	4b0c      	ldr	r3, [pc, #48]	; (50b8 <system_clock_source_dfll_set_config+0x84>)
    5088:	430b      	orrs	r3, r1
    508a:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    508c:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    508e:	7b83      	ldrb	r3, [r0, #14]
    5090:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    5092:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5094:	4313      	orrs	r3, r2
    5096:	8a02      	ldrh	r2, [r0, #16]
    5098:	0412      	lsls	r2, r2, #16
    509a:	4906      	ldr	r1, [pc, #24]	; (50b4 <system_clock_source_dfll_set_config+0x80>)
    509c:	400a      	ands	r2, r1
    509e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    50a0:	4a03      	ldr	r2, [pc, #12]	; (50b0 <system_clock_source_dfll_set_config+0x7c>)
    50a2:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    50a4:	6813      	ldr	r3, [r2, #0]
    50a6:	2104      	movs	r1, #4
    50a8:	430b      	orrs	r3, r1
    50aa:	6013      	str	r3, [r2, #0]
    50ac:	e7ee      	b.n	508c <system_clock_source_dfll_set_config+0x58>
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	20000a14 	.word	0x20000a14
    50b4:	03ff0000 	.word	0x03ff0000
    50b8:	00000424 	.word	0x00000424

000050bc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    50bc:	2808      	cmp	r0, #8
    50be:	d803      	bhi.n	50c8 <system_clock_source_enable+0xc>
    50c0:	0080      	lsls	r0, r0, #2
    50c2:	4b29      	ldr	r3, [pc, #164]	; (5168 <system_clock_source_enable+0xac>)
    50c4:	581b      	ldr	r3, [r3, r0]
    50c6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    50c8:	2017      	movs	r0, #23
    50ca:	e04b      	b.n	5164 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    50cc:	4a27      	ldr	r2, [pc, #156]	; (516c <system_clock_source_enable+0xb0>)
    50ce:	7d13      	ldrb	r3, [r2, #20]
    50d0:	2102      	movs	r1, #2
    50d2:	430b      	orrs	r3, r1
    50d4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    50d6:	2000      	movs	r0, #0
    50d8:	e044      	b.n	5164 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    50da:	4a25      	ldr	r2, [pc, #148]	; (5170 <system_clock_source_enable+0xb4>)
    50dc:	6993      	ldr	r3, [r2, #24]
    50de:	2102      	movs	r1, #2
    50e0:	430b      	orrs	r3, r1
    50e2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    50e4:	2000      	movs	r0, #0
		break;
    50e6:	e03d      	b.n	5164 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    50e8:	4a20      	ldr	r2, [pc, #128]	; (516c <system_clock_source_enable+0xb0>)
    50ea:	8a13      	ldrh	r3, [r2, #16]
    50ec:	2102      	movs	r1, #2
    50ee:	430b      	orrs	r3, r1
    50f0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    50f2:	2000      	movs	r0, #0
		break;
    50f4:	e036      	b.n	5164 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    50f6:	4a1e      	ldr	r2, [pc, #120]	; (5170 <system_clock_source_enable+0xb4>)
    50f8:	6953      	ldr	r3, [r2, #20]
    50fa:	2102      	movs	r1, #2
    50fc:	430b      	orrs	r3, r1
    50fe:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    5100:	2000      	movs	r0, #0
		break;
    5102:	e02f      	b.n	5164 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    5104:	491b      	ldr	r1, [pc, #108]	; (5174 <system_clock_source_enable+0xb8>)
    5106:	680b      	ldr	r3, [r1, #0]
    5108:	2202      	movs	r2, #2
    510a:	4313      	orrs	r3, r2
    510c:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    510e:	4b17      	ldr	r3, [pc, #92]	; (516c <system_clock_source_enable+0xb0>)
    5110:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5112:	0019      	movs	r1, r3
    5114:	32fe      	adds	r2, #254	; 0xfe
    5116:	68cb      	ldr	r3, [r1, #12]
    5118:	4213      	tst	r3, r2
    511a:	d0fc      	beq.n	5116 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    511c:	4a15      	ldr	r2, [pc, #84]	; (5174 <system_clock_source_enable+0xb8>)
    511e:	6891      	ldr	r1, [r2, #8]
    5120:	4b12      	ldr	r3, [pc, #72]	; (516c <system_clock_source_enable+0xb0>)
    5122:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5124:	6852      	ldr	r2, [r2, #4]
    5126:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    5128:	2200      	movs	r2, #0
    512a:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    512c:	0019      	movs	r1, r3
    512e:	3201      	adds	r2, #1
    5130:	32ff      	adds	r2, #255	; 0xff
    5132:	68cb      	ldr	r3, [r1, #12]
    5134:	4213      	tst	r3, r2
    5136:	d0fc      	beq.n	5132 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5138:	4b0e      	ldr	r3, [pc, #56]	; (5174 <system_clock_source_enable+0xb8>)
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	b29b      	uxth	r3, r3
    513e:	4a0b      	ldr	r2, [pc, #44]	; (516c <system_clock_source_enable+0xb0>)
    5140:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5142:	2000      	movs	r0, #0
    5144:	e00e      	b.n	5164 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    5146:	4909      	ldr	r1, [pc, #36]	; (516c <system_clock_source_enable+0xb0>)
    5148:	2228      	movs	r2, #40	; 0x28
    514a:	5c8b      	ldrb	r3, [r1, r2]
    514c:	2002      	movs	r0, #2
    514e:	4303      	orrs	r3, r0
    5150:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    5152:	0008      	movs	r0, r1
    5154:	2138      	movs	r1, #56	; 0x38
    5156:	3a26      	subs	r2, #38	; 0x26
    5158:	5c43      	ldrb	r3, [r0, r1]
    515a:	4213      	tst	r3, r2
    515c:	d1fc      	bne.n	5158 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    515e:	2000      	movs	r0, #0
    5160:	e000      	b.n	5164 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    5162:	2000      	movs	r0, #0
}
    5164:	4770      	bx	lr
    5166:	46c0      	nop			; (mov r8, r8)
    5168:	0001e2c0 	.word	0x0001e2c0
    516c:	40000c00 	.word	0x40000c00
    5170:	40001000 	.word	0x40001000
    5174:	20000a14 	.word	0x20000a14

00005178 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5178:	2808      	cmp	r0, #8
    517a:	d832      	bhi.n	51e2 <system_clock_source_disable+0x6a>
    517c:	0080      	lsls	r0, r0, #2
    517e:	4b1a      	ldr	r3, [pc, #104]	; (51e8 <system_clock_source_disable+0x70>)
    5180:	581b      	ldr	r3, [r3, r0]
    5182:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    5184:	4a19      	ldr	r2, [pc, #100]	; (51ec <system_clock_source_disable+0x74>)
    5186:	7d13      	ldrb	r3, [r2, #20]
    5188:	2102      	movs	r1, #2
    518a:	438b      	bics	r3, r1
    518c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    518e:	2000      	movs	r0, #0
}
    5190:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    5192:	4a17      	ldr	r2, [pc, #92]	; (51f0 <system_clock_source_disable+0x78>)
    5194:	6993      	ldr	r3, [r2, #24]
    5196:	2102      	movs	r1, #2
    5198:	438b      	bics	r3, r1
    519a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    519c:	2000      	movs	r0, #0
		break;
    519e:	e7f7      	b.n	5190 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    51a0:	4a12      	ldr	r2, [pc, #72]	; (51ec <system_clock_source_disable+0x74>)
    51a2:	8a13      	ldrh	r3, [r2, #16]
    51a4:	2102      	movs	r1, #2
    51a6:	438b      	bics	r3, r1
    51a8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    51aa:	2000      	movs	r0, #0
		break;
    51ac:	e7f0      	b.n	5190 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    51ae:	4a10      	ldr	r2, [pc, #64]	; (51f0 <system_clock_source_disable+0x78>)
    51b0:	6953      	ldr	r3, [r2, #20]
    51b2:	2102      	movs	r1, #2
    51b4:	438b      	bics	r3, r1
    51b6:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    51b8:	2000      	movs	r0, #0
		break;
    51ba:	e7e9      	b.n	5190 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    51bc:	4b0d      	ldr	r3, [pc, #52]	; (51f4 <system_clock_source_disable+0x7c>)
    51be:	681a      	ldr	r2, [r3, #0]
    51c0:	2102      	movs	r1, #2
    51c2:	438a      	bics	r2, r1
    51c4:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    51c6:	681b      	ldr	r3, [r3, #0]
    51c8:	b29b      	uxth	r3, r3
    51ca:	4a08      	ldr	r2, [pc, #32]	; (51ec <system_clock_source_disable+0x74>)
    51cc:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    51ce:	2000      	movs	r0, #0
		break;
    51d0:	e7de      	b.n	5190 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    51d2:	4906      	ldr	r1, [pc, #24]	; (51ec <system_clock_source_disable+0x74>)
    51d4:	2228      	movs	r2, #40	; 0x28
    51d6:	5c8b      	ldrb	r3, [r1, r2]
    51d8:	2002      	movs	r0, #2
    51da:	4383      	bics	r3, r0
    51dc:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    51de:	2000      	movs	r0, #0
		break;
    51e0:	e7d6      	b.n	5190 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    51e2:	2017      	movs	r0, #23
    51e4:	e7d4      	b.n	5190 <system_clock_source_disable+0x18>
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	0001e2e4 	.word	0x0001e2e4
    51ec:	40000c00 	.word	0x40000c00
    51f0:	40001000 	.word	0x40001000
    51f4:	20000a14 	.word	0x20000a14

000051f8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fa:	46ce      	mov	lr, r9
    51fc:	4647      	mov	r7, r8
    51fe:	b580      	push	{r7, lr}
    5200:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    5202:	2280      	movs	r2, #128	; 0x80
    5204:	0052      	lsls	r2, r2, #1
    5206:	4b76      	ldr	r3, [pc, #472]	; (53e0 <system_clock_init+0x1e8>)
    5208:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    520a:	3afd      	subs	r2, #253	; 0xfd
    520c:	4b75      	ldr	r3, [pc, #468]	; (53e4 <system_clock_init+0x1ec>)
    520e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5210:	4a75      	ldr	r2, [pc, #468]	; (53e8 <system_clock_init+0x1f0>)
    5212:	6853      	ldr	r3, [r2, #4]
    5214:	211e      	movs	r1, #30
    5216:	438b      	bics	r3, r1
    5218:	391a      	subs	r1, #26
    521a:	430b      	orrs	r3, r1
    521c:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    521e:	2380      	movs	r3, #128	; 0x80
    5220:	05db      	lsls	r3, r3, #23
    5222:	789b      	ldrb	r3, [r3, #2]
    5224:	2b02      	cmp	r3, #2
    5226:	d00f      	beq.n	5248 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    5228:	2380      	movs	r3, #128	; 0x80
    522a:	05db      	lsls	r3, r3, #23
    522c:	789b      	ldrb	r3, [r3, #2]
    522e:	b25b      	sxtb	r3, r3
    5230:	2b00      	cmp	r3, #0
    5232:	db09      	blt.n	5248 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5234:	2380      	movs	r3, #128	; 0x80
    5236:	05db      	lsls	r3, r3, #23
    5238:	2201      	movs	r2, #1
    523a:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    523c:	3201      	adds	r2, #1
    523e:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    5240:	001a      	movs	r2, r3
    5242:	7993      	ldrb	r3, [r2, #6]
    5244:	2b00      	cmp	r3, #0
    5246:	d0fc      	beq.n	5242 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5248:	a809      	add	r0, sp, #36	; 0x24
    524a:	2300      	movs	r3, #0
    524c:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    524e:	2280      	movs	r2, #128	; 0x80
    5250:	0212      	lsls	r2, r2, #8
    5252:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    5254:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    5256:	2201      	movs	r2, #1
    5258:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    525a:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    525c:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    525e:	3203      	adds	r2, #3
    5260:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5262:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5264:	4b61      	ldr	r3, [pc, #388]	; (53ec <system_clock_init+0x1f4>)
    5266:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5268:	2005      	movs	r0, #5
    526a:	4b61      	ldr	r3, [pc, #388]	; (53f0 <system_clock_init+0x1f8>)
    526c:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    526e:	4961      	ldr	r1, [pc, #388]	; (53f4 <system_clock_init+0x1fc>)
    5270:	2201      	movs	r2, #1
    5272:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5274:	421a      	tst	r2, r3
    5276:	d0fc      	beq.n	5272 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5278:	a901      	add	r1, sp, #4
    527a:	2501      	movs	r5, #1
    527c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    527e:	2400      	movs	r4, #0
    5280:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5282:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    5284:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    5286:	2303      	movs	r3, #3
    5288:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    528a:	2000      	movs	r0, #0
    528c:	4b5a      	ldr	r3, [pc, #360]	; (53f8 <system_clock_init+0x200>)
    528e:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    5290:	2006      	movs	r0, #6
    5292:	4b5a      	ldr	r3, [pc, #360]	; (53fc <system_clock_init+0x204>)
    5294:	4798      	blx	r3
	config->run_in_standby  = false;
    5296:	466b      	mov	r3, sp
    5298:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    529a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    529c:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    529e:	4668      	mov	r0, sp
    52a0:	4b57      	ldr	r3, [pc, #348]	; (5400 <system_clock_init+0x208>)
    52a2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    52a4:	2006      	movs	r0, #6
    52a6:	4b52      	ldr	r3, [pc, #328]	; (53f0 <system_clock_init+0x1f8>)
    52a8:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    52aa:	494d      	ldr	r1, [pc, #308]	; (53e0 <system_clock_init+0x1e8>)
    52ac:	2210      	movs	r2, #16
    52ae:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    52b0:	421a      	tst	r2, r3
    52b2:	d0fc      	beq.n	52ae <system_clock_init+0xb6>
	config->division_factor    = 1;
    52b4:	a901      	add	r1, sp, #4
    52b6:	2301      	movs	r3, #1
    52b8:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    52ba:	2400      	movs	r4, #0
    52bc:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    52be:	3305      	adds	r3, #5
    52c0:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    52c2:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    52c4:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    52c6:	2000      	movs	r0, #0
    52c8:	4b4b      	ldr	r3, [pc, #300]	; (53f8 <system_clock_init+0x200>)
    52ca:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    52cc:	ab04      	add	r3, sp, #16
    52ce:	2200      	movs	r2, #0
    52d0:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    52d2:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    52d4:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    52d6:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    52d8:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    52da:	213f      	movs	r1, #63	; 0x3f
    52dc:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    52de:	393b      	subs	r1, #59	; 0x3b
    52e0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    52e2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    52e4:	4b47      	ldr	r3, [pc, #284]	; (5404 <system_clock_init+0x20c>)
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    52ea:	2b3f      	cmp	r3, #63	; 0x3f
    52ec:	d100      	bne.n	52f0 <system_clock_init+0xf8>
    52ee:	e074      	b.n	53da <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    52f0:	a804      	add	r0, sp, #16
    52f2:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    52f4:	23b7      	movs	r3, #183	; 0xb7
    52f6:	00db      	lsls	r3, r3, #3
    52f8:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    52fa:	2307      	movs	r3, #7
    52fc:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    52fe:	3338      	adds	r3, #56	; 0x38
    5300:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5302:	4b41      	ldr	r3, [pc, #260]	; (5408 <system_clock_init+0x210>)
    5304:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5306:	4b41      	ldr	r3, [pc, #260]	; (540c <system_clock_init+0x214>)
    5308:	4798      	blx	r3
	config->division_factor    = 1;
    530a:	ac01      	add	r4, sp, #4
    530c:	2601      	movs	r6, #1
    530e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5310:	2500      	movs	r5, #0
    5312:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    5314:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5316:	2305      	movs	r3, #5
    5318:	4699      	mov	r9, r3
    531a:	7023      	strb	r3, [r4, #0]
    531c:	7226      	strb	r6, [r4, #8]
    531e:	0021      	movs	r1, r4
    5320:	2001      	movs	r0, #1
    5322:	4b35      	ldr	r3, [pc, #212]	; (53f8 <system_clock_init+0x200>)
    5324:	4698      	mov	r8, r3
    5326:	4798      	blx	r3
    5328:	2001      	movs	r0, #1
    532a:	4f39      	ldr	r7, [pc, #228]	; (5410 <system_clock_init+0x218>)
    532c:	47b8      	blx	r7
	config->high_when_disabled = false;
    532e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    5330:	2306      	movs	r3, #6
    5332:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    5334:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5336:	7265      	strb	r5, [r4, #9]
    5338:	464b      	mov	r3, r9
    533a:	6063      	str	r3, [r4, #4]
    533c:	0021      	movs	r1, r4
    533e:	2002      	movs	r0, #2
    5340:	47c0      	blx	r8
    5342:	2002      	movs	r0, #2
    5344:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5346:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5348:	0021      	movs	r1, r4
    534a:	2000      	movs	r0, #0
    534c:	4b31      	ldr	r3, [pc, #196]	; (5414 <system_clock_init+0x21c>)
    534e:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    5350:	2000      	movs	r0, #0
    5352:	4b31      	ldr	r3, [pc, #196]	; (5418 <system_clock_init+0x220>)
    5354:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5356:	2007      	movs	r0, #7
    5358:	4b25      	ldr	r3, [pc, #148]	; (53f0 <system_clock_init+0x1f8>)
    535a:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    535c:	4920      	ldr	r1, [pc, #128]	; (53e0 <system_clock_init+0x1e8>)
    535e:	22d0      	movs	r2, #208	; 0xd0
    5360:	0112      	lsls	r2, r2, #4
    5362:	68cb      	ldr	r3, [r1, #12]
    5364:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5366:	4293      	cmp	r3, r2
    5368:	d1fb      	bne.n	5362 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    536a:	4c2c      	ldr	r4, [pc, #176]	; (541c <system_clock_init+0x224>)
    536c:	2301      	movs	r3, #1
    536e:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    5370:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    5372:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    5374:	a901      	add	r1, sp, #4
    5376:	2300      	movs	r3, #0
    5378:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    537a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    537c:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    537e:	3307      	adds	r3, #7
    5380:	700b      	strb	r3, [r1, #0]
    5382:	3b01      	subs	r3, #1
    5384:	604b      	str	r3, [r1, #4]
    5386:	2000      	movs	r0, #0
    5388:	4b1b      	ldr	r3, [pc, #108]	; (53f8 <system_clock_init+0x200>)
    538a:	4798      	blx	r3
    538c:	2000      	movs	r0, #0
    538e:	4b20      	ldr	r3, [pc, #128]	; (5410 <system_clock_init+0x218>)
    5390:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    5392:	2000      	movs	r0, #0
    5394:	4b22      	ldr	r3, [pc, #136]	; (5420 <system_clock_init+0x228>)
    5396:	4798      	blx	r3
    5398:	7921      	ldrb	r1, [r4, #4]
    539a:	b2c9      	uxtb	r1, r1
    539c:	4b21      	ldr	r3, [pc, #132]	; (5424 <system_clock_init+0x22c>)
    539e:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    53a0:	4b21      	ldr	r3, [pc, #132]	; (5428 <system_clock_init+0x230>)
    53a2:	4298      	cmp	r0, r3
    53a4:	d814      	bhi.n	53d0 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    53a6:	2380      	movs	r3, #128	; 0x80
    53a8:	05db      	lsls	r3, r3, #23
    53aa:	789b      	ldrb	r3, [r3, #2]
    53ac:	2b00      	cmp	r3, #0
    53ae:	d00f      	beq.n	53d0 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    53b0:	2380      	movs	r3, #128	; 0x80
    53b2:	05db      	lsls	r3, r3, #23
    53b4:	789b      	ldrb	r3, [r3, #2]
    53b6:	b25b      	sxtb	r3, r3
    53b8:	2b00      	cmp	r3, #0
    53ba:	db09      	blt.n	53d0 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    53bc:	2380      	movs	r3, #128	; 0x80
    53be:	05db      	lsls	r3, r3, #23
    53c0:	2201      	movs	r2, #1
    53c2:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    53c4:	2200      	movs	r2, #0
    53c6:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    53c8:	001a      	movs	r2, r3
    53ca:	7993      	ldrb	r3, [r2, #6]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d0fc      	beq.n	53ca <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    53d0:	b00d      	add	sp, #52	; 0x34
    53d2:	bc0c      	pop	{r2, r3}
    53d4:	4690      	mov	r8, r2
    53d6:	4699      	mov	r9, r3
    53d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    53da:	3b20      	subs	r3, #32
    53dc:	e788      	b.n	52f0 <system_clock_init+0xf8>
    53de:	46c0      	nop			; (mov r8, r8)
    53e0:	40000c00 	.word	0x40000c00
    53e4:	40001400 	.word	0x40001400
    53e8:	41004000 	.word	0x41004000
    53ec:	00004f99 	.word	0x00004f99
    53f0:	000050bd 	.word	0x000050bd
    53f4:	40001000 	.word	0x40001000
    53f8:	00005451 	.word	0x00005451
    53fc:	00005179 	.word	0x00005179
    5400:	00004f65 	.word	0x00004f65
    5404:	00806020 	.word	0x00806020
    5408:	00005035 	.word	0x00005035
    540c:	0000542d 	.word	0x0000542d
    5410:	000054fd 	.word	0x000054fd
    5414:	00005619 	.word	0x00005619
    5418:	000055a9 	.word	0x000055a9
    541c:	40000400 	.word	0x40000400
    5420:	0000553d 	.word	0x0000553d
    5424:	00014f51 	.word	0x00014f51
    5428:	00b71b00 	.word	0x00b71b00

0000542c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    542c:	4a06      	ldr	r2, [pc, #24]	; (5448 <system_gclk_init+0x1c>)
    542e:	6953      	ldr	r3, [r2, #20]
    5430:	2140      	movs	r1, #64	; 0x40
    5432:	430b      	orrs	r3, r1
    5434:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    5436:	2201      	movs	r2, #1
    5438:	4b04      	ldr	r3, [pc, #16]	; (544c <system_gclk_init+0x20>)
    543a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    543c:	0019      	movs	r1, r3
    543e:	780b      	ldrb	r3, [r1, #0]
    5440:	4213      	tst	r3, r2
    5442:	d1fc      	bne.n	543e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5444:	4770      	bx	lr
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	40000400 	.word	0x40000400
    544c:	40001800 	.word	0x40001800

00005450 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5450:	b570      	push	{r4, r5, r6, lr}
    5452:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5454:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5456:	784b      	ldrb	r3, [r1, #1]
    5458:	2b00      	cmp	r3, #0
    545a:	d002      	beq.n	5462 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    545c:	2380      	movs	r3, #128	; 0x80
    545e:	00db      	lsls	r3, r3, #3
    5460:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5462:	7a4b      	ldrb	r3, [r1, #9]
    5464:	2b00      	cmp	r3, #0
    5466:	d002      	beq.n	546e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5468:	2380      	movs	r3, #128	; 0x80
    546a:	011b      	lsls	r3, r3, #4
    546c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    546e:	6848      	ldr	r0, [r1, #4]
    5470:	2801      	cmp	r0, #1
    5472:	d90f      	bls.n	5494 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5474:	1e43      	subs	r3, r0, #1
    5476:	4218      	tst	r0, r3
    5478:	d131      	bne.n	54de <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    547a:	2802      	cmp	r0, #2
    547c:	d92d      	bls.n	54da <system_gclk_gen_set_config+0x8a>
    547e:	2302      	movs	r3, #2
    5480:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5482:	3201      	adds	r2, #1
						mask <<= 1) {
    5484:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5486:	4298      	cmp	r0, r3
    5488:	d8fb      	bhi.n	5482 <system_gclk_gen_set_config+0x32>
    548a:	2380      	movs	r3, #128	; 0x80
    548c:	015b      	lsls	r3, r3, #5
    548e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    5490:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5492:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5494:	7a0b      	ldrb	r3, [r1, #8]
    5496:	2b00      	cmp	r3, #0
    5498:	d002      	beq.n	54a0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    549a:	2380      	movs	r3, #128	; 0x80
    549c:	019b      	lsls	r3, r3, #6
    549e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    54a0:	2604      	movs	r6, #4
    54a2:	40a6      	lsls	r6, r4
    54a4:	4911      	ldr	r1, [pc, #68]	; (54ec <system_gclk_gen_set_config+0x9c>)
    54a6:	4a12      	ldr	r2, [pc, #72]	; (54f0 <system_gclk_gen_set_config+0xa0>)
    54a8:	684b      	ldr	r3, [r1, #4]
    54aa:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    54ac:	421e      	tst	r6, r3
    54ae:	d1fb      	bne.n	54a8 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    54b0:	4b10      	ldr	r3, [pc, #64]	; (54f4 <system_gclk_gen_set_config+0xa4>)
    54b2:	4798      	blx	r3
    54b4:	00a4      	lsls	r4, r4, #2
    54b6:	4b0d      	ldr	r3, [pc, #52]	; (54ec <system_gclk_gen_set_config+0x9c>)
    54b8:	469c      	mov	ip, r3
    54ba:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    54bc:	6a22      	ldr	r2, [r4, #32]
    54be:	2380      	movs	r3, #128	; 0x80
    54c0:	005b      	lsls	r3, r3, #1
    54c2:	401a      	ands	r2, r3
    54c4:	432a      	orrs	r2, r5
    54c6:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    54c8:	4661      	mov	r1, ip
    54ca:	4a09      	ldr	r2, [pc, #36]	; (54f0 <system_gclk_gen_set_config+0xa0>)
    54cc:	684b      	ldr	r3, [r1, #4]
    54ce:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    54d0:	421e      	tst	r6, r3
    54d2:	d1fb      	bne.n	54cc <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    54d4:	4b08      	ldr	r3, [pc, #32]	; (54f8 <system_gclk_gen_set_config+0xa8>)
    54d6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    54d8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    54da:	2200      	movs	r2, #0
    54dc:	e7d5      	b.n	548a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    54de:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    54e0:	2380      	movs	r3, #128	; 0x80
    54e2:	009b      	lsls	r3, r3, #2
    54e4:	4318      	orrs	r0, r3
    54e6:	4305      	orrs	r5, r0
    54e8:	e7d4      	b.n	5494 <system_gclk_gen_set_config+0x44>
    54ea:	46c0      	nop			; (mov r8, r8)
    54ec:	40001800 	.word	0x40001800
    54f0:	000007fc 	.word	0x000007fc
    54f4:	00002a15 	.word	0x00002a15
    54f8:	00002a55 	.word	0x00002a55

000054fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    54fc:	b510      	push	{r4, lr}
    54fe:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5500:	2204      	movs	r2, #4
    5502:	4082      	lsls	r2, r0
    5504:	4809      	ldr	r0, [pc, #36]	; (552c <system_gclk_gen_enable+0x30>)
    5506:	490a      	ldr	r1, [pc, #40]	; (5530 <system_gclk_gen_enable+0x34>)
    5508:	6843      	ldr	r3, [r0, #4]
    550a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    550c:	421a      	tst	r2, r3
    550e:	d1fb      	bne.n	5508 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    5510:	4b08      	ldr	r3, [pc, #32]	; (5534 <system_gclk_gen_enable+0x38>)
    5512:	4798      	blx	r3
    5514:	00a4      	lsls	r4, r4, #2
    5516:	4b05      	ldr	r3, [pc, #20]	; (552c <system_gclk_gen_enable+0x30>)
    5518:	469c      	mov	ip, r3
    551a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    551c:	6a22      	ldr	r2, [r4, #32]
    551e:	2380      	movs	r3, #128	; 0x80
    5520:	005b      	lsls	r3, r3, #1
    5522:	4313      	orrs	r3, r2
    5524:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    5526:	4b04      	ldr	r3, [pc, #16]	; (5538 <system_gclk_gen_enable+0x3c>)
    5528:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    552a:	bd10      	pop	{r4, pc}
    552c:	40001800 	.word	0x40001800
    5530:	000007fc 	.word	0x000007fc
    5534:	00002a15 	.word	0x00002a15
    5538:	00002a55 	.word	0x00002a55

0000553c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    553e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5540:	2204      	movs	r2, #4
    5542:	4082      	lsls	r2, r0
    5544:	4812      	ldr	r0, [pc, #72]	; (5590 <system_gclk_gen_get_hz+0x54>)
    5546:	4913      	ldr	r1, [pc, #76]	; (5594 <system_gclk_gen_get_hz+0x58>)
    5548:	6843      	ldr	r3, [r0, #4]
    554a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    554c:	421a      	tst	r2, r3
    554e:	d1fb      	bne.n	5548 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    5550:	4b11      	ldr	r3, [pc, #68]	; (5598 <system_gclk_gen_get_hz+0x5c>)
    5552:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    5554:	4f0e      	ldr	r7, [pc, #56]	; (5590 <system_gclk_gen_get_hz+0x54>)
    5556:	3408      	adds	r4, #8
    5558:	00a4      	lsls	r4, r4, #2
    555a:	59e0      	ldr	r0, [r4, r7]
    555c:	0700      	lsls	r0, r0, #28
    555e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5560:	4b0e      	ldr	r3, [pc, #56]	; (559c <system_gclk_gen_get_hz+0x60>)
    5562:	4798      	blx	r3
    5564:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    5566:	59e5      	ldr	r5, [r4, r7]
    5568:	04ed      	lsls	r5, r5, #19
    556a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    556c:	59e4      	ldr	r4, [r4, r7]
    556e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5570:	4b0b      	ldr	r3, [pc, #44]	; (55a0 <system_gclk_gen_get_hz+0x64>)
    5572:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5574:	2d00      	cmp	r5, #0
    5576:	d107      	bne.n	5588 <system_gclk_gen_get_hz+0x4c>
    5578:	2c01      	cmp	r4, #1
    557a:	d907      	bls.n	558c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    557c:	0021      	movs	r1, r4
    557e:	0030      	movs	r0, r6
    5580:	4b08      	ldr	r3, [pc, #32]	; (55a4 <system_gclk_gen_get_hz+0x68>)
    5582:	4798      	blx	r3
    5584:	0006      	movs	r6, r0
    5586:	e001      	b.n	558c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5588:	3401      	adds	r4, #1
    558a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    558c:	0030      	movs	r0, r6
    558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5590:	40001800 	.word	0x40001800
    5594:	000007fc 	.word	0x000007fc
    5598:	00002a15 	.word	0x00002a15
    559c:	00004ed1 	.word	0x00004ed1
    55a0:	00002a55 	.word	0x00002a55
    55a4:	00014f51 	.word	0x00014f51

000055a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    55a8:	b510      	push	{r4, lr}
    55aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    55ac:	4b09      	ldr	r3, [pc, #36]	; (55d4 <system_gclk_chan_enable+0x2c>)
    55ae:	4798      	blx	r3
    55b0:	00a0      	lsls	r0, r4, #2
    55b2:	4b09      	ldr	r3, [pc, #36]	; (55d8 <system_gclk_chan_enable+0x30>)
    55b4:	469c      	mov	ip, r3
    55b6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    55b8:	2280      	movs	r2, #128	; 0x80
    55ba:	5883      	ldr	r3, [r0, r2]
    55bc:	2140      	movs	r1, #64	; 0x40
    55be:	430b      	orrs	r3, r1
    55c0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    55c2:	3140      	adds	r1, #64	; 0x40
    55c4:	3a40      	subs	r2, #64	; 0x40
    55c6:	5843      	ldr	r3, [r0, r1]
    55c8:	421a      	tst	r2, r3
    55ca:	d0fc      	beq.n	55c6 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    55cc:	4b03      	ldr	r3, [pc, #12]	; (55dc <system_gclk_chan_enable+0x34>)
    55ce:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    55d0:	bd10      	pop	{r4, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	00002a15 	.word	0x00002a15
    55d8:	40001800 	.word	0x40001800
    55dc:	00002a55 	.word	0x00002a55

000055e0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    55e0:	b510      	push	{r4, lr}
    55e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    55e4:	4b09      	ldr	r3, [pc, #36]	; (560c <system_gclk_chan_disable+0x2c>)
    55e6:	4798      	blx	r3
    55e8:	00a0      	lsls	r0, r4, #2
    55ea:	4b09      	ldr	r3, [pc, #36]	; (5610 <system_gclk_chan_disable+0x30>)
    55ec:	469c      	mov	ip, r3
    55ee:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    55f0:	2280      	movs	r2, #128	; 0x80
    55f2:	5883      	ldr	r3, [r0, r2]
    55f4:	2140      	movs	r1, #64	; 0x40
    55f6:	438b      	bics	r3, r1
    55f8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    55fa:	3140      	adds	r1, #64	; 0x40
    55fc:	3a40      	subs	r2, #64	; 0x40
    55fe:	5843      	ldr	r3, [r0, r1]
    5600:	421a      	tst	r2, r3
    5602:	d1fc      	bne.n	55fe <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    5604:	4b03      	ldr	r3, [pc, #12]	; (5614 <system_gclk_chan_disable+0x34>)
    5606:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    5608:	bd10      	pop	{r4, pc}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	00002a15 	.word	0x00002a15
    5610:	40001800 	.word	0x40001800
    5614:	00002a55 	.word	0x00002a55

00005618 <system_gclk_chan_set_config>:
{
    5618:	b570      	push	{r4, r5, r6, lr}
    561a:	0004      	movs	r4, r0
    561c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    561e:	4b05      	ldr	r3, [pc, #20]	; (5634 <system_gclk_chan_set_config+0x1c>)
    5620:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    5622:	782a      	ldrb	r2, [r5, #0]
    5624:	230f      	movs	r3, #15
    5626:	4013      	ands	r3, r2
    5628:	3420      	adds	r4, #32
    562a:	00a4      	lsls	r4, r4, #2
    562c:	4a02      	ldr	r2, [pc, #8]	; (5638 <system_gclk_chan_set_config+0x20>)
    562e:	50a3      	str	r3, [r4, r2]
}
    5630:	bd70      	pop	{r4, r5, r6, pc}
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	000055e1 	.word	0x000055e1
    5638:	40001800 	.word	0x40001800

0000563c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    563c:	b510      	push	{r4, lr}
    563e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5640:	4b06      	ldr	r3, [pc, #24]	; (565c <system_gclk_chan_get_hz+0x20>)
    5642:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    5644:	3420      	adds	r4, #32
    5646:	00a4      	lsls	r4, r4, #2
    5648:	4b05      	ldr	r3, [pc, #20]	; (5660 <system_gclk_chan_get_hz+0x24>)
    564a:	58e4      	ldr	r4, [r4, r3]
    564c:	0724      	lsls	r4, r4, #28
    564e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5650:	4b04      	ldr	r3, [pc, #16]	; (5664 <system_gclk_chan_get_hz+0x28>)
    5652:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5654:	0020      	movs	r0, r4
    5656:	4b04      	ldr	r3, [pc, #16]	; (5668 <system_gclk_chan_get_hz+0x2c>)
    5658:	4798      	blx	r3
}
    565a:	bd10      	pop	{r4, pc}
    565c:	00002a15 	.word	0x00002a15
    5660:	40001800 	.word	0x40001800
    5664:	00002a55 	.word	0x00002a55
    5668:	0000553d 	.word	0x0000553d

0000566c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    566c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    566e:	78d3      	ldrb	r3, [r2, #3]
    5670:	2b00      	cmp	r3, #0
    5672:	d135      	bne.n	56e0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5674:	7813      	ldrb	r3, [r2, #0]
    5676:	2b80      	cmp	r3, #128	; 0x80
    5678:	d029      	beq.n	56ce <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    567a:	061b      	lsls	r3, r3, #24
    567c:	2480      	movs	r4, #128	; 0x80
    567e:	0264      	lsls	r4, r4, #9
    5680:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5682:	7854      	ldrb	r4, [r2, #1]
    5684:	2502      	movs	r5, #2
    5686:	43ac      	bics	r4, r5
    5688:	d106      	bne.n	5698 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    568a:	7894      	ldrb	r4, [r2, #2]
    568c:	2c00      	cmp	r4, #0
    568e:	d120      	bne.n	56d2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5690:	2480      	movs	r4, #128	; 0x80
    5692:	02a4      	lsls	r4, r4, #10
    5694:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5696:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5698:	7854      	ldrb	r4, [r2, #1]
    569a:	3c01      	subs	r4, #1
    569c:	2c01      	cmp	r4, #1
    569e:	d91c      	bls.n	56da <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    56a0:	040d      	lsls	r5, r1, #16
    56a2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    56a4:	24a0      	movs	r4, #160	; 0xa0
    56a6:	05e4      	lsls	r4, r4, #23
    56a8:	432c      	orrs	r4, r5
    56aa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56ac:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    56ae:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    56b0:	24d0      	movs	r4, #208	; 0xd0
    56b2:	0624      	lsls	r4, r4, #24
    56b4:	432c      	orrs	r4, r5
    56b6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56b8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    56ba:	78d4      	ldrb	r4, [r2, #3]
    56bc:	2c00      	cmp	r4, #0
    56be:	d122      	bne.n	5706 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    56c0:	035b      	lsls	r3, r3, #13
    56c2:	d51c      	bpl.n	56fe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    56c4:	7893      	ldrb	r3, [r2, #2]
    56c6:	2b01      	cmp	r3, #1
    56c8:	d01e      	beq.n	5708 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    56ca:	6141      	str	r1, [r0, #20]
    56cc:	e017      	b.n	56fe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    56ce:	2300      	movs	r3, #0
    56d0:	e7d7      	b.n	5682 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    56d2:	24c0      	movs	r4, #192	; 0xc0
    56d4:	02e4      	lsls	r4, r4, #11
    56d6:	4323      	orrs	r3, r4
    56d8:	e7dd      	b.n	5696 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    56da:	4c0d      	ldr	r4, [pc, #52]	; (5710 <_system_pinmux_config+0xa4>)
    56dc:	4023      	ands	r3, r4
    56de:	e7df      	b.n	56a0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    56e0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    56e2:	040c      	lsls	r4, r1, #16
    56e4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    56e6:	23a0      	movs	r3, #160	; 0xa0
    56e8:	05db      	lsls	r3, r3, #23
    56ea:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56ec:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    56ee:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    56f0:	23d0      	movs	r3, #208	; 0xd0
    56f2:	061b      	lsls	r3, r3, #24
    56f4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56f6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    56f8:	78d3      	ldrb	r3, [r2, #3]
    56fa:	2b00      	cmp	r3, #0
    56fc:	d103      	bne.n	5706 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    56fe:	7853      	ldrb	r3, [r2, #1]
    5700:	3b01      	subs	r3, #1
    5702:	2b01      	cmp	r3, #1
    5704:	d902      	bls.n	570c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5706:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5708:	6181      	str	r1, [r0, #24]
    570a:	e7f8      	b.n	56fe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    570c:	6081      	str	r1, [r0, #8]
}
    570e:	e7fa      	b.n	5706 <_system_pinmux_config+0x9a>
    5710:	fffbffff 	.word	0xfffbffff

00005714 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5714:	b510      	push	{r4, lr}
    5716:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5718:	09c1      	lsrs	r1, r0, #7
		return NULL;
    571a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    571c:	2900      	cmp	r1, #0
    571e:	d104      	bne.n	572a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5720:	0943      	lsrs	r3, r0, #5
    5722:	01db      	lsls	r3, r3, #7
    5724:	4905      	ldr	r1, [pc, #20]	; (573c <system_pinmux_pin_set_config+0x28>)
    5726:	468c      	mov	ip, r1
    5728:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    572a:	241f      	movs	r4, #31
    572c:	4020      	ands	r0, r4
    572e:	2101      	movs	r1, #1
    5730:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5732:	0018      	movs	r0, r3
    5734:	4b02      	ldr	r3, [pc, #8]	; (5740 <system_pinmux_pin_set_config+0x2c>)
    5736:	4798      	blx	r3
}
    5738:	bd10      	pop	{r4, pc}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	40002800 	.word	0x40002800
    5740:	0000566d 	.word	0x0000566d

00005744 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5744:	4770      	bx	lr
	...

00005748 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5748:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    574a:	4b05      	ldr	r3, [pc, #20]	; (5760 <system_init+0x18>)
    574c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    574e:	4b05      	ldr	r3, [pc, #20]	; (5764 <system_init+0x1c>)
    5750:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5752:	4b05      	ldr	r3, [pc, #20]	; (5768 <system_init+0x20>)
    5754:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5756:	4b05      	ldr	r3, [pc, #20]	; (576c <system_init+0x24>)
    5758:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    575a:	4b05      	ldr	r3, [pc, #20]	; (5770 <system_init+0x28>)
    575c:	4798      	blx	r3
}
    575e:	bd10      	pop	{r4, pc}
    5760:	000051f9 	.word	0x000051f9
    5764:	00002a85 	.word	0x00002a85
    5768:	00005745 	.word	0x00005745
    576c:	00002e39 	.word	0x00002e39
    5770:	00005745 	.word	0x00005745

00005774 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5774:	1c93      	adds	r3, r2, #2
    5776:	009b      	lsls	r3, r3, #2
    5778:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    577a:	2a02      	cmp	r2, #2
    577c:	d009      	beq.n	5792 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    577e:	2a03      	cmp	r2, #3
    5780:	d00c      	beq.n	579c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    5782:	2301      	movs	r3, #1
    5784:	4093      	lsls	r3, r2
    5786:	001a      	movs	r2, r3
    5788:	7e03      	ldrb	r3, [r0, #24]
    578a:	4313      	orrs	r3, r2
    578c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    578e:	2000      	movs	r0, #0
    5790:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5792:	7e03      	ldrb	r3, [r0, #24]
    5794:	2210      	movs	r2, #16
    5796:	4313      	orrs	r3, r2
    5798:	7603      	strb	r3, [r0, #24]
    579a:	e7f8      	b.n	578e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    579c:	7e03      	ldrb	r3, [r0, #24]
    579e:	2220      	movs	r2, #32
    57a0:	4313      	orrs	r3, r2
    57a2:	7603      	strb	r3, [r0, #24]
    57a4:	e7f3      	b.n	578e <tc_register_callback+0x1a>
	...

000057a8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    57a8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    57aa:	0080      	lsls	r0, r0, #2
    57ac:	4b16      	ldr	r3, [pc, #88]	; (5808 <_tc_interrupt_handler+0x60>)
    57ae:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    57b0:	6823      	ldr	r3, [r4, #0]
    57b2:	7a9d      	ldrb	r5, [r3, #10]
    57b4:	7e22      	ldrb	r2, [r4, #24]
    57b6:	7e63      	ldrb	r3, [r4, #25]
    57b8:	4013      	ands	r3, r2
    57ba:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    57bc:	07eb      	lsls	r3, r5, #31
    57be:	d406      	bmi.n	57ce <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    57c0:	07ab      	lsls	r3, r5, #30
    57c2:	d40b      	bmi.n	57dc <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    57c4:	06eb      	lsls	r3, r5, #27
    57c6:	d410      	bmi.n	57ea <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    57c8:	06ab      	lsls	r3, r5, #26
    57ca:	d415      	bmi.n	57f8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    57cc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    57ce:	0020      	movs	r0, r4
    57d0:	68a3      	ldr	r3, [r4, #8]
    57d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    57d4:	2301      	movs	r3, #1
    57d6:	6822      	ldr	r2, [r4, #0]
    57d8:	7293      	strb	r3, [r2, #10]
    57da:	e7f1      	b.n	57c0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    57dc:	0020      	movs	r0, r4
    57de:	68e3      	ldr	r3, [r4, #12]
    57e0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    57e2:	2302      	movs	r3, #2
    57e4:	6822      	ldr	r2, [r4, #0]
    57e6:	7293      	strb	r3, [r2, #10]
    57e8:	e7ec      	b.n	57c4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    57ea:	0020      	movs	r0, r4
    57ec:	6923      	ldr	r3, [r4, #16]
    57ee:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    57f0:	2310      	movs	r3, #16
    57f2:	6822      	ldr	r2, [r4, #0]
    57f4:	7293      	strb	r3, [r2, #10]
    57f6:	e7e7      	b.n	57c8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    57f8:	0020      	movs	r0, r4
    57fa:	6963      	ldr	r3, [r4, #20]
    57fc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    57fe:	6823      	ldr	r3, [r4, #0]
    5800:	2220      	movs	r2, #32
    5802:	729a      	strb	r2, [r3, #10]
}
    5804:	e7e2      	b.n	57cc <_tc_interrupt_handler+0x24>
    5806:	46c0      	nop			; (mov r8, r8)
    5808:	20002090 	.word	0x20002090

0000580c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    580c:	b510      	push	{r4, lr}
    580e:	2000      	movs	r0, #0
    5810:	4b01      	ldr	r3, [pc, #4]	; (5818 <TC0_Handler+0xc>)
    5812:	4798      	blx	r3
    5814:	bd10      	pop	{r4, pc}
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	000057a9 	.word	0x000057a9

0000581c <TC1_Handler>:
    581c:	b510      	push	{r4, lr}
    581e:	2001      	movs	r0, #1
    5820:	4b01      	ldr	r3, [pc, #4]	; (5828 <TC1_Handler+0xc>)
    5822:	4798      	blx	r3
    5824:	bd10      	pop	{r4, pc}
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	000057a9 	.word	0x000057a9

0000582c <TC2_Handler>:
    582c:	b510      	push	{r4, lr}
    582e:	2002      	movs	r0, #2
    5830:	4b01      	ldr	r3, [pc, #4]	; (5838 <TC2_Handler+0xc>)
    5832:	4798      	blx	r3
    5834:	bd10      	pop	{r4, pc}
    5836:	46c0      	nop			; (mov r8, r8)
    5838:	000057a9 	.word	0x000057a9

0000583c <TC3_Handler>:
    583c:	b510      	push	{r4, lr}
    583e:	2003      	movs	r0, #3
    5840:	4b01      	ldr	r3, [pc, #4]	; (5848 <TC3_Handler+0xc>)
    5842:	4798      	blx	r3
    5844:	bd10      	pop	{r4, pc}
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	000057a9 	.word	0x000057a9

0000584c <TC4_Handler>:
    584c:	b510      	push	{r4, lr}
    584e:	2004      	movs	r0, #4
    5850:	4b01      	ldr	r3, [pc, #4]	; (5858 <TC4_Handler+0xc>)
    5852:	4798      	blx	r3
    5854:	bd10      	pop	{r4, pc}
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	000057a9 	.word	0x000057a9

0000585c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    585c:	b530      	push	{r4, r5, lr}
    585e:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5860:	a901      	add	r1, sp, #4
    5862:	4b0c      	ldr	r3, [pc, #48]	; (5894 <_tc_get_inst_index+0x38>)
    5864:	000a      	movs	r2, r1
    5866:	cb32      	ldmia	r3!, {r1, r4, r5}
    5868:	c232      	stmia	r2!, {r1, r4, r5}
    586a:	cb12      	ldmia	r3!, {r1, r4}
    586c:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    586e:	9b01      	ldr	r3, [sp, #4]
    5870:	4298      	cmp	r0, r3
    5872:	d00b      	beq.n	588c <_tc_get_inst_index+0x30>
    5874:	2301      	movs	r3, #1
    5876:	a901      	add	r1, sp, #4
    5878:	009a      	lsls	r2, r3, #2
    587a:	5852      	ldr	r2, [r2, r1]
    587c:	4282      	cmp	r2, r0
    587e:	d006      	beq.n	588e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5880:	3301      	adds	r3, #1
    5882:	2b05      	cmp	r3, #5
    5884:	d1f8      	bne.n	5878 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5886:	2000      	movs	r0, #0
}
    5888:	b007      	add	sp, #28
    588a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    588c:	2300      	movs	r3, #0
			return i;
    588e:	b2d8      	uxtb	r0, r3
    5890:	e7fa      	b.n	5888 <_tc_get_inst_index+0x2c>
    5892:	46c0      	nop			; (mov r8, r8)
    5894:	0001e330 	.word	0x0001e330

00005898 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5898:	b5f0      	push	{r4, r5, r6, r7, lr}
    589a:	46c6      	mov	lr, r8
    589c:	b500      	push	{lr}
    589e:	b08e      	sub	sp, #56	; 0x38
    58a0:	0004      	movs	r4, r0
    58a2:	000d      	movs	r5, r1
    58a4:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    58a6:	0008      	movs	r0, r1
    58a8:	4bae      	ldr	r3, [pc, #696]	; (5b64 <tc_init+0x2cc>)
    58aa:	4798      	blx	r3
    58ac:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    58ae:	ab0c      	add	r3, sp, #48	; 0x30
    58b0:	221b      	movs	r2, #27
    58b2:	701a      	strb	r2, [r3, #0]
    58b4:	705a      	strb	r2, [r3, #1]
    58b6:	3201      	adds	r2, #1
    58b8:	709a      	strb	r2, [r3, #2]
    58ba:	70da      	strb	r2, [r3, #3]
    58bc:	3201      	adds	r2, #1
    58be:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    58c0:	a902      	add	r1, sp, #8
    58c2:	4ba9      	ldr	r3, [pc, #676]	; (5b68 <tc_init+0x2d0>)
    58c4:	3314      	adds	r3, #20
    58c6:	000a      	movs	r2, r1
    58c8:	cb83      	ldmia	r3!, {r0, r1, r7}
    58ca:	c283      	stmia	r2!, {r0, r1, r7}
    58cc:	cb83      	ldmia	r3!, {r0, r1, r7}
    58ce:	c283      	stmia	r2!, {r0, r1, r7}
    58d0:	cb83      	ldmia	r3!, {r0, r1, r7}
    58d2:	c283      	stmia	r2!, {r0, r1, r7}
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    58d8:	2300      	movs	r3, #0
    58da:	60a3      	str	r3, [r4, #8]
    58dc:	60e3      	str	r3, [r4, #12]
    58de:	6123      	str	r3, [r4, #16]
    58e0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    58e2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    58e4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58e6:	4643      	mov	r3, r8
    58e8:	009a      	lsls	r2, r3, #2
    58ea:	4ba0      	ldr	r3, [pc, #640]	; (5b6c <tc_init+0x2d4>)
    58ec:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    58ee:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    58f0:	2334      	movs	r3, #52	; 0x34
    58f2:	5cf3      	ldrb	r3, [r6, r3]
    58f4:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    58f6:	78f3      	ldrb	r3, [r6, #3]
    58f8:	2b08      	cmp	r3, #8
    58fa:	d008      	beq.n	590e <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    58fc:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    58fe:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5900:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5902:	07db      	lsls	r3, r3, #31
    5904:	d508      	bpl.n	5918 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    5906:	b00e      	add	sp, #56	; 0x38
    5908:	bc04      	pop	{r2}
    590a:	4690      	mov	r8, r2
    590c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    590e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5910:	4642      	mov	r2, r8
    5912:	07d2      	lsls	r2, r2, #31
    5914:	d4f7      	bmi.n	5906 <tc_init+0x6e>
    5916:	e7f1      	b.n	58fc <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5918:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    591a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    591c:	079b      	lsls	r3, r3, #30
    591e:	d4f2      	bmi.n	5906 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5920:	682b      	ldr	r3, [r5, #0]
    5922:	079b      	lsls	r3, r3, #30
    5924:	d4ef      	bmi.n	5906 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    5926:	7c33      	ldrb	r3, [r6, #16]
    5928:	2b00      	cmp	r3, #0
    592a:	d112      	bne.n	5952 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    592c:	7f33      	ldrb	r3, [r6, #28]
    592e:	2b00      	cmp	r3, #0
    5930:	d11b      	bne.n	596a <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    5932:	4643      	mov	r3, r8
    5934:	005a      	lsls	r2, r3, #1
    5936:	a902      	add	r1, sp, #8
    5938:	1c53      	adds	r3, r2, #1
    593a:	009b      	lsls	r3, r3, #2
    593c:	5858      	ldr	r0, [r3, r1]
    593e:	4643      	mov	r3, r8
    5940:	00db      	lsls	r3, r3, #3
    5942:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    5944:	b2d9      	uxtb	r1, r3
    5946:	2904      	cmp	r1, #4
    5948:	d823      	bhi.n	5992 <tc_init+0xfa>
    594a:	008b      	lsls	r3, r1, #2
    594c:	4988      	ldr	r1, [pc, #544]	; (5b70 <tc_init+0x2d8>)
    594e:	58cb      	ldr	r3, [r1, r3]
    5950:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5952:	a901      	add	r1, sp, #4
    5954:	2301      	movs	r3, #1
    5956:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5958:	2200      	movs	r2, #0
    595a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    595c:	7e32      	ldrb	r2, [r6, #24]
    595e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5960:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5962:	7d30      	ldrb	r0, [r6, #20]
    5964:	4b83      	ldr	r3, [pc, #524]	; (5b74 <tc_init+0x2dc>)
    5966:	4798      	blx	r3
    5968:	e7e0      	b.n	592c <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    596a:	a901      	add	r1, sp, #4
    596c:	2301      	movs	r3, #1
    596e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5970:	2200      	movs	r2, #0
    5972:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5974:	3224      	adds	r2, #36	; 0x24
    5976:	18b2      	adds	r2, r6, r2
    5978:	7812      	ldrb	r2, [r2, #0]
    597a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    597c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    597e:	331f      	adds	r3, #31
    5980:	18f3      	adds	r3, r6, r3
    5982:	7818      	ldrb	r0, [r3, #0]
    5984:	4b7b      	ldr	r3, [pc, #492]	; (5b74 <tc_init+0x2dc>)
    5986:	4798      	blx	r3
    5988:	e7d3      	b.n	5932 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    598a:	497b      	ldr	r1, [pc, #492]	; (5b78 <tc_init+0x2e0>)
    598c:	694b      	ldr	r3, [r1, #20]
    598e:	4318      	orrs	r0, r3
    5990:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5992:	78f3      	ldrb	r3, [r6, #3]
    5994:	2b08      	cmp	r3, #8
    5996:	d100      	bne.n	599a <tc_init+0x102>
    5998:	e086      	b.n	5aa8 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    599a:	7833      	ldrb	r3, [r6, #0]
    599c:	466a      	mov	r2, sp
    599e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    59a0:	ab0c      	add	r3, sp, #48	; 0x30
    59a2:	4642      	mov	r2, r8
    59a4:	5c9f      	ldrb	r7, [r3, r2]
    59a6:	4669      	mov	r1, sp
    59a8:	0038      	movs	r0, r7
    59aa:	4b74      	ldr	r3, [pc, #464]	; (5b7c <tc_init+0x2e4>)
    59ac:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    59ae:	0038      	movs	r0, r7
    59b0:	4b73      	ldr	r3, [pc, #460]	; (5b80 <tc_init+0x2e8>)
    59b2:	4798      	blx	r3
			(uint32_t)config->counter_size |
    59b4:	78f3      	ldrb	r3, [r6, #3]
    59b6:	79f2      	ldrb	r2, [r6, #7]
    59b8:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    59ba:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    59bc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    59be:	7a72      	ldrb	r2, [r6, #9]
    59c0:	2a00      	cmp	r2, #0
    59c2:	d002      	beq.n	59ca <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    59c4:	2280      	movs	r2, #128	; 0x80
    59c6:	0252      	lsls	r2, r2, #9
    59c8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    59ca:	7ab2      	ldrb	r2, [r6, #10]
    59cc:	2a00      	cmp	r2, #0
    59ce:	d002      	beq.n	59d6 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    59d0:	2280      	movs	r2, #128	; 0x80
    59d2:	0292      	lsls	r2, r2, #10
    59d4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    59d6:	7af2      	ldrb	r2, [r6, #11]
    59d8:	2a00      	cmp	r2, #0
    59da:	d002      	beq.n	59e2 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    59dc:	2280      	movs	r2, #128	; 0x80
    59de:	0352      	lsls	r2, r2, #13
    59e0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    59e2:	7b32      	ldrb	r2, [r6, #12]
    59e4:	2a00      	cmp	r2, #0
    59e6:	d002      	beq.n	59ee <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    59e8:	2280      	movs	r2, #128	; 0x80
    59ea:	0392      	lsls	r2, r2, #14
    59ec:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    59ee:	7871      	ldrb	r1, [r6, #1]
    59f0:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    59f2:	78b2      	ldrb	r2, [r6, #2]
    59f4:	01d2      	lsls	r2, r2, #7
    59f6:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    59f8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    59fa:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    59fc:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    59fe:	2b00      	cmp	r3, #0
    5a00:	d1fc      	bne.n	59fc <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a02:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a06:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5a08:	2b00      	cmp	r3, #0
    5a0a:	d1fc      	bne.n	5a06 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    5a0c:	79b3      	ldrb	r3, [r6, #6]
    5a0e:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    5a10:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5a12:	1e4b      	subs	r3, r1, #1
    5a14:	4199      	sbcs	r1, r3
    5a16:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    5a18:	7bb3      	ldrb	r3, [r6, #14]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d001      	beq.n	5a22 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5a1e:	2301      	movs	r3, #1
    5a20:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a22:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a24:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5a26:	2b00      	cmp	r3, #0
    5a28:	d1fc      	bne.n	5a24 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5a2a:	33ff      	adds	r3, #255	; 0xff
    5a2c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    5a2e:	2900      	cmp	r1, #0
    5a30:	d004      	beq.n	5a3c <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a32:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a34:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    5a36:	2b00      	cmp	r3, #0
    5a38:	d1fc      	bne.n	5a34 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5a3a:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    5a3c:	7a33      	ldrb	r3, [r6, #8]
    5a3e:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a40:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a42:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5a44:	2b00      	cmp	r3, #0
    5a46:	d1fc      	bne.n	5a42 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    5a48:	7923      	ldrb	r3, [r4, #4]
    5a4a:	2b04      	cmp	r3, #4
    5a4c:	d059      	beq.n	5b02 <tc_init+0x26a>
    5a4e:	2b08      	cmp	r3, #8
    5a50:	d074      	beq.n	5b3c <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    5a52:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    5a54:	2b00      	cmp	r3, #0
    5a56:	d000      	beq.n	5a5a <tc_init+0x1c2>
    5a58:	e755      	b.n	5906 <tc_init+0x6e>
    5a5a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	d1fc      	bne.n	5a5a <tc_init+0x1c2>
				= config->counter_16_bit.value;
    5a60:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    5a62:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a64:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a66:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d1fc      	bne.n	5a66 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    5a6c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5a6e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5a72:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5a74:	2b00      	cmp	r3, #0
    5a76:	d1fc      	bne.n	5a72 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    5a78:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5a7a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    5a7c:	2000      	movs	r0, #0
    5a7e:	e742      	b.n	5906 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    5a80:	493d      	ldr	r1, [pc, #244]	; (5b78 <tc_init+0x2e0>)
    5a82:	698b      	ldr	r3, [r1, #24]
    5a84:	4318      	orrs	r0, r3
    5a86:	6188      	str	r0, [r1, #24]
    5a88:	e783      	b.n	5992 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    5a8a:	493b      	ldr	r1, [pc, #236]	; (5b78 <tc_init+0x2e0>)
    5a8c:	69cb      	ldr	r3, [r1, #28]
    5a8e:	4318      	orrs	r0, r3
    5a90:	61c8      	str	r0, [r1, #28]
    5a92:	e77e      	b.n	5992 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    5a94:	4938      	ldr	r1, [pc, #224]	; (5b78 <tc_init+0x2e0>)
    5a96:	6a0b      	ldr	r3, [r1, #32]
    5a98:	4318      	orrs	r0, r3
    5a9a:	6208      	str	r0, [r1, #32]
    5a9c:	e779      	b.n	5992 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    5a9e:	4b36      	ldr	r3, [pc, #216]	; (5b78 <tc_init+0x2e0>)
    5aa0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    5aa2:	4308      	orrs	r0, r1
    5aa4:	6258      	str	r0, [r3, #36]	; 0x24
    5aa6:	e774      	b.n	5992 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5aa8:	4643      	mov	r3, r8
    5aaa:	3301      	adds	r3, #1
    5aac:	2b04      	cmp	r3, #4
    5aae:	dd00      	ble.n	5ab2 <tc_init+0x21a>
    5ab0:	e773      	b.n	599a <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    5ab2:	ab02      	add	r3, sp, #8
    5ab4:	1cd1      	adds	r1, r2, #3
    5ab6:	0089      	lsls	r1, r1, #2
    5ab8:	58c9      	ldr	r1, [r1, r3]
    5aba:	3202      	adds	r2, #2
    5abc:	0092      	lsls	r2, r2, #2
    5abe:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    5ac0:	b2da      	uxtb	r2, r3
    5ac2:	2a04      	cmp	r2, #4
    5ac4:	d900      	bls.n	5ac8 <tc_init+0x230>
    5ac6:	e768      	b.n	599a <tc_init+0x102>
    5ac8:	0093      	lsls	r3, r2, #2
    5aca:	4a2e      	ldr	r2, [pc, #184]	; (5b84 <tc_init+0x2ec>)
    5acc:	58d3      	ldr	r3, [r2, r3]
    5ace:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    5ad0:	4a29      	ldr	r2, [pc, #164]	; (5b78 <tc_init+0x2e0>)
    5ad2:	6953      	ldr	r3, [r2, #20]
    5ad4:	4319      	orrs	r1, r3
    5ad6:	6151      	str	r1, [r2, #20]
    5ad8:	e75f      	b.n	599a <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    5ada:	4a27      	ldr	r2, [pc, #156]	; (5b78 <tc_init+0x2e0>)
    5adc:	6993      	ldr	r3, [r2, #24]
    5ade:	4319      	orrs	r1, r3
    5ae0:	6191      	str	r1, [r2, #24]
    5ae2:	e75a      	b.n	599a <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    5ae4:	4a24      	ldr	r2, [pc, #144]	; (5b78 <tc_init+0x2e0>)
    5ae6:	69d3      	ldr	r3, [r2, #28]
    5ae8:	4319      	orrs	r1, r3
    5aea:	61d1      	str	r1, [r2, #28]
    5aec:	e755      	b.n	599a <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    5aee:	4a22      	ldr	r2, [pc, #136]	; (5b78 <tc_init+0x2e0>)
    5af0:	6a13      	ldr	r3, [r2, #32]
    5af2:	4319      	orrs	r1, r3
    5af4:	6211      	str	r1, [r2, #32]
    5af6:	e750      	b.n	599a <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    5af8:	4b1f      	ldr	r3, [pc, #124]	; (5b78 <tc_init+0x2e0>)
    5afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5afc:	4311      	orrs	r1, r2
    5afe:	6259      	str	r1, [r3, #36]	; 0x24
    5b00:	e74b      	b.n	599a <tc_init+0x102>
    5b02:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b04:	2b00      	cmp	r3, #0
    5b06:	d1fc      	bne.n	5b02 <tc_init+0x26a>
					config->counter_8_bit.value;
    5b08:	3328      	adds	r3, #40	; 0x28
    5b0a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    5b0c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b0e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5b10:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b12:	2b00      	cmp	r3, #0
    5b14:	d1fc      	bne.n	5b10 <tc_init+0x278>
					config->counter_8_bit.period;
    5b16:	3329      	adds	r3, #41	; 0x29
    5b18:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    5b1a:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b1c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5b1e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b20:	2b00      	cmp	r3, #0
    5b22:	d1fc      	bne.n	5b1e <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    5b24:	332a      	adds	r3, #42	; 0x2a
    5b26:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    5b28:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b2a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5b2c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d1fc      	bne.n	5b2c <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    5b32:	332b      	adds	r3, #43	; 0x2b
    5b34:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    5b36:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    5b38:	2000      	movs	r0, #0
    5b3a:	e6e4      	b.n	5906 <tc_init+0x6e>
    5b3c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d1fc      	bne.n	5b3c <tc_init+0x2a4>
				= config->counter_32_bit.value;
    5b42:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5b44:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5b48:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d1fc      	bne.n	5b48 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    5b4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5b50:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5b54:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5b56:	2b00      	cmp	r3, #0
    5b58:	d1fc      	bne.n	5b54 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    5b5a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5b5c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    5b5e:	2000      	movs	r0, #0
    5b60:	e6d1      	b.n	5906 <tc_init+0x6e>
    5b62:	46c0      	nop			; (mov r8, r8)
    5b64:	0000585d 	.word	0x0000585d
    5b68:	0001e330 	.word	0x0001e330
    5b6c:	20002090 	.word	0x20002090
    5b70:	0001e308 	.word	0x0001e308
    5b74:	00005715 	.word	0x00005715
    5b78:	40000400 	.word	0x40000400
    5b7c:	00005619 	.word	0x00005619
    5b80:	000055a9 	.word	0x000055a9
    5b84:	0001e31c 	.word	0x0001e31c

00005b88 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b88:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5b8a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d1fc      	bne.n	5b8a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    5b90:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5b92:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5b94:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    5b96:	2b00      	cmp	r3, #0
    5b98:	d1fc      	bne.n	5b94 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    5b9a:	3380      	adds	r3, #128	; 0x80
    5b9c:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5b9e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5ba0:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d1fc      	bne.n	5ba0 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5ba6:	7903      	ldrb	r3, [r0, #4]
    5ba8:	2b04      	cmp	r3, #4
    5baa:	d005      	beq.n	5bb8 <tc_get_count_value+0x30>
    5bac:	2b08      	cmp	r3, #8
    5bae:	d009      	beq.n	5bc4 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    5bb0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d003      	beq.n	5bbe <tc_get_count_value+0x36>
}
    5bb6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5bb8:	7d10      	ldrb	r0, [r2, #20]
    5bba:	b2c0      	uxtb	r0, r0
    5bbc:	e7fb      	b.n	5bb6 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5bbe:	8a90      	ldrh	r0, [r2, #20]
    5bc0:	b280      	uxth	r0, r0
    5bc2:	e7f8      	b.n	5bb6 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    5bc4:	6950      	ldr	r0, [r2, #20]
    5bc6:	e7f6      	b.n	5bb6 <tc_get_count_value+0x2e>

00005bc8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    5bc8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5bca:	6804      	ldr	r4, [r0, #0]
    5bcc:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d1fc      	bne.n	5bcc <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    5bd2:	7903      	ldrb	r3, [r0, #4]
    5bd4:	2b04      	cmp	r3, #4
    5bd6:	d006      	beq.n	5be6 <tc_set_compare_value+0x1e>
    5bd8:	2b08      	cmp	r3, #8
    5bda:	d028      	beq.n	5c2e <tc_set_compare_value+0x66>
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d013      	beq.n	5c08 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    5be0:	2317      	movs	r3, #23
}
    5be2:	0018      	movs	r0, r3
    5be4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    5be6:	2317      	movs	r3, #23
			if (channel_index <
    5be8:	2901      	cmp	r1, #1
    5bea:	d8fa      	bhi.n	5be2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5bec:	7e83      	ldrb	r3, [r0, #26]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d005      	beq.n	5bfe <tc_set_compare_value+0x36>
							(uint8_t)compare;
    5bf2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    5bf4:	1861      	adds	r1, r4, r1
    5bf6:	3130      	adds	r1, #48	; 0x30
    5bf8:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    5bfa:	2300      	movs	r3, #0
    5bfc:	e7f1      	b.n	5be2 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    5bfe:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    5c00:	1864      	adds	r4, r4, r1
    5c02:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    5c04:	2300      	movs	r3, #0
    5c06:	e7ec      	b.n	5be2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    5c08:	2317      	movs	r3, #23
			if (channel_index <
    5c0a:	2901      	cmp	r1, #1
    5c0c:	d8e9      	bhi.n	5be2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5c0e:	7e83      	ldrb	r3, [r0, #26]
    5c10:	2b00      	cmp	r3, #0
    5c12:	d005      	beq.n	5c20 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    5c14:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    5c16:	3118      	adds	r1, #24
    5c18:	0049      	lsls	r1, r1, #1
    5c1a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    5c1c:	2300      	movs	r3, #0
    5c1e:	e7e0      	b.n	5be2 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    5c20:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    5c22:	310c      	adds	r1, #12
    5c24:	0049      	lsls	r1, r1, #1
    5c26:	1864      	adds	r4, r4, r1
    5c28:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    5c2a:	2300      	movs	r3, #0
    5c2c:	e7d9      	b.n	5be2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    5c2e:	2317      	movs	r3, #23
			if (channel_index <
    5c30:	2901      	cmp	r1, #1
    5c32:	d8d6      	bhi.n	5be2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5c34:	7e83      	ldrb	r3, [r0, #26]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d105      	bne.n	5c46 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    5c3a:	3106      	adds	r1, #6
    5c3c:	0089      	lsls	r1, r1, #2
    5c3e:	1864      	adds	r4, r4, r1
    5c40:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    5c42:	2300      	movs	r3, #0
    5c44:	e7cd      	b.n	5be2 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    5c46:	310c      	adds	r1, #12
    5c48:	0089      	lsls	r1, r1, #2
    5c4a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    5c4c:	2300      	movs	r3, #0
    5c4e:	e7c8      	b.n	5be2 <tc_set_compare_value+0x1a>

00005c50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5c50:	e7fe      	b.n	5c50 <Dummy_Handler>
	...

00005c54 <Reset_Handler>:
{
    5c54:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    5c56:	4a1a      	ldr	r2, [pc, #104]	; (5cc0 <Reset_Handler+0x6c>)
    5c58:	4b1a      	ldr	r3, [pc, #104]	; (5cc4 <Reset_Handler+0x70>)
    5c5a:	429a      	cmp	r2, r3
    5c5c:	d011      	beq.n	5c82 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5c5e:	001a      	movs	r2, r3
    5c60:	4b19      	ldr	r3, [pc, #100]	; (5cc8 <Reset_Handler+0x74>)
    5c62:	429a      	cmp	r2, r3
    5c64:	d20d      	bcs.n	5c82 <Reset_Handler+0x2e>
    5c66:	4a19      	ldr	r2, [pc, #100]	; (5ccc <Reset_Handler+0x78>)
    5c68:	3303      	adds	r3, #3
    5c6a:	1a9b      	subs	r3, r3, r2
    5c6c:	089b      	lsrs	r3, r3, #2
    5c6e:	3301      	adds	r3, #1
    5c70:	009b      	lsls	r3, r3, #2
    5c72:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5c74:	4813      	ldr	r0, [pc, #76]	; (5cc4 <Reset_Handler+0x70>)
    5c76:	4912      	ldr	r1, [pc, #72]	; (5cc0 <Reset_Handler+0x6c>)
    5c78:	588c      	ldr	r4, [r1, r2]
    5c7a:	5084      	str	r4, [r0, r2]
    5c7c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5c7e:	429a      	cmp	r2, r3
    5c80:	d1fa      	bne.n	5c78 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5c82:	4a13      	ldr	r2, [pc, #76]	; (5cd0 <Reset_Handler+0x7c>)
    5c84:	4b13      	ldr	r3, [pc, #76]	; (5cd4 <Reset_Handler+0x80>)
    5c86:	429a      	cmp	r2, r3
    5c88:	d20a      	bcs.n	5ca0 <Reset_Handler+0x4c>
    5c8a:	43d3      	mvns	r3, r2
    5c8c:	4911      	ldr	r1, [pc, #68]	; (5cd4 <Reset_Handler+0x80>)
    5c8e:	185b      	adds	r3, r3, r1
    5c90:	2103      	movs	r1, #3
    5c92:	438b      	bics	r3, r1
    5c94:	3304      	adds	r3, #4
    5c96:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5c98:	2100      	movs	r1, #0
    5c9a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5c9c:	4293      	cmp	r3, r2
    5c9e:	d1fc      	bne.n	5c9a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5ca0:	4a0d      	ldr	r2, [pc, #52]	; (5cd8 <Reset_Handler+0x84>)
    5ca2:	21ff      	movs	r1, #255	; 0xff
    5ca4:	4b0d      	ldr	r3, [pc, #52]	; (5cdc <Reset_Handler+0x88>)
    5ca6:	438b      	bics	r3, r1
    5ca8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5caa:	4a0d      	ldr	r2, [pc, #52]	; (5ce0 <Reset_Handler+0x8c>)
    5cac:	6853      	ldr	r3, [r2, #4]
    5cae:	397f      	subs	r1, #127	; 0x7f
    5cb0:	430b      	orrs	r3, r1
    5cb2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5cb4:	4b0b      	ldr	r3, [pc, #44]	; (5ce4 <Reset_Handler+0x90>)
    5cb6:	4798      	blx	r3
        main();
    5cb8:	4b0b      	ldr	r3, [pc, #44]	; (5ce8 <Reset_Handler+0x94>)
    5cba:	4798      	blx	r3
    5cbc:	e7fe      	b.n	5cbc <Reset_Handler+0x68>
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	0001f0a0 	.word	0x0001f0a0
    5cc4:	20000000 	.word	0x20000000
    5cc8:	200009c8 	.word	0x200009c8
    5ccc:	20000004 	.word	0x20000004
    5cd0:	200009c8 	.word	0x200009c8
    5cd4:	20003074 	.word	0x20003074
    5cd8:	e000ed00 	.word	0xe000ed00
    5cdc:	00000000 	.word	0x00000000
    5ce0:	41004000 	.word	0x41004000
    5ce4:	00017fe9 	.word	0x00017fe9
    5ce8:	0000e1f1 	.word	0x0000e1f1

00005cec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cee:	46c6      	mov	lr, r8
    5cf0:	b500      	push	{lr}
    5cf2:	000c      	movs	r4, r1
    5cf4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5cf6:	2800      	cmp	r0, #0
    5cf8:	d10f      	bne.n	5d1a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    5cfa:	2a00      	cmp	r2, #0
    5cfc:	dd11      	ble.n	5d22 <_read+0x36>
    5cfe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5d00:	4e09      	ldr	r6, [pc, #36]	; (5d28 <_read+0x3c>)
    5d02:	4d0a      	ldr	r5, [pc, #40]	; (5d2c <_read+0x40>)
    5d04:	6830      	ldr	r0, [r6, #0]
    5d06:	0021      	movs	r1, r4
    5d08:	682b      	ldr	r3, [r5, #0]
    5d0a:	4798      	blx	r3
		ptr++;
    5d0c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    5d0e:	42bc      	cmp	r4, r7
    5d10:	d1f8      	bne.n	5d04 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    5d12:	4640      	mov	r0, r8
    5d14:	bc04      	pop	{r2}
    5d16:	4690      	mov	r8, r2
    5d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    5d1a:	2301      	movs	r3, #1
    5d1c:	425b      	negs	r3, r3
    5d1e:	4698      	mov	r8, r3
    5d20:	e7f7      	b.n	5d12 <_read+0x26>
	for (; len > 0; --len) {
    5d22:	4680      	mov	r8, r0
    5d24:	e7f5      	b.n	5d12 <_read+0x26>
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	200020ac 	.word	0x200020ac
    5d2c:	200020a4 	.word	0x200020a4

00005d30 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d32:	46c6      	mov	lr, r8
    5d34:	b500      	push	{lr}
    5d36:	000e      	movs	r6, r1
    5d38:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5d3a:	3801      	subs	r0, #1
    5d3c:	2802      	cmp	r0, #2
    5d3e:	d810      	bhi.n	5d62 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5d40:	2a00      	cmp	r2, #0
    5d42:	d011      	beq.n	5d68 <_write+0x38>
    5d44:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5d46:	4b0c      	ldr	r3, [pc, #48]	; (5d78 <_write+0x48>)
    5d48:	4698      	mov	r8, r3
    5d4a:	4f0c      	ldr	r7, [pc, #48]	; (5d7c <_write+0x4c>)
    5d4c:	4643      	mov	r3, r8
    5d4e:	6818      	ldr	r0, [r3, #0]
    5d50:	5d31      	ldrb	r1, [r6, r4]
    5d52:	683b      	ldr	r3, [r7, #0]
    5d54:	4798      	blx	r3
    5d56:	2800      	cmp	r0, #0
    5d58:	db08      	blt.n	5d6c <_write+0x3c>
			return -1;
		}
		++nChars;
    5d5a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    5d5c:	42a5      	cmp	r5, r4
    5d5e:	d1f5      	bne.n	5d4c <_write+0x1c>
    5d60:	e006      	b.n	5d70 <_write+0x40>
		return -1;
    5d62:	2401      	movs	r4, #1
    5d64:	4264      	negs	r4, r4
    5d66:	e003      	b.n	5d70 <_write+0x40>
	for (; len != 0; --len) {
    5d68:	0014      	movs	r4, r2
    5d6a:	e001      	b.n	5d70 <_write+0x40>
			return -1;
    5d6c:	2401      	movs	r4, #1
    5d6e:	4264      	negs	r4, r4
	}
	return nChars;
}
    5d70:	0020      	movs	r0, r4
    5d72:	bc04      	pop	{r2}
    5d74:	4690      	mov	r8, r2
    5d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d78:	200020ac 	.word	0x200020ac
    5d7c:	200020a8 	.word	0x200020a8

00005d80 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5d80:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5d82:	4a06      	ldr	r2, [pc, #24]	; (5d9c <_sbrk+0x1c>)
    5d84:	6812      	ldr	r2, [r2, #0]
    5d86:	2a00      	cmp	r2, #0
    5d88:	d004      	beq.n	5d94 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5d8a:	4a04      	ldr	r2, [pc, #16]	; (5d9c <_sbrk+0x1c>)
    5d8c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5d8e:	18c3      	adds	r3, r0, r3
    5d90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5d92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5d94:	4902      	ldr	r1, [pc, #8]	; (5da0 <_sbrk+0x20>)
    5d96:	4a01      	ldr	r2, [pc, #4]	; (5d9c <_sbrk+0x1c>)
    5d98:	6011      	str	r1, [r2, #0]
    5d9a:	e7f6      	b.n	5d8a <_sbrk+0xa>
    5d9c:	20000a2c 	.word	0x20000a2c
    5da0:	20005078 	.word	0x20005078

00005da4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5da4:	2001      	movs	r0, #1
    5da6:	4240      	negs	r0, r0
    5da8:	4770      	bx	lr

00005daa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5daa:	2380      	movs	r3, #128	; 0x80
    5dac:	019b      	lsls	r3, r3, #6
    5dae:	604b      	str	r3, [r1, #4]

	return 0;
}
    5db0:	2000      	movs	r0, #0
    5db2:	4770      	bx	lr

00005db4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5db4:	2001      	movs	r0, #1
    5db6:	4770      	bx	lr

00005db8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5db8:	2000      	movs	r0, #0
    5dba:	4770      	bx	lr

00005dbc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5dbc:	b570      	push	{r4, r5, r6, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	0005      	movs	r5, r0
    5dc2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5dc4:	2200      	movs	r2, #0
    5dc6:	466b      	mov	r3, sp
    5dc8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5dca:	4c06      	ldr	r4, [pc, #24]	; (5de4 <usart_serial_getchar+0x28>)
    5dcc:	466b      	mov	r3, sp
    5dce:	1d99      	adds	r1, r3, #6
    5dd0:	0028      	movs	r0, r5
    5dd2:	47a0      	blx	r4
    5dd4:	2800      	cmp	r0, #0
    5dd6:	d1f9      	bne.n	5dcc <usart_serial_getchar+0x10>

	*c = temp;
    5dd8:	466b      	mov	r3, sp
    5dda:	3306      	adds	r3, #6
    5ddc:	881b      	ldrh	r3, [r3, #0]
    5dde:	7033      	strb	r3, [r6, #0]
}
    5de0:	b002      	add	sp, #8
    5de2:	bd70      	pop	{r4, r5, r6, pc}
    5de4:	00004b7f 	.word	0x00004b7f

00005de8 <usart_serial_putchar>:
{
    5de8:	b570      	push	{r4, r5, r6, lr}
    5dea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5dec:	b28c      	uxth	r4, r1
    5dee:	4e03      	ldr	r6, [pc, #12]	; (5dfc <usart_serial_putchar+0x14>)
    5df0:	0021      	movs	r1, r4
    5df2:	0028      	movs	r0, r5
    5df4:	47b0      	blx	r6
    5df6:	2800      	cmp	r0, #0
    5df8:	d1fa      	bne.n	5df0 <usart_serial_putchar+0x8>
}
    5dfa:	bd70      	pop	{r4, r5, r6, pc}
    5dfc:	00004b59 	.word	0x00004b59

00005e00 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    5e00:	b510      	push	{r4, lr}
    5e02:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    5e04:	466b      	mov	r3, sp
    5e06:	1ddc      	adds	r4, r3, #7
    5e08:	2201      	movs	r2, #1
    5e0a:	0021      	movs	r1, r4
    5e0c:	480f      	ldr	r0, [pc, #60]	; (5e4c <USART_HOST_ISR_VECT+0x4c>)
    5e0e:	4b10      	ldr	r3, [pc, #64]	; (5e50 <USART_HOST_ISR_VECT+0x50>)
    5e10:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    5e12:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    5e14:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    5e18:	2200      	movs	r2, #0
    5e1a:	4b0e      	ldr	r3, [pc, #56]	; (5e54 <USART_HOST_ISR_VECT+0x54>)
    5e1c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    5e1e:	4b0e      	ldr	r3, [pc, #56]	; (5e58 <USART_HOST_ISR_VECT+0x58>)
    5e20:	781b      	ldrb	r3, [r3, #0]
    5e22:	7821      	ldrb	r1, [r4, #0]
    5e24:	4a0d      	ldr	r2, [pc, #52]	; (5e5c <USART_HOST_ISR_VECT+0x5c>)
    5e26:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    5e28:	2b7f      	cmp	r3, #127	; 0x7f
    5e2a:	d00a      	beq.n	5e42 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    5e2c:	3301      	adds	r3, #1
    5e2e:	4a0a      	ldr	r2, [pc, #40]	; (5e58 <USART_HOST_ISR_VECT+0x58>)
    5e30:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    5e32:	2201      	movs	r2, #1
    5e34:	4b07      	ldr	r3, [pc, #28]	; (5e54 <USART_HOST_ISR_VECT+0x54>)
    5e36:	701a      	strb	r2, [r3, #0]
    5e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5e3c:	b662      	cpsie	i
}
    5e3e:	b002      	add	sp, #8
    5e40:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    5e42:	2200      	movs	r2, #0
    5e44:	4b04      	ldr	r3, [pc, #16]	; (5e58 <USART_HOST_ISR_VECT+0x58>)
    5e46:	701a      	strb	r2, [r3, #0]
    5e48:	e7f3      	b.n	5e32 <USART_HOST_ISR_VECT+0x32>
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	20000a30 	.word	0x20000a30
    5e50:	00004ca5 	.word	0x00004ca5
    5e54:	20000014 	.word	0x20000014
    5e58:	20000ae5 	.word	0x20000ae5
    5e5c:	20000a64 	.word	0x20000a64

00005e60 <sio2host_init>:
{
    5e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e62:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5e64:	2380      	movs	r3, #128	; 0x80
    5e66:	05db      	lsls	r3, r3, #23
    5e68:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5e6a:	2300      	movs	r3, #0
    5e6c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    5e6e:	22ff      	movs	r2, #255	; 0xff
    5e70:	4669      	mov	r1, sp
    5e72:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5e74:	2200      	movs	r2, #0
    5e76:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5e78:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5e7a:	2401      	movs	r4, #1
    5e7c:	2124      	movs	r1, #36	; 0x24
    5e7e:	4668      	mov	r0, sp
    5e80:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    5e82:	3101      	adds	r1, #1
    5e84:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    5e86:	3101      	adds	r1, #1
    5e88:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    5e8a:	3101      	adds	r1, #1
    5e8c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    5e8e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5e90:	3105      	adds	r1, #5
    5e92:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5e94:	3101      	adds	r1, #1
    5e96:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5e98:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5e9a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5e9c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5e9e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5ea0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5ea2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    5ea4:	2313      	movs	r3, #19
    5ea6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5ea8:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    5eaa:	2380      	movs	r3, #128	; 0x80
    5eac:	035b      	lsls	r3, r3, #13
    5eae:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    5eb0:	4b2f      	ldr	r3, [pc, #188]	; (5f70 <sio2host_init+0x110>)
    5eb2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    5eb4:	4b2f      	ldr	r3, [pc, #188]	; (5f74 <sio2host_init+0x114>)
    5eb6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    5eb8:	2301      	movs	r3, #1
    5eba:	425b      	negs	r3, r3
    5ebc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    5ebe:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    5ec0:	23e1      	movs	r3, #225	; 0xe1
    5ec2:	025b      	lsls	r3, r3, #9
    5ec4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5ec6:	4d2c      	ldr	r5, [pc, #176]	; (5f78 <sio2host_init+0x118>)
    5ec8:	4b2c      	ldr	r3, [pc, #176]	; (5f7c <sio2host_init+0x11c>)
    5eca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5ecc:	4a2c      	ldr	r2, [pc, #176]	; (5f80 <sio2host_init+0x120>)
    5ece:	4b2d      	ldr	r3, [pc, #180]	; (5f84 <sio2host_init+0x124>)
    5ed0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5ed2:	4a2d      	ldr	r2, [pc, #180]	; (5f88 <sio2host_init+0x128>)
    5ed4:	4b2d      	ldr	r3, [pc, #180]	; (5f8c <sio2host_init+0x12c>)
    5ed6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5ed8:	466a      	mov	r2, sp
    5eda:	2184      	movs	r1, #132	; 0x84
    5edc:	05c9      	lsls	r1, r1, #23
    5ede:	0028      	movs	r0, r5
    5ee0:	4b2b      	ldr	r3, [pc, #172]	; (5f90 <sio2host_init+0x130>)
    5ee2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5ee4:	4f2b      	ldr	r7, [pc, #172]	; (5f94 <sio2host_init+0x134>)
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	6898      	ldr	r0, [r3, #8]
    5eea:	2100      	movs	r1, #0
    5eec:	4e2a      	ldr	r6, [pc, #168]	; (5f98 <sio2host_init+0x138>)
    5eee:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	6858      	ldr	r0, [r3, #4]
    5ef4:	2100      	movs	r1, #0
    5ef6:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ef8:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5efa:	0030      	movs	r0, r6
    5efc:	4b27      	ldr	r3, [pc, #156]	; (5f9c <sio2host_init+0x13c>)
    5efe:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f00:	231f      	movs	r3, #31
    5f02:	4018      	ands	r0, r3
    5f04:	4084      	lsls	r4, r0
    5f06:	4b26      	ldr	r3, [pc, #152]	; (5fa0 <sio2host_init+0x140>)
    5f08:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f0a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f0c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d1fc      	bne.n	5f0c <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5f12:	6833      	ldr	r3, [r6, #0]
    5f14:	2202      	movs	r2, #2
    5f16:	4313      	orrs	r3, r2
    5f18:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f1a:	4b17      	ldr	r3, [pc, #92]	; (5f78 <sio2host_init+0x118>)
    5f1c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f1e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f20:	2a00      	cmp	r2, #0
    5f22:	d1fc      	bne.n	5f1e <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    5f24:	6859      	ldr	r1, [r3, #4]
    5f26:	2280      	movs	r2, #128	; 0x80
    5f28:	0252      	lsls	r2, r2, #9
    5f2a:	430a      	orrs	r2, r1
    5f2c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    5f2e:	2101      	movs	r1, #1
    5f30:	4a11      	ldr	r2, [pc, #68]	; (5f78 <sio2host_init+0x118>)
    5f32:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    5f34:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f36:	2a00      	cmp	r2, #0
    5f38:	d1fc      	bne.n	5f34 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    5f3a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f3c:	2a00      	cmp	r2, #0
    5f3e:	d1fc      	bne.n	5f3a <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    5f40:	6859      	ldr	r1, [r3, #4]
    5f42:	2280      	movs	r2, #128	; 0x80
    5f44:	0292      	lsls	r2, r2, #10
    5f46:	430a      	orrs	r2, r1
    5f48:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    5f4a:	2101      	movs	r1, #1
    5f4c:	4a0a      	ldr	r2, [pc, #40]	; (5f78 <sio2host_init+0x118>)
    5f4e:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    5f50:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f52:	2a00      	cmp	r2, #0
    5f54:	d1fc      	bne.n	5f50 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    5f56:	4913      	ldr	r1, [pc, #76]	; (5fa4 <sio2host_init+0x144>)
    5f58:	2000      	movs	r0, #0
    5f5a:	4b13      	ldr	r3, [pc, #76]	; (5fa8 <sio2host_init+0x148>)
    5f5c:	4798      	blx	r3
    5f5e:	2204      	movs	r2, #4
    5f60:	2384      	movs	r3, #132	; 0x84
    5f62:	05db      	lsls	r3, r3, #23
    5f64:	759a      	strb	r2, [r3, #22]
    5f66:	32fc      	adds	r2, #252	; 0xfc
    5f68:	4b0d      	ldr	r3, [pc, #52]	; (5fa0 <sio2host_init+0x140>)
    5f6a:	601a      	str	r2, [r3, #0]
}
    5f6c:	b011      	add	sp, #68	; 0x44
    5f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f70:	00040003 	.word	0x00040003
    5f74:	00050003 	.word	0x00050003
    5f78:	20000a30 	.word	0x20000a30
    5f7c:	200020ac 	.word	0x200020ac
    5f80:	00005de9 	.word	0x00005de9
    5f84:	200020a8 	.word	0x200020a8
    5f88:	00005dbd 	.word	0x00005dbd
    5f8c:	200020a4 	.word	0x200020a4
    5f90:	000047f5 	.word	0x000047f5
    5f94:	2000001c 	.word	0x2000001c
    5f98:	00018971 	.word	0x00018971
    5f9c:	00004395 	.word	0x00004395
    5fa0:	e000e100 	.word	0xe000e100
    5fa4:	00005e01 	.word	0x00005e01
    5fa8:	00004359 	.word	0x00004359

00005fac <sio2host_deinit>:
{
    5fac:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fae:	4d15      	ldr	r5, [pc, #84]	; (6004 <sio2host_deinit+0x58>)
    5fb0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5fb2:	0020      	movs	r0, r4
    5fb4:	4b14      	ldr	r3, [pc, #80]	; (6008 <sio2host_deinit+0x5c>)
    5fb6:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5fb8:	231f      	movs	r3, #31
    5fba:	4018      	ands	r0, r3
    5fbc:	3b1e      	subs	r3, #30
    5fbe:	4083      	lsls	r3, r0
    5fc0:	2280      	movs	r2, #128	; 0x80
    5fc2:	4912      	ldr	r1, [pc, #72]	; (600c <sio2host_deinit+0x60>)
    5fc4:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fc6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5fc8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d1fc      	bne.n	5fc8 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    5fce:	6823      	ldr	r3, [r4, #0]
    5fd0:	2202      	movs	r2, #2
    5fd2:	4393      	bics	r3, r2
    5fd4:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fd6:	4b0b      	ldr	r3, [pc, #44]	; (6004 <sio2host_deinit+0x58>)
    5fd8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    5fda:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5fdc:	2a00      	cmp	r2, #0
    5fde:	d1fc      	bne.n	5fda <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    5fe0:	685a      	ldr	r2, [r3, #4]
    5fe2:	490b      	ldr	r1, [pc, #44]	; (6010 <sio2host_deinit+0x64>)
    5fe4:	400a      	ands	r2, r1
    5fe6:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    5fe8:	2100      	movs	r1, #0
    5fea:	4a06      	ldr	r2, [pc, #24]	; (6004 <sio2host_deinit+0x58>)
    5fec:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    5fee:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5ff0:	2a00      	cmp	r2, #0
    5ff2:	d1fc      	bne.n	5fee <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    5ff4:	685a      	ldr	r2, [r3, #4]
    5ff6:	4907      	ldr	r1, [pc, #28]	; (6014 <sio2host_deinit+0x68>)
    5ff8:	400a      	ands	r2, r1
    5ffa:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    5ffc:	2200      	movs	r2, #0
    5ffe:	4b01      	ldr	r3, [pc, #4]	; (6004 <sio2host_deinit+0x58>)
    6000:	719a      	strb	r2, [r3, #6]
}
    6002:	bd70      	pop	{r4, r5, r6, pc}
    6004:	20000a30 	.word	0x20000a30
    6008:	00004395 	.word	0x00004395
    600c:	e000e100 	.word	0xe000e100
    6010:	fffeffff 	.word	0xfffeffff
    6014:	fffdffff 	.word	0xfffdffff

00006018 <sio2host_tx>:
{
    6018:	b5f0      	push	{r4, r5, r6, r7, lr}
    601a:	b083      	sub	sp, #12
    601c:	0006      	movs	r6, r0
    601e:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    6020:	466b      	mov	r3, sp
    6022:	889d      	ldrh	r5, [r3, #4]
    6024:	4c05      	ldr	r4, [pc, #20]	; (603c <sio2host_tx+0x24>)
    6026:	4f06      	ldr	r7, [pc, #24]	; (6040 <sio2host_tx+0x28>)
    6028:	002a      	movs	r2, r5
    602a:	0031      	movs	r1, r6
    602c:	0020      	movs	r0, r4
    602e:	47b8      	blx	r7
	} while (status != STATUS_OK);
    6030:	2800      	cmp	r0, #0
    6032:	d1f9      	bne.n	6028 <sio2host_tx+0x10>
}
    6034:	9801      	ldr	r0, [sp, #4]
    6036:	b003      	add	sp, #12
    6038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    603a:	46c0      	nop			; (mov r8, r8)
    603c:	20000a30 	.word	0x20000a30
    6040:	00004be9 	.word	0x00004be9

00006044 <sio2host_rx>:
{
    6044:	b570      	push	{r4, r5, r6, lr}
    6046:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    6048:	4b1f      	ldr	r3, [pc, #124]	; (60c8 <sio2host_rx+0x84>)
    604a:	781c      	ldrb	r4, [r3, #0]
    604c:	4b1f      	ldr	r3, [pc, #124]	; (60cc <sio2host_rx+0x88>)
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	429c      	cmp	r4, r3
    6052:	d319      	bcc.n	6088 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    6054:	1ae3      	subs	r3, r4, r3
    6056:	481e      	ldr	r0, [pc, #120]	; (60d0 <sio2host_rx+0x8c>)
    6058:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    605a:	4b1d      	ldr	r3, [pc, #116]	; (60d0 <sio2host_rx+0x8c>)
    605c:	7818      	ldrb	r0, [r3, #0]
    605e:	2800      	cmp	r0, #0
    6060:	d031      	beq.n	60c6 <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    6062:	b243      	sxtb	r3, r0
    6064:	2b00      	cmp	r3, #0
    6066:	db15      	blt.n	6094 <sio2host_rx+0x50>
    6068:	1c03      	adds	r3, r0, #0
    606a:	4288      	cmp	r0, r1
    606c:	d900      	bls.n	6070 <sio2host_rx+0x2c>
    606e:	1c0b      	adds	r3, r1, #0
    6070:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    6072:	2800      	cmp	r0, #0
    6074:	d027      	beq.n	60c6 <sio2host_rx+0x82>
    6076:	4b15      	ldr	r3, [pc, #84]	; (60cc <sio2host_rx+0x88>)
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	1e44      	subs	r4, r0, #1
    607c:	b2e4      	uxtb	r4, r4
    607e:	3401      	adds	r4, #1
    6080:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    6082:	4d14      	ldr	r5, [pc, #80]	; (60d4 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    6084:	2600      	movs	r6, #0
    6086:	e014      	b.n	60b2 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    6088:	0020      	movs	r0, r4
    608a:	3880      	subs	r0, #128	; 0x80
    608c:	1ac3      	subs	r3, r0, r3
    608e:	4810      	ldr	r0, [pc, #64]	; (60d0 <sio2host_rx+0x8c>)
    6090:	7003      	strb	r3, [r0, #0]
    6092:	e7e2      	b.n	605a <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    6094:	4b0d      	ldr	r3, [pc, #52]	; (60cc <sio2host_rx+0x88>)
    6096:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    6098:	2080      	movs	r0, #128	; 0x80
    609a:	4b0d      	ldr	r3, [pc, #52]	; (60d0 <sio2host_rx+0x8c>)
    609c:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    609e:	b24b      	sxtb	r3, r1
    60a0:	2b00      	cmp	r3, #0
    60a2:	db01      	blt.n	60a8 <sio2host_rx+0x64>
    60a4:	0008      	movs	r0, r1
    60a6:	e7e4      	b.n	6072 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    60a8:	2080      	movs	r0, #128	; 0x80
    60aa:	e7e4      	b.n	6076 <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    60ac:	0033      	movs	r3, r6
	while (max_length > 0) {
    60ae:	4294      	cmp	r4, r2
    60b0:	d007      	beq.n	60c2 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    60b2:	5ce9      	ldrb	r1, [r5, r3]
    60b4:	7011      	strb	r1, [r2, #0]
		data++;
    60b6:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    60b8:	2b7f      	cmp	r3, #127	; 0x7f
    60ba:	d0f7      	beq.n	60ac <sio2host_rx+0x68>
			serial_rx_buf_head++;
    60bc:	3301      	adds	r3, #1
    60be:	b2db      	uxtb	r3, r3
    60c0:	e7f5      	b.n	60ae <sio2host_rx+0x6a>
    60c2:	4a02      	ldr	r2, [pc, #8]	; (60cc <sio2host_rx+0x88>)
    60c4:	7013      	strb	r3, [r2, #0]
}
    60c6:	bd70      	pop	{r4, r5, r6, pc}
    60c8:	20000ae5 	.word	0x20000ae5
    60cc:	20000ae4 	.word	0x20000ae4
    60d0:	20000ae6 	.word	0x20000ae6
    60d4:	20000a64 	.word	0x20000a64

000060d8 <sio2host_getchar_nowait>:
{
    60d8:	b500      	push	{lr}
    60da:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    60dc:	2101      	movs	r1, #1
    60de:	466b      	mov	r3, sp
    60e0:	1dd8      	adds	r0, r3, #7
    60e2:	4b05      	ldr	r3, [pc, #20]	; (60f8 <sio2host_getchar_nowait+0x20>)
    60e4:	4798      	blx	r3
	if (back >= 1) {
    60e6:	2800      	cmp	r0, #0
    60e8:	dd03      	ble.n	60f2 <sio2host_getchar_nowait+0x1a>
		return c;
    60ea:	466b      	mov	r3, sp
    60ec:	79d8      	ldrb	r0, [r3, #7]
}
    60ee:	b003      	add	sp, #12
    60f0:	bd00      	pop	{pc}
		return (-1);
    60f2:	2001      	movs	r0, #1
    60f4:	4240      	negs	r0, r0
    60f6:	e7fa      	b.n	60ee <sio2host_getchar_nowait+0x16>
    60f8:	00006045 	.word	0x00006045

000060fc <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    60fc:	4b13      	ldr	r3, [pc, #76]	; (614c <HAL_SPISend+0x50>)
    60fe:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    6100:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6102:	7e1a      	ldrb	r2, [r3, #24]
    6104:	420a      	tst	r2, r1
    6106:	d0fc      	beq.n	6102 <HAL_SPISend+0x6>
    6108:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    610a:	07d2      	lsls	r2, r2, #31
    610c:	d500      	bpl.n	6110 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    610e:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    6110:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6112:	7e1a      	ldrb	r2, [r3, #24]
    6114:	420a      	tst	r2, r1
    6116:	d0fc      	beq.n	6112 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    6118:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    611a:	7e1a      	ldrb	r2, [r3, #24]
    611c:	420a      	tst	r2, r1
    611e:	d0fc      	beq.n	611a <HAL_SPISend+0x1e>
    6120:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    6122:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    6124:	0752      	lsls	r2, r2, #29
    6126:	d50a      	bpl.n	613e <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6128:	8b5a      	ldrh	r2, [r3, #26]
    612a:	0752      	lsls	r2, r2, #29
    612c:	d501      	bpl.n	6132 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    612e:	2204      	movs	r2, #4
    6130:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6132:	4a06      	ldr	r2, [pc, #24]	; (614c <HAL_SPISend+0x50>)
    6134:	7992      	ldrb	r2, [r2, #6]
    6136:	2a01      	cmp	r2, #1
    6138:	d003      	beq.n	6142 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    613a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    613c:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    613e:	b2c0      	uxtb	r0, r0
}
    6140:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6142:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6144:	05c0      	lsls	r0, r0, #23
    6146:	0dc0      	lsrs	r0, r0, #23
    6148:	e7f9      	b.n	613e <HAL_SPISend+0x42>
    614a:	46c0      	nop			; (mov r8, r8)
    614c:	20000af4 	.word	0x20000af4

00006150 <HAL_ResetPinMakeOutput>:
{
    6150:	b500      	push	{lr}
    6152:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6154:	a901      	add	r1, sp, #4
    6156:	2301      	movs	r3, #1
    6158:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    615a:	2200      	movs	r2, #0
    615c:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    615e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    6160:	202f      	movs	r0, #47	; 0x2f
    6162:	4b02      	ldr	r3, [pc, #8]	; (616c <HAL_ResetPinMakeOutput+0x1c>)
    6164:	4798      	blx	r3
}
    6166:	b003      	add	sp, #12
    6168:	bd00      	pop	{pc}
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	00003301 	.word	0x00003301

00006170 <HAL_RadioDIO2Callback>:
{
    6170:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    6172:	4b05      	ldr	r3, [pc, #20]	; (6188 <HAL_RadioDIO2Callback+0x18>)
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	2b00      	cmp	r3, #0
    6178:	d004      	beq.n	6184 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    617a:	4b04      	ldr	r3, [pc, #16]	; (618c <HAL_RadioDIO2Callback+0x1c>)
    617c:	4798      	blx	r3
    interruptHandlerDio2();
    617e:	4b02      	ldr	r3, [pc, #8]	; (6188 <HAL_RadioDIO2Callback+0x18>)
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	4798      	blx	r3
}
    6184:	bd10      	pop	{r4, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	20000af0 	.word	0x20000af0
    618c:	000066f9 	.word	0x000066f9

00006190 <HAL_RadioDIO1Callback>:
{
    6190:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    6192:	4b05      	ldr	r3, [pc, #20]	; (61a8 <HAL_RadioDIO1Callback+0x18>)
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	2b00      	cmp	r3, #0
    6198:	d004      	beq.n	61a4 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    619a:	4b04      	ldr	r3, [pc, #16]	; (61ac <HAL_RadioDIO1Callback+0x1c>)
    619c:	4798      	blx	r3
    interruptHandlerDio1();
    619e:	4b02      	ldr	r3, [pc, #8]	; (61a8 <HAL_RadioDIO1Callback+0x18>)
    61a0:	681b      	ldr	r3, [r3, #0]
    61a2:	4798      	blx	r3
}
    61a4:	bd10      	pop	{r4, pc}
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	20000aec 	.word	0x20000aec
    61ac:	000066f9 	.word	0x000066f9

000061b0 <HAL_RadioDIO0Callback>:
{
    61b0:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    61b2:	4b05      	ldr	r3, [pc, #20]	; (61c8 <HAL_RadioDIO0Callback+0x18>)
    61b4:	681b      	ldr	r3, [r3, #0]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d004      	beq.n	61c4 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    61ba:	4b04      	ldr	r3, [pc, #16]	; (61cc <HAL_RadioDIO0Callback+0x1c>)
    61bc:	4798      	blx	r3
    interruptHandlerDio0();
    61be:	4b02      	ldr	r3, [pc, #8]	; (61c8 <HAL_RadioDIO0Callback+0x18>)
    61c0:	681b      	ldr	r3, [r3, #0]
    61c2:	4798      	blx	r3
}
    61c4:	bd10      	pop	{r4, pc}
    61c6:	46c0      	nop			; (mov r8, r8)
    61c8:	20000ae8 	.word	0x20000ae8
    61cc:	000066f9 	.word	0x000066f9

000061d0 <HAL_SPICSAssert>:
{
    61d0:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    61d2:	2201      	movs	r2, #1
    61d4:	4902      	ldr	r1, [pc, #8]	; (61e0 <HAL_SPICSAssert+0x10>)
    61d6:	4803      	ldr	r0, [pc, #12]	; (61e4 <HAL_SPICSAssert+0x14>)
    61d8:	4b03      	ldr	r3, [pc, #12]	; (61e8 <HAL_SPICSAssert+0x18>)
    61da:	4798      	blx	r3
}
    61dc:	bd10      	pop	{r4, pc}
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	200020b0 	.word	0x200020b0
    61e4:	20000af4 	.word	0x20000af4
    61e8:	00004701 	.word	0x00004701

000061ec <HAL_SPICSDeassert>:
{
    61ec:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    61ee:	2200      	movs	r2, #0
    61f0:	4902      	ldr	r1, [pc, #8]	; (61fc <HAL_SPICSDeassert+0x10>)
    61f2:	4803      	ldr	r0, [pc, #12]	; (6200 <HAL_SPICSDeassert+0x14>)
    61f4:	4b03      	ldr	r3, [pc, #12]	; (6204 <HAL_SPICSDeassert+0x18>)
    61f6:	4798      	blx	r3
}
    61f8:	bd10      	pop	{r4, pc}
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	200020b0 	.word	0x200020b0
    6200:	20000af4 	.word	0x20000af4
    6204:	00004701 	.word	0x00004701

00006208 <HAL_RadioInit>:
{
    6208:	b5f0      	push	{r4, r5, r6, r7, lr}
    620a:	46d6      	mov	lr, sl
    620c:	464f      	mov	r7, r9
    620e:	4646      	mov	r6, r8
    6210:	b5c0      	push	{r6, r7, lr}
    6212:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    6214:	ac01      	add	r4, sp, #4
    6216:	2601      	movs	r6, #1
    6218:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    621a:	2500      	movs	r5, #0
    621c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    621e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    6220:	0021      	movs	r1, r4
    6222:	2052      	movs	r0, #82	; 0x52
    6224:	4f52      	ldr	r7, [pc, #328]	; (6370 <HAL_RadioInit+0x168>)
    6226:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    6228:	0021      	movs	r1, r4
    622a:	203e      	movs	r0, #62	; 0x3e
    622c:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    622e:	0021      	movs	r1, r4
    6230:	203f      	movs	r0, #63	; 0x3f
    6232:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    6234:	0021      	movs	r1, r4
    6236:	202f      	movs	r0, #47	; 0x2f
    6238:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    623a:	2280      	movs	r2, #128	; 0x80
    623c:	02d2      	lsls	r2, r2, #11
    623e:	4b4d      	ldr	r3, [pc, #308]	; (6374 <HAL_RadioInit+0x16c>)
    6240:	619a      	str	r2, [r3, #24]
    6242:	4b4d      	ldr	r3, [pc, #308]	; (6378 <HAL_RadioInit+0x170>)
    6244:	2280      	movs	r2, #128	; 0x80
    6246:	05d2      	lsls	r2, r2, #23
    6248:	619a      	str	r2, [r3, #24]
    624a:	2280      	movs	r2, #128	; 0x80
    624c:	0612      	lsls	r2, r2, #24
    624e:	619a      	str	r2, [r3, #24]
    6250:	2280      	movs	r2, #128	; 0x80
    6252:	0212      	lsls	r2, r2, #8
    6254:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6256:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    6258:	0021      	movs	r1, r4
    625a:	2053      	movs	r0, #83	; 0x53
    625c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    625e:	ac02      	add	r4, sp, #8
    6260:	0020      	movs	r0, r4
    6262:	4b46      	ldr	r3, [pc, #280]	; (637c <HAL_RadioInit+0x174>)
    6264:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    6266:	2330      	movs	r3, #48	; 0x30
    6268:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    626a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    626c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    626e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    6270:	0021      	movs	r1, r4
    6272:	2000      	movs	r0, #0
    6274:	4b42      	ldr	r3, [pc, #264]	; (6380 <HAL_RadioInit+0x178>)
    6276:	469a      	mov	sl, r3
    6278:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    627a:	2200      	movs	r2, #0
    627c:	2100      	movs	r1, #0
    627e:	4841      	ldr	r0, [pc, #260]	; (6384 <HAL_RadioInit+0x17c>)
    6280:	4b41      	ldr	r3, [pc, #260]	; (6388 <HAL_RadioInit+0x180>)
    6282:	4699      	mov	r9, r3
    6284:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    6286:	2100      	movs	r1, #0
    6288:	2000      	movs	r0, #0
    628a:	4b40      	ldr	r3, [pc, #256]	; (638c <HAL_RadioInit+0x184>)
    628c:	4698      	mov	r8, r3
    628e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    6290:	230b      	movs	r3, #11
    6292:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    6294:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    6296:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    6298:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    629a:	0021      	movs	r1, r4
    629c:	200b      	movs	r0, #11
    629e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    62a0:	2200      	movs	r2, #0
    62a2:	210b      	movs	r1, #11
    62a4:	483a      	ldr	r0, [pc, #232]	; (6390 <HAL_RadioInit+0x188>)
    62a6:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    62a8:	2100      	movs	r1, #0
    62aa:	200b      	movs	r0, #11
    62ac:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    62ae:	230c      	movs	r3, #12
    62b0:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    62b2:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    62b4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    62b6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    62b8:	0021      	movs	r1, r4
    62ba:	200c      	movs	r0, #12
    62bc:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    62be:	2200      	movs	r2, #0
    62c0:	210c      	movs	r1, #12
    62c2:	4834      	ldr	r0, [pc, #208]	; (6394 <HAL_RadioInit+0x18c>)
    62c4:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    62c6:	2100      	movs	r1, #0
    62c8:	200c      	movs	r0, #12
    62ca:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    62cc:	4b32      	ldr	r3, [pc, #200]	; (6398 <HAL_RadioInit+0x190>)
    62ce:	4698      	mov	r8, r3
    62d0:	233f      	movs	r3, #63	; 0x3f
    62d2:	4642      	mov	r2, r8
    62d4:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    62d6:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    62d8:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    62da:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    62dc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    62de:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    62e0:	0021      	movs	r1, r4
    62e2:	203f      	movs	r0, #63	; 0x3f
    62e4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    62e6:	4643      	mov	r3, r8
    62e8:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    62ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    62ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    62ee:	2900      	cmp	r1, #0
    62f0:	d104      	bne.n	62fc <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    62f2:	0953      	lsrs	r3, r2, #5
    62f4:	01db      	lsls	r3, r3, #7
    62f6:	4929      	ldr	r1, [pc, #164]	; (639c <HAL_RadioInit+0x194>)
    62f8:	468c      	mov	ip, r1
    62fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    62fc:	211f      	movs	r1, #31
    62fe:	4011      	ands	r1, r2
    6300:	2201      	movs	r2, #1
    6302:	0010      	movs	r0, r2
    6304:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    6306:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    6308:	ac02      	add	r4, sp, #8
    630a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    630c:	2300      	movs	r3, #0
    630e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6310:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6312:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6314:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6316:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6318:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    631a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    631c:	3223      	adds	r2, #35	; 0x23
    631e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6320:	3a18      	subs	r2, #24
    6322:	2100      	movs	r1, #0
    6324:	a808      	add	r0, sp, #32
    6326:	4b1e      	ldr	r3, [pc, #120]	; (63a0 <HAL_RadioInit+0x198>)
    6328:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    632a:	4b1e      	ldr	r3, [pc, #120]	; (63a4 <HAL_RadioInit+0x19c>)
    632c:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    632e:	2380      	movs	r3, #128	; 0x80
    6330:	025b      	lsls	r3, r3, #9
    6332:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    6334:	4b1c      	ldr	r3, [pc, #112]	; (63a8 <HAL_RadioInit+0x1a0>)
    6336:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    6338:	2301      	movs	r3, #1
    633a:	425b      	negs	r3, r3
    633c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    633e:	4b1b      	ldr	r3, [pc, #108]	; (63ac <HAL_RadioInit+0x1a4>)
    6340:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    6342:	4b1b      	ldr	r3, [pc, #108]	; (63b0 <HAL_RadioInit+0x1a8>)
    6344:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    6346:	4d1b      	ldr	r5, [pc, #108]	; (63b4 <HAL_RadioInit+0x1ac>)
    6348:	0022      	movs	r2, r4
    634a:	491b      	ldr	r1, [pc, #108]	; (63b8 <HAL_RadioInit+0x1b0>)
    634c:	0028      	movs	r0, r5
    634e:	4b1b      	ldr	r3, [pc, #108]	; (63bc <HAL_RadioInit+0x1b4>)
    6350:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6352:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    6354:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6356:	2b00      	cmp	r3, #0
    6358:	d1fc      	bne.n	6354 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    635a:	6813      	ldr	r3, [r2, #0]
    635c:	2102      	movs	r1, #2
    635e:	430b      	orrs	r3, r1
    6360:	6013      	str	r3, [r2, #0]
}
    6362:	b010      	add	sp, #64	; 0x40
    6364:	bc1c      	pop	{r2, r3, r4}
    6366:	4690      	mov	r8, r2
    6368:	4699      	mov	r9, r3
    636a:	46a2      	mov	sl, r4
    636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	00003301 	.word	0x00003301
    6374:	40002900 	.word	0x40002900
    6378:	40002880 	.word	0x40002880
    637c:	00002e99 	.word	0x00002e99
    6380:	00002ead 	.word	0x00002ead
    6384:	000061b1 	.word	0x000061b1
    6388:	00002d59 	.word	0x00002d59
    638c:	00002d85 	.word	0x00002d85
    6390:	00006191 	.word	0x00006191
    6394:	00006171 	.word	0x00006171
    6398:	200020b0 	.word	0x200020b0
    639c:	40002800 	.word	0x40002800
    63a0:	00018779 	.word	0x00018779
    63a4:	001e8480 	.word	0x001e8480
    63a8:	00530005 	.word	0x00530005
    63ac:	003e0005 	.word	0x003e0005
    63b0:	00520005 	.word	0x00520005
    63b4:	20000af4 	.word	0x20000af4
    63b8:	42001000 	.word	0x42001000
    63bc:	00004425 	.word	0x00004425

000063c0 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    63c0:	4b07      	ldr	r3, [pc, #28]	; (63e0 <HAL_Radio_resources_init+0x20>)
    63c2:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    63c4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    63c6:	2b00      	cmp	r3, #0
    63c8:	d1fc      	bne.n	63c4 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    63ca:	6813      	ldr	r3, [r2, #0]
    63cc:	2102      	movs	r1, #2
    63ce:	430b      	orrs	r3, r1
    63d0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    63d2:	4b03      	ldr	r3, [pc, #12]	; (63e0 <HAL_Radio_resources_init+0x20>)
    63d4:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    63d6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    63d8:	2b00      	cmp	r3, #0
    63da:	d1fc      	bne.n	63d6 <HAL_Radio_resources_init+0x16>
}
    63dc:	4770      	bx	lr
    63de:	46c0      	nop			; (mov r8, r8)
    63e0:	20000af4 	.word	0x20000af4

000063e4 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    63e4:	4b06      	ldr	r3, [pc, #24]	; (6400 <HAL_RadioDeInit+0x1c>)
    63e6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    63e8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    63ea:	2b00      	cmp	r3, #0
    63ec:	d1fc      	bne.n	63e8 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    63ee:	338f      	adds	r3, #143	; 0x8f
    63f0:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    63f2:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    63f4:	6813      	ldr	r3, [r2, #0]
    63f6:	2102      	movs	r1, #2
    63f8:	438b      	bics	r3, r1
    63fa:	6013      	str	r3, [r2, #0]
}
    63fc:	4770      	bx	lr
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	20000af4 	.word	0x20000af4

00006404 <RADIO_Reset>:
{
    6404:	b570      	push	{r4, r5, r6, lr}
    6406:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    6408:	4c0a      	ldr	r4, [pc, #40]	; (6434 <RADIO_Reset+0x30>)
    640a:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    640c:	4d0a      	ldr	r5, [pc, #40]	; (6438 <RADIO_Reset+0x34>)
    640e:	2680      	movs	r6, #128	; 0x80
    6410:	0236      	lsls	r6, r6, #8
    6412:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    6414:	2001      	movs	r0, #1
    6416:	4b09      	ldr	r3, [pc, #36]	; (643c <RADIO_Reset+0x38>)
    6418:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    641a:	a901      	add	r1, sp, #4
    641c:	2300      	movs	r3, #0
    641e:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6420:	2201      	movs	r2, #1
    6422:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    6424:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    6426:	202f      	movs	r0, #47	; 0x2f
    6428:	4b05      	ldr	r3, [pc, #20]	; (6440 <RADIO_Reset+0x3c>)
    642a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    642c:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    642e:	47a0      	blx	r4
}
    6430:	b002      	add	sp, #8
    6432:	bd70      	pop	{r4, r5, r6, pc}
    6434:	00006151 	.word	0x00006151
    6438:	40002880 	.word	0x40002880
    643c:	000066a1 	.word	0x000066a1
    6440:	00003301 	.word	0x00003301

00006444 <RADIO_RegisterWrite>:
{
    6444:	b570      	push	{r4, r5, r6, lr}
    6446:	0004      	movs	r4, r0
    6448:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    644a:	4b05      	ldr	r3, [pc, #20]	; (6460 <RADIO_RegisterWrite+0x1c>)
    644c:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    644e:	2080      	movs	r0, #128	; 0x80
    6450:	4320      	orrs	r0, r4
    6452:	4c04      	ldr	r4, [pc, #16]	; (6464 <RADIO_RegisterWrite+0x20>)
    6454:	47a0      	blx	r4
	HAL_SPISend(value);
    6456:	0028      	movs	r0, r5
    6458:	47a0      	blx	r4
	HAL_SPICSDeassert();
    645a:	4b03      	ldr	r3, [pc, #12]	; (6468 <RADIO_RegisterWrite+0x24>)
    645c:	4798      	blx	r3
}
    645e:	bd70      	pop	{r4, r5, r6, pc}
    6460:	000061d1 	.word	0x000061d1
    6464:	000060fd 	.word	0x000060fd
    6468:	000061ed 	.word	0x000061ed

0000646c <RADIO_RegisterRead>:
{
    646c:	b510      	push	{r4, lr}
    646e:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    6470:	4b06      	ldr	r3, [pc, #24]	; (648c <RADIO_RegisterRead+0x20>)
    6472:	4798      	blx	r3
	HAL_SPISend(reg);
    6474:	207f      	movs	r0, #127	; 0x7f
    6476:	4020      	ands	r0, r4
    6478:	4c05      	ldr	r4, [pc, #20]	; (6490 <RADIO_RegisterRead+0x24>)
    647a:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    647c:	20ff      	movs	r0, #255	; 0xff
    647e:	47a0      	blx	r4
    6480:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    6482:	4b04      	ldr	r3, [pc, #16]	; (6494 <RADIO_RegisterRead+0x28>)
    6484:	4798      	blx	r3
}
    6486:	0020      	movs	r0, r4
    6488:	bd10      	pop	{r4, pc}
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	000061d1 	.word	0x000061d1
    6490:	000060fd 	.word	0x000060fd
    6494:	000061ed 	.word	0x000061ed

00006498 <RADIO_FrameWrite>:
{
    6498:	b570      	push	{r4, r5, r6, lr}
    649a:	0004      	movs	r4, r0
    649c:	000e      	movs	r6, r1
    649e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    64a0:	4b0a      	ldr	r3, [pc, #40]	; (64cc <RADIO_FrameWrite+0x34>)
    64a2:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    64a4:	2080      	movs	r0, #128	; 0x80
    64a6:	4320      	orrs	r0, r4
    64a8:	4b09      	ldr	r3, [pc, #36]	; (64d0 <RADIO_FrameWrite+0x38>)
    64aa:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    64ac:	2d00      	cmp	r5, #0
    64ae:	d00a      	beq.n	64c6 <RADIO_FrameWrite+0x2e>
    64b0:	0034      	movs	r4, r6
    64b2:	3d01      	subs	r5, #1
    64b4:	b2ed      	uxtb	r5, r5
    64b6:	3501      	adds	r5, #1
    64b8:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    64ba:	4e05      	ldr	r6, [pc, #20]	; (64d0 <RADIO_FrameWrite+0x38>)
    64bc:	7820      	ldrb	r0, [r4, #0]
    64be:	47b0      	blx	r6
    64c0:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    64c2:	42ac      	cmp	r4, r5
    64c4:	d1fa      	bne.n	64bc <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    64c6:	4b03      	ldr	r3, [pc, #12]	; (64d4 <RADIO_FrameWrite+0x3c>)
    64c8:	4798      	blx	r3
}
    64ca:	bd70      	pop	{r4, r5, r6, pc}
    64cc:	000061d1 	.word	0x000061d1
    64d0:	000060fd 	.word	0x000060fd
    64d4:	000061ed 	.word	0x000061ed

000064d8 <RADIO_FrameRead>:
{
    64d8:	b570      	push	{r4, r5, r6, lr}
    64da:	0004      	movs	r4, r0
    64dc:	000e      	movs	r6, r1
    64de:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    64e0:	4b0a      	ldr	r3, [pc, #40]	; (650c <RADIO_FrameRead+0x34>)
    64e2:	4798      	blx	r3
    HAL_SPISend(offset);
    64e4:	0020      	movs	r0, r4
    64e6:	4b0a      	ldr	r3, [pc, #40]	; (6510 <RADIO_FrameRead+0x38>)
    64e8:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    64ea:	2d00      	cmp	r5, #0
    64ec:	d00b      	beq.n	6506 <RADIO_FrameRead+0x2e>
    64ee:	0034      	movs	r4, r6
    64f0:	3d01      	subs	r5, #1
    64f2:	b2ed      	uxtb	r5, r5
    64f4:	3501      	adds	r5, #1
    64f6:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    64f8:	4e05      	ldr	r6, [pc, #20]	; (6510 <RADIO_FrameRead+0x38>)
    64fa:	20ff      	movs	r0, #255	; 0xff
    64fc:	47b0      	blx	r6
    64fe:	7020      	strb	r0, [r4, #0]
    6500:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    6502:	42ac      	cmp	r4, r5
    6504:	d1f9      	bne.n	64fa <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    6506:	4b03      	ldr	r3, [pc, #12]	; (6514 <RADIO_FrameRead+0x3c>)
    6508:	4798      	blx	r3
}
    650a:	bd70      	pop	{r4, r5, r6, pc}
    650c:	000061d1 	.word	0x000061d1
    6510:	000060fd 	.word	0x000060fd
    6514:	000061ed 	.word	0x000061ed

00006518 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    6518:	2802      	cmp	r0, #2
    651a:	d007      	beq.n	652c <HAL_RegisterDioInterruptHandler+0x14>
    651c:	2804      	cmp	r0, #4
    651e:	d008      	beq.n	6532 <HAL_RegisterDioInterruptHandler+0x1a>
    6520:	2801      	cmp	r0, #1
    6522:	d000      	beq.n	6526 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    6524:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    6526:	4b04      	ldr	r3, [pc, #16]	; (6538 <HAL_RegisterDioInterruptHandler+0x20>)
    6528:	6019      	str	r1, [r3, #0]
      break;
    652a:	e7fb      	b.n	6524 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    652c:	4b03      	ldr	r3, [pc, #12]	; (653c <HAL_RegisterDioInterruptHandler+0x24>)
    652e:	6019      	str	r1, [r3, #0]
      break;
    6530:	e7f8      	b.n	6524 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    6532:	4b03      	ldr	r3, [pc, #12]	; (6540 <HAL_RegisterDioInterruptHandler+0x28>)
    6534:	6019      	str	r1, [r3, #0]
}
    6536:	e7f5      	b.n	6524 <HAL_RegisterDioInterruptHandler+0xc>
    6538:	20000ae8 	.word	0x20000ae8
    653c:	20000aec 	.word	0x20000aec
    6540:	20000af0 	.word	0x20000af0

00006544 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    6544:	2801      	cmp	r0, #1
    6546:	d00a      	beq.n	655e <HAL_EnableRFCtrl+0x1a>
    6548:	2900      	cmp	r1, #0
    654a:	d008      	beq.n	655e <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    654c:	2802      	cmp	r0, #2
    654e:	d10a      	bne.n	6566 <HAL_EnableRFCtrl+0x22>
    6550:	2901      	cmp	r1, #1
    6552:	d108      	bne.n	6566 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    6554:	2280      	movs	r2, #128	; 0x80
    6556:	0192      	lsls	r2, r2, #6
    6558:	4b03      	ldr	r3, [pc, #12]	; (6568 <HAL_EnableRFCtrl+0x24>)
    655a:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    655c:	e003      	b.n	6566 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    655e:	2280      	movs	r2, #128	; 0x80
    6560:	0192      	lsls	r2, r2, #6
    6562:	4b01      	ldr	r3, [pc, #4]	; (6568 <HAL_EnableRFCtrl+0x24>)
    6564:	619a      	str	r2, [r3, #24]
    6566:	4770      	bx	lr
    6568:	40002800 	.word	0x40002800

0000656c <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    656c:	2801      	cmp	r0, #1
    656e:	d001      	beq.n	6574 <HAL_DisableRFCtrl+0x8>
    6570:	2900      	cmp	r1, #0
    6572:	d103      	bne.n	657c <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    6574:	2280      	movs	r2, #128	; 0x80
    6576:	0192      	lsls	r2, r2, #6
    6578:	4b01      	ldr	r3, [pc, #4]	; (6580 <HAL_DisableRFCtrl+0x14>)
    657a:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    657c:	4770      	bx	lr
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	40002800 	.word	0x40002800

00006584 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    6584:	2002      	movs	r0, #2
    6586:	4770      	bx	lr

00006588 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    6588:	2000      	movs	r0, #0
    658a:	4770      	bx	lr

0000658c <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    658c:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    658e:	2280      	movs	r2, #128	; 0x80
    6590:	0092      	lsls	r2, r2, #2
    6592:	4b03      	ldr	r3, [pc, #12]	; (65a0 <HAL_TCXOPowerOn+0x14>)
    6594:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    6596:	2002      	movs	r0, #2
    6598:	4b02      	ldr	r3, [pc, #8]	; (65a4 <HAL_TCXOPowerOn+0x18>)
    659a:	4798      	blx	r3
#endif
}
    659c:	bd10      	pop	{r4, pc}
    659e:	46c0      	nop			; (mov r8, r8)
    65a0:	40002800 	.word	0x40002800
    65a4:	000029e9 	.word	0x000029e9

000065a8 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    65a8:	2280      	movs	r2, #128	; 0x80
    65aa:	0092      	lsls	r2, r2, #2
    65ac:	4b01      	ldr	r3, [pc, #4]	; (65b4 <HAL_TCXOPowerOff+0xc>)
    65ae:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    65b0:	4770      	bx	lr
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	40002800 	.word	0x40002800

000065b8 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    65b8:	2801      	cmp	r0, #1
    65ba:	d002      	beq.n	65c2 <HAL_Sleep+0xa>
    65bc:	2802      	cmp	r0, #2
    65be:	d00c      	beq.n	65da <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    65c0:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    65c2:	2204      	movs	r2, #4
    65c4:	2380      	movs	r3, #128	; 0x80
    65c6:	05db      	lsls	r3, r3, #23
    65c8:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    65ca:	001a      	movs	r2, r3
    65cc:	7853      	ldrb	r3, [r2, #1]
    65ce:	2b04      	cmp	r3, #4
    65d0:	d1fc      	bne.n	65cc <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    65d2:	f3bf 8f4f 	dsb	sy
	__WFI();
    65d6:	bf30      	wfi
    65d8:	e7f2      	b.n	65c0 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    65da:	2205      	movs	r2, #5
    65dc:	2380      	movs	r3, #128	; 0x80
    65de:	05db      	lsls	r3, r3, #23
    65e0:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    65e2:	001a      	movs	r2, r3
    65e4:	7853      	ldrb	r3, [r2, #1]
    65e6:	2b05      	cmp	r3, #5
    65e8:	d1fc      	bne.n	65e4 <HAL_Sleep+0x2c>
    65ea:	f3bf 8f4f 	dsb	sy
	__WFI();
    65ee:	bf30      	wfi
    65f0:	e7e6      	b.n	65c0 <HAL_Sleep+0x8>
	...

000065f4 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    65f4:	b510      	push	{r4, lr}
    65f6:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    65f8:	2201      	movs	r2, #1
    65fa:	466b      	mov	r3, sp
    65fc:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    65fe:	2300      	movs	r3, #0
    6600:	4669      	mov	r1, sp
    6602:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    6604:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    6606:	466a      	mov	r2, sp
    6608:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    660a:	3b01      	subs	r3, #1
    660c:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    660e:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    6610:	4c04      	ldr	r4, [pc, #16]	; (6624 <SleepTimerInit+0x30>)
    6612:	4905      	ldr	r1, [pc, #20]	; (6628 <SleepTimerInit+0x34>)
    6614:	0020      	movs	r0, r4
    6616:	4b05      	ldr	r3, [pc, #20]	; (662c <SleepTimerInit+0x38>)
    6618:	4798      	blx	r3
	rtc_count_enable(&rtc);
    661a:	0020      	movs	r0, r4
    661c:	4b04      	ldr	r3, [pc, #16]	; (6630 <SleepTimerInit+0x3c>)
    661e:	4798      	blx	r3
}
    6620:	b004      	add	sp, #16
    6622:	bd10      	pop	{r4, pc}
    6624:	200020b4 	.word	0x200020b4
    6628:	40002000 	.word	0x40002000
    662c:	000034b1 	.word	0x000034b1
    6630:	00003331 	.word	0x00003331

00006634 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    6634:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    6636:	4802      	ldr	r0, [pc, #8]	; (6640 <SleepTimerGetElapsedTime+0xc>)
    6638:	4b02      	ldr	r3, [pc, #8]	; (6644 <SleepTimerGetElapsedTime+0x10>)
    663a:	4798      	blx	r3
}
    663c:	bd10      	pop	{r4, pc}
    663e:	46c0      	nop			; (mov r8, r8)
    6640:	200020b4 	.word	0x200020b4
    6644:	00003421 	.word	0x00003421

00006648 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    6648:	b570      	push	{r4, r5, r6, lr}
    664a:	0005      	movs	r5, r0
    664c:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    664e:	4c0a      	ldr	r4, [pc, #40]	; (6678 <SleepTimerStart+0x30>)
    6650:	2100      	movs	r1, #0
    6652:	0020      	movs	r0, r4
    6654:	4b09      	ldr	r3, [pc, #36]	; (667c <SleepTimerStart+0x34>)
    6656:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    6658:	2208      	movs	r2, #8
    665a:	0031      	movs	r1, r6
    665c:	0020      	movs	r0, r4
    665e:	4b08      	ldr	r3, [pc, #32]	; (6680 <SleepTimerStart+0x38>)
    6660:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    6662:	2200      	movs	r2, #0
    6664:	0029      	movs	r1, r5
    6666:	0020      	movs	r0, r4
    6668:	4b06      	ldr	r3, [pc, #24]	; (6684 <SleepTimerStart+0x3c>)
    666a:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    666c:	2108      	movs	r1, #8
    666e:	0020      	movs	r0, r4
    6670:	4b05      	ldr	r3, [pc, #20]	; (6688 <SleepTimerStart+0x40>)
    6672:	4798      	blx	r3
}
    6674:	bd70      	pop	{r4, r5, r6, pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	200020b4 	.word	0x200020b4
    667c:	000033dd 	.word	0x000033dd
    6680:	0000354d 	.word	0x0000354d
    6684:	0000344d 	.word	0x0000344d
    6688:	00003589 	.word	0x00003589

0000668c <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    668c:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    668e:	2108      	movs	r1, #8
    6690:	4801      	ldr	r0, [pc, #4]	; (6698 <SleepTimerStop+0xc>)
    6692:	4b02      	ldr	r3, [pc, #8]	; (669c <SleepTimerStop+0x10>)
    6694:	4798      	blx	r3
}
    6696:	bd10      	pop	{r4, pc}
    6698:	200020b4 	.word	0x200020b4
    669c:	000035cd 	.word	0x000035cd

000066a0 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    66a0:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    66a2:	2800      	cmp	r0, #0
    66a4:	d103      	bne.n	66ae <SystemBlockingWaitMs+0xe>
    66a6:	2001      	movs	r0, #1
    66a8:	4b02      	ldr	r3, [pc, #8]	; (66b4 <SystemBlockingWaitMs+0x14>)
    66aa:	4798      	blx	r3
#endif
}
    66ac:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    66ae:	4b02      	ldr	r3, [pc, #8]	; (66b8 <SystemBlockingWaitMs+0x18>)
    66b0:	4798      	blx	r3
    66b2:	e7fb      	b.n	66ac <SystemBlockingWaitMs+0xc>
    66b4:	000029bd 	.word	0x000029bd
    66b8:	000029e9 	.word	0x000029e9

000066bc <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    66bc:	b510      	push	{r4, lr}
    66be:	b082      	sub	sp, #8
    66c0:	0004      	movs	r4, r0
#ifndef CRYPTO_DEV_ENABLED
#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__) && EDBG_EUI_READ == 1)

	uint8_t EDBGDevEUI[8];
	edbg_eui_read_eui64((uint8_t *)&EDBGDevEUI);
    66c2:	4668      	mov	r0, sp
    66c4:	4b05      	ldr	r3, [pc, #20]	; (66dc <System_GetExternalEui+0x20>)
    66c6:	4798      	blx	r3
    66c8:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < 8; i++)
	{
		*id = EDBGDevEUI[i] ;
    66ca:	466a      	mov	r2, sp
    66cc:	5c9a      	ldrb	r2, [r3, r2]
    66ce:	54e2      	strb	r2, [r4, r3]
    66d0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    66d2:	2b08      	cmp	r3, #8
    66d4:	d1f9      	bne.n	66ca <System_GetExternalEui+0xe>
		id++ ;
	}

#endif
#endif
}
    66d6:	b002      	add	sp, #8
    66d8:	bd10      	pop	{r4, pc}
    66da:	46c0      	nop			; (mov r8, r8)
    66dc:	0000c705 	.word	0x0000c705

000066e0 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    66e0:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    66e2:	4b01      	ldr	r3, [pc, #4]	; (66e8 <system_enter_critical_section+0x8>)
    66e4:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    66e6:	bd10      	pop	{r4, pc}
    66e8:	00002a15 	.word	0x00002a15

000066ec <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    66ec:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    66ee:	4b01      	ldr	r3, [pc, #4]	; (66f4 <system_leave_critical_section+0x8>)
    66f0:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    66f2:	bd10      	pop	{r4, pc}
    66f4:	00002a55 	.word	0x00002a55

000066f8 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    66f8:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    66fa:	4b16      	ldr	r3, [pc, #88]	; (6754 <PMM_Wakeup+0x5c>)
    66fc:	781b      	ldrb	r3, [r3, #0]
    66fe:	2b01      	cmp	r3, #1
    6700:	d000      	beq.n	6704 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    6702:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    6704:	2200      	movs	r2, #0
    6706:	4b13      	ldr	r3, [pc, #76]	; (6754 <PMM_Wakeup+0x5c>)
    6708:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    670a:	4b13      	ldr	r3, [pc, #76]	; (6758 <PMM_Wakeup+0x60>)
    670c:	4798      	blx	r3
    670e:	4b13      	ldr	r3, [pc, #76]	; (675c <PMM_Wakeup+0x64>)
    6710:	4798      	blx	r3
    6712:	4913      	ldr	r1, [pc, #76]	; (6760 <PMM_Wakeup+0x68>)
    6714:	4b13      	ldr	r3, [pc, #76]	; (6764 <PMM_Wakeup+0x6c>)
    6716:	4798      	blx	r3
    6718:	4b13      	ldr	r3, [pc, #76]	; (6768 <PMM_Wakeup+0x70>)
    671a:	4798      	blx	r3
    671c:	0004      	movs	r4, r0
    671e:	000d      	movs	r5, r1
        SleepTimerStop();
    6720:	4b12      	ldr	r3, [pc, #72]	; (676c <PMM_Wakeup+0x74>)
    6722:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    6724:	0020      	movs	r0, r4
    6726:	0029      	movs	r1, r5
    6728:	4b11      	ldr	r3, [pc, #68]	; (6770 <PMM_Wakeup+0x78>)
    672a:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    672c:	4b11      	ldr	r3, [pc, #68]	; (6774 <PMM_Wakeup+0x7c>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	2b00      	cmp	r3, #0
    6732:	d0e6      	beq.n	6702 <PMM_Wakeup+0xa>
    6734:	689e      	ldr	r6, [r3, #8]
    6736:	2e00      	cmp	r6, #0
    6738:	d0e3      	beq.n	6702 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    673a:	22fa      	movs	r2, #250	; 0xfa
    673c:	0092      	lsls	r2, r2, #2
    673e:	2300      	movs	r3, #0
    6740:	0020      	movs	r0, r4
    6742:	0029      	movs	r1, r5
    6744:	4c0c      	ldr	r4, [pc, #48]	; (6778 <PMM_Wakeup+0x80>)
    6746:	47a0      	blx	r4
    6748:	47b0      	blx	r6
            sleepReq = NULL;
    674a:	2200      	movs	r2, #0
    674c:	4b09      	ldr	r3, [pc, #36]	; (6774 <PMM_Wakeup+0x7c>)
    674e:	601a      	str	r2, [r3, #0]
}
    6750:	e7d7      	b.n	6702 <PMM_Wakeup+0xa>
    6752:	46c0      	nop			; (mov r8, r8)
    6754:	20000b00 	.word	0x20000b00
    6758:	00006635 	.word	0x00006635
    675c:	00016349 	.word	0x00016349
    6760:	41f423d7 	.word	0x41f423d7
    6764:	00015cf1 	.word	0x00015cf1
    6768:	0001542d 	.word	0x0001542d
    676c:	0000668d 	.word	0x0000668d
    6770:	0000da71 	.word	0x0000da71
    6774:	20000b04 	.word	0x20000b04
    6778:	0001532d 	.word	0x0001532d

0000677c <PMM_Sleep>:
{
    677c:	b570      	push	{r4, r5, r6, lr}
    677e:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    6780:	d055      	beq.n	682e <PMM_Sleep+0xb2>
    6782:	4b2c      	ldr	r3, [pc, #176]	; (6834 <PMM_Sleep+0xb8>)
    6784:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6786:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    6788:	2b00      	cmp	r3, #0
    678a:	d000      	beq.n	678e <PMM_Sleep+0x12>
}
    678c:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    678e:	4b2a      	ldr	r3, [pc, #168]	; (6838 <PMM_Sleep+0xbc>)
    6790:	4798      	blx	r3
    6792:	0003      	movs	r3, r0
            return status;
    6794:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    6796:	2b00      	cmp	r3, #0
    6798:	d0f8      	beq.n	678c <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    679a:	6823      	ldr	r3, [r4, #0]
    679c:	4a27      	ldr	r2, [pc, #156]	; (683c <PMM_Sleep+0xc0>)
    679e:	4694      	mov	ip, r2
    67a0:	4463      	add	r3, ip
        if ( false == canSleep )
    67a2:	4a27      	ldr	r2, [pc, #156]	; (6840 <PMM_Sleep+0xc4>)
    67a4:	4293      	cmp	r3, r2
    67a6:	d8f1      	bhi.n	678c <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    67a8:	7923      	ldrb	r3, [r4, #4]
    67aa:	2b02      	cmp	r3, #2
    67ac:	d021      	beq.n	67f2 <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    67ae:	2b01      	cmp	r3, #1
    67b0:	d025      	beq.n	67fe <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    67b2:	2501      	movs	r5, #1
    67b4:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    67b6:	4b20      	ldr	r3, [pc, #128]	; (6838 <PMM_Sleep+0xbc>)
    67b8:	4798      	blx	r3
    67ba:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    67bc:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    67be:	2b00      	cmp	r3, #0
    67c0:	d0e4      	beq.n	678c <PMM_Sleep+0x10>
            SystemTimerSuspend();
    67c2:	4b20      	ldr	r3, [pc, #128]	; (6844 <PMM_Sleep+0xc8>)
    67c4:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    67c6:	0028      	movs	r0, r5
    67c8:	380a      	subs	r0, #10
    67ca:	4b1f      	ldr	r3, [pc, #124]	; (6848 <PMM_Sleep+0xcc>)
    67cc:	4798      	blx	r3
    67ce:	491f      	ldr	r1, [pc, #124]	; (684c <PMM_Sleep+0xd0>)
    67d0:	4b1f      	ldr	r3, [pc, #124]	; (6850 <PMM_Sleep+0xd4>)
    67d2:	4798      	blx	r3
    67d4:	4b1f      	ldr	r3, [pc, #124]	; (6854 <PMM_Sleep+0xd8>)
    67d6:	4798      	blx	r3
    67d8:	491f      	ldr	r1, [pc, #124]	; (6858 <PMM_Sleep+0xdc>)
    67da:	4b20      	ldr	r3, [pc, #128]	; (685c <PMM_Sleep+0xe0>)
    67dc:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    67de:	2201      	movs	r2, #1
    67e0:	4b14      	ldr	r3, [pc, #80]	; (6834 <PMM_Sleep+0xb8>)
    67e2:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    67e4:	4b1e      	ldr	r3, [pc, #120]	; (6860 <PMM_Sleep+0xe4>)
    67e6:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    67e8:	7920      	ldrb	r0, [r4, #4]
    67ea:	4b1e      	ldr	r3, [pc, #120]	; (6864 <PMM_Sleep+0xe8>)
    67ec:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    67ee:	2001      	movs	r0, #1
    67f0:	e7cc      	b.n	678c <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    67f2:	4b1d      	ldr	r3, [pc, #116]	; (6868 <PMM_Sleep+0xec>)
    67f4:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    67f6:	1c43      	adds	r3, r0, #1
    67f8:	d017      	beq.n	682a <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    67fa:	2000      	movs	r0, #0
    67fc:	e7c6      	b.n	678c <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    67fe:	4b1a      	ldr	r3, [pc, #104]	; (6868 <PMM_Sleep+0xec>)
    6800:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    6802:	1c43      	adds	r3, r0, #1
    6804:	d00b      	beq.n	681e <PMM_Sleep+0xa2>
    6806:	21fa      	movs	r1, #250	; 0xfa
    6808:	0089      	lsls	r1, r1, #2
    680a:	4b18      	ldr	r3, [pc, #96]	; (686c <PMM_Sleep+0xf0>)
    680c:	4798      	blx	r3
    680e:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    6810:	4a0a      	ldr	r2, [pc, #40]	; (683c <PMM_Sleep+0xc0>)
    6812:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    6814:	4a0a      	ldr	r2, [pc, #40]	; (6840 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6816:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    6818:	4291      	cmp	r1, r2
    681a:	d8b7      	bhi.n	678c <PMM_Sleep+0x10>
    681c:	e000      	b.n	6820 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    681e:	4b14      	ldr	r3, [pc, #80]	; (6870 <PMM_Sleep+0xf4>)
    6820:	6825      	ldr	r5, [r4, #0]
    6822:	429d      	cmp	r5, r3
    6824:	d9c7      	bls.n	67b6 <PMM_Sleep+0x3a>
    6826:	001d      	movs	r5, r3
    6828:	e7c5      	b.n	67b6 <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    682a:	6825      	ldr	r5, [r4, #0]
    682c:	e7c3      	b.n	67b6 <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    682e:	2000      	movs	r0, #0
    6830:	e7ac      	b.n	678c <PMM_Sleep+0x10>
    6832:	46c0      	nop			; (mov r8, r8)
    6834:	20000b00 	.word	0x20000b00
    6838:	0000dc35 	.word	0x0000dc35
    683c:	fffffc18 	.word	0xfffffc18
    6840:	07cebbc8 	.word	0x07cebbc8
    6844:	0000da3d 	.word	0x0000da3d
    6848:	00016349 	.word	0x00016349
    684c:	42031375 	.word	0x42031375
    6850:	00015cf1 	.word	0x00015cf1
    6854:	000153c1 	.word	0x000153c1
    6858:	000066f9 	.word	0x000066f9
    685c:	00006649 	.word	0x00006649
    6860:	20000b04 	.word	0x20000b04
    6864:	000065b9 	.word	0x000065b9
    6868:	0000d779 	.word	0x0000d779
    686c:	00014f51 	.word	0x00014f51
    6870:	07cebfb0 	.word	0x07cebfb0

00006874 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    6874:	4770      	bx	lr
	...

00006878 <InitDefault923Channels>:
{
    6878:	b570      	push	{r4, r5, r6, lr}
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels923) );
    687a:	4c39      	ldr	r4, [pc, #228]	; (6960 <InitDefault923Channels+0xe8>)
    687c:	7920      	ldrb	r0, [r4, #4]
    687e:	7963      	ldrb	r3, [r4, #5]
    6880:	021b      	lsls	r3, r3, #8
    6882:	4303      	orrs	r3, r0
    6884:	79a0      	ldrb	r0, [r4, #6]
    6886:	0400      	lsls	r0, r0, #16
    6888:	4303      	orrs	r3, r0
    688a:	79e0      	ldrb	r0, [r4, #7]
    688c:	0600      	lsls	r0, r0, #24
    688e:	4318      	orrs	r0, r3
    6890:	2204      	movs	r2, #4
    6892:	2100      	movs	r1, #0
    6894:	4e33      	ldr	r6, [pc, #204]	; (6964 <InitDefault923Channels+0xec>)
    6896:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923) );
    6898:	7a20      	ldrb	r0, [r4, #8]
    689a:	7a63      	ldrb	r3, [r4, #9]
    689c:	021b      	lsls	r3, r3, #8
    689e:	4303      	orrs	r3, r0
    68a0:	7aa0      	ldrb	r0, [r4, #10]
    68a2:	0400      	lsls	r0, r0, #16
    68a4:	4303      	orrs	r3, r0
    68a6:	7ae0      	ldrb	r0, [r4, #11]
    68a8:	0600      	lsls	r0, r0, #24
    68aa:	4318      	orrs	r0, r3
    68ac:	2218      	movs	r2, #24
    68ae:	2100      	movs	r1, #0
    68b0:	47b0      	blx	r6
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    68b2:	7920      	ldrb	r0, [r4, #4]
    68b4:	7963      	ldrb	r3, [r4, #5]
    68b6:	021b      	lsls	r3, r3, #8
    68b8:	4303      	orrs	r3, r0
    68ba:	79a0      	ldrb	r0, [r4, #6]
    68bc:	0400      	lsls	r0, r0, #16
    68be:	4303      	orrs	r3, r0
    68c0:	79e0      	ldrb	r0, [r4, #7]
    68c2:	0600      	lsls	r0, r0, #24
    68c4:	4318      	orrs	r0, r3
    68c6:	2204      	movs	r2, #4
    68c8:	4927      	ldr	r1, [pc, #156]	; (6968 <InitDefault923Channels+0xf0>)
    68ca:	4d28      	ldr	r5, [pc, #160]	; (696c <InitDefault923Channels+0xf4>)
    68cc:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    68ce:	7a20      	ldrb	r0, [r4, #8]
    68d0:	7a63      	ldrb	r3, [r4, #9]
    68d2:	021b      	lsls	r3, r3, #8
    68d4:	4303      	orrs	r3, r0
    68d6:	7aa0      	ldrb	r0, [r4, #10]
    68d8:	0400      	lsls	r0, r0, #16
    68da:	4303      	orrs	r3, r0
    68dc:	7ae0      	ldrb	r0, [r4, #11]
    68de:	0600      	lsls	r0, r0, #24
    68e0:	4318      	orrs	r0, r3
    68e2:	2218      	movs	r2, #24
    68e4:	4922      	ldr	r1, [pc, #136]	; (6970 <InitDefault923Channels+0xf8>)
    68e6:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams923) );
    68e8:	7b20      	ldrb	r0, [r4, #12]
    68ea:	7b63      	ldrb	r3, [r4, #13]
    68ec:	021b      	lsls	r3, r3, #8
    68ee:	4303      	orrs	r3, r0
    68f0:	7ba0      	ldrb	r0, [r4, #14]
    68f2:	0400      	lsls	r0, r0, #16
    68f4:	4303      	orrs	r3, r0
    68f6:	7be0      	ldrb	r0, [r4, #15]
    68f8:	0600      	lsls	r0, r0, #24
    68fa:	4318      	orrs	r0, r3
    68fc:	220c      	movs	r2, #12
    68fe:	2100      	movs	r1, #0
    6900:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    6902:	7b20      	ldrb	r0, [r4, #12]
    6904:	7b63      	ldrb	r3, [r4, #13]
    6906:	021b      	lsls	r3, r3, #8
    6908:	4303      	orrs	r3, r0
    690a:	7ba0      	ldrb	r0, [r4, #14]
    690c:	0400      	lsls	r0, r0, #16
    690e:	4303      	orrs	r3, r0
    6910:	7be0      	ldrb	r0, [r4, #15]
    6912:	0600      	lsls	r0, r0, #24
    6914:	4318      	orrs	r0, r3
    6916:	220c      	movs	r2, #12
    6918:	4916      	ldr	r1, [pc, #88]	; (6974 <InitDefault923Channels+0xfc>)
    691a:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    691c:	0020      	movs	r0, r4
    691e:	30af      	adds	r0, #175	; 0xaf
    6920:	30ff      	adds	r0, #255	; 0xff
    6922:	2202      	movs	r2, #2
    6924:	4914      	ldr	r1, [pc, #80]	; (6978 <InitDefault923Channels+0x100>)
    6926:	47a8      	blx	r5
	for (i = 2; i < RegParams.maxChannels; i++)
    6928:	232a      	movs	r3, #42	; 0x2a
    692a:	56e3      	ldrsb	r3, [r4, r3]
    692c:	2b02      	cmp	r3, #2
    692e:	dd15      	ble.n	695c <InitDefault923Channels+0xe4>
    6930:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6932:	480b      	ldr	r0, [pc, #44]	; (6960 <InitDefault923Channels+0xe8>)
    6934:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    6936:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6938:	7902      	ldrb	r2, [r0, #4]
    693a:	7941      	ldrb	r1, [r0, #5]
    693c:	0209      	lsls	r1, r1, #8
    693e:	4311      	orrs	r1, r2
    6940:	7982      	ldrb	r2, [r0, #6]
    6942:	0412      	lsls	r2, r2, #16
    6944:	4311      	orrs	r1, r2
    6946:	79c2      	ldrb	r2, [r0, #7]
    6948:	0612      	lsls	r2, r2, #24
    694a:	430a      	orrs	r2, r1
    694c:	0059      	lsls	r1, r3, #1
    694e:	188a      	adds	r2, r1, r2
    6950:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    6952:	3301      	adds	r3, #1
    6954:	b2db      	uxtb	r3, r3
    6956:	5702      	ldrsb	r2, [r0, r4]
    6958:	4293      	cmp	r3, r2
    695a:	dbed      	blt.n	6938 <InitDefault923Channels+0xc0>
}
    695c:	bd70      	pop	{r4, r5, r6, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	20002310 	.word	0x20002310
    6964:	00018779 	.word	0x00018779
    6968:	0001e384 	.word	0x0001e384
    696c:	00018655 	.word	0x00018655
    6970:	0001e36c 	.word	0x0001e36c
    6974:	0001e3cc 	.word	0x0001e3cc
    6978:	0001e3c8 	.word	0x0001e3c8

0000697c <LORAReg_InitAS>:
{
    697c:	b5f0      	push	{r4, r5, r6, r7, lr}
    697e:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    6980:	4b78      	ldr	r3, [pc, #480]	; (6b64 <LORAReg_InitAS+0x1e8>)
    6982:	2103      	movs	r1, #3
    6984:	2226      	movs	r2, #38	; 0x26
    6986:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    6988:	2510      	movs	r5, #16
    698a:	3204      	adds	r2, #4
    698c:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    698e:	3902      	subs	r1, #2
    6990:	3a01      	subs	r2, #1
    6992:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    6994:	3a02      	subs	r2, #2
    6996:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6998:	001a      	movs	r2, r3
    699a:	3284      	adds	r2, #132	; 0x84
    699c:	2400      	movs	r4, #0
    699e:	711a      	strb	r2, [r3, #4]
    69a0:	0a16      	lsrs	r6, r2, #8
    69a2:	715e      	strb	r6, [r3, #5]
    69a4:	0c16      	lsrs	r6, r2, #16
    69a6:	719e      	strb	r6, [r3, #6]
    69a8:	0e12      	lsrs	r2, r2, #24
    69aa:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    69ac:	001a      	movs	r2, r3
    69ae:	3244      	adds	r2, #68	; 0x44
    69b0:	701a      	strb	r2, [r3, #0]
    69b2:	0a16      	lsrs	r6, r2, #8
    69b4:	705e      	strb	r6, [r3, #1]
    69b6:	0c16      	lsrs	r6, r2, #16
    69b8:	709e      	strb	r6, [r3, #2]
    69ba:	0e12      	lsrs	r2, r2, #24
    69bc:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    69be:	001a      	movs	r2, r3
    69c0:	32a4      	adds	r2, #164	; 0xa4
    69c2:	721a      	strb	r2, [r3, #8]
    69c4:	0a16      	lsrs	r6, r2, #8
    69c6:	725e      	strb	r6, [r3, #9]
    69c8:	0c16      	lsrs	r6, r2, #16
    69ca:	729e      	strb	r6, [r3, #10]
    69cc:	0e12      	lsrs	r2, r2, #24
    69ce:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    69d0:	001a      	movs	r2, r3
    69d2:	3265      	adds	r2, #101	; 0x65
    69d4:	32ff      	adds	r2, #255	; 0xff
    69d6:	741a      	strb	r2, [r3, #16]
    69d8:	0a16      	lsrs	r6, r2, #8
    69da:	745e      	strb	r6, [r3, #17]
    69dc:	0c16      	lsrs	r6, r2, #16
    69de:	749e      	strb	r6, [r3, #18]
    69e0:	0e12      	lsrs	r2, r2, #24
    69e2:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    69e4:	001a      	movs	r2, r3
    69e6:	3235      	adds	r2, #53	; 0x35
    69e8:	751a      	strb	r2, [r3, #20]
    69ea:	0a16      	lsrs	r6, r2, #8
    69ec:	755e      	strb	r6, [r3, #21]
    69ee:	0c16      	lsrs	r6, r2, #16
    69f0:	759e      	strb	r6, [r3, #22]
    69f2:	0e12      	lsrs	r2, r2, #24
    69f4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    69f6:	001a      	movs	r2, r3
    69f8:	323e      	adds	r2, #62	; 0x3e
    69fa:	761a      	strb	r2, [r3, #24]
    69fc:	0a16      	lsrs	r6, r2, #8
    69fe:	765e      	strb	r6, [r3, #25]
    6a00:	0c16      	lsrs	r6, r2, #16
    6a02:	769e      	strb	r6, [r3, #26]
    6a04:	0e12      	lsrs	r2, r2, #24
    6a06:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    6a08:	001a      	movs	r2, r3
    6a0a:	32c5      	adds	r2, #197	; 0xc5
    6a0c:	32ff      	adds	r2, #255	; 0xff
    6a0e:	731a      	strb	r2, [r3, #12]
    6a10:	0a16      	lsrs	r6, r2, #8
    6a12:	735e      	strb	r6, [r3, #13]
    6a14:	0c16      	lsrs	r6, r2, #16
    6a16:	739e      	strb	r6, [r3, #14]
    6a18:	0e12      	lsrs	r2, r2, #24
    6a1a:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    6a1c:	2202      	movs	r2, #2
    6a1e:	2622      	movs	r6, #34	; 0x22
    6a20:	559a      	strb	r2, [r3, r6]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    6a22:	3601      	adds	r6, #1
    6a24:	559a      	strb	r2, [r3, r6]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    6a26:	2600      	movs	r6, #0
    6a28:	771e      	strb	r6, [r3, #28]
    6a2a:	3e16      	subs	r6, #22
    6a2c:	775e      	strb	r6, [r3, #29]
    6a2e:	361c      	adds	r6, #28
    6a30:	779e      	strb	r6, [r3, #30]
    6a32:	3631      	adds	r6, #49	; 0x31
    6a34:	77de      	strb	r6, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    6a36:	3e16      	subs	r6, #22
    6a38:	559a      	strb	r2, [r3, r6]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    6a3a:	2732      	movs	r7, #50	; 0x32
    6a3c:	3e01      	subs	r6, #1
    6a3e:	559f      	strb	r7, [r3, r6]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    6a40:	3e19      	subs	r6, #25
    6a42:	3f0e      	subs	r7, #14
    6a44:	55de      	strb	r6, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    6a46:	3701      	adds	r7, #1
    6a48:	55dc      	strb	r4, [r3, r7]
	RegParams.Rx1DrOffset = 7;
    6a4a:	3707      	adds	r7, #7
    6a4c:	55de      	strb	r6, [r3, r7]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    6a4e:	3701      	adds	r7, #1
    6a50:	55de      	strb	r6, [r3, r7]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AS;
    6a52:	3627      	adds	r6, #39	; 0x27
    6a54:	5599      	strb	r1, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    6a56:	3127      	adds	r1, #39	; 0x27
    6a58:	545d      	strb	r5, [r3, r1]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    6a5a:	21c2      	movs	r1, #194	; 0xc2
    6a5c:	31ff      	adds	r1, #255	; 0xff
    6a5e:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    6a60:	4a41      	ldr	r2, [pc, #260]	; (6b68 <LORAReg_InitAS+0x1ec>)
    6a62:	7815      	ldrb	r5, [r2, #0]
    6a64:	3959      	subs	r1, #89	; 0x59
    6a66:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    6a68:	7855      	ldrb	r5, [r2, #1]
    6a6a:	392b      	subs	r1, #43	; 0x2b
    6a6c:	39ff      	subs	r1, #255	; 0xff
    6a6e:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    6a70:	7891      	ldrb	r1, [r2, #2]
    6a72:	223d      	movs	r2, #61	; 0x3d
    6a74:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    6a76:	001a      	movs	r2, r3
    6a78:	3239      	adds	r2, #57	; 0x39
    6a7a:	2100      	movs	r1, #0
    6a7c:	7011      	strb	r1, [r2, #0]
    6a7e:	7051      	strb	r1, [r2, #1]
    6a80:	7091      	strb	r1, [r2, #2]
    6a82:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    6a84:	2243      	movs	r2, #67	; 0x43
    6a86:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    6a88:	001a      	movs	r2, r3
    6a8a:	323f      	adds	r2, #63	; 0x3f
    6a8c:	7011      	strb	r1, [r2, #0]
    6a8e:	7051      	strb	r1, [r2, #1]
    6a90:	7091      	strb	r1, [r2, #2]
    6a92:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    6a94:	21c4      	movs	r1, #196	; 0xc4
    6a96:	31ff      	adds	r1, #255	; 0xff
    6a98:	5c5a      	ldrb	r2, [r3, r1]
    6a9a:	2401      	movs	r4, #1
    6a9c:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    6a9e:	2402      	movs	r4, #2
    6aa0:	4322      	orrs	r2, r4
    6aa2:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    6aa4:	222f      	movs	r2, #47	; 0x2f
    6aa6:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6aa8:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    6aaa:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6aac:	2808      	cmp	r0, #8
    6aae:	d91b      	bls.n	6ae8 <LORAReg_InitAS+0x16c>
	if(!initialized)
    6ab0:	4b2e      	ldr	r3, [pc, #184]	; (6b6c <LORAReg_InitAS+0x1f0>)
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d102      	bne.n	6abe <LORAReg_InitAS+0x142>
		initialized = true;
    6ab8:	2201      	movs	r2, #1
    6aba:	4b2c      	ldr	r3, [pc, #176]	; (6b6c <LORAReg_InitAS+0x1f0>)
    6abc:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    6abe:	4b2c      	ldr	r3, [pc, #176]	; (6b70 <LORAReg_InitAS+0x1f4>)
    6ac0:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    6ac2:	4b2c      	ldr	r3, [pc, #176]	; (6b74 <LORAReg_InitAS+0x1f8>)
    6ac4:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    6ac6:	4b2c      	ldr	r3, [pc, #176]	; (6b78 <LORAReg_InitAS+0x1fc>)
    6ac8:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    6aca:	4b26      	ldr	r3, [pc, #152]	; (6b64 <LORAReg_InitAS+0x1e8>)
    6acc:	4a2b      	ldr	r2, [pc, #172]	; (6b7c <LORAReg_InitAS+0x200>)
    6ace:	5c9a      	ldrb	r2, [r3, r2]
    6ad0:	2185      	movs	r1, #133	; 0x85
    6ad2:	0089      	lsls	r1, r1, #2
    6ad4:	5c58      	ldrb	r0, [r3, r1]
    6ad6:	0200      	lsls	r0, r0, #8
    6ad8:	4310      	orrs	r0, r2
    6ada:	b2c1      	uxtb	r1, r0
    6adc:	0a00      	lsrs	r0, r0, #8
    6ade:	4b28      	ldr	r3, [pc, #160]	; (6b80 <LORAReg_InitAS+0x204>)
    6ae0:	4798      	blx	r3
}
    6ae2:	0020      	movs	r0, r4
    6ae4:	b007      	add	sp, #28
    6ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault923Channels ();
    6ae8:	4b26      	ldr	r3, [pc, #152]	; (6b84 <LORAReg_InitAS+0x208>)
    6aea:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    6aec:	4c1d      	ldr	r4, [pc, #116]	; (6b64 <LORAReg_InitAS+0x1e8>)
    6aee:	2210      	movs	r2, #16
    6af0:	23e1      	movs	r3, #225	; 0xe1
    6af2:	005b      	lsls	r3, r3, #1
    6af4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    6af6:	7820      	ldrb	r0, [r4, #0]
    6af8:	7863      	ldrb	r3, [r4, #1]
    6afa:	021b      	lsls	r3, r3, #8
    6afc:	4303      	orrs	r3, r0
    6afe:	78a0      	ldrb	r0, [r4, #2]
    6b00:	0400      	lsls	r0, r0, #16
    6b02:	4303      	orrs	r3, r0
    6b04:	78e0      	ldrb	r0, [r4, #3]
    6b06:	0600      	lsls	r0, r0, #24
    6b08:	4318      	orrs	r0, r3
    6b0a:	3230      	adds	r2, #48	; 0x30
    6b0c:	491e      	ldr	r1, [pc, #120]	; (6b88 <LORAReg_InitAS+0x20c>)
    6b0e:	4b1f      	ldr	r3, [pc, #124]	; (6b8c <LORAReg_InitAS+0x210>)
    6b10:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    6b12:	2304      	movs	r3, #4
    6b14:	2104      	movs	r1, #4
    6b16:	2283      	movs	r2, #131	; 0x83
    6b18:	0092      	lsls	r2, r2, #2
    6b1a:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    6b1c:	2100      	movs	r1, #0
    6b1e:	4a1c      	ldr	r2, [pc, #112]	; (6b90 <LORAReg_InitAS+0x214>)
    6b20:	54a1      	strb	r1, [r4, r2]
    6b22:	18a2      	adds	r2, r4, r2
    6b24:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    6b26:	3101      	adds	r1, #1
    6b28:	4a1a      	ldr	r2, [pc, #104]	; (6b94 <LORAReg_InitAS+0x218>)
    6b2a:	54a1      	strb	r1, [r4, r2]
    6b2c:	18a2      	adds	r2, r4, r2
    6b2e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    6b30:	3101      	adds	r1, #1
    6b32:	4a12      	ldr	r2, [pc, #72]	; (6b7c <LORAReg_InitAS+0x200>)
    6b34:	54a1      	strb	r1, [r4, r2]
    6b36:	18a2      	adds	r2, r4, r2
    6b38:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6b3a:	2200      	movs	r2, #0
    6b3c:	4b16      	ldr	r3, [pc, #88]	; (6b98 <LORAReg_InitAS+0x21c>)
    6b3e:	54e2      	strb	r2, [r4, r3]
    6b40:	469c      	mov	ip, r3
    6b42:	4464      	add	r4, ip
    6b44:	2300      	movs	r3, #0
    6b46:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    6b48:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    6b4a:	3203      	adds	r2, #3
    6b4c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    6b4e:	4a13      	ldr	r2, [pc, #76]	; (6b9c <LORAReg_InitAS+0x220>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    6b50:	9200      	str	r2, [sp, #0]
    6b52:	4913      	ldr	r1, [pc, #76]	; (6ba0 <LORAReg_InitAS+0x224>)
    6b54:	9a03      	ldr	r2, [sp, #12]
    6b56:	4b13      	ldr	r3, [pc, #76]	; (6ba4 <LORAReg_InitAS+0x228>)
    6b58:	2004      	movs	r0, #4
    6b5a:	4c13      	ldr	r4, [pc, #76]	; (6ba8 <LORAReg_InitAS+0x22c>)
    6b5c:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6b5e:	2408      	movs	r4, #8
    6b60:	e7a6      	b.n	6ab0 <LORAReg_InitAS+0x134>
    6b62:	46c0      	nop			; (mov r8, r8)
    6b64:	20002310 	.word	0x20002310
    6b68:	2000230c 	.word	0x2000230c
    6b6c:	20000b08 	.word	0x20000b08
    6b70:	0000b3bd 	.word	0x0000b3bd
    6b74:	0000baed 	.word	0x0000baed
    6b78:	0000bdc1 	.word	0x0000bdc1
    6b7c:	00000213 	.word	0x00000213
    6b80:	0000c84d 	.word	0x0000c84d
    6b84:	00006879 	.word	0x00006879
    6b88:	0001e388 	.word	0x0001e388
    6b8c:	00018655 	.word	0x00018655
    6b90:	0000020f 	.word	0x0000020f
    6b94:	00000211 	.word	0x00000211
    6b98:	0000020d 	.word	0x0000020d
    6b9c:	00006875 	.word	0x00006875
    6ba0:	200020ec 	.word	0x200020ec
    6ba4:	0001e3d8 	.word	0x0001e3d8
    6ba8:	0000cb31 	.word	0x0000cb31

00006bac <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    6bac:	4770      	bx	lr
	...

00006bb0 <LORAReg_InitAU>:
{
    6bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bb2:	46de      	mov	lr, fp
    6bb4:	4657      	mov	r7, sl
    6bb6:	464e      	mov	r6, r9
    6bb8:	4645      	mov	r5, r8
    6bba:	b5e0      	push	{r5, r6, r7, lr}
    6bbc:	b087      	sub	sp, #28
    6bbe:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    6bc0:	4c7d      	ldr	r4, [pc, #500]	; (6db8 <LORAReg_InitAU+0x208>)
    6bc2:	2103      	movs	r1, #3
    6bc4:	2326      	movs	r3, #38	; 0x26
    6bc6:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    6bc8:	3145      	adds	r1, #69	; 0x45
    6bca:	3304      	adds	r3, #4
    6bcc:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    6bce:	3941      	subs	r1, #65	; 0x41
    6bd0:	3b03      	subs	r3, #3
    6bd2:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    6bd4:	0020      	movs	r0, r4
    6bd6:	30b4      	adds	r0, #180	; 0xb4
    6bd8:	2600      	movs	r6, #0
    6bda:	7120      	strb	r0, [r4, #4]
    6bdc:	0a03      	lsrs	r3, r0, #8
    6bde:	7163      	strb	r3, [r4, #5]
    6be0:	0c03      	lsrs	r3, r0, #16
    6be2:	71a3      	strb	r3, [r4, #6]
    6be4:	0e03      	lsrs	r3, r0, #24
    6be6:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    6be8:	2344      	movs	r3, #68	; 0x44
    6bea:	4698      	mov	r8, r3
    6bec:	44a0      	add	r8, r4
    6bee:	4643      	mov	r3, r8
    6bf0:	7023      	strb	r3, [r4, #0]
    6bf2:	4643      	mov	r3, r8
    6bf4:	0a1b      	lsrs	r3, r3, #8
    6bf6:	7063      	strb	r3, [r4, #1]
    6bf8:	4643      	mov	r3, r8
    6bfa:	0c1b      	lsrs	r3, r3, #16
    6bfc:	70a3      	strb	r3, [r4, #2]
    6bfe:	4643      	mov	r3, r8
    6c00:	0e1b      	lsrs	r3, r3, #24
    6c02:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    6c04:	2321      	movs	r3, #33	; 0x21
    6c06:	25ff      	movs	r5, #255	; 0xff
    6c08:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    6c0a:	3df7      	subs	r5, #247	; 0xf7
    6c0c:	2708      	movs	r7, #8
    6c0e:	3301      	adds	r3, #1
    6c10:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    6c12:	3301      	adds	r3, #1
    6c14:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    6c16:	3b83      	subs	r3, #131	; 0x83
    6c18:	469c      	mov	ip, r3
    6c1a:	7723      	strb	r3, [r4, #28]
    6c1c:	2370      	movs	r3, #112	; 0x70
    6c1e:	7763      	strb	r3, [r4, #29]
    6c20:	77a7      	strb	r7, [r4, #30]
    6c22:	3b39      	subs	r3, #57	; 0x39
    6c24:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    6c26:	3301      	adds	r3, #1
    6c28:	4699      	mov	r9, r3
    6c2a:	3b18      	subs	r3, #24
    6c2c:	464a      	mov	r2, r9
    6c2e:	54e2      	strb	r2, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    6c30:	2224      	movs	r2, #36	; 0x24
    6c32:	3b1a      	subs	r3, #26
    6c34:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    6c36:	3201      	adds	r2, #1
    6c38:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    6c3a:	321b      	adds	r2, #27
    6c3c:	4692      	mov	sl, r2
    6c3e:	3215      	adds	r2, #21
    6c40:	32ff      	adds	r2, #255	; 0xff
    6c42:	4653      	mov	r3, sl
    6c44:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    6c46:	2356      	movs	r3, #86	; 0x56
    6c48:	33ff      	adds	r3, #255	; 0xff
    6c4a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    6c4c:	3b05      	subs	r3, #5
    6c4e:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    6c50:	2352      	movs	r3, #82	; 0x52
    6c52:	33ff      	adds	r3, #255	; 0xff
    6c54:	3a4f      	subs	r2, #79	; 0x4f
    6c56:	3aff      	subs	r2, #255	; 0xff
    6c58:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    6c5a:	3301      	adds	r3, #1
    6c5c:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    6c5e:	3b46      	subs	r3, #70	; 0x46
    6c60:	3bff      	subs	r3, #255	; 0xff
    6c62:	4699      	mov	r9, r3
    6c64:	2354      	movs	r3, #84	; 0x54
    6c66:	33ff      	adds	r3, #255	; 0xff
    6c68:	464a      	mov	r2, r9
    6c6a:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    6c6c:	3303      	adds	r3, #3
    6c6e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    6c70:	2300      	movs	r3, #0
    6c72:	4699      	mov	r9, r3
    6c74:	3345      	adds	r3, #69	; 0x45
    6c76:	33ff      	adds	r3, #255	; 0xff
    6c78:	464a      	mov	r2, r9
    6c7a:	54e2      	strb	r2, [r4, r3]
    6c7c:	0023      	movs	r3, r4
    6c7e:	3345      	adds	r3, #69	; 0x45
    6c80:	33ff      	adds	r3, #255	; 0xff
    6c82:	2228      	movs	r2, #40	; 0x28
    6c84:	4252      	negs	r2, r2
    6c86:	705a      	strb	r2, [r3, #1]
    6c88:	2274      	movs	r2, #116	; 0x74
    6c8a:	4252      	negs	r2, r2
    6c8c:	709a      	strb	r2, [r3, #2]
    6c8e:	2236      	movs	r2, #54	; 0x36
    6c90:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    6c92:	2360      	movs	r3, #96	; 0x60
    6c94:	4699      	mov	r9, r3
    6c96:	33e8      	adds	r3, #232	; 0xe8
    6c98:	464a      	mov	r2, r9
    6c9a:	54e2      	strb	r2, [r4, r3]
    6c9c:	0023      	movs	r3, r4
    6c9e:	3349      	adds	r3, #73	; 0x49
    6ca0:	33ff      	adds	r3, #255	; 0xff
    6ca2:	227a      	movs	r2, #122	; 0x7a
    6ca4:	4252      	negs	r2, r2
    6ca6:	705a      	strb	r2, [r3, #1]
    6ca8:	2269      	movs	r2, #105	; 0x69
    6caa:	4252      	negs	r2, r2
    6cac:	709a      	strb	r2, [r3, #2]
    6cae:	2236      	movs	r2, #54	; 0x36
    6cb0:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    6cb2:	23a6      	movs	r3, #166	; 0xa6
    6cb4:	005b      	lsls	r3, r3, #1
    6cb6:	4662      	mov	r2, ip
    6cb8:	54e2      	strb	r2, [r4, r3]
    6cba:	0023      	movs	r3, r4
    6cbc:	334d      	adds	r3, #77	; 0x4d
    6cbe:	33ff      	adds	r3, #255	; 0xff
    6cc0:	2270      	movs	r2, #112	; 0x70
    6cc2:	705a      	strb	r2, [r3, #1]
    6cc4:	709f      	strb	r7, [r3, #2]
    6cc6:	2237      	movs	r2, #55	; 0x37
    6cc8:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    6cca:	0023      	movs	r3, r4
    6ccc:	3335      	adds	r3, #53	; 0x35
    6cce:	7523      	strb	r3, [r4, #20]
    6cd0:	0a1a      	lsrs	r2, r3, #8
    6cd2:	7562      	strb	r2, [r4, #21]
    6cd4:	0c1a      	lsrs	r2, r3, #16
    6cd6:	75a2      	strb	r2, [r4, #22]
    6cd8:	0e1b      	lsrs	r3, r3, #24
    6cda:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    6cdc:	0023      	movs	r3, r4
    6cde:	333e      	adds	r3, #62	; 0x3e
    6ce0:	7623      	strb	r3, [r4, #24]
    6ce2:	0a1a      	lsrs	r2, r3, #8
    6ce4:	7662      	strb	r2, [r4, #25]
    6ce6:	0c1a      	lsrs	r2, r3, #16
    6ce8:	76a2      	strb	r2, [r4, #26]
    6cea:	0e1b      	lsrs	r3, r3, #24
    6cec:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    6cee:	2305      	movs	r3, #5
    6cf0:	469c      	mov	ip, r3
    6cf2:	3327      	adds	r3, #39	; 0x27
    6cf4:	4662      	mov	r2, ip
    6cf6:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    6cf8:	3b22      	subs	r3, #34	; 0x22
    6cfa:	469c      	mov	ip, r3
    6cfc:	3323      	adds	r3, #35	; 0x23
    6cfe:	4662      	mov	r2, ip
    6d00:	54e2      	strb	r2, [r4, r3]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AU;
    6d02:	3301      	adds	r3, #1
    6d04:	54e1      	strb	r1, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    6d06:	3117      	adds	r1, #23
    6d08:	3b06      	subs	r3, #6
    6d0a:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    6d0c:	3331      	adds	r3, #49	; 0x31
    6d0e:	33ff      	adds	r3, #255	; 0xff
    6d10:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    6d12:	4b2a      	ldr	r3, [pc, #168]	; (6dbc <LORAReg_InitAU+0x20c>)
    6d14:	781a      	ldrb	r2, [r3, #0]
    6d16:	3120      	adds	r1, #32
    6d18:	5462      	strb	r2, [r4, r1]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    6d1a:	7859      	ldrb	r1, [r3, #1]
    6d1c:	233d      	movs	r3, #61	; 0x3d
    6d1e:	54e1      	strb	r1, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    6d20:	0023      	movs	r3, r4
    6d22:	3339      	adds	r3, #57	; 0x39
    6d24:	2100      	movs	r1, #0
    6d26:	7019      	strb	r1, [r3, #0]
    6d28:	7059      	strb	r1, [r3, #1]
    6d2a:	7099      	strb	r1, [r3, #2]
    6d2c:	70d9      	strb	r1, [r3, #3]
	RegParams.joinbccount =0;
    6d2e:	2343      	movs	r3, #67	; 0x43
    6d30:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    6d32:	0023      	movs	r3, r4
    6d34:	333f      	adds	r3, #63	; 0x3f
    6d36:	7019      	strb	r1, [r3, #0]
    6d38:	7059      	strb	r1, [r3, #1]
    6d3a:	7099      	strb	r1, [r3, #2]
    6d3c:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    6d3e:	232f      	movs	r3, #47	; 0x2f
    6d40:	465a      	mov	r2, fp
    6d42:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    6d44:	2290      	movs	r2, #144	; 0x90
    6d46:	491e      	ldr	r1, [pc, #120]	; (6dc0 <LORAReg_InitAU+0x210>)
    6d48:	4b1e      	ldr	r3, [pc, #120]	; (6dc4 <LORAReg_InitAU+0x214>)
    6d4a:	4699      	mov	r9, r3
    6d4c:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    6d4e:	2270      	movs	r2, #112	; 0x70
    6d50:	491d      	ldr	r1, [pc, #116]	; (6dc8 <LORAReg_InitAU+0x218>)
    6d52:	4640      	mov	r0, r8
    6d54:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    6d56:	2358      	movs	r3, #88	; 0x58
    6d58:	33ff      	adds	r3, #255	; 0xff
    6d5a:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    6d5c:	33b5      	adds	r3, #181	; 0xb5
    6d5e:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    6d60:	2200      	movs	r2, #0
    6d62:	4b1a      	ldr	r3, [pc, #104]	; (6dcc <LORAReg_InitAU+0x21c>)
    6d64:	54e2      	strb	r2, [r4, r3]
    6d66:	18e3      	adds	r3, r4, r3
    6d68:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    6d6a:	4b19      	ldr	r3, [pc, #100]	; (6dd0 <LORAReg_InitAU+0x220>)
    6d6c:	54e2      	strb	r2, [r4, r3]
    6d6e:	18e3      	adds	r3, r4, r3
    6d70:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    6d72:	4b18      	ldr	r3, [pc, #96]	; (6dd4 <LORAReg_InitAU+0x224>)
    6d74:	54e2      	strb	r2, [r4, r3]
    6d76:	18e3      	adds	r3, r4, r3
    6d78:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    6d7a:	3201      	adds	r2, #1
    6d7c:	4b16      	ldr	r3, [pc, #88]	; (6dd8 <LORAReg_InitAU+0x228>)
    6d7e:	54e2      	strb	r2, [r4, r3]
    6d80:	469c      	mov	ip, r3
    6d82:	4464      	add	r4, ip
    6d84:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    6d86:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    6d88:	3201      	adds	r2, #1
    6d8a:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    6d8c:	4a13      	ldr	r2, [pc, #76]	; (6ddc <LORAReg_InitAU+0x22c>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    6d8e:	9200      	str	r2, [sp, #0]
    6d90:	4913      	ldr	r1, [pc, #76]	; (6de0 <LORAReg_InitAU+0x230>)
    6d92:	9a03      	ldr	r2, [sp, #12]
    6d94:	4b13      	ldr	r3, [pc, #76]	; (6de4 <LORAReg_InitAU+0x234>)
    6d96:	2008      	movs	r0, #8
    6d98:	4c13      	ldr	r4, [pc, #76]	; (6de8 <LORAReg_InitAU+0x238>)
    6d9a:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    6d9c:	4b13      	ldr	r3, [pc, #76]	; (6dec <LORAReg_InitAU+0x23c>)
    6d9e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    6da0:	4b13      	ldr	r3, [pc, #76]	; (6df0 <LORAReg_InitAU+0x240>)
    6da2:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    6da4:	4b13      	ldr	r3, [pc, #76]	; (6df4 <LORAReg_InitAU+0x244>)
    6da6:	4798      	blx	r3
}
    6da8:	2008      	movs	r0, #8
    6daa:	b007      	add	sp, #28
    6dac:	bc3c      	pop	{r2, r3, r4, r5}
    6dae:	4690      	mov	r8, r2
    6db0:	4699      	mov	r9, r3
    6db2:	46a2      	mov	sl, r4
    6db4:	46ab      	mov	fp, r5
    6db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6db8:	20002310 	.word	0x20002310
    6dbc:	2000230c 	.word	0x2000230c
    6dc0:	0001e3f0 	.word	0x0001e3f0
    6dc4:	00018655 	.word	0x00018655
    6dc8:	0001e480 	.word	0x0001e480
    6dcc:	0000020f 	.word	0x0000020f
    6dd0:	00000211 	.word	0x00000211
    6dd4:	00000213 	.word	0x00000213
    6dd8:	0000020d 	.word	0x0000020d
    6ddc:	00006bad 	.word	0x00006bad
    6de0:	200020f0 	.word	0x200020f0
    6de4:	0001e4f0 	.word	0x0001e4f0
    6de8:	0000cb31 	.word	0x0000cb31
    6dec:	0000b505 	.word	0x0000b505
    6df0:	0000bb59 	.word	0x0000bb59
    6df4:	0000be35 	.word	0x0000be35

00006df8 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    6df8:	4770      	bx	lr
	...

00006dfc <InitDefault868Channels>:
{
    6dfc:	b570      	push	{r4, r5, r6, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    6dfe:	4c39      	ldr	r4, [pc, #228]	; (6ee4 <InitDefault868Channels+0xe8>)
    6e00:	7920      	ldrb	r0, [r4, #4]
    6e02:	7963      	ldrb	r3, [r4, #5]
    6e04:	021b      	lsls	r3, r3, #8
    6e06:	4303      	orrs	r3, r0
    6e08:	79a0      	ldrb	r0, [r4, #6]
    6e0a:	0400      	lsls	r0, r0, #16
    6e0c:	4303      	orrs	r3, r0
    6e0e:	79e0      	ldrb	r0, [r4, #7]
    6e10:	0600      	lsls	r0, r0, #24
    6e12:	4318      	orrs	r0, r3
    6e14:	2206      	movs	r2, #6
    6e16:	2100      	movs	r1, #0
    6e18:	4e33      	ldr	r6, [pc, #204]	; (6ee8 <InitDefault868Channels+0xec>)
    6e1a:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    6e1c:	7920      	ldrb	r0, [r4, #4]
    6e1e:	7963      	ldrb	r3, [r4, #5]
    6e20:	021b      	lsls	r3, r3, #8
    6e22:	4303      	orrs	r3, r0
    6e24:	79a0      	ldrb	r0, [r4, #6]
    6e26:	0400      	lsls	r0, r0, #16
    6e28:	4303      	orrs	r3, r0
    6e2a:	79e0      	ldrb	r0, [r4, #7]
    6e2c:	0600      	lsls	r0, r0, #24
    6e2e:	4318      	orrs	r0, r3
    6e30:	2206      	movs	r2, #6
    6e32:	492e      	ldr	r1, [pc, #184]	; (6eec <InitDefault868Channels+0xf0>)
    6e34:	4d2e      	ldr	r5, [pc, #184]	; (6ef0 <InitDefault868Channels+0xf4>)
    6e36:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    6e38:	7a20      	ldrb	r0, [r4, #8]
    6e3a:	7a63      	ldrb	r3, [r4, #9]
    6e3c:	021b      	lsls	r3, r3, #8
    6e3e:	4303      	orrs	r3, r0
    6e40:	7aa0      	ldrb	r0, [r4, #10]
    6e42:	0400      	lsls	r0, r0, #16
    6e44:	4303      	orrs	r3, r0
    6e46:	7ae0      	ldrb	r0, [r4, #11]
    6e48:	0600      	lsls	r0, r0, #24
    6e4a:	4318      	orrs	r0, r3
    6e4c:	2224      	movs	r2, #36	; 0x24
    6e4e:	2100      	movs	r1, #0
    6e50:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    6e52:	7a20      	ldrb	r0, [r4, #8]
    6e54:	7a63      	ldrb	r3, [r4, #9]
    6e56:	021b      	lsls	r3, r3, #8
    6e58:	4303      	orrs	r3, r0
    6e5a:	7aa0      	ldrb	r0, [r4, #10]
    6e5c:	0400      	lsls	r0, r0, #16
    6e5e:	4303      	orrs	r3, r0
    6e60:	7ae0      	ldrb	r0, [r4, #11]
    6e62:	0600      	lsls	r0, r0, #24
    6e64:	4318      	orrs	r0, r3
    6e66:	2224      	movs	r2, #36	; 0x24
    6e68:	4922      	ldr	r1, [pc, #136]	; (6ef4 <InitDefault868Channels+0xf8>)
    6e6a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    6e6c:	7b20      	ldrb	r0, [r4, #12]
    6e6e:	7b63      	ldrb	r3, [r4, #13]
    6e70:	021b      	lsls	r3, r3, #8
    6e72:	4303      	orrs	r3, r0
    6e74:	7ba0      	ldrb	r0, [r4, #14]
    6e76:	0400      	lsls	r0, r0, #16
    6e78:	4303      	orrs	r3, r0
    6e7a:	7be0      	ldrb	r0, [r4, #15]
    6e7c:	0600      	lsls	r0, r0, #24
    6e7e:	4318      	orrs	r0, r3
    6e80:	2248      	movs	r2, #72	; 0x48
    6e82:	2100      	movs	r1, #0
    6e84:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    6e86:	7b20      	ldrb	r0, [r4, #12]
    6e88:	7b63      	ldrb	r3, [r4, #13]
    6e8a:	021b      	lsls	r3, r3, #8
    6e8c:	4303      	orrs	r3, r0
    6e8e:	7ba0      	ldrb	r0, [r4, #14]
    6e90:	0400      	lsls	r0, r0, #16
    6e92:	4303      	orrs	r3, r0
    6e94:	7be0      	ldrb	r0, [r4, #15]
    6e96:	0600      	lsls	r0, r0, #24
    6e98:	4318      	orrs	r0, r3
    6e9a:	2248      	movs	r2, #72	; 0x48
    6e9c:	4916      	ldr	r1, [pc, #88]	; (6ef8 <InitDefault868Channels+0xfc>)
    6e9e:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    6ea0:	0020      	movs	r0, r4
    6ea2:	30af      	adds	r0, #175	; 0xaf
    6ea4:	30ff      	adds	r0, #255	; 0xff
    6ea6:	220c      	movs	r2, #12
    6ea8:	4914      	ldr	r1, [pc, #80]	; (6efc <InitDefault868Channels+0x100>)
    6eaa:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    6eac:	232a      	movs	r3, #42	; 0x2a
    6eae:	56e3      	ldrsb	r3, [r4, r3]
    6eb0:	2b03      	cmp	r3, #3
    6eb2:	dd15      	ble.n	6ee0 <InitDefault868Channels+0xe4>
    6eb4:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    6eb6:	480b      	ldr	r0, [pc, #44]	; (6ee4 <InitDefault868Channels+0xe8>)
    6eb8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    6eba:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    6ebc:	7902      	ldrb	r2, [r0, #4]
    6ebe:	7941      	ldrb	r1, [r0, #5]
    6ec0:	0209      	lsls	r1, r1, #8
    6ec2:	4311      	orrs	r1, r2
    6ec4:	7982      	ldrb	r2, [r0, #6]
    6ec6:	0412      	lsls	r2, r2, #16
    6ec8:	4311      	orrs	r1, r2
    6eca:	79c2      	ldrb	r2, [r0, #7]
    6ecc:	0612      	lsls	r2, r2, #24
    6ece:	430a      	orrs	r2, r1
    6ed0:	0059      	lsls	r1, r3, #1
    6ed2:	188a      	adds	r2, r1, r2
    6ed4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    6ed6:	3301      	adds	r3, #1
    6ed8:	b2db      	uxtb	r3, r3
    6eda:	5702      	ldrsb	r2, [r0, r4]
    6edc:	4293      	cmp	r3, r2
    6ede:	dbed      	blt.n	6ebc <InitDefault868Channels+0xc0>
}
    6ee0:	bd70      	pop	{r4, r5, r6, pc}
    6ee2:	46c0      	nop			; (mov r8, r8)
    6ee4:	20002310 	.word	0x20002310
    6ee8:	00018779 	.word	0x00018779
    6eec:	0001e550 	.word	0x0001e550
    6ef0:	00018655 	.word	0x00018655
    6ef4:	0001e524 	.word	0x0001e524
    6ef8:	0001e5b0 	.word	0x0001e5b0
    6efc:	0001e598 	.word	0x0001e598

00006f00 <InitDefault433Channels>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    6f02:	4c36      	ldr	r4, [pc, #216]	; (6fdc <InitDefault433Channels+0xdc>)
    6f04:	7920      	ldrb	r0, [r4, #4]
    6f06:	7963      	ldrb	r3, [r4, #5]
    6f08:	021b      	lsls	r3, r3, #8
    6f0a:	4303      	orrs	r3, r0
    6f0c:	79a0      	ldrb	r0, [r4, #6]
    6f0e:	0400      	lsls	r0, r0, #16
    6f10:	4303      	orrs	r3, r0
    6f12:	79e0      	ldrb	r0, [r4, #7]
    6f14:	0600      	lsls	r0, r0, #24
    6f16:	4318      	orrs	r0, r3
    6f18:	2206      	movs	r2, #6
    6f1a:	2100      	movs	r1, #0
    6f1c:	4e30      	ldr	r6, [pc, #192]	; (6fe0 <InitDefault433Channels+0xe0>)
    6f1e:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    6f20:	7920      	ldrb	r0, [r4, #4]
    6f22:	7963      	ldrb	r3, [r4, #5]
    6f24:	021b      	lsls	r3, r3, #8
    6f26:	4303      	orrs	r3, r0
    6f28:	79a0      	ldrb	r0, [r4, #6]
    6f2a:	0400      	lsls	r0, r0, #16
    6f2c:	4303      	orrs	r3, r0
    6f2e:	79e0      	ldrb	r0, [r4, #7]
    6f30:	0600      	lsls	r0, r0, #24
    6f32:	4318      	orrs	r0, r3
    6f34:	2206      	movs	r2, #6
    6f36:	492b      	ldr	r1, [pc, #172]	; (6fe4 <InitDefault433Channels+0xe4>)
    6f38:	4d2b      	ldr	r5, [pc, #172]	; (6fe8 <InitDefault433Channels+0xe8>)
    6f3a:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    6f3c:	7a20      	ldrb	r0, [r4, #8]
    6f3e:	7a63      	ldrb	r3, [r4, #9]
    6f40:	021b      	lsls	r3, r3, #8
    6f42:	4303      	orrs	r3, r0
    6f44:	7aa0      	ldrb	r0, [r4, #10]
    6f46:	0400      	lsls	r0, r0, #16
    6f48:	4303      	orrs	r3, r0
    6f4a:	7ae0      	ldrb	r0, [r4, #11]
    6f4c:	0600      	lsls	r0, r0, #24
    6f4e:	4318      	orrs	r0, r3
    6f50:	2224      	movs	r2, #36	; 0x24
    6f52:	2100      	movs	r1, #0
    6f54:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    6f56:	7a20      	ldrb	r0, [r4, #8]
    6f58:	7a63      	ldrb	r3, [r4, #9]
    6f5a:	021b      	lsls	r3, r3, #8
    6f5c:	4303      	orrs	r3, r0
    6f5e:	7aa0      	ldrb	r0, [r4, #10]
    6f60:	0400      	lsls	r0, r0, #16
    6f62:	4303      	orrs	r3, r0
    6f64:	7ae0      	ldrb	r0, [r4, #11]
    6f66:	0600      	lsls	r0, r0, #24
    6f68:	4318      	orrs	r0, r3
    6f6a:	2224      	movs	r2, #36	; 0x24
    6f6c:	491f      	ldr	r1, [pc, #124]	; (6fec <InitDefault433Channels+0xec>)
    6f6e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    6f70:	7b20      	ldrb	r0, [r4, #12]
    6f72:	7b63      	ldrb	r3, [r4, #13]
    6f74:	021b      	lsls	r3, r3, #8
    6f76:	4303      	orrs	r3, r0
    6f78:	7ba0      	ldrb	r0, [r4, #14]
    6f7a:	0400      	lsls	r0, r0, #16
    6f7c:	4303      	orrs	r3, r0
    6f7e:	7be0      	ldrb	r0, [r4, #15]
    6f80:	0600      	lsls	r0, r0, #24
    6f82:	4318      	orrs	r0, r3
    6f84:	220c      	movs	r2, #12
    6f86:	2100      	movs	r1, #0
    6f88:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    6f8a:	7b20      	ldrb	r0, [r4, #12]
    6f8c:	7b63      	ldrb	r3, [r4, #13]
    6f8e:	021b      	lsls	r3, r3, #8
    6f90:	4303      	orrs	r3, r0
    6f92:	7ba0      	ldrb	r0, [r4, #14]
    6f94:	0400      	lsls	r0, r0, #16
    6f96:	4303      	orrs	r3, r0
    6f98:	7be0      	ldrb	r0, [r4, #15]
    6f9a:	0600      	lsls	r0, r0, #24
    6f9c:	4318      	orrs	r0, r3
    6f9e:	220c      	movs	r2, #12
    6fa0:	4913      	ldr	r1, [pc, #76]	; (6ff0 <InitDefault433Channels+0xf0>)
    6fa2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    6fa4:	232a      	movs	r3, #42	; 0x2a
    6fa6:	56e3      	ldrsb	r3, [r4, r3]
    6fa8:	2b03      	cmp	r3, #3
    6faa:	dd15      	ble.n	6fd8 <InitDefault433Channels+0xd8>
    6fac:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6fae:	480b      	ldr	r0, [pc, #44]	; (6fdc <InitDefault433Channels+0xdc>)
    6fb0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    6fb2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6fb4:	7902      	ldrb	r2, [r0, #4]
    6fb6:	7941      	ldrb	r1, [r0, #5]
    6fb8:	0209      	lsls	r1, r1, #8
    6fba:	4311      	orrs	r1, r2
    6fbc:	7982      	ldrb	r2, [r0, #6]
    6fbe:	0412      	lsls	r2, r2, #16
    6fc0:	4311      	orrs	r1, r2
    6fc2:	79c2      	ldrb	r2, [r0, #7]
    6fc4:	0612      	lsls	r2, r2, #24
    6fc6:	430a      	orrs	r2, r1
    6fc8:	0059      	lsls	r1, r3, #1
    6fca:	188a      	adds	r2, r1, r2
    6fcc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    6fce:	3301      	adds	r3, #1
    6fd0:	b2db      	uxtb	r3, r3
    6fd2:	5702      	ldrsb	r2, [r0, r4]
    6fd4:	4293      	cmp	r3, r2
    6fd6:	dbed      	blt.n	6fb4 <InitDefault433Channels+0xb4>
}
    6fd8:	bd70      	pop	{r4, r5, r6, pc}
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	20002310 	.word	0x20002310
    6fe0:	00018779 	.word	0x00018779
    6fe4:	0001e548 	.word	0x0001e548
    6fe8:	00018655 	.word	0x00018655
    6fec:	0001e500 	.word	0x0001e500
    6ff0:	0001e5a4 	.word	0x0001e5a4

00006ff4 <LORAReg_InitEU>:
{
    6ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ff6:	46c6      	mov	lr, r8
    6ff8:	b500      	push	{lr}
    6ffa:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    6ffc:	4b7b      	ldr	r3, [pc, #492]	; (71ec <LORAReg_InitEU+0x1f8>)
    6ffe:	2103      	movs	r1, #3
    7000:	2226      	movs	r2, #38	; 0x26
    7002:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    7004:	2510      	movs	r5, #16
    7006:	3204      	adds	r2, #4
    7008:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    700a:	2406      	movs	r4, #6
    700c:	3a01      	subs	r2, #1
    700e:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    7010:	2601      	movs	r6, #1
    7012:	3a02      	subs	r2, #2
    7014:	549e      	strb	r6, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    7016:	001a      	movs	r2, r3
    7018:	3284      	adds	r2, #132	; 0x84
    701a:	2400      	movs	r4, #0
    701c:	711a      	strb	r2, [r3, #4]
    701e:	0a17      	lsrs	r7, r2, #8
    7020:	715f      	strb	r7, [r3, #5]
    7022:	0c17      	lsrs	r7, r2, #16
    7024:	719f      	strb	r7, [r3, #6]
    7026:	0e12      	lsrs	r2, r2, #24
    7028:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    702a:	001a      	movs	r2, r3
    702c:	3244      	adds	r2, #68	; 0x44
    702e:	701a      	strb	r2, [r3, #0]
    7030:	0a17      	lsrs	r7, r2, #8
    7032:	705f      	strb	r7, [r3, #1]
    7034:	0c17      	lsrs	r7, r2, #16
    7036:	709f      	strb	r7, [r3, #2]
    7038:	0e12      	lsrs	r2, r2, #24
    703a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    703c:	001a      	movs	r2, r3
    703e:	32c5      	adds	r2, #197	; 0xc5
    7040:	32ff      	adds	r2, #255	; 0xff
    7042:	731a      	strb	r2, [r3, #12]
    7044:	0a17      	lsrs	r7, r2, #8
    7046:	735f      	strb	r7, [r3, #13]
    7048:	0c17      	lsrs	r7, r2, #16
    704a:	739f      	strb	r7, [r3, #14]
    704c:	0e12      	lsrs	r2, r2, #24
    704e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    7050:	001a      	movs	r2, r3
    7052:	32a4      	adds	r2, #164	; 0xa4
    7054:	721a      	strb	r2, [r3, #8]
    7056:	0a17      	lsrs	r7, r2, #8
    7058:	725f      	strb	r7, [r3, #9]
    705a:	0c17      	lsrs	r7, r2, #16
    705c:	729f      	strb	r7, [r3, #10]
    705e:	0e12      	lsrs	r2, r2, #24
    7060:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7062:	001a      	movs	r2, r3
    7064:	3265      	adds	r2, #101	; 0x65
    7066:	32ff      	adds	r2, #255	; 0xff
    7068:	741a      	strb	r2, [r3, #16]
    706a:	0a17      	lsrs	r7, r2, #8
    706c:	745f      	strb	r7, [r3, #17]
    706e:	0c17      	lsrs	r7, r2, #16
    7070:	749f      	strb	r7, [r3, #18]
    7072:	0e12      	lsrs	r2, r2, #24
    7074:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    7076:	001a      	movs	r2, r3
    7078:	3235      	adds	r2, #53	; 0x35
    707a:	751a      	strb	r2, [r3, #20]
    707c:	0a17      	lsrs	r7, r2, #8
    707e:	755f      	strb	r7, [r3, #21]
    7080:	0c17      	lsrs	r7, r2, #16
    7082:	759f      	strb	r7, [r3, #22]
    7084:	0e12      	lsrs	r2, r2, #24
    7086:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    7088:	001a      	movs	r2, r3
    708a:	323e      	adds	r2, #62	; 0x3e
    708c:	761a      	strb	r2, [r3, #24]
    708e:	0a17      	lsrs	r7, r2, #8
    7090:	765f      	strb	r7, [r3, #25]
    7092:	0c17      	lsrs	r7, r2, #16
    7094:	769f      	strb	r7, [r3, #26]
    7096:	0e12      	lsrs	r2, r2, #24
    7098:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    709a:	2221      	movs	r2, #33	; 0x21
    709c:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    709e:	2722      	movs	r7, #34	; 0x22
    70a0:	3a01      	subs	r2, #1
    70a2:	549f      	strb	r7, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    70a4:	3a19      	subs	r2, #25
    70a6:	4690      	mov	r8, r2
    70a8:	3702      	adds	r7, #2
    70aa:	55da      	strb	r2, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    70ac:	3701      	adds	r7, #1
    70ae:	55dc      	strb	r4, [r3, r7]
	RegParams.Rx1DrOffset = 5;
    70b0:	3f20      	subs	r7, #32
    70b2:	46bc      	mov	ip, r7
    70b4:	3727      	adds	r7, #39	; 0x27
    70b6:	4662      	mov	r2, ip
    70b8:	55da      	strb	r2, [r3, r7]
	RegParams.maxTxPwrIndx = 7;
    70ba:	3701      	adds	r7, #1
    70bc:	4642      	mov	r2, r8
    70be:	55da      	strb	r2, [r3, r7]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_EU;
    70c0:	222e      	movs	r2, #46	; 0x2e
    70c2:	549e      	strb	r6, [r3, r2]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    70c4:	22c2      	movs	r2, #194	; 0xc2
    70c6:	32ff      	adds	r2, #255	; 0xff
    70c8:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    70ca:	3a9a      	subs	r2, #154	; 0x9a
    70cc:	3aff      	subs	r2, #255	; 0xff
    70ce:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    70d0:	4a47      	ldr	r2, [pc, #284]	; (71f0 <LORAReg_InitEU+0x1fc>)
    70d2:	7815      	ldrb	r5, [r2, #0]
    70d4:	3166      	adds	r1, #102	; 0x66
    70d6:	31ff      	adds	r1, #255	; 0xff
    70d8:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    70da:	7855      	ldrb	r5, [r2, #1]
    70dc:	392b      	subs	r1, #43	; 0x2b
    70de:	39ff      	subs	r1, #255	; 0xff
    70e0:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    70e2:	7891      	ldrb	r1, [r2, #2]
    70e4:	223d      	movs	r2, #61	; 0x3d
    70e6:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    70e8:	001a      	movs	r2, r3
    70ea:	3239      	adds	r2, #57	; 0x39
    70ec:	2100      	movs	r1, #0
    70ee:	7011      	strb	r1, [r2, #0]
    70f0:	7051      	strb	r1, [r2, #1]
    70f2:	7091      	strb	r1, [r2, #2]
    70f4:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    70f6:	2243      	movs	r2, #67	; 0x43
    70f8:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    70fa:	001a      	movs	r2, r3
    70fc:	323f      	adds	r2, #63	; 0x3f
    70fe:	7011      	strb	r1, [r2, #0]
    7100:	7051      	strb	r1, [r2, #1]
    7102:	7091      	strb	r1, [r2, #2]
    7104:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    7106:	222f      	movs	r2, #47	; 0x2f
    7108:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    710a:	2800      	cmp	r0, #0
    710c:	d007      	beq.n	711e <LORAReg_InitEU+0x12a>
		return UNSUPPORTED_BAND;
    710e:	23c7      	movs	r3, #199	; 0xc7
	else if(ismBand == ISM_EU433)
    7110:	2801      	cmp	r0, #1
    7112:	d058      	beq.n	71c6 <LORAReg_InitEU+0x1d2>
}
    7114:	0018      	movs	r0, r3
    7116:	b00a      	add	sp, #40	; 0x28
    7118:	bc04      	pop	{r2}
    711a:	4690      	mov	r8, r2
    711c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault868Channels ();
    711e:	4b35      	ldr	r3, [pc, #212]	; (71f4 <LORAReg_InitEU+0x200>)
    7120:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    7122:	4b32      	ldr	r3, [pc, #200]	; (71ec <LORAReg_InitEU+0x1f8>)
    7124:	2200      	movs	r2, #0
    7126:	2122      	movs	r1, #34	; 0x22
    7128:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    712a:	3101      	adds	r1, #1
    712c:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    712e:	3208      	adds	r2, #8
    7130:	771a      	strb	r2, [r3, #28]
    7132:	3a22      	subs	r2, #34	; 0x22
    7134:	775a      	strb	r2, [r3, #29]
    7136:	3a13      	subs	r2, #19
    7138:	779a      	strb	r2, [r3, #30]
    713a:	3260      	adds	r2, #96	; 0x60
    713c:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    713e:	3920      	subs	r1, #32
    7140:	32da      	adds	r2, #218	; 0xda
    7142:	32ff      	adds	r2, #255	; 0xff
    7144:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    7146:	2100      	movs	r1, #0
    7148:	4a2b      	ldr	r2, [pc, #172]	; (71f8 <LORAReg_InitEU+0x204>)
    714a:	5499      	strb	r1, [r3, r2]
    714c:	189a      	adds	r2, r3, r2
    714e:	2103      	movs	r1, #3
    7150:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    7152:	2100      	movs	r1, #0
    7154:	4a29      	ldr	r2, [pc, #164]	; (71fc <LORAReg_InitEU+0x208>)
    7156:	5499      	strb	r1, [r3, r2]
    7158:	189a      	adds	r2, r3, r2
    715a:	310b      	adds	r1, #11
    715c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    715e:	2100      	movs	r1, #0
    7160:	4a27      	ldr	r2, [pc, #156]	; (7200 <LORAReg_InitEU+0x20c>)
    7162:	5499      	strb	r1, [r3, r2]
    7164:	189a      	adds	r2, r3, r2
    7166:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    7168:	4a26      	ldr	r2, [pc, #152]	; (7204 <LORAReg_InitEU+0x210>)
    716a:	5499      	strb	r1, [r3, r2]
    716c:	4694      	mov	ip, r2
    716e:	4463      	add	r3, ip
    7170:	2200      	movs	r2, #0
    7172:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    7174:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    7176:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    7178:	4d23      	ldr	r5, [pc, #140]	; (7208 <LORAReg_InitEU+0x214>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    717a:	9500      	str	r5, [sp, #0]
    717c:	4923      	ldr	r1, [pc, #140]	; (720c <LORAReg_InitEU+0x218>)
    717e:	9a03      	ldr	r2, [sp, #12]
    7180:	4b23      	ldr	r3, [pc, #140]	; (7210 <LORAReg_InitEU+0x21c>)
    7182:	2003      	movs	r0, #3
    7184:	4c23      	ldr	r4, [pc, #140]	; (7214 <LORAReg_InitEU+0x220>)
    7186:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    7188:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    718a:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    718c:	9500      	str	r5, [sp, #0]
    718e:	4922      	ldr	r1, [pc, #136]	; (7218 <LORAReg_InitEU+0x224>)
    7190:	9a07      	ldr	r2, [sp, #28]
    7192:	4b22      	ldr	r3, [pc, #136]	; (721c <LORAReg_InitEU+0x228>)
    7194:	200b      	movs	r0, #11
    7196:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    7198:	4a14      	ldr	r2, [pc, #80]	; (71ec <LORAReg_InitEU+0x1f8>)
    719a:	7810      	ldrb	r0, [r2, #0]
    719c:	7853      	ldrb	r3, [r2, #1]
    719e:	021b      	lsls	r3, r3, #8
    71a0:	4303      	orrs	r3, r0
    71a2:	7890      	ldrb	r0, [r2, #2]
    71a4:	0400      	lsls	r0, r0, #16
    71a6:	4303      	orrs	r3, r0
    71a8:	78d0      	ldrb	r0, [r2, #3]
    71aa:	0600      	lsls	r0, r0, #24
    71ac:	4318      	orrs	r0, r3
    71ae:	2240      	movs	r2, #64	; 0x40
    71b0:	491b      	ldr	r1, [pc, #108]	; (7220 <LORAReg_InitEU+0x22c>)
    71b2:	4b1c      	ldr	r3, [pc, #112]	; (7224 <LORAReg_InitEU+0x230>)
    71b4:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    71b6:	4b1c      	ldr	r3, [pc, #112]	; (7228 <LORAReg_InitEU+0x234>)
    71b8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    71ba:	4b1c      	ldr	r3, [pc, #112]	; (722c <LORAReg_InitEU+0x238>)
    71bc:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    71be:	4b1c      	ldr	r3, [pc, #112]	; (7230 <LORAReg_InitEU+0x23c>)
    71c0:	4798      	blx	r3
	return status;
    71c2:	2308      	movs	r3, #8
    71c4:	e7a6      	b.n	7114 <LORAReg_InitEU+0x120>
		InitDefault433Channels ();
    71c6:	4b1b      	ldr	r3, [pc, #108]	; (7234 <LORAReg_InitEU+0x240>)
    71c8:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    71ca:	4b08      	ldr	r3, [pc, #32]	; (71ec <LORAReg_InitEU+0x1f8>)
    71cc:	2105      	movs	r1, #5
    71ce:	2222      	movs	r2, #34	; 0x22
    71d0:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    71d2:	2100      	movs	r1, #0
    71d4:	3201      	adds	r2, #1
    71d6:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    71d8:	3a93      	subs	r2, #147	; 0x93
    71da:	771a      	strb	r2, [r3, #28]
    71dc:	3241      	adds	r2, #65	; 0x41
    71de:	775a      	strb	r2, [r3, #29]
    71e0:	3a02      	subs	r2, #2
    71e2:	779a      	strb	r2, [r3, #30]
    71e4:	324a      	adds	r2, #74	; 0x4a
    71e6:	77da      	strb	r2, [r3, #31]
    71e8:	e7d6      	b.n	7198 <LORAReg_InitEU+0x1a4>
    71ea:	46c0      	nop			; (mov r8, r8)
    71ec:	20002310 	.word	0x20002310
    71f0:	2000230c 	.word	0x2000230c
    71f4:	00006dfd 	.word	0x00006dfd
    71f8:	0000020f 	.word	0x0000020f
    71fc:	00000211 	.word	0x00000211
    7200:	00000213 	.word	0x00000213
    7204:	0000020d 	.word	0x0000020d
    7208:	00006df9 	.word	0x00006df9
    720c:	200020f4 	.word	0x200020f4
    7210:	0001e5f8 	.word	0x0001e5f8
    7214:	0000cb31 	.word	0x0000cb31
    7218:	200020f8 	.word	0x200020f8
    721c:	0001e600 	.word	0x0001e600
    7220:	0001e558 	.word	0x0001e558
    7224:	00018655 	.word	0x00018655
    7228:	0000b275 	.word	0x0000b275
    722c:	0000ba85 	.word	0x0000ba85
    7230:	0000bd55 	.word	0x0000bd55
    7234:	00006f01 	.word	0x00006f01

00007238 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    7238:	4770      	bx	lr
	...

0000723c <LORAReg_InitIN>:
{
    723c:	b570      	push	{r4, r5, r6, lr}
    723e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    7240:	4b71      	ldr	r3, [pc, #452]	; (7408 <LORAReg_InitIN+0x1cc>)
    7242:	2503      	movs	r5, #3
    7244:	2226      	movs	r2, #38	; 0x26
    7246:	549d      	strb	r5, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    7248:	2110      	movs	r1, #16
    724a:	3204      	adds	r2, #4
    724c:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    724e:	2401      	movs	r4, #1
    7250:	3a01      	subs	r2, #1
    7252:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    7254:	3a02      	subs	r2, #2
    7256:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    7258:	001a      	movs	r2, r3
    725a:	3284      	adds	r2, #132	; 0x84
    725c:	2100      	movs	r1, #0
    725e:	711a      	strb	r2, [r3, #4]
    7260:	0a16      	lsrs	r6, r2, #8
    7262:	715e      	strb	r6, [r3, #5]
    7264:	0c16      	lsrs	r6, r2, #16
    7266:	719e      	strb	r6, [r3, #6]
    7268:	0e12      	lsrs	r2, r2, #24
    726a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    726c:	001a      	movs	r2, r3
    726e:	3244      	adds	r2, #68	; 0x44
    7270:	701a      	strb	r2, [r3, #0]
    7272:	0a16      	lsrs	r6, r2, #8
    7274:	705e      	strb	r6, [r3, #1]
    7276:	0c16      	lsrs	r6, r2, #16
    7278:	709e      	strb	r6, [r3, #2]
    727a:	0e12      	lsrs	r2, r2, #24
    727c:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    727e:	001a      	movs	r2, r3
    7280:	32a4      	adds	r2, #164	; 0xa4
    7282:	721a      	strb	r2, [r3, #8]
    7284:	0a16      	lsrs	r6, r2, #8
    7286:	725e      	strb	r6, [r3, #9]
    7288:	0c16      	lsrs	r6, r2, #16
    728a:	729e      	strb	r6, [r3, #10]
    728c:	0e12      	lsrs	r2, r2, #24
    728e:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7290:	001a      	movs	r2, r3
    7292:	3265      	adds	r2, #101	; 0x65
    7294:	32ff      	adds	r2, #255	; 0xff
    7296:	741a      	strb	r2, [r3, #16]
    7298:	0a16      	lsrs	r6, r2, #8
    729a:	745e      	strb	r6, [r3, #17]
    729c:	0c16      	lsrs	r6, r2, #16
    729e:	749e      	strb	r6, [r3, #18]
    72a0:	0e12      	lsrs	r2, r2, #24
    72a2:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    72a4:	001a      	movs	r2, r3
    72a6:	3235      	adds	r2, #53	; 0x35
    72a8:	751a      	strb	r2, [r3, #20]
    72aa:	0a16      	lsrs	r6, r2, #8
    72ac:	755e      	strb	r6, [r3, #21]
    72ae:	0c16      	lsrs	r6, r2, #16
    72b0:	759e      	strb	r6, [r3, #22]
    72b2:	0e12      	lsrs	r2, r2, #24
    72b4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    72b6:	001a      	movs	r2, r3
    72b8:	323e      	adds	r2, #62	; 0x3e
    72ba:	761a      	strb	r2, [r3, #24]
    72bc:	0a16      	lsrs	r6, r2, #8
    72be:	765e      	strb	r6, [r3, #25]
    72c0:	0c16      	lsrs	r6, r2, #16
    72c2:	769e      	strb	r6, [r3, #26]
    72c4:	0e12      	lsrs	r2, r2, #24
    72c6:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    72c8:	2222      	movs	r2, #34	; 0x22
    72ca:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    72cc:	2602      	movs	r6, #2
    72ce:	3201      	adds	r2, #1
    72d0:	549e      	strb	r6, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    72d2:	3a33      	subs	r2, #51	; 0x33
    72d4:	771a      	strb	r2, [r3, #28]
    72d6:	3a70      	subs	r2, #112	; 0x70
    72d8:	775a      	strb	r2, [r3, #29]
    72da:	3226      	adds	r2, #38	; 0x26
    72dc:	779a      	strb	r2, [r3, #30]
    72de:	328d      	adds	r2, #141	; 0x8d
    72e0:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    72e2:	3a12      	subs	r2, #18
    72e4:	549d      	strb	r5, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    72e6:	362e      	adds	r6, #46	; 0x2e
    72e8:	3a01      	subs	r2, #1
    72ea:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    72ec:	3a19      	subs	r2, #25
    72ee:	3e0c      	subs	r6, #12
    72f0:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    72f2:	3601      	adds	r6, #1
    72f4:	5599      	strb	r1, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    72f6:	26c2      	movs	r6, #194	; 0xc2
    72f8:	36ff      	adds	r6, #255	; 0xff
    72fa:	559d      	strb	r5, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    72fc:	3529      	adds	r5, #41	; 0x29
    72fe:	555a      	strb	r2, [r3, r5]
	RegParams.maxTxPwrIndx = 10;
    7300:	3d22      	subs	r5, #34	; 0x22
    7302:	3226      	adds	r2, #38	; 0x26
    7304:	549d      	strb	r5, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_IN;
    7306:	3201      	adds	r2, #1
    7308:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    730a:	341d      	adds	r4, #29
    730c:	3a06      	subs	r2, #6
    730e:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    7310:	4c3e      	ldr	r4, [pc, #248]	; (740c <LORAReg_InitIN+0x1d0>)
    7312:	7825      	ldrb	r5, [r4, #0]
    7314:	3215      	adds	r2, #21
    7316:	549d      	strb	r5, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    7318:	001a      	movs	r2, r3
    731a:	3239      	adds	r2, #57	; 0x39
    731c:	2500      	movs	r5, #0
    731e:	7015      	strb	r5, [r2, #0]
    7320:	7055      	strb	r5, [r2, #1]
    7322:	7095      	strb	r5, [r2, #2]
    7324:	70d5      	strb	r5, [r2, #3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    7326:	7864      	ldrb	r4, [r4, #1]
    7328:	223e      	movs	r2, #62	; 0x3e
    732a:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    732c:	3205      	adds	r2, #5
    732e:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    7330:	001a      	movs	r2, r3
    7332:	323f      	adds	r2, #63	; 0x3f
    7334:	7011      	strb	r1, [r2, #0]
    7336:	7051      	strb	r1, [r2, #1]
    7338:	7091      	strb	r1, [r2, #2]
    733a:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    733c:	222f      	movs	r2, #47	; 0x2f
    733e:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    7340:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    7342:	280f      	cmp	r0, #15
    7344:	d008      	beq.n	7358 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    7346:	4b32      	ldr	r3, [pc, #200]	; (7410 <LORAReg_InitIN+0x1d4>)
    7348:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    734a:	4b32      	ldr	r3, [pc, #200]	; (7414 <LORAReg_InitIN+0x1d8>)
    734c:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    734e:	4b32      	ldr	r3, [pc, #200]	; (7418 <LORAReg_InitIN+0x1dc>)
    7350:	4798      	blx	r3
}
    7352:	0020      	movs	r0, r4
    7354:	b006      	add	sp, #24
    7356:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    7358:	001c      	movs	r4, r3
    735a:	0018      	movs	r0, r3
    735c:	3084      	adds	r0, #132	; 0x84
    735e:	3a29      	subs	r2, #41	; 0x29
    7360:	492e      	ldr	r1, [pc, #184]	; (741c <LORAReg_InitIN+0x1e0>)
    7362:	4d2f      	ldr	r5, [pc, #188]	; (7420 <LORAReg_InitIN+0x1e4>)
    7364:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    7366:	0020      	movs	r0, r4
    7368:	30a4      	adds	r0, #164	; 0xa4
    736a:	2224      	movs	r2, #36	; 0x24
    736c:	492d      	ldr	r1, [pc, #180]	; (7424 <LORAReg_InitIN+0x1e8>)
    736e:	47a8      	blx	r5
    7370:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7372:	4925      	ldr	r1, [pc, #148]	; (7408 <LORAReg_InitIN+0x1cc>)
    7374:	24ff      	movs	r4, #255	; 0xff
    7376:	790b      	ldrb	r3, [r1, #4]
    7378:	794a      	ldrb	r2, [r1, #5]
    737a:	0212      	lsls	r2, r2, #8
    737c:	431a      	orrs	r2, r3
    737e:	798b      	ldrb	r3, [r1, #6]
    7380:	041b      	lsls	r3, r3, #16
    7382:	431a      	orrs	r2, r3
    7384:	79cb      	ldrb	r3, [r1, #7]
    7386:	061b      	lsls	r3, r3, #24
    7388:	4313      	orrs	r3, r2
    738a:	181b      	adds	r3, r3, r0
    738c:	705c      	strb	r4, [r3, #1]
    738e:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    7390:	2820      	cmp	r0, #32
    7392:	d1f0      	bne.n	7376 <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    7394:	4c1c      	ldr	r4, [pc, #112]	; (7408 <LORAReg_InitIN+0x1cc>)
    7396:	221e      	movs	r2, #30
    7398:	23e1      	movs	r3, #225	; 0xe1
    739a:	005b      	lsls	r3, r3, #1
    739c:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    739e:	7820      	ldrb	r0, [r4, #0]
    73a0:	7863      	ldrb	r3, [r4, #1]
    73a2:	021b      	lsls	r3, r3, #8
    73a4:	4303      	orrs	r3, r0
    73a6:	78a0      	ldrb	r0, [r4, #2]
    73a8:	0400      	lsls	r0, r0, #16
    73aa:	4303      	orrs	r3, r0
    73ac:	78e0      	ldrb	r0, [r4, #3]
    73ae:	0600      	lsls	r0, r0, #24
    73b0:	4318      	orrs	r0, r3
    73b2:	3222      	adds	r2, #34	; 0x22
    73b4:	491c      	ldr	r1, [pc, #112]	; (7428 <LORAReg_InitIN+0x1ec>)
    73b6:	4b1a      	ldr	r3, [pc, #104]	; (7420 <LORAReg_InitIN+0x1e4>)
    73b8:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    73ba:	2306      	movs	r3, #6
    73bc:	2106      	movs	r1, #6
    73be:	2283      	movs	r2, #131	; 0x83
    73c0:	0092      	lsls	r2, r2, #2
    73c2:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    73c4:	2100      	movs	r1, #0
    73c6:	4a19      	ldr	r2, [pc, #100]	; (742c <LORAReg_InitIN+0x1f0>)
    73c8:	54a1      	strb	r1, [r4, r2]
    73ca:	18a2      	adds	r2, r4, r2
    73cc:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    73ce:	3101      	adds	r1, #1
    73d0:	4a17      	ldr	r2, [pc, #92]	; (7430 <LORAReg_InitIN+0x1f4>)
    73d2:	54a1      	strb	r1, [r4, r2]
    73d4:	18a2      	adds	r2, r4, r2
    73d6:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    73d8:	2200      	movs	r2, #0
    73da:	4b16      	ldr	r3, [pc, #88]	; (7434 <LORAReg_InitIN+0x1f8>)
    73dc:	54e2      	strb	r2, [r4, r3]
    73de:	18e3      	adds	r3, r4, r3
    73e0:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    73e2:	4b15      	ldr	r3, [pc, #84]	; (7438 <LORAReg_InitIN+0x1fc>)
    73e4:	54e2      	strb	r2, [r4, r3]
    73e6:	469c      	mov	ip, r3
    73e8:	4464      	add	r4, ip
    73ea:	2300      	movs	r3, #0
    73ec:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    73ee:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    73f0:	3202      	adds	r2, #2
    73f2:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    73f4:	4a11      	ldr	r2, [pc, #68]	; (743c <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    73f6:	9200      	str	r2, [sp, #0]
    73f8:	4911      	ldr	r1, [pc, #68]	; (7440 <LORAReg_InitIN+0x204>)
    73fa:	9a03      	ldr	r2, [sp, #12]
    73fc:	4b11      	ldr	r3, [pc, #68]	; (7444 <LORAReg_InitIN+0x208>)
    73fe:	2006      	movs	r0, #6
    7400:	4c11      	ldr	r4, [pc, #68]	; (7448 <LORAReg_InitIN+0x20c>)
    7402:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7404:	2408      	movs	r4, #8
    7406:	e79e      	b.n	7346 <LORAReg_InitIN+0x10a>
    7408:	20002310 	.word	0x20002310
    740c:	2000230c 	.word	0x2000230c
    7410:	0000b641 	.word	0x0000b641
    7414:	0000bbc5 	.word	0x0000bbc5
    7418:	0000be89 	.word	0x0000be89
    741c:	0001e62c 	.word	0x0001e62c
    7420:	00018655 	.word	0x00018655
    7424:	0001e608 	.word	0x0001e608
    7428:	0001e634 	.word	0x0001e634
    742c:	0000020f 	.word	0x0000020f
    7430:	00000211 	.word	0x00000211
    7434:	00000213 	.word	0x00000213
    7438:	0000020d 	.word	0x0000020d
    743c:	00007239 	.word	0x00007239
    7440:	200020fc 	.word	0x200020fc
    7444:	0001e674 	.word	0x0001e674
    7448:	0000cb31 	.word	0x0000cb31

0000744c <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    744c:	4770      	bx	lr
	...

00007450 <InitDefault920Channels>:
{
    7450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    7452:	4c40      	ldr	r4, [pc, #256]	; (7554 <InitDefault920Channels+0x104>)
    7454:	7920      	ldrb	r0, [r4, #4]
    7456:	7963      	ldrb	r3, [r4, #5]
    7458:	021b      	lsls	r3, r3, #8
    745a:	4303      	orrs	r3, r0
    745c:	79a0      	ldrb	r0, [r4, #6]
    745e:	0400      	lsls	r0, r0, #16
    7460:	4303      	orrs	r3, r0
    7462:	79e0      	ldrb	r0, [r4, #7]
    7464:	0600      	lsls	r0, r0, #24
    7466:	4318      	orrs	r0, r3
    7468:	2204      	movs	r2, #4
    746a:	2100      	movs	r1, #0
    746c:	4e3a      	ldr	r6, [pc, #232]	; (7558 <InitDefault920Channels+0x108>)
    746e:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    7470:	7a20      	ldrb	r0, [r4, #8]
    7472:	7a63      	ldrb	r3, [r4, #9]
    7474:	021b      	lsls	r3, r3, #8
    7476:	4303      	orrs	r3, r0
    7478:	7aa0      	ldrb	r0, [r4, #10]
    747a:	0400      	lsls	r0, r0, #16
    747c:	4303      	orrs	r3, r0
    747e:	7ae0      	ldrb	r0, [r4, #11]
    7480:	0600      	lsls	r0, r0, #24
    7482:	4318      	orrs	r0, r3
    7484:	2218      	movs	r2, #24
    7486:	2100      	movs	r1, #0
    7488:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    748a:	7920      	ldrb	r0, [r4, #4]
    748c:	7963      	ldrb	r3, [r4, #5]
    748e:	021b      	lsls	r3, r3, #8
    7490:	4303      	orrs	r3, r0
    7492:	79a0      	ldrb	r0, [r4, #6]
    7494:	0400      	lsls	r0, r0, #16
    7496:	4303      	orrs	r3, r0
    7498:	79e0      	ldrb	r0, [r4, #7]
    749a:	0600      	lsls	r0, r0, #24
    749c:	4318      	orrs	r0, r3
    749e:	2204      	movs	r2, #4
    74a0:	492e      	ldr	r1, [pc, #184]	; (755c <InitDefault920Channels+0x10c>)
    74a2:	4d2f      	ldr	r5, [pc, #188]	; (7560 <InitDefault920Channels+0x110>)
    74a4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    74a6:	7a20      	ldrb	r0, [r4, #8]
    74a8:	7a63      	ldrb	r3, [r4, #9]
    74aa:	021b      	lsls	r3, r3, #8
    74ac:	4303      	orrs	r3, r0
    74ae:	7aa0      	ldrb	r0, [r4, #10]
    74b0:	0400      	lsls	r0, r0, #16
    74b2:	4303      	orrs	r3, r0
    74b4:	7ae0      	ldrb	r0, [r4, #11]
    74b6:	0600      	lsls	r0, r0, #24
    74b8:	4318      	orrs	r0, r3
    74ba:	2218      	movs	r2, #24
    74bc:	4929      	ldr	r1, [pc, #164]	; (7564 <InitDefault920Channels+0x114>)
    74be:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    74c0:	7b20      	ldrb	r0, [r4, #12]
    74c2:	7b63      	ldrb	r3, [r4, #13]
    74c4:	021b      	lsls	r3, r3, #8
    74c6:	4303      	orrs	r3, r0
    74c8:	7ba0      	ldrb	r0, [r4, #14]
    74ca:	0400      	lsls	r0, r0, #16
    74cc:	4303      	orrs	r3, r0
    74ce:	7be0      	ldrb	r0, [r4, #15]
    74d0:	0600      	lsls	r0, r0, #24
    74d2:	4318      	orrs	r0, r3
    74d4:	2218      	movs	r2, #24
    74d6:	2100      	movs	r1, #0
    74d8:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    74da:	7b20      	ldrb	r0, [r4, #12]
    74dc:	7b63      	ldrb	r3, [r4, #13]
    74de:	021b      	lsls	r3, r3, #8
    74e0:	4303      	orrs	r3, r0
    74e2:	7ba0      	ldrb	r0, [r4, #14]
    74e4:	0400      	lsls	r0, r0, #16
    74e6:	4303      	orrs	r3, r0
    74e8:	7be0      	ldrb	r0, [r4, #15]
    74ea:	0600      	lsls	r0, r0, #24
    74ec:	4318      	orrs	r0, r3
    74ee:	2218      	movs	r2, #24
    74f0:	491d      	ldr	r1, [pc, #116]	; (7568 <InitDefault920Channels+0x118>)
    74f2:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    74f4:	0020      	movs	r0, r4
    74f6:	30af      	adds	r0, #175	; 0xaf
    74f8:	30ff      	adds	r0, #255	; 0xff
    74fa:	2204      	movs	r2, #4
    74fc:	491b      	ldr	r1, [pc, #108]	; (756c <InitDefault920Channels+0x11c>)
    74fe:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    7500:	232a      	movs	r3, #42	; 0x2a
    7502:	56e3      	ldrsb	r3, [r4, r3]
    7504:	2b02      	cmp	r3, #2
    7506:	dd1f      	ble.n	7548 <InitDefault920Channels+0xf8>
    7508:	2302      	movs	r3, #2
    750a:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    750c:	4911      	ldr	r1, [pc, #68]	; (7554 <InitDefault920Channels+0x104>)
    750e:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7510:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    7512:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7514:	7908      	ldrb	r0, [r1, #4]
    7516:	794c      	ldrb	r4, [r1, #5]
    7518:	0224      	lsls	r4, r4, #8
    751a:	4304      	orrs	r4, r0
    751c:	7988      	ldrb	r0, [r1, #6]
    751e:	0400      	lsls	r0, r0, #16
    7520:	4304      	orrs	r4, r0
    7522:	79c8      	ldrb	r0, [r1, #7]
    7524:	0600      	lsls	r0, r0, #24
    7526:	4320      	orrs	r0, r4
    7528:	0054      	lsls	r4, r2, #1
    752a:	1820      	adds	r0, r4, r0
    752c:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    752e:	3358      	adds	r3, #88	; 0x58
    7530:	009b      	lsls	r3, r3, #2
    7532:	18cb      	adds	r3, r1, r3
    7534:	725d      	strb	r5, [r3, #9]
    7536:	729d      	strb	r5, [r3, #10]
    7538:	72dd      	strb	r5, [r3, #11]
    753a:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    753c:	3201      	adds	r2, #1
    753e:	b2d2      	uxtb	r2, r2
    7540:	0013      	movs	r3, r2
    7542:	5788      	ldrsb	r0, [r1, r6]
    7544:	4282      	cmp	r2, r0
    7546:	dbe5      	blt.n	7514 <InitDefault920Channels+0xc4>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    7548:	21ff      	movs	r1, #255	; 0xff
    754a:	2330      	movs	r3, #48	; 0x30
    754c:	4a01      	ldr	r2, [pc, #4]	; (7554 <InitDefault920Channels+0x104>)
    754e:	54d1      	strb	r1, [r2, r3]
}
    7550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	20002310 	.word	0x20002310
    7558:	00018779 	.word	0x00018779
    755c:	0001e69c 	.word	0x0001e69c
    7560:	00018655 	.word	0x00018655
    7564:	0001e684 	.word	0x0001e684
    7568:	0001e6e4 	.word	0x0001e6e4
    756c:	0001e6e0 	.word	0x0001e6e0

00007570 <LORAReg_InitJP>:
{
    7570:	b5f0      	push	{r4, r5, r6, r7, lr}
    7572:	46d6      	mov	lr, sl
    7574:	464f      	mov	r7, r9
    7576:	4646      	mov	r6, r8
    7578:	b5c0      	push	{r6, r7, lr}
    757a:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    757c:	4b7b      	ldr	r3, [pc, #492]	; (776c <LORAReg_InitJP+0x1fc>)
    757e:	2103      	movs	r1, #3
    7580:	2226      	movs	r2, #38	; 0x26
    7582:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    7584:	3a16      	subs	r2, #22
    7586:	4691      	mov	r9, r2
    7588:	321a      	adds	r2, #26
    758a:	4649      	mov	r1, r9
    758c:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    758e:	2102      	movs	r1, #2
    7590:	3a01      	subs	r2, #1
    7592:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    7594:	2601      	movs	r6, #1
    7596:	3a02      	subs	r2, #2
    7598:	549e      	strb	r6, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    759a:	001a      	movs	r2, r3
    759c:	3284      	adds	r2, #132	; 0x84
    759e:	2400      	movs	r4, #0
    75a0:	46a2      	mov	sl, r4
    75a2:	711a      	strb	r2, [r3, #4]
    75a4:	0a17      	lsrs	r7, r2, #8
    75a6:	715f      	strb	r7, [r3, #5]
    75a8:	0c17      	lsrs	r7, r2, #16
    75aa:	719f      	strb	r7, [r3, #6]
    75ac:	0e12      	lsrs	r2, r2, #24
    75ae:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    75b0:	001a      	movs	r2, r3
    75b2:	3244      	adds	r2, #68	; 0x44
    75b4:	701a      	strb	r2, [r3, #0]
    75b6:	0a17      	lsrs	r7, r2, #8
    75b8:	705f      	strb	r7, [r3, #1]
    75ba:	0c17      	lsrs	r7, r2, #16
    75bc:	709f      	strb	r7, [r3, #2]
    75be:	0e12      	lsrs	r2, r2, #24
    75c0:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    75c2:	001a      	movs	r2, r3
    75c4:	32c5      	adds	r2, #197	; 0xc5
    75c6:	32ff      	adds	r2, #255	; 0xff
    75c8:	731a      	strb	r2, [r3, #12]
    75ca:	0a17      	lsrs	r7, r2, #8
    75cc:	735f      	strb	r7, [r3, #13]
    75ce:	0c17      	lsrs	r7, r2, #16
    75d0:	739f      	strb	r7, [r3, #14]
    75d2:	0e12      	lsrs	r2, r2, #24
    75d4:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    75d6:	001a      	movs	r2, r3
    75d8:	32a4      	adds	r2, #164	; 0xa4
    75da:	721a      	strb	r2, [r3, #8]
    75dc:	0a17      	lsrs	r7, r2, #8
    75de:	725f      	strb	r7, [r3, #9]
    75e0:	0c17      	lsrs	r7, r2, #16
    75e2:	729f      	strb	r7, [r3, #10]
    75e4:	0e12      	lsrs	r2, r2, #24
    75e6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    75e8:	001a      	movs	r2, r3
    75ea:	3265      	adds	r2, #101	; 0x65
    75ec:	32ff      	adds	r2, #255	; 0xff
    75ee:	741a      	strb	r2, [r3, #16]
    75f0:	0a17      	lsrs	r7, r2, #8
    75f2:	745f      	strb	r7, [r3, #17]
    75f4:	0c17      	lsrs	r7, r2, #16
    75f6:	749f      	strb	r7, [r3, #18]
    75f8:	0e12      	lsrs	r2, r2, #24
    75fa:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    75fc:	001a      	movs	r2, r3
    75fe:	3235      	adds	r2, #53	; 0x35
    7600:	751a      	strb	r2, [r3, #20]
    7602:	0a17      	lsrs	r7, r2, #8
    7604:	755f      	strb	r7, [r3, #21]
    7606:	0c17      	lsrs	r7, r2, #16
    7608:	759f      	strb	r7, [r3, #22]
    760a:	0e12      	lsrs	r2, r2, #24
    760c:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    760e:	001a      	movs	r2, r3
    7610:	323e      	adds	r2, #62	; 0x3e
    7612:	761a      	strb	r2, [r3, #24]
    7614:	0a17      	lsrs	r7, r2, #8
    7616:	765f      	strb	r7, [r3, #25]
    7618:	0c17      	lsrs	r7, r2, #16
    761a:	769f      	strb	r7, [r3, #26]
    761c:	0e12      	lsrs	r2, r2, #24
    761e:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    7620:	2222      	movs	r2, #34	; 0x22
    7622:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    7624:	3201      	adds	r2, #1
    7626:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    7628:	2200      	movs	r2, #0
    762a:	771a      	strb	r2, [r3, #28]
    762c:	3a16      	subs	r2, #22
    762e:	775a      	strb	r2, [r3, #29]
    7630:	321c      	adds	r2, #28
    7632:	779a      	strb	r2, [r3, #30]
    7634:	3231      	adds	r2, #49	; 0x31
    7636:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    7638:	3a16      	subs	r2, #22
    763a:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    763c:	2734      	movs	r7, #52	; 0x34
    763e:	3a01      	subs	r2, #1
    7640:	549f      	strb	r7, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    7642:	3a19      	subs	r2, #25
    7644:	3f10      	subs	r7, #16
    7646:	55da      	strb	r2, [r3, r7]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    7648:	3701      	adds	r7, #1
    764a:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    764c:	3f20      	subs	r7, #32
    764e:	24df      	movs	r4, #223	; 0xdf
    7650:	0064      	lsls	r4, r4, #1
    7652:	551f      	strb	r7, [r3, r4]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    7654:	3c0f      	subs	r4, #15
    7656:	3cff      	subs	r4, #255	; 0xff
    7658:	46a0      	mov	r8, r4
    765a:	24c0      	movs	r4, #192	; 0xc0
    765c:	34ff      	adds	r4, #255	; 0xff
    765e:	4645      	mov	r5, r8
    7660:	551d      	strb	r5, [r3, r4]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    7662:	3401      	adds	r4, #1
    7664:	551f      	strb	r7, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    7666:	27c2      	movs	r7, #194	; 0xc2
    7668:	37ff      	adds	r7, #255	; 0xff
    766a:	55d9      	strb	r1, [r3, r7]
	RegParams.Rx1DrOffset = 7;
    766c:	312a      	adds	r1, #42	; 0x2a
    766e:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    7670:	3101      	adds	r1, #1
    7672:	545a      	strb	r2, [r3, r1]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_JP;
    7674:	3227      	adds	r2, #39	; 0x27
    7676:	549e      	strb	r6, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    7678:	3a06      	subs	r2, #6
    767a:	4649      	mov	r1, r9
    767c:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    767e:	4a3c      	ldr	r2, [pc, #240]	; (7770 <LORAReg_InitJP+0x200>)
    7680:	7815      	ldrb	r5, [r2, #0]
    7682:	21ae      	movs	r1, #174	; 0xae
    7684:	31ff      	adds	r1, #255	; 0xff
    7686:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    7688:	7855      	ldrb	r5, [r2, #1]
    768a:	3945      	subs	r1, #69	; 0x45
    768c:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    768e:	7895      	ldrb	r5, [r2, #2]
    7690:	392b      	subs	r1, #43	; 0x2b
    7692:	39ff      	subs	r1, #255	; 0xff
    7694:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    7696:	78d1      	ldrb	r1, [r2, #3]
    7698:	223d      	movs	r2, #61	; 0x3d
    769a:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    769c:	001a      	movs	r2, r3
    769e:	3239      	adds	r2, #57	; 0x39
    76a0:	2100      	movs	r1, #0
    76a2:	7011      	strb	r1, [r2, #0]
    76a4:	7051      	strb	r1, [r2, #1]
    76a6:	7091      	strb	r1, [r2, #2]
    76a8:	70d1      	strb	r1, [r2, #3]
	RegParams.joinbccount =0;
    76aa:	2243      	movs	r2, #67	; 0x43
    76ac:	4651      	mov	r1, sl
    76ae:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    76b0:	001a      	movs	r2, r3
    76b2:	323f      	adds	r2, #63	; 0x3f
    76b4:	2100      	movs	r1, #0
    76b6:	7011      	strb	r1, [r2, #0]
    76b8:	7051      	strb	r1, [r2, #1]
    76ba:	7091      	strb	r1, [r2, #2]
    76bc:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    76be:	21c4      	movs	r1, #196	; 0xc4
    76c0:	31ff      	adds	r1, #255	; 0xff
    76c2:	5c5a      	ldrb	r2, [r3, r1]
    76c4:	2401      	movs	r4, #1
    76c6:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    76c8:	2402      	movs	r4, #2
    76ca:	4322      	orrs	r2, r4
    76cc:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    76ce:	222f      	movs	r2, #47	; 0x2f
    76d0:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    76d2:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    76d4:	2805      	cmp	r0, #5
    76d6:	d00c      	beq.n	76f2 <LORAReg_InitJP+0x182>
    LORAREG_InitGetAttrFnPtrsJP();
    76d8:	4b26      	ldr	r3, [pc, #152]	; (7774 <LORAReg_InitJP+0x204>)
    76da:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    76dc:	4b26      	ldr	r3, [pc, #152]	; (7778 <LORAReg_InitJP+0x208>)
    76de:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    76e0:	4b26      	ldr	r3, [pc, #152]	; (777c <LORAReg_InitJP+0x20c>)
    76e2:	4798      	blx	r3
}
    76e4:	0020      	movs	r0, r4
    76e6:	b006      	add	sp, #24
    76e8:	bc1c      	pop	{r2, r3, r4}
    76ea:	4690      	mov	r8, r2
    76ec:	4699      	mov	r9, r3
    76ee:	46a2      	mov	sl, r4
    76f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault920Channels();
    76f2:	4b23      	ldr	r3, [pc, #140]	; (7780 <LORAReg_InitJP+0x210>)
    76f4:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    76f6:	4c1d      	ldr	r4, [pc, #116]	; (776c <LORAReg_InitJP+0x1fc>)
    76f8:	2210      	movs	r2, #16
    76fa:	23e1      	movs	r3, #225	; 0xe1
    76fc:	005b      	lsls	r3, r3, #1
    76fe:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    7700:	7820      	ldrb	r0, [r4, #0]
    7702:	7863      	ldrb	r3, [r4, #1]
    7704:	021b      	lsls	r3, r3, #8
    7706:	4303      	orrs	r3, r0
    7708:	78a0      	ldrb	r0, [r4, #2]
    770a:	0400      	lsls	r0, r0, #16
    770c:	4303      	orrs	r3, r0
    770e:	78e0      	ldrb	r0, [r4, #3]
    7710:	0600      	lsls	r0, r0, #24
    7712:	4318      	orrs	r0, r3
    7714:	3230      	adds	r2, #48	; 0x30
    7716:	491b      	ldr	r1, [pc, #108]	; (7784 <LORAReg_InitJP+0x214>)
    7718:	4b1b      	ldr	r3, [pc, #108]	; (7788 <LORAReg_InitJP+0x218>)
    771a:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    771c:	2307      	movs	r3, #7
    771e:	2107      	movs	r1, #7
    7720:	2283      	movs	r2, #131	; 0x83
    7722:	0092      	lsls	r2, r2, #2
    7724:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    7726:	2100      	movs	r1, #0
    7728:	4a18      	ldr	r2, [pc, #96]	; (778c <LORAReg_InitJP+0x21c>)
    772a:	54a1      	strb	r1, [r4, r2]
    772c:	18a2      	adds	r2, r4, r2
    772e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    7730:	3101      	adds	r1, #1
    7732:	4a17      	ldr	r2, [pc, #92]	; (7790 <LORAReg_InitJP+0x220>)
    7734:	54a1      	strb	r1, [r4, r2]
    7736:	18a2      	adds	r2, r4, r2
    7738:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    773a:	2200      	movs	r2, #0
    773c:	4b15      	ldr	r3, [pc, #84]	; (7794 <LORAReg_InitJP+0x224>)
    773e:	54e2      	strb	r2, [r4, r3]
    7740:	18e3      	adds	r3, r4, r3
    7742:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    7744:	4b14      	ldr	r3, [pc, #80]	; (7798 <LORAReg_InitJP+0x228>)
    7746:	54e2      	strb	r2, [r4, r3]
    7748:	469c      	mov	ip, r3
    774a:	4464      	add	r4, ip
    774c:	2300      	movs	r3, #0
    774e:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    7750:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    7752:	3202      	adds	r2, #2
    7754:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    7756:	4a11      	ldr	r2, [pc, #68]	; (779c <LORAReg_InitJP+0x22c>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    7758:	9200      	str	r2, [sp, #0]
    775a:	4911      	ldr	r1, [pc, #68]	; (77a0 <LORAReg_InitJP+0x230>)
    775c:	9a03      	ldr	r2, [sp, #12]
    775e:	4b11      	ldr	r3, [pc, #68]	; (77a4 <LORAReg_InitJP+0x234>)
    7760:	2007      	movs	r0, #7
    7762:	4c11      	ldr	r4, [pc, #68]	; (77a8 <LORAReg_InitJP+0x238>)
    7764:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7766:	2408      	movs	r4, #8
    7768:	e7b6      	b.n	76d8 <LORAReg_InitJP+0x168>
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	20002310 	.word	0x20002310
    7770:	2000230c 	.word	0x2000230c
    7774:	0000b775 	.word	0x0000b775
    7778:	0000bc2d 	.word	0x0000bc2d
    777c:	0000beed 	.word	0x0000beed
    7780:	00007451 	.word	0x00007451
    7784:	0001e6a0 	.word	0x0001e6a0
    7788:	00018655 	.word	0x00018655
    778c:	0000020f 	.word	0x0000020f
    7790:	00000211 	.word	0x00000211
    7794:	00000213 	.word	0x00000213
    7798:	0000020d 	.word	0x0000020d
    779c:	0000744d 	.word	0x0000744d
    77a0:	20002100 	.word	0x20002100
    77a4:	0001e6fc 	.word	0x0001e6fc
    77a8:	0000cb31 	.word	0x0000cb31

000077ac <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    77ac:	4770      	bx	lr
	...

000077b0 <InitDefault920ChannelsKR>:
{
    77b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77b2:	46d6      	mov	lr, sl
    77b4:	464f      	mov	r7, r9
    77b6:	4646      	mov	r6, r8
    77b8:	b5c0      	push	{r6, r7, lr}
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    77ba:	4c46      	ldr	r4, [pc, #280]	; (78d4 <InitDefault920ChannelsKR+0x124>)
    77bc:	7920      	ldrb	r0, [r4, #4]
    77be:	7963      	ldrb	r3, [r4, #5]
    77c0:	021b      	lsls	r3, r3, #8
    77c2:	4303      	orrs	r3, r0
    77c4:	79a0      	ldrb	r0, [r4, #6]
    77c6:	0400      	lsls	r0, r0, #16
    77c8:	4303      	orrs	r3, r0
    77ca:	79e0      	ldrb	r0, [r4, #7]
    77cc:	0600      	lsls	r0, r0, #24
    77ce:	4318      	orrs	r0, r3
    77d0:	2206      	movs	r2, #6
    77d2:	2100      	movs	r1, #0
    77d4:	4d40      	ldr	r5, [pc, #256]	; (78d8 <InitDefault920ChannelsKR+0x128>)
    77d6:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    77d8:	7a20      	ldrb	r0, [r4, #8]
    77da:	7a63      	ldrb	r3, [r4, #9]
    77dc:	021b      	lsls	r3, r3, #8
    77de:	4303      	orrs	r3, r0
    77e0:	7aa0      	ldrb	r0, [r4, #10]
    77e2:	0400      	lsls	r0, r0, #16
    77e4:	4303      	orrs	r3, r0
    77e6:	7ae0      	ldrb	r0, [r4, #11]
    77e8:	0600      	lsls	r0, r0, #24
    77ea:	4318      	orrs	r0, r3
    77ec:	2224      	movs	r2, #36	; 0x24
    77ee:	2100      	movs	r1, #0
    77f0:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    77f2:	7920      	ldrb	r0, [r4, #4]
    77f4:	7963      	ldrb	r3, [r4, #5]
    77f6:	021b      	lsls	r3, r3, #8
    77f8:	4303      	orrs	r3, r0
    77fa:	79a0      	ldrb	r0, [r4, #6]
    77fc:	0400      	lsls	r0, r0, #16
    77fe:	4303      	orrs	r3, r0
    7800:	79e0      	ldrb	r0, [r4, #7]
    7802:	0600      	lsls	r0, r0, #24
    7804:	4318      	orrs	r0, r3
    7806:	2206      	movs	r2, #6
    7808:	4934      	ldr	r1, [pc, #208]	; (78dc <InitDefault920ChannelsKR+0x12c>)
    780a:	4d35      	ldr	r5, [pc, #212]	; (78e0 <InitDefault920ChannelsKR+0x130>)
    780c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    780e:	7a20      	ldrb	r0, [r4, #8]
    7810:	7a63      	ldrb	r3, [r4, #9]
    7812:	021b      	lsls	r3, r3, #8
    7814:	4303      	orrs	r3, r0
    7816:	7aa0      	ldrb	r0, [r4, #10]
    7818:	0400      	lsls	r0, r0, #16
    781a:	4303      	orrs	r3, r0
    781c:	7ae0      	ldrb	r0, [r4, #11]
    781e:	0600      	lsls	r0, r0, #24
    7820:	4318      	orrs	r0, r3
    7822:	2224      	movs	r2, #36	; 0x24
    7824:	492f      	ldr	r1, [pc, #188]	; (78e4 <InitDefault920ChannelsKR+0x134>)
    7826:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    7828:	232a      	movs	r3, #42	; 0x2a
    782a:	56e3      	ldrsb	r3, [r4, r3]
    782c:	2b03      	cmp	r3, #3
    782e:	dd48      	ble.n	78c2 <InitDefault920ChannelsKR+0x112>
    7830:	2103      	movs	r1, #3
    7832:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7834:	4b27      	ldr	r3, [pc, #156]	; (78d4 <InitDefault920ChannelsKR+0x124>)
    7836:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    7838:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    783a:	22e1      	movs	r2, #225	; 0xe1
    783c:	0052      	lsls	r2, r2, #1
    783e:	4690      	mov	r8, r2
    7840:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    7842:	3a99      	subs	r2, #153	; 0x99
    7844:	3aff      	subs	r2, #255	; 0xff
    7846:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7848:	0042      	lsls	r2, r0, #1
    784a:	791c      	ldrb	r4, [r3, #4]
    784c:	46a1      	mov	r9, r4
    784e:	795c      	ldrb	r4, [r3, #5]
    7850:	0224      	lsls	r4, r4, #8
    7852:	464f      	mov	r7, r9
    7854:	4327      	orrs	r7, r4
    7856:	799c      	ldrb	r4, [r3, #6]
    7858:	0424      	lsls	r4, r4, #16
    785a:	4327      	orrs	r7, r4
    785c:	79dc      	ldrb	r4, [r3, #7]
    785e:	0624      	lsls	r4, r4, #24
    7860:	433c      	orrs	r4, r7
    7862:	18a4      	adds	r4, r4, r2
    7864:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    7866:	791c      	ldrb	r4, [r3, #4]
    7868:	46a1      	mov	r9, r4
    786a:	795c      	ldrb	r4, [r3, #5]
    786c:	0224      	lsls	r4, r4, #8
    786e:	464f      	mov	r7, r9
    7870:	4327      	orrs	r7, r4
    7872:	799c      	ldrb	r4, [r3, #6]
    7874:	0424      	lsls	r4, r4, #16
    7876:	4327      	orrs	r7, r4
    7878:	79dc      	ldrb	r4, [r3, #7]
    787a:	0624      	lsls	r4, r4, #24
    787c:	433c      	orrs	r4, r7
    787e:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    7880:	7a1c      	ldrb	r4, [r3, #8]
    7882:	46a1      	mov	r9, r4
    7884:	7a5c      	ldrb	r4, [r3, #9]
    7886:	0224      	lsls	r4, r4, #8
    7888:	464f      	mov	r7, r9
    788a:	4327      	orrs	r7, r4
    788c:	7a9c      	ldrb	r4, [r3, #10]
    788e:	0424      	lsls	r4, r4, #16
    7890:	4327      	orrs	r7, r4
    7892:	7adc      	ldrb	r4, [r3, #11]
    7894:	0624      	lsls	r4, r4, #24
    7896:	433c      	orrs	r4, r7
    7898:	1812      	adds	r2, r2, r0
    789a:	0092      	lsls	r2, r2, #2
    789c:	1912      	adds	r2, r2, r4
    789e:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    78a0:	4642      	mov	r2, r8
    78a2:	4664      	mov	r4, ip
    78a4:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    78a6:	3158      	adds	r1, #88	; 0x58
    78a8:	0089      	lsls	r1, r1, #2
    78aa:	1859      	adds	r1, r3, r1
    78ac:	724d      	strb	r5, [r1, #9]
    78ae:	728d      	strb	r5, [r1, #10]
    78b0:	72cd      	strb	r5, [r1, #11]
    78b2:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    78b4:	3001      	adds	r0, #1
    78b6:	b2c0      	uxtb	r0, r0
    78b8:	0001      	movs	r1, r0
    78ba:	4652      	mov	r2, sl
    78bc:	569a      	ldrsb	r2, [r3, r2]
    78be:	4290      	cmp	r0, r2
    78c0:	dbc2      	blt.n	7848 <InitDefault920ChannelsKR+0x98>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    78c2:	21ff      	movs	r1, #255	; 0xff
    78c4:	2330      	movs	r3, #48	; 0x30
    78c6:	4a03      	ldr	r2, [pc, #12]	; (78d4 <InitDefault920ChannelsKR+0x124>)
    78c8:	54d1      	strb	r1, [r2, r3]
}
    78ca:	bc1c      	pop	{r2, r3, r4}
    78cc:	4690      	mov	r8, r2
    78ce:	4699      	mov	r9, r3
    78d0:	46a2      	mov	sl, r4
    78d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78d4:	20002310 	.word	0x20002310
    78d8:	00018779 	.word	0x00018779
    78dc:	0001e730 	.word	0x0001e730
    78e0:	00018655 	.word	0x00018655
    78e4:	0001e70c 	.word	0x0001e70c

000078e8 <LORAReg_InitKR>:
{
    78e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ea:	46c6      	mov	lr, r8
    78ec:	b500      	push	{lr}
    78ee:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    78f0:	4b7b      	ldr	r3, [pc, #492]	; (7ae0 <LORAReg_InitKR+0x1f8>)
    78f2:	2503      	movs	r5, #3
    78f4:	2226      	movs	r2, #38	; 0x26
    78f6:	549d      	strb	r5, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    78f8:	2110      	movs	r1, #16
    78fa:	3204      	adds	r2, #4
    78fc:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    78fe:	2401      	movs	r4, #1
    7900:	3a01      	subs	r2, #1
    7902:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    7904:	3a02      	subs	r2, #2
    7906:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    7908:	001a      	movs	r2, r3
    790a:	3284      	adds	r2, #132	; 0x84
    790c:	2100      	movs	r1, #0
    790e:	711a      	strb	r2, [r3, #4]
    7910:	0a16      	lsrs	r6, r2, #8
    7912:	715e      	strb	r6, [r3, #5]
    7914:	0c16      	lsrs	r6, r2, #16
    7916:	719e      	strb	r6, [r3, #6]
    7918:	0e12      	lsrs	r2, r2, #24
    791a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    791c:	001a      	movs	r2, r3
    791e:	3244      	adds	r2, #68	; 0x44
    7920:	701a      	strb	r2, [r3, #0]
    7922:	0a16      	lsrs	r6, r2, #8
    7924:	705e      	strb	r6, [r3, #1]
    7926:	0c16      	lsrs	r6, r2, #16
    7928:	709e      	strb	r6, [r3, #2]
    792a:	0e12      	lsrs	r2, r2, #24
    792c:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    792e:	001a      	movs	r2, r3
    7930:	32a4      	adds	r2, #164	; 0xa4
    7932:	721a      	strb	r2, [r3, #8]
    7934:	0a16      	lsrs	r6, r2, #8
    7936:	725e      	strb	r6, [r3, #9]
    7938:	0c16      	lsrs	r6, r2, #16
    793a:	729e      	strb	r6, [r3, #10]
    793c:	0e12      	lsrs	r2, r2, #24
    793e:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7940:	001a      	movs	r2, r3
    7942:	3265      	adds	r2, #101	; 0x65
    7944:	32ff      	adds	r2, #255	; 0xff
    7946:	741a      	strb	r2, [r3, #16]
    7948:	0a16      	lsrs	r6, r2, #8
    794a:	745e      	strb	r6, [r3, #17]
    794c:	0c16      	lsrs	r6, r2, #16
    794e:	749e      	strb	r6, [r3, #18]
    7950:	0e12      	lsrs	r2, r2, #24
    7952:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    7954:	001a      	movs	r2, r3
    7956:	3235      	adds	r2, #53	; 0x35
    7958:	751a      	strb	r2, [r3, #20]
    795a:	0a16      	lsrs	r6, r2, #8
    795c:	755e      	strb	r6, [r3, #21]
    795e:	0c16      	lsrs	r6, r2, #16
    7960:	759e      	strb	r6, [r3, #22]
    7962:	0e12      	lsrs	r2, r2, #24
    7964:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    7966:	001a      	movs	r2, r3
    7968:	323e      	adds	r2, #62	; 0x3e
    796a:	761a      	strb	r2, [r3, #24]
    796c:	0a16      	lsrs	r6, r2, #8
    796e:	765e      	strb	r6, [r3, #25]
    7970:	0c16      	lsrs	r6, r2, #16
    7972:	769e      	strb	r6, [r3, #26]
    7974:	0e12      	lsrs	r2, r2, #24
    7976:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    7978:	2222      	movs	r2, #34	; 0x22
    797a:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    797c:	3201      	adds	r2, #1
    797e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    7980:	3a43      	subs	r2, #67	; 0x43
    7982:	771a      	strb	r2, [r3, #28]
    7984:	3233      	adds	r2, #51	; 0x33
    7986:	775a      	strb	r2, [r3, #29]
    7988:	3a20      	subs	r2, #32
    798a:	779a      	strb	r2, [r3, #30]
    798c:	3243      	adds	r2, #67	; 0x43
    798e:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    7990:	3a15      	subs	r2, #21
    7992:	549d      	strb	r5, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    7994:	2634      	movs	r6, #52	; 0x34
    7996:	3a01      	subs	r2, #1
    7998:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    799a:	3a1b      	subs	r2, #27
    799c:	4690      	mov	r8, r2
    799e:	3e10      	subs	r6, #16
    79a0:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    79a2:	3601      	adds	r6, #1
    79a4:	5599      	strb	r1, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    79a6:	3e1b      	subs	r6, #27
    79a8:	27df      	movs	r7, #223	; 0xdf
    79aa:	007f      	lsls	r7, r7, #1
    79ac:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    79ae:	3fff      	subs	r7, #255	; 0xff
    79b0:	46bc      	mov	ip, r7
    79b2:	27c0      	movs	r7, #192	; 0xc0
    79b4:	37ff      	adds	r7, #255	; 0xff
    79b6:	4662      	mov	r2, ip
    79b8:	55da      	strb	r2, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    79ba:	3701      	adds	r7, #1
    79bc:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    79be:	26c2      	movs	r6, #194	; 0xc2
    79c0:	36ff      	adds	r6, #255	; 0xff
    79c2:	559d      	strb	r5, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    79c4:	3529      	adds	r5, #41	; 0x29
    79c6:	4642      	mov	r2, r8
    79c8:	555a      	strb	r2, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    79ca:	3d25      	subs	r5, #37	; 0x25
    79cc:	222d      	movs	r2, #45	; 0x2d
    79ce:	549d      	strb	r5, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_KR;
    79d0:	3201      	adds	r2, #1
    79d2:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    79d4:	340d      	adds	r4, #13
    79d6:	3a06      	subs	r2, #6
    79d8:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    79da:	4a42      	ldr	r2, [pc, #264]	; (7ae4 <LORAReg_InitKR+0x1fc>)
    79dc:	7815      	ldrb	r5, [r2, #0]
    79de:	24ae      	movs	r4, #174	; 0xae
    79e0:	34ff      	adds	r4, #255	; 0xff
    79e2:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    79e4:	7855      	ldrb	r5, [r2, #1]
    79e6:	3c70      	subs	r4, #112	; 0x70
    79e8:	3cff      	subs	r4, #255	; 0xff
    79ea:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    79ec:	7894      	ldrb	r4, [r2, #2]
    79ee:	223d      	movs	r2, #61	; 0x3d
    79f0:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    79f2:	001a      	movs	r2, r3
    79f4:	3239      	adds	r2, #57	; 0x39
    79f6:	2400      	movs	r4, #0
    79f8:	7014      	strb	r4, [r2, #0]
    79fa:	7054      	strb	r4, [r2, #1]
    79fc:	7094      	strb	r4, [r2, #2]
    79fe:	70d4      	strb	r4, [r2, #3]
	RegParams.joinbccount =0;
    7a00:	2243      	movs	r2, #67	; 0x43
    7a02:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    7a04:	001a      	movs	r2, r3
    7a06:	323f      	adds	r2, #63	; 0x3f
    7a08:	7011      	strb	r1, [r2, #0]
    7a0a:	7051      	strb	r1, [r2, #1]
    7a0c:	7091      	strb	r1, [r2, #2]
    7a0e:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    7a10:	222f      	movs	r2, #47	; 0x2f
    7a12:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    7a14:	34c7      	adds	r4, #199	; 0xc7
	if(ismBand == ISM_KR920)
    7a16:	2804      	cmp	r0, #4
    7a18:	d00a      	beq.n	7a30 <LORAReg_InitKR+0x148>
    LORAREG_InitGetAttrFnPtrsKR();
    7a1a:	4b33      	ldr	r3, [pc, #204]	; (7ae8 <LORAReg_InitKR+0x200>)
    7a1c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    7a1e:	4b33      	ldr	r3, [pc, #204]	; (7aec <LORAReg_InitKR+0x204>)
    7a20:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    7a22:	4b33      	ldr	r3, [pc, #204]	; (7af0 <LORAReg_InitKR+0x208>)
    7a24:	4798      	blx	r3
}
    7a26:	0020      	movs	r0, r4
    7a28:	b006      	add	sp, #24
    7a2a:	bc04      	pop	{r2}
    7a2c:	4690      	mov	r8, r2
    7a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		InitDefault920ChannelsKR();
    7a30:	4b30      	ldr	r3, [pc, #192]	; (7af4 <LORAReg_InitKR+0x20c>)
    7a32:	4798      	blx	r3
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    7a34:	4c2a      	ldr	r4, [pc, #168]	; (7ae0 <LORAReg_InitKR+0x1f8>)
    7a36:	7820      	ldrb	r0, [r4, #0]
    7a38:	7863      	ldrb	r3, [r4, #1]
    7a3a:	021b      	lsls	r3, r3, #8
    7a3c:	4303      	orrs	r3, r0
    7a3e:	78a0      	ldrb	r0, [r4, #2]
    7a40:	0400      	lsls	r0, r0, #16
    7a42:	4303      	orrs	r3, r0
    7a44:	78e0      	ldrb	r0, [r4, #3]
    7a46:	0600      	lsls	r0, r0, #24
    7a48:	4318      	orrs	r0, r3
    7a4a:	2230      	movs	r2, #48	; 0x30
    7a4c:	492a      	ldr	r1, [pc, #168]	; (7af8 <LORAReg_InitKR+0x210>)
    7a4e:	4b2b      	ldr	r3, [pc, #172]	; (7afc <LORAReg_InitKR+0x214>)
    7a50:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    7a52:	2325      	movs	r3, #37	; 0x25
    7a54:	5ce3      	ldrb	r3, [r4, r3]
    7a56:	2b00      	cmp	r3, #0
    7a58:	dd19      	ble.n	7a8e <LORAReg_InitKR+0x1a6>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    7a5a:	4a21      	ldr	r2, [pc, #132]	; (7ae0 <LORAReg_InitKR+0x1f8>)
    7a5c:	7811      	ldrb	r1, [r2, #0]
    7a5e:	7853      	ldrb	r3, [r2, #1]
    7a60:	021b      	lsls	r3, r3, #8
    7a62:	430b      	orrs	r3, r1
    7a64:	7891      	ldrb	r1, [r2, #2]
    7a66:	0409      	lsls	r1, r1, #16
    7a68:	430b      	orrs	r3, r1
    7a6a:	78d1      	ldrb	r1, [r2, #3]
    7a6c:	0609      	lsls	r1, r1, #24
    7a6e:	4319      	orrs	r1, r3
    7a70:	2300      	movs	r3, #0
    7a72:	3ec1      	subs	r6, #193	; 0xc1
    7a74:	3eff      	subs	r6, #255	; 0xff
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    7a76:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    7a78:	0014      	movs	r4, r2
    7a7a:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    7a7c:	00da      	lsls	r2, r3, #3
    7a7e:	188a      	adds	r2, r1, r2
    7a80:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    7a82:	7195      	strb	r5, [r2, #6]
    7a84:	3301      	adds	r3, #1
    7a86:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    7a88:	5c22      	ldrb	r2, [r4, r0]
    7a8a:	4293      	cmp	r3, r2
    7a8c:	dbf6      	blt.n	7a7c <LORAReg_InitKR+0x194>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    7a8e:	4b14      	ldr	r3, [pc, #80]	; (7ae0 <LORAReg_InitKR+0x1f8>)
    7a90:	2205      	movs	r2, #5
    7a92:	2005      	movs	r0, #5
    7a94:	2183      	movs	r1, #131	; 0x83
    7a96:	0089      	lsls	r1, r1, #2
    7a98:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    7a9a:	2000      	movs	r0, #0
    7a9c:	4918      	ldr	r1, [pc, #96]	; (7b00 <LORAReg_InitKR+0x218>)
    7a9e:	5458      	strb	r0, [r3, r1]
    7aa0:	1859      	adds	r1, r3, r1
    7aa2:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    7aa4:	3001      	adds	r0, #1
    7aa6:	4917      	ldr	r1, [pc, #92]	; (7b04 <LORAReg_InitKR+0x21c>)
    7aa8:	5458      	strb	r0, [r3, r1]
    7aaa:	1859      	adds	r1, r3, r1
    7aac:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    7aae:	2100      	movs	r1, #0
    7ab0:	4a15      	ldr	r2, [pc, #84]	; (7b08 <LORAReg_InitKR+0x220>)
    7ab2:	5499      	strb	r1, [r3, r2]
    7ab4:	189a      	adds	r2, r3, r2
    7ab6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    7ab8:	4a14      	ldr	r2, [pc, #80]	; (7b0c <LORAReg_InitKR+0x224>)
    7aba:	5499      	strb	r1, [r3, r2]
    7abc:	4694      	mov	ip, r2
    7abe:	4463      	add	r3, ip
    7ac0:	2200      	movs	r2, #0
    7ac2:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    7ac4:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    7ac6:	3202      	adds	r2, #2
    7ac8:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    7aca:	4a11      	ldr	r2, [pc, #68]	; (7b10 <LORAReg_InitKR+0x228>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    7acc:	9200      	str	r2, [sp, #0]
    7ace:	4911      	ldr	r1, [pc, #68]	; (7b14 <LORAReg_InitKR+0x22c>)
    7ad0:	9a03      	ldr	r2, [sp, #12]
    7ad2:	4b11      	ldr	r3, [pc, #68]	; (7b18 <LORAReg_InitKR+0x230>)
    7ad4:	3004      	adds	r0, #4
    7ad6:	4c11      	ldr	r4, [pc, #68]	; (7b1c <LORAReg_InitKR+0x234>)
    7ad8:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ada:	2408      	movs	r4, #8
    7adc:	e79d      	b.n	7a1a <LORAReg_InitKR+0x132>
    7ade:	46c0      	nop			; (mov r8, r8)
    7ae0:	20002310 	.word	0x20002310
    7ae4:	2000230c 	.word	0x2000230c
    7ae8:	0000b8d1 	.word	0x0000b8d1
    7aec:	0000bc99 	.word	0x0000bc99
    7af0:	0000bf6d 	.word	0x0000bf6d
    7af4:	000077b1 	.word	0x000077b1
    7af8:	0001e738 	.word	0x0001e738
    7afc:	00018655 	.word	0x00018655
    7b00:	0000020f 	.word	0x0000020f
    7b04:	00000211 	.word	0x00000211
    7b08:	00000213 	.word	0x00000213
    7b0c:	0000020d 	.word	0x0000020d
    7b10:	000077ad 	.word	0x000077ad
    7b14:	20002104 	.word	0x20002104
    7b18:	0001e768 	.word	0x0001e768
    7b1c:	0000cb31 	.word	0x0000cb31

00007b20 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    7b20:	4770      	bx	lr
	...

00007b24 <LORAReg_InitNA>:
{
    7b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b26:	46de      	mov	lr, fp
    7b28:	4657      	mov	r7, sl
    7b2a:	464e      	mov	r6, r9
    7b2c:	4645      	mov	r5, r8
    7b2e:	b5e0      	push	{r5, r6, r7, lr}
    7b30:	b089      	sub	sp, #36	; 0x24
    7b32:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    7b34:	4c7c      	ldr	r4, [pc, #496]	; (7d28 <LORAReg_InitNA+0x204>)
    7b36:	2702      	movs	r7, #2
    7b38:	2302      	movs	r3, #2
    7b3a:	469b      	mov	fp, r3
    7b3c:	2326      	movs	r3, #38	; 0x26
    7b3e:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    7b40:	2248      	movs	r2, #72	; 0x48
    7b42:	3304      	adds	r3, #4
    7b44:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    7b46:	3b03      	subs	r3, #3
    7b48:	3a41      	subs	r2, #65	; 0x41
    7b4a:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    7b4c:	221e      	movs	r2, #30
    7b4e:	3301      	adds	r3, #1
    7b50:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    7b52:	0023      	movs	r3, r4
    7b54:	33b4      	adds	r3, #180	; 0xb4
    7b56:	0018      	movs	r0, r3
    7b58:	2500      	movs	r5, #0
    7b5a:	7123      	strb	r3, [r4, #4]
    7b5c:	0a1b      	lsrs	r3, r3, #8
    7b5e:	7163      	strb	r3, [r4, #5]
    7b60:	0c03      	lsrs	r3, r0, #16
    7b62:	71a3      	strb	r3, [r4, #6]
    7b64:	0e03      	lsrs	r3, r0, #24
    7b66:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    7b68:	0026      	movs	r6, r4
    7b6a:	3644      	adds	r6, #68	; 0x44
    7b6c:	7026      	strb	r6, [r4, #0]
    7b6e:	0a33      	lsrs	r3, r6, #8
    7b70:	7063      	strb	r3, [r4, #1]
    7b72:	0c33      	lsrs	r3, r6, #16
    7b74:	70a3      	strb	r3, [r4, #2]
    7b76:	0e33      	lsrs	r3, r6, #24
    7b78:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    7b7a:	2321      	movs	r3, #33	; 0x21
    7b7c:	32e1      	adds	r2, #225	; 0xe1
    7b7e:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    7b80:	3add      	subs	r2, #221	; 0xdd
    7b82:	3b17      	subs	r3, #23
    7b84:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    7b86:	3a1a      	subs	r2, #26
    7b88:	2108      	movs	r1, #8
    7b8a:	468c      	mov	ip, r1
    7b8c:	2123      	movs	r1, #35	; 0x23
    7b8e:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    7b90:	3983      	subs	r1, #131	; 0x83
    7b92:	4688      	mov	r8, r1
    7b94:	7721      	strb	r1, [r4, #28]
    7b96:	2170      	movs	r1, #112	; 0x70
    7b98:	7761      	strb	r1, [r4, #29]
    7b9a:	4661      	mov	r1, ip
    7b9c:	77a1      	strb	r1, [r4, #30]
    7b9e:	2137      	movs	r1, #55	; 0x37
    7ba0:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    7ba2:	2138      	movs	r1, #56	; 0x38
    7ba4:	468a      	mov	sl, r1
    7ba6:	3918      	subs	r1, #24
    7ba8:	4653      	mov	r3, sl
    7baa:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    7bac:	2304      	movs	r3, #4
    7bae:	4699      	mov	r9, r3
    7bb0:	3320      	adds	r3, #32
    7bb2:	4649      	mov	r1, r9
    7bb4:	54e1      	strb	r1, [r4, r3]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    7bb6:	3301      	adds	r3, #1
    7bb8:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    7bba:	3330      	adds	r3, #48	; 0x30
    7bbc:	33ff      	adds	r3, #255	; 0xff
    7bbe:	2140      	movs	r1, #64	; 0x40
    7bc0:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    7bc2:	2356      	movs	r3, #86	; 0x56
    7bc4:	33ff      	adds	r3, #255	; 0xff
    7bc6:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    7bc8:	3b05      	subs	r3, #5
    7bca:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    7bcc:	2352      	movs	r3, #82	; 0x52
    7bce:	33ff      	adds	r3, #255	; 0xff
    7bd0:	4649      	mov	r1, r9
    7bd2:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    7bd4:	3301      	adds	r3, #1
    7bd6:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    7bd8:	3b46      	subs	r3, #70	; 0x46
    7bda:	3bff      	subs	r3, #255	; 0xff
    7bdc:	2254      	movs	r2, #84	; 0x54
    7bde:	32ff      	adds	r2, #255	; 0xff
    7be0:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    7be2:	3203      	adds	r2, #3
    7be4:	230a      	movs	r3, #10
    7be6:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    7be8:	0022      	movs	r2, r4
    7bea:	3235      	adds	r2, #53	; 0x35
    7bec:	7522      	strb	r2, [r4, #20]
    7bee:	0a13      	lsrs	r3, r2, #8
    7bf0:	7563      	strb	r3, [r4, #21]
    7bf2:	0c13      	lsrs	r3, r2, #16
    7bf4:	75a3      	strb	r3, [r4, #22]
    7bf6:	0e12      	lsrs	r2, r2, #24
    7bf8:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    7bfa:	0022      	movs	r2, r4
    7bfc:	323e      	adds	r2, #62	; 0x3e
    7bfe:	7622      	strb	r2, [r4, #24]
    7c00:	0a13      	lsrs	r3, r2, #8
    7c02:	7663      	strb	r3, [r4, #25]
    7c04:	0c13      	lsrs	r3, r2, #16
    7c06:	76a3      	strb	r3, [r4, #26]
    7c08:	0e12      	lsrs	r2, r2, #24
    7c0a:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    7c0c:	2360      	movs	r3, #96	; 0x60
    7c0e:	22a2      	movs	r2, #162	; 0xa2
    7c10:	0052      	lsls	r2, r2, #1
    7c12:	54a3      	strb	r3, [r4, r2]
    7c14:	0022      	movs	r2, r4
    7c16:	3245      	adds	r2, #69	; 0x45
    7c18:	32ff      	adds	r2, #255	; 0xff
    7c1a:	2301      	movs	r3, #1
    7c1c:	7053      	strb	r3, [r2, #1]
    7c1e:	2338      	movs	r3, #56	; 0x38
    7c20:	425b      	negs	r3, r3
    7c22:	7093      	strb	r3, [r2, #2]
    7c24:	2335      	movs	r3, #53	; 0x35
    7c26:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    7c28:	2340      	movs	r3, #64	; 0x40
    7c2a:	425b      	negs	r3, r3
    7c2c:	22a4      	movs	r2, #164	; 0xa4
    7c2e:	0052      	lsls	r2, r2, #1
    7c30:	54a3      	strb	r3, [r4, r2]
    7c32:	0022      	movs	r2, r4
    7c34:	3249      	adds	r2, #73	; 0x49
    7c36:	32ff      	adds	r2, #255	; 0xff
    7c38:	2351      	movs	r3, #81	; 0x51
    7c3a:	425b      	negs	r3, r3
    7c3c:	7053      	strb	r3, [r2, #1]
    7c3e:	232e      	movs	r3, #46	; 0x2e
    7c40:	425b      	negs	r3, r3
    7c42:	7093      	strb	r3, [r2, #2]
    7c44:	2335      	movs	r3, #53	; 0x35
    7c46:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    7c48:	22a6      	movs	r2, #166	; 0xa6
    7c4a:	0052      	lsls	r2, r2, #1
    7c4c:	4643      	mov	r3, r8
    7c4e:	54a3      	strb	r3, [r4, r2]
    7c50:	0022      	movs	r2, r4
    7c52:	324d      	adds	r2, #77	; 0x4d
    7c54:	32ff      	adds	r2, #255	; 0xff
    7c56:	2370      	movs	r3, #112	; 0x70
    7c58:	7053      	strb	r3, [r2, #1]
    7c5a:	4663      	mov	r3, ip
    7c5c:	7093      	strb	r3, [r2, #2]
    7c5e:	2337      	movs	r3, #55	; 0x37
    7c60:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    7c62:	2303      	movs	r3, #3
    7c64:	222c      	movs	r2, #44	; 0x2c
    7c66:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    7c68:	3201      	adds	r2, #1
    7c6a:	230a      	movs	r3, #10
    7c6c:	54a3      	strb	r3, [r4, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_NA;
    7c6e:	232e      	movs	r3, #46	; 0x2e
    7c70:	3a26      	subs	r2, #38	; 0x26
    7c72:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    7c74:	332b      	adds	r3, #43	; 0x2b
    7c76:	33ff      	adds	r3, #255	; 0xff
    7c78:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    7c7a:	4b2c      	ldr	r3, [pc, #176]	; (7d2c <LORAReg_InitNA+0x208>)
    7c7c:	7819      	ldrb	r1, [r3, #0]
    7c7e:	223e      	movs	r2, #62	; 0x3e
    7c80:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    7c82:	785a      	ldrb	r2, [r3, #1]
    7c84:	233d      	movs	r3, #61	; 0x3d
    7c86:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    7c88:	0023      	movs	r3, r4
    7c8a:	3339      	adds	r3, #57	; 0x39
    7c8c:	2200      	movs	r2, #0
    7c8e:	701a      	strb	r2, [r3, #0]
    7c90:	705a      	strb	r2, [r3, #1]
    7c92:	709a      	strb	r2, [r3, #2]
    7c94:	70da      	strb	r2, [r3, #3]
	RegParams.joinbccount =0;
    7c96:	2343      	movs	r3, #67	; 0x43
    7c98:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    7c9a:	0023      	movs	r3, r4
    7c9c:	333f      	adds	r3, #63	; 0x3f
    7c9e:	701a      	strb	r2, [r3, #0]
    7ca0:	705a      	strb	r2, [r3, #1]
    7ca2:	709a      	strb	r2, [r3, #2]
    7ca4:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    7ca6:	232f      	movs	r3, #47	; 0x2f
    7ca8:	466a      	mov	r2, sp
    7caa:	7b12      	ldrb	r2, [r2, #12]
    7cac:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    7cae:	2290      	movs	r2, #144	; 0x90
    7cb0:	491f      	ldr	r1, [pc, #124]	; (7d30 <LORAReg_InitNA+0x20c>)
    7cb2:	4b20      	ldr	r3, [pc, #128]	; (7d34 <LORAReg_InitNA+0x210>)
    7cb4:	4698      	mov	r8, r3
    7cb6:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    7cb8:	2270      	movs	r2, #112	; 0x70
    7cba:	491f      	ldr	r1, [pc, #124]	; (7d38 <LORAReg_InitNA+0x214>)
    7cbc:	0030      	movs	r0, r6
    7cbe:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    7cc0:	2358      	movs	r3, #88	; 0x58
    7cc2:	33ff      	adds	r3, #255	; 0xff
    7cc4:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    7cc6:	33b5      	adds	r3, #181	; 0xb5
    7cc8:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    7cca:	2200      	movs	r2, #0
    7ccc:	4b1b      	ldr	r3, [pc, #108]	; (7d3c <LORAReg_InitNA+0x218>)
    7cce:	54e2      	strb	r2, [r4, r3]
    7cd0:	18e3      	adds	r3, r4, r3
    7cd2:	465a      	mov	r2, fp
    7cd4:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    7cd6:	2200      	movs	r2, #0
    7cd8:	4b19      	ldr	r3, [pc, #100]	; (7d40 <LORAReg_InitNA+0x21c>)
    7cda:	54e2      	strb	r2, [r4, r3]
    7cdc:	18e3      	adds	r3, r4, r3
    7cde:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    7ce0:	4b18      	ldr	r3, [pc, #96]	; (7d44 <LORAReg_InitNA+0x220>)
    7ce2:	54e2      	strb	r2, [r4, r3]
    7ce4:	18e3      	adds	r3, r4, r3
    7ce6:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    7ce8:	4b17      	ldr	r3, [pc, #92]	; (7d48 <LORAReg_InitNA+0x224>)
    7cea:	2201      	movs	r2, #1
    7cec:	54e2      	strb	r2, [r4, r3]
    7cee:	469c      	mov	ip, r3
    7cf0:	4464      	add	r4, ip
    7cf2:	465b      	mov	r3, fp
    7cf4:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    7cf6:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    7cf8:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    7cfa:	4a14      	ldr	r2, [pc, #80]	; (7d4c <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    7cfc:	9200      	str	r2, [sp, #0]
    7cfe:	4914      	ldr	r1, [pc, #80]	; (7d50 <LORAReg_InitNA+0x22c>)
    7d00:	9a05      	ldr	r2, [sp, #20]
    7d02:	4b14      	ldr	r3, [pc, #80]	; (7d54 <LORAReg_InitNA+0x230>)
    7d04:	2002      	movs	r0, #2
    7d06:	4c14      	ldr	r4, [pc, #80]	; (7d58 <LORAReg_InitNA+0x234>)
    7d08:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    7d0a:	4b14      	ldr	r3, [pc, #80]	; (7d5c <LORAReg_InitNA+0x238>)
    7d0c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    7d0e:	4b14      	ldr	r3, [pc, #80]	; (7d60 <LORAReg_InitNA+0x23c>)
    7d10:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    7d12:	4b14      	ldr	r3, [pc, #80]	; (7d64 <LORAReg_InitNA+0x240>)
    7d14:	4798      	blx	r3
}
    7d16:	2008      	movs	r0, #8
    7d18:	b009      	add	sp, #36	; 0x24
    7d1a:	bc3c      	pop	{r2, r3, r4, r5}
    7d1c:	4690      	mov	r8, r2
    7d1e:	4699      	mov	r9, r3
    7d20:	46a2      	mov	sl, r4
    7d22:	46ab      	mov	fp, r5
    7d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	20002310 	.word	0x20002310
    7d2c:	2000230c 	.word	0x2000230c
    7d30:	0001e778 	.word	0x0001e778
    7d34:	00018655 	.word	0x00018655
    7d38:	0001e808 	.word	0x0001e808
    7d3c:	0000020f 	.word	0x0000020f
    7d40:	00000211 	.word	0x00000211
    7d44:	00000213 	.word	0x00000213
    7d48:	0000020d 	.word	0x0000020d
    7d4c:	00007b21 	.word	0x00007b21
    7d50:	20002108 	.word	0x20002108
    7d54:	0001e878 	.word	0x0001e878
    7d58:	0000cb31 	.word	0x0000cb31
    7d5c:	0000b139 	.word	0x0000b139
    7d60:	0000ba19 	.word	0x0000ba19
    7d64:	0000bd01 	.word	0x0000bd01

00007d68 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7d68:	2015      	movs	r0, #21
    7d6a:	4770      	bx	lr

00007d6c <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7d6c:	2015      	movs	r0, #21
    7d6e:	4770      	bx	lr

00007d70 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    7d70:	232a      	movs	r3, #42	; 0x2a
    7d72:	4902      	ldr	r1, [pc, #8]	; (7d7c <LORAREG_GetAttr_MaxChannel+0xc>)
    7d74:	5ccb      	ldrb	r3, [r1, r3]
    7d76:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7d78:	2008      	movs	r0, #8
    7d7a:	4770      	bx	lr
    7d7c:	20002310 	.word	0x20002310

00007d80 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    7d80:	4905      	ldr	r1, [pc, #20]	; (7d98 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    7d82:	2321      	movs	r3, #33	; 0x21
    7d84:	5cc8      	ldrb	r0, [r1, r3]
    7d86:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    7d88:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d8a:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    7d8c:	2bff      	cmp	r3, #255	; 0xff
    7d8e:	d000      	beq.n	7d92 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    7d90:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    7d92:	3002      	adds	r0, #2
    7d94:	e7fc      	b.n	7d90 <LORAREG_GetAttr_MinNewChIndex+0x10>
    7d96:	46c0      	nop			; (mov r8, r8)
    7d98:	20002310 	.word	0x20002310

00007d9c <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    7d9c:	2322      	movs	r3, #34	; 0x22
    7d9e:	4902      	ldr	r1, [pc, #8]	; (7da8 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    7da0:	5ccb      	ldrb	r3, [r1, r3]
    7da2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7da4:	2008      	movs	r0, #8
    7da6:	4770      	bx	lr
    7da8:	20002310 	.word	0x20002310

00007dac <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    7dac:	2323      	movs	r3, #35	; 0x23
    7dae:	4902      	ldr	r1, [pc, #8]	; (7db8 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    7db0:	5ccb      	ldrb	r3, [r1, r3]
    7db2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7db4:	2008      	movs	r0, #8
    7db6:	4770      	bx	lr
    7db8:	20002310 	.word	0x20002310

00007dbc <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    7dbc:	2320      	movs	r3, #32
    7dbe:	4902      	ldr	r1, [pc, #8]	; (7dc8 <LORAREG_GetAttr_RegFeatures+0xc>)
    7dc0:	5ccb      	ldrb	r3, [r1, r3]
    7dc2:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7dc4:	2008      	movs	r0, #8
    7dc6:	4770      	bx	lr
    7dc8:	20002310 	.word	0x20002310

00007dcc <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    7dcc:	b530      	push	{r4, r5, lr}
    7dce:	b083      	sub	sp, #12
    7dd0:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    7dd2:	780c      	ldrb	r4, [r1, #0]
    7dd4:	a901      	add	r1, sp, #4
    7dd6:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    7dd8:	2301      	movs	r3, #1
    7dda:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7ddc:	4b0d      	ldr	r3, [pc, #52]	; (7e14 <LORAREG_GetAttr_DataRange+0x48>)
    7dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7de0:	2015      	movs	r0, #21
    7de2:	4798      	blx	r3
    7de4:	2808      	cmp	r0, #8
    7de6:	d004      	beq.n	7df2 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    7de8:	23ff      	movs	r3, #255	; 0xff
    7dea:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    7dec:	200a      	movs	r0, #10
	}
	return result;
}
    7dee:	b003      	add	sp, #12
    7df0:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    7df2:	4909      	ldr	r1, [pc, #36]	; (7e18 <LORAREG_GetAttr_DataRange+0x4c>)
    7df4:	790b      	ldrb	r3, [r1, #4]
    7df6:	794a      	ldrb	r2, [r1, #5]
    7df8:	0212      	lsls	r2, r2, #8
    7dfa:	4313      	orrs	r3, r2
    7dfc:	798a      	ldrb	r2, [r1, #6]
    7dfe:	0412      	lsls	r2, r2, #16
    7e00:	431a      	orrs	r2, r3
    7e02:	79cb      	ldrb	r3, [r1, #7]
    7e04:	061b      	lsls	r3, r3, #24
    7e06:	431a      	orrs	r2, r3
    7e08:	0063      	lsls	r3, r4, #1
    7e0a:	189b      	adds	r3, r3, r2
    7e0c:	785b      	ldrb	r3, [r3, #1]
    7e0e:	702b      	strb	r3, [r5, #0]
    7e10:	e7ed      	b.n	7dee <LORAREG_GetAttr_DataRange+0x22>
    7e12:	46c0      	nop			; (mov r8, r8)
    7e14:	20000cf4 	.word	0x20000cf4
    7e18:	20002310 	.word	0x20002310

00007e1c <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    7e1c:	b530      	push	{r4, r5, lr}
    7e1e:	b083      	sub	sp, #12
    7e20:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    7e22:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    7e24:	a901      	add	r1, sp, #4
    7e26:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7e28:	2301      	movs	r3, #1
    7e2a:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    7e2c:	4b0c      	ldr	r3, [pc, #48]	; (7e60 <LORAREG_GetAttr_ChIdStatus+0x44>)
    7e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7e30:	2015      	movs	r0, #21
    7e32:	4798      	blx	r3
    7e34:	2808      	cmp	r0, #8
    7e36:	d004      	beq.n	7e42 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    7e38:	2300      	movs	r3, #0
    7e3a:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    7e3c:	200a      	movs	r0, #10
	}
	return result;
}
    7e3e:	b003      	add	sp, #12
    7e40:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    7e42:	4908      	ldr	r1, [pc, #32]	; (7e64 <LORAREG_GetAttr_ChIdStatus+0x48>)
    7e44:	790a      	ldrb	r2, [r1, #4]
    7e46:	794b      	ldrb	r3, [r1, #5]
    7e48:	021b      	lsls	r3, r3, #8
    7e4a:	4313      	orrs	r3, r2
    7e4c:	798a      	ldrb	r2, [r1, #6]
    7e4e:	0412      	lsls	r2, r2, #16
    7e50:	4313      	orrs	r3, r2
    7e52:	79ca      	ldrb	r2, [r1, #7]
    7e54:	0612      	lsls	r2, r2, #24
    7e56:	431a      	orrs	r2, r3
    7e58:	0064      	lsls	r4, r4, #1
    7e5a:	5ca3      	ldrb	r3, [r4, r2]
    7e5c:	702b      	strb	r3, [r5, #0]
    7e5e:	e7ee      	b.n	7e3e <LORAREG_GetAttr_ChIdStatus+0x22>
    7e60:	20000cf4 	.word	0x20000cf4
    7e64:	20002310 	.word	0x20002310

00007e68 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    7e68:	2301      	movs	r3, #1
    7e6a:	425b      	negs	r3, r3
    7e6c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7e6e:	200a      	movs	r0, #10
    7e70:	4770      	bx	lr

00007e72 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    7e72:	2301      	movs	r3, #1
    7e74:	425b      	negs	r3, r3
    7e76:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7e78:	200a      	movs	r0, #10
    7e7a:	4770      	bx	lr

00007e7c <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    7e7c:	23fa      	movs	r3, #250	; 0xfa
    7e7e:	009b      	lsls	r3, r3, #2
    7e80:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7e82:	2008      	movs	r0, #8
    7e84:	4770      	bx	lr

00007e86 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    7e86:	23fa      	movs	r3, #250	; 0xfa
    7e88:	00db      	lsls	r3, r3, #3
    7e8a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7e8c:	2008      	movs	r0, #8
    7e8e:	4770      	bx	lr

00007e90 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    7e90:	4b01      	ldr	r3, [pc, #4]	; (7e98 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    7e92:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7e94:	2008      	movs	r0, #8
    7e96:	4770      	bx	lr
    7e98:	00001388 	.word	0x00001388

00007e9c <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    7e9c:	4b01      	ldr	r3, [pc, #4]	; (7ea4 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    7e9e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ea0:	2008      	movs	r0, #8
    7ea2:	4770      	bx	lr
    7ea4:	00001770 	.word	0x00001770

00007ea8 <LORAREG_GetAttr_MacAdrAckDelay>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    7ea8:	2320      	movs	r3, #32
    7eaa:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7eac:	2008      	movs	r0, #8
    7eae:	4770      	bx	lr

00007eb0 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    7eb0:	2340      	movs	r3, #64	; 0x40
    7eb2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7eb4:	2008      	movs	r0, #8
    7eb6:	4770      	bx	lr

00007eb8 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    7eb8:	2327      	movs	r3, #39	; 0x27
    7eba:	4902      	ldr	r1, [pc, #8]	; (7ec4 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    7ebc:	5ccb      	ldrb	r3, [r1, r3]
    7ebe:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ec0:	2008      	movs	r0, #8
    7ec2:	4770      	bx	lr
    7ec4:	20002310 	.word	0x20002310

00007ec8 <LORAREG_GetAttr_DefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_DefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.defTxPwrIndx;
    7ec8:	232e      	movs	r3, #46	; 0x2e
    7eca:	4902      	ldr	r1, [pc, #8]	; (7ed4 <LORAREG_GetAttr_DefTxPwr+0xc>)
    7ecc:	5ccb      	ldrb	r3, [r1, r3]
    7ece:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ed0:	2008      	movs	r0, #8
    7ed2:	4770      	bx	lr
    7ed4:	20002310 	.word	0x20002310

00007ed8 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    7ed8:	2326      	movs	r3, #38	; 0x26
    7eda:	4902      	ldr	r1, [pc, #8]	; (7ee4 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    7edc:	5ccb      	ldrb	r3, [r1, r3]
    7ede:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ee0:	2008      	movs	r0, #8
    7ee2:	4770      	bx	lr
    7ee4:	20002310 	.word	0x20002310

00007ee8 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    7ee8:	2330      	movs	r3, #48	; 0x30
    7eea:	4902      	ldr	r1, [pc, #8]	; (7ef4 <LORAREG_GetAttr_CurChIndx+0xc>)
    7eec:	5ccb      	ldrb	r3, [r1, r3]
    7eee:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ef0:	2008      	movs	r0, #8
    7ef2:	4770      	bx	lr
    7ef4:	20002310 	.word	0x20002310

00007ef8 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    7ef8:	4b09      	ldr	r3, [pc, #36]	; (7f20 <LORAREG_GetAttr_DefLBTParams+0x28>)
    7efa:	21e0      	movs	r1, #224	; 0xe0
    7efc:	0049      	lsls	r1, r1, #1
    7efe:	5c59      	ldrb	r1, [r3, r1]
    7f00:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    7f02:	21df      	movs	r1, #223	; 0xdf
    7f04:	0049      	lsls	r1, r1, #1
    7f06:	5c59      	ldrb	r1, [r3, r1]
    7f08:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    7f0a:	21c0      	movs	r1, #192	; 0xc0
    7f0c:	31ff      	adds	r1, #255	; 0xff
    7f0e:	565b      	ldrsb	r3, [r3, r1]
    7f10:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    7f12:	2301      	movs	r3, #1
    7f14:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    7f16:	3304      	adds	r3, #4
    7f18:	8093      	strh	r3, [r2, #4]
	return 0;
}
    7f1a:	2000      	movs	r0, #0
    7f1c:	4770      	bx	lr
    7f1e:	46c0      	nop			; (mov r8, r8)
    7f20:	20002310 	.word	0x20002310

00007f24 <LORAREG_GetAttr_FreqT1>:
{
    7f24:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    7f26:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    7f28:	212a      	movs	r1, #42	; 0x2a
    7f2a:	4820      	ldr	r0, [pc, #128]	; (7fac <LORAREG_GetAttr_FreqT1+0x88>)
    7f2c:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7f2e:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    7f30:	428b      	cmp	r3, r1
    7f32:	dc3a      	bgt.n	7faa <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    7f34:	304b      	adds	r0, #75	; 0x4b
    7f36:	30ff      	adds	r0, #255	; 0xff
    7f38:	4c1c      	ldr	r4, [pc, #112]	; (7fac <LORAREG_GetAttr_FreqT1+0x88>)
    7f3a:	5c24      	ldrb	r4, [r4, r0]
    7f3c:	42a3      	cmp	r3, r4
    7f3e:	d31c      	bcc.n	7f7a <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    7f40:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    7f42:	428b      	cmp	r3, r1
    7f44:	da31      	bge.n	7faa <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7f46:	1b1b      	subs	r3, r3, r4
    7f48:	4919      	ldr	r1, [pc, #100]	; (7fb0 <LORAREG_GetAttr_FreqT1+0x8c>)
    7f4a:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7f4c:	4c17      	ldr	r4, [pc, #92]	; (7fac <LORAREG_GetAttr_FreqT1+0x88>)
    7f4e:	21a4      	movs	r1, #164	; 0xa4
    7f50:	0049      	lsls	r1, r1, #1
    7f52:	5c61      	ldrb	r1, [r4, r1]
    7f54:	204a      	movs	r0, #74	; 0x4a
    7f56:	30ff      	adds	r0, #255	; 0xff
    7f58:	5c20      	ldrb	r0, [r4, r0]
    7f5a:	0200      	lsls	r0, r0, #8
    7f5c:	4301      	orrs	r1, r0
    7f5e:	20a5      	movs	r0, #165	; 0xa5
    7f60:	0040      	lsls	r0, r0, #1
    7f62:	5c20      	ldrb	r0, [r4, r0]
    7f64:	0400      	lsls	r0, r0, #16
    7f66:	4308      	orrs	r0, r1
    7f68:	214c      	movs	r1, #76	; 0x4c
    7f6a:	31ff      	adds	r1, #255	; 0xff
    7f6c:	5c61      	ldrb	r1, [r4, r1]
    7f6e:	0609      	lsls	r1, r1, #24
    7f70:	4301      	orrs	r1, r0
    7f72:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    7f74:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7f76:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    7f78:	e017      	b.n	7faa <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7f7a:	4c0c      	ldr	r4, [pc, #48]	; (7fac <LORAREG_GetAttr_FreqT1+0x88>)
    7f7c:	21a2      	movs	r1, #162	; 0xa2
    7f7e:	0049      	lsls	r1, r1, #1
    7f80:	5c61      	ldrb	r1, [r4, r1]
    7f82:	2046      	movs	r0, #70	; 0x46
    7f84:	30ff      	adds	r0, #255	; 0xff
    7f86:	5c20      	ldrb	r0, [r4, r0]
    7f88:	0200      	lsls	r0, r0, #8
    7f8a:	4308      	orrs	r0, r1
    7f8c:	21a3      	movs	r1, #163	; 0xa3
    7f8e:	0049      	lsls	r1, r1, #1
    7f90:	5c61      	ldrb	r1, [r4, r1]
    7f92:	0409      	lsls	r1, r1, #16
    7f94:	4308      	orrs	r0, r1
    7f96:	2148      	movs	r1, #72	; 0x48
    7f98:	31ff      	adds	r1, #255	; 0xff
    7f9a:	5c61      	ldrb	r1, [r4, r1]
    7f9c:	0609      	lsls	r1, r1, #24
    7f9e:	4301      	orrs	r1, r0
    7fa0:	4804      	ldr	r0, [pc, #16]	; (7fb4 <LORAREG_GetAttr_FreqT1+0x90>)
    7fa2:	4343      	muls	r3, r0
    7fa4:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    7fa6:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7fa8:	2008      	movs	r0, #8
}
    7faa:	bd30      	pop	{r4, r5, pc}
    7fac:	20002310 	.word	0x20002310
    7fb0:	00186a00 	.word	0x00186a00
    7fb4:	00030d40 	.word	0x00030d40

00007fb8 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7fb8:	780a      	ldrb	r2, [r1, #0]
    7fba:	2352      	movs	r3, #82	; 0x52
    7fbc:	33ff      	adds	r3, #255	; 0xff
    7fbe:	4903      	ldr	r1, [pc, #12]	; (7fcc <ValidateDataRateTxT1+0x14>)
    7fc0:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7fc2:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7fc4:	429a      	cmp	r2, r3
    7fc6:	d900      	bls.n	7fca <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    7fc8:	3002      	adds	r0, #2
	}
	
	return result;
}
    7fca:	4770      	bx	lr
    7fcc:	20002310 	.word	0x20002310

00007fd0 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7fd0:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    7fd2:	2224      	movs	r2, #36	; 0x24
    7fd4:	4908      	ldr	r1, [pc, #32]	; (7ff8 <ValidateDataRateTxT2+0x28>)
    7fd6:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    7fd8:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    7fda:	429a      	cmp	r2, r3
    7fdc:	d30a      	bcc.n	7ff4 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7fde:	22c4      	movs	r2, #196	; 0xc4
    7fe0:	32ff      	adds	r2, #255	; 0xff
    7fe2:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7fe4:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    7fe6:	07d2      	lsls	r2, r2, #31
    7fe8:	d504      	bpl.n	7ff4 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7fea:	2222      	movs	r2, #34	; 0x22
    7fec:	5c8a      	ldrb	r2, [r1, r2]
    7fee:	429a      	cmp	r2, r3
    7ff0:	d900      	bls.n	7ff4 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    7ff2:	3002      	adds	r0, #2
	}
	
	return result;
}
    7ff4:	4770      	bx	lr
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	20002310 	.word	0x20002310

00007ffc <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7ffc:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    7ffe:	2254      	movs	r2, #84	; 0x54
    8000:	32ff      	adds	r2, #255	; 0xff
    8002:	4906      	ldr	r1, [pc, #24]	; (801c <ValidateDataRateRxT1+0x20>)
    8004:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    8006:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    8008:	429a      	cmp	r2, r3
    800a:	d306      	bcc.n	801a <ValidateDataRateRxT1+0x1e>
    800c:	22a9      	movs	r2, #169	; 0xa9
    800e:	0052      	lsls	r2, r2, #1
    8010:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8012:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    8014:	429a      	cmp	r2, r3
    8016:	d900      	bls.n	801a <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8018:	3002      	adds	r0, #2
	}
	return result;
}
    801a:	4770      	bx	lr
    801c:	20002310 	.word	0x20002310

00008020 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    8020:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    8022:	2224      	movs	r2, #36	; 0x24
    8024:	4908      	ldr	r1, [pc, #32]	; (8048 <ValidateDataRateRxT2+0x28>)
    8026:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    8028:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    802a:	429a      	cmp	r2, r3
    802c:	d30a      	bcc.n	8044 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    802e:	22c4      	movs	r2, #196	; 0xc4
    8030:	32ff      	adds	r2, #255	; 0xff
    8032:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8034:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    8036:	0792      	lsls	r2, r2, #30
    8038:	d504      	bpl.n	8044 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    803a:	2222      	movs	r2, #34	; 0x22
    803c:	5c8a      	ldrb	r2, [r1, r2]
    803e:	429a      	cmp	r2, r3
    8040:	d900      	bls.n	8044 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    8042:	3002      	adds	r0, #2
	}

	return result;
}
    8044:	4770      	bx	lr
    8046:	46c0      	nop			; (mov r8, r8)
    8048:	20002310 	.word	0x20002310

0000804c <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    804c:	780a      	ldrb	r2, [r1, #0]
    804e:	232a      	movs	r3, #42	; 0x2a
    8050:	4903      	ldr	r1, [pc, #12]	; (8060 <ValidateChannelId+0x14>)
    8052:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    8054:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    8056:	429a      	cmp	r2, r3
    8058:	db00      	blt.n	805c <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    805a:	3002      	adds	r0, #2
    }
	
    return result;
}
    805c:	4770      	bx	lr
    805e:	46c0      	nop			; (mov r8, r8)
    8060:	20002310 	.word	0x20002310

00008064 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    8064:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    8066:	222a      	movs	r2, #42	; 0x2a
    8068:	4808      	ldr	r0, [pc, #32]	; (808c <ValidateChannelIdT2+0x28>)
    806a:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    806c:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    806e:	4293      	cmp	r3, r2
    8070:	da0a      	bge.n	8088 <ValidateChannelIdT2+0x24>
    8072:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    8074:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    8076:	2a00      	cmp	r2, #0
    8078:	d106      	bne.n	8088 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    807a:	22c2      	movs	r2, #194	; 0xc2
    807c:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    807e:	4903      	ldr	r1, [pc, #12]	; (808c <ValidateChannelIdT2+0x28>)
    8080:	5c8a      	ldrb	r2, [r1, r2]
    8082:	429a      	cmp	r2, r3
    8084:	d900      	bls.n	8088 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    8086:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    8088:	4770      	bx	lr
    808a:	46c0      	nop			; (mov r8, r8)
    808c:	20002310 	.word	0x20002310

00008090 <LORAREG_GetAttr_DutyCycleT2>:
{
    8090:	b530      	push	{r4, r5, lr}
    8092:	b083      	sub	sp, #12
    8094:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    8096:	780d      	ldrb	r5, [r1, #0]
    8098:	a901      	add	r1, sp, #4
    809a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    809c:	2301      	movs	r3, #1
    809e:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    80a0:	2015      	movs	r0, #21
    80a2:	4b0b      	ldr	r3, [pc, #44]	; (80d0 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    80a4:	4798      	blx	r3
    80a6:	2808      	cmp	r0, #8
    80a8:	d002      	beq.n	80b0 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    80aa:	200a      	movs	r0, #10
}
    80ac:	b003      	add	sp, #12
    80ae:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    80b0:	4a08      	ldr	r2, [pc, #32]	; (80d4 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    80b2:	006b      	lsls	r3, r5, #1
    80b4:	195b      	adds	r3, r3, r5
    80b6:	009b      	lsls	r3, r3, #2
    80b8:	18d3      	adds	r3, r2, r3
    80ba:	33ac      	adds	r3, #172	; 0xac
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    80bc:	781b      	ldrb	r3, [r3, #0]
    80be:	33d4      	adds	r3, #212	; 0xd4
    80c0:	005b      	lsls	r3, r3, #1
    80c2:	18d2      	adds	r2, r2, r3
    80c4:	7991      	ldrb	r1, [r2, #6]
    80c6:	79d3      	ldrb	r3, [r2, #7]
    80c8:	021b      	lsls	r3, r3, #8
    80ca:	430b      	orrs	r3, r1
    80cc:	8023      	strh	r3, [r4, #0]
    80ce:	e7ed      	b.n	80ac <LORAREG_GetAttr_DutyCycleT2+0x1c>
    80d0:	00008065 	.word	0x00008065
    80d4:	20002310 	.word	0x20002310

000080d8 <LORAREG_GetAttr_MinMaxDr>:
{
    80d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80da:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    80dc:	4b21      	ldr	r3, [pc, #132]	; (8164 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    80de:	2124      	movs	r1, #36	; 0x24
    80e0:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    80e2:	3101      	adds	r1, #1
    80e4:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    80e6:	3105      	adds	r1, #5
    80e8:	565e      	ldrsb	r6, [r3, r1]
    80ea:	2e00      	cmp	r6, #0
    80ec:	dd28      	ble.n	8140 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    80ee:	0019      	movs	r1, r3
    80f0:	791d      	ldrb	r5, [r3, #4]
    80f2:	795b      	ldrb	r3, [r3, #5]
    80f4:	021b      	lsls	r3, r3, #8
    80f6:	432b      	orrs	r3, r5
    80f8:	798d      	ldrb	r5, [r1, #6]
    80fa:	042d      	lsls	r5, r5, #16
    80fc:	432b      	orrs	r3, r5
    80fe:	79cd      	ldrb	r5, [r1, #7]
    8100:	062d      	lsls	r5, r5, #24
    8102:	431d      	orrs	r5, r3
    8104:	2100      	movs	r1, #0
    8106:	e00b      	b.n	8120 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    8108:	7843      	ldrb	r3, [r0, #1]
    810a:	091b      	lsrs	r3, r3, #4
    810c:	42bb      	cmp	r3, r7
    810e:	dd03      	ble.n	8118 <LORAREG_GetAttr_MinMaxDr+0x40>
    8110:	7800      	ldrb	r0, [r0, #0]
    8112:	2800      	cmp	r0, #0
    8114:	d000      	beq.n	8118 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    8116:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    8118:	3101      	adds	r1, #1
    811a:	b2c9      	uxtb	r1, r1
    811c:	42b1      	cmp	r1, r6
    811e:	da0f      	bge.n	8140 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    8120:	0048      	lsls	r0, r1, #1
    8122:	1828      	adds	r0, r5, r0
    8124:	7843      	ldrb	r3, [r0, #1]
    8126:	071b      	lsls	r3, r3, #28
    8128:	0f1b      	lsrs	r3, r3, #28
    812a:	42a3      	cmp	r3, r4
    812c:	daec      	bge.n	8108 <LORAREG_GetAttr_MinMaxDr+0x30>
    812e:	7802      	ldrb	r2, [r0, #0]
    8130:	2a00      	cmp	r2, #0
    8132:	d0f1      	beq.n	8118 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    8134:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    8136:	7843      	ldrb	r3, [r0, #1]
    8138:	091b      	lsrs	r3, r3, #4
    813a:	42bb      	cmp	r3, r7
    813c:	dceb      	bgt.n	8116 <LORAREG_GetAttr_MinMaxDr+0x3e>
    813e:	e7eb      	b.n	8118 <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    8140:	23c4      	movs	r3, #196	; 0xc4
    8142:	33ff      	adds	r3, #255	; 0xff
    8144:	4907      	ldr	r1, [pc, #28]	; (8164 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    8146:	5ccb      	ldrb	r3, [r1, r3]
    8148:	07db      	lsls	r3, r3, #31
    814a:	d506      	bpl.n	815a <LORAREG_GetAttr_MinMaxDr+0x82>
    814c:	232f      	movs	r3, #47	; 0x2f
    814e:	5cc9      	ldrb	r1, [r1, r3]
    8150:	4b05      	ldr	r3, [pc, #20]	; (8168 <LORAREG_GetAttr_MinMaxDr+0x90>)
    8152:	410b      	asrs	r3, r1
    8154:	07db      	lsls	r3, r3, #31
    8156:	d500      	bpl.n	815a <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    8158:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    815a:	4663      	mov	r3, ip
    815c:	701c      	strb	r4, [r3, #0]
    815e:	705f      	strb	r7, [r3, #1]
}
    8160:	2008      	movs	r0, #8
    8162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8164:	20002310 	.word	0x20002310
    8168:	00007fe0 	.word	0x00007fe0

0000816c <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    816c:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    816e:	2b05      	cmp	r3, #5
    8170:	d004      	beq.n	817c <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    8172:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    8174:	2b07      	cmp	r3, #7
    8176:	d900      	bls.n	817a <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    8178:	3002      	adds	r0, #2
    }

    return result;
}
    817a:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    817c:	200a      	movs	r0, #10
    817e:	e7fc      	b.n	817a <ValidateChannelMaskCntl+0xe>

00008180 <ValidateTxPower>:
 *		   LORAWAN_INVALID_PARAMETER If the Transmit Power is not supported
 */
static StackRetStatus_t ValidateTxPower (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
    8180:	780b      	ldrb	r3, [r1, #0]
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
    if (0xf != txPowerNew)
    8182:	2b0f      	cmp	r3, #15
    8184:	d007      	beq.n	8196 <ValidateTxPower+0x16>
    { /* 0xF means keep the current settings & ignore this cmd */
	    if (txPowerNew > RegParams.maxTxPwrIndx)
    8186:	222d      	movs	r2, #45	; 0x2d
    8188:	4904      	ldr	r1, [pc, #16]	; (819c <ValidateTxPower+0x1c>)
    818a:	568a      	ldrsb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    818c:	2008      	movs	r0, #8
	    if (txPowerNew > RegParams.maxTxPwrIndx)
    818e:	4293      	cmp	r3, r2
    8190:	dd00      	ble.n	8194 <ValidateTxPower+0x14>
	    {
		    result = LORAWAN_INVALID_PARAMETER;
    8192:	3002      	adds	r0, #2
	    }
    }    

	return result;
}
    8194:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8196:	2008      	movs	r0, #8
    8198:	e7fc      	b.n	8194 <ValidateTxPower+0x14>
    819a:	46c0      	nop			; (mov r8, r8)
    819c:	20002310 	.word	0x20002310

000081a0 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    81a0:	2008      	movs	r0, #8
    81a2:	4770      	bx	lr

000081a4 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    81a4:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    81a6:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    81a8:	2900      	cmp	r1, #0
    81aa:	d020      	beq.n	81ee <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    81ac:	232a      	movs	r3, #42	; 0x2a
    81ae:	4a11      	ldr	r2, [pc, #68]	; (81f4 <ValidateChannelMaskT2+0x50>)
    81b0:	56d0      	ldrsb	r0, [r2, r3]
    81b2:	2800      	cmp	r0, #0
    81b4:	dd1b      	ble.n	81ee <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    81b6:	7a14      	ldrb	r4, [r2, #8]
    81b8:	7a53      	ldrb	r3, [r2, #9]
    81ba:	021b      	lsls	r3, r3, #8
    81bc:	4323      	orrs	r3, r4
    81be:	7a94      	ldrb	r4, [r2, #10]
    81c0:	0424      	lsls	r4, r4, #16
    81c2:	4323      	orrs	r3, r4
    81c4:	7ad4      	ldrb	r4, [r2, #11]
    81c6:	0624      	lsls	r4, r4, #24
    81c8:	431c      	orrs	r4, r3
    81ca:	2300      	movs	r3, #0
    81cc:	2503      	movs	r5, #3
    81ce:	e004      	b.n	81da <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    81d0:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    81d2:	3301      	adds	r3, #1
    81d4:	b2db      	uxtb	r3, r3
    81d6:	4283      	cmp	r3, r0
    81d8:	da09      	bge.n	81ee <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    81da:	2900      	cmp	r1, #0
    81dc:	d0f8      	beq.n	81d0 <ValidateChannelMaskT2+0x2c>
    81de:	005a      	lsls	r2, r3, #1
    81e0:	18d2      	adds	r2, r2, r3
    81e2:	0092      	lsls	r2, r2, #2
    81e4:	18a2      	adds	r2, r4, r2
    81e6:	7ad2      	ldrb	r2, [r2, #11]
    81e8:	402a      	ands	r2, r5
    81ea:	2a03      	cmp	r2, #3
    81ec:	d0f0      	beq.n	81d0 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    81ee:	2008      	movs	r0, #8
    81f0:	bd30      	pop	{r4, r5, pc}
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	20002310 	.word	0x20002310

000081f8 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    81f8:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    81fa:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    81fc:	2b00      	cmp	r3, #0
    81fe:	d002      	beq.n	8206 <ValidateChannelMaskCntlT2+0xe>
    8200:	2b06      	cmp	r3, #6
    8202:	d001      	beq.n	8208 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    8204:	3002      	adds	r0, #2
    }
	return result;
}
    8206:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8208:	2008      	movs	r0, #8
    820a:	e7fc      	b.n	8206 <ValidateChannelMaskCntlT2+0xe>

0000820c <ValidateChMaskChCntlT2>:
{
    820c:	b510      	push	{r4, lr}
    820e:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    8210:	ac01      	add	r4, sp, #4
    8212:	2204      	movs	r2, #4
    8214:	0020      	movs	r0, r4
    8216:	4b0f      	ldr	r3, [pc, #60]	; (8254 <ValidateChMaskChCntlT2+0x48>)
    8218:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    821a:	8863      	ldrh	r3, [r4, #2]
    821c:	2b00      	cmp	r3, #0
    821e:	d104      	bne.n	822a <ValidateChMaskChCntlT2+0x1e>
    8220:	ab01      	add	r3, sp, #4
    8222:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    8224:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    8226:	2a00      	cmp	r2, #0
    8228:	d007      	beq.n	823a <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    822a:	466b      	mov	r3, sp
    822c:	1d99      	adds	r1, r3, #6
    822e:	201a      	movs	r0, #26
    8230:	4b09      	ldr	r3, [pc, #36]	; (8258 <ValidateChMaskChCntlT2+0x4c>)
    8232:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    8234:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    8236:	2808      	cmp	r0, #8
    8238:	d002      	beq.n	8240 <ValidateChMaskChCntlT2+0x34>
}
    823a:	0018      	movs	r0, r3
    823c:	b002      	add	sp, #8
    823e:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    8240:	a901      	add	r1, sp, #4
    8242:	3013      	adds	r0, #19
    8244:	4b05      	ldr	r3, [pc, #20]	; (825c <ValidateChMaskChCntlT2+0x50>)
    8246:	4798      	blx	r3
    8248:	0003      	movs	r3, r0
    824a:	2808      	cmp	r0, #8
    824c:	d0f5      	beq.n	823a <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    824e:	230a      	movs	r3, #10
    8250:	e7f3      	b.n	823a <ValidateChMaskChCntlT2+0x2e>
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	00018655 	.word	0x00018655
    8258:	000081a5 	.word	0x000081a5
    825c:	000081f9 	.word	0x000081f9

00008260 <ValidateDataRate>:
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRate (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    8260:	780b      	ldrb	r3, [r1, #0]

    if (0xf != dataRate)
    8262:	2b0f      	cmp	r3, #15
    8264:	d007      	beq.n	8276 <ValidateDataRate+0x16>
    { /* 0xF means keep the current settings & ignore this cmd */
        if ( dataRate > RegParams.minDataRate )
    8266:	2224      	movs	r2, #36	; 0x24
    8268:	4904      	ldr	r1, [pc, #16]	; (827c <ValidateDataRate+0x1c>)
    826a:	5c8a      	ldrb	r2, [r1, r2]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    826c:	2008      	movs	r0, #8
        if ( dataRate > RegParams.minDataRate )
    826e:	429a      	cmp	r2, r3
    8270:	d200      	bcs.n	8274 <ValidateDataRate+0x14>
        {
            result = LORAWAN_INVALID_PARAMETER;
    8272:	3002      	adds	r0, #2
        }        
    }

    return result;
}
    8274:	4770      	bx	lr
    StackRetStatus_t result = LORAWAN_SUCCESS;
    8276:	2008      	movs	r0, #8
    8278:	e7fc      	b.n	8274 <ValidateDataRate+0x14>
    827a:	46c0      	nop			; (mov r8, r8)
    827c:	20002310 	.word	0x20002310

00008280 <LORAREG_GetAttr_SpreadFactorT2>:
{
    8280:	b570      	push	{r4, r5, r6, lr}
    8282:	000c      	movs	r4, r1
    8284:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    8286:	200f      	movs	r0, #15
    8288:	4b0b      	ldr	r3, [pc, #44]	; (82b8 <LORAREG_GetAttr_SpreadFactorT2+0x38>)
    828a:	4798      	blx	r3
    828c:	2808      	cmp	r0, #8
    828e:	d001      	beq.n	8294 <LORAREG_GetAttr_SpreadFactorT2+0x14>
		result =  LORAWAN_INVALID_PARAMETER;
    8290:	200a      	movs	r0, #10
}
    8292:	bd70      	pop	{r4, r5, r6, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    8294:	4909      	ldr	r1, [pc, #36]	; (82bc <LORAREG_GetAttr_SpreadFactorT2+0x3c>)
    8296:	780b      	ldrb	r3, [r1, #0]
    8298:	784a      	ldrb	r2, [r1, #1]
    829a:	0212      	lsls	r2, r2, #8
    829c:	4313      	orrs	r3, r2
    829e:	788a      	ldrb	r2, [r1, #2]
    82a0:	0412      	lsls	r2, r2, #16
    82a2:	431a      	orrs	r2, r3
    82a4:	78cb      	ldrb	r3, [r1, #3]
    82a6:	061b      	lsls	r3, r3, #24
    82a8:	431a      	orrs	r2, r3
    82aa:	7823      	ldrb	r3, [r4, #0]
    82ac:	00db      	lsls	r3, r3, #3
    82ae:	189b      	adds	r3, r3, r2
    82b0:	795b      	ldrb	r3, [r3, #5]
    82b2:	702b      	strb	r3, [r5, #0]
    82b4:	e7ed      	b.n	8292 <LORAREG_GetAttr_SpreadFactorT2+0x12>
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	00008261 	.word	0x00008261
    82bc:	20002310 	.word	0x20002310

000082c0 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    82c0:	b570      	push	{r4, r5, r6, lr}
    82c2:	000c      	movs	r4, r1
    82c4:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    82c6:	200f      	movs	r0, #15
    82c8:	4b0b      	ldr	r3, [pc, #44]	; (82f8 <LORAREG_GetAttr_BandwidthAttrT2+0x38>)
    82ca:	4798      	blx	r3
    82cc:	2808      	cmp	r0, #8
    82ce:	d001      	beq.n	82d4 <LORAREG_GetAttr_BandwidthAttrT2+0x14>
		result = LORAWAN_INVALID_PARAMETER;
    82d0:	200a      	movs	r0, #10
}
    82d2:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    82d4:	4909      	ldr	r1, [pc, #36]	; (82fc <LORAREG_GetAttr_BandwidthAttrT2+0x3c>)
    82d6:	780b      	ldrb	r3, [r1, #0]
    82d8:	784a      	ldrb	r2, [r1, #1]
    82da:	0212      	lsls	r2, r2, #8
    82dc:	4313      	orrs	r3, r2
    82de:	788a      	ldrb	r2, [r1, #2]
    82e0:	0412      	lsls	r2, r2, #16
    82e2:	431a      	orrs	r2, r3
    82e4:	78cb      	ldrb	r3, [r1, #3]
    82e6:	061b      	lsls	r3, r3, #24
    82e8:	431a      	orrs	r2, r3
    82ea:	7823      	ldrb	r3, [r4, #0]
    82ec:	00db      	lsls	r3, r3, #3
    82ee:	189b      	adds	r3, r3, r2
    82f0:	799b      	ldrb	r3, [r3, #6]
    82f2:	702b      	strb	r3, [r5, #0]
    82f4:	e7ed      	b.n	82d2 <LORAREG_GetAttr_BandwidthAttrT2+0x12>
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	00008261 	.word	0x00008261
    82fc:	20002310 	.word	0x20002310

00008300 <LORAREG_GetAttr_ModulationAttrT2>:
{
    8300:	b570      	push	{r4, r5, r6, lr}
    8302:	000c      	movs	r4, r1
    8304:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    8306:	200f      	movs	r0, #15
    8308:	4b0b      	ldr	r3, [pc, #44]	; (8338 <LORAREG_GetAttr_ModulationAttrT2+0x38>)
    830a:	4798      	blx	r3
    830c:	2808      	cmp	r0, #8
    830e:	d001      	beq.n	8314 <LORAREG_GetAttr_ModulationAttrT2+0x14>
		result = LORAWAN_INVALID_PARAMETER;
    8310:	200a      	movs	r0, #10
}
    8312:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    8314:	4909      	ldr	r1, [pc, #36]	; (833c <LORAREG_GetAttr_ModulationAttrT2+0x3c>)
    8316:	780b      	ldrb	r3, [r1, #0]
    8318:	784a      	ldrb	r2, [r1, #1]
    831a:	0212      	lsls	r2, r2, #8
    831c:	4313      	orrs	r3, r2
    831e:	788a      	ldrb	r2, [r1, #2]
    8320:	0412      	lsls	r2, r2, #16
    8322:	431a      	orrs	r2, r3
    8324:	78cb      	ldrb	r3, [r1, #3]
    8326:	061b      	lsls	r3, r3, #24
    8328:	431a      	orrs	r2, r3
    832a:	7823      	ldrb	r3, [r4, #0]
    832c:	00db      	lsls	r3, r3, #3
    832e:	189b      	adds	r3, r3, r2
    8330:	79db      	ldrb	r3, [r3, #7]
    8332:	702b      	strb	r3, [r5, #0]
    8334:	e7ed      	b.n	8312 <LORAREG_GetAttr_ModulationAttrT2+0x12>
    8336:	46c0      	nop			; (mov r8, r8)
    8338:	00008261 	.word	0x00008261
    833c:	20002310 	.word	0x20002310

00008340 <LORAREG_GetAttr_MaxPayloadT2>:
{
    8340:	b570      	push	{r4, r5, r6, lr}
    8342:	000c      	movs	r4, r1
    8344:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    8346:	200f      	movs	r0, #15
    8348:	4b0b      	ldr	r3, [pc, #44]	; (8378 <LORAREG_GetAttr_MaxPayloadT2+0x38>)
    834a:	4798      	blx	r3
    834c:	2808      	cmp	r0, #8
    834e:	d001      	beq.n	8354 <LORAREG_GetAttr_MaxPayloadT2+0x14>
		result =  LORAWAN_INVALID_PARAMETER;
    8350:	200a      	movs	r0, #10
}
    8352:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    8354:	4909      	ldr	r1, [pc, #36]	; (837c <LORAREG_GetAttr_MaxPayloadT2+0x3c>)
    8356:	780b      	ldrb	r3, [r1, #0]
    8358:	784a      	ldrb	r2, [r1, #1]
    835a:	0212      	lsls	r2, r2, #8
    835c:	4313      	orrs	r3, r2
    835e:	788a      	ldrb	r2, [r1, #2]
    8360:	0412      	lsls	r2, r2, #16
    8362:	431a      	orrs	r2, r3
    8364:	78cb      	ldrb	r3, [r1, #3]
    8366:	061b      	lsls	r3, r3, #24
    8368:	431a      	orrs	r2, r3
    836a:	7823      	ldrb	r3, [r4, #0]
    836c:	00db      	lsls	r3, r3, #3
    836e:	189b      	adds	r3, r3, r2
    8370:	789b      	ldrb	r3, [r3, #2]
    8372:	702b      	strb	r3, [r5, #0]
    8374:	e7ed      	b.n	8352 <LORAREG_GetAttr_MaxPayloadT2+0x12>
    8376:	46c0      	nop			; (mov r8, r8)
    8378:	00008261 	.word	0x00008261
    837c:	20002310 	.word	0x20002310

00008380 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    8380:	b570      	push	{r4, r5, r6, lr}
    8382:	000c      	movs	r4, r1
    8384:	0015      	movs	r5, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    8386:	200f      	movs	r0, #15
    8388:	4b0b      	ldr	r3, [pc, #44]	; (83b8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    838a:	4798      	blx	r3
    838c:	2808      	cmp	r0, #8
    838e:	d001      	beq.n	8394 <LORAREG_GetAttr_RxWindowOffsetT2+0x14>
		return LORAWAN_INVALID_PARAMETER;
    8390:	200a      	movs	r0, #10
}
    8392:	bd70      	pop	{r4, r5, r6, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    8394:	4909      	ldr	r1, [pc, #36]	; (83bc <LORAREG_GetAttr_RxWindowOffsetT2+0x3c>)
    8396:	780b      	ldrb	r3, [r1, #0]
    8398:	784a      	ldrb	r2, [r1, #1]
    839a:	0212      	lsls	r2, r2, #8
    839c:	4313      	orrs	r3, r2
    839e:	788a      	ldrb	r2, [r1, #2]
    83a0:	0412      	lsls	r2, r2, #16
    83a2:	431a      	orrs	r2, r3
    83a4:	78cb      	ldrb	r3, [r1, #3]
    83a6:	061b      	lsls	r3, r3, #24
    83a8:	431a      	orrs	r2, r3
    83aa:	7823      	ldrb	r3, [r4, #0]
    83ac:	00db      	lsls	r3, r3, #3
    83ae:	189b      	adds	r3, r3, r2
    83b0:	791b      	ldrb	r3, [r3, #4]
    83b2:	b25b      	sxtb	r3, r3
    83b4:	702b      	strb	r3, [r5, #0]
	return result;
    83b6:	e7ec      	b.n	8392 <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
    83b8:	00008261 	.word	0x00008261
    83bc:	20002310 	.word	0x20002310

000083c0 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    83c0:	b570      	push	{r4, r5, r6, lr}
    83c2:	000d      	movs	r5, r1
    83c4:	0014      	movs	r4, r2
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    83c6:	200f      	movs	r0, #15
    83c8:	4b0c      	ldr	r3, [pc, #48]	; (83fc <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    83ca:	4798      	blx	r3
    83cc:	2808      	cmp	r0, #8
    83ce:	d001      	beq.n	83d4 <LORAREG_GetAttr_RxWindowSizeT2+0x14>
		return LORAWAN_INVALID_PARAMETER;
    83d0:	200a      	movs	r0, #10
}
    83d2:	bd70      	pop	{r4, r5, r6, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    83d4:	490a      	ldr	r1, [pc, #40]	; (8400 <LORAREG_GetAttr_RxWindowSizeT2+0x40>)
    83d6:	780b      	ldrb	r3, [r1, #0]
    83d8:	784a      	ldrb	r2, [r1, #1]
    83da:	0212      	lsls	r2, r2, #8
    83dc:	4313      	orrs	r3, r2
    83de:	788a      	ldrb	r2, [r1, #2]
    83e0:	0412      	lsls	r2, r2, #16
    83e2:	431a      	orrs	r2, r3
    83e4:	78cb      	ldrb	r3, [r1, #3]
    83e6:	061b      	lsls	r3, r3, #24
    83e8:	431a      	orrs	r2, r3
    83ea:	782b      	ldrb	r3, [r5, #0]
    83ec:	00db      	lsls	r3, r3, #3
    83ee:	5c99      	ldrb	r1, [r3, r2]
    83f0:	189b      	adds	r3, r3, r2
    83f2:	785b      	ldrb	r3, [r3, #1]
    83f4:	021b      	lsls	r3, r3, #8
    83f6:	430b      	orrs	r3, r1
    83f8:	8023      	strh	r3, [r4, #0]
	return result;
    83fa:	e7ea      	b.n	83d2 <LORAREG_GetAttr_RxWindowSizeT2+0x12>
    83fc:	00008261 	.word	0x00008261
    8400:	20002310 	.word	0x20002310

00008404 <LORAREG_GetAttr_MaxPayloadT3>:
{
    8404:	b570      	push	{r4, r5, r6, lr}
    8406:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    8408:	780c      	ldrb	r4, [r1, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    840a:	200f      	movs	r0, #15
    840c:	4b15      	ldr	r3, [pc, #84]	; (8464 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    840e:	4798      	blx	r3
    8410:	2808      	cmp	r0, #8
    8412:	d000      	beq.n	8416 <LORAREG_GetAttr_MaxPayloadT3+0x12>
		result =  LORAWAN_INVALID_PARAMETER;
    8414:	200a      	movs	r0, #10
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    8416:	23c4      	movs	r3, #196	; 0xc4
    8418:	33ff      	adds	r3, #255	; 0xff
    841a:	4a13      	ldr	r2, [pc, #76]	; (8468 <LORAREG_GetAttr_MaxPayloadT3+0x64>)
    841c:	5cd3      	ldrb	r3, [r2, r3]
    841e:	07db      	lsls	r3, r3, #31
    8420:	d40f      	bmi.n	8442 <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    8422:	4911      	ldr	r1, [pc, #68]	; (8468 <LORAREG_GetAttr_MaxPayloadT3+0x64>)
    8424:	780b      	ldrb	r3, [r1, #0]
    8426:	784a      	ldrb	r2, [r1, #1]
    8428:	0212      	lsls	r2, r2, #8
    842a:	431a      	orrs	r2, r3
    842c:	788b      	ldrb	r3, [r1, #2]
    842e:	041b      	lsls	r3, r3, #16
    8430:	431a      	orrs	r2, r3
    8432:	78cb      	ldrb	r3, [r1, #3]
    8434:	061b      	lsls	r3, r3, #24
    8436:	4313      	orrs	r3, r2
    8438:	00e4      	lsls	r4, r4, #3
    843a:	18e4      	adds	r4, r4, r3
    843c:	78a3      	ldrb	r3, [r4, #2]
    843e:	702b      	strb	r3, [r5, #0]
}
    8440:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    8442:	0011      	movs	r1, r2
    8444:	7813      	ldrb	r3, [r2, #0]
    8446:	7852      	ldrb	r2, [r2, #1]
    8448:	0212      	lsls	r2, r2, #8
    844a:	431a      	orrs	r2, r3
    844c:	788b      	ldrb	r3, [r1, #2]
    844e:	041b      	lsls	r3, r3, #16
    8450:	431a      	orrs	r2, r3
    8452:	78cb      	ldrb	r3, [r1, #3]
    8454:	061b      	lsls	r3, r3, #24
    8456:	4313      	orrs	r3, r2
    8458:	00e4      	lsls	r4, r4, #3
    845a:	18e3      	adds	r3, r4, r3
    845c:	78db      	ldrb	r3, [r3, #3]
    845e:	702b      	strb	r3, [r5, #0]
    8460:	e7ee      	b.n	8440 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
    8462:	46c0      	nop			; (mov r8, r8)
    8464:	00008261 	.word	0x00008261
    8468:	20002310 	.word	0x20002310

0000846c <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    846c:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    846e:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    8470:	232a      	movs	r3, #42	; 0x2a
    8472:	4a14      	ldr	r2, [pc, #80]	; (84c4 <ValidateSupportedDr+0x58>)
    8474:	56d4      	ldrsb	r4, [r2, r3]
    8476:	2c00      	cmp	r4, #0
    8478:	dd22      	ble.n	84c0 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    847a:	7910      	ldrb	r0, [r2, #4]
    847c:	7953      	ldrb	r3, [r2, #5]
    847e:	021b      	lsls	r3, r3, #8
    8480:	4303      	orrs	r3, r0
    8482:	7990      	ldrb	r0, [r2, #6]
    8484:	0400      	lsls	r0, r0, #16
    8486:	4303      	orrs	r3, r0
    8488:	79d0      	ldrb	r0, [r2, #7]
    848a:	0600      	lsls	r0, r0, #24
    848c:	4318      	orrs	r0, r3
    848e:	2300      	movs	r3, #0
    8490:	002e      	movs	r6, r5
    8492:	e003      	b.n	849c <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    8494:	3301      	adds	r3, #1
    8496:	b2db      	uxtb	r3, r3
    8498:	42a3      	cmp	r3, r4
    849a:	da0f      	bge.n	84bc <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    849c:	005a      	lsls	r2, r3, #1
    849e:	1882      	adds	r2, r0, r2
    84a0:	7811      	ldrb	r1, [r2, #0]
    84a2:	2900      	cmp	r1, #0
    84a4:	d0f6      	beq.n	8494 <ValidateSupportedDr+0x28>
    84a6:	7851      	ldrb	r1, [r2, #1]
    84a8:	0709      	lsls	r1, r1, #28
    84aa:	0f09      	lsrs	r1, r1, #28
    84ac:	428d      	cmp	r5, r1
    84ae:	dbf1      	blt.n	8494 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    84b0:	7852      	ldrb	r2, [r2, #1]
    84b2:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    84b4:	4296      	cmp	r6, r2
    84b6:	dced      	bgt.n	8494 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    84b8:	2008      	movs	r0, #8
    84ba:	e000      	b.n	84be <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    84bc:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    84be:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    84c0:	200a      	movs	r0, #10
    84c2:	e7fc      	b.n	84be <ValidateSupportedDr+0x52>
    84c4:	20002310 	.word	0x20002310

000084c8 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    84c8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    84ca:	6808      	ldr	r0, [r1, #0]
    84cc:	4b07      	ldr	r3, [pc, #28]	; (84ec <ValidateRxFreqT1+0x24>)
    84ce:	469c      	mov	ip, r3
    84d0:	4460      	add	r0, ip
    84d2:	4a07      	ldr	r2, [pc, #28]	; (84f0 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    84d4:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    84d6:	4290      	cmp	r0, r2
    84d8:	d806      	bhi.n	84e8 <ValidateRxFreqT1+0x20>
    84da:	4906      	ldr	r1, [pc, #24]	; (84f4 <ValidateRxFreqT1+0x2c>)
    84dc:	4b06      	ldr	r3, [pc, #24]	; (84f8 <ValidateRxFreqT1+0x30>)
    84de:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    84e0:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    84e2:	2900      	cmp	r1, #0
    84e4:	d000      	beq.n	84e8 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    84e6:	3302      	adds	r3, #2
	}
	return result;
}
    84e8:	0018      	movs	r0, r3
    84ea:	bd10      	pop	{r4, pc}
    84ec:	c8f78f60 	.word	0xc8f78f60
    84f0:	00401640 	.word	0x00401640
    84f4:	000927c0 	.word	0x000927c0
    84f8:	0001505d 	.word	0x0001505d

000084fc <ValidateDataRangeT2>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRangeT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
    84fc:	b530      	push	{r4, r5, lr}
    84fe:	b083      	sub	sp, #12
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValUpdateDrange_t val_drange;
	uint8_t dataRateMin, dataRateMax;
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    8500:	784c      	ldrb	r4, [r1, #1]
	
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    8502:	250f      	movs	r5, #15
    8504:	4025      	ands	r5, r4
    8506:	466b      	mov	r3, sp
    8508:	1dd9      	adds	r1, r3, #7
    850a:	700d      	strb	r5, [r1, #0]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    850c:	0924      	lsrs	r4, r4, #4
    850e:	719c      	strb	r4, [r3, #6]
	
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    8510:	200f      	movs	r0, #15
    8512:	4b0b      	ldr	r3, [pc, #44]	; (8540 <ValidateDataRangeT2+0x44>)
    8514:	4798      	blx	r3
	   || (dataRateMax < dataRateMin) )
	{
		retVal = LORAWAN_INVALID_PARAMETER;
    8516:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    8518:	2808      	cmp	r0, #8
    851a:	d002      	beq.n	8522 <ValidateDataRangeT2+0x26>
	}
	return retVal;
}
    851c:	0018      	movs	r0, r3
    851e:	b003      	add	sp, #12
    8520:	bd30      	pop	{r4, r5, pc}
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    8522:	466b      	mov	r3, sp
    8524:	1d99      	adds	r1, r3, #6
    8526:	3007      	adds	r0, #7
    8528:	4b05      	ldr	r3, [pc, #20]	; (8540 <ValidateDataRangeT2+0x44>)
    852a:	4798      	blx	r3
    852c:	0003      	movs	r3, r0
    852e:	2808      	cmp	r0, #8
    8530:	d001      	beq.n	8536 <ValidateDataRangeT2+0x3a>
		retVal = LORAWAN_INVALID_PARAMETER;
    8532:	230a      	movs	r3, #10
    8534:	e7f2      	b.n	851c <ValidateDataRangeT2+0x20>
	   || (dataRateMax < dataRateMin) )
    8536:	42a5      	cmp	r5, r4
    8538:	d9f0      	bls.n	851c <ValidateDataRangeT2+0x20>
		retVal = LORAWAN_INVALID_PARAMETER;
    853a:	3302      	adds	r3, #2
    853c:	e7ee      	b.n	851c <ValidateDataRangeT2+0x20>
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	00008261 	.word	0x00008261

00008544 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    8544:	780a      	ldrb	r2, [r1, #0]
    8546:	232c      	movs	r3, #44	; 0x2c
    8548:	4903      	ldr	r1, [pc, #12]	; (8558 <ValidateRx1DataRateOffset+0x14>)
    854a:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    854c:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    854e:	429a      	cmp	r2, r3
    8550:	dc00      	bgt.n	8554 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    8552:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    8554:	4770      	bx	lr
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	20002310 	.word	0x20002310

0000855c <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    855c:	b530      	push	{r4, r5, lr}
    855e:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    8560:	2329      	movs	r3, #41	; 0x29
    8562:	4a19      	ldr	r2, [pc, #100]	; (85c8 <getSubBandId+0x6c>)
    8564:	5cd5      	ldrb	r5, [r2, r3]
    8566:	2d00      	cmp	r5, #0
    8568:	d02c      	beq.n	85c4 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    856a:	0011      	movs	r1, r2
    856c:	7b13      	ldrb	r3, [r2, #12]
    856e:	7b52      	ldrb	r2, [r2, #13]
    8570:	0212      	lsls	r2, r2, #8
    8572:	431a      	orrs	r2, r3
    8574:	7b8b      	ldrb	r3, [r1, #14]
    8576:	041b      	lsls	r3, r3, #16
    8578:	431a      	orrs	r2, r3
    857a:	7bcb      	ldrb	r3, [r1, #15]
    857c:	061b      	lsls	r3, r3, #24
    857e:	4313      	orrs	r3, r2
    8580:	2000      	movs	r0, #0
    8582:	e004      	b.n	858e <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    8584:	3001      	adds	r0, #1
    8586:	b2c0      	uxtb	r0, r0
    8588:	330c      	adds	r3, #12
    858a:	42a8      	cmp	r0, r5
    858c:	d018      	beq.n	85c0 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    858e:	781a      	ldrb	r2, [r3, #0]
    8590:	7859      	ldrb	r1, [r3, #1]
    8592:	0209      	lsls	r1, r1, #8
    8594:	4311      	orrs	r1, r2
    8596:	789a      	ldrb	r2, [r3, #2]
    8598:	0412      	lsls	r2, r2, #16
    859a:	4311      	orrs	r1, r2
    859c:	78da      	ldrb	r2, [r3, #3]
    859e:	0612      	lsls	r2, r2, #24
    85a0:	430a      	orrs	r2, r1
    85a2:	42a2      	cmp	r2, r4
    85a4:	d8ee      	bhi.n	8584 <getSubBandId+0x28>
    85a6:	791a      	ldrb	r2, [r3, #4]
    85a8:	7959      	ldrb	r1, [r3, #5]
    85aa:	0209      	lsls	r1, r1, #8
    85ac:	4311      	orrs	r1, r2
    85ae:	799a      	ldrb	r2, [r3, #6]
    85b0:	0412      	lsls	r2, r2, #16
    85b2:	4311      	orrs	r1, r2
    85b4:	79da      	ldrb	r2, [r3, #7]
    85b6:	0612      	lsls	r2, r2, #24
    85b8:	430a      	orrs	r2, r1
    85ba:	4294      	cmp	r4, r2
    85bc:	d8e2      	bhi.n	8584 <getSubBandId+0x28>
    85be:	e000      	b.n	85c2 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    85c0:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    85c2:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    85c4:	20ff      	movs	r0, #255	; 0xff
    85c6:	e7fc      	b.n	85c2 <getSubBandId+0x66>
    85c8:	20002310 	.word	0x20002310

000085cc <ValidateFreq>:
{
    85cc:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    85ce:	6808      	ldr	r0, [r1, #0]
    85d0:	4b04      	ldr	r3, [pc, #16]	; (85e4 <ValidateFreq+0x18>)
    85d2:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    85d4:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    85d6:	28ff      	cmp	r0, #255	; 0xff
    85d8:	d001      	beq.n	85de <ValidateFreq+0x12>
}
    85da:	0018      	movs	r0, r3
    85dc:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    85de:	3302      	adds	r3, #2
    85e0:	e7fb      	b.n	85da <ValidateFreq+0xe>
    85e2:	46c0      	nop			; (mov r8, r8)
    85e4:	0000855d 	.word	0x0000855d

000085e8 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    85e8:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    85ea:	222f      	movs	r2, #47	; 0x2f
    85ec:	4919      	ldr	r1, [pc, #100]	; (8654 <ValidateFrequencyAS+0x6c>)
    85ee:	5c8a      	ldrb	r2, [r1, r2]
    85f0:	1f91      	subs	r1, r2, #6
    85f2:	2903      	cmp	r1, #3
    85f4:	d808      	bhi.n	8608 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    85f6:	4a18      	ldr	r2, [pc, #96]	; (8658 <ValidateFrequencyAS+0x70>)
    85f8:	4694      	mov	ip, r2
    85fa:	4463      	add	r3, ip
    85fc:	4a17      	ldr	r2, [pc, #92]	; (865c <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    85fe:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    8600:	4293      	cmp	r3, r2
    8602:	d900      	bls.n	8606 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    8604:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    8606:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    8608:	2a0a      	cmp	r2, #10
    860a:	d011      	beq.n	8630 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    860c:	2a0b      	cmp	r2, #11
    860e:	d018      	beq.n	8642 <ValidateFrequencyAS+0x5a>
    8610:	0011      	movs	r1, r2
    8612:	390d      	subs	r1, #13
    8614:	2901      	cmp	r1, #1
    8616:	d914      	bls.n	8642 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    8618:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    861a:	2a0c      	cmp	r2, #12
    861c:	d1f3      	bne.n	8606 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    861e:	4a10      	ldr	r2, [pc, #64]	; (8660 <ValidateFrequencyAS+0x78>)
    8620:	4694      	mov	ip, r2
    8622:	4463      	add	r3, ip
    8624:	4a0f      	ldr	r2, [pc, #60]	; (8664 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8626:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    8628:	4293      	cmp	r3, r2
    862a:	d9ec      	bls.n	8606 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    862c:	3002      	adds	r0, #2
    862e:	e7ea      	b.n	8606 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    8630:	4a0d      	ldr	r2, [pc, #52]	; (8668 <ValidateFrequencyAS+0x80>)
    8632:	4694      	mov	ip, r2
    8634:	4463      	add	r3, ip
    8636:	4a0d      	ldr	r2, [pc, #52]	; (866c <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8638:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    863a:	4293      	cmp	r3, r2
    863c:	d9e3      	bls.n	8606 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    863e:	3002      	adds	r0, #2
    8640:	e7e1      	b.n	8606 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    8642:	4a0b      	ldr	r2, [pc, #44]	; (8670 <ValidateFrequencyAS+0x88>)
    8644:	4694      	mov	ip, r2
    8646:	4463      	add	r3, ip
    8648:	4a0a      	ldr	r2, [pc, #40]	; (8674 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    864a:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    864c:	4293      	cmp	r3, r2
    864e:	d9da      	bls.n	8606 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    8650:	3002      	adds	r0, #2
    8652:	e7d8      	b.n	8606 <ValidateFrequencyAS+0x1e>
    8654:	20002310 	.word	0x20002310
    8658:	c8fc2340 	.word	0xc8fc2340
    865c:	001e8480 	.word	0x001e8480
    8660:	c90b6580 	.word	0xc90b6580
    8664:	005b8d80 	.word	0x005b8d80
    8668:	c9763540 	.word	0xc9763540
    866c:	00c65d40 	.word	0x00c65d40
    8670:	c929ea00 	.word	0xc929ea00
    8674:	004c4b40 	.word	0x004c4b40

00008678 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    8678:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    867a:	780c      	ldrb	r4, [r1, #0]
    867c:	784a      	ldrb	r2, [r1, #1]
    867e:	0791      	lsls	r1, r2, #30
    8680:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    8682:	4e11      	ldr	r6, [pc, #68]	; (86c8 <setTxParams+0x50>)
    8684:	25c4      	movs	r5, #196	; 0xc4
    8686:	35ff      	adds	r5, #255	; 0xff
    8688:	2001      	movs	r0, #1
    868a:	4002      	ands	r2, r0
    868c:	5d73      	ldrb	r3, [r6, r5]
    868e:	2701      	movs	r7, #1
    8690:	43bb      	bics	r3, r7
    8692:	4313      	orrs	r3, r2
    8694:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    8696:	4218      	tst	r0, r3
    8698:	d111      	bne.n	86be <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    869a:	2000      	movs	r0, #0
    869c:	2325      	movs	r3, #37	; 0x25
    869e:	4a0a      	ldr	r2, [pc, #40]	; (86c8 <setTxParams+0x50>)
    86a0:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    86a2:	4a09      	ldr	r2, [pc, #36]	; (86c8 <setTxParams+0x50>)
    86a4:	20c4      	movs	r0, #196	; 0xc4
    86a6:	30ff      	adds	r0, #255	; 0xff
    86a8:	0049      	lsls	r1, r1, #1
    86aa:	5c13      	ldrb	r3, [r2, r0]
    86ac:	2502      	movs	r5, #2
    86ae:	43ab      	bics	r3, r5
    86b0:	430b      	orrs	r3, r1
    86b2:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    86b4:	2328      	movs	r3, #40	; 0x28
    86b6:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    86b8:	38bc      	subs	r0, #188	; 0xbc
    86ba:	38ff      	subs	r0, #255	; 0xff
    86bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    86be:	3001      	adds	r0, #1
    86c0:	2325      	movs	r3, #37	; 0x25
    86c2:	54f0      	strb	r0, [r6, r3]
    86c4:	e7ed      	b.n	86a2 <setTxParams+0x2a>
    86c6:	46c0      	nop			; (mov r8, r8)
    86c8:	20002310 	.word	0x20002310

000086cc <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    86cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    86ce:	232a      	movs	r3, #42	; 0x2a
    86d0:	4a17      	ldr	r2, [pc, #92]	; (8730 <setChlistDefaultState+0x64>)
    86d2:	5cd3      	ldrb	r3, [r2, r3]
    86d4:	2b7f      	cmp	r3, #127	; 0x7f
    86d6:	d829      	bhi.n	872c <setChlistDefaultState+0x60>
    86d8:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    86da:	4815      	ldr	r0, [pc, #84]	; (8730 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    86dc:	0004      	movs	r4, r0
    86de:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    86e0:	0006      	movs	r6, r0
    86e2:	252a      	movs	r5, #42	; 0x2a
    86e4:	e004      	b.n	86f0 <setChlistDefaultState+0x24>
    86e6:	3201      	adds	r2, #1
    86e8:	b2d2      	uxtb	r2, r2
    86ea:	5773      	ldrsb	r3, [r6, r5]
    86ec:	429a      	cmp	r2, r3
    86ee:	dc1d      	bgt.n	872c <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    86f0:	7a03      	ldrb	r3, [r0, #8]
    86f2:	7a41      	ldrb	r1, [r0, #9]
    86f4:	0209      	lsls	r1, r1, #8
    86f6:	430b      	orrs	r3, r1
    86f8:	7a81      	ldrb	r1, [r0, #10]
    86fa:	0409      	lsls	r1, r1, #16
    86fc:	4319      	orrs	r1, r3
    86fe:	7ac3      	ldrb	r3, [r0, #11]
    8700:	061b      	lsls	r3, r3, #24
    8702:	4319      	orrs	r1, r3
    8704:	0053      	lsls	r3, r2, #1
    8706:	189b      	adds	r3, r3, r2
    8708:	009b      	lsls	r3, r3, #2
    870a:	185b      	adds	r3, r3, r1
    870c:	7a5b      	ldrb	r3, [r3, #9]
    870e:	2b00      	cmp	r3, #0
    8710:	d1e9      	bne.n	86e6 <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    8712:	7923      	ldrb	r3, [r4, #4]
    8714:	7961      	ldrb	r1, [r4, #5]
    8716:	0209      	lsls	r1, r1, #8
    8718:	4319      	orrs	r1, r3
    871a:	79a3      	ldrb	r3, [r4, #6]
    871c:	041b      	lsls	r3, r3, #16
    871e:	4319      	orrs	r1, r3
    8720:	79e3      	ldrb	r3, [r4, #7]
    8722:	061b      	lsls	r3, r3, #24
    8724:	430b      	orrs	r3, r1
    8726:	0051      	lsls	r1, r2, #1
    8728:	54cf      	strb	r7, [r1, r3]
    872a:	e7dc      	b.n	86e6 <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    872c:	2008      	movs	r0, #8
    872e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8730:	20002310 	.word	0x20002310

00008734 <SearchAvailableChannel1>:
{
    8734:	b5f0      	push	{r4, r5, r6, r7, lr}
    8736:	46de      	mov	lr, fp
    8738:	4657      	mov	r7, sl
    873a:	464e      	mov	r6, r9
    873c:	4645      	mov	r5, r8
    873e:	b5e0      	push	{r5, r6, r7, lr}
    8740:	b0af      	sub	sp, #188	; 0xbc
    8742:	000d      	movs	r5, r1
    8744:	0017      	movs	r7, r2
    8746:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    8748:	2290      	movs	r2, #144	; 0x90
    874a:	2100      	movs	r1, #0
    874c:	a80a      	add	r0, sp, #40	; 0x28
    874e:	4b77      	ldr	r3, [pc, #476]	; (892c <SearchAvailableChannel1+0x1f8>)
    8750:	4798      	blx	r3
	if(transmissionType == false)
    8752:	2d00      	cmp	r5, #0
    8754:	d01a      	beq.n	878c <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    8756:	4b76      	ldr	r3, [pc, #472]	; (8930 <SearchAvailableChannel1+0x1fc>)
    8758:	2230      	movs	r2, #48	; 0x30
    875a:	5c9a      	ldrb	r2, [r3, r2]
    875c:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    875e:	22ac      	movs	r2, #172	; 0xac
    8760:	0052      	lsls	r2, r2, #1
    8762:	5c9a      	ldrb	r2, [r3, r2]
    8764:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    8766:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    8768:	7919      	ldrb	r1, [r3, #4]
    876a:	795a      	ldrb	r2, [r3, #5]
    876c:	0212      	lsls	r2, r2, #8
    876e:	4311      	orrs	r1, r2
    8770:	799a      	ldrb	r2, [r3, #6]
    8772:	0412      	lsls	r2, r2, #16
    8774:	430a      	orrs	r2, r1
    8776:	79db      	ldrb	r3, [r3, #7]
    8778:	061b      	lsls	r3, r3, #24
    877a:	4313      	orrs	r3, r2
    877c:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    877e:	9303      	str	r3, [sp, #12]
    8780:	2100      	movs	r1, #0
    8782:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    8784:	46b9      	mov	r9, r7
    8786:	46bc      	mov	ip, r7
    8788:	0037      	movs	r7, r6
    878a:	e03a      	b.n	8802 <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    878c:	2320      	movs	r3, #32
    878e:	4a68      	ldr	r2, [pc, #416]	; (8930 <SearchAvailableChannel1+0x1fc>)
    8790:	5cd3      	ldrb	r3, [r2, r3]
    8792:	069b      	lsls	r3, r3, #26
    8794:	d5df      	bpl.n	8756 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    8796:	0011      	movs	r1, r2
    8798:	7d13      	ldrb	r3, [r2, #20]
    879a:	7d52      	ldrb	r2, [r2, #21]
    879c:	0212      	lsls	r2, r2, #8
    879e:	431a      	orrs	r2, r3
    87a0:	7d8b      	ldrb	r3, [r1, #22]
    87a2:	041b      	lsls	r3, r3, #16
    87a4:	431a      	orrs	r2, r3
    87a6:	7dcb      	ldrb	r3, [r1, #23]
    87a8:	061b      	lsls	r3, r3, #24
    87aa:	4313      	orrs	r3, r2
    87ac:	7a18      	ldrb	r0, [r3, #8]
    87ae:	4b61      	ldr	r3, [pc, #388]	; (8934 <SearchAvailableChannel1+0x200>)
    87b0:	4798      	blx	r3
    87b2:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    87b4:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    87b6:	2b00      	cmp	r3, #0
    87b8:	d0cd      	beq.n	8756 <SearchAvailableChannel1+0x22>
    87ba:	e053      	b.n	8864 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    87bc:	7806      	ldrb	r6, [r0, #0]
    87be:	2e00      	cmp	r6, #0
    87c0:	d100      	bne.n	87c4 <SearchAvailableChannel1+0x90>
    87c2:	e088      	b.n	88d6 <SearchAvailableChannel1+0x1a2>
    87c4:	001e      	movs	r6, r3
    87c6:	459b      	cmp	fp, r3
    87c8:	d100      	bne.n	87cc <SearchAvailableChannel1+0x98>
    87ca:	e084      	b.n	88d6 <SearchAvailableChannel1+0x1a2>
					&&
    87cc:	2b3f      	cmp	r3, #63	; 0x3f
    87ce:	dc02      	bgt.n	87d6 <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    87d0:	9f07      	ldr	r7, [sp, #28]
    87d2:	4547      	cmp	r7, r8
    87d4:	d06c      	beq.n	88b0 <SearchAvailableChannel1+0x17c>
					|| 
    87d6:	2e40      	cmp	r6, #64	; 0x40
    87d8:	dc00      	bgt.n	87dc <SearchAvailableChannel1+0xa8>
    87da:	e07c      	b.n	88d6 <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    87dc:	001e      	movs	r6, r3
    87de:	3e40      	subs	r6, #64	; 0x40
    87e0:	9f08      	ldr	r7, [sp, #32]
    87e2:	42b7      	cmp	r7, r6
    87e4:	d000      	beq.n	87e8 <SearchAvailableChannel1+0xb4>
    87e6:	e076      	b.n	88d6 <SearchAvailableChannel1+0x1a2>
    87e8:	e08d      	b.n	8906 <SearchAvailableChannel1+0x1d2>
    87ea:	9f01      	ldr	r7, [sp, #4]
    87ec:	9b00      	ldr	r3, [sp, #0]
    87ee:	469c      	mov	ip, r3
    87f0:	9b02      	ldr	r3, [sp, #8]
    87f2:	3310      	adds	r3, #16
    87f4:	9302      	str	r3, [sp, #8]
    87f6:	9b03      	ldr	r3, [sp, #12]
    87f8:	3310      	adds	r3, #16
    87fa:	9303      	str	r3, [sp, #12]
    87fc:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    87fe:	2909      	cmp	r1, #9
    8800:	d00e      	beq.n	8820 <SearchAvailableChannel1+0xec>
    8802:	00cb      	lsls	r3, r1, #3
    8804:	1c4a      	adds	r2, r1, #1
    8806:	9204      	str	r2, [sp, #16]
    8808:	001c      	movs	r4, r3
    880a:	3408      	adds	r4, #8
{
    880c:	9803      	ldr	r0, [sp, #12]
    880e:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    8810:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    8812:	b2c9      	uxtb	r1, r1
    8814:	9701      	str	r7, [sp, #4]
    8816:	9605      	str	r6, [sp, #20]
    8818:	4688      	mov	r8, r1
    881a:	4661      	mov	r1, ip
    881c:	9100      	str	r1, [sp, #0]
    881e:	e060      	b.n	88e2 <SearchAvailableChannel1+0x1ae>
    8820:	1e3e      	subs	r6, r7, #0
    8822:	4667      	mov	r7, ip
	if(0 != num)
    8824:	d125      	bne.n	8872 <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    8826:	4942      	ldr	r1, [pc, #264]	; (8930 <SearchAvailableChannel1+0x1fc>)
    8828:	2330      	movs	r3, #48	; 0x30
    882a:	5ccc      	ldrb	r4, [r1, r3]
    882c:	790b      	ldrb	r3, [r1, #4]
    882e:	794a      	ldrb	r2, [r1, #5]
    8830:	0212      	lsls	r2, r2, #8
    8832:	431a      	orrs	r2, r3
    8834:	798b      	ldrb	r3, [r1, #6]
    8836:	041b      	lsls	r3, r3, #16
    8838:	431a      	orrs	r2, r3
    883a:	79cb      	ldrb	r3, [r1, #7]
    883c:	061b      	lsls	r3, r3, #24
    883e:	4313      	orrs	r3, r2
    8840:	0062      	lsls	r2, r4, #1
    8842:	189b      	adds	r3, r3, r2
    8844:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    8846:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    8848:	2a00      	cmp	r2, #0
    884a:	d00b      	beq.n	8864 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    884c:	785a      	ldrb	r2, [r3, #1]
    884e:	0712      	lsls	r2, r2, #28
    8850:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    8852:	4297      	cmp	r7, r2
    8854:	db06      	blt.n	8864 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    8856:	785b      	ldrb	r3, [r3, #1]
    8858:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    885a:	429f      	cmp	r7, r3
    885c:	dc02      	bgt.n	8864 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8860:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8862:	3808      	subs	r0, #8
}
    8864:	b02f      	add	sp, #188	; 0xbc
    8866:	bc3c      	pop	{r2, r3, r4, r5}
    8868:	4690      	mov	r8, r2
    886a:	4699      	mov	r9, r3
    886c:	46a2      	mov	sl, r4
    886e:	46ab      	mov	fp, r5
    8870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    8872:	4b31      	ldr	r3, [pc, #196]	; (8938 <SearchAvailableChannel1+0x204>)
    8874:	4798      	blx	r3
    8876:	0031      	movs	r1, r6
    8878:	4b30      	ldr	r3, [pc, #192]	; (893c <SearchAvailableChannel1+0x208>)
    887a:	4798      	blx	r3
    887c:	23ff      	movs	r3, #255	; 0xff
    887e:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    8880:	005b      	lsls	r3, r3, #1
    8882:	aa0a      	add	r2, sp, #40	; 0x28
    8884:	5c9a      	ldrb	r2, [r3, r2]
    8886:	9909      	ldr	r1, [sp, #36]	; 0x24
    8888:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    888a:	aa0a      	add	r2, sp, #40	; 0x28
    888c:	4694      	mov	ip, r2
    888e:	4463      	add	r3, ip
    8890:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    8892:	2b07      	cmp	r3, #7
    8894:	d805      	bhi.n	88a2 <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    8896:	22ac      	movs	r2, #172	; 0xac
    8898:	0052      	lsls	r2, r2, #1
    889a:	4925      	ldr	r1, [pc, #148]	; (8930 <SearchAvailableChannel1+0x1fc>)
    889c:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    889e:	2008      	movs	r0, #8
    88a0:	e7e0      	b.n	8864 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    88a2:	2100      	movs	r1, #0
    88a4:	23ac      	movs	r3, #172	; 0xac
    88a6:	005b      	lsls	r3, r3, #1
    88a8:	4a21      	ldr	r2, [pc, #132]	; (8930 <SearchAvailableChannel1+0x1fc>)
    88aa:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    88ac:	2008      	movs	r0, #8
    88ae:	e7d9      	b.n	8864 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    88b0:	9901      	ldr	r1, [sp, #4]
    88b2:	9106      	str	r1, [sp, #24]
    88b4:	0049      	lsls	r1, r1, #1
    88b6:	468c      	mov	ip, r1
    88b8:	a90a      	add	r1, sp, #40	; 0x28
    88ba:	4666      	mov	r6, ip
    88bc:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    88be:	9906      	ldr	r1, [sp, #24]
    88c0:	004e      	lsls	r6, r1, #1
    88c2:	a90a      	add	r1, sp, #40	; 0x28
    88c4:	468c      	mov	ip, r1
    88c6:	4466      	add	r6, ip
    88c8:	4669      	mov	r1, sp
    88ca:	7d09      	ldrb	r1, [r1, #20]
    88cc:	7071      	strb	r1, [r6, #1]
						num++;
    88ce:	9f01      	ldr	r7, [sp, #4]
    88d0:	3701      	adds	r7, #1
    88d2:	b2f9      	uxtb	r1, r7
    88d4:	9101      	str	r1, [sp, #4]
    88d6:	3202      	adds	r2, #2
    88d8:	3002      	adds	r0, #2
    88da:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    88dc:	42a3      	cmp	r3, r4
    88de:	d100      	bne.n	88e2 <SearchAvailableChannel1+0x1ae>
    88e0:	e783      	b.n	87ea <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    88e2:	2d00      	cmp	r5, #0
    88e4:	d100      	bne.n	88e8 <SearchAvailableChannel1+0x1b4>
    88e6:	e769      	b.n	87bc <SearchAvailableChannel1+0x88>
    88e8:	7856      	ldrb	r6, [r2, #1]
    88ea:	0736      	lsls	r6, r6, #28
    88ec:	0f36      	lsrs	r6, r6, #28
    88ee:	9f00      	ldr	r7, [sp, #0]
    88f0:	42b7      	cmp	r7, r6
    88f2:	dbf0      	blt.n	88d6 <SearchAvailableChannel1+0x1a2>
    88f4:	7856      	ldrb	r6, [r2, #1]
    88f6:	0936      	lsrs	r6, r6, #4
    88f8:	45b1      	cmp	r9, r6
    88fa:	dcec      	bgt.n	88d6 <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    88fc:	7816      	ldrb	r6, [r2, #0]
    88fe:	2e00      	cmp	r6, #0
    8900:	d0e9      	beq.n	88d6 <SearchAvailableChannel1+0x1a2>
    8902:	459b      	cmp	fp, r3
    8904:	d0e7      	beq.n	88d6 <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    8906:	9901      	ldr	r1, [sp, #4]
    8908:	9106      	str	r1, [sp, #24]
    890a:	b2de      	uxtb	r6, r3
    890c:	46b4      	mov	ip, r6
    890e:	004e      	lsls	r6, r1, #1
    8910:	af0a      	add	r7, sp, #40	; 0x28
    8912:	4661      	mov	r1, ip
    8914:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    8916:	2b3f      	cmp	r3, #63	; 0x3f
    8918:	ddd1      	ble.n	88be <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    891a:	46ba      	mov	sl, r7
    891c:	4456      	add	r6, sl
    891e:	213f      	movs	r1, #63	; 0x3f
    8920:	4249      	negs	r1, r1
    8922:	468a      	mov	sl, r1
    8924:	44d4      	add	ip, sl
    8926:	4661      	mov	r1, ip
    8928:	7071      	strb	r1, [r6, #1]
    892a:	e7d0      	b.n	88ce <SearchAvailableChannel1+0x19a>
    892c:	00018779 	.word	0x00018779
    8930:	20002310 	.word	0x20002310
    8934:	0000d715 	.word	0x0000d715
    8938:	00018919 	.word	0x00018919
    893c:	00015231 	.word	0x00015231

00008940 <LORAREG_GetAttr_FreeChannel1>:
{
    8940:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    8942:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    8944:	202a      	movs	r0, #42	; 0x2a
    8946:	4d07      	ldr	r5, [pc, #28]	; (8964 <LORAREG_GetAttr_FreeChannel1+0x24>)
    8948:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    894a:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    894c:	42ac      	cmp	r4, r5
    894e:	dd00      	ble.n	8952 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    8950:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    8952:	7888      	ldrb	r0, [r1, #2]
    8954:	7809      	ldrb	r1, [r1, #0]
    8956:	0013      	movs	r3, r2
    8958:	0002      	movs	r2, r0
    895a:	0020      	movs	r0, r4
    895c:	4c02      	ldr	r4, [pc, #8]	; (8968 <LORAREG_GetAttr_FreeChannel1+0x28>)
    895e:	47a0      	blx	r4
	return result;
    8960:	e7f6      	b.n	8950 <LORAREG_GetAttr_FreeChannel1+0x10>
    8962:	46c0      	nop			; (mov r8, r8)
    8964:	20002310 	.word	0x20002310
    8968:	00008735 	.word	0x00008735

0000896c <LORAREG_GetAttr_MacRetransmitTimeout>:
{
    896c:	b510      	push	{r4, lr}
    896e:	0014      	movs	r4, r2
	*(uint16_t *)attrOutput = RETRANSMIT_TIMEOUT;
    8970:	4b05      	ldr	r3, [pc, #20]	; (8988 <LORAREG_GetAttr_MacRetransmitTimeout+0x1c>)
    8972:	4798      	blx	r3
    8974:	4905      	ldr	r1, [pc, #20]	; (898c <LORAREG_GetAttr_MacRetransmitTimeout+0x20>)
    8976:	4b06      	ldr	r3, [pc, #24]	; (8990 <LORAREG_GetAttr_MacRetransmitTimeout+0x24>)
    8978:	4798      	blx	r3
    897a:	23fa      	movs	r3, #250	; 0xfa
    897c:	009b      	lsls	r3, r3, #2
    897e:	469c      	mov	ip, r3
    8980:	4461      	add	r1, ip
    8982:	8021      	strh	r1, [r4, #0]
}
    8984:	2008      	movs	r0, #8
    8986:	bd10      	pop	{r4, pc}
    8988:	00018919 	.word	0x00018919
    898c:	000007d1 	.word	0x000007d1
    8990:	00015231 	.word	0x00015231

00008994 <setEnableAllChs>:
{
    8994:	b570      	push	{r4, r5, r6, lr}
    8996:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    8998:	4915      	ldr	r1, [pc, #84]	; (89f0 <setEnableAllChs+0x5c>)
    899a:	2401      	movs	r4, #1
    899c:	790b      	ldrb	r3, [r1, #4]
    899e:	794a      	ldrb	r2, [r1, #5]
    89a0:	0212      	lsls	r2, r2, #8
    89a2:	431a      	orrs	r2, r3
    89a4:	798b      	ldrb	r3, [r1, #6]
    89a6:	041b      	lsls	r3, r3, #16
    89a8:	431a      	orrs	r2, r3
    89aa:	79cb      	ldrb	r3, [r1, #7]
    89ac:	061b      	lsls	r3, r3, #24
    89ae:	4313      	orrs	r3, r2
    89b0:	541c      	strb	r4, [r3, r0]
    89b2:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    89b4:	2890      	cmp	r0, #144	; 0x90
    89b6:	d1f1      	bne.n	899c <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    89b8:	4c0d      	ldr	r4, [pc, #52]	; (89f0 <setEnableAllChs+0x5c>)
    89ba:	2200      	movs	r2, #0
    89bc:	23ac      	movs	r3, #172	; 0xac
    89be:	005b      	lsls	r3, r3, #1
    89c0:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    89c2:	4b0c      	ldr	r3, [pc, #48]	; (89f4 <setEnableAllChs+0x60>)
    89c4:	5ce3      	ldrb	r3, [r4, r3]
    89c6:	2284      	movs	r2, #132	; 0x84
    89c8:	0092      	lsls	r2, r2, #2
    89ca:	5ca0      	ldrb	r0, [r4, r2]
    89cc:	0200      	lsls	r0, r0, #8
    89ce:	4318      	orrs	r0, r3
    89d0:	b2c1      	uxtb	r1, r0
    89d2:	0a00      	lsrs	r0, r0, #8
    89d4:	4d08      	ldr	r5, [pc, #32]	; (89f8 <setEnableAllChs+0x64>)
    89d6:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    89d8:	4b08      	ldr	r3, [pc, #32]	; (89fc <setEnableAllChs+0x68>)
    89da:	5ce3      	ldrb	r3, [r4, r3]
    89dc:	4a08      	ldr	r2, [pc, #32]	; (8a00 <setEnableAllChs+0x6c>)
    89de:	5ca0      	ldrb	r0, [r4, r2]
    89e0:	0200      	lsls	r0, r0, #8
    89e2:	4318      	orrs	r0, r3
    89e4:	b2c1      	uxtb	r1, r0
    89e6:	0a00      	lsrs	r0, r0, #8
    89e8:	47a8      	blx	r5
}
    89ea:	2008      	movs	r0, #8
    89ec:	bd70      	pop	{r4, r5, r6, pc}
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	20002310 	.word	0x20002310
    89f4:	0000020f 	.word	0x0000020f
    89f8:	0000c84d 	.word	0x0000c84d
    89fc:	0000020d 	.word	0x0000020d
    8a00:	0000020e 	.word	0x0000020e

00008a04 <setJoinSuccess>:
{
    8a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    8a06:	23ac      	movs	r3, #172	; 0xac
    8a08:	005b      	lsls	r3, r3, #1
    8a0a:	4a1a      	ldr	r2, [pc, #104]	; (8a74 <setJoinSuccess+0x70>)
    8a0c:	5cd7      	ldrb	r7, [r2, r3]
    8a0e:	2f00      	cmp	r7, #0
    8a10:	d100      	bne.n	8a14 <setJoinSuccess+0x10>
		lastUsedSB = 8;
    8a12:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    8a14:	1e7c      	subs	r4, r7, #1
    8a16:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    8a18:	0026      	movs	r6, r4
    8a1a:	3608      	adds	r6, #8
    8a1c:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    8a1e:	4815      	ldr	r0, [pc, #84]	; (8a74 <setJoinSuccess+0x70>)
    8a20:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    8a22:	373f      	adds	r7, #63	; 0x3f
    8a24:	e010      	b.n	8a48 <setJoinSuccess+0x44>
    8a26:	429f      	cmp	r7, r3
    8a28:	d00b      	beq.n	8a42 <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    8a2a:	7902      	ldrb	r2, [r0, #4]
    8a2c:	7941      	ldrb	r1, [r0, #5]
    8a2e:	0209      	lsls	r1, r1, #8
    8a30:	4311      	orrs	r1, r2
    8a32:	7982      	ldrb	r2, [r0, #6]
    8a34:	0412      	lsls	r2, r2, #16
    8a36:	4311      	orrs	r1, r2
    8a38:	79c2      	ldrb	r2, [r0, #7]
    8a3a:	0612      	lsls	r2, r2, #24
    8a3c:	430a      	orrs	r2, r1
    8a3e:	0059      	lsls	r1, r3, #1
    8a40:	548d      	strb	r5, [r1, r2]
    8a42:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    8a44:	2b48      	cmp	r3, #72	; 0x48
    8a46:	d007      	beq.n	8a58 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    8a48:	b2da      	uxtb	r2, r3
    8a4a:	2a3f      	cmp	r2, #63	; 0x3f
    8a4c:	d8eb      	bhi.n	8a26 <setJoinSuccess+0x22>
    8a4e:	429c      	cmp	r4, r3
    8a50:	dceb      	bgt.n	8a2a <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    8a52:	429e      	cmp	r6, r3
    8a54:	dde9      	ble.n	8a2a <setJoinSuccess+0x26>
    8a56:	e7f4      	b.n	8a42 <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8a58:	4b06      	ldr	r3, [pc, #24]	; (8a74 <setJoinSuccess+0x70>)
    8a5a:	4a07      	ldr	r2, [pc, #28]	; (8a78 <setJoinSuccess+0x74>)
    8a5c:	5c9a      	ldrb	r2, [r3, r2]
    8a5e:	2184      	movs	r1, #132	; 0x84
    8a60:	0089      	lsls	r1, r1, #2
    8a62:	5c58      	ldrb	r0, [r3, r1]
    8a64:	0200      	lsls	r0, r0, #8
    8a66:	4310      	orrs	r0, r2
    8a68:	b2c1      	uxtb	r1, r0
    8a6a:	0a00      	lsrs	r0, r0, #8
    8a6c:	4b03      	ldr	r3, [pc, #12]	; (8a7c <setJoinSuccess+0x78>)
    8a6e:	4798      	blx	r3
}
    8a70:	2008      	movs	r0, #8
    8a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a74:	20002310 	.word	0x20002310
    8a78:	0000020f 	.word	0x0000020f
    8a7c:	0000c84d 	.word	0x0000c84d

00008a80 <UpdateChannelIdStatus>:
{
    8a80:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    8a82:	232a      	movs	r3, #42	; 0x2a
    8a84:	4a14      	ldr	r2, [pc, #80]	; (8ad8 <UpdateChannelIdStatus+0x58>)
    8a86:	56d3      	ldrsb	r3, [r2, r3]
    8a88:	4298      	cmp	r0, r3
    8a8a:	db0b      	blt.n	8aa4 <UpdateChannelIdStatus+0x24>
    8a8c:	232f      	movs	r3, #47	; 0x2f
    8a8e:	5cd2      	ldrb	r2, [r2, r3]
    8a90:	3b23      	subs	r3, #35	; 0x23
    8a92:	4113      	asrs	r3, r2
    8a94:	07db      	lsls	r3, r3, #31
    8a96:	d41d      	bmi.n	8ad4 <UpdateChannelIdStatus+0x54>
    8a98:	23c2      	movs	r3, #194	; 0xc2
    8a9a:	33ff      	adds	r3, #255	; 0xff
    8a9c:	4a0e      	ldr	r2, [pc, #56]	; (8ad8 <UpdateChannelIdStatus+0x58>)
    8a9e:	5cd3      	ldrb	r3, [r2, r3]
    8aa0:	4283      	cmp	r3, r0
    8aa2:	d817      	bhi.n	8ad4 <UpdateChannelIdStatus+0x54>
		RegParams.pChParams[chid].status = statusNew;
    8aa4:	4b0c      	ldr	r3, [pc, #48]	; (8ad8 <UpdateChannelIdStatus+0x58>)
    8aa6:	791a      	ldrb	r2, [r3, #4]
    8aa8:	795c      	ldrb	r4, [r3, #5]
    8aaa:	0224      	lsls	r4, r4, #8
    8aac:	4314      	orrs	r4, r2
    8aae:	799a      	ldrb	r2, [r3, #6]
    8ab0:	0412      	lsls	r2, r2, #16
    8ab2:	4314      	orrs	r4, r2
    8ab4:	79da      	ldrb	r2, [r3, #7]
    8ab6:	0612      	lsls	r2, r2, #24
    8ab8:	4322      	orrs	r2, r4
    8aba:	0040      	lsls	r0, r0, #1
    8abc:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8abe:	4a07      	ldr	r2, [pc, #28]	; (8adc <UpdateChannelIdStatus+0x5c>)
    8ac0:	5c9a      	ldrb	r2, [r3, r2]
    8ac2:	2184      	movs	r1, #132	; 0x84
    8ac4:	0089      	lsls	r1, r1, #2
    8ac6:	5c58      	ldrb	r0, [r3, r1]
    8ac8:	0200      	lsls	r0, r0, #8
    8aca:	4310      	orrs	r0, r2
    8acc:	b2c1      	uxtb	r1, r0
    8ace:	0a00      	lsrs	r0, r0, #8
    8ad0:	4b03      	ldr	r3, [pc, #12]	; (8ae0 <UpdateChannelIdStatus+0x60>)
    8ad2:	4798      	blx	r3
}
    8ad4:	bd10      	pop	{r4, pc}
    8ad6:	46c0      	nop			; (mov r8, r8)
    8ad8:	20002310 	.word	0x20002310
    8adc:	0000020f 	.word	0x0000020f
    8ae0:	0000c84d 	.word	0x0000c84d

00008ae4 <EnableChannels2>:
{
    8ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ae6:	46ce      	mov	lr, r9
    8ae8:	4647      	mov	r7, r8
    8aea:	b580      	push	{r7, lr}
    8aec:	0004      	movs	r4, r0
    8aee:	000f      	movs	r7, r1
    8af0:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    8af2:	4288      	cmp	r0, r1
    8af4:	d812      	bhi.n	8b1c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    8af6:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    8af8:	4b0a      	ldr	r3, [pc, #40]	; (8b24 <EnableChannels2+0x40>)
    8afa:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    8afc:	4698      	mov	r8, r3
    8afe:	e007      	b.n	8b10 <EnableChannels2+0x2c>
    8b00:	2100      	movs	r1, #0
    8b02:	0020      	movs	r0, r4
    8b04:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    8b06:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    8b08:	3401      	adds	r4, #1
    8b0a:	b2e4      	uxtb	r4, r4
    8b0c:	42a7      	cmp	r7, r4
    8b0e:	d305      	bcc.n	8b1c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    8b10:	422e      	tst	r6, r5
    8b12:	d0f5      	beq.n	8b00 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    8b14:	0031      	movs	r1, r6
    8b16:	0020      	movs	r0, r4
    8b18:	47c8      	blx	r9
    8b1a:	e7f4      	b.n	8b06 <EnableChannels2+0x22>
}
    8b1c:	bc0c      	pop	{r2, r3}
    8b1e:	4690      	mov	r8, r2
    8b20:	4699      	mov	r9, r3
    8b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b24:	00008a81 	.word	0x00008a81

00008b28 <UpdateChannelIdStatusT2>:
{
    8b28:	b570      	push	{r4, r5, r6, lr}
    8b2a:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
    8b2c:	232a      	movs	r3, #42	; 0x2a
    8b2e:	4a3d      	ldr	r2, [pc, #244]	; (8c24 <UpdateChannelIdStatusT2+0xfc>)
    8b30:	56d3      	ldrsb	r3, [r2, r3]
    8b32:	4298      	cmp	r0, r3
    8b34:	da12      	bge.n	8b5c <UpdateChannelIdStatusT2+0x34>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    8b36:	0045      	lsls	r5, r0, #1
    8b38:	182d      	adds	r5, r5, r0
    8b3a:	00ad      	lsls	r5, r5, #2
    8b3c:	0011      	movs	r1, r2
    8b3e:	7a13      	ldrb	r3, [r2, #8]
    8b40:	7a52      	ldrb	r2, [r2, #9]
    8b42:	0212      	lsls	r2, r2, #8
    8b44:	431a      	orrs	r2, r3
    8b46:	7a8b      	ldrb	r3, [r1, #10]
    8b48:	041b      	lsls	r3, r3, #16
    8b4a:	431a      	orrs	r2, r3
    8b4c:	7acb      	ldrb	r3, [r1, #11]
    8b4e:	061b      	lsls	r3, r3, #24
    8b50:	4313      	orrs	r3, r2
    8b52:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
    8b54:	7adb      	ldrb	r3, [r3, #11]
    8b56:	43db      	mvns	r3, r3
    8b58:	079b      	lsls	r3, r3, #30
    8b5a:	d000      	beq.n	8b5e <UpdateChannelIdStatusT2+0x36>
}
    8b5c:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    8b5e:	000e      	movs	r6, r1
    8b60:	790b      	ldrb	r3, [r1, #4]
    8b62:	794a      	ldrb	r2, [r1, #5]
    8b64:	0212      	lsls	r2, r2, #8
    8b66:	431a      	orrs	r2, r3
    8b68:	798b      	ldrb	r3, [r1, #6]
    8b6a:	041b      	lsls	r3, r3, #16
    8b6c:	431a      	orrs	r2, r3
    8b6e:	79cb      	ldrb	r3, [r1, #7]
    8b70:	061b      	lsls	r3, r3, #24
    8b72:	4313      	orrs	r3, r2
    8b74:	0040      	lsls	r0, r0, #1
    8b76:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8b78:	4b2b      	ldr	r3, [pc, #172]	; (8c28 <UpdateChannelIdStatusT2+0x100>)
    8b7a:	5ccb      	ldrb	r3, [r1, r3]
    8b7c:	2284      	movs	r2, #132	; 0x84
    8b7e:	0092      	lsls	r2, r2, #2
    8b80:	5c88      	ldrb	r0, [r1, r2]
    8b82:	0200      	lsls	r0, r0, #8
    8b84:	4318      	orrs	r0, r3
    8b86:	b2c1      	uxtb	r1, r0
    8b88:	0a00      	lsrs	r0, r0, #8
    8b8a:	4b28      	ldr	r3, [pc, #160]	; (8c2c <UpdateChannelIdStatusT2+0x104>)
    8b8c:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    8b8e:	232f      	movs	r3, #47	; 0x2f
    8b90:	5cf2      	ldrb	r2, [r6, r3]
    8b92:	3b2c      	subs	r3, #44	; 0x2c
    8b94:	4113      	asrs	r3, r2
    8b96:	07db      	lsls	r3, r3, #31
    8b98:	d5e0      	bpl.n	8b5c <UpdateChannelIdStatusT2+0x34>
    8b9a:	2c00      	cmp	r4, #0
    8b9c:	d1de      	bne.n	8b5c <UpdateChannelIdStatusT2+0x34>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    8b9e:	4b21      	ldr	r3, [pc, #132]	; (8c24 <UpdateChannelIdStatusT2+0xfc>)
    8ba0:	7a18      	ldrb	r0, [r3, #8]
    8ba2:	7a5a      	ldrb	r2, [r3, #9]
    8ba4:	0212      	lsls	r2, r2, #8
    8ba6:	4302      	orrs	r2, r0
    8ba8:	7a98      	ldrb	r0, [r3, #10]
    8baa:	0400      	lsls	r0, r0, #16
    8bac:	4302      	orrs	r2, r0
    8bae:	7ad8      	ldrb	r0, [r3, #11]
    8bb0:	0600      	lsls	r0, r0, #24
    8bb2:	4310      	orrs	r0, r2
    8bb4:	1945      	adds	r5, r0, r5
    8bb6:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    8bb8:	222a      	movs	r2, #42	; 0x2a
    8bba:	569c      	ldrsb	r4, [r3, r2]
    8bbc:	2c00      	cmp	r4, #0
    8bbe:	dd1c      	ble.n	8bfa <UpdateChannelIdStatusT2+0xd2>
				if(RegParams.pChParams[i].status == ENABLED &&
    8bc0:	001a      	movs	r2, r3
    8bc2:	7919      	ldrb	r1, [r3, #4]
    8bc4:	795b      	ldrb	r3, [r3, #5]
    8bc6:	021b      	lsls	r3, r3, #8
    8bc8:	430b      	orrs	r3, r1
    8bca:	7991      	ldrb	r1, [r2, #6]
    8bcc:	0409      	lsls	r1, r1, #16
    8bce:	430b      	orrs	r3, r1
    8bd0:	79d1      	ldrb	r1, [r2, #7]
    8bd2:	0609      	lsls	r1, r1, #24
    8bd4:	4319      	orrs	r1, r3
    8bd6:	2300      	movs	r3, #0
    8bd8:	e003      	b.n	8be2 <UpdateChannelIdStatusT2+0xba>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    8bda:	3301      	adds	r3, #1
    8bdc:	b2db      	uxtb	r3, r3
    8bde:	42a3      	cmp	r3, r4
    8be0:	da0b      	bge.n	8bfa <UpdateChannelIdStatusT2+0xd2>
				if(RegParams.pChParams[i].status == ENABLED &&
    8be2:	005a      	lsls	r2, r3, #1
    8be4:	5c52      	ldrb	r2, [r2, r1]
    8be6:	2a00      	cmp	r2, #0
    8be8:	d0f7      	beq.n	8bda <UpdateChannelIdStatusT2+0xb2>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    8bea:	005a      	lsls	r2, r3, #1
    8bec:	18d2      	adds	r2, r2, r3
    8bee:	0092      	lsls	r2, r2, #2
    8bf0:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    8bf2:	7a12      	ldrb	r2, [r2, #8]
    8bf4:	42aa      	cmp	r2, r5
    8bf6:	d1f0      	bne.n	8bda <UpdateChannelIdStatusT2+0xb2>
    8bf8:	e7b0      	b.n	8b5c <UpdateChannelIdStatusT2+0x34>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    8bfa:	490a      	ldr	r1, [pc, #40]	; (8c24 <UpdateChannelIdStatusT2+0xfc>)
    8bfc:	7b0a      	ldrb	r2, [r1, #12]
    8bfe:	7b4b      	ldrb	r3, [r1, #13]
    8c00:	021b      	lsls	r3, r3, #8
    8c02:	4313      	orrs	r3, r2
    8c04:	7b8a      	ldrb	r2, [r1, #14]
    8c06:	0412      	lsls	r2, r2, #16
    8c08:	4313      	orrs	r3, r2
    8c0a:	7bca      	ldrb	r2, [r1, #15]
    8c0c:	0612      	lsls	r2, r2, #24
    8c0e:	431a      	orrs	r2, r3
    8c10:	006b      	lsls	r3, r5, #1
    8c12:	195d      	adds	r5, r3, r5
    8c14:	00ad      	lsls	r5, r5, #2
    8c16:	18ad      	adds	r5, r5, r2
    8c18:	2300      	movs	r3, #0
    8c1a:	722b      	strb	r3, [r5, #8]
    8c1c:	726b      	strb	r3, [r5, #9]
    8c1e:	72ab      	strb	r3, [r5, #10]
    8c20:	72eb      	strb	r3, [r5, #11]
    8c22:	e79b      	b.n	8b5c <UpdateChannelIdStatusT2+0x34>
    8c24:	20002310 	.word	0x20002310
    8c28:	0000020f 	.word	0x0000020f
    8c2c:	0000c84d 	.word	0x0000c84d

00008c30 <setChannelIdStatusT2>:
{
    8c30:	b570      	push	{r4, r5, r6, lr}
    8c32:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    8c34:	780d      	ldrb	r5, [r1, #0]
    8c36:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    8c38:	a901      	add	r1, sp, #4
    8c3a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    8c3c:	2301      	movs	r3, #1
    8c3e:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    8c40:	2015      	movs	r0, #21
    8c42:	4b0c      	ldr	r3, [pc, #48]	; (8c74 <setChannelIdStatusT2+0x44>)
    8c44:	4798      	blx	r3
    8c46:	0004      	movs	r4, r0
    8c48:	2808      	cmp	r0, #8
    8c4a:	d003      	beq.n	8c54 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    8c4c:	240a      	movs	r4, #10
}
    8c4e:	0020      	movs	r0, r4
    8c50:	b002      	add	sp, #8
    8c52:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    8c54:	232f      	movs	r3, #47	; 0x2f
    8c56:	4a08      	ldr	r2, [pc, #32]	; (8c78 <setChannelIdStatusT2+0x48>)
    8c58:	5cd3      	ldrb	r3, [r2, r3]
    8c5a:	2b0f      	cmp	r3, #15
    8c5c:	d004      	beq.n	8c68 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    8c5e:	0031      	movs	r1, r6
    8c60:	0028      	movs	r0, r5
    8c62:	4b06      	ldr	r3, [pc, #24]	; (8c7c <setChannelIdStatusT2+0x4c>)
    8c64:	4798      	blx	r3
    8c66:	e7f2      	b.n	8c4e <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    8c68:	0031      	movs	r1, r6
    8c6a:	0028      	movs	r0, r5
    8c6c:	4b04      	ldr	r3, [pc, #16]	; (8c80 <setChannelIdStatusT2+0x50>)
    8c6e:	4798      	blx	r3
    8c70:	e7ed      	b.n	8c4e <setChannelIdStatusT2+0x1e>
    8c72:	46c0      	nop			; (mov r8, r8)
    8c74:	00008065 	.word	0x00008065
    8c78:	20002310 	.word	0x20002310
    8c7c:	00008b29 	.word	0x00008b29
    8c80:	00008a81 	.word	0x00008a81

00008c84 <UpdateChannelIdStatusT4>:
{
    8c84:	b570      	push	{r4, r5, r6, lr}
    8c86:	0004      	movs	r4, r0
    8c88:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    8c8a:	4923      	ldr	r1, [pc, #140]	; (8d18 <UpdateChannelIdStatusT4+0x94>)
    8c8c:	790b      	ldrb	r3, [r1, #4]
    8c8e:	794a      	ldrb	r2, [r1, #5]
    8c90:	0212      	lsls	r2, r2, #8
    8c92:	431a      	orrs	r2, r3
    8c94:	798b      	ldrb	r3, [r1, #6]
    8c96:	041b      	lsls	r3, r3, #16
    8c98:	431a      	orrs	r2, r3
    8c9a:	79cb      	ldrb	r3, [r1, #7]
    8c9c:	061b      	lsls	r3, r3, #24
    8c9e:	4313      	orrs	r3, r2
    8ca0:	0042      	lsls	r2, r0, #1
    8ca2:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8ca4:	4b1d      	ldr	r3, [pc, #116]	; (8d1c <UpdateChannelIdStatusT4+0x98>)
    8ca6:	5ccb      	ldrb	r3, [r1, r3]
    8ca8:	2284      	movs	r2, #132	; 0x84
    8caa:	0092      	lsls	r2, r2, #2
    8cac:	5c88      	ldrb	r0, [r1, r2]
    8cae:	0200      	lsls	r0, r0, #8
    8cb0:	4318      	orrs	r0, r3
    8cb2:	b2c1      	uxtb	r1, r0
    8cb4:	0a00      	lsrs	r0, r0, #8
    8cb6:	4b1a      	ldr	r3, [pc, #104]	; (8d20 <UpdateChannelIdStatusT4+0x9c>)
    8cb8:	4798      	blx	r3
	if(statusNew == ENABLED)
    8cba:	2d00      	cmp	r5, #0
    8cbc:	d028      	beq.n	8d10 <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    8cbe:	4a16      	ldr	r2, [pc, #88]	; (8d18 <UpdateChannelIdStatusT4+0x94>)
    8cc0:	7a10      	ldrb	r0, [r2, #8]
    8cc2:	7a53      	ldrb	r3, [r2, #9]
    8cc4:	021b      	lsls	r3, r3, #8
    8cc6:	4303      	orrs	r3, r0
    8cc8:	7a90      	ldrb	r0, [r2, #10]
    8cca:	0400      	lsls	r0, r0, #16
    8ccc:	4303      	orrs	r3, r0
    8cce:	7ad0      	ldrb	r0, [r2, #11]
    8cd0:	0600      	lsls	r0, r0, #24
    8cd2:	4318      	orrs	r0, r3
    8cd4:	0063      	lsls	r3, r4, #1
    8cd6:	191c      	adds	r4, r3, r4
    8cd8:	00a4      	lsls	r4, r4, #2
    8cda:	1900      	adds	r0, r0, r4
    8cdc:	7803      	ldrb	r3, [r0, #0]
    8cde:	7842      	ldrb	r2, [r0, #1]
    8ce0:	0212      	lsls	r2, r2, #8
    8ce2:	431a      	orrs	r2, r3
    8ce4:	7883      	ldrb	r3, [r0, #2]
    8ce6:	041b      	lsls	r3, r3, #16
    8ce8:	431a      	orrs	r2, r3
    8cea:	78c3      	ldrb	r3, [r0, #3]
    8cec:	061b      	lsls	r3, r3, #24
    8cee:	4313      	orrs	r3, r2
    8cf0:	4a0c      	ldr	r2, [pc, #48]	; (8d24 <UpdateChannelIdStatusT4+0xa0>)
    8cf2:	4293      	cmp	r3, r2
    8cf4:	d80d      	bhi.n	8d12 <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    8cf6:	230a      	movs	r3, #10
    8cf8:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8cfa:	4b07      	ldr	r3, [pc, #28]	; (8d18 <UpdateChannelIdStatusT4+0x94>)
    8cfc:	4a0a      	ldr	r2, [pc, #40]	; (8d28 <UpdateChannelIdStatusT4+0xa4>)
    8cfe:	5c9a      	ldrb	r2, [r3, r2]
    8d00:	490a      	ldr	r1, [pc, #40]	; (8d2c <UpdateChannelIdStatusT4+0xa8>)
    8d02:	5c58      	ldrb	r0, [r3, r1]
    8d04:	0200      	lsls	r0, r0, #8
    8d06:	4310      	orrs	r0, r2
    8d08:	b2c1      	uxtb	r1, r0
    8d0a:	0a00      	lsrs	r0, r0, #8
    8d0c:	4b04      	ldr	r3, [pc, #16]	; (8d20 <UpdateChannelIdStatusT4+0x9c>)
    8d0e:	4798      	blx	r3
}
    8d10:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    8d12:	230e      	movs	r3, #14
    8d14:	7283      	strb	r3, [r0, #10]
    8d16:	e7f0      	b.n	8cfa <UpdateChannelIdStatusT4+0x76>
    8d18:	20002310 	.word	0x20002310
    8d1c:	0000020f 	.word	0x0000020f
    8d20:	0000c84d 	.word	0x0000c84d
    8d24:	36f6211f 	.word	0x36f6211f
    8d28:	00000211 	.word	0x00000211
    8d2c:	00000212 	.word	0x00000212

00008d30 <UpdateChannelIdStatusT3>:
{
    8d30:	b570      	push	{r4, r5, r6, lr}
    8d32:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    8d34:	4c17      	ldr	r4, [pc, #92]	; (8d94 <UpdateChannelIdStatusT3+0x64>)
    8d36:	7923      	ldrb	r3, [r4, #4]
    8d38:	7962      	ldrb	r2, [r4, #5]
    8d3a:	0212      	lsls	r2, r2, #8
    8d3c:	431a      	orrs	r2, r3
    8d3e:	79a3      	ldrb	r3, [r4, #6]
    8d40:	041b      	lsls	r3, r3, #16
    8d42:	431a      	orrs	r2, r3
    8d44:	79e3      	ldrb	r3, [r4, #7]
    8d46:	061b      	lsls	r3, r3, #24
    8d48:	4313      	orrs	r3, r2
    8d4a:	0042      	lsls	r2, r0, #1
    8d4c:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8d4e:	4b12      	ldr	r3, [pc, #72]	; (8d98 <UpdateChannelIdStatusT3+0x68>)
    8d50:	5ce3      	ldrb	r3, [r4, r3]
    8d52:	2284      	movs	r2, #132	; 0x84
    8d54:	0092      	lsls	r2, r2, #2
    8d56:	5ca0      	ldrb	r0, [r4, r2]
    8d58:	0200      	lsls	r0, r0, #8
    8d5a:	4318      	orrs	r0, r3
    8d5c:	b2c1      	uxtb	r1, r0
    8d5e:	0a00      	lsrs	r0, r0, #8
    8d60:	4e0e      	ldr	r6, [pc, #56]	; (8d9c <UpdateChannelIdStatusT3+0x6c>)
    8d62:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8d64:	4b0e      	ldr	r3, [pc, #56]	; (8da0 <UpdateChannelIdStatusT3+0x70>)
    8d66:	5ce3      	ldrb	r3, [r4, r3]
    8d68:	4a0e      	ldr	r2, [pc, #56]	; (8da4 <UpdateChannelIdStatusT3+0x74>)
    8d6a:	5ca0      	ldrb	r0, [r4, r2]
    8d6c:	0200      	lsls	r0, r0, #8
    8d6e:	4318      	orrs	r0, r3
    8d70:	b2c1      	uxtb	r1, r0
    8d72:	0a00      	lsrs	r0, r0, #8
    8d74:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    8d76:	232f      	movs	r3, #47	; 0x2f
    8d78:	5ce3      	ldrb	r3, [r4, r3]
    8d7a:	2b05      	cmp	r3, #5
    8d7c:	d000      	beq.n	8d80 <UpdateChannelIdStatusT3+0x50>
}
    8d7e:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    8d80:	3558      	adds	r5, #88	; 0x58
    8d82:	00ad      	lsls	r5, r5, #2
    8d84:	4b03      	ldr	r3, [pc, #12]	; (8d94 <UpdateChannelIdStatusT3+0x64>)
    8d86:	195d      	adds	r5, r3, r5
    8d88:	2200      	movs	r2, #0
    8d8a:	726a      	strb	r2, [r5, #9]
    8d8c:	72aa      	strb	r2, [r5, #10]
    8d8e:	72ea      	strb	r2, [r5, #11]
    8d90:	732a      	strb	r2, [r5, #12]
}
    8d92:	e7f4      	b.n	8d7e <UpdateChannelIdStatusT3+0x4e>
    8d94:	20002310 	.word	0x20002310
    8d98:	0000020f 	.word	0x0000020f
    8d9c:	0000c84d 	.word	0x0000c84d
    8da0:	00000211 	.word	0x00000211
    8da4:	00000212 	.word	0x00000212

00008da8 <setChannelIdStatusT3>:
{
    8da8:	b570      	push	{r4, r5, r6, lr}
    8daa:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    8dac:	780d      	ldrb	r5, [r1, #0]
    8dae:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    8db0:	a901      	add	r1, sp, #4
    8db2:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    8db4:	2301      	movs	r3, #1
    8db6:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    8db8:	2015      	movs	r0, #21
    8dba:	4b0c      	ldr	r3, [pc, #48]	; (8dec <setChannelIdStatusT3+0x44>)
    8dbc:	4798      	blx	r3
    8dbe:	0004      	movs	r4, r0
    8dc0:	2808      	cmp	r0, #8
    8dc2:	d003      	beq.n	8dcc <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    8dc4:	240a      	movs	r4, #10
}
    8dc6:	0020      	movs	r0, r4
    8dc8:	b002      	add	sp, #8
    8dca:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    8dcc:	232f      	movs	r3, #47	; 0x2f
    8dce:	4a08      	ldr	r2, [pc, #32]	; (8df0 <setChannelIdStatusT3+0x48>)
    8dd0:	5cd3      	ldrb	r3, [r2, r3]
    8dd2:	2b04      	cmp	r3, #4
    8dd4:	d004      	beq.n	8de0 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    8dd6:	0031      	movs	r1, r6
    8dd8:	0028      	movs	r0, r5
    8dda:	4b06      	ldr	r3, [pc, #24]	; (8df4 <setChannelIdStatusT3+0x4c>)
    8ddc:	4798      	blx	r3
    8dde:	e7f2      	b.n	8dc6 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    8de0:	0031      	movs	r1, r6
    8de2:	0028      	movs	r0, r5
    8de4:	4b04      	ldr	r3, [pc, #16]	; (8df8 <setChannelIdStatusT3+0x50>)
    8de6:	4798      	blx	r3
    8de8:	e7ed      	b.n	8dc6 <setChannelIdStatusT3+0x1e>
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	00008065 	.word	0x00008065
    8df0:	20002310 	.word	0x20002310
    8df4:	00008d31 	.word	0x00008d31
    8df8:	00008c85 	.word	0x00008c85

00008dfc <setDataRangeT2>:
{
    8dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dfe:	46c6      	mov	lr, r8
    8e00:	b500      	push	{lr}
    8e02:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    8e04:	780d      	ldrb	r5, [r1, #0]
    8e06:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    8e08:	ab01      	add	r3, sp, #4
    8e0a:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    8e0c:	2201      	movs	r2, #1
    8e0e:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    8e10:	2012      	movs	r0, #18
    8e12:	4b24      	ldr	r3, [pc, #144]	; (8ea4 <setDataRangeT2+0xa8>)
    8e14:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    8e16:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    8e18:	2808      	cmp	r0, #8
    8e1a:	d004      	beq.n	8e26 <setDataRangeT2+0x2a>
}
    8e1c:	0020      	movs	r0, r4
    8e1e:	b002      	add	sp, #8
    8e20:	bc04      	pop	{r2}
    8e22:	4690      	mov	r8, r2
    8e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    8e26:	a901      	add	r1, sp, #4
    8e28:	300d      	adds	r0, #13
    8e2a:	4b1f      	ldr	r3, [pc, #124]	; (8ea8 <setDataRangeT2+0xac>)
    8e2c:	4798      	blx	r3
    8e2e:	0004      	movs	r4, r0
    8e30:	2808      	cmp	r0, #8
    8e32:	d001      	beq.n	8e38 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    8e34:	240a      	movs	r4, #10
    8e36:	e7f1      	b.n	8e1c <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    8e38:	4f1c      	ldr	r7, [pc, #112]	; (8eac <setDataRangeT2+0xb0>)
    8e3a:	793b      	ldrb	r3, [r7, #4]
    8e3c:	797a      	ldrb	r2, [r7, #5]
    8e3e:	0212      	lsls	r2, r2, #8
    8e40:	431a      	orrs	r2, r3
    8e42:	79bb      	ldrb	r3, [r7, #6]
    8e44:	041b      	lsls	r3, r3, #16
    8e46:	431a      	orrs	r2, r3
    8e48:	79fb      	ldrb	r3, [r7, #7]
    8e4a:	061b      	lsls	r3, r3, #24
    8e4c:	4313      	orrs	r3, r2
    8e4e:	006a      	lsls	r2, r5, #1
    8e50:	4690      	mov	r8, r2
    8e52:	4443      	add	r3, r8
    8e54:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8e56:	4b16      	ldr	r3, [pc, #88]	; (8eb0 <setDataRangeT2+0xb4>)
    8e58:	5cfb      	ldrb	r3, [r7, r3]
    8e5a:	2284      	movs	r2, #132	; 0x84
    8e5c:	0092      	lsls	r2, r2, #2
    8e5e:	5cb8      	ldrb	r0, [r7, r2]
    8e60:	0200      	lsls	r0, r0, #8
    8e62:	4318      	orrs	r0, r3
    8e64:	b2c1      	uxtb	r1, r0
    8e66:	0a00      	lsrs	r0, r0, #8
    8e68:	4e12      	ldr	r6, [pc, #72]	; (8eb4 <setDataRangeT2+0xb8>)
    8e6a:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    8e6c:	7a3b      	ldrb	r3, [r7, #8]
    8e6e:	7a7a      	ldrb	r2, [r7, #9]
    8e70:	0212      	lsls	r2, r2, #8
    8e72:	431a      	orrs	r2, r3
    8e74:	7abb      	ldrb	r3, [r7, #10]
    8e76:	041b      	lsls	r3, r3, #16
    8e78:	431a      	orrs	r2, r3
    8e7a:	7afb      	ldrb	r3, [r7, #11]
    8e7c:	061b      	lsls	r3, r3, #24
    8e7e:	4313      	orrs	r3, r2
    8e80:	4445      	add	r5, r8
    8e82:	00ad      	lsls	r5, r5, #2
    8e84:	195d      	adds	r5, r3, r5
    8e86:	7aeb      	ldrb	r3, [r5, #11]
    8e88:	2202      	movs	r2, #2
    8e8a:	4313      	orrs	r3, r2
    8e8c:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8e8e:	4b0a      	ldr	r3, [pc, #40]	; (8eb8 <setDataRangeT2+0xbc>)
    8e90:	5cfb      	ldrb	r3, [r7, r3]
    8e92:	4a0a      	ldr	r2, [pc, #40]	; (8ebc <setDataRangeT2+0xc0>)
    8e94:	5cb8      	ldrb	r0, [r7, r2]
    8e96:	0200      	lsls	r0, r0, #8
    8e98:	4318      	orrs	r0, r3
    8e9a:	b2c1      	uxtb	r1, r0
    8e9c:	0a00      	lsrs	r0, r0, #8
    8e9e:	47b0      	blx	r6
    8ea0:	e7bc      	b.n	8e1c <setDataRangeT2+0x20>
    8ea2:	46c0      	nop			; (mov r8, r8)
    8ea4:	000084fd 	.word	0x000084fd
    8ea8:	00008065 	.word	0x00008065
    8eac:	20002310 	.word	0x20002310
    8eb0:	0000020f 	.word	0x0000020f
    8eb4:	0000c84d 	.word	0x0000c84d
    8eb8:	00000211 	.word	0x00000211
    8ebc:	00000212 	.word	0x00000212

00008ec0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    8ec0:	b530      	push	{r4, r5, lr}
    8ec2:	b083      	sub	sp, #12
    8ec4:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    8ec6:	2300      	movs	r3, #0
    8ec8:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    8eca:	4920      	ldr	r1, [pc, #128]	; (8f4c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    8ecc:	7d0b      	ldrb	r3, [r1, #20]
    8ece:	7d4a      	ldrb	r2, [r1, #21]
    8ed0:	0212      	lsls	r2, r2, #8
    8ed2:	431a      	orrs	r2, r3
    8ed4:	7d8b      	ldrb	r3, [r1, #22]
    8ed6:	041b      	lsls	r3, r3, #16
    8ed8:	431a      	orrs	r2, r3
    8eda:	7dcb      	ldrb	r3, [r1, #23]
    8edc:	061b      	lsls	r3, r3, #24
    8ede:	4313      	orrs	r3, r2
    8ee0:	7a18      	ldrb	r0, [r3, #8]
    8ee2:	4b1b      	ldr	r3, [pc, #108]	; (8f50 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    8ee4:	4798      	blx	r3
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d107      	bne.n	8efa <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    8eea:	2204      	movs	r2, #4
    8eec:	a901      	add	r1, sp, #4
    8eee:	0020      	movs	r0, r4
    8ef0:	4b18      	ldr	r3, [pc, #96]	; (8f54 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    8ef2:	4798      	blx	r3
}
    8ef4:	2008      	movs	r0, #8
    8ef6:	b003      	add	sp, #12
    8ef8:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    8efa:	4d14      	ldr	r5, [pc, #80]	; (8f4c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    8efc:	7d2b      	ldrb	r3, [r5, #20]
    8efe:	7d6a      	ldrb	r2, [r5, #21]
    8f00:	0212      	lsls	r2, r2, #8
    8f02:	431a      	orrs	r2, r3
    8f04:	7dab      	ldrb	r3, [r5, #22]
    8f06:	041b      	lsls	r3, r3, #16
    8f08:	431a      	orrs	r2, r3
    8f0a:	7deb      	ldrb	r3, [r5, #23]
    8f0c:	061b      	lsls	r3, r3, #24
    8f0e:	4313      	orrs	r3, r2
    8f10:	7a18      	ldrb	r0, [r3, #8]
    8f12:	4b11      	ldr	r3, [pc, #68]	; (8f58 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    8f14:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    8f16:	7d2b      	ldrb	r3, [r5, #20]
    8f18:	7d6a      	ldrb	r2, [r5, #21]
    8f1a:	0212      	lsls	r2, r2, #8
    8f1c:	431a      	orrs	r2, r3
    8f1e:	7dab      	ldrb	r3, [r5, #22]
    8f20:	041b      	lsls	r3, r3, #16
    8f22:	431a      	orrs	r2, r3
    8f24:	7deb      	ldrb	r3, [r5, #23]
    8f26:	061b      	lsls	r3, r3, #24
    8f28:	4313      	orrs	r3, r2
    8f2a:	791d      	ldrb	r5, [r3, #4]
    8f2c:	795a      	ldrb	r2, [r3, #5]
    8f2e:	0212      	lsls	r2, r2, #8
    8f30:	432a      	orrs	r2, r5
    8f32:	799d      	ldrb	r5, [r3, #6]
    8f34:	042d      	lsls	r5, r5, #16
    8f36:	432a      	orrs	r2, r5
    8f38:	79dd      	ldrb	r5, [r3, #7]
    8f3a:	062d      	lsls	r5, r5, #24
    8f3c:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    8f3e:	21fa      	movs	r1, #250	; 0xfa
    8f40:	0089      	lsls	r1, r1, #2
    8f42:	4b06      	ldr	r3, [pc, #24]	; (8f5c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    8f44:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    8f46:	182d      	adds	r5, r5, r0
    8f48:	9501      	str	r5, [sp, #4]
    8f4a:	e7ce      	b.n	8eea <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    8f4c:	20002310 	.word	0x20002310
    8f50:	0000d715 	.word	0x0000d715
    8f54:	00018655 	.word	0x00018655
    8f58:	0000d729 	.word	0x0000d729
    8f5c:	00014f51 	.word	0x00014f51

00008f60 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    8f60:	b510      	push	{r4, lr}
    8f62:	b082      	sub	sp, #8
    8f64:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8f66:	784c      	ldrb	r4, [r1, #1]
    8f68:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    8f6a:	780a      	ldrb	r2, [r1, #0]
    8f6c:	2a00      	cmp	r2, #0
    8f6e:	d007      	beq.n	8f80 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    8f70:	2330      	movs	r3, #48	; 0x30
    8f72:	4a23      	ldr	r2, [pc, #140]	; (9000 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    8f74:	5cd3      	ldrb	r3, [r2, r3]
    8f76:	2b40      	cmp	r3, #64	; 0x40
    8f78:	d819      	bhi.n	8fae <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    8f7a:	23a8      	movs	r3, #168	; 0xa8
    8f7c:	005b      	lsls	r3, r3, #1
    8f7e:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    8f80:	491f      	ldr	r1, [pc, #124]	; (9000 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    8f82:	22ab      	movs	r2, #171	; 0xab
    8f84:	0052      	lsls	r2, r2, #1
    8f86:	5c8a      	ldrb	r2, [r1, r2]
    8f88:	1b12      	subs	r2, r2, r4
    8f8a:	189b      	adds	r3, r3, r2
    8f8c:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    8f8e:	466a      	mov	r2, sp
    8f90:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    8f92:	2254      	movs	r2, #84	; 0x54
    8f94:	32ff      	adds	r2, #255	; 0xff
    8f96:	5c8a      	ldrb	r2, [r1, r2]
    8f98:	4293      	cmp	r3, r2
    8f9a:	d80d      	bhi.n	8fb8 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    8f9c:	22a9      	movs	r2, #169	; 0xa9
    8f9e:	0052      	lsls	r2, r2, #1
    8fa0:	4917      	ldr	r1, [pc, #92]	; (9000 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    8fa2:	5c8a      	ldrb	r2, [r1, r2]
    8fa4:	4293      	cmp	r3, r2
    8fa6:	d209      	bcs.n	8fbc <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    8fa8:	466b      	mov	r3, sp
    8faa:	711a      	strb	r2, [r3, #4]
    8fac:	e006      	b.n	8fbc <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    8fae:	2352      	movs	r3, #82	; 0x52
    8fb0:	33ff      	adds	r3, #255	; 0xff
    8fb2:	4a13      	ldr	r2, [pc, #76]	; (9000 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    8fb4:	5cd3      	ldrb	r3, [r2, r3]
    8fb6:	e7e3      	b.n	8f80 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    8fb8:	466b      	mov	r3, sp
    8fba:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    8fbc:	4910      	ldr	r1, [pc, #64]	; (9000 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    8fbe:	2330      	movs	r3, #48	; 0x30
    8fc0:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    8fc2:	3b29      	subs	r3, #41	; 0x29
    8fc4:	4023      	ands	r3, r4
    8fc6:	4c0f      	ldr	r4, [pc, #60]	; (9004 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    8fc8:	435c      	muls	r4, r3
    8fca:	23a6      	movs	r3, #166	; 0xa6
    8fcc:	005b      	lsls	r3, r3, #1
    8fce:	5ccb      	ldrb	r3, [r1, r3]
    8fd0:	224e      	movs	r2, #78	; 0x4e
    8fd2:	32ff      	adds	r2, #255	; 0xff
    8fd4:	5c8a      	ldrb	r2, [r1, r2]
    8fd6:	0212      	lsls	r2, r2, #8
    8fd8:	4313      	orrs	r3, r2
    8fda:	22a7      	movs	r2, #167	; 0xa7
    8fdc:	0052      	lsls	r2, r2, #1
    8fde:	5c8a      	ldrb	r2, [r1, r2]
    8fe0:	0412      	lsls	r2, r2, #16
    8fe2:	431a      	orrs	r2, r3
    8fe4:	2350      	movs	r3, #80	; 0x50
    8fe6:	33ff      	adds	r3, #255	; 0xff
    8fe8:	5ccb      	ldrb	r3, [r1, r3]
    8fea:	061b      	lsls	r3, r3, #24
    8fec:	4313      	orrs	r3, r2
    8fee:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    8ff0:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8ff2:	2208      	movs	r2, #8
    8ff4:	4669      	mov	r1, sp
    8ff6:	4b04      	ldr	r3, [pc, #16]	; (9008 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    8ff8:	4798      	blx	r3
}
    8ffa:	2008      	movs	r0, #8
    8ffc:	b002      	add	sp, #8
    8ffe:	bd10      	pop	{r4, pc}
    9000:	20002310 	.word	0x20002310
    9004:	000927c0 	.word	0x000927c0
    9008:	00018655 	.word	0x00018655

0000900c <LORAREG_GetAttr_DRangeChBandT1>:
{
    900c:	b5f0      	push	{r4, r5, r6, r7, lr}
    900e:	46c6      	mov	lr, r8
    9010:	b500      	push	{lr}
    9012:	b084      	sub	sp, #16
    9014:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    9016:	2204      	movs	r2, #4
    9018:	a803      	add	r0, sp, #12
    901a:	4b43      	ldr	r3, [pc, #268]	; (9128 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    901c:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    901e:	a903      	add	r1, sp, #12
    9020:	201b      	movs	r0, #27
    9022:	4b42      	ldr	r3, [pc, #264]	; (912c <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    9024:	4798      	blx	r3
    9026:	2808      	cmp	r0, #8
    9028:	d004      	beq.n	9034 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    902a:	200a      	movs	r0, #10
}
    902c:	b004      	add	sp, #16
    902e:	bc04      	pop	{r2}
    9030:	4690      	mov	r8, r2
    9032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    9034:	aa03      	add	r2, sp, #12
    9036:	7813      	ldrb	r3, [r2, #0]
    9038:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    903a:	222f      	movs	r2, #47	; 0x2f
    903c:	493c      	ldr	r1, [pc, #240]	; (9130 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    903e:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    9040:	3903      	subs	r1, #3
    9042:	1e4a      	subs	r2, r1, #1
    9044:	4191      	sbcs	r1, r2
    9046:	3106      	adds	r1, #6
	switch (chMaskCntl)
    9048:	2b07      	cmp	r3, #7
    904a:	d869      	bhi.n	9120 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    904c:	009a      	lsls	r2, r3, #2
    904e:	4d39      	ldr	r5, [pc, #228]	; (9134 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    9050:	58aa      	ldr	r2, [r5, r2]
    9052:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    9054:	011b      	lsls	r3, r3, #4
    9056:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    9058:	001a      	movs	r2, r3
    905a:	3210      	adds	r2, #16
    905c:	b2d2      	uxtb	r2, r2
    905e:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    9060:	4293      	cmp	r3, r2
    9062:	d25f      	bcs.n	9124 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    9064:	4e32      	ldr	r6, [pc, #200]	; (9130 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    9066:	7935      	ldrb	r5, [r6, #4]
    9068:	7972      	ldrb	r2, [r6, #5]
    906a:	0212      	lsls	r2, r2, #8
    906c:	4315      	orrs	r5, r2
    906e:	79b2      	ldrb	r2, [r6, #6]
    9070:	0412      	lsls	r2, r2, #16
    9072:	432a      	orrs	r2, r5
    9074:	79f5      	ldrb	r5, [r6, #7]
    9076:	062d      	lsls	r5, r5, #24
    9078:	4315      	orrs	r5, r2
    907a:	46ac      	mov	ip, r5
    907c:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    907e:	2401      	movs	r4, #1
    9080:	e00c      	b.n	909c <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    9082:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    9084:	7872      	ldrb	r2, [r6, #1]
    9086:	0912      	lsrs	r2, r2, #4
    9088:	42aa      	cmp	r2, r5
    908a:	dd02      	ble.n	9092 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    908c:	423c      	tst	r4, r7
    908e:	d011      	beq.n	90b4 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    9090:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    9092:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    9094:	3301      	adds	r3, #1
    9096:	b2db      	uxtb	r3, r3
    9098:	4598      	cmp	r8, r3
    909a:	d013      	beq.n	90c4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    909c:	005e      	lsls	r6, r3, #1
    909e:	4466      	add	r6, ip
    90a0:	7872      	ldrb	r2, [r6, #1]
    90a2:	0712      	lsls	r2, r2, #28
    90a4:	0f12      	lsrs	r2, r2, #28
    90a6:	428a      	cmp	r2, r1
    90a8:	daec      	bge.n	9084 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    90aa:	423c      	tst	r4, r7
    90ac:	d1e9      	bne.n	9082 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    90ae:	2f00      	cmp	r7, #0
    90b0:	d1ef      	bne.n	9092 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    90b2:	e7e6      	b.n	9082 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    90b4:	2f00      	cmp	r7, #0
    90b6:	d0eb      	beq.n	9090 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    90b8:	e7eb      	b.n	9092 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    90ba:	2352      	movs	r3, #82	; 0x52
    90bc:	33ff      	adds	r3, #255	; 0xff
    90be:	4a1c      	ldr	r2, [pc, #112]	; (9130 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    90c0:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    90c2:	000d      	movs	r5, r1
    90c4:	012d      	lsls	r5, r5, #4
    90c6:	230f      	movs	r3, #15
    90c8:	4019      	ands	r1, r3
    90ca:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    90cc:	9b01      	ldr	r3, [sp, #4]
    90ce:	701d      	strb	r5, [r3, #0]
    90d0:	e7ac      	b.n	902c <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    90d2:	4d17      	ldr	r5, [pc, #92]	; (9130 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    90d4:	792b      	ldrb	r3, [r5, #4]
    90d6:	796a      	ldrb	r2, [r5, #5]
    90d8:	0212      	lsls	r2, r2, #8
    90da:	431a      	orrs	r2, r3
    90dc:	79ab      	ldrb	r3, [r5, #6]
    90de:	041b      	lsls	r3, r3, #16
    90e0:	431a      	orrs	r2, r3
    90e2:	79eb      	ldrb	r3, [r5, #7]
    90e4:	061b      	lsls	r3, r3, #24
    90e6:	4313      	orrs	r3, r2
    90e8:	001a      	movs	r2, r3
    90ea:	3380      	adds	r3, #128	; 0x80
    90ec:	001c      	movs	r4, r3
    90ee:	2500      	movs	r5, #0
    90f0:	e002      	b.n	90f8 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    90f2:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    90f4:	42a2      	cmp	r2, r4
    90f6:	d00c      	beq.n	9112 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    90f8:	0016      	movs	r6, r2
    90fa:	7853      	ldrb	r3, [r2, #1]
    90fc:	071b      	lsls	r3, r3, #28
    90fe:	0f1b      	lsrs	r3, r3, #28
    9100:	428b      	cmp	r3, r1
    9102:	da00      	bge.n	9106 <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    9104:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    9106:	7873      	ldrb	r3, [r6, #1]
    9108:	091b      	lsrs	r3, r3, #4
    910a:	42ab      	cmp	r3, r5
    910c:	ddf1      	ble.n	90f2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    910e:	001d      	movs	r5, r3
    9110:	e7ef      	b.n	90f2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    9112:	2f00      	cmp	r7, #0
    9114:	d0d6      	beq.n	90c4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    9116:	2352      	movs	r3, #82	; 0x52
    9118:	33ff      	adds	r3, #255	; 0xff
    911a:	4a05      	ldr	r2, [pc, #20]	; (9130 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    911c:	5cd5      	ldrb	r5, [r2, r3]
    911e:	e7d1      	b.n	90c4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    9120:	2500      	movs	r5, #0
    9122:	e7cf      	b.n	90c4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    9124:	2500      	movs	r5, #0
    9126:	e7cd      	b.n	90c4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    9128:	00018655 	.word	0x00018655
    912c:	0000816d 	.word	0x0000816d
    9130:	20002310 	.word	0x20002310
    9134:	0001e888 	.word	0x0001e888

00009138 <LORAREG_GetAttr_DefRx2Freq>:
{
    9138:	b510      	push	{r4, lr}
    913a:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    913c:	2204      	movs	r2, #4
    913e:	4902      	ldr	r1, [pc, #8]	; (9148 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    9140:	4b02      	ldr	r3, [pc, #8]	; (914c <LORAREG_GetAttr_DefRx2Freq+0x14>)
    9142:	4798      	blx	r3
}
    9144:	2008      	movs	r0, #8
    9146:	bd10      	pop	{r4, pc}
    9148:	2000232c 	.word	0x2000232c
    914c:	00018655 	.word	0x00018655

00009150 <LORAREG_GetAttr_DlFrequency>:
{
    9150:	b510      	push	{r4, lr}
    9152:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    9154:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    9156:	212a      	movs	r1, #42	; 0x2a
    9158:	480d      	ldr	r0, [pc, #52]	; (9190 <LORAREG_GetAttr_DlFrequency+0x40>)
    915a:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    915c:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    915e:	428a      	cmp	r2, r1
    9160:	dd00      	ble.n	9164 <LORAREG_GetAttr_DlFrequency+0x14>
}
    9162:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    9164:	4c0a      	ldr	r4, [pc, #40]	; (9190 <LORAREG_GetAttr_DlFrequency+0x40>)
    9166:	7a21      	ldrb	r1, [r4, #8]
    9168:	7a60      	ldrb	r0, [r4, #9]
    916a:	0200      	lsls	r0, r0, #8
    916c:	4308      	orrs	r0, r1
    916e:	7aa1      	ldrb	r1, [r4, #10]
    9170:	0409      	lsls	r1, r1, #16
    9172:	4308      	orrs	r0, r1
    9174:	7ae1      	ldrb	r1, [r4, #11]
    9176:	0609      	lsls	r1, r1, #24
    9178:	4301      	orrs	r1, r0
    917a:	0050      	lsls	r0, r2, #1
    917c:	1882      	adds	r2, r0, r2
    917e:	0092      	lsls	r2, r2, #2
    9180:	1889      	adds	r1, r1, r2
    9182:	3104      	adds	r1, #4
    9184:	2204      	movs	r2, #4
    9186:	0018      	movs	r0, r3
    9188:	4b02      	ldr	r3, [pc, #8]	; (9194 <LORAREG_GetAttr_DlFrequency+0x44>)
    918a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    918c:	2008      	movs	r0, #8
    918e:	e7e8      	b.n	9162 <LORAREG_GetAttr_DlFrequency+0x12>
    9190:	20002310 	.word	0x20002310
    9194:	00018655 	.word	0x00018655

00009198 <LORAREG_GetAttr_DutyCycleTimer>:
{
    9198:	b5f0      	push	{r4, r5, r6, r7, lr}
    919a:	46d6      	mov	lr, sl
    919c:	464f      	mov	r7, r9
    919e:	4646      	mov	r6, r8
    91a0:	b5c0      	push	{r6, r7, lr}
    91a2:	b084      	sub	sp, #16
    91a4:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    91a6:	780b      	ldrb	r3, [r1, #0]
    91a8:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    91aa:	232a      	movs	r3, #42	; 0x2a
    91ac:	4a5b      	ldr	r2, [pc, #364]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    91ae:	56d6      	ldrsb	r6, [r2, r3]
    91b0:	2e00      	cmp	r6, #0
    91b2:	dd66      	ble.n	9282 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    91b4:	0013      	movs	r3, r2
    91b6:	7910      	ldrb	r0, [r2, #4]
    91b8:	7952      	ldrb	r2, [r2, #5]
    91ba:	0212      	lsls	r2, r2, #8
    91bc:	4302      	orrs	r2, r0
    91be:	7998      	ldrb	r0, [r3, #6]
    91c0:	0400      	lsls	r0, r0, #16
    91c2:	4302      	orrs	r2, r0
    91c4:	79d8      	ldrb	r0, [r3, #7]
    91c6:	0600      	lsls	r0, r0, #24
    91c8:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    91ca:	7b1f      	ldrb	r7, [r3, #12]
    91cc:	7b5a      	ldrb	r2, [r3, #13]
    91ce:	0212      	lsls	r2, r2, #8
    91d0:	433a      	orrs	r2, r7
    91d2:	7b9f      	ldrb	r7, [r3, #14]
    91d4:	043f      	lsls	r7, r7, #16
    91d6:	433a      	orrs	r2, r7
    91d8:	7bdf      	ldrb	r7, [r3, #15]
    91da:	063f      	lsls	r7, r7, #24
    91dc:	4317      	orrs	r7, r2
    91de:	2500      	movs	r5, #0
    91e0:	2300      	movs	r3, #0
    91e2:	2201      	movs	r2, #1
    91e4:	4252      	negs	r2, r2
    91e6:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    91e8:	4a4c      	ldr	r2, [pc, #304]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    91ea:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    91ec:	4662      	mov	r2, ip
    91ee:	9201      	str	r2, [sp, #4]
    91f0:	e004      	b.n	91fc <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    91f2:	3301      	adds	r3, #1
    91f4:	b2db      	uxtb	r3, r3
    91f6:	001d      	movs	r5, r3
    91f8:	42b3      	cmp	r3, r6
    91fa:	da27      	bge.n	924c <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    91fc:	0059      	lsls	r1, r3, #1
    91fe:	1841      	adds	r1, r0, r1
    9200:	780a      	ldrb	r2, [r1, #0]
    9202:	2a00      	cmp	r2, #0
    9204:	d0f5      	beq.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    9206:	006a      	lsls	r2, r5, #1
    9208:	1952      	adds	r2, r2, r5
    920a:	0092      	lsls	r2, r2, #2
    920c:	4442      	add	r2, r8
    920e:	32ac      	adds	r2, #172	; 0xac
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    9210:	7815      	ldrb	r5, [r2, #0]
    9212:	006a      	lsls	r2, r5, #1
    9214:	1952      	adds	r2, r2, r5
    9216:	0092      	lsls	r2, r2, #2
    9218:	18ba      	adds	r2, r7, r2
    921a:	7a15      	ldrb	r5, [r2, #8]
    921c:	7a54      	ldrb	r4, [r2, #9]
    921e:	0224      	lsls	r4, r4, #8
    9220:	4325      	orrs	r5, r4
    9222:	7a94      	ldrb	r4, [r2, #10]
    9224:	0424      	lsls	r4, r4, #16
    9226:	4325      	orrs	r5, r4
    9228:	7ad2      	ldrb	r2, [r2, #11]
    922a:	0612      	lsls	r2, r2, #24
    922c:	432a      	orrs	r2, r5
    922e:	d0e0      	beq.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    9230:	454a      	cmp	r2, r9
    9232:	d8de      	bhi.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    9234:	784d      	ldrb	r5, [r1, #1]
    9236:	072d      	lsls	r5, r5, #28
    9238:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    923a:	45ac      	cmp	ip, r5
    923c:	dbd9      	blt.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    923e:	7849      	ldrb	r1, [r1, #1]
    9240:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    9242:	9c01      	ldr	r4, [sp, #4]
    9244:	428c      	cmp	r4, r1
    9246:	dcd4      	bgt.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    9248:	4691      	mov	r9, r2
    924a:	e7d2      	b.n	91f2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    924c:	464b      	mov	r3, r9
    924e:	3301      	adds	r3, #1
    9250:	d017      	beq.n	9282 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    9252:	4932      	ldr	r1, [pc, #200]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9254:	23dd      	movs	r3, #221	; 0xdd
    9256:	005b      	lsls	r3, r3, #1
    9258:	5ccb      	ldrb	r3, [r1, r3]
    925a:	22bc      	movs	r2, #188	; 0xbc
    925c:	32ff      	adds	r2, #255	; 0xff
    925e:	5c8a      	ldrb	r2, [r1, r2]
    9260:	0212      	lsls	r2, r2, #8
    9262:	431a      	orrs	r2, r3
    9264:	23de      	movs	r3, #222	; 0xde
    9266:	005b      	lsls	r3, r3, #1
    9268:	5ccb      	ldrb	r3, [r1, r3]
    926a:	041b      	lsls	r3, r3, #16
    926c:	431a      	orrs	r2, r3
    926e:	23be      	movs	r3, #190	; 0xbe
    9270:	33ff      	adds	r3, #255	; 0xff
    9272:	5ccb      	ldrb	r3, [r1, r3]
    9274:	061b      	lsls	r3, r3, #24
    9276:	4313      	orrs	r3, r2
    9278:	4599      	cmp	r9, r3
    927a:	d302      	bcc.n	9282 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    927c:	464b      	mov	r3, r9
    927e:	9303      	str	r3, [sp, #12]
    9280:	e013      	b.n	92aa <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    9282:	4926      	ldr	r1, [pc, #152]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9284:	23dd      	movs	r3, #221	; 0xdd
    9286:	005b      	lsls	r3, r3, #1
    9288:	5ccb      	ldrb	r3, [r1, r3]
    928a:	22bc      	movs	r2, #188	; 0xbc
    928c:	32ff      	adds	r2, #255	; 0xff
    928e:	5c8a      	ldrb	r2, [r1, r2]
    9290:	0212      	lsls	r2, r2, #8
    9292:	431a      	orrs	r2, r3
    9294:	23de      	movs	r3, #222	; 0xde
    9296:	005b      	lsls	r3, r3, #1
    9298:	5ccb      	ldrb	r3, [r1, r3]
    929a:	041b      	lsls	r3, r3, #16
    929c:	431a      	orrs	r2, r3
    929e:	23be      	movs	r3, #190	; 0xbe
    92a0:	33ff      	adds	r3, #255	; 0xff
    92a2:	5ccb      	ldrb	r3, [r1, r3]
    92a4:	061b      	lsls	r3, r3, #24
    92a6:	4313      	orrs	r3, r2
    92a8:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    92aa:	491c      	ldr	r1, [pc, #112]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    92ac:	7c0b      	ldrb	r3, [r1, #16]
    92ae:	7c4a      	ldrb	r2, [r1, #17]
    92b0:	0212      	lsls	r2, r2, #8
    92b2:	431a      	orrs	r2, r3
    92b4:	7c8b      	ldrb	r3, [r1, #18]
    92b6:	041b      	lsls	r3, r3, #16
    92b8:	431a      	orrs	r2, r3
    92ba:	7ccb      	ldrb	r3, [r1, #19]
    92bc:	061b      	lsls	r3, r3, #24
    92be:	4313      	orrs	r3, r2
    92c0:	7918      	ldrb	r0, [r3, #4]
    92c2:	4b17      	ldr	r3, [pc, #92]	; (9320 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    92c4:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    92c6:	9e03      	ldr	r6, [sp, #12]
    92c8:	2e00      	cmp	r6, #0
    92ca:	d01b      	beq.n	9304 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    92cc:	4913      	ldr	r1, [pc, #76]	; (931c <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    92ce:	7c0b      	ldrb	r3, [r1, #16]
    92d0:	7c4a      	ldrb	r2, [r1, #17]
    92d2:	0212      	lsls	r2, r2, #8
    92d4:	431a      	orrs	r2, r3
    92d6:	7c8b      	ldrb	r3, [r1, #18]
    92d8:	041b      	lsls	r3, r3, #16
    92da:	431a      	orrs	r2, r3
    92dc:	7ccb      	ldrb	r3, [r1, #19]
    92de:	061b      	lsls	r3, r3, #24
    92e0:	4313      	orrs	r3, r2
    92e2:	781d      	ldrb	r5, [r3, #0]
    92e4:	785a      	ldrb	r2, [r3, #1]
    92e6:	0212      	lsls	r2, r2, #8
    92e8:	432a      	orrs	r2, r5
    92ea:	789d      	ldrb	r5, [r3, #2]
    92ec:	042d      	lsls	r5, r5, #16
    92ee:	432a      	orrs	r2, r5
    92f0:	78dd      	ldrb	r5, [r3, #3]
    92f2:	062d      	lsls	r5, r5, #24
    92f4:	4315      	orrs	r5, r2
    92f6:	21fa      	movs	r1, #250	; 0xfa
    92f8:	0089      	lsls	r1, r1, #2
    92fa:	4b0a      	ldr	r3, [pc, #40]	; (9324 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    92fc:	4798      	blx	r3
    92fe:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    9300:	1b75      	subs	r5, r6, r5
    9302:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    9304:	2204      	movs	r2, #4
    9306:	a903      	add	r1, sp, #12
    9308:	9800      	ldr	r0, [sp, #0]
    930a:	4b07      	ldr	r3, [pc, #28]	; (9328 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    930c:	4798      	blx	r3
}
    930e:	2008      	movs	r0, #8
    9310:	b004      	add	sp, #16
    9312:	bc1c      	pop	{r2, r3, r4}
    9314:	4690      	mov	r8, r2
    9316:	4699      	mov	r9, r3
    9318:	46a2      	mov	sl, r4
    931a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    931c:	20002310 	.word	0x20002310
    9320:	0000d729 	.word	0x0000d729
    9324:	00014f51 	.word	0x00014f51
    9328:	00018655 	.word	0x00018655

0000932c <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    932c:	b500      	push	{lr}
    932e:	b083      	sub	sp, #12
    9330:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    9332:	784a      	ldrb	r2, [r1, #1]
    9334:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    9336:	429a      	cmp	r2, r3
    9338:	d925      	bls.n	9386 <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    933a:	2300      	movs	r3, #0
    933c:	466a      	mov	r2, sp
    933e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    9340:	4913      	ldr	r1, [pc, #76]	; (9390 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    9342:	7a0b      	ldrb	r3, [r1, #8]
    9344:	7a4a      	ldrb	r2, [r1, #9]
    9346:	0212      	lsls	r2, r2, #8
    9348:	4313      	orrs	r3, r2
    934a:	7a8a      	ldrb	r2, [r1, #10]
    934c:	0412      	lsls	r2, r2, #16
    934e:	431a      	orrs	r2, r3
    9350:	7acb      	ldrb	r3, [r1, #11]
    9352:	061b      	lsls	r3, r3, #24
    9354:	431a      	orrs	r2, r3
    9356:	2330      	movs	r3, #48	; 0x30
    9358:	5cc9      	ldrb	r1, [r1, r3]
    935a:	004b      	lsls	r3, r1, #1
    935c:	185b      	adds	r3, r3, r1
    935e:	009b      	lsls	r3, r3, #2
    9360:	189b      	adds	r3, r3, r2
    9362:	7919      	ldrb	r1, [r3, #4]
    9364:	795a      	ldrb	r2, [r3, #5]
    9366:	0212      	lsls	r2, r2, #8
    9368:	4311      	orrs	r1, r2
    936a:	799a      	ldrb	r2, [r3, #6]
    936c:	0412      	lsls	r2, r2, #16
    936e:	430a      	orrs	r2, r1
    9370:	79db      	ldrb	r3, [r3, #7]
    9372:	061b      	lsls	r3, r3, #24
    9374:	4313      	orrs	r3, r2
    9376:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    9378:	2208      	movs	r2, #8
    937a:	4669      	mov	r1, sp
    937c:	4b05      	ldr	r3, [pc, #20]	; (9394 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    937e:	4798      	blx	r3
}
    9380:	2008      	movs	r0, #8
    9382:	b003      	add	sp, #12
    9384:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    9386:	1a9b      	subs	r3, r3, r2
    9388:	466a      	mov	r2, sp
    938a:	7113      	strb	r3, [r2, #4]
    938c:	e7d8      	b.n	9340 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    938e:	46c0      	nop			; (mov r8, r8)
    9390:	20002310 	.word	0x20002310
    9394:	00018655 	.word	0x00018655

00009398 <LORAREG_GetAttr_DRangeChBandT2>:
{
    9398:	b5f0      	push	{r4, r5, r6, r7, lr}
    939a:	46c6      	mov	lr, r8
    939c:	b500      	push	{lr}
    939e:	b082      	sub	sp, #8
    93a0:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    93a2:	ad01      	add	r5, sp, #4
    93a4:	2204      	movs	r2, #4
    93a6:	0028      	movs	r0, r5
    93a8:	4b38      	ldr	r3, [pc, #224]	; (948c <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    93aa:	4798      	blx	r3
	switch (chMaskCntl)
    93ac:	782b      	ldrb	r3, [r5, #0]
    93ae:	2b00      	cmp	r3, #0
    93b0:	d017      	beq.n	93e2 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    93b2:	2b06      	cmp	r3, #6
    93b4:	d159      	bne.n	946a <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    93b6:	3324      	adds	r3, #36	; 0x24
    93b8:	4a35      	ldr	r2, [pc, #212]	; (9490 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    93ba:	56d7      	ldrsb	r7, [r2, r3]
    93bc:	2000      	movs	r0, #0
    93be:	2507      	movs	r5, #7
    93c0:	2f00      	cmp	r7, #0
    93c2:	dd54      	ble.n	946e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    93c4:	4a32      	ldr	r2, [pc, #200]	; (9490 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    93c6:	7916      	ldrb	r6, [r2, #4]
    93c8:	7953      	ldrb	r3, [r2, #5]
    93ca:	021b      	lsls	r3, r3, #8
    93cc:	4333      	orrs	r3, r6
    93ce:	7996      	ldrb	r6, [r2, #6]
    93d0:	0436      	lsls	r6, r6, #16
    93d2:	4333      	orrs	r3, r6
    93d4:	79d6      	ldrb	r6, [r2, #7]
    93d6:	0636      	lsls	r6, r6, #24
    93d8:	431e      	orrs	r6, r3
    93da:	2000      	movs	r0, #0
    93dc:	2507      	movs	r5, #7
    93de:	2200      	movs	r2, #0
    93e0:	e035      	b.n	944e <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    93e2:	232a      	movs	r3, #42	; 0x2a
    93e4:	4a2a      	ldr	r2, [pc, #168]	; (9490 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    93e6:	56d3      	ldrsb	r3, [r2, r3]
    93e8:	469c      	mov	ip, r3
    93ea:	2b00      	cmp	r3, #0
    93ec:	dd4a      	ble.n	9484 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    93ee:	ab01      	add	r3, sp, #4
    93f0:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    93f2:	7917      	ldrb	r7, [r2, #4]
    93f4:	7953      	ldrb	r3, [r2, #5]
    93f6:	021b      	lsls	r3, r3, #8
    93f8:	433b      	orrs	r3, r7
    93fa:	7997      	ldrb	r7, [r2, #6]
    93fc:	043f      	lsls	r7, r7, #16
    93fe:	433b      	orrs	r3, r7
    9400:	79d7      	ldrb	r7, [r2, #7]
    9402:	063f      	lsls	r7, r7, #24
    9404:	431f      	orrs	r7, r3
    9406:	2000      	movs	r0, #0
    9408:	2507      	movs	r5, #7
    940a:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    940c:	2401      	movs	r4, #1
    940e:	e00b      	b.n	9428 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    9410:	784b      	ldrb	r3, [r1, #1]
    9412:	091b      	lsrs	r3, r3, #4
    9414:	4283      	cmp	r3, r0
    9416:	dd02      	ble.n	941e <LORAREG_GetAttr_DRangeChBandT2+0x86>
    9418:	4234      	tst	r4, r6
    941a:	d000      	beq.n	941e <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    941c:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    941e:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    9420:	3201      	adds	r2, #1
    9422:	b2d2      	uxtb	r2, r2
    9424:	4562      	cmp	r2, ip
    9426:	da22      	bge.n	946e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    9428:	0051      	lsls	r1, r2, #1
    942a:	1879      	adds	r1, r7, r1
    942c:	784b      	ldrb	r3, [r1, #1]
    942e:	071b      	lsls	r3, r3, #28
    9430:	0f1b      	lsrs	r3, r3, #28
    9432:	42ab      	cmp	r3, r5
    9434:	daec      	bge.n	9410 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    9436:	4234      	tst	r4, r6
    9438:	d0f1      	beq.n	941e <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    943a:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    943c:	784b      	ldrb	r3, [r1, #1]
    943e:	091b      	lsrs	r3, r3, #4
    9440:	4298      	cmp	r0, r3
    9442:	dbeb      	blt.n	941c <LORAREG_GetAttr_DRangeChBandT2+0x84>
    9444:	e7eb      	b.n	941e <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    9446:	3201      	adds	r2, #1
    9448:	b2d2      	uxtb	r2, r2
    944a:	42ba      	cmp	r2, r7
    944c:	da0f      	bge.n	946e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    944e:	0051      	lsls	r1, r2, #1
    9450:	1871      	adds	r1, r6, r1
    9452:	784b      	ldrb	r3, [r1, #1]
    9454:	071b      	lsls	r3, r3, #28
    9456:	0f1b      	lsrs	r3, r3, #28
    9458:	42ab      	cmp	r3, r5
    945a:	da00      	bge.n	945e <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    945c:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    945e:	784b      	ldrb	r3, [r1, #1]
    9460:	091b      	lsrs	r3, r3, #4
    9462:	4283      	cmp	r3, r0
    9464:	ddef      	ble.n	9446 <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    9466:	0018      	movs	r0, r3
    9468:	e7ed      	b.n	9446 <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    946a:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    946c:	25ff      	movs	r5, #255	; 0xff
    946e:	0100      	lsls	r0, r0, #4
    9470:	230f      	movs	r3, #15
    9472:	401d      	ands	r5, r3
    9474:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    9476:	4643      	mov	r3, r8
    9478:	7018      	strb	r0, [r3, #0]
}
    947a:	2008      	movs	r0, #8
    947c:	b002      	add	sp, #8
    947e:	bc04      	pop	{r2}
    9480:	4690      	mov	r8, r2
    9482:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    9484:	2000      	movs	r0, #0
    9486:	2507      	movs	r5, #7
    9488:	e7f1      	b.n	946e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    948a:	46c0      	nop			; (mov r8, r8)
    948c:	00018655 	.word	0x00018655
    9490:	20002310 	.word	0x20002310

00009494 <LORAREG_GetAttr_FreqT2>:
{
    9494:	b510      	push	{r4, lr}
    9496:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    9498:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    949a:	222a      	movs	r2, #42	; 0x2a
    949c:	490d      	ldr	r1, [pc, #52]	; (94d4 <LORAREG_GetAttr_FreqT2+0x40>)
    949e:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    94a0:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    94a2:	4293      	cmp	r3, r2
    94a4:	dd00      	ble.n	94a8 <LORAREG_GetAttr_FreqT2+0x14>
}
    94a6:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    94a8:	0008      	movs	r0, r1
    94aa:	7a09      	ldrb	r1, [r1, #8]
    94ac:	7a42      	ldrb	r2, [r0, #9]
    94ae:	0212      	lsls	r2, r2, #8
    94b0:	430a      	orrs	r2, r1
    94b2:	7a81      	ldrb	r1, [r0, #10]
    94b4:	0409      	lsls	r1, r1, #16
    94b6:	430a      	orrs	r2, r1
    94b8:	7ac1      	ldrb	r1, [r0, #11]
    94ba:	0609      	lsls	r1, r1, #24
    94bc:	4311      	orrs	r1, r2
    94be:	005a      	lsls	r2, r3, #1
    94c0:	18d3      	adds	r3, r2, r3
    94c2:	009b      	lsls	r3, r3, #2
    94c4:	18c9      	adds	r1, r1, r3
    94c6:	2204      	movs	r2, #4
    94c8:	0020      	movs	r0, r4
    94ca:	4b03      	ldr	r3, [pc, #12]	; (94d8 <LORAREG_GetAttr_FreqT2+0x44>)
    94cc:	4798      	blx	r3
	return result;
    94ce:	2008      	movs	r0, #8
    94d0:	e7e9      	b.n	94a6 <LORAREG_GetAttr_FreqT2+0x12>
    94d2:	46c0      	nop			; (mov r8, r8)
    94d4:	20002310 	.word	0x20002310
    94d8:	00018655 	.word	0x00018655

000094dc <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    94dc:	b510      	push	{r4, lr}
    94de:	b082      	sub	sp, #8
    94e0:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    94e2:	232f      	movs	r3, #47	; 0x2f
    94e4:	4a37      	ldr	r2, [pc, #220]	; (95c4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    94e6:	5cd2      	ldrb	r2, [r2, r3]
    94e8:	4b37      	ldr	r3, [pc, #220]	; (95c8 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    94ea:	4113      	asrs	r3, r2
    94ec:	07db      	lsls	r3, r3, #31
    94ee:	d502      	bpl.n	94f6 <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    94f0:	780b      	ldrb	r3, [r1, #0]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d116      	bne.n	9524 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    94f6:	23c4      	movs	r3, #196	; 0xc4
    94f8:	33ff      	adds	r3, #255	; 0xff
    94fa:	4a32      	ldr	r2, [pc, #200]	; (95c4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    94fc:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    94fe:	3bc2      	subs	r3, #194	; 0xc2
    9500:	3bff      	subs	r3, #255	; 0xff
    9502:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    9504:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    9506:	2b05      	cmp	r3, #5
    9508:	d92c      	bls.n	9564 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    950a:	2205      	movs	r2, #5
    950c:	1ad3      	subs	r3, r2, r3
    950e:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    9510:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    9512:	429a      	cmp	r2, r3
    9514:	db31      	blt.n	957a <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    9516:	1ad3      	subs	r3, r2, r3
    9518:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    951a:	42a3      	cmp	r3, r4
    951c:	d224      	bcs.n	9568 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    951e:	466b      	mov	r3, sp
    9520:	711c      	strb	r4, [r3, #4]
    9522:	e02c      	b.n	957e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    9524:	2302      	movs	r3, #2
    9526:	466a      	mov	r2, sp
    9528:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    952a:	4926      	ldr	r1, [pc, #152]	; (95c4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    952c:	7a0b      	ldrb	r3, [r1, #8]
    952e:	7a4a      	ldrb	r2, [r1, #9]
    9530:	0212      	lsls	r2, r2, #8
    9532:	4313      	orrs	r3, r2
    9534:	7a8a      	ldrb	r2, [r1, #10]
    9536:	0412      	lsls	r2, r2, #16
    9538:	431a      	orrs	r2, r3
    953a:	7acb      	ldrb	r3, [r1, #11]
    953c:	061b      	lsls	r3, r3, #24
    953e:	431a      	orrs	r2, r3
    9540:	2330      	movs	r3, #48	; 0x30
    9542:	5cc9      	ldrb	r1, [r1, r3]
    9544:	004b      	lsls	r3, r1, #1
    9546:	185b      	adds	r3, r3, r1
    9548:	009b      	lsls	r3, r3, #2
    954a:	189b      	adds	r3, r3, r2
    954c:	7919      	ldrb	r1, [r3, #4]
    954e:	795a      	ldrb	r2, [r3, #5]
    9550:	0212      	lsls	r2, r2, #8
    9552:	4311      	orrs	r1, r2
    9554:	799a      	ldrb	r2, [r3, #6]
    9556:	0412      	lsls	r2, r2, #16
    9558:	430a      	orrs	r2, r1
    955a:	79db      	ldrb	r3, [r3, #7]
    955c:	061b      	lsls	r3, r3, #24
    955e:	4313      	orrs	r3, r2
    9560:	9300      	str	r3, [sp, #0]
    9562:	e028      	b.n	95b6 <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    9564:	b25b      	sxtb	r3, r3
    9566:	e7d3      	b.n	9510 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    9568:	2b05      	cmp	r3, #5
    956a:	d802      	bhi.n	9572 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    956c:	466a      	mov	r2, sp
    956e:	7113      	strb	r3, [r2, #4]
    9570:	e005      	b.n	957e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    9572:	2305      	movs	r3, #5
    9574:	466a      	mov	r2, sp
    9576:	7113      	strb	r3, [r2, #4]
    9578:	e001      	b.n	957e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    957a:	466b      	mov	r3, sp
    957c:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    957e:	4911      	ldr	r1, [pc, #68]	; (95c4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    9580:	7a0b      	ldrb	r3, [r1, #8]
    9582:	7a4a      	ldrb	r2, [r1, #9]
    9584:	0212      	lsls	r2, r2, #8
    9586:	4313      	orrs	r3, r2
    9588:	7a8a      	ldrb	r2, [r1, #10]
    958a:	0412      	lsls	r2, r2, #16
    958c:	431a      	orrs	r2, r3
    958e:	7acb      	ldrb	r3, [r1, #11]
    9590:	061b      	lsls	r3, r3, #24
    9592:	431a      	orrs	r2, r3
    9594:	2330      	movs	r3, #48	; 0x30
    9596:	5cc9      	ldrb	r1, [r1, r3]
    9598:	004b      	lsls	r3, r1, #1
    959a:	185b      	adds	r3, r3, r1
    959c:	009b      	lsls	r3, r3, #2
    959e:	189b      	adds	r3, r3, r2
    95a0:	7919      	ldrb	r1, [r3, #4]
    95a2:	795a      	ldrb	r2, [r3, #5]
    95a4:	0212      	lsls	r2, r2, #8
    95a6:	4311      	orrs	r1, r2
    95a8:	799a      	ldrb	r2, [r3, #6]
    95aa:	0412      	lsls	r2, r2, #16
    95ac:	430a      	orrs	r2, r1
    95ae:	79db      	ldrb	r3, [r3, #7]
    95b0:	061b      	lsls	r3, r3, #24
    95b2:	4313      	orrs	r3, r2
    95b4:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    95b6:	2208      	movs	r2, #8
    95b8:	4669      	mov	r1, sp
    95ba:	4b04      	ldr	r3, [pc, #16]	; (95cc <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    95bc:	4798      	blx	r3
}
    95be:	2008      	movs	r0, #8
    95c0:	b002      	add	sp, #8
    95c2:	bd10      	pop	{r4, pc}
    95c4:	20002310 	.word	0x20002310
    95c8:	00007fe0 	.word	0x00007fe0
    95cc:	00018655 	.word	0x00018655

000095d0 <LORAREG_GetAttr_FreqT3>:
{
    95d0:	b510      	push	{r4, lr}
    95d2:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    95d4:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    95d6:	222a      	movs	r2, #42	; 0x2a
    95d8:	490d      	ldr	r1, [pc, #52]	; (9610 <LORAREG_GetAttr_FreqT3+0x40>)
    95da:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    95dc:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    95de:	4293      	cmp	r3, r2
    95e0:	dd00      	ble.n	95e4 <LORAREG_GetAttr_FreqT3+0x14>
}
    95e2:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    95e4:	0008      	movs	r0, r1
    95e6:	7a09      	ldrb	r1, [r1, #8]
    95e8:	7a42      	ldrb	r2, [r0, #9]
    95ea:	0212      	lsls	r2, r2, #8
    95ec:	430a      	orrs	r2, r1
    95ee:	7a81      	ldrb	r1, [r0, #10]
    95f0:	0409      	lsls	r1, r1, #16
    95f2:	430a      	orrs	r2, r1
    95f4:	7ac1      	ldrb	r1, [r0, #11]
    95f6:	0609      	lsls	r1, r1, #24
    95f8:	4311      	orrs	r1, r2
    95fa:	005a      	lsls	r2, r3, #1
    95fc:	18d3      	adds	r3, r2, r3
    95fe:	009b      	lsls	r3, r3, #2
    9600:	18c9      	adds	r1, r1, r3
    9602:	2204      	movs	r2, #4
    9604:	0020      	movs	r0, r4
    9606:	4b03      	ldr	r3, [pc, #12]	; (9614 <LORAREG_GetAttr_FreqT3+0x44>)
    9608:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    960a:	2008      	movs	r0, #8
    960c:	e7e9      	b.n	95e2 <LORAREG_GetAttr_FreqT3+0x12>
    960e:	46c0      	nop			; (mov r8, r8)
    9610:	20002310 	.word	0x20002310
    9614:	00018655 	.word	0x00018655

00009618 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    9618:	b500      	push	{lr}
    961a:	b083      	sub	sp, #12
    961c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    961e:	784b      	ldrb	r3, [r1, #1]
    9620:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    9622:	2b05      	cmp	r3, #5
    9624:	d90b      	bls.n	963e <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    9626:	2105      	movs	r1, #5
    9628:	1acb      	subs	r3, r1, r3
    962a:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    962c:	429a      	cmp	r2, r3
    962e:	db0c      	blt.n	964a <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    9630:	1ad3      	subs	r3, r2, r3
    9632:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    9634:	2b05      	cmp	r3, #5
    9636:	d804      	bhi.n	9642 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    9638:	466a      	mov	r2, sp
    963a:	7113      	strb	r3, [r2, #4]
    963c:	e008      	b.n	9650 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    963e:	b25b      	sxtb	r3, r3
    9640:	e7f4      	b.n	962c <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    9642:	2305      	movs	r3, #5
    9644:	466a      	mov	r2, sp
    9646:	7113      	strb	r3, [r2, #4]
    9648:	e002      	b.n	9650 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    964a:	2300      	movs	r3, #0
    964c:	466a      	mov	r2, sp
    964e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    9650:	4911      	ldr	r1, [pc, #68]	; (9698 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    9652:	7a0b      	ldrb	r3, [r1, #8]
    9654:	7a4a      	ldrb	r2, [r1, #9]
    9656:	0212      	lsls	r2, r2, #8
    9658:	4313      	orrs	r3, r2
    965a:	7a8a      	ldrb	r2, [r1, #10]
    965c:	0412      	lsls	r2, r2, #16
    965e:	431a      	orrs	r2, r3
    9660:	7acb      	ldrb	r3, [r1, #11]
    9662:	061b      	lsls	r3, r3, #24
    9664:	431a      	orrs	r2, r3
    9666:	2330      	movs	r3, #48	; 0x30
    9668:	5cc9      	ldrb	r1, [r1, r3]
    966a:	004b      	lsls	r3, r1, #1
    966c:	185b      	adds	r3, r3, r1
    966e:	009b      	lsls	r3, r3, #2
    9670:	189b      	adds	r3, r3, r2
    9672:	7919      	ldrb	r1, [r3, #4]
    9674:	795a      	ldrb	r2, [r3, #5]
    9676:	0212      	lsls	r2, r2, #8
    9678:	4311      	orrs	r1, r2
    967a:	799a      	ldrb	r2, [r3, #6]
    967c:	0412      	lsls	r2, r2, #16
    967e:	430a      	orrs	r2, r1
    9680:	79db      	ldrb	r3, [r3, #7]
    9682:	061b      	lsls	r3, r3, #24
    9684:	4313      	orrs	r3, r2
    9686:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    9688:	2208      	movs	r2, #8
    968a:	4669      	mov	r1, sp
    968c:	4b03      	ldr	r3, [pc, #12]	; (969c <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    968e:	4798      	blx	r3
}
    9690:	2008      	movs	r0, #8
    9692:	b003      	add	sp, #12
    9694:	bd00      	pop	{pc}
    9696:	46c0      	nop			; (mov r8, r8)
    9698:	20002310 	.word	0x20002310
    969c:	00018655 	.word	0x00018655

000096a0 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    96a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a2:	46de      	mov	lr, fp
    96a4:	4657      	mov	r7, sl
    96a6:	464e      	mov	r6, r9
    96a8:	4645      	mov	r5, r8
    96aa:	b5e0      	push	{r5, r6, r7, lr}
    96ac:	b085      	sub	sp, #20
    96ae:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    96b0:	2301      	movs	r3, #1
    96b2:	425b      	negs	r3, r3
    96b4:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    96b6:	780b      	ldrb	r3, [r1, #0]
    96b8:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    96ba:	232a      	movs	r3, #42	; 0x2a
    96bc:	4a2a      	ldr	r2, [pc, #168]	; (9768 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    96be:	56d7      	ldrsb	r7, [r2, r3]
    96c0:	2f00      	cmp	r7, #0
    96c2:	dd40      	ble.n	9746 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    96c4:	7916      	ldrb	r6, [r2, #4]
    96c6:	7953      	ldrb	r3, [r2, #5]
    96c8:	021b      	lsls	r3, r3, #8
    96ca:	4333      	orrs	r3, r6
    96cc:	7996      	ldrb	r6, [r2, #6]
    96ce:	0436      	lsls	r6, r6, #16
    96d0:	4333      	orrs	r3, r6
    96d2:	79d6      	ldrb	r6, [r2, #7]
    96d4:	0636      	lsls	r6, r6, #24
    96d6:	431e      	orrs	r6, r3
    96d8:	2300      	movs	r3, #0
    96da:	469a      	mov	sl, r3
    96dc:	3b01      	subs	r3, #1
    96de:	4698      	mov	r8, r3
    96e0:	2300      	movs	r3, #0
    96e2:	2100      	movs	r1, #0
    96e4:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    96e6:	464a      	mov	r2, r9
    96e8:	9201      	str	r2, [sp, #4]
    96ea:	46c3      	mov	fp, r8
    96ec:	e004      	b.n	96f8 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    96ee:	3101      	adds	r1, #1
    96f0:	b2c9      	uxtb	r1, r1
    96f2:	000b      	movs	r3, r1
    96f4:	42b9      	cmp	r1, r7
    96f6:	da23      	bge.n	9740 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    96f8:	004a      	lsls	r2, r1, #1
    96fa:	18b2      	adds	r2, r6, r2
    96fc:	7814      	ldrb	r4, [r2, #0]
    96fe:	2c00      	cmp	r4, #0
    9700:	d0f5      	beq.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    9702:	3358      	adds	r3, #88	; 0x58
    9704:	009b      	lsls	r3, r3, #2
    9706:	4463      	add	r3, ip
    9708:	7a58      	ldrb	r0, [r3, #9]
    970a:	4680      	mov	r8, r0
    970c:	7a98      	ldrb	r0, [r3, #10]
    970e:	0200      	lsls	r0, r0, #8
    9710:	4645      	mov	r5, r8
    9712:	4305      	orrs	r5, r0
    9714:	7ad8      	ldrb	r0, [r3, #11]
    9716:	0400      	lsls	r0, r0, #16
    9718:	4328      	orrs	r0, r5
    971a:	7b1b      	ldrb	r3, [r3, #12]
    971c:	061b      	lsls	r3, r3, #24
    971e:	4303      	orrs	r3, r0
    9720:	d0e5      	beq.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    9722:	459b      	cmp	fp, r3
    9724:	d3e3      	bcc.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    9726:	7850      	ldrb	r0, [r2, #1]
    9728:	0700      	lsls	r0, r0, #28
    972a:	0f00      	lsrs	r0, r0, #28
    972c:	4581      	cmp	r9, r0
    972e:	dbde      	blt.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    9730:	7852      	ldrb	r2, [r2, #1]
    9732:	0912      	lsrs	r2, r2, #4
    9734:	9801      	ldr	r0, [sp, #4]
    9736:	4290      	cmp	r0, r2
    9738:	dcd9      	bgt.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    973a:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    973c:	469b      	mov	fp, r3
    973e:	e7d6      	b.n	96ee <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    9740:	4653      	mov	r3, sl
    9742:	2b00      	cmp	r3, #0
    9744:	d10c      	bne.n	9760 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    9746:	2204      	movs	r2, #4
    9748:	a903      	add	r1, sp, #12
    974a:	9800      	ldr	r0, [sp, #0]
    974c:	4b07      	ldr	r3, [pc, #28]	; (976c <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    974e:	4798      	blx	r3
}
    9750:	2008      	movs	r0, #8
    9752:	b005      	add	sp, #20
    9754:	bc3c      	pop	{r2, r3, r4, r5}
    9756:	4690      	mov	r8, r2
    9758:	4699      	mov	r9, r3
    975a:	46a2      	mov	sl, r4
    975c:	46ab      	mov	fp, r5
    975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9760:	465b      	mov	r3, fp
    9762:	9303      	str	r3, [sp, #12]
    9764:	e7ef      	b.n	9746 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	20002310 	.word	0x20002310
    976c:	00018655 	.word	0x00018655

00009770 <ValidateTxFreqT2>:
{
    9770:	b500      	push	{lr}
    9772:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    9774:	2208      	movs	r2, #8
    9776:	4668      	mov	r0, sp
    9778:	4b04      	ldr	r3, [pc, #16]	; (978c <ValidateTxFreqT2+0x1c>)
    977a:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    977c:	4b04      	ldr	r3, [pc, #16]	; (9790 <ValidateTxFreqT2+0x20>)
    977e:	685b      	ldr	r3, [r3, #4]
    9780:	4669      	mov	r1, sp
    9782:	2001      	movs	r0, #1
    9784:	4798      	blx	r3
}
    9786:	b003      	add	sp, #12
    9788:	bd00      	pop	{pc}
    978a:	46c0      	nop			; (mov r8, r8)
    978c:	00018655 	.word	0x00018655
    9790:	20000cf4 	.word	0x20000cf4

00009794 <ValidateFreqIN>:
{
    9794:	b500      	push	{lr}
    9796:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    9798:	2204      	movs	r2, #4
    979a:	a801      	add	r0, sp, #4
    979c:	4b06      	ldr	r3, [pc, #24]	; (97b8 <ValidateFreqIN+0x24>)
    979e:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    97a0:	9b01      	ldr	r3, [sp, #4]
    97a2:	4a06      	ldr	r2, [pc, #24]	; (97bc <ValidateFreqIN+0x28>)
    97a4:	4694      	mov	ip, r2
    97a6:	4463      	add	r3, ip
    97a8:	4a05      	ldr	r2, [pc, #20]	; (97c0 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    97aa:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    97ac:	4293      	cmp	r3, r2
    97ae:	d900      	bls.n	97b2 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    97b0:	3002      	adds	r0, #2
}
    97b2:	b003      	add	sp, #12
    97b4:	bd00      	pop	{pc}
    97b6:	46c0      	nop			; (mov r8, r8)
    97b8:	00018655 	.word	0x00018655
    97bc:	cc7125c0 	.word	0xcc7125c0
    97c0:	001e8480 	.word	0x001e8480

000097c4 <ValidateFreqJP>:
{
    97c4:	b500      	push	{lr}
    97c6:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    97c8:	2204      	movs	r2, #4
    97ca:	a801      	add	r0, sp, #4
    97cc:	4b06      	ldr	r3, [pc, #24]	; (97e8 <ValidateFreqJP+0x24>)
    97ce:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    97d0:	9b01      	ldr	r3, [sp, #4]
    97d2:	4a06      	ldr	r2, [pc, #24]	; (97ec <ValidateFreqJP+0x28>)
    97d4:	4694      	mov	ip, r2
    97d6:	4463      	add	r3, ip
    97d8:	4a05      	ldr	r2, [pc, #20]	; (97f0 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    97da:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    97dc:	4293      	cmp	r3, r2
    97de:	d900      	bls.n	97e2 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    97e0:	3002      	adds	r0, #2
}
    97e2:	b003      	add	sp, #12
    97e4:	bd00      	pop	{pc}
    97e6:	46c0      	nop			; (mov r8, r8)
    97e8:	00018655 	.word	0x00018655
    97ec:	c929ea00 	.word	0xc929ea00
    97f0:	007a1200 	.word	0x007a1200

000097f4 <ValidateFreqKR>:
{
    97f4:	b500      	push	{lr}
    97f6:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    97f8:	2204      	movs	r2, #4
    97fa:	a801      	add	r0, sp, #4
    97fc:	4b0a      	ldr	r3, [pc, #40]	; (9828 <ValidateFreqKR+0x34>)
    97fe:	4798      	blx	r3
		if(freq == freqNew)
    9800:	9a01      	ldr	r2, [sp, #4]
    9802:	4b0a      	ldr	r3, [pc, #40]	; (982c <ValidateFreqKR+0x38>)
    9804:	429a      	cmp	r2, r3
    9806:	d00b      	beq.n	9820 <ValidateFreqKR+0x2c>
    9808:	4b09      	ldr	r3, [pc, #36]	; (9830 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    980a:	490a      	ldr	r1, [pc, #40]	; (9834 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    980c:	429a      	cmp	r2, r3
    980e:	d009      	beq.n	9824 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    9810:	4809      	ldr	r0, [pc, #36]	; (9838 <ValidateFreqKR+0x44>)
    9812:	4684      	mov	ip, r0
    9814:	4463      	add	r3, ip
    9816:	428b      	cmp	r3, r1
    9818:	d1f8      	bne.n	980c <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    981a:	200a      	movs	r0, #10
}
    981c:	b003      	add	sp, #12
    981e:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    9820:	2008      	movs	r0, #8
    9822:	e7fb      	b.n	981c <ValidateFreqKR+0x28>
    9824:	2008      	movs	r0, #8
    9826:	e7f9      	b.n	981c <ValidateFreqKR+0x28>
    9828:	00018655 	.word	0x00018655
    982c:	36e3d1a0 	.word	0x36e3d1a0
    9830:	36e6dee0 	.word	0x36e6dee0
    9834:	370b7de0 	.word	0x370b7de0
    9838:	00030d40 	.word	0x00030d40

0000983c <setNewChannelsT1>:
{
    983c:	b5f0      	push	{r4, r5, r6, r7, lr}
    983e:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    9840:	ac01      	add	r4, sp, #4
    9842:	2204      	movs	r2, #4
    9844:	0020      	movs	r0, r4
    9846:	4b1f      	ldr	r3, [pc, #124]	; (98c4 <setNewChannelsT1+0x88>)
    9848:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    984a:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    984c:	78a6      	ldrb	r6, [r4, #2]
    984e:	466b      	mov	r3, sp
    9850:	1cd9      	adds	r1, r3, #3
    9852:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    9854:	201b      	movs	r0, #27
    9856:	4b1c      	ldr	r3, [pc, #112]	; (98c8 <setNewChannelsT1+0x8c>)
    9858:	4798      	blx	r3
    985a:	0005      	movs	r5, r0
    985c:	2808      	cmp	r0, #8
    985e:	d003      	beq.n	9868 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    9860:	250a      	movs	r5, #10
}
    9862:	0028      	movs	r0, r5
    9864:	b003      	add	sp, #12
    9866:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    9868:	2e06      	cmp	r6, #6
    986a:	d01c      	beq.n	98a6 <setNewChannelsT1+0x6a>
    986c:	d80a      	bhi.n	9884 <setNewChannelsT1+0x48>
    986e:	2e04      	cmp	r6, #4
    9870:	d8f7      	bhi.n	9862 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    9872:	0136      	lsls	r6, r6, #4
    9874:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    9876:	0001      	movs	r1, r0
    9878:	310f      	adds	r1, #15
    987a:	b2c9      	uxtb	r1, r1
    987c:	003a      	movs	r2, r7
    987e:	4b13      	ldr	r3, [pc, #76]	; (98cc <setNewChannelsT1+0x90>)
    9880:	4798      	blx	r3
				break;
    9882:	e7ee      	b.n	9862 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    9884:	2400      	movs	r4, #0
    9886:	2e07      	cmp	r6, #7
    9888:	d1eb      	bne.n	9862 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    988a:	4e11      	ldr	r6, [pc, #68]	; (98d0 <setNewChannelsT1+0x94>)
    988c:	2100      	movs	r1, #0
    988e:	0020      	movs	r0, r4
    9890:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    9892:	3401      	adds	r4, #1
    9894:	b2e4      	uxtb	r4, r4
    9896:	2c3f      	cmp	r4, #63	; 0x3f
    9898:	d1f8      	bne.n	988c <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    989a:	003a      	movs	r2, r7
    989c:	2147      	movs	r1, #71	; 0x47
    989e:	2040      	movs	r0, #64	; 0x40
    98a0:	4b0a      	ldr	r3, [pc, #40]	; (98cc <setNewChannelsT1+0x90>)
    98a2:	4798      	blx	r3
				break;
    98a4:	e7dd      	b.n	9862 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    98a6:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    98a8:	4e09      	ldr	r6, [pc, #36]	; (98d0 <setNewChannelsT1+0x94>)
    98aa:	2101      	movs	r1, #1
    98ac:	0020      	movs	r0, r4
    98ae:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    98b0:	3401      	adds	r4, #1
    98b2:	b2e4      	uxtb	r4, r4
    98b4:	2c3f      	cmp	r4, #63	; 0x3f
    98b6:	d1f8      	bne.n	98aa <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    98b8:	003a      	movs	r2, r7
    98ba:	2147      	movs	r1, #71	; 0x47
    98bc:	2040      	movs	r0, #64	; 0x40
    98be:	4b03      	ldr	r3, [pc, #12]	; (98cc <setNewChannelsT1+0x90>)
    98c0:	4798      	blx	r3
			    break;
    98c2:	e7ce      	b.n	9862 <setNewChannelsT1+0x26>
    98c4:	00018655 	.word	0x00018655
    98c8:	0000816d 	.word	0x0000816d
    98cc:	00008ae5 	.word	0x00008ae5
    98d0:	00008a81 	.word	0x00008a81

000098d4 <setDlFrequency>:
{
    98d4:	b530      	push	{r4, r5, lr}
    98d6:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    98d8:	ac02      	add	r4, sp, #8
    98da:	2208      	movs	r2, #8
    98dc:	0020      	movs	r0, r4
    98de:	4b1f      	ldr	r3, [pc, #124]	; (995c <setDlFrequency+0x88>)
    98e0:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    98e2:	ab01      	add	r3, sp, #4
    98e4:	7922      	ldrb	r2, [r4, #4]
    98e6:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    98e8:	2201      	movs	r2, #1
    98ea:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    98ec:	4b1c      	ldr	r3, [pc, #112]	; (9960 <setDlFrequency+0x8c>)
    98ee:	685b      	ldr	r3, [r3, #4]
    98f0:	0021      	movs	r1, r4
    98f2:	2001      	movs	r0, #1
    98f4:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    98f6:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    98f8:	2808      	cmp	r0, #8
    98fa:	d002      	beq.n	9902 <setDlFrequency+0x2e>
}
    98fc:	0020      	movs	r0, r4
    98fe:	b005      	add	sp, #20
    9900:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    9902:	a901      	add	r1, sp, #4
    9904:	300d      	adds	r0, #13
    9906:	4b17      	ldr	r3, [pc, #92]	; (9964 <setDlFrequency+0x90>)
    9908:	4798      	blx	r3
    990a:	0004      	movs	r4, r0
    990c:	2808      	cmp	r0, #8
    990e:	d001      	beq.n	9914 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    9910:	240a      	movs	r4, #10
    9912:	e7f3      	b.n	98fc <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    9914:	4a14      	ldr	r2, [pc, #80]	; (9968 <setDlFrequency+0x94>)
    9916:	7a13      	ldrb	r3, [r2, #8]
    9918:	7a50      	ldrb	r0, [r2, #9]
    991a:	0200      	lsls	r0, r0, #8
    991c:	4303      	orrs	r3, r0
    991e:	7a90      	ldrb	r0, [r2, #10]
    9920:	0400      	lsls	r0, r0, #16
    9922:	4318      	orrs	r0, r3
    9924:	7ad3      	ldrb	r3, [r2, #11]
    9926:	061b      	lsls	r3, r3, #24
    9928:	4318      	orrs	r0, r3
    992a:	a902      	add	r1, sp, #8
    992c:	790d      	ldrb	r5, [r1, #4]
    992e:	006b      	lsls	r3, r5, #1
    9930:	195b      	adds	r3, r3, r5
    9932:	009b      	lsls	r3, r3, #2
    9934:	181b      	adds	r3, r3, r0
    9936:	7808      	ldrb	r0, [r1, #0]
    9938:	7118      	strb	r0, [r3, #4]
    993a:	7848      	ldrb	r0, [r1, #1]
    993c:	7158      	strb	r0, [r3, #5]
    993e:	7888      	ldrb	r0, [r1, #2]
    9940:	7198      	strb	r0, [r3, #6]
    9942:	78c9      	ldrb	r1, [r1, #3]
    9944:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9946:	4b09      	ldr	r3, [pc, #36]	; (996c <setDlFrequency+0x98>)
    9948:	5cd3      	ldrb	r3, [r2, r3]
    994a:	4909      	ldr	r1, [pc, #36]	; (9970 <setDlFrequency+0x9c>)
    994c:	5c50      	ldrb	r0, [r2, r1]
    994e:	0200      	lsls	r0, r0, #8
    9950:	4318      	orrs	r0, r3
    9952:	b2c1      	uxtb	r1, r0
    9954:	0a00      	lsrs	r0, r0, #8
    9956:	4b07      	ldr	r3, [pc, #28]	; (9974 <setDlFrequency+0xa0>)
    9958:	4798      	blx	r3
    995a:	e7cf      	b.n	98fc <setDlFrequency+0x28>
    995c:	00018655 	.word	0x00018655
    9960:	20000cf4 	.word	0x20000cf4
    9964:	00008065 	.word	0x00008065
    9968:	20002310 	.word	0x20002310
    996c:	00000211 	.word	0x00000211
    9970:	00000212 	.word	0x00000212
    9974:	0000c84d 	.word	0x0000c84d

00009978 <setFrequency>:
{
    9978:	b570      	push	{r4, r5, r6, lr}
    997a:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    997c:	ac02      	add	r4, sp, #8
    997e:	2208      	movs	r2, #8
    9980:	0020      	movs	r0, r4
    9982:	4b3e      	ldr	r3, [pc, #248]	; (9a7c <setFrequency+0x104>)
    9984:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    9986:	ab01      	add	r3, sp, #4
    9988:	7922      	ldrb	r2, [r4, #4]
    998a:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    998c:	2200      	movs	r2, #0
    998e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    9990:	4b3b      	ldr	r3, [pc, #236]	; (9a80 <setFrequency+0x108>)
    9992:	685b      	ldr	r3, [r3, #4]
    9994:	0021      	movs	r1, r4
    9996:	2001      	movs	r0, #1
    9998:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    999a:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    999c:	2808      	cmp	r0, #8
    999e:	d002      	beq.n	99a6 <setFrequency+0x2e>
}
    99a0:	0020      	movs	r0, r4
    99a2:	b004      	add	sp, #16
    99a4:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    99a6:	a901      	add	r1, sp, #4
    99a8:	300d      	adds	r0, #13
    99aa:	4b36      	ldr	r3, [pc, #216]	; (9a84 <setFrequency+0x10c>)
    99ac:	4798      	blx	r3
    99ae:	0004      	movs	r4, r0
    99b0:	2808      	cmp	r0, #8
    99b2:	d001      	beq.n	99b8 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    99b4:	240a      	movs	r4, #10
    99b6:	e7f3      	b.n	99a0 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    99b8:	ab02      	add	r3, sp, #8
    99ba:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    99bc:	232f      	movs	r3, #47	; 0x2f
    99be:	4a32      	ldr	r2, [pc, #200]	; (9a88 <setFrequency+0x110>)
    99c0:	5cd2      	ldrb	r2, [r2, r3]
    99c2:	3b0c      	subs	r3, #12
    99c4:	4113      	asrs	r3, r2
    99c6:	07db      	lsls	r3, r3, #31
    99c8:	d444      	bmi.n	9a54 <setFrequency+0xdc>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    99ca:	006a      	lsls	r2, r5, #1
    99cc:	1952      	adds	r2, r2, r5
    99ce:	0090      	lsls	r0, r2, #2
    99d0:	a902      	add	r1, sp, #8
    99d2:	9d02      	ldr	r5, [sp, #8]
    99d4:	4b2c      	ldr	r3, [pc, #176]	; (9a88 <setFrequency+0x110>)
    99d6:	7a1a      	ldrb	r2, [r3, #8]
    99d8:	7a5e      	ldrb	r6, [r3, #9]
    99da:	0236      	lsls	r6, r6, #8
    99dc:	4316      	orrs	r6, r2
    99de:	7a9a      	ldrb	r2, [r3, #10]
    99e0:	0412      	lsls	r2, r2, #16
    99e2:	4316      	orrs	r6, r2
    99e4:	7ada      	ldrb	r2, [r3, #11]
    99e6:	0612      	lsls	r2, r2, #24
    99e8:	4332      	orrs	r2, r6
    99ea:	5415      	strb	r5, [r2, r0]
    99ec:	0a2e      	lsrs	r6, r5, #8
    99ee:	1812      	adds	r2, r2, r0
    99f0:	7056      	strb	r6, [r2, #1]
    99f2:	0c2e      	lsrs	r6, r5, #16
    99f4:	7096      	strb	r6, [r2, #2]
    99f6:	0e2d      	lsrs	r5, r5, #24
    99f8:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    99fa:	7a1a      	ldrb	r2, [r3, #8]
    99fc:	7a5d      	ldrb	r5, [r3, #9]
    99fe:	022d      	lsls	r5, r5, #8
    9a00:	4315      	orrs	r5, r2
    9a02:	7a9a      	ldrb	r2, [r3, #10]
    9a04:	0412      	lsls	r2, r2, #16
    9a06:	4315      	orrs	r5, r2
    9a08:	7ada      	ldrb	r2, [r3, #11]
    9a0a:	0612      	lsls	r2, r2, #24
    9a0c:	432a      	orrs	r2, r5
    9a0e:	1812      	adds	r2, r2, r0
    9a10:	780d      	ldrb	r5, [r1, #0]
    9a12:	7115      	strb	r5, [r2, #4]
    9a14:	784d      	ldrb	r5, [r1, #1]
    9a16:	7155      	strb	r5, [r2, #5]
    9a18:	788d      	ldrb	r5, [r1, #2]
    9a1a:	7195      	strb	r5, [r2, #6]
    9a1c:	78c9      	ldrb	r1, [r1, #3]
    9a1e:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    9a20:	7a1a      	ldrb	r2, [r3, #8]
    9a22:	7a59      	ldrb	r1, [r3, #9]
    9a24:	0209      	lsls	r1, r1, #8
    9a26:	4311      	orrs	r1, r2
    9a28:	7a9a      	ldrb	r2, [r3, #10]
    9a2a:	0412      	lsls	r2, r2, #16
    9a2c:	4311      	orrs	r1, r2
    9a2e:	7ada      	ldrb	r2, [r3, #11]
    9a30:	0612      	lsls	r2, r2, #24
    9a32:	430a      	orrs	r2, r1
    9a34:	1812      	adds	r2, r2, r0
    9a36:	7ad1      	ldrb	r1, [r2, #11]
    9a38:	2001      	movs	r0, #1
    9a3a:	4301      	orrs	r1, r0
    9a3c:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9a3e:	4a13      	ldr	r2, [pc, #76]	; (9a8c <setFrequency+0x114>)
    9a40:	5c9a      	ldrb	r2, [r3, r2]
    9a42:	4913      	ldr	r1, [pc, #76]	; (9a90 <setFrequency+0x118>)
    9a44:	5c58      	ldrb	r0, [r3, r1]
    9a46:	0200      	lsls	r0, r0, #8
    9a48:	4310      	orrs	r0, r2
    9a4a:	b2c1      	uxtb	r1, r0
    9a4c:	0a00      	lsrs	r0, r0, #8
    9a4e:	4b11      	ldr	r3, [pc, #68]	; (9a94 <setFrequency+0x11c>)
    9a50:	4798      	blx	r3
    9a52:	e7a5      	b.n	99a0 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    9a54:	4a0c      	ldr	r2, [pc, #48]	; (9a88 <setFrequency+0x110>)
    9a56:	7a16      	ldrb	r6, [r2, #8]
    9a58:	7a53      	ldrb	r3, [r2, #9]
    9a5a:	021b      	lsls	r3, r3, #8
    9a5c:	4333      	orrs	r3, r6
    9a5e:	7a96      	ldrb	r6, [r2, #10]
    9a60:	0436      	lsls	r6, r6, #16
    9a62:	4333      	orrs	r3, r6
    9a64:	7ad6      	ldrb	r6, [r2, #11]
    9a66:	0636      	lsls	r6, r6, #24
    9a68:	431e      	orrs	r6, r3
    9a6a:	006b      	lsls	r3, r5, #1
    9a6c:	195b      	adds	r3, r3, r5
    9a6e:	009b      	lsls	r3, r3, #2
    9a70:	18f6      	adds	r6, r6, r3
    9a72:	9802      	ldr	r0, [sp, #8]
    9a74:	4b08      	ldr	r3, [pc, #32]	; (9a98 <setFrequency+0x120>)
    9a76:	4798      	blx	r3
    9a78:	7230      	strb	r0, [r6, #8]
    9a7a:	e7a6      	b.n	99ca <setFrequency+0x52>
    9a7c:	00018655 	.word	0x00018655
    9a80:	20000cf4 	.word	0x20000cf4
    9a84:	00008065 	.word	0x00008065
    9a88:	20002310 	.word	0x20002310
    9a8c:	00000211 	.word	0x00000211
    9a90:	00000212 	.word	0x00000212
    9a94:	0000c84d 	.word	0x0000c84d
    9a98:	0000855d 	.word	0x0000855d

00009a9c <setDutyCycle>:
{
    9a9c:	b570      	push	{r4, r5, r6, lr}
    9a9e:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    9aa0:	ac01      	add	r4, sp, #4
    9aa2:	2204      	movs	r2, #4
    9aa4:	0020      	movs	r0, r4
    9aa6:	4b2c      	ldr	r3, [pc, #176]	; (9b58 <setDutyCycle+0xbc>)
    9aa8:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    9aaa:	78a5      	ldrb	r5, [r4, #2]
    9aac:	466b      	mov	r3, sp
    9aae:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9ab0:	2301      	movs	r3, #1
    9ab2:	466a      	mov	r2, sp
    9ab4:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    9ab6:	4669      	mov	r1, sp
    9ab8:	2015      	movs	r0, #21
    9aba:	4b28      	ldr	r3, [pc, #160]	; (9b5c <setDutyCycle+0xc0>)
    9abc:	4798      	blx	r3
    9abe:	0004      	movs	r4, r0
    9ac0:	2808      	cmp	r0, #8
    9ac2:	d003      	beq.n	9acc <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    9ac4:	240a      	movs	r4, #10
}
    9ac6:	0020      	movs	r0, r4
    9ac8:	b002      	add	sp, #8
    9aca:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    9acc:	0069      	lsls	r1, r5, #1
    9ace:	1949      	adds	r1, r1, r5
    9ad0:	0089      	lsls	r1, r1, #2
    9ad2:	4b23      	ldr	r3, [pc, #140]	; (9b60 <setDutyCycle+0xc4>)
    9ad4:	7a1a      	ldrb	r2, [r3, #8]
    9ad6:	7a58      	ldrb	r0, [r3, #9]
    9ad8:	0200      	lsls	r0, r0, #8
    9ada:	4310      	orrs	r0, r2
    9adc:	7a9a      	ldrb	r2, [r3, #10]
    9ade:	0412      	lsls	r2, r2, #16
    9ae0:	4310      	orrs	r0, r2
    9ae2:	7ada      	ldrb	r2, [r3, #11]
    9ae4:	0612      	lsls	r2, r2, #24
    9ae6:	4302      	orrs	r2, r0
    9ae8:	1852      	adds	r2, r2, r1
    9aea:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    9aec:	0028      	movs	r0, r5
    9aee:	30d4      	adds	r0, #212	; 0xd4
    9af0:	0040      	lsls	r0, r0, #1
    9af2:	aa01      	add	r2, sp, #4
    9af4:	1818      	adds	r0, r3, r0
    9af6:	7816      	ldrb	r6, [r2, #0]
    9af8:	7186      	strb	r6, [r0, #6]
    9afa:	7852      	ldrb	r2, [r2, #1]
    9afc:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    9afe:	7b18      	ldrb	r0, [r3, #12]
    9b00:	7b5a      	ldrb	r2, [r3, #13]
    9b02:	0212      	lsls	r2, r2, #8
    9b04:	4302      	orrs	r2, r0
    9b06:	7b98      	ldrb	r0, [r3, #14]
    9b08:	0400      	lsls	r0, r0, #16
    9b0a:	4302      	orrs	r2, r0
    9b0c:	7bd8      	ldrb	r0, [r3, #15]
    9b0e:	0600      	lsls	r0, r0, #24
    9b10:	4310      	orrs	r0, r2
    9b12:	006a      	lsls	r2, r5, #1
    9b14:	1952      	adds	r2, r2, r5
    9b16:	0092      	lsls	r2, r2, #2
    9b18:	1812      	adds	r2, r2, r0
    9b1a:	2000      	movs	r0, #0
    9b1c:	7210      	strb	r0, [r2, #8]
    9b1e:	7250      	strb	r0, [r2, #9]
    9b20:	7290      	strb	r0, [r2, #10]
    9b22:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    9b24:	7a1d      	ldrb	r5, [r3, #8]
    9b26:	7a5a      	ldrb	r2, [r3, #9]
    9b28:	0212      	lsls	r2, r2, #8
    9b2a:	432a      	orrs	r2, r5
    9b2c:	7a9d      	ldrb	r5, [r3, #10]
    9b2e:	042d      	lsls	r5, r5, #16
    9b30:	432a      	orrs	r2, r5
    9b32:	7add      	ldrb	r5, [r3, #11]
    9b34:	062d      	lsls	r5, r5, #24
    9b36:	4315      	orrs	r5, r2
    9b38:	186d      	adds	r5, r5, r1
    9b3a:	7aea      	ldrb	r2, [r5, #11]
    9b3c:	2104      	movs	r1, #4
    9b3e:	430a      	orrs	r2, r1
    9b40:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9b42:	4a08      	ldr	r2, [pc, #32]	; (9b64 <setDutyCycle+0xc8>)
    9b44:	5c9a      	ldrb	r2, [r3, r2]
    9b46:	4908      	ldr	r1, [pc, #32]	; (9b68 <setDutyCycle+0xcc>)
    9b48:	5c58      	ldrb	r0, [r3, r1]
    9b4a:	0200      	lsls	r0, r0, #8
    9b4c:	4310      	orrs	r0, r2
    9b4e:	b2c1      	uxtb	r1, r0
    9b50:	0a00      	lsrs	r0, r0, #8
    9b52:	4b06      	ldr	r3, [pc, #24]	; (9b6c <setDutyCycle+0xd0>)
    9b54:	4798      	blx	r3
    9b56:	e7b6      	b.n	9ac6 <setDutyCycle+0x2a>
    9b58:	00018655 	.word	0x00018655
    9b5c:	00008065 	.word	0x00008065
    9b60:	20002310 	.word	0x20002310
    9b64:	00000211 	.word	0x00000211
    9b68:	00000212 	.word	0x00000212
    9b6c:	0000c84d 	.word	0x0000c84d

00009b70 <SearchAvailableChannel2>:
{
    9b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b72:	46de      	mov	lr, fp
    9b74:	4657      	mov	r7, sl
    9b76:	464e      	mov	r6, r9
    9b78:	4645      	mov	r5, r8
    9b7a:	b5e0      	push	{r5, r6, r7, lr}
    9b7c:	b087      	sub	sp, #28
    9b7e:	af00      	add	r7, sp, #0
    9b80:	0004      	movs	r4, r0
    9b82:	4688      	mov	r8, r1
    9b84:	60f9      	str	r1, [r7, #12]
    9b86:	0015      	movs	r5, r2
    9b88:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    9b8a:	1dc3      	adds	r3, r0, #7
    9b8c:	08db      	lsrs	r3, r3, #3
    9b8e:	00db      	lsls	r3, r3, #3
    9b90:	466a      	mov	r2, sp
    9b92:	1ad3      	subs	r3, r2, r3
    9b94:	469d      	mov	sp, r3
    9b96:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    9b98:	0002      	movs	r2, r0
    9b9a:	2100      	movs	r1, #0
    9b9c:	4668      	mov	r0, sp
    9b9e:	4b5c      	ldr	r3, [pc, #368]	; (9d10 <SearchAvailableChannel2+0x1a0>)
    9ba0:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    9ba2:	232f      	movs	r3, #47	; 0x2f
    9ba4:	4a5b      	ldr	r2, [pc, #364]	; (9d14 <SearchAvailableChannel2+0x1a4>)
    9ba6:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    9ba8:	4643      	mov	r3, r8
    9baa:	2b00      	cmp	r3, #0
    9bac:	d148      	bne.n	9c40 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9bae:	3320      	adds	r3, #32
    9bb0:	5cd3      	ldrb	r3, [r2, r3]
    9bb2:	069b      	lsls	r3, r3, #26
    9bb4:	d431      	bmi.n	9c1a <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    9bb6:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    9bb8:	2c00      	cmp	r4, #0
    9bba:	d100      	bne.n	9bbe <SearchAvailableChannel2+0x4e>
    9bbc:	e093      	b.n	9ce6 <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    9bbe:	4b56      	ldr	r3, [pc, #344]	; (9d18 <SearchAvailableChannel2+0x1a8>)
    9bc0:	4133      	asrs	r3, r6
    9bc2:	2201      	movs	r2, #1
    9bc4:	401a      	ands	r2, r3
    9bc6:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    9bc8:	4b52      	ldr	r3, [pc, #328]	; (9d14 <SearchAvailableChannel2+0x1a4>)
    9bca:	7b19      	ldrb	r1, [r3, #12]
    9bcc:	7b5a      	ldrb	r2, [r3, #13]
    9bce:	0212      	lsls	r2, r2, #8
    9bd0:	4311      	orrs	r1, r2
    9bd2:	7b9a      	ldrb	r2, [r3, #14]
    9bd4:	0412      	lsls	r2, r2, #16
    9bd6:	430a      	orrs	r2, r1
    9bd8:	7bd9      	ldrb	r1, [r3, #15]
    9bda:	0609      	lsls	r1, r1, #24
    9bdc:	4311      	orrs	r1, r2
    9bde:	468c      	mov	ip, r1
    9be0:	7a18      	ldrb	r0, [r3, #8]
    9be2:	7a5a      	ldrb	r2, [r3, #9]
    9be4:	0212      	lsls	r2, r2, #8
    9be6:	4302      	orrs	r2, r0
    9be8:	7a98      	ldrb	r0, [r3, #10]
    9bea:	0400      	lsls	r0, r0, #16
    9bec:	4302      	orrs	r2, r0
    9bee:	7ad8      	ldrb	r0, [r3, #11]
    9bf0:	0600      	lsls	r0, r0, #24
    9bf2:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    9bf4:	791a      	ldrb	r2, [r3, #4]
    9bf6:	7959      	ldrb	r1, [r3, #5]
    9bf8:	0209      	lsls	r1, r1, #8
    9bfa:	4311      	orrs	r1, r2
    9bfc:	799a      	ldrb	r2, [r3, #6]
    9bfe:	0412      	lsls	r2, r2, #16
    9c00:	4311      	orrs	r1, r2
    9c02:	79da      	ldrb	r2, [r3, #7]
    9c04:	0612      	lsls	r2, r2, #24
    9c06:	430a      	orrs	r2, r1
    9c08:	0006      	movs	r6, r0
    9c0a:	3608      	adds	r6, #8
    9c0c:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    9c0e:	2300      	movs	r3, #0
    9c10:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    9c12:	46aa      	mov	sl, r5
    9c14:	46a9      	mov	r9, r5
    9c16:	0025      	movs	r5, r4
    9c18:	e036      	b.n	9c88 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    9c1a:	0011      	movs	r1, r2
    9c1c:	7d13      	ldrb	r3, [r2, #20]
    9c1e:	7d52      	ldrb	r2, [r2, #21]
    9c20:	0212      	lsls	r2, r2, #8
    9c22:	431a      	orrs	r2, r3
    9c24:	7d8b      	ldrb	r3, [r1, #22]
    9c26:	041b      	lsls	r3, r3, #16
    9c28:	431a      	orrs	r2, r3
    9c2a:	7dcb      	ldrb	r3, [r1, #23]
    9c2c:	061b      	lsls	r3, r3, #24
    9c2e:	4313      	orrs	r3, r2
    9c30:	7a18      	ldrb	r0, [r3, #8]
    9c32:	4b3a      	ldr	r3, [pc, #232]	; (9d1c <SearchAvailableChannel2+0x1ac>)
    9c34:	4798      	blx	r3
    9c36:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    9c38:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d0bb      	beq.n	9bb6 <SearchAvailableChannel2+0x46>
    9c3e:	e052      	b.n	9ce6 <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    9c40:	4934      	ldr	r1, [pc, #208]	; (9d14 <SearchAvailableChannel2+0x1a4>)
    9c42:	23dd      	movs	r3, #221	; 0xdd
    9c44:	005b      	lsls	r3, r3, #1
    9c46:	5ccb      	ldrb	r3, [r1, r3]
    9c48:	22bc      	movs	r2, #188	; 0xbc
    9c4a:	32ff      	adds	r2, #255	; 0xff
    9c4c:	5c8a      	ldrb	r2, [r1, r2]
    9c4e:	0212      	lsls	r2, r2, #8
    9c50:	431a      	orrs	r2, r3
    9c52:	23de      	movs	r3, #222	; 0xde
    9c54:	005b      	lsls	r3, r3, #1
    9c56:	5ccb      	ldrb	r3, [r1, r3]
    9c58:	041b      	lsls	r3, r3, #16
    9c5a:	431a      	orrs	r2, r3
    9c5c:	23be      	movs	r3, #190	; 0xbe
    9c5e:	33ff      	adds	r3, #255	; 0xff
    9c60:	5ccb      	ldrb	r3, [r1, r3]
    9c62:	061b      	lsls	r3, r3, #24
    9c64:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    9c66:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    9c68:	2b00      	cmp	r3, #0
    9c6a:	d0a4      	beq.n	9bb6 <SearchAvailableChannel2+0x46>
    9c6c:	e03b      	b.n	9ce6 <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    9c6e:	693c      	ldr	r4, [r7, #16]
    9c70:	6979      	ldr	r1, [r7, #20]
    9c72:	5463      	strb	r3, [r4, r1]
					num++;
    9c74:	3101      	adds	r1, #1
    9c76:	b2c9      	uxtb	r1, r1
    9c78:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    9c7a:	3301      	adds	r3, #1
    9c7c:	b2db      	uxtb	r3, r3
    9c7e:	3202      	adds	r2, #2
    9c80:	360c      	adds	r6, #12
    9c82:	300c      	adds	r0, #12
    9c84:	429d      	cmp	r5, r3
    9c86:	d02a      	beq.n	9cde <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    9c88:	7811      	ldrb	r1, [r2, #0]
    9c8a:	2900      	cmp	r1, #0
    9c8c:	d0f5      	beq.n	9c7a <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    9c8e:	7851      	ldrb	r1, [r2, #1]
    9c90:	0709      	lsls	r1, r1, #28
    9c92:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    9c94:	4589      	cmp	r9, r1
    9c96:	dbf0      	blt.n	9c7a <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    9c98:	7851      	ldrb	r1, [r2, #1]
    9c9a:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    9c9c:	458a      	cmp	sl, r1
    9c9e:	dcec      	bgt.n	9c7a <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    9ca0:	4641      	mov	r1, r8
    9ca2:	2900      	cmp	r1, #0
    9ca4:	d014      	beq.n	9cd0 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    9ca6:	7834      	ldrb	r4, [r6, #0]
    9ca8:	0061      	lsls	r1, r4, #1
    9caa:	1909      	adds	r1, r1, r4
    9cac:	0089      	lsls	r1, r1, #2
    9cae:	4461      	add	r1, ip
    9cb0:	7a0c      	ldrb	r4, [r1, #8]
    9cb2:	46a3      	mov	fp, r4
    9cb4:	60b9      	str	r1, [r7, #8]
    9cb6:	7a4c      	ldrb	r4, [r1, #9]
    9cb8:	0224      	lsls	r4, r4, #8
    9cba:	4659      	mov	r1, fp
    9cbc:	430c      	orrs	r4, r1
    9cbe:	68b9      	ldr	r1, [r7, #8]
    9cc0:	7a89      	ldrb	r1, [r1, #10]
    9cc2:	0409      	lsls	r1, r1, #16
    9cc4:	430c      	orrs	r4, r1
    9cc6:	68b9      	ldr	r1, [r7, #8]
    9cc8:	7ac9      	ldrb	r1, [r1, #11]
    9cca:	0609      	lsls	r1, r1, #24
    9ccc:	4321      	orrs	r1, r4
    9cce:	d1d4      	bne.n	9c7a <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    9cd0:	68f9      	ldr	r1, [r7, #12]
    9cd2:	2900      	cmp	r1, #0
    9cd4:	d1cb      	bne.n	9c6e <SearchAvailableChannel2+0xfe>
    9cd6:	7801      	ldrb	r1, [r0, #0]
    9cd8:	2900      	cmp	r1, #0
    9cda:	d0ce      	beq.n	9c7a <SearchAvailableChannel2+0x10a>
    9cdc:	e7c7      	b.n	9c6e <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    9cde:	2010      	movs	r0, #16
	if(0 != num)
    9ce0:	697c      	ldr	r4, [r7, #20]
    9ce2:	2c00      	cmp	r4, #0
    9ce4:	d107      	bne.n	9cf6 <SearchAvailableChannel2+0x186>
}
    9ce6:	46bd      	mov	sp, r7
    9ce8:	b007      	add	sp, #28
    9cea:	bc3c      	pop	{r2, r3, r4, r5}
    9cec:	4690      	mov	r8, r2
    9cee:	4699      	mov	r9, r3
    9cf0:	46a2      	mov	sl, r4
    9cf2:	46ab      	mov	fp, r5
    9cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    9cf6:	4b0a      	ldr	r3, [pc, #40]	; (9d20 <SearchAvailableChannel2+0x1b0>)
    9cf8:	4798      	blx	r3
    9cfa:	0021      	movs	r1, r4
    9cfc:	4b09      	ldr	r3, [pc, #36]	; (9d24 <SearchAvailableChannel2+0x1b4>)
    9cfe:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    9d00:	23ff      	movs	r3, #255	; 0xff
    9d02:	4019      	ands	r1, r3
    9d04:	693b      	ldr	r3, [r7, #16]
    9d06:	5c5b      	ldrb	r3, [r3, r1]
    9d08:	687a      	ldr	r2, [r7, #4]
    9d0a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d0c:	2008      	movs	r0, #8
    9d0e:	e7ea      	b.n	9ce6 <SearchAvailableChannel2+0x176>
    9d10:	00018779 	.word	0x00018779
    9d14:	20002310 	.word	0x20002310
    9d18:	00007fe3 	.word	0x00007fe3
    9d1c:	0000d715 	.word	0x0000d715
    9d20:	00018919 	.word	0x00018919
    9d24:	00015231 	.word	0x00015231

00009d28 <LORAREG_GetAttr_FreeChannel2>:
{
    9d28:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    9d2a:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    9d2c:	202a      	movs	r0, #42	; 0x2a
    9d2e:	4d07      	ldr	r5, [pc, #28]	; (9d4c <LORAREG_GetAttr_FreeChannel2+0x24>)
    9d30:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    9d32:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    9d34:	42ac      	cmp	r4, r5
    9d36:	dd00      	ble.n	9d3a <LORAREG_GetAttr_FreeChannel2+0x12>
}
    9d38:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    9d3a:	7888      	ldrb	r0, [r1, #2]
    9d3c:	7809      	ldrb	r1, [r1, #0]
    9d3e:	0013      	movs	r3, r2
    9d40:	0002      	movs	r2, r0
    9d42:	0020      	movs	r0, r4
    9d44:	4c02      	ldr	r4, [pc, #8]	; (9d50 <LORAREG_GetAttr_FreeChannel2+0x28>)
    9d46:	47a0      	blx	r4
	return result;
    9d48:	e7f6      	b.n	9d38 <LORAREG_GetAttr_FreeChannel2+0x10>
    9d4a:	46c0      	nop			; (mov r8, r8)
    9d4c:	20002310 	.word	0x20002310
    9d50:	00009b71 	.word	0x00009b71

00009d54 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    9d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d56:	b083      	sub	sp, #12
    9d58:	0014      	movs	r4, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9d5a:	2203      	movs	r2, #3
    9d5c:	a801      	add	r0, sp, #4
    9d5e:	4b34      	ldr	r3, [pc, #208]	; (9e30 <LORAREG_GetAttr_NewTxChConfigT2+0xdc>)
    9d60:	4798      	blx	r3
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9d62:	466b      	mov	r3, sp
    9d64:	1d99      	adds	r1, r3, #6
    9d66:	200f      	movs	r0, #15
    9d68:	4b32      	ldr	r3, [pc, #200]	; (9e34 <LORAREG_GetAttr_NewTxChConfigT2+0xe0>)
    9d6a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    9d6c:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9d6e:	2808      	cmp	r0, #8
    9d70:	d002      	beq.n	9d78 <LORAREG_GetAttr_NewTxChConfigT2+0x24>
}
    9d72:	0018      	movs	r0, r3
    9d74:	b003      	add	sp, #12
    9d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9d78:	466b      	mov	r3, sp
    9d7a:	1d59      	adds	r1, r3, #5
    9d7c:	3015      	adds	r0, #21
    9d7e:	4b2e      	ldr	r3, [pc, #184]	; (9e38 <LORAREG_GetAttr_NewTxChConfigT2+0xe4>)
    9d80:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    9d82:	230a      	movs	r3, #10
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    9d84:	2808      	cmp	r0, #8
    9d86:	d1f4      	bne.n	9d72 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    9d88:	ab01      	add	r3, sp, #4
    9d8a:	7819      	ldrb	r1, [r3, #0]
    9d8c:	785e      	ldrb	r6, [r3, #1]
    9d8e:	789d      	ldrb	r5, [r3, #2]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    9d90:	232f      	movs	r3, #47	; 0x2f
    9d92:	4a2a      	ldr	r2, [pc, #168]	; (9e3c <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    9d94:	5cd2      	ldrb	r2, [r2, r3]
    9d96:	4b2a      	ldr	r3, [pc, #168]	; (9e40 <LORAREG_GetAttr_NewTxChConfigT2+0xec>)
    9d98:	4113      	asrs	r3, r2
    9d9a:	07db      	lsls	r3, r3, #31
    9d9c:	d502      	bpl.n	9da4 <LORAREG_GetAttr_NewTxChConfigT2+0x50>
    9d9e:	2900      	cmp	r1, #0
    9da0:	d100      	bne.n	9da4 <LORAREG_GetAttr_NewTxChConfigT2+0x50>
		currDr = DR2;
    9da2:	2502      	movs	r5, #2
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    9da4:	232a      	movs	r3, #42	; 0x2a
    9da6:	4a25      	ldr	r2, [pc, #148]	; (9e3c <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    9da8:	5cd0      	ldrb	r0, [r2, r3]
    9daa:	466b      	mov	r3, sp
    9dac:	3303      	adds	r3, #3
    9dae:	002a      	movs	r2, r5
    9db0:	4f24      	ldr	r7, [pc, #144]	; (9e44 <LORAREG_GetAttr_NewTxChConfigT2+0xf0>)
    9db2:	47b8      	blx	r7
    9db4:	0003      	movs	r3, r0
	if (result == LORAWAN_SUCCESS)
    9db6:	2808      	cmp	r0, #8
    9db8:	d1db      	bne.n	9d72 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
		RegParams.lastUsedChannelIndex = channelIndex;
    9dba:	466a      	mov	r2, sp
    9dbc:	78d7      	ldrb	r7, [r2, #3]
    9dbe:	4a1f      	ldr	r2, [pc, #124]	; (9e3c <LORAREG_GetAttr_NewTxChConfigT2+0xe8>)
    9dc0:	2130      	movs	r1, #48	; 0x30
    9dc2:	5457      	strb	r7, [r2, r1]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    9dc4:	7a10      	ldrb	r0, [r2, #8]
    9dc6:	7a51      	ldrb	r1, [r2, #9]
    9dc8:	0209      	lsls	r1, r1, #8
    9dca:	4301      	orrs	r1, r0
    9dcc:	7a90      	ldrb	r0, [r2, #10]
    9dce:	0400      	lsls	r0, r0, #16
    9dd0:	4301      	orrs	r1, r0
    9dd2:	7ad0      	ldrb	r0, [r2, #11]
    9dd4:	0600      	lsls	r0, r0, #24
    9dd6:	4308      	orrs	r0, r1
    9dd8:	0079      	lsls	r1, r7, #1
    9dda:	19c9      	adds	r1, r1, r7
    9ddc:	0089      	lsls	r1, r1, #2
    9dde:	5c0f      	ldrb	r7, [r1, r0]
    9de0:	1809      	adds	r1, r1, r0
    9de2:	7848      	ldrb	r0, [r1, #1]
    9de4:	0200      	lsls	r0, r0, #8
    9de6:	4307      	orrs	r7, r0
    9de8:	7888      	ldrb	r0, [r1, #2]
    9dea:	0400      	lsls	r0, r0, #16
    9dec:	4338      	orrs	r0, r7
    9dee:	78c9      	ldrb	r1, [r1, #3]
    9df0:	0609      	lsls	r1, r1, #24
    9df2:	4301      	orrs	r1, r0
    9df4:	6021      	str	r1, [r4, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    9df6:	0076      	lsls	r6, r6, #1
    9df8:	2128      	movs	r1, #40	; 0x28
    9dfa:	5c51      	ldrb	r1, [r2, r1]
    9dfc:	1b8e      	subs	r6, r1, r6
    9dfe:	7226      	strb	r6, [r4, #8]
		radioConfig->freq_hop_period = DISABLED ;
    9e00:	2100      	movs	r1, #0
    9e02:	80a1      	strh	r1, [r4, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    9e04:	7810      	ldrb	r0, [r2, #0]
    9e06:	7851      	ldrb	r1, [r2, #1]
    9e08:	0209      	lsls	r1, r1, #8
    9e0a:	4308      	orrs	r0, r1
    9e0c:	7891      	ldrb	r1, [r2, #2]
    9e0e:	0409      	lsls	r1, r1, #16
    9e10:	4301      	orrs	r1, r0
    9e12:	78d2      	ldrb	r2, [r2, #3]
    9e14:	0612      	lsls	r2, r2, #24
    9e16:	430a      	orrs	r2, r1
    9e18:	00ed      	lsls	r5, r5, #3
    9e1a:	1955      	adds	r5, r2, r5
    9e1c:	79ea      	ldrb	r2, [r5, #7]
    9e1e:	7262      	strb	r2, [r4, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    9e20:	79aa      	ldrb	r2, [r5, #6]
    9e22:	72a2      	strb	r2, [r4, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    9e24:	796a      	ldrb	r2, [r5, #5]
    9e26:	72e2      	strb	r2, [r4, #11]
		radioConfig->ecrConfig.override = false;
    9e28:	2200      	movs	r2, #0
    9e2a:	71e2      	strb	r2, [r4, #7]
    9e2c:	e7a1      	b.n	9d72 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
    9e2e:	46c0      	nop			; (mov r8, r8)
    9e30:	00018655 	.word	0x00018655
    9e34:	00008261 	.word	0x00008261
    9e38:	00008181 	.word	0x00008181
    9e3c:	20002310 	.word	0x20002310
    9e40:	00007fe0 	.word	0x00007fe0
    9e44:	00009b71 	.word	0x00009b71

00009e48 <setJoinBackoffCntl>:
{   
    9e48:	b500      	push	{lr}
    9e4a:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    9e4c:	780b      	ldrb	r3, [r1, #0]
    9e4e:	466a      	mov	r2, sp
    9e50:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    9e52:	2b00      	cmp	r3, #0
    9e54:	d145      	bne.n	9ee2 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9e56:	3320      	adds	r3, #32
    9e58:	4a26      	ldr	r2, [pc, #152]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9e5a:	5cd3      	ldrb	r3, [r2, r3]
    9e5c:	069a      	lsls	r2, r3, #26
    9e5e:	d546      	bpl.n	9eee <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    9e60:	4924      	ldr	r1, [pc, #144]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9e62:	2220      	movs	r2, #32
    9e64:	4393      	bics	r3, r2
    9e66:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    9e68:	7e0b      	ldrb	r3, [r1, #24]
    9e6a:	7e4a      	ldrb	r2, [r1, #25]
    9e6c:	0212      	lsls	r2, r2, #8
    9e6e:	431a      	orrs	r2, r3
    9e70:	7e8b      	ldrb	r3, [r1, #26]
    9e72:	041b      	lsls	r3, r3, #16
    9e74:	431a      	orrs	r2, r3
    9e76:	7ecb      	ldrb	r3, [r1, #27]
    9e78:	061b      	lsls	r3, r3, #24
    9e7a:	4313      	orrs	r3, r2
    9e7c:	7818      	ldrb	r0, [r3, #0]
    9e7e:	4b1e      	ldr	r3, [pc, #120]	; (9ef8 <setJoinBackoffCntl+0xb0>)
    9e80:	4798      	blx	r3
    9e82:	2800      	cmp	r0, #0
    9e84:	d11e      	bne.n	9ec4 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    9e86:	491b      	ldr	r1, [pc, #108]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9e88:	7d0b      	ldrb	r3, [r1, #20]
    9e8a:	7d4a      	ldrb	r2, [r1, #21]
    9e8c:	0212      	lsls	r2, r2, #8
    9e8e:	431a      	orrs	r2, r3
    9e90:	7d8b      	ldrb	r3, [r1, #22]
    9e92:	041b      	lsls	r3, r3, #16
    9e94:	431a      	orrs	r2, r3
    9e96:	7dcb      	ldrb	r3, [r1, #23]
    9e98:	061b      	lsls	r3, r3, #24
    9e9a:	4313      	orrs	r3, r2
    9e9c:	7a18      	ldrb	r0, [r3, #8]
    9e9e:	4b16      	ldr	r3, [pc, #88]	; (9ef8 <setJoinBackoffCntl+0xb0>)
    9ea0:	4798      	blx	r3
    9ea2:	2800      	cmp	r0, #0
    9ea4:	d023      	beq.n	9eee <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    9ea6:	4913      	ldr	r1, [pc, #76]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9ea8:	7d0b      	ldrb	r3, [r1, #20]
    9eaa:	7d4a      	ldrb	r2, [r1, #21]
    9eac:	0212      	lsls	r2, r2, #8
    9eae:	431a      	orrs	r2, r3
    9eb0:	7d8b      	ldrb	r3, [r1, #22]
    9eb2:	041b      	lsls	r3, r3, #16
    9eb4:	431a      	orrs	r2, r3
    9eb6:	7dcb      	ldrb	r3, [r1, #23]
    9eb8:	061b      	lsls	r3, r3, #24
    9eba:	4313      	orrs	r3, r2
    9ebc:	7a18      	ldrb	r0, [r3, #8]
    9ebe:	4b0f      	ldr	r3, [pc, #60]	; (9efc <setJoinBackoffCntl+0xb4>)
    9ec0:	4798      	blx	r3
    9ec2:	e014      	b.n	9eee <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    9ec4:	490b      	ldr	r1, [pc, #44]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9ec6:	7e0b      	ldrb	r3, [r1, #24]
    9ec8:	7e4a      	ldrb	r2, [r1, #25]
    9eca:	0212      	lsls	r2, r2, #8
    9ecc:	431a      	orrs	r2, r3
    9ece:	7e8b      	ldrb	r3, [r1, #26]
    9ed0:	041b      	lsls	r3, r3, #16
    9ed2:	431a      	orrs	r2, r3
    9ed4:	7ecb      	ldrb	r3, [r1, #27]
    9ed6:	061b      	lsls	r3, r3, #24
    9ed8:	4313      	orrs	r3, r2
    9eda:	7818      	ldrb	r0, [r3, #0]
    9edc:	4b07      	ldr	r3, [pc, #28]	; (9efc <setJoinBackoffCntl+0xb4>)
    9ede:	4798      	blx	r3
    9ee0:	e7d1      	b.n	9e86 <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    9ee2:	4904      	ldr	r1, [pc, #16]	; (9ef4 <setJoinBackoffCntl+0xac>)
    9ee4:	2220      	movs	r2, #32
    9ee6:	5c8b      	ldrb	r3, [r1, r2]
    9ee8:	2020      	movs	r0, #32
    9eea:	4303      	orrs	r3, r0
    9eec:	548b      	strb	r3, [r1, r2]
}
    9eee:	2008      	movs	r0, #8
    9ef0:	b003      	add	sp, #12
    9ef2:	bd00      	pop	{pc}
    9ef4:	20002310 	.word	0x20002310
    9ef8:	0000d715 	.word	0x0000d715
    9efc:	0000d895 	.word	0x0000d895

00009f00 <setJoinBackOffTimer>:
{
    9f00:	b510      	push	{r4, lr}
    9f02:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    9f04:	780b      	ldrb	r3, [r1, #0]
    9f06:	220f      	movs	r2, #15
    9f08:	446a      	add	r2, sp
    9f0a:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d113      	bne.n	9f38 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    9f10:	4c13      	ldr	r4, [pc, #76]	; (9f60 <setJoinBackOffTimer+0x60>)
    9f12:	7e23      	ldrb	r3, [r4, #24]
    9f14:	7e62      	ldrb	r2, [r4, #25]
    9f16:	0212      	lsls	r2, r2, #8
    9f18:	431a      	orrs	r2, r3
    9f1a:	7ea3      	ldrb	r3, [r4, #26]
    9f1c:	041b      	lsls	r3, r3, #16
    9f1e:	431a      	orrs	r2, r3
    9f20:	7ee3      	ldrb	r3, [r4, #27]
    9f22:	061b      	lsls	r3, r3, #24
    9f24:	4313      	orrs	r3, r2
    9f26:	7818      	ldrb	r0, [r3, #0]
    9f28:	4b0e      	ldr	r3, [pc, #56]	; (9f64 <setJoinBackOffTimer+0x64>)
    9f2a:	4798      	blx	r3
		RegParams.joinbccount = 0;
    9f2c:	2200      	movs	r2, #0
    9f2e:	2343      	movs	r3, #67	; 0x43
    9f30:	54e2      	strb	r2, [r4, r3]
}
    9f32:	2008      	movs	r0, #8
    9f34:	b004      	add	sp, #16
    9f36:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    9f38:	4909      	ldr	r1, [pc, #36]	; (9f60 <setJoinBackOffTimer+0x60>)
    9f3a:	7e0b      	ldrb	r3, [r1, #24]
    9f3c:	7e4a      	ldrb	r2, [r1, #25]
    9f3e:	0212      	lsls	r2, r2, #8
    9f40:	431a      	orrs	r2, r3
    9f42:	7e8b      	ldrb	r3, [r1, #26]
    9f44:	041b      	lsls	r3, r3, #16
    9f46:	431a      	orrs	r2, r3
    9f48:	7ecb      	ldrb	r3, [r1, #27]
    9f4a:	061b      	lsls	r3, r3, #24
    9f4c:	4313      	orrs	r3, r2
    9f4e:	7818      	ldrb	r0, [r3, #0]
    9f50:	2300      	movs	r3, #0
    9f52:	9300      	str	r3, [sp, #0]
    9f54:	4b04      	ldr	r3, [pc, #16]	; (9f68 <setJoinBackOffTimer+0x68>)
    9f56:	2200      	movs	r2, #0
    9f58:	4904      	ldr	r1, [pc, #16]	; (9f6c <setJoinBackOffTimer+0x6c>)
    9f5a:	4c05      	ldr	r4, [pc, #20]	; (9f70 <setJoinBackOffTimer+0x70>)
    9f5c:	47a0      	blx	r4
    9f5e:	e7e8      	b.n	9f32 <setJoinBackOffTimer+0x32>
    9f60:	20002310 	.word	0x20002310
    9f64:	0000d895 	.word	0x0000d895
    9f68:	0000ab89 	.word	0x0000ab89
    9f6c:	6b49d200 	.word	0x6b49d200
    9f70:	0000d57d 	.word	0x0000d57d

00009f74 <setJoinDutyCycleTimer>:
{
    9f74:	b530      	push	{r4, r5, lr}
    9f76:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    9f78:	ac02      	add	r4, sp, #8
    9f7a:	2208      	movs	r2, #8
    9f7c:	0020      	movs	r0, r4
    9f7e:	4b93      	ldr	r3, [pc, #588]	; (a1cc <setJoinDutyCycleTimer+0x258>)
    9f80:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    9f82:	7923      	ldrb	r3, [r4, #4]
    9f84:	2b00      	cmp	r3, #0
    9f86:	d100      	bne.n	9f8a <setJoinDutyCycleTimer+0x16>
    9f88:	e0f8      	b.n	a17c <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    9f8a:	2343      	movs	r3, #67	; 0x43
    9f8c:	4a90      	ldr	r2, [pc, #576]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    9f8e:	5cd3      	ldrb	r3, [r2, r3]
    9f90:	2b01      	cmp	r3, #1
    9f92:	d800      	bhi.n	9f96 <setJoinDutyCycleTimer+0x22>
    9f94:	e081      	b.n	a09a <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    9f96:	2b13      	cmp	r3, #19
    9f98:	d900      	bls.n	9f9c <setJoinDutyCycleTimer+0x28>
    9f9a:	e08d      	b.n	a0b8 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    9f9c:	4b8d      	ldr	r3, [pc, #564]	; (a1d4 <setJoinDutyCycleTimer+0x260>)
    9f9e:	9a02      	ldr	r2, [sp, #8]
    9fa0:	4353      	muls	r3, r2
    9fa2:	4a8b      	ldr	r2, [pc, #556]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    9fa4:	323f      	adds	r2, #63	; 0x3f
    9fa6:	7013      	strb	r3, [r2, #0]
    9fa8:	0a19      	lsrs	r1, r3, #8
    9faa:	7051      	strb	r1, [r2, #1]
    9fac:	0c19      	lsrs	r1, r3, #16
    9fae:	7091      	strb	r1, [r2, #2]
    9fb0:	0e1b      	lsrs	r3, r3, #24
    9fb2:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    9fb4:	4986      	ldr	r1, [pc, #536]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    9fb6:	7d0b      	ldrb	r3, [r1, #20]
    9fb8:	7d4a      	ldrb	r2, [r1, #21]
    9fba:	0212      	lsls	r2, r2, #8
    9fbc:	431a      	orrs	r2, r3
    9fbe:	7d8b      	ldrb	r3, [r1, #22]
    9fc0:	041b      	lsls	r3, r3, #16
    9fc2:	431a      	orrs	r2, r3
    9fc4:	7dcb      	ldrb	r3, [r1, #23]
    9fc6:	061b      	lsls	r3, r3, #24
    9fc8:	4313      	orrs	r3, r2
    9fca:	7a18      	ldrb	r0, [r3, #8]
    9fcc:	4b82      	ldr	r3, [pc, #520]	; (a1d8 <setJoinDutyCycleTimer+0x264>)
    9fce:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    9fd0:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    9fd2:	2800      	cmp	r0, #0
    9fd4:	d17d      	bne.n	a0d2 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    9fd6:	4b7e      	ldr	r3, [pc, #504]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    9fd8:	213f      	movs	r1, #63	; 0x3f
    9fda:	5c59      	ldrb	r1, [r3, r1]
    9fdc:	2040      	movs	r0, #64	; 0x40
    9fde:	5c18      	ldrb	r0, [r3, r0]
    9fe0:	0200      	lsls	r0, r0, #8
    9fe2:	4308      	orrs	r0, r1
    9fe4:	2141      	movs	r1, #65	; 0x41
    9fe6:	5c59      	ldrb	r1, [r3, r1]
    9fe8:	0409      	lsls	r1, r1, #16
    9fea:	4308      	orrs	r0, r1
    9fec:	2142      	movs	r1, #66	; 0x42
    9fee:	5c59      	ldrb	r1, [r3, r1]
    9ff0:	0609      	lsls	r1, r1, #24
    9ff2:	4301      	orrs	r1, r0
    9ff4:	d100      	bne.n	9ff8 <setJoinDutyCycleTimer+0x84>
    9ff6:	e0e5      	b.n	a1c4 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    9ff8:	428c      	cmp	r4, r1
    9ffa:	d300      	bcc.n	9ffe <setJoinDutyCycleTimer+0x8a>
    9ffc:	e0b6      	b.n	a16c <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    9ffe:	1b09      	subs	r1, r1, r4
    a000:	333f      	adds	r3, #63	; 0x3f
    a002:	7019      	strb	r1, [r3, #0]
    a004:	0a0a      	lsrs	r2, r1, #8
    a006:	705a      	strb	r2, [r3, #1]
    a008:	0c0a      	lsrs	r2, r1, #16
    a00a:	709a      	strb	r2, [r3, #2]
    a00c:	0e0a      	lsrs	r2, r1, #24
    a00e:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    a010:	4b72      	ldr	r3, [pc, #456]	; (a1dc <setJoinDutyCycleTimer+0x268>)
    a012:	4299      	cmp	r1, r3
    a014:	d800      	bhi.n	a018 <setJoinDutyCycleTimer+0xa4>
    a016:	e093      	b.n	a140 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    a018:	4c6d      	ldr	r4, [pc, #436]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a01a:	7d23      	ldrb	r3, [r4, #20]
    a01c:	7d62      	ldrb	r2, [r4, #21]
    a01e:	0212      	lsls	r2, r2, #8
    a020:	431a      	orrs	r2, r3
    a022:	7da3      	ldrb	r3, [r4, #22]
    a024:	041b      	lsls	r3, r3, #16
    a026:	431a      	orrs	r2, r3
    a028:	7de3      	ldrb	r3, [r4, #23]
    a02a:	061b      	lsls	r3, r3, #24
    a02c:	4313      	orrs	r3, r2
    a02e:	4a6c      	ldr	r2, [pc, #432]	; (a1e0 <setJoinDutyCycleTimer+0x26c>)
    a030:	4694      	mov	ip, r2
    a032:	4461      	add	r1, ip
    a034:	7119      	strb	r1, [r3, #4]
    a036:	0a0a      	lsrs	r2, r1, #8
    a038:	715a      	strb	r2, [r3, #5]
    a03a:	0c0a      	lsrs	r2, r1, #16
    a03c:	719a      	strb	r2, [r3, #6]
    a03e:	0e09      	lsrs	r1, r1, #24
    a040:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    a042:	7d23      	ldrb	r3, [r4, #20]
    a044:	7d62      	ldrb	r2, [r4, #21]
    a046:	0212      	lsls	r2, r2, #8
    a048:	431a      	orrs	r2, r3
    a04a:	7da3      	ldrb	r3, [r4, #22]
    a04c:	041b      	lsls	r3, r3, #16
    a04e:	431a      	orrs	r2, r3
    a050:	7de3      	ldrb	r3, [r4, #23]
    a052:	061b      	lsls	r3, r3, #24
    a054:	4313      	orrs	r3, r2
    a056:	7a18      	ldrb	r0, [r3, #8]
    a058:	2300      	movs	r3, #0
    a05a:	9300      	str	r3, [sp, #0]
    a05c:	4b61      	ldr	r3, [pc, #388]	; (a1e4 <setJoinDutyCycleTimer+0x270>)
    a05e:	2200      	movs	r2, #0
    a060:	4961      	ldr	r1, [pc, #388]	; (a1e8 <setJoinDutyCycleTimer+0x274>)
    a062:	4d62      	ldr	r5, [pc, #392]	; (a1ec <setJoinDutyCycleTimer+0x278>)
    a064:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    a066:	233f      	movs	r3, #63	; 0x3f
    a068:	5ce3      	ldrb	r3, [r4, r3]
    a06a:	2240      	movs	r2, #64	; 0x40
    a06c:	5ca2      	ldrb	r2, [r4, r2]
    a06e:	0212      	lsls	r2, r2, #8
    a070:	431a      	orrs	r2, r3
    a072:	2341      	movs	r3, #65	; 0x41
    a074:	5ce3      	ldrb	r3, [r4, r3]
    a076:	041b      	lsls	r3, r3, #16
    a078:	431a      	orrs	r2, r3
    a07a:	2342      	movs	r3, #66	; 0x42
    a07c:	5ce3      	ldrb	r3, [r4, r3]
    a07e:	061b      	lsls	r3, r3, #24
    a080:	4313      	orrs	r3, r2
    a082:	4a57      	ldr	r2, [pc, #348]	; (a1e0 <setJoinDutyCycleTimer+0x26c>)
    a084:	4694      	mov	ip, r2
    a086:	4463      	add	r3, ip
    a088:	343f      	adds	r4, #63	; 0x3f
    a08a:	7023      	strb	r3, [r4, #0]
    a08c:	0a1a      	lsrs	r2, r3, #8
    a08e:	7062      	strb	r2, [r4, #1]
    a090:	0c1a      	lsrs	r2, r3, #16
    a092:	70a2      	strb	r2, [r4, #2]
    a094:	0e1b      	lsrs	r3, r3, #24
    a096:	70e3      	strb	r3, [r4, #3]
    a098:	e094      	b.n	a1c4 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    a09a:	9a02      	ldr	r2, [sp, #8]
    a09c:	0053      	lsls	r3, r2, #1
    a09e:	189b      	adds	r3, r3, r2
    a0a0:	015a      	lsls	r2, r3, #5
    a0a2:	189b      	adds	r3, r3, r2
    a0a4:	4a4a      	ldr	r2, [pc, #296]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a0a6:	323f      	adds	r2, #63	; 0x3f
    a0a8:	7013      	strb	r3, [r2, #0]
    a0aa:	0a19      	lsrs	r1, r3, #8
    a0ac:	7051      	strb	r1, [r2, #1]
    a0ae:	0c19      	lsrs	r1, r3, #16
    a0b0:	7091      	strb	r1, [r2, #2]
    a0b2:	0e1b      	lsrs	r3, r3, #24
    a0b4:	70d3      	strb	r3, [r2, #3]
    a0b6:	e77d      	b.n	9fb4 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    a0b8:	4b4d      	ldr	r3, [pc, #308]	; (a1f0 <setJoinDutyCycleTimer+0x27c>)
    a0ba:	9a02      	ldr	r2, [sp, #8]
    a0bc:	4353      	muls	r3, r2
    a0be:	4a44      	ldr	r2, [pc, #272]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a0c0:	323f      	adds	r2, #63	; 0x3f
    a0c2:	7013      	strb	r3, [r2, #0]
    a0c4:	0a19      	lsrs	r1, r3, #8
    a0c6:	7051      	strb	r1, [r2, #1]
    a0c8:	0c19      	lsrs	r1, r3, #16
    a0ca:	7091      	strb	r1, [r2, #2]
    a0cc:	0e1b      	lsrs	r3, r3, #24
    a0ce:	70d3      	strb	r3, [r2, #3]
    a0d0:	e770      	b.n	9fb4 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    a0d2:	4c3f      	ldr	r4, [pc, #252]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a0d4:	7d23      	ldrb	r3, [r4, #20]
    a0d6:	7d62      	ldrb	r2, [r4, #21]
    a0d8:	0212      	lsls	r2, r2, #8
    a0da:	431a      	orrs	r2, r3
    a0dc:	7da3      	ldrb	r3, [r4, #22]
    a0de:	041b      	lsls	r3, r3, #16
    a0e0:	431a      	orrs	r2, r3
    a0e2:	7de3      	ldrb	r3, [r4, #23]
    a0e4:	061b      	lsls	r3, r3, #24
    a0e6:	4313      	orrs	r3, r2
    a0e8:	7a18      	ldrb	r0, [r3, #8]
    a0ea:	4b42      	ldr	r3, [pc, #264]	; (a1f4 <setJoinDutyCycleTimer+0x280>)
    a0ec:	4798      	blx	r3
    a0ee:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    a0f0:	7d23      	ldrb	r3, [r4, #20]
    a0f2:	7d62      	ldrb	r2, [r4, #21]
    a0f4:	0212      	lsls	r2, r2, #8
    a0f6:	431a      	orrs	r2, r3
    a0f8:	7da3      	ldrb	r3, [r4, #22]
    a0fa:	041b      	lsls	r3, r3, #16
    a0fc:	431a      	orrs	r2, r3
    a0fe:	7de3      	ldrb	r3, [r4, #23]
    a100:	061b      	lsls	r3, r3, #24
    a102:	4313      	orrs	r3, r2
    a104:	7a18      	ldrb	r0, [r3, #8]
    a106:	4b3c      	ldr	r3, [pc, #240]	; (a1f8 <setJoinDutyCycleTimer+0x284>)
    a108:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    a10a:	7d23      	ldrb	r3, [r4, #20]
    a10c:	7d62      	ldrb	r2, [r4, #21]
    a10e:	0212      	lsls	r2, r2, #8
    a110:	431a      	orrs	r2, r3
    a112:	7da3      	ldrb	r3, [r4, #22]
    a114:	041b      	lsls	r3, r3, #16
    a116:	431a      	orrs	r2, r3
    a118:	7de3      	ldrb	r3, [r4, #23]
    a11a:	061b      	lsls	r3, r3, #24
    a11c:	4313      	orrs	r3, r2
    a11e:	781a      	ldrb	r2, [r3, #0]
    a120:	785c      	ldrb	r4, [r3, #1]
    a122:	0224      	lsls	r4, r4, #8
    a124:	4322      	orrs	r2, r4
    a126:	789c      	ldrb	r4, [r3, #2]
    a128:	0424      	lsls	r4, r4, #16
    a12a:	4314      	orrs	r4, r2
    a12c:	78da      	ldrb	r2, [r3, #3]
    a12e:	0612      	lsls	r2, r2, #24
    a130:	4314      	orrs	r4, r2
    a132:	21fa      	movs	r1, #250	; 0xfa
    a134:	0089      	lsls	r1, r1, #2
    a136:	0028      	movs	r0, r5
    a138:	4b30      	ldr	r3, [pc, #192]	; (a1fc <setJoinDutyCycleTimer+0x288>)
    a13a:	4798      	blx	r3
    a13c:	1a24      	subs	r4, r4, r0
    a13e:	e74a      	b.n	9fd6 <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    a140:	20fa      	movs	r0, #250	; 0xfa
    a142:	0080      	lsls	r0, r0, #2
    a144:	4341      	muls	r1, r0
    a146:	4c22      	ldr	r4, [pc, #136]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a148:	7d23      	ldrb	r3, [r4, #20]
    a14a:	7d62      	ldrb	r2, [r4, #21]
    a14c:	0212      	lsls	r2, r2, #8
    a14e:	431a      	orrs	r2, r3
    a150:	7da3      	ldrb	r3, [r4, #22]
    a152:	041b      	lsls	r3, r3, #16
    a154:	431a      	orrs	r2, r3
    a156:	7de3      	ldrb	r3, [r4, #23]
    a158:	061b      	lsls	r3, r3, #24
    a15a:	4313      	orrs	r3, r2
    a15c:	7a18      	ldrb	r0, [r3, #8]
    a15e:	2300      	movs	r3, #0
    a160:	9300      	str	r3, [sp, #0]
    a162:	4b20      	ldr	r3, [pc, #128]	; (a1e4 <setJoinDutyCycleTimer+0x270>)
    a164:	2200      	movs	r2, #0
    a166:	4c21      	ldr	r4, [pc, #132]	; (a1ec <setJoinDutyCycleTimer+0x278>)
    a168:	47a0      	blx	r4
    a16a:	e02b      	b.n	a1c4 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    a16c:	4b18      	ldr	r3, [pc, #96]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a16e:	333f      	adds	r3, #63	; 0x3f
    a170:	2200      	movs	r2, #0
    a172:	701a      	strb	r2, [r3, #0]
    a174:	705a      	strb	r2, [r3, #1]
    a176:	709a      	strb	r2, [r3, #2]
    a178:	70da      	strb	r2, [r3, #3]
    a17a:	e023      	b.n	a1c4 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    a17c:	4c14      	ldr	r4, [pc, #80]	; (a1d0 <setJoinDutyCycleTimer+0x25c>)
    a17e:	7d23      	ldrb	r3, [r4, #20]
    a180:	7d62      	ldrb	r2, [r4, #21]
    a182:	0212      	lsls	r2, r2, #8
    a184:	431a      	orrs	r2, r3
    a186:	7da3      	ldrb	r3, [r4, #22]
    a188:	041b      	lsls	r3, r3, #16
    a18a:	431a      	orrs	r2, r3
    a18c:	7de3      	ldrb	r3, [r4, #23]
    a18e:	061b      	lsls	r3, r3, #24
    a190:	4313      	orrs	r3, r2
    a192:	7a18      	ldrb	r0, [r3, #8]
    a194:	4b18      	ldr	r3, [pc, #96]	; (a1f8 <setJoinDutyCycleTimer+0x284>)
    a196:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    a198:	0023      	movs	r3, r4
    a19a:	333f      	adds	r3, #63	; 0x3f
    a19c:	2200      	movs	r2, #0
    a19e:	701a      	strb	r2, [r3, #0]
    a1a0:	705a      	strb	r2, [r3, #1]
    a1a2:	709a      	strb	r2, [r3, #2]
    a1a4:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    a1a6:	7d23      	ldrb	r3, [r4, #20]
    a1a8:	7d62      	ldrb	r2, [r4, #21]
    a1aa:	0212      	lsls	r2, r2, #8
    a1ac:	431a      	orrs	r2, r3
    a1ae:	7da3      	ldrb	r3, [r4, #22]
    a1b0:	041b      	lsls	r3, r3, #16
    a1b2:	431a      	orrs	r2, r3
    a1b4:	7de3      	ldrb	r3, [r4, #23]
    a1b6:	061b      	lsls	r3, r3, #24
    a1b8:	4313      	orrs	r3, r2
    a1ba:	2200      	movs	r2, #0
    a1bc:	711a      	strb	r2, [r3, #4]
    a1be:	715a      	strb	r2, [r3, #5]
    a1c0:	719a      	strb	r2, [r3, #6]
    a1c2:	71da      	strb	r2, [r3, #7]
}
    a1c4:	2008      	movs	r0, #8
    a1c6:	b005      	add	sp, #20
    a1c8:	bd30      	pop	{r4, r5, pc}
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	00018655 	.word	0x00018655
    a1d0:	20002310 	.word	0x20002310
    a1d4:	000003e7 	.word	0x000003e7
    a1d8:	0000d715 	.word	0x0000d715
    a1dc:	0020c49b 	.word	0x0020c49b
    a1e0:	ffdf3b65 	.word	0xffdf3b65
    a1e4:	0000aaad 	.word	0x0000aaad
    a1e8:	7fffffff 	.word	0x7fffffff
    a1ec:	0000d57d 	.word	0x0000d57d
    a1f0:	0000270f 	.word	0x0000270f
    a1f4:	0000d729 	.word	0x0000d729
    a1f8:	0000d895 	.word	0x0000d895
    a1fc:	00014f51 	.word	0x00014f51

0000a200 <setDutyCycleTimer>:
{
    a200:	b5f0      	push	{r4, r5, r6, r7, lr}
    a202:	46de      	mov	lr, fp
    a204:	4657      	mov	r7, sl
    a206:	464e      	mov	r6, r9
    a208:	4645      	mov	r5, r8
    a20a:	b5e0      	push	{r5, r6, r7, lr}
    a20c:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    a20e:	2206      	movs	r2, #6
    a210:	a804      	add	r0, sp, #16
    a212:	4bc9      	ldr	r3, [pc, #804]	; (a538 <setDutyCycleTimer+0x338>)
    a214:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    a216:	49c9      	ldr	r1, [pc, #804]	; (a53c <setDutyCycleTimer+0x33c>)
    a218:	7a0b      	ldrb	r3, [r1, #8]
    a21a:	7a4a      	ldrb	r2, [r1, #9]
    a21c:	0212      	lsls	r2, r2, #8
    a21e:	4313      	orrs	r3, r2
    a220:	7a8a      	ldrb	r2, [r1, #10]
    a222:	0412      	lsls	r2, r2, #16
    a224:	431a      	orrs	r2, r3
    a226:	7acb      	ldrb	r3, [r1, #11]
    a228:	061b      	lsls	r3, r3, #24
    a22a:	431a      	orrs	r2, r3
    a22c:	2330      	movs	r3, #48	; 0x30
    a22e:	5cc9      	ldrb	r1, [r1, r3]
    a230:	004b      	lsls	r3, r1, #1
    a232:	185b      	adds	r3, r3, r1
    a234:	009b      	lsls	r3, r3, #2
    a236:	189b      	adds	r3, r3, r2
    a238:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    a23a:	2e00      	cmp	r6, #0
    a23c:	d105      	bne.n	a24a <setDutyCycleTimer+0x4a>
    a23e:	232f      	movs	r3, #47	; 0x2f
    a240:	4abe      	ldr	r2, [pc, #760]	; (a53c <setDutyCycleTimer+0x33c>)
    a242:	5cd3      	ldrb	r3, [r2, r3]
    a244:	2b05      	cmp	r3, #5
    a246:	d100      	bne.n	a24a <setDutyCycleTimer+0x4a>
    a248:	e163      	b.n	a512 <setDutyCycleTimer+0x312>
	if(updateDCTimer.joining != 1)
    a24a:	ab04      	add	r3, sp, #16
    a24c:	791b      	ldrb	r3, [r3, #4]
    a24e:	2b00      	cmp	r3, #0
    a250:	d16a      	bne.n	a328 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    a252:	a904      	add	r1, sp, #16
    a254:	880a      	ldrh	r2, [r1, #0]
    a256:	48b9      	ldr	r0, [pc, #740]	; (a53c <setDutyCycleTimer+0x33c>)
    a258:	7b07      	ldrb	r7, [r0, #12]
    a25a:	7b43      	ldrb	r3, [r0, #13]
    a25c:	021b      	lsls	r3, r3, #8
    a25e:	433b      	orrs	r3, r7
    a260:	7b87      	ldrb	r7, [r0, #14]
    a262:	043f      	lsls	r7, r7, #16
    a264:	431f      	orrs	r7, r3
    a266:	7bc4      	ldrb	r4, [r0, #15]
    a268:	0624      	lsls	r4, r4, #24
    a26a:	4327      	orrs	r7, r4
    a26c:	0074      	lsls	r4, r6, #1
    a26e:	19a4      	adds	r4, r4, r6
    a270:	00a4      	lsls	r4, r4, #2
    a272:	0035      	movs	r5, r6
    a274:	35d4      	adds	r5, #212	; 0xd4
    a276:	006d      	lsls	r5, r5, #1
    a278:	1945      	adds	r5, r0, r5
    a27a:	79ab      	ldrb	r3, [r5, #6]
    a27c:	469c      	mov	ip, r3
    a27e:	79eb      	ldrb	r3, [r5, #7]
    a280:	021b      	lsls	r3, r3, #8
    a282:	4665      	mov	r5, ip
    a284:	432b      	orrs	r3, r5
    a286:	3b01      	subs	r3, #1
    a288:	4353      	muls	r3, r2
    a28a:	19e4      	adds	r4, r4, r7
    a28c:	7223      	strb	r3, [r4, #8]
    a28e:	0a1d      	lsrs	r5, r3, #8
    a290:	7265      	strb	r5, [r4, #9]
    a292:	0c1d      	lsrs	r5, r3, #16
    a294:	72a5      	strb	r5, [r4, #10]
    a296:	0e1b      	lsrs	r3, r3, #24
    a298:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    a29a:	884b      	ldrh	r3, [r1, #2]
    a29c:	3b01      	subs	r3, #1
    a29e:	435a      	muls	r2, r3
    a2a0:	23dd      	movs	r3, #221	; 0xdd
    a2a2:	005b      	lsls	r3, r3, #1
    a2a4:	54c2      	strb	r2, [r0, r3]
    a2a6:	0a11      	lsrs	r1, r2, #8
    a2a8:	18c0      	adds	r0, r0, r3
    a2aa:	7041      	strb	r1, [r0, #1]
    a2ac:	0c11      	lsrs	r1, r2, #16
    a2ae:	7081      	strb	r1, [r0, #2]
    a2b0:	0e12      	lsrs	r2, r2, #24
    a2b2:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    a2b4:	49a1      	ldr	r1, [pc, #644]	; (a53c <setDutyCycleTimer+0x33c>)
    a2b6:	7c0b      	ldrb	r3, [r1, #16]
    a2b8:	7c4a      	ldrb	r2, [r1, #17]
    a2ba:	0212      	lsls	r2, r2, #8
    a2bc:	431a      	orrs	r2, r3
    a2be:	7c8b      	ldrb	r3, [r1, #18]
    a2c0:	041b      	lsls	r3, r3, #16
    a2c2:	431a      	orrs	r2, r3
    a2c4:	7ccb      	ldrb	r3, [r1, #19]
    a2c6:	061b      	lsls	r3, r3, #24
    a2c8:	4313      	orrs	r3, r2
    a2ca:	7918      	ldrb	r0, [r3, #4]
    a2cc:	4b9c      	ldr	r3, [pc, #624]	; (a540 <setDutyCycleTimer+0x340>)
    a2ce:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    a2d0:	2300      	movs	r3, #0
    a2d2:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    a2d4:	2800      	cmp	r0, #0
    a2d6:	d136      	bne.n	a346 <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    a2d8:	4a98      	ldr	r2, [pc, #608]	; (a53c <setDutyCycleTimer+0x33c>)
    a2da:	7b13      	ldrb	r3, [r2, #12]
    a2dc:	7b51      	ldrb	r1, [r2, #13]
    a2de:	0209      	lsls	r1, r1, #8
    a2e0:	430b      	orrs	r3, r1
    a2e2:	7b91      	ldrb	r1, [r2, #14]
    a2e4:	0409      	lsls	r1, r1, #16
    a2e6:	4319      	orrs	r1, r3
    a2e8:	7bd3      	ldrb	r3, [r2, #15]
    a2ea:	061b      	lsls	r3, r3, #24
    a2ec:	4319      	orrs	r1, r3
    a2ee:	0073      	lsls	r3, r6, #1
    a2f0:	199b      	adds	r3, r3, r6
    a2f2:	009b      	lsls	r3, r3, #2
    a2f4:	185b      	adds	r3, r3, r1
    a2f6:	7a18      	ldrb	r0, [r3, #8]
    a2f8:	7a59      	ldrb	r1, [r3, #9]
    a2fa:	0209      	lsls	r1, r1, #8
    a2fc:	4301      	orrs	r1, r0
    a2fe:	7a98      	ldrb	r0, [r3, #10]
    a300:	0400      	lsls	r0, r0, #16
    a302:	4301      	orrs	r1, r0
    a304:	7ad8      	ldrb	r0, [r3, #11]
    a306:	0600      	lsls	r0, r0, #24
    a308:	4308      	orrs	r0, r1
    a30a:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    a30c:	2329      	movs	r3, #41	; 0x29
    a30e:	5cd3      	ldrb	r3, [r2, r3]
    a310:	2b00      	cmp	r3, #0
    a312:	d100      	bne.n	a316 <setDutyCycleTimer+0x116>
    a314:	e09c      	b.n	a450 <setDutyCycleTimer+0x250>
    a316:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    a318:	4d88      	ldr	r5, [pc, #544]	; (a53c <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    a31a:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    a31c:	2300      	movs	r3, #0
    a31e:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    a320:	46a8      	mov	r8, r5
    a322:	2329      	movs	r3, #41	; 0x29
    a324:	469c      	mov	ip, r3
    a326:	e051      	b.n	a3cc <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    a328:	a904      	add	r1, sp, #16
    a32a:	884a      	ldrh	r2, [r1, #2]
    a32c:	3a01      	subs	r2, #1
    a32e:	880b      	ldrh	r3, [r1, #0]
    a330:	4353      	muls	r3, r2
    a332:	4a82      	ldr	r2, [pc, #520]	; (a53c <setDutyCycleTimer+0x33c>)
    a334:	323f      	adds	r2, #63	; 0x3f
    a336:	7013      	strb	r3, [r2, #0]
    a338:	0a19      	lsrs	r1, r3, #8
    a33a:	7051      	strb	r1, [r2, #1]
    a33c:	0c19      	lsrs	r1, r3, #16
    a33e:	7091      	strb	r1, [r2, #2]
    a340:	0e1b      	lsrs	r3, r3, #24
    a342:	70d3      	strb	r3, [r2, #3]
    a344:	e7b6      	b.n	a2b4 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    a346:	4c7d      	ldr	r4, [pc, #500]	; (a53c <setDutyCycleTimer+0x33c>)
    a348:	7c23      	ldrb	r3, [r4, #16]
    a34a:	7c62      	ldrb	r2, [r4, #17]
    a34c:	0212      	lsls	r2, r2, #8
    a34e:	431a      	orrs	r2, r3
    a350:	7ca3      	ldrb	r3, [r4, #18]
    a352:	041b      	lsls	r3, r3, #16
    a354:	431a      	orrs	r2, r3
    a356:	7ce3      	ldrb	r3, [r4, #19]
    a358:	061b      	lsls	r3, r3, #24
    a35a:	4313      	orrs	r3, r2
    a35c:	7918      	ldrb	r0, [r3, #4]
    a35e:	4b79      	ldr	r3, [pc, #484]	; (a544 <setDutyCycleTimer+0x344>)
    a360:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    a362:	7c23      	ldrb	r3, [r4, #16]
    a364:	7c62      	ldrb	r2, [r4, #17]
    a366:	0212      	lsls	r2, r2, #8
    a368:	431a      	orrs	r2, r3
    a36a:	7ca3      	ldrb	r3, [r4, #18]
    a36c:	041b      	lsls	r3, r3, #16
    a36e:	431a      	orrs	r2, r3
    a370:	7ce3      	ldrb	r3, [r4, #19]
    a372:	061b      	lsls	r3, r3, #24
    a374:	4313      	orrs	r3, r2
    a376:	7918      	ldrb	r0, [r3, #4]
    a378:	4b73      	ldr	r3, [pc, #460]	; (a548 <setDutyCycleTimer+0x348>)
    a37a:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    a37c:	7c23      	ldrb	r3, [r4, #16]
    a37e:	7c62      	ldrb	r2, [r4, #17]
    a380:	0212      	lsls	r2, r2, #8
    a382:	431a      	orrs	r2, r3
    a384:	7ca3      	ldrb	r3, [r4, #18]
    a386:	041b      	lsls	r3, r3, #16
    a388:	431a      	orrs	r2, r3
    a38a:	7ce3      	ldrb	r3, [r4, #19]
    a38c:	061b      	lsls	r3, r3, #24
    a38e:	4313      	orrs	r3, r2
    a390:	781c      	ldrb	r4, [r3, #0]
    a392:	785a      	ldrb	r2, [r3, #1]
    a394:	0212      	lsls	r2, r2, #8
    a396:	4322      	orrs	r2, r4
    a398:	789c      	ldrb	r4, [r3, #2]
    a39a:	0424      	lsls	r4, r4, #16
    a39c:	4322      	orrs	r2, r4
    a39e:	78dc      	ldrb	r4, [r3, #3]
    a3a0:	0624      	lsls	r4, r4, #24
    a3a2:	4314      	orrs	r4, r2
    a3a4:	21fa      	movs	r1, #250	; 0xfa
    a3a6:	0089      	lsls	r1, r1, #2
    a3a8:	4b68      	ldr	r3, [pc, #416]	; (a54c <setDutyCycleTimer+0x34c>)
    a3aa:	4798      	blx	r3
    a3ac:	1a23      	subs	r3, r4, r0
    a3ae:	4699      	mov	r9, r3
    a3b0:	e792      	b.n	a2d8 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    a3b2:	4651      	mov	r1, sl
    a3b4:	7219      	strb	r1, [r3, #8]
    a3b6:	7259      	strb	r1, [r3, #9]
    a3b8:	7299      	strb	r1, [r3, #10]
    a3ba:	72d9      	strb	r1, [r3, #11]
    a3bc:	e02c      	b.n	a418 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    a3be:	3201      	adds	r2, #1
    a3c0:	b2d2      	uxtb	r2, r2
    a3c2:	4643      	mov	r3, r8
    a3c4:	4661      	mov	r1, ip
    a3c6:	5c5b      	ldrb	r3, [r3, r1]
    a3c8:	4293      	cmp	r3, r2
    a3ca:	d941      	bls.n	a450 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    a3cc:	4296      	cmp	r6, r2
    a3ce:	d0f6      	beq.n	a3be <setDutyCycleTimer+0x1be>
    a3d0:	0054      	lsls	r4, r2, #1
    a3d2:	18a4      	adds	r4, r4, r2
    a3d4:	00a4      	lsls	r4, r4, #2
    a3d6:	7b2b      	ldrb	r3, [r5, #12]
    a3d8:	7b69      	ldrb	r1, [r5, #13]
    a3da:	0209      	lsls	r1, r1, #8
    a3dc:	4319      	orrs	r1, r3
    a3de:	7bab      	ldrb	r3, [r5, #14]
    a3e0:	041b      	lsls	r3, r3, #16
    a3e2:	4319      	orrs	r1, r3
    a3e4:	7beb      	ldrb	r3, [r5, #15]
    a3e6:	061b      	lsls	r3, r3, #24
    a3e8:	430b      	orrs	r3, r1
    a3ea:	191b      	adds	r3, r3, r4
    a3ec:	7a18      	ldrb	r0, [r3, #8]
    a3ee:	7a59      	ldrb	r1, [r3, #9]
    a3f0:	0209      	lsls	r1, r1, #8
    a3f2:	4301      	orrs	r1, r0
    a3f4:	7a98      	ldrb	r0, [r3, #10]
    a3f6:	0400      	lsls	r0, r0, #16
    a3f8:	4308      	orrs	r0, r1
    a3fa:	7ad9      	ldrb	r1, [r3, #11]
    a3fc:	0609      	lsls	r1, r1, #24
    a3fe:	4301      	orrs	r1, r0
    a400:	d0dd      	beq.n	a3be <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    a402:	4589      	cmp	r9, r1
    a404:	d2d5      	bcs.n	a3b2 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    a406:	4648      	mov	r0, r9
    a408:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    a40a:	7219      	strb	r1, [r3, #8]
    a40c:	0a08      	lsrs	r0, r1, #8
    a40e:	7258      	strb	r0, [r3, #9]
    a410:	0c08      	lsrs	r0, r1, #16
    a412:	7298      	strb	r0, [r3, #10]
    a414:	0e09      	lsrs	r1, r1, #24
    a416:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    a418:	7b3b      	ldrb	r3, [r7, #12]
    a41a:	7b79      	ldrb	r1, [r7, #13]
    a41c:	0209      	lsls	r1, r1, #8
    a41e:	4319      	orrs	r1, r3
    a420:	7bbb      	ldrb	r3, [r7, #14]
    a422:	041b      	lsls	r3, r3, #16
    a424:	4319      	orrs	r1, r3
    a426:	7bfb      	ldrb	r3, [r7, #15]
    a428:	061b      	lsls	r3, r3, #24
    a42a:	430b      	orrs	r3, r1
    a42c:	191c      	adds	r4, r3, r4
    a42e:	7a23      	ldrb	r3, [r4, #8]
    a430:	7a61      	ldrb	r1, [r4, #9]
    a432:	0209      	lsls	r1, r1, #8
    a434:	4319      	orrs	r1, r3
    a436:	7aa3      	ldrb	r3, [r4, #10]
    a438:	041b      	lsls	r3, r3, #16
    a43a:	4319      	orrs	r1, r3
    a43c:	7ae3      	ldrb	r3, [r4, #11]
    a43e:	061b      	lsls	r3, r3, #24
    a440:	430b      	orrs	r3, r1
    a442:	9903      	ldr	r1, [sp, #12]
    a444:	428b      	cmp	r3, r1
    a446:	d8ba      	bhi.n	a3be <setDutyCycleTimer+0x1be>
    a448:	2b00      	cmp	r3, #0
    a44a:	d0b8      	beq.n	a3be <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    a44c:	9303      	str	r3, [sp, #12]
    a44e:	e7b6      	b.n	a3be <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    a450:	493a      	ldr	r1, [pc, #232]	; (a53c <setDutyCycleTimer+0x33c>)
    a452:	23dd      	movs	r3, #221	; 0xdd
    a454:	005b      	lsls	r3, r3, #1
    a456:	5ccb      	ldrb	r3, [r1, r3]
    a458:	22bc      	movs	r2, #188	; 0xbc
    a45a:	32ff      	adds	r2, #255	; 0xff
    a45c:	5c8a      	ldrb	r2, [r1, r2]
    a45e:	0212      	lsls	r2, r2, #8
    a460:	431a      	orrs	r2, r3
    a462:	23de      	movs	r3, #222	; 0xde
    a464:	005b      	lsls	r3, r3, #1
    a466:	5ccb      	ldrb	r3, [r1, r3]
    a468:	041b      	lsls	r3, r3, #16
    a46a:	431a      	orrs	r2, r3
    a46c:	23be      	movs	r3, #190	; 0xbe
    a46e:	33ff      	adds	r3, #255	; 0xff
    a470:	5ccb      	ldrb	r3, [r1, r3]
    a472:	061b      	lsls	r3, r3, #24
    a474:	4313      	orrs	r3, r2
    a476:	d00f      	beq.n	a498 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    a478:	4599      	cmp	r9, r3
    a47a:	d252      	bcs.n	a522 <setDutyCycleTimer+0x322>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    a47c:	000a      	movs	r2, r1
    a47e:	4649      	mov	r1, r9
    a480:	1a5b      	subs	r3, r3, r1
    a482:	21dd      	movs	r1, #221	; 0xdd
    a484:	0049      	lsls	r1, r1, #1
    a486:	5453      	strb	r3, [r2, r1]
    a488:	0a19      	lsrs	r1, r3, #8
    a48a:	32bb      	adds	r2, #187	; 0xbb
    a48c:	32ff      	adds	r2, #255	; 0xff
    a48e:	7051      	strb	r1, [r2, #1]
    a490:	0c19      	lsrs	r1, r3, #16
    a492:	7091      	strb	r1, [r2, #2]
    a494:	0e1b      	lsrs	r3, r3, #24
    a496:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    a498:	4a28      	ldr	r2, [pc, #160]	; (a53c <setDutyCycleTimer+0x33c>)
    a49a:	23dd      	movs	r3, #221	; 0xdd
    a49c:	005b      	lsls	r3, r3, #1
    a49e:	5cd1      	ldrb	r1, [r2, r3]
    a4a0:	23bc      	movs	r3, #188	; 0xbc
    a4a2:	33ff      	adds	r3, #255	; 0xff
    a4a4:	5cd3      	ldrb	r3, [r2, r3]
    a4a6:	021b      	lsls	r3, r3, #8
    a4a8:	430b      	orrs	r3, r1
    a4aa:	21de      	movs	r1, #222	; 0xde
    a4ac:	0049      	lsls	r1, r1, #1
    a4ae:	5c51      	ldrb	r1, [r2, r1]
    a4b0:	0409      	lsls	r1, r1, #16
    a4b2:	430b      	orrs	r3, r1
    a4b4:	21be      	movs	r1, #190	; 0xbe
    a4b6:	31ff      	adds	r1, #255	; 0xff
    a4b8:	5c51      	ldrb	r1, [r2, r1]
    a4ba:	0609      	lsls	r1, r1, #24
    a4bc:	4319      	orrs	r1, r3
    a4be:	9a03      	ldr	r2, [sp, #12]
    a4c0:	4291      	cmp	r1, r2
    a4c2:	d200      	bcs.n	a4c6 <setDutyCycleTimer+0x2c6>
    a4c4:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    a4c6:	4b1d      	ldr	r3, [pc, #116]	; (a53c <setDutyCycleTimer+0x33c>)
    a4c8:	7c1a      	ldrb	r2, [r3, #16]
    a4ca:	7c58      	ldrb	r0, [r3, #17]
    a4cc:	0200      	lsls	r0, r0, #8
    a4ce:	4310      	orrs	r0, r2
    a4d0:	7c9a      	ldrb	r2, [r3, #18]
    a4d2:	0412      	lsls	r2, r2, #16
    a4d4:	4310      	orrs	r0, r2
    a4d6:	7cda      	ldrb	r2, [r3, #19]
    a4d8:	0612      	lsls	r2, r2, #24
    a4da:	4302      	orrs	r2, r0
    a4dc:	7011      	strb	r1, [r2, #0]
    a4de:	0a08      	lsrs	r0, r1, #8
    a4e0:	7050      	strb	r0, [r2, #1]
    a4e2:	0c08      	lsrs	r0, r1, #16
    a4e4:	7090      	strb	r0, [r2, #2]
    a4e6:	0e08      	lsrs	r0, r1, #24
    a4e8:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    a4ea:	22fa      	movs	r2, #250	; 0xfa
    a4ec:	0092      	lsls	r2, r2, #2
    a4ee:	4351      	muls	r1, r2
    a4f0:	7c18      	ldrb	r0, [r3, #16]
    a4f2:	7c5a      	ldrb	r2, [r3, #17]
    a4f4:	0212      	lsls	r2, r2, #8
    a4f6:	4310      	orrs	r0, r2
    a4f8:	7c9a      	ldrb	r2, [r3, #18]
    a4fa:	0412      	lsls	r2, r2, #16
    a4fc:	4302      	orrs	r2, r0
    a4fe:	7cdb      	ldrb	r3, [r3, #19]
    a500:	061b      	lsls	r3, r3, #24
    a502:	4313      	orrs	r3, r2
    a504:	7918      	ldrb	r0, [r3, #4]
    a506:	2300      	movs	r3, #0
    a508:	9300      	str	r3, [sp, #0]
    a50a:	4b11      	ldr	r3, [pc, #68]	; (a550 <setDutyCycleTimer+0x350>)
    a50c:	2200      	movs	r2, #0
    a50e:	4c11      	ldr	r4, [pc, #68]	; (a554 <setDutyCycleTimer+0x354>)
    a510:	47a0      	blx	r4
}
    a512:	2008      	movs	r0, #8
    a514:	b007      	add	sp, #28
    a516:	bc3c      	pop	{r2, r3, r4, r5}
    a518:	4690      	mov	r8, r2
    a51a:	4699      	mov	r9, r3
    a51c:	46a2      	mov	sl, r4
    a51e:	46ab      	mov	fp, r5
    a520:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    a522:	4b06      	ldr	r3, [pc, #24]	; (a53c <setDutyCycleTimer+0x33c>)
    a524:	2100      	movs	r1, #0
    a526:	22dd      	movs	r2, #221	; 0xdd
    a528:	0052      	lsls	r2, r2, #1
    a52a:	5499      	strb	r1, [r3, r2]
    a52c:	189b      	adds	r3, r3, r2
    a52e:	2200      	movs	r2, #0
    a530:	705a      	strb	r2, [r3, #1]
    a532:	709a      	strb	r2, [r3, #2]
    a534:	70da      	strb	r2, [r3, #3]
    a536:	e7af      	b.n	a498 <setDutyCycleTimer+0x298>
    a538:	00018655 	.word	0x00018655
    a53c:	20002310 	.word	0x20002310
    a540:	0000d715 	.word	0x0000d715
    a544:	0000d895 	.word	0x0000d895
    a548:	0000d729 	.word	0x0000d729
    a54c:	00014f51 	.word	0x00014f51
    a550:	0000a559 	.word	0x0000a559
    a554:	0000d57d 	.word	0x0000d57d

0000a558 <DutyCycleCallback>:
{
    a558:	b5f0      	push	{r4, r5, r6, r7, lr}
    a55a:	46de      	mov	lr, fp
    a55c:	4657      	mov	r7, sl
    a55e:	464e      	mov	r6, r9
    a560:	4645      	mov	r5, r8
    a562:	b5e0      	push	{r5, r6, r7, lr}
    a564:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    a566:	4980      	ldr	r1, [pc, #512]	; (a768 <DutyCycleCallback+0x210>)
    a568:	23dd      	movs	r3, #221	; 0xdd
    a56a:	005b      	lsls	r3, r3, #1
    a56c:	5cca      	ldrb	r2, [r1, r3]
    a56e:	23bc      	movs	r3, #188	; 0xbc
    a570:	33ff      	adds	r3, #255	; 0xff
    a572:	5ccb      	ldrb	r3, [r1, r3]
    a574:	021b      	lsls	r3, r3, #8
    a576:	431a      	orrs	r2, r3
    a578:	23de      	movs	r3, #222	; 0xde
    a57a:	005b      	lsls	r3, r3, #1
    a57c:	5ccb      	ldrb	r3, [r1, r3]
    a57e:	041b      	lsls	r3, r3, #16
    a580:	4313      	orrs	r3, r2
    a582:	22be      	movs	r2, #190	; 0xbe
    a584:	32ff      	adds	r2, #255	; 0xff
    a586:	5c8a      	ldrb	r2, [r1, r2]
    a588:	0612      	lsls	r2, r2, #24
    a58a:	431a      	orrs	r2, r3
    a58c:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    a58e:	2329      	movs	r3, #41	; 0x29
    a590:	5ccb      	ldrb	r3, [r1, r3]
    a592:	2b00      	cmp	r3, #0
    a594:	d100      	bne.n	a598 <DutyCycleCallback+0x40>
    a596:	e0df      	b.n	a758 <DutyCycleCallback+0x200>
    a598:	2600      	movs	r6, #0
    a59a:	2300      	movs	r3, #0
    a59c:	9304      	str	r3, [sp, #16]
    a59e:	3b01      	subs	r3, #1
    a5a0:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    a5a2:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    a5a4:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    a5a6:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    a5a8:	2300      	movs	r3, #0
    a5aa:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    a5ac:	468a      	mov	sl, r1
    a5ae:	2329      	movs	r3, #41	; 0x29
    a5b0:	4699      	mov	r9, r3
    a5b2:	e00c      	b.n	a5ce <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    a5b4:	465a      	mov	r2, fp
    a5b6:	721a      	strb	r2, [r3, #8]
    a5b8:	725a      	strb	r2, [r3, #9]
    a5ba:	729a      	strb	r2, [r3, #10]
    a5bc:	72da      	strb	r2, [r3, #11]
    a5be:	e03f      	b.n	a640 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    a5c0:	3601      	adds	r6, #1
    a5c2:	b2f6      	uxtb	r6, r6
    a5c4:	4653      	mov	r3, sl
    a5c6:	464a      	mov	r2, r9
    a5c8:	5c9b      	ldrb	r3, [r3, r2]
    a5ca:	42b3      	cmp	r3, r6
    a5cc:	d95a      	bls.n	a684 <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    a5ce:	0071      	lsls	r1, r6, #1
    a5d0:	1989      	adds	r1, r1, r6
    a5d2:	0089      	lsls	r1, r1, #2
    a5d4:	7b3b      	ldrb	r3, [r7, #12]
    a5d6:	7b7a      	ldrb	r2, [r7, #13]
    a5d8:	0212      	lsls	r2, r2, #8
    a5da:	431a      	orrs	r2, r3
    a5dc:	7bbb      	ldrb	r3, [r7, #14]
    a5de:	041b      	lsls	r3, r3, #16
    a5e0:	431a      	orrs	r2, r3
    a5e2:	7bfb      	ldrb	r3, [r7, #15]
    a5e4:	061b      	lsls	r3, r3, #24
    a5e6:	4313      	orrs	r3, r2
    a5e8:	185b      	adds	r3, r3, r1
    a5ea:	7a1a      	ldrb	r2, [r3, #8]
    a5ec:	7a58      	ldrb	r0, [r3, #9]
    a5ee:	0200      	lsls	r0, r0, #8
    a5f0:	4310      	orrs	r0, r2
    a5f2:	7a9a      	ldrb	r2, [r3, #10]
    a5f4:	0412      	lsls	r2, r2, #16
    a5f6:	4310      	orrs	r0, r2
    a5f8:	7ada      	ldrb	r2, [r3, #11]
    a5fa:	0612      	lsls	r2, r2, #24
    a5fc:	4302      	orrs	r2, r0
    a5fe:	d0df      	beq.n	a5c0 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    a600:	4640      	mov	r0, r8
    a602:	7c05      	ldrb	r5, [r0, #16]
    a604:	7c44      	ldrb	r4, [r0, #17]
    a606:	0224      	lsls	r4, r4, #8
    a608:	4325      	orrs	r5, r4
    a60a:	7c80      	ldrb	r0, [r0, #18]
    a60c:	0400      	lsls	r0, r0, #16
    a60e:	4305      	orrs	r5, r0
    a610:	4640      	mov	r0, r8
    a612:	7cc0      	ldrb	r0, [r0, #19]
    a614:	0600      	lsls	r0, r0, #24
    a616:	4328      	orrs	r0, r5
    a618:	7804      	ldrb	r4, [r0, #0]
    a61a:	7845      	ldrb	r5, [r0, #1]
    a61c:	022d      	lsls	r5, r5, #8
    a61e:	4325      	orrs	r5, r4
    a620:	7884      	ldrb	r4, [r0, #2]
    a622:	0424      	lsls	r4, r4, #16
    a624:	4325      	orrs	r5, r4
    a626:	78c4      	ldrb	r4, [r0, #3]
    a628:	0624      	lsls	r4, r4, #24
    a62a:	432c      	orrs	r4, r5
    a62c:	42a2      	cmp	r2, r4
    a62e:	d9c1      	bls.n	a5b4 <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    a630:	1b12      	subs	r2, r2, r4
    a632:	721a      	strb	r2, [r3, #8]
    a634:	0a10      	lsrs	r0, r2, #8
    a636:	7258      	strb	r0, [r3, #9]
    a638:	0c10      	lsrs	r0, r2, #16
    a63a:	7298      	strb	r0, [r3, #10]
    a63c:	0e12      	lsrs	r2, r2, #24
    a63e:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    a640:	4663      	mov	r3, ip
    a642:	7b1b      	ldrb	r3, [r3, #12]
    a644:	4662      	mov	r2, ip
    a646:	7b52      	ldrb	r2, [r2, #13]
    a648:	0212      	lsls	r2, r2, #8
    a64a:	431a      	orrs	r2, r3
    a64c:	4663      	mov	r3, ip
    a64e:	7b9b      	ldrb	r3, [r3, #14]
    a650:	041b      	lsls	r3, r3, #16
    a652:	431a      	orrs	r2, r3
    a654:	4663      	mov	r3, ip
    a656:	7bdb      	ldrb	r3, [r3, #15]
    a658:	061b      	lsls	r3, r3, #24
    a65a:	4313      	orrs	r3, r2
    a65c:	1859      	adds	r1, r3, r1
    a65e:	7a0b      	ldrb	r3, [r1, #8]
    a660:	7a4a      	ldrb	r2, [r1, #9]
    a662:	0212      	lsls	r2, r2, #8
    a664:	431a      	orrs	r2, r3
    a666:	7a8b      	ldrb	r3, [r1, #10]
    a668:	041b      	lsls	r3, r3, #16
    a66a:	431a      	orrs	r2, r3
    a66c:	7acb      	ldrb	r3, [r1, #11]
    a66e:	061b      	lsls	r3, r3, #24
    a670:	4313      	orrs	r3, r2
    a672:	9a03      	ldr	r2, [sp, #12]
    a674:	4293      	cmp	r3, r2
    a676:	d8a3      	bhi.n	a5c0 <DutyCycleCallback+0x68>
    a678:	2b00      	cmp	r3, #0
    a67a:	d0a1      	beq.n	a5c0 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    a67c:	9303      	str	r3, [sp, #12]
                found = 1;
    a67e:	2301      	movs	r3, #1
    a680:	9304      	str	r3, [sp, #16]
    a682:	e79d      	b.n	a5c0 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    a684:	9b05      	ldr	r3, [sp, #20]
    a686:	2b00      	cmp	r3, #0
    a688:	d031      	beq.n	a6ee <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    a68a:	4937      	ldr	r1, [pc, #220]	; (a768 <DutyCycleCallback+0x210>)
    a68c:	7c0b      	ldrb	r3, [r1, #16]
    a68e:	7c4a      	ldrb	r2, [r1, #17]
    a690:	0212      	lsls	r2, r2, #8
    a692:	431a      	orrs	r2, r3
    a694:	7c8b      	ldrb	r3, [r1, #18]
    a696:	041b      	lsls	r3, r3, #16
    a698:	431a      	orrs	r2, r3
    a69a:	7ccb      	ldrb	r3, [r1, #19]
    a69c:	061b      	lsls	r3, r3, #24
    a69e:	4313      	orrs	r3, r2
    a6a0:	7819      	ldrb	r1, [r3, #0]
    a6a2:	785a      	ldrb	r2, [r3, #1]
    a6a4:	0212      	lsls	r2, r2, #8
    a6a6:	430a      	orrs	r2, r1
    a6a8:	7899      	ldrb	r1, [r3, #2]
    a6aa:	0409      	lsls	r1, r1, #16
    a6ac:	430a      	orrs	r2, r1
    a6ae:	78d9      	ldrb	r1, [r3, #3]
    a6b0:	0609      	lsls	r1, r1, #24
    a6b2:	4311      	orrs	r1, r2
    a6b4:	9a05      	ldr	r2, [sp, #20]
    a6b6:	428a      	cmp	r2, r1
    a6b8:	d90f      	bls.n	a6da <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    a6ba:	1a51      	subs	r1, r2, r1
    a6bc:	4b2a      	ldr	r3, [pc, #168]	; (a768 <DutyCycleCallback+0x210>)
    a6be:	22dd      	movs	r2, #221	; 0xdd
    a6c0:	0052      	lsls	r2, r2, #1
    a6c2:	5499      	strb	r1, [r3, r2]
    a6c4:	0a0a      	lsrs	r2, r1, #8
    a6c6:	33bb      	adds	r3, #187	; 0xbb
    a6c8:	33ff      	adds	r3, #255	; 0xff
    a6ca:	705a      	strb	r2, [r3, #1]
    a6cc:	0c0a      	lsrs	r2, r1, #16
    a6ce:	709a      	strb	r2, [r3, #2]
    a6d0:	0e0a      	lsrs	r2, r1, #24
    a6d2:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    a6d4:	2900      	cmp	r1, #0
    a6d6:	d10e      	bne.n	a6f6 <DutyCycleCallback+0x19e>
    a6d8:	e009      	b.n	a6ee <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    a6da:	4b23      	ldr	r3, [pc, #140]	; (a768 <DutyCycleCallback+0x210>)
    a6dc:	2100      	movs	r1, #0
    a6de:	22dd      	movs	r2, #221	; 0xdd
    a6e0:	0052      	lsls	r2, r2, #1
    a6e2:	5499      	strb	r1, [r3, r2]
    a6e4:	189b      	adds	r3, r3, r2
    a6e6:	2200      	movs	r2, #0
    a6e8:	705a      	strb	r2, [r3, #1]
    a6ea:	709a      	strb	r2, [r3, #2]
    a6ec:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    a6ee:	9b04      	ldr	r3, [sp, #16]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d02a      	beq.n	a74a <DutyCycleCallback+0x1f2>
    a6f4:	2100      	movs	r1, #0
    a6f6:	9a03      	ldr	r2, [sp, #12]
    a6f8:	4291      	cmp	r1, r2
    a6fa:	d200      	bcs.n	a6fe <DutyCycleCallback+0x1a6>
    a6fc:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    a6fe:	4b1a      	ldr	r3, [pc, #104]	; (a768 <DutyCycleCallback+0x210>)
    a700:	7c1a      	ldrb	r2, [r3, #16]
    a702:	7c58      	ldrb	r0, [r3, #17]
    a704:	0200      	lsls	r0, r0, #8
    a706:	4310      	orrs	r0, r2
    a708:	7c9a      	ldrb	r2, [r3, #18]
    a70a:	0412      	lsls	r2, r2, #16
    a70c:	4310      	orrs	r0, r2
    a70e:	7cda      	ldrb	r2, [r3, #19]
    a710:	0612      	lsls	r2, r2, #24
    a712:	4302      	orrs	r2, r0
    a714:	7011      	strb	r1, [r2, #0]
    a716:	0a08      	lsrs	r0, r1, #8
    a718:	7050      	strb	r0, [r2, #1]
    a71a:	0c08      	lsrs	r0, r1, #16
    a71c:	7090      	strb	r0, [r2, #2]
    a71e:	0e08      	lsrs	r0, r1, #24
    a720:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    a722:	22fa      	movs	r2, #250	; 0xfa
    a724:	0092      	lsls	r2, r2, #2
    a726:	4351      	muls	r1, r2
    a728:	7c18      	ldrb	r0, [r3, #16]
    a72a:	7c5a      	ldrb	r2, [r3, #17]
    a72c:	0212      	lsls	r2, r2, #8
    a72e:	4310      	orrs	r0, r2
    a730:	7c9a      	ldrb	r2, [r3, #18]
    a732:	0412      	lsls	r2, r2, #16
    a734:	4302      	orrs	r2, r0
    a736:	7cdb      	ldrb	r3, [r3, #19]
    a738:	061b      	lsls	r3, r3, #24
    a73a:	4313      	orrs	r3, r2
    a73c:	7918      	ldrb	r0, [r3, #4]
    a73e:	2300      	movs	r3, #0
    a740:	9300      	str	r3, [sp, #0]
    a742:	4b0a      	ldr	r3, [pc, #40]	; (a76c <DutyCycleCallback+0x214>)
    a744:	2200      	movs	r2, #0
    a746:	4c0a      	ldr	r4, [pc, #40]	; (a770 <DutyCycleCallback+0x218>)
    a748:	47a0      	blx	r4
}
    a74a:	b007      	add	sp, #28
    a74c:	bc3c      	pop	{r2, r3, r4, r5}
    a74e:	4690      	mov	r8, r2
    a750:	4699      	mov	r9, r3
    a752:	46a2      	mov	sl, r4
    a754:	46ab      	mov	fp, r5
    a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    a758:	9b05      	ldr	r3, [sp, #20]
    a75a:	2b00      	cmp	r3, #0
    a75c:	d0f5      	beq.n	a74a <DutyCycleCallback+0x1f2>
    bool found = 0;
    a75e:	2300      	movs	r3, #0
    a760:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    a762:	3b01      	subs	r3, #1
    a764:	9303      	str	r3, [sp, #12]
    a766:	e790      	b.n	a68a <DutyCycleCallback+0x132>
    a768:	20002310 	.word	0x20002310
    a76c:	0000a559 	.word	0x0000a559
    a770:	0000d57d 	.word	0x0000d57d

0000a774 <setLBTTimer>:
{
    a774:	b5f0      	push	{r4, r5, r6, r7, lr}
    a776:	46de      	mov	lr, fp
    a778:	4657      	mov	r7, sl
    a77a:	464e      	mov	r6, r9
    a77c:	4645      	mov	r5, r8
    a77e:	b5e0      	push	{r5, r6, r7, lr}
    a780:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    a782:	4a71      	ldr	r2, [pc, #452]	; (a948 <setLBTTimer+0x1d4>)
    a784:	2330      	movs	r3, #48	; 0x30
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    a786:	5cd4      	ldrb	r4, [r2, r3]
    a788:	0023      	movs	r3, r4
    a78a:	3358      	adds	r3, #88	; 0x58
    a78c:	009b      	lsls	r3, r3, #2
    a78e:	18d3      	adds	r3, r2, r3
    a790:	0019      	movs	r1, r3
    a792:	2032      	movs	r0, #50	; 0x32
    a794:	7258      	strb	r0, [r3, #9]
    a796:	2300      	movs	r3, #0
    a798:	728b      	strb	r3, [r1, #10]
    a79a:	72cb      	strb	r3, [r1, #11]
    a79c:	730b      	strb	r3, [r1, #12]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    a79e:	23ae      	movs	r3, #174	; 0xae
    a7a0:	33ff      	adds	r3, #255	; 0xff
    a7a2:	5cd0      	ldrb	r0, [r2, r3]
    a7a4:	4b69      	ldr	r3, [pc, #420]	; (a94c <setLBTTimer+0x1d8>)
    a7a6:	4798      	blx	r3
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d12f      	bne.n	a80c <setLBTTimer+0x98>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    a7ac:	4866      	ldr	r0, [pc, #408]	; (a948 <setLBTTimer+0x1d4>)
    a7ae:	0023      	movs	r3, r4
    a7b0:	3358      	adds	r3, #88	; 0x58
    a7b2:	009b      	lsls	r3, r3, #2
    a7b4:	18c3      	adds	r3, r0, r3
    a7b6:	7a59      	ldrb	r1, [r3, #9]
    a7b8:	7a9a      	ldrb	r2, [r3, #10]
    a7ba:	0212      	lsls	r2, r2, #8
    a7bc:	4311      	orrs	r1, r2
    a7be:	7ada      	ldrb	r2, [r3, #11]
    a7c0:	0412      	lsls	r2, r2, #16
    a7c2:	430a      	orrs	r2, r1
    a7c4:	7b19      	ldrb	r1, [r3, #12]
    a7c6:	0609      	lsls	r1, r1, #24
    a7c8:	4311      	orrs	r1, r2
    a7ca:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    a7cc:	232a      	movs	r3, #42	; 0x2a
    a7ce:	56c3      	ldrsb	r3, [r0, r3]
    a7d0:	4698      	mov	r8, r3
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	dc00      	bgt.n	a7d8 <setLBTTimer+0x64>
    a7d6:	e08d      	b.n	a8f4 <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    a7d8:	2300      	movs	r3, #0
    a7da:	469a      	mov	sl, r3
		found = 1;
    a7dc:	3301      	adds	r3, #1
    a7de:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    a7e0:	4a59      	ldr	r2, [pc, #356]	; (a948 <setLBTTimer+0x1d4>)
    a7e2:	2330      	movs	r3, #48	; 0x30
    a7e4:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    a7e6:	7911      	ldrb	r1, [r2, #4]
    a7e8:	7953      	ldrb	r3, [r2, #5]
    a7ea:	021b      	lsls	r3, r3, #8
    a7ec:	430b      	orrs	r3, r1
    a7ee:	7991      	ldrb	r1, [r2, #6]
    a7f0:	0409      	lsls	r1, r1, #16
    a7f2:	430b      	orrs	r3, r1
    a7f4:	79d1      	ldrb	r1, [r2, #7]
    a7f6:	0609      	lsls	r1, r1, #24
    a7f8:	4319      	orrs	r1, r3
    a7fa:	2600      	movs	r6, #0
    a7fc:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    a7fe:	2300      	movs	r3, #0
    a800:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    a802:	4653      	mov	r3, sl
    a804:	9302      	str	r3, [sp, #8]
    a806:	468b      	mov	fp, r1
    a808:	4645      	mov	r5, r8
    a80a:	e039      	b.n	a880 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    a80c:	4c4e      	ldr	r4, [pc, #312]	; (a948 <setLBTTimer+0x1d4>)
    a80e:	25ae      	movs	r5, #174	; 0xae
    a810:	35ff      	adds	r5, #255	; 0xff
    a812:	5d60      	ldrb	r0, [r4, r5]
    a814:	4b4e      	ldr	r3, [pc, #312]	; (a950 <setLBTTimer+0x1dc>)
    a816:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    a818:	5d60      	ldrb	r0, [r4, r5]
    a81a:	4b4e      	ldr	r3, [pc, #312]	; (a954 <setLBTTimer+0x1e0>)
    a81c:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    a81e:	232a      	movs	r3, #42	; 0x2a
    a820:	56e3      	ldrsb	r3, [r4, r3]
    a822:	4698      	mov	r8, r3
    a824:	2b00      	cmp	r3, #0
    a826:	dd68      	ble.n	a8fa <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    a828:	4a47      	ldr	r2, [pc, #284]	; (a948 <setLBTTimer+0x1d4>)
    a82a:	23aa      	movs	r3, #170	; 0xaa
    a82c:	33ff      	adds	r3, #255	; 0xff
    a82e:	5cd4      	ldrb	r4, [r2, r3]
    a830:	3301      	adds	r3, #1
    a832:	5cd3      	ldrb	r3, [r2, r3]
    a834:	021b      	lsls	r3, r3, #8
    a836:	4323      	orrs	r3, r4
    a838:	21ac      	movs	r1, #172	; 0xac
    a83a:	31ff      	adds	r1, #255	; 0xff
    a83c:	5c54      	ldrb	r4, [r2, r1]
    a83e:	0424      	lsls	r4, r4, #16
    a840:	4323      	orrs	r3, r4
    a842:	3101      	adds	r1, #1
    a844:	5c54      	ldrb	r4, [r2, r1]
    a846:	0624      	lsls	r4, r4, #24
    a848:	431c      	orrs	r4, r3
    a84a:	21fa      	movs	r1, #250	; 0xfa
    a84c:	0089      	lsls	r1, r1, #2
    a84e:	4b42      	ldr	r3, [pc, #264]	; (a958 <setLBTTimer+0x1e4>)
    a850:	4798      	blx	r3
    a852:	1a23      	subs	r3, r4, r0
    a854:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    a856:	2301      	movs	r3, #1
    a858:	425b      	negs	r3, r3
    a85a:	4699      	mov	r9, r3
    bool found = 0;
    a85c:	2300      	movs	r3, #0
    a85e:	9303      	str	r3, [sp, #12]
    a860:	e7be      	b.n	a7e0 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    a862:	3658      	adds	r6, #88	; 0x58
    a864:	00b6      	lsls	r6, r6, #2
    a866:	4b38      	ldr	r3, [pc, #224]	; (a948 <setLBTTimer+0x1d4>)
    a868:	4698      	mov	r8, r3
    a86a:	4446      	add	r6, r8
    a86c:	4661      	mov	r1, ip
    a86e:	7271      	strb	r1, [r6, #9]
    a870:	72b1      	strb	r1, [r6, #10]
    a872:	72f1      	strb	r1, [r6, #11]
    a874:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    a876:	3201      	adds	r2, #1
    a878:	b2d2      	uxtb	r2, r2
    a87a:	0016      	movs	r6, r2
    a87c:	42aa      	cmp	r2, r5
    a87e:	da36      	bge.n	a8ee <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    a880:	4290      	cmp	r0, r2
    a882:	d0f8      	beq.n	a876 <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    a884:	0053      	lsls	r3, r2, #1
    a886:	4659      	mov	r1, fp
    a888:	5c5c      	ldrb	r4, [r3, r1]
    a88a:	2c00      	cmp	r4, #0
    a88c:	d0f3      	beq.n	a876 <setLBTTimer+0x102>
    a88e:	0033      	movs	r3, r6
    a890:	3358      	adds	r3, #88	; 0x58
    a892:	009b      	lsls	r3, r3, #2
    a894:	4f2c      	ldr	r7, [pc, #176]	; (a948 <setLBTTimer+0x1d4>)
    a896:	46b8      	mov	r8, r7
    a898:	4443      	add	r3, r8
    a89a:	7a5f      	ldrb	r7, [r3, #9]
    a89c:	46ba      	mov	sl, r7
    a89e:	7a9f      	ldrb	r7, [r3, #10]
    a8a0:	023f      	lsls	r7, r7, #8
    a8a2:	46b8      	mov	r8, r7
    a8a4:	4657      	mov	r7, sl
    a8a6:	4641      	mov	r1, r8
    a8a8:	430f      	orrs	r7, r1
    a8aa:	7ad9      	ldrb	r1, [r3, #11]
    a8ac:	0409      	lsls	r1, r1, #16
    a8ae:	430f      	orrs	r7, r1
    a8b0:	7b1b      	ldrb	r3, [r3, #12]
    a8b2:	061b      	lsls	r3, r3, #24
    a8b4:	433b      	orrs	r3, r7
    a8b6:	d0de      	beq.n	a876 <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    a8b8:	9f02      	ldr	r7, [sp, #8]
    a8ba:	42bb      	cmp	r3, r7
    a8bc:	d9d1      	bls.n	a862 <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    a8be:	1bdb      	subs	r3, r3, r7
    a8c0:	3658      	adds	r6, #88	; 0x58
    a8c2:	00b6      	lsls	r6, r6, #2
    a8c4:	4920      	ldr	r1, [pc, #128]	; (a948 <setLBTTimer+0x1d4>)
    a8c6:	4688      	mov	r8, r1
    a8c8:	4446      	add	r6, r8
    a8ca:	2109      	movs	r1, #9
    a8cc:	4688      	mov	r8, r1
    a8ce:	44b0      	add	r8, r6
    a8d0:	7273      	strb	r3, [r6, #9]
    a8d2:	0a1e      	lsrs	r6, r3, #8
    a8d4:	4641      	mov	r1, r8
    a8d6:	704e      	strb	r6, [r1, #1]
    a8d8:	0c1e      	lsrs	r6, r3, #16
    a8da:	708e      	strb	r6, [r1, #2]
    a8dc:	0e1e      	lsrs	r6, r3, #24
    a8de:	70ce      	strb	r6, [r1, #3]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    a8e0:	454b      	cmp	r3, r9
    a8e2:	d8c8      	bhi.n	a876 <setLBTTimer+0x102>
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d0c6      	beq.n	a876 <setLBTTimer+0x102>
    a8e8:	4699      	mov	r9, r3
					found = 1;
    a8ea:	9403      	str	r4, [sp, #12]
    a8ec:	e7c3      	b.n	a876 <setLBTTimer+0x102>
	if((found == 1) && minim)
    a8ee:	9b03      	ldr	r3, [sp, #12]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d002      	beq.n	a8fa <setLBTTimer+0x186>
    a8f4:	464b      	mov	r3, r9
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	d107      	bne.n	a90a <setLBTTimer+0x196>
}
    a8fa:	2008      	movs	r0, #8
    a8fc:	b005      	add	sp, #20
    a8fe:	bc3c      	pop	{r2, r3, r4, r5}
    a900:	4690      	mov	r8, r2
    a902:	4699      	mov	r9, r3
    a904:	46a2      	mov	sl, r4
    a906:	46ab      	mov	fp, r5
    a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    a90a:	4b0f      	ldr	r3, [pc, #60]	; (a948 <setLBTTimer+0x1d4>)
    a90c:	22aa      	movs	r2, #170	; 0xaa
    a90e:	32ff      	adds	r2, #255	; 0xff
    a910:	4649      	mov	r1, r9
    a912:	5499      	strb	r1, [r3, r2]
    a914:	464a      	mov	r2, r9
    a916:	0a11      	lsrs	r1, r2, #8
    a918:	001a      	movs	r2, r3
    a91a:	32aa      	adds	r2, #170	; 0xaa
    a91c:	32ff      	adds	r2, #255	; 0xff
    a91e:	7051      	strb	r1, [r2, #1]
    a920:	4649      	mov	r1, r9
    a922:	0c09      	lsrs	r1, r1, #16
    a924:	7091      	strb	r1, [r2, #2]
    a926:	4649      	mov	r1, r9
    a928:	0e09      	lsrs	r1, r1, #24
    a92a:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    a92c:	21fa      	movs	r1, #250	; 0xfa
    a92e:	0089      	lsls	r1, r1, #2
    a930:	464a      	mov	r2, r9
    a932:	4351      	muls	r1, r2
    a934:	22ae      	movs	r2, #174	; 0xae
    a936:	32ff      	adds	r2, #255	; 0xff
    a938:	5c98      	ldrb	r0, [r3, r2]
    a93a:	2300      	movs	r3, #0
    a93c:	9300      	str	r3, [sp, #0]
    a93e:	4b07      	ldr	r3, [pc, #28]	; (a95c <setLBTTimer+0x1e8>)
    a940:	2200      	movs	r2, #0
    a942:	4c07      	ldr	r4, [pc, #28]	; (a960 <setLBTTimer+0x1ec>)
    a944:	47a0      	blx	r4
    a946:	e7d8      	b.n	a8fa <setLBTTimer+0x186>
    a948:	20002310 	.word	0x20002310
    a94c:	0000d715 	.word	0x0000d715
    a950:	0000d895 	.word	0x0000d895
    a954:	0000d729 	.word	0x0000d729
    a958:	00014f51 	.word	0x00014f51
    a95c:	0000a965 	.word	0x0000a965
    a960:	0000d57d 	.word	0x0000d57d

0000a964 <LBTChannelPauseCallback>:
{
    a964:	b5f0      	push	{r4, r5, r6, r7, lr}
    a966:	46de      	mov	lr, fp
    a968:	4657      	mov	r7, sl
    a96a:	464e      	mov	r6, r9
    a96c:	4645      	mov	r5, r8
    a96e:	b5e0      	push	{r5, r6, r7, lr}
    a970:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    a972:	232a      	movs	r3, #42	; 0x2a
    a974:	4a4a      	ldr	r2, [pc, #296]	; (aaa0 <LBTChannelPauseCallback+0x13c>)
    a976:	56d6      	ldrsb	r6, [r2, r3]
    a978:	2e00      	cmp	r6, #0
    a97a:	dd6a      	ble.n	aa52 <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    a97c:	0013      	movs	r3, r2
    a97e:	7915      	ldrb	r5, [r2, #4]
    a980:	7952      	ldrb	r2, [r2, #5]
    a982:	0212      	lsls	r2, r2, #8
    a984:	432a      	orrs	r2, r5
    a986:	799d      	ldrb	r5, [r3, #6]
    a988:	042d      	lsls	r5, r5, #16
    a98a:	432a      	orrs	r2, r5
    a98c:	79dd      	ldrb	r5, [r3, #7]
    a98e:	062d      	lsls	r5, r5, #24
    a990:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    a992:	22aa      	movs	r2, #170	; 0xaa
    a994:	32ff      	adds	r2, #255	; 0xff
    a996:	5c9f      	ldrb	r7, [r3, r2]
    a998:	3201      	adds	r2, #1
    a99a:	5c9a      	ldrb	r2, [r3, r2]
    a99c:	0212      	lsls	r2, r2, #8
    a99e:	433a      	orrs	r2, r7
    a9a0:	21ac      	movs	r1, #172	; 0xac
    a9a2:	31ff      	adds	r1, #255	; 0xff
    a9a4:	5c5f      	ldrb	r7, [r3, r1]
    a9a6:	043f      	lsls	r7, r7, #16
    a9a8:	433a      	orrs	r2, r7
    a9aa:	3101      	adds	r1, #1
    a9ac:	5c5f      	ldrb	r7, [r3, r1]
    a9ae:	063f      	lsls	r7, r7, #24
    a9b0:	4317      	orrs	r7, r2
    a9b2:	9703      	str	r7, [sp, #12]
    a9b4:	2000      	movs	r0, #0
    a9b6:	2300      	movs	r3, #0
    a9b8:	2200      	movs	r2, #0
    a9ba:	4691      	mov	r9, r2
    a9bc:	3a01      	subs	r2, #1
    a9be:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    a9c0:	2200      	movs	r2, #0
    a9c2:	4694      	mov	ip, r2
    a9c4:	e00e      	b.n	a9e4 <LBTChannelPauseCallback+0x80>
    a9c6:	3058      	adds	r0, #88	; 0x58
    a9c8:	0080      	lsls	r0, r0, #2
    a9ca:	4a35      	ldr	r2, [pc, #212]	; (aaa0 <LBTChannelPauseCallback+0x13c>)
    a9cc:	4692      	mov	sl, r2
    a9ce:	4450      	add	r0, sl
    a9d0:	4661      	mov	r1, ip
    a9d2:	7241      	strb	r1, [r0, #9]
    a9d4:	7281      	strb	r1, [r0, #10]
    a9d6:	72c1      	strb	r1, [r0, #11]
    a9d8:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    a9da:	3301      	adds	r3, #1
    a9dc:	b2db      	uxtb	r3, r3
    a9de:	0018      	movs	r0, r3
    a9e0:	42b3      	cmp	r3, r6
    a9e2:	da33      	bge.n	aa4c <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    a9e4:	005a      	lsls	r2, r3, #1
    a9e6:	5d54      	ldrb	r4, [r2, r5]
    a9e8:	2c00      	cmp	r4, #0
    a9ea:	d0f6      	beq.n	a9da <LBTChannelPauseCallback+0x76>
    a9ec:	0002      	movs	r2, r0
    a9ee:	3258      	adds	r2, #88	; 0x58
    a9f0:	0092      	lsls	r2, r2, #2
    a9f2:	492b      	ldr	r1, [pc, #172]	; (aaa0 <LBTChannelPauseCallback+0x13c>)
    a9f4:	468a      	mov	sl, r1
    a9f6:	4452      	add	r2, sl
    a9f8:	7a57      	ldrb	r7, [r2, #9]
    a9fa:	46bb      	mov	fp, r7
    a9fc:	7a97      	ldrb	r7, [r2, #10]
    a9fe:	023f      	lsls	r7, r7, #8
    aa00:	46ba      	mov	sl, r7
    aa02:	465f      	mov	r7, fp
    aa04:	4651      	mov	r1, sl
    aa06:	430f      	orrs	r7, r1
    aa08:	7ad1      	ldrb	r1, [r2, #11]
    aa0a:	0409      	lsls	r1, r1, #16
    aa0c:	430f      	orrs	r7, r1
    aa0e:	7b12      	ldrb	r2, [r2, #12]
    aa10:	0612      	lsls	r2, r2, #24
    aa12:	433a      	orrs	r2, r7
    aa14:	d0e1      	beq.n	a9da <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    aa16:	9f03      	ldr	r7, [sp, #12]
    aa18:	42ba      	cmp	r2, r7
    aa1a:	d9d4      	bls.n	a9c6 <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    aa1c:	1bd2      	subs	r2, r2, r7
    aa1e:	3058      	adds	r0, #88	; 0x58
    aa20:	0080      	lsls	r0, r0, #2
    aa22:	491f      	ldr	r1, [pc, #124]	; (aaa0 <LBTChannelPauseCallback+0x13c>)
    aa24:	468a      	mov	sl, r1
    aa26:	4450      	add	r0, sl
    aa28:	2109      	movs	r1, #9
    aa2a:	468a      	mov	sl, r1
    aa2c:	4482      	add	sl, r0
    aa2e:	7242      	strb	r2, [r0, #9]
    aa30:	0a10      	lsrs	r0, r2, #8
    aa32:	4651      	mov	r1, sl
    aa34:	7048      	strb	r0, [r1, #1]
    aa36:	0c10      	lsrs	r0, r2, #16
    aa38:	7088      	strb	r0, [r1, #2]
    aa3a:	0e10      	lsrs	r0, r2, #24
    aa3c:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    aa3e:	4542      	cmp	r2, r8
    aa40:	d8cb      	bhi.n	a9da <LBTChannelPauseCallback+0x76>
    aa42:	2a00      	cmp	r2, #0
    aa44:	d0c9      	beq.n	a9da <LBTChannelPauseCallback+0x76>
                found = 1;
    aa46:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    aa48:	4690      	mov	r8, r2
    aa4a:	e7c6      	b.n	a9da <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    aa4c:	464b      	mov	r3, r9
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d106      	bne.n	aa60 <LBTChannelPauseCallback+0xfc>
}
    aa52:	b005      	add	sp, #20
    aa54:	bc3c      	pop	{r2, r3, r4, r5}
    aa56:	4690      	mov	r8, r2
    aa58:	4699      	mov	r9, r3
    aa5a:	46a2      	mov	sl, r4
    aa5c:	46ab      	mov	fp, r5
    aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    aa60:	4b0f      	ldr	r3, [pc, #60]	; (aaa0 <LBTChannelPauseCallback+0x13c>)
    aa62:	22aa      	movs	r2, #170	; 0xaa
    aa64:	32ff      	adds	r2, #255	; 0xff
    aa66:	4641      	mov	r1, r8
    aa68:	5499      	strb	r1, [r3, r2]
    aa6a:	4642      	mov	r2, r8
    aa6c:	0a11      	lsrs	r1, r2, #8
    aa6e:	001a      	movs	r2, r3
    aa70:	32aa      	adds	r2, #170	; 0xaa
    aa72:	32ff      	adds	r2, #255	; 0xff
    aa74:	7051      	strb	r1, [r2, #1]
    aa76:	4641      	mov	r1, r8
    aa78:	0c09      	lsrs	r1, r1, #16
    aa7a:	7091      	strb	r1, [r2, #2]
    aa7c:	4641      	mov	r1, r8
    aa7e:	0e09      	lsrs	r1, r1, #24
    aa80:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    aa82:	21fa      	movs	r1, #250	; 0xfa
    aa84:	0089      	lsls	r1, r1, #2
    aa86:	4642      	mov	r2, r8
    aa88:	4351      	muls	r1, r2
    aa8a:	22ae      	movs	r2, #174	; 0xae
    aa8c:	32ff      	adds	r2, #255	; 0xff
    aa8e:	5c98      	ldrb	r0, [r3, r2]
    aa90:	2300      	movs	r3, #0
    aa92:	9300      	str	r3, [sp, #0]
    aa94:	4b03      	ldr	r3, [pc, #12]	; (aaa4 <LBTChannelPauseCallback+0x140>)
    aa96:	2200      	movs	r2, #0
    aa98:	4c03      	ldr	r4, [pc, #12]	; (aaa8 <LBTChannelPauseCallback+0x144>)
    aa9a:	47a0      	blx	r4
}
    aa9c:	e7d9      	b.n	aa52 <LBTChannelPauseCallback+0xee>
    aa9e:	46c0      	nop			; (mov r8, r8)
    aaa0:	20002310 	.word	0x20002310
    aaa4:	0000a965 	.word	0x0000a965
    aaa8:	0000d57d 	.word	0x0000d57d

0000aaac <JoinDutyCycleCallback>:
{   
    aaac:	b510      	push	{r4, lr}
    aaae:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    aab0:	492e      	ldr	r1, [pc, #184]	; (ab6c <JoinDutyCycleCallback+0xc0>)
    aab2:	7d0b      	ldrb	r3, [r1, #20]
    aab4:	7d4a      	ldrb	r2, [r1, #21]
    aab6:	0212      	lsls	r2, r2, #8
    aab8:	431a      	orrs	r2, r3
    aaba:	7d8b      	ldrb	r3, [r1, #22]
    aabc:	041b      	lsls	r3, r3, #16
    aabe:	431a      	orrs	r2, r3
    aac0:	7dcb      	ldrb	r3, [r1, #23]
    aac2:	061b      	lsls	r3, r3, #24
    aac4:	4313      	orrs	r3, r2
    aac6:	7919      	ldrb	r1, [r3, #4]
    aac8:	795a      	ldrb	r2, [r3, #5]
    aaca:	0212      	lsls	r2, r2, #8
    aacc:	430a      	orrs	r2, r1
    aace:	7999      	ldrb	r1, [r3, #6]
    aad0:	0409      	lsls	r1, r1, #16
    aad2:	430a      	orrs	r2, r1
    aad4:	79d9      	ldrb	r1, [r3, #7]
    aad6:	0609      	lsls	r1, r1, #24
    aad8:	4311      	orrs	r1, r2
    aada:	d03c      	beq.n	ab56 <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    aadc:	4a24      	ldr	r2, [pc, #144]	; (ab70 <JoinDutyCycleCallback+0xc4>)
    aade:	4291      	cmp	r1, r2
    aae0:	d91e      	bls.n	ab20 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    aae2:	4a24      	ldr	r2, [pc, #144]	; (ab74 <JoinDutyCycleCallback+0xc8>)
    aae4:	4694      	mov	ip, r2
    aae6:	4461      	add	r1, ip
    aae8:	7119      	strb	r1, [r3, #4]
    aaea:	0a0a      	lsrs	r2, r1, #8
    aaec:	715a      	strb	r2, [r3, #5]
    aaee:	0c0a      	lsrs	r2, r1, #16
    aaf0:	719a      	strb	r2, [r3, #6]
    aaf2:	0e09      	lsrs	r1, r1, #24
    aaf4:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    aaf6:	491d      	ldr	r1, [pc, #116]	; (ab6c <JoinDutyCycleCallback+0xc0>)
    aaf8:	7d0b      	ldrb	r3, [r1, #20]
    aafa:	7d4a      	ldrb	r2, [r1, #21]
    aafc:	0212      	lsls	r2, r2, #8
    aafe:	431a      	orrs	r2, r3
    ab00:	7d8b      	ldrb	r3, [r1, #22]
    ab02:	041b      	lsls	r3, r3, #16
    ab04:	431a      	orrs	r2, r3
    ab06:	7dcb      	ldrb	r3, [r1, #23]
    ab08:	061b      	lsls	r3, r3, #24
    ab0a:	4313      	orrs	r3, r2
    ab0c:	7a18      	ldrb	r0, [r3, #8]
    ab0e:	2300      	movs	r3, #0
    ab10:	9300      	str	r3, [sp, #0]
    ab12:	4b19      	ldr	r3, [pc, #100]	; (ab78 <JoinDutyCycleCallback+0xcc>)
    ab14:	2200      	movs	r2, #0
    ab16:	4919      	ldr	r1, [pc, #100]	; (ab7c <JoinDutyCycleCallback+0xd0>)
    ab18:	4c19      	ldr	r4, [pc, #100]	; (ab80 <JoinDutyCycleCallback+0xd4>)
    ab1a:	47a0      	blx	r4
}
    ab1c:	b002      	add	sp, #8
    ab1e:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    ab20:	22fa      	movs	r2, #250	; 0xfa
    ab22:	0092      	lsls	r2, r2, #2
    ab24:	4351      	muls	r1, r2
    ab26:	7a18      	ldrb	r0, [r3, #8]
    ab28:	2300      	movs	r3, #0
    ab2a:	9300      	str	r3, [sp, #0]
    ab2c:	4b12      	ldr	r3, [pc, #72]	; (ab78 <JoinDutyCycleCallback+0xcc>)
    ab2e:	2200      	movs	r2, #0
    ab30:	4c13      	ldr	r4, [pc, #76]	; (ab80 <JoinDutyCycleCallback+0xd4>)
    ab32:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    ab34:	490d      	ldr	r1, [pc, #52]	; (ab6c <JoinDutyCycleCallback+0xc0>)
    ab36:	7d0b      	ldrb	r3, [r1, #20]
    ab38:	7d4a      	ldrb	r2, [r1, #21]
    ab3a:	0212      	lsls	r2, r2, #8
    ab3c:	431a      	orrs	r2, r3
    ab3e:	7d8b      	ldrb	r3, [r1, #22]
    ab40:	041b      	lsls	r3, r3, #16
    ab42:	431a      	orrs	r2, r3
    ab44:	7dcb      	ldrb	r3, [r1, #23]
    ab46:	061b      	lsls	r3, r3, #24
    ab48:	4313      	orrs	r3, r2
    ab4a:	2200      	movs	r2, #0
    ab4c:	711a      	strb	r2, [r3, #4]
    ab4e:	715a      	strb	r2, [r3, #5]
    ab50:	719a      	strb	r2, [r3, #6]
    ab52:	71da      	strb	r2, [r3, #7]
    ab54:	e7e2      	b.n	ab1c <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    ab56:	7a18      	ldrb	r0, [r3, #8]
    ab58:	4b0a      	ldr	r3, [pc, #40]	; (ab84 <JoinDutyCycleCallback+0xd8>)
    ab5a:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    ab5c:	4b03      	ldr	r3, [pc, #12]	; (ab6c <JoinDutyCycleCallback+0xc0>)
    ab5e:	333f      	adds	r3, #63	; 0x3f
    ab60:	2200      	movs	r2, #0
    ab62:	701a      	strb	r2, [r3, #0]
    ab64:	705a      	strb	r2, [r3, #1]
    ab66:	709a      	strb	r2, [r3, #2]
    ab68:	70da      	strb	r2, [r3, #3]
}
    ab6a:	e7d7      	b.n	ab1c <JoinDutyCycleCallback+0x70>
    ab6c:	20002310 	.word	0x20002310
    ab70:	0020c49b 	.word	0x0020c49b
    ab74:	ffdf3b65 	.word	0xffdf3b65
    ab78:	0000aaad 	.word	0x0000aaad
    ab7c:	7fffffff 	.word	0x7fffffff
    ab80:	0000d57d 	.word	0x0000d57d
    ab84:	0000d895 	.word	0x0000d895

0000ab88 <JoinBackoffCallback>:
{
    ab88:	b510      	push	{r4, lr}
    ab8a:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    ab8c:	4b0c      	ldr	r3, [pc, #48]	; (abc0 <JoinBackoffCallback+0x38>)
    ab8e:	2143      	movs	r1, #67	; 0x43
    ab90:	5c5a      	ldrb	r2, [r3, r1]
    ab92:	3201      	adds	r2, #1
    ab94:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    ab96:	7e19      	ldrb	r1, [r3, #24]
    ab98:	7e5a      	ldrb	r2, [r3, #25]
    ab9a:	0212      	lsls	r2, r2, #8
    ab9c:	4311      	orrs	r1, r2
    ab9e:	7e9a      	ldrb	r2, [r3, #26]
    aba0:	0412      	lsls	r2, r2, #16
    aba2:	430a      	orrs	r2, r1
    aba4:	7edb      	ldrb	r3, [r3, #27]
    aba6:	061b      	lsls	r3, r3, #24
    aba8:	4313      	orrs	r3, r2
    abaa:	7818      	ldrb	r0, [r3, #0]
    abac:	2300      	movs	r3, #0
    abae:	9300      	str	r3, [sp, #0]
    abb0:	4b04      	ldr	r3, [pc, #16]	; (abc4 <JoinBackoffCallback+0x3c>)
    abb2:	2200      	movs	r2, #0
    abb4:	4904      	ldr	r1, [pc, #16]	; (abc8 <JoinBackoffCallback+0x40>)
    abb6:	4c05      	ldr	r4, [pc, #20]	; (abcc <JoinBackoffCallback+0x44>)
    abb8:	47a0      	blx	r4
}
    abba:	b002      	add	sp, #8
    abbc:	bd10      	pop	{r4, pc}
    abbe:	46c0      	nop			; (mov r8, r8)
    abc0:	20002310 	.word	0x20002310
    abc4:	0000ab89 	.word	0x0000ab89
    abc8:	6b49d200 	.word	0x6b49d200
    abcc:	0000d57d 	.word	0x0000d57d

0000abd0 <ValidateChMaskChCntl>:
{
    abd0:	b510      	push	{r4, lr}
    abd2:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    abd4:	ac01      	add	r4, sp, #4
    abd6:	2204      	movs	r2, #4
    abd8:	0020      	movs	r0, r4
    abda:	4b09      	ldr	r3, [pc, #36]	; (ac00 <ValidateChMaskChCntl+0x30>)
    abdc:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    abde:	8863      	ldrh	r3, [r4, #2]
    abe0:	2b00      	cmp	r3, #0
    abe2:	d104      	bne.n	abee <ValidateChMaskChCntl+0x1e>
    abe4:	ab01      	add	r3, sp, #4
    abe6:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    abe8:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    abea:	2b07      	cmp	r3, #7
    abec:	d006      	beq.n	abfc <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    abee:	a901      	add	r1, sp, #4
    abf0:	201b      	movs	r0, #27
    abf2:	4b04      	ldr	r3, [pc, #16]	; (ac04 <ValidateChMaskChCntl+0x34>)
    abf4:	4798      	blx	r3
    abf6:	2308      	movs	r3, #8
    abf8:	4318      	orrs	r0, r3
    abfa:	b2c0      	uxtb	r0, r0
}
    abfc:	b002      	add	sp, #8
    abfe:	bd10      	pop	{r4, pc}
    ac00:	00018655 	.word	0x00018655
    ac04:	0000816d 	.word	0x0000816d

0000ac08 <setChannelIdStatus>:
{
    ac08:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    ac0a:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    ac0c:	232a      	movs	r3, #42	; 0x2a
    ac0e:	4a05      	ldr	r2, [pc, #20]	; (ac24 <setChannelIdStatus+0x1c>)
    ac10:	56d3      	ldrsb	r3, [r2, r3]
    ac12:	4298      	cmp	r0, r3
    ac14:	db01      	blt.n	ac1a <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    ac16:	200a      	movs	r0, #10
}
    ac18:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    ac1a:	7849      	ldrb	r1, [r1, #1]
    ac1c:	4b02      	ldr	r3, [pc, #8]	; (ac28 <setChannelIdStatus+0x20>)
    ac1e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ac20:	2008      	movs	r0, #8
	return retVal;
    ac22:	e7f9      	b.n	ac18 <setChannelIdStatus+0x10>
    ac24:	20002310 	.word	0x20002310
    ac28:	00008a81 	.word	0x00008a81

0000ac2c <ValidateDataRange>:
{
    ac2c:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    ac2e:	2352      	movs	r3, #82	; 0x52
    ac30:	33ff      	adds	r3, #255	; 0xff
    ac32:	4a17      	ldr	r2, [pc, #92]	; (ac90 <ValidateDataRange+0x64>)
    ac34:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    ac36:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    ac38:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ac3a:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ac3c:	42a3      	cmp	r3, r4
    ac3e:	d213      	bcs.n	ac68 <ValidateDataRange+0x3c>
}
    ac40:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    ac42:	202a      	movs	r0, #42	; 0x2a
    ac44:	4d12      	ldr	r5, [pc, #72]	; (ac90 <ValidateDataRange+0x64>)
    ac46:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ac48:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    ac4a:	42a9      	cmp	r1, r5
    ac4c:	daf8      	bge.n	ac40 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ac4e:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    ac50:	4293      	cmp	r3, r2
    ac52:	d1f5      	bne.n	ac40 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    ac54:	42a3      	cmp	r3, r4
    ac56:	d005      	beq.n	ac64 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ac58:	200a      	movs	r0, #10
	return retVal;
    ac5a:	e7f1      	b.n	ac40 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ac5c:	200a      	movs	r0, #10
    ac5e:	e7ef      	b.n	ac40 <ValidateDataRange+0x14>
    ac60:	200a      	movs	r0, #10
    ac62:	e7ed      	b.n	ac40 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ac64:	2008      	movs	r0, #8
    ac66:	e7eb      	b.n	ac40 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    ac68:	200f      	movs	r0, #15
    ac6a:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ac6c:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ac6e:	4293      	cmp	r3, r2
    ac70:	d3e6      	bcc.n	ac40 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    ac72:	42a2      	cmp	r2, r4
    ac74:	d8e4      	bhi.n	ac40 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    ac76:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    ac78:	20aa      	movs	r0, #170	; 0xaa
    ac7a:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    ac7c:	4d04      	ldr	r5, [pc, #16]	; (ac90 <ValidateDataRange+0x64>)
    ac7e:	5c28      	ldrb	r0, [r5, r0]
    ac80:	4288      	cmp	r0, r1
    ac82:	d9de      	bls.n	ac42 <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    ac84:	4293      	cmp	r3, r2
    ac86:	d0e9      	beq.n	ac5c <ValidateDataRange+0x30>
    ac88:	42a3      	cmp	r3, r4
    ac8a:	d0e9      	beq.n	ac60 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ac8c:	2008      	movs	r0, #8
    ac8e:	e7d7      	b.n	ac40 <ValidateDataRange+0x14>
    ac90:	20002310 	.word	0x20002310

0000ac94 <setDataRange>:
{
    ac94:	b570      	push	{r4, r5, r6, lr}
    ac96:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    ac98:	2012      	movs	r0, #18
    ac9a:	4b15      	ldr	r3, [pc, #84]	; (acf0 <setDataRange+0x5c>)
    ac9c:	4798      	blx	r3
    ac9e:	0004      	movs	r4, r0
    aca0:	2808      	cmp	r0, #8
    aca2:	d002      	beq.n	acaa <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    aca4:	240a      	movs	r4, #10
}
    aca6:	0020      	movs	r0, r4
    aca8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    acaa:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    acac:	222a      	movs	r2, #42	; 0x2a
    acae:	4911      	ldr	r1, [pc, #68]	; (acf4 <setDataRange+0x60>)
    acb0:	568a      	ldrsb	r2, [r1, r2]
    acb2:	4293      	cmp	r3, r2
    acb4:	db01      	blt.n	acba <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    acb6:	3402      	adds	r4, #2
    acb8:	e7f5      	b.n	aca6 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    acba:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    acbc:	4a0d      	ldr	r2, [pc, #52]	; (acf4 <setDataRange+0x60>)
    acbe:	7911      	ldrb	r1, [r2, #4]
    acc0:	7950      	ldrb	r0, [r2, #5]
    acc2:	0200      	lsls	r0, r0, #8
    acc4:	4308      	orrs	r0, r1
    acc6:	7991      	ldrb	r1, [r2, #6]
    acc8:	0409      	lsls	r1, r1, #16
    acca:	4308      	orrs	r0, r1
    accc:	79d1      	ldrb	r1, [r2, #7]
    acce:	0609      	lsls	r1, r1, #24
    acd0:	4301      	orrs	r1, r0
    acd2:	005b      	lsls	r3, r3, #1
    acd4:	185b      	adds	r3, r3, r1
    acd6:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    acd8:	4b07      	ldr	r3, [pc, #28]	; (acf8 <setDataRange+0x64>)
    acda:	5cd3      	ldrb	r3, [r2, r3]
    acdc:	2184      	movs	r1, #132	; 0x84
    acde:	0089      	lsls	r1, r1, #2
    ace0:	5c50      	ldrb	r0, [r2, r1]
    ace2:	0200      	lsls	r0, r0, #8
    ace4:	4318      	orrs	r0, r3
    ace6:	b2c1      	uxtb	r1, r0
    ace8:	0a00      	lsrs	r0, r0, #8
    acea:	4b04      	ldr	r3, [pc, #16]	; (acfc <setDataRange+0x68>)
    acec:	4798      	blx	r3
	return retVal;
    acee:	e7da      	b.n	aca6 <setDataRange+0x12>
    acf0:	0000ac2d 	.word	0x0000ac2d
    acf4:	20002310 	.word	0x20002310
    acf8:	0000020f 	.word	0x0000020f
    acfc:	0000c84d 	.word	0x0000c84d

0000ad00 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    ad00:	b570      	push	{r4, r5, r6, lr}
    ad02:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    ad04:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ad06:	2352      	movs	r3, #82	; 0x52
    ad08:	33ff      	adds	r3, #255	; 0xff
    ad0a:	4a0f      	ldr	r2, [pc, #60]	; (ad48 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    ad0c:	5cd3      	ldrb	r3, [r2, r3]
    ad0e:	42a3      	cmp	r3, r4
    ad10:	d205      	bcs.n	ad1e <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ad12:	200f      	movs	r0, #15
    ad14:	4b0d      	ldr	r3, [pc, #52]	; (ad4c <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    ad16:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    ad18:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ad1a:	2808      	cmp	r0, #8
    ad1c:	d112      	bne.n	ad44 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    ad1e:	490a      	ldr	r1, [pc, #40]	; (ad48 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    ad20:	780b      	ldrb	r3, [r1, #0]
    ad22:	784a      	ldrb	r2, [r1, #1]
    ad24:	0212      	lsls	r2, r2, #8
    ad26:	431a      	orrs	r2, r3
    ad28:	788b      	ldrb	r3, [r1, #2]
    ad2a:	041b      	lsls	r3, r3, #16
    ad2c:	431a      	orrs	r2, r3
    ad2e:	78cb      	ldrb	r3, [r1, #3]
    ad30:	061b      	lsls	r3, r3, #24
    ad32:	4313      	orrs	r3, r2
    ad34:	00e4      	lsls	r4, r4, #3
    ad36:	5ce2      	ldrb	r2, [r4, r3]
    ad38:	18e4      	adds	r4, r4, r3
    ad3a:	7863      	ldrb	r3, [r4, #1]
    ad3c:	021b      	lsls	r3, r3, #8
    ad3e:	4313      	orrs	r3, r2
    ad40:	802b      	strh	r3, [r5, #0]
	return result;
    ad42:	2308      	movs	r3, #8
}
    ad44:	0018      	movs	r0, r3
    ad46:	bd70      	pop	{r4, r5, r6, pc}
    ad48:	20002310 	.word	0x20002310
    ad4c:	00007ffd 	.word	0x00007ffd

0000ad50 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    ad50:	b570      	push	{r4, r5, r6, lr}
    ad52:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    ad54:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ad56:	2352      	movs	r3, #82	; 0x52
    ad58:	33ff      	adds	r3, #255	; 0xff
    ad5a:	4a0e      	ldr	r2, [pc, #56]	; (ad94 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    ad5c:	5cd3      	ldrb	r3, [r2, r3]
    ad5e:	42a3      	cmp	r3, r4
    ad60:	d205      	bcs.n	ad6e <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ad62:	200f      	movs	r0, #15
    ad64:	4b0c      	ldr	r3, [pc, #48]	; (ad98 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    ad66:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    ad68:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ad6a:	2808      	cmp	r0, #8
    ad6c:	d110      	bne.n	ad90 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    ad6e:	4909      	ldr	r1, [pc, #36]	; (ad94 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    ad70:	780b      	ldrb	r3, [r1, #0]
    ad72:	784a      	ldrb	r2, [r1, #1]
    ad74:	0212      	lsls	r2, r2, #8
    ad76:	431a      	orrs	r2, r3
    ad78:	788b      	ldrb	r3, [r1, #2]
    ad7a:	041b      	lsls	r3, r3, #16
    ad7c:	431a      	orrs	r2, r3
    ad7e:	78cb      	ldrb	r3, [r1, #3]
    ad80:	061b      	lsls	r3, r3, #24
    ad82:	4313      	orrs	r3, r2
    ad84:	00e4      	lsls	r4, r4, #3
    ad86:	18e3      	adds	r3, r4, r3
    ad88:	791b      	ldrb	r3, [r3, #4]
    ad8a:	b25b      	sxtb	r3, r3
    ad8c:	702b      	strb	r3, [r5, #0]
	return result;
    ad8e:	2308      	movs	r3, #8
}
    ad90:	0018      	movs	r0, r3
    ad92:	bd70      	pop	{r4, r5, r6, pc}
    ad94:	20002310 	.word	0x20002310
    ad98:	00007ffd 	.word	0x00007ffd

0000ad9c <LORAREG_GetAttr_MaxPayloadT1>:
{
    ad9c:	b570      	push	{r4, r5, r6, lr}
    ad9e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    ada0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ada2:	2352      	movs	r3, #82	; 0x52
    ada4:	33ff      	adds	r3, #255	; 0xff
    ada6:	4a0e      	ldr	r2, [pc, #56]	; (ade0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    ada8:	5cd3      	ldrb	r3, [r2, r3]
    adaa:	42a3      	cmp	r3, r4
    adac:	d205      	bcs.n	adba <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    adae:	200f      	movs	r0, #15
    adb0:	4b0c      	ldr	r3, [pc, #48]	; (ade4 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    adb2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    adb4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    adb6:	2808      	cmp	r0, #8
    adb8:	d10f      	bne.n	adda <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    adba:	4909      	ldr	r1, [pc, #36]	; (ade0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    adbc:	780b      	ldrb	r3, [r1, #0]
    adbe:	784a      	ldrb	r2, [r1, #1]
    adc0:	0212      	lsls	r2, r2, #8
    adc2:	431a      	orrs	r2, r3
    adc4:	788b      	ldrb	r3, [r1, #2]
    adc6:	041b      	lsls	r3, r3, #16
    adc8:	431a      	orrs	r2, r3
    adca:	78cb      	ldrb	r3, [r1, #3]
    adcc:	061b      	lsls	r3, r3, #24
    adce:	4313      	orrs	r3, r2
    add0:	00e4      	lsls	r4, r4, #3
    add2:	18e3      	adds	r3, r4, r3
    add4:	789b      	ldrb	r3, [r3, #2]
    add6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    add8:	2308      	movs	r3, #8
}
    adda:	0018      	movs	r0, r3
    addc:	bd70      	pop	{r4, r5, r6, pc}
    adde:	46c0      	nop			; (mov r8, r8)
    ade0:	20002310 	.word	0x20002310
    ade4:	00007ffd 	.word	0x00007ffd

0000ade8 <LORAREG_GetAttr_ModulationAttrT1>:
{
    ade8:	b570      	push	{r4, r5, r6, lr}
    adea:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    adec:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    adee:	2352      	movs	r3, #82	; 0x52
    adf0:	33ff      	adds	r3, #255	; 0xff
    adf2:	4a0e      	ldr	r2, [pc, #56]	; (ae2c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    adf4:	5cd3      	ldrb	r3, [r2, r3]
    adf6:	42a3      	cmp	r3, r4
    adf8:	d205      	bcs.n	ae06 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    adfa:	200f      	movs	r0, #15
    adfc:	4b0c      	ldr	r3, [pc, #48]	; (ae30 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    adfe:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    ae00:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ae02:	2808      	cmp	r0, #8
    ae04:	d10f      	bne.n	ae26 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    ae06:	4909      	ldr	r1, [pc, #36]	; (ae2c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    ae08:	780b      	ldrb	r3, [r1, #0]
    ae0a:	784a      	ldrb	r2, [r1, #1]
    ae0c:	0212      	lsls	r2, r2, #8
    ae0e:	431a      	orrs	r2, r3
    ae10:	788b      	ldrb	r3, [r1, #2]
    ae12:	041b      	lsls	r3, r3, #16
    ae14:	431a      	orrs	r2, r3
    ae16:	78cb      	ldrb	r3, [r1, #3]
    ae18:	061b      	lsls	r3, r3, #24
    ae1a:	4313      	orrs	r3, r2
    ae1c:	00e4      	lsls	r4, r4, #3
    ae1e:	18e3      	adds	r3, r4, r3
    ae20:	79db      	ldrb	r3, [r3, #7]
    ae22:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae24:	2308      	movs	r3, #8
}
    ae26:	0018      	movs	r0, r3
    ae28:	bd70      	pop	{r4, r5, r6, pc}
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	20002310 	.word	0x20002310
    ae30:	00007ffd 	.word	0x00007ffd

0000ae34 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    ae38:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ae3a:	2352      	movs	r3, #82	; 0x52
    ae3c:	33ff      	adds	r3, #255	; 0xff
    ae3e:	4a0e      	ldr	r2, [pc, #56]	; (ae78 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    ae40:	5cd3      	ldrb	r3, [r2, r3]
    ae42:	42a3      	cmp	r3, r4
    ae44:	d205      	bcs.n	ae52 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ae46:	200f      	movs	r0, #15
    ae48:	4b0c      	ldr	r3, [pc, #48]	; (ae7c <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    ae4a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    ae4c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ae4e:	2808      	cmp	r0, #8
    ae50:	d10f      	bne.n	ae72 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    ae52:	4909      	ldr	r1, [pc, #36]	; (ae78 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    ae54:	780b      	ldrb	r3, [r1, #0]
    ae56:	784a      	ldrb	r2, [r1, #1]
    ae58:	0212      	lsls	r2, r2, #8
    ae5a:	431a      	orrs	r2, r3
    ae5c:	788b      	ldrb	r3, [r1, #2]
    ae5e:	041b      	lsls	r3, r3, #16
    ae60:	431a      	orrs	r2, r3
    ae62:	78cb      	ldrb	r3, [r1, #3]
    ae64:	061b      	lsls	r3, r3, #24
    ae66:	4313      	orrs	r3, r2
    ae68:	00e4      	lsls	r4, r4, #3
    ae6a:	18e3      	adds	r3, r4, r3
    ae6c:	799b      	ldrb	r3, [r3, #6]
    ae6e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae70:	2308      	movs	r3, #8
}
    ae72:	0018      	movs	r0, r3
    ae74:	bd70      	pop	{r4, r5, r6, pc}
    ae76:	46c0      	nop			; (mov r8, r8)
    ae78:	20002310 	.word	0x20002310
    ae7c:	00007ffd 	.word	0x00007ffd

0000ae80 <LORAREG_GetAttr_SpreadFactorT1>:
{
    ae80:	b570      	push	{r4, r5, r6, lr}
    ae82:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    ae84:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    ae86:	2352      	movs	r3, #82	; 0x52
    ae88:	33ff      	adds	r3, #255	; 0xff
    ae8a:	4a0e      	ldr	r2, [pc, #56]	; (aec4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    ae8c:	5cd3      	ldrb	r3, [r2, r3]
    ae8e:	42a3      	cmp	r3, r4
    ae90:	d205      	bcs.n	ae9e <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ae92:	200f      	movs	r0, #15
    ae94:	4b0c      	ldr	r3, [pc, #48]	; (aec8 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    ae96:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    ae98:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ae9a:	2808      	cmp	r0, #8
    ae9c:	d10f      	bne.n	aebe <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    ae9e:	4909      	ldr	r1, [pc, #36]	; (aec4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    aea0:	780b      	ldrb	r3, [r1, #0]
    aea2:	784a      	ldrb	r2, [r1, #1]
    aea4:	0212      	lsls	r2, r2, #8
    aea6:	431a      	orrs	r2, r3
    aea8:	788b      	ldrb	r3, [r1, #2]
    aeaa:	041b      	lsls	r3, r3, #16
    aeac:	431a      	orrs	r2, r3
    aeae:	78cb      	ldrb	r3, [r1, #3]
    aeb0:	061b      	lsls	r3, r3, #24
    aeb2:	4313      	orrs	r3, r2
    aeb4:	00e4      	lsls	r4, r4, #3
    aeb6:	18e3      	adds	r3, r4, r3
    aeb8:	795b      	ldrb	r3, [r3, #5]
    aeba:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    aebc:	2308      	movs	r3, #8
}
    aebe:	0018      	movs	r0, r3
    aec0:	bd70      	pop	{r4, r5, r6, pc}
    aec2:	46c0      	nop			; (mov r8, r8)
    aec4:	20002310 	.word	0x20002310
    aec8:	00007ffd 	.word	0x00007ffd

0000aecc <ValidateTxFreqT1>:
{
    aecc:	b530      	push	{r4, r5, lr}
    aece:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    aed0:	2208      	movs	r2, #8
    aed2:	4668      	mov	r0, sp
    aed4:	4b20      	ldr	r3, [pc, #128]	; (af58 <ValidateTxFreqT1+0x8c>)
    aed6:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    aed8:	466b      	mov	r3, sp
    aeda:	7919      	ldrb	r1, [r3, #4]
    aedc:	232a      	movs	r3, #42	; 0x2a
    aede:	4a1f      	ldr	r2, [pc, #124]	; (af5c <ValidateTxFreqT1+0x90>)
    aee0:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    aee2:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    aee4:	4299      	cmp	r1, r3
    aee6:	dd00      	ble.n	aeea <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    aee8:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    aeea:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    aeec:	4d1b      	ldr	r5, [pc, #108]	; (af5c <ValidateTxFreqT1+0x90>)
    aeee:	23a2      	movs	r3, #162	; 0xa2
    aef0:	005b      	lsls	r3, r3, #1
    aef2:	5ceb      	ldrb	r3, [r5, r3]
    aef4:	2246      	movs	r2, #70	; 0x46
    aef6:	32ff      	adds	r2, #255	; 0xff
    aef8:	5caa      	ldrb	r2, [r5, r2]
    aefa:	0212      	lsls	r2, r2, #8
    aefc:	431a      	orrs	r2, r3
    aefe:	23a3      	movs	r3, #163	; 0xa3
    af00:	005b      	lsls	r3, r3, #1
    af02:	5ceb      	ldrb	r3, [r5, r3]
    af04:	041b      	lsls	r3, r3, #16
    af06:	431a      	orrs	r2, r3
    af08:	2348      	movs	r3, #72	; 0x48
    af0a:	33ff      	adds	r3, #255	; 0xff
    af0c:	5ceb      	ldrb	r3, [r5, r3]
    af0e:	061b      	lsls	r3, r3, #24
    af10:	4313      	orrs	r3, r2
    af12:	4a13      	ldr	r2, [pc, #76]	; (af60 <ValidateTxFreqT1+0x94>)
    af14:	434a      	muls	r2, r1
    af16:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    af18:	429c      	cmp	r4, r3
    af1a:	d01b      	beq.n	af54 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    af1c:	23aa      	movs	r3, #170	; 0xaa
    af1e:	005b      	lsls	r3, r3, #1
    af20:	5ceb      	ldrb	r3, [r5, r3]
    af22:	1ac9      	subs	r1, r1, r3
    af24:	4b0f      	ldr	r3, [pc, #60]	; (af64 <ValidateTxFreqT1+0x98>)
    af26:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    af28:	23a4      	movs	r3, #164	; 0xa4
    af2a:	005b      	lsls	r3, r3, #1
    af2c:	5ceb      	ldrb	r3, [r5, r3]
    af2e:	224a      	movs	r2, #74	; 0x4a
    af30:	32ff      	adds	r2, #255	; 0xff
    af32:	5caa      	ldrb	r2, [r5, r2]
    af34:	0212      	lsls	r2, r2, #8
    af36:	4313      	orrs	r3, r2
    af38:	22a5      	movs	r2, #165	; 0xa5
    af3a:	0052      	lsls	r2, r2, #1
    af3c:	5caa      	ldrb	r2, [r5, r2]
    af3e:	0412      	lsls	r2, r2, #16
    af40:	431a      	orrs	r2, r3
    af42:	234c      	movs	r3, #76	; 0x4c
    af44:	33ff      	adds	r3, #255	; 0xff
    af46:	5ceb      	ldrb	r3, [r5, r3]
    af48:	061b      	lsls	r3, r3, #24
    af4a:	4313      	orrs	r3, r2
    af4c:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    af4e:	429c      	cmp	r4, r3
    af50:	d000      	beq.n	af54 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    af52:	200a      	movs	r0, #10
}
    af54:	b003      	add	sp, #12
    af56:	bd30      	pop	{r4, r5, pc}
    af58:	00018655 	.word	0x00018655
    af5c:	20002310 	.word	0x20002310
    af60:	00030d40 	.word	0x00030d40
    af64:	00186a00 	.word	0x00186a00

0000af68 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    af68:	b5f0      	push	{r4, r5, r6, r7, lr}
    af6a:	46ce      	mov	lr, r9
    af6c:	4647      	mov	r7, r8
    af6e:	b580      	push	{r7, lr}
    af70:	b083      	sub	sp, #12
    af72:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    af74:	ac01      	add	r4, sp, #4
    af76:	2203      	movs	r2, #3
    af78:	0020      	movs	r0, r4
    af7a:	4b66      	ldr	r3, [pc, #408]	; (b114 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    af7c:	4798      	blx	r3
	uint8_t dataRate = *(uint8_t *)attrInput;
    af7e:	78a5      	ldrb	r5, [r4, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    af80:	2352      	movs	r3, #82	; 0x52
    af82:	33ff      	adds	r3, #255	; 0xff
    af84:	4a64      	ldr	r2, [pc, #400]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    af86:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    af88:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    af8a:	42ab      	cmp	r3, r5
    af8c:	d25c      	bcs.n	b048 <LORAREG_GetAttr_NewTxChConfigT1+0xe0>
}
    af8e:	0020      	movs	r0, r4
    af90:	b003      	add	sp, #12
    af92:	bc0c      	pop	{r2, r3}
    af94:	4690      	mov	r8, r2
    af96:	4699      	mov	r9, r3
    af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    af9a:	466b      	mov	r3, sp
    af9c:	1cdd      	adds	r5, r3, #3
    af9e:	23aa      	movs	r3, #170	; 0xaa
    afa0:	005b      	lsls	r3, r3, #1
    afa2:	4a5d      	ldr	r2, [pc, #372]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    afa4:	5cd0      	ldrb	r0, [r2, r3]
    afa6:	002b      	movs	r3, r5
    afa8:	2200      	movs	r2, #0
    afaa:	2100      	movs	r1, #0
    afac:	4c5b      	ldr	r4, [pc, #364]	; (b11c <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    afae:	47a0      	blx	r4
    afb0:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    afb2:	782b      	ldrb	r3, [r5, #0]
    afb4:	2b3f      	cmp	r3, #63	; 0x3f
    afb6:	d80a      	bhi.n	afce <LORAREG_GetAttr_NewTxChConfigT1+0x66>
			if( RegParams.band == ISM_NA915)
    afb8:	232f      	movs	r3, #47	; 0x2f
    afba:	4a57      	ldr	r2, [pc, #348]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    afbc:	5cd3      	ldrb	r3, [r2, r3]
    afbe:	2b02      	cmp	r3, #2
    afc0:	d002      	beq.n	afc8 <LORAREG_GetAttr_NewTxChConfigT1+0x60>
				radioConfig->sf = SF_12;
    afc2:	230c      	movs	r3, #12
    afc4:	72f3      	strb	r3, [r6, #11]
    afc6:	e004      	b.n	afd2 <LORAREG_GetAttr_NewTxChConfigT1+0x6a>
				radioConfig->sf = SF_10;
    afc8:	3308      	adds	r3, #8
    afca:	72f3      	strb	r3, [r6, #11]
    afcc:	e001      	b.n	afd2 <LORAREG_GetAttr_NewTxChConfigT1+0x6a>
			radioConfig->sf = SF_8;
    afce:	2308      	movs	r3, #8
    afd0:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    afd2:	4b51      	ldr	r3, [pc, #324]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    afd4:	4a52      	ldr	r2, [pc, #328]	; (b120 <LORAREG_GetAttr_NewTxChConfigT1+0x1b8>)
    afd6:	5c9a      	ldrb	r2, [r3, r2]
    afd8:	4952      	ldr	r1, [pc, #328]	; (b124 <LORAREG_GetAttr_NewTxChConfigT1+0x1bc>)
    afda:	5c58      	ldrb	r0, [r3, r1]
    afdc:	0200      	lsls	r0, r0, #8
    afde:	4310      	orrs	r0, r2
    afe0:	b2c1      	uxtb	r1, r0
    afe2:	0a00      	lsrs	r0, r0, #8
    afe4:	4b50      	ldr	r3, [pc, #320]	; (b128 <LORAREG_GetAttr_NewTxChConfigT1+0x1c0>)
    afe6:	4798      	blx	r3
    afe8:	e05b      	b.n	b0a2 <LORAREG_GetAttr_NewTxChConfigT1+0x13a>
    			radioConfig->ecrConfig.override = true;
    afea:	3b01      	subs	r3, #1
    afec:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    afee:	71b3      	strb	r3, [r6, #6]
    aff0:	e085      	b.n	b0fe <LORAREG_GetAttr_NewTxChConfigT1+0x196>
			radioConfig->bandwidth = BW_500KHZ;
    aff2:	2209      	movs	r2, #9
    aff4:	72b2      	strb	r2, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    aff6:	4a48      	ldr	r2, [pc, #288]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    aff8:	21aa      	movs	r1, #170	; 0xaa
    affa:	0049      	lsls	r1, r1, #1
    affc:	5c51      	ldrb	r1, [r2, r1]
    affe:	1a5b      	subs	r3, r3, r1
    b000:	494a      	ldr	r1, [pc, #296]	; (b12c <LORAREG_GetAttr_NewTxChConfigT1+0x1c4>)
    b002:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    b004:	21a4      	movs	r1, #164	; 0xa4
    b006:	0049      	lsls	r1, r1, #1
    b008:	5c51      	ldrb	r1, [r2, r1]
    b00a:	204a      	movs	r0, #74	; 0x4a
    b00c:	30ff      	adds	r0, #255	; 0xff
    b00e:	5c10      	ldrb	r0, [r2, r0]
    b010:	0200      	lsls	r0, r0, #8
    b012:	4308      	orrs	r0, r1
    b014:	21a5      	movs	r1, #165	; 0xa5
    b016:	0049      	lsls	r1, r1, #1
    b018:	5c51      	ldrb	r1, [r2, r1]
    b01a:	0409      	lsls	r1, r1, #16
    b01c:	4308      	orrs	r0, r1
    b01e:	214c      	movs	r1, #76	; 0x4c
    b020:	31ff      	adds	r1, #255	; 0xff
    b022:	5c51      	ldrb	r1, [r2, r1]
    b024:	0609      	lsls	r1, r1, #24
    b026:	4301      	orrs	r1, r0
    b028:	185b      	adds	r3, r3, r1
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    b02a:	6033      	str	r3, [r6, #0]
			if( RegParams.band == ISM_NA915)
    b02c:	232f      	movs	r3, #47	; 0x2f
    b02e:	5cd3      	ldrb	r3, [r2, r3]
    b030:	2b02      	cmp	r3, #2
    b032:	d003      	beq.n	b03c <LORAREG_GetAttr_NewTxChConfigT1+0xd4>
			if (txPower <= 26)
    b034:	2f1a      	cmp	r7, #26
    b036:	d804      	bhi.n	b042 <LORAREG_GetAttr_NewTxChConfigT1+0xda>
				radioConfig->txPower = txPower;
    b038:	7237      	strb	r7, [r6, #8]
    b03a:	e060      	b.n	b0fe <LORAREG_GetAttr_NewTxChConfigT1+0x196>
			    radioConfig->ecrConfig.override = false;
    b03c:	2300      	movs	r3, #0
    b03e:	71f3      	strb	r3, [r6, #7]
    b040:	e7f8      	b.n	b034 <LORAREG_GetAttr_NewTxChConfigT1+0xcc>
				radioConfig->txPower = 26;
    b042:	231a      	movs	r3, #26
    b044:	7233      	strb	r3, [r6, #8]
    b046:	e05a      	b.n	b0fe <LORAREG_GetAttr_NewTxChConfigT1+0x196>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR, (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    b048:	466b      	mov	r3, sp
    b04a:	1d59      	adds	r1, r3, #5
    b04c:	201d      	movs	r0, #29
    b04e:	4b38      	ldr	r3, [pc, #224]	; (b130 <LORAREG_GetAttr_NewTxChConfigT1+0x1c8>)
    b050:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    b052:	240a      	movs	r4, #10
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR, (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    b054:	2808      	cmp	r0, #8
    b056:	d19a      	bne.n	af8e <LORAREG_GetAttr_NewTxChConfigT1+0x26>
		result = GetTxChannelConfig1(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    b058:	ab01      	add	r3, sp, #4
    b05a:	785a      	ldrb	r2, [r3, #1]
    b05c:	4690      	mov	r8, r2
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    b05e:	2228      	movs	r2, #40	; 0x28
    b060:	492d      	ldr	r1, [pc, #180]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    b062:	5c8f      	ldrb	r7, [r1, r2]
	if (transmissionType == 1) // data message (not join request), it should search in all
    b064:	781b      	ldrb	r3, [r3, #0]
    b066:	2b00      	cmp	r3, #0
    b068:	d097      	beq.n	af9a <LORAREG_GetAttr_NewTxChConfigT1+0x32>
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    b06a:	4689      	mov	r9, r1
    b06c:	232a      	movs	r3, #42	; 0x2a
    b06e:	5cc8      	ldrb	r0, [r1, r3]
    b070:	466b      	mov	r3, sp
    b072:	3303      	adds	r3, #3
    b074:	002a      	movs	r2, r5
    b076:	2101      	movs	r1, #1
    b078:	4c28      	ldr	r4, [pc, #160]	; (b11c <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    b07a:	47a0      	blx	r4
    b07c:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    b07e:	464b      	mov	r3, r9
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	464a      	mov	r2, r9
    b084:	7852      	ldrb	r2, [r2, #1]
    b086:	0212      	lsls	r2, r2, #8
    b088:	431a      	orrs	r2, r3
    b08a:	464b      	mov	r3, r9
    b08c:	789b      	ldrb	r3, [r3, #2]
    b08e:	041b      	lsls	r3, r3, #16
    b090:	431a      	orrs	r2, r3
    b092:	464b      	mov	r3, r9
    b094:	78db      	ldrb	r3, [r3, #3]
    b096:	061b      	lsls	r3, r3, #24
    b098:	4313      	orrs	r3, r2
    b09a:	00ed      	lsls	r5, r5, #3
    b09c:	18eb      	adds	r3, r5, r3
    b09e:	795b      	ldrb	r3, [r3, #5]
    b0a0:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    b0a2:	2c08      	cmp	r4, #8
    b0a4:	d000      	beq.n	b0a8 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
    b0a6:	e772      	b.n	af8e <LORAREG_GetAttr_NewTxChConfigT1+0x26>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    b0a8:	4643      	mov	r3, r8
    b0aa:	005b      	lsls	r3, r3, #1
    b0ac:	1aff      	subs	r7, r7, r3
    b0ae:	b2ff      	uxtb	r7, r7
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    b0b0:	466b      	mov	r3, sp
    b0b2:	3303      	adds	r3, #3
    b0b4:	781b      	ldrb	r3, [r3, #0]
    b0b6:	22aa      	movs	r2, #170	; 0xaa
    b0b8:	0052      	lsls	r2, r2, #1
    b0ba:	4917      	ldr	r1, [pc, #92]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    b0bc:	5c8a      	ldrb	r2, [r1, r2]
    b0be:	429a      	cmp	r2, r3
    b0c0:	d997      	bls.n	aff2 <LORAREG_GetAttr_NewTxChConfigT1+0x8a>
			radioConfig->bandwidth = BW_125KHZ;
    b0c2:	2207      	movs	r2, #7
    b0c4:	72b2      	strb	r2, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    b0c6:	323e      	adds	r2, #62	; 0x3e
    b0c8:	32ff      	adds	r2, #255	; 0xff
    b0ca:	5c8a      	ldrb	r2, [r1, r2]
    b0cc:	2046      	movs	r0, #70	; 0x46
    b0ce:	30ff      	adds	r0, #255	; 0xff
    b0d0:	5c08      	ldrb	r0, [r1, r0]
    b0d2:	0200      	lsls	r0, r0, #8
    b0d4:	4310      	orrs	r0, r2
    b0d6:	22a3      	movs	r2, #163	; 0xa3
    b0d8:	0052      	lsls	r2, r2, #1
    b0da:	5c8a      	ldrb	r2, [r1, r2]
    b0dc:	0412      	lsls	r2, r2, #16
    b0de:	4310      	orrs	r0, r2
    b0e0:	2248      	movs	r2, #72	; 0x48
    b0e2:	32ff      	adds	r2, #255	; 0xff
    b0e4:	5c8a      	ldrb	r2, [r1, r2]
    b0e6:	0612      	lsls	r2, r2, #24
    b0e8:	4302      	orrs	r2, r0
    b0ea:	4812      	ldr	r0, [pc, #72]	; (b134 <LORAREG_GetAttr_NewTxChConfigT1+0x1cc>)
    b0ec:	4343      	muls	r3, r0
    b0ee:	18d3      	adds	r3, r2, r3
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    b0f0:	6033      	str	r3, [r6, #0]
			radioConfig->txPower = txPower;
    b0f2:	7237      	strb	r7, [r6, #8]
			if(RegParams.band == ISM_NA915)
    b0f4:	232f      	movs	r3, #47	; 0x2f
    b0f6:	5ccb      	ldrb	r3, [r1, r3]
    b0f8:	2b02      	cmp	r3, #2
    b0fa:	d100      	bne.n	b0fe <LORAREG_GetAttr_NewTxChConfigT1+0x196>
    b0fc:	e775      	b.n	afea <LORAREG_GetAttr_NewTxChConfigT1+0x82>
		radioConfig->freq_hop_period = DISABLED;
    b0fe:	2300      	movs	r3, #0
    b100:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    b102:	3301      	adds	r3, #1
    b104:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    b106:	466b      	mov	r3, sp
    b108:	78d9      	ldrb	r1, [r3, #3]
    b10a:	2330      	movs	r3, #48	; 0x30
    b10c:	4a02      	ldr	r2, [pc, #8]	; (b118 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    b10e:	54d1      	strb	r1, [r2, r3]
    b110:	e73d      	b.n	af8e <LORAREG_GetAttr_NewTxChConfigT1+0x26>
    b112:	46c0      	nop			; (mov r8, r8)
    b114:	00018655 	.word	0x00018655
    b118:	20002310 	.word	0x20002310
    b11c:	00008735 	.word	0x00008735
    b120:	0000020d 	.word	0x0000020d
    b124:	0000020e 	.word	0x0000020e
    b128:	0000c84d 	.word	0x0000c84d
    b12c:	00186a00 	.word	0x00186a00
    b130:	00008181 	.word	0x00008181
    b134:	00030d40 	.word	0x00030d40

0000b138 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    b138:	4b2b      	ldr	r3, [pc, #172]	; (b1e8 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    b13a:	4a2c      	ldr	r2, [pc, #176]	; (b1ec <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    b13c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    b13e:	4a2c      	ldr	r2, [pc, #176]	; (b1f0 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    b140:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    b142:	4a2c      	ldr	r2, [pc, #176]	; (b1f4 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    b144:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    b146:	4a2c      	ldr	r2, [pc, #176]	; (b1f8 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    b148:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b14a:	4a2c      	ldr	r2, [pc, #176]	; (b1fc <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    b14c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b14e:	4a2c      	ldr	r2, [pc, #176]	; (b200 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    b150:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b152:	4a2c      	ldr	r2, [pc, #176]	; (b204 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    b154:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b156:	4a2c      	ldr	r2, [pc, #176]	; (b208 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    b158:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b15a:	4a2c      	ldr	r2, [pc, #176]	; (b20c <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    b15c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b15e:	4a2c      	ldr	r2, [pc, #176]	; (b210 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    b160:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b162:	4a2c      	ldr	r2, [pc, #176]	; (b214 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    b164:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    b166:	4a2c      	ldr	r2, [pc, #176]	; (b218 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    b168:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b16a:	4a2c      	ldr	r2, [pc, #176]	; (b21c <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    b16c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b16e:	4a2c      	ldr	r2, [pc, #176]	; (b220 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    b170:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    b172:	4a2c      	ldr	r2, [pc, #176]	; (b224 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    b174:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b176:	492c      	ldr	r1, [pc, #176]	; (b228 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    b178:	2280      	movs	r2, #128	; 0x80
    b17a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    b17c:	4a2b      	ldr	r2, [pc, #172]	; (b22c <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    b17e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    b180:	492b      	ldr	r1, [pc, #172]	; (b230 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    b182:	228c      	movs	r2, #140	; 0x8c
    b184:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    b186:	492b      	ldr	r1, [pc, #172]	; (b234 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    b188:	3204      	adds	r2, #4
    b18a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    b18c:	492a      	ldr	r1, [pc, #168]	; (b238 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    b18e:	3204      	adds	r2, #4
    b190:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    b192:	492a      	ldr	r1, [pc, #168]	; (b23c <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    b194:	3204      	adds	r2, #4
    b196:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b198:	4929      	ldr	r1, [pc, #164]	; (b240 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    b19a:	3204      	adds	r2, #4
    b19c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b19e:	4929      	ldr	r1, [pc, #164]	; (b244 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    b1a0:	3204      	adds	r2, #4
    b1a2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b1a4:	4928      	ldr	r1, [pc, #160]	; (b248 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    b1a6:	3204      	adds	r2, #4
    b1a8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b1aa:	4928      	ldr	r1, [pc, #160]	; (b24c <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    b1ac:	3204      	adds	r2, #4
    b1ae:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b1b0:	4927      	ldr	r1, [pc, #156]	; (b250 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    b1b2:	3204      	adds	r2, #4
    b1b4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b1b6:	4927      	ldr	r1, [pc, #156]	; (b254 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    b1b8:	3204      	adds	r2, #4
    b1ba:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b1bc:	4926      	ldr	r1, [pc, #152]	; (b258 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    b1be:	3204      	adds	r2, #4
    b1c0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    b1c2:	4926      	ldr	r1, [pc, #152]	; (b25c <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    b1c4:	3204      	adds	r2, #4
    b1c6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    b1c8:	4925      	ldr	r1, [pc, #148]	; (b260 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    b1ca:	3204      	adds	r2, #4
    b1cc:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b1ce:	4925      	ldr	r1, [pc, #148]	; (b264 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    b1d0:	3204      	adds	r2, #4
    b1d2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b1d4:	4924      	ldr	r1, [pc, #144]	; (b268 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    b1d6:	3214      	adds	r2, #20
    b1d8:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b1da:	4924      	ldr	r1, [pc, #144]	; (b26c <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    b1dc:	321c      	adds	r2, #28
    b1de:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b1e0:	4923      	ldr	r1, [pc, #140]	; (b270 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    b1e2:	3a18      	subs	r2, #24
    b1e4:	5099      	str	r1, [r3, r2]
}
    b1e6:	4770      	bx	lr
    b1e8:	20000b0c 	.word	0x20000b0c
    b1ec:	00007f25 	.word	0x00007f25
    b1f0:	0000ad01 	.word	0x0000ad01
    b1f4:	0000ad51 	.word	0x0000ad51
    b1f8:	0000ad9d 	.word	0x0000ad9d
    b1fc:	00007d71 	.word	0x00007d71
    b200:	00007d81 	.word	0x00007d81
    b204:	00007d9d 	.word	0x00007d9d
    b208:	00007dad 	.word	0x00007dad
    b20c:	00009139 	.word	0x00009139
    b210:	00007dbd 	.word	0x00007dbd
    b214:	00007dcd 	.word	0x00007dcd
    b218:	0000900d 	.word	0x0000900d
    b21c:	000080d9 	.word	0x000080d9
    b220:	00007e1d 	.word	0x00007e1d
    b224:	00008f61 	.word	0x00008f61
    b228:	00008ec1 	.word	0x00008ec1
    b22c:	00007e69 	.word	0x00007e69
    b230:	0000ade9 	.word	0x0000ade9
    b234:	0000ae35 	.word	0x0000ae35
    b238:	0000ae81 	.word	0x0000ae81
    b23c:	00007e73 	.word	0x00007e73
    b240:	00007e7d 	.word	0x00007e7d
    b244:	00007e87 	.word	0x00007e87
    b248:	00007e91 	.word	0x00007e91
    b24c:	00007e9d 	.word	0x00007e9d
    b250:	0000896d 	.word	0x0000896d
    b254:	00007ea9 	.word	0x00007ea9
    b258:	00007eb1 	.word	0x00007eb1
    b25c:	0000af69 	.word	0x0000af69
    b260:	00008941 	.word	0x00008941
    b264:	00007ee9 	.word	0x00007ee9
    b268:	00007eb9 	.word	0x00007eb9
    b26c:	00007ec9 	.word	0x00007ec9
    b270:	00007ed9 	.word	0x00007ed9

0000b274 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    b274:	4b2d      	ldr	r3, [pc, #180]	; (b32c <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    b276:	4a2e      	ldr	r2, [pc, #184]	; (b330 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    b278:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b27a:	4a2e      	ldr	r2, [pc, #184]	; (b334 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    b27c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b27e:	4a2e      	ldr	r2, [pc, #184]	; (b338 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    b280:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    b282:	4a2e      	ldr	r2, [pc, #184]	; (b33c <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    b284:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b286:	4a2e      	ldr	r2, [pc, #184]	; (b340 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    b288:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b28a:	4a2e      	ldr	r2, [pc, #184]	; (b344 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    b28c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b28e:	4a2e      	ldr	r2, [pc, #184]	; (b348 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    b290:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b292:	4a2e      	ldr	r2, [pc, #184]	; (b34c <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    b294:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b296:	4a2e      	ldr	r2, [pc, #184]	; (b350 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    b298:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b29a:	4a2e      	ldr	r2, [pc, #184]	; (b354 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    b29c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b29e:	4a2e      	ldr	r2, [pc, #184]	; (b358 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    b2a0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b2a2:	4a2e      	ldr	r2, [pc, #184]	; (b35c <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    b2a4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b2a6:	4a2e      	ldr	r2, [pc, #184]	; (b360 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    b2a8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b2aa:	4a2e      	ldr	r2, [pc, #184]	; (b364 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    b2ac:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    b2ae:	4a2e      	ldr	r2, [pc, #184]	; (b368 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    b2b0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b2b2:	492e      	ldr	r1, [pc, #184]	; (b36c <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    b2b4:	2280      	movs	r2, #128	; 0x80
    b2b6:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    b2b8:	4a2d      	ldr	r2, [pc, #180]	; (b370 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    b2ba:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b2bc:	492d      	ldr	r1, [pc, #180]	; (b374 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    b2be:	228c      	movs	r2, #140	; 0x8c
    b2c0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b2c2:	492d      	ldr	r1, [pc, #180]	; (b378 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    b2c4:	3204      	adds	r2, #4
    b2c6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b2c8:	492c      	ldr	r1, [pc, #176]	; (b37c <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    b2ca:	3204      	adds	r2, #4
    b2cc:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    b2ce:	492c      	ldr	r1, [pc, #176]	; (b380 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    b2d0:	3204      	adds	r2, #4
    b2d2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b2d4:	492b      	ldr	r1, [pc, #172]	; (b384 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    b2d6:	3204      	adds	r2, #4
    b2d8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b2da:	492b      	ldr	r1, [pc, #172]	; (b388 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    b2dc:	3204      	adds	r2, #4
    b2de:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b2e0:	492a      	ldr	r1, [pc, #168]	; (b38c <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    b2e2:	3204      	adds	r2, #4
    b2e4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b2e6:	492a      	ldr	r1, [pc, #168]	; (b390 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    b2e8:	3204      	adds	r2, #4
    b2ea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b2ec:	4929      	ldr	r1, [pc, #164]	; (b394 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    b2ee:	3204      	adds	r2, #4
    b2f0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b2f2:	4929      	ldr	r1, [pc, #164]	; (b398 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    b2f4:	3204      	adds	r2, #4
    b2f6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b2f8:	4928      	ldr	r1, [pc, #160]	; (b39c <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    b2fa:	3204      	adds	r2, #4
    b2fc:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b2fe:	4928      	ldr	r1, [pc, #160]	; (b3a0 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    b300:	3204      	adds	r2, #4
    b302:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b304:	4927      	ldr	r1, [pc, #156]	; (b3a4 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    b306:	3204      	adds	r2, #4
    b308:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b30a:	4927      	ldr	r1, [pc, #156]	; (b3a8 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    b30c:	3204      	adds	r2, #4
    b30e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b310:	4926      	ldr	r1, [pc, #152]	; (b3ac <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    b312:	320c      	adds	r2, #12
    b314:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b316:	4926      	ldr	r1, [pc, #152]	; (b3b0 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    b318:	3208      	adds	r2, #8
    b31a:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b31c:	4925      	ldr	r1, [pc, #148]	; (b3b4 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    b31e:	321c      	adds	r2, #28
    b320:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b322:	4925      	ldr	r1, [pc, #148]	; (b3b8 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    b324:	3a18      	subs	r2, #24
    b326:	5099      	str	r1, [r3, r2]
}
    b328:	4770      	bx	lr
    b32a:	46c0      	nop			; (mov r8, r8)
    b32c:	20000b0c 	.word	0x20000b0c
    b330:	00009495 	.word	0x00009495
    b334:	000083c1 	.word	0x000083c1
    b338:	00008381 	.word	0x00008381
    b33c:	00008341 	.word	0x00008341
    b340:	00007d71 	.word	0x00007d71
    b344:	00007d81 	.word	0x00007d81
    b348:	00007d9d 	.word	0x00007d9d
    b34c:	00007dad 	.word	0x00007dad
    b350:	00009139 	.word	0x00009139
    b354:	00007dbd 	.word	0x00007dbd
    b358:	00007dcd 	.word	0x00007dcd
    b35c:	00009399 	.word	0x00009399
    b360:	000080d9 	.word	0x000080d9
    b364:	00007e1d 	.word	0x00007e1d
    b368:	0000932d 	.word	0x0000932d
    b36c:	00008ec1 	.word	0x00008ec1
    b370:	00008091 	.word	0x00008091
    b374:	00008301 	.word	0x00008301
    b378:	000082c1 	.word	0x000082c1
    b37c:	00008281 	.word	0x00008281
    b380:	00009199 	.word	0x00009199
    b384:	00007e7d 	.word	0x00007e7d
    b388:	00007e87 	.word	0x00007e87
    b38c:	00007e91 	.word	0x00007e91
    b390:	00007e9d 	.word	0x00007e9d
    b394:	0000896d 	.word	0x0000896d
    b398:	00007ea9 	.word	0x00007ea9
    b39c:	00007eb1 	.word	0x00007eb1
    b3a0:	00009d55 	.word	0x00009d55
    b3a4:	00009d29 	.word	0x00009d29
    b3a8:	00007ee9 	.word	0x00007ee9
    b3ac:	00009151 	.word	0x00009151
    b3b0:	00007eb9 	.word	0x00007eb9
    b3b4:	00007ec9 	.word	0x00007ec9
    b3b8:	00007ed9 	.word	0x00007ed9

0000b3bc <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    b3bc:	4b2d      	ldr	r3, [pc, #180]	; (b474 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    b3be:	4a2e      	ldr	r2, [pc, #184]	; (b478 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    b3c0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b3c2:	4a2e      	ldr	r2, [pc, #184]	; (b47c <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    b3c4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b3c6:	4a2e      	ldr	r2, [pc, #184]	; (b480 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    b3c8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    b3ca:	4a2e      	ldr	r2, [pc, #184]	; (b484 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    b3cc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b3ce:	4a2e      	ldr	r2, [pc, #184]	; (b488 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    b3d0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b3d2:	4a2e      	ldr	r2, [pc, #184]	; (b48c <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    b3d4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b3d6:	4a2e      	ldr	r2, [pc, #184]	; (b490 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    b3d8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b3da:	4a2e      	ldr	r2, [pc, #184]	; (b494 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    b3dc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b3de:	4a2e      	ldr	r2, [pc, #184]	; (b498 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    b3e0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b3e2:	4a2e      	ldr	r2, [pc, #184]	; (b49c <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    b3e4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b3e6:	4a2e      	ldr	r2, [pc, #184]	; (b4a0 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    b3e8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b3ea:	4a2e      	ldr	r2, [pc, #184]	; (b4a4 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    b3ec:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b3ee:	4a2e      	ldr	r2, [pc, #184]	; (b4a8 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    b3f0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b3f2:	4a2e      	ldr	r2, [pc, #184]	; (b4ac <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    b3f4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    b3f6:	4a2e      	ldr	r2, [pc, #184]	; (b4b0 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    b3f8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b3fa:	492e      	ldr	r1, [pc, #184]	; (b4b4 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    b3fc:	2280      	movs	r2, #128	; 0x80
    b3fe:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b400:	492d      	ldr	r1, [pc, #180]	; (b4b8 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    b402:	320c      	adds	r2, #12
    b404:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b406:	492d      	ldr	r1, [pc, #180]	; (b4bc <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    b408:	3204      	adds	r2, #4
    b40a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b40c:	492c      	ldr	r1, [pc, #176]	; (b4c0 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    b40e:	3204      	adds	r2, #4
    b410:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b412:	492c      	ldr	r1, [pc, #176]	; (b4c4 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    b414:	3208      	adds	r2, #8
    b416:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b418:	492b      	ldr	r1, [pc, #172]	; (b4c8 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    b41a:	3204      	adds	r2, #4
    b41c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b41e:	492b      	ldr	r1, [pc, #172]	; (b4cc <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    b420:	3204      	adds	r2, #4
    b422:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b424:	492a      	ldr	r1, [pc, #168]	; (b4d0 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    b426:	3204      	adds	r2, #4
    b428:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b42a:	492a      	ldr	r1, [pc, #168]	; (b4d4 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    b42c:	3204      	adds	r2, #4
    b42e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b430:	4929      	ldr	r1, [pc, #164]	; (b4d8 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    b432:	3204      	adds	r2, #4
    b434:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b436:	4929      	ldr	r1, [pc, #164]	; (b4dc <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    b438:	3204      	adds	r2, #4
    b43a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b43c:	4928      	ldr	r1, [pc, #160]	; (b4e0 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    b43e:	3204      	adds	r2, #4
    b440:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b442:	4928      	ldr	r1, [pc, #160]	; (b4e4 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    b444:	3204      	adds	r2, #4
    b446:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b448:	4927      	ldr	r1, [pc, #156]	; (b4e8 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    b44a:	3204      	adds	r2, #4
    b44c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b44e:	4927      	ldr	r1, [pc, #156]	; (b4ec <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    b450:	320c      	adds	r2, #12
    b452:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b454:	4926      	ldr	r1, [pc, #152]	; (b4f0 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    b456:	3208      	adds	r2, #8
    b458:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b45a:	4926      	ldr	r1, [pc, #152]	; (b4f4 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    b45c:	321c      	adds	r2, #28
    b45e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b460:	4925      	ldr	r1, [pc, #148]	; (b4f8 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    b462:	3a18      	subs	r2, #24
    b464:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    b466:	4a25      	ldr	r2, [pc, #148]	; (b4fc <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    b468:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    b46a:	4925      	ldr	r1, [pc, #148]	; (b500 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    b46c:	2298      	movs	r2, #152	; 0x98
    b46e:	5099      	str	r1, [r3, r2]
}
    b470:	4770      	bx	lr
    b472:	46c0      	nop			; (mov r8, r8)
    b474:	20000b0c 	.word	0x20000b0c
    b478:	000095d1 	.word	0x000095d1
    b47c:	000083c1 	.word	0x000083c1
    b480:	00008381 	.word	0x00008381
    b484:	00008405 	.word	0x00008405
    b488:	00007d71 	.word	0x00007d71
    b48c:	00007d81 	.word	0x00007d81
    b490:	00007d9d 	.word	0x00007d9d
    b494:	00007dad 	.word	0x00007dad
    b498:	00009139 	.word	0x00009139
    b49c:	00007dbd 	.word	0x00007dbd
    b4a0:	00007dcd 	.word	0x00007dcd
    b4a4:	00009399 	.word	0x00009399
    b4a8:	000080d9 	.word	0x000080d9
    b4ac:	00007e1d 	.word	0x00007e1d
    b4b0:	000094dd 	.word	0x000094dd
    b4b4:	00008ec1 	.word	0x00008ec1
    b4b8:	00008301 	.word	0x00008301
    b4bc:	000082c1 	.word	0x000082c1
    b4c0:	00008281 	.word	0x00008281
    b4c4:	00007e7d 	.word	0x00007e7d
    b4c8:	00007e87 	.word	0x00007e87
    b4cc:	00007e91 	.word	0x00007e91
    b4d0:	00007e9d 	.word	0x00007e9d
    b4d4:	0000896d 	.word	0x0000896d
    b4d8:	00007ea9 	.word	0x00007ea9
    b4dc:	00007eb1 	.word	0x00007eb1
    b4e0:	00009d55 	.word	0x00009d55
    b4e4:	00009d29 	.word	0x00009d29
    b4e8:	00007ee9 	.word	0x00007ee9
    b4ec:	00009151 	.word	0x00009151
    b4f0:	00007eb9 	.word	0x00007eb9
    b4f4:	00007ec9 	.word	0x00007ec9
    b4f8:	00007ed9 	.word	0x00007ed9
    b4fc:	00008091 	.word	0x00008091
    b500:	00009199 	.word	0x00009199

0000b504 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    b504:	4b2b      	ldr	r3, [pc, #172]	; (b5b4 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    b506:	4a2c      	ldr	r2, [pc, #176]	; (b5b8 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    b508:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    b50a:	4a2c      	ldr	r2, [pc, #176]	; (b5bc <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    b50c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    b50e:	4a2c      	ldr	r2, [pc, #176]	; (b5c0 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    b510:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    b512:	4a2c      	ldr	r2, [pc, #176]	; (b5c4 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    b514:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b516:	4a2c      	ldr	r2, [pc, #176]	; (b5c8 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    b518:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b51a:	4a2c      	ldr	r2, [pc, #176]	; (b5cc <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    b51c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b51e:	4a2c      	ldr	r2, [pc, #176]	; (b5d0 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    b520:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b522:	4a2c      	ldr	r2, [pc, #176]	; (b5d4 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    b524:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b526:	4a2c      	ldr	r2, [pc, #176]	; (b5d8 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    b528:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b52a:	4a2c      	ldr	r2, [pc, #176]	; (b5dc <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    b52c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b52e:	4a2c      	ldr	r2, [pc, #176]	; (b5e0 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    b530:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    b532:	4a2c      	ldr	r2, [pc, #176]	; (b5e4 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    b534:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b536:	4a2c      	ldr	r2, [pc, #176]	; (b5e8 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    b538:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b53a:	4a2c      	ldr	r2, [pc, #176]	; (b5ec <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    b53c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    b53e:	4a2c      	ldr	r2, [pc, #176]	; (b5f0 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    b540:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b542:	492c      	ldr	r1, [pc, #176]	; (b5f4 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    b544:	2280      	movs	r2, #128	; 0x80
    b546:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    b548:	4a2b      	ldr	r2, [pc, #172]	; (b5f8 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    b54a:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    b54c:	4a2b      	ldr	r2, [pc, #172]	; (b5fc <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    b54e:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    b550:	492b      	ldr	r1, [pc, #172]	; (b600 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    b552:	228c      	movs	r2, #140	; 0x8c
    b554:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    b556:	492b      	ldr	r1, [pc, #172]	; (b604 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    b558:	3204      	adds	r2, #4
    b55a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    b55c:	492a      	ldr	r1, [pc, #168]	; (b608 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    b55e:	3204      	adds	r2, #4
    b560:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b562:	492a      	ldr	r1, [pc, #168]	; (b60c <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    b564:	3208      	adds	r2, #8
    b566:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b568:	4929      	ldr	r1, [pc, #164]	; (b610 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    b56a:	3204      	adds	r2, #4
    b56c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b56e:	4929      	ldr	r1, [pc, #164]	; (b614 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    b570:	3204      	adds	r2, #4
    b572:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b574:	4928      	ldr	r1, [pc, #160]	; (b618 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    b576:	3204      	adds	r2, #4
    b578:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b57a:	4928      	ldr	r1, [pc, #160]	; (b61c <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    b57c:	3204      	adds	r2, #4
    b57e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b580:	4927      	ldr	r1, [pc, #156]	; (b620 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    b582:	3204      	adds	r2, #4
    b584:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b586:	4927      	ldr	r1, [pc, #156]	; (b624 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    b588:	3204      	adds	r2, #4
    b58a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    b58c:	4926      	ldr	r1, [pc, #152]	; (b628 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    b58e:	3204      	adds	r2, #4
    b590:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    b592:	4926      	ldr	r1, [pc, #152]	; (b62c <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    b594:	3204      	adds	r2, #4
    b596:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b598:	4925      	ldr	r1, [pc, #148]	; (b630 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    b59a:	3204      	adds	r2, #4
    b59c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b59e:	4925      	ldr	r1, [pc, #148]	; (b634 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    b5a0:	3214      	adds	r2, #20
    b5a2:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b5a4:	4924      	ldr	r1, [pc, #144]	; (b638 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    b5a6:	321c      	adds	r2, #28
    b5a8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b5aa:	4924      	ldr	r1, [pc, #144]	; (b63c <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    b5ac:	3a18      	subs	r2, #24
    b5ae:	5099      	str	r1, [r3, r2]
}
    b5b0:	4770      	bx	lr
    b5b2:	46c0      	nop			; (mov r8, r8)
    b5b4:	20000b0c 	.word	0x20000b0c
    b5b8:	00007f25 	.word	0x00007f25
    b5bc:	0000ad01 	.word	0x0000ad01
    b5c0:	0000ad51 	.word	0x0000ad51
    b5c4:	0000ad9d 	.word	0x0000ad9d
    b5c8:	00007d71 	.word	0x00007d71
    b5cc:	00007d81 	.word	0x00007d81
    b5d0:	00007d9d 	.word	0x00007d9d
    b5d4:	00007dad 	.word	0x00007dad
    b5d8:	00009139 	.word	0x00009139
    b5dc:	00007dbd 	.word	0x00007dbd
    b5e0:	00007dcd 	.word	0x00007dcd
    b5e4:	0000900d 	.word	0x0000900d
    b5e8:	000080d9 	.word	0x000080d9
    b5ec:	00007e1d 	.word	0x00007e1d
    b5f0:	00008f61 	.word	0x00008f61
    b5f4:	00008ec1 	.word	0x00008ec1
    b5f8:	00007e69 	.word	0x00007e69
    b5fc:	00007e73 	.word	0x00007e73
    b600:	0000ade9 	.word	0x0000ade9
    b604:	0000ae35 	.word	0x0000ae35
    b608:	0000ae81 	.word	0x0000ae81
    b60c:	00007e7d 	.word	0x00007e7d
    b610:	00007e87 	.word	0x00007e87
    b614:	00007e91 	.word	0x00007e91
    b618:	00007e9d 	.word	0x00007e9d
    b61c:	0000896d 	.word	0x0000896d
    b620:	00007ea9 	.word	0x00007ea9
    b624:	00007eb1 	.word	0x00007eb1
    b628:	0000af69 	.word	0x0000af69
    b62c:	00008941 	.word	0x00008941
    b630:	00007ee9 	.word	0x00007ee9
    b634:	00007eb9 	.word	0x00007eb9
    b638:	00007ec9 	.word	0x00007ec9
    b63c:	00007ed9 	.word	0x00007ed9

0000b640 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    b640:	4b2a      	ldr	r3, [pc, #168]	; (b6ec <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    b642:	4a2b      	ldr	r2, [pc, #172]	; (b6f0 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    b644:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b646:	4a2b      	ldr	r2, [pc, #172]	; (b6f4 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    b648:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b64a:	4a2b      	ldr	r2, [pc, #172]	; (b6f8 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    b64c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    b64e:	4a2b      	ldr	r2, [pc, #172]	; (b6fc <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    b650:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b652:	4a2b      	ldr	r2, [pc, #172]	; (b700 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    b654:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b656:	4a2b      	ldr	r2, [pc, #172]	; (b704 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    b658:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b65a:	4a2b      	ldr	r2, [pc, #172]	; (b708 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    b65c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b65e:	4a2b      	ldr	r2, [pc, #172]	; (b70c <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    b660:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b662:	4a2b      	ldr	r2, [pc, #172]	; (b710 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    b664:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b666:	4a2b      	ldr	r2, [pc, #172]	; (b714 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    b668:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b66a:	4a2b      	ldr	r2, [pc, #172]	; (b718 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    b66c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b66e:	4a2b      	ldr	r2, [pc, #172]	; (b71c <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    b670:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b672:	4a2b      	ldr	r2, [pc, #172]	; (b720 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    b674:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b676:	4a2b      	ldr	r2, [pc, #172]	; (b724 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    b678:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    b67a:	4a2b      	ldr	r2, [pc, #172]	; (b728 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    b67c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b67e:	492b      	ldr	r1, [pc, #172]	; (b72c <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    b680:	2280      	movs	r2, #128	; 0x80
    b682:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b684:	492a      	ldr	r1, [pc, #168]	; (b730 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    b686:	320c      	adds	r2, #12
    b688:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b68a:	492a      	ldr	r1, [pc, #168]	; (b734 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    b68c:	3204      	adds	r2, #4
    b68e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b690:	4929      	ldr	r1, [pc, #164]	; (b738 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    b692:	3204      	adds	r2, #4
    b694:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b696:	4929      	ldr	r1, [pc, #164]	; (b73c <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    b698:	3208      	adds	r2, #8
    b69a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b69c:	4928      	ldr	r1, [pc, #160]	; (b740 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    b69e:	3204      	adds	r2, #4
    b6a0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b6a2:	4928      	ldr	r1, [pc, #160]	; (b744 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    b6a4:	3204      	adds	r2, #4
    b6a6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b6a8:	4927      	ldr	r1, [pc, #156]	; (b748 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    b6aa:	3204      	adds	r2, #4
    b6ac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b6ae:	4927      	ldr	r1, [pc, #156]	; (b74c <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    b6b0:	3204      	adds	r2, #4
    b6b2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b6b4:	4926      	ldr	r1, [pc, #152]	; (b750 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    b6b6:	3204      	adds	r2, #4
    b6b8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b6ba:	4926      	ldr	r1, [pc, #152]	; (b754 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    b6bc:	3204      	adds	r2, #4
    b6be:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b6c0:	4925      	ldr	r1, [pc, #148]	; (b758 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    b6c2:	3204      	adds	r2, #4
    b6c4:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b6c6:	4925      	ldr	r1, [pc, #148]	; (b75c <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    b6c8:	3204      	adds	r2, #4
    b6ca:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b6cc:	4924      	ldr	r1, [pc, #144]	; (b760 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    b6ce:	3204      	adds	r2, #4
    b6d0:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b6d2:	4924      	ldr	r1, [pc, #144]	; (b764 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    b6d4:	320c      	adds	r2, #12
    b6d6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b6d8:	4923      	ldr	r1, [pc, #140]	; (b768 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    b6da:	3208      	adds	r2, #8
    b6dc:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b6de:	4923      	ldr	r1, [pc, #140]	; (b76c <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    b6e0:	321c      	adds	r2, #28
    b6e2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b6e4:	4922      	ldr	r1, [pc, #136]	; (b770 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    b6e6:	3a18      	subs	r2, #24
    b6e8:	5099      	str	r1, [r3, r2]
}
    b6ea:	4770      	bx	lr
    b6ec:	20000b0c 	.word	0x20000b0c
    b6f0:	00009495 	.word	0x00009495
    b6f4:	000083c1 	.word	0x000083c1
    b6f8:	00008381 	.word	0x00008381
    b6fc:	00008341 	.word	0x00008341
    b700:	00007d71 	.word	0x00007d71
    b704:	00007d81 	.word	0x00007d81
    b708:	00007d9d 	.word	0x00007d9d
    b70c:	00007dad 	.word	0x00007dad
    b710:	00009139 	.word	0x00009139
    b714:	00007dbd 	.word	0x00007dbd
    b718:	00007dcd 	.word	0x00007dcd
    b71c:	00009399 	.word	0x00009399
    b720:	000080d9 	.word	0x000080d9
    b724:	00007e1d 	.word	0x00007e1d
    b728:	00009619 	.word	0x00009619
    b72c:	00008ec1 	.word	0x00008ec1
    b730:	00008301 	.word	0x00008301
    b734:	000082c1 	.word	0x000082c1
    b738:	00008281 	.word	0x00008281
    b73c:	00007e7d 	.word	0x00007e7d
    b740:	00007e87 	.word	0x00007e87
    b744:	00007e91 	.word	0x00007e91
    b748:	00007e9d 	.word	0x00007e9d
    b74c:	0000896d 	.word	0x0000896d
    b750:	00007ea9 	.word	0x00007ea9
    b754:	00007eb1 	.word	0x00007eb1
    b758:	00009d55 	.word	0x00009d55
    b75c:	00009d29 	.word	0x00009d29
    b760:	00007ee9 	.word	0x00007ee9
    b764:	00009151 	.word	0x00009151
    b768:	00007eb9 	.word	0x00007eb9
    b76c:	00007ec9 	.word	0x00007ec9
    b770:	00007ed9 	.word	0x00007ed9

0000b774 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    b774:	4b30      	ldr	r3, [pc, #192]	; (b838 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    b776:	4a31      	ldr	r2, [pc, #196]	; (b83c <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    b778:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b77a:	4a31      	ldr	r2, [pc, #196]	; (b840 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    b77c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b77e:	4a31      	ldr	r2, [pc, #196]	; (b844 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    b780:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    b782:	4a31      	ldr	r2, [pc, #196]	; (b848 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    b784:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b786:	4a31      	ldr	r2, [pc, #196]	; (b84c <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    b788:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b78a:	4a31      	ldr	r2, [pc, #196]	; (b850 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    b78c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b78e:	4a31      	ldr	r2, [pc, #196]	; (b854 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    b790:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b792:	4a31      	ldr	r2, [pc, #196]	; (b858 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    b794:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b796:	4a31      	ldr	r2, [pc, #196]	; (b85c <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    b798:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b79a:	4a31      	ldr	r2, [pc, #196]	; (b860 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    b79c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b79e:	4a31      	ldr	r2, [pc, #196]	; (b864 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    b7a0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b7a2:	4a31      	ldr	r2, [pc, #196]	; (b868 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    b7a4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b7a6:	4a31      	ldr	r2, [pc, #196]	; (b86c <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    b7a8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b7aa:	4a31      	ldr	r2, [pc, #196]	; (b870 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    b7ac:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    b7ae:	4a31      	ldr	r2, [pc, #196]	; (b874 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    b7b0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b7b2:	4931      	ldr	r1, [pc, #196]	; (b878 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    b7b4:	2280      	movs	r2, #128	; 0x80
    b7b6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b7b8:	4930      	ldr	r1, [pc, #192]	; (b87c <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    b7ba:	320c      	adds	r2, #12
    b7bc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b7be:	4930      	ldr	r1, [pc, #192]	; (b880 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    b7c0:	3204      	adds	r2, #4
    b7c2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b7c4:	492f      	ldr	r1, [pc, #188]	; (b884 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    b7c6:	3204      	adds	r2, #4
    b7c8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b7ca:	492f      	ldr	r1, [pc, #188]	; (b888 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b7cc:	3208      	adds	r2, #8
    b7ce:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b7d0:	492e      	ldr	r1, [pc, #184]	; (b88c <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    b7d2:	3204      	adds	r2, #4
    b7d4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b7d6:	492e      	ldr	r1, [pc, #184]	; (b890 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    b7d8:	3204      	adds	r2, #4
    b7da:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b7dc:	492d      	ldr	r1, [pc, #180]	; (b894 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    b7de:	3204      	adds	r2, #4
    b7e0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b7e2:	492d      	ldr	r1, [pc, #180]	; (b898 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    b7e4:	3204      	adds	r2, #4
    b7e6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b7e8:	492c      	ldr	r1, [pc, #176]	; (b89c <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    b7ea:	3204      	adds	r2, #4
    b7ec:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b7ee:	492c      	ldr	r1, [pc, #176]	; (b8a0 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    b7f0:	3204      	adds	r2, #4
    b7f2:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b7f4:	492b      	ldr	r1, [pc, #172]	; (b8a4 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    b7f6:	3204      	adds	r2, #4
    b7f8:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b7fa:	492b      	ldr	r1, [pc, #172]	; (b8a8 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    b7fc:	3204      	adds	r2, #4
    b7fe:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b800:	492a      	ldr	r1, [pc, #168]	; (b8ac <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    b802:	3204      	adds	r2, #4
    b804:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    b806:	492a      	ldr	r1, [pc, #168]	; (b8b0 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    b808:	3204      	adds	r2, #4
    b80a:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    b80c:	4929      	ldr	r1, [pc, #164]	; (b8b4 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    b80e:	3204      	adds	r2, #4
    b810:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b812:	4929      	ldr	r1, [pc, #164]	; (b8b8 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    b814:	3204      	adds	r2, #4
    b816:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b818:	4928      	ldr	r1, [pc, #160]	; (b8bc <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    b81a:	3208      	adds	r2, #8
    b81c:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b81e:	4928      	ldr	r1, [pc, #160]	; (b8c0 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    b820:	321c      	adds	r2, #28
    b822:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b824:	4927      	ldr	r1, [pc, #156]	; (b8c4 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    b826:	3a18      	subs	r2, #24
    b828:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    b82a:	4a27      	ldr	r2, [pc, #156]	; (b8c8 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    b82c:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    b82e:	4927      	ldr	r1, [pc, #156]	; (b8cc <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    b830:	2298      	movs	r2, #152	; 0x98
    b832:	5099      	str	r1, [r3, r2]
}
    b834:	4770      	bx	lr
    b836:	46c0      	nop			; (mov r8, r8)
    b838:	20000b0c 	.word	0x20000b0c
    b83c:	000095d1 	.word	0x000095d1
    b840:	000083c1 	.word	0x000083c1
    b844:	00008381 	.word	0x00008381
    b848:	00008405 	.word	0x00008405
    b84c:	00007d71 	.word	0x00007d71
    b850:	00007d81 	.word	0x00007d81
    b854:	00007d9d 	.word	0x00007d9d
    b858:	00007dad 	.word	0x00007dad
    b85c:	00009139 	.word	0x00009139
    b860:	00007dbd 	.word	0x00007dbd
    b864:	00007dcd 	.word	0x00007dcd
    b868:	00009399 	.word	0x00009399
    b86c:	000080d9 	.word	0x000080d9
    b870:	00007e1d 	.word	0x00007e1d
    b874:	000094dd 	.word	0x000094dd
    b878:	00008ec1 	.word	0x00008ec1
    b87c:	00008301 	.word	0x00008301
    b880:	000082c1 	.word	0x000082c1
    b884:	00008281 	.word	0x00008281
    b888:	00007e7d 	.word	0x00007e7d
    b88c:	00007e87 	.word	0x00007e87
    b890:	00007e91 	.word	0x00007e91
    b894:	00007e9d 	.word	0x00007e9d
    b898:	0000896d 	.word	0x0000896d
    b89c:	00007ea9 	.word	0x00007ea9
    b8a0:	00007eb1 	.word	0x00007eb1
    b8a4:	00009d55 	.word	0x00009d55
    b8a8:	00009d29 	.word	0x00009d29
    b8ac:	00007ee9 	.word	0x00007ee9
    b8b0:	00007ef9 	.word	0x00007ef9
    b8b4:	000096a1 	.word	0x000096a1
    b8b8:	00009151 	.word	0x00009151
    b8bc:	00007eb9 	.word	0x00007eb9
    b8c0:	00007ec9 	.word	0x00007ec9
    b8c4:	00007ed9 	.word	0x00007ed9
    b8c8:	00008091 	.word	0x00008091
    b8cc:	00009199 	.word	0x00009199

0000b8d0 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    b8d0:	4b2d      	ldr	r3, [pc, #180]	; (b988 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    b8d2:	4a2e      	ldr	r2, [pc, #184]	; (b98c <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    b8d4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b8d6:	4a2e      	ldr	r2, [pc, #184]	; (b990 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    b8d8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b8da:	4a2e      	ldr	r2, [pc, #184]	; (b994 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    b8dc:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    b8de:	4a2e      	ldr	r2, [pc, #184]	; (b998 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    b8e0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b8e2:	4a2e      	ldr	r2, [pc, #184]	; (b99c <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    b8e4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b8e6:	4a2e      	ldr	r2, [pc, #184]	; (b9a0 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    b8e8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b8ea:	4a2e      	ldr	r2, [pc, #184]	; (b9a4 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    b8ec:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b8ee:	4a2e      	ldr	r2, [pc, #184]	; (b9a8 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    b8f0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b8f2:	4a2e      	ldr	r2, [pc, #184]	; (b9ac <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    b8f4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b8f6:	4a2e      	ldr	r2, [pc, #184]	; (b9b0 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    b8f8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b8fa:	4a2e      	ldr	r2, [pc, #184]	; (b9b4 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    b8fc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b8fe:	4a2e      	ldr	r2, [pc, #184]	; (b9b8 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    b900:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b902:	4a2e      	ldr	r2, [pc, #184]	; (b9bc <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    b904:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b906:	4a2e      	ldr	r2, [pc, #184]	; (b9c0 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    b908:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    b90a:	4a2e      	ldr	r2, [pc, #184]	; (b9c4 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    b90c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b90e:	492e      	ldr	r1, [pc, #184]	; (b9c8 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    b910:	2280      	movs	r2, #128	; 0x80
    b912:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b914:	492d      	ldr	r1, [pc, #180]	; (b9cc <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    b916:	320c      	adds	r2, #12
    b918:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b91a:	492d      	ldr	r1, [pc, #180]	; (b9d0 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    b91c:	3204      	adds	r2, #4
    b91e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b920:	492c      	ldr	r1, [pc, #176]	; (b9d4 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b922:	3204      	adds	r2, #4
    b924:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b926:	492c      	ldr	r1, [pc, #176]	; (b9d8 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    b928:	3208      	adds	r2, #8
    b92a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b92c:	492b      	ldr	r1, [pc, #172]	; (b9dc <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    b92e:	3204      	adds	r2, #4
    b930:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b932:	492b      	ldr	r1, [pc, #172]	; (b9e0 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    b934:	3204      	adds	r2, #4
    b936:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b938:	492a      	ldr	r1, [pc, #168]	; (b9e4 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    b93a:	3204      	adds	r2, #4
    b93c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b93e:	492a      	ldr	r1, [pc, #168]	; (b9e8 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    b940:	3204      	adds	r2, #4
    b942:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b944:	4929      	ldr	r1, [pc, #164]	; (b9ec <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    b946:	3204      	adds	r2, #4
    b948:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b94a:	4929      	ldr	r1, [pc, #164]	; (b9f0 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    b94c:	3204      	adds	r2, #4
    b94e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b950:	4928      	ldr	r1, [pc, #160]	; (b9f4 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    b952:	3204      	adds	r2, #4
    b954:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b956:	4928      	ldr	r1, [pc, #160]	; (b9f8 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    b958:	3204      	adds	r2, #4
    b95a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b95c:	4927      	ldr	r1, [pc, #156]	; (b9fc <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    b95e:	3204      	adds	r2, #4
    b960:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    b962:	4927      	ldr	r1, [pc, #156]	; (ba00 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    b964:	3204      	adds	r2, #4
    b966:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    b968:	4926      	ldr	r1, [pc, #152]	; (ba04 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    b96a:	3204      	adds	r2, #4
    b96c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b96e:	4926      	ldr	r1, [pc, #152]	; (ba08 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    b970:	3204      	adds	r2, #4
    b972:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b974:	4925      	ldr	r1, [pc, #148]	; (ba0c <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    b976:	3208      	adds	r2, #8
    b978:	5099      	str	r1, [r3, r2]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b97a:	4925      	ldr	r1, [pc, #148]	; (ba10 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    b97c:	321c      	adds	r2, #28
    b97e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b980:	4924      	ldr	r1, [pc, #144]	; (ba14 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    b982:	3a18      	subs	r2, #24
    b984:	5099      	str	r1, [r3, r2]
}
    b986:	4770      	bx	lr
    b988:	20000b0c 	.word	0x20000b0c
    b98c:	00009495 	.word	0x00009495
    b990:	000083c1 	.word	0x000083c1
    b994:	00008381 	.word	0x00008381
    b998:	00008341 	.word	0x00008341
    b99c:	00007d71 	.word	0x00007d71
    b9a0:	00007d81 	.word	0x00007d81
    b9a4:	00007d9d 	.word	0x00007d9d
    b9a8:	00007dad 	.word	0x00007dad
    b9ac:	00009139 	.word	0x00009139
    b9b0:	00007dbd 	.word	0x00007dbd
    b9b4:	00007dcd 	.word	0x00007dcd
    b9b8:	00009399 	.word	0x00009399
    b9bc:	000080d9 	.word	0x000080d9
    b9c0:	00007e1d 	.word	0x00007e1d
    b9c4:	0000932d 	.word	0x0000932d
    b9c8:	00008ec1 	.word	0x00008ec1
    b9cc:	00008301 	.word	0x00008301
    b9d0:	000082c1 	.word	0x000082c1
    b9d4:	00008281 	.word	0x00008281
    b9d8:	00007e7d 	.word	0x00007e7d
    b9dc:	00007e87 	.word	0x00007e87
    b9e0:	00007e91 	.word	0x00007e91
    b9e4:	00007e9d 	.word	0x00007e9d
    b9e8:	0000896d 	.word	0x0000896d
    b9ec:	00007ea9 	.word	0x00007ea9
    b9f0:	00007eb1 	.word	0x00007eb1
    b9f4:	00009d55 	.word	0x00009d55
    b9f8:	00009d29 	.word	0x00009d29
    b9fc:	00007ee9 	.word	0x00007ee9
    ba00:	00007ef9 	.word	0x00007ef9
    ba04:	000096a1 	.word	0x000096a1
    ba08:	00009151 	.word	0x00009151
    ba0c:	00007eb9 	.word	0x00007eb9
    ba10:	00007ec9 	.word	0x00007ec9
    ba14:	00007ed9 	.word	0x00007ed9

0000ba18 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    ba18:	4b0d      	ldr	r3, [pc, #52]	; (ba50 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    ba1a:	4a0e      	ldr	r2, [pc, #56]	; (ba54 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    ba1c:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    ba1e:	4a0e      	ldr	r2, [pc, #56]	; (ba58 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    ba20:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    ba22:	4a0e      	ldr	r2, [pc, #56]	; (ba5c <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    ba24:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    ba26:	490e      	ldr	r1, [pc, #56]	; (ba60 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    ba28:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    ba2a:	490e      	ldr	r1, [pc, #56]	; (ba64 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    ba2c:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    ba2e:	490e      	ldr	r1, [pc, #56]	; (ba68 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    ba30:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    ba32:	490e      	ldr	r1, [pc, #56]	; (ba6c <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    ba34:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    ba36:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    ba38:	4a0d      	ldr	r2, [pc, #52]	; (ba70 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    ba3a:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    ba3c:	4a0d      	ldr	r2, [pc, #52]	; (ba74 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ba3e:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    ba40:	4a0d      	ldr	r2, [pc, #52]	; (ba78 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    ba42:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    ba44:	4a0d      	ldr	r2, [pc, #52]	; (ba7c <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    ba46:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    ba48:	490d      	ldr	r1, [pc, #52]	; (ba80 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    ba4a:	22dc      	movs	r2, #220	; 0xdc
    ba4c:	5099      	str	r1, [r3, r2]
}
    ba4e:	4770      	bx	lr
    ba50:	20000cf4 	.word	0x20000cf4
    ba54:	000084c9 	.word	0x000084c9
    ba58:	0000aecd 	.word	0x0000aecd
    ba5c:	00007ffd 	.word	0x00007ffd
    ba60:	00007fb9 	.word	0x00007fb9
    ba64:	0000846d 	.word	0x0000846d
    ba68:	0000ac2d 	.word	0x0000ac2d
    ba6c:	0000804d 	.word	0x0000804d
    ba70:	00008545 	.word	0x00008545
    ba74:	000081a1 	.word	0x000081a1
    ba78:	0000816d 	.word	0x0000816d
    ba7c:	00008181 	.word	0x00008181
    ba80:	0000abd1 	.word	0x0000abd1

0000ba84 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    ba84:	4b0d      	ldr	r3, [pc, #52]	; (babc <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    ba86:	4a0e      	ldr	r2, [pc, #56]	; (bac0 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    ba88:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    ba8a:	4a0e      	ldr	r2, [pc, #56]	; (bac4 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    ba8c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    ba8e:	4a0e      	ldr	r2, [pc, #56]	; (bac8 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    ba90:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    ba92:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    ba94:	490d      	ldr	r1, [pc, #52]	; (bacc <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    ba96:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    ba98:	490d      	ldr	r1, [pc, #52]	; (bad0 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    ba9a:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    ba9c:	490d      	ldr	r1, [pc, #52]	; (bad4 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    ba9e:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    baa0:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    baa2:	4a0d      	ldr	r2, [pc, #52]	; (bad8 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    baa4:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    baa6:	4a0d      	ldr	r2, [pc, #52]	; (badc <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    baa8:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    baaa:	4a0d      	ldr	r2, [pc, #52]	; (bae0 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    baac:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    baae:	4a0d      	ldr	r2, [pc, #52]	; (bae4 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    bab0:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    bab2:	490d      	ldr	r1, [pc, #52]	; (bae8 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    bab4:	22dc      	movs	r2, #220	; 0xdc
    bab6:	5099      	str	r1, [r3, r2]
}
    bab8:	4770      	bx	lr
    baba:	46c0      	nop			; (mov r8, r8)
    babc:	20000cf4 	.word	0x20000cf4
    bac0:	000085cd 	.word	0x000085cd
    bac4:	00009771 	.word	0x00009771
    bac8:	00008261 	.word	0x00008261
    bacc:	0000846d 	.word	0x0000846d
    bad0:	000084fd 	.word	0x000084fd
    bad4:	00008065 	.word	0x00008065
    bad8:	00008545 	.word	0x00008545
    badc:	000081a5 	.word	0x000081a5
    bae0:	000081f9 	.word	0x000081f9
    bae4:	00008181 	.word	0x00008181
    bae8:	0000820d 	.word	0x0000820d

0000baec <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    baec:	4b0d      	ldr	r3, [pc, #52]	; (bb24 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    baee:	4a0e      	ldr	r2, [pc, #56]	; (bb28 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    baf0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    baf2:	4a0e      	ldr	r2, [pc, #56]	; (bb2c <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    baf4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    baf6:	4a0e      	ldr	r2, [pc, #56]	; (bb30 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    baf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    bafa:	490e      	ldr	r1, [pc, #56]	; (bb34 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    bafc:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    bafe:	490e      	ldr	r1, [pc, #56]	; (bb38 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    bb00:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    bb02:	490e      	ldr	r1, [pc, #56]	; (bb3c <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    bb04:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    bb06:	490e      	ldr	r1, [pc, #56]	; (bb40 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    bb08:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    bb0a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    bb0c:	4a0d      	ldr	r2, [pc, #52]	; (bb44 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    bb0e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    bb10:	4a0d      	ldr	r2, [pc, #52]	; (bb48 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    bb12:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    bb14:	4a0d      	ldr	r2, [pc, #52]	; (bb4c <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    bb16:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    bb18:	4a0d      	ldr	r2, [pc, #52]	; (bb50 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    bb1a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    bb1c:	490d      	ldr	r1, [pc, #52]	; (bb54 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    bb1e:	22dc      	movs	r2, #220	; 0xdc
    bb20:	5099      	str	r1, [r3, r2]
}
    bb22:	4770      	bx	lr
    bb24:	20000cf4 	.word	0x20000cf4
    bb28:	000085e9 	.word	0x000085e9
    bb2c:	00009771 	.word	0x00009771
    bb30:	00008021 	.word	0x00008021
    bb34:	00007fd1 	.word	0x00007fd1
    bb38:	0000846d 	.word	0x0000846d
    bb3c:	000084fd 	.word	0x000084fd
    bb40:	00008065 	.word	0x00008065
    bb44:	00008545 	.word	0x00008545
    bb48:	000081a5 	.word	0x000081a5
    bb4c:	000081f9 	.word	0x000081f9
    bb50:	00008181 	.word	0x00008181
    bb54:	0000820d 	.word	0x0000820d

0000bb58 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    bb58:	4b0d      	ldr	r3, [pc, #52]	; (bb90 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    bb5a:	4a0e      	ldr	r2, [pc, #56]	; (bb94 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    bb5c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    bb5e:	4a0e      	ldr	r2, [pc, #56]	; (bb98 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    bb60:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    bb62:	4a0e      	ldr	r2, [pc, #56]	; (bb9c <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    bb64:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    bb66:	490e      	ldr	r1, [pc, #56]	; (bba0 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    bb68:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    bb6a:	490e      	ldr	r1, [pc, #56]	; (bba4 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    bb6c:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    bb6e:	490e      	ldr	r1, [pc, #56]	; (bba8 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    bb70:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    bb72:	490e      	ldr	r1, [pc, #56]	; (bbac <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    bb74:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    bb76:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    bb78:	4a0d      	ldr	r2, [pc, #52]	; (bbb0 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    bb7a:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    bb7c:	4a0d      	ldr	r2, [pc, #52]	; (bbb4 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    bb7e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    bb80:	4a0d      	ldr	r2, [pc, #52]	; (bbb8 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    bb82:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    bb84:	4a0d      	ldr	r2, [pc, #52]	; (bbbc <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    bb86:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    bb88:	490d      	ldr	r1, [pc, #52]	; (bbc0 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    bb8a:	22dc      	movs	r2, #220	; 0xdc
    bb8c:	5099      	str	r1, [r3, r2]
}
    bb8e:	4770      	bx	lr
    bb90:	20000cf4 	.word	0x20000cf4
    bb94:	000084c9 	.word	0x000084c9
    bb98:	0000aecd 	.word	0x0000aecd
    bb9c:	00007ffd 	.word	0x00007ffd
    bba0:	00007fb9 	.word	0x00007fb9
    bba4:	0000846d 	.word	0x0000846d
    bba8:	0000ac2d 	.word	0x0000ac2d
    bbac:	0000804d 	.word	0x0000804d
    bbb0:	00008545 	.word	0x00008545
    bbb4:	000081a1 	.word	0x000081a1
    bbb8:	0000816d 	.word	0x0000816d
    bbbc:	00008181 	.word	0x00008181
    bbc0:	0000abd1 	.word	0x0000abd1

0000bbc4 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    bbc4:	4b0d      	ldr	r3, [pc, #52]	; (bbfc <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    bbc6:	4a0e      	ldr	r2, [pc, #56]	; (bc00 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    bbc8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    bbca:	4a0e      	ldr	r2, [pc, #56]	; (bc04 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    bbcc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    bbce:	4a0e      	ldr	r2, [pc, #56]	; (bc08 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    bbd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    bbd2:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    bbd4:	490d      	ldr	r1, [pc, #52]	; (bc0c <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    bbd6:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    bbd8:	490d      	ldr	r1, [pc, #52]	; (bc10 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    bbda:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    bbdc:	490d      	ldr	r1, [pc, #52]	; (bc14 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    bbde:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    bbe0:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    bbe2:	4a0d      	ldr	r2, [pc, #52]	; (bc18 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    bbe4:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    bbe6:	4a0d      	ldr	r2, [pc, #52]	; (bc1c <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    bbe8:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    bbea:	4a0d      	ldr	r2, [pc, #52]	; (bc20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    bbec:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    bbee:	4a0d      	ldr	r2, [pc, #52]	; (bc24 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    bbf0:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    bbf2:	490d      	ldr	r1, [pc, #52]	; (bc28 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    bbf4:	22dc      	movs	r2, #220	; 0xdc
    bbf6:	5099      	str	r1, [r3, r2]
}
    bbf8:	4770      	bx	lr
    bbfa:	46c0      	nop			; (mov r8, r8)
    bbfc:	20000cf4 	.word	0x20000cf4
    bc00:	00009795 	.word	0x00009795
    bc04:	00009771 	.word	0x00009771
    bc08:	00008261 	.word	0x00008261
    bc0c:	0000846d 	.word	0x0000846d
    bc10:	000084fd 	.word	0x000084fd
    bc14:	00008065 	.word	0x00008065
    bc18:	00008545 	.word	0x00008545
    bc1c:	000081a5 	.word	0x000081a5
    bc20:	000081f9 	.word	0x000081f9
    bc24:	00008181 	.word	0x00008181
    bc28:	0000820d 	.word	0x0000820d

0000bc2c <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    bc2c:	4b0d      	ldr	r3, [pc, #52]	; (bc64 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    bc2e:	4a0e      	ldr	r2, [pc, #56]	; (bc68 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    bc30:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    bc32:	4a0e      	ldr	r2, [pc, #56]	; (bc6c <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    bc34:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    bc36:	4a0e      	ldr	r2, [pc, #56]	; (bc70 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    bc38:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    bc3a:	490e      	ldr	r1, [pc, #56]	; (bc74 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    bc3c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    bc3e:	490e      	ldr	r1, [pc, #56]	; (bc78 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    bc40:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    bc42:	490e      	ldr	r1, [pc, #56]	; (bc7c <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    bc44:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    bc46:	490e      	ldr	r1, [pc, #56]	; (bc80 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    bc48:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    bc4a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    bc4c:	4a0d      	ldr	r2, [pc, #52]	; (bc84 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    bc4e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    bc50:	4a0d      	ldr	r2, [pc, #52]	; (bc88 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    bc52:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    bc54:	4a0d      	ldr	r2, [pc, #52]	; (bc8c <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    bc56:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    bc58:	4a0d      	ldr	r2, [pc, #52]	; (bc90 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    bc5a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    bc5c:	490d      	ldr	r1, [pc, #52]	; (bc94 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    bc5e:	22dc      	movs	r2, #220	; 0xdc
    bc60:	5099      	str	r1, [r3, r2]
}
    bc62:	4770      	bx	lr
    bc64:	20000cf4 	.word	0x20000cf4
    bc68:	000097c5 	.word	0x000097c5
    bc6c:	00009771 	.word	0x00009771
    bc70:	00008021 	.word	0x00008021
    bc74:	00007fd1 	.word	0x00007fd1
    bc78:	0000846d 	.word	0x0000846d
    bc7c:	000084fd 	.word	0x000084fd
    bc80:	00008065 	.word	0x00008065
    bc84:	00008545 	.word	0x00008545
    bc88:	000081a5 	.word	0x000081a5
    bc8c:	000081f9 	.word	0x000081f9
    bc90:	00008181 	.word	0x00008181
    bc94:	0000820d 	.word	0x0000820d

0000bc98 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    bc98:	4b0d      	ldr	r3, [pc, #52]	; (bcd0 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    bc9a:	4a0e      	ldr	r2, [pc, #56]	; (bcd4 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    bc9c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    bc9e:	4a0e      	ldr	r2, [pc, #56]	; (bcd8 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    bca0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    bca2:	4a0e      	ldr	r2, [pc, #56]	; (bcdc <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    bca4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    bca6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    bca8:	490d      	ldr	r1, [pc, #52]	; (bce0 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    bcaa:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    bcac:	490d      	ldr	r1, [pc, #52]	; (bce4 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    bcae:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    bcb0:	490d      	ldr	r1, [pc, #52]	; (bce8 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    bcb2:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    bcb4:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    bcb6:	4a0d      	ldr	r2, [pc, #52]	; (bcec <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    bcb8:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    bcba:	4a0d      	ldr	r2, [pc, #52]	; (bcf0 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    bcbc:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    bcbe:	4a0d      	ldr	r2, [pc, #52]	; (bcf4 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    bcc0:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    bcc2:	4a0d      	ldr	r2, [pc, #52]	; (bcf8 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    bcc4:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    bcc6:	490d      	ldr	r1, [pc, #52]	; (bcfc <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    bcc8:	22dc      	movs	r2, #220	; 0xdc
    bcca:	5099      	str	r1, [r3, r2]
}
    bccc:	4770      	bx	lr
    bcce:	46c0      	nop			; (mov r8, r8)
    bcd0:	20000cf4 	.word	0x20000cf4
    bcd4:	000097f5 	.word	0x000097f5
    bcd8:	00009771 	.word	0x00009771
    bcdc:	00008261 	.word	0x00008261
    bce0:	0000846d 	.word	0x0000846d
    bce4:	000084fd 	.word	0x000084fd
    bce8:	00008065 	.word	0x00008065
    bcec:	00008545 	.word	0x00008545
    bcf0:	000081a5 	.word	0x000081a5
    bcf4:	000081f9 	.word	0x000081f9
    bcf8:	00008181 	.word	0x00008181
    bcfc:	0000820d 	.word	0x0000820d

0000bd00 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    bd00:	4b0b      	ldr	r3, [pc, #44]	; (bd30 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    bd02:	4a0c      	ldr	r2, [pc, #48]	; (bd34 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    bd04:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    bd06:	4a0c      	ldr	r2, [pc, #48]	; (bd38 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    bd08:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    bd0a:	4a0c      	ldr	r2, [pc, #48]	; (bd3c <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    bd0c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    bd0e:	490c      	ldr	r1, [pc, #48]	; (bd40 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    bd10:	22e4      	movs	r2, #228	; 0xe4
    bd12:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    bd14:	490b      	ldr	r1, [pc, #44]	; (bd44 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    bd16:	3204      	adds	r2, #4
    bd18:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    bd1a:	490b      	ldr	r1, [pc, #44]	; (bd48 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    bd1c:	3a68      	subs	r2, #104	; 0x68
    bd1e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bd20:	490a      	ldr	r1, [pc, #40]	; (bd4c <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    bd22:	3204      	adds	r2, #4
    bd24:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    bd26:	490a      	ldr	r1, [pc, #40]	; (bd50 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    bd28:	325c      	adds	r2, #92	; 0x5c
    bd2a:	5099      	str	r1, [r3, r2]
}
    bd2c:	4770      	bx	lr
    bd2e:	46c0      	nop			; (mov r8, r8)
    bd30:	20000c00 	.word	0x20000c00
    bd34:	0000ac95 	.word	0x0000ac95
    bd38:	0000ac09 	.word	0x0000ac09
    bd3c:	0000983d 	.word	0x0000983d
    bd40:	00008a05 	.word	0x00008a05
    bd44:	00008995 	.word	0x00008995
    bd48:	00009f75 	.word	0x00009f75
    bd4c:	00009f01 	.word	0x00009f01
    bd50:	00009e49 	.word	0x00009e49

0000bd54 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    bd54:	4b0e      	ldr	r3, [pc, #56]	; (bd90 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    bd56:	4a0f      	ldr	r2, [pc, #60]	; (bd94 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    bd58:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    bd5a:	4a0f      	ldr	r2, [pc, #60]	; (bd98 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    bd5c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    bd5e:	4a0f      	ldr	r2, [pc, #60]	; (bd9c <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    bd60:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    bd62:	4a0f      	ldr	r2, [pc, #60]	; (bda0 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    bd64:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    bd66:	4a0f      	ldr	r2, [pc, #60]	; (bda4 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    bd68:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    bd6a:	4a0f      	ldr	r2, [pc, #60]	; (bda8 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    bd6c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    bd6e:	490f      	ldr	r1, [pc, #60]	; (bdac <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    bd70:	2280      	movs	r2, #128	; 0x80
    bd72:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bd74:	490e      	ldr	r1, [pc, #56]	; (bdb0 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    bd76:	3204      	adds	r2, #4
    bd78:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    bd7a:	490e      	ldr	r1, [pc, #56]	; (bdb4 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    bd7c:	3248      	adds	r2, #72	; 0x48
    bd7e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    bd80:	490d      	ldr	r1, [pc, #52]	; (bdb8 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    bd82:	3214      	adds	r2, #20
    bd84:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    bd86:	490d      	ldr	r1, [pc, #52]	; (bdbc <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    bd88:	320c      	adds	r2, #12
    bd8a:	5099      	str	r1, [r3, r2]
}
    bd8c:	4770      	bx	lr
    bd8e:	46c0      	nop			; (mov r8, r8)
    bd90:	20000c00 	.word	0x20000c00
    bd94:	00008dfd 	.word	0x00008dfd
    bd98:	00008c31 	.word	0x00008c31
    bd9c:	00009a9d 	.word	0x00009a9d
    bda0:	0000a201 	.word	0x0000a201
    bda4:	00009979 	.word	0x00009979
    bda8:	0000c015 	.word	0x0000c015
    bdac:	00009f75 	.word	0x00009f75
    bdb0:	00009f01 	.word	0x00009f01
    bdb4:	000098d5 	.word	0x000098d5
    bdb8:	00009e49 	.word	0x00009e49
    bdbc:	000086cd 	.word	0x000086cd

0000bdc0 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    bdc0:	4b0f      	ldr	r3, [pc, #60]	; (be00 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    bdc2:	4a10      	ldr	r2, [pc, #64]	; (be04 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    bdc4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    bdc6:	4a10      	ldr	r2, [pc, #64]	; (be08 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    bdc8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    bdca:	4a10      	ldr	r2, [pc, #64]	; (be0c <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    bdcc:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    bdce:	4910      	ldr	r1, [pc, #64]	; (be10 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    bdd0:	22cc      	movs	r2, #204	; 0xcc
    bdd2:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    bdd4:	4a0f      	ldr	r2, [pc, #60]	; (be14 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    bdd6:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    bdd8:	490f      	ldr	r1, [pc, #60]	; (be18 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    bdda:	2280      	movs	r2, #128	; 0x80
    bddc:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bdde:	490f      	ldr	r1, [pc, #60]	; (be1c <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    bde0:	3204      	adds	r2, #4
    bde2:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    bde4:	490e      	ldr	r1, [pc, #56]	; (be20 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    bde6:	324c      	adds	r2, #76	; 0x4c
    bde8:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    bdea:	4a0e      	ldr	r2, [pc, #56]	; (be24 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    bdec:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    bdee:	4a0e      	ldr	r2, [pc, #56]	; (be28 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    bdf0:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    bdf2:	490e      	ldr	r1, [pc, #56]	; (be2c <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    bdf4:	22e0      	movs	r2, #224	; 0xe0
    bdf6:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    bdf8:	490d      	ldr	r1, [pc, #52]	; (be30 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    bdfa:	320c      	adds	r2, #12
    bdfc:	5099      	str	r1, [r3, r2]
}
    bdfe:	4770      	bx	lr
    be00:	20000c00 	.word	0x20000c00
    be04:	00008dfd 	.word	0x00008dfd
    be08:	00008da9 	.word	0x00008da9
    be0c:	00009979 	.word	0x00009979
    be10:	000098d5 	.word	0x000098d5
    be14:	0000c015 	.word	0x0000c015
    be18:	00009f75 	.word	0x00009f75
    be1c:	00009f01 	.word	0x00009f01
    be20:	00008679 	.word	0x00008679
    be24:	00009a9d 	.word	0x00009a9d
    be28:	0000a201 	.word	0x0000a201
    be2c:	00009e49 	.word	0x00009e49
    be30:	000086cd 	.word	0x000086cd

0000be34 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    be34:	4b0b      	ldr	r3, [pc, #44]	; (be64 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    be36:	4a0c      	ldr	r2, [pc, #48]	; (be68 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    be38:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    be3a:	4a0c      	ldr	r2, [pc, #48]	; (be6c <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    be3c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    be3e:	4a0c      	ldr	r2, [pc, #48]	; (be70 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    be40:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    be42:	490c      	ldr	r1, [pc, #48]	; (be74 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    be44:	22e4      	movs	r2, #228	; 0xe4
    be46:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    be48:	490b      	ldr	r1, [pc, #44]	; (be78 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    be4a:	3204      	adds	r2, #4
    be4c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    be4e:	490b      	ldr	r1, [pc, #44]	; (be7c <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    be50:	3a68      	subs	r2, #104	; 0x68
    be52:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    be54:	490a      	ldr	r1, [pc, #40]	; (be80 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    be56:	3204      	adds	r2, #4
    be58:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    be5a:	490a      	ldr	r1, [pc, #40]	; (be84 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    be5c:	325c      	adds	r2, #92	; 0x5c
    be5e:	5099      	str	r1, [r3, r2]
}
    be60:	4770      	bx	lr
    be62:	46c0      	nop			; (mov r8, r8)
    be64:	20000c00 	.word	0x20000c00
    be68:	0000ac95 	.word	0x0000ac95
    be6c:	0000ac09 	.word	0x0000ac09
    be70:	0000983d 	.word	0x0000983d
    be74:	00008a05 	.word	0x00008a05
    be78:	00008995 	.word	0x00008995
    be7c:	00009f75 	.word	0x00009f75
    be80:	00009f01 	.word	0x00009f01
    be84:	00009e49 	.word	0x00009e49

0000be88 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    be88:	4b0d      	ldr	r3, [pc, #52]	; (bec0 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    be8a:	4a0e      	ldr	r2, [pc, #56]	; (bec4 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    be8c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    be8e:	4a0e      	ldr	r2, [pc, #56]	; (bec8 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    be90:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    be92:	4a0e      	ldr	r2, [pc, #56]	; (becc <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    be94:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    be96:	4a0e      	ldr	r2, [pc, #56]	; (bed0 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    be98:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    be9a:	490e      	ldr	r1, [pc, #56]	; (bed4 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    be9c:	2280      	movs	r2, #128	; 0x80
    be9e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bea0:	490d      	ldr	r1, [pc, #52]	; (bed8 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    bea2:	3204      	adds	r2, #4
    bea4:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    bea6:	490d      	ldr	r1, [pc, #52]	; (bedc <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    bea8:	3248      	adds	r2, #72	; 0x48
    beaa:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    beac:	490c      	ldr	r1, [pc, #48]	; (bee0 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    beae:	3204      	adds	r2, #4
    beb0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    beb2:	490c      	ldr	r1, [pc, #48]	; (bee4 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    beb4:	3210      	adds	r2, #16
    beb6:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    beb8:	490b      	ldr	r1, [pc, #44]	; (bee8 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    beba:	320c      	adds	r2, #12
    bebc:	5099      	str	r1, [r3, r2]
}
    bebe:	4770      	bx	lr
    bec0:	20000c00 	.word	0x20000c00
    bec4:	00008dfd 	.word	0x00008dfd
    bec8:	00008c31 	.word	0x00008c31
    becc:	00009979 	.word	0x00009979
    bed0:	0000c015 	.word	0x0000c015
    bed4:	00009f75 	.word	0x00009f75
    bed8:	00009f01 	.word	0x00009f01
    bedc:	000098d5 	.word	0x000098d5
    bee0:	00008679 	.word	0x00008679
    bee4:	00009e49 	.word	0x00009e49
    bee8:	000086cd 	.word	0x000086cd

0000beec <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    beec:	4b11      	ldr	r3, [pc, #68]	; (bf34 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    beee:	4a12      	ldr	r2, [pc, #72]	; (bf38 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    bef0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    bef2:	4a12      	ldr	r2, [pc, #72]	; (bf3c <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    bef4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    bef6:	4912      	ldr	r1, [pc, #72]	; (bf40 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    bef8:	2288      	movs	r2, #136	; 0x88
    befa:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    befc:	4a11      	ldr	r2, [pc, #68]	; (bf44 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    befe:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    bf00:	4911      	ldr	r1, [pc, #68]	; (bf48 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    bf02:	22cc      	movs	r2, #204	; 0xcc
    bf04:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    bf06:	4a11      	ldr	r2, [pc, #68]	; (bf4c <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    bf08:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    bf0a:	4911      	ldr	r1, [pc, #68]	; (bf50 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    bf0c:	2280      	movs	r2, #128	; 0x80
    bf0e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bf10:	4910      	ldr	r1, [pc, #64]	; (bf54 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    bf12:	3204      	adds	r2, #4
    bf14:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    bf16:	4910      	ldr	r1, [pc, #64]	; (bf58 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    bf18:	324c      	adds	r2, #76	; 0x4c
    bf1a:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    bf1c:	4a0f      	ldr	r2, [pc, #60]	; (bf5c <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    bf1e:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    bf20:	4a0f      	ldr	r2, [pc, #60]	; (bf60 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    bf22:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    bf24:	490f      	ldr	r1, [pc, #60]	; (bf64 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    bf26:	22e0      	movs	r2, #224	; 0xe0
    bf28:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    bf2a:	490f      	ldr	r1, [pc, #60]	; (bf68 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    bf2c:	320c      	adds	r2, #12
    bf2e:	5099      	str	r1, [r3, r2]
}
    bf30:	4770      	bx	lr
    bf32:	46c0      	nop			; (mov r8, r8)
    bf34:	20000c00 	.word	0x20000c00
    bf38:	00008dfd 	.word	0x00008dfd
    bf3c:	00008da9 	.word	0x00008da9
    bf40:	0000a775 	.word	0x0000a775
    bf44:	00009979 	.word	0x00009979
    bf48:	000098d5 	.word	0x000098d5
    bf4c:	0000c015 	.word	0x0000c015
    bf50:	00009f75 	.word	0x00009f75
    bf54:	00009f01 	.word	0x00009f01
    bf58:	00008679 	.word	0x00008679
    bf5c:	00009a9d 	.word	0x00009a9d
    bf60:	0000a201 	.word	0x0000a201
    bf64:	00009e49 	.word	0x00009e49
    bf68:	000086cd 	.word	0x000086cd

0000bf6c <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    bf6c:	4b0f      	ldr	r3, [pc, #60]	; (bfac <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    bf6e:	4a10      	ldr	r2, [pc, #64]	; (bfb0 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    bf70:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    bf72:	4a10      	ldr	r2, [pc, #64]	; (bfb4 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    bf74:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    bf76:	4910      	ldr	r1, [pc, #64]	; (bfb8 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    bf78:	2288      	movs	r2, #136	; 0x88
    bf7a:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    bf7c:	4a0f      	ldr	r2, [pc, #60]	; (bfbc <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    bf7e:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    bf80:	490f      	ldr	r1, [pc, #60]	; (bfc0 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    bf82:	22cc      	movs	r2, #204	; 0xcc
    bf84:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    bf86:	4a0f      	ldr	r2, [pc, #60]	; (bfc4 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    bf88:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    bf8a:	490f      	ldr	r1, [pc, #60]	; (bfc8 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    bf8c:	2280      	movs	r2, #128	; 0x80
    bf8e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    bf90:	490e      	ldr	r1, [pc, #56]	; (bfcc <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    bf92:	3204      	adds	r2, #4
    bf94:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    bf96:	490e      	ldr	r1, [pc, #56]	; (bfd0 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    bf98:	324c      	adds	r2, #76	; 0x4c
    bf9a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    bf9c:	490d      	ldr	r1, [pc, #52]	; (bfd4 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    bf9e:	3210      	adds	r2, #16
    bfa0:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    bfa2:	490d      	ldr	r1, [pc, #52]	; (bfd8 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    bfa4:	320c      	adds	r2, #12
    bfa6:	5099      	str	r1, [r3, r2]
}
    bfa8:	4770      	bx	lr
    bfaa:	46c0      	nop			; (mov r8, r8)
    bfac:	20000c00 	.word	0x20000c00
    bfb0:	00008dfd 	.word	0x00008dfd
    bfb4:	00008da9 	.word	0x00008da9
    bfb8:	0000a775 	.word	0x0000a775
    bfbc:	00009979 	.word	0x00009979
    bfc0:	000098d5 	.word	0x000098d5
    bfc4:	0000c015 	.word	0x0000c015
    bfc8:	00009f75 	.word	0x00009f75
    bfcc:	00009f01 	.word	0x00009f01
    bfd0:	00008679 	.word	0x00008679
    bfd4:	00009e49 	.word	0x00009e49
    bfd8:	000086cd 	.word	0x000086cd

0000bfdc <LORAREG_GetAttr>:
{
    bfdc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    bfde:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    bfe0:	283c      	cmp	r0, #60	; 0x3c
    bfe2:	d901      	bls.n	bfe8 <LORAREG_GetAttr+0xc>
}
    bfe4:	0018      	movs	r0, r3
    bfe6:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    bfe8:	0084      	lsls	r4, r0, #2
    bfea:	4b02      	ldr	r3, [pc, #8]	; (bff4 <LORAREG_GetAttr+0x18>)
    bfec:	58e3      	ldr	r3, [r4, r3]
    bfee:	4798      	blx	r3
    bff0:	0003      	movs	r3, r0
    bff2:	e7f7      	b.n	bfe4 <LORAREG_GetAttr+0x8>
    bff4:	20000b0c 	.word	0x20000b0c

0000bff8 <LORAREG_ValidateAttr>:
{
    bff8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    bffa:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    bffc:	283c      	cmp	r0, #60	; 0x3c
    bffe:	d901      	bls.n	c004 <LORAREG_ValidateAttr+0xc>
}
    c000:	0018      	movs	r0, r3
    c002:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    c004:	0082      	lsls	r2, r0, #2
    c006:	4b02      	ldr	r3, [pc, #8]	; (c010 <LORAREG_ValidateAttr+0x18>)
    c008:	58d3      	ldr	r3, [r2, r3]
    c00a:	4798      	blx	r3
    c00c:	0003      	movs	r3, r0
    c00e:	e7f7      	b.n	c000 <LORAREG_ValidateAttr+0x8>
    c010:	20000cf4 	.word	0x20000cf4

0000c014 <setNewChannel>:
{
    c014:	b5f0      	push	{r4, r5, r6, r7, lr}
    c016:	46d6      	mov	lr, sl
    c018:	464f      	mov	r7, r9
    c01a:	b580      	push	{r7, lr}
    c01c:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    c01e:	232f      	movs	r3, #47	; 0x2f
    c020:	4a30      	ldr	r2, [pc, #192]	; (c0e4 <setNewChannel+0xd0>)
    c022:	5cd2      	ldrb	r2, [r2, r3]
    c024:	4b30      	ldr	r3, [pc, #192]	; (c0e8 <setNewChannel+0xd4>)
    c026:	4113      	asrs	r3, r2
    c028:	07db      	lsls	r3, r3, #31
    c02a:	d407      	bmi.n	c03c <setNewChannel+0x28>
    c02c:	2a05      	cmp	r2, #5
    c02e:	d020      	beq.n	c072 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    c030:	2a04      	cmp	r2, #4
    c032:	d020      	beq.n	c076 <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    c034:	2a0f      	cmp	r2, #15
    c036:	d020      	beq.n	c07a <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    c038:	4e2c      	ldr	r6, [pc, #176]	; (c0ec <setNewChannel+0xd8>)
    c03a:	e000      	b.n	c03e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    c03c:	4e2c      	ldr	r6, [pc, #176]	; (c0f0 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    c03e:	ac03      	add	r4, sp, #12
    c040:	2204      	movs	r2, #4
    c042:	0020      	movs	r0, r4
    c044:	4b2b      	ldr	r3, [pc, #172]	; (c0f4 <setNewChannel+0xe0>)
    c046:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    c048:	8823      	ldrh	r3, [r4, #0]
    c04a:	aa02      	add	r2, sp, #8
    c04c:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    c04e:	78a4      	ldrb	r4, [r4, #2]
    c050:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    c052:	0011      	movs	r1, r2
    c054:	2037      	movs	r0, #55	; 0x37
    c056:	4b28      	ldr	r3, [pc, #160]	; (c0f8 <setNewChannel+0xe4>)
    c058:	4798      	blx	r3
    c05a:	0003      	movs	r3, r0
    c05c:	9001      	str	r0, [sp, #4]
    c05e:	2808      	cmp	r0, #8
    c060:	d00d      	beq.n	c07e <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    c062:	230a      	movs	r3, #10
    c064:	9301      	str	r3, [sp, #4]
}
    c066:	9801      	ldr	r0, [sp, #4]
    c068:	b005      	add	sp, #20
    c06a:	bc0c      	pop	{r2, r3}
    c06c:	4691      	mov	r9, r2
    c06e:	469a      	mov	sl, r3
    c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    c072:	4e1f      	ldr	r6, [pc, #124]	; (c0f0 <setNewChannel+0xdc>)
    c074:	e7e3      	b.n	c03e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    c076:	4e21      	ldr	r6, [pc, #132]	; (c0fc <setNewChannel+0xe8>)
    c078:	e7e1      	b.n	c03e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    c07a:	4e21      	ldr	r6, [pc, #132]	; (c100 <setNewChannel+0xec>)
    c07c:	e7df      	b.n	c03e <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    c07e:	2c06      	cmp	r4, #6
    c080:	d00b      	beq.n	c09a <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    c082:	2c00      	cmp	r4, #0
    c084:	d1ef      	bne.n	c066 <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    c086:	232a      	movs	r3, #42	; 0x2a
    c088:	4a16      	ldr	r2, [pc, #88]	; (c0e4 <setNewChannel+0xd0>)
    c08a:	56d3      	ldrsb	r3, [r2, r3]
    c08c:	2b00      	cmp	r3, #0
    c08e:	ddea      	ble.n	c066 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    c090:	af03      	add	r7, sp, #12
    c092:	2301      	movs	r3, #1
    c094:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    c096:	4692      	mov	sl, r2
    c098:	e01c      	b.n	c0d4 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    c09a:	3322      	adds	r3, #34	; 0x22
    c09c:	4a11      	ldr	r2, [pc, #68]	; (c0e4 <setNewChannel+0xd0>)
    c09e:	56d3      	ldrsb	r3, [r2, r3]
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	dde0      	ble.n	c066 <setNewChannel+0x52>
    c0a4:	2400      	movs	r4, #0
    c0a6:	0017      	movs	r7, r2
    c0a8:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    c0aa:	2101      	movs	r1, #1
    c0ac:	0020      	movs	r0, r4
    c0ae:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    c0b0:	3401      	adds	r4, #1
    c0b2:	b2e4      	uxtb	r4, r4
    c0b4:	577b      	ldrsb	r3, [r7, r5]
    c0b6:	429c      	cmp	r4, r3
    c0b8:	dbf7      	blt.n	c0aa <setNewChannel+0x96>
    c0ba:	e7d4      	b.n	c066 <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    c0bc:	2100      	movs	r1, #0
    c0be:	0020      	movs	r0, r4
    c0c0:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    c0c2:	086d      	lsrs	r5, r5, #1
    c0c4:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    c0c6:	3401      	adds	r4, #1
    c0c8:	b2e4      	uxtb	r4, r4
    c0ca:	232a      	movs	r3, #42	; 0x2a
    c0cc:	4652      	mov	r2, sl
    c0ce:	56d3      	ldrsb	r3, [r2, r3]
    c0d0:	429c      	cmp	r4, r3
    c0d2:	dac8      	bge.n	c066 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    c0d4:	883d      	ldrh	r5, [r7, #0]
    c0d6:	464b      	mov	r3, r9
    c0d8:	422b      	tst	r3, r5
    c0da:	d0ef      	beq.n	c0bc <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    c0dc:	4649      	mov	r1, r9
    c0de:	0020      	movs	r0, r4
    c0e0:	47b0      	blx	r6
    c0e2:	e7ee      	b.n	c0c2 <setNewChannel+0xae>
    c0e4:	20002310 	.word	0x20002310
    c0e8:	00007fc0 	.word	0x00007fc0
    c0ec:	00008b29 	.word	0x00008b29
    c0f0:	00008d31 	.word	0x00008d31
    c0f4:	00018655 	.word	0x00018655
    c0f8:	0000bff9 	.word	0x0000bff9
    c0fc:	00008c85 	.word	0x00008c85
    c100:	00008a81 	.word	0x00008a81

0000c104 <LORAREG_SetAttr>:
{
    c104:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c106:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c108:	283c      	cmp	r0, #60	; 0x3c
    c10a:	d901      	bls.n	c110 <LORAREG_SetAttr+0xc>
}
    c10c:	0018      	movs	r0, r3
    c10e:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    c110:	0082      	lsls	r2, r0, #2
    c112:	4b02      	ldr	r3, [pc, #8]	; (c11c <LORAREG_SetAttr+0x18>)
    c114:	58d3      	ldr	r3, [r2, r3]
    c116:	4798      	blx	r3
    c118:	0003      	movs	r3, r0
    c11a:	e7f7      	b.n	c10c <LORAREG_SetAttr+0x8>
    c11c:	20000c00 	.word	0x20000c00

0000c120 <CreateAllRegSoftwareTimers>:
{
    c120:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    c122:	4809      	ldr	r0, [pc, #36]	; (c148 <CreateAllRegSoftwareTimers+0x28>)
    c124:	4b09      	ldr	r3, [pc, #36]	; (c14c <CreateAllRegSoftwareTimers+0x2c>)
    c126:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    c128:	2808      	cmp	r0, #8
    c12a:	d10c      	bne.n	c146 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    c12c:	4808      	ldr	r0, [pc, #32]	; (c150 <CreateAllRegSoftwareTimers+0x30>)
    c12e:	4b07      	ldr	r3, [pc, #28]	; (c14c <CreateAllRegSoftwareTimers+0x2c>)
    c130:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    c132:	2808      	cmp	r0, #8
    c134:	d107      	bne.n	c146 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    c136:	4807      	ldr	r0, [pc, #28]	; (c154 <CreateAllRegSoftwareTimers+0x34>)
    c138:	4b04      	ldr	r3, [pc, #16]	; (c14c <CreateAllRegSoftwareTimers+0x2c>)
    c13a:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    c13c:	2808      	cmp	r0, #8
    c13e:	d102      	bne.n	c146 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    c140:	4805      	ldr	r0, [pc, #20]	; (c158 <CreateAllRegSoftwareTimers+0x38>)
    c142:	4b02      	ldr	r3, [pc, #8]	; (c14c <CreateAllRegSoftwareTimers+0x2c>)
    c144:	4798      	blx	r3
}
    c146:	bd10      	pop	{r4, pc}
    c148:	2000230c 	.word	0x2000230c
    c14c:	0000d549 	.word	0x0000d549
    c150:	2000230d 	.word	0x2000230d
    c154:	2000230e 	.word	0x2000230e
    c158:	2000230f 	.word	0x2000230f

0000c15c <StopAllRegSoftwareTimers>:
{
    c15c:	b570      	push	{r4, r5, r6, lr}
    c15e:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    c160:	4e03      	ldr	r6, [pc, #12]	; (c170 <StopAllRegSoftwareTimers+0x14>)
    c162:	4d04      	ldr	r5, [pc, #16]	; (c174 <StopAllRegSoftwareTimers+0x18>)
    c164:	5d30      	ldrb	r0, [r6, r4]
    c166:	47a8      	blx	r5
    c168:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    c16a:	2c04      	cmp	r4, #4
    c16c:	d1fa      	bne.n	c164 <StopAllRegSoftwareTimers+0x8>
}
    c16e:	bd70      	pop	{r4, r5, r6, pc}
    c170:	2000230c 	.word	0x2000230c
    c174:	0000d895 	.word	0x0000d895

0000c178 <LORAREG_Init>:
{	
    c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c17a:	0007      	movs	r7, r0
	if(!initialized)
    c17c:	4b24      	ldr	r3, [pc, #144]	; (c210 <LORAREG_Init+0x98>)
    c17e:	781b      	ldrb	r3, [r3, #0]
    c180:	2b00      	cmp	r3, #0
    c182:	d109      	bne.n	c198 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    c184:	4b23      	ldr	r3, [pc, #140]	; (c214 <LORAREG_Init+0x9c>)
    c186:	4798      	blx	r3
    c188:	2808      	cmp	r0, #8
    c18a:	d001      	beq.n	c190 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    c18c:	2014      	movs	r0, #20
    c18e:	e006      	b.n	c19e <LORAREG_Init+0x26>
			initialized = true;
    c190:	2201      	movs	r2, #1
    c192:	4b1f      	ldr	r3, [pc, #124]	; (c210 <LORAREG_Init+0x98>)
    c194:	701a      	strb	r2, [r3, #0]
    c196:	e002      	b.n	c19e <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    c198:	4b1f      	ldr	r3, [pc, #124]	; (c218 <LORAREG_Init+0xa0>)
    c19a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c19c:	2008      	movs	r0, #8
    c19e:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    c1a0:	4e1e      	ldr	r6, [pc, #120]	; (c21c <LORAREG_Init+0xa4>)
    c1a2:	4d1f      	ldr	r5, [pc, #124]	; (c220 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    c1a4:	4c1f      	ldr	r4, [pc, #124]	; (c224 <LORAREG_Init+0xac>)
    c1a6:	4a20      	ldr	r2, [pc, #128]	; (c228 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    c1a8:	4920      	ldr	r1, [pc, #128]	; (c22c <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    c1aa:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    c1ac:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    c1ae:	505a      	str	r2, [r3, r1]
    c1b0:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    c1b2:	2bf4      	cmp	r3, #244	; 0xf4
    c1b4:	d1f9      	bne.n	c1aa <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    c1b6:	2f02      	cmp	r7, #2
    c1b8:	d00d      	beq.n	c1d6 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    c1ba:	2f01      	cmp	r7, #1
    c1bc:	d90f      	bls.n	c1de <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    c1be:	1fbb      	subs	r3, r7, #6
    c1c0:	2b08      	cmp	r3, #8
    c1c2:	d910      	bls.n	c1e6 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    c1c4:	2f03      	cmp	r7, #3
    c1c6:	d012      	beq.n	c1ee <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    c1c8:	2f0f      	cmp	r7, #15
    c1ca:	d014      	beq.n	c1f6 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    c1cc:	2f05      	cmp	r7, #5
    c1ce:	d016      	beq.n	c1fe <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    c1d0:	2f04      	cmp	r7, #4
    c1d2:	d018      	beq.n	c206 <LORAREG_Init+0x8e>
}
    c1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    c1d6:	2002      	movs	r0, #2
    c1d8:	4b15      	ldr	r3, [pc, #84]	; (c230 <LORAREG_Init+0xb8>)
    c1da:	4798      	blx	r3
    c1dc:	e7fa      	b.n	c1d4 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    c1de:	0038      	movs	r0, r7
    c1e0:	4b14      	ldr	r3, [pc, #80]	; (c234 <LORAREG_Init+0xbc>)
    c1e2:	4798      	blx	r3
    c1e4:	e7f6      	b.n	c1d4 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    c1e6:	0038      	movs	r0, r7
    c1e8:	4b13      	ldr	r3, [pc, #76]	; (c238 <LORAREG_Init+0xc0>)
    c1ea:	4798      	blx	r3
    c1ec:	e7f2      	b.n	c1d4 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    c1ee:	2003      	movs	r0, #3
    c1f0:	4b12      	ldr	r3, [pc, #72]	; (c23c <LORAREG_Init+0xc4>)
    c1f2:	4798      	blx	r3
    c1f4:	e7ee      	b.n	c1d4 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    c1f6:	200f      	movs	r0, #15
    c1f8:	4b11      	ldr	r3, [pc, #68]	; (c240 <LORAREG_Init+0xc8>)
    c1fa:	4798      	blx	r3
    c1fc:	e7ea      	b.n	c1d4 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    c1fe:	2005      	movs	r0, #5
    c200:	4b10      	ldr	r3, [pc, #64]	; (c244 <LORAREG_Init+0xcc>)
    c202:	4798      	blx	r3
    c204:	e7e6      	b.n	c1d4 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    c206:	2004      	movs	r0, #4
    c208:	4b0f      	ldr	r3, [pc, #60]	; (c248 <LORAREG_Init+0xd0>)
    c20a:	4798      	blx	r3
    c20c:	e7e2      	b.n	c1d4 <LORAREG_Init+0x5c>
    c20e:	46c0      	nop			; (mov r8, r8)
    c210:	20000b09 	.word	0x20000b09
    c214:	0000c121 	.word	0x0000c121
    c218:	0000c15d 	.word	0x0000c15d
    c21c:	20000b0c 	.word	0x20000b0c
    c220:	00007d69 	.word	0x00007d69
    c224:	20000cf4 	.word	0x20000cf4
    c228:	00007d6d 	.word	0x00007d6d
    c22c:	20000c00 	.word	0x20000c00
    c230:	00007b25 	.word	0x00007b25
    c234:	00006ff5 	.word	0x00006ff5
    c238:	0000697d 	.word	0x0000697d
    c23c:	00006bb1 	.word	0x00006bb1
    c240:	0000723d 	.word	0x0000723d
    c244:	00007571 	.word	0x00007571
    c248:	000078e9 	.word	0x000078e9

0000c24c <setDefaultTxPower>:
{   
    c24c:	b510      	push	{r4, lr}
	if(ismBand == ISM_EU868)
    c24e:	2800      	cmp	r0, #0
    c250:	d00e      	beq.n	c270 <setDefaultTxPower+0x24>
	else if(ismBand == ISM_JPN923)
    c252:	2805      	cmp	r0, #5
    c254:	d01a      	beq.n	c28c <setDefaultTxPower+0x40>
	else if (ismBand == ISM_KR920)
    c256:	2804      	cmp	r0, #4
    c258:	d01e      	beq.n	c298 <setDefaultTxPower+0x4c>
	else if(ismBand == ISM_AU915)
    c25a:	2803      	cmp	r0, #3
    c25c:	d022      	beq.n	c2a4 <setDefaultTxPower+0x58>
		result = LORAWAN_INVALID_PARAMETER;
    c25e:	240a      	movs	r4, #10
	else if(ismBand == ISM_NA915)
    c260:	2802      	cmp	r0, #2
    c262:	d10a      	bne.n	c27a <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    c264:	2107      	movs	r1, #7
    c266:	2327      	movs	r3, #39	; 0x27
    c268:	4a11      	ldr	r2, [pc, #68]	; (c2b0 <setDefaultTxPower+0x64>)
    c26a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c26c:	3c02      	subs	r4, #2
    c26e:	e004      	b.n	c27a <setDefaultTxPower+0x2e>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    c270:	2101      	movs	r1, #1
    c272:	2327      	movs	r3, #39	; 0x27
    c274:	4a0e      	ldr	r2, [pc, #56]	; (c2b0 <setDefaultTxPower+0x64>)
    c276:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c278:	2408      	movs	r4, #8
	PDS_STORE(RegParams.MacTxPower);
    c27a:	2327      	movs	r3, #39	; 0x27
    c27c:	4a0c      	ldr	r2, [pc, #48]	; (c2b0 <setDefaultTxPower+0x64>)
    c27e:	56d0      	ldrsb	r0, [r2, r3]
    c280:	b2c1      	uxtb	r1, r0
    c282:	0e00      	lsrs	r0, r0, #24
    c284:	4b0b      	ldr	r3, [pc, #44]	; (c2b4 <setDefaultTxPower+0x68>)
    c286:	4798      	blx	r3
}
    c288:	0020      	movs	r0, r4
    c28a:	bd10      	pop	{r4, pc}
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    c28c:	2101      	movs	r1, #1
    c28e:	2327      	movs	r3, #39	; 0x27
    c290:	4a07      	ldr	r2, [pc, #28]	; (c2b0 <setDefaultTxPower+0x64>)
    c292:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c294:	2408      	movs	r4, #8
    c296:	e7f0      	b.n	c27a <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    c298:	2101      	movs	r1, #1
    c29a:	2327      	movs	r3, #39	; 0x27
    c29c:	4a04      	ldr	r2, [pc, #16]	; (c2b0 <setDefaultTxPower+0x64>)
    c29e:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2a0:	2408      	movs	r4, #8
    c2a2:	e7ea      	b.n	c27a <setDefaultTxPower+0x2e>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    c2a4:	2107      	movs	r1, #7
    c2a6:	2327      	movs	r3, #39	; 0x27
    c2a8:	4a01      	ldr	r2, [pc, #4]	; (c2b0 <setDefaultTxPower+0x64>)
    c2aa:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2ac:	2408      	movs	r4, #8
    c2ae:	e7e4      	b.n	c27a <setDefaultTxPower+0x2e>
    c2b0:	20002310 	.word	0x20002310
    c2b4:	0000c84d 	.word	0x0000c84d

0000c2b8 <LORAREG_SupportedBands>:
	*bands = value;
    c2b8:	2301      	movs	r3, #1
    c2ba:	425b      	negs	r3, r3
    c2bc:	8003      	strh	r3, [r0, #0]
}
    c2be:	2008      	movs	r0, #8
    c2c0:	4770      	bx	lr
	...

0000c2c4 <LORAREG_UnInit>:
{
    c2c4:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    c2c6:	4b0d      	ldr	r3, [pc, #52]	; (c2fc <LORAREG_UnInit+0x38>)
    c2c8:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    c2ca:	2383      	movs	r3, #131	; 0x83
    c2cc:	009b      	lsls	r3, r3, #2
    c2ce:	4a0c      	ldr	r2, [pc, #48]	; (c300 <LORAREG_UnInit+0x3c>)
    c2d0:	5cd0      	ldrb	r0, [r2, r3]
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d106      	bne.n	c2e4 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    c2d6:	4a0b      	ldr	r2, [pc, #44]	; (c304 <LORAREG_UnInit+0x40>)
    c2d8:	2100      	movs	r1, #0
    c2da:	4809      	ldr	r0, [pc, #36]	; (c300 <LORAREG_UnInit+0x3c>)
    c2dc:	4b0a      	ldr	r3, [pc, #40]	; (c308 <LORAREG_UnInit+0x44>)
    c2de:	4798      	blx	r3
}
    c2e0:	200a      	movs	r0, #10
    c2e2:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    c2e4:	4b09      	ldr	r3, [pc, #36]	; (c30c <LORAREG_UnInit+0x48>)
    c2e6:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    c2e8:	232f      	movs	r3, #47	; 0x2f
    c2ea:	4a05      	ldr	r2, [pc, #20]	; (c300 <LORAREG_UnInit+0x3c>)
    c2ec:	5cd3      	ldrb	r3, [r2, r3]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d1f1      	bne.n	c2d6 <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    c2f2:	200b      	movs	r0, #11
    c2f4:	4b05      	ldr	r3, [pc, #20]	; (c30c <LORAREG_UnInit+0x48>)
    c2f6:	4798      	blx	r3
    c2f8:	e7ed      	b.n	c2d6 <LORAREG_UnInit+0x12>
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	0000c15d 	.word	0x0000c15d
    c300:	20002310 	.word	0x20002310
    c304:	00000215 	.word	0x00000215
    c308:	00018779 	.word	0x00018779
    c30c:	0000cb71 	.word	0x0000cb71

0000c310 <Enableallchannels>:
#endif
void Enableallchannels()
{
    c310:	b570      	push	{r4, r5, r6, lr}
    c312:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    c314:	4914      	ldr	r1, [pc, #80]	; (c368 <Enableallchannels+0x58>)
    c316:	2401      	movs	r4, #1
    c318:	790b      	ldrb	r3, [r1, #4]
    c31a:	794a      	ldrb	r2, [r1, #5]
    c31c:	0212      	lsls	r2, r2, #8
    c31e:	431a      	orrs	r2, r3
    c320:	798b      	ldrb	r3, [r1, #6]
    c322:	041b      	lsls	r3, r3, #16
    c324:	431a      	orrs	r2, r3
    c326:	79cb      	ldrb	r3, [r1, #7]
    c328:	061b      	lsls	r3, r3, #24
    c32a:	4313      	orrs	r3, r2
    c32c:	541c      	strb	r4, [r3, r0]
    c32e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    c330:	2890      	cmp	r0, #144	; 0x90
    c332:	d1f1      	bne.n	c318 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    c334:	4c0c      	ldr	r4, [pc, #48]	; (c368 <Enableallchannels+0x58>)
    c336:	2200      	movs	r2, #0
    c338:	23ac      	movs	r3, #172	; 0xac
    c33a:	005b      	lsls	r3, r3, #1
    c33c:	54e2      	strb	r2, [r4, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c33e:	4b0b      	ldr	r3, [pc, #44]	; (c36c <Enableallchannels+0x5c>)
    c340:	5ce3      	ldrb	r3, [r4, r3]
    c342:	2284      	movs	r2, #132	; 0x84
    c344:	0092      	lsls	r2, r2, #2
    c346:	5ca0      	ldrb	r0, [r4, r2]
    c348:	0200      	lsls	r0, r0, #8
    c34a:	4318      	orrs	r0, r3
    c34c:	b2c1      	uxtb	r1, r0
    c34e:	0a00      	lsrs	r0, r0, #8
    c350:	4d07      	ldr	r5, [pc, #28]	; (c370 <Enableallchannels+0x60>)
    c352:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    c354:	4b07      	ldr	r3, [pc, #28]	; (c374 <Enableallchannels+0x64>)
    c356:	5ce3      	ldrb	r3, [r4, r3]
    c358:	4a07      	ldr	r2, [pc, #28]	; (c378 <Enableallchannels+0x68>)
    c35a:	5ca0      	ldrb	r0, [r4, r2]
    c35c:	0200      	lsls	r0, r0, #8
    c35e:	4318      	orrs	r0, r3
    c360:	b2c1      	uxtb	r1, r0
    c362:	0a00      	lsrs	r0, r0, #8
    c364:	47a8      	blx	r5
#endif
}
    c366:	bd70      	pop	{r4, r5, r6, pc}
    c368:	20002310 	.word	0x20002310
    c36c:	0000020f 	.word	0x0000020f
    c370:	0000c84d 	.word	0x0000c84d
    c374:	0000020d 	.word	0x0000020d
    c378:	0000020e 	.word	0x0000020e

0000c37c <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    c37c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    c37e:	2800      	cmp	r0, #0
    c380:	d00a      	beq.n	c398 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    c382:	2801      	cmp	r0, #1
    c384:	d00b      	beq.n	c39e <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    c386:	2805      	cmp	r0, #5
    c388:	d00c      	beq.n	c3a4 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    c38a:	2804      	cmp	r0, #4
    c38c:	d00d      	beq.n	c3aa <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    c38e:	3802      	subs	r0, #2
    c390:	2801      	cmp	r0, #1
    c392:	d90d      	bls.n	c3b0 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    c394:	2008      	movs	r0, #8
    c396:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    c398:	4b07      	ldr	r3, [pc, #28]	; (c3b8 <LORAREG_EnableallChannels+0x3c>)
    c39a:	4798      	blx	r3
    c39c:	e7fa      	b.n	c394 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    c39e:	4b07      	ldr	r3, [pc, #28]	; (c3bc <LORAREG_EnableallChannels+0x40>)
    c3a0:	4798      	blx	r3
    c3a2:	e7f7      	b.n	c394 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    c3a4:	4b06      	ldr	r3, [pc, #24]	; (c3c0 <LORAREG_EnableallChannels+0x44>)
    c3a6:	4798      	blx	r3
    c3a8:	e7f4      	b.n	c394 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    c3aa:	4b06      	ldr	r3, [pc, #24]	; (c3c4 <LORAREG_EnableallChannels+0x48>)
    c3ac:	4798      	blx	r3
    c3ae:	e7f1      	b.n	c394 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    c3b0:	4b05      	ldr	r3, [pc, #20]	; (c3c8 <LORAREG_EnableallChannels+0x4c>)
    c3b2:	4798      	blx	r3
    c3b4:	e7ee      	b.n	c394 <LORAREG_EnableallChannels+0x18>
    c3b6:	46c0      	nop			; (mov r8, r8)
    c3b8:	00006dfd 	.word	0x00006dfd
    c3bc:	00006f01 	.word	0x00006f01
    c3c0:	00007451 	.word	0x00007451
    c3c4:	000077b1 	.word	0x000077b1
    c3c8:	0000c311 	.word	0x0000c311

0000c3cc <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    c3cc:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    c3ce:	1e53      	subs	r3, r2, #1
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	2a00      	cmp	r2, #0
    c3d4:	d00b      	beq.n	c3ee <sal_FillSubKey+0x22>
    c3d6:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    c3d8:	18c5      	adds	r5, r0, r3
    c3da:	782a      	ldrb	r2, [r5, #0]
    c3dc:	0052      	lsls	r2, r2, #1
    c3de:	4322      	orrs	r2, r4
    c3e0:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    c3e2:	782c      	ldrb	r4, [r5, #0]
    c3e4:	09e4      	lsrs	r4, r4, #7
	while(i--)
    c3e6:	3b01      	subs	r3, #1
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	2bff      	cmp	r3, #255	; 0xff
    c3ec:	d1f4      	bne.n	c3d8 <sal_FillSubKey+0xc>
	}
}
    c3ee:	bd30      	pop	{r4, r5, pc}

0000c3f0 <SAL_AESEncode>:
{
    c3f0:	b510      	push	{r4, lr}
    c3f2:	b084      	sub	sp, #16
    c3f4:	0004      	movs	r4, r0
    c3f6:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    c3f8:	2210      	movs	r2, #16
    c3fa:	4668      	mov	r0, sp
    c3fc:	4b04      	ldr	r3, [pc, #16]	; (c410 <SAL_AESEncode+0x20>)
    c3fe:	4798      	blx	r3
	AESEncode(buffer, useKey);
    c400:	4669      	mov	r1, sp
    c402:	0020      	movs	r0, r4
    c404:	4b03      	ldr	r3, [pc, #12]	; (c414 <SAL_AESEncode+0x24>)
    c406:	4798      	blx	r3
}
    c408:	2000      	movs	r0, #0
    c40a:	b004      	add	sp, #16
    c40c:	bd10      	pop	{r4, pc}
    c40e:	46c0      	nop			; (mov r8, r8)
    c410:	00018655 	.word	0x00018655
    c414:	0000c5f1 	.word	0x0000c5f1

0000c418 <SAL_DeriveSessionKey>:
{
    c418:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    c41a:	4b01      	ldr	r3, [pc, #4]	; (c420 <SAL_DeriveSessionKey+0x8>)
    c41c:	4798      	blx	r3
}
    c41e:	bd10      	pop	{r4, pc}
    c420:	0000c3f1 	.word	0x0000c3f1

0000c424 <SAL_Read>:
}
    c424:	2000      	movs	r0, #0
    c426:	4770      	bx	lr

0000c428 <SAL_AESCmac>:
{
    c428:	b5f0      	push	{r4, r5, r6, r7, lr}
    c42a:	46d6      	mov	lr, sl
    c42c:	464f      	mov	r7, r9
    c42e:	4646      	mov	r6, r8
    c430:	b5c0      	push	{r6, r7, lr}
    c432:	b0a4      	sub	sp, #144	; 0x90
    c434:	9001      	str	r0, [sp, #4]
    c436:	000f      	movs	r7, r1
    c438:	9102      	str	r1, [sp, #8]
    c43a:	9203      	str	r2, [sp, #12]
    c43c:	469a      	mov	sl, r3
    c43e:	ab2c      	add	r3, sp, #176	; 0xb0
    c440:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    c442:	ae08      	add	r6, sp, #32
    c444:	2210      	movs	r2, #16
    c446:	2100      	movs	r1, #0
    c448:	0030      	movs	r0, r6
    c44a:	4d64      	ldr	r5, [pc, #400]	; (c5dc <SAL_AESCmac+0x1b4>)
    c44c:	47a8      	blx	r5
    c44e:	2387      	movs	r3, #135	; 0x87
    c450:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    c452:	2210      	movs	r2, #16
    c454:	2100      	movs	r1, #0
    c456:	a804      	add	r0, sp, #16
    c458:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    c45a:	9a01      	ldr	r2, [sp, #4]
    c45c:	0039      	movs	r1, r7
    c45e:	a804      	add	r0, sp, #16
    c460:	4b5f      	ldr	r3, [pc, #380]	; (c5e0 <SAL_AESCmac+0x1b8>)
    c462:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    c464:	ab04      	add	r3, sp, #16
    c466:	781b      	ldrb	r3, [r3, #0]
    c468:	2b7f      	cmp	r3, #127	; 0x7f
    c46a:	d82d      	bhi.n	c4c8 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    c46c:	2210      	movs	r2, #16
    c46e:	a920      	add	r1, sp, #128	; 0x80
    c470:	a804      	add	r0, sp, #16
    c472:	4b5c      	ldr	r3, [pc, #368]	; (c5e4 <SAL_AESCmac+0x1bc>)
    c474:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    c476:	ab20      	add	r3, sp, #128	; 0x80
    c478:	781b      	ldrb	r3, [r3, #0]
    c47a:	2b7f      	cmp	r3, #127	; 0x7f
    c47c:	d834      	bhi.n	c4e8 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    c47e:	2210      	movs	r2, #16
    c480:	a91c      	add	r1, sp, #112	; 0x70
    c482:	a820      	add	r0, sp, #128	; 0x80
    c484:	4b57      	ldr	r3, [pc, #348]	; (c5e4 <SAL_AESCmac+0x1bc>)
    c486:	4798      	blx	r3
	n = (size + 15) >> 4;
    c488:	0023      	movs	r3, r4
    c48a:	330f      	adds	r3, #15
    c48c:	111d      	asrs	r5, r3, #4
    c48e:	b2aa      	uxth	r2, r5
    c490:	4690      	mov	r8, r2
	if (n == 0)
    c492:	2a00      	cmp	r2, #0
    c494:	d038      	beq.n	c508 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    c496:	0722      	lsls	r2, r4, #28
    c498:	d138      	bne.n	c50c <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    c49a:	4642      	mov	r2, r8
    c49c:	3a01      	subs	r2, #1
    c49e:	0112      	lsls	r2, r2, #4
    c4a0:	b296      	uxth	r6, r2
    c4a2:	4f51      	ldr	r7, [pc, #324]	; (c5e8 <SAL_AESCmac+0x1c0>)
    c4a4:	401f      	ands	r7, r3
    c4a6:	42be      	cmp	r6, r7
    c4a8:	da54      	bge.n	c554 <SAL_AESCmac+0x12c>
    c4aa:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    c4ac:	a910      	add	r1, sp, #64	; 0x40
    c4ae:	aa20      	add	r2, sp, #128	; 0x80
    c4b0:	1b98      	subs	r0, r3, r6
    c4b2:	b280      	uxth	r0, r0
    c4b4:	4654      	mov	r4, sl
    c4b6:	5ce4      	ldrb	r4, [r4, r3]
    c4b8:	5c15      	ldrb	r5, [r2, r0]
    c4ba:	406c      	eors	r4, r5
    c4bc:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    c4be:	3301      	adds	r3, #1
    c4c0:	b29b      	uxth	r3, r3
    c4c2:	42bb      	cmp	r3, r7
    c4c4:	dbf4      	blt.n	c4b0 <SAL_AESCmac+0x88>
    c4c6:	e045      	b.n	c554 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    c4c8:	2210      	movs	r2, #16
    c4ca:	a920      	add	r1, sp, #128	; 0x80
    c4cc:	a804      	add	r0, sp, #16
    c4ce:	4b45      	ldr	r3, [pc, #276]	; (c5e4 <SAL_AESCmac+0x1bc>)
    c4d0:	4798      	blx	r3
    c4d2:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    c4d4:	aa20      	add	r2, sp, #128	; 0x80
    c4d6:	a908      	add	r1, sp, #32
    c4d8:	5c98      	ldrb	r0, [r3, r2]
    c4da:	5c5d      	ldrb	r5, [r3, r1]
    c4dc:	4068      	eors	r0, r5
    c4de:	5498      	strb	r0, [r3, r2]
    c4e0:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    c4e2:	2b10      	cmp	r3, #16
    c4e4:	d1f8      	bne.n	c4d8 <SAL_AESCmac+0xb0>
    c4e6:	e7c6      	b.n	c476 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    c4e8:	2210      	movs	r2, #16
    c4ea:	a91c      	add	r1, sp, #112	; 0x70
    c4ec:	a820      	add	r0, sp, #128	; 0x80
    c4ee:	4b3d      	ldr	r3, [pc, #244]	; (c5e4 <SAL_AESCmac+0x1bc>)
    c4f0:	4798      	blx	r3
    c4f2:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    c4f4:	aa1c      	add	r2, sp, #112	; 0x70
    c4f6:	a908      	add	r1, sp, #32
    c4f8:	5c98      	ldrb	r0, [r3, r2]
    c4fa:	5c5d      	ldrb	r5, [r3, r1]
    c4fc:	4068      	eors	r0, r5
    c4fe:	5498      	strb	r0, [r3, r2]
    c500:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    c502:	2b10      	cmp	r3, #16
    c504:	d1f8      	bne.n	c4f8 <SAL_AESCmac+0xd0>
    c506:	e7bf      	b.n	c488 <SAL_AESCmac+0x60>
		n = 1;
    c508:	2301      	movs	r3, #1
    c50a:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    c50c:	230f      	movs	r3, #15
    c50e:	0020      	movs	r0, r4
    c510:	4398      	bics	r0, r3
    c512:	2300      	movs	r3, #0
			if ( i < (size%16) )
    c514:	220f      	movs	r2, #15
    c516:	4014      	ands	r4, r2
					padded[i] = 0x00;
    c518:	a90c      	add	r1, sp, #48	; 0x30
    c51a:	2700      	movs	r7, #0
					padded[i] = 0x80;
    c51c:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    c51e:	4450      	add	r0, sl
    c520:	e005      	b.n	c52e <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    c522:	4294      	cmp	r4, r2
    c524:	d009      	beq.n	c53a <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    c526:	545f      	strb	r7, [r3, r1]
    c528:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    c52a:	2b10      	cmp	r3, #16
    c52c:	d007      	beq.n	c53e <SAL_AESCmac+0x116>
    c52e:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    c530:	4294      	cmp	r4, r2
    c532:	d9f6      	bls.n	c522 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    c534:	5cc2      	ldrb	r2, [r0, r3]
    c536:	545a      	strb	r2, [r3, r1]
    c538:	e7f6      	b.n	c528 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    c53a:	545e      	strb	r6, [r3, r1]
    c53c:	e7f4      	b.n	c528 <SAL_AESCmac+0x100>
    c53e:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    c540:	a810      	add	r0, sp, #64	; 0x40
    c542:	a90c      	add	r1, sp, #48	; 0x30
    c544:	aa1c      	add	r2, sp, #112	; 0x70
    c546:	5c5c      	ldrb	r4, [r3, r1]
    c548:	5c9d      	ldrb	r5, [r3, r2]
    c54a:	406c      	eors	r4, r5
    c54c:	541c      	strb	r4, [r3, r0]
    c54e:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    c550:	2b10      	cmp	r3, #16
    c552:	d1f8      	bne.n	c546 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    c554:	2210      	movs	r2, #16
    c556:	2100      	movs	r1, #0
    c558:	a818      	add	r0, sp, #96	; 0x60
    c55a:	4b20      	ldr	r3, [pc, #128]	; (c5dc <SAL_AESCmac+0x1b4>)
    c55c:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    c55e:	2301      	movs	r3, #1
    c560:	425b      	negs	r3, r3
    c562:	4443      	add	r3, r8
    c564:	4699      	mov	r9, r3
    c566:	2000      	movs	r0, #0
    c568:	2700      	movs	r7, #0
    c56a:	2b00      	cmp	r3, #0
    c56c:	dd1a      	ble.n	c5a4 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    c56e:	ad14      	add	r5, sp, #80	; 0x50
    c570:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    c572:	4e1e      	ldr	r6, [pc, #120]	; (c5ec <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    c574:	0100      	lsls	r0, r0, #4
    c576:	2300      	movs	r3, #0
    c578:	4450      	add	r0, sl
    c57a:	5cc2      	ldrb	r2, [r0, r3]
    c57c:	5d19      	ldrb	r1, [r3, r4]
    c57e:	404a      	eors	r2, r1
    c580:	555a      	strb	r2, [r3, r5]
    c582:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    c584:	2b10      	cmp	r3, #16
    c586:	d1f8      	bne.n	c57a <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    c588:	2210      	movs	r2, #16
    c58a:	0029      	movs	r1, r5
    c58c:	0020      	movs	r0, r4
    c58e:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    c590:	9a01      	ldr	r2, [sp, #4]
    c592:	9902      	ldr	r1, [sp, #8]
    c594:	0020      	movs	r0, r4
    c596:	4b12      	ldr	r3, [pc, #72]	; (c5e0 <SAL_AESCmac+0x1b8>)
    c598:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    c59a:	3701      	adds	r7, #1
    c59c:	b2bf      	uxth	r7, r7
    c59e:	0038      	movs	r0, r7
    c5a0:	454f      	cmp	r7, r9
    c5a2:	dbe7      	blt.n	c574 <SAL_AESCmac+0x14c>
    c5a4:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    c5a6:	ac14      	add	r4, sp, #80	; 0x50
    c5a8:	a818      	add	r0, sp, #96	; 0x60
    c5aa:	a910      	add	r1, sp, #64	; 0x40
    c5ac:	5c1a      	ldrb	r2, [r3, r0]
    c5ae:	5c5d      	ldrb	r5, [r3, r1]
    c5b0:	406a      	eors	r2, r5
    c5b2:	551a      	strb	r2, [r3, r4]
    c5b4:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    c5b6:	2b10      	cmp	r3, #16
    c5b8:	d1f8      	bne.n	c5ac <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    c5ba:	9a01      	ldr	r2, [sp, #4]
    c5bc:	9902      	ldr	r1, [sp, #8]
    c5be:	a814      	add	r0, sp, #80	; 0x50
    c5c0:	4b07      	ldr	r3, [pc, #28]	; (c5e0 <SAL_AESCmac+0x1b8>)
    c5c2:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    c5c4:	2210      	movs	r2, #16
    c5c6:	a914      	add	r1, sp, #80	; 0x50
    c5c8:	9803      	ldr	r0, [sp, #12]
    c5ca:	4b08      	ldr	r3, [pc, #32]	; (c5ec <SAL_AESCmac+0x1c4>)
    c5cc:	4798      	blx	r3
}
    c5ce:	2000      	movs	r0, #0
    c5d0:	b024      	add	sp, #144	; 0x90
    c5d2:	bc1c      	pop	{r2, r3, r4}
    c5d4:	4690      	mov	r8, r2
    c5d6:	4699      	mov	r9, r3
    c5d8:	46a2      	mov	sl, r4
    c5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5dc:	00018779 	.word	0x00018779
    c5e0:	0000c3f1 	.word	0x0000c3f1
    c5e4:	0000c3cd 	.word	0x0000c3cd
    c5e8:	000ffff0 	.word	0x000ffff0
    c5ec:	00018655 	.word	0x00018655

0000c5f0 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5f2:	b083      	sub	sp, #12
    c5f4:	0004      	movs	r4, r0
    c5f6:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    c5f8:	4a2b      	ldr	r2, [pc, #172]	; (c6a8 <AESEncode+0xb8>)
    c5fa:	2101      	movs	r1, #1
    c5fc:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    c5fe:	2300      	movs	r3, #0
    c600:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    c602:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    c604:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    c606:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    c608:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    c60a:	4928      	ldr	r1, [pc, #160]	; (c6ac <AESEncode+0xbc>)
    c60c:	4828      	ldr	r0, [pc, #160]	; (c6b0 <AESEncode+0xc0>)
    c60e:	4b29      	ldr	r3, [pc, #164]	; (c6b4 <AESEncode+0xc4>)
    c610:	4798      	blx	r3
    c612:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    c614:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    c616:	4f28      	ldr	r7, [pc, #160]	; (c6b8 <AESEncode+0xc8>)
    c618:	1870      	adds	r0, r6, r1
    c61a:	2300      	movs	r3, #0
    c61c:	5cc2      	ldrb	r2, [r0, r3]
    c61e:	555a      	strb	r2, [r3, r5]
    c620:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c622:	2b04      	cmp	r3, #4
    c624:	d1fa      	bne.n	c61c <AESEncode+0x2c>
    c626:	9b01      	ldr	r3, [sp, #4]
    c628:	51cb      	str	r3, [r1, r7]
    c62a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c62c:	2910      	cmp	r1, #16
    c62e:	d1f3      	bne.n	c618 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    c630:	4d1f      	ldr	r5, [pc, #124]	; (c6b0 <AESEncode+0xc0>)
    c632:	4921      	ldr	r1, [pc, #132]	; (c6b8 <AESEncode+0xc8>)
    c634:	0028      	movs	r0, r5
    c636:	4b21      	ldr	r3, [pc, #132]	; (c6bc <AESEncode+0xcc>)
    c638:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    c63a:	682a      	ldr	r2, [r5, #0]
    c63c:	7913      	ldrb	r3, [r2, #4]
    c63e:	2102      	movs	r1, #2
    c640:	430b      	orrs	r3, r1
    c642:	7113      	strb	r3, [r2, #4]
    c644:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    c646:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    c648:	4e1b      	ldr	r6, [pc, #108]	; (c6b8 <AESEncode+0xc8>)
    c64a:	1860      	adds	r0, r4, r1
    c64c:	2300      	movs	r3, #0
    c64e:	5cc2      	ldrb	r2, [r0, r3]
    c650:	555a      	strb	r2, [r3, r5]
    c652:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c654:	2b04      	cmp	r3, #4
    c656:	d1fa      	bne.n	c64e <AESEncode+0x5e>
    c658:	9b01      	ldr	r3, [sp, #4]
    c65a:	518b      	str	r3, [r1, r6]
    c65c:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c65e:	2910      	cmp	r1, #16
    c660:	d1f3      	bne.n	c64a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    c662:	4d13      	ldr	r5, [pc, #76]	; (c6b0 <AESEncode+0xc0>)
    c664:	4914      	ldr	r1, [pc, #80]	; (c6b8 <AESEncode+0xc8>)
    c666:	0028      	movs	r0, r5
    c668:	4b15      	ldr	r3, [pc, #84]	; (c6c0 <AESEncode+0xd0>)
    c66a:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    c66c:	682d      	ldr	r5, [r5, #0]
    c66e:	792b      	ldrb	r3, [r5, #4]
    c670:	2202      	movs	r2, #2
    c672:	4393      	bics	r3, r2
    c674:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    c676:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    c678:	2002      	movs	r0, #2
    c67a:	e001      	b.n	c680 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    c67c:	4211      	tst	r1, r2
    c67e:	d107      	bne.n	c690 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    c680:	79eb      	ldrb	r3, [r5, #7]
    c682:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    c684:	000a      	movs	r2, r1
    c686:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    c688:	4218      	tst	r0, r3
    c68a:	d0f7      	beq.n	c67c <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    c68c:	4302      	orrs	r2, r0
    c68e:	e7f5      	b.n	c67c <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    c690:	4d09      	ldr	r5, [pc, #36]	; (c6b8 <AESEncode+0xc8>)
    c692:	0029      	movs	r1, r5
    c694:	4806      	ldr	r0, [pc, #24]	; (c6b0 <AESEncode+0xc0>)
    c696:	4b0b      	ldr	r3, [pc, #44]	; (c6c4 <AESEncode+0xd4>)
    c698:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    c69a:	2210      	movs	r2, #16
    c69c:	0029      	movs	r1, r5
    c69e:	0020      	movs	r0, r4
    c6a0:	4b09      	ldr	r3, [pc, #36]	; (c6c8 <AESEncode+0xd8>)
    c6a2:	4798      	blx	r3
#endif	
}
    c6a4:	b003      	add	sp, #12
    c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6a8:	20002528 	.word	0x20002528
    c6ac:	42003400 	.word	0x42003400
    c6b0:	20002534 	.word	0x20002534
    c6b4:	00002bf1 	.word	0x00002bf1
    c6b8:	20000de8 	.word	0x20000de8
    c6bc:	00002c85 	.word	0x00002c85
    c6c0:	00002cb9 	.word	0x00002cb9
    c6c4:	00002d09 	.word	0x00002d09
    c6c8:	00018655 	.word	0x00018655

0000c6cc <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    c6cc:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    c6ce:	4d07      	ldr	r5, [pc, #28]	; (c6ec <AESInit+0x20>)
    c6d0:	0028      	movs	r0, r5
    c6d2:	4b07      	ldr	r3, [pc, #28]	; (c6f0 <AESInit+0x24>)
    c6d4:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    c6d6:	4c07      	ldr	r4, [pc, #28]	; (c6f4 <AESInit+0x28>)
    c6d8:	002a      	movs	r2, r5
    c6da:	4907      	ldr	r1, [pc, #28]	; (c6f8 <AESInit+0x2c>)
    c6dc:	0020      	movs	r0, r4
    c6de:	4b07      	ldr	r3, [pc, #28]	; (c6fc <AESInit+0x30>)
    c6e0:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    c6e2:	0020      	movs	r0, r4
    c6e4:	4b06      	ldr	r3, [pc, #24]	; (c700 <AESInit+0x34>)
    c6e6:	4798      	blx	r3
#endif	
}
    c6e8:	bd70      	pop	{r4, r5, r6, pc}
    c6ea:	46c0      	nop			; (mov r8, r8)
    c6ec:	20002528 	.word	0x20002528
    c6f0:	00002bb5 	.word	0x00002bb5
    c6f4:	20002534 	.word	0x20002534
    c6f8:	42003400 	.word	0x42003400
    c6fc:	00002c65 	.word	0x00002c65
    c700:	00002bcf 	.word	0x00002bcf

0000c704 <edbg_eui_read_eui64>:
/*********************************************************************//**
\brief		Reads back the device MAC address stored in User page of EDBG
\param[in]  eui - Device EUI read back from EDBG(8 bytes)
*************************************************************************/
 void edbg_eui_read_eui64(uint8_t *eui)
{
    c704:	b5f0      	push	{r4, r5, r6, r7, lr}
    c706:	b091      	sub	sp, #68	; 0x44
    c708:	9001      	str	r0, [sp, #4]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    c70a:	aa03      	add	r2, sp, #12
    c70c:	2364      	movs	r3, #100	; 0x64
    c70e:	9303      	str	r3, [sp, #12]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    c710:	4b39      	ldr	r3, [pc, #228]	; (c7f8 <edbg_eui_read_eui64+0xf4>)
    c712:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    c714:	2300      	movs	r3, #0
    c716:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    c718:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    c71a:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c71c:	2180      	movs	r1, #128	; 0x80
    c71e:	0389      	lsls	r1, r1, #14
    c720:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    c722:	2101      	movs	r1, #1
    c724:	4249      	negs	r1, r1
    c726:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    c728:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    c72a:	3125      	adds	r1, #37	; 0x25
    c72c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c72e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    c730:	3108      	adds	r1, #8
    c732:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    c734:	3101      	adds	r1, #1
    c736:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    c738:	3101      	adds	r1, #1
    c73a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    c73c:	33d7      	adds	r3, #215	; 0xd7
    c73e:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    c740:	4b2e      	ldr	r3, [pc, #184]	; (c7fc <edbg_eui_read_eui64+0xf8>)
    c742:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    c744:	4b2e      	ldr	r3, [pc, #184]	; (c800 <edbg_eui_read_eui64+0xfc>)
    c746:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c);
    c748:	4c2e      	ldr	r4, [pc, #184]	; (c804 <edbg_eui_read_eui64+0x100>)
    c74a:	492f      	ldr	r1, [pc, #188]	; (c808 <edbg_eui_read_eui64+0x104>)
    c74c:	0020      	movs	r0, r4
    c74e:	4b2f      	ldr	r3, [pc, #188]	; (c80c <edbg_eui_read_eui64+0x108>)
    c750:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c752:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    c754:	2207      	movs	r2, #7
    c756:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    c758:	421a      	tst	r2, r3
    c75a:	d1fc      	bne.n	c756 <edbg_eui_read_eui64+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c75c:	6823      	ldr	r3, [r4, #0]
    c75e:	2202      	movs	r2, #2
    c760:	4313      	orrs	r3, r2
    c762:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c764:	4d27      	ldr	r5, [pc, #156]	; (c804 <edbg_eui_read_eui64+0x100>)
    c766:	6828      	ldr	r0, [r5, #0]
    c768:	4b29      	ldr	r3, [pc, #164]	; (c810 <edbg_eui_read_eui64+0x10c>)
    c76a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c76c:	231f      	movs	r3, #31
    c76e:	4018      	ands	r0, r3
    c770:	3b1e      	subs	r3, #30
    c772:	4083      	lsls	r3, r0
    c774:	4a27      	ldr	r2, [pc, #156]	; (c814 <edbg_eui_read_eui64+0x110>)
    c776:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c778:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    c77a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c77c:	2110      	movs	r1, #16
    c77e:	8b62      	ldrh	r2, [r4, #26]
    c780:	420a      	tst	r2, r1
    c782:	d104      	bne.n	c78e <edbg_eui_read_eui64+0x8a>
		timeout_counter++;
    c784:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c786:	4283      	cmp	r3, r0
    c788:	d3f9      	bcc.n	c77e <edbg_eui_read_eui64+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c78a:	2310      	movs	r3, #16
    c78c:	8363      	strh	r3, [r4, #26]
	configure_i2c_master();
	uint32_t timeout = 0;
	
	/** Send the request token */
	master_packet.address         = SLAVE_ADDRESS;
    c78e:	4b22      	ldr	r3, [pc, #136]	; (c818 <edbg_eui_read_eui64+0x114>)
    c790:	2228      	movs	r2, #40	; 0x28
    c792:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = sizeof(write_buffer);
    c794:	3a26      	subs	r2, #38	; 0x26
    c796:	805a      	strh	r2, [r3, #2]
	master_packet.data            = write_buffer;
    c798:	4a20      	ldr	r2, [pc, #128]	; (c81c <edbg_eui_read_eui64+0x118>)
    c79a:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    c79c:	2200      	movs	r2, #0
    c79e:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    c7a0:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    c7a2:	729a      	strb	r2, [r3, #10]
	uint32_t timeout = 0;
    c7a4:	2400      	movs	r4, #0
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) !=
    c7a6:	001e      	movs	r6, r3
    c7a8:	4d16      	ldr	r5, [pc, #88]	; (c804 <edbg_eui_read_eui64+0x100>)
    c7aa:	4f1d      	ldr	r7, [pc, #116]	; (c820 <edbg_eui_read_eui64+0x11c>)
    c7ac:	0031      	movs	r1, r6
    c7ae:	0028      	movs	r0, r5
    c7b0:	47b8      	blx	r7
    c7b2:	2800      	cmp	r0, #0
    c7b4:	d004      	beq.n	c7c0 <edbg_eui_read_eui64+0xbc>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    c7b6:	3401      	adds	r4, #1
    c7b8:	4b1a      	ldr	r3, [pc, #104]	; (c824 <edbg_eui_read_eui64+0x120>)
    c7ba:	429c      	cmp	r4, r3
    c7bc:	d1f6      	bne.n	c7ac <edbg_eui_read_eui64+0xa8>
    c7be:	e019      	b.n	c7f4 <edbg_eui_read_eui64+0xf0>
			return;
		}
	}

	/** Get the extension boards info */
	master_packet.data_length     = 256;
    c7c0:	4b15      	ldr	r3, [pc, #84]	; (c818 <edbg_eui_read_eui64+0x114>)
    c7c2:	2280      	movs	r2, #128	; 0x80
    c7c4:	0052      	lsls	r2, r2, #1
    c7c6:	805a      	strh	r2, [r3, #2]
	master_packet.data            = kit_data;
    c7c8:	4a17      	ldr	r2, [pc, #92]	; (c828 <edbg_eui_read_eui64+0x124>)
    c7ca:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    c7cc:	001e      	movs	r6, r3
    c7ce:	4d0d      	ldr	r5, [pc, #52]	; (c804 <edbg_eui_read_eui64+0x100>)
    c7d0:	4f16      	ldr	r7, [pc, #88]	; (c82c <edbg_eui_read_eui64+0x128>)
    c7d2:	0031      	movs	r1, r6
    c7d4:	0028      	movs	r0, r5
    c7d6:	47b8      	blx	r7
    c7d8:	2800      	cmp	r0, #0
    c7da:	d006      	beq.n	c7ea <edbg_eui_read_eui64+0xe6>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    c7dc:	1c62      	adds	r2, r4, #1
    c7de:	23fa      	movs	r3, #250	; 0xfa
    c7e0:	009b      	lsls	r3, r3, #2
    c7e2:	429c      	cmp	r4, r3
    c7e4:	d006      	beq.n	c7f4 <edbg_eui_read_eui64+0xf0>
    c7e6:	0014      	movs	r4, r2
    c7e8:	e7f3      	b.n	c7d2 <edbg_eui_read_eui64+0xce>
			return;
		}
	}
   
    // First 8bytes value is MAC Address
	memcpy(eui, kit_data, MAC_ADDR_LEN);
    c7ea:	2208      	movs	r2, #8
    c7ec:	490e      	ldr	r1, [pc, #56]	; (c828 <edbg_eui_read_eui64+0x124>)
    c7ee:	9801      	ldr	r0, [sp, #4]
    c7f0:	4b0f      	ldr	r3, [pc, #60]	; (c830 <edbg_eui_read_eui64+0x12c>)
    c7f2:	4798      	blx	r3
}
    c7f4:	b011      	add	sp, #68	; 0x44
    c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7f8:	00000d48 	.word	0x00000d48
    c7fc:	00100002 	.word	0x00100002
    c800:	00110002 	.word	0x00110002
    c804:	20002748 	.word	0x20002748
    c808:	42000400 	.word	0x42000400
    c80c:	000036dd 	.word	0x000036dd
    c810:	00004395 	.word	0x00004395
    c814:	e000e100 	.word	0xe000e100
    c818:	2000273c 	.word	0x2000273c
    c81c:	20000018 	.word	0x20000018
    c820:	00003d1d 	.word	0x00003d1d
    c824:	000003e9 	.word	0x000003e9
    c828:	2000263c 	.word	0x2000263c
    c82c:	00003cf9 	.word	0x00003cf9
    c830:	00018655 	.word	0x00018655

0000c834 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    c834:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    c836:	4b03      	ldr	r3, [pc, #12]	; (c844 <PDS_Init+0x10>)
    c838:	4798      	blx	r3
	pdsUnInitFlag = false;
    c83a:	2200      	movs	r2, #0
    c83c:	4b02      	ldr	r3, [pc, #8]	; (c848 <PDS_Init+0x14>)
    c83e:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    c840:	bd10      	pop	{r4, pc}
    c842:	46c0      	nop			; (mov r8, r8)
    c844:	0000d071 	.word	0x0000d071
    c848:	20000df8 	.word	0x20000df8

0000c84c <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    c84c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c84e:	4b14      	ldr	r3, [pc, #80]	; (c8a0 <PDS_Store+0x54>)
    c850:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    c852:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    c854:	2a00      	cmp	r2, #0
    c856:	d106      	bne.n	c866 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    c858:	0102      	lsls	r2, r0, #4
    c85a:	4b12      	ldr	r3, [pc, #72]	; (c8a4 <PDS_Store+0x58>)
    c85c:	189b      	adds	r3, r3, r2
    c85e:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    c860:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    c862:	2a00      	cmp	r2, #0
    c864:	d101      	bne.n	c86a <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    c866:	0018      	movs	r0, r3
    c868:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c86a:	0103      	lsls	r3, r0, #4
    c86c:	4a0d      	ldr	r2, [pc, #52]	; (c8a4 <PDS_Store+0x58>)
    c86e:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    c870:	2c00      	cmp	r4, #0
    c872:	d011      	beq.n	c898 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    c874:	001a      	movs	r2, r3
    c876:	4b0b      	ldr	r3, [pc, #44]	; (c8a4 <PDS_Store+0x58>)
    c878:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c87a:	689b      	ldr	r3, [r3, #8]
    c87c:	2b00      	cmp	r3, #0
    c87e:	d00d      	beq.n	c89c <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    c880:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    c882:	280c      	cmp	r0, #12
    c884:	d8ef      	bhi.n	c866 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    c886:	3b04      	subs	r3, #4
    c888:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    c88a:	4a07      	ldr	r2, [pc, #28]	; (c8a8 <PDS_Store+0x5c>)
    c88c:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    c88e:	2001      	movs	r0, #1
    c890:	4b06      	ldr	r3, [pc, #24]	; (c8ac <PDS_Store+0x60>)
    c892:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    c894:	2300      	movs	r3, #0
    c896:	e7e6      	b.n	c866 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    c898:	2305      	movs	r3, #5
    c89a:	e7e4      	b.n	c866 <PDS_Store+0x1a>
    c89c:	2305      	movs	r3, #5
    c89e:	e7e2      	b.n	c866 <PDS_Store+0x1a>
    c8a0:	20000df8 	.word	0x20000df8
    c8a4:	20002780 	.word	0x20002780
    c8a8:	20002770 	.word	0x20002770
    c8ac:	0000cd49 	.word	0x0000cd49

0000c8b0 <PDS_Restore>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Restore(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8b2:	b0c3      	sub	sp, #268	; 0x10c
    c8b4:	0006      	movs	r6, r0
    c8b6:	000d      	movs	r5, r1
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c8b8:	4b2a      	ldr	r3, [pc, #168]	; (c964 <PDS_Restore+0xb4>)
    c8ba:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    c8bc:	2400      	movs	r4, #0
	if (false == pdsUnInitFlag)
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d106      	bne.n	c8d0 <PDS_Restore+0x20>
		uint8_t *ptr;
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		uint16_t size;
		
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    c8c2:	0102      	lsls	r2, r0, #4
    c8c4:	4b28      	ldr	r3, [pc, #160]	; (c968 <PDS_Restore+0xb8>)
    c8c6:	189b      	adds	r3, r3, r2
    c8c8:	791c      	ldrb	r4, [r3, #4]
    c8ca:	2c00      	cmp	r4, #0
    c8cc:	d103      	bne.n	c8d6 <PDS_Restore+0x26>
			
			return status;
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    c8ce:	2405      	movs	r4, #5
		}
	}
#endif	
	return status;
}
    c8d0:	0020      	movs	r0, r4
    c8d2:	b043      	add	sp, #268	; 0x10c
    c8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c8d6:	0013      	movs	r3, r2
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    c8d8:	4a23      	ldr	r2, [pc, #140]	; (c968 <PDS_Restore+0xb8>)
    c8da:	589b      	ldr	r3, [r3, r2]
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d0f6      	beq.n	c8ce <PDS_Restore+0x1e>
		(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    c8e0:	0102      	lsls	r2, r0, #4
    c8e2:	4b21      	ldr	r3, [pc, #132]	; (c968 <PDS_Restore+0xb8>)
    c8e4:	189b      	adds	r3, r3, r2
    c8e6:	689f      	ldr	r7, [r3, #8]
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c8e8:	2f00      	cmp	r7, #0
    c8ea:	d0f0      	beq.n	c8ce <PDS_Restore+0x1e>
			memset(&buffer, 0, sizeof(PdsMem_t));
    c8ec:	2280      	movs	r2, #128	; 0x80
    c8ee:	0052      	lsls	r2, r2, #1
    c8f0:	2100      	movs	r1, #0
    c8f2:	a802      	add	r0, sp, #8
    c8f4:	4b1d      	ldr	r3, [pc, #116]	; (c96c <PDS_Restore+0xbc>)
    c8f6:	4798      	blx	r3
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    c8f8:	4b1d      	ldr	r3, [pc, #116]	; (c970 <PDS_Restore+0xc0>)
    c8fa:	469c      	mov	ip, r3
    c8fc:	4464      	add	r4, ip
    c8fe:	00e4      	lsls	r4, r4, #3
    c900:	1939      	adds	r1, r7, r4
    c902:	2208      	movs	r2, #8
    c904:	4668      	mov	r0, sp
    c906:	4b1b      	ldr	r3, [pc, #108]	; (c974 <PDS_Restore+0xc4>)
    c908:	4798      	blx	r3
			size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    c90a:	466b      	mov	r3, sp
    c90c:	79da      	ldrb	r2, [r3, #7]
    c90e:	799b      	ldrb	r3, [r3, #6]
    c910:	18d2      	adds	r2, r2, r3
			status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    c912:	3205      	adds	r2, #5
    c914:	a902      	add	r1, sp, #8
    c916:	0030      	movs	r0, r6
    c918:	4b17      	ldr	r3, [pc, #92]	; (c978 <PDS_Restore+0xc8>)
    c91a:	4798      	blx	r3
    c91c:	1e04      	subs	r4, r0, #0
			if (status != PDS_OK)
    c91e:	d1d7      	bne.n	c8d0 <PDS_Restore+0x20>
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + item), sizeof(ItemMap_t));
    c920:	0136      	lsls	r6, r6, #4
    c922:	4b11      	ldr	r3, [pc, #68]	; (c968 <PDS_Restore+0xb8>)
    c924:	199e      	adds	r6, r3, r6
    c926:	00eb      	lsls	r3, r5, #3
    c928:	68b1      	ldr	r1, [r6, #8]
    c92a:	18c9      	adds	r1, r1, r3
    c92c:	2208      	movs	r2, #8
    c92e:	4668      	mov	r0, sp
    c930:	4b10      	ldr	r3, [pc, #64]	; (c974 <PDS_Restore+0xc4>)
    c932:	4798      	blx	r3
			if (item == itemInfo.itemId)
    c934:	466b      	mov	r3, sp
    c936:	795b      	ldrb	r3, [r3, #5]
    c938:	42ab      	cmp	r3, r5
    c93a:	d001      	beq.n	c940 <PDS_Restore+0x90>
				return PDS_NOT_FOUND;
    c93c:	2403      	movs	r4, #3
    c93e:	e7c7      	b.n	c8d0 <PDS_Restore+0x20>
			ptr += itemInfo.itemOffset;
    c940:	466b      	mov	r3, sp
    c942:	79d9      	ldrb	r1, [r3, #7]
    c944:	2315      	movs	r3, #21
    c946:	446b      	add	r3, sp
    c948:	469c      	mov	ip, r3
    c94a:	4461      	add	r1, ip
				if (false == itemHeader.delete)
    c94c:	790b      	ldrb	r3, [r1, #4]
    c94e:	2b00      	cmp	r3, #0
    c950:	d001      	beq.n	c956 <PDS_Restore+0xa6>
					return PDS_ITEM_DELETED;
    c952:	2406      	movs	r4, #6
    c954:	e7bc      	b.n	c8d0 <PDS_Restore+0x20>
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    c956:	466b      	mov	r3, sp
    c958:	799a      	ldrb	r2, [r3, #6]
					ptr += sizeof(ItemHeader_t);
    c95a:	3105      	adds	r1, #5
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    c95c:	9800      	ldr	r0, [sp, #0]
    c95e:	4b05      	ldr	r3, [pc, #20]	; (c974 <PDS_Restore+0xc4>)
    c960:	4798      	blx	r3
			return status;
    c962:	e7b5      	b.n	c8d0 <PDS_Restore+0x20>
    c964:	20000df8 	.word	0x20000df8
    c968:	20002780 	.word	0x20002780
    c96c:	00018779 	.word	0x00018779
    c970:	1fffffff 	.word	0x1fffffff
    c974:	00018655 	.word	0x00018655
    c978:	0000d20d 	.word	0x0000d20d

0000c97c <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    c97c:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c97e:	4b0e      	ldr	r3, [pc, #56]	; (c9b8 <PDS_IsRestorable+0x3c>)
    c980:	7818      	ldrb	r0, [r3, #0]
    c982:	2800      	cmp	r0, #0
    c984:	d117      	bne.n	c9b6 <PDS_IsRestorable+0x3a>
    c986:	4d0d      	ldr	r5, [pc, #52]	; (c9bc <PDS_IsRestorable+0x40>)
    c988:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    c98a:	4e0d      	ldr	r6, [pc, #52]	; (c9c0 <PDS_IsRestorable+0x44>)
    c98c:	e004      	b.n	c998 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    c98e:	3401      	adds	r4, #1
    c990:	b2e4      	uxtb	r4, r4
    c992:	3510      	adds	r5, #16
    c994:	2c0d      	cmp	r4, #13
    c996:	d00d      	beq.n	c9b4 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    c998:	792b      	ldrb	r3, [r5, #4]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d0f7      	beq.n	c98e <PDS_IsRestorable+0x12>
    c99e:	682b      	ldr	r3, [r5, #0]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d0f4      	beq.n	c98e <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    c9a4:	68ab      	ldr	r3, [r5, #8]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d0f1      	beq.n	c98e <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    c9aa:	0020      	movs	r0, r4
    c9ac:	47b0      	blx	r6
    c9ae:	2800      	cmp	r0, #0
    c9b0:	d1ed      	bne.n	c98e <PDS_IsRestorable+0x12>
    c9b2:	e000      	b.n	c9b6 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    c9b4:	2001      	movs	r0, #1
}
    c9b6:	bd70      	pop	{r4, r5, r6, pc}
    c9b8:	20000df8 	.word	0x20000df8
    c9bc:	20002780 	.word	0x20002780
    c9c0:	0000d239 	.word	0x0000d239

0000c9c4 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    c9c4:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c9c6:	4b04      	ldr	r3, [pc, #16]	; (c9d8 <PDS_DeleteAll+0x14>)
    c9c8:	781b      	ldrb	r3, [r3, #0]
    c9ca:	2b00      	cmp	r3, #0
    c9cc:	d001      	beq.n	c9d2 <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    c9ce:	2000      	movs	r0, #0
    c9d0:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    c9d2:	4b02      	ldr	r3, [pc, #8]	; (c9dc <PDS_DeleteAll+0x18>)
    c9d4:	4798      	blx	r3
    c9d6:	e7fa      	b.n	c9ce <PDS_DeleteAll+0xa>
    c9d8:	20000df8 	.word	0x20000df8
    c9dc:	0000d255 	.word	0x0000d255

0000c9e0 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9e2:	46ce      	mov	lr, r9
    c9e4:	4647      	mov	r7, r8
    c9e6:	b580      	push	{r7, lr}
    c9e8:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    c9ea:	4b32      	ldr	r3, [pc, #200]	; (cab4 <PDS_RestoreAll+0xd4>)
    c9ec:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    c9ee:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d159      	bne.n	caa8 <PDS_RestoreAll+0xc8>
    c9f4:	4e30      	ldr	r6, [pc, #192]	; (cab8 <PDS_RestoreAll+0xd8>)
    c9f6:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    c9f8:	4b30      	ldr	r3, [pc, #192]	; (cabc <PDS_RestoreAll+0xdc>)
    c9fa:	4698      	mov	r8, r3
    c9fc:	e026      	b.n	ca4c <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    c9fe:	3401      	adds	r4, #1
    ca00:	b2e4      	uxtb	r4, r4
    ca02:	792b      	ldrb	r3, [r5, #4]
    ca04:	42a3      	cmp	r3, r4
    ca06:	d918      	bls.n	ca3a <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    ca08:	00e1      	lsls	r1, r4, #3
    ca0a:	68ab      	ldr	r3, [r5, #8]
    ca0c:	469c      	mov	ip, r3
    ca0e:	4461      	add	r1, ip
    ca10:	2208      	movs	r2, #8
    ca12:	a802      	add	r0, sp, #8
    ca14:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    ca16:	ab02      	add	r3, sp, #8
    ca18:	79d9      	ldrb	r1, [r3, #7]
    ca1a:	2315      	movs	r3, #21
    ca1c:	aa02      	add	r2, sp, #8
    ca1e:	4694      	mov	ip, r2
    ca20:	4463      	add	r3, ip
    ca22:	469c      	mov	ip, r3
    ca24:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    ca26:	790b      	ldrb	r3, [r1, #4]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d1e8      	bne.n	c9fe <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    ca2c:	9b02      	ldr	r3, [sp, #8]
    ca2e:	9301      	str	r3, [sp, #4]
    ca30:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    ca32:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    ca34:	0018      	movs	r0, r3
    ca36:	47c0      	blx	r8
    ca38:	e7e1      	b.n	c9fe <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    ca3a:	68eb      	ldr	r3, [r5, #12]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d000      	beq.n	ca42 <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    ca40:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    ca42:	3701      	adds	r7, #1
    ca44:	b2ff      	uxtb	r7, r7
    ca46:	3610      	adds	r6, #16
    ca48:	2f0d      	cmp	r7, #13
    ca4a:	d02c      	beq.n	caa6 <PDS_RestoreAll+0xc6>
    ca4c:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    ca4e:	7934      	ldrb	r4, [r6, #4]
    ca50:	2c00      	cmp	r4, #0
    ca52:	d0f6      	beq.n	ca42 <PDS_RestoreAll+0x62>
    ca54:	6833      	ldr	r3, [r6, #0]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d0f3      	beq.n	ca42 <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    ca5a:	68b3      	ldr	r3, [r6, #8]
    ca5c:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d0ef      	beq.n	ca42 <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    ca62:	2280      	movs	r2, #128	; 0x80
    ca64:	0052      	lsls	r2, r2, #1
    ca66:	2100      	movs	r1, #0
    ca68:	a804      	add	r0, sp, #16
    ca6a:	4b15      	ldr	r3, [pc, #84]	; (cac0 <PDS_RestoreAll+0xe0>)
    ca6c:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    ca6e:	4b15      	ldr	r3, [pc, #84]	; (cac4 <PDS_RestoreAll+0xe4>)
    ca70:	469c      	mov	ip, r3
    ca72:	4464      	add	r4, ip
    ca74:	00e4      	lsls	r4, r4, #3
    ca76:	0021      	movs	r1, r4
    ca78:	4449      	add	r1, r9
    ca7a:	2208      	movs	r2, #8
    ca7c:	a802      	add	r0, sp, #8
    ca7e:	4b0f      	ldr	r3, [pc, #60]	; (cabc <PDS_RestoreAll+0xdc>)
    ca80:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    ca82:	ab02      	add	r3, sp, #8
    ca84:	79da      	ldrb	r2, [r3, #7]
    ca86:	799b      	ldrb	r3, [r3, #6]
    ca88:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    ca8a:	3205      	adds	r2, #5
    ca8c:	a904      	add	r1, sp, #16
    ca8e:	0038      	movs	r0, r7
    ca90:	4b0d      	ldr	r3, [pc, #52]	; (cac8 <PDS_RestoreAll+0xe8>)
    ca92:	4798      	blx	r3
				if (status != PDS_OK)
    ca94:	2800      	cmp	r0, #0
    ca96:	d107      	bne.n	caa8 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    ca98:	7933      	ldrb	r3, [r6, #4]
    ca9a:	2400      	movs	r4, #0
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d0cc      	beq.n	ca3a <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    caa0:	4b06      	ldr	r3, [pc, #24]	; (cabc <PDS_RestoreAll+0xdc>)
    caa2:	4699      	mov	r9, r3
    caa4:	e7b0      	b.n	ca08 <PDS_RestoreAll+0x28>
    caa6:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    caa8:	b045      	add	sp, #276	; 0x114
    caaa:	bc0c      	pop	{r2, r3}
    caac:	4690      	mov	r8, r2
    caae:	4699      	mov	r9, r3
    cab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	20000df8 	.word	0x20000df8
    cab8:	20002780 	.word	0x20002780
    cabc:	00018655 	.word	0x00018655
    cac0:	00018779 	.word	0x00018779
    cac4:	1fffffff 	.word	0x1fffffff
    cac8:	0000d20d 	.word	0x0000d20d

0000cacc <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    cace:	4b14      	ldr	r3, [pc, #80]	; (cb20 <PDS_StoreAll+0x54>)
    cad0:	781b      	ldrb	r3, [r3, #0]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d121      	bne.n	cb1a <PDS_StoreAll+0x4e>
    cad6:	4813      	ldr	r0, [pc, #76]	; (cb24 <PDS_StoreAll+0x58>)
    cad8:	4d13      	ldr	r5, [pc, #76]	; (cb28 <PDS_StoreAll+0x5c>)
    cada:	0007      	movs	r7, r0
    cadc:	37d0      	adds	r7, #208	; 0xd0
    cade:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    cae0:	2401      	movs	r4, #1
    cae2:	e004      	b.n	caee <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    cae4:	702c      	strb	r4, [r5, #0]
    cae6:	3010      	adds	r0, #16
    cae8:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    caea:	4287      	cmp	r7, r0
    caec:	d012      	beq.n	cb14 <PDS_StoreAll+0x48>
    caee:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    caf0:	7903      	ldrb	r3, [r0, #4]
    caf2:	2b00      	cmp	r3, #0
    caf4:	d0f7      	beq.n	cae6 <PDS_StoreAll+0x1a>
    caf6:	6803      	ldr	r3, [r0, #0]
    caf8:	2b00      	cmp	r3, #0
    cafa:	d0f4      	beq.n	cae6 <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    cafc:	6883      	ldr	r3, [r0, #8]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d0f1      	beq.n	cae6 <PDS_StoreAll+0x1a>
    cb02:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    cb04:	6811      	ldr	r1, [r2, #0]
    cb06:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    cb08:	3301      	adds	r3, #1
    cb0a:	b2db      	uxtb	r3, r3
    cb0c:	7911      	ldrb	r1, [r2, #4]
    cb0e:	4299      	cmp	r1, r3
    cb10:	d8f8      	bhi.n	cb04 <PDS_StoreAll+0x38>
    cb12:	e7e7      	b.n	cae4 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    cb14:	2001      	movs	r0, #1
    cb16:	4b05      	ldr	r3, [pc, #20]	; (cb2c <PDS_StoreAll+0x60>)
    cb18:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    cb1a:	2000      	movs	r0, #0
    cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb1e:	46c0      	nop			; (mov r8, r8)
    cb20:	20000df8 	.word	0x20000df8
    cb24:	20002780 	.word	0x20002780
    cb28:	20002770 	.word	0x20002770
    cb2c:	0000cd49 	.word	0x0000cd49

0000cb30 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    cb30:	b084      	sub	sp, #16
    cb32:	b510      	push	{r4, lr}
    cb34:	9103      	str	r1, [sp, #12]
    cb36:	9204      	str	r2, [sp, #16]
    cb38:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    cb3a:	4b0b      	ldr	r3, [pc, #44]	; (cb68 <PDS_RegFile+0x38>)
    cb3c:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    cb3e:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    cb40:	2a00      	cmp	r2, #0
    cb42:	d102      	bne.n	cb4a <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    cb44:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    cb46:	280c      	cmp	r0, #12
    cb48:	d904      	bls.n	cb54 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    cb4a:	0018      	movs	r0, r3
    cb4c:	bc10      	pop	{r4}
    cb4e:	bc08      	pop	{r3}
    cb50:	b004      	add	sp, #16
    cb52:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    cb54:	0100      	lsls	r0, r0, #4
    cb56:	aa03      	add	r2, sp, #12
    cb58:	4b04      	ldr	r3, [pc, #16]	; (cb6c <PDS_RegFile+0x3c>)
    cb5a:	1818      	adds	r0, r3, r0
    cb5c:	ca1a      	ldmia	r2!, {r1, r3, r4}
    cb5e:	c01a      	stmia	r0!, {r1, r3, r4}
    cb60:	6813      	ldr	r3, [r2, #0]
    cb62:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    cb64:	2300      	movs	r3, #0
    cb66:	e7f0      	b.n	cb4a <PDS_RegFile+0x1a>
    cb68:	20000df8 	.word	0x20000df8
    cb6c:	20002780 	.word	0x20002780

0000cb70 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    cb70:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    cb72:	4b09      	ldr	r3, [pc, #36]	; (cb98 <PDS_UnRegFile+0x28>)
    cb74:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    cb76:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    cb78:	2a00      	cmp	r2, #0
    cb7a:	d102      	bne.n	cb82 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    cb7c:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    cb7e:	280c      	cmp	r0, #12
    cb80:	d901      	bls.n	cb86 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    cb82:	0018      	movs	r0, r3
    cb84:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    cb86:	0100      	lsls	r0, r0, #4
    cb88:	4b04      	ldr	r3, [pc, #16]	; (cb9c <PDS_UnRegFile+0x2c>)
    cb8a:	18c0      	adds	r0, r0, r3
    cb8c:	3210      	adds	r2, #16
    cb8e:	2100      	movs	r1, #0
    cb90:	4b03      	ldr	r3, [pc, #12]	; (cba0 <PDS_UnRegFile+0x30>)
    cb92:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    cb94:	2300      	movs	r3, #0
    cb96:	e7f4      	b.n	cb82 <PDS_UnRegFile+0x12>
    cb98:	20000df8 	.word	0x20000df8
    cb9c:	20002780 	.word	0x20002780
    cba0:	00018779 	.word	0x00018779

0000cba4 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    cba4:	b500      	push	{lr}
    cba6:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    cba8:	4668      	mov	r0, sp
    cbaa:	4b0b      	ldr	r3, [pc, #44]	; (cbd8 <pdsNvmInit+0x34>)
    cbac:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    cbae:	2000      	movs	r0, #0
    cbb0:	4b0a      	ldr	r3, [pc, #40]	; (cbdc <pdsNvmInit+0x38>)
    cbb2:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    cbb4:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    cbb6:	2800      	cmp	r0, #0
    cbb8:	d002      	beq.n	cbc0 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    cbba:	0018      	movs	r0, r3
    cbbc:	b005      	add	sp, #20
    cbbe:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    cbc0:	466b      	mov	r3, sp
    cbc2:	899a      	ldrh	r2, [r3, #12]
    cbc4:	0892      	lsrs	r2, r2, #2
    cbc6:	0212      	lsls	r2, r2, #8
    cbc8:	4905      	ldr	r1, [pc, #20]	; (cbe0 <pdsNvmInit+0x3c>)
	return status;
    cbca:	0fd3      	lsrs	r3, r2, #31
    cbcc:	17c8      	asrs	r0, r1, #31
    cbce:	4291      	cmp	r1, r2
    cbd0:	4143      	adcs	r3, r0
    cbd2:	009b      	lsls	r3, r3, #2
    cbd4:	e7f1      	b.n	cbba <pdsNvmInit+0x16>
    cbd6:	46c0      	nop			; (mov r8, r8)
    cbd8:	000032a1 	.word	0x000032a1
    cbdc:	0000e1b9 	.word	0x0000e1b9
    cbe0:	00001fff 	.word	0x00001fff

0000cbe4 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbe6:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    cbe8:	2380      	movs	r3, #128	; 0x80
    cbea:	01db      	lsls	r3, r3, #7
    cbec:	469c      	mov	ip, r3
    cbee:	4460      	add	r0, ip
    cbf0:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    cbf2:	2380      	movs	r3, #128	; 0x80
    cbf4:	005b      	lsls	r3, r3, #1
    cbf6:	429a      	cmp	r2, r3
    cbf8:	d00e      	beq.n	cc18 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    cbfa:	3204      	adds	r2, #4
    cbfc:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    cbfe:	4f1e      	ldr	r7, [pc, #120]	; (cc78 <pdsNvmRead+0x94>)
    cc00:	0033      	movs	r3, r6
    cc02:	0022      	movs	r2, r4
    cc04:	0029      	movs	r1, r5
    cc06:	2000      	movs	r0, #0
    cc08:	47b8      	blx	r7
    cc0a:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    cc0c:	2b05      	cmp	r3, #5
    cc0e:	d0f7      	beq.n	cc00 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    cc10:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    cc12:	2b00      	cmp	r3, #0
    cc14:	d00b      	beq.n	cc2e <pdsNvmRead+0x4a>
}
    cc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    cc18:	001e      	movs	r6, r3
    cc1a:	4f17      	ldr	r7, [pc, #92]	; (cc78 <pdsNvmRead+0x94>)
    cc1c:	0033      	movs	r3, r6
    cc1e:	0022      	movs	r2, r4
    cc20:	0029      	movs	r1, r5
    cc22:	2000      	movs	r0, #0
    cc24:	47b8      	blx	r7
    cc26:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    cc28:	2b05      	cmp	r3, #5
    cc2a:	d0f7      	beq.n	cc1c <pdsNvmRead+0x38>
    cc2c:	e7f0      	b.n	cc10 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    cc2e:	7823      	ldrb	r3, [r4, #0]
    cc30:	7860      	ldrb	r0, [r4, #1]
    cc32:	0200      	lsls	r0, r0, #8
    cc34:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    cc36:	78a6      	ldrb	r6, [r4, #2]
    cc38:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    cc3a:	2e00      	cmp	r6, #0
    cc3c:	d017      	beq.n	cc6e <pdsNvmRead+0x8a>
    cc3e:	0025      	movs	r5, r4
    cc40:	3e01      	subs	r6, #1
    cc42:	b2b6      	uxth	r6, r6
    cc44:	3601      	adds	r6, #1
    cc46:	19a4      	adds	r4, r4, r6
    cc48:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    cc4a:	782b      	ldrb	r3, [r5, #0]
    cc4c:	4073      	eors	r3, r6
    cc4e:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    cc50:	010b      	lsls	r3, r1, #4
    cc52:	404b      	eors	r3, r1
    cc54:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    cc56:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    cc58:	091b      	lsrs	r3, r3, #4
    cc5a:	00d1      	lsls	r1, r2, #3
    cc5c:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    cc5e:	0212      	lsls	r2, r2, #8
    cc60:	0a36      	lsrs	r6, r6, #8
    cc62:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    cc64:	4053      	eors	r3, r2
    cc66:	b29e      	uxth	r6, r3
    cc68:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    cc6a:	42a5      	cmp	r5, r4
    cc6c:	d1ed      	bne.n	cc4a <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    cc6e:	1b80      	subs	r0, r0, r6
    cc70:	1e46      	subs	r6, r0, #1
    cc72:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    cc74:	b2c0      	uxtb	r0, r0
    cc76:	e7ce      	b.n	cc16 <pdsNvmRead+0x32>
    cc78:	0000e049 	.word	0x0000e049

0000cc7c <pdsNvmWrite>:
{
    cc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc7e:	46c6      	mov	lr, r8
    cc80:	b500      	push	{lr}
    cc82:	4680      	mov	r8, r0
    cc84:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    cc86:	2301      	movs	r3, #1
    cc88:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    cc8a:	708a      	strb	r2, [r1, #2]
    cc8c:	27ff      	movs	r7, #255	; 0xff
    cc8e:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    cc90:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    cc92:	2f00      	cmp	r7, #0
    cc94:	d017      	beq.n	ccc6 <pdsNvmWrite+0x4a>
    cc96:	0030      	movs	r0, r6
    cc98:	3f01      	subs	r7, #1
    cc9a:	b2bf      	uxth	r7, r7
    cc9c:	3701      	adds	r7, #1
    cc9e:	19f6      	adds	r6, r6, r7
    cca0:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    cca2:	7803      	ldrb	r3, [r0, #0]
    cca4:	407b      	eors	r3, r7
    cca6:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    cca8:	010b      	lsls	r3, r1, #4
    ccaa:	404b      	eors	r3, r1
    ccac:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    ccae:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    ccb0:	091b      	lsrs	r3, r3, #4
    ccb2:	00cd      	lsls	r5, r1, #3
    ccb4:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    ccb6:	0209      	lsls	r1, r1, #8
    ccb8:	0a3f      	lsrs	r7, r7, #8
    ccba:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    ccbc:	404b      	eors	r3, r1
    ccbe:	b29f      	uxth	r7, r3
    ccc0:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    ccc2:	42b0      	cmp	r0, r6
    ccc4:	d1ed      	bne.n	cca2 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    ccc6:	7027      	strb	r7, [r4, #0]
    ccc8:	0a3f      	lsrs	r7, r7, #8
    ccca:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    cccc:	3204      	adds	r2, #4
    ccce:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    ccd0:	2180      	movs	r1, #128	; 0x80
    ccd2:	01c9      	lsls	r1, r1, #7
    ccd4:	4441      	add	r1, r8
    ccd6:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    ccd8:	0033      	movs	r3, r6
    ccda:	0022      	movs	r2, r4
    ccdc:	2000      	movs	r0, #0
    ccde:	4f08      	ldr	r7, [pc, #32]	; (cd00 <pdsNvmWrite+0x84>)
    cce0:	47b8      	blx	r7
		return PDS_ERROR;
    cce2:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    cce4:	2800      	cmp	r0, #0
    cce6:	d003      	beq.n	ccf0 <pdsNvmWrite+0x74>
}
    cce8:	0018      	movs	r0, r3
    ccea:	bc04      	pop	{r2}
    ccec:	4690      	mov	r8, r2
    ccee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    ccf0:	0032      	movs	r2, r6
    ccf2:	0021      	movs	r1, r4
    ccf4:	4640      	mov	r0, r8
    ccf6:	4b03      	ldr	r3, [pc, #12]	; (cd04 <pdsNvmWrite+0x88>)
    ccf8:	4798      	blx	r3
    ccfa:	0003      	movs	r3, r0
	return status;
    ccfc:	e7f4      	b.n	cce8 <pdsNvmWrite+0x6c>
    ccfe:	46c0      	nop			; (mov r8, r8)
    cd00:	0000e0a5 	.word	0x0000e0a5
    cd04:	0000cbe5 	.word	0x0000cbe5

0000cd08 <pdsNvmErase>:
{
    cd08:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    cd0a:	2380      	movs	r3, #128	; 0x80
    cd0c:	01db      	lsls	r3, r3, #7
    cd0e:	18c4      	adds	r4, r0, r3
    cd10:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    cd12:	4d05      	ldr	r5, [pc, #20]	; (cd28 <pdsNvmErase+0x20>)
    cd14:	0020      	movs	r0, r4
    cd16:	47a8      	blx	r5
    cd18:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    cd1a:	0003      	movs	r3, r0
    cd1c:	330a      	adds	r3, #10
    cd1e:	d0f9      	beq.n	cd14 <pdsNvmErase+0xc>
	return status;
    cd20:	1e43      	subs	r3, r0, #1
    cd22:	4198      	sbcs	r0, r3
    cd24:	0040      	lsls	r0, r0, #1
}
    cd26:	bd70      	pop	{r4, r5, r6, pc}
    cd28:	000031f9 	.word	0x000031f9

0000cd2c <pdsNvmEraseAll>:
{
    cd2c:	b570      	push	{r4, r5, r6, lr}
    cd2e:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    cd30:	4d04      	ldr	r5, [pc, #16]	; (cd44 <pdsNvmEraseAll+0x18>)
    cd32:	b2a0      	uxth	r0, r4
    cd34:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    cd36:	2800      	cmp	r0, #0
    cd38:	d102      	bne.n	cd40 <pdsNvmEraseAll+0x14>
    cd3a:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    cd3c:	2c20      	cmp	r4, #32
    cd3e:	d1f8      	bne.n	cd32 <pdsNvmEraseAll+0x6>
}
    cd40:	bd70      	pop	{r4, r5, r6, pc}
    cd42:	46c0      	nop			; (mov r8, r8)
    cd44:	0000cd09 	.word	0x0000cd09

0000cd48 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    cd48:	b510      	push	{r4, lr}
    cd4a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    cd4c:	4b05      	ldr	r3, [pc, #20]	; (cd64 <pdsPostTask+0x1c>)
    cd4e:	4798      	blx	r3
    pdsTaskFlags |= id;
    cd50:	4b05      	ldr	r3, [pc, #20]	; (cd68 <pdsPostTask+0x20>)
    cd52:	7818      	ldrb	r0, [r3, #0]
    cd54:	4320      	orrs	r0, r4
    cd56:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    cd58:	4b04      	ldr	r3, [pc, #16]	; (cd6c <pdsPostTask+0x24>)
    cd5a:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    cd5c:	2008      	movs	r0, #8
    cd5e:	4b04      	ldr	r3, [pc, #16]	; (cd70 <pdsPostTask+0x28>)
    cd60:	4798      	blx	r3
}
    cd62:	bd10      	pop	{r4, pc}
    cd64:	000066e1 	.word	0x000066e1
    cd68:	20000df9 	.word	0x20000df9
    cd6c:	000066ed 	.word	0x000066ed
    cd70:	0000dc11 	.word	0x0000dc11

0000cd74 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd76:	46de      	mov	lr, fp
    cd78:	4657      	mov	r7, sl
    cd7a:	464e      	mov	r6, r9
    cd7c:	4645      	mov	r5, r8
    cd7e:	b5e0      	push	{r5, r6, r7, lr}
    cd80:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    cd82:	2280      	movs	r2, #128	; 0x80
    cd84:	0052      	lsls	r2, r2, #1
    cd86:	2100      	movs	r1, #0
    cd88:	a804      	add	r0, sp, #16
    cd8a:	4b54      	ldr	r3, [pc, #336]	; (cedc <pdsStoreDeleteHandler+0x168>)
    cd8c:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    cd8e:	4b54      	ldr	r3, [pc, #336]	; (cee0 <pdsStoreDeleteHandler+0x16c>)
    cd90:	781b      	ldrb	r3, [r3, #0]
    cd92:	2b00      	cmp	r3, #0
    cd94:	d112      	bne.n	cdbc <pdsStoreDeleteHandler+0x48>
    cd96:	2401      	movs	r4, #1
    cd98:	4a51      	ldr	r2, [pc, #324]	; (cee0 <pdsStoreDeleteHandler+0x16c>)
    cd9a:	9400      	str	r4, [sp, #0]
    cd9c:	5d13      	ldrb	r3, [r2, r4]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d10f      	bne.n	cdc2 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    cda2:	3401      	adds	r4, #1
    cda4:	b2e4      	uxtb	r4, r4
    cda6:	2c0c      	cmp	r4, #12
    cda8:	d9f7      	bls.n	cd9a <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    cdaa:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    cdac:	0028      	movs	r0, r5
    cdae:	b045      	add	sp, #276	; 0x114
    cdb0:	bc3c      	pop	{r2, r3, r4, r5}
    cdb2:	4690      	mov	r8, r2
    cdb4:	4699      	mov	r9, r3
    cdb6:	46a2      	mov	sl, r4
    cdb8:	46ab      	mov	fp, r5
    cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    cdbc:	2300      	movs	r3, #0
    cdbe:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    cdc0:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    cdc2:	9b00      	ldr	r3, [sp, #0]
    cdc4:	011a      	lsls	r2, r3, #4
    cdc6:	4b47      	ldr	r3, [pc, #284]	; (cee4 <pdsStoreDeleteHandler+0x170>)
    cdc8:	189b      	adds	r3, r3, r2
    cdca:	7919      	ldrb	r1, [r3, #4]
    cdcc:	4a46      	ldr	r2, [pc, #280]	; (cee8 <pdsStoreDeleteHandler+0x174>)
    cdce:	4694      	mov	ip, r2
    cdd0:	4461      	add	r1, ip
    cdd2:	00c9      	lsls	r1, r1, #3
    cdd4:	689b      	ldr	r3, [r3, #8]
    cdd6:	1859      	adds	r1, r3, r1
    cdd8:	2208      	movs	r2, #8
    cdda:	a802      	add	r0, sp, #8
    cddc:	4b43      	ldr	r3, [pc, #268]	; (ceec <pdsStoreDeleteHandler+0x178>)
    cdde:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    cde0:	ab02      	add	r3, sp, #8
    cde2:	79da      	ldrb	r2, [r3, #7]
    cde4:	799b      	ldrb	r3, [r3, #6]
    cde6:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    cde8:	3205      	adds	r2, #5
    cdea:	a904      	add	r1, sp, #16
    cdec:	0020      	movs	r0, r4
    cdee:	4b40      	ldr	r3, [pc, #256]	; (cef0 <pdsStoreDeleteHandler+0x17c>)
    cdf0:	4798      	blx	r3
    cdf2:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    cdf4:	d111      	bne.n	ce1a <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    cdf6:	9b00      	ldr	r3, [sp, #0]
    cdf8:	011a      	lsls	r2, r3, #4
    cdfa:	4b3a      	ldr	r3, [pc, #232]	; (cee4 <pdsStoreDeleteHandler+0x170>)
    cdfc:	189b      	adds	r3, r3, r2
    cdfe:	791b      	ldrb	r3, [r3, #4]
    ce00:	2500      	movs	r5, #0
    ce02:	2b00      	cmp	r3, #0
    ce04:	d04a      	beq.n	ce9c <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    ce06:	4b37      	ldr	r3, [pc, #220]	; (cee4 <pdsStoreDeleteHandler+0x170>)
    ce08:	4699      	mov	r9, r3
    ce0a:	9b00      	ldr	r3, [sp, #0]
    ce0c:	011e      	lsls	r6, r3, #4
    ce0e:	46b3      	mov	fp, r6
    ce10:	44cb      	add	fp, r9
    ce12:	4b36      	ldr	r3, [pc, #216]	; (ceec <pdsStoreDeleteHandler+0x178>)
    ce14:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    ce16:	465f      	mov	r7, fp
    ce18:	e01b      	b.n	ce52 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    ce1a:	2803      	cmp	r0, #3
    ce1c:	d144      	bne.n	cea8 <pdsStoreDeleteHandler+0x134>
    ce1e:	e7ea      	b.n	cdf6 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    ce20:	2100      	movs	r1, #0
    ce22:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    ce24:	ab02      	add	r3, sp, #8
    ce26:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    ce28:	795b      	ldrb	r3, [r3, #5]
    ce2a:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    ce2c:	23a5      	movs	r3, #165	; 0xa5
    ce2e:	7003      	strb	r3, [r0, #0]
    ce30:	2301      	movs	r3, #1
    ce32:	7043      	strb	r3, [r0, #1]
    ce34:	7082      	strb	r2, [r0, #2]
    ce36:	4643      	mov	r3, r8
    ce38:	70c3      	strb	r3, [r0, #3]
    ce3a:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    ce3c:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    ce3e:	9b02      	ldr	r3, [sp, #8]
    ce40:	9301      	str	r3, [sp, #4]
    ce42:	0019      	movs	r1, r3
    ce44:	4b29      	ldr	r3, [pc, #164]	; (ceec <pdsStoreDeleteHandler+0x178>)
    ce46:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    ce48:	3501      	adds	r5, #1
    ce4a:	b2ed      	uxtb	r5, r5
    ce4c:	793b      	ldrb	r3, [r7, #4]
    ce4e:	42ab      	cmp	r3, r5
    ce50:	d924      	bls.n	ce9c <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    ce52:	00e9      	lsls	r1, r5, #3
    ce54:	465b      	mov	r3, fp
    ce56:	689b      	ldr	r3, [r3, #8]
    ce58:	469c      	mov	ip, r3
    ce5a:	4461      	add	r1, ip
    ce5c:	2208      	movs	r2, #8
    ce5e:	a802      	add	r0, sp, #8
    ce60:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    ce62:	ab02      	add	r3, sp, #8
    ce64:	79d8      	ldrb	r0, [r3, #7]
    ce66:	2315      	movs	r3, #21
    ce68:	aa02      	add	r2, sp, #8
    ce6a:	4694      	mov	ip, r2
    ce6c:	4463      	add	r3, ip
    ce6e:	469c      	mov	ip, r3
    ce70:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    ce72:	464b      	mov	r3, r9
    ce74:	58f3      	ldr	r3, [r6, r3]
    ce76:	195b      	adds	r3, r3, r5
    ce78:	781a      	ldrb	r2, [r3, #0]
    ce7a:	2a01      	cmp	r2, #1
    ce7c:	d0d0      	beq.n	ce20 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    ce7e:	2a02      	cmp	r2, #2
    ce80:	d1e2      	bne.n	ce48 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    ce82:	2200      	movs	r2, #0
    ce84:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    ce86:	ab02      	add	r3, sp, #8
    ce88:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    ce8a:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    ce8c:	23a5      	movs	r3, #165	; 0xa5
    ce8e:	7003      	strb	r3, [r0, #0]
    ce90:	3ba4      	subs	r3, #164	; 0xa4
    ce92:	7043      	strb	r3, [r0, #1]
    ce94:	7081      	strb	r1, [r0, #2]
    ce96:	70c2      	strb	r2, [r0, #3]
    ce98:	7103      	strb	r3, [r0, #4]
    ce9a:	e7d5      	b.n	ce48 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    ce9c:	22f3      	movs	r2, #243	; 0xf3
    ce9e:	a904      	add	r1, sp, #16
    cea0:	0020      	movs	r0, r4
    cea2:	4b14      	ldr	r3, [pc, #80]	; (cef4 <pdsStoreDeleteHandler+0x180>)
    cea4:	4798      	blx	r3
    cea6:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    cea8:	2200      	movs	r2, #0
    ceaa:	4b0d      	ldr	r3, [pc, #52]	; (cee0 <pdsStoreDeleteHandler+0x16c>)
    ceac:	9900      	ldr	r1, [sp, #0]
    ceae:	545a      	strb	r2, [r3, r1]
			fileId++;
    ceb0:	3401      	adds	r4, #1
    ceb2:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    ceb4:	2b0c      	cmp	r3, #12
    ceb6:	d900      	bls.n	ceba <pdsStoreDeleteHandler+0x146>
    ceb8:	e778      	b.n	cdac <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    ceba:	4a09      	ldr	r2, [pc, #36]	; (cee0 <pdsStoreDeleteHandler+0x16c>)
    cebc:	5cd2      	ldrb	r2, [r2, r3]
    cebe:	2a00      	cmp	r2, #0
    cec0:	d108      	bne.n	ced4 <pdsStoreDeleteHandler+0x160>
    cec2:	4907      	ldr	r1, [pc, #28]	; (cee0 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    cec4:	3301      	adds	r3, #1
    cec6:	b2db      	uxtb	r3, r3
    cec8:	2b0c      	cmp	r3, #12
    ceca:	d900      	bls.n	cece <pdsStoreDeleteHandler+0x15a>
    cecc:	e76e      	b.n	cdac <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    cece:	5cca      	ldrb	r2, [r1, r3]
    ced0:	2a00      	cmp	r2, #0
    ced2:	d0f7      	beq.n	cec4 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    ced4:	2001      	movs	r0, #1
    ced6:	4b08      	ldr	r3, [pc, #32]	; (cef8 <pdsStoreDeleteHandler+0x184>)
    ced8:	4798      	blx	r3
			break;
    ceda:	e767      	b.n	cdac <pdsStoreDeleteHandler+0x38>
    cedc:	00018779 	.word	0x00018779
    cee0:	20002770 	.word	0x20002770
    cee4:	20002780 	.word	0x20002780
    cee8:	1fffffff 	.word	0x1fffffff
    ceec:	00018655 	.word	0x00018655
    cef0:	0000d20d 	.word	0x0000d20d
    cef4:	0000d11d 	.word	0x0000d11d
    cef8:	0000cd49 	.word	0x0000cd49

0000cefc <PDS_TaskHandler>:
{
    cefc:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    cefe:	4b0e      	ldr	r3, [pc, #56]	; (cf38 <PDS_TaskHandler+0x3c>)
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d003      	beq.n	cf0e <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    cf06:	4b0c      	ldr	r3, [pc, #48]	; (cf38 <PDS_TaskHandler+0x3c>)
    cf08:	781b      	ldrb	r3, [r3, #0]
    cf0a:	07db      	lsls	r3, r3, #31
    cf0c:	d401      	bmi.n	cf12 <PDS_TaskHandler+0x16>
}
    cf0e:	2000      	movs	r0, #0
    cf10:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    cf12:	4b0a      	ldr	r3, [pc, #40]	; (cf3c <PDS_TaskHandler+0x40>)
    cf14:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    cf16:	4c08      	ldr	r4, [pc, #32]	; (cf38 <PDS_TaskHandler+0x3c>)
    cf18:	7823      	ldrb	r3, [r4, #0]
    cf1a:	2201      	movs	r2, #1
    cf1c:	4393      	bics	r3, r2
    cf1e:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    cf20:	4b07      	ldr	r3, [pc, #28]	; (cf40 <PDS_TaskHandler+0x44>)
    cf22:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    cf24:	4b07      	ldr	r3, [pc, #28]	; (cf44 <PDS_TaskHandler+0x48>)
    cf26:	4798      	blx	r3
				if (pdsTaskFlags)
    cf28:	7823      	ldrb	r3, [r4, #0]
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d0ef      	beq.n	cf0e <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    cf2e:	2008      	movs	r0, #8
    cf30:	4b05      	ldr	r3, [pc, #20]	; (cf48 <PDS_TaskHandler+0x4c>)
    cf32:	4798      	blx	r3
    cf34:	e7eb      	b.n	cf0e <PDS_TaskHandler+0x12>
    cf36:	46c0      	nop			; (mov r8, r8)
    cf38:	20000df9 	.word	0x20000df9
    cf3c:	000066e1 	.word	0x000066e1
    cf40:	000066ed 	.word	0x000066ed
    cf44:	0000cd75 	.word	0x0000cd75
    cf48:	0000dc11 	.word	0x0000dc11

0000cf4c <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    cf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf4e:	4e12      	ldr	r6, [pc, #72]	; (cf98 <pdsUpdateRowMap+0x4c>)
    cf50:	0037      	movs	r7, r6
    cf52:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    cf54:	4d11      	ldr	r5, [pc, #68]	; (cf9c <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    cf56:	4b12      	ldr	r3, [pc, #72]	; (cfa0 <pdsUpdateRowMap+0x54>)
    cf58:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    cf5a:	2101      	movs	r1, #1
    cf5c:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    cf5e:	0018      	movs	r0, r3
    cf60:	e002      	b.n	cf68 <pdsUpdateRowMap+0x1c>
    cf62:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    cf64:	42be      	cmp	r6, r7
    cf66:	d015      	beq.n	cf94 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    cf68:	8833      	ldrh	r3, [r6, #0]
    cf6a:	42ab      	cmp	r3, r5
    cf6c:	d0f9      	beq.n	cf62 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    cf6e:	00db      	lsls	r3, r3, #3
    cf70:	4463      	add	r3, ip
    cf72:	001a      	movs	r2, r3
    cf74:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    cf76:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    cf78:	42ab      	cmp	r3, r5
    cf7a:	d0f2      	beq.n	cf62 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    cf7c:	001a      	movs	r2, r3
    cf7e:	00db      	lsls	r3, r3, #3
    cf80:	18c3      	adds	r3, r0, r3
    cf82:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    cf84:	00d2      	lsls	r2, r2, #3
    cf86:	1884      	adds	r4, r0, r2
    cf88:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    cf8a:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    cf8c:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    cf8e:	42ab      	cmp	r3, r5
    cf90:	d1f4      	bne.n	cf7c <pdsUpdateRowMap+0x30>
    cf92:	e7e6      	b.n	cf62 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf96:	46c0      	nop			; (mov r8, r8)
    cf98:	20000dfc 	.word	0x20000dfc
    cf9c:	0000ffff 	.word	0x0000ffff
    cfa0:	20000e18 	.word	0x20000e18

0000cfa4 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    cfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfa6:	46c6      	mov	lr, r8
    cfa8:	b500      	push	{lr}
    cfaa:	b082      	sub	sp, #8
    cfac:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    cfae:	8881      	ldrh	r1, [r0, #4]
    cfb0:	004a      	lsls	r2, r1, #1
    cfb2:	4b2c      	ldr	r3, [pc, #176]	; (d064 <pdsUpdateFileMap+0xc0>)
    cfb4:	5ad3      	ldrh	r3, [r2, r3]
    cfb6:	4a2c      	ldr	r2, [pc, #176]	; (d068 <pdsUpdateFileMap+0xc4>)
    cfb8:	4293      	cmp	r3, r2
    cfba:	d02c      	beq.n	d016 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    cfbc:	4a2b      	ldr	r2, [pc, #172]	; (d06c <pdsUpdateFileMap+0xc8>)
    cfbe:	00d8      	lsls	r0, r3, #3
    cfc0:	5880      	ldr	r0, [r0, r2]
    cfc2:	4664      	mov	r4, ip
    cfc4:	88e4      	ldrh	r4, [r4, #6]
    cfc6:	46a0      	mov	r8, r4
    cfc8:	00e4      	lsls	r4, r4, #3
    cfca:	58a6      	ldr	r6, [r4, r2]
    cfcc:	42b0      	cmp	r0, r6
    cfce:	d327      	bcc.n	d020 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    cfd0:	d02f      	beq.n	d032 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    cfd2:	4a26      	ldr	r2, [pc, #152]	; (d06c <pdsUpdateFileMap+0xc8>)
    cfd4:	00dd      	lsls	r5, r3, #3
    cfd6:	3506      	adds	r5, #6
    cfd8:	1950      	adds	r0, r2, r5
    cfda:	9001      	str	r0, [sp, #4]
    cfdc:	00db      	lsls	r3, r3, #3
    cfde:	18d3      	adds	r3, r2, r3
    cfe0:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    cfe2:	4b21      	ldr	r3, [pc, #132]	; (d068 <pdsUpdateFileMap+0xc4>)
    cfe4:	429a      	cmp	r2, r3
    cfe6:	d028      	beq.n	d03a <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    cfe8:	0013      	movs	r3, r2
    cfea:	00d0      	lsls	r0, r2, #3
    cfec:	4c1f      	ldr	r4, [pc, #124]	; (d06c <pdsUpdateFileMap+0xc8>)
    cfee:	5900      	ldr	r0, [r0, r4]
    cff0:	4286      	cmp	r6, r0
    cff2:	d226      	bcs.n	d042 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    cff4:	4c1d      	ldr	r4, [pc, #116]	; (d06c <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    cff6:	4f1c      	ldr	r7, [pc, #112]	; (d068 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    cff8:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    cffa:	00db      	lsls	r3, r3, #3
    cffc:	1d99      	adds	r1, r3, #6
    cffe:	1861      	adds	r1, r4, r1
    d000:	18e3      	adds	r3, r4, r3
    d002:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    d004:	42ba      	cmp	r2, r7
    d006:	d019      	beq.n	d03c <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    d008:	0013      	movs	r3, r2
    d00a:	00d5      	lsls	r5, r2, #3
    d00c:	582d      	ldr	r5, [r5, r0]
    d00e:	42ae      	cmp	r6, r5
    d010:	d21b      	bcs.n	d04a <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    d012:	9101      	str	r1, [sp, #4]
    d014:	e7f1      	b.n	cffa <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    d016:	88c2      	ldrh	r2, [r0, #6]
    d018:	0049      	lsls	r1, r1, #1
    d01a:	4b12      	ldr	r3, [pc, #72]	; (d064 <pdsUpdateFileMap+0xc0>)
    d01c:	52ca      	strh	r2, [r1, r3]
    d01e:	e008      	b.n	d032 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    d020:	4a12      	ldr	r2, [pc, #72]	; (d06c <pdsUpdateFileMap+0xc8>)
    d022:	1912      	adds	r2, r2, r4
    d024:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    d026:	4663      	mov	r3, ip
    d028:	88d9      	ldrh	r1, [r3, #6]
    d02a:	889b      	ldrh	r3, [r3, #4]
    d02c:	005b      	lsls	r3, r3, #1
    d02e:	4a0d      	ldr	r2, [pc, #52]	; (d064 <pdsUpdateFileMap+0xc0>)
    d030:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    d032:	b002      	add	sp, #8
    d034:	bc04      	pop	{r2}
    d036:	4690      	mov	r8, r2
    d038:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    d03a:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    d03c:	4643      	mov	r3, r8
    d03e:	800b      	strh	r3, [r1, #0]
				break;
    d040:	e7f7      	b.n	d032 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    d042:	0049      	lsls	r1, r1, #1
    d044:	4d07      	ldr	r5, [pc, #28]	; (d064 <pdsUpdateFileMap+0xc0>)
    d046:	186b      	adds	r3, r5, r1
    d048:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    d04a:	4908      	ldr	r1, [pc, #32]	; (d06c <pdsUpdateFileMap+0xc8>)
    d04c:	9b01      	ldr	r3, [sp, #4]
    d04e:	881b      	ldrh	r3, [r3, #0]
    d050:	00db      	lsls	r3, r3, #3
    d052:	18cb      	adds	r3, r1, r3
    d054:	4640      	mov	r0, r8
    d056:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    d058:	4663      	mov	r3, ip
    d05a:	88db      	ldrh	r3, [r3, #6]
    d05c:	00db      	lsls	r3, r3, #3
    d05e:	18c9      	adds	r1, r1, r3
    d060:	80ca      	strh	r2, [r1, #6]
				break;
    d062:	e7e6      	b.n	d032 <pdsUpdateFileMap+0x8e>
    d064:	20000dfc 	.word	0x20000dfc
    d068:	0000ffff 	.word	0x0000ffff
    d06c:	20000e18 	.word	0x20000e18

0000d070 <pdsWlInit>:
{
    d070:	b5f0      	push	{r4, r5, r6, r7, lr}
    d072:	46c6      	mov	lr, r8
    d074:	b500      	push	{lr}
    d076:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    d078:	4b21      	ldr	r3, [pc, #132]	; (d100 <pdsWlInit+0x90>)
    d07a:	4798      	blx	r3
    d07c:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    d07e:	2800      	cmp	r0, #0
    d080:	d004      	beq.n	d08c <pdsWlInit+0x1c>
}
    d082:	9801      	ldr	r0, [sp, #4]
    d084:	b044      	add	sp, #272	; 0x110
    d086:	bc04      	pop	{r2}
    d088:	4690      	mov	r8, r2
    d08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    d08c:	2680      	movs	r6, #128	; 0x80
    d08e:	0076      	lsls	r6, r6, #1
    d090:	4d1c      	ldr	r5, [pc, #112]	; (d104 <pdsWlInit+0x94>)
    d092:	0032      	movs	r2, r6
    d094:	21ff      	movs	r1, #255	; 0xff
    d096:	0028      	movs	r0, r5
    d098:	4c1b      	ldr	r4, [pc, #108]	; (d108 <pdsWlInit+0x98>)
    d09a:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    d09c:	221a      	movs	r2, #26
    d09e:	21ff      	movs	r1, #255	; 0xff
    d0a0:	481a      	ldr	r0, [pc, #104]	; (d10c <pdsWlInit+0x9c>)
    d0a2:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    d0a4:	0032      	movs	r2, r6
    d0a6:	2100      	movs	r1, #0
    d0a8:	a804      	add	r0, sp, #16
    d0aa:	47a0      	blx	r4
    d0ac:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    d0ae:	4e18      	ldr	r6, [pc, #96]	; (d110 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    d0b0:	4b18      	ldr	r3, [pc, #96]	; (d114 <pdsWlInit+0xa4>)
    d0b2:	4698      	mov	r8, r3
    d0b4:	e003      	b.n	d0be <pdsWlInit+0x4e>
    d0b6:	3401      	adds	r4, #1
    d0b8:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    d0ba:	2c20      	cmp	r4, #32
    d0bc:	d01d      	beq.n	d0fa <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    d0be:	b2a7      	uxth	r7, r4
    d0c0:	2280      	movs	r2, #128	; 0x80
    d0c2:	0052      	lsls	r2, r2, #1
    d0c4:	a904      	add	r1, sp, #16
    d0c6:	0038      	movs	r0, r7
    d0c8:	47b0      	blx	r6
		if (PDS_OK == status)
    d0ca:	2800      	cmp	r0, #0
    d0cc:	d1f3      	bne.n	d0b6 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    d0ce:	a904      	add	r1, sp, #16
    d0d0:	9b06      	ldr	r3, [sp, #24]
    d0d2:	0a1b      	lsrs	r3, r3, #8
    d0d4:	7b0a      	ldrb	r2, [r1, #12]
    d0d6:	0612      	lsls	r2, r2, #24
    d0d8:	431a      	orrs	r2, r3
    d0da:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    d0dc:	79c8      	ldrb	r0, [r1, #7]
    d0de:	7a0b      	ldrb	r3, [r1, #8]
    d0e0:	021b      	lsls	r3, r3, #8
    d0e2:	4303      	orrs	r3, r0
    d0e4:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    d0e6:	2101      	movs	r1, #1
    d0e8:	4249      	negs	r1, r1
    d0ea:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    d0ec:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    d0ee:	aa02      	add	r2, sp, #8
    d0f0:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    d0f2:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    d0f4:	0010      	movs	r0, r2
    d0f6:	47c0      	blx	r8
    d0f8:	e7dd      	b.n	d0b6 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    d0fa:	4b07      	ldr	r3, [pc, #28]	; (d118 <pdsWlInit+0xa8>)
    d0fc:	4798      	blx	r3
	return PDS_OK;
    d0fe:	e7c0      	b.n	d082 <pdsWlInit+0x12>
    d100:	0000cba5 	.word	0x0000cba5
    d104:	20000e18 	.word	0x20000e18
    d108:	00018779 	.word	0x00018779
    d10c:	20000dfc 	.word	0x20000dfc
    d110:	0000cbe5 	.word	0x0000cbe5
    d114:	0000cfa5 	.word	0x0000cfa5
    d118:	0000cf4d 	.word	0x0000cf4d

0000d11c <pdsWlWrite>:
{
    d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d11e:	46ce      	mov	lr, r9
    d120:	4647      	mov	r7, r8
    d122:	b580      	push	{r7, lr}
    d124:	b083      	sub	sp, #12
    d126:	0005      	movs	r5, r0
    d128:	000f      	movs	r7, r1
    d12a:	4690      	mov	r8, r2
    d12c:	4e32      	ldr	r6, [pc, #200]	; (d1f8 <pdsWlWrite+0xdc>)
    d12e:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    d130:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    d132:	4832      	ldr	r0, [pc, #200]	; (d1fc <pdsWlWrite+0xe0>)
    d134:	e004      	b.n	d140 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    d136:	3401      	adds	r4, #1
    d138:	b2e4      	uxtb	r4, r4
    d13a:	3308      	adds	r3, #8
    d13c:	2c20      	cmp	r4, #32
    d13e:	d055      	beq.n	d1ec <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    d140:	6819      	ldr	r1, [r3, #0]
    d142:	3101      	adds	r1, #1
    d144:	d1f7      	bne.n	d136 <pdsWlWrite+0x1a>
    d146:	88d9      	ldrh	r1, [r3, #6]
    d148:	4281      	cmp	r1, r0
    d14a:	d1f4      	bne.n	d136 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    d14c:	889a      	ldrh	r2, [r3, #4]
    d14e:	4282      	cmp	r2, r0
    d150:	d1f1      	bne.n	d136 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    d152:	b2a3      	uxth	r3, r4
    d154:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    d156:	7a7e      	ldrb	r6, [r7, #9]
    d158:	7abb      	ldrb	r3, [r7, #10]
    d15a:	021b      	lsls	r3, r3, #8
    d15c:	4333      	orrs	r3, r6
    d15e:	7afe      	ldrb	r6, [r7, #11]
    d160:	0436      	lsls	r6, r6, #16
    d162:	4333      	orrs	r3, r6
    d164:	7b3e      	ldrb	r6, [r7, #12]
    d166:	0636      	lsls	r6, r6, #24
    d168:	431e      	orrs	r6, r3
    d16a:	3601      	adds	r6, #1
    d16c:	727e      	strb	r6, [r7, #9]
    d16e:	0a32      	lsrs	r2, r6, #8
    d170:	72ba      	strb	r2, [r7, #10]
    d172:	0c32      	lsrs	r2, r6, #16
    d174:	72fa      	strb	r2, [r7, #11]
    d176:	0e32      	lsrs	r2, r6, #24
    d178:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    d17a:	b2ad      	uxth	r5, r5
    d17c:	71fd      	strb	r5, [r7, #7]
    d17e:	2200      	movs	r2, #0
    d180:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    d182:	23a5      	movs	r3, #165	; 0xa5
    d184:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    d186:	3ba4      	subs	r3, #164	; 0xa4
    d188:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    d18a:	4643      	mov	r3, r8
    d18c:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    d18e:	4642      	mov	r2, r8
    d190:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    d192:	b292      	uxth	r2, r2
    d194:	0039      	movs	r1, r7
    d196:	4648      	mov	r0, r9
    d198:	4b19      	ldr	r3, [pc, #100]	; (d200 <pdsWlWrite+0xe4>)
    d19a:	4798      	blx	r3
    d19c:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    d19e:	d014      	beq.n	d1ca <pdsWlWrite+0xae>
}
    d1a0:	0038      	movs	r0, r7
    d1a2:	b003      	add	sp, #12
    d1a4:	bc0c      	pop	{r2, r3}
    d1a6:	4690      	mov	r8, r2
    d1a8:	4699      	mov	r9, r3
    d1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    d1ac:	3401      	adds	r4, #1
    d1ae:	b2e4      	uxtb	r4, r4
    d1b0:	3608      	adds	r6, #8
    d1b2:	2c20      	cmp	r4, #32
    d1b4:	d0cd      	beq.n	d152 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    d1b6:	6832      	ldr	r2, [r6, #0]
    d1b8:	3201      	adds	r2, #1
    d1ba:	d1f7      	bne.n	d1ac <pdsWlWrite+0x90>
    d1bc:	88f2      	ldrh	r2, [r6, #6]
    d1be:	428a      	cmp	r2, r1
    d1c0:	d1f4      	bne.n	d1ac <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    d1c2:	88b3      	ldrh	r3, [r6, #4]
    d1c4:	428b      	cmp	r3, r1
    d1c6:	d1f1      	bne.n	d1ac <pdsWlWrite+0x90>
    d1c8:	e7c3      	b.n	d152 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    d1ca:	4b0b      	ldr	r3, [pc, #44]	; (d1f8 <pdsWlWrite+0xdc>)
    d1cc:	00e4      	lsls	r4, r4, #3
    d1ce:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    d1d0:	191c      	adds	r4, r3, r4
    d1d2:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    d1d4:	2301      	movs	r3, #1
    d1d6:	425b      	negs	r3, r3
    d1d8:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    d1da:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    d1dc:	466b      	mov	r3, sp
    d1de:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    d1e0:	464a      	mov	r2, r9
    d1e2:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    d1e4:	4668      	mov	r0, sp
    d1e6:	4b07      	ldr	r3, [pc, #28]	; (d204 <pdsWlWrite+0xe8>)
    d1e8:	4798      	blx	r3
	return status;
    d1ea:	e7d9      	b.n	d1a0 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    d1ec:	4b06      	ldr	r3, [pc, #24]	; (d208 <pdsWlWrite+0xec>)
    d1ee:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    d1f0:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    d1f2:	4902      	ldr	r1, [pc, #8]	; (d1fc <pdsWlWrite+0xe0>)
    d1f4:	e7df      	b.n	d1b6 <pdsWlWrite+0x9a>
    d1f6:	46c0      	nop			; (mov r8, r8)
    d1f8:	20000e18 	.word	0x20000e18
    d1fc:	0000ffff 	.word	0x0000ffff
    d200:	0000cc7d 	.word	0x0000cc7d
    d204:	0000cfa5 	.word	0x0000cfa5
    d208:	0000cf4d 	.word	0x0000cf4d

0000d20c <pdsWlRead>:
{
    d20c:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    d20e:	0040      	lsls	r0, r0, #1
    d210:	4b06      	ldr	r3, [pc, #24]	; (d22c <pdsWlRead+0x20>)
    d212:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    d214:	4c06      	ldr	r4, [pc, #24]	; (d230 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    d216:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    d218:	42a3      	cmp	r3, r4
    d21a:	d100      	bne.n	d21e <pdsWlRead+0x12>
}
    d21c:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    d21e:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    d220:	b292      	uxth	r2, r2
    d222:	0018      	movs	r0, r3
    d224:	4b03      	ldr	r3, [pc, #12]	; (d234 <pdsWlRead+0x28>)
    d226:	4798      	blx	r3
	return status;
    d228:	e7f8      	b.n	d21c <pdsWlRead+0x10>
    d22a:	46c0      	nop			; (mov r8, r8)
    d22c:	20000dfc 	.word	0x20000dfc
    d230:	0000ffff 	.word	0x0000ffff
    d234:	0000cbe5 	.word	0x0000cbe5

0000d238 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    d238:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    d23a:	4b04      	ldr	r3, [pc, #16]	; (d24c <isFileFound+0x14>)
    d23c:	5ac0      	ldrh	r0, [r0, r3]
    d23e:	4b04      	ldr	r3, [pc, #16]	; (d250 <isFileFound+0x18>)
    d240:	469c      	mov	ip, r3
    d242:	4460      	add	r0, ip
    d244:	1e43      	subs	r3, r0, #1
    d246:	4198      	sbcs	r0, r3
    d248:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    d24a:	4770      	bx	lr
    d24c:	20000dfc 	.word	0x20000dfc
    d250:	ffff0001 	.word	0xffff0001

0000d254 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    d254:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    d256:	2280      	movs	r2, #128	; 0x80
    d258:	0052      	lsls	r2, r2, #1
    d25a:	21ff      	movs	r1, #255	; 0xff
    d25c:	4804      	ldr	r0, [pc, #16]	; (d270 <pdsWlDeleteAll+0x1c>)
    d25e:	4c05      	ldr	r4, [pc, #20]	; (d274 <pdsWlDeleteAll+0x20>)
    d260:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    d262:	221a      	movs	r2, #26
    d264:	21ff      	movs	r1, #255	; 0xff
    d266:	4804      	ldr	r0, [pc, #16]	; (d278 <pdsWlDeleteAll+0x24>)
    d268:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    d26a:	4b04      	ldr	r3, [pc, #16]	; (d27c <pdsWlDeleteAll+0x28>)
    d26c:	4798      	blx	r3
}
    d26e:	bd10      	pop	{r4, pc}
    d270:	20000e18 	.word	0x20000e18
    d274:	00018779 	.word	0x00018779
    d278:	20000dfc 	.word	0x20000dfc
    d27c:	0000cd2d 	.word	0x0000cd2d

0000d280 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    d280:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    d282:	4b06      	ldr	r3, [pc, #24]	; (d29c <hwTimerExpiryCallback+0x1c>)
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	2b00      	cmp	r3, #0
    d288:	d100      	bne.n	d28c <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    d28a:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    d28c:	2201      	movs	r2, #1
    d28e:	4b04      	ldr	r3, [pc, #16]	; (d2a0 <hwTimerExpiryCallback+0x20>)
    d290:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    d292:	2001      	movs	r0, #1
    d294:	4b03      	ldr	r3, [pc, #12]	; (d2a4 <hwTimerExpiryCallback+0x24>)
    d296:	4798      	blx	r3
}
    d298:	e7f7      	b.n	d28a <hwTimerExpiryCallback+0xa>
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	20000f28 	.word	0x20000f28
    d2a0:	200029f2 	.word	0x200029f2
    d2a4:	0000dc11 	.word	0x0000dc11

0000d2a8 <hwTimerOverflowCallback>:
{
    d2a8:	b510      	push	{r4, lr}
    d2aa:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    d2ac:	4924      	ldr	r1, [pc, #144]	; (d340 <hwTimerOverflowCallback+0x98>)
    d2ae:	880a      	ldrh	r2, [r1, #0]
    d2b0:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    d2b2:	880b      	ldrh	r3, [r1, #0]
    d2b4:	3301      	adds	r3, #1
    d2b6:	b29b      	uxth	r3, r3
    d2b8:	800b      	strh	r3, [r1, #0]
    d2ba:	429a      	cmp	r2, r3
    d2bc:	d903      	bls.n	d2c6 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    d2be:	4a21      	ldr	r2, [pc, #132]	; (d344 <hwTimerOverflowCallback+0x9c>)
    d2c0:	6813      	ldr	r3, [r2, #0]
    d2c2:	3301      	adds	r3, #1
    d2c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d2c6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2ca:	425a      	negs	r2, r3
    d2cc:	4153      	adcs	r3, r2
    d2ce:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d2d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d2d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d2d6:	2200      	movs	r2, #0
    d2d8:	4b1b      	ldr	r3, [pc, #108]	; (d348 <hwTimerOverflowCallback+0xa0>)
    d2da:	701a      	strb	r2, [r3, #0]
	return flags;
    d2dc:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    d2de:	4b1b      	ldr	r3, [pc, #108]	; (d34c <hwTimerOverflowCallback+0xa4>)
    d2e0:	681b      	ldr	r3, [r3, #0]
    d2e2:	2bff      	cmp	r3, #255	; 0xff
    d2e4:	d00d      	beq.n	d302 <hwTimerOverflowCallback+0x5a>
    d2e6:	0119      	lsls	r1, r3, #4
    d2e8:	4a19      	ldr	r2, [pc, #100]	; (d350 <hwTimerOverflowCallback+0xa8>)
    d2ea:	1852      	adds	r2, r2, r1
    d2ec:	7b52      	ldrb	r2, [r2, #13]
    d2ee:	2a00      	cmp	r2, #0
    d2f0:	d107      	bne.n	d302 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    d2f2:	4a17      	ldr	r2, [pc, #92]	; (d350 <hwTimerOverflowCallback+0xa8>)
    d2f4:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    d2f6:	4b12      	ldr	r3, [pc, #72]	; (d340 <hwTimerOverflowCallback+0x98>)
    d2f8:	881b      	ldrh	r3, [r3, #0]
    d2fa:	b29b      	uxth	r3, r3
    d2fc:	0c02      	lsrs	r2, r0, #16
    d2fe:	429a      	cmp	r2, r3
    d300:	d00a      	beq.n	d318 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    d302:	23ff      	movs	r3, #255	; 0xff
    d304:	4223      	tst	r3, r4
    d306:	d005      	beq.n	d314 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    d308:	2201      	movs	r2, #1
    d30a:	4b0f      	ldr	r3, [pc, #60]	; (d348 <hwTimerOverflowCallback+0xa0>)
    d30c:	701a      	strb	r2, [r3, #0]
    d30e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d312:	b662      	cpsie	i
}
    d314:	b002      	add	sp, #8
    d316:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    d318:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    d31a:	28ff      	cmp	r0, #255	; 0xff
    d31c:	d909      	bls.n	d332 <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    d31e:	4b0d      	ldr	r3, [pc, #52]	; (d354 <hwTimerOverflowCallback+0xac>)
    d320:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    d322:	4b0a      	ldr	r3, [pc, #40]	; (d34c <hwTimerOverflowCallback+0xa4>)
    d324:	681a      	ldr	r2, [r3, #0]
    d326:	0112      	lsls	r2, r2, #4
    d328:	4b09      	ldr	r3, [pc, #36]	; (d350 <hwTimerOverflowCallback+0xa8>)
    d32a:	189b      	adds	r3, r3, r2
    d32c:	2201      	movs	r2, #1
    d32e:	735a      	strb	r2, [r3, #13]
    d330:	e7e7      	b.n	d302 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    d332:	2201      	movs	r2, #1
    d334:	4b08      	ldr	r3, [pc, #32]	; (d358 <hwTimerOverflowCallback+0xb0>)
    d336:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    d338:	2001      	movs	r0, #1
    d33a:	4b08      	ldr	r3, [pc, #32]	; (d35c <hwTimerOverflowCallback+0xb4>)
    d33c:	4798      	blx	r3
    d33e:	e7e0      	b.n	d302 <hwTimerOverflowCallback+0x5a>
    d340:	200029f0 	.word	0x200029f0
    d344:	200029f4 	.word	0x200029f4
    d348:	20000014 	.word	0x20000014
    d34c:	20000f24 	.word	0x20000f24
    d350:	20002860 	.word	0x20002860
    d354:	0000e3ed 	.word	0x0000e3ed
    d358:	200029f2 	.word	0x200029f2
    d35c:	0000dc11 	.word	0x0000dc11

0000d360 <loadHwTimer>:
{
    d360:	b570      	push	{r4, r5, r6, lr}
    d362:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    d364:	28ff      	cmp	r0, #255	; 0xff
    d366:	d030      	beq.n	d3ca <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    d368:	4b19      	ldr	r3, [pc, #100]	; (d3d0 <loadHwTimer+0x70>)
    d36a:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d36c:	4b19      	ldr	r3, [pc, #100]	; (d3d4 <loadHwTimer+0x74>)
    d36e:	881d      	ldrh	r5, [r3, #0]
    d370:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d372:	4b19      	ldr	r3, [pc, #100]	; (d3d8 <loadHwTimer+0x78>)
    d374:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    d376:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    d378:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    d37a:	4a18      	ldr	r2, [pc, #96]	; (d3dc <loadHwTimer+0x7c>)
    d37c:	589b      	ldr	r3, [r3, r2]
    d37e:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    d380:	4b17      	ldr	r3, [pc, #92]	; (d3e0 <loadHwTimer+0x80>)
    d382:	4298      	cmp	r0, r3
    d384:	d81a      	bhi.n	d3bc <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    d386:	0122      	lsls	r2, r4, #4
    d388:	4b14      	ldr	r3, [pc, #80]	; (d3dc <loadHwTimer+0x7c>)
    d38a:	189b      	adds	r3, r3, r2
    d38c:	7b5b      	ldrb	r3, [r3, #13]
    d38e:	2b00      	cmp	r3, #0
    d390:	d11d      	bne.n	d3ce <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    d392:	28ff      	cmp	r0, #255	; 0xff
    d394:	d90b      	bls.n	d3ae <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    d396:	4b13      	ldr	r3, [pc, #76]	; (d3e4 <loadHwTimer+0x84>)
    d398:	4298      	cmp	r0, r3
    d39a:	d818      	bhi.n	d3ce <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    d39c:	b280      	uxth	r0, r0
    d39e:	4b12      	ldr	r3, [pc, #72]	; (d3e8 <loadHwTimer+0x88>)
    d3a0:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    d3a2:	0124      	lsls	r4, r4, #4
    d3a4:	4b0d      	ldr	r3, [pc, #52]	; (d3dc <loadHwTimer+0x7c>)
    d3a6:	191c      	adds	r4, r3, r4
    d3a8:	2301      	movs	r3, #1
    d3aa:	7363      	strb	r3, [r4, #13]
    d3ac:	e00f      	b.n	d3ce <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    d3ae:	2201      	movs	r2, #1
    d3b0:	4b0e      	ldr	r3, [pc, #56]	; (d3ec <loadHwTimer+0x8c>)
    d3b2:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    d3b4:	2001      	movs	r0, #1
    d3b6:	4b0e      	ldr	r3, [pc, #56]	; (d3f0 <loadHwTimer+0x90>)
    d3b8:	4798      	blx	r3
    d3ba:	e008      	b.n	d3ce <loadHwTimer+0x6e>
            isTimerTriggered = true;
    d3bc:	2201      	movs	r2, #1
    d3be:	4b0b      	ldr	r3, [pc, #44]	; (d3ec <loadHwTimer+0x8c>)
    d3c0:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d3c2:	2001      	movs	r0, #1
    d3c4:	4b0a      	ldr	r3, [pc, #40]	; (d3f0 <loadHwTimer+0x90>)
    d3c6:	4798      	blx	r3
    d3c8:	e001      	b.n	d3ce <loadHwTimer+0x6e>
        common_tc_compare_stop();
    d3ca:	4b0a      	ldr	r3, [pc, #40]	; (d3f4 <loadHwTimer+0x94>)
    d3cc:	4798      	blx	r3
}
    d3ce:	bd70      	pop	{r4, r5, r6, pc}
    d3d0:	200029f4 	.word	0x200029f4
    d3d4:	200029f0 	.word	0x200029f0
    d3d8:	0000e345 	.word	0x0000e345
    d3dc:	20002860 	.word	0x20002860
    d3e0:	7ffffffe 	.word	0x7ffffffe
    d3e4:	0000ffff 	.word	0x0000ffff
    d3e8:	0000e3ed 	.word	0x0000e3ed
    d3ec:	200029f2 	.word	0x200029f2
    d3f0:	0000dc11 	.word	0x0000dc11
    d3f4:	0000e391 	.word	0x0000e391

0000d3f8 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    d3f8:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    d3fa:	4b1d      	ldr	r3, [pc, #116]	; (d470 <swtimerInternalHandler+0x78>)
    d3fc:	781b      	ldrb	r3, [r3, #0]
    d3fe:	2b00      	cmp	r3, #0
    d400:	d027      	beq.n	d452 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    d402:	2200      	movs	r2, #0
    d404:	4b1a      	ldr	r3, [pc, #104]	; (d470 <swtimerInternalHandler+0x78>)
    d406:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    d408:	4b1a      	ldr	r3, [pc, #104]	; (d474 <swtimerInternalHandler+0x7c>)
    d40a:	781b      	ldrb	r3, [r3, #0]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d020      	beq.n	d452 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d410:	4b19      	ldr	r3, [pc, #100]	; (d478 <swtimerInternalHandler+0x80>)
    d412:	681b      	ldr	r3, [r3, #0]
    d414:	2bff      	cmp	r3, #255	; 0xff
    d416:	d01d      	beq.n	d454 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    d418:	4b18      	ldr	r3, [pc, #96]	; (d47c <swtimerInternalHandler+0x84>)
    d41a:	6818      	ldr	r0, [r3, #0]
    d41c:	4918      	ldr	r1, [pc, #96]	; (d480 <swtimerInternalHandler+0x88>)
    d41e:	680b      	ldr	r3, [r1, #0]
    d420:	011a      	lsls	r2, r3, #4
    d422:	4b18      	ldr	r3, [pc, #96]	; (d484 <swtimerInternalHandler+0x8c>)
    d424:	189b      	adds	r3, r3, r2
    d426:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    d428:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    d42a:	4a16      	ldr	r2, [pc, #88]	; (d484 <swtimerInternalHandler+0x8c>)
    d42c:	4913      	ldr	r1, [pc, #76]	; (d47c <swtimerInternalHandler+0x84>)
    d42e:	680b      	ldr	r3, [r1, #0]
    d430:	011b      	lsls	r3, r3, #4
    d432:	18d3      	adds	r3, r2, r3
    d434:	7b18      	ldrb	r0, [r3, #12]
    d436:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    d438:	4b11      	ldr	r3, [pc, #68]	; (d480 <swtimerInternalHandler+0x88>)
    d43a:	681b      	ldr	r3, [r3, #0]
    d43c:	011b      	lsls	r3, r3, #4
    d43e:	18d2      	adds	r2, r2, r3
    d440:	23ff      	movs	r3, #255	; 0xff
    d442:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    d444:	4a0b      	ldr	r2, [pc, #44]	; (d474 <swtimerInternalHandler+0x7c>)
    d446:	7813      	ldrb	r3, [r2, #0]
    d448:	3b01      	subs	r3, #1
    d44a:	b2db      	uxtb	r3, r3
    d44c:	7013      	strb	r3, [r2, #0]
    d44e:	2b00      	cmp	r3, #0
    d450:	d10b      	bne.n	d46a <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    d452:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    d454:	4b0a      	ldr	r3, [pc, #40]	; (d480 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d456:	681b      	ldr	r3, [r3, #0]
    d458:	2bff      	cmp	r3, #255	; 0xff
    d45a:	d1dd      	bne.n	d418 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    d45c:	4b07      	ldr	r3, [pc, #28]	; (d47c <swtimerInternalHandler+0x84>)
    d45e:	681b      	ldr	r3, [r3, #0]
    d460:	4a05      	ldr	r2, [pc, #20]	; (d478 <swtimerInternalHandler+0x80>)
    d462:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    d464:	4a06      	ldr	r2, [pc, #24]	; (d480 <swtimerInternalHandler+0x88>)
    d466:	6013      	str	r3, [r2, #0]
    d468:	e7df      	b.n	d42a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    d46a:	4b07      	ldr	r3, [pc, #28]	; (d488 <swtimerInternalHandler+0x90>)
    d46c:	4798      	blx	r3
}
    d46e:	e7f0      	b.n	d452 <swtimerInternalHandler+0x5a>
    d470:	200029f2 	.word	0x200029f2
    d474:	20000f28 	.word	0x20000f28
    d478:	20000f1c 	.word	0x20000f1c
    d47c:	20000f24 	.word	0x20000f24
    d480:	20000f20 	.word	0x20000f20
    d484:	20002860 	.word	0x20002860
    d488:	0000d361 	.word	0x0000d361

0000d48c <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    d48c:	2300      	movs	r3, #0
    d48e:	4a0d      	ldr	r2, [pc, #52]	; (d4c4 <SwTimerReset+0x38>)
    d490:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    d492:	4a0d      	ldr	r2, [pc, #52]	; (d4c8 <SwTimerReset+0x3c>)
    d494:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    d496:	33ff      	adds	r3, #255	; 0xff
    d498:	4a0c      	ldr	r2, [pc, #48]	; (d4cc <SwTimerReset+0x40>)
    d49a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    d49c:	4a0c      	ldr	r2, [pc, #48]	; (d4d0 <SwTimerReset+0x44>)
    d49e:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    d4a0:	4a0c      	ldr	r2, [pc, #48]	; (d4d4 <SwTimerReset+0x48>)
    d4a2:	6013      	str	r3, [r2, #0]
    d4a4:	4b0c      	ldr	r3, [pc, #48]	; (d4d8 <SwTimerReset+0x4c>)
    d4a6:	0018      	movs	r0, r3
    d4a8:	3091      	adds	r0, #145	; 0x91
    d4aa:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4ac:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    d4ae:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4b0:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    d4b2:	601a      	str	r2, [r3, #0]
    d4b4:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    d4b6:	4283      	cmp	r3, r0
    d4b8:	d1fa      	bne.n	d4b0 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    d4ba:	2200      	movs	r2, #0
    d4bc:	4b07      	ldr	r3, [pc, #28]	; (d4dc <SwTimerReset+0x50>)
    d4be:	701a      	strb	r2, [r3, #0]
}
    d4c0:	4770      	bx	lr
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	20000f28 	.word	0x20000f28
    d4c8:	200029f2 	.word	0x200029f2
    d4cc:	20000f24 	.word	0x20000f24
    d4d0:	20000f1c 	.word	0x20000f1c
    d4d4:	20000f20 	.word	0x20000f20
    d4d8:	20002864 	.word	0x20002864
    d4dc:	20000f18 	.word	0x20000f18

0000d4e0 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    d4e0:	b510      	push	{r4, lr}
    SwTimerReset();
    d4e2:	4b08      	ldr	r3, [pc, #32]	; (d504 <SystemTimerInit+0x24>)
    d4e4:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    d4e6:	2300      	movs	r3, #0
    d4e8:	4a07      	ldr	r2, [pc, #28]	; (d508 <SystemTimerInit+0x28>)
    d4ea:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    d4ec:	4a07      	ldr	r2, [pc, #28]	; (d50c <SystemTimerInit+0x2c>)
    d4ee:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    d4f0:	4b07      	ldr	r3, [pc, #28]	; (d510 <SystemTimerInit+0x30>)
    d4f2:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d4f4:	4807      	ldr	r0, [pc, #28]	; (d514 <SystemTimerInit+0x34>)
    d4f6:	4b08      	ldr	r3, [pc, #32]	; (d518 <SystemTimerInit+0x38>)
    d4f8:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d4fa:	4808      	ldr	r0, [pc, #32]	; (d51c <SystemTimerInit+0x3c>)
    d4fc:	4b08      	ldr	r3, [pc, #32]	; (d520 <SystemTimerInit+0x40>)
    d4fe:	4798      	blx	r3
}
    d500:	bd10      	pop	{r4, pc}
    d502:	46c0      	nop			; (mov r8, r8)
    d504:	0000d48d 	.word	0x0000d48d
    d508:	200029f4 	.word	0x200029f4
    d50c:	200029f0 	.word	0x200029f0
    d510:	0000e459 	.word	0x0000e459
    d514:	0000d2a9 	.word	0x0000d2a9
    d518:	0000e4dd 	.word	0x0000e4dd
    d51c:	0000d281 	.word	0x0000d281
    d520:	0000e4e9 	.word	0x0000e4e9

0000d524 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    d524:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d526:	4b05      	ldr	r3, [pc, #20]	; (d53c <SwTimerGetTime+0x18>)
    d528:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d52a:	4b05      	ldr	r3, [pc, #20]	; (d540 <SwTimerGetTime+0x1c>)
    d52c:	881d      	ldrh	r5, [r3, #0]
    d52e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d530:	4b04      	ldr	r3, [pc, #16]	; (d544 <SwTimerGetTime+0x20>)
    d532:	4798      	blx	r3
    d534:	4328      	orrs	r0, r5
    return gettime();
}
    d536:	0021      	movs	r1, r4
    d538:	bd70      	pop	{r4, r5, r6, pc}
    d53a:	46c0      	nop			; (mov r8, r8)
    d53c:	200029f4 	.word	0x200029f4
    d540:	200029f0 	.word	0x200029f0
    d544:	0000e345 	.word	0x0000e345

0000d548 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    d548:	b510      	push	{r4, lr}
    d54a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d54c:	4b08      	ldr	r3, [pc, #32]	; (d570 <SwTimerCreate+0x28>)
    d54e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d550:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d552:	2b18      	cmp	r3, #24
    d554:	d900      	bls.n	d558 <SwTimerCreate+0x10>
    }

    return retVal;
}
    d556:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d558:	4b06      	ldr	r3, [pc, #24]	; (d574 <SwTimerCreate+0x2c>)
    d55a:	4798      	blx	r3
        *timerId = allocatedTimerId;
    d55c:	4a04      	ldr	r2, [pc, #16]	; (d570 <SwTimerCreate+0x28>)
    d55e:	7813      	ldrb	r3, [r2, #0]
    d560:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    d562:	3301      	adds	r3, #1
    d564:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d566:	4b04      	ldr	r3, [pc, #16]	; (d578 <SwTimerCreate+0x30>)
    d568:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d56a:	2008      	movs	r0, #8
    d56c:	e7f3      	b.n	d556 <SwTimerCreate+0xe>
    d56e:	46c0      	nop			; (mov r8, r8)
    d570:	20000f18 	.word	0x20000f18
    d574:	000066e1 	.word	0x000066e1
    d578:	000066ed 	.word	0x000066ed

0000d57c <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    d57c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d57e:	46d6      	mov	lr, sl
    d580:	464f      	mov	r7, r9
    d582:	4646      	mov	r6, r8
    d584:	b5c0      	push	{r6, r7, lr}
    d586:	b084      	sub	sp, #16
    d588:	0007      	movs	r7, r0
    d58a:	000d      	movs	r5, r1
    d58c:	0016      	movs	r6, r2
    d58e:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d590:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    d592:	2f18      	cmp	r7, #24
    d594:	d809      	bhi.n	d5aa <SwTimerStart+0x2e>
    d596:	2b00      	cmp	r3, #0
    d598:	d100      	bne.n	d59c <SwTimerStart+0x20>
    d59a:	e08c      	b.n	d6b6 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    d59c:	013a      	lsls	r2, r7, #4
    d59e:	4b52      	ldr	r3, [pc, #328]	; (d6e8 <SwTimerStart+0x16c>)
    d5a0:	189b      	adds	r3, r3, r2
    d5a2:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    d5a4:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d005      	beq.n	d5b6 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    d5aa:	b004      	add	sp, #16
    d5ac:	bc1c      	pop	{r2, r3, r4}
    d5ae:	4690      	mov	r8, r2
    d5b0:	4699      	mov	r9, r3
    d5b2:	46a2      	mov	sl, r4
    d5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d5b6:	4b4d      	ldr	r3, [pc, #308]	; (d6ec <SwTimerStart+0x170>)
    d5b8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d5ba:	4b4d      	ldr	r3, [pc, #308]	; (d6f0 <SwTimerStart+0x174>)
    d5bc:	8818      	ldrh	r0, [r3, #0]
    d5be:	0403      	lsls	r3, r0, #16
    d5c0:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    d5c2:	4b4c      	ldr	r3, [pc, #304]	; (d6f4 <SwTimerStart+0x178>)
    d5c4:	4798      	blx	r3
    d5c6:	4643      	mov	r3, r8
    d5c8:	4303      	orrs	r3, r0
    switch (timeoutType)
    d5ca:	2e00      	cmp	r6, #0
    d5cc:	d003      	beq.n	d5d6 <SwTimerStart+0x5a>
    d5ce:	2e01      	cmp	r6, #1
    d5d0:	d038      	beq.n	d644 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    d5d2:	200a      	movs	r0, #10
    d5d4:	e7e9      	b.n	d5aa <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5d6:	4948      	ldr	r1, [pc, #288]	; (d6f8 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d5d8:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5da:	002a      	movs	r2, r5
    d5dc:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    d5de:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5e0:	428a      	cmp	r2, r1
    d5e2:	d8e2      	bhi.n	d5aa <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d5e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d5e8:	425a      	negs	r2, r3
    d5ea:	4153      	adcs	r3, r2
    d5ec:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    d5ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d5f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d5f4:	2600      	movs	r6, #0
    d5f6:	4b41      	ldr	r3, [pc, #260]	; (d6fc <SwTimerStart+0x180>)
    d5f8:	701e      	strb	r6, [r3, #0]
	return flags;
    d5fa:	9b03      	ldr	r3, [sp, #12]
    d5fc:	4699      	mov	r9, r3
    swtimerInternalHandler();
    d5fe:	4b40      	ldr	r3, [pc, #256]	; (d700 <SwTimerStart+0x184>)
    d600:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    d602:	4b39      	ldr	r3, [pc, #228]	; (d6e8 <SwTimerStart+0x16c>)
    d604:	013a      	lsls	r2, r7, #4
    d606:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    d608:	189b      	adds	r3, r3, r2
    d60a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    d60c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d60e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    d610:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    d612:	4a3c      	ldr	r2, [pc, #240]	; (d704 <SwTimerStart+0x188>)
    d614:	7813      	ldrb	r3, [r2, #0]
    d616:	3301      	adds	r3, #1
    d618:	b2db      	uxtb	r3, r3
    d61a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    d61c:	4b3a      	ldr	r3, [pc, #232]	; (d708 <SwTimerStart+0x18c>)
    d61e:	681b      	ldr	r3, [r3, #0]
    d620:	469a      	mov	sl, r3
    d622:	2bff      	cmp	r3, #255	; 0xff
    d624:	d016      	beq.n	d654 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    d626:	466a      	mov	r2, sp
    d628:	7013      	strb	r3, [r2, #0]
    d62a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    d62c:	4b35      	ldr	r3, [pc, #212]	; (d704 <SwTimerStart+0x188>)
    d62e:	781b      	ldrb	r3, [r3, #0]
    d630:	2b00      	cmp	r3, #0
    d632:	d042      	beq.n	d6ba <SwTimerStart+0x13e>
    d634:	9200      	str	r2, [sp, #0]
    d636:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d638:	492b      	ldr	r1, [pc, #172]	; (d6e8 <SwTimerStart+0x16c>)
    d63a:	4688      	mov	r8, r1
    d63c:	4833      	ldr	r0, [pc, #204]	; (d70c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    d63e:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    d640:	4c30      	ldr	r4, [pc, #192]	; (d704 <SwTimerStart+0x188>)
    d642:	e02a      	b.n	d69a <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d644:	0028      	movs	r0, r5
    d646:	38ff      	subs	r0, #255	; 0xff
    d648:	1ac3      	subs	r3, r0, r3
    d64a:	4a2b      	ldr	r2, [pc, #172]	; (d6f8 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d64c:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d64e:	4293      	cmp	r3, r2
    d650:	d9c8      	bls.n	d5e4 <SwTimerStart+0x68>
    d652:	e7aa      	b.n	d5aa <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    d654:	4b2c      	ldr	r3, [pc, #176]	; (d708 <SwTimerStart+0x18c>)
    d656:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    d658:	0038      	movs	r0, r7
    d65a:	4b2d      	ldr	r3, [pc, #180]	; (d710 <SwTimerStart+0x194>)
    d65c:	4798      	blx	r3
    d65e:	e036      	b.n	d6ce <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    d660:	4b21      	ldr	r3, [pc, #132]	; (d6e8 <SwTimerStart+0x16c>)
    d662:	013c      	lsls	r4, r7, #4
    d664:	191c      	adds	r4, r3, r4
    d666:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    d668:	9901      	ldr	r1, [sp, #4]
    d66a:	0109      	lsls	r1, r1, #4
    d66c:	1859      	adds	r1, r3, r1
    d66e:	2300      	movs	r3, #0
    d670:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    d672:	4592      	cmp	sl, r2
    d674:	d005      	beq.n	d682 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    d676:	9b00      	ldr	r3, [sp, #0]
    d678:	0118      	lsls	r0, r3, #4
    d67a:	4b1b      	ldr	r3, [pc, #108]	; (d6e8 <SwTimerStart+0x16c>)
    d67c:	1818      	adds	r0, r3, r0
    d67e:	7307      	strb	r7, [r0, #12]
    d680:	e025      	b.n	d6ce <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    d682:	4b21      	ldr	r3, [pc, #132]	; (d708 <SwTimerStart+0x18c>)
    d684:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    d686:	0038      	movs	r0, r7
    d688:	4b21      	ldr	r3, [pc, #132]	; (d710 <SwTimerStart+0x194>)
    d68a:	4798      	blx	r3
    d68c:	e01f      	b.n	d6ce <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    d68e:	3301      	adds	r3, #1
    d690:	b2db      	uxtb	r3, r3
    d692:	7821      	ldrb	r1, [r4, #0]
    d694:	b2c9      	uxtb	r1, r1
    d696:	428b      	cmp	r3, r1
    d698:	d210      	bcs.n	d6bc <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    d69a:	2aff      	cmp	r2, #255	; 0xff
    d69c:	d0f7      	beq.n	d68e <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d69e:	9201      	str	r2, [sp, #4]
    d6a0:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    d6a2:	4646      	mov	r6, r8
    d6a4:	5989      	ldr	r1, [r1, r6]
    d6a6:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d6a8:	4281      	cmp	r1, r0
    d6aa:	d8d9      	bhi.n	d660 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    d6ac:	0111      	lsls	r1, r2, #4
    d6ae:	4461      	add	r1, ip
    d6b0:	9200      	str	r2, [sp, #0]
    d6b2:	7b0a      	ldrb	r2, [r1, #12]
    d6b4:	e7eb      	b.n	d68e <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    d6b6:	200a      	movs	r0, #10
    d6b8:	e777      	b.n	d5aa <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    d6ba:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    d6bc:	4b0a      	ldr	r3, [pc, #40]	; (d6e8 <SwTimerStart+0x16c>)
    d6be:	9a00      	ldr	r2, [sp, #0]
    d6c0:	0110      	lsls	r0, r2, #4
    d6c2:	1818      	adds	r0, r3, r0
    d6c4:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    d6c6:	013f      	lsls	r7, r7, #4
    d6c8:	19df      	adds	r7, r3, r7
    d6ca:	23ff      	movs	r3, #255	; 0xff
    d6cc:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    d6ce:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    d6d0:	2008      	movs	r0, #8
    d6d2:	464a      	mov	r2, r9
    d6d4:	4213      	tst	r3, r2
    d6d6:	d100      	bne.n	d6da <SwTimerStart+0x15e>
    d6d8:	e767      	b.n	d5aa <SwTimerStart+0x2e>
		cpu_irq_enable();
    d6da:	2201      	movs	r2, #1
    d6dc:	4b07      	ldr	r3, [pc, #28]	; (d6fc <SwTimerStart+0x180>)
    d6de:	701a      	strb	r2, [r3, #0]
    d6e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d6e4:	b662      	cpsie	i
    d6e6:	e760      	b.n	d5aa <SwTimerStart+0x2e>
    d6e8:	20002860 	.word	0x20002860
    d6ec:	200029f4 	.word	0x200029f4
    d6f0:	200029f0 	.word	0x200029f0
    d6f4:	0000e345 	.word	0x0000e345
    d6f8:	7fffff00 	.word	0x7fffff00
    d6fc:	20000014 	.word	0x20000014
    d700:	0000d3f9 	.word	0x0000d3f9
    d704:	20000f28 	.word	0x20000f28
    d708:	20000f24 	.word	0x20000f24
    d70c:	7ffffffe 	.word	0x7ffffffe
    d710:	0000d361 	.word	0x0000d361

0000d714 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    d714:	0103      	lsls	r3, r0, #4
    d716:	4803      	ldr	r0, [pc, #12]	; (d724 <SwTimerIsRunning+0x10>)
    d718:	18c0      	adds	r0, r0, r3
    d71a:	6840      	ldr	r0, [r0, #4]
    d71c:	1e43      	subs	r3, r0, #1
    d71e:	4198      	sbcs	r0, r3
    d720:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    d722:	4770      	bx	lr
    d724:	20002860 	.word	0x20002860

0000d728 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    d728:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    d72a:	0102      	lsls	r2, r0, #4
    d72c:	4b0d      	ldr	r3, [pc, #52]	; (d764 <SwTimerReadValue+0x3c>)
    d72e:	189b      	adds	r3, r3, r2
    d730:	685b      	ldr	r3, [r3, #4]
    d732:	2b00      	cmp	r3, #0
    d734:	d014      	beq.n	d760 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    d736:	4b0b      	ldr	r3, [pc, #44]	; (d764 <SwTimerReadValue+0x3c>)
    d738:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    d73a:	4b0b      	ldr	r3, [pc, #44]	; (d768 <SwTimerReadValue+0x40>)
    d73c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d73e:	4b0b      	ldr	r3, [pc, #44]	; (d76c <SwTimerReadValue+0x44>)
    d740:	881c      	ldrh	r4, [r3, #0]
    d742:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    d744:	4b0a      	ldr	r3, [pc, #40]	; (d770 <SwTimerReadValue+0x48>)
    d746:	4798      	blx	r3
    d748:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    d74a:	4285      	cmp	r5, r0
    d74c:	d305      	bcc.n	d75a <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    d74e:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    d750:	4b08      	ldr	r3, [pc, #32]	; (d774 <SwTimerReadValue+0x4c>)
    d752:	4298      	cmp	r0, r3
    d754:	d900      	bls.n	d758 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    d756:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    d758:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    d75a:	3d01      	subs	r5, #1
    d75c:	1a28      	subs	r0, r5, r0
    d75e:	e7f7      	b.n	d750 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    d760:	2000      	movs	r0, #0
    return remainingTime;
    d762:	e7f9      	b.n	d758 <SwTimerReadValue+0x30>
    d764:	20002860 	.word	0x20002860
    d768:	200029f4 	.word	0x200029f4
    d76c:	200029f0 	.word	0x200029f0
    d770:	0000e345 	.word	0x0000e345
    d774:	7ffffffe 	.word	0x7ffffffe

0000d778 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    d778:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    d77a:	4b05      	ldr	r3, [pc, #20]	; (d790 <SwTimerNextExpiryDuration+0x18>)
    d77c:	6818      	ldr	r0, [r3, #0]
    d77e:	28ff      	cmp	r0, #255	; 0xff
    d780:	d102      	bne.n	d788 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    d782:	2001      	movs	r0, #1
    d784:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    d786:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    d788:	b2c0      	uxtb	r0, r0
    d78a:	4b02      	ldr	r3, [pc, #8]	; (d794 <SwTimerNextExpiryDuration+0x1c>)
    d78c:	4798      	blx	r3
    d78e:	e7fa      	b.n	d786 <SwTimerNextExpiryDuration+0xe>
    d790:	20000f24 	.word	0x20000f24
    d794:	0000d729 	.word	0x0000d729

0000d798 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    d798:	b5f0      	push	{r4, r5, r6, r7, lr}
    d79a:	46de      	mov	lr, fp
    d79c:	4657      	mov	r7, sl
    d79e:	464e      	mov	r6, r9
    d7a0:	4645      	mov	r5, r8
    d7a2:	b5e0      	push	{r5, r6, r7, lr}
    d7a4:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    d7a6:	4b2f      	ldr	r3, [pc, #188]	; (d864 <SwTimersExecute+0xcc>)
    d7a8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d7aa:	4b2f      	ldr	r3, [pc, #188]	; (d868 <SwTimersExecute+0xd0>)
    d7ac:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    d7ae:	4b2f      	ldr	r3, [pc, #188]	; (d86c <SwTimersExecute+0xd4>)
    d7b0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d7b2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d7b6:	4253      	negs	r3, r2
    d7b8:	4153      	adcs	r3, r2
    d7ba:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d7bc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d7be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d7c2:	2200      	movs	r2, #0
    d7c4:	4b2a      	ldr	r3, [pc, #168]	; (d870 <SwTimersExecute+0xd8>)
    d7c6:	701a      	strb	r2, [r3, #0]
	return flags;
    d7c8:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    d7ca:	4b2a      	ldr	r3, [pc, #168]	; (d874 <SwTimersExecute+0xdc>)
    d7cc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d7ce:	23ff      	movs	r3, #255	; 0xff
    d7d0:	4223      	tst	r3, r4
    d7d2:	d005      	beq.n	d7e0 <SwTimersExecute+0x48>
		cpu_irq_enable();
    d7d4:	2201      	movs	r2, #1
    d7d6:	4b26      	ldr	r3, [pc, #152]	; (d870 <SwTimersExecute+0xd8>)
    d7d8:	701a      	strb	r2, [r3, #0]
    d7da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d7de:	b662      	cpsie	i
	cpu_irq_disable();
    d7e0:	4b23      	ldr	r3, [pc, #140]	; (d870 <SwTimersExecute+0xd8>)
    d7e2:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d7e4:	4c24      	ldr	r4, [pc, #144]	; (d878 <SwTimersExecute+0xe0>)
    d7e6:	4b25      	ldr	r3, [pc, #148]	; (d87c <SwTimersExecute+0xe4>)
    d7e8:	4699      	mov	r9, r3
    d7ea:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d7ec:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    d7ee:	4b24      	ldr	r3, [pc, #144]	; (d880 <SwTimersExecute+0xe8>)
    d7f0:	4698      	mov	r8, r3
		cpu_irq_enable();
    d7f2:	4b1f      	ldr	r3, [pc, #124]	; (d870 <SwTimersExecute+0xd8>)
    d7f4:	469c      	mov	ip, r3
    d7f6:	e004      	b.n	d802 <SwTimersExecute+0x6a>
    d7f8:	4643      	mov	r3, r8
    d7fa:	6018      	str	r0, [r3, #0]
    d7fc:	e01e      	b.n	d83c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    d7fe:	2e00      	cmp	r6, #0
    d800:	d125      	bne.n	d84e <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    d802:	4b1d      	ldr	r3, [pc, #116]	; (d878 <SwTimersExecute+0xe0>)
    d804:	681b      	ldr	r3, [r3, #0]
    d806:	2bff      	cmp	r3, #255	; 0xff
    d808:	d024      	beq.n	d854 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d80a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d80e:	424b      	negs	r3, r1
    d810:	414b      	adcs	r3, r1
    d812:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d814:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d816:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d81a:	4653      	mov	r3, sl
    d81c:	701a      	strb	r2, [r3, #0]
	return flags;
    d81e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d820:	6823      	ldr	r3, [r4, #0]
    d822:	011b      	lsls	r3, r3, #4
    d824:	444b      	add	r3, r9
    d826:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    d828:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    d82a:	689d      	ldr	r5, [r3, #8]
    d82c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d82e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d830:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d832:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d834:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d836:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d838:	29ff      	cmp	r1, #255	; 0xff
    d83a:	d0dd      	beq.n	d7f8 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d83c:	4238      	tst	r0, r7
    d83e:	d0de      	beq.n	d7fe <SwTimersExecute+0x66>
		cpu_irq_enable();
    d840:	2301      	movs	r3, #1
    d842:	4661      	mov	r1, ip
    d844:	700b      	strb	r3, [r1, #0]
    d846:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d84a:	b662      	cpsie	i
    d84c:	e7d7      	b.n	d7fe <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d84e:	4658      	mov	r0, fp
    d850:	47b0      	blx	r6
    d852:	e7ca      	b.n	d7ea <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d854:	b003      	add	sp, #12
    d856:	bc3c      	pop	{r2, r3, r4, r5}
    d858:	4690      	mov	r8, r2
    d85a:	4699      	mov	r9, r3
    d85c:	46a2      	mov	sl, r4
    d85e:	46ab      	mov	fp, r5
    d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d862:	46c0      	nop			; (mov r8, r8)
    d864:	200029f4 	.word	0x200029f4
    d868:	200029f0 	.word	0x200029f0
    d86c:	0000e345 	.word	0x0000e345
    d870:	20000014 	.word	0x20000014
    d874:	0000d3f9 	.word	0x0000d3f9
    d878:	20000f1c 	.word	0x20000f1c
    d87c:	20002860 	.word	0x20002860
    d880:	20000f20 	.word	0x20000f20

0000d884 <TIMER_TaskHandler>:
{
    d884:	b510      	push	{r4, lr}
    SwTimersExecute();
    d886:	4b02      	ldr	r3, [pc, #8]	; (d890 <TIMER_TaskHandler+0xc>)
    d888:	4798      	blx	r3
}
    d88a:	2000      	movs	r0, #0
    d88c:	bd10      	pop	{r4, pc}
    d88e:	46c0      	nop			; (mov r8, r8)
    d890:	0000d799 	.word	0x0000d799

0000d894 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d894:	b570      	push	{r4, r5, r6, lr}
    d896:	b082      	sub	sp, #8
    d898:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d89a:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d89c:	2c18      	cmp	r4, #24
    d89e:	d901      	bls.n	d8a4 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d8a0:	b002      	add	sp, #8
    d8a2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d8a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d8a8:	425a      	negs	r2, r3
    d8aa:	4153      	adcs	r3, r2
    d8ac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d8ae:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d8b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d8b4:	2200      	movs	r2, #0
    d8b6:	4b47      	ldr	r3, [pc, #284]	; (d9d4 <SwTimerStop+0x140>)
    d8b8:	701a      	strb	r2, [r3, #0]
	return flags;
    d8ba:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d8bc:	4b46      	ldr	r3, [pc, #280]	; (d9d8 <SwTimerStop+0x144>)
    d8be:	4798      	blx	r3
    if (runningTimers > 0)
    d8c0:	4b46      	ldr	r3, [pc, #280]	; (d9dc <SwTimerStop+0x148>)
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	2b00      	cmp	r3, #0
    d8c6:	d040      	beq.n	d94a <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d8c8:	4b44      	ldr	r3, [pc, #272]	; (d9dc <SwTimerStop+0x148>)
    d8ca:	781b      	ldrb	r3, [r3, #0]
    d8cc:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d8ce:	4a44      	ldr	r2, [pc, #272]	; (d9e0 <SwTimerStop+0x14c>)
    d8d0:	6816      	ldr	r6, [r2, #0]
    d8d2:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	d038      	beq.n	d94a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d8d8:	428c      	cmp	r4, r1
    d8da:	d00b      	beq.n	d8f4 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d8dc:	4841      	ldr	r0, [pc, #260]	; (d9e4 <SwTimerStop+0x150>)
    d8de:	010a      	lsls	r2, r1, #4
    d8e0:	1882      	adds	r2, r0, r2
    d8e2:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d8e4:	3b01      	subs	r3, #1
    d8e6:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d02e      	beq.n	d94a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d8ec:	4294      	cmp	r4, r2
    d8ee:	d001      	beq.n	d8f4 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d8f0:	0011      	movs	r1, r2
    d8f2:	e7f4      	b.n	d8de <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d8f4:	42a6      	cmp	r6, r4
    d8f6:	d01d      	beq.n	d934 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d8f8:	4b3a      	ldr	r3, [pc, #232]	; (d9e4 <SwTimerStop+0x150>)
    d8fa:	0122      	lsls	r2, r4, #4
    d8fc:	189a      	adds	r2, r3, r2
    d8fe:	7b12      	ldrb	r2, [r2, #12]
    d900:	0109      	lsls	r1, r1, #4
    d902:	1859      	adds	r1, r3, r1
    d904:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d906:	0122      	lsls	r2, r4, #4
    d908:	4b36      	ldr	r3, [pc, #216]	; (d9e4 <SwTimerStop+0x150>)
    d90a:	189b      	adds	r3, r3, r2
    d90c:	22ff      	movs	r2, #255	; 0xff
    d90e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d910:	4a32      	ldr	r2, [pc, #200]	; (d9dc <SwTimerStop+0x148>)
    d912:	7813      	ldrb	r3, [r2, #0]
    d914:	3b01      	subs	r3, #1
    d916:	b2db      	uxtb	r3, r3
    d918:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d91a:	0124      	lsls	r4, r4, #4
    d91c:	4b31      	ldr	r3, [pc, #196]	; (d9e4 <SwTimerStop+0x150>)
    d91e:	191c      	adds	r4, r3, r4
    d920:	2300      	movs	r3, #0
    d922:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d924:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d926:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d928:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d92a:	2008      	movs	r0, #8
    d92c:	422b      	tst	r3, r5
    d92e:	d0b7      	beq.n	d8a0 <SwTimerStop+0xc>
    d930:	2301      	movs	r3, #1
    d932:	e040      	b.n	d9b6 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d934:	4b2c      	ldr	r3, [pc, #176]	; (d9e8 <SwTimerStop+0x154>)
    d936:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d938:	0122      	lsls	r2, r4, #4
    d93a:	4b2a      	ldr	r3, [pc, #168]	; (d9e4 <SwTimerStop+0x150>)
    d93c:	189b      	adds	r3, r3, r2
    d93e:	7b18      	ldrb	r0, [r3, #12]
    d940:	4b27      	ldr	r3, [pc, #156]	; (d9e0 <SwTimerStop+0x14c>)
    d942:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d944:	4b29      	ldr	r3, [pc, #164]	; (d9ec <SwTimerStop+0x158>)
    d946:	4798      	blx	r3
    d948:	e7dd      	b.n	d906 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d94a:	4b29      	ldr	r3, [pc, #164]	; (d9f0 <SwTimerStop+0x15c>)
    d94c:	6818      	ldr	r0, [r3, #0]
    d94e:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d950:	2aff      	cmp	r2, #255	; 0xff
    d952:	d02c      	beq.n	d9ae <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d954:	4294      	cmp	r4, r2
    d956:	d009      	beq.n	d96c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d958:	4922      	ldr	r1, [pc, #136]	; (d9e4 <SwTimerStop+0x150>)
    d95a:	0113      	lsls	r3, r2, #4
    d95c:	18cb      	adds	r3, r1, r3
    d95e:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d960:	2bff      	cmp	r3, #255	; 0xff
    d962:	d024      	beq.n	d9ae <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d964:	429c      	cmp	r4, r3
    d966:	d001      	beq.n	d96c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d968:	001a      	movs	r2, r3
    d96a:	e7f6      	b.n	d95a <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d96c:	42a0      	cmp	r0, r4
    d96e:	d00d      	beq.n	d98c <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d970:	4b1c      	ldr	r3, [pc, #112]	; (d9e4 <SwTimerStop+0x150>)
    d972:	0121      	lsls	r1, r4, #4
    d974:	1859      	adds	r1, r3, r1
    d976:	7b09      	ldrb	r1, [r1, #12]
    d978:	0110      	lsls	r0, r2, #4
    d97a:	181b      	adds	r3, r3, r0
    d97c:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d97e:	4b1d      	ldr	r3, [pc, #116]	; (d9f4 <SwTimerStop+0x160>)
    d980:	681b      	ldr	r3, [r3, #0]
    d982:	429c      	cmp	r4, r3
    d984:	d1c9      	bne.n	d91a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d986:	4b1b      	ldr	r3, [pc, #108]	; (d9f4 <SwTimerStop+0x160>)
    d988:	601a      	str	r2, [r3, #0]
    d98a:	e7c6      	b.n	d91a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d98c:	4b19      	ldr	r3, [pc, #100]	; (d9f4 <SwTimerStop+0x160>)
    d98e:	681b      	ldr	r3, [r3, #0]
    d990:	4298      	cmp	r0, r3
    d992:	d006      	beq.n	d9a2 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d994:	0100      	lsls	r0, r0, #4
    d996:	4b13      	ldr	r3, [pc, #76]	; (d9e4 <SwTimerStop+0x150>)
    d998:	1818      	adds	r0, r3, r0
    d99a:	7b02      	ldrb	r2, [r0, #12]
    d99c:	4b14      	ldr	r3, [pc, #80]	; (d9f0 <SwTimerStop+0x15c>)
    d99e:	601a      	str	r2, [r3, #0]
    d9a0:	e7bb      	b.n	d91a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d9a2:	23ff      	movs	r3, #255	; 0xff
    d9a4:	4a13      	ldr	r2, [pc, #76]	; (d9f4 <SwTimerStop+0x160>)
    d9a6:	6013      	str	r3, [r2, #0]
    d9a8:	4a11      	ldr	r2, [pc, #68]	; (d9f0 <SwTimerStop+0x15c>)
    d9aa:	6013      	str	r3, [r2, #0]
    d9ac:	e7b5      	b.n	d91a <SwTimerStop+0x86>
    d9ae:	23ff      	movs	r3, #255	; 0xff
    d9b0:	422b      	tst	r3, r5
    d9b2:	d00a      	beq.n	d9ca <SwTimerStop+0x136>
    d9b4:	2300      	movs	r3, #0
		cpu_irq_enable();
    d9b6:	2101      	movs	r1, #1
    d9b8:	4a06      	ldr	r2, [pc, #24]	; (d9d4 <SwTimerStop+0x140>)
    d9ba:	7011      	strb	r1, [r2, #0]
    d9bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d9c0:	b662      	cpsie	i
    if (timerStopReqStatus)
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	d103      	bne.n	d9ce <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d9c6:	2015      	movs	r0, #21
    d9c8:	e76a      	b.n	d8a0 <SwTimerStop+0xc>
    d9ca:	2015      	movs	r0, #21
    d9cc:	e768      	b.n	d8a0 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d9ce:	2008      	movs	r0, #8
    d9d0:	e766      	b.n	d8a0 <SwTimerStop+0xc>
    d9d2:	46c0      	nop			; (mov r8, r8)
    d9d4:	20000014 	.word	0x20000014
    d9d8:	0000d3f9 	.word	0x0000d3f9
    d9dc:	20000f28 	.word	0x20000f28
    d9e0:	20000f24 	.word	0x20000f24
    d9e4:	20002860 	.word	0x20002860
    d9e8:	0000e391 	.word	0x0000e391
    d9ec:	0000d361 	.word	0x0000d361
    d9f0:	20000f1c 	.word	0x20000f1c
    d9f4:	20000f20 	.word	0x20000f20

0000d9f8 <SwTimerRunRemainingTime>:
{
    d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9fa:	b083      	sub	sp, #12
    d9fc:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d9fe:	4b0b      	ldr	r3, [pc, #44]	; (da2c <SwTimerRunRemainingTime+0x34>)
    da00:	681c      	ldr	r4, [r3, #0]
    da02:	0122      	lsls	r2, r4, #4
    da04:	4b0a      	ldr	r3, [pc, #40]	; (da30 <SwTimerRunRemainingTime+0x38>)
    da06:	189b      	adds	r3, r3, r2
    da08:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    da0a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    da0c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    da0e:	0020      	movs	r0, r4
    da10:	4b08      	ldr	r3, [pc, #32]	; (da34 <SwTimerRunRemainingTime+0x3c>)
    da12:	4798      	blx	r3
    da14:	2808      	cmp	r0, #8
    da16:	d001      	beq.n	da1c <SwTimerRunRemainingTime+0x24>
}
    da18:	b003      	add	sp, #12
    da1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    da1c:	9700      	str	r7, [sp, #0]
    da1e:	0033      	movs	r3, r6
    da20:	2200      	movs	r2, #0
    da22:	0029      	movs	r1, r5
    da24:	0020      	movs	r0, r4
    da26:	4c04      	ldr	r4, [pc, #16]	; (da38 <SwTimerRunRemainingTime+0x40>)
    da28:	47a0      	blx	r4
}
    da2a:	e7f5      	b.n	da18 <SwTimerRunRemainingTime+0x20>
    da2c:	20000f24 	.word	0x20000f24
    da30:	20002860 	.word	0x20002860
    da34:	0000d895 	.word	0x0000d895
    da38:	0000d57d 	.word	0x0000d57d

0000da3c <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    da3c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    da3e:	4b07      	ldr	r3, [pc, #28]	; (da5c <SystemTimerSuspend+0x20>)
    da40:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    da42:	4b07      	ldr	r3, [pc, #28]	; (da60 <SystemTimerSuspend+0x24>)
    da44:	881d      	ldrh	r5, [r3, #0]
    da46:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    da48:	4b06      	ldr	r3, [pc, #24]	; (da64 <SystemTimerSuspend+0x28>)
    da4a:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    da4c:	4b06      	ldr	r3, [pc, #24]	; (da68 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    da4e:	4328      	orrs	r0, r5
    da50:	6018      	str	r0, [r3, #0]
    da52:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    da54:	4b05      	ldr	r3, [pc, #20]	; (da6c <SystemTimerSuspend+0x30>)
    da56:	4798      	blx	r3
}
    da58:	bd70      	pop	{r4, r5, r6, pc}
    da5a:	46c0      	nop			; (mov r8, r8)
    da5c:	200029f4 	.word	0x200029f4
    da60:	200029f0 	.word	0x200029f0
    da64:	0000e345 	.word	0x0000e345
    da68:	20000f30 	.word	0x20000f30
    da6c:	0000e3d1 	.word	0x0000e3d1

0000da70 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    da70:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    da72:	4b22      	ldr	r3, [pc, #136]	; (dafc <SystemTimerSync+0x8c>)
    da74:	681c      	ldr	r4, [r3, #0]
    da76:	685d      	ldr	r5, [r3, #4]
    da78:	1900      	adds	r0, r0, r4
    da7a:	4169      	adcs	r1, r5
    da7c:	6018      	str	r0, [r3, #0]
    da7e:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    da80:	4b1f      	ldr	r3, [pc, #124]	; (db00 <SystemTimerSync+0x90>)
    da82:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    da84:	0c02      	lsrs	r2, r0, #16
    da86:	4b1f      	ldr	r3, [pc, #124]	; (db04 <SystemTimerSync+0x94>)
    da88:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    da8a:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    da8c:	4b1e      	ldr	r3, [pc, #120]	; (db08 <SystemTimerSync+0x98>)
    da8e:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    da90:	4a1e      	ldr	r2, [pc, #120]	; (db0c <SystemTimerSync+0x9c>)
    da92:	7812      	ldrb	r2, [r2, #0]
    da94:	2a00      	cmp	r2, #0
    da96:	d012      	beq.n	dabe <SystemTimerSync+0x4e>
    da98:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    da9a:	4c1d      	ldr	r4, [pc, #116]	; (db10 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    da9c:	4d1b      	ldr	r5, [pc, #108]	; (db0c <SystemTimerSync+0x9c>)
    da9e:	e005      	b.n	daac <SystemTimerSync+0x3c>
    daa0:	3201      	adds	r2, #1
    daa2:	b2d2      	uxtb	r2, r2
    daa4:	7829      	ldrb	r1, [r5, #0]
    daa6:	b2c9      	uxtb	r1, r1
    daa8:	4291      	cmp	r1, r2
    daaa:	d908      	bls.n	dabe <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    daac:	2bff      	cmp	r3, #255	; 0xff
    daae:	d0f7      	beq.n	daa0 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    dab0:	011b      	lsls	r3, r3, #4
    dab2:	5919      	ldr	r1, [r3, r4]
    dab4:	1a09      	subs	r1, r1, r0
    dab6:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    dab8:	18e3      	adds	r3, r4, r3
    daba:	7b1b      	ldrb	r3, [r3, #12]
    dabc:	e7f0      	b.n	daa0 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    dabe:	4b15      	ldr	r3, [pc, #84]	; (db14 <SystemTimerSync+0xa4>)
    dac0:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    dac2:	4815      	ldr	r0, [pc, #84]	; (db18 <SystemTimerSync+0xa8>)
    dac4:	4b15      	ldr	r3, [pc, #84]	; (db1c <SystemTimerSync+0xac>)
    dac6:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    dac8:	4815      	ldr	r0, [pc, #84]	; (db20 <SystemTimerSync+0xb0>)
    daca:	4b16      	ldr	r3, [pc, #88]	; (db24 <SystemTimerSync+0xb4>)
    dacc:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    dace:	4b0f      	ldr	r3, [pc, #60]	; (db0c <SystemTimerSync+0x9c>)
    dad0:	781b      	ldrb	r3, [r3, #0]
    dad2:	2b00      	cmp	r3, #0
    dad4:	d009      	beq.n	daea <SystemTimerSync+0x7a>
    dad6:	4b0c      	ldr	r3, [pc, #48]	; (db08 <SystemTimerSync+0x98>)
    dad8:	681b      	ldr	r3, [r3, #0]
    dada:	2bff      	cmp	r3, #255	; 0xff
    dadc:	d005      	beq.n	daea <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    dade:	4b12      	ldr	r3, [pc, #72]	; (db28 <SystemTimerSync+0xb8>)
    dae0:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    dae2:	28fe      	cmp	r0, #254	; 0xfe
    dae4:	d902      	bls.n	daec <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    dae6:	4b11      	ldr	r3, [pc, #68]	; (db2c <SystemTimerSync+0xbc>)
    dae8:	4798      	blx	r3
        }
    }
}
    daea:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    daec:	2201      	movs	r2, #1
    daee:	4b10      	ldr	r3, [pc, #64]	; (db30 <SystemTimerSync+0xc0>)
    daf0:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    daf2:	2001      	movs	r0, #1
    daf4:	4b0f      	ldr	r3, [pc, #60]	; (db34 <SystemTimerSync+0xc4>)
    daf6:	4798      	blx	r3
    daf8:	e7f7      	b.n	daea <SystemTimerSync+0x7a>
    dafa:	46c0      	nop			; (mov r8, r8)
    dafc:	20000f30 	.word	0x20000f30
    db00:	200029f4 	.word	0x200029f4
    db04:	200029f0 	.word	0x200029f0
    db08:	20000f24 	.word	0x20000f24
    db0c:	20000f28 	.word	0x20000f28
    db10:	20002860 	.word	0x20002860
    db14:	0000e459 	.word	0x0000e459
    db18:	0000d2a9 	.word	0x0000d2a9
    db1c:	0000e4dd 	.word	0x0000e4dd
    db20:	0000d281 	.word	0x0000d281
    db24:	0000e4e9 	.word	0x0000e4e9
    db28:	0000d779 	.word	0x0000d779
    db2c:	0000d9f9 	.word	0x0000d9f9
    db30:	200029f2 	.word	0x200029f2
    db34:	0000dc11 	.word	0x0000dc11

0000db38 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    db38:	b510      	push	{r4, lr}
    db3a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    db3c:	4b08      	ldr	r3, [pc, #32]	; (db60 <SwTimerTimestampCreate+0x28>)
    db3e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    db40:	2014      	movs	r0, #20
    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    db42:	2b01      	cmp	r3, #1
    db44:	d900      	bls.n	db48 <SwTimerTimestampCreate+0x10>
    }

    return retVal;
}
    db46:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    db48:	4b06      	ldr	r3, [pc, #24]	; (db64 <SwTimerTimestampCreate+0x2c>)
    db4a:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    db4c:	4a04      	ldr	r2, [pc, #16]	; (db60 <SwTimerTimestampCreate+0x28>)
    db4e:	7813      	ldrb	r3, [r2, #0]
    db50:	7023      	strb	r3, [r4, #0]
        allocatedTimestampId++;
    db52:	3301      	adds	r3, #1
    db54:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    db56:	4b04      	ldr	r3, [pc, #16]	; (db68 <SwTimerTimestampCreate+0x30>)
    db58:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    db5a:	2008      	movs	r0, #8
    db5c:	e7f3      	b.n	db46 <SwTimerTimestampCreate+0xe>
    db5e:	46c0      	nop			; (mov r8, r8)
    db60:	20000f19 	.word	0x20000f19
    db64:	000066e1 	.word	0x000066e1
    db68:	000066ed 	.word	0x000066ed

0000db6c <SwTimerReadTimestamp>:
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
	*timestamp = swTimestamp[index];
    db6c:	00c3      	lsls	r3, r0, #3
    db6e:	4803      	ldr	r0, [pc, #12]	; (db7c <SwTimerReadTimestamp+0x10>)
    db70:	18c0      	adds	r0, r0, r3
    db72:	6802      	ldr	r2, [r0, #0]
    db74:	6843      	ldr	r3, [r0, #4]
    db76:	600a      	str	r2, [r1, #0]
    db78:	604b      	str	r3, [r1, #4]
}
    db7a:	4770      	bx	lr
    db7c:	20002850 	.word	0x20002850

0000db80 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    db80:	680a      	ldr	r2, [r1, #0]
    db82:	684b      	ldr	r3, [r1, #4]
    db84:	00c1      	lsls	r1, r0, #3
    db86:	4802      	ldr	r0, [pc, #8]	; (db90 <SwTimerWriteTimestamp+0x10>)
    db88:	1840      	adds	r0, r0, r1
    db8a:	6002      	str	r2, [r0, #0]
    db8c:	6043      	str	r3, [r0, #4]
}
    db8e:	4770      	bx	lr
    db90:	20002850 	.word	0x20002850

0000db94 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    db94:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    db96:	2010      	movs	r0, #16
    db98:	4b01      	ldr	r3, [pc, #4]	; (dba0 <Stack_Init+0xc>)
    db9a:	4798      	blx	r3
}
    db9c:	bd10      	pop	{r4, pc}
    db9e:	46c0      	nop			; (mov r8, r8)
    dba0:	0000dc11 	.word	0x0000dc11

0000dba4 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    dba6:	4b16      	ldr	r3, [pc, #88]	; (dc00 <SYSTEM_RunTasks+0x5c>)
    dba8:	881b      	ldrh	r3, [r3, #0]
    dbaa:	b29b      	uxth	r3, r3
    dbac:	2b1f      	cmp	r3, #31
    dbae:	d922      	bls.n	dbf6 <SYSTEM_RunTasks+0x52>
    dbb0:	e7fe      	b.n	dbb0 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    dbb2:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    dbb4:	4b13      	ldr	r3, [pc, #76]	; (dc04 <SYSTEM_RunTasks+0x60>)
    dbb6:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    dbb8:	4911      	ldr	r1, [pc, #68]	; (dc00 <SYSTEM_RunTasks+0x5c>)
    dbba:	880b      	ldrh	r3, [r1, #0]
    dbbc:	2201      	movs	r2, #1
    dbbe:	40aa      	lsls	r2, r5
    dbc0:	4393      	bics	r3, r2
    dbc2:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    dbc4:	4b10      	ldr	r3, [pc, #64]	; (dc08 <SYSTEM_RunTasks+0x64>)
    dbc6:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    dbc8:	00ad      	lsls	r5, r5, #2
    dbca:	4b10      	ldr	r3, [pc, #64]	; (dc0c <SYSTEM_RunTasks+0x68>)
    dbcc:	58eb      	ldr	r3, [r5, r3]
    dbce:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    dbd0:	2101      	movs	r1, #1
        while (sysTaskFlag)
    dbd2:	883b      	ldrh	r3, [r7, #0]
    dbd4:	b29b      	uxth	r3, r3
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d011      	beq.n	dbfe <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    dbda:	8823      	ldrh	r3, [r4, #0]
    dbdc:	420b      	tst	r3, r1
    dbde:	d1e8      	bne.n	dbb2 <SYSTEM_RunTasks+0xe>
    dbe0:	2201      	movs	r2, #1
    dbe2:	8833      	ldrh	r3, [r6, #0]
    dbe4:	b29b      	uxth	r3, r3
    dbe6:	0015      	movs	r5, r2
    dbe8:	4113      	asrs	r3, r2
    dbea:	4219      	tst	r1, r3
    dbec:	d1e2      	bne.n	dbb4 <SYSTEM_RunTasks+0x10>
    dbee:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    dbf0:	2a05      	cmp	r2, #5
    dbf2:	d1f6      	bne.n	dbe2 <SYSTEM_RunTasks+0x3e>
    dbf4:	e7ed      	b.n	dbd2 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    dbf6:	4f02      	ldr	r7, [pc, #8]	; (dc00 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    dbf8:	003c      	movs	r4, r7
    dbfa:	003e      	movs	r6, r7
    dbfc:	e7e8      	b.n	dbd0 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc00:	20000f38 	.word	0x20000f38
    dc04:	000066e1 	.word	0x000066e1
    dc08:	000066ed 	.word	0x000066ed
    dc0c:	0001e8a8 	.word	0x0001e8a8

0000dc10 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    dc10:	b510      	push	{r4, lr}
    dc12:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    dc14:	4b04      	ldr	r3, [pc, #16]	; (dc28 <SYSTEM_PostTask+0x18>)
    dc16:	4798      	blx	r3
    sysTaskFlag |= task;
    dc18:	4b04      	ldr	r3, [pc, #16]	; (dc2c <SYSTEM_PostTask+0x1c>)
    dc1a:	8818      	ldrh	r0, [r3, #0]
    dc1c:	4320      	orrs	r0, r4
    dc1e:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    dc20:	4b03      	ldr	r3, [pc, #12]	; (dc30 <SYSTEM_PostTask+0x20>)
    dc22:	4798      	blx	r3
}
    dc24:	bd10      	pop	{r4, pc}
    dc26:	46c0      	nop			; (mov r8, r8)
    dc28:	000066e1 	.word	0x000066e1
    dc2c:	20000f38 	.word	0x20000f38
    dc30:	000066ed 	.word	0x000066ed

0000dc34 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    dc34:	4b03      	ldr	r3, [pc, #12]	; (dc44 <SYSTEM_ReadyToSleep+0x10>)
    dc36:	8818      	ldrh	r0, [r3, #0]
    dc38:	b280      	uxth	r0, r0
    dc3a:	4243      	negs	r3, r0
    dc3c:	4158      	adcs	r0, r3
    dc3e:	b2c0      	uxtb	r0, r0
}
    dc40:	4770      	bx	lr
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	20000f38 	.word	0x20000f38

0000dc48 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc4a:	46d6      	mov	lr, sl
    dc4c:	464f      	mov	r7, r9
    dc4e:	b580      	push	{r7, lr}
    dc50:	b083      	sub	sp, #12
    dc52:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    dc54:	2900      	cmp	r1, #0
    dc56:	d102      	bne.n	dc5e <Radio_WriteMode+0x16>
    dc58:	1f83      	subs	r3, r0, #6
    dc5a:	2b01      	cmp	r3, #1
    dc5c:	d92a      	bls.n	dcb4 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    dc5e:	2307      	movs	r3, #7
    dc60:	4699      	mov	r9, r3
    dc62:	001c      	movs	r4, r3
    dc64:	4004      	ands	r4, r0
    newModulation &= 0x01;
    dc66:	2601      	movs	r6, #1
    dc68:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    dc6a:	2001      	movs	r0, #1
    dc6c:	4b2b      	ldr	r3, [pc, #172]	; (dd1c <Radio_WriteMode+0xd4>)
    dc6e:	4798      	blx	r3
    dc70:	0005      	movs	r5, r0
    dc72:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    dc74:	b243      	sxtb	r3, r0
    dc76:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    dc78:	464b      	mov	r3, r9
    dc7a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    dc7c:	4652      	mov	r2, sl
    dc7e:	0fd2      	lsrs	r2, r2, #31
    dc80:	4296      	cmp	r6, r2
    dc82:	d00a      	beq.n	dc9a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    dc84:	2b00      	cmp	r3, #0
    dc86:	d11a      	bne.n	dcbe <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    dc88:	2e00      	cmp	r6, #0
    dc8a:	d11e      	bne.n	dcca <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    dc8c:	2778      	movs	r7, #120	; 0x78
    dc8e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc90:	0039      	movs	r1, r7
    dc92:	2001      	movs	r0, #1
    dc94:	4b22      	ldr	r3, [pc, #136]	; (dd20 <Radio_WriteMode+0xd8>)
    dc96:	4798      	blx	r3
    dc98:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    dc9a:	42a3      	cmp	r3, r4
    dc9c:	d00a      	beq.n	dcb4 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    dc9e:	2c00      	cmp	r4, #0
    dca0:	d030      	beq.n	dd04 <Radio_WriteMode+0xbc>
    dca2:	9b01      	ldr	r3, [sp, #4]
    dca4:	2b01      	cmp	r3, #1
    dca6:	d016      	beq.n	dcd6 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    dca8:	21f8      	movs	r1, #248	; 0xf8
    dcaa:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dcac:	4321      	orrs	r1, r4
    dcae:	2001      	movs	r0, #1
    dcb0:	4b1b      	ldr	r3, [pc, #108]	; (dd20 <Radio_WriteMode+0xd8>)
    dcb2:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    dcb4:	b003      	add	sp, #12
    dcb6:	bc0c      	pop	{r2, r3}
    dcb8:	4691      	mov	r9, r2
    dcba:	469a      	mov	sl, r3
    dcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    dcbe:	21f8      	movs	r1, #248	; 0xf8
    dcc0:	4001      	ands	r1, r0
    dcc2:	2001      	movs	r0, #1
    dcc4:	4b16      	ldr	r3, [pc, #88]	; (dd20 <Radio_WriteMode+0xd8>)
    dcc6:	4798      	blx	r3
    dcc8:	e7de      	b.n	dc88 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    dcca:	2778      	movs	r7, #120	; 0x78
    dccc:	4653      	mov	r3, sl
    dcce:	401f      	ands	r7, r3
    dcd0:	2180      	movs	r1, #128	; 0x80
    dcd2:	430f      	orrs	r7, r1
    dcd4:	e7dc      	b.n	dc90 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    dcd6:	2041      	movs	r0, #65	; 0x41
    dcd8:	4b10      	ldr	r3, [pc, #64]	; (dd1c <Radio_WriteMode+0xd4>)
    dcda:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    dcdc:	2e00      	cmp	r6, #0
    dcde:	d10e      	bne.n	dcfe <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    dce0:	2130      	movs	r1, #48	; 0x30
    dce2:	4301      	orrs	r1, r0
    dce4:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    dce6:	2041      	movs	r0, #65	; 0x41
    dce8:	4d0d      	ldr	r5, [pc, #52]	; (dd20 <Radio_WriteMode+0xd8>)
    dcea:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    dcec:	21f8      	movs	r1, #248	; 0xf8
    dcee:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dcf0:	4321      	orrs	r1, r4
    dcf2:	2001      	movs	r0, #1
    dcf4:	47a8      	blx	r5
			   delay_ms(1);
    dcf6:	2001      	movs	r0, #1
    dcf8:	4b0a      	ldr	r3, [pc, #40]	; (dd24 <Radio_WriteMode+0xdc>)
    dcfa:	4798      	blx	r3
    dcfc:	e7da      	b.n	dcb4 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    dcfe:	21cf      	movs	r1, #207	; 0xcf
    dd00:	4001      	ands	r1, r0
    dd02:	e7f0      	b.n	dce6 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    dd04:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dd06:	4039      	ands	r1, r7
    dd08:	2001      	movs	r0, #1
    dd0a:	4b05      	ldr	r3, [pc, #20]	; (dd20 <Radio_WriteMode+0xd8>)
    dd0c:	4798      	blx	r3
        if (1 == blocking)
    dd0e:	9b01      	ldr	r3, [sp, #4]
    dd10:	2b01      	cmp	r3, #1
    dd12:	d1cf      	bne.n	dcb4 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    dd14:	2001      	movs	r0, #1
    dd16:	4b04      	ldr	r3, [pc, #16]	; (dd28 <Radio_WriteMode+0xe0>)
    dd18:	4798      	blx	r3
    dd1a:	e7cb      	b.n	dcb4 <Radio_WriteMode+0x6c>
    dd1c:	0000646d 	.word	0x0000646d
    dd20:	00006445 	.word	0x00006445
    dd24:	000029e9 	.word	0x000029e9
    dd28:	000066a1 	.word	0x000066a1

0000dd2c <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    dd2c:	b500      	push	{lr}
    dd2e:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    dd30:	2012      	movs	r0, #18
    dd32:	4b0d      	ldr	r3, [pc, #52]	; (dd68 <RADIO_FHSSChangeChannel+0x3c>)
    dd34:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    dd36:	4b0d      	ldr	r3, [pc, #52]	; (dd6c <RADIO_FHSSChangeChannel+0x40>)
    dd38:	8adb      	ldrh	r3, [r3, #22]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d007      	beq.n	dd4e <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    dd3e:	4b0b      	ldr	r3, [pc, #44]	; (dd6c <RADIO_FHSSChangeChannel+0x40>)
    dd40:	691b      	ldr	r3, [r3, #16]
    dd42:	2b00      	cmp	r3, #0
    dd44:	d003      	beq.n	dd4e <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    dd46:	4a0a      	ldr	r2, [pc, #40]	; (dd70 <RADIO_FHSSChangeChannel+0x44>)
    dd48:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    dd4a:	0692      	lsls	r2, r2, #26
    dd4c:	d405      	bmi.n	dd5a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    dd4e:	2102      	movs	r1, #2
    dd50:	2012      	movs	r0, #18
    dd52:	4b08      	ldr	r3, [pc, #32]	; (dd74 <RADIO_FHSSChangeChannel+0x48>)
    dd54:	4798      	blx	r3
}
    dd56:	b003      	add	sp, #12
    dd58:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    dd5a:	a901      	add	r1, sp, #4
    dd5c:	2020      	movs	r0, #32
    dd5e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    dd60:	9801      	ldr	r0, [sp, #4]
    dd62:	4b05      	ldr	r3, [pc, #20]	; (dd78 <RADIO_FHSSChangeChannel+0x4c>)
    dd64:	4798      	blx	r3
    dd66:	e7f2      	b.n	dd4e <RADIO_FHSSChangeChannel+0x22>
    dd68:	0000646d 	.word	0x0000646d
    dd6c:	200029f8 	.word	0x200029f8
    dd70:	2000304a 	.word	0x2000304a
    dd74:	00006445 	.word	0x00006445
    dd78:	000137cd 	.word	0x000137cd

0000dd7c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    dd7e:	2000      	movs	r0, #0
    dd80:	4b1a      	ldr	r3, [pc, #104]	; (ddec <RADIO_ReadRandom+0x70>)
    dd82:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    dd84:	4b1a      	ldr	r3, [pc, #104]	; (ddf0 <RADIO_ReadRandom+0x74>)
    dd86:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    dd88:	2201      	movs	r2, #1
    dd8a:	2101      	movs	r1, #1
    dd8c:	2000      	movs	r0, #0
    dd8e:	4c19      	ldr	r4, [pc, #100]	; (ddf4 <RADIO_ReadRandom+0x78>)
    dd90:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    dd92:	21ff      	movs	r1, #255	; 0xff
    dd94:	2011      	movs	r0, #17
    dd96:	4b18      	ldr	r3, [pc, #96]	; (ddf8 <RADIO_ReadRandom+0x7c>)
    dd98:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    dd9a:	2201      	movs	r2, #1
    dd9c:	2101      	movs	r1, #1
    dd9e:	2005      	movs	r0, #5
    dda0:	47a0      	blx	r4
    dda2:	2410      	movs	r4, #16
    retVal = 0;
    dda4:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    dda6:	4f15      	ldr	r7, [pc, #84]	; (ddfc <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dda8:	4e15      	ldr	r6, [pc, #84]	; (de00 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    ddaa:	2001      	movs	r0, #1
    ddac:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ddae:	202c      	movs	r0, #44	; 0x2c
    ddb0:	47b0      	blx	r6
    ddb2:	2301      	movs	r3, #1
    ddb4:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    ddb6:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ddb8:	4305      	orrs	r5, r0
    ddba:	b2ad      	uxth	r5, r5
    ddbc:	3c01      	subs	r4, #1
    ddbe:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    ddc0:	2c00      	cmp	r4, #0
    ddc2:	d1f2      	bne.n	ddaa <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    ddc4:	2000      	movs	r0, #0
    ddc6:	4b0f      	ldr	r3, [pc, #60]	; (de04 <RADIO_ReadRandom+0x88>)
    ddc8:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    ddca:	2201      	movs	r2, #1
    ddcc:	2101      	movs	r1, #1
    ddce:	2000      	movs	r0, #0
    ddd0:	4b08      	ldr	r3, [pc, #32]	; (ddf4 <RADIO_ReadRandom+0x78>)
    ddd2:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    ddd4:	21ff      	movs	r1, #255	; 0xff
    ddd6:	2012      	movs	r0, #18
    ddd8:	4c07      	ldr	r4, [pc, #28]	; (ddf8 <RADIO_ReadRandom+0x7c>)
    ddda:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    dddc:	2100      	movs	r1, #0
    ddde:	2011      	movs	r0, #17
    dde0:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    dde2:	4b09      	ldr	r3, [pc, #36]	; (de08 <RADIO_ReadRandom+0x8c>)
    dde4:	4798      	blx	r3
	
    return retVal;
}
    dde6:	0028      	movs	r0, r5
    dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddea:	46c0      	nop			; (mov r8, r8)
    ddec:	00014089 	.word	0x00014089
    ddf0:	00014539 	.word	0x00014539
    ddf4:	0000dc49 	.word	0x0000dc49
    ddf8:	00006445 	.word	0x00006445
    ddfc:	000066a1 	.word	0x000066a1
    de00:	0000646d 	.word	0x0000646d
    de04:	000141b1 	.word	0x000141b1
    de08:	0001456d 	.word	0x0001456d

0000de0c <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    de0c:	b510      	push	{r4, lr}
    de0e:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    de10:	2011      	movs	r0, #17
    de12:	4b04      	ldr	r3, [pc, #16]	; (de24 <Radio_ReadFSKRssi+0x18>)
    de14:	4798      	blx	r3
    de16:	0840      	lsrs	r0, r0, #1
    de18:	b2c0      	uxtb	r0, r0
    de1a:	4240      	negs	r0, r0
    de1c:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    de1e:	2000      	movs	r0, #0
    de20:	bd10      	pop	{r4, pc}
    de22:	46c0      	nop			; (mov r8, r8)
    de24:	0000646d 	.word	0x0000646d

0000de28 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    de28:	b510      	push	{r4, lr}
	tmr_cca_callback();
    de2a:	4b01      	ldr	r3, [pc, #4]	; (de30 <tc_cca_callback+0x8>)
    de2c:	4798      	blx	r3
}
    de2e:	bd10      	pop	{r4, pc}
    de30:	0000e4c1 	.word	0x0000e4c1

0000de34 <tc_ovf_callback>:
{
    de34:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    de36:	4b01      	ldr	r3, [pc, #4]	; (de3c <tc_ovf_callback+0x8>)
    de38:	4798      	blx	r3
}
    de3a:	bd10      	pop	{r4, pc}
    de3c:	0000e479 	.word	0x0000e479

0000de40 <tmr_read_count>:
{
    de40:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    de42:	4802      	ldr	r0, [pc, #8]	; (de4c <tmr_read_count+0xc>)
    de44:	4b02      	ldr	r3, [pc, #8]	; (de50 <tmr_read_count+0x10>)
    de46:	4798      	blx	r3
    de48:	b280      	uxth	r0, r0
}
    de4a:	bd10      	pop	{r4, pc}
    de4c:	20002a8c 	.word	0x20002a8c
    de50:	00005b89 	.word	0x00005b89

0000de54 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    de54:	4b03      	ldr	r3, [pc, #12]	; (de64 <tmr_disable_cc_interrupt+0x10>)
    de56:	2110      	movs	r1, #16
    de58:	681a      	ldr	r2, [r3, #0]
    de5a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    de5c:	7e5a      	ldrb	r2, [r3, #25]
    de5e:	438a      	bics	r2, r1
    de60:	765a      	strb	r2, [r3, #25]
}
    de62:	4770      	bx	lr
    de64:	20002a8c 	.word	0x20002a8c

0000de68 <tmr_enable_cc_interrupt>:
{
    de68:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    de6a:	4c0b      	ldr	r4, [pc, #44]	; (de98 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    de6c:	2510      	movs	r5, #16
    de6e:	6823      	ldr	r3, [r4, #0]
    de70:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    de72:	0018      	movs	r0, r3
    de74:	4b09      	ldr	r3, [pc, #36]	; (de9c <tmr_enable_cc_interrupt+0x34>)
    de76:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    de78:	4b09      	ldr	r3, [pc, #36]	; (dea0 <tmr_enable_cc_interrupt+0x38>)
    de7a:	5c1b      	ldrb	r3, [r3, r0]
    de7c:	221f      	movs	r2, #31
    de7e:	401a      	ands	r2, r3
    de80:	2301      	movs	r3, #1
    de82:	4093      	lsls	r3, r2
    de84:	4a07      	ldr	r2, [pc, #28]	; (dea4 <tmr_enable_cc_interrupt+0x3c>)
    de86:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    de88:	7e63      	ldrb	r3, [r4, #25]
    de8a:	2210      	movs	r2, #16
    de8c:	4313      	orrs	r3, r2
    de8e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    de90:	6823      	ldr	r3, [r4, #0]
    de92:	725d      	strb	r5, [r3, #9]
}
    de94:	bd70      	pop	{r4, r5, r6, pc}
    de96:	46c0      	nop			; (mov r8, r8)
    de98:	20002a8c 	.word	0x20002a8c
    de9c:	0000585d 	.word	0x0000585d
    dea0:	0001e8bc 	.word	0x0001e8bc
    dea4:	e000e100 	.word	0xe000e100

0000dea8 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    dea8:	4b03      	ldr	r3, [pc, #12]	; (deb8 <tmr_disable_ovf_interrupt+0x10>)
    deaa:	2101      	movs	r1, #1
    deac:	681a      	ldr	r2, [r3, #0]
    deae:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    deb0:	7e5a      	ldrb	r2, [r3, #25]
    deb2:	438a      	bics	r2, r1
    deb4:	765a      	strb	r2, [r3, #25]
}
    deb6:	4770      	bx	lr
    deb8:	20002a8c 	.word	0x20002a8c

0000debc <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    debc:	4b06      	ldr	r3, [pc, #24]	; (ded8 <tmr_stop+0x1c>)
    debe:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    dec0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dec2:	2b00      	cmp	r3, #0
    dec4:	d1fc      	bne.n	dec0 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    dec6:	3333      	adds	r3, #51	; 0x33
    dec8:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    deca:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    decc:	6813      	ldr	r3, [r2, #0]
    dece:	2102      	movs	r1, #2
    ded0:	438b      	bics	r3, r1
    ded2:	6013      	str	r3, [r2, #0]
}
    ded4:	4770      	bx	lr
    ded6:	46c0      	nop			; (mov r8, r8)
    ded8:	20002a8c 	.word	0x20002a8c

0000dedc <tmr_write_cmpreg>:
{
    dedc:	b510      	push	{r4, lr}
    dede:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    dee0:	2100      	movs	r1, #0
    dee2:	4802      	ldr	r0, [pc, #8]	; (deec <tmr_write_cmpreg+0x10>)
    dee4:	4b02      	ldr	r3, [pc, #8]	; (def0 <tmr_write_cmpreg+0x14>)
    dee6:	4798      	blx	r3
}
    dee8:	bd10      	pop	{r4, pc}
    deea:	46c0      	nop			; (mov r8, r8)
    deec:	20002a8c 	.word	0x20002a8c
    def0:	00005bc9 	.word	0x00005bc9

0000def4 <save_cpu_interrupt>:
{
    def4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    def6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    defa:	425a      	negs	r2, r3
    defc:	4153      	adcs	r3, r2
    defe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    df00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    df02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    df06:	2200      	movs	r2, #0
    df08:	4b02      	ldr	r3, [pc, #8]	; (df14 <save_cpu_interrupt+0x20>)
    df0a:	701a      	strb	r2, [r3, #0]
	return flags;
    df0c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    df0e:	b2c0      	uxtb	r0, r0
}
    df10:	b002      	add	sp, #8
    df12:	4770      	bx	lr
    df14:	20000014 	.word	0x20000014

0000df18 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    df18:	2800      	cmp	r0, #0
    df1a:	d005      	beq.n	df28 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    df1c:	2201      	movs	r2, #1
    df1e:	4b03      	ldr	r3, [pc, #12]	; (df2c <restore_cpu_interrupt+0x14>)
    df20:	701a      	strb	r2, [r3, #0]
    df22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    df26:	b662      	cpsie	i
}
    df28:	4770      	bx	lr
    df2a:	46c0      	nop			; (mov r8, r8)
    df2c:	20000014 	.word	0x20000014

0000df30 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    df30:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    df32:	4a33      	ldr	r2, [pc, #204]	; (e000 <tmr_init+0xd0>)
    df34:	2100      	movs	r1, #0
    df36:	2300      	movs	r3, #0
    df38:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    df3a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    df3c:	2000      	movs	r0, #0
    df3e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    df40:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    df42:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    df44:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    df46:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    df48:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df4a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df4c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df4e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df50:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    df52:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    df54:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    df56:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    df58:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    df5a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    df5c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    df5e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    df60:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    df62:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    df64:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    df66:	2334      	movs	r3, #52	; 0x34
    df68:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    df6a:	3b35      	subs	r3, #53	; 0x35
    df6c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    df6e:	4c25      	ldr	r4, [pc, #148]	; (e004 <tmr_init+0xd4>)
    df70:	4925      	ldr	r1, [pc, #148]	; (e008 <tmr_init+0xd8>)
    df72:	0020      	movs	r0, r4
    df74:	4b25      	ldr	r3, [pc, #148]	; (e00c <tmr_init+0xdc>)
    df76:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    df78:	2200      	movs	r2, #0
    df7a:	4925      	ldr	r1, [pc, #148]	; (e010 <tmr_init+0xe0>)
    df7c:	0020      	movs	r0, r4
    df7e:	4d25      	ldr	r5, [pc, #148]	; (e014 <tmr_init+0xe4>)
    df80:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    df82:	2202      	movs	r2, #2
    df84:	4924      	ldr	r1, [pc, #144]	; (e018 <tmr_init+0xe8>)
    df86:	0020      	movs	r0, r4
    df88:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    df8a:	6820      	ldr	r0, [r4, #0]
    df8c:	4b23      	ldr	r3, [pc, #140]	; (e01c <tmr_init+0xec>)
    df8e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    df90:	4b23      	ldr	r3, [pc, #140]	; (e020 <tmr_init+0xf0>)
    df92:	5c1a      	ldrb	r2, [r3, r0]
    df94:	231f      	movs	r3, #31
    df96:	4013      	ands	r3, r2
    df98:	2101      	movs	r1, #1
    df9a:	000a      	movs	r2, r1
    df9c:	409a      	lsls	r2, r3
    df9e:	4b21      	ldr	r3, [pc, #132]	; (e024 <tmr_init+0xf4>)
    dfa0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    dfa2:	7e63      	ldrb	r3, [r4, #25]
    dfa4:	2201      	movs	r2, #1
    dfa6:	4313      	orrs	r3, r2
    dfa8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    dfaa:	6822      	ldr	r2, [r4, #0]
    dfac:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    dfae:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d1fc      	bne.n	dfae <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    dfb4:	6813      	ldr	r3, [r2, #0]
    dfb6:	2102      	movs	r1, #2
    dfb8:	430b      	orrs	r3, r1
    dfba:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    dfbc:	2000      	movs	r0, #0
    dfbe:	4b1a      	ldr	r3, [pc, #104]	; (e028 <tmr_init+0xf8>)
    dfc0:	4798      	blx	r3
    dfc2:	4d1a      	ldr	r5, [pc, #104]	; (e02c <tmr_init+0xfc>)
    dfc4:	47a8      	blx	r5
    dfc6:	491a      	ldr	r1, [pc, #104]	; (e030 <tmr_init+0x100>)
    dfc8:	4b1a      	ldr	r3, [pc, #104]	; (e034 <tmr_init+0x104>)
    dfca:	4798      	blx	r3
    dfcc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    dfce:	4b1a      	ldr	r3, [pc, #104]	; (e038 <tmr_init+0x108>)
    dfd0:	4798      	blx	r3
    dfd2:	47a8      	blx	r5
    dfd4:	1c01      	adds	r1, r0, #0
    dfd6:	1c20      	adds	r0, r4, #0
    dfd8:	4b18      	ldr	r3, [pc, #96]	; (e03c <tmr_init+0x10c>)
    dfda:	4798      	blx	r3
    dfdc:	21fc      	movs	r1, #252	; 0xfc
    dfde:	0589      	lsls	r1, r1, #22
    dfe0:	4b17      	ldr	r3, [pc, #92]	; (e040 <tmr_init+0x110>)
    dfe2:	4798      	blx	r3
    dfe4:	2800      	cmp	r0, #0
    dfe6:	d005      	beq.n	dff4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    dfe8:	21fe      	movs	r1, #254	; 0xfe
    dfea:	0589      	lsls	r1, r1, #22
    dfec:	1c20      	adds	r0, r4, #0
    dfee:	4b15      	ldr	r3, [pc, #84]	; (e044 <tmr_init+0x114>)
    dff0:	4798      	blx	r3
    dff2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    dff4:	1c20      	adds	r0, r4, #0
    dff6:	4b10      	ldr	r3, [pc, #64]	; (e038 <tmr_init+0x108>)
    dff8:	4798      	blx	r3
    dffa:	b2c0      	uxtb	r0, r0
}
    dffc:	bd70      	pop	{r4, r5, r6, pc}
    dffe:	46c0      	nop			; (mov r8, r8)
    e000:	20002a54 	.word	0x20002a54
    e004:	20002a8c 	.word	0x20002a8c
    e008:	42002000 	.word	0x42002000
    e00c:	00005899 	.word	0x00005899
    e010:	0000de35 	.word	0x0000de35
    e014:	00005775 	.word	0x00005775
    e018:	0000de29 	.word	0x0000de29
    e01c:	0000585d 	.word	0x0000585d
    e020:	0001e8bc 	.word	0x0001e8bc
    e024:	e000e100 	.word	0xe000e100
    e028:	0000553d 	.word	0x0000553d
    e02c:	00016349 	.word	0x00016349
    e030:	49742400 	.word	0x49742400
    e034:	00015911 	.word	0x00015911
    e038:	000153c1 	.word	0x000153c1
    e03c:	00015f31 	.word	0x00015f31
    e040:	00015319 	.word	0x00015319
    e044:	000155ed 	.word	0x000155ed

0000e048 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    e048:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    e04a:	2800      	cmp	r0, #0
    e04c:	d122      	bne.n	e094 <nvm_read+0x4c>
    e04e:	4814      	ldr	r0, [pc, #80]	; (e0a0 <nvm_read+0x58>)
    e050:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    e052:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    e054:	07e4      	lsls	r4, r4, #31
    e056:	d400      	bmi.n	e05a <nvm_read+0x12>
}
    e058:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e05a:	2420      	movs	r4, #32
    e05c:	34ff      	adds	r4, #255	; 0xff
    e05e:	4810      	ldr	r0, [pc, #64]	; (e0a0 <nvm_read+0x58>)
    e060:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    e062:	2b00      	cmp	r3, #0
    e064:	d019      	beq.n	e09a <nvm_read+0x52>
    e066:	2001      	movs	r0, #1
    e068:	4381      	bics	r1, r0
    e06a:	2000      	movs	r0, #0
    e06c:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    e06e:	1e5e      	subs	r6, r3, #1
    e070:	e005      	b.n	e07e <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    e072:	3002      	adds	r0, #2
    e074:	b280      	uxth	r0, r0
    e076:	0005      	movs	r5, r0
    e078:	3102      	adds	r1, #2
    e07a:	4283      	cmp	r3, r0
    e07c:	d908      	bls.n	e090 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    e07e:	880c      	ldrh	r4, [r1, #0]
    e080:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    e082:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    e084:	42ae      	cmp	r6, r5
    e086:	d9f4      	bls.n	e072 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    e088:	1955      	adds	r5, r2, r5
    e08a:	0a24      	lsrs	r4, r4, #8
    e08c:	706c      	strb	r4, [r5, #1]
    e08e:	e7f0      	b.n	e072 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    e090:	2000      	movs	r0, #0
    e092:	e7e1      	b.n	e058 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    e094:	2008      	movs	r0, #8
    e096:	4240      	negs	r0, r0
    e098:	e7de      	b.n	e058 <nvm_read+0x10>
	return STATUS_OK;
    e09a:	2000      	movs	r0, #0
    e09c:	e7dc      	b.n	e058 <nvm_read+0x10>
    e09e:	46c0      	nop			; (mov r8, r8)
    e0a0:	41004000 	.word	0x41004000

0000e0a4 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0a6:	46de      	mov	lr, fp
    e0a8:	4657      	mov	r7, sl
    e0aa:	464e      	mov	r6, r9
    e0ac:	4645      	mov	r5, r8
    e0ae:	b5e0      	push	{r5, r6, r7, lr}
    e0b0:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    e0b2:	2800      	cmp	r0, #0
    e0b4:	d168      	bne.n	e188 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    e0b6:	b29b      	uxth	r3, r3
    e0b8:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    e0ba:	4688      	mov	r8, r1
	uint32_t row_start_address
    e0bc:	23ff      	movs	r3, #255	; 0xff
    e0be:	4399      	bics	r1, r3
    e0c0:	9100      	str	r1, [sp, #0]
	while (length) {
    e0c2:	4653      	mov	r3, sl
    e0c4:	2b00      	cmp	r3, #0
    e0c6:	d06b      	beq.n	e1a0 <nvm_write+0xfc>
    e0c8:	ab04      	add	r3, sp, #16
    e0ca:	1a5b      	subs	r3, r3, r1
    e0cc:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    e0ce:	4e35      	ldr	r6, [pc, #212]	; (e1a4 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    e0d0:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <nvm_write+0x104>)
    e0d2:	469b      	mov	fp, r3
    e0d4:	9203      	str	r2, [sp, #12]
    e0d6:	e03a      	b.n	e14e <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    e0d8:	3301      	adds	r3, #1
		for (i = row_start_address;
    e0da:	42bb      	cmp	r3, r7
    e0dc:	d20e      	bcs.n	e0fc <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    e0de:	2a00      	cmp	r2, #0
    e0e0:	d0fa      	beq.n	e0d8 <nvm_write+0x34>
    e0e2:	4299      	cmp	r1, r3
    e0e4:	d1f8      	bne.n	e0d8 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    e0e6:	9d03      	ldr	r5, [sp, #12]
    e0e8:	7828      	ldrb	r0, [r5, #0]
    e0ea:	9c02      	ldr	r4, [sp, #8]
    e0ec:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    e0ee:	3101      	adds	r1, #1
				length--;
    e0f0:	3a01      	subs	r2, #1
    e0f2:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    e0f4:	0028      	movs	r0, r5
    e0f6:	3001      	adds	r0, #1
    e0f8:	9003      	str	r0, [sp, #12]
    e0fa:	e7ed      	b.n	e0d8 <nvm_write+0x34>
    e0fc:	4692      	mov	sl, r2
    e0fe:	4688      	mov	r8, r1
    e100:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    e102:	4b2a      	ldr	r3, [pc, #168]	; (e1ac <nvm_write+0x108>)
    e104:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    e106:	9800      	ldr	r0, [sp, #0]
    e108:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    e10a:	2805      	cmp	r0, #5
    e10c:	d0fb      	beq.n	e106 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    e10e:	2800      	cmp	r0, #0
    e110:	d13d      	bne.n	e18e <nvm_write+0xea>
    e112:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    e114:	4f26      	ldr	r7, [pc, #152]	; (e1b0 <nvm_write+0x10c>)
    e116:	9401      	str	r4, [sp, #4]
    e118:	9b00      	ldr	r3, [sp, #0]
    e11a:	1aec      	subs	r4, r5, r3
    e11c:	ab04      	add	r3, sp, #16
    e11e:	469c      	mov	ip, r3
    e120:	4464      	add	r4, ip
    e122:	2240      	movs	r2, #64	; 0x40
    e124:	0021      	movs	r1, r4
    e126:	0028      	movs	r0, r5
    e128:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    e12a:	2805      	cmp	r0, #5
    e12c:	d0f9      	beq.n	e122 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    e12e:	2800      	cmp	r0, #0
    e130:	d12d      	bne.n	e18e <nvm_write+0xea>
    e132:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    e134:	9b01      	ldr	r3, [sp, #4]
    e136:	42ab      	cmp	r3, r5
    e138:	d1ee      	bne.n	e118 <nvm_write+0x74>
	cpu_irq_leave_critical();
    e13a:	4b1e      	ldr	r3, [pc, #120]	; (e1b4 <nvm_write+0x110>)
    e13c:	4798      	blx	r3
    e13e:	9b02      	ldr	r3, [sp, #8]
    e140:	3b01      	subs	r3, #1
    e142:	3bff      	subs	r3, #255	; 0xff
    e144:	9302      	str	r3, [sp, #8]
    e146:	9500      	str	r5, [sp, #0]
	while (length) {
    e148:	4653      	mov	r3, sl
    e14a:	2b00      	cmp	r3, #0
    e14c:	d028      	beq.n	e1a0 <nvm_write+0xfc>
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	1c5f      	adds	r7, r3, #1
    e152:	37ff      	adds	r7, #255	; 0xff
{
    e154:	001c      	movs	r4, r3
    e156:	46b9      	mov	r9, r7
    e158:	001f      	movs	r7, r3
    e15a:	1be5      	subs	r5, r4, r7
    e15c:	ab04      	add	r3, sp, #16
    e15e:	469c      	mov	ip, r3
    e160:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    e162:	2240      	movs	r2, #64	; 0x40
    e164:	0029      	movs	r1, r5
    e166:	0020      	movs	r0, r4
    e168:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    e16a:	2805      	cmp	r0, #5
    e16c:	d0f9      	beq.n	e162 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    e16e:	2800      	cmp	r0, #0
    e170:	d10d      	bne.n	e18e <nvm_write+0xea>
    e172:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    e174:	454c      	cmp	r4, r9
    e176:	d1f0      	bne.n	e15a <nvm_write+0xb6>
    e178:	464f      	mov	r7, r9
		for (i = row_start_address;
    e17a:	9b00      	ldr	r3, [sp, #0]
    e17c:	429f      	cmp	r7, r3
    e17e:	d9c0      	bls.n	e102 <nvm_write+0x5e>
    e180:	4652      	mov	r2, sl
    e182:	4641      	mov	r1, r8
    e184:	9401      	str	r4, [sp, #4]
    e186:	e7aa      	b.n	e0de <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    e188:	2008      	movs	r0, #8
    e18a:	4240      	negs	r0, r0
    e18c:	e001      	b.n	e192 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    e18e:	2008      	movs	r0, #8
    e190:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    e192:	b045      	add	sp, #276	; 0x114
    e194:	bc3c      	pop	{r2, r3, r4, r5}
    e196:	4690      	mov	r8, r2
    e198:	4699      	mov	r9, r3
    e19a:	46a2      	mov	sl, r4
    e19c:	46ab      	mov	fp, r5
    e19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    e1a0:	2000      	movs	r0, #0
    e1a2:	e7f6      	b.n	e192 <nvm_write+0xee>
    e1a4:	00003179 	.word	0x00003179
    e1a8:	000031f9 	.word	0x000031f9
    e1ac:	00002a15 	.word	0x00002a15
    e1b0:	000030a1 	.word	0x000030a1
    e1b4:	00002a55 	.word	0x00002a55

0000e1b8 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    e1b8:	b500      	push	{lr}
    e1ba:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    e1bc:	2800      	cmp	r0, #0
    e1be:	d110      	bne.n	e1e2 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    e1c0:	2300      	movs	r3, #0
    e1c2:	466a      	mov	r2, sp
    e1c4:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    e1c6:	4a08      	ldr	r2, [pc, #32]	; (e1e8 <nvm_init+0x30>)
    e1c8:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    e1ca:	466a      	mov	r2, sp
    e1cc:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    e1ce:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    e1d0:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    e1d2:	3302      	adds	r3, #2
    e1d4:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    e1d6:	4668      	mov	r0, sp
    e1d8:	4b04      	ldr	r3, [pc, #16]	; (e1ec <nvm_init+0x34>)
    e1da:	4798      	blx	r3

		return STATUS_OK;
    e1dc:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    e1de:	b003      	add	sp, #12
    e1e0:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    e1e2:	2008      	movs	r0, #8
    e1e4:	4240      	negs	r0, r0
    e1e6:	e7fa      	b.n	e1de <nvm_init+0x26>
    e1e8:	41004000 	.word	0x41004000
    e1ec:	00002f39 	.word	0x00002f39

0000e1f0 <main>:
	}
	printf("\n\r");
}

int main(void)
{
    e1f0:	b570      	push	{r4, r5, r6, lr}
	system_init();
    e1f2:	4b30      	ldr	r3, [pc, #192]	; (e2b4 <main+0xc4>)
    e1f4:	4798      	blx	r3
	delay_init();
    e1f6:	4b30      	ldr	r3, [pc, #192]	; (e2b8 <main+0xc8>)
    e1f8:	4798      	blx	r3
	board_init();
    e1fa:	4b30      	ldr	r3, [pc, #192]	; (e2bc <main+0xcc>)
    e1fc:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable();
    e1fe:	2201      	movs	r2, #1
    e200:	4b2f      	ldr	r3, [pc, #188]	; (e2c0 <main+0xd0>)
    e202:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e204:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e208:	b662      	cpsie	i
	sio2host_init();
    e20a:	4b2e      	ldr	r3, [pc, #184]	; (e2c4 <main+0xd4>)
    e20c:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    e20e:	4b2e      	ldr	r3, [pc, #184]	; (e2c8 <main+0xd8>)
    e210:	781c      	ldrb	r4, [r3, #0]
    e212:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    e214:	482d      	ldr	r0, [pc, #180]	; (e2cc <main+0xdc>)
    e216:	4b2e      	ldr	r3, [pc, #184]	; (e2d0 <main+0xe0>)
    e218:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    e21a:	0663      	lsls	r3, r4, #25
    e21c:	d431      	bmi.n	e282 <main+0x92>
	if(rcause & (1 << 5)) {
    e21e:	06a3      	lsls	r3, r4, #26
    e220:	d433      	bmi.n	e28a <main+0x9a>
	if(rcause & (1 << 4)) {
    e222:	06e3      	lsls	r3, r4, #27
    e224:	d435      	bmi.n	e292 <main+0xa2>
	if(rcause & (1 << 2)) {
    e226:	0763      	lsls	r3, r4, #29
    e228:	d437      	bmi.n	e29a <main+0xaa>
	if(rcause & (1 << 1)) {
    e22a:	07a3      	lsls	r3, r4, #30
    e22c:	d439      	bmi.n	e2a2 <main+0xb2>
	if(rcause & (1 << 0)) {
    e22e:	07e3      	lsls	r3, r4, #31
    e230:	d43b      	bmi.n	e2aa <main+0xba>
#if (_DEBUG_ == 1)
	SYSTEM_AssertSubscribe(assertHandler);
#endif

	/* Configure board button as external interrupt pin */
	configure_extint();	
    e232:	4b28      	ldr	r3, [pc, #160]	; (e2d4 <main+0xe4>)
    e234:	4798      	blx	r3
	/* Register External Interrupt callback */
	configure_eic_callback();
    e236:	4b28      	ldr	r3, [pc, #160]	; (e2d8 <main+0xe8>)
    e238:	4798      	blx	r3
	printf("LoRaWAN Stack UP\r\n");
    e23a:	4828      	ldr	r0, [pc, #160]	; (e2dc <main+0xec>)
    e23c:	4b28      	ldr	r3, [pc, #160]	; (e2e0 <main+0xf0>)
    e23e:	4798      	blx	r3
	HAL_RadioInit();	
    e240:	4b28      	ldr	r3, [pc, #160]	; (e2e4 <main+0xf4>)
    e242:	4798      	blx	r3
	AESInit();
    e244:	4b28      	ldr	r3, [pc, #160]	; (e2e8 <main+0xf8>)
    e246:	4798      	blx	r3
#ifdef CRYPTO_DEV_ENABLED
	SAL_Init();	
#endif
	SystemTimerInit();
    e248:	4b28      	ldr	r3, [pc, #160]	; (e2ec <main+0xfc>)
    e24a:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
	SleepTimerInit();
    e24c:	4b28      	ldr	r3, [pc, #160]	; (e2f0 <main+0x100>)
    e24e:	4798      	blx	r3
#endif /* CONF_PMM_ENABLE */


#if (ENABLE_PDS == 1)	
 	PDS_Init();
    e250:	4b28      	ldr	r3, [pc, #160]	; (e2f4 <main+0x104>)
    e252:	4798      	blx	r3
#endif	
	Stack_Init();
    e254:	4b28      	ldr	r3, [pc, #160]	; (e2f8 <main+0x108>)
    e256:	4798      	blx	r3
	Parser_Init();
    e258:	4b28      	ldr	r3, [pc, #160]	; (e2fc <main+0x10c>)
    e25a:	4798      	blx	r3
    Parser_SetConfiguredJoinParameters(0x01);
    e25c:	2001      	movs	r0, #1
    e25e:	4b28      	ldr	r3, [pc, #160]	; (e300 <main+0x110>)
    e260:	4798      	blx	r3
    Parser_GetSwVersion(aParserData);
    e262:	4c28      	ldr	r4, [pc, #160]	; (e304 <main+0x114>)
    e264:	0020      	movs	r0, r4
    e266:	4b28      	ldr	r3, [pc, #160]	; (e308 <main+0x118>)
    e268:	4798      	blx	r3
    Parser_TxAddReply((char *)aParserData, (uint16_t)strlen((char *)aParserData));
    e26a:	0020      	movs	r0, r4
    e26c:	4b27      	ldr	r3, [pc, #156]	; (e30c <main+0x11c>)
    e26e:	4798      	blx	r3
    e270:	b281      	uxth	r1, r0
    e272:	0020      	movs	r0, r4
    e274:	4b26      	ldr	r3, [pc, #152]	; (e310 <main+0x120>)
    e276:	4798      	blx	r3

    while (1)
    {
		parser_serial_data_handler();
    e278:	4d26      	ldr	r5, [pc, #152]	; (e314 <main+0x124>)
		SYSTEM_RunTasks();
    e27a:	4c27      	ldr	r4, [pc, #156]	; (e318 <main+0x128>)
		parser_serial_data_handler();
    e27c:	47a8      	blx	r5
		SYSTEM_RunTasks();
    e27e:	47a0      	blx	r4
    e280:	e7fc      	b.n	e27c <main+0x8c>
		printf("System Reset Request\r\n");
    e282:	4826      	ldr	r0, [pc, #152]	; (e31c <main+0x12c>)
    e284:	4b16      	ldr	r3, [pc, #88]	; (e2e0 <main+0xf0>)
    e286:	4798      	blx	r3
    e288:	e7c9      	b.n	e21e <main+0x2e>
		printf("Watchdog Reset\r\n");
    e28a:	4825      	ldr	r0, [pc, #148]	; (e320 <main+0x130>)
    e28c:	4b14      	ldr	r3, [pc, #80]	; (e2e0 <main+0xf0>)
    e28e:	4798      	blx	r3
    e290:	e7c7      	b.n	e222 <main+0x32>
		printf("External Reset\r\n");
    e292:	4824      	ldr	r0, [pc, #144]	; (e324 <main+0x134>)
    e294:	4b12      	ldr	r3, [pc, #72]	; (e2e0 <main+0xf0>)
    e296:	4798      	blx	r3
    e298:	e7c5      	b.n	e226 <main+0x36>
		printf("Brown Out 33 Detector Reset\r\n");
    e29a:	4823      	ldr	r0, [pc, #140]	; (e328 <main+0x138>)
    e29c:	4b10      	ldr	r3, [pc, #64]	; (e2e0 <main+0xf0>)
    e29e:	4798      	blx	r3
    e2a0:	e7c3      	b.n	e22a <main+0x3a>
		printf("Brown Out 12 Detector Reset\r\n");
    e2a2:	4822      	ldr	r0, [pc, #136]	; (e32c <main+0x13c>)
    e2a4:	4b0e      	ldr	r3, [pc, #56]	; (e2e0 <main+0xf0>)
    e2a6:	4798      	blx	r3
    e2a8:	e7c1      	b.n	e22e <main+0x3e>
		printf("Power-On Reset\r\n");
    e2aa:	4821      	ldr	r0, [pc, #132]	; (e330 <main+0x140>)
    e2ac:	4b0c      	ldr	r3, [pc, #48]	; (e2e0 <main+0xf0>)
    e2ae:	4798      	blx	r3
    e2b0:	e7bf      	b.n	e232 <main+0x42>
    e2b2:	46c0      	nop			; (mov r8, r8)
    e2b4:	00005749 	.word	0x00005749
    e2b8:	0000297d 	.word	0x0000297d
    e2bc:	00002a85 	.word	0x00002a85
    e2c0:	20000014 	.word	0x20000014
    e2c4:	00005e61 	.word	0x00005e61
    e2c8:	40000800 	.word	0x40000800
    e2cc:	0001e8c4 	.word	0x0001e8c4
    e2d0:	0001882d 	.word	0x0001882d
    e2d4:	00002375 	.word	0x00002375
    e2d8:	000023a5 	.word	0x000023a5
    e2dc:	0001e964 	.word	0x0001e964
    e2e0:	000188f1 	.word	0x000188f1
    e2e4:	00006209 	.word	0x00006209
    e2e8:	0000c6cd 	.word	0x0000c6cd
    e2ec:	0000d4e1 	.word	0x0000d4e1
    e2f0:	000065f5 	.word	0x000065f5
    e2f4:	0000c835 	.word	0x0000c835
    e2f8:	0000db95 	.word	0x0000db95
    e2fc:	00000139 	.word	0x00000139
    e300:	00000785 	.word	0x00000785
    e304:	20000fac 	.word	0x20000fac
    e308:	000003d5 	.word	0x000003d5
    e30c:	00018bad 	.word	0x00018bad
    e310:	00002415 	.word	0x00002415
    e314:	00000115 	.word	0x00000115
    e318:	0000dba5 	.word	0x0000dba5
    e31c:	0001e8dc 	.word	0x0001e8dc
    e320:	0001e8f4 	.word	0x0001e8f4
    e324:	0001e904 	.word	0x0001e904
    e328:	0001e914 	.word	0x0001e914
    e32c:	0001e934 	.word	0x0001e934
    e330:	0001e954 	.word	0x0001e954

0000e334 <APP_TaskHandler>:
    }
}

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    e334:	b510      	push	{r4, lr}
	Parser_Main();
    e336:	4b02      	ldr	r3, [pc, #8]	; (e340 <APP_TaskHandler+0xc>)
    e338:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
}
    e33a:	2000      	movs	r0, #0
    e33c:	bd10      	pop	{r4, pc}
    e33e:	46c0      	nop			; (mov r8, r8)
    e340:	00000175 	.word	0x00000175

0000e344 <common_tc_read_count>:
    e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e346:	4b0d      	ldr	r3, [pc, #52]	; (e37c <common_tc_read_count+0x38>)
    e348:	4798      	blx	r3
    e34a:	4b0d      	ldr	r3, [pc, #52]	; (e380 <common_tc_read_count+0x3c>)
    e34c:	781b      	ldrb	r3, [r3, #0]
    e34e:	2b00      	cmp	r3, #0
    e350:	d00e      	beq.n	e370 <common_tc_read_count+0x2c>
    e352:	4b0c      	ldr	r3, [pc, #48]	; (e384 <common_tc_read_count+0x40>)
    e354:	781d      	ldrb	r5, [r3, #0]
    e356:	4b0a      	ldr	r3, [pc, #40]	; (e380 <common_tc_read_count+0x3c>)
    e358:	781f      	ldrb	r7, [r3, #0]
    e35a:	4c0b      	ldr	r4, [pc, #44]	; (e388 <common_tc_read_count+0x44>)
    e35c:	1c29      	adds	r1, r5, #0
    e35e:	47a0      	blx	r4
    e360:	1c06      	adds	r6, r0, #0
    e362:	480a      	ldr	r0, [pc, #40]	; (e38c <common_tc_read_count+0x48>)
    e364:	1c29      	adds	r1, r5, #0
    e366:	47a0      	blx	r4
    e368:	4378      	muls	r0, r7
    e36a:	1830      	adds	r0, r6, r0
    e36c:	b280      	uxth	r0, r0
    e36e:	e004      	b.n	e37a <common_tc_read_count+0x36>
    e370:	4b04      	ldr	r3, [pc, #16]	; (e384 <common_tc_read_count+0x40>)
    e372:	7819      	ldrb	r1, [r3, #0]
    e374:	4b04      	ldr	r3, [pc, #16]	; (e388 <common_tc_read_count+0x44>)
    e376:	4798      	blx	r3
    e378:	b280      	uxth	r0, r0
    e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e37c:	0000de41 	.word	0x0000de41
    e380:	20000f3c 	.word	0x20000f3c
    e384:	20002aa8 	.word	0x20002aa8
    e388:	00015065 	.word	0x00015065
    e38c:	0000ffff 	.word	0x0000ffff

0000e390 <common_tc_compare_stop>:
    e390:	b508      	push	{r3, lr}
    e392:	4b05      	ldr	r3, [pc, #20]	; (e3a8 <common_tc_compare_stop+0x18>)
    e394:	4798      	blx	r3
    e396:	4b05      	ldr	r3, [pc, #20]	; (e3ac <common_tc_compare_stop+0x1c>)
    e398:	4798      	blx	r3
    e39a:	4b05      	ldr	r3, [pc, #20]	; (e3b0 <common_tc_compare_stop+0x20>)
    e39c:	2200      	movs	r2, #0
    e39e:	605a      	str	r2, [r3, #4]
    e3a0:	811a      	strh	r2, [r3, #8]
    e3a2:	4b04      	ldr	r3, [pc, #16]	; (e3b4 <common_tc_compare_stop+0x24>)
    e3a4:	4798      	blx	r3
    e3a6:	bd08      	pop	{r3, pc}
    e3a8:	0000de55 	.word	0x0000de55
    e3ac:	0000def5 	.word	0x0000def5
    e3b0:	20000f3c 	.word	0x20000f3c
    e3b4:	0000df19 	.word	0x0000df19

0000e3b8 <common_tc_overflow_stop>:
    e3b8:	b508      	push	{r3, lr}
    e3ba:	4b03      	ldr	r3, [pc, #12]	; (e3c8 <common_tc_overflow_stop+0x10>)
    e3bc:	4798      	blx	r3
    e3be:	2200      	movs	r2, #0
    e3c0:	4b02      	ldr	r3, [pc, #8]	; (e3cc <common_tc_overflow_stop+0x14>)
    e3c2:	701a      	strb	r2, [r3, #0]
    e3c4:	bd08      	pop	{r3, pc}
    e3c6:	46c0      	nop			; (mov r8, r8)
    e3c8:	0000dea9 	.word	0x0000dea9
    e3cc:	20000f3c 	.word	0x20000f3c

0000e3d0 <common_tc_stop>:
    e3d0:	b508      	push	{r3, lr}
    e3d2:	4b03      	ldr	r3, [pc, #12]	; (e3e0 <common_tc_stop+0x10>)
    e3d4:	4798      	blx	r3
    e3d6:	4b03      	ldr	r3, [pc, #12]	; (e3e4 <common_tc_stop+0x14>)
    e3d8:	4798      	blx	r3
    e3da:	4b03      	ldr	r3, [pc, #12]	; (e3e8 <common_tc_stop+0x18>)
    e3dc:	4798      	blx	r3
    e3de:	bd08      	pop	{r3, pc}
    e3e0:	0000e391 	.word	0x0000e391
    e3e4:	0000e3b9 	.word	0x0000e3b9
    e3e8:	0000debd 	.word	0x0000debd

0000e3ec <common_tc_delay>:
    e3ec:	b510      	push	{r4, lr}
    e3ee:	1c04      	adds	r4, r0, #0
    e3f0:	4b13      	ldr	r3, [pc, #76]	; (e440 <common_tc_delay+0x54>)
    e3f2:	4798      	blx	r3
    e3f4:	4b13      	ldr	r3, [pc, #76]	; (e444 <common_tc_delay+0x58>)
    e3f6:	781a      	ldrb	r2, [r3, #0]
    e3f8:	4362      	muls	r2, r4
    e3fa:	1881      	adds	r1, r0, r2
    e3fc:	4b12      	ldr	r3, [pc, #72]	; (e448 <common_tc_delay+0x5c>)
    e3fe:	6059      	str	r1, [r3, #4]
    e400:	6859      	ldr	r1, [r3, #4]
    e402:	0c09      	lsrs	r1, r1, #16
    e404:	6059      	str	r1, [r3, #4]
    e406:	685b      	ldr	r3, [r3, #4]
    e408:	2b00      	cmp	r3, #0
    e40a:	d007      	beq.n	e41c <common_tc_delay+0x30>
    e40c:	4b0e      	ldr	r3, [pc, #56]	; (e448 <common_tc_delay+0x5c>)
    e40e:	6859      	ldr	r1, [r3, #4]
    e410:	3201      	adds	r2, #1
    e412:	1880      	adds	r0, r0, r2
    e414:	8118      	strh	r0, [r3, #8]
    e416:	4b0d      	ldr	r3, [pc, #52]	; (e44c <common_tc_delay+0x60>)
    e418:	4798      	blx	r3
    e41a:	e004      	b.n	e426 <common_tc_delay+0x3a>
    e41c:	1882      	adds	r2, r0, r2
    e41e:	4b0a      	ldr	r3, [pc, #40]	; (e448 <common_tc_delay+0x5c>)
    e420:	811a      	strh	r2, [r3, #8]
    e422:	4b0b      	ldr	r3, [pc, #44]	; (e450 <common_tc_delay+0x64>)
    e424:	4798      	blx	r3
    e426:	4b08      	ldr	r3, [pc, #32]	; (e448 <common_tc_delay+0x5c>)
    e428:	891b      	ldrh	r3, [r3, #8]
    e42a:	2b63      	cmp	r3, #99	; 0x63
    e42c:	d802      	bhi.n	e434 <common_tc_delay+0x48>
    e42e:	3364      	adds	r3, #100	; 0x64
    e430:	4a05      	ldr	r2, [pc, #20]	; (e448 <common_tc_delay+0x5c>)
    e432:	8113      	strh	r3, [r2, #8]
    e434:	4b04      	ldr	r3, [pc, #16]	; (e448 <common_tc_delay+0x5c>)
    e436:	8918      	ldrh	r0, [r3, #8]
    e438:	4b06      	ldr	r3, [pc, #24]	; (e454 <common_tc_delay+0x68>)
    e43a:	4798      	blx	r3
    e43c:	bd10      	pop	{r4, pc}
    e43e:	46c0      	nop			; (mov r8, r8)
    e440:	0000de41 	.word	0x0000de41
    e444:	20002aa8 	.word	0x20002aa8
    e448:	20000f3c 	.word	0x20000f3c
    e44c:	0000de55 	.word	0x0000de55
    e450:	0000de69 	.word	0x0000de69
    e454:	0000dedd 	.word	0x0000dedd

0000e458 <common_tc_init>:
    e458:	b508      	push	{r3, lr}
    e45a:	2200      	movs	r2, #0
    e45c:	4b03      	ldr	r3, [pc, #12]	; (e46c <common_tc_init+0x14>)
    e45e:	701a      	strb	r2, [r3, #0]
    e460:	4b03      	ldr	r3, [pc, #12]	; (e470 <common_tc_init+0x18>)
    e462:	4798      	blx	r3
    e464:	4b03      	ldr	r3, [pc, #12]	; (e474 <common_tc_init+0x1c>)
    e466:	7018      	strb	r0, [r3, #0]
    e468:	bd08      	pop	{r3, pc}
    e46a:	46c0      	nop			; (mov r8, r8)
    e46c:	20000f3c 	.word	0x20000f3c
    e470:	0000df31 	.word	0x0000df31
    e474:	20002aa8 	.word	0x20002aa8

0000e478 <tmr_ovf_callback>:
    e478:	b508      	push	{r3, lr}
    e47a:	4b0e      	ldr	r3, [pc, #56]	; (e4b4 <tmr_ovf_callback+0x3c>)
    e47c:	685b      	ldr	r3, [r3, #4]
    e47e:	2b00      	cmp	r3, #0
    e480:	d007      	beq.n	e492 <tmr_ovf_callback+0x1a>
    e482:	4a0c      	ldr	r2, [pc, #48]	; (e4b4 <tmr_ovf_callback+0x3c>)
    e484:	6853      	ldr	r3, [r2, #4]
    e486:	3b01      	subs	r3, #1
    e488:	6053      	str	r3, [r2, #4]
    e48a:	2b00      	cmp	r3, #0
    e48c:	d101      	bne.n	e492 <tmr_ovf_callback+0x1a>
    e48e:	4b0a      	ldr	r3, [pc, #40]	; (e4b8 <tmr_ovf_callback+0x40>)
    e490:	4798      	blx	r3
    e492:	4a08      	ldr	r2, [pc, #32]	; (e4b4 <tmr_ovf_callback+0x3c>)
    e494:	7813      	ldrb	r3, [r2, #0]
    e496:	3301      	adds	r3, #1
    e498:	b2db      	uxtb	r3, r3
    e49a:	7013      	strb	r3, [r2, #0]
    e49c:	4a07      	ldr	r2, [pc, #28]	; (e4bc <tmr_ovf_callback+0x44>)
    e49e:	7812      	ldrb	r2, [r2, #0]
    e4a0:	429a      	cmp	r2, r3
    e4a2:	d806      	bhi.n	e4b2 <tmr_ovf_callback+0x3a>
    e4a4:	4b03      	ldr	r3, [pc, #12]	; (e4b4 <tmr_ovf_callback+0x3c>)
    e4a6:	2200      	movs	r2, #0
    e4a8:	701a      	strb	r2, [r3, #0]
    e4aa:	68db      	ldr	r3, [r3, #12]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d000      	beq.n	e4b2 <tmr_ovf_callback+0x3a>
    e4b0:	4798      	blx	r3
    e4b2:	bd08      	pop	{r3, pc}
    e4b4:	20000f3c 	.word	0x20000f3c
    e4b8:	0000de69 	.word	0x0000de69
    e4bc:	20002aa8 	.word	0x20002aa8

0000e4c0 <tmr_cca_callback>:
    e4c0:	b508      	push	{r3, lr}
    e4c2:	4b04      	ldr	r3, [pc, #16]	; (e4d4 <tmr_cca_callback+0x14>)
    e4c4:	4798      	blx	r3
    e4c6:	4b04      	ldr	r3, [pc, #16]	; (e4d8 <tmr_cca_callback+0x18>)
    e4c8:	691b      	ldr	r3, [r3, #16]
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	d000      	beq.n	e4d0 <tmr_cca_callback+0x10>
    e4ce:	4798      	blx	r3
    e4d0:	bd08      	pop	{r3, pc}
    e4d2:	46c0      	nop			; (mov r8, r8)
    e4d4:	0000de55 	.word	0x0000de55
    e4d8:	20000f3c 	.word	0x20000f3c

0000e4dc <set_common_tc_overflow_callback>:
    e4dc:	4b01      	ldr	r3, [pc, #4]	; (e4e4 <set_common_tc_overflow_callback+0x8>)
    e4de:	60d8      	str	r0, [r3, #12]
    e4e0:	4770      	bx	lr
    e4e2:	46c0      	nop			; (mov r8, r8)
    e4e4:	20000f3c 	.word	0x20000f3c

0000e4e8 <set_common_tc_expiry_callback>:
    e4e8:	4b01      	ldr	r3, [pc, #4]	; (e4f0 <set_common_tc_expiry_callback+0x8>)
    e4ea:	6118      	str	r0, [r3, #16]
    e4ec:	4770      	bx	lr
    e4ee:	46c0      	nop			; (mov r8, r8)
    e4f0:	20000f3c 	.word	0x20000f3c

0000e4f4 <MacClearCommands>:
    e4f4:	490e      	ldr	r1, [pc, #56]	; (e530 <MacClearCommands+0x3c>)
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	000b      	movs	r3, r1
    e4fa:	33e0      	adds	r3, #224	; 0xe0
    e4fc:	7818      	ldrb	r0, [r3, #0]
    e4fe:	2303      	movs	r3, #3
    e500:	25a4      	movs	r5, #164	; 0xa4
    e502:	4343      	muls	r3, r0
    e504:	2401      	movs	r4, #1
    e506:	20ff      	movs	r0, #255	; 0xff
    e508:	3399      	adds	r3, #153	; 0x99
    e50a:	4a0a      	ldr	r2, [pc, #40]	; (e534 <MacClearCommands+0x40>)
    e50c:	185b      	adds	r3, r3, r1
    e50e:	00ed      	lsls	r5, r5, #3
    e510:	429a      	cmp	r2, r3
    e512:	d100      	bne.n	e516 <MacClearCommands+0x22>
    e514:	bd70      	pop	{r4, r5, r6, pc}
    e516:	7811      	ldrb	r1, [r2, #0]
    e518:	29ff      	cmp	r1, #255	; 0xff
    e51a:	d006      	beq.n	e52a <MacClearCommands+0x36>
    e51c:	290a      	cmp	r1, #10
    e51e:	d803      	bhi.n	e528 <MacClearCommands+0x34>
    e520:	0026      	movs	r6, r4
    e522:	408e      	lsls	r6, r1
    e524:	422e      	tst	r6, r5
    e526:	d100      	bne.n	e52a <MacClearCommands+0x36>
    e528:	7010      	strb	r0, [r2, #0]
    e52a:	3203      	adds	r2, #3
    e52c:	e7f0      	b.n	e510 <MacClearCommands+0x1c>
    e52e:	46c0      	nop			; (mov r8, r8)
    e530:	20002bd4 	.word	0x20002bd4
    e534:	20002c6d 	.word	0x20002c6d

0000e538 <CountfOptsLength>:
    e538:	2200      	movs	r2, #0
    e53a:	490d      	ldr	r1, [pc, #52]	; (e570 <CountfOptsLength+0x38>)
    e53c:	b570      	push	{r4, r5, r6, lr}
    e53e:	000b      	movs	r3, r1
    e540:	0010      	movs	r0, r2
    e542:	2503      	movs	r5, #3
    e544:	33e0      	adds	r3, #224	; 0xe0
    e546:	781c      	ldrb	r4, [r3, #0]
    e548:	4e0a      	ldr	r6, [pc, #40]	; (e574 <CountfOptsLength+0x3c>)
    e54a:	b2d3      	uxtb	r3, r2
    e54c:	429c      	cmp	r4, r3
    e54e:	d800      	bhi.n	e552 <CountfOptsLength+0x1a>
    e550:	bd70      	pop	{r4, r5, r6, pc}
    e552:	002b      	movs	r3, r5
    e554:	4353      	muls	r3, r2
    e556:	3399      	adds	r3, #153	; 0x99
    e558:	5ccb      	ldrb	r3, [r1, r3]
    e55a:	2bff      	cmp	r3, #255	; 0xff
    e55c:	d006      	beq.n	e56c <CountfOptsLength+0x34>
    e55e:	18f3      	adds	r3, r6, r3
    e560:	3b02      	subs	r3, #2
    e562:	781b      	ldrb	r3, [r3, #0]
    e564:	18c3      	adds	r3, r0, r3
    e566:	2b0f      	cmp	r3, #15
    e568:	dcf2      	bgt.n	e550 <CountfOptsLength+0x18>
    e56a:	b2d8      	uxtb	r0, r3
    e56c:	3201      	adds	r2, #1
    e56e:	e7ec      	b.n	e54a <CountfOptsLength+0x12>
    e570:	20002bd4 	.word	0x20002bd4
    e574:	0001e99f 	.word	0x0001e99f

0000e578 <StopAllSoftwareTimers>:
    e578:	b570      	push	{r4, r5, r6, lr}
    e57a:	4d17      	ldr	r5, [pc, #92]	; (e5d8 <StopAllSoftwareTimers+0x60>)
    e57c:	4c17      	ldr	r4, [pc, #92]	; (e5dc <StopAllSoftwareTimers+0x64>)
    e57e:	002b      	movs	r3, r5
    e580:	33eb      	adds	r3, #235	; 0xeb
    e582:	7818      	ldrb	r0, [r3, #0]
    e584:	47a0      	blx	r4
    e586:	002b      	movs	r3, r5
    e588:	33ec      	adds	r3, #236	; 0xec
    e58a:	7818      	ldrb	r0, [r3, #0]
    e58c:	47a0      	blx	r4
    e58e:	002b      	movs	r3, r5
    e590:	33f0      	adds	r3, #240	; 0xf0
    e592:	7818      	ldrb	r0, [r3, #0]
    e594:	47a0      	blx	r4
    e596:	002b      	movs	r3, r5
    e598:	33ed      	adds	r3, #237	; 0xed
    e59a:	7818      	ldrb	r0, [r3, #0]
    e59c:	47a0      	blx	r4
    e59e:	002b      	movs	r3, r5
    e5a0:	33ee      	adds	r3, #238	; 0xee
    e5a2:	7818      	ldrb	r0, [r3, #0]
    e5a4:	47a0      	blx	r4
    e5a6:	002b      	movs	r3, r5
    e5a8:	33f1      	adds	r3, #241	; 0xf1
    e5aa:	7818      	ldrb	r0, [r3, #0]
    e5ac:	47a0      	blx	r4
    e5ae:	002b      	movs	r3, r5
    e5b0:	33ef      	adds	r3, #239	; 0xef
    e5b2:	7818      	ldrb	r0, [r3, #0]
    e5b4:	47a0      	blx	r4
    e5b6:	002b      	movs	r3, r5
    e5b8:	33f2      	adds	r3, #242	; 0xf2
    e5ba:	7818      	ldrb	r0, [r3, #0]
    e5bc:	47a0      	blx	r4
    e5be:	002b      	movs	r3, r5
    e5c0:	33fb      	adds	r3, #251	; 0xfb
    e5c2:	7818      	ldrb	r0, [r3, #0]
    e5c4:	47a0      	blx	r4
    e5c6:	002b      	movs	r3, r5
    e5c8:	33fc      	adds	r3, #252	; 0xfc
    e5ca:	7818      	ldrb	r0, [r3, #0]
    e5cc:	47a0      	blx	r4
    e5ce:	2394      	movs	r3, #148	; 0x94
    e5d0:	005b      	lsls	r3, r3, #1
    e5d2:	5ce8      	ldrb	r0, [r5, r3]
    e5d4:	47a0      	blx	r4
    e5d6:	bd70      	pop	{r4, r5, r6, pc}
    e5d8:	20002bd4 	.word	0x20002bd4
    e5dc:	0000d895 	.word	0x0000d895

0000e5e0 <LorawanGetMaxPayloadSize>:
    e5e0:	b513      	push	{r0, r1, r4, lr}
    e5e2:	466b      	mov	r3, sp
    e5e4:	1ddc      	adds	r4, r3, #7
    e5e6:	2300      	movs	r3, #0
    e5e8:	0022      	movs	r2, r4
    e5ea:	7023      	strb	r3, [r4, #0]
    e5ec:	4903      	ldr	r1, [pc, #12]	; (e5fc <LorawanGetMaxPayloadSize+0x1c>)
    e5ee:	4b04      	ldr	r3, [pc, #16]	; (e600 <LorawanGetMaxPayloadSize+0x20>)
    e5f0:	2005      	movs	r0, #5
    e5f2:	4798      	blx	r3
    e5f4:	7820      	ldrb	r0, [r4, #0]
    e5f6:	3808      	subs	r0, #8
    e5f8:	b2c0      	uxtb	r0, r0
    e5fa:	bd16      	pop	{r1, r2, r4, pc}
    e5fc:	20002cbb 	.word	0x20002cbb
    e600:	0000bfdd 	.word	0x0000bfdd

0000e604 <UpdateReceiveDelays>:
    e604:	23fa      	movs	r3, #250	; 0xfa
    e606:	b570      	push	{r4, r5, r6, lr}
    e608:	009b      	lsls	r3, r3, #2
    e60a:	4c0b      	ldr	r4, [pc, #44]	; (e638 <UpdateReceiveDelays+0x34>)
    e60c:	2800      	cmp	r0, #0
    e60e:	d000      	beq.n	e612 <UpdateReceiveDelays+0xe>
    e610:	4343      	muls	r3, r0
    e612:	0022      	movs	r2, r4
    e614:	4d09      	ldr	r5, [pc, #36]	; (e63c <UpdateReceiveDelays+0x38>)
    e616:	32d0      	adds	r2, #208	; 0xd0
    e618:	210c      	movs	r1, #12
    e61a:	2000      	movs	r0, #0
    e61c:	8013      	strh	r3, [r2, #0]
    e61e:	47a8      	blx	r5
    e620:	0023      	movs	r3, r4
    e622:	22fa      	movs	r2, #250	; 0xfa
    e624:	33d0      	adds	r3, #208	; 0xd0
    e626:	881b      	ldrh	r3, [r3, #0]
    e628:	0092      	lsls	r2, r2, #2
    e62a:	189b      	adds	r3, r3, r2
    e62c:	34d2      	adds	r4, #210	; 0xd2
    e62e:	210d      	movs	r1, #13
    e630:	2000      	movs	r0, #0
    e632:	8023      	strh	r3, [r4, #0]
    e634:	47a8      	blx	r5
    e636:	bd70      	pop	{r4, r5, r6, pc}
    e638:	20002bd4 	.word	0x20002bd4
    e63c:	0000c84d 	.word	0x0000c84d

0000e640 <IncludeMacCommandsResponse>:
    e640:	b5f0      	push	{r4, r5, r6, r7, lr}
    e642:	0005      	movs	r5, r0
    e644:	2600      	movs	r6, #0
    e646:	b087      	sub	sp, #28
    e648:	880c      	ldrh	r4, [r1, #0]
    e64a:	9101      	str	r1, [sp, #4]
    e64c:	9203      	str	r2, [sp, #12]
    e64e:	4f77      	ldr	r7, [pc, #476]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e650:	003b      	movs	r3, r7
    e652:	33e0      	adds	r3, #224	; 0xe0
    e654:	781b      	ldrb	r3, [r3, #0]
    e656:	42b3      	cmp	r3, r6
    e658:	d913      	bls.n	e682 <IncludeMacCommandsResponse+0x42>
    e65a:	9b03      	ldr	r3, [sp, #12]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d019      	beq.n	e694 <IncludeMacCommandsResponse+0x54>
    e660:	2303      	movs	r3, #3
    e662:	4373      	muls	r3, r6
    e664:	18fb      	adds	r3, r7, r3
    e666:	3399      	adds	r3, #153	; 0x99
    e668:	7819      	ldrb	r1, [r3, #0]
    e66a:	29ff      	cmp	r1, #255	; 0xff
    e66c:	d012      	beq.n	e694 <IncludeMacCommandsResponse+0x54>
    e66e:	9b01      	ldr	r3, [sp, #4]
    e670:	881a      	ldrh	r2, [r3, #0]
    e672:	4b6f      	ldr	r3, [pc, #444]	; (e830 <IncludeMacCommandsResponse+0x1f0>)
    e674:	1aa2      	subs	r2, r4, r2
    e676:	185b      	adds	r3, r3, r1
    e678:	3b02      	subs	r3, #2
    e67a:	781b      	ldrb	r3, [r3, #0]
    e67c:	18d3      	adds	r3, r2, r3
    e67e:	2b0f      	cmp	r3, #15
    e680:	dd08      	ble.n	e694 <IncludeMacCommandsResponse+0x54>
    e682:	2207      	movs	r2, #7
    e684:	2100      	movs	r1, #0
    e686:	4b6b      	ldr	r3, [pc, #428]	; (e834 <IncludeMacCommandsResponse+0x1f4>)
    e688:	486b      	ldr	r0, [pc, #428]	; (e838 <IncludeMacCommandsResponse+0x1f8>)
    e68a:	4798      	blx	r3
    e68c:	9b01      	ldr	r3, [sp, #4]
    e68e:	801c      	strh	r4, [r3, #0]
    e690:	b007      	add	sp, #28
    e692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e694:	2303      	movs	r3, #3
    e696:	4373      	muls	r3, r6
    e698:	18fb      	adds	r3, r7, r3
    e69a:	3399      	adds	r3, #153	; 0x99
    e69c:	781b      	ldrb	r3, [r3, #0]
    e69e:	1e98      	subs	r0, r3, #2
    e6a0:	280b      	cmp	r0, #11
    e6a2:	d862      	bhi.n	e76a <IncludeMacCommandsResponse+0x12a>
    e6a4:	f006 fc36 	bl	14f14 <__gnu_thumb1_case_uqi>
    e6a8:	27a20698 	.word	0x27a20698
    e6ac:	7da26748 	.word	0x7da26748
    e6b0:	a6616182 	.word	0xa6616182
    e6b4:	2303      	movs	r3, #3
    e6b6:	2200      	movs	r2, #0
    e6b8:	552b      	strb	r3, [r5, r4]
    e6ba:	1c63      	adds	r3, r4, #1
    e6bc:	b29b      	uxth	r3, r3
    e6be:	18eb      	adds	r3, r5, r3
    e6c0:	4f5a      	ldr	r7, [pc, #360]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e6c2:	485e      	ldr	r0, [pc, #376]	; (e83c <IncludeMacCommandsResponse+0x1fc>)
    e6c4:	701a      	strb	r2, [r3, #0]
    e6c6:	5c39      	ldrb	r1, [r7, r0]
    e6c8:	3201      	adds	r2, #1
    e6ca:	4011      	ands	r1, r2
    e6cc:	466a      	mov	r2, sp
    e6ce:	9102      	str	r1, [sp, #8]
    e6d0:	7a12      	ldrb	r2, [r2, #8]
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	5c3a      	ldrb	r2, [r7, r0]
    e6d6:	4694      	mov	ip, r2
    e6d8:	2202      	movs	r2, #2
    e6da:	4661      	mov	r1, ip
    e6dc:	4211      	tst	r1, r2
    e6de:	d002      	beq.n	e6e6 <IncludeMacCommandsResponse+0xa6>
    e6e0:	9902      	ldr	r1, [sp, #8]
    e6e2:	430a      	orrs	r2, r1
    e6e4:	701a      	strb	r2, [r3, #0]
    e6e6:	2204      	movs	r2, #4
    e6e8:	5c39      	ldrb	r1, [r7, r0]
    e6ea:	4211      	tst	r1, r2
    e6ec:	d071      	beq.n	e7d2 <IncludeMacCommandsResponse+0x192>
    e6ee:	7819      	ldrb	r1, [r3, #0]
    e6f0:	430a      	orrs	r2, r1
    e6f2:	701a      	strb	r2, [r3, #0]
    e6f4:	e06d      	b.n	e7d2 <IncludeMacCommandsResponse+0x192>
    e6f6:	2305      	movs	r3, #5
    e6f8:	2103      	movs	r1, #3
    e6fa:	2200      	movs	r2, #0
    e6fc:	552b      	strb	r3, [r5, r4]
    e6fe:	1c63      	adds	r3, r4, #1
    e700:	b29b      	uxth	r3, r3
    e702:	4371      	muls	r1, r6
    e704:	18eb      	adds	r3, r5, r3
    e706:	701a      	strb	r2, [r3, #0]
    e708:	4a48      	ldr	r2, [pc, #288]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e70a:	1851      	adds	r1, r2, r1
    e70c:	3198      	adds	r1, #152	; 0x98
    e70e:	7888      	ldrb	r0, [r1, #2]
    e710:	0700      	lsls	r0, r0, #28
    e712:	0fc0      	lsrs	r0, r0, #31
    e714:	7018      	strb	r0, [r3, #0]
    e716:	7889      	ldrb	r1, [r1, #2]
    e718:	b2c7      	uxtb	r7, r0
    e71a:	06c9      	lsls	r1, r1, #27
    e71c:	d502      	bpl.n	e724 <IncludeMacCommandsResponse+0xe4>
    e71e:	2102      	movs	r1, #2
    e720:	4339      	orrs	r1, r7
    e722:	7019      	strb	r1, [r3, #0]
    e724:	2103      	movs	r1, #3
    e726:	4371      	muls	r1, r6
    e728:	1852      	adds	r2, r2, r1
    e72a:	3298      	adds	r2, #152	; 0x98
    e72c:	7892      	ldrb	r2, [r2, #2]
    e72e:	0692      	lsls	r2, r2, #26
    e730:	d54f      	bpl.n	e7d2 <IncludeMacCommandsResponse+0x192>
    e732:	7819      	ldrb	r1, [r3, #0]
    e734:	2204      	movs	r2, #4
    e736:	e7db      	b.n	e6f0 <IncludeMacCommandsResponse+0xb0>
    e738:	a904      	add	r1, sp, #16
    e73a:	4b41      	ldr	r3, [pc, #260]	; (e840 <IncludeMacCommandsResponse+0x200>)
    e73c:	200e      	movs	r0, #14
    e73e:	4798      	blx	r3
    e740:	2306      	movs	r3, #6
    e742:	4a3a      	ldr	r2, [pc, #232]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e744:	552b      	strb	r3, [r5, r4]
    e746:	32e8      	adds	r2, #232	; 0xe8
    e748:	7811      	ldrb	r1, [r2, #0]
    e74a:	1c62      	adds	r2, r4, #1
    e74c:	b292      	uxth	r2, r2
    e74e:	54a9      	strb	r1, [r5, r2]
    e750:	aa04      	add	r2, sp, #16
    e752:	7812      	ldrb	r2, [r2, #0]
    e754:	1ca3      	adds	r3, r4, #2
    e756:	0011      	movs	r1, r2
    e758:	3120      	adds	r1, #32
    e75a:	3403      	adds	r4, #3
    e75c:	b2c9      	uxtb	r1, r1
    e75e:	b29b      	uxth	r3, r3
    e760:	b2a4      	uxth	r4, r4
    e762:	293f      	cmp	r1, #63	; 0x3f
    e764:	d904      	bls.n	e770 <IncludeMacCommandsResponse+0x130>
    e766:	2220      	movs	r2, #32
    e768:	54ea      	strb	r2, [r5, r3]
    e76a:	3601      	adds	r6, #1
    e76c:	b2f6      	uxtb	r6, r6
    e76e:	e76e      	b.n	e64e <IncludeMacCommandsResponse+0xe>
    e770:	213f      	movs	r1, #63	; 0x3f
    e772:	400a      	ands	r2, r1
    e774:	e7f8      	b.n	e768 <IncludeMacCommandsResponse+0x128>
    e776:	2307      	movs	r3, #7
    e778:	2103      	movs	r1, #3
    e77a:	2200      	movs	r2, #0
    e77c:	552b      	strb	r3, [r5, r4]
    e77e:	1c63      	adds	r3, r4, #1
    e780:	4371      	muls	r1, r6
    e782:	b29b      	uxth	r3, r3
    e784:	18eb      	adds	r3, r5, r3
    e786:	701a      	strb	r2, [r3, #0]
    e788:	4a28      	ldr	r2, [pc, #160]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e78a:	1852      	adds	r2, r2, r1
    e78c:	3298      	adds	r2, #152	; 0x98
    e78e:	7891      	ldrb	r1, [r2, #2]
    e790:	09c9      	lsrs	r1, r1, #7
    e792:	7019      	strb	r1, [r3, #0]
    e794:	7892      	ldrb	r2, [r2, #2]
    e796:	b2c8      	uxtb	r0, r1
    e798:	0652      	lsls	r2, r2, #25
    e79a:	d51a      	bpl.n	e7d2 <IncludeMacCommandsResponse+0x192>
    e79c:	2202      	movs	r2, #2
    e79e:	4302      	orrs	r2, r0
    e7a0:	e7a7      	b.n	e6f2 <IncludeMacCommandsResponse+0xb2>
    e7a2:	2209      	movs	r2, #9
    e7a4:	1c63      	adds	r3, r4, #1
    e7a6:	552a      	strb	r2, [r5, r4]
    e7a8:	b29c      	uxth	r4, r3
    e7aa:	e7de      	b.n	e76a <IncludeMacCommandsResponse+0x12a>
    e7ac:	230a      	movs	r3, #10
    e7ae:	2103      	movs	r1, #3
    e7b0:	2200      	movs	r2, #0
    e7b2:	552b      	strb	r3, [r5, r4]
    e7b4:	1c63      	adds	r3, r4, #1
    e7b6:	4371      	muls	r1, r6
    e7b8:	b29b      	uxth	r3, r3
    e7ba:	18eb      	adds	r3, r5, r3
    e7bc:	701a      	strb	r2, [r3, #0]
    e7be:	4a1b      	ldr	r2, [pc, #108]	; (e82c <IncludeMacCommandsResponse+0x1ec>)
    e7c0:	1852      	adds	r2, r2, r1
    e7c2:	3298      	adds	r2, #152	; 0x98
    e7c4:	7891      	ldrb	r1, [r2, #2]
    e7c6:	09c9      	lsrs	r1, r1, #7
    e7c8:	7019      	strb	r1, [r3, #0]
    e7ca:	78d2      	ldrb	r2, [r2, #3]
    e7cc:	b2c8      	uxtb	r0, r1
    e7ce:	07d2      	lsls	r2, r2, #31
    e7d0:	d4e4      	bmi.n	e79c <IncludeMacCommandsResponse+0x15c>
    e7d2:	3402      	adds	r4, #2
    e7d4:	b2a4      	uxth	r4, r4
    e7d6:	e7c8      	b.n	e76a <IncludeMacCommandsResponse+0x12a>
    e7d8:	003b      	movs	r3, r7
    e7da:	22ff      	movs	r2, #255	; 0xff
    e7dc:	33e5      	adds	r3, #229	; 0xe5
    e7de:	701a      	strb	r2, [r3, #0]
    e7e0:	2300      	movs	r3, #0
    e7e2:	37e6      	adds	r7, #230	; 0xe6
    e7e4:	703b      	strb	r3, [r7, #0]
    e7e6:	3afd      	subs	r2, #253	; 0xfd
    e7e8:	1c63      	adds	r3, r4, #1
    e7ea:	e7dc      	b.n	e7a6 <IncludeMacCommandsResponse+0x166>
    e7ec:	1c62      	adds	r2, r4, #1
    e7ee:	552b      	strb	r3, [r5, r4]
    e7f0:	b294      	uxth	r4, r2
    e7f2:	e7ba      	b.n	e76a <IncludeMacCommandsResponse+0x12a>
    e7f4:	2201      	movs	r2, #1
    e7f6:	4252      	negs	r2, r2
    e7f8:	17d3      	asrs	r3, r2, #31
    e7fa:	9204      	str	r2, [sp, #16]
    e7fc:	9305      	str	r3, [sp, #20]
    e7fe:	4b11      	ldr	r3, [pc, #68]	; (e844 <IncludeMacCommandsResponse+0x204>)
    e800:	a904      	add	r1, sp, #16
    e802:	5cf8      	ldrb	r0, [r7, r3]
    e804:	4b10      	ldr	r3, [pc, #64]	; (e848 <IncludeMacCommandsResponse+0x208>)
    e806:	4798      	blx	r3
    e808:	2301      	movs	r3, #1
    e80a:	228d      	movs	r2, #141	; 0x8d
    e80c:	425b      	negs	r3, r3
    e80e:	0092      	lsls	r2, r2, #2
    e810:	50bb      	str	r3, [r7, r2]
    e812:	3204      	adds	r2, #4
    e814:	54bb      	strb	r3, [r7, r2]
    e816:	238c      	movs	r3, #140	; 0x8c
    e818:	2201      	movs	r2, #1
    e81a:	009b      	lsls	r3, r3, #2
    e81c:	54fa      	strb	r2, [r7, r3]
    e81e:	2303      	movs	r3, #3
    e820:	4373      	muls	r3, r6
    e822:	18ff      	adds	r7, r7, r3
    e824:	3799      	adds	r7, #153	; 0x99
    e826:	18a2      	adds	r2, r4, r2
    e828:	783b      	ldrb	r3, [r7, #0]
    e82a:	e7e0      	b.n	e7ee <IncludeMacCommandsResponse+0x1ae>
    e82c:	20002bd4 	.word	0x20002bd4
    e830:	0001e99f 	.word	0x0001e99f
    e834:	00018779 	.word	0x00018779
    e838:	20002df7 	.word	0x20002df7
    e83c:	00000223 	.word	0x00000223
    e840:	00013489 	.word	0x00013489
    e844:	00000231 	.word	0x00000231
    e848:	0000db81 	.word	0x0000db81

0000e84c <UpdateJoinSuccessState>:
    e84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e84e:	4c32      	ldr	r4, [pc, #200]	; (e918 <UpdateJoinSuccessState+0xcc>)
    e850:	2104      	movs	r1, #4
    e852:	0022      	movs	r2, r4
    e854:	3294      	adds	r2, #148	; 0x94
    e856:	7813      	ldrb	r3, [r2, #0]
    e858:	2001      	movs	r0, #1
    e85a:	438b      	bics	r3, r1
    e85c:	7013      	strb	r3, [r2, #0]
    e85e:	0022      	movs	r2, r4
    e860:	3284      	adds	r2, #132	; 0x84
    e862:	7813      	ldrb	r3, [r2, #0]
    e864:	b087      	sub	sp, #28
    e866:	4303      	orrs	r3, r0
    e868:	3107      	adds	r1, #7
    e86a:	4f2c      	ldr	r7, [pc, #176]	; (e91c <UpdateJoinSuccessState+0xd0>)
    e86c:	7013      	strb	r3, [r2, #0]
    e86e:	2500      	movs	r5, #0
    e870:	47b8      	blx	r7
    e872:	0023      	movs	r3, r4
    e874:	2115      	movs	r1, #21
    e876:	3388      	adds	r3, #136	; 0x88
    e878:	0028      	movs	r0, r5
    e87a:	601d      	str	r5, [r3, #0]
    e87c:	47b8      	blx	r7
    e87e:	0023      	movs	r3, r4
    e880:	2020      	movs	r0, #32
    e882:	33ff      	adds	r3, #255	; 0xff
    e884:	7f5b      	ldrb	r3, [r3, #29]
    e886:	4e26      	ldr	r6, [pc, #152]	; (e920 <UpdateJoinSuccessState+0xd4>)
    e888:	4203      	tst	r3, r0
    e88a:	d00c      	beq.n	e8a6 <UpdateJoinSuccessState+0x5a>
    e88c:	0023      	movs	r3, r4
    e88e:	a904      	add	r1, sp, #16
    e890:	3380      	adds	r3, #128	; 0x80
    e892:	710d      	strb	r5, [r1, #4]
    e894:	701d      	strb	r5, [r3, #0]
    e896:	6765      	str	r5, [r4, #116]	; 0x74
    e898:	67a5      	str	r5, [r4, #120]	; 0x78
    e89a:	47b0      	blx	r6
    e89c:	210f      	movs	r1, #15
    e89e:	2021      	movs	r0, #33	; 0x21
    e8a0:	4469      	add	r1, sp
    e8a2:	700d      	strb	r5, [r1, #0]
    e8a4:	47b0      	blx	r6
    e8a6:	0023      	movs	r3, r4
    e8a8:	2500      	movs	r5, #0
    e8aa:	338c      	adds	r3, #140	; 0x8c
    e8ac:	210a      	movs	r1, #10
    e8ae:	2001      	movs	r0, #1
    e8b0:	601d      	str	r5, [r3, #0]
    e8b2:	47b8      	blx	r7
    e8b4:	0023      	movs	r3, r4
    e8b6:	33ca      	adds	r3, #202	; 0xca
    e8b8:	801d      	strh	r5, [r3, #0]
    e8ba:	0022      	movs	r2, r4
    e8bc:	0023      	movs	r3, r4
    e8be:	210e      	movs	r1, #14
    e8c0:	3284      	adds	r2, #132	; 0x84
    e8c2:	33f6      	adds	r3, #246	; 0xf6
    e8c4:	701d      	strb	r5, [r3, #0]
    e8c6:	7813      	ldrb	r3, [r2, #0]
    e8c8:	2039      	movs	r0, #57	; 0x39
    e8ca:	438b      	bics	r3, r1
    e8cc:	0029      	movs	r1, r5
    e8ce:	7013      	strb	r3, [r2, #0]
    e8d0:	47b0      	blx	r6
    e8d2:	0023      	movs	r3, r4
    e8d4:	3385      	adds	r3, #133	; 0x85
    e8d6:	781b      	ldrb	r3, [r3, #0]
    e8d8:	079b      	lsls	r3, r3, #30
    e8da:	d50c      	bpl.n	e8f6 <UpdateJoinSuccessState+0xaa>
    e8dc:	0023      	movs	r3, r4
    e8de:	21fa      	movs	r1, #250	; 0xfa
    e8e0:	3390      	adds	r3, #144	; 0x90
    e8e2:	681b      	ldr	r3, [r3, #0]
    e8e4:	34f0      	adds	r4, #240	; 0xf0
    e8e6:	0089      	lsls	r1, r1, #2
    e8e8:	7820      	ldrb	r0, [r4, #0]
    e8ea:	4359      	muls	r1, r3
    e8ec:	9500      	str	r5, [sp, #0]
    e8ee:	4b0d      	ldr	r3, [pc, #52]	; (e924 <UpdateJoinSuccessState+0xd8>)
    e8f0:	002a      	movs	r2, r5
    e8f2:	4c0d      	ldr	r4, [pc, #52]	; (e928 <UpdateJoinSuccessState+0xdc>)
    e8f4:	47a0      	blx	r4
    e8f6:	490d      	ldr	r1, [pc, #52]	; (e92c <UpdateJoinSuccessState+0xe0>)
    e8f8:	794a      	ldrb	r2, [r1, #5]
    e8fa:	790b      	ldrb	r3, [r1, #4]
    e8fc:	0212      	lsls	r2, r2, #8
    e8fe:	431a      	orrs	r2, r3
    e900:	798b      	ldrb	r3, [r1, #6]
    e902:	041b      	lsls	r3, r3, #16
    e904:	431a      	orrs	r2, r3
    e906:	79cb      	ldrb	r3, [r1, #7]
    e908:	061b      	lsls	r3, r3, #24
    e90a:	4313      	orrs	r3, r2
    e90c:	d001      	beq.n	e912 <UpdateJoinSuccessState+0xc6>
    e90e:	2008      	movs	r0, #8
    e910:	4798      	blx	r3
    e912:	b007      	add	sp, #28
    e914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e916:	46c0      	nop			; (mov r8, r8)
    e918:	20002bd4 	.word	0x20002bd4
    e91c:	0000c84d 	.word	0x0000c84d
    e920:	0000c105 	.word	0x0000c105
    e924:	0000ea6d 	.word	0x0000ea6d
    e928:	0000d57d 	.word	0x0000d57d
    e92c:	20002f30 	.word	0x20002f30

0000e930 <PrepareSessionKeys>:
    e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e932:	0004      	movs	r4, r0
    e934:	2603      	movs	r6, #3
    e936:	000d      	movs	r5, r1
    e938:	0017      	movs	r7, r2
    e93a:	4b09      	ldr	r3, [pc, #36]	; (e960 <PrepareSessionKeys+0x30>)
    e93c:	2210      	movs	r2, #16
    e93e:	2100      	movs	r1, #0
    e940:	4798      	blx	r3
    e942:	0032      	movs	r2, r6
    e944:	0029      	movs	r1, r5
    e946:	1c60      	adds	r0, r4, #1
    e948:	4d06      	ldr	r5, [pc, #24]	; (e964 <PrepareSessionKeys+0x34>)
    e94a:	47a8      	blx	r5
    e94c:	0032      	movs	r2, r6
    e94e:	0039      	movs	r1, r7
    e950:	1d20      	adds	r0, r4, #4
    e952:	47a8      	blx	r5
    e954:	1de0      	adds	r0, r4, #7
    e956:	2202      	movs	r2, #2
    e958:	4903      	ldr	r1, [pc, #12]	; (e968 <PrepareSessionKeys+0x38>)
    e95a:	47a8      	blx	r5
    e95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e95e:	46c0      	nop			; (mov r8, r8)
    e960:	00018779 	.word	0x00018779
    e964:	00018655 	.word	0x00018655
    e968:	20002ca0 	.word	0x20002ca0

0000e96c <AssembleEncryptionBlock>:
    e96c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e96e:	001e      	movs	r6, r3
    e970:	4c0b      	ldr	r4, [pc, #44]	; (e9a0 <AssembleEncryptionBlock+0x34>)
    e972:	0017      	movs	r7, r2
    e974:	4b0b      	ldr	r3, [pc, #44]	; (e9a4 <AssembleEncryptionBlock+0x38>)
    e976:	0005      	movs	r5, r0
    e978:	9101      	str	r1, [sp, #4]
    e97a:	2210      	movs	r2, #16
    e97c:	2100      	movs	r1, #0
    e97e:	0020      	movs	r0, r4
    e980:	4798      	blx	r3
    e982:	7026      	strb	r6, [r4, #0]
    e984:	2604      	movs	r6, #4
    e986:	7165      	strb	r5, [r4, #5]
    e988:	0032      	movs	r2, r6
    e98a:	4d07      	ldr	r5, [pc, #28]	; (e9a8 <AssembleEncryptionBlock+0x3c>)
    e98c:	a908      	add	r1, sp, #32
    e98e:	1da0      	adds	r0, r4, #6
    e990:	47a8      	blx	r5
    e992:	0020      	movs	r0, r4
    e994:	0032      	movs	r2, r6
    e996:	a901      	add	r1, sp, #4
    e998:	300a      	adds	r0, #10
    e99a:	47a8      	blx	r5
    e99c:	73e7      	strb	r7, [r4, #15]
    e99e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e9a0:	20000f50 	.word	0x20000f50
    e9a4:	00018779 	.word	0x00018779
    e9a8:	00018655 	.word	0x00018655

0000e9ac <ConfigureRadio>:
    e9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e9ae:	0001      	movs	r1, r0
    e9b0:	0005      	movs	r5, r0
    e9b2:	4c11      	ldr	r4, [pc, #68]	; (e9f8 <ConfigureRadio+0x4c>)
    e9b4:	3109      	adds	r1, #9
    e9b6:	2009      	movs	r0, #9
    e9b8:	47a0      	blx	r4
    e9ba:	0029      	movs	r1, r5
    e9bc:	2001      	movs	r0, #1
    e9be:	47a0      	blx	r4
    e9c0:	1d29      	adds	r1, r5, #4
    e9c2:	200a      	movs	r0, #10
    e9c4:	47a0      	blx	r4
    e9c6:	7a6b      	ldrb	r3, [r5, #9]
    e9c8:	2b01      	cmp	r3, #1
    e9ca:	d10b      	bne.n	e9e4 <ConfigureRadio+0x38>
    e9cc:	0029      	movs	r1, r5
    e9ce:	2016      	movs	r0, #22
    e9d0:	310b      	adds	r1, #11
    e9d2:	47a0      	blx	r4
    e9d4:	0029      	movs	r1, r5
    e9d6:	2007      	movs	r0, #7
    e9d8:	310a      	adds	r1, #10
    e9da:	47a0      	blx	r4
    e9dc:	2000      	movs	r0, #0
    e9de:	4907      	ldr	r1, [pc, #28]	; (e9fc <ConfigureRadio+0x50>)
    e9e0:	47a0      	blx	r4
    e9e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e9e4:	466b      	mov	r3, sp
    e9e6:	1dd9      	adds	r1, r3, #7
    e9e8:	2303      	movs	r3, #3
    e9ea:	2013      	movs	r0, #19
    e9ec:	700b      	strb	r3, [r1, #0]
    e9ee:	47a0      	blx	r4
    e9f0:	4903      	ldr	r1, [pc, #12]	; (ea00 <ConfigureRadio+0x54>)
    e9f2:	2012      	movs	r0, #18
    e9f4:	e7f4      	b.n	e9e0 <ConfigureRadio+0x34>
    e9f6:	46c0      	nop			; (mov r8, r8)
    e9f8:	00013579 	.word	0x00013579
    e9fc:	20002cd4 	.word	0x20002cd4
    ea00:	0001e990 	.word	0x0001e990

0000ea04 <StopReceiveWindow2Timer>:
    ea04:	b510      	push	{r4, lr}
    ea06:	4c0b      	ldr	r4, [pc, #44]	; (ea34 <StopReceiveWindow2Timer+0x30>)
    ea08:	0022      	movs	r2, r4
    ea0a:	32fd      	adds	r2, #253	; 0xfd
    ea0c:	7812      	ldrb	r2, [r2, #0]
    ea0e:	2a01      	cmp	r2, #1
    ea10:	d10e      	bne.n	ea30 <StopReceiveWindow2Timer+0x2c>
    ea12:	0021      	movs	r1, r4
    ea14:	200e      	movs	r0, #14
    ea16:	3184      	adds	r1, #132	; 0x84
    ea18:	780a      	ldrb	r2, [r1, #0]
    ea1a:	34ee      	adds	r4, #238	; 0xee
    ea1c:	4382      	bics	r2, r0
    ea1e:	700a      	strb	r2, [r1, #0]
    ea20:	7820      	ldrb	r0, [r4, #0]
    ea22:	4b05      	ldr	r3, [pc, #20]	; (ea38 <StopReceiveWindow2Timer+0x34>)
    ea24:	4798      	blx	r3
    ea26:	2800      	cmp	r0, #0
    ea28:	d002      	beq.n	ea30 <StopReceiveWindow2Timer+0x2c>
    ea2a:	7820      	ldrb	r0, [r4, #0]
    ea2c:	4b03      	ldr	r3, [pc, #12]	; (ea3c <StopReceiveWindow2Timer+0x38>)
    ea2e:	4798      	blx	r3
    ea30:	bd10      	pop	{r4, pc}
    ea32:	46c0      	nop			; (mov r8, r8)
    ea34:	20002bd4 	.word	0x20002bd4
    ea38:	0000d715 	.word	0x0000d715
    ea3c:	0000d895 	.word	0x0000d895

0000ea40 <LorawanLinkCheckCallback.part.1>:
    ea40:	4b07      	ldr	r3, [pc, #28]	; (ea60 <LorawanLinkCheckCallback.part.1+0x20>)
    ea42:	b513      	push	{r0, r1, r4, lr}
    ea44:	001a      	movs	r2, r3
    ea46:	21fa      	movs	r1, #250	; 0xfa
    ea48:	3290      	adds	r2, #144	; 0x90
    ea4a:	6812      	ldr	r2, [r2, #0]
    ea4c:	0089      	lsls	r1, r1, #2
    ea4e:	4351      	muls	r1, r2
    ea50:	2200      	movs	r2, #0
    ea52:	33f0      	adds	r3, #240	; 0xf0
    ea54:	7818      	ldrb	r0, [r3, #0]
    ea56:	4c03      	ldr	r4, [pc, #12]	; (ea64 <LorawanLinkCheckCallback.part.1+0x24>)
    ea58:	9200      	str	r2, [sp, #0]
    ea5a:	4b03      	ldr	r3, [pc, #12]	; (ea68 <LorawanLinkCheckCallback.part.1+0x28>)
    ea5c:	47a0      	blx	r4
    ea5e:	bd13      	pop	{r0, r1, r4, pc}
    ea60:	20002bd4 	.word	0x20002bd4
    ea64:	0000d57d 	.word	0x0000d57d
    ea68:	0000ea6d 	.word	0x0000ea6d

0000ea6c <LorawanLinkCheckCallback>:
    ea6c:	4b17      	ldr	r3, [pc, #92]	; (eacc <LorawanLinkCheckCallback+0x60>)
    ea6e:	20a0      	movs	r0, #160	; 0xa0
    ea70:	001a      	movs	r2, r3
    ea72:	2180      	movs	r1, #128	; 0x80
    ea74:	b510      	push	{r4, lr}
    ea76:	3284      	adds	r2, #132	; 0x84
    ea78:	8812      	ldrh	r2, [r2, #0]
    ea7a:	0080      	lsls	r0, r0, #2
    ea7c:	0089      	lsls	r1, r1, #2
    ea7e:	4002      	ands	r2, r0
    ea80:	428a      	cmp	r2, r1
    ea82:	d11c      	bne.n	eabe <LorawanLinkCheckCallback+0x52>
    ea84:	001a      	movs	r2, r3
    ea86:	32e0      	adds	r2, #224	; 0xe0
    ea88:	7810      	ldrb	r0, [r2, #0]
    ea8a:	2403      	movs	r4, #3
    ea8c:	2200      	movs	r2, #0
    ea8e:	b2d1      	uxtb	r1, r2
    ea90:	4281      	cmp	r1, r0
    ea92:	d30d      	bcc.n	eab0 <LorawanLinkCheckCallback+0x44>
    ea94:	d113      	bne.n	eabe <LorawanLinkCheckCallback+0x52>
    ea96:	2203      	movs	r2, #3
    ea98:	434a      	muls	r2, r1
    ea9a:	2102      	movs	r1, #2
    ea9c:	189a      	adds	r2, r3, r2
    ea9e:	3299      	adds	r2, #153	; 0x99
    eaa0:	7011      	strb	r1, [r2, #0]
    eaa2:	280f      	cmp	r0, #15
    eaa4:	d80b      	bhi.n	eabe <LorawanLinkCheckCallback+0x52>
    eaa6:	001a      	movs	r2, r3
    eaa8:	3001      	adds	r0, #1
    eaaa:	32e0      	adds	r2, #224	; 0xe0
    eaac:	7010      	strb	r0, [r2, #0]
    eaae:	e006      	b.n	eabe <LorawanLinkCheckCallback+0x52>
    eab0:	0021      	movs	r1, r4
    eab2:	3201      	adds	r2, #1
    eab4:	4351      	muls	r1, r2
    eab6:	3196      	adds	r1, #150	; 0x96
    eab8:	5c59      	ldrb	r1, [r3, r1]
    eaba:	2902      	cmp	r1, #2
    eabc:	d1e7      	bne.n	ea8e <LorawanLinkCheckCallback+0x22>
    eabe:	3385      	adds	r3, #133	; 0x85
    eac0:	781b      	ldrb	r3, [r3, #0]
    eac2:	079b      	lsls	r3, r3, #30
    eac4:	d501      	bpl.n	eaca <LorawanLinkCheckCallback+0x5e>
    eac6:	4b02      	ldr	r3, [pc, #8]	; (ead0 <LorawanLinkCheckCallback+0x64>)
    eac8:	4798      	blx	r3
    eaca:	bd10      	pop	{r4, pc}
    eacc:	20002bd4 	.word	0x20002bd4
    ead0:	0000ea41 	.word	0x0000ea41

0000ead4 <LORAWAN_Init>:
    ead4:	2270      	movs	r2, #112	; 0x70
    ead6:	b5f0      	push	{r4, r5, r6, r7, lr}
    ead8:	4b52      	ldr	r3, [pc, #328]	; (ec24 <LORAWAN_Init+0x150>)
    eada:	b087      	sub	sp, #28
    eadc:	781b      	ldrb	r3, [r3, #0]
    eade:	0006      	movs	r6, r0
    eae0:	011b      	lsls	r3, r3, #4
    eae2:	4013      	ands	r3, r2
    eae4:	4a50      	ldr	r2, [pc, #320]	; (ec28 <LORAWAN_Init+0x154>)
    eae6:	000f      	movs	r7, r1
    eae8:	7812      	ldrb	r2, [r2, #0]
    eaea:	0912      	lsrs	r2, r2, #4
    eaec:	4313      	orrs	r3, r2
    eaee:	2b1f      	cmp	r3, #31
    eaf0:	d000      	beq.n	eaf4 <LORAWAN_Init+0x20>
    eaf2:	e7fe      	b.n	eaf2 <LORAWAN_Init+0x1e>
    eaf4:	4d4d      	ldr	r5, [pc, #308]	; (ec2c <LORAWAN_Init+0x158>)
    eaf6:	002b      	movs	r3, r5
    eaf8:	33f8      	adds	r3, #248	; 0xf8
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	2b00      	cmp	r3, #0
    eafe:	d000      	beq.n	eb02 <LORAWAN_Init+0x2e>
    eb00:	e08c      	b.n	ec1c <LORAWAN_Init+0x148>
    eb02:	484b      	ldr	r0, [pc, #300]	; (ec30 <LORAWAN_Init+0x15c>)
    eb04:	4c4b      	ldr	r4, [pc, #300]	; (ec34 <LORAWAN_Init+0x160>)
    eb06:	47a0      	blx	r4
    eb08:	2808      	cmp	r0, #8
    eb0a:	d050      	beq.n	ebae <LORAWAN_Init+0xda>
    eb0c:	4b4a      	ldr	r3, [pc, #296]	; (ec38 <LORAWAN_Init+0x164>)
    eb0e:	4798      	blx	r3
    eb10:	002b      	movs	r3, r5
    eb12:	33f8      	adds	r3, #248	; 0xf8
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d018      	beq.n	eb4c <LORAWAN_Init+0x78>
    eb1a:	4b48      	ldr	r3, [pc, #288]	; (ec3c <LORAWAN_Init+0x168>)
    eb1c:	0a32      	lsrs	r2, r6, #8
    eb1e:	705a      	strb	r2, [r3, #1]
    eb20:	0c32      	lsrs	r2, r6, #16
    eb22:	709a      	strb	r2, [r3, #2]
    eb24:	0a3a      	lsrs	r2, r7, #8
    eb26:	701e      	strb	r6, [r3, #0]
    eb28:	711f      	strb	r7, [r3, #4]
    eb2a:	715a      	strb	r2, [r3, #5]
    eb2c:	0e36      	lsrs	r6, r6, #24
    eb2e:	0c3a      	lsrs	r2, r7, #16
    eb30:	0e3f      	lsrs	r7, r7, #24
    eb32:	719a      	strb	r2, [r3, #6]
    eb34:	70de      	strb	r6, [r3, #3]
    eb36:	71df      	strb	r7, [r3, #7]
    eb38:	4b41      	ldr	r3, [pc, #260]	; (ec40 <LORAWAN_Init+0x16c>)
    eb3a:	4798      	blx	r3
    eb3c:	4941      	ldr	r1, [pc, #260]	; (ec44 <LORAWAN_Init+0x170>)
    eb3e:	4b42      	ldr	r3, [pc, #264]	; (ec48 <LORAWAN_Init+0x174>)
    eb40:	201a      	movs	r0, #26
    eb42:	4798      	blx	r3
    eb44:	4b41      	ldr	r3, [pc, #260]	; (ec4c <LORAWAN_Init+0x178>)
    eb46:	4798      	blx	r3
    eb48:	4b41      	ldr	r3, [pc, #260]	; (ec50 <LORAWAN_Init+0x17c>)
    eb4a:	4798      	blx	r3
    eb4c:	2317      	movs	r3, #23
    eb4e:	ac02      	add	r4, sp, #8
    eb50:	4a40      	ldr	r2, [pc, #256]	; (ec54 <LORAWAN_Init+0x180>)
    eb52:	7123      	strb	r3, [r4, #4]
    eb54:	4940      	ldr	r1, [pc, #256]	; (ec58 <LORAWAN_Init+0x184>)
    eb56:	4b41      	ldr	r3, [pc, #260]	; (ec5c <LORAWAN_Init+0x188>)
    eb58:	9205      	str	r2, [sp, #20]
    eb5a:	9200      	str	r2, [sp, #0]
    eb5c:	4e40      	ldr	r6, [pc, #256]	; (ec60 <LORAWAN_Init+0x18c>)
    eb5e:	9a03      	ldr	r2, [sp, #12]
    eb60:	2000      	movs	r0, #0
    eb62:	9102      	str	r1, [sp, #8]
    eb64:	9304      	str	r3, [sp, #16]
    eb66:	47b0      	blx	r6
    eb68:	2310      	movs	r3, #16
    eb6a:	4a3e      	ldr	r2, [pc, #248]	; (ec64 <LORAWAN_Init+0x190>)
    eb6c:	7123      	strb	r3, [r4, #4]
    eb6e:	4b3e      	ldr	r3, [pc, #248]	; (ec68 <LORAWAN_Init+0x194>)
    eb70:	60e2      	str	r2, [r4, #12]
    eb72:	60a3      	str	r3, [r4, #8]
    eb74:	493d      	ldr	r1, [pc, #244]	; (ec6c <LORAWAN_Init+0x198>)
    eb76:	9200      	str	r2, [sp, #0]
    eb78:	6862      	ldr	r2, [r4, #4]
    eb7a:	2001      	movs	r0, #1
    eb7c:	9102      	str	r1, [sp, #8]
    eb7e:	47b0      	blx	r6
    eb80:	2201      	movs	r2, #1
    eb82:	4252      	negs	r2, r2
    eb84:	17d3      	asrs	r3, r2, #31
    eb86:	9202      	str	r2, [sp, #8]
    eb88:	9303      	str	r3, [sp, #12]
    eb8a:	4b39      	ldr	r3, [pc, #228]	; (ec70 <LORAWAN_Init+0x19c>)
    eb8c:	0021      	movs	r1, r4
    eb8e:	5ce8      	ldrb	r0, [r5, r3]
    eb90:	4b38      	ldr	r3, [pc, #224]	; (ec74 <LORAWAN_Init+0x1a0>)
    eb92:	4798      	blx	r3
    eb94:	238e      	movs	r3, #142	; 0x8e
    eb96:	22ff      	movs	r2, #255	; 0xff
    eb98:	009b      	lsls	r3, r3, #2
    eb9a:	54ea      	strb	r2, [r5, r3]
    eb9c:	3a01      	subs	r2, #1
    eb9e:	3aff      	subs	r2, #255	; 0xff
    eba0:	3b04      	subs	r3, #4
    eba2:	50ea      	str	r2, [r5, r3]
    eba4:	2200      	movs	r2, #0
    eba6:	3b04      	subs	r3, #4
    eba8:	54ea      	strb	r2, [r5, r3]
    ebaa:	b007      	add	sp, #28
    ebac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebae:	4832      	ldr	r0, [pc, #200]	; (ec78 <LORAWAN_Init+0x1a4>)
    ebb0:	47a0      	blx	r4
    ebb2:	2808      	cmp	r0, #8
    ebb4:	d1aa      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebb6:	4831      	ldr	r0, [pc, #196]	; (ec7c <LORAWAN_Init+0x1a8>)
    ebb8:	47a0      	blx	r4
    ebba:	2808      	cmp	r0, #8
    ebbc:	d1a6      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebbe:	4830      	ldr	r0, [pc, #192]	; (ec80 <LORAWAN_Init+0x1ac>)
    ebc0:	47a0      	blx	r4
    ebc2:	2808      	cmp	r0, #8
    ebc4:	d1a2      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebc6:	482f      	ldr	r0, [pc, #188]	; (ec84 <LORAWAN_Init+0x1b0>)
    ebc8:	47a0      	blx	r4
    ebca:	2808      	cmp	r0, #8
    ebcc:	d19e      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebce:	482e      	ldr	r0, [pc, #184]	; (ec88 <LORAWAN_Init+0x1b4>)
    ebd0:	47a0      	blx	r4
    ebd2:	2808      	cmp	r0, #8
    ebd4:	d19a      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebd6:	482d      	ldr	r0, [pc, #180]	; (ec8c <LORAWAN_Init+0x1b8>)
    ebd8:	47a0      	blx	r4
    ebda:	2808      	cmp	r0, #8
    ebdc:	d196      	bne.n	eb0c <LORAWAN_Init+0x38>
    ebde:	482c      	ldr	r0, [pc, #176]	; (ec90 <LORAWAN_Init+0x1bc>)
    ebe0:	47a0      	blx	r4
    ebe2:	2808      	cmp	r0, #8
    ebe4:	d000      	beq.n	ebe8 <LORAWAN_Init+0x114>
    ebe6:	e791      	b.n	eb0c <LORAWAN_Init+0x38>
    ebe8:	482a      	ldr	r0, [pc, #168]	; (ec94 <LORAWAN_Init+0x1c0>)
    ebea:	47a0      	blx	r4
    ebec:	2808      	cmp	r0, #8
    ebee:	d000      	beq.n	ebf2 <LORAWAN_Init+0x11e>
    ebf0:	e78c      	b.n	eb0c <LORAWAN_Init+0x38>
    ebf2:	4829      	ldr	r0, [pc, #164]	; (ec98 <LORAWAN_Init+0x1c4>)
    ebf4:	47a0      	blx	r4
    ebf6:	2808      	cmp	r0, #8
    ebf8:	d000      	beq.n	ebfc <LORAWAN_Init+0x128>
    ebfa:	e787      	b.n	eb0c <LORAWAN_Init+0x38>
    ebfc:	4827      	ldr	r0, [pc, #156]	; (ec9c <LORAWAN_Init+0x1c8>)
    ebfe:	47a0      	blx	r4
    ec00:	2808      	cmp	r0, #8
    ec02:	d000      	beq.n	ec06 <LORAWAN_Init+0x132>
    ec04:	e782      	b.n	eb0c <LORAWAN_Init+0x38>
    ec06:	4826      	ldr	r0, [pc, #152]	; (eca0 <LORAWAN_Init+0x1cc>)
    ec08:	4b26      	ldr	r3, [pc, #152]	; (eca4 <LORAWAN_Init+0x1d0>)
    ec0a:	4798      	blx	r3
    ec0c:	2808      	cmp	r0, #8
    ec0e:	d000      	beq.n	ec12 <LORAWAN_Init+0x13e>
    ec10:	e77c      	b.n	eb0c <LORAWAN_Init+0x38>
    ec12:	002b      	movs	r3, r5
    ec14:	2201      	movs	r2, #1
    ec16:	33f8      	adds	r3, #248	; 0xf8
    ec18:	701a      	strb	r2, [r3, #0]
    ec1a:	e779      	b.n	eb10 <LORAWAN_Init+0x3c>
    ec1c:	4b22      	ldr	r3, [pc, #136]	; (eca8 <LORAWAN_Init+0x1d4>)
    ec1e:	4798      	blx	r3
    ec20:	e776      	b.n	eb10 <LORAWAN_Init+0x3c>
    ec22:	46c0      	nop			; (mov r8, r8)
    ec24:	41003fe8 	.word	0x41003fe8
    ec28:	41003fe4 	.word	0x41003fe4
    ec2c:	20002bd4 	.word	0x20002bd4
    ec30:	20002cbf 	.word	0x20002cbf
    ec34:	0000d549 	.word	0x0000d549
    ec38:	0000d48d 	.word	0x0000d48d
    ec3c:	20002f30 	.word	0x20002f30
    ec40:	00013775 	.word	0x00013775
    ec44:	000109c5 	.word	0x000109c5
    ec48:	00013579 	.word	0x00013579
    ec4c:	0000dd7d 	.word	0x0000dd7d
    ec50:	00018905 	.word	0x00018905
    ec54:	00013185 	.word	0x00013185
    ec58:	20002bbc 	.word	0x20002bbc
    ec5c:	0001e9c4 	.word	0x0001e9c4
    ec60:	0000cb31 	.word	0x0000cb31
    ec64:	00013189 	.word	0x00013189
    ec68:	0001ea7c 	.word	0x0001ea7c
    ec6c:	20002aac 	.word	0x20002aac
    ec70:	00000231 	.word	0x00000231
    ec74:	0000db81 	.word	0x0000db81
    ec78:	20002cc0 	.word	0x20002cc0
    ec7c:	20002cc1 	.word	0x20002cc1
    ec80:	20002cc2 	.word	0x20002cc2
    ec84:	20002cc4 	.word	0x20002cc4
    ec88:	20002cc5 	.word	0x20002cc5
    ec8c:	20002cc3 	.word	0x20002cc3
    ec90:	20002cc6 	.word	0x20002cc6
    ec94:	20002ccf 	.word	0x20002ccf
    ec98:	20002cd0 	.word	0x20002cd0
    ec9c:	20002cfc 	.word	0x20002cfc
    eca0:	20002e05 	.word	0x20002e05
    eca4:	0000db39 	.word	0x0000db39
    eca8:	0000e579 	.word	0x0000e579

0000ecac <LORAWAN_Send>:
    ecac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecae:	4c37      	ldr	r4, [pc, #220]	; (ed8c <LORAWAN_Send+0xe0>)
    ecb0:	0006      	movs	r6, r0
    ecb2:	0023      	movs	r3, r4
    ecb4:	3384      	adds	r3, #132	; 0x84
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	250f      	movs	r5, #15
    ecba:	b25a      	sxtb	r2, r3
    ecbc:	2a00      	cmp	r2, #0
    ecbe:	db0b      	blt.n	ecd8 <LORAWAN_Send+0x2c>
    ecc0:	3d03      	subs	r5, #3
    ecc2:	065a      	lsls	r2, r3, #25
    ecc4:	d408      	bmi.n	ecd8 <LORAWAN_Send+0x2c>
    ecc6:	3d03      	subs	r5, #3
    ecc8:	07db      	lsls	r3, r3, #31
    ecca:	d505      	bpl.n	ecd8 <LORAWAN_Send+0x2c>
    eccc:	2388      	movs	r3, #136	; 0x88
    ecce:	009b      	lsls	r3, r3, #2
    ecd0:	5ce7      	ldrb	r7, [r4, r3]
    ecd2:	2f00      	cmp	r7, #0
    ecd4:	d102      	bne.n	ecdc <LORAWAN_Send+0x30>
    ecd6:	2511      	movs	r5, #17
    ecd8:	0028      	movs	r0, r5
    ecda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ecdc:	2800      	cmp	r0, #0
    ecde:	d10f      	bne.n	ed00 <LORAWAN_Send+0x54>
    ece0:	2700      	movs	r7, #0
    ece2:	0023      	movs	r3, r4
    ece4:	3388      	adds	r3, #136	; 0x88
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	3301      	adds	r3, #1
    ecea:	d123      	bne.n	ed34 <LORAWAN_Send+0x88>
    ecec:	2001      	movs	r0, #1
    ecee:	3484      	adds	r4, #132	; 0x84
    ecf0:	78a3      	ldrb	r3, [r4, #2]
    ecf2:	210b      	movs	r1, #11
    ecf4:	4303      	orrs	r3, r0
    ecf6:	70a3      	strb	r3, [r4, #2]
    ecf8:	4b25      	ldr	r3, [pc, #148]	; (ed90 <LORAWAN_Send+0xe4>)
    ecfa:	4798      	blx	r3
    ecfc:	250d      	movs	r5, #13
    ecfe:	e7eb      	b.n	ecd8 <LORAWAN_Send+0x2c>
    ed00:	7843      	ldrb	r3, [r0, #1]
    ed02:	7a02      	ldrb	r2, [r0, #8]
    ed04:	3b01      	subs	r3, #1
    ed06:	b2db      	uxtb	r3, r3
    ed08:	9201      	str	r2, [sp, #4]
    ed0a:	2bdf      	cmp	r3, #223	; 0xdf
    ed0c:	d902      	bls.n	ed14 <LORAWAN_Send+0x68>
    ed0e:	250a      	movs	r5, #10
    ed10:	2a00      	cmp	r2, #0
    ed12:	d1e1      	bne.n	ecd8 <LORAWAN_Send+0x2c>
    ed14:	4b1f      	ldr	r3, [pc, #124]	; (ed94 <LORAWAN_Send+0xe8>)
    ed16:	4798      	blx	r3
    ed18:	4684      	mov	ip, r0
    ed1a:	9b01      	ldr	r3, [sp, #4]
    ed1c:	9000      	str	r0, [sp, #0]
    ed1e:	4463      	add	r3, ip
    ed20:	001d      	movs	r5, r3
    ed22:	4b1d      	ldr	r3, [pc, #116]	; (ed98 <LORAWAN_Send+0xec>)
    ed24:	4798      	blx	r3
    ed26:	4285      	cmp	r5, r0
    ed28:	ddda      	ble.n	ece0 <LORAWAN_Send+0x34>
    ed2a:	9b00      	ldr	r3, [sp, #0]
    ed2c:	250e      	movs	r5, #14
    ed2e:	2b00      	cmp	r3, #0
    ed30:	d0d2      	beq.n	ecd8 <LORAWAN_Send+0x2c>
    ed32:	e7d6      	b.n	ece2 <LORAWAN_Send+0x36>
    ed34:	0023      	movs	r3, r4
    ed36:	33fd      	adds	r3, #253	; 0xfd
    ed38:	781b      	ldrb	r3, [r3, #0]
    ed3a:	2b04      	cmp	r3, #4
    ed3c:	d01d      	beq.n	ed7a <LORAWAN_Send+0xce>
    ed3e:	0023      	movs	r3, r4
    ed40:	33fd      	adds	r3, #253	; 0xfd
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	2b01      	cmp	r3, #1
    ed46:	d105      	bne.n	ed54 <LORAWAN_Send+0xa8>
    ed48:	0023      	movs	r3, r4
    ed4a:	3384      	adds	r3, #132	; 0x84
    ed4c:	781a      	ldrb	r2, [r3, #0]
    ed4e:	230e      	movs	r3, #14
    ed50:	421a      	tst	r2, r3
    ed52:	d1c0      	bne.n	ecd6 <LORAWAN_Send+0x2a>
    ed54:	0023      	movs	r3, r4
    ed56:	33fc      	adds	r3, #252	; 0xfc
    ed58:	2f00      	cmp	r7, #0
    ed5a:	d113      	bne.n	ed84 <LORAWAN_Send+0xd8>
    ed5c:	2508      	movs	r5, #8
    ed5e:	60de      	str	r6, [r3, #12]
    ed60:	2388      	movs	r3, #136	; 0x88
    ed62:	2200      	movs	r2, #0
    ed64:	009b      	lsls	r3, r3, #2
    ed66:	54e2      	strb	r2, [r4, r3]
    ed68:	2001      	movs	r0, #1
    ed6a:	4b0c      	ldr	r3, [pc, #48]	; (ed9c <LORAWAN_Send+0xf0>)
    ed6c:	4798      	blx	r3
    ed6e:	2320      	movs	r3, #32
    ed70:	3494      	adds	r4, #148	; 0x94
    ed72:	7822      	ldrb	r2, [r4, #0]
    ed74:	4313      	orrs	r3, r2
    ed76:	7023      	strb	r3, [r4, #0]
    ed78:	e7ae      	b.n	ecd8 <LORAWAN_Send+0x2c>
    ed7a:	4b09      	ldr	r3, [pc, #36]	; (eda0 <LORAWAN_Send+0xf4>)
    ed7c:	4798      	blx	r3
    ed7e:	2808      	cmp	r0, #8
    ed80:	d1a9      	bne.n	ecd6 <LORAWAN_Send+0x2a>
    ed82:	e7dc      	b.n	ed3e <LORAWAN_Send+0x92>
    ed84:	2200      	movs	r2, #0
    ed86:	2511      	movs	r5, #17
    ed88:	60da      	str	r2, [r3, #12]
    ed8a:	e7e9      	b.n	ed60 <LORAWAN_Send+0xb4>
    ed8c:	20002bd4 	.word	0x20002bd4
    ed90:	0000c84d 	.word	0x0000c84d
    ed94:	0000e539 	.word	0x0000e539
    ed98:	0000e5e1 	.word	0x0000e5e1
    ed9c:	00013405 	.word	0x00013405
    eda0:	00012aa5 	.word	0x00012aa5

0000eda4 <AutomaticReplyCallback>:
    eda4:	b510      	push	{r4, lr}
    eda6:	4c0d      	ldr	r4, [pc, #52]	; (eddc <AutomaticReplyCallback+0x38>)
    eda8:	0023      	movs	r3, r4
    edaa:	33fd      	adds	r3, #253	; 0xfd
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	2b01      	cmp	r3, #1
    edb0:	d10e      	bne.n	edd0 <AutomaticReplyCallback+0x2c>
    edb2:	0022      	movs	r2, r4
    edb4:	210e      	movs	r1, #14
    edb6:	3284      	adds	r2, #132	; 0x84
    edb8:	7813      	ldrb	r3, [r2, #0]
    edba:	438b      	bics	r3, r1
    edbc:	7013      	strb	r3, [r2, #0]
    edbe:	4b08      	ldr	r3, [pc, #32]	; (ede0 <AutomaticReplyCallback+0x3c>)
    edc0:	2000      	movs	r0, #0
    edc2:	4798      	blx	r3
    edc4:	2208      	movs	r2, #8
    edc6:	3494      	adds	r4, #148	; 0x94
    edc8:	7823      	ldrb	r3, [r4, #0]
    edca:	4393      	bics	r3, r2
    edcc:	7023      	strb	r3, [r4, #0]
    edce:	bd10      	pop	{r4, pc}
    edd0:	2b04      	cmp	r3, #4
    edd2:	d1f4      	bne.n	edbe <AutomaticReplyCallback+0x1a>
    edd4:	4b03      	ldr	r3, [pc, #12]	; (ede4 <AutomaticReplyCallback+0x40>)
    edd6:	4798      	blx	r3
    edd8:	e7f1      	b.n	edbe <AutomaticReplyCallback+0x1a>
    edda:	46c0      	nop			; (mov r8, r8)
    eddc:	20002bd4 	.word	0x20002bd4
    ede0:	0000ecad 	.word	0x0000ecad
    ede4:	00013e8d 	.word	0x00013e8d

0000ede8 <LORAWAN_Pause>:
    ede8:	b510      	push	{r4, lr}
    edea:	4c2c      	ldr	r4, [pc, #176]	; (ee9c <LORAWAN_Pause+0xb4>)
    edec:	0023      	movs	r3, r4
    edee:	33fd      	adds	r3, #253	; 0xfd
    edf0:	781b      	ldrb	r3, [r3, #0]
    edf2:	2b04      	cmp	r3, #4
    edf4:	d110      	bne.n	ee18 <LORAWAN_Pause+0x30>
    edf6:	0023      	movs	r3, r4
    edf8:	3384      	adds	r3, #132	; 0x84
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	07db      	lsls	r3, r3, #31
    edfe:	d50b      	bpl.n	ee18 <LORAWAN_Pause+0x30>
    ee00:	4b27      	ldr	r3, [pc, #156]	; (eea0 <LORAWAN_Pause+0xb8>)
    ee02:	4798      	blx	r3
    ee04:	28c7      	cmp	r0, #199	; 0xc7
    ee06:	d942      	bls.n	ee8e <LORAWAN_Pause+0xa6>
    ee08:	2380      	movs	r3, #128	; 0x80
    ee0a:	3484      	adds	r4, #132	; 0x84
    ee0c:	7822      	ldrb	r2, [r4, #0]
    ee0e:	425b      	negs	r3, r3
    ee10:	4313      	orrs	r3, r2
    ee12:	3832      	subs	r0, #50	; 0x32
    ee14:	7023      	strb	r3, [r4, #0]
    ee16:	bd10      	pop	{r4, pc}
    ee18:	0023      	movs	r3, r4
    ee1a:	3384      	adds	r3, #132	; 0x84
    ee1c:	7818      	ldrb	r0, [r3, #0]
    ee1e:	0700      	lsls	r0, r0, #28
    ee20:	0f40      	lsrs	r0, r0, #29
    ee22:	2806      	cmp	r0, #6
    ee24:	d833      	bhi.n	ee8e <LORAWAN_Pause+0xa6>
    ee26:	f006 f875 	bl	14f14 <__gnu_thumb1_case_uqi>
    ee2a:	322f      	.short	0x322f
    ee2c:	321b3204 	.word	0x321b3204
    ee30:	2c          	.byte	0x2c
    ee31:	00          	.byte	0x00
    ee32:	0023      	movs	r3, r4
    ee34:	3394      	adds	r3, #148	; 0x94
    ee36:	781b      	ldrb	r3, [r3, #0]
    ee38:	075b      	lsls	r3, r3, #29
    ee3a:	d509      	bpl.n	ee50 <LORAWAN_Pause+0x68>
    ee3c:	0023      	movs	r3, r4
    ee3e:	33eb      	adds	r3, #235	; 0xeb
    ee40:	7818      	ldrb	r0, [r3, #0]
    ee42:	4b18      	ldr	r3, [pc, #96]	; (eea4 <LORAWAN_Pause+0xbc>)
    ee44:	4798      	blx	r3
    ee46:	21fa      	movs	r1, #250	; 0xfa
    ee48:	4b17      	ldr	r3, [pc, #92]	; (eea8 <LORAWAN_Pause+0xc0>)
    ee4a:	0089      	lsls	r1, r1, #2
    ee4c:	4798      	blx	r3
    ee4e:	e7d9      	b.n	ee04 <LORAWAN_Pause+0x1c>
    ee50:	0023      	movs	r3, r4
    ee52:	3384      	adds	r3, #132	; 0x84
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	07db      	lsls	r3, r3, #31
    ee58:	d519      	bpl.n	ee8e <LORAWAN_Pause+0xa6>
    ee5a:	0023      	movs	r3, r4
    ee5c:	33ed      	adds	r3, #237	; 0xed
    ee5e:	e7ef      	b.n	ee40 <LORAWAN_Pause+0x58>
    ee60:	0023      	movs	r3, r4
    ee62:	3394      	adds	r3, #148	; 0x94
    ee64:	7818      	ldrb	r0, [r3, #0]
    ee66:	2304      	movs	r3, #4
    ee68:	4018      	ands	r0, r3
    ee6a:	0023      	movs	r3, r4
    ee6c:	2800      	cmp	r0, #0
    ee6e:	d001      	beq.n	ee74 <LORAWAN_Pause+0x8c>
    ee70:	33ec      	adds	r3, #236	; 0xec
    ee72:	e7e5      	b.n	ee40 <LORAWAN_Pause+0x58>
    ee74:	3384      	adds	r3, #132	; 0x84
    ee76:	781b      	ldrb	r3, [r3, #0]
    ee78:	07db      	lsls	r3, r3, #31
    ee7a:	d5e4      	bpl.n	ee46 <LORAWAN_Pause+0x5e>
    ee7c:	0023      	movs	r3, r4
    ee7e:	33ee      	adds	r3, #238	; 0xee
    ee80:	e7de      	b.n	ee40 <LORAWAN_Pause+0x58>
    ee82:	0023      	movs	r3, r4
    ee84:	33f1      	adds	r3, #241	; 0xf1
    ee86:	e7db      	b.n	ee40 <LORAWAN_Pause+0x58>
    ee88:	2001      	movs	r0, #1
    ee8a:	4240      	negs	r0, r0
    ee8c:	e7bc      	b.n	ee08 <LORAWAN_Pause+0x20>
    ee8e:	227f      	movs	r2, #127	; 0x7f
    ee90:	3484      	adds	r4, #132	; 0x84
    ee92:	7823      	ldrb	r3, [r4, #0]
    ee94:	2000      	movs	r0, #0
    ee96:	4013      	ands	r3, r2
    ee98:	7023      	strb	r3, [r4, #0]
    ee9a:	e7bc      	b.n	ee16 <LORAWAN_Pause+0x2e>
    ee9c:	20002bd4 	.word	0x20002bd4
    eea0:	00012add 	.word	0x00012add
    eea4:	0000d729 	.word	0x0000d729
    eea8:	00014f51 	.word	0x00014f51

0000eeac <LORAWAN_Resume>:
    eeac:	217f      	movs	r1, #127	; 0x7f
    eeae:	4b03      	ldr	r3, [pc, #12]	; (eebc <LORAWAN_Resume+0x10>)
    eeb0:	3384      	adds	r3, #132	; 0x84
    eeb2:	781a      	ldrb	r2, [r3, #0]
    eeb4:	400a      	ands	r2, r1
    eeb6:	701a      	strb	r2, [r3, #0]
    eeb8:	4770      	bx	lr
    eeba:	46c0      	nop			; (mov r8, r8)
    eebc:	20002bd4 	.word	0x20002bd4

0000eec0 <LorawanLinkCheckConfigure>:
    eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eec2:	23fa      	movs	r3, #250	; 0xfa
    eec4:	4c21      	ldr	r4, [pc, #132]	; (ef4c <LorawanLinkCheckConfigure+0x8c>)
    eec6:	009b      	lsls	r3, r3, #2
    eec8:	0022      	movs	r2, r4
    eeca:	0025      	movs	r5, r4
    eecc:	4343      	muls	r3, r0
    eece:	3290      	adds	r2, #144	; 0x90
    eed0:	0006      	movs	r6, r0
    eed2:	2102      	movs	r1, #2
    eed4:	2000      	movs	r0, #0
    eed6:	4f1e      	ldr	r7, [pc, #120]	; (ef50 <LorawanLinkCheckConfigure+0x90>)
    eed8:	6013      	str	r3, [r2, #0]
    eeda:	3584      	adds	r5, #132	; 0x84
    eedc:	47b8      	blx	r7
    eede:	2e00      	cmp	r6, #0
    eee0:	d127      	bne.n	ef32 <LorawanLinkCheckConfigure+0x72>
    eee2:	0023      	movs	r3, r4
    eee4:	33f0      	adds	r3, #240	; 0xf0
    eee6:	7818      	ldrb	r0, [r3, #0]
    eee8:	4b1a      	ldr	r3, [pc, #104]	; (ef54 <LorawanLinkCheckConfigure+0x94>)
    eeea:	4798      	blx	r3
    eeec:	2202      	movs	r2, #2
    eeee:	786b      	ldrb	r3, [r5, #1]
    eef0:	210b      	movs	r1, #11
    eef2:	4393      	bics	r3, r2
    eef4:	706b      	strb	r3, [r5, #1]
    eef6:	2001      	movs	r0, #1
    eef8:	47b8      	blx	r7
    eefa:	0023      	movs	r3, r4
    eefc:	2701      	movs	r7, #1
    eefe:	33e0      	adds	r3, #224	; 0xe0
    ef00:	781b      	ldrb	r3, [r3, #0]
    ef02:	0030      	movs	r0, r6
    ef04:	0032      	movs	r2, r6
    ef06:	36ff      	adds	r6, #255	; 0xff
    ef08:	429a      	cmp	r2, r3
    ef0a:	d304      	bcc.n	ef16 <LorawanLinkCheckConfigure+0x56>
    ef0c:	2800      	cmp	r0, #0
    ef0e:	d001      	beq.n	ef14 <LorawanLinkCheckConfigure+0x54>
    ef10:	34e0      	adds	r4, #224	; 0xe0
    ef12:	7023      	strb	r3, [r4, #0]
    ef14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef16:	2103      	movs	r1, #3
    ef18:	4351      	muls	r1, r2
    ef1a:	1861      	adds	r1, r4, r1
    ef1c:	3199      	adds	r1, #153	; 0x99
    ef1e:	780d      	ldrb	r5, [r1, #0]
    ef20:	2d02      	cmp	r5, #2
    ef22:	d103      	bne.n	ef2c <LorawanLinkCheckConfigure+0x6c>
    ef24:	0038      	movs	r0, r7
    ef26:	3b01      	subs	r3, #1
    ef28:	700e      	strb	r6, [r1, #0]
    ef2a:	b2db      	uxtb	r3, r3
    ef2c:	3201      	adds	r2, #1
    ef2e:	b2d2      	uxtb	r2, r2
    ef30:	e7ea      	b.n	ef08 <LorawanLinkCheckConfigure+0x48>
    ef32:	2302      	movs	r3, #2
    ef34:	786a      	ldrb	r2, [r5, #1]
    ef36:	210b      	movs	r1, #11
    ef38:	4313      	orrs	r3, r2
    ef3a:	706b      	strb	r3, [r5, #1]
    ef3c:	2001      	movs	r0, #1
    ef3e:	47b8      	blx	r7
    ef40:	782b      	ldrb	r3, [r5, #0]
    ef42:	07db      	lsls	r3, r3, #31
    ef44:	d5e6      	bpl.n	ef14 <LorawanLinkCheckConfigure+0x54>
    ef46:	4b04      	ldr	r3, [pc, #16]	; (ef58 <LorawanLinkCheckConfigure+0x98>)
    ef48:	4798      	blx	r3
    ef4a:	e7e3      	b.n	ef14 <LorawanLinkCheckConfigure+0x54>
    ef4c:	20002bd4 	.word	0x20002bd4
    ef50:	0000c84d 	.word	0x0000c84d
    ef54:	0000d895 	.word	0x0000d895
    ef58:	0000ea41 	.word	0x0000ea41

0000ef5c <EncodeDeviceTimeReq>:
    ef5c:	4b08      	ldr	r3, [pc, #32]	; (ef80 <EncodeDeviceTimeReq+0x24>)
    ef5e:	b510      	push	{r4, lr}
    ef60:	001c      	movs	r4, r3
    ef62:	34e0      	adds	r4, #224	; 0xe0
    ef64:	7822      	ldrb	r2, [r4, #0]
    ef66:	2015      	movs	r0, #21
    ef68:	2a0f      	cmp	r2, #15
    ef6a:	d808      	bhi.n	ef7e <EncodeDeviceTimeReq+0x22>
    ef6c:	2103      	movs	r1, #3
    ef6e:	4351      	muls	r1, r2
    ef70:	185b      	adds	r3, r3, r1
    ef72:	210d      	movs	r1, #13
    ef74:	3399      	adds	r3, #153	; 0x99
    ef76:	3201      	adds	r2, #1
    ef78:	7019      	strb	r1, [r3, #0]
    ef7a:	7022      	strb	r2, [r4, #0]
    ef7c:	380d      	subs	r0, #13
    ef7e:	bd10      	pop	{r4, pc}
    ef80:	20002bd4 	.word	0x20002bd4

0000ef84 <EncodeLinkCheckReq>:
    ef84:	4b08      	ldr	r3, [pc, #32]	; (efa8 <EncodeLinkCheckReq+0x24>)
    ef86:	b510      	push	{r4, lr}
    ef88:	001c      	movs	r4, r3
    ef8a:	34e0      	adds	r4, #224	; 0xe0
    ef8c:	7822      	ldrb	r2, [r4, #0]
    ef8e:	2015      	movs	r0, #21
    ef90:	2a0f      	cmp	r2, #15
    ef92:	d808      	bhi.n	efa6 <EncodeLinkCheckReq+0x22>
    ef94:	2103      	movs	r1, #3
    ef96:	4351      	muls	r1, r2
    ef98:	185b      	adds	r3, r3, r1
    ef9a:	2102      	movs	r1, #2
    ef9c:	3399      	adds	r3, #153	; 0x99
    ef9e:	3201      	adds	r2, #1
    efa0:	7019      	strb	r1, [r3, #0]
    efa2:	7022      	strb	r2, [r4, #0]
    efa4:	380d      	subs	r0, #13
    efa6:	bd10      	pop	{r4, pc}
    efa8:	20002bd4 	.word	0x20002bd4

0000efac <LORAWAN_ForceEnable>:
    efac:	2140      	movs	r1, #64	; 0x40
    efae:	4b03      	ldr	r3, [pc, #12]	; (efbc <LORAWAN_ForceEnable+0x10>)
    efb0:	3384      	adds	r3, #132	; 0x84
    efb2:	781a      	ldrb	r2, [r3, #0]
    efb4:	438a      	bics	r2, r1
    efb6:	701a      	strb	r2, [r3, #0]
    efb8:	4770      	bx	lr
    efba:	46c0      	nop			; (mov r8, r8)
    efbc:	20002bd4 	.word	0x20002bd4

0000efc0 <UpdateCurrentDataRate>:
    efc0:	b510      	push	{r4, lr}
    efc2:	4b04      	ldr	r3, [pc, #16]	; (efd4 <UpdateCurrentDataRate+0x14>)
    efc4:	210c      	movs	r1, #12
    efc6:	33e7      	adds	r3, #231	; 0xe7
    efc8:	7018      	strb	r0, [r3, #0]
    efca:	2001      	movs	r0, #1
    efcc:	4b02      	ldr	r3, [pc, #8]	; (efd8 <UpdateCurrentDataRate+0x18>)
    efce:	4798      	blx	r3
    efd0:	bd10      	pop	{r4, pc}
    efd2:	46c0      	nop			; (mov r8, r8)
    efd4:	20002bd4 	.word	0x20002bd4
    efd8:	0000c84d 	.word	0x0000c84d

0000efdc <UpdateDLSettings>:
    efdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    efde:	466b      	mov	r3, sp
    efe0:	1dde      	adds	r6, r3, #7
    efe2:	1d9c      	adds	r4, r3, #6
    efe4:	71d8      	strb	r0, [r3, #7]
    efe6:	7021      	strb	r1, [r4, #0]
    efe8:	2017      	movs	r0, #23
    efea:	0031      	movs	r1, r6
    efec:	4d0c      	ldr	r5, [pc, #48]	; (f020 <UpdateDLSettings+0x44>)
    efee:	47a8      	blx	r5
    eff0:	2808      	cmp	r0, #8
    eff2:	d107      	bne.n	f004 <UpdateDLSettings+0x28>
    eff4:	4b0b      	ldr	r3, [pc, #44]	; (f024 <UpdateDLSettings+0x48>)
    eff6:	7832      	ldrb	r2, [r6, #0]
    eff8:	336e      	adds	r3, #110	; 0x6e
    effa:	701a      	strb	r2, [r3, #0]
    effc:	2100      	movs	r1, #0
    effe:	3807      	subs	r0, #7
    f000:	4b09      	ldr	r3, [pc, #36]	; (f028 <UpdateDLSettings+0x4c>)
    f002:	4798      	blx	r3
    f004:	0021      	movs	r1, r4
    f006:	2018      	movs	r0, #24
    f008:	47a8      	blx	r5
    f00a:	2808      	cmp	r0, #8
    f00c:	d107      	bne.n	f01e <UpdateDLSettings+0x42>
    f00e:	2101      	movs	r1, #1
    f010:	4b04      	ldr	r3, [pc, #16]	; (f024 <UpdateDLSettings+0x48>)
    f012:	7822      	ldrb	r2, [r4, #0]
    f014:	33f7      	adds	r3, #247	; 0xf7
    f016:	701a      	strb	r2, [r3, #0]
    f018:	0008      	movs	r0, r1
    f01a:	4b03      	ldr	r3, [pc, #12]	; (f028 <UpdateDLSettings+0x4c>)
    f01c:	4798      	blx	r3
    f01e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f020:	0000bff9 	.word	0x0000bff9
    f024:	20002bd4 	.word	0x20002bd4
    f028:	0000c84d 	.word	0x0000c84d

0000f02c <UpdateTxPower>:
    f02c:	b510      	push	{r4, lr}
    f02e:	4b04      	ldr	r3, [pc, #16]	; (f040 <UpdateTxPower+0x14>)
    f030:	210a      	movs	r1, #10
    f032:	33e9      	adds	r3, #233	; 0xe9
    f034:	7018      	strb	r0, [r3, #0]
    f036:	2000      	movs	r0, #0
    f038:	4b02      	ldr	r3, [pc, #8]	; (f044 <UpdateTxPower+0x18>)
    f03a:	4798      	blx	r3
    f03c:	bd10      	pop	{r4, pc}
    f03e:	46c0      	nop			; (mov r8, r8)
    f040:	20002bd4 	.word	0x20002bd4
    f044:	0000c84d 	.word	0x0000c84d

0000f048 <UpdateRetransmissionAckTimeoutState>:
    f048:	4b10      	ldr	r3, [pc, #64]	; (f08c <UpdateRetransmissionAckTimeoutState+0x44>)
    f04a:	b513      	push	{r0, r1, r4, lr}
    f04c:	001a      	movs	r2, r3
    f04e:	32fd      	adds	r2, #253	; 0xfd
    f050:	7812      	ldrb	r2, [r2, #0]
    f052:	2a01      	cmp	r2, #1
    f054:	d108      	bne.n	f068 <UpdateRetransmissionAckTimeoutState+0x20>
    f056:	0018      	movs	r0, r3
    f058:	210e      	movs	r1, #14
    f05a:	3084      	adds	r0, #132	; 0x84
    f05c:	7802      	ldrb	r2, [r0, #0]
    f05e:	438a      	bics	r2, r1
    f060:	0011      	movs	r1, r2
    f062:	220c      	movs	r2, #12
    f064:	430a      	orrs	r2, r1
    f066:	7002      	strb	r2, [r0, #0]
    f068:	001a      	movs	r2, r3
    f06a:	32da      	adds	r2, #218	; 0xda
    f06c:	8811      	ldrh	r1, [r2, #0]
    f06e:	4a08      	ldr	r2, [pc, #32]	; (f090 <UpdateRetransmissionAckTimeoutState+0x48>)
    f070:	4c08      	ldr	r4, [pc, #32]	; (f094 <UpdateRetransmissionAckTimeoutState+0x4c>)
    f072:	5c9a      	ldrb	r2, [r3, r2]
    f074:	33f1      	adds	r3, #241	; 0xf1
    f076:	1a8a      	subs	r2, r1, r2
    f078:	21fa      	movs	r1, #250	; 0xfa
    f07a:	0089      	lsls	r1, r1, #2
    f07c:	4351      	muls	r1, r2
    f07e:	2200      	movs	r2, #0
    f080:	7818      	ldrb	r0, [r3, #0]
    f082:	9200      	str	r2, [sp, #0]
    f084:	4b04      	ldr	r3, [pc, #16]	; (f098 <UpdateRetransmissionAckTimeoutState+0x50>)
    f086:	47a0      	blx	r4
    f088:	bd13      	pop	{r0, r1, r4, pc}
    f08a:	46c0      	nop			; (mov r8, r8)
    f08c:	20002bd4 	.word	0x20002bd4
    f090:	0000022b 	.word	0x0000022b
    f094:	0000d57d 	.word	0x0000d57d
    f098:	00010b1d 	.word	0x00010b1d

0000f09c <UpdateReceiveWindow2Parameters>:
    f09c:	4b0f      	ldr	r3, [pc, #60]	; (f0dc <UpdateReceiveWindow2Parameters+0x40>)
    f09e:	b570      	push	{r4, r5, r6, lr}
    f0a0:	001a      	movs	r2, r3
    f0a2:	326e      	adds	r2, #110	; 0x6e
    f0a4:	7011      	strb	r1, [r2, #0]
    f0a6:	001a      	movs	r2, r3
    f0a8:	0c04      	lsrs	r4, r0, #16
    f0aa:	326a      	adds	r2, #106	; 0x6a
    f0ac:	8010      	strh	r0, [r2, #0]
    f0ae:	8054      	strh	r4, [r2, #2]
    f0b0:	001a      	movs	r2, r3
    f0b2:	25fd      	movs	r5, #253	; 0xfd
    f0b4:	32fd      	adds	r2, #253	; 0xfd
    f0b6:	7812      	ldrb	r2, [r2, #0]
    f0b8:	3a02      	subs	r2, #2
    f0ba:	422a      	tst	r2, r5
    f0bc:	d109      	bne.n	f0d2 <UpdateReceiveWindow2Parameters+0x36>
    f0be:	001a      	movs	r2, r3
    f0c0:	336f      	adds	r3, #111	; 0x6f
    f0c2:	3273      	adds	r2, #115	; 0x73
    f0c4:	7011      	strb	r1, [r2, #0]
    f0c6:	7018      	strb	r0, [r3, #0]
    f0c8:	0a02      	lsrs	r2, r0, #8
    f0ca:	0e00      	lsrs	r0, r0, #24
    f0cc:	705a      	strb	r2, [r3, #1]
    f0ce:	709c      	strb	r4, [r3, #2]
    f0d0:	70d8      	strb	r0, [r3, #3]
    f0d2:	2100      	movs	r1, #0
    f0d4:	4b02      	ldr	r3, [pc, #8]	; (f0e0 <UpdateReceiveWindow2Parameters+0x44>)
    f0d6:	2001      	movs	r0, #1
    f0d8:	4798      	blx	r3
    f0da:	bd70      	pop	{r4, r5, r6, pc}
    f0dc:	20002bd4 	.word	0x20002bd4
    f0e0:	0000c84d 	.word	0x0000c84d

0000f0e4 <ResetParametersForConfirmedTransmission>:
    f0e4:	4b0a      	ldr	r3, [pc, #40]	; (f110 <ResetParametersForConfirmedTransmission+0x2c>)
    f0e6:	001a      	movs	r2, r3
    f0e8:	32fd      	adds	r2, #253	; 0xfd
    f0ea:	7812      	ldrb	r2, [r2, #0]
    f0ec:	2a01      	cmp	r2, #1
    f0ee:	d105      	bne.n	f0fc <ResetParametersForConfirmedTransmission+0x18>
    f0f0:	0019      	movs	r1, r3
    f0f2:	200e      	movs	r0, #14
    f0f4:	3184      	adds	r1, #132	; 0x84
    f0f6:	780a      	ldrb	r2, [r1, #0]
    f0f8:	4382      	bics	r2, r0
    f0fa:	700a      	strb	r2, [r1, #0]
    f0fc:	001a      	movs	r2, r3
    f0fe:	2100      	movs	r1, #0
    f100:	3394      	adds	r3, #148	; 0x94
    f102:	32e4      	adds	r2, #228	; 0xe4
    f104:	7011      	strb	r1, [r2, #0]
    f106:	781a      	ldrb	r2, [r3, #0]
    f108:	3101      	adds	r1, #1
    f10a:	438a      	bics	r2, r1
    f10c:	701a      	strb	r2, [r3, #0]
    f10e:	4770      	bx	lr
    f110:	20002bd4 	.word	0x20002bd4

0000f114 <ResetParametersForUnconfirmedTransmission>:
    f114:	4b07      	ldr	r3, [pc, #28]	; (f134 <ResetParametersForUnconfirmedTransmission+0x20>)
    f116:	001a      	movs	r2, r3
    f118:	32fd      	adds	r2, #253	; 0xfd
    f11a:	7812      	ldrb	r2, [r2, #0]
    f11c:	2a01      	cmp	r2, #1
    f11e:	d105      	bne.n	f12c <ResetParametersForUnconfirmedTransmission+0x18>
    f120:	0019      	movs	r1, r3
    f122:	200e      	movs	r0, #14
    f124:	3184      	adds	r1, #132	; 0x84
    f126:	780a      	ldrb	r2, [r1, #0]
    f128:	4382      	bics	r2, r0
    f12a:	700a      	strb	r2, [r1, #0]
    f12c:	2200      	movs	r2, #0
    f12e:	33e3      	adds	r3, #227	; 0xe3
    f130:	701a      	strb	r2, [r3, #0]
    f132:	4770      	bx	lr
    f134:	20002bd4 	.word	0x20002bd4

0000f138 <SetJoinFailState>:
    f138:	b570      	push	{r4, r5, r6, lr}
    f13a:	4c15      	ldr	r4, [pc, #84]	; (f190 <SetJoinFailState+0x58>)
    f13c:	2604      	movs	r6, #4
    f13e:	0025      	movs	r5, r4
    f140:	3594      	adds	r5, #148	; 0x94
    f142:	782a      	ldrb	r2, [r5, #0]
    f144:	0021      	movs	r1, r4
    f146:	43b2      	bics	r2, r6
    f148:	702a      	strb	r2, [r5, #0]
    f14a:	22f0      	movs	r2, #240	; 0xf0
    f14c:	3184      	adds	r1, #132	; 0x84
    f14e:	780b      	ldrb	r3, [r1, #0]
    f150:	4013      	ands	r3, r2
    f152:	700b      	strb	r3, [r1, #0]
    f154:	0023      	movs	r3, r4
    f156:	33ff      	adds	r3, #255	; 0xff
    f158:	7f5b      	ldrb	r3, [r3, #29]
    f15a:	069b      	lsls	r3, r3, #26
    f15c:	d503      	bpl.n	f166 <SetJoinFailState+0x2e>
    f15e:	0023      	movs	r3, r4
    f160:	2200      	movs	r2, #0
    f162:	3380      	adds	r3, #128	; 0x80
    f164:	701a      	strb	r2, [r3, #0]
    f166:	490b      	ldr	r1, [pc, #44]	; (f194 <SetJoinFailState+0x5c>)
    f168:	794a      	ldrb	r2, [r1, #5]
    f16a:	790b      	ldrb	r3, [r1, #4]
    f16c:	0212      	lsls	r2, r2, #8
    f16e:	431a      	orrs	r2, r3
    f170:	798b      	ldrb	r3, [r1, #6]
    f172:	041b      	lsls	r3, r3, #16
    f174:	431a      	orrs	r2, r3
    f176:	79cb      	ldrb	r3, [r1, #7]
    f178:	061b      	lsls	r3, r3, #24
    f17a:	4313      	orrs	r3, r2
    f17c:	d000      	beq.n	f180 <SetJoinFailState+0x48>
    f17e:	4798      	blx	r3
    f180:	2300      	movs	r3, #0
    f182:	34f9      	adds	r4, #249	; 0xf9
    f184:	7023      	strb	r3, [r4, #0]
    f186:	210b      	movs	r1, #11
    f188:	4b03      	ldr	r3, [pc, #12]	; (f198 <SetJoinFailState+0x60>)
    f18a:	2001      	movs	r0, #1
    f18c:	4798      	blx	r3
    f18e:	bd70      	pop	{r4, r5, r6, pc}
    f190:	20002bd4 	.word	0x20002bd4
    f194:	20002f30 	.word	0x20002f30
    f198:	0000c84d 	.word	0x0000c84d

0000f19c <ExecuteRxParamSetupReq>:
    f19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f19e:	b085      	sub	sp, #20
    f1a0:	7805      	ldrb	r5, [r0, #0]
    f1a2:	0004      	movs	r4, r0
    f1a4:	1c41      	adds	r1, r0, #1
    f1a6:	2204      	movs	r2, #4
    f1a8:	4b36      	ldr	r3, [pc, #216]	; (f284 <ExecuteRxParamSetupReq+0xe8>)
    f1aa:	a803      	add	r0, sp, #12
    f1ac:	4798      	blx	r3
    f1ae:	2264      	movs	r2, #100	; 0x64
    f1b0:	9b03      	ldr	r3, [sp, #12]
    f1b2:	a903      	add	r1, sp, #12
    f1b4:	021b      	lsls	r3, r3, #8
    f1b6:	0a1b      	lsrs	r3, r3, #8
    f1b8:	4353      	muls	r3, r2
    f1ba:	9303      	str	r3, [sp, #12]
    f1bc:	1d23      	adds	r3, r4, #4
    f1be:	9301      	str	r3, [sp, #4]
    f1c0:	072b      	lsls	r3, r5, #28
    f1c2:	0f1b      	lsrs	r3, r3, #28
    f1c4:	b2da      	uxtb	r2, r3
    f1c6:	9200      	str	r2, [sp, #0]
    f1c8:	aa02      	add	r2, sp, #8
    f1ca:	1c96      	adds	r6, r2, #2
    f1cc:	066d      	lsls	r5, r5, #25
    f1ce:	7033      	strb	r3, [r6, #0]
    f1d0:	1cd7      	adds	r7, r2, #3
    f1d2:	0f6d      	lsrs	r5, r5, #29
    f1d4:	2001      	movs	r0, #1
    f1d6:	4b2c      	ldr	r3, [pc, #176]	; (f288 <ExecuteRxParamSetupReq+0xec>)
    f1d8:	703d      	strb	r5, [r7, #0]
    f1da:	4798      	blx	r3
    f1dc:	4c2b      	ldr	r4, [pc, #172]	; (f28c <ExecuteRxParamSetupReq+0xf0>)
    f1de:	2808      	cmp	r0, #8
    f1e0:	d109      	bne.n	f1f6 <ExecuteRxParamSetupReq+0x5a>
    f1e2:	0023      	movs	r3, r4
    f1e4:	33e0      	adds	r3, #224	; 0xe0
    f1e6:	781a      	ldrb	r2, [r3, #0]
    f1e8:	2303      	movs	r3, #3
    f1ea:	4353      	muls	r3, r2
    f1ec:	18e3      	adds	r3, r4, r3
    f1ee:	3398      	adds	r3, #152	; 0x98
    f1f0:	789a      	ldrb	r2, [r3, #2]
    f1f2:	4310      	orrs	r0, r2
    f1f4:	7098      	strb	r0, [r3, #2]
    f1f6:	0031      	movs	r1, r6
    f1f8:	200f      	movs	r0, #15
    f1fa:	4e23      	ldr	r6, [pc, #140]	; (f288 <ExecuteRxParamSetupReq+0xec>)
    f1fc:	47b0      	blx	r6
    f1fe:	2808      	cmp	r0, #8
    f200:	d10a      	bne.n	f218 <ExecuteRxParamSetupReq+0x7c>
    f202:	0023      	movs	r3, r4
    f204:	33e0      	adds	r3, #224	; 0xe0
    f206:	781a      	ldrb	r2, [r3, #0]
    f208:	2303      	movs	r3, #3
    f20a:	4353      	muls	r3, r2
    f20c:	2210      	movs	r2, #16
    f20e:	18e3      	adds	r3, r4, r3
    f210:	3398      	adds	r3, #152	; 0x98
    f212:	7899      	ldrb	r1, [r3, #2]
    f214:	430a      	orrs	r2, r1
    f216:	709a      	strb	r2, [r3, #2]
    f218:	0039      	movs	r1, r7
    f21a:	2018      	movs	r0, #24
    f21c:	47b0      	blx	r6
    f21e:	2808      	cmp	r0, #8
    f220:	d10a      	bne.n	f238 <ExecuteRxParamSetupReq+0x9c>
    f222:	0023      	movs	r3, r4
    f224:	33e0      	adds	r3, #224	; 0xe0
    f226:	781a      	ldrb	r2, [r3, #0]
    f228:	2303      	movs	r3, #3
    f22a:	4353      	muls	r3, r2
    f22c:	2220      	movs	r2, #32
    f22e:	18e3      	adds	r3, r4, r3
    f230:	3398      	adds	r3, #152	; 0x98
    f232:	7899      	ldrb	r1, [r3, #2]
    f234:	430a      	orrs	r2, r1
    f236:	709a      	strb	r2, [r3, #2]
    f238:	0023      	movs	r3, r4
    f23a:	33e0      	adds	r3, #224	; 0xe0
    f23c:	781a      	ldrb	r2, [r3, #0]
    f23e:	2303      	movs	r3, #3
    f240:	4353      	muls	r3, r2
    f242:	18e3      	adds	r3, r4, r3
    f244:	3398      	adds	r3, #152	; 0x98
    f246:	789e      	ldrb	r6, [r3, #2]
    f248:	06f3      	lsls	r3, r6, #27
    f24a:	d518      	bpl.n	f27e <ExecuteRxParamSetupReq+0xe2>
    f24c:	0733      	lsls	r3, r6, #28
    f24e:	d516      	bpl.n	f27e <ExecuteRxParamSetupReq+0xe2>
    f250:	06b6      	lsls	r6, r6, #26
    f252:	0ff6      	lsrs	r6, r6, #31
    f254:	2e01      	cmp	r6, #1
    f256:	d112      	bne.n	f27e <ExecuteRxParamSetupReq+0xe2>
    f258:	0023      	movs	r3, r4
    f25a:	33f7      	adds	r3, #247	; 0xf7
    f25c:	701d      	strb	r5, [r3, #0]
    f25e:	0031      	movs	r1, r6
    f260:	0030      	movs	r0, r6
    f262:	4d0b      	ldr	r5, [pc, #44]	; (f290 <ExecuteRxParamSetupReq+0xf4>)
    f264:	47a8      	blx	r5
    f266:	9900      	ldr	r1, [sp, #0]
    f268:	9803      	ldr	r0, [sp, #12]
    f26a:	4b0a      	ldr	r3, [pc, #40]	; (f294 <ExecuteRxParamSetupReq+0xf8>)
    f26c:	4798      	blx	r3
    f26e:	2340      	movs	r3, #64	; 0x40
    f270:	3484      	adds	r4, #132	; 0x84
    f272:	7862      	ldrb	r2, [r4, #1]
    f274:	210b      	movs	r1, #11
    f276:	4313      	orrs	r3, r2
    f278:	7063      	strb	r3, [r4, #1]
    f27a:	0030      	movs	r0, r6
    f27c:	47a8      	blx	r5
    f27e:	9801      	ldr	r0, [sp, #4]
    f280:	b005      	add	sp, #20
    f282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f284:	00018655 	.word	0x00018655
    f288:	0000bff9 	.word	0x0000bff9
    f28c:	20002bd4 	.word	0x20002bd4
    f290:	0000c84d 	.word	0x0000c84d
    f294:	0000f09d 	.word	0x0000f09d

0000f298 <ExecuteDutyCycle>:
    f298:	b570      	push	{r4, r5, r6, lr}
    f29a:	7803      	ldrb	r3, [r0, #0]
    f29c:	1c46      	adds	r6, r0, #1
    f29e:	2b0f      	cmp	r3, #15
    f2a0:	d80f      	bhi.n	f2c2 <ExecuteDutyCycle+0x2a>
    f2a2:	4c09      	ldr	r4, [pc, #36]	; (f2c8 <ExecuteDutyCycle+0x30>)
    f2a4:	210b      	movs	r1, #11
    f2a6:	0022      	movs	r2, r4
    f2a8:	2000      	movs	r0, #0
    f2aa:	3298      	adds	r2, #152	; 0x98
    f2ac:	4d07      	ldr	r5, [pc, #28]	; (f2cc <ExecuteDutyCycle+0x34>)
    f2ae:	7013      	strb	r3, [r2, #0]
    f2b0:	47a8      	blx	r5
    f2b2:	2320      	movs	r3, #32
    f2b4:	3484      	adds	r4, #132	; 0x84
    f2b6:	7862      	ldrb	r2, [r4, #1]
    f2b8:	210b      	movs	r1, #11
    f2ba:	4313      	orrs	r3, r2
    f2bc:	7063      	strb	r3, [r4, #1]
    f2be:	2001      	movs	r0, #1
    f2c0:	47a8      	blx	r5
    f2c2:	0030      	movs	r0, r6
    f2c4:	bd70      	pop	{r4, r5, r6, pc}
    f2c6:	46c0      	nop			; (mov r8, r8)
    f2c8:	20002bd4 	.word	0x20002bd4
    f2cc:	0000c84d 	.word	0x0000c84d

0000f2d0 <ExecuteDlChannel>:
    f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2d2:	b089      	sub	sp, #36	; 0x24
    f2d4:	7805      	ldrb	r5, [r0, #0]
    f2d6:	ab02      	add	r3, sp, #8
    f2d8:	1c41      	adds	r1, r0, #1
    f2da:	0007      	movs	r7, r0
    f2dc:	719d      	strb	r5, [r3, #6]
    f2de:	1d9e      	adds	r6, r3, #6
    f2e0:	2204      	movs	r2, #4
    f2e2:	4b23      	ldr	r3, [pc, #140]	; (f370 <ExecuteDlChannel+0xa0>)
    f2e4:	a805      	add	r0, sp, #20
    f2e6:	4798      	blx	r3
    f2e8:	9b05      	ldr	r3, [sp, #20]
    f2ea:	a904      	add	r1, sp, #16
    f2ec:	021c      	lsls	r4, r3, #8
    f2ee:	2364      	movs	r3, #100	; 0x64
    f2f0:	0a24      	lsrs	r4, r4, #8
    f2f2:	435c      	muls	r4, r3
    f2f4:	1d3b      	adds	r3, r7, #4
    f2f6:	9301      	str	r3, [sp, #4]
    f2f8:	2301      	movs	r3, #1
    f2fa:	2015      	movs	r0, #21
    f2fc:	704b      	strb	r3, [r1, #1]
    f2fe:	4b1d      	ldr	r3, [pc, #116]	; (f374 <ExecuteDlChannel+0xa4>)
    f300:	9405      	str	r4, [sp, #20]
    f302:	700d      	strb	r5, [r1, #0]
    f304:	4798      	blx	r3
    f306:	2808      	cmp	r0, #8
    f308:	d12f      	bne.n	f36a <ExecuteDlChannel+0x9a>
    f30a:	ab02      	add	r3, sp, #8
    f30c:	1ddd      	adds	r5, r3, #7
    f30e:	2300      	movs	r3, #0
    f310:	702b      	strb	r3, [r5, #0]
    f312:	7833      	ldrb	r3, [r6, #0]
    f314:	af06      	add	r7, sp, #24
    f316:	713b      	strb	r3, [r7, #4]
    f318:	002a      	movs	r2, r5
    f31a:	0031      	movs	r1, r6
    f31c:	300e      	adds	r0, #14
    f31e:	4b16      	ldr	r3, [pc, #88]	; (f378 <ExecuteDlChannel+0xa8>)
    f320:	9406      	str	r4, [sp, #24]
    f322:	4798      	blx	r3
    f324:	280a      	cmp	r0, #10
    f326:	d00d      	beq.n	f344 <ExecuteDlChannel+0x74>
    f328:	782a      	ldrb	r2, [r5, #0]
    f32a:	2a01      	cmp	r2, #1
    f32c:	d10a      	bne.n	f344 <ExecuteDlChannel+0x74>
    f32e:	4b13      	ldr	r3, [pc, #76]	; (f37c <ExecuteDlChannel+0xac>)
    f330:	0019      	movs	r1, r3
    f332:	31e0      	adds	r1, #224	; 0xe0
    f334:	7808      	ldrb	r0, [r1, #0]
    f336:	2103      	movs	r1, #3
    f338:	4341      	muls	r1, r0
    f33a:	185b      	adds	r3, r3, r1
    f33c:	3398      	adds	r3, #152	; 0x98
    f33e:	78d9      	ldrb	r1, [r3, #3]
    f340:	430a      	orrs	r2, r1
    f342:	70da      	strb	r2, [r3, #3]
    f344:	0039      	movs	r1, r7
    f346:	2033      	movs	r0, #51	; 0x33
    f348:	4b0d      	ldr	r3, [pc, #52]	; (f380 <ExecuteDlChannel+0xb0>)
    f34a:	4798      	blx	r3
    f34c:	2808      	cmp	r0, #8
    f34e:	d10c      	bne.n	f36a <ExecuteDlChannel+0x9a>
    f350:	4b0a      	ldr	r3, [pc, #40]	; (f37c <ExecuteDlChannel+0xac>)
    f352:	001a      	movs	r2, r3
    f354:	32e0      	adds	r2, #224	; 0xe0
    f356:	7811      	ldrb	r1, [r2, #0]
    f358:	2203      	movs	r2, #3
    f35a:	434a      	muls	r2, r1
    f35c:	189b      	adds	r3, r3, r2
    f35e:	2280      	movs	r2, #128	; 0x80
    f360:	3398      	adds	r3, #152	; 0x98
    f362:	7899      	ldrb	r1, [r3, #2]
    f364:	4252      	negs	r2, r2
    f366:	430a      	orrs	r2, r1
    f368:	709a      	strb	r2, [r3, #2]
    f36a:	9801      	ldr	r0, [sp, #4]
    f36c:	b009      	add	sp, #36	; 0x24
    f36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f370:	00018655 	.word	0x00018655
    f374:	0000bff9 	.word	0x0000bff9
    f378:	0000bfdd 	.word	0x0000bfdd
    f37c:	20002bd4 	.word	0x20002bd4
    f380:	0000c105 	.word	0x0000c105

0000f384 <ExecuteTxParamSetup>:
    f384:	220f      	movs	r2, #15
    f386:	b513      	push	{r0, r1, r4, lr}
    f388:	7803      	ldrb	r3, [r0, #0]
    f38a:	4c0f      	ldr	r4, [pc, #60]	; (f3c8 <ExecuteTxParamSetup+0x44>)
    f38c:	401a      	ands	r2, r3
    f38e:	5ca2      	ldrb	r2, [r4, r2]
    f390:	2401      	movs	r4, #1
    f392:	a901      	add	r1, sp, #4
    f394:	700a      	strb	r2, [r1, #0]
    f396:	111a      	asrs	r2, r3, #4
    f398:	115b      	asrs	r3, r3, #5
    f39a:	4023      	ands	r3, r4
    f39c:	40a3      	lsls	r3, r4
    f39e:	4022      	ands	r2, r4
    f3a0:	4313      	orrs	r3, r2
    f3a2:	704b      	strb	r3, [r1, #1]
    f3a4:	1904      	adds	r4, r0, r4
    f3a6:	4b09      	ldr	r3, [pc, #36]	; (f3cc <ExecuteTxParamSetup+0x48>)
    f3a8:	2034      	movs	r0, #52	; 0x34
    f3aa:	4798      	blx	r3
    f3ac:	2808      	cmp	r0, #8
    f3ae:	d009      	beq.n	f3c4 <ExecuteTxParamSetup+0x40>
    f3b0:	4b07      	ldr	r3, [pc, #28]	; (f3d0 <ExecuteTxParamSetup+0x4c>)
    f3b2:	001a      	movs	r2, r3
    f3b4:	32e0      	adds	r2, #224	; 0xe0
    f3b6:	7811      	ldrb	r1, [r2, #0]
    f3b8:	2203      	movs	r2, #3
    f3ba:	434a      	muls	r2, r1
    f3bc:	189b      	adds	r3, r3, r2
    f3be:	22ff      	movs	r2, #255	; 0xff
    f3c0:	3399      	adds	r3, #153	; 0x99
    f3c2:	701a      	strb	r2, [r3, #0]
    f3c4:	0020      	movs	r0, r4
    f3c6:	bd16      	pop	{r1, r2, r4, pc}
    f3c8:	0001e9b1 	.word	0x0001e9b1
    f3cc:	0000c105 	.word	0x0000c105
    f3d0:	20002bd4 	.word	0x20002bd4

0000f3d4 <ExecuteLinkAdr>:
    f3d4:	220f      	movs	r2, #15
    f3d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3d8:	0006      	movs	r6, r0
    f3da:	7803      	ldrb	r3, [r0, #0]
    f3dc:	b089      	sub	sp, #36	; 0x24
    f3de:	401a      	ands	r2, r3
    f3e0:	a905      	add	r1, sp, #20
    f3e2:	700a      	strb	r2, [r1, #0]
    f3e4:	aa04      	add	r2, sp, #16
    f3e6:	1d97      	adds	r7, r2, #6
    f3e8:	091b      	lsrs	r3, r3, #4
    f3ea:	7153      	strb	r3, [r2, #5]
    f3ec:	1c41      	adds	r1, r0, #1
    f3ee:	2202      	movs	r2, #2
    f3f0:	0038      	movs	r0, r7
    f3f2:	4b3d      	ldr	r3, [pc, #244]	; (f4e8 <ExecuteLinkAdr+0x114>)
    f3f4:	4798      	blx	r3
    f3f6:	2201      	movs	r2, #1
    f3f8:	1d33      	adds	r3, r6, #4
    f3fa:	9303      	str	r3, [sp, #12]
    f3fc:	78f3      	ldrb	r3, [r6, #3]
    f3fe:	4c3b      	ldr	r4, [pc, #236]	; (f4ec <ExecuteLinkAdr+0x118>)
    f400:	4d3b      	ldr	r5, [pc, #236]	; (f4f0 <ExecuteLinkAdr+0x11c>)
    f402:	065b      	lsls	r3, r3, #25
    f404:	0f5b      	lsrs	r3, r3, #29
    f406:	9300      	str	r3, [sp, #0]
    f408:	5d63      	ldrb	r3, [r4, r5]
    f40a:	a906      	add	r1, sp, #24
    f40c:	4393      	bics	r3, r2
    f40e:	1892      	adds	r2, r2, r2
    f410:	4393      	bics	r3, r2
    f412:	3202      	adds	r2, #2
    f414:	4393      	bics	r3, r2
    f416:	5563      	strb	r3, [r4, r5]
    f418:	883b      	ldrh	r3, [r7, #0]
    f41a:	2037      	movs	r0, #55	; 0x37
    f41c:	9302      	str	r3, [sp, #8]
    f41e:	466b      	mov	r3, sp
    f420:	891b      	ldrh	r3, [r3, #8]
    f422:	4f34      	ldr	r7, [pc, #208]	; (f4f4 <ExecuteLinkAdr+0x120>)
    f424:	804b      	strh	r3, [r1, #2]
    f426:	466b      	mov	r3, sp
    f428:	781b      	ldrb	r3, [r3, #0]
    f42a:	700b      	strb	r3, [r1, #0]
    f42c:	47b8      	blx	r7
    f42e:	2808      	cmp	r0, #8
    f430:	d117      	bne.n	f462 <ExecuteLinkAdr+0x8e>
    f432:	466b      	mov	r3, sp
    f434:	891b      	ldrh	r3, [r3, #8]
    f436:	a907      	add	r1, sp, #28
    f438:	800b      	strh	r3, [r1, #0]
    f43a:	466b      	mov	r3, sp
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	3014      	adds	r0, #20
    f440:	708b      	strb	r3, [r1, #2]
    f442:	4b2d      	ldr	r3, [pc, #180]	; (f4f8 <ExecuteLinkAdr+0x124>)
    f444:	4798      	blx	r3
    f446:	2201      	movs	r2, #1
    f448:	5d63      	ldrb	r3, [r4, r5]
    f44a:	2010      	movs	r0, #16
    f44c:	4313      	orrs	r3, r2
    f44e:	5563      	strb	r3, [r4, r5]
    f450:	ab04      	add	r3, sp, #16
    f452:	1d59      	adds	r1, r3, #5
    f454:	47b8      	blx	r7
    f456:	2808      	cmp	r0, #8
    f458:	d103      	bne.n	f462 <ExecuteLinkAdr+0x8e>
    f45a:	2202      	movs	r2, #2
    f45c:	5d63      	ldrb	r3, [r4, r5]
    f45e:	4313      	orrs	r3, r2
    f460:	5563      	strb	r3, [r4, r5]
    f462:	af05      	add	r7, sp, #20
    f464:	4b23      	ldr	r3, [pc, #140]	; (f4f4 <ExecuteLinkAdr+0x120>)
    f466:	0039      	movs	r1, r7
    f468:	201d      	movs	r0, #29
    f46a:	4798      	blx	r3
    f46c:	4b1f      	ldr	r3, [pc, #124]	; (f4ec <ExecuteLinkAdr+0x118>)
    f46e:	2808      	cmp	r0, #8
    f470:	d103      	bne.n	f47a <ExecuteLinkAdr+0xa6>
    f472:	2204      	movs	r2, #4
    f474:	5d59      	ldrb	r1, [r3, r5]
    f476:	430a      	orrs	r2, r1
    f478:	555a      	strb	r2, [r3, r5]
    f47a:	5d5a      	ldrb	r2, [r3, r5]
    f47c:	43d2      	mvns	r2, r2
    f47e:	0752      	lsls	r2, r2, #29
    f480:	d12a      	bne.n	f4d8 <ExecuteLinkAdr+0x104>
    f482:	4669      	mov	r1, sp
    f484:	4a1d      	ldr	r2, [pc, #116]	; (f4fc <ExecuteLinkAdr+0x128>)
    f486:	7a09      	ldrb	r1, [r1, #8]
    f488:	5499      	strb	r1, [r3, r2]
    f48a:	9a02      	ldr	r2, [sp, #8]
    f48c:	491b      	ldr	r1, [pc, #108]	; (f4fc <ExecuteLinkAdr+0x128>)
    f48e:	0a12      	lsrs	r2, r2, #8
    f490:	1859      	adds	r1, r3, r1
    f492:	704a      	strb	r2, [r1, #1]
    f494:	aa04      	add	r2, sp, #16
    f496:	3205      	adds	r2, #5
    f498:	7812      	ldrb	r2, [r2, #0]
    f49a:	2a0f      	cmp	r2, #15
    f49c:	d101      	bne.n	f4a2 <ExecuteLinkAdr+0xce>
    f49e:	33e7      	adds	r3, #231	; 0xe7
    f4a0:	781a      	ldrb	r2, [r3, #0]
    f4a2:	2389      	movs	r3, #137	; 0x89
    f4a4:	2170      	movs	r1, #112	; 0x70
    f4a6:	2070      	movs	r0, #112	; 0x70
    f4a8:	009b      	lsls	r3, r3, #2
    f4aa:	54e2      	strb	r2, [r4, r3]
    f4ac:	78f3      	ldrb	r3, [r6, #3]
    f4ae:	4a14      	ldr	r2, [pc, #80]	; (f500 <ExecuteLinkAdr+0x12c>)
    f4b0:	4019      	ands	r1, r3
    f4b2:	5ca3      	ldrb	r3, [r4, r2]
    f4b4:	4383      	bics	r3, r0
    f4b6:	430b      	orrs	r3, r1
    f4b8:	54a3      	strb	r3, [r4, r2]
    f4ba:	78f1      	ldrb	r1, [r6, #3]
    f4bc:	3861      	subs	r0, #97	; 0x61
    f4be:	b2db      	uxtb	r3, r3
    f4c0:	4001      	ands	r1, r0
    f4c2:	4383      	bics	r3, r0
    f4c4:	430b      	orrs	r3, r1
    f4c6:	54a3      	strb	r3, [r4, r2]
    f4c8:	783b      	ldrb	r3, [r7, #0]
    f4ca:	4283      	cmp	r3, r0
    f4cc:	d101      	bne.n	f4d2 <ExecuteLinkAdr+0xfe>
    f4ce:	34e9      	adds	r4, #233	; 0xe9
    f4d0:	7823      	ldrb	r3, [r4, #0]
    f4d2:	4a0c      	ldr	r2, [pc, #48]	; (f504 <ExecuteLinkAdr+0x130>)
    f4d4:	4905      	ldr	r1, [pc, #20]	; (f4ec <ExecuteLinkAdr+0x118>)
    f4d6:	548b      	strb	r3, [r1, r2]
    f4d8:	4904      	ldr	r1, [pc, #16]	; (f4ec <ExecuteLinkAdr+0x118>)
    f4da:	4a0b      	ldr	r2, [pc, #44]	; (f508 <ExecuteLinkAdr+0x134>)
    f4dc:	9803      	ldr	r0, [sp, #12]
    f4de:	5c8b      	ldrb	r3, [r1, r2]
    f4e0:	3301      	adds	r3, #1
    f4e2:	548b      	strb	r3, [r1, r2]
    f4e4:	b009      	add	sp, #36	; 0x24
    f4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4e8:	00018655 	.word	0x00018655
    f4ec:	20002bd4 	.word	0x20002bd4
    f4f0:	00000223 	.word	0x00000223
    f4f4:	0000bff9 	.word	0x0000bff9
    f4f8:	0000c105 	.word	0x0000c105
    f4fc:	00000227 	.word	0x00000227
    f500:	00000229 	.word	0x00000229
    f504:	00000225 	.word	0x00000225
    f508:	00000226 	.word	0x00000226

0000f50c <ExecuteDevTimeAns>:
    f50c:	b510      	push	{r4, lr}
    f50e:	0001      	movs	r1, r0
    f510:	0004      	movs	r4, r0
    f512:	2204      	movs	r2, #4
    f514:	4b04      	ldr	r3, [pc, #16]	; (f528 <ExecuteDevTimeAns+0x1c>)
    f516:	4805      	ldr	r0, [pc, #20]	; (f52c <ExecuteDevTimeAns+0x20>)
    f518:	4798      	blx	r3
    f51a:	238e      	movs	r3, #142	; 0x8e
    f51c:	7921      	ldrb	r1, [r4, #4]
    f51e:	4a04      	ldr	r2, [pc, #16]	; (f530 <ExecuteDevTimeAns+0x24>)
    f520:	009b      	lsls	r3, r3, #2
    f522:	1d60      	adds	r0, r4, #5
    f524:	54d1      	strb	r1, [r2, r3]
    f526:	bd10      	pop	{r4, pc}
    f528:	00018655 	.word	0x00018655
    f52c:	20002e08 	.word	0x20002e08
    f530:	20002bd4 	.word	0x20002bd4

0000f534 <PrepareJoinRequestFrame>:
    f534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f536:	2210      	movs	r2, #16
    f538:	4d23      	ldr	r5, [pc, #140]	; (f5c8 <PrepareJoinRequestFrame+0x94>)
    f53a:	4b24      	ldr	r3, [pc, #144]	; (f5cc <PrepareJoinRequestFrame+0x98>)
    f53c:	32ff      	adds	r2, #255	; 0xff
    f53e:	2100      	movs	r1, #0
    f540:	0028      	movs	r0, r5
    f542:	4798      	blx	r3
    f544:	2300      	movs	r3, #0
    f546:	4c22      	ldr	r4, [pc, #136]	; (f5d0 <PrepareJoinRequestFrame+0x9c>)
    f548:	702b      	strb	r3, [r5, #0]
    f54a:	4b22      	ldr	r3, [pc, #136]	; (f5d4 <PrepareJoinRequestFrame+0xa0>)
    f54c:	5ce3      	ldrb	r3, [r4, r3]
    f54e:	2b00      	cmp	r3, #0
    f550:	d006      	beq.n	f560 <PrepareJoinRequestFrame+0x2c>
    f552:	4921      	ldr	r1, [pc, #132]	; (f5d8 <PrepareJoinRequestFrame+0xa4>)
    f554:	2006      	movs	r0, #6
    f556:	4e21      	ldr	r6, [pc, #132]	; (f5dc <PrepareJoinRequestFrame+0xa8>)
    f558:	47b0      	blx	r6
    f55a:	4921      	ldr	r1, [pc, #132]	; (f5e0 <PrepareJoinRequestFrame+0xac>)
    f55c:	2007      	movs	r0, #7
    f55e:	47b0      	blx	r6
    f560:	2300      	movs	r3, #0
    f562:	205c      	movs	r0, #92	; 0x5c
    f564:	1ac1      	subs	r1, r0, r3
    f566:	5c61      	ldrb	r1, [r4, r1]
    f568:	18ea      	adds	r2, r5, r3
    f56a:	3301      	adds	r3, #1
    f56c:	7051      	strb	r1, [r2, #1]
    f56e:	2b08      	cmp	r3, #8
    f570:	d1f8      	bne.n	f564 <PrepareJoinRequestFrame+0x30>
    f572:	2300      	movs	r3, #0
    f574:	2064      	movs	r0, #100	; 0x64
    f576:	1ac1      	subs	r1, r0, r3
    f578:	5c61      	ldrb	r1, [r4, r1]
    f57a:	18ea      	adds	r2, r5, r3
    f57c:	3301      	adds	r3, #1
    f57e:	7251      	strb	r1, [r2, #9]
    f580:	2b08      	cmp	r3, #8
    f582:	d1f8      	bne.n	f576 <PrepareJoinRequestFrame+0x42>
    f584:	34cc      	adds	r4, #204	; 0xcc
    f586:	8823      	ldrh	r3, [r4, #0]
    f588:	2116      	movs	r1, #22
    f58a:	3301      	adds	r3, #1
    f58c:	8023      	strh	r3, [r4, #0]
    f58e:	2000      	movs	r0, #0
    f590:	4b14      	ldr	r3, [pc, #80]	; (f5e4 <PrepareJoinRequestFrame+0xb0>)
    f592:	4798      	blx	r3
    f594:	0021      	movs	r1, r4
    f596:	2202      	movs	r2, #2
    f598:	4c13      	ldr	r4, [pc, #76]	; (f5e8 <PrepareJoinRequestFrame+0xb4>)
    f59a:	4814      	ldr	r0, [pc, #80]	; (f5ec <PrepareJoinRequestFrame+0xb8>)
    f59c:	47a0      	blx	r4
    f59e:	2313      	movs	r3, #19
    f5a0:	4e13      	ldr	r6, [pc, #76]	; (f5f0 <PrepareJoinRequestFrame+0xbc>)
    f5a2:	9300      	str	r3, [sp, #0]
    f5a4:	0032      	movs	r2, r6
    f5a6:	002b      	movs	r3, r5
    f5a8:	2100      	movs	r1, #0
    f5aa:	4d12      	ldr	r5, [pc, #72]	; (f5f4 <PrepareJoinRequestFrame+0xc0>)
    f5ac:	4812      	ldr	r0, [pc, #72]	; (f5f8 <PrepareJoinRequestFrame+0xc4>)
    f5ae:	47a8      	blx	r5
    f5b0:	0031      	movs	r1, r6
    f5b2:	2204      	movs	r2, #4
    f5b4:	a803      	add	r0, sp, #12
    f5b6:	47a0      	blx	r4
    f5b8:	2204      	movs	r2, #4
    f5ba:	a903      	add	r1, sp, #12
    f5bc:	480f      	ldr	r0, [pc, #60]	; (f5fc <PrepareJoinRequestFrame+0xc8>)
    f5be:	47a0      	blx	r4
    f5c0:	2017      	movs	r0, #23
    f5c2:	b004      	add	sp, #16
    f5c4:	bd70      	pop	{r4, r5, r6, pc}
    f5c6:	46c0      	nop			; (mov r8, r8)
    f5c8:	20002e1d 	.word	0x20002e1d
    f5cc:	00018779 	.word	0x00018779
    f5d0:	20002bd4 	.word	0x20002bd4
    f5d4:	0000022d 	.word	0x0000022d
    f5d8:	20002c29 	.word	0x20002c29
    f5dc:	0000c425 	.word	0x0000c425
    f5e0:	20002c31 	.word	0x20002c31
    f5e4:	0000c84d 	.word	0x0000c84d
    f5e8:	00018655 	.word	0x00018655
    f5ec:	20002e2e 	.word	0x20002e2e
    f5f0:	20000f50 	.word	0x20000f50
    f5f4:	0000c429 	.word	0x0000c429
    f5f8:	20002c19 	.word	0x20002c19
    f5fc:	20002e30 	.word	0x20002e30

0000f600 <ConfigureRadioRx>:
    f600:	b5f0      	push	{r4, r5, r6, r7, lr}
    f602:	b087      	sub	sp, #28
    f604:	466b      	mov	r3, sp
    f606:	2600      	movs	r6, #0
    f608:	1ddc      	adds	r4, r3, #7
    f60a:	71d8      	strb	r0, [r3, #7]
    f60c:	729e      	strb	r6, [r3, #10]
    f60e:	466a      	mov	r2, sp
    f610:	2301      	movs	r3, #1
    f612:	72d3      	strb	r3, [r2, #11]
    f614:	2215      	movs	r2, #21
    f616:	ad03      	add	r5, sp, #12
    f618:	4f11      	ldr	r7, [pc, #68]	; (f660 <ConfigureRadioRx+0x60>)
    f61a:	9100      	str	r1, [sp, #0]
    f61c:	446a      	add	r2, sp
    f61e:	0021      	movs	r1, r4
    f620:	2023      	movs	r0, #35	; 0x23
    f622:	80ae      	strh	r6, [r5, #4]
    f624:	47b8      	blx	r7
    f626:	2216      	movs	r2, #22
    f628:	0021      	movs	r1, r4
    f62a:	446a      	add	r2, sp
    f62c:	2024      	movs	r0, #36	; 0x24
    f62e:	47b8      	blx	r7
    f630:	2217      	movs	r2, #23
    f632:	0021      	movs	r1, r4
    f634:	446a      	add	r2, sp
    f636:	2025      	movs	r0, #37	; 0x25
    f638:	47b8      	blx	r7
    f63a:	9b00      	ldr	r3, [sp, #0]
    f63c:	0028      	movs	r0, r5
    f63e:	9303      	str	r3, [sp, #12]
    f640:	4b08      	ldr	r3, [pc, #32]	; (f664 <ConfigureRadioRx+0x64>)
    f642:	80ae      	strh	r6, [r5, #4]
    f644:	4798      	blx	r3
    f646:	230a      	movs	r3, #10
    f648:	446b      	add	r3, sp
    f64a:	0019      	movs	r1, r3
    f64c:	4c06      	ldr	r4, [pc, #24]	; (f668 <ConfigureRadioRx+0x68>)
    f64e:	2014      	movs	r0, #20
    f650:	47a0      	blx	r4
    f652:	230b      	movs	r3, #11
    f654:	446b      	add	r3, sp
    f656:	0019      	movs	r1, r3
    f658:	2006      	movs	r0, #6
    f65a:	47a0      	blx	r4
    f65c:	b007      	add	sp, #28
    f65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f660:	0000bfdd 	.word	0x0000bfdd
    f664:	0000e9ad 	.word	0x0000e9ad
    f668:	00013579 	.word	0x00013579

0000f66c <LorawanReceiveWindow1Callback>:
    f66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f66e:	4c1a      	ldr	r4, [pc, #104]	; (f6d8 <LorawanReceiveWindow1Callback+0x6c>)
    f670:	0023      	movs	r3, r4
    f672:	3384      	adds	r3, #132	; 0x84
    f674:	781b      	ldrb	r3, [r3, #0]
    f676:	b25a      	sxtb	r2, r3
    f678:	2a00      	cmp	r2, #0
    f67a:	db2c      	blt.n	f6d6 <LorawanReceiveWindow1Callback+0x6a>
    f67c:	0022      	movs	r2, r4
    f67e:	32fd      	adds	r2, #253	; 0xfd
    f680:	7812      	ldrb	r2, [r2, #0]
    f682:	2a04      	cmp	r2, #4
    f684:	d107      	bne.n	f696 <LorawanReceiveWindow1Callback+0x2a>
    f686:	07db      	lsls	r3, r3, #31
    f688:	d505      	bpl.n	f696 <LorawanReceiveWindow1Callback+0x2a>
    f68a:	2390      	movs	r3, #144	; 0x90
    f68c:	2200      	movs	r2, #0
    f68e:	009b      	lsls	r3, r3, #2
    f690:	54e2      	strb	r2, [r4, r3]
    f692:	4b12      	ldr	r3, [pc, #72]	; (f6dc <LorawanReceiveWindow1Callback+0x70>)
    f694:	4798      	blx	r3
    f696:	0021      	movs	r1, r4
    f698:	220e      	movs	r2, #14
    f69a:	3184      	adds	r1, #132	; 0x84
    f69c:	780b      	ldrb	r3, [r1, #0]
    f69e:	ad01      	add	r5, sp, #4
    f6a0:	4393      	bics	r3, r2
    f6a2:	001a      	movs	r2, r3
    f6a4:	2306      	movs	r3, #6
    f6a6:	4313      	orrs	r3, r2
    f6a8:	0022      	movs	r2, r4
    f6aa:	700b      	strb	r3, [r1, #0]
    f6ac:	3268      	adds	r2, #104	; 0x68
    f6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f6b0:	7811      	ldrb	r1, [r2, #0]
    f6b2:	0a1b      	lsrs	r3, r3, #8
    f6b4:	3469      	adds	r4, #105	; 0x69
    f6b6:	0609      	lsls	r1, r1, #24
    f6b8:	4319      	orrs	r1, r3
    f6ba:	7820      	ldrb	r0, [r4, #0]
    f6bc:	4b08      	ldr	r3, [pc, #32]	; (f6e0 <LorawanReceiveWindow1Callback+0x74>)
    f6be:	4798      	blx	r3
    f6c0:	2300      	movs	r3, #0
    f6c2:	702b      	strb	r3, [r5, #0]
    f6c4:	466b      	mov	r3, sp
    f6c6:	0021      	movs	r1, r4
    f6c8:	1d9a      	adds	r2, r3, #6
    f6ca:	2003      	movs	r0, #3
    f6cc:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <LorawanReceiveWindow1Callback+0x78>)
    f6ce:	4798      	blx	r3
    f6d0:	0028      	movs	r0, r5
    f6d2:	4b05      	ldr	r3, [pc, #20]	; (f6e8 <LorawanReceiveWindow1Callback+0x7c>)
    f6d4:	4798      	blx	r3
    f6d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f6d8:	20002bd4 	.word	0x20002bd4
    f6dc:	00012b45 	.word	0x00012b45
    f6e0:	0000f601 	.word	0x0000f601
    f6e4:	0000bfdd 	.word	0x0000bfdd
    f6e8:	0001477d 	.word	0x0001477d

0000f6ec <ConfigureRadioTx>:
    f6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ee:	2517      	movs	r5, #23
    f6f0:	2300      	movs	r3, #0
    f6f2:	2616      	movs	r6, #22
    f6f4:	2701      	movs	r7, #1
    f6f6:	b087      	sub	sp, #28
    f6f8:	ac01      	add	r4, sp, #4
    f6fa:	446d      	add	r5, sp
    f6fc:	9001      	str	r0, [sp, #4]
    f6fe:	702b      	strb	r3, [r5, #0]
    f700:	0020      	movs	r0, r4
    f702:	4b10      	ldr	r3, [pc, #64]	; (f744 <ConfigureRadioTx+0x58>)
    f704:	446e      	add	r6, sp
    f706:	9102      	str	r1, [sp, #8]
    f708:	9203      	str	r2, [sp, #12]
    f70a:	7037      	strb	r7, [r6, #0]
    f70c:	4798      	blx	r3
    f70e:	79e3      	ldrb	r3, [r4, #7]
    f710:	4c0d      	ldr	r4, [pc, #52]	; (f748 <ConfigureRadioTx+0x5c>)
    f712:	2b00      	cmp	r3, #0
    f714:	d00a      	beq.n	f72c <ConfigureRadioTx+0x40>
    f716:	4b0d      	ldr	r3, [pc, #52]	; (f74c <ConfigureRadioTx+0x60>)
    f718:	4a0d      	ldr	r2, [pc, #52]	; (f750 <ConfigureRadioTx+0x64>)
    f71a:	490e      	ldr	r1, [pc, #56]	; (f754 <ConfigureRadioTx+0x68>)
    f71c:	54d7      	strb	r7, [r2, r3]
    f71e:	200b      	movs	r0, #11
    f720:	4b0d      	ldr	r3, [pc, #52]	; (f758 <ConfigureRadioTx+0x6c>)
    f722:	4798      	blx	r3
    f724:	210a      	movs	r1, #10
    f726:	200b      	movs	r0, #11
    f728:	4469      	add	r1, sp
    f72a:	47a0      	blx	r4
    f72c:	a903      	add	r1, sp, #12
    f72e:	2004      	movs	r0, #4
    f730:	47a0      	blx	r4
    f732:	0031      	movs	r1, r6
    f734:	2014      	movs	r0, #20
    f736:	47a0      	blx	r4
    f738:	0029      	movs	r1, r5
    f73a:	2006      	movs	r0, #6
    f73c:	47a0      	blx	r4
    f73e:	b007      	add	sp, #28
    f740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f742:	46c0      	nop			; (mov r8, r8)
    f744:	0000e9ad 	.word	0x0000e9ad
    f748:	00013579 	.word	0x00013579
    f74c:	00000222 	.word	0x00000222
    f750:	20002bd4 	.word	0x20002bd4
    f754:	20002df5 	.word	0x20002df5
    f758:	00013489 	.word	0x00013489

0000f75c <LorawanGetChAndInitiateRadioTransmit>:
    f75c:	2301      	movs	r3, #1
    f75e:	b530      	push	{r4, r5, lr}
    f760:	4c46      	ldr	r4, [pc, #280]	; (f87c <LorawanGetChAndInitiateRadioTransmit+0x120>)
    f762:	b089      	sub	sp, #36	; 0x24
    f764:	a902      	add	r1, sp, #8
    f766:	700b      	strb	r3, [r1, #0]
    f768:	0023      	movs	r3, r4
    f76a:	33e9      	adds	r3, #233	; 0xe9
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	704b      	strb	r3, [r1, #1]
    f770:	0023      	movs	r3, r4
    f772:	33e7      	adds	r3, #231	; 0xe7
    f774:	781b      	ldrb	r3, [r3, #0]
    f776:	708b      	strb	r3, [r1, #2]
    f778:	0023      	movs	r3, r4
    f77a:	33fd      	adds	r3, #253	; 0xfd
    f77c:	781b      	ldrb	r3, [r3, #0]
    f77e:	2b01      	cmp	r3, #1
    f780:	d108      	bne.n	f794 <LorawanGetChAndInitiateRadioTransmit+0x38>
    f782:	0020      	movs	r0, r4
    f784:	220e      	movs	r2, #14
    f786:	3084      	adds	r0, #132	; 0x84
    f788:	7803      	ldrb	r3, [r0, #0]
    f78a:	4393      	bics	r3, r2
    f78c:	001a      	movs	r2, r3
    f78e:	230c      	movs	r3, #12
    f790:	4313      	orrs	r3, r2
    f792:	7003      	strb	r3, [r0, #0]
    f794:	aa05      	add	r2, sp, #20
    f796:	202e      	movs	r0, #46	; 0x2e
    f798:	4d39      	ldr	r5, [pc, #228]	; (f880 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    f79a:	47a8      	blx	r5
    f79c:	0023      	movs	r3, r4
    f79e:	2808      	cmp	r0, #8
    f7a0:	d135      	bne.n	f80e <LorawanGetChAndInitiateRadioTransmit+0xb2>
    f7a2:	33fd      	adds	r3, #253	; 0xfd
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	ad03      	add	r5, sp, #12
    f7a8:	2b04      	cmp	r3, #4
    f7aa:	d108      	bne.n	f7be <LorawanGetChAndInitiateRadioTransmit+0x62>
    f7ac:	2390      	movs	r3, #144	; 0x90
    f7ae:	2200      	movs	r2, #0
    f7b0:	009b      	lsls	r3, r3, #2
    f7b2:	54e2      	strb	r2, [r4, r3]
    f7b4:	2301      	movs	r3, #1
    f7b6:	0028      	movs	r0, r5
    f7b8:	702b      	strb	r3, [r5, #0]
    f7ba:	4b32      	ldr	r3, [pc, #200]	; (f884 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    f7bc:	4798      	blx	r3
    f7be:	9805      	ldr	r0, [sp, #20]
    f7c0:	4b31      	ldr	r3, [pc, #196]	; (f888 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    f7c2:	9906      	ldr	r1, [sp, #24]
    f7c4:	9a07      	ldr	r2, [sp, #28]
    f7c6:	4798      	blx	r3
    f7c8:	0023      	movs	r3, r4
    f7ca:	33ce      	adds	r3, #206	; 0xce
    f7cc:	881b      	ldrh	r3, [r3, #0]
    f7ce:	0028      	movs	r0, r5
    f7d0:	702b      	strb	r3, [r5, #0]
    f7d2:	4b2e      	ldr	r3, [pc, #184]	; (f88c <LorawanGetChAndInitiateRadioTransmit+0x130>)
    f7d4:	606b      	str	r3, [r5, #4]
    f7d6:	4b2e      	ldr	r3, [pc, #184]	; (f890 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    f7d8:	4798      	blx	r3
    f7da:	2800      	cmp	r0, #0
    f7dc:	d109      	bne.n	f7f2 <LorawanGetChAndInitiateRadioTransmit+0x96>
    f7de:	220e      	movs	r2, #14
    f7e0:	3484      	adds	r4, #132	; 0x84
    f7e2:	7823      	ldrb	r3, [r4, #0]
    f7e4:	4393      	bics	r3, r2
    f7e6:	001a      	movs	r2, r3
    f7e8:	2302      	movs	r3, #2
    f7ea:	4313      	orrs	r3, r2
    f7ec:	7023      	strb	r3, [r4, #0]
    f7ee:	b009      	add	sp, #36	; 0x24
    f7f0:	bd30      	pop	{r4, r5, pc}
    f7f2:	2200      	movs	r2, #0
    f7f4:	4b27      	ldr	r3, [pc, #156]	; (f894 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f7f6:	4928      	ldr	r1, [pc, #160]	; (f898 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    f7f8:	5ce3      	ldrb	r3, [r4, r3]
    f7fa:	34fc      	adds	r4, #252	; 0xfc
    f7fc:	4359      	muls	r1, r3
    f7fe:	4b27      	ldr	r3, [pc, #156]	; (f89c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    f800:	7820      	ldrb	r0, [r4, #0]
    f802:	18c9      	adds	r1, r1, r3
    f804:	4b26      	ldr	r3, [pc, #152]	; (f8a0 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    f806:	9200      	str	r2, [sp, #0]
    f808:	4c26      	ldr	r4, [pc, #152]	; (f8a4 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    f80a:	47a0      	blx	r4
    f80c:	e7ef      	b.n	f7ee <LorawanGetChAndInitiateRadioTransmit+0x92>
    f80e:	33ff      	adds	r3, #255	; 0xff
    f810:	7f5b      	ldrb	r3, [r3, #29]
    f812:	079a      	lsls	r2, r3, #30
    f814:	d515      	bpl.n	f842 <LorawanGetChAndInitiateRadioTransmit+0xe6>
    f816:	aa03      	add	r2, sp, #12
    f818:	4923      	ldr	r1, [pc, #140]	; (f8a8 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    f81a:	2026      	movs	r0, #38	; 0x26
    f81c:	47a8      	blx	r5
    f81e:	9b03      	ldr	r3, [sp, #12]
    f820:	1c5a      	adds	r2, r3, #1
    f822:	d001      	beq.n	f828 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    f824:	3314      	adds	r3, #20
    f826:	9303      	str	r3, [sp, #12]
    f828:	21fa      	movs	r1, #250	; 0xfa
    f82a:	4b1a      	ldr	r3, [pc, #104]	; (f894 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f82c:	9a03      	ldr	r2, [sp, #12]
    f82e:	5ce3      	ldrb	r3, [r4, r3]
    f830:	0089      	lsls	r1, r1, #2
    f832:	1ad3      	subs	r3, r2, r3
    f834:	2200      	movs	r2, #0
    f836:	4359      	muls	r1, r3
    f838:	34f2      	adds	r4, #242	; 0xf2
    f83a:	7820      	ldrb	r0, [r4, #0]
    f83c:	9200      	str	r2, [sp, #0]
    f83e:	4b1b      	ldr	r3, [pc, #108]	; (f8ac <LorawanGetChAndInitiateRadioTransmit+0x150>)
    f840:	e7e2      	b.n	f808 <LorawanGetChAndInitiateRadioTransmit+0xac>
    f842:	075b      	lsls	r3, r3, #29
    f844:	d508      	bpl.n	f858 <LorawanGetChAndInitiateRadioTransmit+0xfc>
    f846:	aa03      	add	r2, sp, #12
    f848:	4917      	ldr	r1, [pc, #92]	; (f8a8 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    f84a:	2032      	movs	r0, #50	; 0x32
    f84c:	47a8      	blx	r5
    f84e:	9b03      	ldr	r3, [sp, #12]
    f850:	1c5a      	adds	r2, r3, #1
    f852:	d0e9      	beq.n	f828 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    f854:	3301      	adds	r3, #1
    f856:	e7e6      	b.n	f826 <LorawanGetChAndInitiateRadioTransmit+0xca>
    f858:	0023      	movs	r3, r4
    f85a:	2201      	movs	r2, #1
    f85c:	3394      	adds	r3, #148	; 0x94
    f85e:	781b      	ldrb	r3, [r3, #0]
    f860:	401a      	ands	r2, r3
    f862:	d108      	bne.n	f876 <LorawanGetChAndInitiateRadioTransmit+0x11a>
    f864:	4b0b      	ldr	r3, [pc, #44]	; (f894 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f866:	490c      	ldr	r1, [pc, #48]	; (f898 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    f868:	5ce3      	ldrb	r3, [r4, r3]
    f86a:	34f2      	adds	r4, #242	; 0xf2
    f86c:	4359      	muls	r1, r3
    f86e:	4b0b      	ldr	r3, [pc, #44]	; (f89c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    f870:	7820      	ldrb	r0, [r4, #0]
    f872:	18c9      	adds	r1, r1, r3
    f874:	e7e2      	b.n	f83c <LorawanGetChAndInitiateRadioTransmit+0xe0>
    f876:	4b0e      	ldr	r3, [pc, #56]	; (f8b0 <LorawanGetChAndInitiateRadioTransmit+0x154>)
    f878:	4798      	blx	r3
    f87a:	e7b8      	b.n	f7ee <LorawanGetChAndInitiateRadioTransmit+0x92>
    f87c:	20002bd4 	.word	0x20002bd4
    f880:	0000bfdd 	.word	0x0000bfdd
    f884:	0001477d 	.word	0x0001477d
    f888:	0000f6ed 	.word	0x0000f6ed
    f88c:	20002e2d 	.word	0x20002e2d
    f890:	00013ea9 	.word	0x00013ea9
    f894:	0000022b 	.word	0x0000022b
    f898:	fffffc18 	.word	0xfffffc18
    f89c:	001e8480 	.word	0x001e8480
    f8a0:	0000f8b5 	.word	0x0000f8b5
    f8a4:	0000d57d 	.word	0x0000d57d
    f8a8:	20002cbb 	.word	0x20002cbb
    f8ac:	0000f96d 	.word	0x0000f96d
    f8b0:	0000f049 	.word	0x0000f049

0000f8b4 <TransmissionErrorCallback>:
    f8b4:	b530      	push	{r4, r5, lr}
    f8b6:	4c22      	ldr	r4, [pc, #136]	; (f940 <TransmissionErrorCallback+0x8c>)
    f8b8:	2501      	movs	r5, #1
    f8ba:	0023      	movs	r3, r4
    f8bc:	b08b      	sub	sp, #44	; 0x2c
    f8be:	a903      	add	r1, sp, #12
    f8c0:	700d      	strb	r5, [r1, #0]
    f8c2:	33e9      	adds	r3, #233	; 0xe9
    f8c4:	781b      	ldrb	r3, [r3, #0]
    f8c6:	aa07      	add	r2, sp, #28
    f8c8:	704b      	strb	r3, [r1, #1]
    f8ca:	0023      	movs	r3, r4
    f8cc:	33e7      	adds	r3, #231	; 0xe7
    f8ce:	781b      	ldrb	r3, [r3, #0]
    f8d0:	202e      	movs	r0, #46	; 0x2e
    f8d2:	708b      	strb	r3, [r1, #2]
    f8d4:	4b1b      	ldr	r3, [pc, #108]	; (f944 <TransmissionErrorCallback+0x90>)
    f8d6:	4798      	blx	r3
    f8d8:	2808      	cmp	r0, #8
    f8da:	d121      	bne.n	f920 <TransmissionErrorCallback+0x6c>
    f8dc:	a804      	add	r0, sp, #16
    f8de:	4b1a      	ldr	r3, [pc, #104]	; (f948 <TransmissionErrorCallback+0x94>)
    f8e0:	7005      	strb	r5, [r0, #0]
    f8e2:	4798      	blx	r3
    f8e4:	9807      	ldr	r0, [sp, #28]
    f8e6:	4b19      	ldr	r3, [pc, #100]	; (f94c <TransmissionErrorCallback+0x98>)
    f8e8:	9908      	ldr	r1, [sp, #32]
    f8ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8ec:	4798      	blx	r3
    f8ee:	0023      	movs	r3, r4
    f8f0:	33ce      	adds	r3, #206	; 0xce
    f8f2:	881b      	ldrh	r3, [r3, #0]
    f8f4:	a805      	add	r0, sp, #20
    f8f6:	7003      	strb	r3, [r0, #0]
    f8f8:	4b15      	ldr	r3, [pc, #84]	; (f950 <TransmissionErrorCallback+0x9c>)
    f8fa:	6043      	str	r3, [r0, #4]
    f8fc:	4b15      	ldr	r3, [pc, #84]	; (f954 <TransmissionErrorCallback+0xa0>)
    f8fe:	4798      	blx	r3
    f900:	2800      	cmp	r0, #0
    f902:	d01a      	beq.n	f93a <TransmissionErrorCallback+0x86>
    f904:	0023      	movs	r3, r4
    f906:	33fd      	adds	r3, #253	; 0xfd
    f908:	781b      	ldrb	r3, [r3, #0]
    f90a:	42ab      	cmp	r3, r5
    f90c:	d108      	bne.n	f920 <TransmissionErrorCallback+0x6c>
    f90e:	0021      	movs	r1, r4
    f910:	220e      	movs	r2, #14
    f912:	3184      	adds	r1, #132	; 0x84
    f914:	780b      	ldrb	r3, [r1, #0]
    f916:	4393      	bics	r3, r2
    f918:	001a      	movs	r2, r3
    f91a:	230c      	movs	r3, #12
    f91c:	4313      	orrs	r3, r2
    f91e:	700b      	strb	r3, [r1, #0]
    f920:	2200      	movs	r2, #0
    f922:	4b0d      	ldr	r3, [pc, #52]	; (f958 <TransmissionErrorCallback+0xa4>)
    f924:	490d      	ldr	r1, [pc, #52]	; (f95c <TransmissionErrorCallback+0xa8>)
    f926:	5ce3      	ldrb	r3, [r4, r3]
    f928:	34fc      	adds	r4, #252	; 0xfc
    f92a:	4359      	muls	r1, r3
    f92c:	4b0c      	ldr	r3, [pc, #48]	; (f960 <TransmissionErrorCallback+0xac>)
    f92e:	7820      	ldrb	r0, [r4, #0]
    f930:	18c9      	adds	r1, r1, r3
    f932:	9200      	str	r2, [sp, #0]
    f934:	4b0b      	ldr	r3, [pc, #44]	; (f964 <TransmissionErrorCallback+0xb0>)
    f936:	4c0c      	ldr	r4, [pc, #48]	; (f968 <TransmissionErrorCallback+0xb4>)
    f938:	47a0      	blx	r4
    f93a:	b00b      	add	sp, #44	; 0x2c
    f93c:	bd30      	pop	{r4, r5, pc}
    f93e:	46c0      	nop			; (mov r8, r8)
    f940:	20002bd4 	.word	0x20002bd4
    f944:	0000bfdd 	.word	0x0000bfdd
    f948:	0001477d 	.word	0x0001477d
    f94c:	0000f6ed 	.word	0x0000f6ed
    f950:	20002e2d 	.word	0x20002e2d
    f954:	00013ea9 	.word	0x00013ea9
    f958:	0000022b 	.word	0x0000022b
    f95c:	fffffc18 	.word	0xfffffc18
    f960:	001e8480 	.word	0x001e8480
    f964:	0000f8b5 	.word	0x0000f8b5
    f968:	0000d57d 	.word	0x0000d57d

0000f96c <UnconfirmedTransmissionCallback>:
    f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f96e:	4c3a      	ldr	r4, [pc, #232]	; (fa58 <UnconfirmedTransmissionCallback+0xec>)
    f970:	b08b      	sub	sp, #44	; 0x2c
    f972:	0023      	movs	r3, r4
    f974:	33ce      	adds	r3, #206	; 0xce
    f976:	881b      	ldrh	r3, [r3, #0]
    f978:	af05      	add	r7, sp, #20
    f97a:	703b      	strb	r3, [r7, #0]
    f97c:	4b37      	ldr	r3, [pc, #220]	; (fa5c <UnconfirmedTransmissionCallback+0xf0>)
    f97e:	a903      	add	r1, sp, #12
    f980:	9306      	str	r3, [sp, #24]
    f982:	2301      	movs	r3, #1
    f984:	700b      	strb	r3, [r1, #0]
    f986:	0023      	movs	r3, r4
    f988:	0026      	movs	r6, r4
    f98a:	33e9      	adds	r3, #233	; 0xe9
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	36e7      	adds	r6, #231	; 0xe7
    f990:	704b      	strb	r3, [r1, #1]
    f992:	7833      	ldrb	r3, [r6, #0]
    f994:	aa07      	add	r2, sp, #28
    f996:	202e      	movs	r0, #46	; 0x2e
    f998:	4d31      	ldr	r5, [pc, #196]	; (fa60 <UnconfirmedTransmissionCallback+0xf4>)
    f99a:	708b      	strb	r3, [r1, #2]
    f99c:	47a8      	blx	r5
    f99e:	2808      	cmp	r0, #8
    f9a0:	d12b      	bne.n	f9fa <UnconfirmedTransmissionCallback+0x8e>
    f9a2:	2301      	movs	r3, #1
    f9a4:	a804      	add	r0, sp, #16
    f9a6:	7003      	strb	r3, [r0, #0]
    f9a8:	4b2e      	ldr	r3, [pc, #184]	; (fa64 <UnconfirmedTransmissionCallback+0xf8>)
    f9aa:	4798      	blx	r3
    f9ac:	9807      	ldr	r0, [sp, #28]
    f9ae:	4b2e      	ldr	r3, [pc, #184]	; (fa68 <UnconfirmedTransmissionCallback+0xfc>)
    f9b0:	9908      	ldr	r1, [sp, #32]
    f9b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f9b4:	4798      	blx	r3
    f9b6:	0038      	movs	r0, r7
    f9b8:	4b2c      	ldr	r3, [pc, #176]	; (fa6c <UnconfirmedTransmissionCallback+0x100>)
    f9ba:	4798      	blx	r3
    f9bc:	2800      	cmp	r0, #0
    f9be:	d01a      	beq.n	f9f6 <UnconfirmedTransmissionCallback+0x8a>
    f9c0:	0023      	movs	r3, r4
    f9c2:	33fd      	adds	r3, #253	; 0xfd
    f9c4:	781b      	ldrb	r3, [r3, #0]
    f9c6:	2b01      	cmp	r3, #1
    f9c8:	d108      	bne.n	f9dc <UnconfirmedTransmissionCallback+0x70>
    f9ca:	0021      	movs	r1, r4
    f9cc:	220e      	movs	r2, #14
    f9ce:	3184      	adds	r1, #132	; 0x84
    f9d0:	780b      	ldrb	r3, [r1, #0]
    f9d2:	4393      	bics	r3, r2
    f9d4:	001a      	movs	r2, r3
    f9d6:	230c      	movs	r3, #12
    f9d8:	4313      	orrs	r3, r2
    f9da:	700b      	strb	r3, [r1, #0]
    f9dc:	2200      	movs	r2, #0
    f9de:	4b24      	ldr	r3, [pc, #144]	; (fa70 <UnconfirmedTransmissionCallback+0x104>)
    f9e0:	4924      	ldr	r1, [pc, #144]	; (fa74 <UnconfirmedTransmissionCallback+0x108>)
    f9e2:	5ce3      	ldrb	r3, [r4, r3]
    f9e4:	34fc      	adds	r4, #252	; 0xfc
    f9e6:	4359      	muls	r1, r3
    f9e8:	4b23      	ldr	r3, [pc, #140]	; (fa78 <UnconfirmedTransmissionCallback+0x10c>)
    f9ea:	7820      	ldrb	r0, [r4, #0]
    f9ec:	18c9      	adds	r1, r1, r3
    f9ee:	4b23      	ldr	r3, [pc, #140]	; (fa7c <UnconfirmedTransmissionCallback+0x110>)
    f9f0:	9200      	str	r2, [sp, #0]
    f9f2:	4c23      	ldr	r4, [pc, #140]	; (fa80 <UnconfirmedTransmissionCallback+0x114>)
    f9f4:	47a0      	blx	r4
    f9f6:	b00b      	add	sp, #44	; 0x2c
    f9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9fa:	4b22      	ldr	r3, [pc, #136]	; (fa84 <UnconfirmedTransmissionCallback+0x118>)
    f9fc:	4798      	blx	r3
    f9fe:	4b22      	ldr	r3, [pc, #136]	; (fa88 <UnconfirmedTransmissionCallback+0x11c>)
    fa00:	4922      	ldr	r1, [pc, #136]	; (fa8c <UnconfirmedTransmissionCallback+0x120>)
    fa02:	4798      	blx	r3
    fa04:	23fa      	movs	r3, #250	; 0xfa
    fa06:	009b      	lsls	r3, r3, #2
    fa08:	18c9      	adds	r1, r1, r3
    fa0a:	0023      	movs	r3, r4
    fa0c:	9104      	str	r1, [sp, #16]
    fa0e:	33ff      	adds	r3, #255	; 0xff
    fa10:	7f5b      	ldrb	r3, [r3, #29]
    fa12:	079a      	lsls	r2, r3, #30
    fa14:	d515      	bpl.n	fa42 <UnconfirmedTransmissionCallback+0xd6>
    fa16:	aa04      	add	r2, sp, #16
    fa18:	0031      	movs	r1, r6
    fa1a:	2026      	movs	r0, #38	; 0x26
    fa1c:	47a8      	blx	r5
    fa1e:	9b04      	ldr	r3, [sp, #16]
    fa20:	1c5a      	adds	r2, r3, #1
    fa22:	d001      	beq.n	fa28 <UnconfirmedTransmissionCallback+0xbc>
    fa24:	3314      	adds	r3, #20
    fa26:	9304      	str	r3, [sp, #16]
    fa28:	4b11      	ldr	r3, [pc, #68]	; (fa70 <UnconfirmedTransmissionCallback+0x104>)
    fa2a:	9a04      	ldr	r2, [sp, #16]
    fa2c:	5ce3      	ldrb	r3, [r4, r3]
    fa2e:	21fa      	movs	r1, #250	; 0xfa
    fa30:	1ad3      	subs	r3, r2, r3
    fa32:	2200      	movs	r2, #0
    fa34:	0089      	lsls	r1, r1, #2
    fa36:	34f2      	adds	r4, #242	; 0xf2
    fa38:	4359      	muls	r1, r3
    fa3a:	7820      	ldrb	r0, [r4, #0]
    fa3c:	4b14      	ldr	r3, [pc, #80]	; (fa90 <UnconfirmedTransmissionCallback+0x124>)
    fa3e:	9200      	str	r2, [sp, #0]
    fa40:	e7d7      	b.n	f9f2 <UnconfirmedTransmissionCallback+0x86>
    fa42:	075b      	lsls	r3, r3, #29
    fa44:	d5f0      	bpl.n	fa28 <UnconfirmedTransmissionCallback+0xbc>
    fa46:	aa04      	add	r2, sp, #16
    fa48:	0031      	movs	r1, r6
    fa4a:	2032      	movs	r0, #50	; 0x32
    fa4c:	47a8      	blx	r5
    fa4e:	9b04      	ldr	r3, [sp, #16]
    fa50:	1c5a      	adds	r2, r3, #1
    fa52:	d0e9      	beq.n	fa28 <UnconfirmedTransmissionCallback+0xbc>
    fa54:	3301      	adds	r3, #1
    fa56:	e7e6      	b.n	fa26 <UnconfirmedTransmissionCallback+0xba>
    fa58:	20002bd4 	.word	0x20002bd4
    fa5c:	20002e2d 	.word	0x20002e2d
    fa60:	0000bfdd 	.word	0x0000bfdd
    fa64:	0001477d 	.word	0x0001477d
    fa68:	0000f6ed 	.word	0x0000f6ed
    fa6c:	00013ea9 	.word	0x00013ea9
    fa70:	0000022b 	.word	0x0000022b
    fa74:	fffffc18 	.word	0xfffffc18
    fa78:	001e8480 	.word	0x001e8480
    fa7c:	0000f8b5 	.word	0x0000f8b5
    fa80:	0000d57d 	.word	0x0000d57d
    fa84:	00018919 	.word	0x00018919
    fa88:	00015231 	.word	0x00015231
    fa8c:	000007d1 	.word	0x000007d1
    fa90:	0000f96d 	.word	0x0000f96d

0000fa94 <UpdateJoinInProgress>:
    fa94:	b570      	push	{r4, r5, r6, lr}
    fa96:	2504      	movs	r5, #4
    fa98:	4c0a      	ldr	r4, [pc, #40]	; (fac4 <UpdateJoinInProgress+0x30>)
    fa9a:	0002      	movs	r2, r0
    fa9c:	0021      	movs	r1, r4
    fa9e:	3494      	adds	r4, #148	; 0x94
    faa0:	7826      	ldrb	r6, [r4, #0]
    faa2:	2001      	movs	r0, #1
    faa4:	4335      	orrs	r5, r6
    faa6:	7025      	strb	r5, [r4, #0]
    faa8:	2407      	movs	r4, #7
    faaa:	4022      	ands	r2, r4
    faac:	4082      	lsls	r2, r0
    faae:	3184      	adds	r1, #132	; 0x84
    fab0:	780b      	ldrb	r3, [r1, #0]
    fab2:	1924      	adds	r4, r4, r4
    fab4:	4383      	bics	r3, r0
    fab6:	43a3      	bics	r3, r4
    fab8:	4313      	orrs	r3, r2
    faba:	700b      	strb	r3, [r1, #0]
    fabc:	210b      	movs	r1, #11
    fabe:	4b02      	ldr	r3, [pc, #8]	; (fac8 <UpdateJoinInProgress+0x34>)
    fac0:	4798      	blx	r3
    fac2:	bd70      	pop	{r4, r5, r6, pc}
    fac4:	20002bd4 	.word	0x20002bd4
    fac8:	0000c84d 	.word	0x0000c84d

0000facc <LORAWAN_Join>:
    facc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    face:	4c33      	ldr	r4, [pc, #204]	; (fb9c <LORAWAN_Join+0xd0>)
    fad0:	0006      	movs	r6, r0
    fad2:	0023      	movs	r3, r4
    fad4:	3384      	adds	r3, #132	; 0x84
    fad6:	781b      	ldrb	r3, [r3, #0]
    fad8:	200f      	movs	r0, #15
    fada:	b25a      	sxtb	r2, r3
    fadc:	2a00      	cmp	r2, #0
    fade:	db4a      	blt.n	fb76 <LORAWAN_Join+0xaa>
    fae0:	3803      	subs	r0, #3
    fae2:	065b      	lsls	r3, r3, #25
    fae4:	d447      	bmi.n	fb76 <LORAWAN_Join+0xaa>
    fae6:	0023      	movs	r3, r4
    fae8:	3394      	adds	r3, #148	; 0x94
    faea:	781b      	ldrb	r3, [r3, #0]
    faec:	3007      	adds	r0, #7
    faee:	075b      	lsls	r3, r3, #29
    faf0:	d441      	bmi.n	fb76 <LORAWAN_Join+0xaa>
    faf2:	0023      	movs	r3, r4
    faf4:	33fd      	adds	r3, #253	; 0xfd
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	2b04      	cmp	r3, #4
    fafa:	d037      	beq.n	fb6c <LORAWAN_Join+0xa0>
    fafc:	0023      	movs	r3, r4
    fafe:	33fd      	adds	r3, #253	; 0xfd
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	2b01      	cmp	r3, #1
    fb04:	d105      	bne.n	fb12 <LORAWAN_Join+0x46>
    fb06:	0023      	movs	r3, r4
    fb08:	3384      	adds	r3, #132	; 0x84
    fb0a:	781a      	ldrb	r2, [r3, #0]
    fb0c:	230e      	movs	r3, #14
    fb0e:	421a      	tst	r2, r3
    fb10:	d130      	bne.n	fb74 <LORAWAN_Join+0xa8>
    fb12:	2102      	movs	r1, #2
    fb14:	2001      	movs	r0, #1
    fb16:	4d22      	ldr	r5, [pc, #136]	; (fba0 <LORAWAN_Join+0xd4>)
    fb18:	7026      	strb	r6, [r4, #0]
    fb1a:	47a8      	blx	r5
    fb1c:	0023      	movs	r3, r4
    fb1e:	33de      	adds	r3, #222	; 0xde
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	2e00      	cmp	r6, #0
    fb24:	d128      	bne.n	fb78 <LORAWAN_Join+0xac>
    fb26:	200b      	movs	r0, #11
    fb28:	4003      	ands	r3, r0
    fb2a:	4283      	cmp	r3, r0
    fb2c:	d003      	beq.n	fb36 <LORAWAN_Join+0x6a>
    fb2e:	4b1d      	ldr	r3, [pc, #116]	; (fba4 <LORAWAN_Join+0xd8>)
    fb30:	5ce3      	ldrb	r3, [r4, r3]
    fb32:	2b00      	cmp	r3, #0
    fb34:	d01f      	beq.n	fb76 <LORAWAN_Join+0xaa>
    fb36:	0023      	movs	r3, r4
    fb38:	3384      	adds	r3, #132	; 0x84
    fb3a:	781b      	ldrb	r3, [r3, #0]
    fb3c:	07db      	lsls	r3, r3, #31
    fb3e:	d503      	bpl.n	fb48 <LORAWAN_Join+0x7c>
    fb40:	2100      	movs	r1, #0
    fb42:	203a      	movs	r0, #58	; 0x3a
    fb44:	4b18      	ldr	r3, [pc, #96]	; (fba8 <LORAWAN_Join+0xdc>)
    fb46:	4798      	blx	r3
    fb48:	0022      	movs	r2, r4
    fb4a:	2001      	movs	r0, #1
    fb4c:	3284      	adds	r2, #132	; 0x84
    fb4e:	7813      	ldrb	r3, [r2, #0]
    fb50:	3494      	adds	r4, #148	; 0x94
    fb52:	4383      	bics	r3, r0
    fb54:	7013      	strb	r3, [r2, #0]
    fb56:	2304      	movs	r3, #4
    fb58:	7822      	ldrb	r2, [r4, #0]
    fb5a:	210b      	movs	r1, #11
    fb5c:	4313      	orrs	r3, r2
    fb5e:	7023      	strb	r3, [r4, #0]
    fb60:	47a8      	blx	r5
    fb62:	2000      	movs	r0, #0
    fb64:	4b11      	ldr	r3, [pc, #68]	; (fbac <LORAWAN_Join+0xe0>)
    fb66:	4798      	blx	r3
    fb68:	2008      	movs	r0, #8
    fb6a:	e004      	b.n	fb76 <LORAWAN_Join+0xaa>
    fb6c:	4b10      	ldr	r3, [pc, #64]	; (fbb0 <LORAWAN_Join+0xe4>)
    fb6e:	4798      	blx	r3
    fb70:	2808      	cmp	r0, #8
    fb72:	d0c3      	beq.n	fafc <LORAWAN_Join+0x30>
    fb74:	2011      	movs	r0, #17
    fb76:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    fb78:	2234      	movs	r2, #52	; 0x34
    fb7a:	200b      	movs	r0, #11
    fb7c:	4013      	ands	r3, r2
    fb7e:	4293      	cmp	r3, r2
    fb80:	d1f9      	bne.n	fb76 <LORAWAN_Join+0xaa>
    fb82:	3804      	subs	r0, #4
    fb84:	4b0b      	ldr	r3, [pc, #44]	; (fbb4 <LORAWAN_Join+0xe8>)
    fb86:	4798      	blx	r3
    fb88:	2200      	movs	r2, #0
    fb8a:	34fb      	adds	r4, #251	; 0xfb
    fb8c:	7820      	ldrb	r0, [r4, #0]
    fb8e:	4b0a      	ldr	r3, [pc, #40]	; (fbb8 <LORAWAN_Join+0xec>)
    fb90:	9200      	str	r2, [sp, #0]
    fb92:	490a      	ldr	r1, [pc, #40]	; (fbbc <LORAWAN_Join+0xf0>)
    fb94:	4c0a      	ldr	r4, [pc, #40]	; (fbc0 <LORAWAN_Join+0xf4>)
    fb96:	47a0      	blx	r4
    fb98:	e7e6      	b.n	fb68 <LORAWAN_Join+0x9c>
    fb9a:	46c0      	nop			; (mov r8, r8)
    fb9c:	20002bd4 	.word	0x20002bd4
    fba0:	0000c84d 	.word	0x0000c84d
    fba4:	0000022d 	.word	0x0000022d
    fba8:	0000c105 	.word	0x0000c105
    fbac:	00013405 	.word	0x00013405
    fbb0:	00012aa5 	.word	0x00012aa5
    fbb4:	0000fa95 	.word	0x0000fa95
    fbb8:	0000e84d 	.word	0x0000e84d
    fbbc:	0000c350 	.word	0x0000c350
    fbc0:	0000d57d 	.word	0x0000d57d

0000fbc4 <EncryptFRMPayload>:
    fbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbc6:	0007      	movs	r7, r0
    fbc8:	2401      	movs	r4, #1
    fbca:	b089      	sub	sp, #36	; 0x24
    fbcc:	9306      	str	r3, [sp, #24]
    fbce:	ab10      	add	r3, sp, #64	; 0x40
    fbd0:	881d      	ldrh	r5, [r3, #0]
    fbd2:	090b      	lsrs	r3, r1, #4
    fbd4:	9104      	str	r1, [sp, #16]
    fbd6:	9205      	str	r2, [sp, #20]
    fbd8:	9303      	str	r3, [sp, #12]
    fbda:	9b03      	ldr	r3, [sp, #12]
    fbdc:	429c      	cmp	r4, r3
    fbde:	d907      	bls.n	fbf0 <EncryptFRMPayload+0x2c>
    fbe0:	260f      	movs	r6, #15
    fbe2:	9b04      	ldr	r3, [sp, #16]
    fbe4:	4033      	ands	r3, r6
    fbe6:	1e1e      	subs	r6, r3, #0
    fbe8:	d126      	bne.n	fc38 <EncryptFRMPayload+0x74>
    fbea:	2000      	movs	r0, #0
    fbec:	b009      	add	sp, #36	; 0x24
    fbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fbf2:	0022      	movs	r2, r4
    fbf4:	9300      	str	r3, [sp, #0]
    fbf6:	9906      	ldr	r1, [sp, #24]
    fbf8:	2301      	movs	r3, #1
    fbfa:	9805      	ldr	r0, [sp, #20]
    fbfc:	4e1e      	ldr	r6, [pc, #120]	; (fc78 <EncryptFRMPayload+0xb4>)
    fbfe:	47b0      	blx	r6
    fc00:	4e1e      	ldr	r6, [pc, #120]	; (fc7c <EncryptFRMPayload+0xb8>)
    fc02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fc04:	2101      	movs	r1, #1
    fc06:	0030      	movs	r0, r6
    fc08:	4b1d      	ldr	r3, [pc, #116]	; (fc80 <EncryptFRMPayload+0xbc>)
    fc0a:	4798      	blx	r3
    fc0c:	2800      	cmp	r0, #0
    fc0e:	d1ed      	bne.n	fbec <EncryptFRMPayload+0x28>
    fc10:	1e63      	subs	r3, r4, #1
    fc12:	011b      	lsls	r3, r3, #4
    fc14:	18fb      	adds	r3, r7, r3
    fc16:	9307      	str	r3, [sp, #28]
    fc18:	9b07      	ldr	r3, [sp, #28]
    fc1a:	182a      	adds	r2, r5, r0
    fc1c:	5c19      	ldrb	r1, [r3, r0]
    fc1e:	5d83      	ldrb	r3, [r0, r6]
    fc20:	b292      	uxth	r2, r2
    fc22:	4059      	eors	r1, r3
    fc24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fc26:	3001      	adds	r0, #1
    fc28:	5499      	strb	r1, [r3, r2]
    fc2a:	2810      	cmp	r0, #16
    fc2c:	d1f4      	bne.n	fc18 <EncryptFRMPayload+0x54>
    fc2e:	3510      	adds	r5, #16
    fc30:	3401      	adds	r4, #1
    fc32:	b2ad      	uxth	r5, r5
    fc34:	b2e4      	uxtb	r4, r4
    fc36:	e7d0      	b.n	fbda <EncryptFRMPayload+0x16>
    fc38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fc3a:	0022      	movs	r2, r4
    fc3c:	9300      	str	r3, [sp, #0]
    fc3e:	9906      	ldr	r1, [sp, #24]
    fc40:	2301      	movs	r3, #1
    fc42:	9805      	ldr	r0, [sp, #20]
    fc44:	4c0c      	ldr	r4, [pc, #48]	; (fc78 <EncryptFRMPayload+0xb4>)
    fc46:	47a0      	blx	r4
    fc48:	4c0c      	ldr	r4, [pc, #48]	; (fc7c <EncryptFRMPayload+0xb8>)
    fc4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fc4c:	2101      	movs	r1, #1
    fc4e:	0020      	movs	r0, r4
    fc50:	4b0b      	ldr	r3, [pc, #44]	; (fc80 <EncryptFRMPayload+0xbc>)
    fc52:	4798      	blx	r3
    fc54:	2800      	cmp	r0, #0
    fc56:	d1c9      	bne.n	fbec <EncryptFRMPayload+0x28>
    fc58:	9b03      	ldr	r3, [sp, #12]
    fc5a:	011b      	lsls	r3, r3, #4
    fc5c:	18fb      	adds	r3, r7, r3
    fc5e:	5d07      	ldrb	r7, [r0, r4]
    fc60:	5c19      	ldrb	r1, [r3, r0]
    fc62:	182a      	adds	r2, r5, r0
    fc64:	4079      	eors	r1, r7
    fc66:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fc68:	b292      	uxth	r2, r2
    fc6a:	3001      	adds	r0, #1
    fc6c:	54b9      	strb	r1, [r7, r2]
    fc6e:	b2c2      	uxtb	r2, r0
    fc70:	4296      	cmp	r6, r2
    fc72:	d8f4      	bhi.n	fc5e <EncryptFRMPayload+0x9a>
    fc74:	e7b9      	b.n	fbea <EncryptFRMPayload+0x26>
    fc76:	46c0      	nop			; (mov r8, r8)
    fc78:	0000e96d 	.word	0x0000e96d
    fc7c:	20000f50 	.word	0x20000f50
    fc80:	0000c3f1 	.word	0x0000c3f1

0000fc84 <UpdateTransactionCompleteCbParams>:
    fc84:	2388      	movs	r3, #136	; 0x88
    fc86:	2201      	movs	r2, #1
    fc88:	b570      	push	{r4, r5, r6, lr}
    fc8a:	0001      	movs	r1, r0
    fc8c:	4c13      	ldr	r4, [pc, #76]	; (fcdc <UpdateTransactionCompleteCbParams+0x58>)
    fc8e:	4814      	ldr	r0, [pc, #80]	; (fce0 <UpdateTransactionCompleteCbParams+0x5c>)
    fc90:	009b      	lsls	r3, r3, #2
    fc92:	54e2      	strb	r2, [r4, r3]
    fc94:	7842      	ldrb	r2, [r0, #1]
    fc96:	7803      	ldrb	r3, [r0, #0]
    fc98:	0212      	lsls	r2, r2, #8
    fc9a:	431a      	orrs	r2, r3
    fc9c:	7883      	ldrb	r3, [r0, #2]
    fc9e:	041b      	lsls	r3, r3, #16
    fca0:	431a      	orrs	r2, r3
    fca2:	78c3      	ldrb	r3, [r0, #3]
    fca4:	061b      	lsls	r3, r3, #24
    fca6:	4313      	orrs	r3, r2
    fca8:	d00e      	beq.n	fcc8 <UpdateTransactionCompleteCbParams+0x44>
    fcaa:	0022      	movs	r2, r4
    fcac:	2504      	movs	r5, #4
    fcae:	32fc      	adds	r2, #252	; 0xfc
    fcb0:	6890      	ldr	r0, [r2, #8]
    fcb2:	4228      	tst	r0, r5
    fcb4:	d008      	beq.n	fcc8 <UpdateTransactionCompleteCbParams+0x44>
    fcb6:	68d0      	ldr	r0, [r2, #12]
    fcb8:	2800      	cmp	r0, #0
    fcba:	d005      	beq.n	fcc8 <UpdateTransactionCompleteCbParams+0x44>
    fcbc:	0022      	movs	r2, r4
    fcbe:	32ff      	adds	r2, #255	; 0xff
    fcc0:	7451      	strb	r1, [r2, #17]
    fcc2:	7355      	strb	r5, [r2, #13]
    fcc4:	4907      	ldr	r1, [pc, #28]	; (fce4 <UpdateTransactionCompleteCbParams+0x60>)
    fcc6:	4798      	blx	r3
    fcc8:	2388      	movs	r3, #136	; 0x88
    fcca:	009b      	lsls	r3, r3, #2
    fccc:	5ce3      	ldrb	r3, [r4, r3]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d002      	beq.n	fcd8 <UpdateTransactionCompleteCbParams+0x54>
    fcd2:	2300      	movs	r3, #0
    fcd4:	34fc      	adds	r4, #252	; 0xfc
    fcd6:	60e3      	str	r3, [r4, #12]
    fcd8:	bd70      	pop	{r4, r5, r6, pc}
    fcda:	46c0      	nop			; (mov r8, r8)
    fcdc:	20002bd4 	.word	0x20002bd4
    fce0:	20002f30 	.word	0x20002f30
    fce4:	20002ce0 	.word	0x20002ce0

0000fce8 <UpdateRxDataAvailableCbParams>:
    fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcea:	4e0f      	ldr	r6, [pc, #60]	; (fd28 <UpdateRxDataAvailableCbParams+0x40>)
    fcec:	469c      	mov	ip, r3
    fcee:	7875      	ldrb	r5, [r6, #1]
    fcf0:	7834      	ldrb	r4, [r6, #0]
    fcf2:	022d      	lsls	r5, r5, #8
    fcf4:	4325      	orrs	r5, r4
    fcf6:	78b4      	ldrb	r4, [r6, #2]
    fcf8:	0424      	lsls	r4, r4, #16
    fcfa:	4325      	orrs	r5, r4
    fcfc:	78f4      	ldrb	r4, [r6, #3]
    fcfe:	0624      	lsls	r4, r4, #24
    fd00:	432c      	orrs	r4, r5
    fd02:	d010      	beq.n	fd26 <UpdateRxDataAvailableCbParams+0x3e>
    fd04:	4d09      	ldr	r5, [pc, #36]	; (fd2c <UpdateRxDataAvailableCbParams+0x44>)
    fd06:	2702      	movs	r7, #2
    fd08:	002e      	movs	r6, r5
    fd0a:	36fc      	adds	r6, #252	; 0xfc
    fd0c:	68b3      	ldr	r3, [r6, #8]
    fd0e:	423b      	tst	r3, r7
    fd10:	d009      	beq.n	fd26 <UpdateRxDataAvailableCbParams+0x3e>
    fd12:	4663      	mov	r3, ip
    fd14:	35ff      	adds	r5, #255	; 0xff
    fd16:	6170      	str	r0, [r6, #20]
    fd18:	61b1      	str	r1, [r6, #24]
    fd1a:	736f      	strb	r7, [r5, #13]
    fd1c:	766a      	strb	r2, [r5, #25]
    fd1e:	76ab      	strb	r3, [r5, #26]
    fd20:	4903      	ldr	r1, [pc, #12]	; (fd30 <UpdateRxDataAvailableCbParams+0x48>)
    fd22:	68f0      	ldr	r0, [r6, #12]
    fd24:	47a0      	blx	r4
    fd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd28:	20002f30 	.word	0x20002f30
    fd2c:	20002bd4 	.word	0x20002bd4
    fd30:	20002ce0 	.word	0x20002ce0

0000fd34 <LorawanNotifyAppOnRxdone>:
    fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd36:	4c25      	ldr	r4, [pc, #148]	; (fdcc <LorawanNotifyAppOnRxdone+0x98>)
    fd38:	0007      	movs	r7, r0
    fd3a:	0023      	movs	r3, r4
    fd3c:	33fd      	adds	r3, #253	; 0xfd
    fd3e:	781b      	ldrb	r3, [r3, #0]
    fd40:	000d      	movs	r5, r1
    fd42:	0016      	movs	r6, r2
    fd44:	2b01      	cmp	r3, #1
    fd46:	d136      	bne.n	fdb6 <LorawanNotifyAppOnRxdone+0x82>
    fd48:	0022      	movs	r2, r4
    fd4a:	210e      	movs	r1, #14
    fd4c:	3284      	adds	r2, #132	; 0x84
    fd4e:	7813      	ldrb	r3, [r2, #0]
    fd50:	438b      	bics	r3, r1
    fd52:	7013      	strb	r3, [r2, #0]
    fd54:	491e      	ldr	r1, [pc, #120]	; (fdd0 <LorawanNotifyAppOnRxdone+0x9c>)
    fd56:	784a      	ldrb	r2, [r1, #1]
    fd58:	780b      	ldrb	r3, [r1, #0]
    fd5a:	0212      	lsls	r2, r2, #8
    fd5c:	431a      	orrs	r2, r3
    fd5e:	788b      	ldrb	r3, [r1, #2]
    fd60:	041b      	lsls	r3, r3, #16
    fd62:	431a      	orrs	r2, r3
    fd64:	78cb      	ldrb	r3, [r1, #3]
    fd66:	061b      	lsls	r3, r3, #24
    fd68:	4313      	orrs	r3, r2
    fd6a:	d023      	beq.n	fdb4 <LorawanNotifyAppOnRxdone+0x80>
    fd6c:	0022      	movs	r2, r4
    fd6e:	2120      	movs	r1, #32
    fd70:	3294      	adds	r2, #148	; 0x94
    fd72:	7813      	ldrb	r3, [r2, #0]
    fd74:	438b      	bics	r3, r1
    fd76:	7013      	strb	r3, [r2, #0]
    fd78:	0023      	movs	r3, r4
    fd7a:	33fd      	adds	r3, #253	; 0xfd
    fd7c:	781b      	ldrb	r3, [r3, #0]
    fd7e:	7878      	ldrb	r0, [r7, #1]
    fd80:	469c      	mov	ip, r3
    fd82:	78fa      	ldrb	r2, [r7, #3]
    fd84:	78b9      	ldrb	r1, [r7, #2]
    fd86:	793b      	ldrb	r3, [r7, #4]
    fd88:	4667      	mov	r7, ip
    fd8a:	0209      	lsls	r1, r1, #8
    fd8c:	4301      	orrs	r1, r0
    fd8e:	0410      	lsls	r0, r2, #16
    fd90:	4308      	orrs	r0, r1
    fd92:	061b      	lsls	r3, r3, #24
    fd94:	4318      	orrs	r0, r3
    fd96:	0032      	movs	r2, r6
    fd98:	2308      	movs	r3, #8
    fd9a:	0029      	movs	r1, r5
    fd9c:	2f04      	cmp	r7, #4
    fd9e:	d112      	bne.n	fdc6 <LorawanNotifyAppOnRxdone+0x92>
    fda0:	4d0c      	ldr	r5, [pc, #48]	; (fdd4 <LorawanNotifyAppOnRxdone+0xa0>)
    fda2:	47a8      	blx	r5
    fda4:	2388      	movs	r3, #136	; 0x88
    fda6:	009b      	lsls	r3, r3, #2
    fda8:	5ce3      	ldrb	r3, [r4, r3]
    fdaa:	2b00      	cmp	r3, #0
    fdac:	d102      	bne.n	fdb4 <LorawanNotifyAppOnRxdone+0x80>
    fdae:	2008      	movs	r0, #8
    fdb0:	4b09      	ldr	r3, [pc, #36]	; (fdd8 <LorawanNotifyAppOnRxdone+0xa4>)
    fdb2:	4798      	blx	r3
    fdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdb6:	2b04      	cmp	r3, #4
    fdb8:	d1cc      	bne.n	fd54 <LorawanNotifyAppOnRxdone+0x20>
    fdba:	0023      	movs	r3, r4
    fdbc:	33f1      	adds	r3, #241	; 0xf1
    fdbe:	7818      	ldrb	r0, [r3, #0]
    fdc0:	4b06      	ldr	r3, [pc, #24]	; (fddc <LorawanNotifyAppOnRxdone+0xa8>)
    fdc2:	4798      	blx	r3
    fdc4:	e7c6      	b.n	fd54 <LorawanNotifyAppOnRxdone+0x20>
    fdc6:	4d06      	ldr	r5, [pc, #24]	; (fde0 <LorawanNotifyAppOnRxdone+0xac>)
    fdc8:	47a8      	blx	r5
    fdca:	e7eb      	b.n	fda4 <LorawanNotifyAppOnRxdone+0x70>
    fdcc:	20002bd4 	.word	0x20002bd4
    fdd0:	20002f30 	.word	0x20002f30
    fdd4:	00012cf1 	.word	0x00012cf1
    fdd8:	0000fc85 	.word	0x0000fc85
    fddc:	0000d895 	.word	0x0000d895
    fde0:	0000fce9 	.word	0x0000fce9

0000fde4 <LorawanSetReceiveWindow2Parameters>:
    fde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fde6:	466b      	mov	r3, sp
    fde8:	1cdd      	adds	r5, r3, #3
    fdea:	9001      	str	r0, [sp, #4]
    fdec:	7029      	strb	r1, [r5, #0]
    fdee:	2001      	movs	r0, #1
    fdf0:	a901      	add	r1, sp, #4
    fdf2:	4c09      	ldr	r4, [pc, #36]	; (fe18 <LorawanSetReceiveWindow2Parameters+0x34>)
    fdf4:	47a0      	blx	r4
    fdf6:	2808      	cmp	r0, #8
    fdf8:	d002      	beq.n	fe00 <LorawanSetReceiveWindow2Parameters+0x1c>
    fdfa:	240a      	movs	r4, #10
    fdfc:	0020      	movs	r0, r4
    fdfe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fe00:	0029      	movs	r1, r5
    fe02:	200f      	movs	r0, #15
    fe04:	47a0      	blx	r4
    fe06:	0004      	movs	r4, r0
    fe08:	2808      	cmp	r0, #8
    fe0a:	d1f6      	bne.n	fdfa <LorawanSetReceiveWindow2Parameters+0x16>
    fe0c:	7829      	ldrb	r1, [r5, #0]
    fe0e:	9801      	ldr	r0, [sp, #4]
    fe10:	4b02      	ldr	r3, [pc, #8]	; (fe1c <LorawanSetReceiveWindow2Parameters+0x38>)
    fe12:	4798      	blx	r3
    fe14:	e7f2      	b.n	fdfc <LorawanSetReceiveWindow2Parameters+0x18>
    fe16:	46c0      	nop			; (mov r8, r8)
    fe18:	0000bff9 	.word	0x0000bff9
    fe1c:	0000f09d 	.word	0x0000f09d

0000fe20 <LorawanSetReceiveWindowCParameters>:
    fe20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fe22:	466b      	mov	r3, sp
    fe24:	1cdc      	adds	r4, r3, #3
    fe26:	9001      	str	r0, [sp, #4]
    fe28:	7021      	strb	r1, [r4, #0]
    fe2a:	2001      	movs	r0, #1
    fe2c:	a901      	add	r1, sp, #4
    fe2e:	4d0d      	ldr	r5, [pc, #52]	; (fe64 <LorawanSetReceiveWindowCParameters+0x44>)
    fe30:	47a8      	blx	r5
    fe32:	2808      	cmp	r0, #8
    fe34:	d001      	beq.n	fe3a <LorawanSetReceiveWindowCParameters+0x1a>
    fe36:	200a      	movs	r0, #10
    fe38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fe3a:	0021      	movs	r1, r4
    fe3c:	200f      	movs	r0, #15
    fe3e:	47a8      	blx	r5
    fe40:	2808      	cmp	r0, #8
    fe42:	d1f8      	bne.n	fe36 <LorawanSetReceiveWindowCParameters+0x16>
    fe44:	4b08      	ldr	r3, [pc, #32]	; (fe68 <LorawanSetReceiveWindowCParameters+0x48>)
    fe46:	9a01      	ldr	r2, [sp, #4]
    fe48:	0019      	movs	r1, r3
    fe4a:	7824      	ldrb	r4, [r4, #0]
    fe4c:	3173      	adds	r1, #115	; 0x73
    fe4e:	336f      	adds	r3, #111	; 0x6f
    fe50:	700c      	strb	r4, [r1, #0]
    fe52:	0a11      	lsrs	r1, r2, #8
    fe54:	701a      	strb	r2, [r3, #0]
    fe56:	7059      	strb	r1, [r3, #1]
    fe58:	0c11      	lsrs	r1, r2, #16
    fe5a:	0e12      	lsrs	r2, r2, #24
    fe5c:	7099      	strb	r1, [r3, #2]
    fe5e:	70da      	strb	r2, [r3, #3]
    fe60:	e7ea      	b.n	fe38 <LorawanSetReceiveWindowCParameters+0x18>
    fe62:	46c0      	nop			; (mov r8, r8)
    fe64:	0000bff9 	.word	0x0000bff9
    fe68:	20002bd4 	.word	0x20002bd4

0000fe6c <LorawanSetFrequency>:
    fe6c:	b507      	push	{r0, r1, r2, lr}
    fe6e:	466b      	mov	r3, sp
    fe70:	9100      	str	r1, [sp, #0]
    fe72:	7118      	strb	r0, [r3, #4]
    fe74:	4669      	mov	r1, sp
    fe76:	2000      	movs	r0, #0
    fe78:	4b01      	ldr	r3, [pc, #4]	; (fe80 <LorawanSetFrequency+0x14>)
    fe7a:	4798      	blx	r3
    fe7c:	bd0e      	pop	{r1, r2, r3, pc}
    fe7e:	46c0      	nop			; (mov r8, r8)
    fe80:	0000c105 	.word	0x0000c105

0000fe84 <LorawanGetReceiveWindow2Parameters>:
    fe84:	4a06      	ldr	r2, [pc, #24]	; (fea0 <LorawanGetReceiveWindow2Parameters+0x1c>)
    fe86:	0013      	movs	r3, r2
    fe88:	336e      	adds	r3, #110	; 0x6e
    fe8a:	781b      	ldrb	r3, [r3, #0]
    fe8c:	7103      	strb	r3, [r0, #4]
    fe8e:	0013      	movs	r3, r2
    fe90:	326c      	adds	r2, #108	; 0x6c
    fe92:	336a      	adds	r3, #106	; 0x6a
    fe94:	8819      	ldrh	r1, [r3, #0]
    fe96:	8813      	ldrh	r3, [r2, #0]
    fe98:	041b      	lsls	r3, r3, #16
    fe9a:	430b      	orrs	r3, r1
    fe9c:	6003      	str	r3, [r0, #0]
    fe9e:	4770      	bx	lr
    fea0:	20002bd4 	.word	0x20002bd4

0000fea4 <LorawanGetReceiveWindowCParameters>:
    fea4:	4a09      	ldr	r2, [pc, #36]	; (fecc <LorawanGetReceiveWindowCParameters+0x28>)
    fea6:	0013      	movs	r3, r2
    fea8:	3373      	adds	r3, #115	; 0x73
    feaa:	781b      	ldrb	r3, [r3, #0]
    feac:	7103      	strb	r3, [r0, #4]
    feae:	0013      	movs	r3, r2
    feb0:	336f      	adds	r3, #111	; 0x6f
    feb2:	7819      	ldrb	r1, [r3, #0]
    feb4:	6f13      	ldr	r3, [r2, #112]	; 0x70
    feb6:	021b      	lsls	r3, r3, #8
    feb8:	430b      	orrs	r3, r1
    feba:	0a1a      	lsrs	r2, r3, #8
    febc:	7003      	strb	r3, [r0, #0]
    febe:	7042      	strb	r2, [r0, #1]
    fec0:	0c1a      	lsrs	r2, r3, #16
    fec2:	0e1b      	lsrs	r3, r3, #24
    fec4:	7082      	strb	r2, [r0, #2]
    fec6:	70c3      	strb	r3, [r0, #3]
    fec8:	4770      	bx	lr
    feca:	46c0      	nop			; (mov r8, r8)
    fecc:	20002bd4 	.word	0x20002bd4

0000fed0 <LORAWAN_GetAttr>:
    fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fed2:	000b      	movs	r3, r1
    fed4:	b093      	sub	sp, #76	; 0x4c
    fed6:	0016      	movs	r6, r2
    fed8:	2845      	cmp	r0, #69	; 0x45
    feda:	d847      	bhi.n	ff6c <LORAWAN_GetAttr+0x9c>
    fedc:	f005 f82e 	bl	14f3c <__gnu_thumb1_case_uhi>
    fee0:	00650049 	.word	0x00650049
    fee4:	00790069 	.word	0x00790069
    fee8:	00750071 	.word	0x00750071
    feec:	0082007d 	.word	0x0082007d
    fef0:	00890086 	.word	0x00890086
    fef4:	0092008e 	.word	0x0092008e
    fef8:	009d0095 	.word	0x009d0095
    fefc:	00a300a0 	.word	0x00a300a0
    ff00:	00aa00a7 	.word	0x00aa00a7
    ff04:	00b000ad 	.word	0x00b000ad
    ff08:	00de00b3 	.word	0x00de00b3
    ff0c:	00b900e2 	.word	0x00b900e2
    ff10:	00ee00b6 	.word	0x00ee00b6
    ff14:	00d900e8 	.word	0x00d900e8
    ff18:	00cd00d4 	.word	0x00cd00d4
    ff1c:	009a0046 	.word	0x009a0046
    ff20:	00c900c5 	.word	0x00c900c5
    ff24:	00bf00c2 	.word	0x00bf00c2
    ff28:	00eb00e5 	.word	0x00eb00e5
    ff2c:	004f004f 	.word	0x004f004f
    ff30:	00f70051 	.word	0x00f70051
    ff34:	0115011e 	.word	0x0115011e
    ff38:	012b0108 	.word	0x012b0108
    ff3c:	01450139 	.word	0x01450139
    ff40:	015d0151 	.word	0x015d0151
    ff44:	0046016a 	.word	0x0046016a
    ff48:	017501a0 	.word	0x017501a0
    ff4c:	017e0179 	.word	0x017e0179
    ff50:	01880183 	.word	0x01880183
    ff54:	018f018c 	.word	0x018f018c
    ff58:	01950192 	.word	0x01950192
    ff5c:	0046019d 	.word	0x0046019d
    ff60:	00460046 	.word	0x00460046
    ff64:	01a901a4 	.word	0x01a901a4
    ff68:	02c601fc 	.word	0x02c601fc
    ff6c:	200a      	movs	r0, #10
    ff6e:	b013      	add	sp, #76	; 0x4c
    ff70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff72:	2208      	movs	r2, #8
    ff74:	49c8      	ldr	r1, [pc, #800]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ff76:	315d      	adds	r1, #93	; 0x5d
    ff78:	0030      	movs	r0, r6
    ff7a:	4bc8      	ldr	r3, [pc, #800]	; (1029c <LORAWAN_GetAttr+0x3cc>)
    ff7c:	4798      	blx	r3
    ff7e:	2008      	movs	r0, #8
    ff80:	e7f5      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
    ff82:	ac0e      	add	r4, sp, #56	; 0x38
    ff84:	0021      	movs	r1, r4
    ff86:	4bc6      	ldr	r3, [pc, #792]	; (102a0 <LORAWAN_GetAttr+0x3d0>)
    ff88:	201d      	movs	r0, #29
    ff8a:	4798      	blx	r3
    ff8c:	4bc2      	ldr	r3, [pc, #776]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ff8e:	a910      	add	r1, sp, #64	; 0x40
    ff90:	33fe      	adds	r3, #254	; 0xfe
    ff92:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    ff94:	2208      	movs	r2, #8
    ff96:	808b      	strh	r3, [r1, #4]
    ff98:	7923      	ldrb	r3, [r4, #4]
    ff9a:	718b      	strb	r3, [r1, #6]
    ff9c:	8823      	ldrh	r3, [r4, #0]
    ff9e:	800b      	strh	r3, [r1, #0]
    ffa0:	8863      	ldrh	r3, [r4, #2]
    ffa2:	804b      	strh	r3, [r1, #2]
    ffa4:	7963      	ldrb	r3, [r4, #5]
    ffa6:	71cb      	strb	r3, [r1, #7]
    ffa8:	e7e6      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
    ffaa:	49bb      	ldr	r1, [pc, #748]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffac:	2208      	movs	r2, #8
    ffae:	3155      	adds	r1, #85	; 0x55
    ffb0:	e7e2      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
    ffb2:	4bb9      	ldr	r3, [pc, #740]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffb4:	681a      	ldr	r2, [r3, #0]
    ffb6:	791b      	ldrb	r3, [r3, #4]
    ffb8:	0a12      	lsrs	r2, r2, #8
    ffba:	061b      	lsls	r3, r3, #24
    ffbc:	4313      	orrs	r3, r2
    ffbe:	6033      	str	r3, [r6, #0]
    ffc0:	e7dd      	b.n	ff7e <LORAWAN_GetAttr+0xae>
    ffc2:	49b5      	ldr	r1, [pc, #724]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffc4:	2210      	movs	r2, #16
    ffc6:	3105      	adds	r1, #5
    ffc8:	e7d6      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
    ffca:	49b3      	ldr	r1, [pc, #716]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffcc:	2210      	movs	r2, #16
    ffce:	3115      	adds	r1, #21
    ffd0:	e7d2      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
    ffd2:	49b1      	ldr	r1, [pc, #708]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffd4:	2210      	movs	r2, #16
    ffd6:	3145      	adds	r1, #69	; 0x45
    ffd8:	e7ce      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
    ffda:	4baf      	ldr	r3, [pc, #700]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffdc:	3384      	adds	r3, #132	; 0x84
    ffde:	781b      	ldrb	r3, [r3, #0]
    ffe0:	069b      	lsls	r3, r3, #26
    ffe2:	e03a      	b.n	1005a <LORAWAN_GetAttr+0x18a>
    ffe4:	4bac      	ldr	r3, [pc, #688]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffe6:	33e7      	adds	r3, #231	; 0xe7
    ffe8:	781b      	ldrb	r3, [r3, #0]
    ffea:	e005      	b.n	fff8 <LORAWAN_GetAttr+0x128>
    ffec:	4baa      	ldr	r3, [pc, #680]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    ffee:	33e9      	adds	r3, #233	; 0xe9
    fff0:	e7fa      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
    fff2:	4ba9      	ldr	r3, [pc, #676]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    fff4:	33ff      	adds	r3, #255	; 0xff
    fff6:	785b      	ldrb	r3, [r3, #1]
    fff8:	7033      	strb	r3, [r6, #0]
    fffa:	e7c0      	b.n	ff7e <LORAWAN_GetAttr+0xae>
    fffc:	4ba6      	ldr	r3, [pc, #664]	; (10298 <LORAWAN_GetAttr+0x3c8>)
    fffe:	3388      	adds	r3, #136	; 0x88
   10000:	681b      	ldr	r3, [r3, #0]
   10002:	e7dc      	b.n	ffbe <LORAWAN_GetAttr+0xee>
   10004:	4ba4      	ldr	r3, [pc, #656]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10006:	338c      	adds	r3, #140	; 0x8c
   10008:	e7fa      	b.n	10000 <LORAWAN_GetAttr+0x130>
   1000a:	4ba3      	ldr	r3, [pc, #652]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1000c:	33d0      	adds	r3, #208	; 0xd0
   1000e:	881b      	ldrh	r3, [r3, #0]
   10010:	8033      	strh	r3, [r6, #0]
   10012:	e7b4      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   10014:	4ba0      	ldr	r3, [pc, #640]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10016:	33d2      	adds	r3, #210	; 0xd2
   10018:	e7f9      	b.n	1000e <LORAWAN_GetAttr+0x13e>
   1001a:	4b9f      	ldr	r3, [pc, #636]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1001c:	33d4      	adds	r3, #212	; 0xd4
   1001e:	e7f6      	b.n	1000e <LORAWAN_GetAttr+0x13e>
   10020:	4b9d      	ldr	r3, [pc, #628]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10022:	33d6      	adds	r3, #214	; 0xd6
   10024:	e7f3      	b.n	1000e <LORAWAN_GetAttr+0x13e>
   10026:	4b9c      	ldr	r3, [pc, #624]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10028:	33d8      	adds	r3, #216	; 0xd8
   1002a:	881b      	ldrh	r3, [r3, #0]
   1002c:	e7e4      	b.n	fff8 <LORAWAN_GetAttr+0x128>
   1002e:	4b9a      	ldr	r3, [pc, #616]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10030:	33dc      	adds	r3, #220	; 0xdc
   10032:	e7d9      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   10034:	4b98      	ldr	r3, [pc, #608]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10036:	33dd      	adds	r3, #221	; 0xdd
   10038:	e7d6      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   1003a:	4b97      	ldr	r3, [pc, #604]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1003c:	33da      	adds	r3, #218	; 0xda
   1003e:	e7e6      	b.n	1000e <LORAWAN_GetAttr+0x13e>
   10040:	4b95      	ldr	r3, [pc, #596]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10042:	33e2      	adds	r3, #226	; 0xe2
   10044:	e7d0      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   10046:	4b94      	ldr	r3, [pc, #592]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10048:	33e1      	adds	r3, #225	; 0xe1
   1004a:	e7cd      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   1004c:	4b92      	ldr	r3, [pc, #584]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1004e:	33e8      	adds	r3, #232	; 0xe8
   10050:	e7ca      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   10052:	4b91      	ldr	r3, [pc, #580]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10054:	3384      	adds	r3, #132	; 0x84
   10056:	781b      	ldrb	r3, [r3, #0]
   10058:	06db      	lsls	r3, r3, #27
   1005a:	0fdb      	lsrs	r3, r3, #31
   1005c:	e7cc      	b.n	fff8 <LORAWAN_GetAttr+0x128>
   1005e:	4b8e      	ldr	r3, [pc, #568]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10060:	33e6      	adds	r3, #230	; 0xe6
   10062:	e7c1      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   10064:	4b8c      	ldr	r3, [pc, #560]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10066:	33e5      	adds	r3, #229	; 0xe5
   10068:	e7be      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   1006a:	4b8b      	ldr	r3, [pc, #556]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1006c:	3398      	adds	r3, #152	; 0x98
   1006e:	781b      	ldrb	r3, [r3, #0]
   10070:	e7ce      	b.n	10010 <LORAWAN_GetAttr+0x140>
   10072:	4b89      	ldr	r3, [pc, #548]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10074:	3308      	adds	r3, #8
   10076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10078:	e7a1      	b.n	ffbe <LORAWAN_GetAttr+0xee>
   1007a:	2016      	movs	r0, #22
   1007c:	781b      	ldrb	r3, [r3, #0]
   1007e:	a910      	add	r1, sp, #64	; 0x40
   10080:	700b      	strb	r3, [r1, #0]
   10082:	4b88      	ldr	r3, [pc, #544]	; (102a4 <LORAWAN_GetAttr+0x3d4>)
   10084:	4798      	blx	r3
   10086:	e77a      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   10088:	781b      	ldrb	r3, [r3, #0]
   1008a:	a910      	add	r1, sp, #64	; 0x40
   1008c:	700b      	strb	r3, [r1, #0]
   1008e:	2012      	movs	r0, #18
   10090:	e7f7      	b.n	10082 <LORAWAN_GetAttr+0x1b2>
   10092:	781b      	ldrb	r3, [r3, #0]
   10094:	a910      	add	r1, sp, #64	; 0x40
   10096:	700b      	strb	r3, [r1, #0]
   10098:	2000      	movs	r0, #0
   1009a:	e7f2      	b.n	10082 <LORAWAN_GetAttr+0x1b2>
   1009c:	0010      	movs	r0, r2
   1009e:	4b82      	ldr	r3, [pc, #520]	; (102a8 <LORAWAN_GetAttr+0x3d8>)
   100a0:	4798      	blx	r3
   100a2:	e76c      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   100a4:	0010      	movs	r0, r2
   100a6:	4b81      	ldr	r3, [pc, #516]	; (102ac <LORAWAN_GetAttr+0x3dc>)
   100a8:	e7fa      	b.n	100a0 <LORAWAN_GetAttr+0x1d0>
   100aa:	4b7b      	ldr	r3, [pc, #492]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   100ac:	33ff      	adds	r3, #255	; 0xff
   100ae:	e79b      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   100b0:	4b79      	ldr	r3, [pc, #484]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   100b2:	33fd      	adds	r3, #253	; 0xfd
   100b4:	e798      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   100b6:	4b78      	ldr	r3, [pc, #480]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   100b8:	33fe      	adds	r3, #254	; 0xfe
   100ba:	e795      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   100bc:	21fa      	movs	r1, #250	; 0xfa
   100be:	4b76      	ldr	r3, [pc, #472]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   100c0:	0089      	lsls	r1, r1, #2
   100c2:	3390      	adds	r3, #144	; 0x90
   100c4:	6818      	ldr	r0, [r3, #0]
   100c6:	4b7a      	ldr	r3, [pc, #488]	; (102b0 <LORAWAN_GetAttr+0x3e0>)
   100c8:	4798      	blx	r3
   100ca:	8030      	strh	r0, [r6, #0]
   100cc:	e757      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   100ce:	780a      	ldrb	r2, [r1, #0]
   100d0:	200a      	movs	r0, #10
   100d2:	2a03      	cmp	r2, #3
   100d4:	d900      	bls.n	100d8 <LORAWAN_GetAttr+0x208>
   100d6:	e74a      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   100d8:	232e      	movs	r3, #46	; 0x2e
   100da:	496f      	ldr	r1, [pc, #444]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   100dc:	33ff      	adds	r3, #255	; 0xff
   100de:	5cc9      	ldrb	r1, [r1, r3]
   100e0:	3b2d      	subs	r3, #45	; 0x2d
   100e2:	3bff      	subs	r3, #255	; 0xff
   100e4:	4093      	lsls	r3, r2
   100e6:	400b      	ands	r3, r1
   100e8:	1e5a      	subs	r2, r3, #1
   100ea:	4193      	sbcs	r3, r2
   100ec:	7033      	strb	r3, [r6, #0]
   100ee:	e02e      	b.n	1014e <LORAWAN_GetAttr+0x27e>
   100f0:	780b      	ldrb	r3, [r1, #0]
   100f2:	200a      	movs	r0, #10
   100f4:	2b03      	cmp	r3, #3
   100f6:	d900      	bls.n	100fa <LORAWAN_GetAttr+0x22a>
   100f8:	e739      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   100fa:	213c      	movs	r1, #60	; 0x3c
   100fc:	4359      	muls	r1, r3
   100fe:	3145      	adds	r1, #69	; 0x45
   10100:	4b65      	ldr	r3, [pc, #404]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10102:	31ff      	adds	r1, #255	; 0xff
   10104:	18c9      	adds	r1, r1, r3
   10106:	2210      	movs	r2, #16
   10108:	e736      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
   1010a:	780b      	ldrb	r3, [r1, #0]
   1010c:	200a      	movs	r0, #10
   1010e:	2b03      	cmp	r3, #3
   10110:	d900      	bls.n	10114 <LORAWAN_GetAttr+0x244>
   10112:	e72c      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10114:	213c      	movs	r1, #60	; 0x3c
   10116:	4359      	muls	r1, r3
   10118:	3135      	adds	r1, #53	; 0x35
   1011a:	e7f1      	b.n	10100 <LORAWAN_GetAttr+0x230>
   1011c:	780b      	ldrb	r3, [r1, #0]
   1011e:	200a      	movs	r0, #10
   10120:	2b03      	cmp	r3, #3
   10122:	d900      	bls.n	10126 <LORAWAN_GetAttr+0x256>
   10124:	e723      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10126:	213c      	movs	r1, #60	; 0x3c
   10128:	4359      	muls	r1, r3
   1012a:	4b5b      	ldr	r3, [pc, #364]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1012c:	3131      	adds	r1, #49	; 0x31
   1012e:	31ff      	adds	r1, #255	; 0xff
   10130:	18c9      	adds	r1, r1, r3
   10132:	2204      	movs	r2, #4
   10134:	e720      	b.n	ff78 <LORAWAN_GetAttr+0xa8>
   10136:	780a      	ldrb	r2, [r1, #0]
   10138:	200a      	movs	r0, #10
   1013a:	2a03      	cmp	r2, #3
   1013c:	d900      	bls.n	10140 <LORAWAN_GetAttr+0x270>
   1013e:	e716      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10140:	233c      	movs	r3, #60	; 0x3c
   10142:	435a      	muls	r2, r3
   10144:	4b54      	ldr	r3, [pc, #336]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10146:	189b      	adds	r3, r3, r2
   10148:	33fc      	adds	r3, #252	; 0xfc
   1014a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1014c:	6033      	str	r3, [r6, #0]
   1014e:	3802      	subs	r0, #2
   10150:	e70d      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10152:	780a      	ldrb	r2, [r1, #0]
   10154:	200a      	movs	r0, #10
   10156:	2a03      	cmp	r2, #3
   10158:	d900      	bls.n	1015c <LORAWAN_GetAttr+0x28c>
   1015a:	e708      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   1015c:	233c      	movs	r3, #60	; 0x3c
   1015e:	435a      	muls	r2, r3
   10160:	4b4d      	ldr	r3, [pc, #308]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10162:	189b      	adds	r3, r3, r2
   10164:	33fc      	adds	r3, #252	; 0xfc
   10166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10168:	e7f0      	b.n	1014c <LORAWAN_GetAttr+0x27c>
   1016a:	780a      	ldrb	r2, [r1, #0]
   1016c:	200a      	movs	r0, #10
   1016e:	2a03      	cmp	r2, #3
   10170:	d900      	bls.n	10174 <LORAWAN_GetAttr+0x2a4>
   10172:	e6fc      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10174:	233c      	movs	r3, #60	; 0x3c
   10176:	435a      	muls	r2, r3
   10178:	4b47      	ldr	r3, [pc, #284]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1017a:	189b      	adds	r3, r3, r2
   1017c:	33fc      	adds	r3, #252	; 0xfc
   1017e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10180:	e7e4      	b.n	1014c <LORAWAN_GetAttr+0x27c>
   10182:	780a      	ldrb	r2, [r1, #0]
   10184:	200a      	movs	r0, #10
   10186:	2a03      	cmp	r2, #3
   10188:	d900      	bls.n	1018c <LORAWAN_GetAttr+0x2bc>
   1018a:	e6f0      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   1018c:	233c      	movs	r3, #60	; 0x3c
   1018e:	435a      	muls	r2, r3
   10190:	4b41      	ldr	r3, [pc, #260]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10192:	189b      	adds	r3, r3, r2
   10194:	33fc      	adds	r3, #252	; 0xfc
   10196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   10198:	e7d8      	b.n	1014c <LORAWAN_GetAttr+0x27c>
   1019a:	780a      	ldrb	r2, [r1, #0]
   1019c:	200a      	movs	r0, #10
   1019e:	2a03      	cmp	r2, #3
   101a0:	d900      	bls.n	101a4 <LORAWAN_GetAttr+0x2d4>
   101a2:	e6e4      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   101a4:	233c      	movs	r3, #60	; 0x3c
   101a6:	435a      	muls	r2, r3
   101a8:	4b3b      	ldr	r3, [pc, #236]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   101aa:	189b      	adds	r3, r3, r2
   101ac:	3369      	adds	r3, #105	; 0x69
   101ae:	33ff      	adds	r3, #255	; 0xff
   101b0:	781b      	ldrb	r3, [r3, #0]
   101b2:	e79b      	b.n	100ec <LORAWAN_GetAttr+0x21c>
   101b4:	780a      	ldrb	r2, [r1, #0]
   101b6:	200a      	movs	r0, #10
   101b8:	2a03      	cmp	r2, #3
   101ba:	d900      	bls.n	101be <LORAWAN_GetAttr+0x2ee>
   101bc:	e6d7      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   101be:	233c      	movs	r3, #60	; 0x3c
   101c0:	435a      	muls	r2, r3
   101c2:	4b35      	ldr	r3, [pc, #212]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   101c4:	189b      	adds	r3, r3, r2
   101c6:	336a      	adds	r3, #106	; 0x6a
   101c8:	e7f1      	b.n	101ae <LORAWAN_GetAttr+0x2de>
   101ca:	0010      	movs	r0, r2
   101cc:	4b39      	ldr	r3, [pc, #228]	; (102b4 <LORAWAN_GetAttr+0x3e4>)
   101ce:	4798      	blx	r3
   101d0:	e6cd      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   101d2:	0011      	movs	r1, r2
   101d4:	4b32      	ldr	r3, [pc, #200]	; (102a0 <LORAWAN_GetAttr+0x3d0>)
   101d6:	201f      	movs	r0, #31
   101d8:	4798      	blx	r3
   101da:	e6d0      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   101dc:	4b2e      	ldr	r3, [pc, #184]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   101de:	3394      	adds	r3, #148	; 0x94
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	071b      	lsls	r3, r3, #28
   101e4:	e739      	b.n	1005a <LORAWAN_GetAttr+0x18a>
   101e6:	4b2c      	ldr	r3, [pc, #176]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   101e8:	3394      	adds	r3, #148	; 0x94
   101ea:	781b      	ldrb	r3, [r3, #0]
   101ec:	07db      	lsls	r3, r3, #31
   101ee:	e734      	b.n	1005a <LORAWAN_GetAttr+0x18a>
   101f0:	2030      	movs	r0, #48	; 0x30
   101f2:	4b2c      	ldr	r3, [pc, #176]	; (102a4 <LORAWAN_GetAttr+0x3d4>)
   101f4:	4798      	blx	r3
   101f6:	e6ba      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   101f8:	492f      	ldr	r1, [pc, #188]	; (102b8 <LORAWAN_GetAttr+0x3e8>)
   101fa:	2026      	movs	r0, #38	; 0x26
   101fc:	e7f9      	b.n	101f2 <LORAWAN_GetAttr+0x322>
   101fe:	4b26      	ldr	r3, [pc, #152]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10200:	33e4      	adds	r3, #228	; 0xe4
   10202:	e6f1      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   10204:	4b24      	ldr	r3, [pc, #144]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10206:	33e3      	adds	r3, #227	; 0xe3
   10208:	e6ee      	b.n	ffe8 <LORAWAN_GetAttr+0x118>
   1020a:	4b2c      	ldr	r3, [pc, #176]	; (102bc <LORAWAN_GetAttr+0x3ec>)
   1020c:	4798      	blx	r3
   1020e:	4b2c      	ldr	r3, [pc, #176]	; (102c0 <LORAWAN_GetAttr+0x3f0>)
   10210:	0004      	movs	r4, r0
   10212:	4798      	blx	r3
   10214:	1b00      	subs	r0, r0, r4
   10216:	7030      	strb	r0, [r6, #0]
   10218:	e6b1      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   1021a:	2100      	movs	r1, #0
   1021c:	2020      	movs	r0, #32
   1021e:	e7e8      	b.n	101f2 <LORAWAN_GetAttr+0x322>
   10220:	4b1d      	ldr	r3, [pc, #116]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10222:	33ff      	adds	r3, #255	; 0xff
   10224:	7f5b      	ldrb	r3, [r3, #29]
   10226:	e6db      	b.n	ffe0 <LORAWAN_GetAttr+0x110>
   10228:	238f      	movs	r3, #143	; 0x8f
   1022a:	4a1b      	ldr	r2, [pc, #108]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   1022c:	009b      	lsls	r3, r3, #2
   1022e:	58d3      	ldr	r3, [r2, r3]
   10230:	e6c5      	b.n	ffbe <LORAWAN_GetAttr+0xee>
   10232:	258d      	movs	r5, #141	; 0x8d
   10234:	4c18      	ldr	r4, [pc, #96]	; (10298 <LORAWAN_GetAttr+0x3c8>)
   10236:	00ad      	lsls	r5, r5, #2
   10238:	5963      	ldr	r3, [r4, r5]
   1023a:	2015      	movs	r0, #21
   1023c:	3301      	adds	r3, #1
   1023e:	d100      	bne.n	10242 <LORAWAN_GetAttr+0x372>
   10240:	e695      	b.n	ff6e <LORAWAN_GetAttr+0x9e>
   10242:	4b20      	ldr	r3, [pc, #128]	; (102c4 <LORAWAN_GetAttr+0x3f4>)
   10244:	a910      	add	r1, sp, #64	; 0x40
   10246:	5ce0      	ldrb	r0, [r4, r3]
   10248:	4b1f      	ldr	r3, [pc, #124]	; (102c8 <LORAWAN_GetAttr+0x3f8>)
   1024a:	4798      	blx	r3
   1024c:	4b1f      	ldr	r3, [pc, #124]	; (102cc <LORAWAN_GetAttr+0x3fc>)
   1024e:	4798      	blx	r3
   10250:	22fa      	movs	r2, #250	; 0xfa
   10252:	9000      	str	r0, [sp, #0]
   10254:	9101      	str	r1, [sp, #4]
   10256:	0092      	lsls	r2, r2, #2
   10258:	5960      	ldr	r0, [r4, r5]
   1025a:	2300      	movs	r3, #0
   1025c:	4d1c      	ldr	r5, [pc, #112]	; (102d0 <LORAWAN_GetAttr+0x400>)
   1025e:	2100      	movs	r1, #0
   10260:	47a8      	blx	r5
   10262:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10264:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10266:	9002      	str	r0, [sp, #8]
   10268:	9103      	str	r1, [sp, #12]
   1026a:	9800      	ldr	r0, [sp, #0]
   1026c:	9901      	ldr	r1, [sp, #4]
   1026e:	1a80      	subs	r0, r0, r2
   10270:	4199      	sbcs	r1, r3
   10272:	22fa      	movs	r2, #250	; 0xfa
   10274:	2300      	movs	r3, #0
   10276:	0092      	lsls	r2, r2, #2
   10278:	4d16      	ldr	r5, [pc, #88]	; (102d4 <LORAWAN_GetAttr+0x404>)
   1027a:	47a8      	blx	r5
   1027c:	238e      	movs	r3, #142	; 0x8e
   1027e:	009b      	lsls	r3, r3, #2
   10280:	5ce4      	ldrb	r4, [r4, r3]
   10282:	2300      	movs	r3, #0
   10284:	00a2      	lsls	r2, r4, #2
   10286:	9c02      	ldr	r4, [sp, #8]
   10288:	9d03      	ldr	r5, [sp, #12]
   1028a:	1912      	adds	r2, r2, r4
   1028c:	416b      	adcs	r3, r5
   1028e:	1812      	adds	r2, r2, r0
   10290:	414b      	adcs	r3, r1
   10292:	6032      	str	r2, [r6, #0]
   10294:	6073      	str	r3, [r6, #4]
   10296:	e672      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   10298:	20002bd4 	.word	0x20002bd4
   1029c:	00018655 	.word	0x00018655
   102a0:	00013489 	.word	0x00013489
   102a4:	0000bfdd 	.word	0x0000bfdd
   102a8:	0000fe85 	.word	0x0000fe85
   102ac:	0000fea5 	.word	0x0000fea5
   102b0:	00014f51 	.word	0x00014f51
   102b4:	0000c2b9 	.word	0x0000c2b9
   102b8:	20002cbb 	.word	0x20002cbb
   102bc:	0000e539 	.word	0x0000e539
   102c0:	0000e5e1 	.word	0x0000e5e1
   102c4:	00000231 	.word	0x00000231
   102c8:	0000db6d 	.word	0x0000db6d
   102cc:	0000d525 	.word	0x0000d525
   102d0:	0001536d 	.word	0x0001536d
   102d4:	0001532d 	.word	0x0001532d
   102d8:	88ca      	ldrh	r2, [r1, #6]
   102da:	780b      	ldrb	r3, [r1, #0]
   102dc:	9206      	str	r2, [sp, #24]
   102de:	784a      	ldrb	r2, [r1, #1]
   102e0:	af0e      	add	r7, sp, #56	; 0x38
   102e2:	9209      	str	r2, [sp, #36]	; 0x24
   102e4:	788a      	ldrb	r2, [r1, #2]
   102e6:	2025      	movs	r0, #37	; 0x25
   102e8:	920a      	str	r2, [sp, #40]	; 0x28
   102ea:	78ca      	ldrb	r2, [r1, #3]
   102ec:	920b      	str	r2, [sp, #44]	; 0x2c
   102ee:	790a      	ldrb	r2, [r1, #4]
   102f0:	9208      	str	r2, [sp, #32]
   102f2:	aa0c      	add	r2, sp, #48	; 0x30
   102f4:	1d94      	adds	r4, r2, #6
   102f6:	7193      	strb	r3, [r2, #6]
   102f8:	0021      	movs	r1, r4
   102fa:	003a      	movs	r2, r7
   102fc:	4b5e      	ldr	r3, [pc, #376]	; (10478 <LORAWAN_GetAttr+0x5a8>)
   102fe:	4798      	blx	r3
   10300:	ab0c      	add	r3, sp, #48	; 0x30
   10302:	1ddd      	adds	r5, r3, #7
   10304:	002a      	movs	r2, r5
   10306:	0021      	movs	r1, r4
   10308:	2023      	movs	r0, #35	; 0x23
   1030a:	4b5b      	ldr	r3, [pc, #364]	; (10478 <LORAWAN_GetAttr+0x5a8>)
   1030c:	4798      	blx	r3
   1030e:	782d      	ldrb	r5, [r5, #0]
   10310:	2d01      	cmp	r5, #1
   10312:	d000      	beq.n	10316 <LORAWAN_GetAttr+0x446>
   10314:	e0a1      	b.n	1045a <LORAWAN_GetAttr+0x58a>
   10316:	ac10      	add	r4, sp, #64	; 0x40
   10318:	4b58      	ldr	r3, [pc, #352]	; (1047c <LORAWAN_GetAttr+0x5ac>)
   1031a:	0021      	movs	r1, r4
   1031c:	2007      	movs	r0, #7
   1031e:	4798      	blx	r3
   10320:	783b      	ldrb	r3, [r7, #0]
   10322:	2b0c      	cmp	r3, #12
   10324:	d000      	beq.n	10328 <LORAWAN_GetAttr+0x458>
   10326:	e08a      	b.n	1043e <LORAWAN_GetAttr+0x56e>
   10328:	2700      	movs	r7, #0
   1032a:	7823      	ldrb	r3, [r4, #0]
   1032c:	3b07      	subs	r3, #7
   1032e:	b2db      	uxtb	r3, r3
   10330:	429d      	cmp	r5, r3
   10332:	417f      	adcs	r7, r7
   10334:	b2fb      	uxtb	r3, r7
   10336:	9302      	str	r3, [sp, #8]
   10338:	ac10      	add	r4, sp, #64	; 0x40
   1033a:	ab0c      	add	r3, sp, #48	; 0x30
   1033c:	1d99      	adds	r1, r3, #6
   1033e:	0022      	movs	r2, r4
   10340:	4b4d      	ldr	r3, [pc, #308]	; (10478 <LORAWAN_GetAttr+0x5a8>)
   10342:	2024      	movs	r0, #36	; 0x24
   10344:	4798      	blx	r3
   10346:	7823      	ldrb	r3, [r4, #0]
   10348:	3b07      	subs	r3, #7
   1034a:	b2db      	uxtb	r3, r3
   1034c:	2b02      	cmp	r3, #2
   1034e:	d900      	bls.n	10352 <LORAWAN_GetAttr+0x482>
   10350:	e080      	b.n	10454 <LORAWAN_GetAttr+0x584>
   10352:	4a4b      	ldr	r2, [pc, #300]	; (10480 <LORAWAN_GetAttr+0x5b0>)
   10354:	00db      	lsls	r3, r3, #3
   10356:	18d3      	adds	r3, r2, r3
   10358:	681c      	ldr	r4, [r3, #0]
   1035a:	685d      	ldr	r5, [r3, #4]
   1035c:	2001      	movs	r0, #1
   1035e:	ab0e      	add	r3, sp, #56	; 0x38
   10360:	781b      	ldrb	r3, [r3, #0]
   10362:	4f48      	ldr	r7, [pc, #288]	; (10484 <LORAWAN_GetAttr+0x5b4>)
   10364:	9300      	str	r3, [sp, #0]
   10366:	4098      	lsls	r0, r3
   10368:	47b8      	blx	r7
   1036a:	0002      	movs	r2, r0
   1036c:	000b      	movs	r3, r1
   1036e:	0020      	movs	r0, r4
   10370:	0029      	movs	r1, r5
   10372:	4c45      	ldr	r4, [pc, #276]	; (10488 <LORAWAN_GetAttr+0x5b8>)
   10374:	47a0      	blx	r4
   10376:	0002      	movs	r2, r0
   10378:	000b      	movs	r3, r1
   1037a:	2000      	movs	r0, #0
   1037c:	4943      	ldr	r1, [pc, #268]	; (1048c <LORAWAN_GetAttr+0x5bc>)
   1037e:	47a0      	blx	r4
   10380:	466b      	mov	r3, sp
   10382:	9004      	str	r0, [sp, #16]
   10384:	9105      	str	r1, [sp, #20]
   10386:	7e18      	ldrb	r0, [r3, #24]
   10388:	47b8      	blx	r7
   1038a:	4c41      	ldr	r4, [pc, #260]	; (10490 <LORAWAN_GetAttr+0x5c0>)
   1038c:	2200      	movs	r2, #0
   1038e:	4b41      	ldr	r3, [pc, #260]	; (10494 <LORAWAN_GetAttr+0x5c4>)
   10390:	47a0      	blx	r4
   10392:	9a04      	ldr	r2, [sp, #16]
   10394:	9b05      	ldr	r3, [sp, #20]
   10396:	4c40      	ldr	r4, [pc, #256]	; (10498 <LORAWAN_GetAttr+0x5c8>)
   10398:	47a0      	blx	r4
   1039a:	9b08      	ldr	r3, [sp, #32]
   1039c:	9006      	str	r0, [sp, #24]
   1039e:	9107      	str	r1, [sp, #28]
   103a0:	0058      	lsls	r0, r3, #1
   103a2:	9b00      	ldr	r3, [sp, #0]
   103a4:	2214      	movs	r2, #20
   103a6:	1ac0      	subs	r0, r0, r3
   103a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103aa:	3007      	adds	r0, #7
   103ac:	009b      	lsls	r3, r3, #2
   103ae:	18c0      	adds	r0, r0, r3
   103b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103b2:	0080      	lsls	r0, r0, #2
   103b4:	1e59      	subs	r1, r3, #1
   103b6:	418b      	sbcs	r3, r1
   103b8:	425b      	negs	r3, r3
   103ba:	401a      	ands	r2, r3
   103bc:	1a80      	subs	r0, r0, r2
   103be:	47b8      	blx	r7
   103c0:	0004      	movs	r4, r0
   103c2:	9802      	ldr	r0, [sp, #8]
   103c4:	000d      	movs	r5, r1
   103c6:	1e43      	subs	r3, r0, #1
   103c8:	4198      	sbcs	r0, r3
   103ca:	9b00      	ldr	r3, [sp, #0]
   103cc:	0040      	lsls	r0, r0, #1
   103ce:	1a18      	subs	r0, r3, r0
   103d0:	0080      	lsls	r0, r0, #2
   103d2:	47b8      	blx	r7
   103d4:	0002      	movs	r2, r0
   103d6:	000b      	movs	r3, r1
   103d8:	0020      	movs	r0, r4
   103da:	0029      	movs	r1, r5
   103dc:	4c2a      	ldr	r4, [pc, #168]	; (10488 <LORAWAN_GetAttr+0x5b8>)
   103de:	47a0      	blx	r4
   103e0:	4b2e      	ldr	r3, [pc, #184]	; (1049c <LORAWAN_GetAttr+0x5cc>)
   103e2:	0004      	movs	r4, r0
   103e4:	000d      	movs	r5, r1
   103e6:	4798      	blx	r3
   103e8:	4b2d      	ldr	r3, [pc, #180]	; (104a0 <LORAWAN_GetAttr+0x5d0>)
   103ea:	0007      	movs	r7, r0
   103ec:	4798      	blx	r3
   103ee:	0002      	movs	r2, r0
   103f0:	000b      	movs	r3, r1
   103f2:	0020      	movs	r0, r4
   103f4:	0029      	movs	r1, r5
   103f6:	4c2b      	ldr	r4, [pc, #172]	; (104a4 <LORAWAN_GetAttr+0x5d4>)
   103f8:	47a0      	blx	r4
   103fa:	2200      	movs	r2, #0
   103fc:	2300      	movs	r3, #0
   103fe:	4c2a      	ldr	r4, [pc, #168]	; (104a8 <LORAWAN_GetAttr+0x5d8>)
   10400:	47a0      	blx	r4
   10402:	1e43      	subs	r3, r0, #1
   10404:	4198      	sbcs	r0, r3
   10406:	183f      	adds	r7, r7, r0
   10408:	003b      	movs	r3, r7
   1040a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1040c:	3004      	adds	r0, #4
   1040e:	4343      	muls	r3, r0
   10410:	3308      	adds	r3, #8
   10412:	0018      	movs	r0, r3
   10414:	4b22      	ldr	r3, [pc, #136]	; (104a0 <LORAWAN_GetAttr+0x5d0>)
   10416:	4798      	blx	r3
   10418:	9a04      	ldr	r2, [sp, #16]
   1041a:	9b05      	ldr	r3, [sp, #20]
   1041c:	4c1e      	ldr	r4, [pc, #120]	; (10498 <LORAWAN_GetAttr+0x5c8>)
   1041e:	47a0      	blx	r4
   10420:	9a06      	ldr	r2, [sp, #24]
   10422:	9b07      	ldr	r3, [sp, #28]
   10424:	4c1a      	ldr	r4, [pc, #104]	; (10490 <LORAWAN_GetAttr+0x5c0>)
   10426:	47a0      	blx	r4
   10428:	2200      	movs	r2, #0
   1042a:	4b20      	ldr	r3, [pc, #128]	; (104ac <LORAWAN_GetAttr+0x5dc>)
   1042c:	4c1a      	ldr	r4, [pc, #104]	; (10498 <LORAWAN_GetAttr+0x5c8>)
   1042e:	47a0      	blx	r4
   10430:	2200      	movs	r2, #0
   10432:	4b1e      	ldr	r3, [pc, #120]	; (104ac <LORAWAN_GetAttr+0x5dc>)
   10434:	47a0      	blx	r4
   10436:	4b19      	ldr	r3, [pc, #100]	; (1049c <LORAWAN_GetAttr+0x5cc>)
   10438:	4798      	blx	r3
   1043a:	6030      	str	r0, [r6, #0]
   1043c:	e59f      	b.n	ff7e <LORAWAN_GetAttr+0xae>
   1043e:	2200      	movs	r2, #0
   10440:	9202      	str	r2, [sp, #8]
   10442:	2b0b      	cmp	r3, #11
   10444:	d000      	beq.n	10448 <LORAWAN_GetAttr+0x578>
   10446:	e777      	b.n	10338 <LORAWAN_GetAttr+0x468>
   10448:	7827      	ldrb	r7, [r4, #0]
   1044a:	3f07      	subs	r7, #7
   1044c:	427a      	negs	r2, r7
   1044e:	417a      	adcs	r2, r7
   10450:	b2d3      	uxtb	r3, r2
   10452:	e770      	b.n	10336 <LORAWAN_GetAttr+0x466>
   10454:	2400      	movs	r4, #0
   10456:	2500      	movs	r5, #0
   10458:	e780      	b.n	1035c <LORAWAN_GetAttr+0x48c>
   1045a:	20a0      	movs	r0, #160	; 0xa0
   1045c:	9b08      	ldr	r3, [sp, #32]
   1045e:	4358      	muls	r0, r3
   10460:	23c8      	movs	r3, #200	; 0xc8
   10462:	009b      	lsls	r3, r3, #2
   10464:	18c0      	adds	r0, r0, r3
   10466:	4b0e      	ldr	r3, [pc, #56]	; (104a0 <LORAWAN_GetAttr+0x5d0>)
   10468:	4798      	blx	r3
   1046a:	e7e4      	b.n	10436 <LORAWAN_GetAttr+0x566>
   1046c:	4b10      	ldr	r3, [pc, #64]	; (104b0 <LORAWAN_GetAttr+0x5e0>)
   1046e:	33ff      	adds	r3, #255	; 0xff
   10470:	7f5b      	ldrb	r3, [r3, #29]
   10472:	079b      	lsls	r3, r3, #30
   10474:	e5f1      	b.n	1005a <LORAWAN_GetAttr+0x18a>
   10476:	46c0      	nop			; (mov r8, r8)
   10478:	0000bfdd 	.word	0x0000bfdd
   1047c:	00013489 	.word	0x00013489
   10480:	0001e978 	.word	0x0001e978
   10484:	00017df1 	.word	0x00017df1
   10488:	000169f5 	.word	0x000169f5
   1048c:	3ff00000 	.word	0x3ff00000
   10490:	000163d5 	.word	0x000163d5
   10494:	40110000 	.word	0x40110000
   10498:	0001725d 	.word	0x0001725d
   1049c:	000153f1 	.word	0x000153f1
   104a0:	00017e75 	.word	0x00017e75
   104a4:	0001775d 	.word	0x0001775d
   104a8:	00015291 	.word	0x00015291
   104ac:	408f4000 	.word	0x408f4000
   104b0:	20002bd4 	.word	0x20002bd4

000104b4 <LORAWAN_TxDone>:
   104b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   104b6:	6843      	ldr	r3, [r0, #4]
   104b8:	b091      	sub	sp, #68	; 0x44
   104ba:	ae08      	add	r6, sp, #32
   104bc:	7804      	ldrb	r4, [r0, #0]
   104be:	9302      	str	r3, [sp, #8]
   104c0:	2100      	movs	r1, #0
   104c2:	4b84      	ldr	r3, [pc, #528]	; (106d4 <LORAWAN_TxDone+0x220>)
   104c4:	0032      	movs	r2, r6
   104c6:	2028      	movs	r0, #40	; 0x28
   104c8:	4798      	blx	r3
   104ca:	4d83      	ldr	r5, [pc, #524]	; (106d8 <LORAWAN_TxDone+0x224>)
   104cc:	0029      	movs	r1, r5
   104ce:	3184      	adds	r1, #132	; 0x84
   104d0:	780b      	ldrb	r3, [r1, #0]
   104d2:	2b7f      	cmp	r3, #127	; 0x7f
   104d4:	d900      	bls.n	104d8 <LORAWAN_TxDone+0x24>
   104d6:	e236      	b.n	10946 <LORAWAN_TxDone+0x492>
   104d8:	4a80      	ldr	r2, [pc, #512]	; (106dc <LORAWAN_TxDone+0x228>)
   104da:	7810      	ldrb	r0, [r2, #0]
   104dc:	2804      	cmp	r0, #4
   104de:	d10b      	bne.n	104f8 <LORAWAN_TxDone+0x44>
   104e0:	220e      	movs	r2, #14
   104e2:	4393      	bics	r3, r2
   104e4:	700b      	strb	r3, [r1, #0]
   104e6:	3017      	adds	r0, #23
   104e8:	07db      	lsls	r3, r3, #31
   104ea:	d500      	bpl.n	104ee <LORAWAN_TxDone+0x3a>
   104ec:	e0b0      	b.n	10650 <LORAWAN_TxDone+0x19c>
   104ee:	201b      	movs	r0, #27
   104f0:	4b7b      	ldr	r3, [pc, #492]	; (106e0 <LORAWAN_TxDone+0x22c>)
   104f2:	4798      	blx	r3
   104f4:	b011      	add	sp, #68	; 0x44
   104f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104f8:	7813      	ldrb	r3, [r2, #0]
   104fa:	2b02      	cmp	r3, #2
   104fc:	d1fa      	bne.n	104f4 <LORAWAN_TxDone+0x40>
   104fe:	4b79      	ldr	r3, [pc, #484]	; (106e4 <LORAWAN_TxDone+0x230>)
   10500:	5cea      	ldrb	r2, [r5, r3]
   10502:	2a00      	cmp	r2, #0
   10504:	d005      	beq.n	10512 <LORAWAN_TxDone+0x5e>
   10506:	2200      	movs	r2, #0
   10508:	4977      	ldr	r1, [pc, #476]	; (106e8 <LORAWAN_TxDone+0x234>)
   1050a:	54ea      	strb	r2, [r5, r3]
   1050c:	200b      	movs	r0, #11
   1050e:	4b77      	ldr	r3, [pc, #476]	; (106ec <LORAWAN_TxDone+0x238>)
   10510:	4798      	blx	r3
   10512:	2c07      	cmp	r4, #7
   10514:	d000      	beq.n	10518 <LORAWAN_TxDone+0x64>
   10516:	e09f      	b.n	10658 <LORAWAN_TxDone+0x1a4>
   10518:	79f3      	ldrb	r3, [r6, #7]
   1051a:	2b00      	cmp	r3, #0
   1051c:	d0ea      	beq.n	104f4 <LORAWAN_TxDone+0x40>
   1051e:	002b      	movs	r3, r5
   10520:	3394      	adds	r3, #148	; 0x94
   10522:	7818      	ldrb	r0, [r3, #0]
   10524:	002f      	movs	r7, r5
   10526:	2304      	movs	r3, #4
   10528:	37fe      	adds	r7, #254	; 0xfe
   1052a:	4018      	ands	r0, r3
   1052c:	4e70      	ldr	r6, [pc, #448]	; (106f0 <LORAWAN_TxDone+0x23c>)
   1052e:	d005      	beq.n	1053c <LORAWAN_TxDone+0x88>
   10530:	2000      	movs	r0, #0
   10532:	2109      	movs	r1, #9
   10534:	8438      	strh	r0, [r7, #32]
   10536:	47b0      	blx	r6
   10538:	0020      	movs	r0, r4
   1053a:	e7d9      	b.n	104f0 <LORAWAN_TxDone+0x3c>
   1053c:	8c3b      	ldrh	r3, [r7, #32]
   1053e:	2109      	movs	r1, #9
   10540:	3301      	adds	r3, #1
   10542:	843b      	strh	r3, [r7, #32]
   10544:	47b0      	blx	r6
   10546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   10548:	4a6a      	ldr	r2, [pc, #424]	; (106f4 <LORAWAN_TxDone+0x240>)
   1054a:	4293      	cmp	r3, r2
   1054c:	d002      	beq.n	10554 <LORAWAN_TxDone+0xa0>
   1054e:	8c3a      	ldrh	r2, [r7, #32]
   10550:	429a      	cmp	r2, r3
   10552:	d265      	bcs.n	10620 <LORAWAN_TxDone+0x16c>
   10554:	4b68      	ldr	r3, [pc, #416]	; (106f8 <LORAWAN_TxDone+0x244>)
   10556:	5ceb      	ldrb	r3, [r5, r3]
   10558:	2b00      	cmp	r3, #0
   1055a:	d061      	beq.n	10620 <LORAWAN_TxDone+0x16c>
   1055c:	2701      	movs	r7, #1
   1055e:	002b      	movs	r3, r5
   10560:	a906      	add	r1, sp, #24
   10562:	700f      	strb	r7, [r1, #0]
   10564:	33e9      	adds	r3, #233	; 0xe9
   10566:	781b      	ldrb	r3, [r3, #0]
   10568:	aa0c      	add	r2, sp, #48	; 0x30
   1056a:	704b      	strb	r3, [r1, #1]
   1056c:	002b      	movs	r3, r5
   1056e:	33e7      	adds	r3, #231	; 0xe7
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	202e      	movs	r0, #46	; 0x2e
   10574:	708b      	strb	r3, [r1, #2]
   10576:	4b61      	ldr	r3, [pc, #388]	; (106fc <LORAWAN_TxDone+0x248>)
   10578:	4798      	blx	r3
   1057a:	2808      	cmp	r0, #8
   1057c:	d135      	bne.n	105ea <LORAWAN_TxDone+0x136>
   1057e:	a807      	add	r0, sp, #28
   10580:	4b5f      	ldr	r3, [pc, #380]	; (10700 <LORAWAN_TxDone+0x24c>)
   10582:	7007      	strb	r7, [r0, #0]
   10584:	4798      	blx	r3
   10586:	980c      	ldr	r0, [sp, #48]	; 0x30
   10588:	990d      	ldr	r1, [sp, #52]	; 0x34
   1058a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1058c:	4b5d      	ldr	r3, [pc, #372]	; (10704 <LORAWAN_TxDone+0x250>)
   1058e:	4798      	blx	r3
   10590:	002b      	movs	r3, r5
   10592:	33ce      	adds	r3, #206	; 0xce
   10594:	881b      	ldrh	r3, [r3, #0]
   10596:	a80a      	add	r0, sp, #40	; 0x28
   10598:	7003      	strb	r3, [r0, #0]
   1059a:	4b5b      	ldr	r3, [pc, #364]	; (10708 <LORAWAN_TxDone+0x254>)
   1059c:	6043      	str	r3, [r0, #4]
   1059e:	4b5b      	ldr	r3, [pc, #364]	; (1070c <LORAWAN_TxDone+0x258>)
   105a0:	4798      	blx	r3
   105a2:	1e04      	subs	r4, r0, #0
   105a4:	d108      	bne.n	105b8 <LORAWAN_TxDone+0x104>
   105a6:	220e      	movs	r2, #14
   105a8:	3584      	adds	r5, #132	; 0x84
   105aa:	782b      	ldrb	r3, [r5, #0]
   105ac:	4393      	bics	r3, r2
   105ae:	001a      	movs	r2, r3
   105b0:	2302      	movs	r3, #2
   105b2:	4313      	orrs	r3, r2
   105b4:	702b      	strb	r3, [r5, #0]
   105b6:	e79d      	b.n	104f4 <LORAWAN_TxDone+0x40>
   105b8:	002b      	movs	r3, r5
   105ba:	3394      	adds	r3, #148	; 0x94
   105bc:	7818      	ldrb	r0, [r3, #0]
   105be:	002b      	movs	r3, r5
   105c0:	4038      	ands	r0, r7
   105c2:	33fe      	adds	r3, #254	; 0xfe
   105c4:	4f52      	ldr	r7, [pc, #328]	; (10710 <LORAWAN_TxDone+0x25c>)
   105c6:	4d53      	ldr	r5, [pc, #332]	; (10714 <LORAWAN_TxDone+0x260>)
   105c8:	2800      	cmp	r0, #0
   105ca:	d009      	beq.n	105e0 <LORAWAN_TxDone+0x12c>
   105cc:	2000      	movs	r0, #0
   105ce:	2109      	movs	r1, #9
   105d0:	8418      	strh	r0, [r3, #32]
   105d2:	47b0      	blx	r6
   105d4:	4b50      	ldr	r3, [pc, #320]	; (10718 <LORAWAN_TxDone+0x264>)
   105d6:	4798      	blx	r3
   105d8:	47a8      	blx	r5
   105da:	0020      	movs	r0, r4
   105dc:	47b8      	blx	r7
   105de:	e789      	b.n	104f4 <LORAWAN_TxDone+0x40>
   105e0:	2109      	movs	r1, #9
   105e2:	8418      	strh	r0, [r3, #32]
   105e4:	47b0      	blx	r6
   105e6:	4b4d      	ldr	r3, [pc, #308]	; (1071c <LORAWAN_TxDone+0x268>)
   105e8:	e7f5      	b.n	105d6 <LORAWAN_TxDone+0x122>
   105ea:	002b      	movs	r3, r5
   105ec:	3394      	adds	r3, #148	; 0x94
   105ee:	7818      	ldrb	r0, [r3, #0]
   105f0:	002b      	movs	r3, r5
   105f2:	4007      	ands	r7, r0
   105f4:	4c46      	ldr	r4, [pc, #280]	; (10710 <LORAWAN_TxDone+0x25c>)
   105f6:	33fe      	adds	r3, #254	; 0xfe
   105f8:	4d46      	ldr	r5, [pc, #280]	; (10714 <LORAWAN_TxDone+0x260>)
   105fa:	2f00      	cmp	r7, #0
   105fc:	d00a      	beq.n	10614 <LORAWAN_TxDone+0x160>
   105fe:	2700      	movs	r7, #0
   10600:	2109      	movs	r1, #9
   10602:	0038      	movs	r0, r7
   10604:	841f      	strh	r7, [r3, #32]
   10606:	47b0      	blx	r6
   10608:	4b43      	ldr	r3, [pc, #268]	; (10718 <LORAWAN_TxDone+0x264>)
   1060a:	4798      	blx	r3
   1060c:	47a8      	blx	r5
   1060e:	0038      	movs	r0, r7
   10610:	47a0      	blx	r4
   10612:	e76f      	b.n	104f4 <LORAWAN_TxDone+0x40>
   10614:	2109      	movs	r1, #9
   10616:	0038      	movs	r0, r7
   10618:	841f      	strh	r7, [r3, #32]
   1061a:	47b0      	blx	r6
   1061c:	4b3f      	ldr	r3, [pc, #252]	; (1071c <LORAWAN_TxDone+0x268>)
   1061e:	e7f4      	b.n	1060a <LORAWAN_TxDone+0x156>
   10620:	002b      	movs	r3, r5
   10622:	2000      	movs	r0, #0
   10624:	33fe      	adds	r3, #254	; 0xfe
   10626:	2109      	movs	r1, #9
   10628:	8418      	strh	r0, [r3, #32]
   1062a:	47b0      	blx	r6
   1062c:	002a      	movs	r2, r5
   1062e:	210e      	movs	r1, #14
   10630:	3284      	adds	r2, #132	; 0x84
   10632:	7813      	ldrb	r3, [r2, #0]
   10634:	3594      	adds	r5, #148	; 0x94
   10636:	438b      	bics	r3, r1
   10638:	7013      	strb	r3, [r2, #0]
   1063a:	2220      	movs	r2, #32
   1063c:	782b      	ldrb	r3, [r5, #0]
   1063e:	4c35      	ldr	r4, [pc, #212]	; (10714 <LORAWAN_TxDone+0x260>)
   10640:	4393      	bics	r3, r2
   10642:	702b      	strb	r3, [r5, #0]
   10644:	07db      	lsls	r3, r3, #31
   10646:	d505      	bpl.n	10654 <LORAWAN_TxDone+0x1a0>
   10648:	4b33      	ldr	r3, [pc, #204]	; (10718 <LORAWAN_TxDone+0x264>)
   1064a:	4798      	blx	r3
   1064c:	47a0      	blx	r4
   1064e:	2007      	movs	r0, #7
   10650:	4b2f      	ldr	r3, [pc, #188]	; (10710 <LORAWAN_TxDone+0x25c>)
   10652:	e74e      	b.n	104f2 <LORAWAN_TxDone+0x3e>
   10654:	4b31      	ldr	r3, [pc, #196]	; (1071c <LORAWAN_TxDone+0x268>)
   10656:	e7f8      	b.n	1064a <LORAWAN_TxDone+0x196>
   10658:	2c00      	cmp	r4, #0
   1065a:	d000      	beq.n	1065e <LORAWAN_TxDone+0x1aa>
   1065c:	e74a      	b.n	104f4 <LORAWAN_TxDone+0x40>
   1065e:	002b      	movs	r3, r5
   10660:	33fc      	adds	r3, #252	; 0xfc
   10662:	68de      	ldr	r6, [r3, #12]
   10664:	002b      	movs	r3, r5
   10666:	33fe      	adds	r3, #254	; 0xfe
   10668:	841c      	strh	r4, [r3, #32]
   1066a:	0020      	movs	r0, r4
   1066c:	2109      	movs	r1, #9
   1066e:	4c20      	ldr	r4, [pc, #128]	; (106f0 <LORAWAN_TxDone+0x23c>)
   10670:	47a0      	blx	r4
   10672:	002b      	movs	r3, r5
   10674:	33e3      	adds	r3, #227	; 0xe3
   10676:	781b      	ldrb	r3, [r3, #0]
   10678:	2b00      	cmp	r3, #0
   1067a:	d151      	bne.n	10720 <LORAWAN_TxDone+0x26c>
   1067c:	002a      	movs	r2, r5
   1067e:	32e4      	adds	r2, #228	; 0xe4
   10680:	7812      	ldrb	r2, [r2, #0]
   10682:	2a00      	cmp	r2, #0
   10684:	d14c      	bne.n	10720 <LORAWAN_TxDone+0x26c>
   10686:	002b      	movs	r3, r5
   10688:	3384      	adds	r3, #132	; 0x84
   1068a:	781a      	ldrb	r2, [r3, #0]
   1068c:	2301      	movs	r3, #1
   1068e:	421a      	tst	r2, r3
   10690:	d055      	beq.n	1073e <LORAWAN_TxDone+0x28a>
   10692:	0029      	movs	r1, r5
   10694:	3188      	adds	r1, #136	; 0x88
   10696:	680a      	ldr	r2, [r1, #0]
   10698:	18d2      	adds	r2, r2, r3
   1069a:	600a      	str	r2, [r1, #0]
   1069c:	218b      	movs	r1, #139	; 0x8b
   1069e:	0089      	lsls	r1, r1, #2
   106a0:	5c69      	ldrb	r1, [r5, r1]
   106a2:	2900      	cmp	r1, #0
   106a4:	d003      	beq.n	106ae <LORAWAN_TxDone+0x1fa>
   106a6:	408b      	lsls	r3, r1
   106a8:	3b01      	subs	r3, #1
   106aa:	421a      	tst	r2, r3
   106ac:	d102      	bne.n	106b4 <LORAWAN_TxDone+0x200>
   106ae:	2115      	movs	r1, #21
   106b0:	2000      	movs	r0, #0
   106b2:	47a0      	blx	r4
   106b4:	7833      	ldrb	r3, [r6, #0]
   106b6:	002a      	movs	r2, r5
   106b8:	2b01      	cmp	r3, #1
   106ba:	d106      	bne.n	106ca <LORAWAN_TxDone+0x216>
   106bc:	3294      	adds	r2, #148	; 0x94
   106be:	7811      	ldrb	r1, [r2, #0]
   106c0:	430b      	orrs	r3, r1
   106c2:	7013      	strb	r3, [r2, #0]
   106c4:	002a      	movs	r2, r5
   106c6:	32e4      	adds	r2, #228	; 0xe4
   106c8:	e000      	b.n	106cc <LORAWAN_TxDone+0x218>
   106ca:	32e3      	adds	r2, #227	; 0xe3
   106cc:	7813      	ldrb	r3, [r2, #0]
   106ce:	3301      	adds	r3, #1
   106d0:	e034      	b.n	1073c <LORAWAN_TxDone+0x288>
   106d2:	46c0      	nop			; (mov r8, r8)
   106d4:	0000fed1 	.word	0x0000fed1
   106d8:	20002bd4 	.word	0x20002bd4
   106dc:	20002e1c 	.word	0x20002e1c
   106e0:	0000f139 	.word	0x0000f139
   106e4:	00000222 	.word	0x00000222
   106e8:	20002df5 	.word	0x20002df5
   106ec:	00013579 	.word	0x00013579
   106f0:	0000c84d 	.word	0x0000c84d
   106f4:	0000ffff 	.word	0x0000ffff
   106f8:	0000022a 	.word	0x0000022a
   106fc:	0000bfdd 	.word	0x0000bfdd
   10700:	0001477d 	.word	0x0001477d
   10704:	0000f6ed 	.word	0x0000f6ed
   10708:	20002e2d 	.word	0x20002e2d
   1070c:	00013ea9 	.word	0x00013ea9
   10710:	0000fc85 	.word	0x0000fc85
   10714:	0000e4f5 	.word	0x0000e4f5
   10718:	0000f0e5 	.word	0x0000f0e5
   1071c:	0000f115 	.word	0x0000f115
   10720:	002a      	movs	r2, r5
   10722:	3284      	adds	r2, #132	; 0x84
   10724:	7811      	ldrb	r1, [r2, #0]
   10726:	2201      	movs	r2, #1
   10728:	4211      	tst	r1, r2
   1072a:	d008      	beq.n	1073e <LORAWAN_TxDone+0x28a>
   1072c:	0029      	movs	r1, r5
   1072e:	3194      	adds	r1, #148	; 0x94
   10730:	7809      	ldrb	r1, [r1, #0]
   10732:	4211      	tst	r1, r2
   10734:	d1c6      	bne.n	106c4 <LORAWAN_TxDone+0x210>
   10736:	189b      	adds	r3, r3, r2
   10738:	002a      	movs	r2, r5
   1073a:	32e3      	adds	r2, #227	; 0xe3
   1073c:	7013      	strb	r3, [r2, #0]
   1073e:	002b      	movs	r3, r5
   10740:	2200      	movs	r2, #0
   10742:	33f9      	adds	r3, #249	; 0xf9
   10744:	701a      	strb	r2, [r3, #0]
   10746:	002a      	movs	r2, r5
   10748:	210e      	movs	r1, #14
   1074a:	2604      	movs	r6, #4
   1074c:	3284      	adds	r2, #132	; 0x84
   1074e:	7813      	ldrb	r3, [r2, #0]
   10750:	002f      	movs	r7, r5
   10752:	438b      	bics	r3, r1
   10754:	4333      	orrs	r3, r6
   10756:	7013      	strb	r3, [r2, #0]
   10758:	002b      	movs	r3, r5
   1075a:	33e7      	adds	r3, #231	; 0xe7
   1075c:	781b      	ldrb	r3, [r3, #0]
   1075e:	a907      	add	r1, sp, #28
   10760:	708b      	strb	r3, [r1, #2]
   10762:	002b      	movs	r3, r5
   10764:	33f7      	adds	r3, #247	; 0xf7
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	3794      	adds	r7, #148	; 0x94
   1076a:	704b      	strb	r3, [r1, #1]
   1076c:	783b      	ldrb	r3, [r7, #0]
   1076e:	ac0a      	add	r4, sp, #40	; 0x28
   10770:	075b      	lsls	r3, r3, #29
   10772:	0fdb      	lsrs	r3, r3, #31
   10774:	700b      	strb	r3, [r1, #0]
   10776:	0022      	movs	r2, r4
   10778:	4b83      	ldr	r3, [pc, #524]	; (10988 <LORAWAN_TxDone+0x4d4>)
   1077a:	2019      	movs	r0, #25
   1077c:	4798      	blx	r3
   1077e:	783b      	ldrb	r3, [r7, #0]
   10780:	4233      	tst	r3, r6
   10782:	d100      	bne.n	10786 <LORAWAN_TxDone+0x2d2>
   10784:	e0a4      	b.n	108d0 <LORAWAN_TxDone+0x41c>
   10786:	2300      	movs	r3, #0
   10788:	af0c      	add	r7, sp, #48	; 0x30
   1078a:	703b      	strb	r3, [r7, #0]
   1078c:	003a      	movs	r2, r7
   1078e:	2100      	movs	r1, #0
   10790:	2009      	movs	r0, #9
   10792:	4b7d      	ldr	r3, [pc, #500]	; (10988 <LORAWAN_TxDone+0x4d4>)
   10794:	4798      	blx	r3
   10796:	0039      	movs	r1, r7
   10798:	aa06      	add	r2, sp, #24
   1079a:	0030      	movs	r0, r6
   1079c:	4b7a      	ldr	r3, [pc, #488]	; (10988 <LORAWAN_TxDone+0x4d4>)
   1079e:	4798      	blx	r3
   107a0:	0029      	movs	r1, r5
   107a2:	7923      	ldrb	r3, [r4, #4]
   107a4:	3169      	adds	r1, #105	; 0x69
   107a6:	700b      	strb	r3, [r1, #0]
   107a8:	002b      	movs	r3, r5
   107aa:	270f      	movs	r7, #15
   107ac:	7822      	ldrb	r2, [r4, #0]
   107ae:	3365      	adds	r3, #101	; 0x65
   107b0:	701a      	strb	r2, [r3, #0]
   107b2:	7862      	ldrb	r2, [r4, #1]
   107b4:	2004      	movs	r0, #4
   107b6:	705a      	strb	r2, [r3, #1]
   107b8:	78a2      	ldrb	r2, [r4, #2]
   107ba:	2600      	movs	r6, #0
   107bc:	709a      	strb	r2, [r3, #2]
   107be:	78e2      	ldrb	r2, [r4, #3]
   107c0:	2404      	movs	r4, #4
   107c2:	70da      	strb	r2, [r3, #3]
   107c4:	ab02      	add	r3, sp, #8
   107c6:	18ff      	adds	r7, r7, r3
   107c8:	003a      	movs	r2, r7
   107ca:	4b6f      	ldr	r3, [pc, #444]	; (10988 <LORAWAN_TxDone+0x4d4>)
   107cc:	4798      	blx	r3
   107ce:	002b      	movs	r3, r5
   107d0:	3394      	adds	r3, #148	; 0x94
   107d2:	781a      	ldrb	r2, [r3, #0]
   107d4:	2300      	movs	r3, #0
   107d6:	4014      	ands	r4, r2
   107d8:	56fb      	ldrsb	r3, [r7, r3]
   107da:	002a      	movs	r2, r5
   107dc:	42b4      	cmp	r4, r6
   107de:	d07a      	beq.n	108d6 <LORAWAN_TxDone+0x422>
   107e0:	a902      	add	r1, sp, #8
   107e2:	7c09      	ldrb	r1, [r1, #16]
   107e4:	32d6      	adds	r2, #214	; 0xd6
   107e6:	8812      	ldrh	r2, [r2, #0]
   107e8:	b249      	sxtb	r1, r1
   107ea:	1852      	adds	r2, r2, r1
   107ec:	9203      	str	r2, [sp, #12]
   107ee:	002a      	movs	r2, r5
   107f0:	32d4      	adds	r2, #212	; 0xd4
   107f2:	8811      	ldrh	r1, [r2, #0]
   107f4:	24fa      	movs	r4, #250	; 0xfa
   107f6:	18c9      	adds	r1, r1, r3
   107f8:	4b64      	ldr	r3, [pc, #400]	; (1098c <LORAWAN_TxDone+0x4d8>)
   107fa:	00a4      	lsls	r4, r4, #2
   107fc:	5ceb      	ldrb	r3, [r5, r3]
   107fe:	0032      	movs	r2, r6
   10800:	1ac9      	subs	r1, r1, r3
   10802:	002b      	movs	r3, r5
   10804:	33eb      	adds	r3, #235	; 0xeb
   10806:	7818      	ldrb	r0, [r3, #0]
   10808:	4361      	muls	r1, r4
   1080a:	4b61      	ldr	r3, [pc, #388]	; (10990 <LORAWAN_TxDone+0x4dc>)
   1080c:	4f61      	ldr	r7, [pc, #388]	; (10994 <LORAWAN_TxDone+0x4e0>)
   1080e:	9600      	str	r6, [sp, #0]
   10810:	47b8      	blx	r7
   10812:	4b5e      	ldr	r3, [pc, #376]	; (1098c <LORAWAN_TxDone+0x4d8>)
   10814:	0032      	movs	r2, r6
   10816:	5ce9      	ldrb	r1, [r5, r3]
   10818:	9b03      	ldr	r3, [sp, #12]
   1081a:	1a59      	subs	r1, r3, r1
   1081c:	002b      	movs	r3, r5
   1081e:	33ec      	adds	r3, #236	; 0xec
   10820:	7818      	ldrb	r0, [r3, #0]
   10822:	4361      	muls	r1, r4
   10824:	4b5c      	ldr	r3, [pc, #368]	; (10998 <LORAWAN_TxDone+0x4e4>)
   10826:	9600      	str	r6, [sp, #0]
   10828:	47b8      	blx	r7
   1082a:	002b      	movs	r3, r5
   1082c:	33ff      	adds	r3, #255	; 0xff
   1082e:	7f5b      	ldrb	r3, [r3, #29]
   10830:	069b      	lsls	r3, r3, #26
   10832:	d521      	bpl.n	10878 <LORAWAN_TxDone+0x3c4>
   10834:	9b02      	ldr	r3, [sp, #8]
   10836:	ac0c      	add	r4, sp, #48	; 0x30
   10838:	67eb      	str	r3, [r5, #124]	; 0x7c
   1083a:	002b      	movs	r3, r5
   1083c:	3380      	adds	r3, #128	; 0x80
   1083e:	781b      	ldrb	r3, [r3, #0]
   10840:	4f56      	ldr	r7, [pc, #344]	; (1099c <LORAWAN_TxDone+0x4e8>)
   10842:	42b3      	cmp	r3, r6
   10844:	d010      	beq.n	10868 <LORAWAN_TxDone+0x3b4>
   10846:	6f6e      	ldr	r6, [r5, #116]	; 0x74
   10848:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1084a:	431e      	orrs	r6, r3
   1084c:	d10c      	bne.n	10868 <LORAWAN_TxDone+0x3b4>
   1084e:	2301      	movs	r3, #1
   10850:	0021      	movs	r1, r4
   10852:	2021      	movs	r0, #33	; 0x21
   10854:	7023      	strb	r3, [r4, #0]
   10856:	47b8      	blx	r7
   10858:	4b51      	ldr	r3, [pc, #324]	; (109a0 <LORAWAN_TxDone+0x4ec>)
   1085a:	4798      	blx	r3
   1085c:	0033      	movs	r3, r6
   1085e:	9a02      	ldr	r2, [sp, #8]
   10860:	1a80      	subs	r0, r0, r2
   10862:	4199      	sbcs	r1, r3
   10864:	6768      	str	r0, [r5, #116]	; 0x74
   10866:	67a9      	str	r1, [r5, #120]	; 0x78
   10868:	4b4e      	ldr	r3, [pc, #312]	; (109a4 <LORAWAN_TxDone+0x4f0>)
   1086a:	0021      	movs	r1, r4
   1086c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1086e:	2020      	movs	r0, #32
   10870:	930c      	str	r3, [sp, #48]	; 0x30
   10872:	2301      	movs	r3, #1
   10874:	7123      	strb	r3, [r4, #4]
   10876:	47b8      	blx	r7
   10878:	4c4a      	ldr	r4, [pc, #296]	; (109a4 <LORAWAN_TxDone+0x4f0>)
   1087a:	2102      	movs	r1, #2
   1087c:	0023      	movs	r3, r4
   1087e:	33ff      	adds	r3, #255	; 0xff
   10880:	7f5b      	ldrb	r3, [r3, #29]
   10882:	4019      	ands	r1, r3
   10884:	d05b      	beq.n	1093e <LORAWAN_TxDone+0x48a>
   10886:	466b      	mov	r3, sp
   10888:	891b      	ldrh	r3, [r3, #8]
   1088a:	a90c      	add	r1, sp, #48	; 0x30
   1088c:	800b      	strh	r3, [r1, #0]
   1088e:	0023      	movs	r3, r4
   10890:	3394      	adds	r3, #148	; 0x94
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	201f      	movs	r0, #31
   10896:	075b      	lsls	r3, r3, #29
   10898:	0fdb      	lsrs	r3, r3, #31
   1089a:	710b      	strb	r3, [r1, #4]
   1089c:	0023      	movs	r3, r4
   1089e:	3398      	adds	r3, #152	; 0x98
   108a0:	781a      	ldrb	r2, [r3, #0]
   108a2:	2301      	movs	r3, #1
   108a4:	4093      	lsls	r3, r2
   108a6:	804b      	strh	r3, [r1, #2]
   108a8:	4b3c      	ldr	r3, [pc, #240]	; (1099c <LORAWAN_TxDone+0x4e8>)
   108aa:	4798      	blx	r3
   108ac:	258c      	movs	r5, #140	; 0x8c
   108ae:	00ad      	lsls	r5, r5, #2
   108b0:	5d63      	ldrb	r3, [r4, r5]
   108b2:	2b00      	cmp	r3, #0
   108b4:	d100      	bne.n	108b8 <LORAWAN_TxDone+0x404>
   108b6:	e61d      	b.n	104f4 <LORAWAN_TxDone+0x40>
   108b8:	4b39      	ldr	r3, [pc, #228]	; (109a0 <LORAWAN_TxDone+0x4ec>)
   108ba:	4798      	blx	r3
   108bc:	2300      	movs	r3, #0
   108be:	900c      	str	r0, [sp, #48]	; 0x30
   108c0:	910d      	str	r1, [sp, #52]	; 0x34
   108c2:	5563      	strb	r3, [r4, r5]
   108c4:	4b38      	ldr	r3, [pc, #224]	; (109a8 <LORAWAN_TxDone+0x4f4>)
   108c6:	a90c      	add	r1, sp, #48	; 0x30
   108c8:	5ce0      	ldrb	r0, [r4, r3]
   108ca:	4b38      	ldr	r3, [pc, #224]	; (109ac <LORAWAN_TxDone+0x4f8>)
   108cc:	4798      	blx	r3
   108ce:	e611      	b.n	104f4 <LORAWAN_TxDone+0x40>
   108d0:	aa06      	add	r2, sp, #24
   108d2:	4937      	ldr	r1, [pc, #220]	; (109b0 <LORAWAN_TxDone+0x4fc>)
   108d4:	e761      	b.n	1079a <LORAWAN_TxDone+0x2e6>
   108d6:	2110      	movs	r1, #16
   108d8:	32d2      	adds	r2, #210	; 0xd2
   108da:	8817      	ldrh	r7, [r2, #0]
   108dc:	aa02      	add	r2, sp, #8
   108de:	5651      	ldrsb	r1, [r2, r1]
   108e0:	4e2c      	ldr	r6, [pc, #176]	; (10994 <LORAWAN_TxDone+0x4e0>)
   108e2:	187a      	adds	r2, r7, r1
   108e4:	9203      	str	r2, [sp, #12]
   108e6:	002a      	movs	r2, r5
   108e8:	32d0      	adds	r2, #208	; 0xd0
   108ea:	8811      	ldrh	r1, [r2, #0]
   108ec:	27fa      	movs	r7, #250	; 0xfa
   108ee:	18c9      	adds	r1, r1, r3
   108f0:	4b26      	ldr	r3, [pc, #152]	; (1098c <LORAWAN_TxDone+0x4d8>)
   108f2:	00bf      	lsls	r7, r7, #2
   108f4:	5ceb      	ldrb	r3, [r5, r3]
   108f6:	0022      	movs	r2, r4
   108f8:	1ac9      	subs	r1, r1, r3
   108fa:	002b      	movs	r3, r5
   108fc:	33ed      	adds	r3, #237	; 0xed
   108fe:	7818      	ldrb	r0, [r3, #0]
   10900:	4379      	muls	r1, r7
   10902:	4b23      	ldr	r3, [pc, #140]	; (10990 <LORAWAN_TxDone+0x4dc>)
   10904:	9400      	str	r4, [sp, #0]
   10906:	47b0      	blx	r6
   10908:	4b20      	ldr	r3, [pc, #128]	; (1098c <LORAWAN_TxDone+0x4d8>)
   1090a:	0022      	movs	r2, r4
   1090c:	5ce9      	ldrb	r1, [r5, r3]
   1090e:	9b03      	ldr	r3, [sp, #12]
   10910:	1a59      	subs	r1, r3, r1
   10912:	002b      	movs	r3, r5
   10914:	33ee      	adds	r3, #238	; 0xee
   10916:	7818      	ldrb	r0, [r3, #0]
   10918:	4379      	muls	r1, r7
   1091a:	4b1f      	ldr	r3, [pc, #124]	; (10998 <LORAWAN_TxDone+0x4e4>)
   1091c:	9400      	str	r4, [sp, #0]
   1091e:	47b0      	blx	r6
   10920:	002b      	movs	r3, r5
   10922:	33fd      	adds	r3, #253	; 0xfd
   10924:	781b      	ldrb	r3, [r3, #0]
   10926:	2b04      	cmp	r3, #4
   10928:	d1a6      	bne.n	10878 <LORAWAN_TxDone+0x3c4>
   1092a:	2390      	movs	r3, #144	; 0x90
   1092c:	2201      	movs	r2, #1
   1092e:	2010      	movs	r0, #16
   10930:	009b      	lsls	r3, r3, #2
   10932:	54ea      	strb	r2, [r5, r3]
   10934:	ab02      	add	r3, sp, #8
   10936:	5618      	ldrsb	r0, [r3, r0]
   10938:	4b1e      	ldr	r3, [pc, #120]	; (109b4 <LORAWAN_TxDone+0x500>)
   1093a:	4798      	blx	r3
   1093c:	e79c      	b.n	10878 <LORAWAN_TxDone+0x3c4>
   1093e:	075b      	lsls	r3, r3, #29
   10940:	d5b4      	bpl.n	108ac <LORAWAN_TxDone+0x3f8>
   10942:	2022      	movs	r0, #34	; 0x22
   10944:	e7b0      	b.n	108a8 <LORAWAN_TxDone+0x3f4>
   10946:	491c      	ldr	r1, [pc, #112]	; (109b8 <LORAWAN_TxDone+0x504>)
   10948:	784a      	ldrb	r2, [r1, #1]
   1094a:	780b      	ldrb	r3, [r1, #0]
   1094c:	0212      	lsls	r2, r2, #8
   1094e:	431a      	orrs	r2, r3
   10950:	788b      	ldrb	r3, [r1, #2]
   10952:	041b      	lsls	r3, r3, #16
   10954:	431a      	orrs	r2, r3
   10956:	78cb      	ldrb	r3, [r1, #3]
   10958:	061b      	lsls	r3, r3, #24
   1095a:	4313      	orrs	r3, r2
   1095c:	d100      	bne.n	10960 <LORAWAN_TxDone+0x4ac>
   1095e:	e5c9      	b.n	104f4 <LORAWAN_TxDone+0x40>
   10960:	4a16      	ldr	r2, [pc, #88]	; (109bc <LORAWAN_TxDone+0x508>)
   10962:	7811      	ldrb	r1, [r2, #0]
   10964:	221c      	movs	r2, #28
   10966:	2904      	cmp	r1, #4
   10968:	d003      	beq.n	10972 <LORAWAN_TxDone+0x4be>
   1096a:	2200      	movs	r2, #0
   1096c:	2c07      	cmp	r4, #7
   1096e:	d100      	bne.n	10972 <LORAWAN_TxDone+0x4be>
   10970:	0022      	movs	r2, r4
   10972:	0029      	movs	r1, r5
   10974:	2004      	movs	r0, #4
   10976:	31ff      	adds	r1, #255	; 0xff
   10978:	35fc      	adds	r5, #252	; 0xfc
   1097a:	7348      	strb	r0, [r1, #13]
   1097c:	744a      	strb	r2, [r1, #17]
   1097e:	68e8      	ldr	r0, [r5, #12]
   10980:	490f      	ldr	r1, [pc, #60]	; (109c0 <LORAWAN_TxDone+0x50c>)
   10982:	4798      	blx	r3
   10984:	e5b6      	b.n	104f4 <LORAWAN_TxDone+0x40>
   10986:	46c0      	nop			; (mov r8, r8)
   10988:	0000bfdd 	.word	0x0000bfdd
   1098c:	0000022b 	.word	0x0000022b
   10990:	0000f66d 	.word	0x0000f66d
   10994:	0000d57d 	.word	0x0000d57d
   10998:	00010d31 	.word	0x00010d31
   1099c:	0000c105 	.word	0x0000c105
   109a0:	0000d525 	.word	0x0000d525
   109a4:	20002bd4 	.word	0x20002bd4
   109a8:	00000231 	.word	0x00000231
   109ac:	0000db81 	.word	0x0000db81
   109b0:	20002c42 	.word	0x20002c42
   109b4:	00012bf1 	.word	0x00012bf1
   109b8:	20002f30 	.word	0x20002f30
   109bc:	20002e1c 	.word	0x20002e1c
   109c0:	20002ce0 	.word	0x20002ce0

000109c4 <radioCallback>:
   109c4:	4b10      	ldr	r3, [pc, #64]	; (10a08 <radioCallback+0x44>)
   109c6:	b510      	push	{r4, lr}
   109c8:	7018      	strb	r0, [r3, #0]
   109ca:	3801      	subs	r0, #1
   109cc:	b2c0      	uxtb	r0, r0
   109ce:	000c      	movs	r4, r1
   109d0:	281f      	cmp	r0, #31
   109d2:	d809      	bhi.n	109e8 <radioCallback+0x24>
   109d4:	2301      	movs	r3, #1
   109d6:	4083      	lsls	r3, r0
   109d8:	4a0c      	ldr	r2, [pc, #48]	; (10a0c <radioCallback+0x48>)
   109da:	4213      	tst	r3, r2
   109dc:	d109      	bne.n	109f2 <radioCallback+0x2e>
   109de:	220a      	movs	r2, #10
   109e0:	4213      	tst	r3, r2
   109e2:	d102      	bne.n	109ea <radioCallback+0x26>
   109e4:	2b00      	cmp	r3, #0
   109e6:	db08      	blt.n	109fa <radioCallback+0x36>
   109e8:	bd10      	pop	{r4, pc}
   109ea:	0008      	movs	r0, r1
   109ec:	4b08      	ldr	r3, [pc, #32]	; (10a10 <radioCallback+0x4c>)
   109ee:	4798      	blx	r3
   109f0:	e7fa      	b.n	109e8 <radioCallback+0x24>
   109f2:	2002      	movs	r0, #2
   109f4:	4b07      	ldr	r3, [pc, #28]	; (10a14 <radioCallback+0x50>)
   109f6:	4798      	blx	r3
   109f8:	e7f6      	b.n	109e8 <radioCallback+0x24>
   109fa:	4b07      	ldr	r3, [pc, #28]	; (10a18 <radioCallback+0x54>)
   109fc:	681b      	ldr	r3, [r3, #0]
   109fe:	2b00      	cmp	r3, #0
   10a00:	d0f2      	beq.n	109e8 <radioCallback+0x24>
   10a02:	4798      	blx	r3
   10a04:	6020      	str	r0, [r4, #0]
   10a06:	e7ef      	b.n	109e8 <radioCallback+0x24>
   10a08:	20002e1c 	.word	0x20002e1c
   10a0c:	00008081 	.word	0x00008081
   10a10:	000104b5 	.word	0x000104b5
   10a14:	00013405 	.word	0x00013405
   10a18:	20002f2c 	.word	0x20002f2c

00010a1c <LorawanCheckAndDoRetryOnTimeout>:
   10a1c:	b513      	push	{r0, r1, r4, lr}
   10a1e:	4c33      	ldr	r4, [pc, #204]	; (10aec <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   10a20:	0023      	movs	r3, r4
   10a22:	3394      	adds	r3, #148	; 0x94
   10a24:	781b      	ldrb	r3, [r3, #0]
   10a26:	0022      	movs	r2, r4
   10a28:	07db      	lsls	r3, r3, #31
   10a2a:	d54b      	bpl.n	10ac4 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   10a2c:	0023      	movs	r3, r4
   10a2e:	32e4      	adds	r2, #228	; 0xe4
   10a30:	33e2      	adds	r3, #226	; 0xe2
   10a32:	7812      	ldrb	r2, [r2, #0]
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	429a      	cmp	r2, r3
   10a38:	d836      	bhi.n	10aa8 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10a3a:	4b2d      	ldr	r3, [pc, #180]	; (10af0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10a3c:	5ce3      	ldrb	r3, [r4, r3]
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d032      	beq.n	10aa8 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10a42:	0023      	movs	r3, r4
   10a44:	33fd      	adds	r3, #253	; 0xfd
   10a46:	781b      	ldrb	r3, [r3, #0]
   10a48:	2b01      	cmp	r3, #1
   10a4a:	d119      	bne.n	10a80 <LorawanCheckAndDoRetryOnTimeout+0x64>
   10a4c:	0021      	movs	r1, r4
   10a4e:	220e      	movs	r2, #14
   10a50:	3184      	adds	r1, #132	; 0x84
   10a52:	780b      	ldrb	r3, [r1, #0]
   10a54:	4393      	bics	r3, r2
   10a56:	001a      	movs	r2, r3
   10a58:	230c      	movs	r3, #12
   10a5a:	4313      	orrs	r3, r2
   10a5c:	700b      	strb	r3, [r1, #0]
   10a5e:	0023      	movs	r3, r4
   10a60:	33da      	adds	r3, #218	; 0xda
   10a62:	8819      	ldrh	r1, [r3, #0]
   10a64:	4b23      	ldr	r3, [pc, #140]	; (10af4 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   10a66:	2200      	movs	r2, #0
   10a68:	5ce3      	ldrb	r3, [r4, r3]
   10a6a:	34f1      	adds	r4, #241	; 0xf1
   10a6c:	1acb      	subs	r3, r1, r3
   10a6e:	21fa      	movs	r1, #250	; 0xfa
   10a70:	0089      	lsls	r1, r1, #2
   10a72:	7820      	ldrb	r0, [r4, #0]
   10a74:	4359      	muls	r1, r3
   10a76:	9200      	str	r2, [sp, #0]
   10a78:	4b1f      	ldr	r3, [pc, #124]	; (10af8 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10a7a:	4c20      	ldr	r4, [pc, #128]	; (10afc <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10a7c:	47a0      	blx	r4
   10a7e:	bd13      	pop	{r0, r1, r4, pc}
   10a80:	2b04      	cmp	r3, #4
   10a82:	d1fc      	bne.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a84:	4b1e      	ldr	r3, [pc, #120]	; (10b00 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   10a86:	4798      	blx	r3
   10a88:	34ce      	adds	r4, #206	; 0xce
   10a8a:	300d      	adds	r0, #13
   10a8c:	8823      	ldrh	r3, [r4, #0]
   10a8e:	b280      	uxth	r0, r0
   10a90:	4283      	cmp	r3, r0
   10a92:	d802      	bhi.n	10a9a <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10a94:	4b1b      	ldr	r3, [pc, #108]	; (10b04 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10a96:	4798      	blx	r3
   10a98:	e7f1      	b.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a9a:	200e      	movs	r0, #14
   10a9c:	4b1a      	ldr	r3, [pc, #104]	; (10b08 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a9e:	4798      	blx	r3
   10aa0:	4b1a      	ldr	r3, [pc, #104]	; (10b0c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10aa2:	4798      	blx	r3
   10aa4:	4b1a      	ldr	r3, [pc, #104]	; (10b10 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10aa6:	e7f6      	b.n	10a96 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   10aa8:	2012      	movs	r0, #18
   10aaa:	4b17      	ldr	r3, [pc, #92]	; (10b08 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10aac:	4798      	blx	r3
   10aae:	4b17      	ldr	r3, [pc, #92]	; (10b0c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10ab0:	4798      	blx	r3
   10ab2:	34fd      	adds	r4, #253	; 0xfd
   10ab4:	4b16      	ldr	r3, [pc, #88]	; (10b10 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10ab6:	4798      	blx	r3
   10ab8:	7823      	ldrb	r3, [r4, #0]
   10aba:	2b04      	cmp	r3, #4
   10abc:	d1df      	bne.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x62>
   10abe:	4b15      	ldr	r3, [pc, #84]	; (10b14 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10ac0:	4798      	blx	r3
   10ac2:	e7dc      	b.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x62>
   10ac4:	0023      	movs	r3, r4
   10ac6:	32e3      	adds	r2, #227	; 0xe3
   10ac8:	33e1      	adds	r3, #225	; 0xe1
   10aca:	7812      	ldrb	r2, [r2, #0]
   10acc:	781b      	ldrb	r3, [r3, #0]
   10ace:	429a      	cmp	r2, r3
   10ad0:	d803      	bhi.n	10ada <LorawanCheckAndDoRetryOnTimeout+0xbe>
   10ad2:	4b07      	ldr	r3, [pc, #28]	; (10af0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10ad4:	5ce3      	ldrb	r3, [r4, r3]
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d1dc      	bne.n	10a94 <LorawanCheckAndDoRetryOnTimeout+0x78>
   10ada:	4b0f      	ldr	r3, [pc, #60]	; (10b18 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   10adc:	4798      	blx	r3
   10ade:	4b0c      	ldr	r3, [pc, #48]	; (10b10 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10ae0:	4798      	blx	r3
   10ae2:	2008      	movs	r0, #8
   10ae4:	4b08      	ldr	r3, [pc, #32]	; (10b08 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10ae6:	4798      	blx	r3
   10ae8:	e7c9      	b.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x62>
   10aea:	46c0      	nop			; (mov r8, r8)
   10aec:	20002bd4 	.word	0x20002bd4
   10af0:	0000022a 	.word	0x0000022a
   10af4:	0000022b 	.word	0x0000022b
   10af8:	00010b1d 	.word	0x00010b1d
   10afc:	0000d57d 	.word	0x0000d57d
   10b00:	0000e5e1 	.word	0x0000e5e1
   10b04:	0000f75d 	.word	0x0000f75d
   10b08:	0000fc85 	.word	0x0000fc85
   10b0c:	0000f0e5 	.word	0x0000f0e5
   10b10:	0000e4f5 	.word	0x0000e4f5
   10b14:	00013e8d 	.word	0x00013e8d
   10b18:	0000f115 	.word	0x0000f115

00010b1c <AckRetransmissionCallback>:
   10b1c:	b510      	push	{r4, lr}
   10b1e:	4c1c      	ldr	r4, [pc, #112]	; (10b90 <AckRetransmissionCallback+0x74>)
   10b20:	0023      	movs	r3, r4
   10b22:	3384      	adds	r3, #132	; 0x84
   10b24:	781b      	ldrb	r3, [r3, #0]
   10b26:	2b7f      	cmp	r3, #127	; 0x7f
   10b28:	d82d      	bhi.n	10b86 <AckRetransmissionCallback+0x6a>
   10b2a:	0023      	movs	r3, r4
   10b2c:	33fd      	adds	r3, #253	; 0xfd
   10b2e:	781b      	ldrb	r3, [r3, #0]
   10b30:	2b04      	cmp	r3, #4
   10b32:	d102      	bne.n	10b3a <AckRetransmissionCallback+0x1e>
   10b34:	4b17      	ldr	r3, [pc, #92]	; (10b94 <AckRetransmissionCallback+0x78>)
   10b36:	4798      	blx	r3
   10b38:	e01e      	b.n	10b78 <AckRetransmissionCallback+0x5c>
   10b3a:	2b01      	cmp	r3, #1
   10b3c:	d11c      	bne.n	10b78 <AckRetransmissionCallback+0x5c>
   10b3e:	0022      	movs	r2, r4
   10b40:	0023      	movs	r3, r4
   10b42:	32e4      	adds	r2, #228	; 0xe4
   10b44:	33e2      	adds	r3, #226	; 0xe2
   10b46:	7812      	ldrb	r2, [r2, #0]
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	429a      	cmp	r2, r3
   10b4c:	d815      	bhi.n	10b7a <AckRetransmissionCallback+0x5e>
   10b4e:	4b12      	ldr	r3, [pc, #72]	; (10b98 <AckRetransmissionCallback+0x7c>)
   10b50:	5ce3      	ldrb	r3, [r4, r3]
   10b52:	2b00      	cmp	r3, #0
   10b54:	d011      	beq.n	10b7a <AckRetransmissionCallback+0x5e>
   10b56:	4b11      	ldr	r3, [pc, #68]	; (10b9c <AckRetransmissionCallback+0x80>)
   10b58:	4798      	blx	r3
   10b5a:	34ce      	adds	r4, #206	; 0xce
   10b5c:	300d      	adds	r0, #13
   10b5e:	8823      	ldrh	r3, [r4, #0]
   10b60:	b280      	uxth	r0, r0
   10b62:	4283      	cmp	r3, r0
   10b64:	d801      	bhi.n	10b6a <AckRetransmissionCallback+0x4e>
   10b66:	4b0e      	ldr	r3, [pc, #56]	; (10ba0 <AckRetransmissionCallback+0x84>)
   10b68:	e7e5      	b.n	10b36 <AckRetransmissionCallback+0x1a>
   10b6a:	4b0e      	ldr	r3, [pc, #56]	; (10ba4 <AckRetransmissionCallback+0x88>)
   10b6c:	4798      	blx	r3
   10b6e:	4b0e      	ldr	r3, [pc, #56]	; (10ba8 <AckRetransmissionCallback+0x8c>)
   10b70:	4798      	blx	r3
   10b72:	200e      	movs	r0, #14
   10b74:	4b0d      	ldr	r3, [pc, #52]	; (10bac <AckRetransmissionCallback+0x90>)
   10b76:	4798      	blx	r3
   10b78:	bd10      	pop	{r4, pc}
   10b7a:	4b0a      	ldr	r3, [pc, #40]	; (10ba4 <AckRetransmissionCallback+0x88>)
   10b7c:	4798      	blx	r3
   10b7e:	4b0a      	ldr	r3, [pc, #40]	; (10ba8 <AckRetransmissionCallback+0x8c>)
   10b80:	4798      	blx	r3
   10b82:	2012      	movs	r0, #18
   10b84:	e7f6      	b.n	10b74 <AckRetransmissionCallback+0x58>
   10b86:	4b07      	ldr	r3, [pc, #28]	; (10ba4 <AckRetransmissionCallback+0x88>)
   10b88:	4798      	blx	r3
   10b8a:	4b07      	ldr	r3, [pc, #28]	; (10ba8 <AckRetransmissionCallback+0x8c>)
   10b8c:	e7d3      	b.n	10b36 <AckRetransmissionCallback+0x1a>
   10b8e:	46c0      	nop			; (mov r8, r8)
   10b90:	20002bd4 	.word	0x20002bd4
   10b94:	00010a1d 	.word	0x00010a1d
   10b98:	0000022a 	.word	0x0000022a
   10b9c:	0000e5e1 	.word	0x0000e5e1
   10ba0:	0000f75d 	.word	0x0000f75d
   10ba4:	0000f0e5 	.word	0x0000f0e5
   10ba8:	0000e4f5 	.word	0x0000e4f5
   10bac:	0000fc85 	.word	0x0000fc85

00010bb0 <LORAWAN_RxTimeout>:
   10bb0:	4b24      	ldr	r3, [pc, #144]	; (10c44 <LORAWAN_RxTimeout+0x94>)
   10bb2:	b510      	push	{r4, lr}
   10bb4:	001a      	movs	r2, r3
   10bb6:	3284      	adds	r2, #132	; 0x84
   10bb8:	7812      	ldrb	r2, [r2, #0]
   10bba:	b251      	sxtb	r1, r2
   10bbc:	2900      	cmp	r1, #0
   10bbe:	db27      	blt.n	10c10 <LORAWAN_RxTimeout+0x60>
   10bc0:	0019      	movs	r1, r3
   10bc2:	31fd      	adds	r1, #253	; 0xfd
   10bc4:	7809      	ldrb	r1, [r1, #0]
   10bc6:	2904      	cmp	r1, #4
   10bc8:	d108      	bne.n	10bdc <LORAWAN_RxTimeout+0x2c>
   10bca:	3903      	subs	r1, #3
   10bcc:	420a      	tst	r2, r1
   10bce:	d005      	beq.n	10bdc <LORAWAN_RxTimeout+0x2c>
   10bd0:	2290      	movs	r2, #144	; 0x90
   10bd2:	0092      	lsls	r2, r2, #2
   10bd4:	5499      	strb	r1, [r3, r2]
   10bd6:	4b1c      	ldr	r3, [pc, #112]	; (10c48 <LORAWAN_RxTimeout+0x98>)
   10bd8:	4798      	blx	r3
   10bda:	bd10      	pop	{r4, pc}
   10bdc:	210e      	movs	r1, #14
   10bde:	0010      	movs	r0, r2
   10be0:	4008      	ands	r0, r1
   10be2:	2806      	cmp	r0, #6
   10be4:	d107      	bne.n	10bf6 <LORAWAN_RxTimeout+0x46>
   10be6:	3384      	adds	r3, #132	; 0x84
   10be8:	781a      	ldrb	r2, [r3, #0]
   10bea:	438a      	bics	r2, r1
   10bec:	0011      	movs	r1, r2
   10bee:	2208      	movs	r2, #8
   10bf0:	430a      	orrs	r2, r1
   10bf2:	701a      	strb	r2, [r3, #0]
   10bf4:	e7f1      	b.n	10bda <LORAWAN_RxTimeout+0x2a>
   10bf6:	2004      	movs	r0, #4
   10bf8:	3394      	adds	r3, #148	; 0x94
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	4203      	tst	r3, r0
   10bfe:	d002      	beq.n	10c06 <LORAWAN_RxTimeout+0x56>
   10c00:	4b12      	ldr	r3, [pc, #72]	; (10c4c <LORAWAN_RxTimeout+0x9c>)
   10c02:	4798      	blx	r3
   10c04:	e7e9      	b.n	10bda <LORAWAN_RxTimeout+0x2a>
   10c06:	07d3      	lsls	r3, r2, #31
   10c08:	d5e7      	bpl.n	10bda <LORAWAN_RxTimeout+0x2a>
   10c0a:	4b11      	ldr	r3, [pc, #68]	; (10c50 <LORAWAN_RxTimeout+0xa0>)
   10c0c:	4798      	blx	r3
   10c0e:	e7e4      	b.n	10bda <LORAWAN_RxTimeout+0x2a>
   10c10:	4810      	ldr	r0, [pc, #64]	; (10c54 <LORAWAN_RxTimeout+0xa4>)
   10c12:	7841      	ldrb	r1, [r0, #1]
   10c14:	7802      	ldrb	r2, [r0, #0]
   10c16:	0209      	lsls	r1, r1, #8
   10c18:	4311      	orrs	r1, r2
   10c1a:	7882      	ldrb	r2, [r0, #2]
   10c1c:	0412      	lsls	r2, r2, #16
   10c1e:	4311      	orrs	r1, r2
   10c20:	78c2      	ldrb	r2, [r0, #3]
   10c22:	0612      	lsls	r2, r2, #24
   10c24:	430a      	orrs	r2, r1
   10c26:	d0d8      	beq.n	10bda <LORAWAN_RxTimeout+0x2a>
   10c28:	2188      	movs	r1, #136	; 0x88
   10c2a:	2001      	movs	r0, #1
   10c2c:	0089      	lsls	r1, r1, #2
   10c2e:	5458      	strb	r0, [r3, r1]
   10c30:	0019      	movs	r1, r3
   10c32:	2404      	movs	r4, #4
   10c34:	31ff      	adds	r1, #255	; 0xff
   10c36:	33fc      	adds	r3, #252	; 0xfc
   10c38:	734c      	strb	r4, [r1, #13]
   10c3a:	7448      	strb	r0, [r1, #17]
   10c3c:	4906      	ldr	r1, [pc, #24]	; (10c58 <LORAWAN_RxTimeout+0xa8>)
   10c3e:	68d8      	ldr	r0, [r3, #12]
   10c40:	4790      	blx	r2
   10c42:	e7ca      	b.n	10bda <LORAWAN_RxTimeout+0x2a>
   10c44:	20002bd4 	.word	0x20002bd4
   10c48:	00012cb5 	.word	0x00012cb5
   10c4c:	0000f139 	.word	0x0000f139
   10c50:	00010a1d 	.word	0x00010a1d
   10c54:	20002f30 	.word	0x20002f30
   10c58:	20002ce0 	.word	0x20002ce0

00010c5c <LorawanConfigureRadioForRX2>:
   10c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c5e:	466b      	mov	r3, sp
   10c60:	1cdd      	adds	r5, r3, #3
   10c62:	2300      	movs	r3, #0
   10c64:	702b      	strb	r3, [r5, #0]
   10c66:	2390      	movs	r3, #144	; 0x90
   10c68:	4c29      	ldr	r4, [pc, #164]	; (10d10 <LorawanConfigureRadioForRX2+0xb4>)
   10c6a:	009b      	lsls	r3, r3, #2
   10c6c:	5ce1      	ldrb	r1, [r4, r3]
   10c6e:	0006      	movs	r6, r0
   10c70:	0023      	movs	r3, r4
   10c72:	2900      	cmp	r1, #0
   10c74:	d02f      	beq.n	10cd6 <LorawanConfigureRadioForRX2+0x7a>
   10c76:	3373      	adds	r3, #115	; 0x73
   10c78:	781b      	ldrb	r3, [r3, #0]
   10c7a:	702b      	strb	r3, [r5, #0]
   10c7c:	0023      	movs	r3, r4
   10c7e:	6f22      	ldr	r2, [r4, #112]	; 0x70
   10c80:	336f      	adds	r3, #111	; 0x6f
   10c82:	781b      	ldrb	r3, [r3, #0]
   10c84:	0211      	lsls	r1, r2, #8
   10c86:	4319      	orrs	r1, r3
   10c88:	7828      	ldrb	r0, [r5, #0]
   10c8a:	4b22      	ldr	r3, [pc, #136]	; (10d14 <LorawanConfigureRadioForRX2+0xb8>)
   10c8c:	4798      	blx	r3
   10c8e:	2300      	movs	r3, #0
   10c90:	0022      	movs	r2, r4
   10c92:	af01      	add	r7, sp, #4
   10c94:	703b      	strb	r3, [r7, #0]
   10c96:	32fd      	adds	r2, #253	; 0xfd
   10c98:	7812      	ldrb	r2, [r2, #0]
   10c9a:	2a04      	cmp	r2, #4
   10c9c:	d130      	bne.n	10d00 <LorawanConfigureRadioForRX2+0xa4>
   10c9e:	0022      	movs	r2, r4
   10ca0:	3284      	adds	r2, #132	; 0x84
   10ca2:	7812      	ldrb	r2, [r2, #0]
   10ca4:	07d2      	lsls	r2, r2, #31
   10ca6:	d52b      	bpl.n	10d00 <LorawanConfigureRadioForRX2+0xa4>
   10ca8:	2290      	movs	r2, #144	; 0x90
   10caa:	0092      	lsls	r2, r2, #2
   10cac:	5ca2      	ldrb	r2, [r4, r2]
   10cae:	429a      	cmp	r2, r3
   10cb0:	d026      	beq.n	10d00 <LorawanConfigureRadioForRX2+0xa4>
   10cb2:	807b      	strh	r3, [r7, #2]
   10cb4:	0038      	movs	r0, r7
   10cb6:	4b18      	ldr	r3, [pc, #96]	; (10d18 <LorawanConfigureRadioForRX2+0xbc>)
   10cb8:	4798      	blx	r3
   10cba:	1e04      	subs	r4, r0, #0
   10cbc:	d00a      	beq.n	10cd4 <LorawanConfigureRadioForRX2+0x78>
   10cbe:	4b17      	ldr	r3, [pc, #92]	; (10d1c <LorawanConfigureRadioForRX2+0xc0>)
   10cc0:	4798      	blx	r3
   10cc2:	4b17      	ldr	r3, [pc, #92]	; (10d20 <LorawanConfigureRadioForRX2+0xc4>)
   10cc4:	4798      	blx	r3
   10cc6:	4b17      	ldr	r3, [pc, #92]	; (10d24 <LorawanConfigureRadioForRX2+0xc8>)
   10cc8:	4798      	blx	r3
   10cca:	2e00      	cmp	r6, #0
   10ccc:	d002      	beq.n	10cd4 <LorawanConfigureRadioForRX2+0x78>
   10cce:	0020      	movs	r0, r4
   10cd0:	4b15      	ldr	r3, [pc, #84]	; (10d28 <LorawanConfigureRadioForRX2+0xcc>)
   10cd2:	4798      	blx	r3
   10cd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10cd6:	3394      	adds	r3, #148	; 0x94
   10cd8:	781b      	ldrb	r3, [r3, #0]
   10cda:	075b      	lsls	r3, r3, #29
   10cdc:	d50b      	bpl.n	10cf6 <LorawanConfigureRadioForRX2+0x9a>
   10cde:	002a      	movs	r2, r5
   10ce0:	2009      	movs	r0, #9
   10ce2:	4b12      	ldr	r3, [pc, #72]	; (10d2c <LorawanConfigureRadioForRX2+0xd0>)
   10ce4:	4798      	blx	r3
   10ce6:	0022      	movs	r2, r4
   10ce8:	0023      	movs	r3, r4
   10cea:	326c      	adds	r2, #108	; 0x6c
   10cec:	8811      	ldrh	r1, [r2, #0]
   10cee:	336a      	adds	r3, #106	; 0x6a
   10cf0:	881b      	ldrh	r3, [r3, #0]
   10cf2:	0409      	lsls	r1, r1, #16
   10cf4:	e7c7      	b.n	10c86 <LorawanConfigureRadioForRX2+0x2a>
   10cf6:	0023      	movs	r3, r4
   10cf8:	336e      	adds	r3, #110	; 0x6e
   10cfa:	781b      	ldrb	r3, [r3, #0]
   10cfc:	702b      	strb	r3, [r5, #0]
   10cfe:	e7f2      	b.n	10ce6 <LorawanConfigureRadioForRX2+0x8a>
   10d00:	466b      	mov	r3, sp
   10d02:	0029      	movs	r1, r5
   10d04:	1d9a      	adds	r2, r3, #6
   10d06:	2003      	movs	r0, #3
   10d08:	4b08      	ldr	r3, [pc, #32]	; (10d2c <LorawanConfigureRadioForRX2+0xd0>)
   10d0a:	4798      	blx	r3
   10d0c:	e7d2      	b.n	10cb4 <LorawanConfigureRadioForRX2+0x58>
   10d0e:	46c0      	nop			; (mov r8, r8)
   10d10:	20002bd4 	.word	0x20002bd4
   10d14:	0000f601 	.word	0x0000f601
   10d18:	0001477d 	.word	0x0001477d
   10d1c:	0000f0e5 	.word	0x0000f0e5
   10d20:	0000f115 	.word	0x0000f115
   10d24:	0000e4f5 	.word	0x0000e4f5
   10d28:	0000fc85 	.word	0x0000fc85
   10d2c:	0000bfdd 	.word	0x0000bfdd

00010d30 <LorawanReceiveWindow2Callback>:
   10d30:	b510      	push	{r4, lr}
   10d32:	4c1d      	ldr	r4, [pc, #116]	; (10da8 <LorawanReceiveWindow2Callback+0x78>)
   10d34:	0021      	movs	r1, r4
   10d36:	3184      	adds	r1, #132	; 0x84
   10d38:	780b      	ldrb	r3, [r1, #0]
   10d3a:	b25a      	sxtb	r2, r3
   10d3c:	2a00      	cmp	r2, #0
   10d3e:	db1f      	blt.n	10d80 <LorawanReceiveWindow2Callback+0x50>
   10d40:	0022      	movs	r2, r4
   10d42:	32fd      	adds	r2, #253	; 0xfd
   10d44:	7812      	ldrb	r2, [r2, #0]
   10d46:	2a04      	cmp	r2, #4
   10d48:	d107      	bne.n	10d5a <LorawanReceiveWindow2Callback+0x2a>
   10d4a:	07db      	lsls	r3, r3, #31
   10d4c:	d505      	bpl.n	10d5a <LorawanReceiveWindow2Callback+0x2a>
   10d4e:	2390      	movs	r3, #144	; 0x90
   10d50:	2200      	movs	r2, #0
   10d52:	009b      	lsls	r3, r3, #2
   10d54:	54e2      	strb	r2, [r4, r3]
   10d56:	4b15      	ldr	r3, [pc, #84]	; (10dac <LorawanReceiveWindow2Callback+0x7c>)
   10d58:	4798      	blx	r3
   10d5a:	4b15      	ldr	r3, [pc, #84]	; (10db0 <LorawanReceiveWindow2Callback+0x80>)
   10d5c:	4798      	blx	r3
   10d5e:	2801      	cmp	r0, #1
   10d60:	d10a      	bne.n	10d78 <LorawanReceiveWindow2Callback+0x48>
   10d62:	220e      	movs	r2, #14
   10d64:	3484      	adds	r4, #132	; 0x84
   10d66:	7823      	ldrb	r3, [r4, #0]
   10d68:	4393      	bics	r3, r2
   10d6a:	001a      	movs	r2, r3
   10d6c:	230a      	movs	r3, #10
   10d6e:	4313      	orrs	r3, r2
   10d70:	7023      	strb	r3, [r4, #0]
   10d72:	4b10      	ldr	r3, [pc, #64]	; (10db4 <LorawanReceiveWindow2Callback+0x84>)
   10d74:	4798      	blx	r3
   10d76:	bd10      	pop	{r4, pc}
   10d78:	2301      	movs	r3, #1
   10d7a:	34f9      	adds	r4, #249	; 0xf9
   10d7c:	7023      	strb	r3, [r4, #0]
   10d7e:	e7fa      	b.n	10d76 <LorawanReceiveWindow2Callback+0x46>
   10d80:	2004      	movs	r0, #4
   10d82:	3494      	adds	r4, #148	; 0x94
   10d84:	7822      	ldrb	r2, [r4, #0]
   10d86:	4202      	tst	r2, r0
   10d88:	d007      	beq.n	10d9a <LorawanReceiveWindow2Callback+0x6a>
   10d8a:	4382      	bics	r2, r0
   10d8c:	3803      	subs	r0, #3
   10d8e:	4383      	bics	r3, r0
   10d90:	700b      	strb	r3, [r1, #0]
   10d92:	210b      	movs	r1, #11
   10d94:	4b08      	ldr	r3, [pc, #32]	; (10db8 <LorawanReceiveWindow2Callback+0x88>)
   10d96:	7022      	strb	r2, [r4, #0]
   10d98:	4798      	blx	r3
   10d9a:	4b08      	ldr	r3, [pc, #32]	; (10dbc <LorawanReceiveWindow2Callback+0x8c>)
   10d9c:	4798      	blx	r3
   10d9e:	4b08      	ldr	r3, [pc, #32]	; (10dc0 <LorawanReceiveWindow2Callback+0x90>)
   10da0:	4798      	blx	r3
   10da2:	4b08      	ldr	r3, [pc, #32]	; (10dc4 <LorawanReceiveWindow2Callback+0x94>)
   10da4:	4798      	blx	r3
   10da6:	e7e6      	b.n	10d76 <LorawanReceiveWindow2Callback+0x46>
   10da8:	20002bd4 	.word	0x20002bd4
   10dac:	00012b45 	.word	0x00012b45
   10db0:	00013e8d 	.word	0x00013e8d
   10db4:	00010c5d 	.word	0x00010c5d
   10db8:	0000c84d 	.word	0x0000c84d
   10dbc:	0000f115 	.word	0x0000f115
   10dc0:	0000f0e5 	.word	0x0000f0e5
   10dc4:	0000e4f5 	.word	0x0000e4f5

00010dc8 <SetReceptionNotOkState>:
   10dc8:	4a0c      	ldr	r2, [pc, #48]	; (10dfc <SetReceptionNotOkState+0x34>)
   10dca:	b510      	push	{r4, lr}
   10dcc:	0013      	movs	r3, r2
   10dce:	33fd      	adds	r3, #253	; 0xfd
   10dd0:	7819      	ldrb	r1, [r3, #0]
   10dd2:	0013      	movs	r3, r2
   10dd4:	4c0a      	ldr	r4, [pc, #40]	; (10e00 <SetReceptionNotOkState+0x38>)
   10dd6:	3384      	adds	r3, #132	; 0x84
   10dd8:	2904      	cmp	r1, #4
   10dda:	d105      	bne.n	10de8 <SetReceptionNotOkState+0x20>
   10ddc:	2088      	movs	r0, #136	; 0x88
   10dde:	3903      	subs	r1, #3
   10de0:	0080      	lsls	r0, r0, #2
   10de2:	5411      	strb	r1, [r2, r0]
   10de4:	3020      	adds	r0, #32
   10de6:	5411      	strb	r1, [r2, r0]
   10de8:	210e      	movs	r1, #14
   10dea:	781a      	ldrb	r2, [r3, #0]
   10dec:	2000      	movs	r0, #0
   10dee:	438a      	bics	r2, r1
   10df0:	0011      	movs	r1, r2
   10df2:	220a      	movs	r2, #10
   10df4:	430a      	orrs	r2, r1
   10df6:	701a      	strb	r2, [r3, #0]
   10df8:	47a0      	blx	r4
   10dfa:	bd10      	pop	{r4, pc}
   10dfc:	20002bd4 	.word	0x20002bd4
   10e00:	00010c5d 	.word	0x00010c5d

00010e04 <LorawanProcessFcntDown>:
   10e04:	b570      	push	{r4, r5, r6, lr}
   10e06:	79c3      	ldrb	r3, [r0, #7]
   10e08:	7982      	ldrb	r2, [r0, #6]
   10e0a:	4c1f      	ldr	r4, [pc, #124]	; (10e88 <LorawanProcessFcntDown+0x84>)
   10e0c:	021b      	lsls	r3, r3, #8
   10e0e:	4313      	orrs	r3, r2
   10e10:	0022      	movs	r2, r4
   10e12:	218b      	movs	r1, #139	; 0x8b
   10e14:	328c      	adds	r2, #140	; 0x8c
   10e16:	8810      	ldrh	r0, [r2, #0]
   10e18:	0089      	lsls	r1, r1, #2
   10e1a:	8013      	strh	r3, [r2, #0]
   10e1c:	4298      	cmp	r0, r3
   10e1e:	d80f      	bhi.n	10e40 <LorawanProcessFcntDown+0x3c>
   10e20:	5c61      	ldrb	r1, [r4, r1]
   10e22:	2900      	cmp	r1, #0
   10e24:	d007      	beq.n	10e36 <LorawanProcessFcntDown+0x32>
   10e26:	2301      	movs	r3, #1
   10e28:	408b      	lsls	r3, r1
   10e2a:	6812      	ldr	r2, [r2, #0]
   10e2c:	3b01      	subs	r3, #1
   10e2e:	421a      	tst	r2, r3
   10e30:	d001      	beq.n	10e36 <LorawanProcessFcntDown+0x32>
   10e32:	2008      	movs	r0, #8
   10e34:	bd70      	pop	{r4, r5, r6, pc}
   10e36:	210a      	movs	r1, #10
   10e38:	4b14      	ldr	r3, [pc, #80]	; (10e8c <LorawanProcessFcntDown+0x88>)
   10e3a:	2001      	movs	r0, #1
   10e3c:	4798      	blx	r3
   10e3e:	e7f8      	b.n	10e32 <LorawanProcessFcntDown+0x2e>
   10e40:	0020      	movs	r0, r4
   10e42:	308e      	adds	r0, #142	; 0x8e
   10e44:	8803      	ldrh	r3, [r0, #0]
   10e46:	3301      	adds	r3, #1
   10e48:	8003      	strh	r3, [r0, #0]
   10e4a:	5c61      	ldrb	r1, [r4, r1]
   10e4c:	2900      	cmp	r1, #0
   10e4e:	d005      	beq.n	10e5c <LorawanProcessFcntDown+0x58>
   10e50:	2301      	movs	r3, #1
   10e52:	408b      	lsls	r3, r1
   10e54:	6812      	ldr	r2, [r2, #0]
   10e56:	3b01      	subs	r3, #1
   10e58:	421a      	tst	r2, r3
   10e5a:	d103      	bne.n	10e64 <LorawanProcessFcntDown+0x60>
   10e5c:	210a      	movs	r1, #10
   10e5e:	2001      	movs	r0, #1
   10e60:	4b0a      	ldr	r3, [pc, #40]	; (10e8c <LorawanProcessFcntDown+0x88>)
   10e62:	4798      	blx	r3
   10e64:	0023      	movs	r3, r4
   10e66:	338c      	adds	r3, #140	; 0x8c
   10e68:	681b      	ldr	r3, [r3, #0]
   10e6a:	3301      	adds	r3, #1
   10e6c:	d1e1      	bne.n	10e32 <LorawanProcessFcntDown+0x2e>
   10e6e:	2501      	movs	r5, #1
   10e70:	3484      	adds	r4, #132	; 0x84
   10e72:	78a3      	ldrb	r3, [r4, #2]
   10e74:	432b      	orrs	r3, r5
   10e76:	70a3      	strb	r3, [r4, #2]
   10e78:	4b05      	ldr	r3, [pc, #20]	; (10e90 <LorawanProcessFcntDown+0x8c>)
   10e7a:	4798      	blx	r3
   10e7c:	210b      	movs	r1, #11
   10e7e:	0028      	movs	r0, r5
   10e80:	4b02      	ldr	r3, [pc, #8]	; (10e8c <LorawanProcessFcntDown+0x88>)
   10e82:	4798      	blx	r3
   10e84:	200d      	movs	r0, #13
   10e86:	e7d5      	b.n	10e34 <LorawanProcessFcntDown+0x30>
   10e88:	20002bd4 	.word	0x20002bd4
   10e8c:	0000c84d 	.word	0x0000c84d
   10e90:	00010dc9 	.word	0x00010dc9

00010e94 <UpdateCurrentDataRateAfterDataRangeChanges>:
   10e94:	4b09      	ldr	r3, [pc, #36]	; (10ebc <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   10e96:	001a      	movs	r2, r3
   10e98:	32f4      	adds	r2, #244	; 0xf4
   10e9a:	7811      	ldrb	r1, [r2, #0]
   10e9c:	001a      	movs	r2, r3
   10e9e:	32e7      	adds	r2, #231	; 0xe7
   10ea0:	7810      	ldrb	r0, [r2, #0]
   10ea2:	4288      	cmp	r0, r1
   10ea4:	d900      	bls.n	10ea8 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   10ea6:	7011      	strb	r1, [r2, #0]
   10ea8:	001a      	movs	r2, r3
   10eaa:	33e7      	adds	r3, #231	; 0xe7
   10eac:	32f3      	adds	r2, #243	; 0xf3
   10eae:	7812      	ldrb	r2, [r2, #0]
   10eb0:	7819      	ldrb	r1, [r3, #0]
   10eb2:	4291      	cmp	r1, r2
   10eb4:	d200      	bcs.n	10eb8 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   10eb6:	701a      	strb	r2, [r3, #0]
   10eb8:	4770      	bx	lr
   10eba:	46c0      	nop			; (mov r8, r8)
   10ebc:	20002bd4 	.word	0x20002bd4

00010ec0 <ExecuteNewChannel>:
   10ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ec2:	b08d      	sub	sp, #52	; 0x34
   10ec4:	7807      	ldrb	r7, [r0, #0]
   10ec6:	ab02      	add	r3, sp, #8
   10ec8:	0006      	movs	r6, r0
   10eca:	71df      	strb	r7, [r3, #7]
   10ecc:	1c41      	adds	r1, r0, #1
   10ece:	4b59      	ldr	r3, [pc, #356]	; (11034 <ExecuteNewChannel+0x174>)
   10ed0:	2204      	movs	r2, #4
   10ed2:	a808      	add	r0, sp, #32
   10ed4:	4798      	blx	r3
   10ed6:	9b08      	ldr	r3, [sp, #32]
   10ed8:	4c57      	ldr	r4, [pc, #348]	; (11038 <ExecuteNewChannel+0x178>)
   10eda:	021d      	lsls	r5, r3, #8
   10edc:	2364      	movs	r3, #100	; 0x64
   10ede:	0a2d      	lsrs	r5, r5, #8
   10ee0:	435d      	muls	r5, r3
   10ee2:	1d73      	adds	r3, r6, #5
   10ee4:	9301      	str	r3, [sp, #4]
   10ee6:	0023      	movs	r3, r4
   10ee8:	9508      	str	r5, [sp, #32]
   10eea:	33ff      	adds	r3, #255	; 0xff
   10eec:	781b      	ldrb	r3, [r3, #0]
   10eee:	3b02      	subs	r3, #2
   10ef0:	2b01      	cmp	r3, #1
   10ef2:	d800      	bhi.n	10ef6 <ExecuteNewChannel+0x36>
   10ef4:	e092      	b.n	1101c <ExecuteNewChannel+0x15c>
   10ef6:	7933      	ldrb	r3, [r6, #4]
   10ef8:	a904      	add	r1, sp, #16
   10efa:	9300      	str	r3, [sp, #0]
   10efc:	2300      	movs	r3, #0
   10efe:	2015      	movs	r0, #21
   10f00:	4e4e      	ldr	r6, [pc, #312]	; (1103c <ExecuteNewChannel+0x17c>)
   10f02:	700f      	strb	r7, [r1, #0]
   10f04:	704b      	strb	r3, [r1, #1]
   10f06:	47b0      	blx	r6
   10f08:	2808      	cmp	r0, #8
   10f0a:	d12b      	bne.n	10f64 <ExecuteNewChannel+0xa4>
   10f0c:	466a      	mov	r2, sp
   10f0e:	ab02      	add	r3, sp, #8
   10f10:	79db      	ldrb	r3, [r3, #7]
   10f12:	7812      	ldrb	r2, [r2, #0]
   10f14:	af06      	add	r7, sp, #24
   10f16:	a90a      	add	r1, sp, #40	; 0x28
   10f18:	3806      	subs	r0, #6
   10f1a:	703b      	strb	r3, [r7, #0]
   10f1c:	707a      	strb	r2, [r7, #1]
   10f1e:	710b      	strb	r3, [r1, #4]
   10f20:	950a      	str	r5, [sp, #40]	; 0x28
   10f22:	47b0      	blx	r6
   10f24:	2808      	cmp	r0, #8
   10f26:	d001      	beq.n	10f2c <ExecuteNewChannel+0x6c>
   10f28:	2d00      	cmp	r5, #0
   10f2a:	d10b      	bne.n	10f44 <ExecuteNewChannel+0x84>
   10f2c:	0023      	movs	r3, r4
   10f2e:	33e0      	adds	r3, #224	; 0xe0
   10f30:	781a      	ldrb	r2, [r3, #0]
   10f32:	2303      	movs	r3, #3
   10f34:	4353      	muls	r3, r2
   10f36:	2280      	movs	r2, #128	; 0x80
   10f38:	18e3      	adds	r3, r4, r3
   10f3a:	3398      	adds	r3, #152	; 0x98
   10f3c:	7899      	ldrb	r1, [r3, #2]
   10f3e:	4252      	negs	r2, r2
   10f40:	430a      	orrs	r2, r1
   10f42:	709a      	strb	r2, [r3, #2]
   10f44:	0039      	movs	r1, r7
   10f46:	2012      	movs	r0, #18
   10f48:	47b0      	blx	r6
   10f4a:	2808      	cmp	r0, #8
   10f4c:	d10a      	bne.n	10f64 <ExecuteNewChannel+0xa4>
   10f4e:	0023      	movs	r3, r4
   10f50:	33e0      	adds	r3, #224	; 0xe0
   10f52:	781a      	ldrb	r2, [r3, #0]
   10f54:	2303      	movs	r3, #3
   10f56:	4353      	muls	r3, r2
   10f58:	2240      	movs	r2, #64	; 0x40
   10f5a:	18e3      	adds	r3, r4, r3
   10f5c:	3398      	adds	r3, #152	; 0x98
   10f5e:	7899      	ldrb	r1, [r3, #2]
   10f60:	430a      	orrs	r2, r1
   10f62:	709a      	strb	r2, [r3, #2]
   10f64:	0023      	movs	r3, r4
   10f66:	33e0      	adds	r3, #224	; 0xe0
   10f68:	781a      	ldrb	r2, [r3, #0]
   10f6a:	2303      	movs	r3, #3
   10f6c:	4353      	muls	r3, r2
   10f6e:	18e3      	adds	r3, r4, r3
   10f70:	3398      	adds	r3, #152	; 0x98
   10f72:	789b      	ldrb	r3, [r3, #2]
   10f74:	09da      	lsrs	r2, r3, #7
   10f76:	2a01      	cmp	r2, #1
   10f78:	d150      	bne.n	1101c <ExecuteNewChannel+0x15c>
   10f7a:	065b      	lsls	r3, r3, #25
   10f7c:	d54e      	bpl.n	1101c <ExecuteNewChannel+0x15c>
   10f7e:	4e30      	ldr	r6, [pc, #192]	; (11040 <ExecuteNewChannel+0x180>)
   10f80:	2d00      	cmp	r5, #0
   10f82:	d04e      	beq.n	11022 <ExecuteNewChannel+0x162>
   10f84:	a906      	add	r1, sp, #24
   10f86:	2012      	movs	r0, #18
   10f88:	47b0      	blx	r6
   10f8a:	ad07      	add	r5, sp, #28
   10f8c:	a90a      	add	r1, sp, #40	; 0x28
   10f8e:	2000      	movs	r0, #0
   10f90:	47b0      	blx	r6
   10f92:	002a      	movs	r2, r5
   10f94:	2100      	movs	r1, #0
   10f96:	2014      	movs	r0, #20
   10f98:	4f2a      	ldr	r7, [pc, #168]	; (11044 <ExecuteNewChannel+0x184>)
   10f9a:	47b8      	blx	r7
   10f9c:	0023      	movs	r3, r4
   10f9e:	782a      	ldrb	r2, [r5, #0]
   10fa0:	33f3      	adds	r3, #243	; 0xf3
   10fa2:	701a      	strb	r2, [r3, #0]
   10fa4:	0023      	movs	r3, r4
   10fa6:	786a      	ldrb	r2, [r5, #1]
   10fa8:	33f4      	adds	r3, #244	; 0xf4
   10faa:	701a      	strb	r2, [r3, #0]
   10fac:	34ff      	adds	r4, #255	; 0xff
   10fae:	4b26      	ldr	r3, [pc, #152]	; (11048 <ExecuteNewChannel+0x188>)
   10fb0:	4798      	blx	r3
   10fb2:	7f63      	ldrb	r3, [r4, #29]
   10fb4:	079b      	lsls	r3, r3, #30
   10fb6:	d50e      	bpl.n	10fd6 <ExecuteNewChannel+0x116>
   10fb8:	2416      	movs	r4, #22
   10fba:	ab02      	add	r3, sp, #8
   10fbc:	18e4      	adds	r4, r4, r3
   10fbe:	1dd9      	adds	r1, r3, #7
   10fc0:	0022      	movs	r2, r4
   10fc2:	201e      	movs	r0, #30
   10fc4:	47b8      	blx	r7
   10fc6:	ab02      	add	r3, sp, #8
   10fc8:	79db      	ldrb	r3, [r3, #7]
   10fca:	a909      	add	r1, sp, #36	; 0x24
   10fcc:	708b      	strb	r3, [r1, #2]
   10fce:	8823      	ldrh	r3, [r4, #0]
   10fd0:	201e      	movs	r0, #30
   10fd2:	800b      	strh	r3, [r1, #0]
   10fd4:	47b0      	blx	r6
   10fd6:	ab02      	add	r3, sp, #8
   10fd8:	79db      	ldrb	r3, [r3, #7]
   10fda:	a905      	add	r1, sp, #20
   10fdc:	700b      	strb	r3, [r1, #0]
   10fde:	2301      	movs	r3, #1
   10fe0:	2016      	movs	r0, #22
   10fe2:	704b      	strb	r3, [r1, #1]
   10fe4:	4b16      	ldr	r3, [pc, #88]	; (11040 <ExecuteNewChannel+0x180>)
   10fe6:	4798      	blx	r3
   10fe8:	ad09      	add	r5, sp, #36	; 0x24
   10fea:	2100      	movs	r1, #0
   10fec:	002a      	movs	r2, r5
   10fee:	4b15      	ldr	r3, [pc, #84]	; (11044 <ExecuteNewChannel+0x184>)
   10ff0:	2014      	movs	r0, #20
   10ff2:	4798      	blx	r3
   10ff4:	4c10      	ldr	r4, [pc, #64]	; (11038 <ExecuteNewChannel+0x178>)
   10ff6:	782a      	ldrb	r2, [r5, #0]
   10ff8:	0023      	movs	r3, r4
   10ffa:	33f3      	adds	r3, #243	; 0xf3
   10ffc:	701a      	strb	r2, [r3, #0]
   10ffe:	0023      	movs	r3, r4
   11000:	786a      	ldrb	r2, [r5, #1]
   11002:	33f4      	adds	r3, #244	; 0xf4
   11004:	701a      	strb	r2, [r3, #0]
   11006:	4b10      	ldr	r3, [pc, #64]	; (11048 <ExecuteNewChannel+0x188>)
   11008:	4798      	blx	r3
   1100a:	2304      	movs	r3, #4
   1100c:	3484      	adds	r4, #132	; 0x84
   1100e:	7862      	ldrb	r2, [r4, #1]
   11010:	210b      	movs	r1, #11
   11012:	4313      	orrs	r3, r2
   11014:	7063      	strb	r3, [r4, #1]
   11016:	2001      	movs	r0, #1
   11018:	4b0c      	ldr	r3, [pc, #48]	; (1104c <ExecuteNewChannel+0x18c>)
   1101a:	4798      	blx	r3
   1101c:	9801      	ldr	r0, [sp, #4]
   1101e:	b00d      	add	sp, #52	; 0x34
   11020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11022:	ab02      	add	r3, sp, #8
   11024:	79db      	ldrb	r3, [r3, #7]
   11026:	a905      	add	r1, sp, #20
   11028:	2016      	movs	r0, #22
   1102a:	700b      	strb	r3, [r1, #0]
   1102c:	704d      	strb	r5, [r1, #1]
   1102e:	47b0      	blx	r6
   11030:	e7da      	b.n	10fe8 <ExecuteNewChannel+0x128>
   11032:	46c0      	nop			; (mov r8, r8)
   11034:	00018655 	.word	0x00018655
   11038:	20002bd4 	.word	0x20002bd4
   1103c:	0000bff9 	.word	0x0000bff9
   11040:	0000c105 	.word	0x0000c105
   11044:	0000bfdd 	.word	0x0000bfdd
   11048:	00010e95 	.word	0x00010e95
   1104c:	0000c84d 	.word	0x0000c84d

00011050 <MacExecuteCommands>:
   11050:	b5f0      	push	{r4, r5, r6, r7, lr}
   11052:	1843      	adds	r3, r0, r1
   11054:	b087      	sub	sp, #28
   11056:	9301      	str	r3, [sp, #4]
   11058:	2300      	movs	r3, #0
   1105a:	0007      	movs	r7, r0
   1105c:	2501      	movs	r5, #1
   1105e:	9302      	str	r3, [sp, #8]
   11060:	9b01      	ldr	r3, [sp, #4]
   11062:	4e71      	ldr	r6, [pc, #452]	; (11228 <MacExecuteCommands+0x1d8>)
   11064:	429f      	cmp	r7, r3
   11066:	d362      	bcc.n	1112e <MacExecuteCommands+0xde>
   11068:	4b70      	ldr	r3, [pc, #448]	; (1122c <MacExecuteCommands+0x1dc>)
   1106a:	5cf3      	ldrb	r3, [r6, r3]
   1106c:	2b00      	cmp	r3, #0
   1106e:	d000      	beq.n	11072 <MacExecuteCommands+0x22>
   11070:	e08f      	b.n	11192 <MacExecuteCommands+0x142>
   11072:	0038      	movs	r0, r7
   11074:	b007      	add	sp, #28
   11076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11078:	0032      	movs	r2, r6
   1107a:	7879      	ldrb	r1, [r7, #1]
   1107c:	32e5      	adds	r2, #229	; 0xe5
   1107e:	7011      	strb	r1, [r2, #0]
   11080:	0032      	movs	r2, r6
   11082:	78b9      	ldrb	r1, [r7, #2]
   11084:	32e6      	adds	r2, #230	; 0xe6
   11086:	1cfc      	adds	r4, r7, #3
   11088:	7011      	strb	r1, [r2, #0]
   1108a:	2203      	movs	r2, #3
   1108c:	4353      	muls	r3, r2
   1108e:	18f3      	adds	r3, r6, r3
   11090:	3399      	adds	r3, #153	; 0x99
   11092:	32fc      	adds	r2, #252	; 0xfc
   11094:	701a      	strb	r2, [r3, #0]
   11096:	e020      	b.n	110da <MacExecuteCommands+0x8a>
   11098:	0020      	movs	r0, r4
   1109a:	4b65      	ldr	r3, [pc, #404]	; (11230 <MacExecuteCommands+0x1e0>)
   1109c:	4798      	blx	r3
   1109e:	0004      	movs	r4, r0
   110a0:	e01b      	b.n	110da <MacExecuteCommands+0x8a>
   110a2:	0020      	movs	r0, r4
   110a4:	4b63      	ldr	r3, [pc, #396]	; (11234 <MacExecuteCommands+0x1e4>)
   110a6:	e7f9      	b.n	1109c <MacExecuteCommands+0x4c>
   110a8:	0020      	movs	r0, r4
   110aa:	4b63      	ldr	r3, [pc, #396]	; (11238 <MacExecuteCommands+0x1e8>)
   110ac:	e7f6      	b.n	1109c <MacExecuteCommands+0x4c>
   110ae:	0020      	movs	r0, r4
   110b0:	4b62      	ldr	r3, [pc, #392]	; (1123c <MacExecuteCommands+0x1ec>)
   110b2:	e7f3      	b.n	1109c <MacExecuteCommands+0x4c>
   110b4:	7878      	ldrb	r0, [r7, #1]
   110b6:	230f      	movs	r3, #15
   110b8:	0002      	movs	r2, r0
   110ba:	1cbc      	adds	r4, r7, #2
   110bc:	439a      	bics	r2, r3
   110be:	d10c      	bne.n	110da <MacExecuteCommands+0x8a>
   110c0:	4b5f      	ldr	r3, [pc, #380]	; (11240 <MacExecuteCommands+0x1f0>)
   110c2:	4798      	blx	r3
   110c4:	0032      	movs	r2, r6
   110c6:	2380      	movs	r3, #128	; 0x80
   110c8:	3284      	adds	r2, #132	; 0x84
   110ca:	7851      	ldrb	r1, [r2, #1]
   110cc:	425b      	negs	r3, r3
   110ce:	430b      	orrs	r3, r1
   110d0:	7053      	strb	r3, [r2, #1]
   110d2:	210b      	movs	r1, #11
   110d4:	0028      	movs	r0, r5
   110d6:	4b5b      	ldr	r3, [pc, #364]	; (11244 <MacExecuteCommands+0x1f4>)
   110d8:	4798      	blx	r3
   110da:	0032      	movs	r2, r6
   110dc:	2103      	movs	r1, #3
   110de:	32e0      	adds	r2, #224	; 0xe0
   110e0:	7813      	ldrb	r3, [r2, #0]
   110e2:	4359      	muls	r1, r3
   110e4:	1876      	adds	r6, r6, r1
   110e6:	3699      	adds	r6, #153	; 0x99
   110e8:	7831      	ldrb	r1, [r6, #0]
   110ea:	29ff      	cmp	r1, #255	; 0xff
   110ec:	d003      	beq.n	110f6 <MacExecuteCommands+0xa6>
   110ee:	2b0f      	cmp	r3, #15
   110f0:	d801      	bhi.n	110f6 <MacExecuteCommands+0xa6>
   110f2:	3301      	adds	r3, #1
   110f4:	7013      	strb	r3, [r2, #0]
   110f6:	0027      	movs	r7, r4
   110f8:	e7b2      	b.n	11060 <MacExecuteCommands+0x10>
   110fa:	0020      	movs	r0, r4
   110fc:	4b52      	ldr	r3, [pc, #328]	; (11248 <MacExecuteCommands+0x1f8>)
   110fe:	e7cd      	b.n	1109c <MacExecuteCommands+0x4c>
   11100:	0020      	movs	r0, r4
   11102:	4b52      	ldr	r3, [pc, #328]	; (1124c <MacExecuteCommands+0x1fc>)
   11104:	e7ca      	b.n	1109c <MacExecuteCommands+0x4c>
   11106:	0020      	movs	r0, r4
   11108:	4b51      	ldr	r3, [pc, #324]	; (11250 <MacExecuteCommands+0x200>)
   1110a:	4798      	blx	r3
   1110c:	0033      	movs	r3, r6
   1110e:	33e0      	adds	r3, #224	; 0xe0
   11110:	0004      	movs	r4, r0
   11112:	781b      	ldrb	r3, [r3, #0]
   11114:	e7b9      	b.n	1108a <MacExecuteCommands+0x3a>
   11116:	2203      	movs	r2, #3
   11118:	4353      	muls	r3, r2
   1111a:	18f3      	adds	r3, r6, r3
   1111c:	3399      	adds	r3, #153	; 0x99
   1111e:	32fc      	adds	r2, #252	; 0xfc
   11120:	701a      	strb	r2, [r3, #0]
   11122:	9c01      	ldr	r4, [sp, #4]
   11124:	9502      	str	r5, [sp, #8]
   11126:	e7d8      	b.n	110da <MacExecuteCommands+0x8a>
   11128:	23ff      	movs	r3, #255	; 0xff
   1112a:	7013      	strb	r3, [r2, #0]
   1112c:	e7f9      	b.n	11122 <MacExecuteCommands+0xd2>
   1112e:	9b02      	ldr	r3, [sp, #8]
   11130:	2b00      	cmp	r3, #0
   11132:	d199      	bne.n	11068 <MacExecuteCommands+0x18>
   11134:	0033      	movs	r3, r6
   11136:	2203      	movs	r2, #3
   11138:	33e0      	adds	r3, #224	; 0xe0
   1113a:	781b      	ldrb	r3, [r3, #0]
   1113c:	2401      	movs	r4, #1
   1113e:	435a      	muls	r2, r3
   11140:	18b2      	adds	r2, r6, r2
   11142:	0010      	movs	r0, r2
   11144:	3098      	adds	r0, #152	; 0x98
   11146:	7881      	ldrb	r1, [r0, #2]
   11148:	3299      	adds	r2, #153	; 0x99
   1114a:	43a9      	bics	r1, r5
   1114c:	4021      	ands	r1, r4
   1114e:	7081      	strb	r1, [r0, #2]
   11150:	78c1      	ldrb	r1, [r0, #3]
   11152:	193c      	adds	r4, r7, r4
   11154:	43a9      	bics	r1, r5
   11156:	70c1      	strb	r1, [r0, #3]
   11158:	7839      	ldrb	r1, [r7, #0]
   1115a:	7011      	strb	r1, [r2, #0]
   1115c:	7838      	ldrb	r0, [r7, #0]
   1115e:	493d      	ldr	r1, [pc, #244]	; (11254 <MacExecuteCommands+0x204>)
   11160:	1809      	adds	r1, r1, r0
   11162:	3902      	subs	r1, #2
   11164:	7809      	ldrb	r1, [r1, #0]
   11166:	1861      	adds	r1, r4, r1
   11168:	468c      	mov	ip, r1
   1116a:	9901      	ldr	r1, [sp, #4]
   1116c:	4561      	cmp	r1, ip
   1116e:	d3db      	bcc.n	11128 <MacExecuteCommands+0xd8>
   11170:	3802      	subs	r0, #2
   11172:	280b      	cmp	r0, #11
   11174:	d8cf      	bhi.n	11116 <MacExecuteCommands+0xc6>
   11176:	f003 fed7 	bl	14f28 <__gnu_thumb1_case_shi>
   1117a:	ff7f      	.short	0xff7f
   1117c:	ff94ff8f 	.word	0xff94ff8f
   11180:	ffb0ff97 	.word	0xffb0ff97
   11184:	ff9dff9a 	.word	0xff9dff9a
   11188:	ffc3ffc0 	.word	0xffc3ffc0
   1118c:	ffceffce 	.word	0xffceffce
   11190:	ffc6      	.short	0xffc6
   11192:	4b31      	ldr	r3, [pc, #196]	; (11258 <MacExecuteCommands+0x208>)
   11194:	5cf3      	ldrb	r3, [r6, r3]
   11196:	43db      	mvns	r3, r3
   11198:	075b      	lsls	r3, r3, #29
   1119a:	d000      	beq.n	1119e <MacExecuteCommands+0x14e>
   1119c:	e769      	b.n	11072 <MacExecuteCommands+0x22>
   1119e:	4b2f      	ldr	r3, [pc, #188]	; (1125c <MacExecuteCommands+0x20c>)
   111a0:	ad05      	add	r5, sp, #20
   111a2:	5cf4      	ldrb	r4, [r6, r3]
   111a4:	2100      	movs	r1, #0
   111a6:	0724      	lsls	r4, r4, #28
   111a8:	0f24      	lsrs	r4, r4, #28
   111aa:	b2e3      	uxtb	r3, r4
   111ac:	9301      	str	r3, [sp, #4]
   111ae:	4b2c      	ldr	r3, [pc, #176]	; (11260 <MacExecuteCommands+0x210>)
   111b0:	002a      	movs	r2, r5
   111b2:	5cf3      	ldrb	r3, [r6, r3]
   111b4:	2014      	movs	r0, #20
   111b6:	9302      	str	r3, [sp, #8]
   111b8:	2389      	movs	r3, #137	; 0x89
   111ba:	009b      	lsls	r3, r3, #2
   111bc:	5cf3      	ldrb	r3, [r6, r3]
   111be:	9303      	str	r3, [sp, #12]
   111c0:	4b28      	ldr	r3, [pc, #160]	; (11264 <MacExecuteCommands+0x214>)
   111c2:	4798      	blx	r3
   111c4:	0033      	movs	r3, r6
   111c6:	782a      	ldrb	r2, [r5, #0]
   111c8:	33f3      	adds	r3, #243	; 0xf3
   111ca:	701a      	strb	r2, [r3, #0]
   111cc:	0033      	movs	r3, r6
   111ce:	786a      	ldrb	r2, [r5, #1]
   111d0:	33f4      	adds	r3, #244	; 0xf4
   111d2:	701a      	strb	r2, [r3, #0]
   111d4:	4b24      	ldr	r3, [pc, #144]	; (11268 <MacExecuteCommands+0x218>)
   111d6:	4798      	blx	r3
   111d8:	9802      	ldr	r0, [sp, #8]
   111da:	4b24      	ldr	r3, [pc, #144]	; (1126c <MacExecuteCommands+0x21c>)
   111dc:	4798      	blx	r3
   111de:	0032      	movs	r2, r6
   111e0:	2308      	movs	r3, #8
   111e2:	3284      	adds	r2, #132	; 0x84
   111e4:	7851      	ldrb	r1, [r2, #1]
   111e6:	430b      	orrs	r3, r1
   111e8:	7053      	strb	r3, [r2, #1]
   111ea:	9803      	ldr	r0, [sp, #12]
   111ec:	4b20      	ldr	r3, [pc, #128]	; (11270 <MacExecuteCommands+0x220>)
   111ee:	4798      	blx	r3
   111f0:	0033      	movs	r3, r6
   111f2:	b2e2      	uxtb	r2, r4
   111f4:	33e1      	adds	r3, #225	; 0xe1
   111f6:	2a00      	cmp	r2, #0
   111f8:	d10e      	bne.n	11218 <MacExecuteCommands+0x1c8>
   111fa:	701c      	strb	r4, [r3, #0]
   111fc:	2113      	movs	r1, #19
   111fe:	4c11      	ldr	r4, [pc, #68]	; (11244 <MacExecuteCommands+0x1f4>)
   11200:	2000      	movs	r0, #0
   11202:	47a0      	blx	r4
   11204:	2210      	movs	r2, #16
   11206:	4b08      	ldr	r3, [pc, #32]	; (11228 <MacExecuteCommands+0x1d8>)
   11208:	2001      	movs	r0, #1
   1120a:	3384      	adds	r3, #132	; 0x84
   1120c:	7859      	ldrb	r1, [r3, #1]
   1120e:	430a      	orrs	r2, r1
   11210:	705a      	strb	r2, [r3, #1]
   11212:	210b      	movs	r1, #11
   11214:	47a0      	blx	r4
   11216:	e72c      	b.n	11072 <MacExecuteCommands+0x22>
   11218:	9a01      	ldr	r2, [sp, #4]
   1121a:	3a01      	subs	r2, #1
   1121c:	b2d2      	uxtb	r2, r2
   1121e:	701a      	strb	r2, [r3, #0]
   11220:	0033      	movs	r3, r6
   11222:	33e2      	adds	r3, #226	; 0xe2
   11224:	701a      	strb	r2, [r3, #0]
   11226:	e7e9      	b.n	111fc <MacExecuteCommands+0x1ac>
   11228:	20002bd4 	.word	0x20002bd4
   1122c:	00000226 	.word	0x00000226
   11230:	0000f3d5 	.word	0x0000f3d5
   11234:	0000f299 	.word	0x0000f299
   11238:	0000f19d 	.word	0x0000f19d
   1123c:	00010ec1 	.word	0x00010ec1
   11240:	0000e605 	.word	0x0000e605
   11244:	0000c84d 	.word	0x0000c84d
   11248:	0000f385 	.word	0x0000f385
   1124c:	0000f2d1 	.word	0x0000f2d1
   11250:	0000f50d 	.word	0x0000f50d
   11254:	0001e993 	.word	0x0001e993
   11258:	00000223 	.word	0x00000223
   1125c:	00000229 	.word	0x00000229
   11260:	00000225 	.word	0x00000225
   11264:	0000bfdd 	.word	0x0000bfdd
   11268:	00010e95 	.word	0x00010e95
   1126c:	0000f02d 	.word	0x0000f02d
   11270:	0000efc1 	.word	0x0000efc1

00011274 <LorawanSetDataRange>:
   11274:	2201      	movs	r2, #1
   11276:	b530      	push	{r4, r5, lr}
   11278:	b085      	sub	sp, #20
   1127a:	ab01      	add	r3, sp, #4
   1127c:	ac02      	add	r4, sp, #8
   1127e:	7018      	strb	r0, [r3, #0]
   11280:	7020      	strb	r0, [r4, #0]
   11282:	7061      	strb	r1, [r4, #1]
   11284:	2015      	movs	r0, #21
   11286:	0019      	movs	r1, r3
   11288:	4d11      	ldr	r5, [pc, #68]	; (112d0 <LorawanSetDataRange+0x5c>)
   1128a:	705a      	strb	r2, [r3, #1]
   1128c:	47a8      	blx	r5
   1128e:	2808      	cmp	r0, #8
   11290:	d003      	beq.n	1129a <LorawanSetDataRange+0x26>
   11292:	250a      	movs	r5, #10
   11294:	0028      	movs	r0, r5
   11296:	b005      	add	sp, #20
   11298:	bd30      	pop	{r4, r5, pc}
   1129a:	0021      	movs	r1, r4
   1129c:	2012      	movs	r0, #18
   1129e:	47a8      	blx	r5
   112a0:	0005      	movs	r5, r0
   112a2:	2808      	cmp	r0, #8
   112a4:	d1f5      	bne.n	11292 <LorawanSetDataRange+0x1e>
   112a6:	0021      	movs	r1, r4
   112a8:	4b0a      	ldr	r3, [pc, #40]	; (112d4 <LorawanSetDataRange+0x60>)
   112aa:	ac03      	add	r4, sp, #12
   112ac:	2012      	movs	r0, #18
   112ae:	4798      	blx	r3
   112b0:	0022      	movs	r2, r4
   112b2:	2100      	movs	r1, #0
   112b4:	4b08      	ldr	r3, [pc, #32]	; (112d8 <LorawanSetDataRange+0x64>)
   112b6:	2014      	movs	r0, #20
   112b8:	4798      	blx	r3
   112ba:	4b08      	ldr	r3, [pc, #32]	; (112dc <LorawanSetDataRange+0x68>)
   112bc:	7821      	ldrb	r1, [r4, #0]
   112be:	001a      	movs	r2, r3
   112c0:	32f3      	adds	r2, #243	; 0xf3
   112c2:	7011      	strb	r1, [r2, #0]
   112c4:	7862      	ldrb	r2, [r4, #1]
   112c6:	33f4      	adds	r3, #244	; 0xf4
   112c8:	701a      	strb	r2, [r3, #0]
   112ca:	4b05      	ldr	r3, [pc, #20]	; (112e0 <LorawanSetDataRange+0x6c>)
   112cc:	4798      	blx	r3
   112ce:	e7e1      	b.n	11294 <LorawanSetDataRange+0x20>
   112d0:	0000bff9 	.word	0x0000bff9
   112d4:	0000c105 	.word	0x0000c105
   112d8:	0000bfdd 	.word	0x0000bfdd
   112dc:	20002bd4 	.word	0x20002bd4
   112e0:	00010e95 	.word	0x00010e95

000112e4 <LorawanSetChannelIdStatus>:
   112e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   112e6:	466b      	mov	r3, sp
   112e8:	7018      	strb	r0, [r3, #0]
   112ea:	7059      	strb	r1, [r3, #1]
   112ec:	2016      	movs	r0, #22
   112ee:	4669      	mov	r1, sp
   112f0:	4b0c      	ldr	r3, [pc, #48]	; (11324 <LorawanSetChannelIdStatus+0x40>)
   112f2:	4798      	blx	r3
   112f4:	0004      	movs	r4, r0
   112f6:	2808      	cmp	r0, #8
   112f8:	d111      	bne.n	1131e <LorawanSetChannelIdStatus+0x3a>
   112fa:	ad01      	add	r5, sp, #4
   112fc:	002a      	movs	r2, r5
   112fe:	2100      	movs	r1, #0
   11300:	4b09      	ldr	r3, [pc, #36]	; (11328 <LorawanSetChannelIdStatus+0x44>)
   11302:	2014      	movs	r0, #20
   11304:	4798      	blx	r3
   11306:	4b09      	ldr	r3, [pc, #36]	; (1132c <LorawanSetChannelIdStatus+0x48>)
   11308:	7829      	ldrb	r1, [r5, #0]
   1130a:	001a      	movs	r2, r3
   1130c:	32f3      	adds	r2, #243	; 0xf3
   1130e:	7011      	strb	r1, [r2, #0]
   11310:	786a      	ldrb	r2, [r5, #1]
   11312:	33f4      	adds	r3, #244	; 0xf4
   11314:	701a      	strb	r2, [r3, #0]
   11316:	4b06      	ldr	r3, [pc, #24]	; (11330 <LorawanSetChannelIdStatus+0x4c>)
   11318:	4798      	blx	r3
   1131a:	0020      	movs	r0, r4
   1131c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1131e:	240a      	movs	r4, #10
   11320:	e7fb      	b.n	1131a <LorawanSetChannelIdStatus+0x36>
   11322:	46c0      	nop			; (mov r8, r8)
   11324:	0000c105 	.word	0x0000c105
   11328:	0000bfdd 	.word	0x0000bfdd
   1132c:	20002bd4 	.word	0x20002bd4
   11330:	00010e95 	.word	0x00010e95

00011334 <LORAWAN_RxDone>:
   11334:	b5f0      	push	{r4, r5, r6, r7, lr}
   11336:	4bce      	ldr	r3, [pc, #824]	; (11670 <LORAWAN_RxDone+0x33c>)
   11338:	b093      	sub	sp, #76	; 0x4c
   1133a:	781b      	ldrb	r3, [r3, #0]
   1133c:	0007      	movs	r7, r0
   1133e:	b25a      	sxtb	r2, r3
   11340:	000c      	movs	r4, r1
   11342:	4ecc      	ldr	r6, [pc, #816]	; (11674 <LORAWAN_RxDone+0x340>)
   11344:	2a00      	cmp	r2, #0
   11346:	da01      	bge.n	1134c <LORAWAN_RxDone+0x18>
   11348:	f000 fc9a 	bl	11c80 <LORAWAN_RxDone+0x94c>
   1134c:	7801      	ldrb	r1, [r0, #0]
   1134e:	221f      	movs	r2, #31
   11350:	0008      	movs	r0, r1
   11352:	4390      	bics	r0, r2
   11354:	0002      	movs	r2, r0
   11356:	2820      	cmp	r0, #32
   11358:	d000      	beq.n	1135c <LORAWAN_RxDone+0x28>
   1135a:	e1c1      	b.n	116e0 <LORAWAN_RxDone+0x3ac>
   1135c:	7832      	ldrb	r2, [r6, #0]
   1135e:	2a00      	cmp	r2, #0
   11360:	d001      	beq.n	11366 <LORAWAN_RxDone+0x32>
   11362:	f000 fc79 	bl	11c58 <LORAWAN_RxDone+0x924>
   11366:	0032      	movs	r2, r6
   11368:	3294      	adds	r2, #148	; 0x94
   1136a:	7812      	ldrb	r2, [r2, #0]
   1136c:	0752      	lsls	r2, r2, #29
   1136e:	d401      	bmi.n	11374 <LORAWAN_RxDone+0x40>
   11370:	f000 fc72 	bl	11c58 <LORAWAN_RxDone+0x924>
   11374:	1e63      	subs	r3, r4, #1
   11376:	b2db      	uxtb	r3, r3
   11378:	9306      	str	r3, [sp, #24]
   1137a:	4bbf      	ldr	r3, [pc, #764]	; (11678 <LORAWAN_RxDone+0x344>)
   1137c:	469c      	mov	ip, r3
   1137e:	9b06      	ldr	r3, [sp, #24]
   11380:	2b00      	cmp	r3, #0
   11382:	d12b      	bne.n	113dc <LORAWAN_RxDone+0xa8>
   11384:	1f25      	subs	r5, r4, #4
   11386:	b2eb      	uxtb	r3, r5
   11388:	4660      	mov	r0, ip
   1138a:	9300      	str	r3, [sp, #0]
   1138c:	4abb      	ldr	r2, [pc, #748]	; (1167c <LORAWAN_RxDone+0x348>)
   1138e:	003b      	movs	r3, r7
   11390:	9906      	ldr	r1, [sp, #24]
   11392:	4ebb      	ldr	r6, [pc, #748]	; (11680 <LORAWAN_RxDone+0x34c>)
   11394:	47b0      	blx	r6
   11396:	2204      	movs	r2, #4
   11398:	49b8      	ldr	r1, [pc, #736]	; (1167c <LORAWAN_RxDone+0x348>)
   1139a:	4bba      	ldr	r3, [pc, #744]	; (11684 <LORAWAN_RxDone+0x350>)
   1139c:	a810      	add	r0, sp, #64	; 0x40
   1139e:	4798      	blx	r3
   113a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
   113a2:	1979      	adds	r1, r7, r5
   113a4:	2204      	movs	r2, #4
   113a6:	4bb7      	ldr	r3, [pc, #732]	; (11684 <LORAWAN_RxDone+0x350>)
   113a8:	a810      	add	r0, sp, #64	; 0x40
   113aa:	960d      	str	r6, [sp, #52]	; 0x34
   113ac:	4798      	blx	r3
   113ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   113b0:	4db0      	ldr	r5, [pc, #704]	; (11674 <LORAWAN_RxDone+0x340>)
   113b2:	220e      	movs	r2, #14
   113b4:	42b3      	cmp	r3, r6
   113b6:	d028      	beq.n	1140a <LORAWAN_RxDone+0xd6>
   113b8:	002b      	movs	r3, r5
   113ba:	3384      	adds	r3, #132	; 0x84
   113bc:	781b      	ldrb	r3, [r3, #0]
   113be:	4013      	ands	r3, r2
   113c0:	2b0a      	cmp	r3, #10
   113c2:	d005      	beq.n	113d0 <LORAWAN_RxDone+0x9c>
   113c4:	2b06      	cmp	r3, #6
   113c6:	d106      	bne.n	113d6 <LORAWAN_RxDone+0xa2>
   113c8:	35f9      	adds	r5, #249	; 0xf9
   113ca:	782b      	ldrb	r3, [r5, #0]
   113cc:	2b00      	cmp	r3, #0
   113ce:	d002      	beq.n	113d6 <LORAWAN_RxDone+0xa2>
   113d0:	2018      	movs	r0, #24
   113d2:	4bad      	ldr	r3, [pc, #692]	; (11688 <LORAWAN_RxDone+0x354>)
   113d4:	4798      	blx	r3
   113d6:	4bad      	ldr	r3, [pc, #692]	; (1168c <LORAWAN_RxDone+0x358>)
   113d8:	4798      	blx	r3
   113da:	e1ed      	b.n	117b8 <LORAWAN_RxDone+0x484>
   113dc:	9b06      	ldr	r3, [sp, #24]
   113de:	4662      	mov	r2, ip
   113e0:	1ae0      	subs	r0, r4, r3
   113e2:	1838      	adds	r0, r7, r0
   113e4:	2100      	movs	r1, #0
   113e6:	4baa      	ldr	r3, [pc, #680]	; (11690 <LORAWAN_RxDone+0x35c>)
   113e8:	4798      	blx	r3
   113ea:	2800      	cmp	r0, #0
   113ec:	d006      	beq.n	113fc <LORAWAN_RxDone+0xc8>
   113ee:	4ba6      	ldr	r3, [pc, #664]	; (11688 <LORAWAN_RxDone+0x354>)
   113f0:	4798      	blx	r3
   113f2:	4ba6      	ldr	r3, [pc, #664]	; (1168c <LORAWAN_RxDone+0x358>)
   113f4:	4798      	blx	r3
   113f6:	201f      	movs	r0, #31
   113f8:	b013      	add	sp, #76	; 0x4c
   113fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113fc:	9b06      	ldr	r3, [sp, #24]
   113fe:	2b10      	cmp	r3, #16
   11400:	d901      	bls.n	11406 <LORAWAN_RxDone+0xd2>
   11402:	3b10      	subs	r3, #16
   11404:	e7b7      	b.n	11376 <LORAWAN_RxDone+0x42>
   11406:	9006      	str	r0, [sp, #24]
   11408:	e7b7      	b.n	1137a <LORAWAN_RxDone+0x46>
   1140a:	002b      	movs	r3, r5
   1140c:	3384      	adds	r3, #132	; 0x84
   1140e:	781b      	ldrb	r3, [r3, #0]
   11410:	4013      	ands	r3, r2
   11412:	2b06      	cmp	r3, #6
   11414:	d104      	bne.n	11420 <LORAWAN_RxDone+0xec>
   11416:	002b      	movs	r3, r5
   11418:	33ec      	adds	r3, #236	; 0xec
   1141a:	7818      	ldrb	r0, [r3, #0]
   1141c:	4b9d      	ldr	r3, [pc, #628]	; (11694 <LORAWAN_RxDone+0x360>)
   1141e:	4798      	blx	r3
   11420:	78bb      	ldrb	r3, [r7, #2]
   11422:	78fa      	ldrb	r2, [r7, #3]
   11424:	021b      	lsls	r3, r3, #8
   11426:	0412      	lsls	r2, r2, #16
   11428:	4313      	orrs	r3, r2
   1142a:	2291      	movs	r2, #145	; 0x91
   1142c:	7879      	ldrb	r1, [r7, #1]
   1142e:	0092      	lsls	r2, r2, #2
   11430:	430b      	orrs	r3, r1
   11432:	58a9      	ldr	r1, [r5, r2]
   11434:	1c48      	adds	r0, r1, #1
   11436:	d006      	beq.n	11446 <LORAWAN_RxDone+0x112>
   11438:	428b      	cmp	r3, r1
   1143a:	d804      	bhi.n	11446 <LORAWAN_RxDone+0x112>
   1143c:	2024      	movs	r0, #36	; 0x24
   1143e:	4b92      	ldr	r3, [pc, #584]	; (11688 <LORAWAN_RxDone+0x354>)
   11440:	4798      	blx	r3
   11442:	2024      	movs	r0, #36	; 0x24
   11444:	e7d8      	b.n	113f8 <LORAWAN_RxDone+0xc4>
   11446:	210f      	movs	r1, #15
   11448:	4e93      	ldr	r6, [pc, #588]	; (11698 <LORAWAN_RxDone+0x364>)
   1144a:	2001      	movs	r0, #1
   1144c:	50ab      	str	r3, [r5, r2]
   1144e:	47b0      	blx	r6
   11450:	7a3a      	ldrb	r2, [r7, #8]
   11452:	79fb      	ldrb	r3, [r7, #7]
   11454:	0212      	lsls	r2, r2, #8
   11456:	431a      	orrs	r2, r3
   11458:	7a7b      	ldrb	r3, [r7, #9]
   1145a:	2001      	movs	r0, #1
   1145c:	041b      	lsls	r3, r3, #16
   1145e:	431a      	orrs	r2, r3
   11460:	7abb      	ldrb	r3, [r7, #10]
   11462:	061b      	lsls	r3, r3, #24
   11464:	4313      	orrs	r3, r2
   11466:	0a19      	lsrs	r1, r3, #8
   11468:	706b      	strb	r3, [r5, #1]
   1146a:	70a9      	strb	r1, [r5, #2]
   1146c:	0c19      	lsrs	r1, r3, #16
   1146e:	0e1b      	lsrs	r3, r3, #24
   11470:	70e9      	strb	r1, [r5, #3]
   11472:	712b      	strb	r3, [r5, #4]
   11474:	250f      	movs	r5, #15
   11476:	2103      	movs	r1, #3
   11478:	47b0      	blx	r6
   1147a:	7b38      	ldrb	r0, [r7, #12]
   1147c:	4b87      	ldr	r3, [pc, #540]	; (1169c <LORAWAN_RxDone+0x368>)
   1147e:	4028      	ands	r0, r5
   11480:	4798      	blx	r3
   11482:	7af8      	ldrb	r0, [r7, #11]
   11484:	4b86      	ldr	r3, [pc, #536]	; (116a0 <LORAWAN_RxDone+0x36c>)
   11486:	0641      	lsls	r1, r0, #25
   11488:	0700      	lsls	r0, r0, #28
   1148a:	0f49      	lsrs	r1, r1, #29
   1148c:	0f00      	lsrs	r0, r0, #28
   1148e:	4798      	blx	r3
   11490:	2100      	movs	r1, #0
   11492:	203b      	movs	r0, #59	; 0x3b
   11494:	4b83      	ldr	r3, [pc, #524]	; (116a4 <LORAWAN_RxDone+0x370>)
   11496:	4798      	blx	r3
   11498:	2c21      	cmp	r4, #33	; 0x21
   1149a:	d000      	beq.n	1149e <LORAWAN_RxDone+0x16a>
   1149c:	e08c      	b.n	115b8 <LORAWAN_RxDone+0x284>
   1149e:	ab04      	add	r3, sp, #16
   114a0:	3c07      	subs	r4, #7
   114a2:	18e4      	adds	r4, r4, r3
   114a4:	0022      	movs	r2, r4
   114a6:	4b80      	ldr	r3, [pc, #512]	; (116a8 <LORAWAN_RxDone+0x374>)
   114a8:	4980      	ldr	r1, [pc, #512]	; (116ac <LORAWAN_RxDone+0x378>)
   114aa:	2007      	movs	r0, #7
   114ac:	4798      	blx	r3
   114ae:	7823      	ldrb	r3, [r4, #0]
   114b0:	2bff      	cmp	r3, #255	; 0xff
   114b2:	d100      	bne.n	114b6 <LORAWAN_RxDone+0x182>
   114b4:	e080      	b.n	115b8 <LORAWAN_RxDone+0x284>
   114b6:	2350      	movs	r3, #80	; 0x50
   114b8:	43ab      	bics	r3, r5
   114ba:	9308      	str	r3, [sp, #32]
   114bc:	003b      	movs	r3, r7
   114be:	330d      	adds	r3, #13
   114c0:	9307      	str	r3, [sp, #28]
   114c2:	2600      	movs	r6, #0
   114c4:	2203      	movs	r2, #3
   114c6:	9907      	ldr	r1, [sp, #28]
   114c8:	4b6e      	ldr	r3, [pc, #440]	; (11684 <LORAWAN_RxDone+0x350>)
   114ca:	a80e      	add	r0, sp, #56	; 0x38
   114cc:	960e      	str	r6, [sp, #56]	; 0x38
   114ce:	4798      	blx	r3
   114d0:	2364      	movs	r3, #100	; 0x64
   114d2:	990e      	ldr	r1, [sp, #56]	; 0x38
   114d4:	aa04      	add	r2, sp, #16
   114d6:	4359      	muls	r1, r3
   114d8:	3b4a      	subs	r3, #74	; 0x4a
   114da:	189b      	adds	r3, r3, r2
   114dc:	7818      	ldrb	r0, [r3, #0]
   114de:	9b06      	ldr	r3, [sp, #24]
   114e0:	910e      	str	r1, [sp, #56]	; 0x38
   114e2:	1818      	adds	r0, r3, r0
   114e4:	b2c0      	uxtb	r0, r0
   114e6:	76d0      	strb	r0, [r2, #27]
   114e8:	42b1      	cmp	r1, r6
   114ea:	d100      	bne.n	114ee <LORAWAN_RxDone+0x1ba>
   114ec:	e0a7      	b.n	1163e <LORAWAN_RxDone+0x30a>
   114ee:	466b      	mov	r3, sp
   114f0:	2220      	movs	r2, #32
   114f2:	189b      	adds	r3, r3, r2
   114f4:	781b      	ldrb	r3, [r3, #0]
   114f6:	ad10      	add	r5, sp, #64	; 0x40
   114f8:	ac0b      	add	r4, sp, #44	; 0x2c
   114fa:	7128      	strb	r0, [r5, #4]
   114fc:	9110      	str	r1, [sp, #64]	; 0x40
   114fe:	7020      	strb	r0, [r4, #0]
   11500:	7063      	strb	r3, [r4, #1]
   11502:	0029      	movs	r1, r5
   11504:	2002      	movs	r0, #2
   11506:	4b6a      	ldr	r3, [pc, #424]	; (116b0 <LORAWAN_RxDone+0x37c>)
   11508:	4798      	blx	r3
   1150a:	2808      	cmp	r0, #8
   1150c:	d140      	bne.n	11590 <LORAWAN_RxDone+0x25c>
   1150e:	0029      	movs	r1, r5
   11510:	0030      	movs	r0, r6
   11512:	4b64      	ldr	r3, [pc, #400]	; (116a4 <LORAWAN_RxDone+0x370>)
   11514:	4798      	blx	r3
   11516:	ad0c      	add	r5, sp, #48	; 0x30
   11518:	0021      	movs	r1, r4
   1151a:	4b62      	ldr	r3, [pc, #392]	; (116a4 <LORAWAN_RxDone+0x370>)
   1151c:	2012      	movs	r0, #18
   1151e:	4798      	blx	r3
   11520:	0031      	movs	r1, r6
   11522:	002a      	movs	r2, r5
   11524:	4e60      	ldr	r6, [pc, #384]	; (116a8 <LORAWAN_RxDone+0x374>)
   11526:	2014      	movs	r0, #20
   11528:	47b0      	blx	r6
   1152a:	4c52      	ldr	r4, [pc, #328]	; (11674 <LORAWAN_RxDone+0x340>)
   1152c:	782a      	ldrb	r2, [r5, #0]
   1152e:	0023      	movs	r3, r4
   11530:	33f3      	adds	r3, #243	; 0xf3
   11532:	701a      	strb	r2, [r3, #0]
   11534:	0023      	movs	r3, r4
   11536:	786a      	ldrb	r2, [r5, #1]
   11538:	2522      	movs	r5, #34	; 0x22
   1153a:	33f4      	adds	r3, #244	; 0xf4
   1153c:	701a      	strb	r2, [r3, #0]
   1153e:	4b5d      	ldr	r3, [pc, #372]	; (116b4 <LORAWAN_RxDone+0x380>)
   11540:	4798      	blx	r3
   11542:	ab04      	add	r3, sp, #16
   11544:	18ed      	adds	r5, r5, r3
   11546:	231b      	movs	r3, #27
   11548:	a904      	add	r1, sp, #16
   1154a:	185b      	adds	r3, r3, r1
   1154c:	0019      	movs	r1, r3
   1154e:	002a      	movs	r2, r5
   11550:	201e      	movs	r0, #30
   11552:	47b0      	blx	r6
   11554:	0023      	movs	r3, r4
   11556:	33ff      	adds	r3, #255	; 0xff
   11558:	7f5b      	ldrb	r3, [r3, #29]
   1155a:	079b      	lsls	r3, r3, #30
   1155c:	d508      	bpl.n	11570 <LORAWAN_RxDone+0x23c>
   1155e:	ab04      	add	r3, sp, #16
   11560:	7edb      	ldrb	r3, [r3, #27]
   11562:	a90f      	add	r1, sp, #60	; 0x3c
   11564:	708b      	strb	r3, [r1, #2]
   11566:	882b      	ldrh	r3, [r5, #0]
   11568:	201e      	movs	r0, #30
   1156a:	800b      	strh	r3, [r1, #0]
   1156c:	4b4d      	ldr	r3, [pc, #308]	; (116a4 <LORAWAN_RxDone+0x370>)
   1156e:	4798      	blx	r3
   11570:	231b      	movs	r3, #27
   11572:	aa04      	add	r2, sp, #16
   11574:	189b      	adds	r3, r3, r2
   11576:	7818      	ldrb	r0, [r3, #0]
   11578:	2101      	movs	r1, #1
   1157a:	4b4f      	ldr	r3, [pc, #316]	; (116b8 <LORAWAN_RxDone+0x384>)
   1157c:	4798      	blx	r3
   1157e:	2204      	movs	r2, #4
   11580:	3484      	adds	r4, #132	; 0x84
   11582:	7863      	ldrb	r3, [r4, #1]
   11584:	210b      	movs	r1, #11
   11586:	4313      	orrs	r3, r2
   11588:	7063      	strb	r3, [r4, #1]
   1158a:	2001      	movs	r0, #1
   1158c:	4b42      	ldr	r3, [pc, #264]	; (11698 <LORAWAN_RxDone+0x364>)
   1158e:	4798      	blx	r3
   11590:	9b06      	ldr	r3, [sp, #24]
   11592:	3301      	adds	r3, #1
   11594:	b2db      	uxtb	r3, r3
   11596:	9306      	str	r3, [sp, #24]
   11598:	9b07      	ldr	r3, [sp, #28]
   1159a:	3303      	adds	r3, #3
   1159c:	9307      	str	r3, [sp, #28]
   1159e:	9b06      	ldr	r3, [sp, #24]
   115a0:	2b05      	cmp	r3, #5
   115a2:	d18e      	bne.n	114c2 <LORAWAN_RxDone+0x18e>
   115a4:	2204      	movs	r2, #4
   115a6:	4b33      	ldr	r3, [pc, #204]	; (11674 <LORAWAN_RxDone+0x340>)
   115a8:	2001      	movs	r0, #1
   115aa:	3384      	adds	r3, #132	; 0x84
   115ac:	7859      	ldrb	r1, [r3, #1]
   115ae:	430a      	orrs	r2, r1
   115b0:	705a      	strb	r2, [r3, #1]
   115b2:	210b      	movs	r1, #11
   115b4:	4b38      	ldr	r3, [pc, #224]	; (11698 <LORAWAN_RxDone+0x364>)
   115b6:	4798      	blx	r3
   115b8:	4d40      	ldr	r5, [pc, #256]	; (116bc <LORAWAN_RxDone+0x388>)
   115ba:	1c7e      	adds	r6, r7, #1
   115bc:	3704      	adds	r7, #4
   115be:	0028      	movs	r0, r5
   115c0:	003a      	movs	r2, r7
   115c2:	0031      	movs	r1, r6
   115c4:	4b3e      	ldr	r3, [pc, #248]	; (116c0 <LORAWAN_RxDone+0x38c>)
   115c6:	4798      	blx	r3
   115c8:	2302      	movs	r3, #2
   115ca:	4c2a      	ldr	r4, [pc, #168]	; (11674 <LORAWAN_RxDone+0x340>)
   115cc:	0028      	movs	r0, r5
   115ce:	7563      	strb	r3, [r4, #21]
   115d0:	4a29      	ldr	r2, [pc, #164]	; (11678 <LORAWAN_RxDone+0x344>)
   115d2:	3b01      	subs	r3, #1
   115d4:	2100      	movs	r1, #0
   115d6:	4d3b      	ldr	r5, [pc, #236]	; (116c4 <LORAWAN_RxDone+0x390>)
   115d8:	47a8      	blx	r5
   115da:	2800      	cmp	r0, #0
   115dc:	d003      	beq.n	115e6 <LORAWAN_RxDone+0x2b2>
   115de:	4b2a      	ldr	r3, [pc, #168]	; (11688 <LORAWAN_RxDone+0x354>)
   115e0:	4798      	blx	r3
   115e2:	4b2a      	ldr	r3, [pc, #168]	; (1168c <LORAWAN_RxDone+0x358>)
   115e4:	4798      	blx	r3
   115e6:	2105      	movs	r1, #5
   115e8:	4b2b      	ldr	r3, [pc, #172]	; (11698 <LORAWAN_RxDone+0x364>)
   115ea:	2001      	movs	r0, #1
   115ec:	4798      	blx	r3
   115ee:	4d36      	ldr	r5, [pc, #216]	; (116c8 <LORAWAN_RxDone+0x394>)
   115f0:	003a      	movs	r2, r7
   115f2:	0028      	movs	r0, r5
   115f4:	0031      	movs	r1, r6
   115f6:	4b32      	ldr	r3, [pc, #200]	; (116c0 <LORAWAN_RxDone+0x38c>)
   115f8:	4798      	blx	r3
   115fa:	2301      	movs	r3, #1
   115fc:	0028      	movs	r0, r5
   115fe:	7163      	strb	r3, [r4, #5]
   11600:	4a1d      	ldr	r2, [pc, #116]	; (11678 <LORAWAN_RxDone+0x344>)
   11602:	18db      	adds	r3, r3, r3
   11604:	2100      	movs	r1, #0
   11606:	4d2f      	ldr	r5, [pc, #188]	; (116c4 <LORAWAN_RxDone+0x390>)
   11608:	47a8      	blx	r5
   1160a:	2800      	cmp	r0, #0
   1160c:	d003      	beq.n	11616 <LORAWAN_RxDone+0x2e2>
   1160e:	4b1e      	ldr	r3, [pc, #120]	; (11688 <LORAWAN_RxDone+0x354>)
   11610:	4798      	blx	r3
   11612:	4b1e      	ldr	r3, [pc, #120]	; (1168c <LORAWAN_RxDone+0x358>)
   11614:	4798      	blx	r3
   11616:	4b20      	ldr	r3, [pc, #128]	; (11698 <LORAWAN_RxDone+0x364>)
   11618:	2104      	movs	r1, #4
   1161a:	2001      	movs	r0, #1
   1161c:	4798      	blx	r3
   1161e:	4b2b      	ldr	r3, [pc, #172]	; (116cc <LORAWAN_RxDone+0x398>)
   11620:	5ce3      	ldrb	r3, [r4, r3]
   11622:	2b00      	cmp	r3, #0
   11624:	d017      	beq.n	11656 <LORAWAN_RxDone+0x322>
   11626:	492a      	ldr	r1, [pc, #168]	; (116d0 <LORAWAN_RxDone+0x39c>)
   11628:	2002      	movs	r0, #2
   1162a:	4c2a      	ldr	r4, [pc, #168]	; (116d4 <LORAWAN_RxDone+0x3a0>)
   1162c:	47a0      	blx	r4
   1162e:	2800      	cmp	r0, #0
   11630:	d008      	beq.n	11644 <LORAWAN_RxDone+0x310>
   11632:	4b15      	ldr	r3, [pc, #84]	; (11688 <LORAWAN_RxDone+0x354>)
   11634:	4798      	blx	r3
   11636:	4b15      	ldr	r3, [pc, #84]	; (1168c <LORAWAN_RxDone+0x358>)
   11638:	4798      	blx	r3
   1163a:	2023      	movs	r0, #35	; 0x23
   1163c:	e6dc      	b.n	113f8 <LORAWAN_RxDone+0xc4>
   1163e:	4b1e      	ldr	r3, [pc, #120]	; (116b8 <LORAWAN_RxDone+0x384>)
   11640:	4798      	blx	r3
   11642:	e7a5      	b.n	11590 <LORAWAN_RxDone+0x25c>
   11644:	4924      	ldr	r1, [pc, #144]	; (116d8 <LORAWAN_RxDone+0x3a4>)
   11646:	2001      	movs	r0, #1
   11648:	47a0      	blx	r4
   1164a:	2800      	cmp	r0, #0
   1164c:	d1f1      	bne.n	11632 <LORAWAN_RxDone+0x2fe>
   1164e:	4b23      	ldr	r3, [pc, #140]	; (116dc <LORAWAN_RxDone+0x3a8>)
   11650:	4798      	blx	r3
   11652:	2008      	movs	r0, #8
   11654:	e6d0      	b.n	113f8 <LORAWAN_RxDone+0xc4>
   11656:	0020      	movs	r0, r4
   11658:	0021      	movs	r1, r4
   1165a:	2210      	movs	r2, #16
   1165c:	3115      	adds	r1, #21
   1165e:	4d09      	ldr	r5, [pc, #36]	; (11684 <LORAWAN_RxDone+0x350>)
   11660:	3035      	adds	r0, #53	; 0x35
   11662:	47a8      	blx	r5
   11664:	0020      	movs	r0, r4
   11666:	1d61      	adds	r1, r4, #5
   11668:	2210      	movs	r2, #16
   1166a:	3025      	adds	r0, #37	; 0x25
   1166c:	47a8      	blx	r5
   1166e:	e7ee      	b.n	1164e <LORAWAN_RxDone+0x31a>
   11670:	20002c58 	.word	0x20002c58
   11674:	20002bd4 	.word	0x20002bd4
   11678:	20002c19 	.word	0x20002c19
   1167c:	20000f50 	.word	0x20000f50
   11680:	0000c429 	.word	0x0000c429
   11684:	00018655 	.word	0x00018655
   11688:	0000f139 	.word	0x0000f139
   1168c:	00010dc9 	.word	0x00010dc9
   11690:	0000c3f1 	.word	0x0000c3f1
   11694:	0000d895 	.word	0x0000d895
   11698:	0000c84d 	.word	0x0000c84d
   1169c:	0000e605 	.word	0x0000e605
   116a0:	0000efdd 	.word	0x0000efdd
   116a4:	0000c105 	.word	0x0000c105
   116a8:	0000bfdd 	.word	0x0000bfdd
   116ac:	20002cbb 	.word	0x20002cbb
   116b0:	0000bff9 	.word	0x0000bff9
   116b4:	00010e95 	.word	0x00010e95
   116b8:	000112e5 	.word	0x000112e5
   116bc:	20002be9 	.word	0x20002be9
   116c0:	0000e931 	.word	0x0000e931
   116c4:	0000c419 	.word	0x0000c419
   116c8:	20002bd9 	.word	0x20002bd9
   116cc:	0000022d 	.word	0x0000022d
   116d0:	20002bf9 	.word	0x20002bf9
   116d4:	0000c425 	.word	0x0000c425
   116d8:	20002c09 	.word	0x20002c09
   116dc:	0000e84d 	.word	0x0000e84d
   116e0:	3a60      	subs	r2, #96	; 0x60
   116e2:	0010      	movs	r0, r2
   116e4:	22bf      	movs	r2, #191	; 0xbf
   116e6:	4010      	ands	r0, r2
   116e8:	9006      	str	r0, [sp, #24]
   116ea:	d000      	beq.n	116ee <LORAWAN_RxDone+0x3ba>
   116ec:	e2b4      	b.n	11c58 <LORAWAN_RxDone+0x924>
   116ee:	2501      	movs	r5, #1
   116f0:	422b      	tst	r3, r5
   116f2:	d100      	bne.n	116f6 <LORAWAN_RxDone+0x3c2>
   116f4:	e2b0      	b.n	11c58 <LORAWAN_RxDone+0x924>
   116f6:	7932      	ldrb	r2, [r6, #4]
   116f8:	6833      	ldr	r3, [r6, #0]
   116fa:	0612      	lsls	r2, r2, #24
   116fc:	0a1b      	lsrs	r3, r3, #8
   116fe:	431a      	orrs	r2, r3
   11700:	9208      	str	r2, [sp, #32]
   11702:	466a      	mov	r2, sp
   11704:	0033      	movs	r3, r6
   11706:	7e12      	ldrb	r2, [r2, #24]
   11708:	33e0      	adds	r3, #224	; 0xe0
   1170a:	701a      	strb	r2, [r3, #0]
   1170c:	78ba      	ldrb	r2, [r7, #2]
   1170e:	787b      	ldrb	r3, [r7, #1]
   11710:	0212      	lsls	r2, r2, #8
   11712:	431a      	orrs	r2, r3
   11714:	78fb      	ldrb	r3, [r7, #3]
   11716:	041b      	lsls	r3, r3, #16
   11718:	431a      	orrs	r2, r3
   1171a:	793b      	ldrb	r3, [r7, #4]
   1171c:	061b      	lsls	r3, r3, #24
   1171e:	4313      	orrs	r3, r2
   11720:	9a08      	ldr	r2, [sp, #32]
   11722:	429a      	cmp	r2, r3
   11724:	d100      	bne.n	11728 <LORAWAN_RxDone+0x3f4>
   11726:	e2c8      	b.n	11cba <LORAWAN_RxDone+0x986>
   11728:	ab04      	add	r3, sp, #16
   1172a:	3521      	adds	r5, #33	; 0x21
   1172c:	18ed      	adds	r5, r5, r3
   1172e:	9506      	str	r5, [sp, #24]
   11730:	002b      	movs	r3, r5
   11732:	7a3a      	ldrb	r2, [r7, #8]
   11734:	0949      	lsrs	r1, r1, #5
   11736:	0038      	movs	r0, r7
   11738:	4ddb      	ldr	r5, [pc, #876]	; (11aa8 <LORAWAN_RxDone+0x774>)
   1173a:	47a8      	blx	r5
   1173c:	2808      	cmp	r0, #8
   1173e:	d133      	bne.n	117a8 <LORAWAN_RxDone+0x474>
   11740:	9b06      	ldr	r3, [sp, #24]
   11742:	7819      	ldrb	r1, [r3, #0]
   11744:	233c      	movs	r3, #60	; 0x3c
   11746:	434b      	muls	r3, r1
   11748:	001d      	movs	r5, r3
   1174a:	3535      	adds	r5, #53	; 0x35
   1174c:	35ff      	adds	r5, #255	; 0xff
   1174e:	19ad      	adds	r5, r5, r6
   11750:	18f6      	adds	r6, r6, r3
   11752:	0033      	movs	r3, r6
   11754:	33fc      	adds	r3, #252	; 0xfc
   11756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   11758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1175a:	9206      	str	r2, [sp, #24]
   1175c:	9307      	str	r3, [sp, #28]
   1175e:	79fb      	ldrb	r3, [r7, #7]
   11760:	79ba      	ldrb	r2, [r7, #6]
   11762:	021b      	lsls	r3, r3, #8
   11764:	4313      	orrs	r3, r2
   11766:	0032      	movs	r2, r6
   11768:	3255      	adds	r2, #85	; 0x55
   1176a:	32ff      	adds	r2, #255	; 0xff
   1176c:	8810      	ldrh	r0, [r2, #0]
   1176e:	4298      	cmp	r0, r3
   11770:	d908      	bls.n	11784 <LORAWAN_RxDone+0x450>
   11772:	3657      	adds	r6, #87	; 0x57
   11774:	36ff      	adds	r6, #255	; 0xff
   11776:	8833      	ldrh	r3, [r6, #0]
   11778:	3301      	adds	r3, #1
   1177a:	8033      	strh	r3, [r6, #0]
   1177c:	79fb      	ldrb	r3, [r7, #7]
   1177e:	79be      	ldrb	r6, [r7, #6]
   11780:	021b      	lsls	r3, r3, #8
   11782:	4333      	orrs	r3, r6
   11784:	8013      	strh	r3, [r2, #0]
   11786:	233c      	movs	r3, #60	; 0x3c
   11788:	434b      	muls	r3, r1
   1178a:	49c8      	ldr	r1, [pc, #800]	; (11aac <LORAWAN_RxDone+0x778>)
   1178c:	1f22      	subs	r2, r4, #4
   1178e:	18c9      	adds	r1, r1, r3
   11790:	9b06      	ldr	r3, [sp, #24]
   11792:	31fc      	adds	r1, #252	; 0xfc
   11794:	9300      	str	r3, [sp, #0]
   11796:	b2d2      	uxtb	r2, r2
   11798:	2349      	movs	r3, #73	; 0x49
   1179a:	6d89      	ldr	r1, [r1, #88]	; 0x58
   1179c:	2001      	movs	r0, #1
   1179e:	4ec4      	ldr	r6, [pc, #784]	; (11ab0 <LORAWAN_RxDone+0x77c>)
   117a0:	47b0      	blx	r6
   117a2:	2301      	movs	r3, #1
   117a4:	9306      	str	r3, [sp, #24]
   117a6:	e29d      	b.n	11ce4 <LORAWAN_RxDone+0x9b0>
   117a8:	220e      	movs	r2, #14
   117aa:	4bc2      	ldr	r3, [pc, #776]	; (11ab4 <LORAWAN_RxDone+0x780>)
   117ac:	781b      	ldrb	r3, [r3, #0]
   117ae:	4013      	ands	r3, r2
   117b0:	2b0a      	cmp	r3, #10
   117b2:	d008      	beq.n	117c6 <LORAWAN_RxDone+0x492>
   117b4:	2b06      	cmp	r3, #6
   117b6:	d001      	beq.n	117bc <LORAWAN_RxDone+0x488>
   117b8:	200a      	movs	r0, #10
   117ba:	e61d      	b.n	113f8 <LORAWAN_RxDone+0xc4>
   117bc:	0033      	movs	r3, r6
   117be:	33f9      	adds	r3, #249	; 0xf9
   117c0:	781b      	ldrb	r3, [r3, #0]
   117c2:	2b00      	cmp	r3, #0
   117c4:	d0f8      	beq.n	117b8 <LORAWAN_RxDone+0x484>
   117c6:	2220      	movs	r2, #32
   117c8:	201e      	movs	r0, #30
   117ca:	3694      	adds	r6, #148	; 0x94
   117cc:	7833      	ldrb	r3, [r6, #0]
   117ce:	4393      	bics	r3, r2
   117d0:	7033      	strb	r3, [r6, #0]
   117d2:	4bb9      	ldr	r3, [pc, #740]	; (11ab8 <LORAWAN_RxDone+0x784>)
   117d4:	e5fe      	b.n	113d4 <LORAWAN_RxDone+0xa0>
   117d6:	0032      	movs	r2, r6
   117d8:	2102      	movs	r1, #2
   117da:	e29b      	b.n	11d14 <LORAWAN_RxDone+0x9e0>
   117dc:	9b07      	ldr	r3, [sp, #28]
   117de:	328c      	adds	r2, #140	; 0x8c
   117e0:	6013      	str	r3, [r2, #0]
   117e2:	e2d8      	b.n	11d96 <LORAWAN_RxDone+0xa62>
   117e4:	9b06      	ldr	r3, [sp, #24]
   117e6:	4db1      	ldr	r5, [pc, #708]	; (11aac <LORAWAN_RxDone+0x778>)
   117e8:	2b00      	cmp	r3, #0
   117ea:	d000      	beq.n	117ee <LORAWAN_RxDone+0x4ba>
   117ec:	e21c      	b.n	11c28 <LORAWAN_RxDone+0x8f4>
   117ee:	466a      	mov	r2, sp
   117f0:	002b      	movs	r3, r5
   117f2:	7e12      	ldrb	r2, [r2, #24]
   117f4:	33e3      	adds	r3, #227	; 0xe3
   117f6:	701a      	strb	r2, [r3, #0]
   117f8:	797b      	ldrb	r3, [r7, #5]
   117fa:	2b7f      	cmp	r3, #127	; 0x7f
   117fc:	d909      	bls.n	11812 <LORAWAN_RxDone+0x4de>
   117fe:	002a      	movs	r2, r5
   11800:	2320      	movs	r3, #32
   11802:	3284      	adds	r2, #132	; 0x84
   11804:	7811      	ldrb	r1, [r2, #0]
   11806:	2001      	movs	r0, #1
   11808:	430b      	orrs	r3, r1
   1180a:	7013      	strb	r3, [r2, #0]
   1180c:	210b      	movs	r1, #11
   1180e:	4bab      	ldr	r3, [pc, #684]	; (11abc <LORAWAN_RxDone+0x788>)
   11810:	4798      	blx	r3
   11812:	797b      	ldrb	r3, [r7, #5]
   11814:	06db      	lsls	r3, r3, #27
   11816:	d505      	bpl.n	11824 <LORAWAN_RxDone+0x4f0>
   11818:	002a      	movs	r2, r5
   1181a:	2308      	movs	r3, #8
   1181c:	3294      	adds	r2, #148	; 0x94
   1181e:	7811      	ldrb	r1, [r2, #0]
   11820:	430b      	orrs	r3, r1
   11822:	7013      	strb	r3, [r2, #0]
   11824:	797b      	ldrb	r3, [r7, #5]
   11826:	065b      	lsls	r3, r3, #25
   11828:	d505      	bpl.n	11836 <LORAWAN_RxDone+0x502>
   1182a:	002a      	movs	r2, r5
   1182c:	2310      	movs	r3, #16
   1182e:	3294      	adds	r2, #148	; 0x94
   11830:	7811      	ldrb	r1, [r2, #0]
   11832:	430b      	orrs	r3, r1
   11834:	7013      	strb	r3, [r2, #0]
   11836:	221f      	movs	r2, #31
   11838:	783b      	ldrb	r3, [r7, #0]
   1183a:	4393      	bics	r3, r2
   1183c:	2ba0      	cmp	r3, #160	; 0xa0
   1183e:	d105      	bne.n	1184c <LORAWAN_RxDone+0x518>
   11840:	002a      	movs	r2, r5
   11842:	3294      	adds	r2, #148	; 0x94
   11844:	7811      	ldrb	r1, [r2, #0]
   11846:	3b9e      	subs	r3, #158	; 0x9e
   11848:	430b      	orrs	r3, r1
   1184a:	7013      	strb	r3, [r2, #0]
   1184c:	7979      	ldrb	r1, [r7, #5]
   1184e:	070b      	lsls	r3, r1, #28
   11850:	d100      	bne.n	11854 <LORAWAN_RxDone+0x520>
   11852:	e0d0      	b.n	119f6 <LORAWAN_RxDone+0x6c2>
   11854:	0709      	lsls	r1, r1, #28
   11856:	0f09      	lsrs	r1, r1, #28
   11858:	187b      	adds	r3, r7, r1
   1185a:	7a1b      	ldrb	r3, [r3, #8]
   1185c:	2b00      	cmp	r3, #0
   1185e:	d100      	bne.n	11862 <LORAWAN_RxDone+0x52e>
   11860:	e0a5      	b.n	119ae <LORAWAN_RxDone+0x67a>
   11862:	0038      	movs	r0, r7
   11864:	4b96      	ldr	r3, [pc, #600]	; (11ac0 <LORAWAN_RxDone+0x78c>)
   11866:	3008      	adds	r0, #8
   11868:	4798      	blx	r3
   1186a:	2301      	movs	r3, #1
   1186c:	0006      	movs	r6, r0
   1186e:	9306      	str	r3, [sp, #24]
   11870:	7978      	ldrb	r0, [r7, #5]
   11872:	0703      	lsls	r3, r0, #28
   11874:	0f1b      	lsrs	r3, r3, #28
   11876:	001a      	movs	r2, r3
   11878:	320c      	adds	r2, #12
   1187a:	4294      	cmp	r4, r2
   1187c:	d100      	bne.n	11880 <LORAWAN_RxDone+0x54c>
   1187e:	e0eb      	b.n	11a58 <LORAWAN_RxDone+0x724>
   11880:	1c72      	adds	r2, r6, #1
   11882:	1ae4      	subs	r4, r4, r3
   11884:	9209      	str	r2, [sp, #36]	; 0x24
   11886:	7832      	ldrb	r2, [r6, #0]
   11888:	b2e4      	uxtb	r4, r4
   1188a:	9208      	str	r2, [sp, #32]
   1188c:	0022      	movs	r2, r4
   1188e:	9908      	ldr	r1, [sp, #32]
   11890:	3a0c      	subs	r2, #12
   11892:	b2d2      	uxtb	r2, r2
   11894:	9207      	str	r2, [sp, #28]
   11896:	3319      	adds	r3, #25
   11898:	4a84      	ldr	r2, [pc, #528]	; (11aac <LORAWAN_RxDone+0x778>)
   1189a:	2900      	cmp	r1, #0
   1189c:	d100      	bne.n	118a0 <LORAWAN_RxDone+0x56c>
   1189e:	e0ad      	b.n	119fc <LORAWAN_RxDone+0x6c8>
   118a0:	3c0d      	subs	r4, #13
   118a2:	0010      	movs	r0, r2
   118a4:	b2e1      	uxtb	r1, r4
   118a6:	6814      	ldr	r4, [r2, #0]
   118a8:	7912      	ldrb	r2, [r2, #4]
   118aa:	0a24      	lsrs	r4, r4, #8
   118ac:	0612      	lsls	r2, r2, #24
   118ae:	4322      	orrs	r2, r4
   118b0:	9204      	str	r2, [sp, #16]
   118b2:	4a84      	ldr	r2, [pc, #528]	; (11ac4 <LORAWAN_RxDone+0x790>)
   118b4:	b29b      	uxth	r3, r3
   118b6:	9203      	str	r2, [sp, #12]
   118b8:	2201      	movs	r2, #1
   118ba:	9302      	str	r3, [sp, #8]
   118bc:	4b82      	ldr	r3, [pc, #520]	; (11ac8 <LORAWAN_RxDone+0x794>)
   118be:	308c      	adds	r0, #140	; 0x8c
   118c0:	9201      	str	r2, [sp, #4]
   118c2:	9300      	str	r3, [sp, #0]
   118c4:	6803      	ldr	r3, [r0, #0]
   118c6:	4c81      	ldr	r4, [pc, #516]	; (11acc <LORAWAN_RxDone+0x798>)
   118c8:	18b0      	adds	r0, r6, r2
   118ca:	47a0      	blx	r4
   118cc:	2800      	cmp	r0, #0
   118ce:	d004      	beq.n	118da <LORAWAN_RxDone+0x5a6>
   118d0:	4b7f      	ldr	r3, [pc, #508]	; (11ad0 <LORAWAN_RxDone+0x79c>)
   118d2:	4798      	blx	r3
   118d4:	201f      	movs	r0, #31
   118d6:	4b78      	ldr	r3, [pc, #480]	; (11ab8 <LORAWAN_RxDone+0x784>)
   118d8:	4798      	blx	r3
   118da:	4c74      	ldr	r4, [pc, #464]	; (11aac <LORAWAN_RxDone+0x778>)
   118dc:	2300      	movs	r3, #0
   118de:	0022      	movs	r2, r4
   118e0:	32ca      	adds	r2, #202	; 0xca
   118e2:	8013      	strh	r3, [r2, #0]
   118e4:	0022      	movs	r2, r4
   118e6:	32f6      	adds	r2, #246	; 0xf6
   118e8:	7013      	strb	r3, [r2, #0]
   118ea:	0022      	movs	r2, r4
   118ec:	2110      	movs	r1, #16
   118ee:	3294      	adds	r2, #148	; 0x94
   118f0:	7813      	ldrb	r3, [r2, #0]
   118f2:	438b      	bics	r3, r1
   118f4:	7013      	strb	r3, [r2, #0]
   118f6:	0023      	movs	r3, r4
   118f8:	2201      	movs	r2, #1
   118fa:	3384      	adds	r3, #132	; 0x84
   118fc:	7859      	ldrb	r1, [r3, #1]
   118fe:	430a      	orrs	r2, r1
   11900:	705a      	strb	r2, [r3, #1]
   11902:	220e      	movs	r2, #14
   11904:	781b      	ldrb	r3, [r3, #0]
   11906:	4013      	ands	r3, r2
   11908:	2b06      	cmp	r3, #6
   1190a:	d104      	bne.n	11916 <LORAWAN_RxDone+0x5e2>
   1190c:	0023      	movs	r3, r4
   1190e:	33ee      	adds	r3, #238	; 0xee
   11910:	7818      	ldrb	r0, [r3, #0]
   11912:	4b70      	ldr	r3, [pc, #448]	; (11ad4 <LORAWAN_RxDone+0x7a0>)
   11914:	4798      	blx	r3
   11916:	0025      	movs	r5, r4
   11918:	2201      	movs	r2, #1
   1191a:	3594      	adds	r5, #148	; 0x94
   1191c:	782b      	ldrb	r3, [r5, #0]
   1191e:	4213      	tst	r3, r2
   11920:	d100      	bne.n	11924 <LORAWAN_RxDone+0x5f0>
   11922:	e103      	b.n	11b2c <LORAWAN_RxDone+0x7f8>
   11924:	797b      	ldrb	r3, [r7, #5]
   11926:	321f      	adds	r2, #31
   11928:	4213      	tst	r3, r2
   1192a:	d100      	bne.n	1192e <LORAWAN_RxDone+0x5fa>
   1192c:	e0e4      	b.n	11af8 <LORAWAN_RxDone+0x7c4>
   1192e:	4b6a      	ldr	r3, [pc, #424]	; (11ad8 <LORAWAN_RxDone+0x7a4>)
   11930:	4798      	blx	r3
   11932:	0023      	movs	r3, r4
   11934:	2101      	movs	r1, #1
   11936:	3384      	adds	r3, #132	; 0x84
   11938:	785a      	ldrb	r2, [r3, #1]
   1193a:	438a      	bics	r2, r1
   1193c:	705a      	strb	r2, [r3, #1]
   1193e:	9a08      	ldr	r2, [sp, #32]
   11940:	2a00      	cmp	r2, #0
   11942:	d100      	bne.n	11946 <LORAWAN_RxDone+0x612>
   11944:	e090      	b.n	11a68 <LORAWAN_RxDone+0x734>
   11946:	9a07      	ldr	r2, [sp, #28]
   11948:	0031      	movs	r1, r6
   1194a:	0038      	movs	r0, r7
   1194c:	4b63      	ldr	r3, [pc, #396]	; (11adc <LORAWAN_RxDone+0x7a8>)
   1194e:	4798      	blx	r3
   11950:	4b58      	ldr	r3, [pc, #352]	; (11ab4 <LORAWAN_RxDone+0x780>)
   11952:	4d56      	ldr	r5, [pc, #344]	; (11aac <LORAWAN_RxDone+0x778>)
   11954:	781b      	ldrb	r3, [r3, #0]
   11956:	06db      	lsls	r3, r3, #27
   11958:	d400      	bmi.n	1195c <LORAWAN_RxDone+0x628>
   1195a:	e15c      	b.n	11c16 <LORAWAN_RxDone+0x8e2>
   1195c:	2220      	movs	r2, #32
   1195e:	4b60      	ldr	r3, [pc, #384]	; (11ae0 <LORAWAN_RxDone+0x7ac>)
   11960:	781b      	ldrb	r3, [r3, #0]
   11962:	401a      	ands	r2, r3
   11964:	9206      	str	r2, [sp, #24]
   11966:	d000      	beq.n	1196a <LORAWAN_RxDone+0x636>
   11968:	e155      	b.n	11c16 <LORAWAN_RxDone+0x8e2>
   1196a:	320a      	adds	r2, #10
   1196c:	4213      	tst	r3, r2
   1196e:	d100      	bne.n	11972 <LORAWAN_RxDone+0x63e>
   11970:	e151      	b.n	11c16 <LORAWAN_RxDone+0x8e2>
   11972:	002b      	movs	r3, r5
   11974:	33f5      	adds	r3, #245	; 0xf5
   11976:	781b      	ldrb	r3, [r3, #0]
   11978:	a90f      	add	r1, sp, #60	; 0x3c
   1197a:	704b      	strb	r3, [r1, #1]
   1197c:	002e      	movs	r6, r5
   1197e:	2301      	movs	r3, #1
   11980:	36e7      	adds	r6, #231	; 0xe7
   11982:	700b      	strb	r3, [r1, #0]
   11984:	7833      	ldrb	r3, [r6, #0]
   11986:	aa0e      	add	r2, sp, #56	; 0x38
   11988:	202f      	movs	r0, #47	; 0x2f
   1198a:	4f56      	ldr	r7, [pc, #344]	; (11ae4 <LORAWAN_RxDone+0x7b0>)
   1198c:	708b      	strb	r3, [r1, #2]
   1198e:	47b8      	blx	r7
   11990:	9007      	str	r0, [sp, #28]
   11992:	2808      	cmp	r0, #8
   11994:	d000      	beq.n	11998 <LORAWAN_RxDone+0x664>
   11996:	e0f7      	b.n	11b88 <LORAWAN_RxDone+0x854>
   11998:	4b53      	ldr	r3, [pc, #332]	; (11ae8 <LORAWAN_RxDone+0x7b4>)
   1199a:	9806      	ldr	r0, [sp, #24]
   1199c:	4798      	blx	r3
   1199e:	4b50      	ldr	r3, [pc, #320]	; (11ae0 <LORAWAN_RxDone+0x7ac>)
   119a0:	9a07      	ldr	r2, [sp, #28]
   119a2:	781b      	ldrb	r3, [r3, #0]
   119a4:	4393      	bics	r3, r2
   119a6:	4a4e      	ldr	r2, [pc, #312]	; (11ae0 <LORAWAN_RxDone+0x7ac>)
   119a8:	7013      	strb	r3, [r2, #0]
   119aa:	2001      	movs	r0, #1
   119ac:	e524      	b.n	113f8 <LORAWAN_RxDone+0xc4>
   119ae:	002b      	movs	r3, r5
   119b0:	220e      	movs	r2, #14
   119b2:	3384      	adds	r3, #132	; 0x84
   119b4:	781b      	ldrb	r3, [r3, #0]
   119b6:	4013      	ands	r3, r2
   119b8:	2b06      	cmp	r3, #6
   119ba:	d101      	bne.n	119c0 <LORAWAN_RxDone+0x68c>
   119bc:	4b4b      	ldr	r3, [pc, #300]	; (11aec <LORAWAN_RxDone+0x7b8>)
   119be:	4798      	blx	r3
   119c0:	494b      	ldr	r1, [pc, #300]	; (11af0 <LORAWAN_RxDone+0x7bc>)
   119c2:	784a      	ldrb	r2, [r1, #1]
   119c4:	780b      	ldrb	r3, [r1, #0]
   119c6:	0212      	lsls	r2, r2, #8
   119c8:	431a      	orrs	r2, r3
   119ca:	788b      	ldrb	r3, [r1, #2]
   119cc:	041b      	lsls	r3, r3, #16
   119ce:	431a      	orrs	r2, r3
   119d0:	78cb      	ldrb	r3, [r1, #3]
   119d2:	061b      	lsls	r3, r3, #24
   119d4:	4313      	orrs	r3, r2
   119d6:	d008      	beq.n	119ea <LORAWAN_RxDone+0x6b6>
   119d8:	002a      	movs	r2, r5
   119da:	2120      	movs	r1, #32
   119dc:	3294      	adds	r2, #148	; 0x94
   119de:	7813      	ldrb	r3, [r2, #0]
   119e0:	201e      	movs	r0, #30
   119e2:	438b      	bics	r3, r1
   119e4:	7013      	strb	r3, [r2, #0]
   119e6:	4b34      	ldr	r3, [pc, #208]	; (11ab8 <LORAWAN_RxDone+0x784>)
   119e8:	4798      	blx	r3
   119ea:	2300      	movs	r3, #0
   119ec:	35e0      	adds	r5, #224	; 0xe0
   119ee:	702b      	strb	r3, [r5, #0]
   119f0:	4b37      	ldr	r3, [pc, #220]	; (11ad0 <LORAWAN_RxDone+0x79c>)
   119f2:	4798      	blx	r3
   119f4:	e7d9      	b.n	119aa <LORAWAN_RxDone+0x676>
   119f6:	003e      	movs	r6, r7
   119f8:	3608      	adds	r6, #8
   119fa:	e739      	b.n	11870 <LORAWAN_RxDone+0x53c>
   119fc:	9907      	ldr	r1, [sp, #28]
   119fe:	2900      	cmp	r1, #0
   11a00:	d02e      	beq.n	11a60 <LORAWAN_RxDone+0x72c>
   11a02:	0701      	lsls	r1, r0, #28
   11a04:	d1d3      	bne.n	119ae <LORAWAN_RxDone+0x67a>
   11a06:	b29b      	uxth	r3, r3
   11a08:	6810      	ldr	r0, [r2, #0]
   11a0a:	0011      	movs	r1, r2
   11a0c:	7912      	ldrb	r2, [r2, #4]
   11a0e:	9302      	str	r3, [sp, #8]
   11a10:	2302      	movs	r3, #2
   11a12:	0a00      	lsrs	r0, r0, #8
   11a14:	0612      	lsls	r2, r2, #24
   11a16:	4302      	orrs	r2, r0
   11a18:	9204      	str	r2, [sp, #16]
   11a1a:	9301      	str	r3, [sp, #4]
   11a1c:	4a29      	ldr	r2, [pc, #164]	; (11ac4 <LORAWAN_RxDone+0x790>)
   11a1e:	4b35      	ldr	r3, [pc, #212]	; (11af4 <LORAWAN_RxDone+0x7c0>)
   11a20:	3c0d      	subs	r4, #13
   11a22:	318c      	adds	r1, #140	; 0x8c
   11a24:	9203      	str	r2, [sp, #12]
   11a26:	b2e4      	uxtb	r4, r4
   11a28:	9300      	str	r3, [sp, #0]
   11a2a:	680b      	ldr	r3, [r1, #0]
   11a2c:	2201      	movs	r2, #1
   11a2e:	0021      	movs	r1, r4
   11a30:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a32:	4d26      	ldr	r5, [pc, #152]	; (11acc <LORAWAN_RxDone+0x798>)
   11a34:	47a8      	blx	r5
   11a36:	2800      	cmp	r0, #0
   11a38:	d004      	beq.n	11a44 <LORAWAN_RxDone+0x710>
   11a3a:	4b25      	ldr	r3, [pc, #148]	; (11ad0 <LORAWAN_RxDone+0x79c>)
   11a3c:	4798      	blx	r3
   11a3e:	201f      	movs	r0, #31
   11a40:	4b1d      	ldr	r3, [pc, #116]	; (11ab8 <LORAWAN_RxDone+0x784>)
   11a42:	4798      	blx	r3
   11a44:	4b1e      	ldr	r3, [pc, #120]	; (11ac0 <LORAWAN_RxDone+0x78c>)
   11a46:	0021      	movs	r1, r4
   11a48:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a4a:	4798      	blx	r3
   11a4c:	2300      	movs	r3, #0
   11a4e:	9307      	str	r3, [sp, #28]
   11a50:	3301      	adds	r3, #1
   11a52:	9306      	str	r3, [sp, #24]
   11a54:	2600      	movs	r6, #0
   11a56:	e740      	b.n	118da <LORAWAN_RxDone+0x5a6>
   11a58:	2600      	movs	r6, #0
   11a5a:	9608      	str	r6, [sp, #32]
   11a5c:	9607      	str	r6, [sp, #28]
   11a5e:	e73c      	b.n	118da <LORAWAN_RxDone+0x5a6>
   11a60:	9b07      	ldr	r3, [sp, #28]
   11a62:	9308      	str	r3, [sp, #32]
   11a64:	001e      	movs	r6, r3
   11a66:	e738      	b.n	118da <LORAWAN_RxDone+0x5a6>
   11a68:	2120      	movs	r1, #32
   11a6a:	782a      	ldrb	r2, [r5, #0]
   11a6c:	438a      	bics	r2, r1
   11a6e:	702a      	strb	r2, [r5, #0]
   11a70:	0022      	movs	r2, r4
   11a72:	32fd      	adds	r2, #253	; 0xfd
   11a74:	7812      	ldrb	r2, [r2, #0]
   11a76:	2a01      	cmp	r2, #1
   11a78:	d10e      	bne.n	11a98 <LORAWAN_RxDone+0x764>
   11a7a:	781a      	ldrb	r2, [r3, #0]
   11a7c:	3912      	subs	r1, #18
   11a7e:	438a      	bics	r2, r1
   11a80:	701a      	strb	r2, [r3, #0]
   11a82:	2388      	movs	r3, #136	; 0x88
   11a84:	4a09      	ldr	r2, [pc, #36]	; (11aac <LORAWAN_RxDone+0x778>)
   11a86:	009b      	lsls	r3, r3, #2
   11a88:	5cd3      	ldrb	r3, [r2, r3]
   11a8a:	2b00      	cmp	r3, #0
   11a8c:	d000      	beq.n	11a90 <LORAWAN_RxDone+0x75c>
   11a8e:	e75f      	b.n	11950 <LORAWAN_RxDone+0x61c>
   11a90:	2008      	movs	r0, #8
   11a92:	4b09      	ldr	r3, [pc, #36]	; (11ab8 <LORAWAN_RxDone+0x784>)
   11a94:	4798      	blx	r3
   11a96:	e75b      	b.n	11950 <LORAWAN_RxDone+0x61c>
   11a98:	2a04      	cmp	r2, #4
   11a9a:	d1f2      	bne.n	11a82 <LORAWAN_RxDone+0x74e>
   11a9c:	0023      	movs	r3, r4
   11a9e:	33f1      	adds	r3, #241	; 0xf1
   11aa0:	7818      	ldrb	r0, [r3, #0]
   11aa2:	4b0c      	ldr	r3, [pc, #48]	; (11ad4 <LORAWAN_RxDone+0x7a0>)
   11aa4:	4798      	blx	r3
   11aa6:	e7ec      	b.n	11a82 <LORAWAN_RxDone+0x74e>
   11aa8:	00012e25 	.word	0x00012e25
   11aac:	20002bd4 	.word	0x20002bd4
   11ab0:	0000e96d 	.word	0x0000e96d
   11ab4:	20002c58 	.word	0x20002c58
   11ab8:	0000fc85 	.word	0x0000fc85
   11abc:	0000c84d 	.word	0x0000c84d
   11ac0:	00011051 	.word	0x00011051
   11ac4:	20002f38 	.word	0x20002f38
   11ac8:	20002c09 	.word	0x20002c09
   11acc:	0000fbc5 	.word	0x0000fbc5
   11ad0:	00010dc9 	.word	0x00010dc9
   11ad4:	0000d895 	.word	0x0000d895
   11ad8:	0000f0e5 	.word	0x0000f0e5
   11adc:	0000fd35 	.word	0x0000fd35
   11ae0:	20002c68 	.word	0x20002c68
   11ae4:	0000bfdd 	.word	0x0000bfdd
   11ae8:	0000ecad 	.word	0x0000ecad
   11aec:	0000ea05 	.word	0x0000ea05
   11af0:	20002f30 	.word	0x20002f30
   11af4:	20002bf9 	.word	0x20002bf9
   11af8:	9b06      	ldr	r3, [sp, #24]
   11afa:	2b00      	cmp	r3, #0
   11afc:	d013      	beq.n	11b26 <LORAWAN_RxDone+0x7f2>
   11afe:	0023      	movs	r3, r4
   11b00:	33fd      	adds	r3, #253	; 0xfd
   11b02:	781e      	ldrb	r6, [r3, #0]
   11b04:	2e01      	cmp	r6, #1
   11b06:	d10e      	bne.n	11b26 <LORAWAN_RxDone+0x7f2>
   11b08:	4ba4      	ldr	r3, [pc, #656]	; (11d9c <LORAWAN_RxDone+0xa68>)
   11b0a:	4798      	blx	r3
   11b0c:	0022      	movs	r2, r4
   11b0e:	3284      	adds	r2, #132	; 0x84
   11b10:	7853      	ldrb	r3, [r2, #1]
   11b12:	43b3      	bics	r3, r6
   11b14:	7053      	strb	r3, [r2, #1]
   11b16:	2220      	movs	r2, #32
   11b18:	782b      	ldrb	r3, [r5, #0]
   11b1a:	4393      	bics	r3, r2
   11b1c:	702b      	strb	r3, [r5, #0]
   11b1e:	2388      	movs	r3, #136	; 0x88
   11b20:	009b      	lsls	r3, r3, #2
   11b22:	5ce3      	ldrb	r3, [r4, r3]
   11b24:	e7b1      	b.n	11a8a <LORAWAN_RxDone+0x756>
   11b26:	4b9e      	ldr	r3, [pc, #632]	; (11da0 <LORAWAN_RxDone+0xa6c>)
   11b28:	4798      	blx	r3
   11b2a:	e711      	b.n	11950 <LORAWAN_RxDone+0x61c>
   11b2c:	9a08      	ldr	r2, [sp, #32]
   11b2e:	2a00      	cmp	r2, #0
   11b30:	d00b      	beq.n	11b4a <LORAWAN_RxDone+0x816>
   11b32:	9a07      	ldr	r2, [sp, #28]
   11b34:	0031      	movs	r1, r6
   11b36:	0038      	movs	r0, r7
   11b38:	4b9a      	ldr	r3, [pc, #616]	; (11da4 <LORAWAN_RxDone+0xa70>)
   11b3a:	4798      	blx	r3
   11b3c:	0022      	movs	r2, r4
   11b3e:	2101      	movs	r1, #1
   11b40:	3284      	adds	r2, #132	; 0x84
   11b42:	7853      	ldrb	r3, [r2, #1]
   11b44:	438b      	bics	r3, r1
   11b46:	7053      	strb	r3, [r2, #1]
   11b48:	e702      	b.n	11950 <LORAWAN_RxDone+0x61c>
   11b4a:	2220      	movs	r2, #32
   11b4c:	4393      	bics	r3, r2
   11b4e:	702b      	strb	r3, [r5, #0]
   11b50:	0023      	movs	r3, r4
   11b52:	33fd      	adds	r3, #253	; 0xfd
   11b54:	781b      	ldrb	r3, [r3, #0]
   11b56:	2b01      	cmp	r3, #1
   11b58:	d10e      	bne.n	11b78 <LORAWAN_RxDone+0x844>
   11b5a:	0022      	movs	r2, r4
   11b5c:	210e      	movs	r1, #14
   11b5e:	3284      	adds	r2, #132	; 0x84
   11b60:	7813      	ldrb	r3, [r2, #0]
   11b62:	438b      	bics	r3, r1
   11b64:	7013      	strb	r3, [r2, #0]
   11b66:	2388      	movs	r3, #136	; 0x88
   11b68:	009b      	lsls	r3, r3, #2
   11b6a:	5ce3      	ldrb	r3, [r4, r3]
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d1e5      	bne.n	11b3c <LORAWAN_RxDone+0x808>
   11b70:	2008      	movs	r0, #8
   11b72:	4b8d      	ldr	r3, [pc, #564]	; (11da8 <LORAWAN_RxDone+0xa74>)
   11b74:	4798      	blx	r3
   11b76:	e7e1      	b.n	11b3c <LORAWAN_RxDone+0x808>
   11b78:	2b04      	cmp	r3, #4
   11b7a:	d1f4      	bne.n	11b66 <LORAWAN_RxDone+0x832>
   11b7c:	0023      	movs	r3, r4
   11b7e:	33f1      	adds	r3, #241	; 0xf1
   11b80:	7818      	ldrb	r0, [r3, #0]
   11b82:	4b8a      	ldr	r3, [pc, #552]	; (11dac <LORAWAN_RxDone+0xa78>)
   11b84:	4798      	blx	r3
   11b86:	e7ee      	b.n	11b66 <LORAWAN_RxDone+0x832>
   11b88:	35ff      	adds	r5, #255	; 0xff
   11b8a:	7f6b      	ldrb	r3, [r5, #29]
   11b8c:	079a      	lsls	r2, r3, #30
   11b8e:	d520      	bpl.n	11bd2 <LORAWAN_RxDone+0x89e>
   11b90:	aa10      	add	r2, sp, #64	; 0x40
   11b92:	0031      	movs	r1, r6
   11b94:	2026      	movs	r0, #38	; 0x26
   11b96:	47b8      	blx	r7
   11b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b9a:	1c5a      	adds	r2, r3, #1
   11b9c:	d001      	beq.n	11ba2 <LORAWAN_RxDone+0x86e>
   11b9e:	3314      	adds	r3, #20
   11ba0:	9310      	str	r3, [sp, #64]	; 0x40
   11ba2:	0021      	movs	r1, r4
   11ba4:	220e      	movs	r2, #14
   11ba6:	3184      	adds	r1, #132	; 0x84
   11ba8:	780b      	ldrb	r3, [r1, #0]
   11baa:	4393      	bics	r3, r2
   11bac:	001a      	movs	r2, r3
   11bae:	230c      	movs	r3, #12
   11bb0:	4313      	orrs	r3, r2
   11bb2:	700b      	strb	r3, [r1, #0]
   11bb4:	4b7e      	ldr	r3, [pc, #504]	; (11db0 <LORAWAN_RxDone+0xa7c>)
   11bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11bb8:	5ce3      	ldrb	r3, [r4, r3]
   11bba:	21fa      	movs	r1, #250	; 0xfa
   11bbc:	1ad3      	subs	r3, r2, r3
   11bbe:	2200      	movs	r2, #0
   11bc0:	0089      	lsls	r1, r1, #2
   11bc2:	4359      	muls	r1, r3
   11bc4:	34ef      	adds	r4, #239	; 0xef
   11bc6:	4b7b      	ldr	r3, [pc, #492]	; (11db4 <LORAWAN_RxDone+0xa80>)
   11bc8:	7820      	ldrb	r0, [r4, #0]
   11bca:	9200      	str	r2, [sp, #0]
   11bcc:	4c7a      	ldr	r4, [pc, #488]	; (11db8 <LORAWAN_RxDone+0xa84>)
   11bce:	47a0      	blx	r4
   11bd0:	e6eb      	b.n	119aa <LORAWAN_RxDone+0x676>
   11bd2:	075b      	lsls	r3, r3, #29
   11bd4:	d400      	bmi.n	11bd8 <LORAWAN_RxDone+0x8a4>
   11bd6:	e6e8      	b.n	119aa <LORAWAN_RxDone+0x676>
   11bd8:	aa10      	add	r2, sp, #64	; 0x40
   11bda:	0031      	movs	r1, r6
   11bdc:	2032      	movs	r0, #50	; 0x32
   11bde:	47b8      	blx	r7
   11be0:	220e      	movs	r2, #14
   11be2:	4b76      	ldr	r3, [pc, #472]	; (11dbc <LORAWAN_RxDone+0xa88>)
   11be4:	781b      	ldrb	r3, [r3, #0]
   11be6:	4393      	bics	r3, r2
   11be8:	001a      	movs	r2, r3
   11bea:	230c      	movs	r3, #12
   11bec:	4313      	orrs	r3, r2
   11bee:	4a73      	ldr	r2, [pc, #460]	; (11dbc <LORAWAN_RxDone+0xa88>)
   11bf0:	7013      	strb	r3, [r2, #0]
   11bf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11bf4:	1c5a      	adds	r2, r3, #1
   11bf6:	d001      	beq.n	11bfc <LORAWAN_RxDone+0x8c8>
   11bf8:	3301      	adds	r3, #1
   11bfa:	9310      	str	r3, [sp, #64]	; 0x40
   11bfc:	4b6c      	ldr	r3, [pc, #432]	; (11db0 <LORAWAN_RxDone+0xa7c>)
   11bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11c00:	5ce3      	ldrb	r3, [r4, r3]
   11c02:	21fa      	movs	r1, #250	; 0xfa
   11c04:	1ad3      	subs	r3, r2, r3
   11c06:	2200      	movs	r2, #0
   11c08:	0089      	lsls	r1, r1, #2
   11c0a:	34f2      	adds	r4, #242	; 0xf2
   11c0c:	4359      	muls	r1, r3
   11c0e:	7820      	ldrb	r0, [r4, #0]
   11c10:	4b6b      	ldr	r3, [pc, #428]	; (11dc0 <LORAWAN_RxDone+0xa8c>)
   11c12:	9200      	str	r2, [sp, #0]
   11c14:	e7da      	b.n	11bcc <LORAWAN_RxDone+0x898>
   11c16:	35fd      	adds	r5, #253	; 0xfd
   11c18:	782b      	ldrb	r3, [r5, #0]
   11c1a:	2b04      	cmp	r3, #4
   11c1c:	d000      	beq.n	11c20 <LORAWAN_RxDone+0x8ec>
   11c1e:	e6c4      	b.n	119aa <LORAWAN_RxDone+0x676>
   11c20:	0038      	movs	r0, r7
   11c22:	4b68      	ldr	r3, [pc, #416]	; (11dc4 <LORAWAN_RxDone+0xa90>)
   11c24:	4798      	blx	r3
   11c26:	e6c0      	b.n	119aa <LORAWAN_RxDone+0x676>
   11c28:	2390      	movs	r3, #144	; 0x90
   11c2a:	009b      	lsls	r3, r3, #2
   11c2c:	5ceb      	ldrb	r3, [r5, r3]
   11c2e:	2b00      	cmp	r3, #0
   11c30:	d009      	beq.n	11c46 <LORAWAN_RxDone+0x912>
   11c32:	2322      	movs	r3, #34	; 0x22
   11c34:	aa04      	add	r2, sp, #16
   11c36:	189b      	adds	r3, r3, r2
   11c38:	0021      	movs	r1, r4
   11c3a:	781b      	ldrb	r3, [r3, #0]
   11c3c:	003a      	movs	r2, r7
   11c3e:	0038      	movs	r0, r7
   11c40:	4c61      	ldr	r4, [pc, #388]	; (11dc8 <LORAWAN_RxDone+0xa94>)
   11c42:	47a0      	blx	r4
   11c44:	e6b1      	b.n	119aa <LORAWAN_RxDone+0x676>
   11c46:	2220      	movs	r2, #32
   11c48:	3594      	adds	r5, #148	; 0x94
   11c4a:	782b      	ldrb	r3, [r5, #0]
   11c4c:	201e      	movs	r0, #30
   11c4e:	4393      	bics	r3, r2
   11c50:	702b      	strb	r3, [r5, #0]
   11c52:	4b55      	ldr	r3, [pc, #340]	; (11da8 <LORAWAN_RxDone+0xa74>)
   11c54:	4798      	blx	r3
   11c56:	e6cb      	b.n	119f0 <LORAWAN_RxDone+0x6bc>
   11c58:	220e      	movs	r2, #14
   11c5a:	4013      	ands	r3, r2
   11c5c:	2b0a      	cmp	r3, #10
   11c5e:	d008      	beq.n	11c72 <LORAWAN_RxDone+0x93e>
   11c60:	2b06      	cmp	r3, #6
   11c62:	d000      	beq.n	11c66 <LORAWAN_RxDone+0x932>
   11c64:	e5a8      	b.n	117b8 <LORAWAN_RxDone+0x484>
   11c66:	0033      	movs	r3, r6
   11c68:	33f9      	adds	r3, #249	; 0xf9
   11c6a:	781b      	ldrb	r3, [r3, #0]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d100      	bne.n	11c72 <LORAWAN_RxDone+0x93e>
   11c70:	e5a2      	b.n	117b8 <LORAWAN_RxDone+0x484>
   11c72:	2220      	movs	r2, #32
   11c74:	3694      	adds	r6, #148	; 0x94
   11c76:	7833      	ldrb	r3, [r6, #0]
   11c78:	2019      	movs	r0, #25
   11c7a:	4393      	bics	r3, r2
   11c7c:	7033      	strb	r3, [r6, #0]
   11c7e:	e5a8      	b.n	117d2 <LORAWAN_RxDone+0x49e>
   11c80:	4952      	ldr	r1, [pc, #328]	; (11dcc <LORAWAN_RxDone+0xa98>)
   11c82:	784a      	ldrb	r2, [r1, #1]
   11c84:	780b      	ldrb	r3, [r1, #0]
   11c86:	0212      	lsls	r2, r2, #8
   11c88:	431a      	orrs	r2, r3
   11c8a:	788b      	ldrb	r3, [r1, #2]
   11c8c:	041b      	lsls	r3, r3, #16
   11c8e:	431a      	orrs	r2, r3
   11c90:	78cb      	ldrb	r3, [r1, #3]
   11c92:	061b      	lsls	r3, r3, #24
   11c94:	4313      	orrs	r3, r2
   11c96:	d100      	bne.n	11c9a <LORAWAN_RxDone+0x966>
   11c98:	e687      	b.n	119aa <LORAWAN_RxDone+0x676>
   11c9a:	4b4d      	ldr	r3, [pc, #308]	; (11dd0 <LORAWAN_RxDone+0xa9c>)
   11c9c:	4d4d      	ldr	r5, [pc, #308]	; (11dd4 <LORAWAN_RxDone+0xaa0>)
   11c9e:	781b      	ldrb	r3, [r3, #0]
   11ca0:	2b10      	cmp	r3, #16
   11ca2:	d105      	bne.n	11cb0 <LORAWAN_RxDone+0x97c>
   11ca4:	0001      	movs	r1, r0
   11ca6:	0022      	movs	r2, r4
   11ca8:	2000      	movs	r0, #0
   11caa:	3b0c      	subs	r3, #12
   11cac:	47a8      	blx	r5
   11cae:	e67c      	b.n	119aa <LORAWAN_RxDone+0x676>
   11cb0:	2300      	movs	r3, #0
   11cb2:	0001      	movs	r1, r0
   11cb4:	0022      	movs	r2, r4
   11cb6:	0018      	movs	r0, r3
   11cb8:	e7f8      	b.n	11cac <LORAWAN_RxDone+0x978>
   11cba:	368c      	adds	r6, #140	; 0x8c
   11cbc:	6833      	ldr	r3, [r6, #0]
   11cbe:	9906      	ldr	r1, [sp, #24]
   11cc0:	9307      	str	r3, [sp, #28]
   11cc2:	0038      	movs	r0, r7
   11cc4:	4b44      	ldr	r3, [pc, #272]	; (11dd8 <LORAWAN_RxDone+0xaa4>)
   11cc6:	4798      	blx	r3
   11cc8:	2808      	cmp	r0, #8
   11cca:	d001      	beq.n	11cd0 <LORAWAN_RxDone+0x99c>
   11ccc:	f7ff fb94 	bl	113f8 <LORAWAN_RxDone+0xc4>
   11cd0:	9b08      	ldr	r3, [sp, #32]
   11cd2:	1f22      	subs	r2, r4, #4
   11cd4:	9300      	str	r3, [sp, #0]
   11cd6:	0028      	movs	r0, r5
   11cd8:	b2d2      	uxtb	r2, r2
   11cda:	4d40      	ldr	r5, [pc, #256]	; (11ddc <LORAWAN_RxDone+0xaa8>)
   11cdc:	2349      	movs	r3, #73	; 0x49
   11cde:	6831      	ldr	r1, [r6, #0]
   11ce0:	47a8      	blx	r5
   11ce2:	4d3f      	ldr	r5, [pc, #252]	; (11de0 <LORAWAN_RxDone+0xaac>)
   11ce4:	4e3f      	ldr	r6, [pc, #252]	; (11de4 <LORAWAN_RxDone+0xab0>)
   11ce6:	2210      	movs	r2, #16
   11ce8:	0031      	movs	r1, r6
   11cea:	4b3f      	ldr	r3, [pc, #252]	; (11de8 <LORAWAN_RxDone+0xab4>)
   11cec:	483f      	ldr	r0, [pc, #252]	; (11dec <LORAWAN_RxDone+0xab8>)
   11cee:	4798      	blx	r3
   11cf0:	1f23      	subs	r3, r4, #4
   11cf2:	001a      	movs	r2, r3
   11cf4:	9308      	str	r3, [sp, #32]
   11cf6:	0039      	movs	r1, r7
   11cf8:	4b3b      	ldr	r3, [pc, #236]	; (11de8 <LORAWAN_RxDone+0xab4>)
   11cfa:	483d      	ldr	r0, [pc, #244]	; (11df0 <LORAWAN_RxDone+0xabc>)
   11cfc:	4798      	blx	r3
   11cfe:	0023      	movs	r3, r4
   11d00:	9a06      	ldr	r2, [sp, #24]
   11d02:	330c      	adds	r3, #12
   11d04:	b29b      	uxth	r3, r3
   11d06:	9300      	str	r3, [sp, #0]
   11d08:	4b38      	ldr	r3, [pc, #224]	; (11dec <LORAWAN_RxDone+0xab8>)
   11d0a:	2a00      	cmp	r2, #0
   11d0c:	d100      	bne.n	11d10 <LORAWAN_RxDone+0x9dc>
   11d0e:	e562      	b.n	117d6 <LORAWAN_RxDone+0x4a2>
   11d10:	0032      	movs	r2, r6
   11d12:	2104      	movs	r1, #4
   11d14:	0028      	movs	r0, r5
   11d16:	4d37      	ldr	r5, [pc, #220]	; (11df4 <LORAWAN_RxDone+0xac0>)
   11d18:	47a8      	blx	r5
   11d1a:	2204      	movs	r2, #4
   11d1c:	4931      	ldr	r1, [pc, #196]	; (11de4 <LORAWAN_RxDone+0xab0>)
   11d1e:	4d32      	ldr	r5, [pc, #200]	; (11de8 <LORAWAN_RxDone+0xab4>)
   11d20:	a80d      	add	r0, sp, #52	; 0x34
   11d22:	47a8      	blx	r5
   11d24:	1f23      	subs	r3, r4, #4
   11d26:	18f9      	adds	r1, r7, r3
   11d28:	2204      	movs	r2, #4
   11d2a:	a810      	add	r0, sp, #64	; 0x40
   11d2c:	47a8      	blx	r5
   11d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11d30:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d32:	4293      	cmp	r3, r2
   11d34:	d100      	bne.n	11d38 <LORAWAN_RxDone+0xa04>
   11d36:	e555      	b.n	117e4 <LORAWAN_RxDone+0x4b0>
   11d38:	9b06      	ldr	r3, [sp, #24]
   11d3a:	2b00      	cmp	r3, #0
   11d3c:	d108      	bne.n	11d50 <LORAWAN_RxDone+0xa1c>
   11d3e:	220e      	movs	r2, #14
   11d40:	4b2d      	ldr	r3, [pc, #180]	; (11df8 <LORAWAN_RxDone+0xac4>)
   11d42:	3384      	adds	r3, #132	; 0x84
   11d44:	781b      	ldrb	r3, [r3, #0]
   11d46:	4013      	ands	r3, r2
   11d48:	2b06      	cmp	r3, #6
   11d4a:	d101      	bne.n	11d50 <LORAWAN_RxDone+0xa1c>
   11d4c:	4b2b      	ldr	r3, [pc, #172]	; (11dfc <LORAWAN_RxDone+0xac8>)
   11d4e:	4798      	blx	r3
   11d50:	491e      	ldr	r1, [pc, #120]	; (11dcc <LORAWAN_RxDone+0xa98>)
   11d52:	784a      	ldrb	r2, [r1, #1]
   11d54:	780b      	ldrb	r3, [r1, #0]
   11d56:	0212      	lsls	r2, r2, #8
   11d58:	431a      	orrs	r2, r3
   11d5a:	788b      	ldrb	r3, [r1, #2]
   11d5c:	041b      	lsls	r3, r3, #16
   11d5e:	431a      	orrs	r2, r3
   11d60:	78cb      	ldrb	r3, [r1, #3]
   11d62:	061b      	lsls	r3, r3, #24
   11d64:	4313      	orrs	r3, r2
   11d66:	d101      	bne.n	11d6c <LORAWAN_RxDone+0xa38>
   11d68:	f7ff fb35 	bl	113d6 <LORAWAN_RxDone+0xa2>
   11d6c:	4a22      	ldr	r2, [pc, #136]	; (11df8 <LORAWAN_RxDone+0xac4>)
   11d6e:	2020      	movs	r0, #32
   11d70:	0011      	movs	r1, r2
   11d72:	3194      	adds	r1, #148	; 0x94
   11d74:	780b      	ldrb	r3, [r1, #0]
   11d76:	4383      	bics	r3, r0
   11d78:	700b      	strb	r3, [r1, #0]
   11d7a:	9b06      	ldr	r3, [sp, #24]
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	d100      	bne.n	11d82 <LORAWAN_RxDone+0xa4e>
   11d80:	e52c      	b.n	117dc <LORAWAN_RxDone+0x4a8>
   11d82:	2322      	movs	r3, #34	; 0x22
   11d84:	a904      	add	r1, sp, #16
   11d86:	185b      	adds	r3, r3, r1
   11d88:	7819      	ldrb	r1, [r3, #0]
   11d8a:	233c      	movs	r3, #60	; 0x3c
   11d8c:	434b      	muls	r3, r1
   11d8e:	18d3      	adds	r3, r2, r3
   11d90:	9a07      	ldr	r2, [sp, #28]
   11d92:	33fc      	adds	r3, #252	; 0xfc
   11d94:	659a      	str	r2, [r3, #88]	; 0x58
   11d96:	2018      	movs	r0, #24
   11d98:	e51b      	b.n	117d2 <LORAWAN_RxDone+0x49e>
   11d9a:	46c0      	nop			; (mov r8, r8)
   11d9c:	0000f0e5 	.word	0x0000f0e5
   11da0:	0000f049 	.word	0x0000f049
   11da4:	0000fd35 	.word	0x0000fd35
   11da8:	0000fc85 	.word	0x0000fc85
   11dac:	0000d895 	.word	0x0000d895
   11db0:	0000022b 	.word	0x0000022b
   11db4:	0000eda5 	.word	0x0000eda5
   11db8:	0000d57d 	.word	0x0000d57d
   11dbc:	20002c58 	.word	0x20002c58
   11dc0:	0000f96d 	.word	0x0000f96d
   11dc4:	00012b59 	.word	0x00012b59
   11dc8:	00012e99 	.word	0x00012e99
   11dcc:	20002f30 	.word	0x20002f30
   11dd0:	20002e1c 	.word	0x20002e1c
   11dd4:	0000fce9 	.word	0x0000fce9
   11dd8:	00010e05 	.word	0x00010e05
   11ddc:	0000e96d 	.word	0x0000e96d
   11de0:	20002bf9 	.word	0x20002bf9
   11de4:	20000f50 	.word	0x20000f50
   11de8:	00018655 	.word	0x00018655
   11dec:	20002f38 	.word	0x20002f38
   11df0:	20002f48 	.word	0x20002f48
   11df4:	0000c429 	.word	0x0000c429
   11df8:	20002bd4 	.word	0x20002bd4
   11dfc:	0000ea05 	.word	0x0000ea05

00011e00 <LorawanSetEdClass>:
   11e00:	2388      	movs	r3, #136	; 0x88
   11e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e04:	4d1a      	ldr	r5, [pc, #104]	; (11e70 <LorawanSetEdClass+0x70>)
   11e06:	009b      	lsls	r3, r3, #2
   11e08:	5ceb      	ldrb	r3, [r5, r3]
   11e0a:	0004      	movs	r4, r0
   11e0c:	2011      	movs	r0, #17
   11e0e:	2b00      	cmp	r3, #0
   11e10:	d013      	beq.n	11e3a <LorawanSetEdClass+0x3a>
   11e12:	002b      	movs	r3, r5
   11e14:	33fe      	adds	r3, #254	; 0xfe
   11e16:	781b      	ldrb	r3, [r3, #0]
   11e18:	3807      	subs	r0, #7
   11e1a:	4223      	tst	r3, r4
   11e1c:	d00d      	beq.n	11e3a <LorawanSetEdClass+0x3a>
   11e1e:	002b      	movs	r3, r5
   11e20:	33fd      	adds	r3, #253	; 0xfd
   11e22:	7819      	ldrb	r1, [r3, #0]
   11e24:	428c      	cmp	r4, r1
   11e26:	d007      	beq.n	11e38 <LorawanSetEdClass+0x38>
   11e28:	2901      	cmp	r1, #1
   11e2a:	d107      	bne.n	11e3c <LorawanSetEdClass+0x3c>
   11e2c:	2c04      	cmp	r4, #4
   11e2e:	d104      	bne.n	11e3a <LorawanSetEdClass+0x3a>
   11e30:	701c      	strb	r4, [r3, #0]
   11e32:	2000      	movs	r0, #0
   11e34:	4b0f      	ldr	r3, [pc, #60]	; (11e74 <LorawanSetEdClass+0x74>)
   11e36:	4798      	blx	r3
   11e38:	2008      	movs	r0, #8
   11e3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11e3c:	2904      	cmp	r1, #4
   11e3e:	d1fc      	bne.n	11e3a <LorawanSetEdClass+0x3a>
   11e40:	2c01      	cmp	r4, #1
   11e42:	d1fa      	bne.n	11e3a <LorawanSetEdClass+0x3a>
   11e44:	701c      	strb	r4, [r3, #0]
   11e46:	0021      	movs	r1, r4
   11e48:	4b0a      	ldr	r3, [pc, #40]	; (11e74 <LorawanSetEdClass+0x74>)
   11e4a:	2000      	movs	r0, #0
   11e4c:	4798      	blx	r3
   11e4e:	002a      	movs	r2, r5
   11e50:	210e      	movs	r1, #14
   11e52:	3284      	adds	r2, #132	; 0x84
   11e54:	7813      	ldrb	r3, [r2, #0]
   11e56:	a801      	add	r0, sp, #4
   11e58:	438b      	bics	r3, r1
   11e5a:	7013      	strb	r3, [r2, #0]
   11e5c:	4b06      	ldr	r3, [pc, #24]	; (11e78 <LorawanSetEdClass+0x78>)
   11e5e:	7004      	strb	r4, [r0, #0]
   11e60:	4798      	blx	r3
   11e62:	2394      	movs	r3, #148	; 0x94
   11e64:	005b      	lsls	r3, r3, #1
   11e66:	5ce8      	ldrb	r0, [r5, r3]
   11e68:	4b04      	ldr	r3, [pc, #16]	; (11e7c <LorawanSetEdClass+0x7c>)
   11e6a:	4798      	blx	r3
   11e6c:	e7e4      	b.n	11e38 <LorawanSetEdClass+0x38>
   11e6e:	46c0      	nop			; (mov r8, r8)
   11e70:	20002bd4 	.word	0x20002bd4
   11e74:	0000c84d 	.word	0x0000c84d
   11e78:	0001477d 	.word	0x0001477d
   11e7c:	0000d895 	.word	0x0000d895

00011e80 <LORAWAN_SetAttr>:
   11e80:	2388      	movs	r3, #136	; 0x88
   11e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e84:	4cbb      	ldr	r4, [pc, #748]	; (12174 <LORAWAN_SetAttr+0x2f4>)
   11e86:	009b      	lsls	r3, r3, #2
   11e88:	5ce3      	ldrb	r3, [r4, r3]
   11e8a:	000d      	movs	r5, r1
   11e8c:	2611      	movs	r6, #17
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d100      	bne.n	11e94 <LORAWAN_SetAttr+0x14>
   11e92:	e11f      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11e94:	2846      	cmp	r0, #70	; 0x46
   11e96:	d878      	bhi.n	11f8a <LORAWAN_SetAttr+0x10a>
   11e98:	f003 f850 	bl	14f3c <__gnu_thumb1_case_uhi>
   11e9c:	00930047 	.word	0x00930047
   11ea0:	00fc00b2 	.word	0x00fc00b2
   11ea4:	00e600c5 	.word	0x00e600c5
   11ea8:	0134011e 	.word	0x0134011e
   11eac:	01660154 	.word	0x01660154
   11eb0:	01830178 	.word	0x01830178
   11eb4:	01a6018d 	.word	0x01a6018d
   11eb8:	007701ab 	.word	0x007701ab
   11ebc:	01b501b0 	.word	0x01b501b0
   11ec0:	01bf01ba 	.word	0x01bf01ba
   11ec4:	01e601c4 	.word	0x01e601c4
   11ec8:	01cb01eb 	.word	0x01cb01eb
   11ecc:	01fc01c8 	.word	0x01fc01c8
   11ed0:	01e101f8 	.word	0x01e101f8
   11ed4:	01d701dd 	.word	0x01d701dd
   11ed8:	00770077 	.word	0x00770077
   11edc:	0077019e 	.word	0x0077019e
   11ee0:	00770077 	.word	0x00770077
   11ee4:	00770077 	.word	0x00770077
   11ee8:	02000077 	.word	0x02000077
   11eec:	02030066 	.word	0x02030066
   11ef0:	020d0211 	.word	0x020d0211
   11ef4:	00770208 	.word	0x00770208
   11ef8:	02190215 	.word	0x02190215
   11efc:	0221021d 	.word	0x0221021d
   11f00:	02290225 	.word	0x02290225
   11f04:	00770249 	.word	0x00770249
   11f08:	00770077 	.word	0x00770077
   11f0c:	00770077 	.word	0x00770077
   11f10:	00770077 	.word	0x00770077
   11f14:	00770077 	.word	0x00770077
   11f18:	02600077 	.word	0x02600077
   11f1c:	026e026a 	.word	0x026e026a
   11f20:	00770077 	.word	0x00770077
   11f24:	02730077 	.word	0x02730077
   11f28:	0271      	.short	0x0271
   11f2a:	260a      	movs	r6, #10
   11f2c:	2900      	cmp	r1, #0
   11f2e:	d100      	bne.n	11f32 <LORAWAN_SetAttr+0xb2>
   11f30:	e0d0      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11f32:	0020      	movs	r0, r4
   11f34:	2208      	movs	r2, #8
   11f36:	4b90      	ldr	r3, [pc, #576]	; (12178 <LORAWAN_SetAttr+0x2f8>)
   11f38:	305d      	adds	r0, #93	; 0x5d
   11f3a:	4798      	blx	r3
   11f3c:	2108      	movs	r1, #8
   11f3e:	4e8f      	ldr	r6, [pc, #572]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   11f40:	2001      	movs	r0, #1
   11f42:	47b0      	blx	r6
   11f44:	0022      	movs	r2, r4
   11f46:	2501      	movs	r5, #1
   11f48:	32de      	adds	r2, #222	; 0xde
   11f4a:	7813      	ldrb	r3, [r2, #0]
   11f4c:	2109      	movs	r1, #9
   11f4e:	432b      	orrs	r3, r5
   11f50:	3484      	adds	r4, #132	; 0x84
   11f52:	0028      	movs	r0, r5
   11f54:	7013      	strb	r3, [r2, #0]
   11f56:	47b0      	blx	r6
   11f58:	7823      	ldrb	r3, [r4, #0]
   11f5a:	210b      	movs	r1, #11
   11f5c:	43ab      	bics	r3, r5
   11f5e:	0028      	movs	r0, r5
   11f60:	7023      	strb	r3, [r4, #0]
   11f62:	47b0      	blx	r6
   11f64:	2608      	movs	r6, #8
   11f66:	e0b5      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11f68:	0023      	movs	r3, r4
   11f6a:	33ff      	adds	r3, #255	; 0xff
   11f6c:	7f5b      	ldrb	r3, [r3, #29]
   11f6e:	260a      	movs	r6, #10
   11f70:	075b      	lsls	r3, r3, #29
   11f72:	d400      	bmi.n	11f76 <LORAWAN_SetAttr+0xf6>
   11f74:	e0ae      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11f76:	79ca      	ldrb	r2, [r1, #7]
   11f78:	4b81      	ldr	r3, [pc, #516]	; (12180 <LORAWAN_SetAttr+0x300>)
   11f7a:	2a00      	cmp	r2, #0
   11f7c:	d10e      	bne.n	11f9c <LORAWAN_SetAttr+0x11c>
   11f7e:	4669      	mov	r1, sp
   11f80:	201d      	movs	r0, #29
   11f82:	714a      	strb	r2, [r1, #5]
   11f84:	4798      	blx	r3
   11f86:	2800      	cmp	r0, #0
   11f88:	d001      	beq.n	11f8e <LORAWAN_SetAttr+0x10e>
   11f8a:	260a      	movs	r6, #10
   11f8c:	e0a2      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11f8e:	2109      	movs	r1, #9
   11f90:	34fe      	adds	r4, #254	; 0xfe
   11f92:	8460      	strh	r0, [r4, #34]	; 0x22
   11f94:	8420      	strh	r0, [r4, #32]
   11f96:	4b79      	ldr	r3, [pc, #484]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   11f98:	4798      	blx	r3
   11f9a:	e7e3      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   11f9c:	2002      	movs	r0, #2
   11f9e:	5e2a      	ldrsh	r2, [r5, r0]
   11fa0:	88ae      	ldrh	r6, [r5, #4]
   11fa2:	79a8      	ldrb	r0, [r5, #6]
   11fa4:	466d      	mov	r5, sp
   11fa6:	806a      	strh	r2, [r5, #2]
   11fa8:	2201      	movs	r2, #1
   11faa:	8809      	ldrh	r1, [r1, #0]
   11fac:	7128      	strb	r0, [r5, #4]
   11fae:	8029      	strh	r1, [r5, #0]
   11fb0:	201d      	movs	r0, #29
   11fb2:	4669      	mov	r1, sp
   11fb4:	716a      	strb	r2, [r5, #5]
   11fb6:	4798      	blx	r3
   11fb8:	2800      	cmp	r0, #0
   11fba:	d1e6      	bne.n	11f8a <LORAWAN_SetAttr+0x10a>
   11fbc:	34fe      	adds	r4, #254	; 0xfe
   11fbe:	8466      	strh	r6, [r4, #34]	; 0x22
   11fc0:	e7d0      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   11fc2:	260a      	movs	r6, #10
   11fc4:	2900      	cmp	r1, #0
   11fc6:	d100      	bne.n	11fca <LORAWAN_SetAttr+0x14a>
   11fc8:	e084      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   11fca:	0020      	movs	r0, r4
   11fcc:	2208      	movs	r2, #8
   11fce:	4b6a      	ldr	r3, [pc, #424]	; (12178 <LORAWAN_SetAttr+0x2f8>)
   11fd0:	3055      	adds	r0, #85	; 0x55
   11fd2:	4798      	blx	r3
   11fd4:	2107      	movs	r1, #7
   11fd6:	4d69      	ldr	r5, [pc, #420]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   11fd8:	2001      	movs	r0, #1
   11fda:	47a8      	blx	r5
   11fdc:	0022      	movs	r2, r4
   11fde:	2302      	movs	r3, #2
   11fe0:	32de      	adds	r2, #222	; 0xde
   11fe2:	7811      	ldrb	r1, [r2, #0]
   11fe4:	2001      	movs	r0, #1
   11fe6:	430b      	orrs	r3, r1
   11fe8:	2109      	movs	r1, #9
   11fea:	7013      	strb	r3, [r2, #0]
   11fec:	47a8      	blx	r5
   11fee:	2001      	movs	r0, #1
   11ff0:	3484      	adds	r4, #132	; 0x84
   11ff2:	7823      	ldrb	r3, [r4, #0]
   11ff4:	210b      	movs	r1, #11
   11ff6:	4383      	bics	r3, r0
   11ff8:	7023      	strb	r3, [r4, #0]
   11ffa:	47a8      	blx	r5
   11ffc:	3e02      	subs	r6, #2
   11ffe:	e069      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   12000:	680b      	ldr	r3, [r1, #0]
   12002:	2001      	movs	r0, #1
   12004:	0a19      	lsrs	r1, r3, #8
   12006:	70a1      	strb	r1, [r4, #2]
   12008:	0c19      	lsrs	r1, r3, #16
   1200a:	7063      	strb	r3, [r4, #1]
   1200c:	70e1      	strb	r1, [r4, #3]
   1200e:	0e1b      	lsrs	r3, r3, #24
   12010:	2103      	movs	r1, #3
   12012:	4d5a      	ldr	r5, [pc, #360]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   12014:	7123      	strb	r3, [r4, #4]
   12016:	47a8      	blx	r5
   12018:	0022      	movs	r2, r4
   1201a:	2304      	movs	r3, #4
   1201c:	32de      	adds	r2, #222	; 0xde
   1201e:	7811      	ldrb	r1, [r2, #0]
   12020:	430b      	orrs	r3, r1
   12022:	7013      	strb	r3, [r2, #0]
   12024:	e015      	b.n	12052 <LORAWAN_SetAttr+0x1d2>
   12026:	260a      	movs	r6, #10
   12028:	2900      	cmp	r1, #0
   1202a:	d053      	beq.n	120d4 <LORAWAN_SetAttr+0x254>
   1202c:	3606      	adds	r6, #6
   1202e:	0032      	movs	r2, r6
   12030:	4f51      	ldr	r7, [pc, #324]	; (12178 <LORAWAN_SetAttr+0x2f8>)
   12032:	1d60      	adds	r0, r4, #5
   12034:	47b8      	blx	r7
   12036:	0020      	movs	r0, r4
   12038:	0032      	movs	r2, r6
   1203a:	0029      	movs	r1, r5
   1203c:	3025      	adds	r0, #37	; 0x25
   1203e:	47b8      	blx	r7
   12040:	2104      	movs	r1, #4
   12042:	2001      	movs	r0, #1
   12044:	4d4d      	ldr	r5, [pc, #308]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   12046:	47a8      	blx	r5
   12048:	0023      	movs	r3, r4
   1204a:	33de      	adds	r3, #222	; 0xde
   1204c:	781a      	ldrb	r2, [r3, #0]
   1204e:	4316      	orrs	r6, r2
   12050:	701e      	strb	r6, [r3, #0]
   12052:	2109      	movs	r1, #9
   12054:	2001      	movs	r0, #1
   12056:	47a8      	blx	r5
   12058:	2001      	movs	r0, #1
   1205a:	210b      	movs	r1, #11
   1205c:	3484      	adds	r4, #132	; 0x84
   1205e:	7823      	ldrb	r3, [r4, #0]
   12060:	4383      	bics	r3, r0
   12062:	7023      	strb	r3, [r4, #0]
   12064:	47a8      	blx	r5
   12066:	e77d      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   12068:	260a      	movs	r6, #10
   1206a:	2900      	cmp	r1, #0
   1206c:	d032      	beq.n	120d4 <LORAWAN_SetAttr+0x254>
   1206e:	0020      	movs	r0, r4
   12070:	2210      	movs	r2, #16
   12072:	4e41      	ldr	r6, [pc, #260]	; (12178 <LORAWAN_SetAttr+0x2f8>)
   12074:	3015      	adds	r0, #21
   12076:	47b0      	blx	r6
   12078:	0020      	movs	r0, r4
   1207a:	2210      	movs	r2, #16
   1207c:	0029      	movs	r1, r5
   1207e:	3035      	adds	r0, #53	; 0x35
   12080:	47b0      	blx	r6
   12082:	2105      	movs	r1, #5
   12084:	2001      	movs	r0, #1
   12086:	4d3d      	ldr	r5, [pc, #244]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   12088:	47a8      	blx	r5
   1208a:	0022      	movs	r2, r4
   1208c:	32de      	adds	r2, #222	; 0xde
   1208e:	7811      	ldrb	r1, [r2, #0]
   12090:	2320      	movs	r3, #32
   12092:	e7c5      	b.n	12020 <LORAWAN_SetAttr+0x1a0>
   12094:	260a      	movs	r6, #10
   12096:	2900      	cmp	r1, #0
   12098:	d01c      	beq.n	120d4 <LORAWAN_SetAttr+0x254>
   1209a:	4b3a      	ldr	r3, [pc, #232]	; (12184 <LORAWAN_SetAttr+0x304>)
   1209c:	3e02      	subs	r6, #2
   1209e:	5ce3      	ldrb	r3, [r4, r3]
   120a0:	2b00      	cmp	r3, #0
   120a2:	d117      	bne.n	120d4 <LORAWAN_SetAttr+0x254>
   120a4:	0020      	movs	r0, r4
   120a6:	2210      	movs	r2, #16
   120a8:	4b33      	ldr	r3, [pc, #204]	; (12178 <LORAWAN_SetAttr+0x2f8>)
   120aa:	3045      	adds	r0, #69	; 0x45
   120ac:	4798      	blx	r3
   120ae:	2106      	movs	r1, #6
   120b0:	4d32      	ldr	r5, [pc, #200]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   120b2:	2001      	movs	r0, #1
   120b4:	47a8      	blx	r5
   120b6:	0022      	movs	r2, r4
   120b8:	32de      	adds	r2, #222	; 0xde
   120ba:	7813      	ldrb	r3, [r2, #0]
   120bc:	2109      	movs	r1, #9
   120be:	4333      	orrs	r3, r6
   120c0:	2001      	movs	r0, #1
   120c2:	7013      	strb	r3, [r2, #0]
   120c4:	47a8      	blx	r5
   120c6:	2001      	movs	r0, #1
   120c8:	3484      	adds	r4, #132	; 0x84
   120ca:	7823      	ldrb	r3, [r4, #0]
   120cc:	210b      	movs	r1, #11
   120ce:	4383      	bics	r3, r0
   120d0:	7023      	strb	r3, [r4, #0]
   120d2:	47a8      	blx	r5
   120d4:	0030      	movs	r0, r6
   120d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   120d8:	780b      	ldrb	r3, [r1, #0]
   120da:	2001      	movs	r0, #1
   120dc:	0021      	movs	r1, r4
   120de:	2520      	movs	r5, #32
   120e0:	3184      	adds	r1, #132	; 0x84
   120e2:	4003      	ands	r3, r0
   120e4:	015a      	lsls	r2, r3, #5
   120e6:	780b      	ldrb	r3, [r1, #0]
   120e8:	43ab      	bics	r3, r5
   120ea:	4313      	orrs	r3, r2
   120ec:	700b      	strb	r3, [r1, #0]
   120ee:	0023      	movs	r3, r4
   120f0:	2200      	movs	r2, #0
   120f2:	33ca      	adds	r3, #202	; 0xca
   120f4:	3494      	adds	r4, #148	; 0x94
   120f6:	801a      	strh	r2, [r3, #0]
   120f8:	7823      	ldrb	r3, [r4, #0]
   120fa:	3210      	adds	r2, #16
   120fc:	4393      	bics	r3, r2
   120fe:	7023      	strb	r3, [r4, #0]
   12100:	210b      	movs	r1, #11
   12102:	e748      	b.n	11f96 <LORAWAN_SetAttr+0x116>
   12104:	466a      	mov	r2, sp
   12106:	780b      	ldrb	r3, [r1, #0]
   12108:	7013      	strb	r3, [r2, #0]
   1210a:	0022      	movs	r2, r4
   1210c:	32f3      	adds	r2, #243	; 0xf3
   1210e:	7812      	ldrb	r2, [r2, #0]
   12110:	429a      	cmp	r2, r3
   12112:	d900      	bls.n	12116 <LORAWAN_SetAttr+0x296>
   12114:	e739      	b.n	11f8a <LORAWAN_SetAttr+0x10a>
   12116:	0022      	movs	r2, r4
   12118:	32f4      	adds	r2, #244	; 0xf4
   1211a:	7812      	ldrb	r2, [r2, #0]
   1211c:	429a      	cmp	r2, r3
   1211e:	d200      	bcs.n	12122 <LORAWAN_SetAttr+0x2a2>
   12120:	e733      	b.n	11f8a <LORAWAN_SetAttr+0x10a>
   12122:	4669      	mov	r1, sp
   12124:	2010      	movs	r0, #16
   12126:	4b18      	ldr	r3, [pc, #96]	; (12188 <LORAWAN_SetAttr+0x308>)
   12128:	4798      	blx	r3
   1212a:	0006      	movs	r6, r0
   1212c:	2808      	cmp	r0, #8
   1212e:	d000      	beq.n	12132 <LORAWAN_SetAttr+0x2b2>
   12130:	e72b      	b.n	11f8a <LORAWAN_SetAttr+0x10a>
   12132:	466b      	mov	r3, sp
   12134:	210c      	movs	r1, #12
   12136:	2001      	movs	r0, #1
   12138:	781b      	ldrb	r3, [r3, #0]
   1213a:	34e7      	adds	r4, #231	; 0xe7
   1213c:	7023      	strb	r3, [r4, #0]
   1213e:	4b0f      	ldr	r3, [pc, #60]	; (1217c <LORAWAN_SetAttr+0x2fc>)
   12140:	4798      	blx	r3
   12142:	e7c7      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   12144:	466a      	mov	r2, sp
   12146:	780b      	ldrb	r3, [r1, #0]
   12148:	201d      	movs	r0, #29
   1214a:	7013      	strb	r3, [r2, #0]
   1214c:	4669      	mov	r1, sp
   1214e:	4b0e      	ldr	r3, [pc, #56]	; (12188 <LORAWAN_SetAttr+0x308>)
   12150:	4798      	blx	r3
   12152:	0006      	movs	r6, r0
   12154:	2808      	cmp	r0, #8
   12156:	d000      	beq.n	1215a <LORAWAN_SetAttr+0x2da>
   12158:	e717      	b.n	11f8a <LORAWAN_SetAttr+0x10a>
   1215a:	466b      	mov	r3, sp
   1215c:	781b      	ldrb	r3, [r3, #0]
   1215e:	34e9      	adds	r4, #233	; 0xe9
   12160:	7023      	strb	r3, [r4, #0]
   12162:	210a      	movs	r1, #10
   12164:	2000      	movs	r0, #0
   12166:	e7ea      	b.n	1213e <LORAWAN_SetAttr+0x2be>
   12168:	780b      	ldrb	r3, [r1, #0]
   1216a:	2103      	movs	r1, #3
   1216c:	34ff      	adds	r4, #255	; 0xff
   1216e:	7063      	strb	r3, [r4, #1]
   12170:	2000      	movs	r0, #0
   12172:	e710      	b.n	11f96 <LORAWAN_SetAttr+0x116>
   12174:	20002bd4 	.word	0x20002bd4
   12178:	00018655 	.word	0x00018655
   1217c:	0000c84d 	.word	0x0000c84d
   12180:	00013579 	.word	0x00013579
   12184:	0000022d 	.word	0x0000022d
   12188:	0000bff9 	.word	0x0000bff9
   1218c:	680b      	ldr	r3, [r1, #0]
   1218e:	260a      	movs	r6, #10
   12190:	1c5a      	adds	r2, r3, #1
   12192:	d09f      	beq.n	120d4 <LORAWAN_SetAttr+0x254>
   12194:	2115      	movs	r1, #21
   12196:	2000      	movs	r0, #0
   12198:	3488      	adds	r4, #136	; 0x88
   1219a:	6023      	str	r3, [r4, #0]
   1219c:	4b7f      	ldr	r3, [pc, #508]	; (1239c <LORAWAN_SetAttr+0x51c>)
   1219e:	4798      	blx	r3
   121a0:	e72c      	b.n	11ffc <LORAWAN_SetAttr+0x17c>
   121a2:	680b      	ldr	r3, [r1, #0]
   121a4:	260a      	movs	r6, #10
   121a6:	1c5a      	adds	r2, r3, #1
   121a8:	d100      	bne.n	121ac <LORAWAN_SetAttr+0x32c>
   121aa:	e793      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   121ac:	0031      	movs	r1, r6
   121ae:	348c      	adds	r4, #140	; 0x8c
   121b0:	6023      	str	r3, [r4, #0]
   121b2:	2001      	movs	r0, #1
   121b4:	e7f2      	b.n	1219c <LORAWAN_SetAttr+0x31c>
   121b6:	0026      	movs	r6, r4
   121b8:	880b      	ldrh	r3, [r1, #0]
   121ba:	36d0      	adds	r6, #208	; 0xd0
   121bc:	210c      	movs	r1, #12
   121be:	2000      	movs	r0, #0
   121c0:	4d76      	ldr	r5, [pc, #472]	; (1239c <LORAWAN_SetAttr+0x51c>)
   121c2:	8033      	strh	r3, [r6, #0]
   121c4:	47a8      	blx	r5
   121c6:	22fa      	movs	r2, #250	; 0xfa
   121c8:	8833      	ldrh	r3, [r6, #0]
   121ca:	0092      	lsls	r2, r2, #2
   121cc:	189b      	adds	r3, r3, r2
   121ce:	34d2      	adds	r4, #210	; 0xd2
   121d0:	8023      	strh	r3, [r4, #0]
   121d2:	210d      	movs	r1, #13
   121d4:	2000      	movs	r0, #0
   121d6:	e745      	b.n	12064 <LORAWAN_SetAttr+0x1e4>
   121d8:	780b      	ldrb	r3, [r1, #0]
   121da:	260a      	movs	r6, #10
   121dc:	2b0f      	cmp	r3, #15
   121de:	d900      	bls.n	121e2 <LORAWAN_SetAttr+0x362>
   121e0:	e778      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   121e2:	3498      	adds	r4, #152	; 0x98
   121e4:	7023      	strb	r3, [r4, #0]
   121e6:	e709      	b.n	11ffc <LORAWAN_SetAttr+0x17c>
   121e8:	880b      	ldrh	r3, [r1, #0]
   121ea:	34d4      	adds	r4, #212	; 0xd4
   121ec:	8023      	strh	r3, [r4, #0]
   121ee:	210e      	movs	r1, #14
   121f0:	e7be      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   121f2:	880b      	ldrh	r3, [r1, #0]
   121f4:	34d6      	adds	r4, #214	; 0xd6
   121f6:	8023      	strh	r3, [r4, #0]
   121f8:	210f      	movs	r1, #15
   121fa:	e7b9      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   121fc:	780b      	ldrb	r3, [r1, #0]
   121fe:	34dc      	adds	r4, #220	; 0xdc
   12200:	7023      	strb	r3, [r4, #0]
   12202:	2111      	movs	r1, #17
   12204:	e7b4      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   12206:	780b      	ldrb	r3, [r1, #0]
   12208:	34dd      	adds	r4, #221	; 0xdd
   1220a:	7023      	strb	r3, [r4, #0]
   1220c:	2112      	movs	r1, #18
   1220e:	e7af      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   12210:	880b      	ldrh	r3, [r1, #0]
   12212:	34da      	adds	r4, #218	; 0xda
   12214:	8023      	strh	r3, [r4, #0]
   12216:	2110      	movs	r1, #16
   12218:	e7aa      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   1221a:	780b      	ldrb	r3, [r1, #0]
   1221c:	34e2      	adds	r4, #226	; 0xe2
   1221e:	7023      	strb	r3, [r4, #0]
   12220:	2114      	movs	r1, #20
   12222:	e7a5      	b.n	12170 <LORAWAN_SetAttr+0x2f0>
   12224:	780b      	ldrb	r3, [r1, #0]
   12226:	34e1      	adds	r4, #225	; 0xe1
   12228:	7023      	strb	r3, [r4, #0]
   1222a:	e69b      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   1222c:	780b      	ldrb	r3, [r1, #0]
   1222e:	34e8      	adds	r4, #232	; 0xe8
   12230:	e7fa      	b.n	12228 <LORAWAN_SetAttr+0x3a8>
   12232:	2001      	movs	r0, #1
   12234:	780b      	ldrb	r3, [r1, #0]
   12236:	2110      	movs	r1, #16
   12238:	3484      	adds	r4, #132	; 0x84
   1223a:	4003      	ands	r3, r0
   1223c:	011a      	lsls	r2, r3, #4
   1223e:	7823      	ldrb	r3, [r4, #0]
   12240:	438b      	bics	r3, r1
   12242:	4313      	orrs	r3, r2
   12244:	7023      	strb	r3, [r4, #0]
   12246:	3905      	subs	r1, #5
   12248:	e6a5      	b.n	11f96 <LORAWAN_SetAttr+0x116>
   1224a:	7909      	ldrb	r1, [r1, #4]
   1224c:	7828      	ldrb	r0, [r5, #0]
   1224e:	4b54      	ldr	r3, [pc, #336]	; (123a0 <LORAWAN_SetAttr+0x520>)
   12250:	4798      	blx	r3
   12252:	0006      	movs	r6, r0
   12254:	e73e      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   12256:	7909      	ldrb	r1, [r1, #4]
   12258:	7828      	ldrb	r0, [r5, #0]
   1225a:	4b52      	ldr	r3, [pc, #328]	; (123a4 <LORAWAN_SetAttr+0x524>)
   1225c:	e7f8      	b.n	12250 <LORAWAN_SetAttr+0x3d0>
   1225e:	7808      	ldrb	r0, [r1, #0]
   12260:	4b51      	ldr	r3, [pc, #324]	; (123a8 <LORAWAN_SetAttr+0x528>)
   12262:	6849      	ldr	r1, [r1, #4]
   12264:	4798      	blx	r3
   12266:	e7f4      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   12268:	7909      	ldrb	r1, [r1, #4]
   1226a:	6828      	ldr	r0, [r5, #0]
   1226c:	4b4f      	ldr	r3, [pc, #316]	; (123ac <LORAWAN_SetAttr+0x52c>)
   1226e:	4798      	blx	r3
   12270:	e7ef      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   12272:	786b      	ldrb	r3, [r5, #1]
   12274:	7828      	ldrb	r0, [r5, #0]
   12276:	021b      	lsls	r3, r3, #8
   12278:	4303      	orrs	r3, r0
   1227a:	78a8      	ldrb	r0, [r5, #2]
   1227c:	7909      	ldrb	r1, [r1, #4]
   1227e:	0400      	lsls	r0, r0, #16
   12280:	4303      	orrs	r3, r0
   12282:	78e8      	ldrb	r0, [r5, #3]
   12284:	0600      	lsls	r0, r0, #24
   12286:	4318      	orrs	r0, r3
   12288:	4b49      	ldr	r3, [pc, #292]	; (123b0 <LORAWAN_SetAttr+0x530>)
   1228a:	e7f0      	b.n	1226e <LORAWAN_SetAttr+0x3ee>
   1228c:	7808      	ldrb	r0, [r1, #0]
   1228e:	4b49      	ldr	r3, [pc, #292]	; (123b4 <LORAWAN_SetAttr+0x534>)
   12290:	4798      	blx	r3
   12292:	e7de      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   12294:	8808      	ldrh	r0, [r1, #0]
   12296:	4b48      	ldr	r3, [pc, #288]	; (123b8 <LORAWAN_SetAttr+0x538>)
   12298:	4798      	blx	r3
   1229a:	e663      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   1229c:	4b47      	ldr	r3, [pc, #284]	; (123bc <LORAWAN_SetAttr+0x53c>)
   1229e:	6019      	str	r1, [r3, #0]
   122a0:	e673      	b.n	11f8a <LORAWAN_SetAttr+0x10a>
   122a2:	7809      	ldrb	r1, [r1, #0]
   122a4:	7868      	ldrb	r0, [r5, #1]
   122a6:	4b46      	ldr	r3, [pc, #280]	; (123c0 <LORAWAN_SetAttr+0x540>)
   122a8:	4798      	blx	r3
   122aa:	e7d2      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   122ac:	7809      	ldrb	r1, [r1, #0]
   122ae:	4b45      	ldr	r3, [pc, #276]	; (123c4 <LORAWAN_SetAttr+0x544>)
   122b0:	1c68      	adds	r0, r5, #1
   122b2:	4798      	blx	r3
   122b4:	e7cd      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   122b6:	7809      	ldrb	r1, [r1, #0]
   122b8:	1c68      	adds	r0, r5, #1
   122ba:	4b43      	ldr	r3, [pc, #268]	; (123c8 <LORAWAN_SetAttr+0x548>)
   122bc:	e7f9      	b.n	122b2 <LORAWAN_SetAttr+0x432>
   122be:	7809      	ldrb	r1, [r1, #0]
   122c0:	6868      	ldr	r0, [r5, #4]
   122c2:	4b42      	ldr	r3, [pc, #264]	; (123cc <LORAWAN_SetAttr+0x54c>)
   122c4:	e7f5      	b.n	122b2 <LORAWAN_SetAttr+0x432>
   122c6:	7809      	ldrb	r1, [r1, #0]
   122c8:	6868      	ldr	r0, [r5, #4]
   122ca:	4b41      	ldr	r3, [pc, #260]	; (123d0 <LORAWAN_SetAttr+0x550>)
   122cc:	e7f1      	b.n	122b2 <LORAWAN_SetAttr+0x432>
   122ce:	7809      	ldrb	r1, [r1, #0]
   122d0:	6868      	ldr	r0, [r5, #4]
   122d2:	4b40      	ldr	r3, [pc, #256]	; (123d4 <LORAWAN_SetAttr+0x554>)
   122d4:	e7ed      	b.n	122b2 <LORAWAN_SetAttr+0x432>
   122d6:	7809      	ldrb	r1, [r1, #0]
   122d8:	6868      	ldr	r0, [r5, #4]
   122da:	4b3f      	ldr	r3, [pc, #252]	; (123d8 <LORAWAN_SetAttr+0x558>)
   122dc:	e7e9      	b.n	122b2 <LORAWAN_SetAttr+0x432>
   122de:	7809      	ldrb	r1, [r1, #0]
   122e0:	7868      	ldrb	r0, [r5, #1]
   122e2:	4b3e      	ldr	r3, [pc, #248]	; (123dc <LORAWAN_SetAttr+0x55c>)
   122e4:	e7e0      	b.n	122a8 <LORAWAN_SetAttr+0x428>
   122e6:	7809      	ldrb	r1, [r1, #0]
   122e8:	7868      	ldrb	r0, [r5, #1]
   122ea:	4b3d      	ldr	r3, [pc, #244]	; (123e0 <LORAWAN_SetAttr+0x560>)
   122ec:	e7dc      	b.n	122a8 <LORAWAN_SetAttr+0x428>
   122ee:	2300      	movs	r3, #0
   122f0:	466a      	mov	r2, sp
   122f2:	7809      	ldrb	r1, [r1, #0]
   122f4:	7013      	strb	r3, [r2, #0]
   122f6:	4299      	cmp	r1, r3
   122f8:	d014      	beq.n	12324 <LORAWAN_SetAttr+0x4a4>
   122fa:	0022      	movs	r2, r4
   122fc:	2102      	movs	r1, #2
   122fe:	32ff      	adds	r2, #255	; 0xff
   12300:	7f53      	ldrb	r3, [r2, #29]
   12302:	420b      	tst	r3, r1
   12304:	d001      	beq.n	1230a <LORAWAN_SetAttr+0x48a>
   12306:	438b      	bics	r3, r1
   12308:	7753      	strb	r3, [r2, #29]
   1230a:	2220      	movs	r2, #32
   1230c:	34ff      	adds	r4, #255	; 0xff
   1230e:	7f63      	ldrb	r3, [r4, #29]
   12310:	4213      	tst	r3, r2
   12312:	d100      	bne.n	12316 <LORAWAN_SetAttr+0x496>
   12314:	e626      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   12316:	4393      	bics	r3, r2
   12318:	7763      	strb	r3, [r4, #29]
   1231a:	4669      	mov	r1, sp
   1231c:	4b31      	ldr	r3, [pc, #196]	; (123e4 <LORAWAN_SetAttr+0x564>)
   1231e:	2038      	movs	r0, #56	; 0x38
   12320:	4798      	blx	r3
   12322:	e61f      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   12324:	4a30      	ldr	r2, [pc, #192]	; (123e8 <LORAWAN_SetAttr+0x568>)
   12326:	4b31      	ldr	r3, [pc, #196]	; (123ec <LORAWAN_SetAttr+0x56c>)
   12328:	200e      	movs	r0, #14
   1232a:	4798      	blx	r3
   1232c:	e61a      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   1232e:	466b      	mov	r3, sp
   12330:	780a      	ldrb	r2, [r1, #0]
   12332:	34ff      	adds	r4, #255	; 0xff
   12334:	701a      	strb	r2, [r3, #0]
   12336:	2320      	movs	r3, #32
   12338:	2a00      	cmp	r2, #0
   1233a:	d007      	beq.n	1234c <LORAWAN_SetAttr+0x4cc>
   1233c:	7f62      	ldrb	r2, [r4, #29]
   1233e:	4313      	orrs	r3, r2
   12340:	7763      	strb	r3, [r4, #29]
   12342:	4669      	mov	r1, sp
   12344:	4b27      	ldr	r3, [pc, #156]	; (123e4 <LORAWAN_SetAttr+0x564>)
   12346:	2038      	movs	r0, #56	; 0x38
   12348:	4798      	blx	r3
   1234a:	e782      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   1234c:	7f62      	ldrb	r2, [r4, #29]
   1234e:	260a      	movs	r6, #10
   12350:	421a      	tst	r2, r3
   12352:	d100      	bne.n	12356 <LORAWAN_SetAttr+0x4d6>
   12354:	e6be      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   12356:	439a      	bics	r2, r3
   12358:	7762      	strb	r2, [r4, #29]
   1235a:	e7f2      	b.n	12342 <LORAWAN_SetAttr+0x4c2>
   1235c:	780b      	ldrb	r3, [r1, #0]
   1235e:	260a      	movs	r6, #10
   12360:	2b08      	cmp	r3, #8
   12362:	d900      	bls.n	12366 <LORAWAN_SetAttr+0x4e6>
   12364:	e6b6      	b.n	120d4 <LORAWAN_SetAttr+0x254>
   12366:	228b      	movs	r2, #139	; 0x8b
   12368:	0092      	lsls	r2, r2, #2
   1236a:	54a3      	strb	r3, [r4, r2]
   1236c:	210d      	movs	r1, #13
   1236e:	e720      	b.n	121b2 <LORAWAN_SetAttr+0x332>
   12370:	780a      	ldrb	r2, [r1, #0]
   12372:	4b1f      	ldr	r3, [pc, #124]	; (123f0 <LORAWAN_SetAttr+0x570>)
   12374:	54e2      	strb	r2, [r4, r3]
   12376:	e5f5      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   12378:	4b1e      	ldr	r3, [pc, #120]	; (123f4 <LORAWAN_SetAttr+0x574>)
   1237a:	4798      	blx	r3
   1237c:	e769      	b.n	12252 <LORAWAN_SetAttr+0x3d2>
   1237e:	4b1e      	ldr	r3, [pc, #120]	; (123f8 <LORAWAN_SetAttr+0x578>)
   12380:	e7fb      	b.n	1237a <LORAWAN_SetAttr+0x4fa>
   12382:	780a      	ldrb	r2, [r1, #0]
   12384:	2302      	movs	r3, #2
   12386:	34ff      	adds	r4, #255	; 0xff
   12388:	2a00      	cmp	r2, #0
   1238a:	d003      	beq.n	12394 <LORAWAN_SetAttr+0x514>
   1238c:	7f62      	ldrb	r2, [r4, #29]
   1238e:	4313      	orrs	r3, r2
   12390:	7763      	strb	r3, [r4, #29]
   12392:	e5e7      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   12394:	7f62      	ldrb	r2, [r4, #29]
   12396:	439a      	bics	r2, r3
   12398:	7762      	strb	r2, [r4, #29]
   1239a:	e5e3      	b.n	11f64 <LORAWAN_SetAttr+0xe4>
   1239c:	0000c84d 	.word	0x0000c84d
   123a0:	000112e5 	.word	0x000112e5
   123a4:	00011275 	.word	0x00011275
   123a8:	0000fe6d 	.word	0x0000fe6d
   123ac:	0000fde5 	.word	0x0000fde5
   123b0:	0000fe21 	.word	0x0000fe21
   123b4:	00011e01 	.word	0x00011e01
   123b8:	0000eec1 	.word	0x0000eec1
   123bc:	20002f2c 	.word	0x20002f2c
   123c0:	00012dad 	.word	0x00012dad
   123c4:	0001300d 	.word	0x0001300d
   123c8:	00013059 	.word	0x00013059
   123cc:	00012fc5 	.word	0x00012fc5
   123d0:	000130a5 	.word	0x000130a5
   123d4:	000130c5 	.word	0x000130c5
   123d8:	000130e1 	.word	0x000130e1
   123dc:	00013125 	.word	0x00013125
   123e0:	00013161 	.word	0x00013161
   123e4:	0000c105 	.word	0x0000c105
   123e8:	20002cf0 	.word	0x20002cf0
   123ec:	0000bfdd 	.word	0x0000bfdd
   123f0:	0000022d 	.word	0x0000022d
   123f4:	0000ef5d 	.word	0x0000ef5d
   123f8:	0000ef85 	.word	0x0000ef85

000123fc <LORAWAN_Reset>:
   123fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   123fe:	b087      	sub	sp, #28
   12400:	ab02      	add	r3, sp, #8
   12402:	1ddd      	adds	r5, r3, #7
   12404:	23ff      	movs	r3, #255	; 0xff
   12406:	4c84      	ldr	r4, [pc, #528]	; (12618 <LORAWAN_Reset+0x21c>)
   12408:	702b      	strb	r3, [r5, #0]
   1240a:	0023      	movs	r3, r4
   1240c:	9001      	str	r0, [sp, #4]
   1240e:	33f8      	adds	r3, #248	; 0xf8
   12410:	781b      	ldrb	r3, [r3, #0]
   12412:	2b00      	cmp	r3, #0
   12414:	d001      	beq.n	1241a <LORAWAN_Reset+0x1e>
   12416:	4b81      	ldr	r3, [pc, #516]	; (1261c <LORAWAN_Reset+0x220>)
   12418:	4798      	blx	r3
   1241a:	002a      	movs	r2, r5
   1241c:	4b80      	ldr	r3, [pc, #512]	; (12620 <LORAWAN_Reset+0x224>)
   1241e:	2100      	movs	r1, #0
   12420:	2024      	movs	r0, #36	; 0x24
   12422:	4798      	blx	r3
   12424:	782b      	ldrb	r3, [r5, #0]
   12426:	9a01      	ldr	r2, [sp, #4]
   12428:	4293      	cmp	r3, r2
   1242a:	d001      	beq.n	12430 <LORAWAN_Reset+0x34>
   1242c:	4b7d      	ldr	r3, [pc, #500]	; (12624 <LORAWAN_Reset+0x228>)
   1242e:	4798      	blx	r3
   12430:	238f      	movs	r3, #143	; 0x8f
   12432:	4a7d      	ldr	r2, [pc, #500]	; (12628 <LORAWAN_Reset+0x22c>)
   12434:	009b      	lsls	r3, r3, #2
   12436:	50e2      	str	r2, [r4, r3]
   12438:	2334      	movs	r3, #52	; 0x34
   1243a:	4a7c      	ldr	r2, [pc, #496]	; (1262c <LORAWAN_Reset+0x230>)
   1243c:	497c      	ldr	r1, [pc, #496]	; (12630 <LORAWAN_Reset+0x234>)
   1243e:	7053      	strb	r3, [r2, #1]
   12440:	2000      	movs	r0, #0
   12442:	4b7c      	ldr	r3, [pc, #496]	; (12634 <LORAWAN_Reset+0x238>)
   12444:	4798      	blx	r3
   12446:	0023      	movs	r3, r4
   12448:	2201      	movs	r2, #1
   1244a:	33fd      	adds	r3, #253	; 0xfd
   1244c:	701a      	strb	r2, [r3, #0]
   1244e:	0023      	movs	r3, r4
   12450:	2205      	movs	r2, #5
   12452:	33fe      	adds	r3, #254	; 0xfe
   12454:	701a      	strb	r2, [r3, #0]
   12456:	0022      	movs	r2, r4
   12458:	21ff      	movs	r1, #255	; 0xff
   1245a:	32e5      	adds	r2, #229	; 0xe5
   1245c:	7011      	strb	r1, [r2, #0]
   1245e:	0022      	movs	r2, r4
   12460:	2500      	movs	r5, #0
   12462:	32e6      	adds	r2, #230	; 0xe6
   12464:	7015      	strb	r5, [r2, #0]
   12466:	0022      	movs	r2, r4
   12468:	32ce      	adds	r2, #206	; 0xce
   1246a:	8015      	strh	r5, [r2, #0]
   1246c:	0022      	movs	r2, r4
   1246e:	328c      	adds	r2, #140	; 0x8c
   12470:	6015      	str	r5, [r2, #0]
   12472:	0022      	movs	r2, r4
   12474:	3288      	adds	r2, #136	; 0x88
   12476:	6015      	str	r5, [r2, #0]
   12478:	0022      	movs	r2, r4
   1247a:	32cc      	adds	r2, #204	; 0xcc
   1247c:	8015      	strh	r5, [r2, #0]
   1247e:	2291      	movs	r2, #145	; 0x91
   12480:	3901      	subs	r1, #1
   12482:	39ff      	subs	r1, #255	; 0xff
   12484:	0092      	lsls	r2, r2, #2
   12486:	50a1      	str	r1, [r4, r2]
   12488:	0022      	movs	r2, r4
   1248a:	3298      	adds	r2, #152	; 0x98
   1248c:	7015      	strb	r5, [r2, #0]
   1248e:	0022      	movs	r2, r4
   12490:	32ca      	adds	r2, #202	; 0xca
   12492:	8015      	strh	r5, [r2, #0]
   12494:	0022      	movs	r2, r4
   12496:	32f6      	adds	r2, #246	; 0xf6
   12498:	7015      	strb	r5, [r2, #0]
   1249a:	0022      	movs	r2, r4
   1249c:	32f7      	adds	r2, #247	; 0xf7
   1249e:	7015      	strb	r5, [r2, #0]
   124a0:	0022      	movs	r2, r4
   124a2:	3107      	adds	r1, #7
   124a4:	32fc      	adds	r2, #252	; 0xfc
   124a6:	6091      	str	r1, [r2, #8]
   124a8:	60d5      	str	r5, [r2, #12]
   124aa:	841d      	strh	r5, [r3, #32]
   124ac:	845d      	strh	r5, [r3, #34]	; 0x22
   124ae:	2210      	movs	r2, #16
   124b0:	0029      	movs	r1, r5
   124b2:	4b61      	ldr	r3, [pc, #388]	; (12638 <LORAWAN_Reset+0x23c>)
   124b4:	4861      	ldr	r0, [pc, #388]	; (1263c <LORAWAN_Reset+0x240>)
   124b6:	4798      	blx	r3
   124b8:	2388      	movs	r3, #136	; 0x88
   124ba:	2201      	movs	r2, #1
   124bc:	2607      	movs	r6, #7
   124be:	009b      	lsls	r3, r3, #2
   124c0:	54e2      	strb	r2, [r4, r3]
   124c2:	0029      	movs	r1, r5
   124c4:	0032      	movs	r2, r6
   124c6:	4b5c      	ldr	r3, [pc, #368]	; (12638 <LORAWAN_Reset+0x23c>)
   124c8:	485d      	ldr	r0, [pc, #372]	; (12640 <LORAWAN_Reset+0x244>)
   124ca:	4798      	blx	r3
   124cc:	238b      	movs	r3, #139	; 0x8b
   124ce:	009b      	lsls	r3, r3, #2
   124d0:	54e5      	strb	r5, [r4, r3]
   124d2:	0023      	movs	r3, r4
   124d4:	3394      	adds	r3, #148	; 0x94
   124d6:	801d      	strh	r5, [r3, #0]
   124d8:	0023      	movs	r3, r4
   124da:	33e2      	adds	r3, #226	; 0xe2
   124dc:	701e      	strb	r6, [r3, #0]
   124de:	0023      	movs	r3, r4
   124e0:	33e1      	adds	r3, #225	; 0xe1
   124e2:	701d      	strb	r5, [r3, #0]
   124e4:	0023      	movs	r3, r4
   124e6:	33e4      	adds	r3, #228	; 0xe4
   124e8:	701d      	strb	r5, [r3, #0]
   124ea:	0023      	movs	r3, r4
   124ec:	0027      	movs	r7, r4
   124ee:	33e3      	adds	r3, #227	; 0xe3
   124f0:	3708      	adds	r7, #8
   124f2:	701d      	strb	r5, [r3, #0]
   124f4:	9801      	ldr	r0, [sp, #4]
   124f6:	4b53      	ldr	r3, [pc, #332]	; (12644 <LORAWAN_Reset+0x248>)
   124f8:	67fd      	str	r5, [r7, #124]	; 0x7c
   124fa:	4798      	blx	r3
   124fc:	0007      	movs	r7, r0
   124fe:	2808      	cmp	r0, #8
   12500:	d000      	beq.n	12504 <LORAWAN_Reset+0x108>
   12502:	e087      	b.n	12614 <LORAWAN_Reset+0x218>
   12504:	4e50      	ldr	r6, [pc, #320]	; (12648 <LORAWAN_Reset+0x24c>)
   12506:	4a51      	ldr	r2, [pc, #324]	; (1264c <LORAWAN_Reset+0x250>)
   12508:	0029      	movs	r1, r5
   1250a:	47b0      	blx	r6
   1250c:	4a50      	ldr	r2, [pc, #320]	; (12650 <LORAWAN_Reset+0x254>)
   1250e:	0029      	movs	r1, r5
   12510:	200e      	movs	r0, #14
   12512:	47b0      	blx	r6
   12514:	34e8      	adds	r4, #232	; 0xe8
   12516:	4a4f      	ldr	r2, [pc, #316]	; (12654 <LORAWAN_Reset+0x258>)
   12518:	0029      	movs	r1, r5
   1251a:	2006      	movs	r0, #6
   1251c:	7025      	strb	r5, [r4, #0]
   1251e:	47b0      	blx	r6
   12520:	4b4d      	ldr	r3, [pc, #308]	; (12658 <LORAWAN_Reset+0x25c>)
   12522:	4798      	blx	r3
   12524:	466a      	mov	r2, sp
   12526:	4b41      	ldr	r3, [pc, #260]	; (1262c <LORAWAN_Reset+0x230>)
   12528:	7912      	ldrb	r2, [r2, #4]
   1252a:	0029      	movs	r1, r5
   1252c:	701a      	strb	r2, [r3, #0]
   1252e:	0028      	movs	r0, r5
   12530:	4b4a      	ldr	r3, [pc, #296]	; (1265c <LORAWAN_Reset+0x260>)
   12532:	4798      	blx	r3
   12534:	2210      	movs	r2, #16
   12536:	4b3d      	ldr	r3, [pc, #244]	; (1262c <LORAWAN_Reset+0x230>)
   12538:	7f5b      	ldrb	r3, [r3, #29]
   1253a:	4213      	tst	r3, r2
   1253c:	d006      	beq.n	1254c <LORAWAN_Reset+0x150>
   1253e:	ab02      	add	r3, sp, #8
   12540:	1d99      	adds	r1, r3, #6
   12542:	2301      	movs	r3, #1
   12544:	0038      	movs	r0, r7
   12546:	700b      	strb	r3, [r1, #0]
   12548:	4b3a      	ldr	r3, [pc, #232]	; (12634 <LORAWAN_Reset+0x238>)
   1254a:	4798      	blx	r3
   1254c:	4b44      	ldr	r3, [pc, #272]	; (12660 <LORAWAN_Reset+0x264>)
   1254e:	4945      	ldr	r1, [pc, #276]	; (12664 <LORAWAN_Reset+0x268>)
   12550:	201e      	movs	r0, #30
   12552:	4798      	blx	r3
   12554:	4c30      	ldr	r4, [pc, #192]	; (12618 <LORAWAN_Reset+0x21c>)
   12556:	0023      	movs	r3, r4
   12558:	33ff      	adds	r3, #255	; 0xff
   1255a:	7f5b      	ldrb	r3, [r3, #29]
   1255c:	075b      	lsls	r3, r3, #29
   1255e:	d507      	bpl.n	12570 <LORAWAN_Reset+0x174>
   12560:	2100      	movs	r1, #0
   12562:	aa04      	add	r2, sp, #16
   12564:	2031      	movs	r0, #49	; 0x31
   12566:	47b0      	blx	r6
   12568:	a904      	add	r1, sp, #16
   1256a:	2028      	movs	r0, #40	; 0x28
   1256c:	4b3e      	ldr	r3, [pc, #248]	; (12668 <LORAWAN_Reset+0x26c>)
   1256e:	4798      	blx	r3
   12570:	4a3e      	ldr	r2, [pc, #248]	; (1266c <LORAWAN_Reset+0x270>)
   12572:	2100      	movs	r1, #0
   12574:	2009      	movs	r0, #9
   12576:	47b0      	blx	r6
   12578:	4a3d      	ldr	r2, [pc, #244]	; (12670 <LORAWAN_Reset+0x274>)
   1257a:	2100      	movs	r1, #0
   1257c:	200a      	movs	r0, #10
   1257e:	47b0      	blx	r6
   12580:	4a3c      	ldr	r2, [pc, #240]	; (12674 <LORAWAN_Reset+0x278>)
   12582:	2100      	movs	r1, #0
   12584:	2035      	movs	r0, #53	; 0x35
   12586:	47b0      	blx	r6
   12588:	ad04      	add	r5, sp, #16
   1258a:	4a3b      	ldr	r2, [pc, #236]	; (12678 <LORAWAN_Reset+0x27c>)
   1258c:	2100      	movs	r1, #0
   1258e:	2036      	movs	r0, #54	; 0x36
   12590:	47b0      	blx	r6
   12592:	002a      	movs	r2, r5
   12594:	2100      	movs	r1, #0
   12596:	2014      	movs	r0, #20
   12598:	47b0      	blx	r6
   1259a:	0023      	movs	r3, r4
   1259c:	782a      	ldrb	r2, [r5, #0]
   1259e:	33f3      	adds	r3, #243	; 0xf3
   125a0:	701a      	strb	r2, [r3, #0]
   125a2:	0023      	movs	r3, r4
   125a4:	786a      	ldrb	r2, [r5, #1]
   125a6:	33f4      	adds	r3, #244	; 0xf4
   125a8:	701a      	strb	r2, [r3, #0]
   125aa:	0023      	movs	r3, r4
   125ac:	2500      	movs	r5, #0
   125ae:	33de      	adds	r3, #222	; 0xde
   125b0:	0029      	movs	r1, r5
   125b2:	801d      	strh	r5, [r3, #0]
   125b4:	2265      	movs	r2, #101	; 0x65
   125b6:	0020      	movs	r0, r4
   125b8:	4b1f      	ldr	r3, [pc, #124]	; (12638 <LORAWAN_Reset+0x23c>)
   125ba:	4798      	blx	r3
   125bc:	0023      	movs	r3, r4
   125be:	22fa      	movs	r2, #250	; 0xfa
   125c0:	33d0      	adds	r3, #208	; 0xd0
   125c2:	0092      	lsls	r2, r2, #2
   125c4:	801a      	strh	r2, [r3, #0]
   125c6:	0023      	movs	r3, r4
   125c8:	22fa      	movs	r2, #250	; 0xfa
   125ca:	33d2      	adds	r3, #210	; 0xd2
   125cc:	00d2      	lsls	r2, r2, #3
   125ce:	801a      	strh	r2, [r3, #0]
   125d0:	0023      	movs	r3, r4
   125d2:	4a2a      	ldr	r2, [pc, #168]	; (1267c <LORAWAN_Reset+0x280>)
   125d4:	33d4      	adds	r3, #212	; 0xd4
   125d6:	801a      	strh	r2, [r3, #0]
   125d8:	0023      	movs	r3, r4
   125da:	4a29      	ldr	r2, [pc, #164]	; (12680 <LORAWAN_Reset+0x284>)
   125dc:	33d6      	adds	r3, #214	; 0xd6
   125de:	801a      	strh	r2, [r3, #0]
   125e0:	4b28      	ldr	r3, [pc, #160]	; (12684 <LORAWAN_Reset+0x288>)
   125e2:	4798      	blx	r3
   125e4:	4b28      	ldr	r3, [pc, #160]	; (12688 <LORAWAN_Reset+0x28c>)
   125e6:	4929      	ldr	r1, [pc, #164]	; (1268c <LORAWAN_Reset+0x290>)
   125e8:	4798      	blx	r3
   125ea:	23fa      	movs	r3, #250	; 0xfa
   125ec:	009b      	lsls	r3, r3, #2
   125ee:	18c9      	adds	r1, r1, r3
   125f0:	0023      	movs	r3, r4
   125f2:	33da      	adds	r3, #218	; 0xda
   125f4:	8019      	strh	r1, [r3, #0]
   125f6:	0023      	movs	r3, r4
   125f8:	2220      	movs	r2, #32
   125fa:	33dd      	adds	r3, #221	; 0xdd
   125fc:	701a      	strb	r2, [r3, #0]
   125fe:	2340      	movs	r3, #64	; 0x40
   12600:	34dc      	adds	r4, #220	; 0xdc
   12602:	7023      	strb	r3, [r4, #0]
   12604:	0028      	movs	r0, r5
   12606:	4b22      	ldr	r3, [pc, #136]	; (12690 <LORAWAN_Reset+0x294>)
   12608:	4798      	blx	r3
   1260a:	4b22      	ldr	r3, [pc, #136]	; (12694 <LORAWAN_Reset+0x298>)
   1260c:	4798      	blx	r3
   1260e:	0038      	movs	r0, r7
   12610:	b007      	add	sp, #28
   12612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12614:	270a      	movs	r7, #10
   12616:	e7fa      	b.n	1260e <LORAWAN_Reset+0x212>
   12618:	20002bd4 	.word	0x20002bd4
   1261c:	0000e579 	.word	0x0000e579
   12620:	0000fed1 	.word	0x0000fed1
   12624:	0000c2c5 	.word	0x0000c2c5
   12628:	01054000 	.word	0x01054000
   1262c:	20002cd3 	.word	0x20002cd3
   12630:	20002cd4 	.word	0x20002cd4
   12634:	00013579 	.word	0x00013579
   12638:	00018779 	.word	0x00018779
   1263c:	20002ce0 	.word	0x20002ce0
   12640:	20002df7 	.word	0x20002df7
   12644:	0000c179 	.word	0x0000c179
   12648:	0000bfdd 	.word	0x0000bfdd
   1264c:	20002c3d 	.word	0x20002c3d
   12650:	20002cf0 	.word	0x20002cf0
   12654:	20002cc9 	.word	0x20002cc9
   12658:	00013775 	.word	0x00013775
   1265c:	0000c84d 	.word	0x0000c84d
   12660:	00013489 	.word	0x00013489
   12664:	20002dff 	.word	0x20002dff
   12668:	00011e81 	.word	0x00011e81
   1266c:	20002c42 	.word	0x20002c42
   12670:	20002c3e 	.word	0x20002c3e
   12674:	20002cbd 	.word	0x20002cbd
   12678:	20002cbb 	.word	0x20002cbb
   1267c:	00001388 	.word	0x00001388
   12680:	00001770 	.word	0x00001770
   12684:	00018919 	.word	0x00018919
   12688:	00015231 	.word	0x00015231
   1268c:	000007d1 	.word	0x000007d1
   12690:	0000eec1 	.word	0x0000eec1
   12694:	00012d25 	.word	0x00012d25

00012698 <AssemblePacket>:
   12698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1269a:	2710      	movs	r7, #16
   1269c:	b08f      	sub	sp, #60	; 0x3c
   1269e:	9308      	str	r3, [sp, #32]
   126a0:	ab0d      	add	r3, sp, #52	; 0x34
   126a2:	801f      	strh	r7, [r3, #0]
   126a4:	231e      	movs	r3, #30
   126a6:	920a      	str	r2, [sp, #40]	; 0x28
   126a8:	aa06      	add	r2, sp, #24
   126aa:	189b      	adds	r3, r3, r2
   126ac:	2500      	movs	r5, #0
   126ae:	2210      	movs	r2, #16
   126b0:	ac0c      	add	r4, sp, #48	; 0x30
   126b2:	9006      	str	r0, [sp, #24]
   126b4:	910b      	str	r1, [sp, #44]	; 0x2c
   126b6:	32ff      	adds	r2, #255	; 0xff
   126b8:	0029      	movs	r1, r5
   126ba:	4ed1      	ldr	r6, [pc, #836]	; (12a00 <AssemblePacket+0x368>)
   126bc:	7025      	strb	r5, [r4, #0]
   126be:	48d1      	ldr	r0, [pc, #836]	; (12a04 <AssemblePacket+0x36c>)
   126c0:	801d      	strh	r5, [r3, #0]
   126c2:	47b0      	blx	r6
   126c4:	003a      	movs	r2, r7
   126c6:	0029      	movs	r1, r5
   126c8:	48cf      	ldr	r0, [pc, #828]	; (12a08 <AssemblePacket+0x370>)
   126ca:	47b0      	blx	r6
   126cc:	221f      	movs	r2, #31
   126ce:	7823      	ldrb	r3, [r4, #0]
   126d0:	9906      	ldr	r1, [sp, #24]
   126d2:	4013      	ands	r3, r2
   126d4:	42a9      	cmp	r1, r5
   126d6:	d100      	bne.n	126da <AssemblePacket+0x42>
   126d8:	e0dc      	b.n	12894 <AssemblePacket+0x1fc>
   126da:	3a9f      	subs	r2, #159	; 0x9f
   126dc:	4313      	orrs	r3, r2
   126de:	7023      	strb	r3, [r4, #0]
   126e0:	4bca      	ldr	r3, [pc, #808]	; (12a0c <AssemblePacket+0x374>)
   126e2:	3281      	adds	r2, #129	; 0x81
   126e4:	3394      	adds	r3, #148	; 0x94
   126e6:	7819      	ldrb	r1, [r3, #0]
   126e8:	430a      	orrs	r2, r1
   126ea:	701a      	strb	r2, [r3, #0]
   126ec:	22e0      	movs	r2, #224	; 0xe0
   126ee:	7823      	ldrb	r3, [r4, #0]
   126f0:	48c4      	ldr	r0, [pc, #784]	; (12a04 <AssemblePacket+0x36c>)
   126f2:	4013      	ands	r3, r2
   126f4:	7023      	strb	r3, [r4, #0]
   126f6:	4cc5      	ldr	r4, [pc, #788]	; (12a0c <AssemblePacket+0x374>)
   126f8:	7403      	strb	r3, [r0, #16]
   126fa:	3adc      	subs	r2, #220	; 0xdc
   126fc:	4bc4      	ldr	r3, [pc, #784]	; (12a10 <AssemblePacket+0x378>)
   126fe:	3011      	adds	r0, #17
   12700:	1c61      	adds	r1, r4, #1
   12702:	4798      	blx	r3
   12704:	2215      	movs	r2, #21
   12706:	ab0d      	add	r3, sp, #52	; 0x34
   12708:	0025      	movs	r5, r4
   1270a:	801a      	strh	r2, [r3, #0]
   1270c:	2600      	movs	r6, #0
   1270e:	466b      	mov	r3, sp
   12710:	3584      	adds	r5, #132	; 0x84
   12712:	761e      	strb	r6, [r3, #24]
   12714:	782b      	ldrb	r3, [r5, #0]
   12716:	069b      	lsls	r3, r3, #26
   12718:	d400      	bmi.n	1271c <AssemblePacket+0x84>
   1271a:	e130      	b.n	1297e <AssemblePacket+0x2e6>
   1271c:	0027      	movs	r7, r4
   1271e:	4bbd      	ldr	r3, [pc, #756]	; (12a14 <AssemblePacket+0x37c>)
   12720:	37f3      	adds	r7, #243	; 0xf3
   12722:	781a      	ldrb	r2, [r3, #0]
   12724:	783b      	ldrb	r3, [r7, #0]
   12726:	429a      	cmp	r2, r3
   12728:	d31e      	bcc.n	12768 <AssemblePacket+0xd0>
   1272a:	2180      	movs	r1, #128	; 0x80
   1272c:	466b      	mov	r3, sp
   1272e:	0022      	movs	r2, r4
   12730:	4249      	negs	r1, r1
   12732:	32ca      	adds	r2, #202	; 0xca
   12734:	7619      	strb	r1, [r3, #24]
   12736:	8813      	ldrh	r3, [r2, #0]
   12738:	3301      	adds	r3, #1
   1273a:	b29b      	uxth	r3, r3
   1273c:	8013      	strh	r3, [r2, #0]
   1273e:	0022      	movs	r2, r4
   12740:	32dc      	adds	r2, #220	; 0xdc
   12742:	7812      	ldrb	r2, [r2, #0]
   12744:	4293      	cmp	r3, r2
   12746:	d30f      	bcc.n	12768 <AssemblePacket+0xd0>
   12748:	2040      	movs	r0, #64	; 0x40
   1274a:	4308      	orrs	r0, r1
   1274c:	9006      	str	r0, [sp, #24]
   1274e:	0020      	movs	r0, r4
   12750:	3094      	adds	r0, #148	; 0x94
   12752:	7801      	ldrb	r1, [r0, #0]
   12754:	4684      	mov	ip, r0
   12756:	2010      	movs	r0, #16
   12758:	4301      	orrs	r1, r0
   1275a:	4660      	mov	r0, ip
   1275c:	7001      	strb	r1, [r0, #0]
   1275e:	4293      	cmp	r3, r2
   12760:	d000      	beq.n	12764 <AssemblePacket+0xcc>
   12762:	e09b      	b.n	1289c <AssemblePacket+0x204>
   12764:	34f6      	adds	r4, #246	; 0xf6
   12766:	7026      	strb	r6, [r4, #0]
   12768:	4da8      	ldr	r5, [pc, #672]	; (12a0c <AssemblePacket+0x374>)
   1276a:	2102      	movs	r1, #2
   1276c:	002a      	movs	r2, r5
   1276e:	3294      	adds	r2, #148	; 0x94
   12770:	7813      	ldrb	r3, [r2, #0]
   12772:	420b      	tst	r3, r1
   12774:	d005      	beq.n	12782 <AssemblePacket+0xea>
   12776:	2020      	movs	r0, #32
   12778:	9c06      	ldr	r4, [sp, #24]
   1277a:	438b      	bics	r3, r1
   1277c:	4304      	orrs	r4, r0
   1277e:	9406      	str	r4, [sp, #24]
   12780:	7013      	strb	r3, [r2, #0]
   12782:	2310      	movs	r3, #16
   12784:	9c06      	ldr	r4, [sp, #24]
   12786:	439c      	bics	r4, r3
   12788:	002b      	movs	r3, r5
   1278a:	33e0      	adds	r3, #224	; 0xe0
   1278c:	781b      	ldrb	r3, [r3, #0]
   1278e:	9309      	str	r3, [sp, #36]	; 0x24
   12790:	2b00      	cmp	r3, #0
   12792:	d003      	beq.n	1279c <AssemblePacket+0x104>
   12794:	9b08      	ldr	r3, [sp, #32]
   12796:	2b00      	cmp	r3, #0
   12798:	d000      	beq.n	1279c <AssemblePacket+0x104>
   1279a:	e0f6      	b.n	1298a <AssemblePacket+0x2f2>
   1279c:	230f      	movs	r3, #15
   1279e:	439c      	bics	r4, r3
   127a0:	466b      	mov	r3, sp
   127a2:	9406      	str	r4, [sp, #24]
   127a4:	ac0d      	add	r4, sp, #52	; 0x34
   127a6:	8826      	ldrh	r6, [r4, #0]
   127a8:	4f96      	ldr	r7, [pc, #600]	; (12a04 <AssemblePacket+0x36c>)
   127aa:	7e1b      	ldrb	r3, [r3, #24]
   127ac:	1c70      	adds	r0, r6, #1
   127ae:	b280      	uxth	r0, r0
   127b0:	55bb      	strb	r3, [r7, r6]
   127b2:	19c0      	adds	r0, r0, r7
   127b4:	4b96      	ldr	r3, [pc, #600]	; (12a10 <AssemblePacket+0x378>)
   127b6:	2202      	movs	r2, #2
   127b8:	4997      	ldr	r1, [pc, #604]	; (12a18 <AssemblePacket+0x380>)
   127ba:	4798      	blx	r3
   127bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127be:	3603      	adds	r6, #3
   127c0:	8026      	strh	r6, [r4, #0]
   127c2:	2b00      	cmp	r3, #0
   127c4:	d100      	bne.n	127c8 <AssemblePacket+0x130>
   127c6:	e0e7      	b.n	12998 <AssemblePacket+0x300>
   127c8:	9b08      	ldr	r3, [sp, #32]
   127ca:	2b00      	cmp	r3, #0
   127cc:	d004      	beq.n	127d8 <AssemblePacket+0x140>
   127ce:	2201      	movs	r2, #1
   127d0:	0021      	movs	r1, r4
   127d2:	0038      	movs	r0, r7
   127d4:	4b91      	ldr	r3, [pc, #580]	; (12a1c <AssemblePacket+0x384>)
   127d6:	4798      	blx	r3
   127d8:	466a      	mov	r2, sp
   127da:	212c      	movs	r1, #44	; 0x2c
   127dc:	1852      	adds	r2, r2, r1
   127de:	8823      	ldrh	r3, [r4, #0]
   127e0:	7812      	ldrb	r2, [r2, #0]
   127e2:	1c5e      	adds	r6, r3, #1
   127e4:	54fa      	strb	r2, [r7, r3]
   127e6:	9b08      	ldr	r3, [sp, #32]
   127e8:	b2b6      	uxth	r6, r6
   127ea:	8026      	strh	r6, [r4, #0]
   127ec:	2b00      	cmp	r3, #0
   127ee:	d100      	bne.n	127f2 <AssemblePacket+0x15a>
   127f0:	e0d6      	b.n	129a0 <AssemblePacket+0x308>
   127f2:	001a      	movs	r2, r3
   127f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   127f6:	4b86      	ldr	r3, [pc, #536]	; (12a10 <AssemblePacket+0x378>)
   127f8:	19b8      	adds	r0, r7, r6
   127fa:	4798      	blx	r3
   127fc:	2120      	movs	r1, #32
   127fe:	466b      	mov	r3, sp
   12800:	185b      	adds	r3, r3, r1
   12802:	7819      	ldrb	r1, [r3, #0]
   12804:	682b      	ldr	r3, [r5, #0]
   12806:	002a      	movs	r2, r5
   12808:	0a18      	lsrs	r0, r3, #8
   1280a:	792b      	ldrb	r3, [r5, #4]
   1280c:	3288      	adds	r2, #136	; 0x88
   1280e:	061b      	lsls	r3, r3, #24
   12810:	4303      	orrs	r3, r0
   12812:	9304      	str	r3, [sp, #16]
   12814:	2301      	movs	r3, #1
   12816:	9301      	str	r3, [sp, #4]
   12818:	4b81      	ldr	r3, [pc, #516]	; (12a20 <AssemblePacket+0x388>)
   1281a:	9703      	str	r7, [sp, #12]
   1281c:	9602      	str	r6, [sp, #8]
   1281e:	9300      	str	r3, [sp, #0]
   12820:	6813      	ldr	r3, [r2, #0]
   12822:	980a      	ldr	r0, [sp, #40]	; 0x28
   12824:	2200      	movs	r2, #0
   12826:	4c7f      	ldr	r4, [pc, #508]	; (12a24 <AssemblePacket+0x38c>)
   12828:	47a0      	blx	r4
   1282a:	2800      	cmp	r0, #0
   1282c:	d002      	beq.n	12834 <AssemblePacket+0x19c>
   1282e:	2020      	movs	r0, #32
   12830:	4b7d      	ldr	r3, [pc, #500]	; (12a28 <AssemblePacket+0x390>)
   12832:	4798      	blx	r3
   12834:	aa0d      	add	r2, sp, #52	; 0x34
   12836:	8813      	ldrh	r3, [r2, #0]
   12838:	9908      	ldr	r1, [sp, #32]
   1283a:	18cb      	adds	r3, r1, r3
   1283c:	8013      	strh	r3, [r2, #0]
   1283e:	4c73      	ldr	r4, [pc, #460]	; (12a0c <AssemblePacket+0x374>)
   12840:	ae0d      	add	r6, sp, #52	; 0x34
   12842:	0021      	movs	r1, r4
   12844:	6823      	ldr	r3, [r4, #0]
   12846:	8832      	ldrh	r2, [r6, #0]
   12848:	0a18      	lsrs	r0, r3, #8
   1284a:	7923      	ldrb	r3, [r4, #4]
   1284c:	3a10      	subs	r2, #16
   1284e:	061b      	lsls	r3, r3, #24
   12850:	4303      	orrs	r3, r0
   12852:	9300      	str	r3, [sp, #0]
   12854:	3188      	adds	r1, #136	; 0x88
   12856:	b2d2      	uxtb	r2, r2
   12858:	2349      	movs	r3, #73	; 0x49
   1285a:	6809      	ldr	r1, [r1, #0]
   1285c:	2000      	movs	r0, #0
   1285e:	4d73      	ldr	r5, [pc, #460]	; (12a2c <AssemblePacket+0x394>)
   12860:	47a8      	blx	r5
   12862:	4f68      	ldr	r7, [pc, #416]	; (12a04 <AssemblePacket+0x36c>)
   12864:	2210      	movs	r2, #16
   12866:	4968      	ldr	r1, [pc, #416]	; (12a08 <AssemblePacket+0x370>)
   12868:	0038      	movs	r0, r7
   1286a:	4b69      	ldr	r3, [pc, #420]	; (12a10 <AssemblePacket+0x378>)
   1286c:	4798      	blx	r3
   1286e:	8833      	ldrh	r3, [r6, #0]
   12870:	4a65      	ldr	r2, [pc, #404]	; (12a08 <AssemblePacket+0x370>)
   12872:	9300      	str	r3, [sp, #0]
   12874:	2102      	movs	r1, #2
   12876:	003b      	movs	r3, r7
   12878:	4d6d      	ldr	r5, [pc, #436]	; (12a30 <AssemblePacket+0x398>)
   1287a:	486e      	ldr	r0, [pc, #440]	; (12a34 <AssemblePacket+0x39c>)
   1287c:	47a8      	blx	r5
   1287e:	8836      	ldrh	r6, [r6, #0]
   12880:	2204      	movs	r2, #4
   12882:	19f0      	adds	r0, r6, r7
   12884:	4960      	ldr	r1, [pc, #384]	; (12a08 <AssemblePacket+0x370>)
   12886:	4b62      	ldr	r3, [pc, #392]	; (12a10 <AssemblePacket+0x378>)
   12888:	4798      	blx	r3
   1288a:	3e0c      	subs	r6, #12
   1288c:	34ce      	adds	r4, #206	; 0xce
   1288e:	8026      	strh	r6, [r4, #0]
   12890:	b00f      	add	sp, #60	; 0x3c
   12892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12894:	2240      	movs	r2, #64	; 0x40
   12896:	4313      	orrs	r3, r2
   12898:	7023      	strb	r3, [r4, #0]
   1289a:	e727      	b.n	126ec <AssemblePacket+0x54>
   1289c:	4293      	cmp	r3, r2
   1289e:	d800      	bhi.n	128a2 <AssemblePacket+0x20a>
   128a0:	e762      	b.n	12768 <AssemblePacket+0xd0>
   128a2:	0022      	movs	r2, r4
   128a4:	0021      	movs	r1, r4
   128a6:	32f6      	adds	r2, #246	; 0xf6
   128a8:	7813      	ldrb	r3, [r2, #0]
   128aa:	31dd      	adds	r1, #221	; 0xdd
   128ac:	3301      	adds	r3, #1
   128ae:	b2db      	uxtb	r3, r3
   128b0:	7013      	strb	r3, [r2, #0]
   128b2:	7809      	ldrb	r1, [r1, #0]
   128b4:	4299      	cmp	r1, r3
   128b6:	d900      	bls.n	128ba <AssemblePacket+0x222>
   128b8:	e756      	b.n	12768 <AssemblePacket+0xd0>
   128ba:	231a      	movs	r3, #26
   128bc:	7016      	strb	r6, [r2, #0]
   128be:	aa06      	add	r2, sp, #24
   128c0:	189b      	adds	r3, r3, r2
   128c2:	001a      	movs	r2, r3
   128c4:	0031      	movs	r1, r6
   128c6:	4b5c      	ldr	r3, [pc, #368]	; (12a38 <AssemblePacket+0x3a0>)
   128c8:	203c      	movs	r0, #60	; 0x3c
   128ca:	4798      	blx	r3
   128cc:	4b5b      	ldr	r3, [pc, #364]	; (12a3c <AssemblePacket+0x3a4>)
   128ce:	781a      	ldrb	r2, [r3, #0]
   128d0:	ab06      	add	r3, sp, #24
   128d2:	7e9b      	ldrb	r3, [r3, #26]
   128d4:	429a      	cmp	r2, r3
   128d6:	d00d      	beq.n	128f4 <AssemblePacket+0x25c>
   128d8:	34ff      	adds	r4, #255	; 0xff
   128da:	7820      	ldrb	r0, [r4, #0]
   128dc:	4b58      	ldr	r3, [pc, #352]	; (12a40 <AssemblePacket+0x3a8>)
   128de:	4798      	blx	r3
   128e0:	0031      	movs	r1, r6
   128e2:	4a56      	ldr	r2, [pc, #344]	; (12a3c <AssemblePacket+0x3a4>)
   128e4:	4b54      	ldr	r3, [pc, #336]	; (12a38 <AssemblePacket+0x3a0>)
   128e6:	2035      	movs	r0, #53	; 0x35
   128e8:	4798      	blx	r3
   128ea:	210a      	movs	r1, #10
   128ec:	0030      	movs	r0, r6
   128ee:	4b55      	ldr	r3, [pc, #340]	; (12a44 <AssemblePacket+0x3ac>)
   128f0:	4798      	blx	r3
   128f2:	e739      	b.n	12768 <AssemblePacket+0xd0>
   128f4:	4b47      	ldr	r3, [pc, #284]	; (12a14 <AssemblePacket+0x37c>)
   128f6:	783a      	ldrb	r2, [r7, #0]
   128f8:	781b      	ldrb	r3, [r3, #0]
   128fa:	4293      	cmp	r3, r2
   128fc:	d022      	beq.n	12944 <AssemblePacket+0x2ac>
   128fe:	d800      	bhi.n	12902 <AssemblePacket+0x26a>
   12900:	e732      	b.n	12768 <AssemblePacket+0xd0>
   12902:	221b      	movs	r2, #27
   12904:	003d      	movs	r5, r7
   12906:	a906      	add	r1, sp, #24
   12908:	3b01      	subs	r3, #1
   1290a:	1852      	adds	r2, r2, r1
   1290c:	7013      	strb	r3, [r2, #0]
   1290e:	261b      	movs	r6, #27
   12910:	ab06      	add	r3, sp, #24
   12912:	18f6      	adds	r6, r6, r3
   12914:	782a      	ldrb	r2, [r5, #0]
   12916:	7833      	ldrb	r3, [r6, #0]
   12918:	429a      	cmp	r2, r3
   1291a:	d900      	bls.n	1291e <AssemblePacket+0x286>
   1291c:	e724      	b.n	12768 <AssemblePacket+0xd0>
   1291e:	0031      	movs	r1, r6
   12920:	2010      	movs	r0, #16
   12922:	4f49      	ldr	r7, [pc, #292]	; (12a48 <AssemblePacket+0x3b0>)
   12924:	47b8      	blx	r7
   12926:	2808      	cmp	r0, #8
   12928:	d000      	beq.n	1292c <AssemblePacket+0x294>
   1292a:	e71d      	b.n	12768 <AssemblePacket+0xd0>
   1292c:	0031      	movs	r1, r6
   1292e:	3009      	adds	r0, #9
   12930:	47b8      	blx	r7
   12932:	7833      	ldrb	r3, [r6, #0]
   12934:	2808      	cmp	r0, #8
   12936:	d061      	beq.n	129fc <AssemblePacket+0x364>
   12938:	782a      	ldrb	r2, [r5, #0]
   1293a:	429a      	cmp	r2, r3
   1293c:	d2e7      	bcs.n	1290e <AssemblePacket+0x276>
   1293e:	3b01      	subs	r3, #1
   12940:	7033      	strb	r3, [r6, #0]
   12942:	e7e4      	b.n	1290e <AssemblePacket+0x276>
   12944:	34ff      	adds	r4, #255	; 0xff
   12946:	7820      	ldrb	r0, [r4, #0]
   12948:	4b40      	ldr	r3, [pc, #256]	; (12a4c <AssemblePacket+0x3b4>)
   1294a:	4798      	blx	r3
   1294c:	231b      	movs	r3, #27
   1294e:	aa06      	add	r2, sp, #24
   12950:	189b      	adds	r3, r3, r2
   12952:	0019      	movs	r1, r3
   12954:	4c3e      	ldr	r4, [pc, #248]	; (12a50 <AssemblePacket+0x3b8>)
   12956:	2013      	movs	r0, #19
   12958:	47a0      	blx	r4
   1295a:	231b      	movs	r3, #27
   1295c:	aa06      	add	r2, sp, #24
   1295e:	189b      	adds	r3, r3, r2
   12960:	0019      	movs	r1, r3
   12962:	2014      	movs	r0, #20
   12964:	47a0      	blx	r4
   12966:	2113      	movs	r1, #19
   12968:	0030      	movs	r0, r6
   1296a:	4c36      	ldr	r4, [pc, #216]	; (12a44 <AssemblePacket+0x3ac>)
   1296c:	47a0      	blx	r4
   1296e:	2210      	movs	r2, #16
   12970:	786b      	ldrb	r3, [r5, #1]
   12972:	210b      	movs	r1, #11
   12974:	4313      	orrs	r3, r2
   12976:	706b      	strb	r3, [r5, #1]
   12978:	2001      	movs	r0, #1
   1297a:	47a0      	blx	r4
   1297c:	e6f4      	b.n	12768 <AssemblePacket+0xd0>
   1297e:	2210      	movs	r2, #16
   12980:	3494      	adds	r4, #148	; 0x94
   12982:	7823      	ldrb	r3, [r4, #0]
   12984:	4393      	bics	r3, r2
   12986:	7023      	strb	r3, [r4, #0]
   12988:	e6ee      	b.n	12768 <AssemblePacket+0xd0>
   1298a:	4b32      	ldr	r3, [pc, #200]	; (12a54 <AssemblePacket+0x3bc>)
   1298c:	4798      	blx	r3
   1298e:	230f      	movs	r3, #15
   12990:	4018      	ands	r0, r3
   12992:	439c      	bics	r4, r3
   12994:	4304      	orrs	r4, r0
   12996:	e703      	b.n	127a0 <AssemblePacket+0x108>
   12998:	9b08      	ldr	r3, [sp, #32]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d000      	beq.n	129a0 <AssemblePacket+0x308>
   1299e:	e71b      	b.n	127d8 <AssemblePacket+0x140>
   129a0:	4d1a      	ldr	r5, [pc, #104]	; (12a0c <AssemblePacket+0x374>)
   129a2:	002b      	movs	r3, r5
   129a4:	33e0      	adds	r3, #224	; 0xe0
   129a6:	781b      	ldrb	r3, [r3, #0]
   129a8:	2b00      	cmp	r3, #0
   129aa:	d100      	bne.n	129ae <AssemblePacket+0x316>
   129ac:	e747      	b.n	1283e <AssemblePacket+0x1a6>
   129ae:	261e      	movs	r6, #30
   129b0:	ab06      	add	r3, sp, #24
   129b2:	18f6      	adds	r6, r6, r3
   129b4:	2200      	movs	r2, #0
   129b6:	0031      	movs	r1, r6
   129b8:	4827      	ldr	r0, [pc, #156]	; (12a58 <AssemblePacket+0x3c0>)
   129ba:	4b18      	ldr	r3, [pc, #96]	; (12a1c <AssemblePacket+0x384>)
   129bc:	4798      	blx	r3
   129be:	682b      	ldr	r3, [r5, #0]
   129c0:	7831      	ldrb	r1, [r6, #0]
   129c2:	0a18      	lsrs	r0, r3, #8
   129c4:	792b      	ldrb	r3, [r5, #4]
   129c6:	9703      	str	r7, [sp, #12]
   129c8:	061b      	lsls	r3, r3, #24
   129ca:	4303      	orrs	r3, r0
   129cc:	9304      	str	r3, [sp, #16]
   129ce:	8823      	ldrh	r3, [r4, #0]
   129d0:	002a      	movs	r2, r5
   129d2:	9302      	str	r3, [sp, #8]
   129d4:	2302      	movs	r3, #2
   129d6:	9301      	str	r3, [sp, #4]
   129d8:	4b16      	ldr	r3, [pc, #88]	; (12a34 <AssemblePacket+0x39c>)
   129da:	3288      	adds	r2, #136	; 0x88
   129dc:	9300      	str	r3, [sp, #0]
   129de:	6813      	ldr	r3, [r2, #0]
   129e0:	481d      	ldr	r0, [pc, #116]	; (12a58 <AssemblePacket+0x3c0>)
   129e2:	2200      	movs	r2, #0
   129e4:	4d0f      	ldr	r5, [pc, #60]	; (12a24 <AssemblePacket+0x38c>)
   129e6:	47a8      	blx	r5
   129e8:	2800      	cmp	r0, #0
   129ea:	d002      	beq.n	129f2 <AssemblePacket+0x35a>
   129ec:	2020      	movs	r0, #32
   129ee:	4b0e      	ldr	r3, [pc, #56]	; (12a28 <AssemblePacket+0x390>)
   129f0:	4798      	blx	r3
   129f2:	8823      	ldrh	r3, [r4, #0]
   129f4:	8832      	ldrh	r2, [r6, #0]
   129f6:	189b      	adds	r3, r3, r2
   129f8:	8023      	strh	r3, [r4, #0]
   129fa:	e720      	b.n	1283e <AssemblePacket+0x1a6>
   129fc:	34e7      	adds	r4, #231	; 0xe7
   129fe:	e7c2      	b.n	12986 <AssemblePacket+0x2ee>
   12a00:	00018779 	.word	0x00018779
   12a04:	20002e1d 	.word	0x20002e1d
   12a08:	20000f50 	.word	0x20000f50
   12a0c:	20002bd4 	.word	0x20002bd4
   12a10:	00018655 	.word	0x00018655
   12a14:	20002cbb 	.word	0x20002cbb
   12a18:	20002c5c 	.word	0x20002c5c
   12a1c:	0000e641 	.word	0x0000e641
   12a20:	20002c09 	.word	0x20002c09
   12a24:	0000fbc5 	.word	0x0000fbc5
   12a28:	0000fc85 	.word	0x0000fc85
   12a2c:	0000e96d 	.word	0x0000e96d
   12a30:	0000c429 	.word	0x0000c429
   12a34:	20002bf9 	.word	0x20002bf9
   12a38:	0000bfdd 	.word	0x0000bfdd
   12a3c:	20002cbd 	.word	0x20002cbd
   12a40:	0000c24d 	.word	0x0000c24d
   12a44:	0000c84d 	.word	0x0000c84d
   12a48:	0000bff9 	.word	0x0000bff9
   12a4c:	0000c37d 	.word	0x0000c37d
   12a50:	00011e81 	.word	0x00011e81
   12a54:	0000e539 	.word	0x0000e539
   12a58:	20002f38 	.word	0x20002f38

00012a5c <LORAWAN_SetMulticastParam>:
   12a5c:	b510      	push	{r4, lr}
   12a5e:	4b01      	ldr	r3, [pc, #4]	; (12a64 <LORAWAN_SetMulticastParam+0x8>)
   12a60:	4798      	blx	r3
   12a62:	bd10      	pop	{r4, pc}
   12a64:	00011e81 	.word	0x00011e81

00012a68 <LORAWAN_ReadyToSleep>:
   12a68:	4b08      	ldr	r3, [pc, #32]	; (12a8c <LORAWAN_ReadyToSleep+0x24>)
   12a6a:	001a      	movs	r2, r3
   12a6c:	32fd      	adds	r2, #253	; 0xfd
   12a6e:	7812      	ldrb	r2, [r2, #0]
   12a70:	2a01      	cmp	r2, #1
   12a72:	d002      	beq.n	12a7a <LORAWAN_ReadyToSleep+0x12>
   12a74:	2000      	movs	r0, #0
   12a76:	2a04      	cmp	r2, #4
   12a78:	d106      	bne.n	12a88 <LORAWAN_ReadyToSleep+0x20>
   12a7a:	3384      	adds	r3, #132	; 0x84
   12a7c:	7818      	ldrb	r0, [r3, #0]
   12a7e:	230e      	movs	r3, #14
   12a80:	4018      	ands	r0, r3
   12a82:	4243      	negs	r3, r0
   12a84:	4158      	adcs	r0, r3
   12a86:	b2c0      	uxtb	r0, r0
   12a88:	4770      	bx	lr
   12a8a:	46c0      	nop			; (mov r8, r8)
   12a8c:	20002bd4 	.word	0x20002bd4

00012a90 <LorawanClasscUlAckTimerCallback>:
   12a90:	2102      	movs	r1, #2
   12a92:	4b03      	ldr	r3, [pc, #12]	; (12aa0 <LorawanClasscUlAckTimerCallback+0x10>)
   12a94:	3394      	adds	r3, #148	; 0x94
   12a96:	781a      	ldrb	r2, [r3, #0]
   12a98:	438a      	bics	r2, r1
   12a9a:	701a      	strb	r2, [r3, #0]
   12a9c:	4770      	bx	lr
   12a9e:	46c0      	nop			; (mov r8, r8)
   12aa0:	20002bd4 	.word	0x20002bd4

00012aa4 <LorawanClasscValidateSend>:
   12aa4:	2388      	movs	r3, #136	; 0x88
   12aa6:	b510      	push	{r4, lr}
   12aa8:	4c0a      	ldr	r4, [pc, #40]	; (12ad4 <LorawanClasscValidateSend+0x30>)
   12aaa:	009b      	lsls	r3, r3, #2
   12aac:	5ce3      	ldrb	r3, [r4, r3]
   12aae:	2b00      	cmp	r3, #0
   12ab0:	d008      	beq.n	12ac4 <LorawanClasscValidateSend+0x20>
   12ab2:	220e      	movs	r2, #14
   12ab4:	3484      	adds	r4, #132	; 0x84
   12ab6:	7823      	ldrb	r3, [r4, #0]
   12ab8:	2008      	movs	r0, #8
   12aba:	4013      	ands	r3, r2
   12abc:	2b02      	cmp	r3, #2
   12abe:	d100      	bne.n	12ac2 <LorawanClasscValidateSend+0x1e>
   12ac0:	2011      	movs	r0, #17
   12ac2:	bd10      	pop	{r4, pc}
   12ac4:	2394      	movs	r3, #148	; 0x94
   12ac6:	005b      	lsls	r3, r3, #1
   12ac8:	5ce0      	ldrb	r0, [r4, r3]
   12aca:	4b03      	ldr	r3, [pc, #12]	; (12ad8 <LorawanClasscValidateSend+0x34>)
   12acc:	4798      	blx	r3
   12ace:	2800      	cmp	r0, #0
   12ad0:	d1ef      	bne.n	12ab2 <LorawanClasscValidateSend+0xe>
   12ad2:	e7f5      	b.n	12ac0 <LorawanClasscValidateSend+0x1c>
   12ad4:	20002bd4 	.word	0x20002bd4
   12ad8:	0000d715 	.word	0x0000d715

00012adc <LorawanClasscPause>:
   12adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12ade:	4c16      	ldr	r4, [pc, #88]	; (12b38 <LorawanClasscPause+0x5c>)
   12ae0:	220e      	movs	r2, #14
   12ae2:	0023      	movs	r3, r4
   12ae4:	3384      	adds	r3, #132	; 0x84
   12ae6:	781b      	ldrb	r3, [r3, #0]
   12ae8:	4013      	ands	r3, r2
   12aea:	2b0a      	cmp	r3, #10
   12aec:	d121      	bne.n	12b32 <LorawanClasscPause+0x56>
   12aee:	2388      	movs	r3, #136	; 0x88
   12af0:	009b      	lsls	r3, r3, #2
   12af2:	5ce3      	ldrb	r3, [r4, r3]
   12af4:	2b00      	cmp	r3, #0
   12af6:	d00c      	beq.n	12b12 <LorawanClasscPause+0x36>
   12af8:	2301      	movs	r3, #1
   12afa:	a801      	add	r0, sp, #4
   12afc:	7003      	strb	r3, [r0, #0]
   12afe:	4b0f      	ldr	r3, [pc, #60]	; (12b3c <LorawanClasscPause+0x60>)
   12b00:	4798      	blx	r3
   12b02:	220e      	movs	r2, #14
   12b04:	2001      	movs	r0, #1
   12b06:	3484      	adds	r4, #132	; 0x84
   12b08:	7823      	ldrb	r3, [r4, #0]
   12b0a:	4240      	negs	r0, r0
   12b0c:	4393      	bics	r3, r2
   12b0e:	7023      	strb	r3, [r4, #0]
   12b10:	e007      	b.n	12b22 <LorawanClasscPause+0x46>
   12b12:	0023      	movs	r3, r4
   12b14:	33f1      	adds	r3, #241	; 0xf1
   12b16:	7818      	ldrb	r0, [r3, #0]
   12b18:	4d09      	ldr	r5, [pc, #36]	; (12b40 <LorawanClasscPause+0x64>)
   12b1a:	47a8      	blx	r5
   12b1c:	2800      	cmp	r0, #0
   12b1e:	d001      	beq.n	12b24 <LorawanClasscPause+0x48>
   12b20:	2000      	movs	r0, #0
   12b22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12b24:	2394      	movs	r3, #148	; 0x94
   12b26:	005b      	lsls	r3, r3, #1
   12b28:	5ce0      	ldrb	r0, [r4, r3]
   12b2a:	47a8      	blx	r5
   12b2c:	2800      	cmp	r0, #0
   12b2e:	d0e8      	beq.n	12b02 <LorawanClasscPause+0x26>
   12b30:	e7f6      	b.n	12b20 <LorawanClasscPause+0x44>
   12b32:	2b00      	cmp	r3, #0
   12b34:	d0e5      	beq.n	12b02 <LorawanClasscPause+0x26>
   12b36:	e7f3      	b.n	12b20 <LorawanClasscPause+0x44>
   12b38:	20002bd4 	.word	0x20002bd4
   12b3c:	0001477d 	.word	0x0001477d
   12b40:	0000d715 	.word	0x0000d715

00012b44 <LorawanClasscReceiveWindowCallback>:
   12b44:	2301      	movs	r3, #1
   12b46:	b507      	push	{r0, r1, r2, lr}
   12b48:	a801      	add	r0, sp, #4
   12b4a:	7003      	strb	r3, [r0, #0]
   12b4c:	4b01      	ldr	r3, [pc, #4]	; (12b54 <LorawanClasscReceiveWindowCallback+0x10>)
   12b4e:	4798      	blx	r3
   12b50:	bd07      	pop	{r0, r1, r2, pc}
   12b52:	46c0      	nop			; (mov r8, r8)
   12b54:	0001477d 	.word	0x0001477d

00012b58 <LorawanClasscRxDone>:
   12b58:	221f      	movs	r2, #31
   12b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12b5c:	7803      	ldrb	r3, [r0, #0]
   12b5e:	4c1c      	ldr	r4, [pc, #112]	; (12bd0 <LorawanClasscRxDone+0x78>)
   12b60:	4393      	bics	r3, r2
   12b62:	2ba0      	cmp	r3, #160	; 0xa0
   12b64:	d10c      	bne.n	12b80 <LorawanClasscRxDone+0x28>
   12b66:	2694      	movs	r6, #148	; 0x94
   12b68:	0076      	lsls	r6, r6, #1
   12b6a:	5da0      	ldrb	r0, [r4, r6]
   12b6c:	4b19      	ldr	r3, [pc, #100]	; (12bd4 <LorawanClasscRxDone+0x7c>)
   12b6e:	4798      	blx	r3
   12b70:	1e05      	subs	r5, r0, #0
   12b72:	d019      	beq.n	12ba8 <LorawanClasscRxDone+0x50>
   12b74:	0022      	movs	r2, r4
   12b76:	2102      	movs	r1, #2
   12b78:	3294      	adds	r2, #148	; 0x94
   12b7a:	7813      	ldrb	r3, [r2, #0]
   12b7c:	438b      	bics	r3, r1
   12b7e:	7013      	strb	r3, [r2, #0]
   12b80:	0021      	movs	r1, r4
   12b82:	3184      	adds	r1, #132	; 0x84
   12b84:	780b      	ldrb	r3, [r1, #0]
   12b86:	220e      	movs	r2, #14
   12b88:	0018      	movs	r0, r3
   12b8a:	4010      	ands	r0, r2
   12b8c:	2806      	cmp	r0, #6
   12b8e:	d103      	bne.n	12b98 <LorawanClasscRxDone+0x40>
   12b90:	4393      	bics	r3, r2
   12b92:	3a04      	subs	r2, #4
   12b94:	4313      	orrs	r3, r2
   12b96:	700b      	strb	r3, [r1, #0]
   12b98:	2390      	movs	r3, #144	; 0x90
   12b9a:	2201      	movs	r2, #1
   12b9c:	009b      	lsls	r3, r3, #2
   12b9e:	54e2      	strb	r2, [r4, r3]
   12ba0:	2000      	movs	r0, #0
   12ba2:	4b0d      	ldr	r3, [pc, #52]	; (12bd8 <LorawanClasscRxDone+0x80>)
   12ba4:	4798      	blx	r3
   12ba6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12ba8:	4b0c      	ldr	r3, [pc, #48]	; (12bdc <LorawanClasscRxDone+0x84>)
   12baa:	5da6      	ldrb	r6, [r4, r6]
   12bac:	4798      	blx	r3
   12bae:	4b0c      	ldr	r3, [pc, #48]	; (12be0 <LorawanClasscRxDone+0x88>)
   12bb0:	490c      	ldr	r1, [pc, #48]	; (12be4 <LorawanClasscRxDone+0x8c>)
   12bb2:	4798      	blx	r3
   12bb4:	23fa      	movs	r3, #250	; 0xfa
   12bb6:	009b      	lsls	r3, r3, #2
   12bb8:	18cb      	adds	r3, r1, r3
   12bba:	21fa      	movs	r1, #250	; 0xfa
   12bbc:	0089      	lsls	r1, r1, #2
   12bbe:	4359      	muls	r1, r3
   12bc0:	9500      	str	r5, [sp, #0]
   12bc2:	002a      	movs	r2, r5
   12bc4:	4b08      	ldr	r3, [pc, #32]	; (12be8 <LorawanClasscRxDone+0x90>)
   12bc6:	0030      	movs	r0, r6
   12bc8:	4d08      	ldr	r5, [pc, #32]	; (12bec <LorawanClasscRxDone+0x94>)
   12bca:	47a8      	blx	r5
   12bcc:	e7d8      	b.n	12b80 <LorawanClasscRxDone+0x28>
   12bce:	46c0      	nop			; (mov r8, r8)
   12bd0:	20002bd4 	.word	0x20002bd4
   12bd4:	0000d715 	.word	0x0000d715
   12bd8:	00010c5d 	.word	0x00010c5d
   12bdc:	00018919 	.word	0x00018919
   12be0:	00015231 	.word	0x00015231
   12be4:	000007d1 	.word	0x000007d1
   12be8:	00012a91 	.word	0x00012a91
   12bec:	0000d57d 	.word	0x0000d57d

00012bf0 <LorawanClasscTxDone>:
   12bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bf2:	4c27      	ldr	r4, [pc, #156]	; (12c90 <LorawanClasscTxDone+0xa0>)
   12bf4:	0006      	movs	r6, r0
   12bf6:	0023      	movs	r3, r4
   12bf8:	33d2      	adds	r3, #210	; 0xd2
   12bfa:	881d      	ldrh	r5, [r3, #0]
   12bfc:	0023      	movs	r3, r4
   12bfe:	3394      	adds	r3, #148	; 0x94
   12c00:	781b      	ldrb	r3, [r3, #0]
   12c02:	2700      	movs	r7, #0
   12c04:	07db      	lsls	r3, r3, #31
   12c06:	d516      	bpl.n	12c36 <LorawanClasscTxDone+0x46>
   12c08:	0023      	movs	r3, r4
   12c0a:	0022      	movs	r2, r4
   12c0c:	33e2      	adds	r3, #226	; 0xe2
   12c0e:	781b      	ldrb	r3, [r3, #0]
   12c10:	32e4      	adds	r2, #228	; 0xe4
   12c12:	7812      	ldrb	r2, [r2, #0]
   12c14:	3301      	adds	r3, #1
   12c16:	4293      	cmp	r3, r2
   12c18:	db0d      	blt.n	12c36 <LorawanClasscTxDone+0x46>
   12c1a:	4b1e      	ldr	r3, [pc, #120]	; (12c94 <LorawanClasscTxDone+0xa4>)
   12c1c:	5ce7      	ldrb	r7, [r4, r3]
   12c1e:	2f00      	cmp	r7, #0
   12c20:	d009      	beq.n	12c36 <LorawanClasscTxDone+0x46>
   12c22:	4b1d      	ldr	r3, [pc, #116]	; (12c98 <LorawanClasscTxDone+0xa8>)
   12c24:	4798      	blx	r3
   12c26:	4b1d      	ldr	r3, [pc, #116]	; (12c9c <LorawanClasscTxDone+0xac>)
   12c28:	491d      	ldr	r1, [pc, #116]	; (12ca0 <LorawanClasscTxDone+0xb0>)
   12c2a:	4798      	blx	r3
   12c2c:	23fa      	movs	r3, #250	; 0xfa
   12c2e:	009b      	lsls	r3, r3, #2
   12c30:	1975      	adds	r5, r6, r5
   12c32:	18c9      	adds	r1, r1, r3
   12c34:	194d      	adds	r5, r1, r5
   12c36:	0023      	movs	r3, r4
   12c38:	3394      	adds	r3, #148	; 0x94
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	07db      	lsls	r3, r3, #31
   12c3e:	d411      	bmi.n	12c64 <LorawanClasscTxDone+0x74>
   12c40:	0023      	movs	r3, r4
   12c42:	0022      	movs	r2, r4
   12c44:	33e1      	adds	r3, #225	; 0xe1
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	32e3      	adds	r2, #227	; 0xe3
   12c4a:	7812      	ldrb	r2, [r2, #0]
   12c4c:	3301      	adds	r3, #1
   12c4e:	4293      	cmp	r3, r2
   12c50:	db08      	blt.n	12c64 <LorawanClasscTxDone+0x74>
   12c52:	4b10      	ldr	r3, [pc, #64]	; (12c94 <LorawanClasscTxDone+0xa4>)
   12c54:	5ce3      	ldrb	r3, [r4, r3]
   12c56:	2b00      	cmp	r3, #0
   12c58:	d004      	beq.n	12c64 <LorawanClasscTxDone+0x74>
   12c5a:	23fa      	movs	r3, #250	; 0xfa
   12c5c:	00db      	lsls	r3, r3, #3
   12c5e:	18f6      	adds	r6, r6, r3
   12c60:	19ad      	adds	r5, r5, r6
   12c62:	e001      	b.n	12c68 <LorawanClasscTxDone+0x78>
   12c64:	2f00      	cmp	r7, #0
   12c66:	d0fb      	beq.n	12c60 <LorawanClasscTxDone+0x70>
   12c68:	2394      	movs	r3, #148	; 0x94
   12c6a:	005b      	lsls	r3, r3, #1
   12c6c:	5ce0      	ldrb	r0, [r4, r3]
   12c6e:	4b0d      	ldr	r3, [pc, #52]	; (12ca4 <LorawanClasscTxDone+0xb4>)
   12c70:	4798      	blx	r3
   12c72:	34f1      	adds	r4, #241	; 0xf1
   12c74:	21fa      	movs	r1, #250	; 0xfa
   12c76:	7820      	ldrb	r0, [r4, #0]
   12c78:	2400      	movs	r4, #0
   12c7a:	0089      	lsls	r1, r1, #2
   12c7c:	4369      	muls	r1, r5
   12c7e:	0022      	movs	r2, r4
   12c80:	4d09      	ldr	r5, [pc, #36]	; (12ca8 <LorawanClasscTxDone+0xb8>)
   12c82:	9400      	str	r4, [sp, #0]
   12c84:	4b09      	ldr	r3, [pc, #36]	; (12cac <LorawanClasscTxDone+0xbc>)
   12c86:	47a8      	blx	r5
   12c88:	0020      	movs	r0, r4
   12c8a:	4b09      	ldr	r3, [pc, #36]	; (12cb0 <LorawanClasscTxDone+0xc0>)
   12c8c:	4798      	blx	r3
   12c8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12c90:	20002bd4 	.word	0x20002bd4
   12c94:	0000022a 	.word	0x0000022a
   12c98:	00018919 	.word	0x00018919
   12c9c:	00015231 	.word	0x00015231
   12ca0:	000007d1 	.word	0x000007d1
   12ca4:	0000d895 	.word	0x0000d895
   12ca8:	0000d57d 	.word	0x0000d57d
   12cac:	00010b1d 	.word	0x00010b1d
   12cb0:	00010c5d 	.word	0x00010c5d

00012cb4 <LorawanClasscRxTimeout>:
   12cb4:	4a0c      	ldr	r2, [pc, #48]	; (12ce8 <LorawanClasscRxTimeout+0x34>)
   12cb6:	b510      	push	{r4, lr}
   12cb8:	0010      	movs	r0, r2
   12cba:	3084      	adds	r0, #132	; 0x84
   12cbc:	7803      	ldrb	r3, [r0, #0]
   12cbe:	240e      	movs	r4, #14
   12cc0:	0019      	movs	r1, r3
   12cc2:	4021      	ands	r1, r4
   12cc4:	2906      	cmp	r1, #6
   12cc6:	d107      	bne.n	12cd8 <LorawanClasscRxTimeout+0x24>
   12cc8:	2208      	movs	r2, #8
   12cca:	43a3      	bics	r3, r4
   12ccc:	4313      	orrs	r3, r2
   12cce:	7003      	strb	r3, [r0, #0]
   12cd0:	2000      	movs	r0, #0
   12cd2:	4b06      	ldr	r3, [pc, #24]	; (12cec <LorawanClasscRxTimeout+0x38>)
   12cd4:	4798      	blx	r3
   12cd6:	e006      	b.n	12ce6 <LorawanClasscRxTimeout+0x32>
   12cd8:	290a      	cmp	r1, #10
   12cda:	d1f9      	bne.n	12cd0 <LorawanClasscRxTimeout+0x1c>
   12cdc:	2388      	movs	r3, #136	; 0x88
   12cde:	009b      	lsls	r3, r3, #2
   12ce0:	5cd3      	ldrb	r3, [r2, r3]
   12ce2:	2b00      	cmp	r3, #0
   12ce4:	d0f4      	beq.n	12cd0 <LorawanClasscRxTimeout+0x1c>
   12ce6:	bd10      	pop	{r4, pc}
   12ce8:	20002bd4 	.word	0x20002bd4
   12cec:	00010c5d 	.word	0x00010c5d

00012cf0 <LorawanClasscNotifyAppOnReceive>:
   12cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cf2:	001f      	movs	r7, r3
   12cf4:	2394      	movs	r3, #148	; 0x94
   12cf6:	0016      	movs	r6, r2
   12cf8:	4a07      	ldr	r2, [pc, #28]	; (12d18 <LorawanClasscNotifyAppOnReceive+0x28>)
   12cfa:	005b      	lsls	r3, r3, #1
   12cfc:	0004      	movs	r4, r0
   12cfe:	5cd0      	ldrb	r0, [r2, r3]
   12d00:	4b06      	ldr	r3, [pc, #24]	; (12d1c <LorawanClasscNotifyAppOnReceive+0x2c>)
   12d02:	000d      	movs	r5, r1
   12d04:	4798      	blx	r3
   12d06:	2800      	cmp	r0, #0
   12d08:	d105      	bne.n	12d16 <LorawanClasscNotifyAppOnReceive+0x26>
   12d0a:	0020      	movs	r0, r4
   12d0c:	003b      	movs	r3, r7
   12d0e:	0032      	movs	r2, r6
   12d10:	0029      	movs	r1, r5
   12d12:	4c03      	ldr	r4, [pc, #12]	; (12d20 <LorawanClasscNotifyAppOnReceive+0x30>)
   12d14:	47a0      	blx	r4
   12d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d18:	20002bd4 	.word	0x20002bd4
   12d1c:	0000d715 	.word	0x0000d715
   12d20:	0000fce9 	.word	0x0000fce9

00012d24 <LorawanMcastInit>:
   12d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d26:	2396      	movs	r3, #150	; 0x96
   12d28:	2600      	movs	r6, #0
   12d2a:	4c1c      	ldr	r4, [pc, #112]	; (12d9c <LorawanMcastInit+0x78>)
   12d2c:	005b      	lsls	r3, r3, #1
   12d2e:	54e6      	strb	r6, [r4, r3]
   12d30:	232e      	movs	r3, #46	; 0x2e
   12d32:	4d1b      	ldr	r5, [pc, #108]	; (12da0 <LorawanMcastInit+0x7c>)
   12d34:	33ff      	adds	r3, #255	; 0xff
   12d36:	54e6      	strb	r6, [r4, r3]
   12d38:	002b      	movs	r3, r5
   12d3a:	2201      	movs	r2, #1
   12d3c:	3b14      	subs	r3, #20
   12d3e:	4252      	negs	r2, r2
   12d40:	601a      	str	r2, [r3, #0]
   12d42:	2100      	movs	r1, #0
   12d44:	3211      	adds	r2, #17
   12d46:	0028      	movs	r0, r5
   12d48:	4f16      	ldr	r7, [pc, #88]	; (12da4 <LorawanMcastInit+0x80>)
   12d4a:	47b8      	blx	r7
   12d4c:	0028      	movs	r0, r5
   12d4e:	2210      	movs	r2, #16
   12d50:	2100      	movs	r1, #0
   12d52:	3810      	subs	r0, #16
   12d54:	47b8      	blx	r7
   12d56:	0023      	movs	r3, r4
   12d58:	336e      	adds	r3, #110	; 0x6e
   12d5a:	781a      	ldrb	r2, [r3, #0]
   12d5c:	002b      	movs	r3, r5
   12d5e:	3324      	adds	r3, #36	; 0x24
   12d60:	701a      	strb	r2, [r3, #0]
   12d62:	0023      	movs	r3, r4
   12d64:	336a      	adds	r3, #106	; 0x6a
   12d66:	8819      	ldrh	r1, [r3, #0]
   12d68:	0023      	movs	r3, r4
   12d6a:	336c      	adds	r3, #108	; 0x6c
   12d6c:	881b      	ldrh	r3, [r3, #0]
   12d6e:	616e      	str	r6, [r5, #20]
   12d70:	041b      	lsls	r3, r3, #16
   12d72:	430b      	orrs	r3, r1
   12d74:	490c      	ldr	r1, [pc, #48]	; (12da8 <LorawanMcastInit+0x84>)
   12d76:	622b      	str	r3, [r5, #32]
   12d78:	61ae      	str	r6, [r5, #24]
   12d7a:	612e      	str	r6, [r5, #16]
   12d7c:	353c      	adds	r5, #60	; 0x3c
   12d7e:	428d      	cmp	r5, r1
   12d80:	d1da      	bne.n	12d38 <LorawanMcastInit+0x14>
   12d82:	0021      	movs	r1, r4
   12d84:	3173      	adds	r1, #115	; 0x73
   12d86:	346f      	adds	r4, #111	; 0x6f
   12d88:	700a      	strb	r2, [r1, #0]
   12d8a:	0a1a      	lsrs	r2, r3, #8
   12d8c:	7023      	strb	r3, [r4, #0]
   12d8e:	7062      	strb	r2, [r4, #1]
   12d90:	0c1a      	lsrs	r2, r3, #16
   12d92:	0e1b      	lsrs	r3, r3, #24
   12d94:	70a2      	strb	r2, [r4, #2]
   12d96:	70e3      	strb	r3, [r4, #3]
   12d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d9a:	46c0      	nop			; (mov r8, r8)
   12d9c:	20002bd4 	.word	0x20002bd4
   12da0:	20002d18 	.word	0x20002d18
   12da4:	00018779 	.word	0x00018779
   12da8:	20002e08 	.word	0x20002e08

00012dac <LorawanMcastEnable>:
   12dac:	0002      	movs	r2, r0
   12dae:	b510      	push	{r4, lr}
   12db0:	200a      	movs	r0, #10
   12db2:	2903      	cmp	r1, #3
   12db4:	d822      	bhi.n	12dfc <LorawanMcastEnable+0x50>
   12db6:	4b1a      	ldr	r3, [pc, #104]	; (12e20 <LorawanMcastEnable+0x74>)
   12db8:	2a00      	cmp	r2, #0
   12dba:	d020      	beq.n	12dfe <LorawanMcastEnable+0x52>
   12dbc:	223c      	movs	r2, #60	; 0x3c
   12dbe:	434a      	muls	r2, r1
   12dc0:	189a      	adds	r2, r3, r2
   12dc2:	3259      	adds	r2, #89	; 0x59
   12dc4:	32ff      	adds	r2, #255	; 0xff
   12dc6:	7a12      	ldrb	r2, [r2, #8]
   12dc8:	0754      	lsls	r4, r2, #29
   12dca:	d512      	bpl.n	12df2 <LorawanMcastEnable+0x46>
   12dcc:	0794      	lsls	r4, r2, #30
   12dce:	d510      	bpl.n	12df2 <LorawanMcastEnable+0x46>
   12dd0:	07d2      	lsls	r2, r2, #31
   12dd2:	0fd2      	lsrs	r2, r2, #31
   12dd4:	2a01      	cmp	r2, #1
   12dd6:	d10c      	bne.n	12df2 <LorawanMcastEnable+0x46>
   12dd8:	001c      	movs	r4, r3
   12dda:	34fd      	adds	r4, #253	; 0xfd
   12ddc:	7824      	ldrb	r4, [r4, #0]
   12dde:	0764      	lsls	r4, r4, #29
   12de0:	d007      	beq.n	12df2 <LorawanMcastEnable+0x46>
   12de2:	202e      	movs	r0, #46	; 0x2e
   12de4:	408a      	lsls	r2, r1
   12de6:	30ff      	adds	r0, #255	; 0xff
   12de8:	5c19      	ldrb	r1, [r3, r0]
   12dea:	430a      	orrs	r2, r1
   12dec:	541a      	strb	r2, [r3, r0]
   12dee:	3826      	subs	r0, #38	; 0x26
   12df0:	38ff      	subs	r0, #255	; 0xff
   12df2:	2196      	movs	r1, #150	; 0x96
   12df4:	0049      	lsls	r1, r1, #1
   12df6:	5c5a      	ldrb	r2, [r3, r1]
   12df8:	3201      	adds	r2, #1
   12dfa:	545a      	strb	r2, [r3, r1]
   12dfc:	bd10      	pop	{r4, pc}
   12dfe:	2201      	movs	r2, #1
   12e00:	408a      	lsls	r2, r1
   12e02:	202e      	movs	r0, #46	; 0x2e
   12e04:	0011      	movs	r1, r2
   12e06:	30ff      	adds	r0, #255	; 0xff
   12e08:	5c1a      	ldrb	r2, [r3, r0]
   12e0a:	438a      	bics	r2, r1
   12e0c:	2196      	movs	r1, #150	; 0x96
   12e0e:	541a      	strb	r2, [r3, r0]
   12e10:	0049      	lsls	r1, r1, #1
   12e12:	5c5a      	ldrb	r2, [r3, r1]
   12e14:	3826      	subs	r0, #38	; 0x26
   12e16:	3a01      	subs	r2, #1
   12e18:	545a      	strb	r2, [r3, r1]
   12e1a:	38ff      	subs	r0, #255	; 0xff
   12e1c:	e7ee      	b.n	12dfc <LorawanMcastEnable+0x50>
   12e1e:	46c0      	nop			; (mov r8, r8)
   12e20:	20002bd4 	.word	0x20002bd4

00012e24 <LorawanMcastValidateHdr>:
   12e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e26:	469c      	mov	ip, r3
   12e28:	2400      	movs	r4, #0
   12e2a:	230a      	movs	r3, #10
   12e2c:	4f18      	ldr	r7, [pc, #96]	; (12e90 <LorawanMcastValidateHdr+0x6c>)
   12e2e:	b2e5      	uxtb	r5, r4
   12e30:	9501      	str	r5, [sp, #4]
   12e32:	252e      	movs	r5, #46	; 0x2e
   12e34:	35ff      	adds	r5, #255	; 0xff
   12e36:	5d7d      	ldrb	r5, [r7, r5]
   12e38:	2601      	movs	r6, #1
   12e3a:	4125      	asrs	r5, r4
   12e3c:	4235      	tst	r5, r6
   12e3e:	d022      	beq.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e40:	7886      	ldrb	r6, [r0, #2]
   12e42:	7845      	ldrb	r5, [r0, #1]
   12e44:	0236      	lsls	r6, r6, #8
   12e46:	432e      	orrs	r6, r5
   12e48:	78c5      	ldrb	r5, [r0, #3]
   12e4a:	042d      	lsls	r5, r5, #16
   12e4c:	432e      	orrs	r6, r5
   12e4e:	7905      	ldrb	r5, [r0, #4]
   12e50:	062d      	lsls	r5, r5, #24
   12e52:	4335      	orrs	r5, r6
   12e54:	263c      	movs	r6, #60	; 0x3c
   12e56:	4366      	muls	r6, r4
   12e58:	3631      	adds	r6, #49	; 0x31
   12e5a:	36ff      	adds	r6, #255	; 0xff
   12e5c:	59be      	ldr	r6, [r7, r6]
   12e5e:	42b5      	cmp	r5, r6
   12e60:	d111      	bne.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e62:	4d0c      	ldr	r5, [pc, #48]	; (12e94 <LorawanMcastValidateHdr+0x70>)
   12e64:	782e      	ldrb	r6, [r5, #0]
   12e66:	2506      	movs	r5, #6
   12e68:	422e      	tst	r6, r5
   12e6a:	d00c      	beq.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e6c:	2a00      	cmp	r2, #0
   12e6e:	d00a      	beq.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e70:	7946      	ldrb	r6, [r0, #5]
   12e72:	3569      	adds	r5, #105	; 0x69
   12e74:	422e      	tst	r6, r5
   12e76:	d106      	bne.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e78:	2903      	cmp	r1, #3
   12e7a:	d104      	bne.n	12e86 <LorawanMcastValidateHdr+0x62>
   12e7c:	466d      	mov	r5, sp
   12e7e:	4663      	mov	r3, ip
   12e80:	792d      	ldrb	r5, [r5, #4]
   12e82:	701d      	strb	r5, [r3, #0]
   12e84:	2308      	movs	r3, #8
   12e86:	3401      	adds	r4, #1
   12e88:	2c04      	cmp	r4, #4
   12e8a:	d1d0      	bne.n	12e2e <LorawanMcastValidateHdr+0xa>
   12e8c:	0018      	movs	r0, r3
   12e8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12e90:	20002bd4 	.word	0x20002bd4
   12e94:	20002cd1 	.word	0x20002cd1

00012e98 <LorawanMcastProcessPkt>:
   12e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e9a:	0015      	movs	r5, r2
   12e9c:	223c      	movs	r2, #60	; 0x3c
   12e9e:	435a      	muls	r2, r3
   12ea0:	b089      	sub	sp, #36	; 0x24
   12ea2:	9107      	str	r1, [sp, #28]
   12ea4:	493f      	ldr	r1, [pc, #252]	; (12fa4 <LorawanMcastProcessPkt+0x10c>)
   12ea6:	9006      	str	r0, [sp, #24]
   12ea8:	1889      	adds	r1, r1, r2
   12eaa:	31fc      	adds	r1, #252	; 0xfc
   12eac:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   12eae:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12eb0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   12eb2:	4284      	cmp	r4, r0
   12eb4:	d224      	bcs.n	12f00 <LorawanMcastProcessPkt+0x68>
   12eb6:	2100      	movs	r1, #0
   12eb8:	4294      	cmp	r4, r2
   12eba:	d802      	bhi.n	12ec2 <LorawanMcastProcessPkt+0x2a>
   12ebc:	4282      	cmp	r2, r0
   12ebe:	4192      	sbcs	r2, r2
   12ec0:	4251      	negs	r1, r2
   12ec2:	270a      	movs	r7, #10
   12ec4:	2900      	cmp	r1, #0
   12ec6:	d11d      	bne.n	12f04 <LorawanMcastProcessPkt+0x6c>
   12ec8:	4a36      	ldr	r2, [pc, #216]	; (12fa4 <LorawanMcastProcessPkt+0x10c>)
   12eca:	210e      	movs	r1, #14
   12ecc:	0010      	movs	r0, r2
   12ece:	3084      	adds	r0, #132	; 0x84
   12ed0:	7803      	ldrb	r3, [r0, #0]
   12ed2:	001c      	movs	r4, r3
   12ed4:	400c      	ands	r4, r1
   12ed6:	2c06      	cmp	r4, #6
   12ed8:	d108      	bne.n	12eec <LorawanMcastProcessPkt+0x54>
   12eda:	0014      	movs	r4, r2
   12edc:	34fd      	adds	r4, #253	; 0xfd
   12ede:	7824      	ldrb	r4, [r4, #0]
   12ee0:	2c04      	cmp	r4, #4
   12ee2:	d103      	bne.n	12eec <LorawanMcastProcessPkt+0x54>
   12ee4:	438b      	bics	r3, r1
   12ee6:	3904      	subs	r1, #4
   12ee8:	430b      	orrs	r3, r1
   12eea:	7003      	strb	r3, [r0, #0]
   12eec:	2390      	movs	r3, #144	; 0x90
   12eee:	2101      	movs	r1, #1
   12ef0:	009b      	lsls	r3, r3, #2
   12ef2:	54d1      	strb	r1, [r2, r3]
   12ef4:	2000      	movs	r0, #0
   12ef6:	4b2c      	ldr	r3, [pc, #176]	; (12fa8 <LorawanMcastProcessPkt+0x110>)
   12ef8:	4798      	blx	r3
   12efa:	0038      	movs	r0, r7
   12efc:	b009      	add	sp, #36	; 0x24
   12efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f00:	4294      	cmp	r4, r2
   12f02:	d8db      	bhi.n	12ebc <LorawanMcastProcessPkt+0x24>
   12f04:	243c      	movs	r4, #60	; 0x3c
   12f06:	435c      	muls	r4, r3
   12f08:	4e26      	ldr	r6, [pc, #152]	; (12fa4 <LorawanMcastProcessPkt+0x10c>)
   12f0a:	79ea      	ldrb	r2, [r5, #7]
   12f0c:	1937      	adds	r7, r6, r4
   12f0e:	003b      	movs	r3, r7
   12f10:	79a9      	ldrb	r1, [r5, #6]
   12f12:	0212      	lsls	r2, r2, #8
   12f14:	3355      	adds	r3, #85	; 0x55
   12f16:	430a      	orrs	r2, r1
   12f18:	33ff      	adds	r3, #255	; 0xff
   12f1a:	801a      	strh	r2, [r3, #0]
   12f1c:	2105      	movs	r1, #5
   12f1e:	4b23      	ldr	r3, [pc, #140]	; (12fac <LorawanMcastProcessPkt+0x114>)
   12f20:	37fc      	adds	r7, #252	; 0xfc
   12f22:	2000      	movs	r0, #0
   12f24:	4798      	blx	r3
   12f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f28:	3445      	adds	r4, #69	; 0x45
   12f2a:	9304      	str	r3, [sp, #16]
   12f2c:	4b20      	ldr	r3, [pc, #128]	; (12fb0 <LorawanMcastProcessPkt+0x118>)
   12f2e:	9907      	ldr	r1, [sp, #28]
   12f30:	9303      	str	r3, [sp, #12]
   12f32:	2319      	movs	r3, #25
   12f34:	34ff      	adds	r4, #255	; 0xff
   12f36:	9302      	str	r3, [sp, #8]
   12f38:	19a4      	adds	r4, r4, r6
   12f3a:	3b16      	subs	r3, #22
   12f3c:	9806      	ldr	r0, [sp, #24]
   12f3e:	9400      	str	r4, [sp, #0]
   12f40:	390d      	subs	r1, #13
   12f42:	9301      	str	r3, [sp, #4]
   12f44:	b2c9      	uxtb	r1, r1
   12f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12f48:	2201      	movs	r2, #1
   12f4a:	3009      	adds	r0, #9
   12f4c:	4c19      	ldr	r4, [pc, #100]	; (12fb4 <LorawanMcastProcessPkt+0x11c>)
   12f4e:	47a0      	blx	r4
   12f50:	2800      	cmp	r0, #0
   12f52:	d002      	beq.n	12f5a <LorawanMcastProcessPkt+0xc2>
   12f54:	201f      	movs	r0, #31
   12f56:	4b18      	ldr	r3, [pc, #96]	; (12fb8 <LorawanMcastProcessPkt+0x120>)
   12f58:	4798      	blx	r3
   12f5a:	4918      	ldr	r1, [pc, #96]	; (12fbc <LorawanMcastProcessPkt+0x124>)
   12f5c:	2708      	movs	r7, #8
   12f5e:	784a      	ldrb	r2, [r1, #1]
   12f60:	780b      	ldrb	r3, [r1, #0]
   12f62:	0212      	lsls	r2, r2, #8
   12f64:	431a      	orrs	r2, r3
   12f66:	788b      	ldrb	r3, [r1, #2]
   12f68:	041b      	lsls	r3, r3, #16
   12f6a:	431a      	orrs	r2, r3
   12f6c:	78cb      	ldrb	r3, [r1, #3]
   12f6e:	061b      	lsls	r3, r3, #24
   12f70:	4313      	orrs	r3, r2
   12f72:	d0a9      	beq.n	12ec8 <LorawanMcastProcessPkt+0x30>
   12f74:	2220      	movs	r2, #32
   12f76:	3694      	adds	r6, #148	; 0x94
   12f78:	7833      	ldrb	r3, [r6, #0]
   12f7a:	9906      	ldr	r1, [sp, #24]
   12f7c:	4393      	bics	r3, r2
   12f7e:	7033      	strb	r3, [r6, #0]
   12f80:	78ab      	ldrb	r3, [r5, #2]
   12f82:	7868      	ldrb	r0, [r5, #1]
   12f84:	40bb      	lsls	r3, r7
   12f86:	4303      	orrs	r3, r0
   12f88:	78e8      	ldrb	r0, [r5, #3]
   12f8a:	9a07      	ldr	r2, [sp, #28]
   12f8c:	0400      	lsls	r0, r0, #16
   12f8e:	4303      	orrs	r3, r0
   12f90:	7928      	ldrb	r0, [r5, #4]
   12f92:	3a0c      	subs	r2, #12
   12f94:	0600      	lsls	r0, r0, #24
   12f96:	4318      	orrs	r0, r3
   12f98:	b2d2      	uxtb	r2, r2
   12f9a:	19c9      	adds	r1, r1, r7
   12f9c:	003b      	movs	r3, r7
   12f9e:	4c08      	ldr	r4, [pc, #32]	; (12fc0 <LorawanMcastProcessPkt+0x128>)
   12fa0:	47a0      	blx	r4
   12fa2:	e791      	b.n	12ec8 <LorawanMcastProcessPkt+0x30>
   12fa4:	20002bd4 	.word	0x20002bd4
   12fa8:	00010c5d 	.word	0x00010c5d
   12fac:	0000c84d 	.word	0x0000c84d
   12fb0:	20002f38 	.word	0x20002f38
   12fb4:	0000fbc5 	.word	0x0000fbc5
   12fb8:	0000fc85 	.word	0x0000fc85
   12fbc:	20002f30 	.word	0x20002f30
   12fc0:	0000fce9 	.word	0x0000fce9

00012fc4 <LorawanAddMcastAddr>:
   12fc4:	b570      	push	{r4, r5, r6, lr}
   12fc6:	260a      	movs	r6, #10
   12fc8:	2903      	cmp	r1, #3
   12fca:	d818      	bhi.n	12ffe <LorawanAddMcastAddr+0x3a>
   12fcc:	4b0d      	ldr	r3, [pc, #52]	; (13004 <LorawanAddMcastAddr+0x40>)
   12fce:	681a      	ldr	r2, [r3, #0]
   12fd0:	0a15      	lsrs	r5, r2, #8
   12fd2:	791a      	ldrb	r2, [r3, #4]
   12fd4:	0612      	lsls	r2, r2, #24
   12fd6:	432a      	orrs	r2, r5
   12fd8:	4282      	cmp	r2, r0
   12fda:	d010      	beq.n	12ffe <LorawanAddMcastAddr+0x3a>
   12fdc:	243c      	movs	r4, #60	; 0x3c
   12fde:	434c      	muls	r4, r1
   12fe0:	191c      	adds	r4, r3, r4
   12fe2:	0023      	movs	r3, r4
   12fe4:	33fc      	adds	r3, #252	; 0xfc
   12fe6:	6358      	str	r0, [r3, #52]	; 0x34
   12fe8:	2106      	movs	r1, #6
   12fea:	2000      	movs	r0, #0
   12fec:	4b06      	ldr	r3, [pc, #24]	; (13008 <LorawanAddMcastAddr+0x44>)
   12fee:	4798      	blx	r3
   12ff0:	2201      	movs	r2, #1
   12ff2:	3459      	adds	r4, #89	; 0x59
   12ff4:	34ff      	adds	r4, #255	; 0xff
   12ff6:	7a21      	ldrb	r1, [r4, #8]
   12ff8:	3e02      	subs	r6, #2
   12ffa:	430a      	orrs	r2, r1
   12ffc:	7222      	strb	r2, [r4, #8]
   12ffe:	0030      	movs	r0, r6
   13000:	bd70      	pop	{r4, r5, r6, pc}
   13002:	46c0      	nop			; (mov r8, r8)
   13004:	20002bd4 	.word	0x20002bd4
   13008:	0000c84d 	.word	0x0000c84d

0001300c <LorawanAddMcastAppskey>:
   1300c:	b570      	push	{r4, r5, r6, lr}
   1300e:	0006      	movs	r6, r0
   13010:	200a      	movs	r0, #10
   13012:	2903      	cmp	r1, #3
   13014:	d818      	bhi.n	13048 <LorawanAddMcastAppskey+0x3c>
   13016:	2e00      	cmp	r6, #0
   13018:	d016      	beq.n	13048 <LorawanAddMcastAppskey+0x3c>
   1301a:	253c      	movs	r5, #60	; 0x3c
   1301c:	434d      	muls	r5, r1
   1301e:	0028      	movs	r0, r5
   13020:	4c0a      	ldr	r4, [pc, #40]	; (1304c <LorawanAddMcastAppskey+0x40>)
   13022:	3045      	adds	r0, #69	; 0x45
   13024:	30ff      	adds	r0, #255	; 0xff
   13026:	2210      	movs	r2, #16
   13028:	1900      	adds	r0, r0, r4
   1302a:	0031      	movs	r1, r6
   1302c:	4b08      	ldr	r3, [pc, #32]	; (13050 <LorawanAddMcastAppskey+0x44>)
   1302e:	4798      	blx	r3
   13030:	4b08      	ldr	r3, [pc, #32]	; (13054 <LorawanAddMcastAppskey+0x48>)
   13032:	2107      	movs	r1, #7
   13034:	2000      	movs	r0, #0
   13036:	4798      	blx	r3
   13038:	2304      	movs	r3, #4
   1303a:	2008      	movs	r0, #8
   1303c:	1964      	adds	r4, r4, r5
   1303e:	3459      	adds	r4, #89	; 0x59
   13040:	34ff      	adds	r4, #255	; 0xff
   13042:	7a22      	ldrb	r2, [r4, #8]
   13044:	4313      	orrs	r3, r2
   13046:	7223      	strb	r3, [r4, #8]
   13048:	bd70      	pop	{r4, r5, r6, pc}
   1304a:	46c0      	nop			; (mov r8, r8)
   1304c:	20002bd4 	.word	0x20002bd4
   13050:	00018655 	.word	0x00018655
   13054:	0000c84d 	.word	0x0000c84d

00013058 <LorawanAddMcastNwkskey>:
   13058:	b570      	push	{r4, r5, r6, lr}
   1305a:	0006      	movs	r6, r0
   1305c:	200a      	movs	r0, #10
   1305e:	2903      	cmp	r1, #3
   13060:	d818      	bhi.n	13094 <LorawanAddMcastNwkskey+0x3c>
   13062:	2e00      	cmp	r6, #0
   13064:	d016      	beq.n	13094 <LorawanAddMcastNwkskey+0x3c>
   13066:	253c      	movs	r5, #60	; 0x3c
   13068:	434d      	muls	r5, r1
   1306a:	0028      	movs	r0, r5
   1306c:	4c0a      	ldr	r4, [pc, #40]	; (13098 <LorawanAddMcastNwkskey+0x40>)
   1306e:	3035      	adds	r0, #53	; 0x35
   13070:	30ff      	adds	r0, #255	; 0xff
   13072:	2210      	movs	r2, #16
   13074:	1900      	adds	r0, r0, r4
   13076:	0031      	movs	r1, r6
   13078:	4b08      	ldr	r3, [pc, #32]	; (1309c <LorawanAddMcastNwkskey+0x44>)
   1307a:	4798      	blx	r3
   1307c:	4b08      	ldr	r3, [pc, #32]	; (130a0 <LorawanAddMcastNwkskey+0x48>)
   1307e:	2108      	movs	r1, #8
   13080:	2000      	movs	r0, #0
   13082:	4798      	blx	r3
   13084:	2302      	movs	r3, #2
   13086:	2008      	movs	r0, #8
   13088:	1964      	adds	r4, r4, r5
   1308a:	3459      	adds	r4, #89	; 0x59
   1308c:	34ff      	adds	r4, #255	; 0xff
   1308e:	7a22      	ldrb	r2, [r4, #8]
   13090:	4313      	orrs	r3, r2
   13092:	7223      	strb	r3, [r4, #8]
   13094:	bd70      	pop	{r4, r5, r6, pc}
   13096:	46c0      	nop			; (mov r8, r8)
   13098:	20002bd4 	.word	0x20002bd4
   1309c:	00018655 	.word	0x00018655
   130a0:	0000c84d 	.word	0x0000c84d

000130a4 <LorawanAddMcastFcntMin>:
   130a4:	220a      	movs	r2, #10
   130a6:	2903      	cmp	r1, #3
   130a8:	d807      	bhi.n	130ba <LorawanAddMcastFcntMin+0x16>
   130aa:	233c      	movs	r3, #60	; 0x3c
   130ac:	434b      	muls	r3, r1
   130ae:	4904      	ldr	r1, [pc, #16]	; (130c0 <LorawanAddMcastFcntMin+0x1c>)
   130b0:	3a02      	subs	r2, #2
   130b2:	18c9      	adds	r1, r1, r3
   130b4:	31fc      	adds	r1, #252	; 0xfc
   130b6:	65c8      	str	r0, [r1, #92]	; 0x5c
   130b8:	6588      	str	r0, [r1, #88]	; 0x58
   130ba:	0010      	movs	r0, r2
   130bc:	4770      	bx	lr
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	20002bd4 	.word	0x20002bd4

000130c4 <LorawanAddMcastFcntMax>:
   130c4:	220a      	movs	r2, #10
   130c6:	2903      	cmp	r1, #3
   130c8:	d806      	bhi.n	130d8 <LorawanAddMcastFcntMax+0x14>
   130ca:	233c      	movs	r3, #60	; 0x3c
   130cc:	434b      	muls	r3, r1
   130ce:	4903      	ldr	r1, [pc, #12]	; (130dc <LorawanAddMcastFcntMax+0x18>)
   130d0:	3a02      	subs	r2, #2
   130d2:	18c9      	adds	r1, r1, r3
   130d4:	31fc      	adds	r1, #252	; 0xfc
   130d6:	6608      	str	r0, [r1, #96]	; 0x60
   130d8:	0010      	movs	r0, r2
   130da:	4770      	bx	lr
   130dc:	20002bd4 	.word	0x20002bd4

000130e0 <LorawanAddMcastDlFrequency>:
   130e0:	b513      	push	{r0, r1, r4, lr}
   130e2:	000c      	movs	r4, r1
   130e4:	9001      	str	r0, [sp, #4]
   130e6:	2903      	cmp	r1, #3
   130e8:	d901      	bls.n	130ee <LorawanAddMcastDlFrequency+0xe>
   130ea:	200a      	movs	r0, #10
   130ec:	bd16      	pop	{r1, r2, r4, pc}
   130ee:	a901      	add	r1, sp, #4
   130f0:	2001      	movs	r0, #1
   130f2:	4b0a      	ldr	r3, [pc, #40]	; (1311c <LorawanAddMcastDlFrequency+0x3c>)
   130f4:	4798      	blx	r3
   130f6:	2808      	cmp	r0, #8
   130f8:	d1f7      	bne.n	130ea <LorawanAddMcastDlFrequency+0xa>
   130fa:	213c      	movs	r1, #60	; 0x3c
   130fc:	4361      	muls	r1, r4
   130fe:	4b08      	ldr	r3, [pc, #32]	; (13120 <LorawanAddMcastDlFrequency+0x40>)
   13100:	9a01      	ldr	r2, [sp, #4]
   13102:	1859      	adds	r1, r3, r1
   13104:	31fc      	adds	r1, #252	; 0xfc
   13106:	336f      	adds	r3, #111	; 0x6f
   13108:	668a      	str	r2, [r1, #104]	; 0x68
   1310a:	0a11      	lsrs	r1, r2, #8
   1310c:	701a      	strb	r2, [r3, #0]
   1310e:	7059      	strb	r1, [r3, #1]
   13110:	0c11      	lsrs	r1, r2, #16
   13112:	0e12      	lsrs	r2, r2, #24
   13114:	7099      	strb	r1, [r3, #2]
   13116:	70da      	strb	r2, [r3, #3]
   13118:	e7e8      	b.n	130ec <LorawanAddMcastDlFrequency+0xc>
   1311a:	46c0      	nop			; (mov r8, r8)
   1311c:	0000bff9 	.word	0x0000bff9
   13120:	20002bd4 	.word	0x20002bd4

00013124 <LorawanAddMcastDatarate>:
   13124:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13126:	466b      	mov	r3, sp
   13128:	1ddd      	adds	r5, r3, #7
   1312a:	000c      	movs	r4, r1
   1312c:	7028      	strb	r0, [r5, #0]
   1312e:	2903      	cmp	r1, #3
   13130:	d901      	bls.n	13136 <LorawanAddMcastDatarate+0x12>
   13132:	200a      	movs	r0, #10
   13134:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13136:	0029      	movs	r1, r5
   13138:	200f      	movs	r0, #15
   1313a:	4b07      	ldr	r3, [pc, #28]	; (13158 <LorawanAddMcastDatarate+0x34>)
   1313c:	4798      	blx	r3
   1313e:	2808      	cmp	r0, #8
   13140:	d1f7      	bne.n	13132 <LorawanAddMcastDatarate+0xe>
   13142:	213c      	movs	r1, #60	; 0x3c
   13144:	4361      	muls	r1, r4
   13146:	4b05      	ldr	r3, [pc, #20]	; (1315c <LorawanAddMcastDatarate+0x38>)
   13148:	782a      	ldrb	r2, [r5, #0]
   1314a:	1859      	adds	r1, r3, r1
   1314c:	3169      	adds	r1, #105	; 0x69
   1314e:	31ff      	adds	r1, #255	; 0xff
   13150:	3373      	adds	r3, #115	; 0x73
   13152:	700a      	strb	r2, [r1, #0]
   13154:	701a      	strb	r2, [r3, #0]
   13156:	e7ed      	b.n	13134 <LorawanAddMcastDatarate+0x10>
   13158:	0000bff9 	.word	0x0000bff9
   1315c:	20002bd4 	.word	0x20002bd4

00013160 <LorawanAddMcastPeriodicity>:
   13160:	220a      	movs	r2, #10
   13162:	2903      	cmp	r1, #3
   13164:	d809      	bhi.n	1317a <LorawanAddMcastPeriodicity+0x1a>
   13166:	2807      	cmp	r0, #7
   13168:	d807      	bhi.n	1317a <LorawanAddMcastPeriodicity+0x1a>
   1316a:	233c      	movs	r3, #60	; 0x3c
   1316c:	434b      	muls	r3, r1
   1316e:	4904      	ldr	r1, [pc, #16]	; (13180 <LorawanAddMcastPeriodicity+0x20>)
   13170:	3a02      	subs	r2, #2
   13172:	18c9      	adds	r1, r1, r3
   13174:	316a      	adds	r1, #106	; 0x6a
   13176:	31ff      	adds	r1, #255	; 0xff
   13178:	7008      	strb	r0, [r1, #0]
   1317a:	0010      	movs	r0, r2
   1317c:	4770      	bx	lr
   1317e:	46c0      	nop			; (mov r8, r8)
   13180:	20002bd4 	.word	0x20002bd4

00013184 <Lorawan_Pds_fid1_CB>:
   13184:	4770      	bx	lr
	...

00013188 <Lorawan_Pds_fid2_CB>:
   13188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1318a:	4c1a      	ldr	r4, [pc, #104]	; (131f4 <Lorawan_Pds_fid2_CB+0x6c>)
   1318c:	2271      	movs	r2, #113	; 0x71
   1318e:	0025      	movs	r5, r4
   13190:	2701      	movs	r7, #1
   13192:	3584      	adds	r5, #132	; 0x84
   13194:	782b      	ldrb	r3, [r5, #0]
   13196:	4013      	ands	r3, r2
   13198:	702b      	strb	r3, [r5, #0]
   1319a:	786b      	ldrb	r3, [r5, #1]
   1319c:	43bb      	bics	r3, r7
   1319e:	706b      	strb	r3, [r5, #1]
   131a0:	4b15      	ldr	r3, [pc, #84]	; (131f8 <Lorawan_Pds_fid2_CB+0x70>)
   131a2:	5ce3      	ldrb	r3, [r4, r3]
   131a4:	2b00      	cmp	r3, #0
   131a6:	d018      	beq.n	131da <Lorawan_Pds_fid2_CB+0x52>
   131a8:	4914      	ldr	r1, [pc, #80]	; (131fc <Lorawan_Pds_fid2_CB+0x74>)
   131aa:	2006      	movs	r0, #6
   131ac:	4e14      	ldr	r6, [pc, #80]	; (13200 <Lorawan_Pds_fid2_CB+0x78>)
   131ae:	47b0      	blx	r6
   131b0:	2800      	cmp	r0, #0
   131b2:	d002      	beq.n	131ba <Lorawan_Pds_fid2_CB+0x32>
   131b4:	782b      	ldrb	r3, [r5, #0]
   131b6:	43bb      	bics	r3, r7
   131b8:	702b      	strb	r3, [r5, #0]
   131ba:	0023      	movs	r3, r4
   131bc:	2501      	movs	r5, #1
   131be:	3384      	adds	r3, #132	; 0x84
   131c0:	781b      	ldrb	r3, [r3, #0]
   131c2:	422b      	tst	r3, r5
   131c4:	d008      	beq.n	131d8 <Lorawan_Pds_fid2_CB+0x50>
   131c6:	7823      	ldrb	r3, [r4, #0]
   131c8:	2b00      	cmp	r3, #0
   131ca:	d106      	bne.n	131da <Lorawan_Pds_fid2_CB+0x52>
   131cc:	490d      	ldr	r1, [pc, #52]	; (13204 <Lorawan_Pds_fid2_CB+0x7c>)
   131ce:	2002      	movs	r0, #2
   131d0:	47b0      	blx	r6
   131d2:	490d      	ldr	r1, [pc, #52]	; (13208 <Lorawan_Pds_fid2_CB+0x80>)
   131d4:	0028      	movs	r0, r5
   131d6:	47b0      	blx	r6
   131d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131da:	0020      	movs	r0, r4
   131dc:	0021      	movs	r1, r4
   131de:	2210      	movs	r2, #16
   131e0:	3115      	adds	r1, #21
   131e2:	4d0a      	ldr	r5, [pc, #40]	; (1320c <Lorawan_Pds_fid2_CB+0x84>)
   131e4:	3035      	adds	r0, #53	; 0x35
   131e6:	47a8      	blx	r5
   131e8:	0020      	movs	r0, r4
   131ea:	1d61      	adds	r1, r4, #5
   131ec:	2210      	movs	r2, #16
   131ee:	3025      	adds	r0, #37	; 0x25
   131f0:	47a8      	blx	r5
   131f2:	e7f1      	b.n	131d8 <Lorawan_Pds_fid2_CB+0x50>
   131f4:	20002bd4 	.word	0x20002bd4
   131f8:	0000022d 	.word	0x0000022d
   131fc:	20002c29 	.word	0x20002c29
   13200:	0000c425 	.word	0x0000c425
   13204:	20002bf9 	.word	0x20002bf9
   13208:	20002c09 	.word	0x20002c09
   1320c:	00018655 	.word	0x00018655

00013210 <LORAWAN_TxHandler>:
   13210:	b5f0      	push	{r4, r5, r6, r7, lr}
   13212:	b087      	sub	sp, #28
   13214:	466b      	mov	r3, sp
   13216:	2501      	movs	r5, #1
   13218:	4c2f      	ldr	r4, [pc, #188]	; (132d8 <LORAWAN_TxHandler+0xc8>)
   1321a:	701d      	strb	r5, [r3, #0]
   1321c:	0023      	movs	r3, r4
   1321e:	466a      	mov	r2, sp
   13220:	33e9      	adds	r3, #233	; 0xe9
   13222:	781b      	ldrb	r3, [r3, #0]
   13224:	4669      	mov	r1, sp
   13226:	7053      	strb	r3, [r2, #1]
   13228:	0023      	movs	r3, r4
   1322a:	33e7      	adds	r3, #231	; 0xe7
   1322c:	781b      	ldrb	r3, [r3, #0]
   1322e:	202e      	movs	r0, #46	; 0x2e
   13230:	7093      	strb	r3, [r2, #2]
   13232:	aa03      	add	r2, sp, #12
   13234:	4b29      	ldr	r3, [pc, #164]	; (132dc <LORAWAN_TxHandler+0xcc>)
   13236:	4798      	blx	r3
   13238:	2808      	cmp	r0, #8
   1323a:	d004      	beq.n	13246 <LORAWAN_TxHandler+0x36>
   1323c:	4b28      	ldr	r3, [pc, #160]	; (132e0 <LORAWAN_TxHandler+0xd0>)
   1323e:	4798      	blx	r3
   13240:	2000      	movs	r0, #0
   13242:	b007      	add	sp, #28
   13244:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13246:	0023      	movs	r3, r4
   13248:	33fd      	adds	r3, #253	; 0xfd
   1324a:	781b      	ldrb	r3, [r3, #0]
   1324c:	ae01      	add	r6, sp, #4
   1324e:	2b04      	cmp	r3, #4
   13250:	d103      	bne.n	1325a <LORAWAN_TxHandler+0x4a>
   13252:	0030      	movs	r0, r6
   13254:	4b23      	ldr	r3, [pc, #140]	; (132e4 <LORAWAN_TxHandler+0xd4>)
   13256:	7035      	strb	r5, [r6, #0]
   13258:	4798      	blx	r3
   1325a:	4b23      	ldr	r3, [pc, #140]	; (132e8 <LORAWAN_TxHandler+0xd8>)
   1325c:	9803      	ldr	r0, [sp, #12]
   1325e:	9904      	ldr	r1, [sp, #16]
   13260:	9a05      	ldr	r2, [sp, #20]
   13262:	4798      	blx	r3
   13264:	0023      	movs	r3, r4
   13266:	33fc      	adds	r3, #252	; 0xfc
   13268:	68dd      	ldr	r5, [r3, #12]
   1326a:	4f20      	ldr	r7, [pc, #128]	; (132ec <LORAWAN_TxHandler+0xdc>)
   1326c:	4b20      	ldr	r3, [pc, #128]	; (132f0 <LORAWAN_TxHandler+0xe0>)
   1326e:	2d00      	cmp	r5, #0
   13270:	d023      	beq.n	132ba <LORAWAN_TxHandler+0xaa>
   13272:	2201      	movs	r2, #1
   13274:	54e2      	strb	r2, [r4, r3]
   13276:	7828      	ldrb	r0, [r5, #0]
   13278:	7a2b      	ldrb	r3, [r5, #8]
   1327a:	1e42      	subs	r2, r0, #1
   1327c:	4190      	sbcs	r0, r2
   1327e:	7869      	ldrb	r1, [r5, #1]
   13280:	686a      	ldr	r2, [r5, #4]
   13282:	b2c0      	uxtb	r0, r0
   13284:	47b8      	blx	r7
   13286:	0023      	movs	r3, r4
   13288:	33ce      	adds	r3, #206	; 0xce
   1328a:	881b      	ldrh	r3, [r3, #0]
   1328c:	0030      	movs	r0, r6
   1328e:	7033      	strb	r3, [r6, #0]
   13290:	4b18      	ldr	r3, [pc, #96]	; (132f4 <LORAWAN_TxHandler+0xe4>)
   13292:	6073      	str	r3, [r6, #4]
   13294:	4b18      	ldr	r3, [pc, #96]	; (132f8 <LORAWAN_TxHandler+0xe8>)
   13296:	4798      	blx	r3
   13298:	2800      	cmp	r0, #0
   1329a:	d114      	bne.n	132c6 <LORAWAN_TxHandler+0xb6>
   1329c:	0021      	movs	r1, r4
   1329e:	220e      	movs	r2, #14
   132a0:	3184      	adds	r1, #132	; 0x84
   132a2:	780b      	ldrb	r3, [r1, #0]
   132a4:	4393      	bics	r3, r2
   132a6:	001a      	movs	r2, r3
   132a8:	2302      	movs	r3, #2
   132aa:	4313      	orrs	r3, r2
   132ac:	700b      	strb	r3, [r1, #0]
   132ae:	2208      	movs	r2, #8
   132b0:	3494      	adds	r4, #148	; 0x94
   132b2:	7823      	ldrb	r3, [r4, #0]
   132b4:	4393      	bics	r3, r2
   132b6:	7023      	strb	r3, [r4, #0]
   132b8:	e7c2      	b.n	13240 <LORAWAN_TxHandler+0x30>
   132ba:	54e5      	strb	r5, [r4, r3]
   132bc:	002a      	movs	r2, r5
   132be:	002b      	movs	r3, r5
   132c0:	0029      	movs	r1, r5
   132c2:	0028      	movs	r0, r5
   132c4:	e7de      	b.n	13284 <LORAWAN_TxHandler+0x74>
   132c6:	0022      	movs	r2, r4
   132c8:	2120      	movs	r1, #32
   132ca:	3294      	adds	r2, #148	; 0x94
   132cc:	7813      	ldrb	r3, [r2, #0]
   132ce:	438b      	bics	r3, r1
   132d0:	7013      	strb	r3, [r2, #0]
   132d2:	4b03      	ldr	r3, [pc, #12]	; (132e0 <LORAWAN_TxHandler+0xd0>)
   132d4:	4798      	blx	r3
   132d6:	e7ea      	b.n	132ae <LORAWAN_TxHandler+0x9e>
   132d8:	20002bd4 	.word	0x20002bd4
   132dc:	0000bfdd 	.word	0x0000bfdd
   132e0:	0000fc85 	.word	0x0000fc85
   132e4:	0001477d 	.word	0x0001477d
   132e8:	0000f6ed 	.word	0x0000f6ed
   132ec:	00012699 	.word	0x00012699
   132f0:	0000022a 	.word	0x0000022a
   132f4:	20002e2d 	.word	0x20002e2d
   132f8:	00013ea9 	.word	0x00013ea9

000132fc <LORAWAN_JoinReqHandler>:
   132fc:	b530      	push	{r4, r5, lr}
   132fe:	b087      	sub	sp, #28
   13300:	466a      	mov	r2, sp
   13302:	2300      	movs	r3, #0
   13304:	4c25      	ldr	r4, [pc, #148]	; (1339c <LORAWAN_JoinReqHandler+0xa0>)
   13306:	7013      	strb	r3, [r2, #0]
   13308:	0023      	movs	r3, r4
   1330a:	33e9      	adds	r3, #233	; 0xe9
   1330c:	781b      	ldrb	r3, [r3, #0]
   1330e:	7053      	strb	r3, [r2, #1]
   13310:	0023      	movs	r3, r4
   13312:	33e7      	adds	r3, #231	; 0xe7
   13314:	781b      	ldrb	r3, [r3, #0]
   13316:	7093      	strb	r3, [r2, #2]
   13318:	0023      	movs	r3, r4
   1331a:	33ff      	adds	r3, #255	; 0xff
   1331c:	7f5b      	ldrb	r3, [r3, #29]
   1331e:	069b      	lsls	r3, r3, #26
   13320:	d507      	bpl.n	13332 <LORAWAN_JoinReqHandler+0x36>
   13322:	6f63      	ldr	r3, [r4, #116]	; 0x74
   13324:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   13326:	4313      	orrs	r3, r2
   13328:	d103      	bne.n	13332 <LORAWAN_JoinReqHandler+0x36>
   1332a:	0023      	movs	r3, r4
   1332c:	2201      	movs	r2, #1
   1332e:	3380      	adds	r3, #128	; 0x80
   13330:	701a      	strb	r2, [r3, #0]
   13332:	aa03      	add	r2, sp, #12
   13334:	4669      	mov	r1, sp
   13336:	202e      	movs	r0, #46	; 0x2e
   13338:	4b19      	ldr	r3, [pc, #100]	; (133a0 <LORAWAN_JoinReqHandler+0xa4>)
   1333a:	4798      	blx	r3
   1333c:	2808      	cmp	r0, #8
   1333e:	d004      	beq.n	1334a <LORAWAN_JoinReqHandler+0x4e>
   13340:	4b18      	ldr	r3, [pc, #96]	; (133a4 <LORAWAN_JoinReqHandler+0xa8>)
   13342:	4798      	blx	r3
   13344:	2000      	movs	r0, #0
   13346:	b007      	add	sp, #28
   13348:	bd30      	pop	{r4, r5, pc}
   1334a:	4b17      	ldr	r3, [pc, #92]	; (133a8 <LORAWAN_JoinReqHandler+0xac>)
   1334c:	9803      	ldr	r0, [sp, #12]
   1334e:	9904      	ldr	r1, [sp, #16]
   13350:	9a05      	ldr	r2, [sp, #20]
   13352:	4798      	blx	r3
   13354:	0023      	movs	r3, r4
   13356:	33fd      	adds	r3, #253	; 0xfd
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	ad01      	add	r5, sp, #4
   1335c:	2b04      	cmp	r3, #4
   1335e:	d104      	bne.n	1336a <LORAWAN_JoinReqHandler+0x6e>
   13360:	3b03      	subs	r3, #3
   13362:	702b      	strb	r3, [r5, #0]
   13364:	0028      	movs	r0, r5
   13366:	4b11      	ldr	r3, [pc, #68]	; (133ac <LORAWAN_JoinReqHandler+0xb0>)
   13368:	4798      	blx	r3
   1336a:	2200      	movs	r2, #0
   1336c:	4b10      	ldr	r3, [pc, #64]	; (133b0 <LORAWAN_JoinReqHandler+0xb4>)
   1336e:	54e2      	strb	r2, [r4, r3]
   13370:	4b10      	ldr	r3, [pc, #64]	; (133b4 <LORAWAN_JoinReqHandler+0xb8>)
   13372:	4798      	blx	r3
   13374:	4b10      	ldr	r3, [pc, #64]	; (133b8 <LORAWAN_JoinReqHandler+0xbc>)
   13376:	7028      	strb	r0, [r5, #0]
   13378:	606b      	str	r3, [r5, #4]
   1337a:	0028      	movs	r0, r5
   1337c:	4b0f      	ldr	r3, [pc, #60]	; (133bc <LORAWAN_JoinReqHandler+0xc0>)
   1337e:	4798      	blx	r3
   13380:	2800      	cmp	r0, #0
   13382:	d001      	beq.n	13388 <LORAWAN_JoinReqHandler+0x8c>
   13384:	201b      	movs	r0, #27
   13386:	e7db      	b.n	13340 <LORAWAN_JoinReqHandler+0x44>
   13388:	220e      	movs	r2, #14
   1338a:	3484      	adds	r4, #132	; 0x84
   1338c:	7823      	ldrb	r3, [r4, #0]
   1338e:	4393      	bics	r3, r2
   13390:	001a      	movs	r2, r3
   13392:	2302      	movs	r3, #2
   13394:	4313      	orrs	r3, r2
   13396:	7023      	strb	r3, [r4, #0]
   13398:	e7d4      	b.n	13344 <LORAWAN_JoinReqHandler+0x48>
   1339a:	46c0      	nop			; (mov r8, r8)
   1339c:	20002bd4 	.word	0x20002bd4
   133a0:	0000bfdd 	.word	0x0000bfdd
   133a4:	0000f139 	.word	0x0000f139
   133a8:	0000f6ed 	.word	0x0000f6ed
   133ac:	0001477d 	.word	0x0001477d
   133b0:	0000022a 	.word	0x0000022a
   133b4:	0000f535 	.word	0x0000f535
   133b8:	20002e1d 	.word	0x20002e1d
   133bc:	00013ea9 	.word	0x00013ea9

000133c0 <LORAWAN_RxHandler>:
   133c0:	b513      	push	{r0, r1, r4, lr}
   133c2:	4b0c      	ldr	r3, [pc, #48]	; (133f4 <LORAWAN_RxHandler+0x34>)
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b08      	cmp	r3, #8
   133c8:	d011      	beq.n	133ee <LORAWAN_RxHandler+0x2e>
   133ca:	2b10      	cmp	r3, #16
   133cc:	d001      	beq.n	133d2 <LORAWAN_RxHandler+0x12>
   133ce:	2b01      	cmp	r3, #1
   133d0:	d10b      	bne.n	133ea <LORAWAN_RxHandler+0x2a>
   133d2:	466b      	mov	r3, sp
   133d4:	1c9c      	adds	r4, r3, #2
   133d6:	0021      	movs	r1, r4
   133d8:	a801      	add	r0, sp, #4
   133da:	4b07      	ldr	r3, [pc, #28]	; (133f8 <LORAWAN_RxHandler+0x38>)
   133dc:	4798      	blx	r3
   133de:	9801      	ldr	r0, [sp, #4]
   133e0:	2800      	cmp	r0, #0
   133e2:	d002      	beq.n	133ea <LORAWAN_RxHandler+0x2a>
   133e4:	7821      	ldrb	r1, [r4, #0]
   133e6:	4b05      	ldr	r3, [pc, #20]	; (133fc <LORAWAN_RxHandler+0x3c>)
   133e8:	4798      	blx	r3
   133ea:	2000      	movs	r0, #0
   133ec:	bd16      	pop	{r1, r2, r4, pc}
   133ee:	4b04      	ldr	r3, [pc, #16]	; (13400 <LORAWAN_RxHandler+0x40>)
   133f0:	4798      	blx	r3
   133f2:	e7fa      	b.n	133ea <LORAWAN_RxHandler+0x2a>
   133f4:	20002e1c 	.word	0x20002e1c
   133f8:	00014075 	.word	0x00014075
   133fc:	00011335 	.word	0x00011335
   13400:	00010bb1 	.word	0x00010bb1

00013404 <LORAWAN_PostTask>:
   13404:	b510      	push	{r4, lr}
   13406:	4b08      	ldr	r3, [pc, #32]	; (13428 <LORAWAN_PostTask+0x24>)
   13408:	0004      	movs	r4, r0
   1340a:	4798      	blx	r3
   1340c:	2201      	movs	r2, #1
   1340e:	40a2      	lsls	r2, r4
   13410:	4906      	ldr	r1, [pc, #24]	; (1342c <LORAWAN_PostTask+0x28>)
   13412:	780b      	ldrb	r3, [r1, #0]
   13414:	4313      	orrs	r3, r2
   13416:	b2db      	uxtb	r3, r3
   13418:	700b      	strb	r3, [r1, #0]
   1341a:	4b05      	ldr	r3, [pc, #20]	; (13430 <LORAWAN_PostTask+0x2c>)
   1341c:	4798      	blx	r3
   1341e:	2004      	movs	r0, #4
   13420:	4b04      	ldr	r3, [pc, #16]	; (13434 <LORAWAN_PostTask+0x30>)
   13422:	4798      	blx	r3
   13424:	bd10      	pop	{r4, pc}
   13426:	46c0      	nop			; (mov r8, r8)
   13428:	000066e1 	.word	0x000066e1
   1342c:	20000f60 	.word	0x20000f60
   13430:	000066ed 	.word	0x000066ed
   13434:	0000dc11 	.word	0x0000dc11

00013438 <LORAWAN_TaskHandler>:
   13438:	b570      	push	{r4, r5, r6, lr}
   1343a:	2601      	movs	r6, #1
   1343c:	4d0e      	ldr	r5, [pc, #56]	; (13478 <LORAWAN_TaskHandler+0x40>)
   1343e:	e015      	b.n	1346c <LORAWAN_TaskHandler+0x34>
   13440:	2400      	movs	r4, #0
   13442:	782b      	ldrb	r3, [r5, #0]
   13444:	4123      	asrs	r3, r4
   13446:	4233      	tst	r3, r6
   13448:	d00d      	beq.n	13466 <LORAWAN_TaskHandler+0x2e>
   1344a:	4b0c      	ldr	r3, [pc, #48]	; (1347c <LORAWAN_TaskHandler+0x44>)
   1344c:	4798      	blx	r3
   1344e:	0032      	movs	r2, r6
   13450:	40a2      	lsls	r2, r4
   13452:	782b      	ldrb	r3, [r5, #0]
   13454:	00a4      	lsls	r4, r4, #2
   13456:	4393      	bics	r3, r2
   13458:	702b      	strb	r3, [r5, #0]
   1345a:	4b09      	ldr	r3, [pc, #36]	; (13480 <LORAWAN_TaskHandler+0x48>)
   1345c:	4798      	blx	r3
   1345e:	4b09      	ldr	r3, [pc, #36]	; (13484 <LORAWAN_TaskHandler+0x4c>)
   13460:	58e3      	ldr	r3, [r4, r3]
   13462:	4798      	blx	r3
   13464:	e7ea      	b.n	1343c <LORAWAN_TaskHandler+0x4>
   13466:	3401      	adds	r4, #1
   13468:	2c03      	cmp	r4, #3
   1346a:	d1ea      	bne.n	13442 <LORAWAN_TaskHandler+0xa>
   1346c:	7828      	ldrb	r0, [r5, #0]
   1346e:	b2c0      	uxtb	r0, r0
   13470:	2800      	cmp	r0, #0
   13472:	d1e5      	bne.n	13440 <LORAWAN_TaskHandler+0x8>
   13474:	bd70      	pop	{r4, r5, r6, pc}
   13476:	46c0      	nop			; (mov r8, r8)
   13478:	20000f60 	.word	0x20000f60
   1347c:	000066e1 	.word	0x000066e1
   13480:	000066ed 	.word	0x000066ed
   13484:	0001eafc 	.word	0x0001eafc

00013488 <RADIO_GetAttr>:
   13488:	b510      	push	{r4, lr}
   1348a:	000b      	movs	r3, r1
   1348c:	281f      	cmp	r0, #31
   1348e:	d900      	bls.n	13492 <RADIO_GetAttr+0xa>
   13490:	e069      	b.n	13566 <RADIO_GetAttr+0xde>
   13492:	f001 fd3f 	bl	14f14 <__gnu_thumb1_case_uqi>
   13496:	1410      	.short	0x1410
   13498:	68201c19 	.word	0x68201c19
   1349c:	312e2a27 	.word	0x312e2a27
   134a0:	3d3a3734 	.word	0x3d3a3734
   134a4:	46434054 	.word	0x46434054
   134a8:	68245149 	.word	0x68245149
   134ac:	68686859 	.word	0x68686859
   134b0:	5c686817 	.word	0x5c686817
   134b4:	6360      	.short	0x6360
   134b6:	4a2d      	ldr	r2, [pc, #180]	; (1356c <RADIO_GetAttr+0xe4>)
   134b8:	7e12      	ldrb	r2, [r2, #24]
   134ba:	701a      	strb	r2, [r3, #0]
   134bc:	e002      	b.n	134c4 <RADIO_GetAttr+0x3c>
   134be:	4a2b      	ldr	r2, [pc, #172]	; (1356c <RADIO_GetAttr+0xe4>)
   134c0:	6812      	ldr	r2, [r2, #0]
   134c2:	601a      	str	r2, [r3, #0]
   134c4:	2000      	movs	r0, #0
   134c6:	bd10      	pop	{r4, pc}
   134c8:	4a28      	ldr	r2, [pc, #160]	; (1356c <RADIO_GetAttr+0xe4>)
   134ca:	6852      	ldr	r2, [r2, #4]
   134cc:	e7f9      	b.n	134c2 <RADIO_GetAttr+0x3a>
   134ce:	4a27      	ldr	r2, [pc, #156]	; (1356c <RADIO_GetAttr+0xe4>)
   134d0:	8a92      	ldrh	r2, [r2, #20]
   134d2:	801a      	strh	r2, [r3, #0]
   134d4:	e7f6      	b.n	134c4 <RADIO_GetAttr+0x3c>
   134d6:	4a25      	ldr	r2, [pc, #148]	; (1356c <RADIO_GetAttr+0xe4>)
   134d8:	3203      	adds	r2, #3
   134da:	7fd2      	ldrb	r2, [r2, #31]
   134dc:	e7ed      	b.n	134ba <RADIO_GetAttr+0x32>
   134de:	4a23      	ldr	r2, [pc, #140]	; (1356c <RADIO_GetAttr+0xe4>)
   134e0:	3204      	adds	r2, #4
   134e2:	e7fa      	b.n	134da <RADIO_GetAttr+0x52>
   134e4:	4a21      	ldr	r2, [pc, #132]	; (1356c <RADIO_GetAttr+0xe4>)
   134e6:	3206      	adds	r2, #6
   134e8:	e7f7      	b.n	134da <RADIO_GetAttr+0x52>
   134ea:	4a20      	ldr	r2, [pc, #128]	; (1356c <RADIO_GetAttr+0xe4>)
   134ec:	3236      	adds	r2, #54	; 0x36
   134ee:	7812      	ldrb	r2, [r2, #0]
   134f0:	e7e3      	b.n	134ba <RADIO_GetAttr+0x32>
   134f2:	4a1e      	ldr	r2, [pc, #120]	; (1356c <RADIO_GetAttr+0xe4>)
   134f4:	3205      	adds	r2, #5
   134f6:	e7f0      	b.n	134da <RADIO_GetAttr+0x52>
   134f8:	4a1c      	ldr	r2, [pc, #112]	; (1356c <RADIO_GetAttr+0xe4>)
   134fa:	3234      	adds	r2, #52	; 0x34
   134fc:	e7f7      	b.n	134ee <RADIO_GetAttr+0x66>
   134fe:	4a1b      	ldr	r2, [pc, #108]	; (1356c <RADIO_GetAttr+0xe4>)
   13500:	8ad2      	ldrh	r2, [r2, #22]
   13502:	e7e6      	b.n	134d2 <RADIO_GetAttr+0x4a>
   13504:	4a19      	ldr	r2, [pc, #100]	; (1356c <RADIO_GetAttr+0xe4>)
   13506:	3233      	adds	r2, #51	; 0x33
   13508:	e7f1      	b.n	134ee <RADIO_GetAttr+0x66>
   1350a:	4a18      	ldr	r2, [pc, #96]	; (1356c <RADIO_GetAttr+0xe4>)
   1350c:	68d2      	ldr	r2, [r2, #12]
   1350e:	e7d8      	b.n	134c2 <RADIO_GetAttr+0x3a>
   13510:	4a16      	ldr	r2, [pc, #88]	; (1356c <RADIO_GetAttr+0xe4>)
   13512:	6892      	ldr	r2, [r2, #8]
   13514:	e7d5      	b.n	134c2 <RADIO_GetAttr+0x3a>
   13516:	4a15      	ldr	r2, [pc, #84]	; (1356c <RADIO_GetAttr+0xe4>)
   13518:	3237      	adds	r2, #55	; 0x37
   1351a:	e7e8      	b.n	134ee <RADIO_GetAttr+0x66>
   1351c:	4a13      	ldr	r2, [pc, #76]	; (1356c <RADIO_GetAttr+0xe4>)
   1351e:	3238      	adds	r2, #56	; 0x38
   13520:	e7e5      	b.n	134ee <RADIO_GetAttr+0x66>
   13522:	4a12      	ldr	r2, [pc, #72]	; (1356c <RADIO_GetAttr+0xe4>)
   13524:	3239      	adds	r2, #57	; 0x39
   13526:	e7e2      	b.n	134ee <RADIO_GetAttr+0x66>
   13528:	4a10      	ldr	r2, [pc, #64]	; (1356c <RADIO_GetAttr+0xe4>)
   1352a:	4911      	ldr	r1, [pc, #68]	; (13570 <RADIO_GetAttr+0xe8>)
   1352c:	3202      	adds	r2, #2
   1352e:	7fd2      	ldrb	r2, [r2, #31]
   13530:	0018      	movs	r0, r3
   13532:	4b10      	ldr	r3, [pc, #64]	; (13574 <RADIO_GetAttr+0xec>)
   13534:	4798      	blx	r3
   13536:	e7c5      	b.n	134c4 <RADIO_GetAttr+0x3c>
   13538:	4a0c      	ldr	r2, [pc, #48]	; (1356c <RADIO_GetAttr+0xe4>)
   1353a:	3202      	adds	r2, #2
   1353c:	e7cd      	b.n	134da <RADIO_GetAttr+0x52>
   1353e:	4a0b      	ldr	r2, [pc, #44]	; (1356c <RADIO_GetAttr+0xe4>)
   13540:	3232      	adds	r2, #50	; 0x32
   13542:	7812      	ldrb	r2, [r2, #0]
   13544:	b252      	sxtb	r2, r2
   13546:	e7b8      	b.n	134ba <RADIO_GetAttr+0x32>
   13548:	4a08      	ldr	r2, [pc, #32]	; (1356c <RADIO_GetAttr+0xe4>)
   1354a:	3235      	adds	r2, #53	; 0x35
   1354c:	e7cf      	b.n	134ee <RADIO_GetAttr+0x66>
   1354e:	4907      	ldr	r1, [pc, #28]	; (1356c <RADIO_GetAttr+0xe4>)
   13550:	2206      	movs	r2, #6
   13552:	313c      	adds	r1, #60	; 0x3c
   13554:	e7ec      	b.n	13530 <RADIO_GetAttr+0xa8>
   13556:	4a05      	ldr	r2, [pc, #20]	; (1356c <RADIO_GetAttr+0xe4>)
   13558:	3254      	adds	r2, #84	; 0x54
   1355a:	e7c8      	b.n	134ee <RADIO_GetAttr+0x66>
   1355c:	4a03      	ldr	r2, [pc, #12]	; (1356c <RADIO_GetAttr+0xe4>)
   1355e:	3256      	adds	r2, #86	; 0x56
   13560:	2100      	movs	r1, #0
   13562:	5e52      	ldrsh	r2, [r2, r1]
   13564:	e7b5      	b.n	134d2 <RADIO_GetAttr+0x4a>
   13566:	2005      	movs	r0, #5
   13568:	e7ad      	b.n	134c6 <RADIO_GetAttr+0x3e>
   1356a:	46c0      	nop			; (mov r8, r8)
   1356c:	200029f8 	.word	0x200029f8
   13570:	20002a11 	.word	0x20002a11
   13574:	00018655 	.word	0x00018655

00013578 <RADIO_SetAttr>:
   13578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1357a:	4b71      	ldr	r3, [pc, #452]	; (13740 <RADIO_SetAttr+0x1c8>)
   1357c:	0004      	movs	r4, r0
   1357e:	000d      	movs	r5, r1
   13580:	4798      	blx	r3
   13582:	2304      	movs	r3, #4
   13584:	2801      	cmp	r0, #1
   13586:	d11a      	bne.n	135be <RADIO_SetAttr+0x46>
   13588:	2c1d      	cmp	r4, #29
   1358a:	d900      	bls.n	1358e <RADIO_SetAttr+0x16>
   1358c:	e0d5      	b.n	1373a <RADIO_SetAttr+0x1c2>
   1358e:	0020      	movs	r0, r4
   13590:	f001 fcc0 	bl	14f14 <__gnu_thumb1_case_uqi>
   13594:	605c4844 	.word	0x605c4844
   13598:	7770d364 	.word	0x7770d364
   1359c:	908c8480 	.word	0x908c8480
   135a0:	a0d39c99 	.word	0xa0d39c99
   135a4:	c2bab1a8 	.word	0xc2bab1a8
   135a8:	d3cad369 	.word	0xd3cad369
   135ac:	d30fd3d3 	.word	0xd30fd3d3
   135b0:	17d3      	.short	0x17d3
   135b2:	2303      	movs	r3, #3
   135b4:	2d00      	cmp	r5, #0
   135b6:	d002      	beq.n	135be <RADIO_SetAttr+0x46>
   135b8:	4b62      	ldr	r3, [pc, #392]	; (13744 <RADIO_SetAttr+0x1cc>)
   135ba:	611d      	str	r5, [r3, #16]
   135bc:	2300      	movs	r3, #0
   135be:	0018      	movs	r0, r3
   135c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   135c2:	796c      	ldrb	r4, [r5, #5]
   135c4:	2c00      	cmp	r4, #0
   135c6:	d109      	bne.n	135dc <RADIO_SetAttr+0x64>
   135c8:	4b5e      	ldr	r3, [pc, #376]	; (13744 <RADIO_SetAttr+0x1cc>)
   135ca:	001a      	movs	r2, r3
   135cc:	649c      	str	r4, [r3, #72]	; 0x48
   135ce:	879c      	strh	r4, [r3, #60]	; 0x3c
   135d0:	87dc      	strh	r4, [r3, #62]	; 0x3e
   135d2:	3240      	adds	r2, #64	; 0x40
   135d4:	3341      	adds	r3, #65	; 0x41
   135d6:	7014      	strb	r4, [r2, #0]
   135d8:	701c      	strb	r4, [r3, #0]
   135da:	e7ef      	b.n	135bc <RADIO_SetAttr+0x44>
   135dc:	882f      	ldrh	r7, [r5, #0]
   135de:	2303      	movs	r3, #3
   135e0:	2f00      	cmp	r7, #0
   135e2:	d0ec      	beq.n	135be <RADIO_SetAttr+0x46>
   135e4:	792e      	ldrb	r6, [r5, #4]
   135e6:	2e00      	cmp	r6, #0
   135e8:	d0e9      	beq.n	135be <RADIO_SetAttr+0x46>
   135ea:	20fa      	movs	r0, #250	; 0xfa
   135ec:	2202      	movs	r2, #2
   135ee:	5eab      	ldrsh	r3, [r5, r2]
   135f0:	0080      	lsls	r0, r0, #2
   135f2:	0031      	movs	r1, r6
   135f4:	9301      	str	r3, [sp, #4]
   135f6:	4378      	muls	r0, r7
   135f8:	4b53      	ldr	r3, [pc, #332]	; (13748 <RADIO_SetAttr+0x1d0>)
   135fa:	4798      	blx	r3
   135fc:	4b53      	ldr	r3, [pc, #332]	; (1374c <RADIO_SetAttr+0x1d4>)
   135fe:	4798      	blx	r3
   13600:	4b53      	ldr	r3, [pc, #332]	; (13750 <RADIO_SetAttr+0x1d8>)
   13602:	4798      	blx	r3
   13604:	466b      	mov	r3, sp
   13606:	4d4f      	ldr	r5, [pc, #316]	; (13744 <RADIO_SetAttr+0x1cc>)
   13608:	889b      	ldrh	r3, [r3, #4]
   1360a:	64a8      	str	r0, [r5, #72]	; 0x48
   1360c:	87eb      	strh	r3, [r5, #62]	; 0x3e
   1360e:	002b      	movs	r3, r5
   13610:	87af      	strh	r7, [r5, #60]	; 0x3c
   13612:	3340      	adds	r3, #64	; 0x40
   13614:	3541      	adds	r5, #65	; 0x41
   13616:	701e      	strb	r6, [r3, #0]
   13618:	702c      	strb	r4, [r5, #0]
   1361a:	e7cf      	b.n	135bc <RADIO_SetAttr+0x44>
   1361c:	782a      	ldrb	r2, [r5, #0]
   1361e:	4b49      	ldr	r3, [pc, #292]	; (13744 <RADIO_SetAttr+0x1cc>)
   13620:	761a      	strb	r2, [r3, #24]
   13622:	e7cb      	b.n	135bc <RADIO_SetAttr+0x44>
   13624:	4b4b      	ldr	r3, [pc, #300]	; (13754 <RADIO_SetAttr+0x1dc>)
   13626:	682a      	ldr	r2, [r5, #0]
   13628:	18d1      	adds	r1, r2, r3
   1362a:	4b4b      	ldr	r3, [pc, #300]	; (13758 <RADIO_SetAttr+0x1e0>)
   1362c:	4299      	cmp	r1, r3
   1362e:	d90a      	bls.n	13646 <RADIO_SetAttr+0xce>
   13630:	4b4a      	ldr	r3, [pc, #296]	; (1375c <RADIO_SetAttr+0x1e4>)
   13632:	494b      	ldr	r1, [pc, #300]	; (13760 <RADIO_SetAttr+0x1e8>)
   13634:	18d3      	adds	r3, r2, r3
   13636:	428b      	cmp	r3, r1
   13638:	d905      	bls.n	13646 <RADIO_SetAttr+0xce>
   1363a:	494a      	ldr	r1, [pc, #296]	; (13764 <RADIO_SetAttr+0x1ec>)
   1363c:	484a      	ldr	r0, [pc, #296]	; (13768 <RADIO_SetAttr+0x1f0>)
   1363e:	1851      	adds	r1, r2, r1
   13640:	2305      	movs	r3, #5
   13642:	4281      	cmp	r1, r0
   13644:	d8bb      	bhi.n	135be <RADIO_SetAttr+0x46>
   13646:	4b3f      	ldr	r3, [pc, #252]	; (13744 <RADIO_SetAttr+0x1cc>)
   13648:	601a      	str	r2, [r3, #0]
   1364a:	e7b7      	b.n	135bc <RADIO_SetAttr+0x44>
   1364c:	682a      	ldr	r2, [r5, #0]
   1364e:	4b3d      	ldr	r3, [pc, #244]	; (13744 <RADIO_SetAttr+0x1cc>)
   13650:	605a      	str	r2, [r3, #4]
   13652:	e7b3      	b.n	135bc <RADIO_SetAttr+0x44>
   13654:	882a      	ldrh	r2, [r5, #0]
   13656:	4b3b      	ldr	r3, [pc, #236]	; (13744 <RADIO_SetAttr+0x1cc>)
   13658:	829a      	strh	r2, [r3, #20]
   1365a:	e7af      	b.n	135bc <RADIO_SetAttr+0x44>
   1365c:	4b39      	ldr	r3, [pc, #228]	; (13744 <RADIO_SetAttr+0x1cc>)
   1365e:	782a      	ldrb	r2, [r5, #0]
   13660:	3303      	adds	r3, #3
   13662:	77da      	strb	r2, [r3, #31]
   13664:	e7aa      	b.n	135bc <RADIO_SetAttr+0x44>
   13666:	782a      	ldrb	r2, [r5, #0]
   13668:	2305      	movs	r3, #5
   1366a:	2a01      	cmp	r2, #1
   1366c:	d8a7      	bhi.n	135be <RADIO_SetAttr+0x46>
   1366e:	4b35      	ldr	r3, [pc, #212]	; (13744 <RADIO_SetAttr+0x1cc>)
   13670:	3304      	adds	r3, #4
   13672:	e7f6      	b.n	13662 <RADIO_SetAttr+0xea>
   13674:	782a      	ldrb	r2, [r5, #0]
   13676:	2305      	movs	r3, #5
   13678:	2a01      	cmp	r2, #1
   1367a:	d8a0      	bhi.n	135be <RADIO_SetAttr+0x46>
   1367c:	4b31      	ldr	r3, [pc, #196]	; (13744 <RADIO_SetAttr+0x1cc>)
   1367e:	3306      	adds	r3, #6
   13680:	e7ef      	b.n	13662 <RADIO_SetAttr+0xea>
   13682:	782a      	ldrb	r2, [r5, #0]
   13684:	2305      	movs	r3, #5
   13686:	1fd1      	subs	r1, r2, #7
   13688:	2902      	cmp	r1, #2
   1368a:	d898      	bhi.n	135be <RADIO_SetAttr+0x46>
   1368c:	4b2d      	ldr	r3, [pc, #180]	; (13744 <RADIO_SetAttr+0x1cc>)
   1368e:	3336      	adds	r3, #54	; 0x36
   13690:	701a      	strb	r2, [r3, #0]
   13692:	e793      	b.n	135bc <RADIO_SetAttr+0x44>
   13694:	4b2b      	ldr	r3, [pc, #172]	; (13744 <RADIO_SetAttr+0x1cc>)
   13696:	782a      	ldrb	r2, [r5, #0]
   13698:	3305      	adds	r3, #5
   1369a:	e7e2      	b.n	13662 <RADIO_SetAttr+0xea>
   1369c:	782a      	ldrb	r2, [r5, #0]
   1369e:	2305      	movs	r3, #5
   136a0:	2a01      	cmp	r2, #1
   136a2:	d900      	bls.n	136a6 <RADIO_SetAttr+0x12e>
   136a4:	e78b      	b.n	135be <RADIO_SetAttr+0x46>
   136a6:	4b27      	ldr	r3, [pc, #156]	; (13744 <RADIO_SetAttr+0x1cc>)
   136a8:	3334      	adds	r3, #52	; 0x34
   136aa:	e7f1      	b.n	13690 <RADIO_SetAttr+0x118>
   136ac:	882a      	ldrh	r2, [r5, #0]
   136ae:	4b25      	ldr	r3, [pc, #148]	; (13744 <RADIO_SetAttr+0x1cc>)
   136b0:	82da      	strh	r2, [r3, #22]
   136b2:	e783      	b.n	135bc <RADIO_SetAttr+0x44>
   136b4:	782a      	ldrb	r2, [r5, #0]
   136b6:	2305      	movs	r3, #5
   136b8:	1e51      	subs	r1, r2, #1
   136ba:	2903      	cmp	r1, #3
   136bc:	d900      	bls.n	136c0 <RADIO_SetAttr+0x148>
   136be:	e77e      	b.n	135be <RADIO_SetAttr+0x46>
   136c0:	4b20      	ldr	r3, [pc, #128]	; (13744 <RADIO_SetAttr+0x1cc>)
   136c2:	3333      	adds	r3, #51	; 0x33
   136c4:	e7e4      	b.n	13690 <RADIO_SetAttr+0x118>
   136c6:	4b1f      	ldr	r3, [pc, #124]	; (13744 <RADIO_SetAttr+0x1cc>)
   136c8:	682a      	ldr	r2, [r5, #0]
   136ca:	60da      	str	r2, [r3, #12]
   136cc:	682a      	ldr	r2, [r5, #0]
   136ce:	4b1d      	ldr	r3, [pc, #116]	; (13744 <RADIO_SetAttr+0x1cc>)
   136d0:	609a      	str	r2, [r3, #8]
   136d2:	e773      	b.n	135bc <RADIO_SetAttr+0x44>
   136d4:	782a      	ldrb	r2, [r5, #0]
   136d6:	2305      	movs	r3, #5
   136d8:	2a03      	cmp	r2, #3
   136da:	d900      	bls.n	136de <RADIO_SetAttr+0x166>
   136dc:	e76f      	b.n	135be <RADIO_SetAttr+0x46>
   136de:	4b19      	ldr	r3, [pc, #100]	; (13744 <RADIO_SetAttr+0x1cc>)
   136e0:	3337      	adds	r3, #55	; 0x37
   136e2:	e7d5      	b.n	13690 <RADIO_SetAttr+0x118>
   136e4:	782a      	ldrb	r2, [r5, #0]
   136e6:	2305      	movs	r3, #5
   136e8:	1e51      	subs	r1, r2, #1
   136ea:	2916      	cmp	r1, #22
   136ec:	d900      	bls.n	136f0 <RADIO_SetAttr+0x178>
   136ee:	e766      	b.n	135be <RADIO_SetAttr+0x46>
   136f0:	4b14      	ldr	r3, [pc, #80]	; (13744 <RADIO_SetAttr+0x1cc>)
   136f2:	3338      	adds	r3, #56	; 0x38
   136f4:	e7cc      	b.n	13690 <RADIO_SetAttr+0x118>
   136f6:	782a      	ldrb	r2, [r5, #0]
   136f8:	2305      	movs	r3, #5
   136fa:	1e51      	subs	r1, r2, #1
   136fc:	2916      	cmp	r1, #22
   136fe:	d900      	bls.n	13702 <RADIO_SetAttr+0x18a>
   13700:	e75d      	b.n	135be <RADIO_SetAttr+0x46>
   13702:	4b10      	ldr	r3, [pc, #64]	; (13744 <RADIO_SetAttr+0x1cc>)
   13704:	3339      	adds	r3, #57	; 0x39
   13706:	e7c3      	b.n	13690 <RADIO_SetAttr+0x118>
   13708:	4b0e      	ldr	r3, [pc, #56]	; (13744 <RADIO_SetAttr+0x1cc>)
   1370a:	0029      	movs	r1, r5
   1370c:	3302      	adds	r3, #2
   1370e:	7fda      	ldrb	r2, [r3, #31]
   13710:	4816      	ldr	r0, [pc, #88]	; (1376c <RADIO_SetAttr+0x1f4>)
   13712:	4b17      	ldr	r3, [pc, #92]	; (13770 <RADIO_SetAttr+0x1f8>)
   13714:	4798      	blx	r3
   13716:	e751      	b.n	135bc <RADIO_SetAttr+0x44>
   13718:	782b      	ldrb	r3, [r5, #0]
   1371a:	1c1a      	adds	r2, r3, #0
   1371c:	2b08      	cmp	r3, #8
   1371e:	d900      	bls.n	13722 <RADIO_SetAttr+0x1aa>
   13720:	2208      	movs	r2, #8
   13722:	4b08      	ldr	r3, [pc, #32]	; (13744 <RADIO_SetAttr+0x1cc>)
   13724:	3302      	adds	r3, #2
   13726:	e79c      	b.n	13662 <RADIO_SetAttr+0xea>
   13728:	2305      	movs	r3, #5
   1372a:	782a      	ldrb	r2, [r5, #0]
   1372c:	1fd1      	subs	r1, r2, #7
   1372e:	4299      	cmp	r1, r3
   13730:	d900      	bls.n	13734 <RADIO_SetAttr+0x1bc>
   13732:	e744      	b.n	135be <RADIO_SetAttr+0x46>
   13734:	4b03      	ldr	r3, [pc, #12]	; (13744 <RADIO_SetAttr+0x1cc>)
   13736:	3335      	adds	r3, #53	; 0x35
   13738:	e7aa      	b.n	13690 <RADIO_SetAttr+0x118>
   1373a:	2305      	movs	r3, #5
   1373c:	e73f      	b.n	135be <RADIO_SetAttr+0x46>
   1373e:	46c0      	nop			; (mov r8, r8)
   13740:	00013e8d 	.word	0x00013e8d
   13744:	200029f8 	.word	0x200029f8
   13748:	00015065 	.word	0x00015065
   1374c:	000162a9 	.word	0x000162a9
   13750:	000153c1 	.word	0x000153c1
   13754:	f7d58bc0 	.word	0xf7d58bc0
   13758:	0243d580 	.word	0x0243d580
   1375c:	e78fe580 	.word	0xe78fe580
   13760:	06dac2c0 	.word	0x06dac2c0
   13764:	cc9eec80 	.word	0xcc9eec80
   13768:	096ae380 	.word	0x096ae380
   1376c:	20002a11 	.word	0x20002a11
   13770:	00018655 	.word	0x00018655

00013774 <RADIO_Init>:
   13774:	b510      	push	{r4, lr}
   13776:	4b0c      	ldr	r3, [pc, #48]	; (137a8 <RADIO_Init+0x34>)
   13778:	4798      	blx	r3
   1377a:	4b0c      	ldr	r3, [pc, #48]	; (137ac <RADIO_Init+0x38>)
   1377c:	201f      	movs	r0, #31
   1377e:	4798      	blx	r3
   13780:	4c0b      	ldr	r4, [pc, #44]	; (137b0 <RADIO_Init+0x3c>)
   13782:	490c      	ldr	r1, [pc, #48]	; (137b4 <RADIO_Init+0x40>)
   13784:	2001      	movs	r0, #1
   13786:	47a0      	blx	r4
   13788:	490b      	ldr	r1, [pc, #44]	; (137b8 <RADIO_Init+0x44>)
   1378a:	2002      	movs	r0, #2
   1378c:	47a0      	blx	r4
   1378e:	490b      	ldr	r1, [pc, #44]	; (137bc <RADIO_Init+0x48>)
   13790:	2004      	movs	r0, #4
   13792:	47a0      	blx	r4
   13794:	490a      	ldr	r1, [pc, #40]	; (137c0 <RADIO_Init+0x4c>)
   13796:	2008      	movs	r0, #8
   13798:	47a0      	blx	r4
   1379a:	490a      	ldr	r1, [pc, #40]	; (137c4 <RADIO_Init+0x50>)
   1379c:	2010      	movs	r0, #16
   1379e:	47a0      	blx	r4
   137a0:	4909      	ldr	r1, [pc, #36]	; (137c8 <RADIO_Init+0x54>)
   137a2:	2020      	movs	r0, #32
   137a4:	47a0      	blx	r4
   137a6:	bd10      	pop	{r4, pc}
   137a8:	00014589 	.word	0x00014589
   137ac:	00013e99 	.word	0x00013e99
   137b0:	00006519 	.word	0x00006519
   137b4:	00013c25 	.word	0x00013c25
   137b8:	00013c9d 	.word	0x00013c9d
   137bc:	00013d0d 	.word	0x00013d0d
   137c0:	00013d5d 	.word	0x00013d5d
   137c4:	00013d85 	.word	0x00013d85
   137c8:	00013dad 	.word	0x00013dad

000137cc <Radio_WriteFrequency>:
   137cc:	b570      	push	{r4, r5, r6, lr}
   137ce:	490d      	ldr	r1, [pc, #52]	; (13804 <Radio_WriteFrequency+0x38>)
   137d0:	4d0d      	ldr	r5, [pc, #52]	; (13808 <Radio_WriteFrequency+0x3c>)
   137d2:	0006      	movs	r6, r0
   137d4:	47a8      	blx	r5
   137d6:	4b0d      	ldr	r3, [pc, #52]	; (1380c <Radio_WriteFrequency+0x40>)
   137d8:	0004      	movs	r4, r0
   137da:	490a      	ldr	r1, [pc, #40]	; (13804 <Radio_WriteFrequency+0x38>)
   137dc:	0030      	movs	r0, r6
   137de:	4798      	blx	r3
   137e0:	0208      	lsls	r0, r1, #8
   137e2:	4908      	ldr	r1, [pc, #32]	; (13804 <Radio_WriteFrequency+0x38>)
   137e4:	47a8      	blx	r5
   137e6:	0224      	lsls	r4, r4, #8
   137e8:	1904      	adds	r4, r0, r4
   137ea:	0c21      	lsrs	r1, r4, #16
   137ec:	4d08      	ldr	r5, [pc, #32]	; (13810 <Radio_WriteFrequency+0x44>)
   137ee:	b2c9      	uxtb	r1, r1
   137f0:	2006      	movs	r0, #6
   137f2:	47a8      	blx	r5
   137f4:	0a21      	lsrs	r1, r4, #8
   137f6:	b2c9      	uxtb	r1, r1
   137f8:	2007      	movs	r0, #7
   137fa:	47a8      	blx	r5
   137fc:	b2e1      	uxtb	r1, r4
   137fe:	2008      	movs	r0, #8
   13800:	47a8      	blx	r5
   13802:	bd70      	pop	{r4, r5, r6, pc}
   13804:	00003d09 	.word	0x00003d09
   13808:	00014f51 	.word	0x00014f51
   1380c:	0001505d 	.word	0x0001505d
   13810:	00006445 	.word	0x00006445

00013814 <Radio_WriteConfiguration>:
   13814:	b5f0      	push	{r4, r5, r6, r7, lr}
   13816:	4cb0      	ldr	r4, [pc, #704]	; (13ad8 <Radio_WriteConfiguration+0x2c4>)
   13818:	2200      	movs	r2, #0
   1381a:	0023      	movs	r3, r4
   1381c:	b085      	sub	sp, #20
   1381e:	9002      	str	r0, [sp, #8]
   13820:	3334      	adds	r3, #52	; 0x34
   13822:	0010      	movs	r0, r2
   13824:	7819      	ldrb	r1, [r3, #0]
   13826:	4bad      	ldr	r3, [pc, #692]	; (13adc <Radio_WriteConfiguration+0x2c8>)
   13828:	4798      	blx	r3
   1382a:	4bad      	ldr	r3, [pc, #692]	; (13ae0 <Radio_WriteConfiguration+0x2cc>)
   1382c:	6820      	ldr	r0, [r4, #0]
   1382e:	4798      	blx	r3
   13830:	1ce3      	adds	r3, r4, #3
   13832:	1d62      	adds	r2, r4, #5
   13834:	7fdb      	ldrb	r3, [r3, #31]
   13836:	7fd2      	ldrb	r2, [r2, #31]
   13838:	b25b      	sxtb	r3, r3
   1383a:	4eaa      	ldr	r6, [pc, #680]	; (13ae4 <Radio_WriteConfiguration+0x2d0>)
   1383c:	4daa      	ldr	r5, [pc, #680]	; (13ae8 <Radio_WriteConfiguration+0x2d4>)
   1383e:	2a00      	cmp	r2, #0
   13840:	d000      	beq.n	13844 <Radio_WriteConfiguration+0x30>
   13842:	e0fc      	b.n	13a3e <Radio_WriteConfiguration+0x22a>
   13844:	1c1f      	adds	r7, r3, #0
   13846:	2b0f      	cmp	r3, #15
   13848:	dc00      	bgt.n	1384c <Radio_WriteConfiguration+0x38>
   1384a:	e0ec      	b.n	13a26 <Radio_WriteConfiguration+0x212>
   1384c:	270f      	movs	r7, #15
   1384e:	b27b      	sxtb	r3, r7
   13850:	204d      	movs	r0, #77	; 0x4d
   13852:	9301      	str	r3, [sp, #4]
   13854:	47b0      	blx	r6
   13856:	21f8      	movs	r1, #248	; 0xf8
   13858:	4008      	ands	r0, r1
   1385a:	39f4      	subs	r1, #244	; 0xf4
   1385c:	4301      	orrs	r1, r0
   1385e:	204d      	movs	r0, #77	; 0x4d
   13860:	47a8      	blx	r5
   13862:	b27b      	sxtb	r3, r7
   13864:	2b00      	cmp	r3, #0
   13866:	db00      	blt.n	1386a <Radio_WriteConfiguration+0x56>
   13868:	e0e4      	b.n	13a34 <Radio_WriteConfiguration+0x220>
   1386a:	3703      	adds	r7, #3
   1386c:	b2f9      	uxtb	r1, r7
   1386e:	2720      	movs	r7, #32
   13870:	4339      	orrs	r1, r7
   13872:	2009      	movs	r0, #9
   13874:	47a8      	blx	r5
   13876:	0023      	movs	r3, r4
   13878:	3334      	adds	r3, #52	; 0x34
   1387a:	781f      	ldrb	r7, [r3, #0]
   1387c:	2f01      	cmp	r7, #1
   1387e:	d000      	beq.n	13882 <Radio_WriteConfiguration+0x6e>
   13880:	e144      	b.n	13b0c <Radio_WriteConfiguration+0x2f8>
   13882:	7e21      	ldrb	r1, [r4, #24]
   13884:	2039      	movs	r0, #57	; 0x39
   13886:	47a8      	blx	r5
   13888:	4b98      	ldr	r3, [pc, #608]	; (13aec <Radio_WriteConfiguration+0x2d8>)
   1388a:	201d      	movs	r0, #29
   1388c:	7819      	ldrb	r1, [r3, #0]
   1388e:	0023      	movs	r3, r4
   13890:	3333      	adds	r3, #51	; 0x33
   13892:	781b      	ldrb	r3, [r3, #0]
   13894:	0109      	lsls	r1, r1, #4
   13896:	005b      	lsls	r3, r3, #1
   13898:	4319      	orrs	r1, r3
   1389a:	1de3      	adds	r3, r4, #7
   1389c:	7fdb      	ldrb	r3, [r3, #31]
   1389e:	401f      	ands	r7, r3
   138a0:	4339      	orrs	r1, r7
   138a2:	b2c9      	uxtb	r1, r1
   138a4:	47a8      	blx	r5
   138a6:	1d23      	adds	r3, r4, #4
   138a8:	7fd9      	ldrb	r1, [r3, #31]
   138aa:	2304      	movs	r3, #4
   138ac:	0089      	lsls	r1, r1, #2
   138ae:	4019      	ands	r1, r3
   138b0:	0023      	movs	r3, r4
   138b2:	3335      	adds	r3, #53	; 0x35
   138b4:	781b      	ldrb	r3, [r3, #0]
   138b6:	201e      	movs	r0, #30
   138b8:	011b      	lsls	r3, r3, #4
   138ba:	4319      	orrs	r1, r3
   138bc:	9b02      	ldr	r3, [sp, #8]
   138be:	059b      	lsls	r3, r3, #22
   138c0:	0f9b      	lsrs	r3, r3, #30
   138c2:	4319      	orrs	r1, r3
   138c4:	b2c9      	uxtb	r1, r1
   138c6:	47a8      	blx	r5
   138c8:	2300      	movs	r3, #0
   138ca:	8ae1      	ldrh	r1, [r4, #22]
   138cc:	4299      	cmp	r1, r3
   138ce:	d011      	beq.n	138f4 <Radio_WriteConfiguration+0xe0>
   138d0:	4a86      	ldr	r2, [pc, #536]	; (13aec <Radio_WriteConfiguration+0x2d8>)
   138d2:	7812      	ldrb	r2, [r2, #0]
   138d4:	2a08      	cmp	r2, #8
   138d6:	d100      	bne.n	138da <Radio_WriteConfiguration+0xc6>
   138d8:	e0e4      	b.n	13aa4 <Radio_WriteConfiguration+0x290>
   138da:	2a09      	cmp	r2, #9
   138dc:	d100      	bne.n	138e0 <Radio_WriteConfiguration+0xcc>
   138de:	e0e3      	b.n	13aa8 <Radio_WriteConfiguration+0x294>
   138e0:	2a07      	cmp	r2, #7
   138e2:	d000      	beq.n	138e6 <Radio_WriteConfiguration+0xd2>
   138e4:	e0e3      	b.n	13aae <Radio_WriteConfiguration+0x29a>
   138e6:	337d      	adds	r3, #125	; 0x7d
   138e8:	4359      	muls	r1, r3
   138ea:	0023      	movs	r3, r4
   138ec:	3335      	adds	r3, #53	; 0x35
   138ee:	781b      	ldrb	r3, [r3, #0]
   138f0:	40d9      	lsrs	r1, r3
   138f2:	000b      	movs	r3, r1
   138f4:	b2d9      	uxtb	r1, r3
   138f6:	2024      	movs	r0, #36	; 0x24
   138f8:	4d7b      	ldr	r5, [pc, #492]	; (13ae8 <Radio_WriteConfiguration+0x2d4>)
   138fa:	47a8      	blx	r5
   138fc:	466b      	mov	r3, sp
   138fe:	201f      	movs	r0, #31
   13900:	7a19      	ldrb	r1, [r3, #8]
   13902:	47a8      	blx	r5
   13904:	2026      	movs	r0, #38	; 0x26
   13906:	47b0      	blx	r6
   13908:	0023      	movs	r3, r4
   1390a:	3335      	adds	r3, #53	; 0x35
   1390c:	781b      	ldrb	r3, [r3, #0]
   1390e:	2b0c      	cmp	r3, #12
   13910:	d105      	bne.n	1391e <Radio_WriteConfiguration+0x10a>
   13912:	0023      	movs	r3, r4
   13914:	3336      	adds	r3, #54	; 0x36
   13916:	781b      	ldrb	r3, [r3, #0]
   13918:	3b07      	subs	r3, #7
   1391a:	2b01      	cmp	r3, #1
   1391c:	d906      	bls.n	1392c <Radio_WriteConfiguration+0x118>
   1391e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13920:	4b73      	ldr	r3, [pc, #460]	; (13af0 <Radio_WriteConfiguration+0x2dc>)
   13922:	4013      	ands	r3, r2
   13924:	4a73      	ldr	r2, [pc, #460]	; (13af4 <Radio_WriteConfiguration+0x2e0>)
   13926:	4293      	cmp	r3, r2
   13928:	d000      	beq.n	1392c <Radio_WriteConfiguration+0x118>
   1392a:	e0c2      	b.n	13ab2 <Radio_WriteConfiguration+0x29e>
   1392c:	2108      	movs	r1, #8
   1392e:	4308      	orrs	r0, r1
   13930:	b2c0      	uxtb	r0, r0
   13932:	2104      	movs	r1, #4
   13934:	4301      	orrs	r1, r0
   13936:	2026      	movs	r0, #38	; 0x26
   13938:	47a8      	blx	r5
   1393a:	2031      	movs	r0, #49	; 0x31
   1393c:	47b0      	blx	r6
   1393e:	21f8      	movs	r1, #248	; 0xf8
   13940:	4008      	ands	r0, r1
   13942:	39f5      	subs	r1, #245	; 0xf5
   13944:	4301      	orrs	r1, r0
   13946:	2031      	movs	r0, #49	; 0x31
   13948:	47a8      	blx	r5
   1394a:	210a      	movs	r1, #10
   1394c:	2037      	movs	r0, #55	; 0x37
   1394e:	47a8      	blx	r5
   13950:	0023      	movs	r3, r4
   13952:	3331      	adds	r3, #49	; 0x31
   13954:	781b      	ldrb	r3, [r3, #0]
   13956:	2b12      	cmp	r3, #18
   13958:	d11e      	bne.n	13998 <Radio_WriteConfiguration+0x184>
   1395a:	0023      	movs	r3, r4
   1395c:	3336      	adds	r3, #54	; 0x36
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	3b07      	subs	r3, #7
   13962:	2b01      	cmp	r3, #1
   13964:	d80b      	bhi.n	1397e <Radio_WriteConfiguration+0x16a>
   13966:	2031      	movs	r0, #49	; 0x31
   13968:	47b0      	blx	r6
   1396a:	217f      	movs	r1, #127	; 0x7f
   1396c:	4001      	ands	r1, r0
   1396e:	2031      	movs	r0, #49	; 0x31
   13970:	47a8      	blx	r5
   13972:	2140      	movs	r1, #64	; 0x40
   13974:	202f      	movs	r0, #47	; 0x2f
   13976:	47a8      	blx	r5
   13978:	2100      	movs	r1, #0
   1397a:	2030      	movs	r0, #48	; 0x30
   1397c:	47a8      	blx	r5
   1397e:	0023      	movs	r3, r4
   13980:	3336      	adds	r3, #54	; 0x36
   13982:	781b      	ldrb	r3, [r3, #0]
   13984:	2b09      	cmp	r3, #9
   13986:	d107      	bne.n	13998 <Radio_WriteConfiguration+0x184>
   13988:	2031      	movs	r0, #49	; 0x31
   1398a:	47b0      	blx	r6
   1398c:	2180      	movs	r1, #128	; 0x80
   1398e:	4249      	negs	r1, r1
   13990:	4301      	orrs	r1, r0
   13992:	b2c9      	uxtb	r1, r1
   13994:	2031      	movs	r0, #49	; 0x31
   13996:	47a8      	blx	r5
   13998:	2033      	movs	r0, #51	; 0x33
   1399a:	47b0      	blx	r6
   1399c:	1da3      	adds	r3, r4, #6
   1399e:	7fd9      	ldrb	r1, [r3, #31]
   139a0:	2340      	movs	r3, #64	; 0x40
   139a2:	0189      	lsls	r1, r1, #6
   139a4:	4398      	bics	r0, r3
   139a6:	4019      	ands	r1, r3
   139a8:	4301      	orrs	r1, r0
   139aa:	b2c9      	uxtb	r1, r1
   139ac:	2033      	movs	r0, #51	; 0x33
   139ae:	47a8      	blx	r5
   139b0:	8aa1      	ldrh	r1, [r4, #20]
   139b2:	2020      	movs	r0, #32
   139b4:	0a09      	lsrs	r1, r1, #8
   139b6:	47a8      	blx	r5
   139b8:	7d21      	ldrb	r1, [r4, #20]
   139ba:	2021      	movs	r0, #33	; 0x21
   139bc:	47a8      	blx	r5
   139be:	2100      	movs	r1, #0
   139c0:	200d      	movs	r0, #13
   139c2:	47a8      	blx	r5
   139c4:	2100      	movs	r1, #0
   139c6:	200e      	movs	r0, #14
   139c8:	47a8      	blx	r5
   139ca:	2100      	movs	r1, #0
   139cc:	200f      	movs	r0, #15
   139ce:	47a8      	blx	r5
   139d0:	0023      	movs	r3, r4
   139d2:	3331      	adds	r3, #49	; 0x31
   139d4:	781b      	ldrb	r3, [r3, #0]
   139d6:	2b12      	cmp	r3, #18
   139d8:	d120      	bne.n	13a1c <Radio_WriteConfiguration+0x208>
   139da:	0023      	movs	r3, r4
   139dc:	3336      	adds	r3, #54	; 0x36
   139de:	781b      	ldrb	r3, [r3, #0]
   139e0:	2b09      	cmp	r3, #9
   139e2:	d000      	beq.n	139e6 <Radio_WriteConfiguration+0x1d2>
   139e4:	e072      	b.n	13acc <Radio_WriteConfiguration+0x2b8>
   139e6:	4a44      	ldr	r2, [pc, #272]	; (13af8 <Radio_WriteConfiguration+0x2e4>)
   139e8:	6823      	ldr	r3, [r4, #0]
   139ea:	1899      	adds	r1, r3, r2
   139ec:	4a43      	ldr	r2, [pc, #268]	; (13afc <Radio_WriteConfiguration+0x2e8>)
   139ee:	4291      	cmp	r1, r2
   139f0:	d862      	bhi.n	13ab8 <Radio_WriteConfiguration+0x2a4>
   139f2:	2102      	movs	r1, #2
   139f4:	2036      	movs	r0, #54	; 0x36
   139f6:	47a8      	blx	r5
   139f8:	2164      	movs	r1, #100	; 0x64
   139fa:	203a      	movs	r0, #58	; 0x3a
   139fc:	47a8      	blx	r5
   139fe:	0023      	movs	r3, r4
   13a00:	3336      	adds	r3, #54	; 0x36
   13a02:	781b      	ldrb	r3, [r3, #0]
   13a04:	2165      	movs	r1, #101	; 0x65
   13a06:	203a      	movs	r0, #58	; 0x3a
   13a08:	2b09      	cmp	r3, #9
   13a0a:	d162      	bne.n	13ad2 <Radio_WriteConfiguration+0x2be>
   13a0c:	3406      	adds	r4, #6
   13a0e:	7fe3      	ldrb	r3, [r4, #31]
   13a10:	2b01      	cmp	r3, #1
   13a12:	d15e      	bne.n	13ad2 <Radio_WriteConfiguration+0x2be>
   13a14:	47a8      	blx	r5
   13a16:	2119      	movs	r1, #25
   13a18:	203b      	movs	r0, #59	; 0x3b
   13a1a:	47a8      	blx	r5
   13a1c:	21ff      	movs	r1, #255	; 0xff
   13a1e:	2012      	movs	r0, #18
   13a20:	47a8      	blx	r5
   13a22:	b005      	add	sp, #20
   13a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a26:	b25b      	sxtb	r3, r3
   13a28:	3303      	adds	r3, #3
   13a2a:	db00      	blt.n	13a2e <Radio_WriteConfiguration+0x21a>
   13a2c:	e70f      	b.n	1384e <Radio_WriteConfiguration+0x3a>
   13a2e:	4b34      	ldr	r3, [pc, #208]	; (13b00 <Radio_WriteConfiguration+0x2ec>)
   13a30:	781f      	ldrb	r7, [r3, #0]
   13a32:	e70c      	b.n	1384e <Radio_WriteConfiguration+0x3a>
   13a34:	2170      	movs	r1, #112	; 0x70
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	4319      	orrs	r1, r3
   13a3a:	b2c9      	uxtb	r1, r1
   13a3c:	e719      	b.n	13872 <Radio_WriteConfiguration+0x5e>
   13a3e:	2b01      	cmp	r3, #1
   13a40:	dd07      	ble.n	13a52 <Radio_WriteConfiguration+0x23e>
   13a42:	2714      	movs	r7, #20
   13a44:	2b13      	cmp	r3, #19
   13a46:	dc06      	bgt.n	13a56 <Radio_WriteConfiguration+0x242>
   13a48:	1c1f      	adds	r7, r3, #0
   13a4a:	2b11      	cmp	r3, #17
   13a4c:	dd02      	ble.n	13a54 <Radio_WriteConfiguration+0x240>
   13a4e:	2711      	movs	r7, #17
   13a50:	e000      	b.n	13a54 <Radio_WriteConfiguration+0x240>
   13a52:	2702      	movs	r7, #2
   13a54:	b27f      	sxtb	r7, r7
   13a56:	200b      	movs	r0, #11
   13a58:	47b0      	blx	r6
   13a5a:	9003      	str	r0, [sp, #12]
   13a5c:	204d      	movs	r0, #77	; 0x4d
   13a5e:	47b0      	blx	r6
   13a60:	2307      	movs	r3, #7
   13a62:	4398      	bics	r0, r3
   13a64:	b2c1      	uxtb	r1, r0
   13a66:	2f14      	cmp	r7, #20
   13a68:	d112      	bne.n	13a90 <Radio_WriteConfiguration+0x27c>
   13a6a:	4319      	orrs	r1, r3
   13a6c:	9b03      	ldr	r3, [sp, #12]
   13a6e:	37cb      	adds	r7, #203	; 0xcb
   13a70:	403b      	ands	r3, r7
   13a72:	001f      	movs	r7, r3
   13a74:	230f      	movs	r3, #15
   13a76:	9301      	str	r3, [sp, #4]
   13a78:	204d      	movs	r0, #77	; 0x4d
   13a7a:	47a8      	blx	r5
   13a7c:	2180      	movs	r1, #128	; 0x80
   13a7e:	9b01      	ldr	r3, [sp, #4]
   13a80:	4249      	negs	r1, r1
   13a82:	4319      	orrs	r1, r3
   13a84:	b2c9      	uxtb	r1, r1
   13a86:	2009      	movs	r0, #9
   13a88:	47a8      	blx	r5
   13a8a:	0039      	movs	r1, r7
   13a8c:	200b      	movs	r0, #11
   13a8e:	e6f1      	b.n	13874 <Radio_WriteConfiguration+0x60>
   13a90:	3f02      	subs	r7, #2
   13a92:	b27b      	sxtb	r3, r7
   13a94:	2720      	movs	r7, #32
   13a96:	2004      	movs	r0, #4
   13a98:	9301      	str	r3, [sp, #4]
   13a9a:	9b03      	ldr	r3, [sp, #12]
   13a9c:	4301      	orrs	r1, r0
   13a9e:	431f      	orrs	r7, r3
   13aa0:	b2ff      	uxtb	r7, r7
   13aa2:	e7e9      	b.n	13a78 <Radio_WriteConfiguration+0x264>
   13aa4:	23fa      	movs	r3, #250	; 0xfa
   13aa6:	e71f      	b.n	138e8 <Radio_WriteConfiguration+0xd4>
   13aa8:	23fa      	movs	r3, #250	; 0xfa
   13aaa:	005b      	lsls	r3, r3, #1
   13aac:	e71c      	b.n	138e8 <Radio_WriteConfiguration+0xd4>
   13aae:	0019      	movs	r1, r3
   13ab0:	e71b      	b.n	138ea <Radio_WriteConfiguration+0xd6>
   13ab2:	21f7      	movs	r1, #247	; 0xf7
   13ab4:	4008      	ands	r0, r1
   13ab6:	e73c      	b.n	13932 <Radio_WriteConfiguration+0x11e>
   13ab8:	4a12      	ldr	r2, [pc, #72]	; (13b04 <Radio_WriteConfiguration+0x2f0>)
   13aba:	189b      	adds	r3, r3, r2
   13abc:	4a12      	ldr	r2, [pc, #72]	; (13b08 <Radio_WriteConfiguration+0x2f4>)
   13abe:	4293      	cmp	r3, r2
   13ac0:	d804      	bhi.n	13acc <Radio_WriteConfiguration+0x2b8>
   13ac2:	2102      	movs	r1, #2
   13ac4:	2036      	movs	r0, #54	; 0x36
   13ac6:	47a8      	blx	r5
   13ac8:	217f      	movs	r1, #127	; 0x7f
   13aca:	e796      	b.n	139fa <Radio_WriteConfiguration+0x1e6>
   13acc:	2103      	movs	r1, #3
   13ace:	2036      	movs	r0, #54	; 0x36
   13ad0:	e794      	b.n	139fc <Radio_WriteConfiguration+0x1e8>
   13ad2:	47a8      	blx	r5
   13ad4:	211d      	movs	r1, #29
   13ad6:	e79f      	b.n	13a18 <Radio_WriteConfiguration+0x204>
   13ad8:	200029f8 	.word	0x200029f8
   13adc:	0000dc49 	.word	0x0000dc49
   13ae0:	000137cd 	.word	0x000137cd
   13ae4:	0000646d 	.word	0x0000646d
   13ae8:	00006445 	.word	0x00006445
   13aec:	20002a2e 	.word	0x20002a2e
   13af0:	00ffff00 	.word	0x00ffff00
   13af4:	00070b00 	.word	0x00070b00
   13af8:	cc9eec80 	.word	0xcc9eec80
   13afc:	096ae380 	.word	0x096ae380
   13b00:	0001eb08 	.word	0x0001eb08
   13b04:	e78fe580 	.word	0xe78fe580
   13b08:	06dac2c0 	.word	0x06dac2c0
   13b0c:	6863      	ldr	r3, [r4, #4]
   13b0e:	492c      	ldr	r1, [pc, #176]	; (13bc0 <Radio_WriteConfiguration+0x3ac>)
   13b10:	0218      	lsls	r0, r3, #8
   13b12:	4b2c      	ldr	r3, [pc, #176]	; (13bc4 <Radio_WriteConfiguration+0x3b0>)
   13b14:	4798      	blx	r3
   13b16:	0007      	movs	r7, r0
   13b18:	0a01      	lsrs	r1, r0, #8
   13b1a:	b2c9      	uxtb	r1, r1
   13b1c:	2004      	movs	r0, #4
   13b1e:	47a8      	blx	r5
   13b20:	b2f9      	uxtb	r1, r7
   13b22:	2005      	movs	r0, #5
   13b24:	47a8      	blx	r5
   13b26:	4b27      	ldr	r3, [pc, #156]	; (13bc4 <Radio_WriteConfiguration+0x3b0>)
   13b28:	68a1      	ldr	r1, [r4, #8]
   13b2a:	4827      	ldr	r0, [pc, #156]	; (13bc8 <Radio_WriteConfiguration+0x3b4>)
   13b2c:	4798      	blx	r3
   13b2e:	0007      	movs	r7, r0
   13b30:	0a01      	lsrs	r1, r0, #8
   13b32:	b2c9      	uxtb	r1, r1
   13b34:	2002      	movs	r0, #2
   13b36:	47a8      	blx	r5
   13b38:	b2f9      	uxtb	r1, r7
   13b3a:	2003      	movs	r0, #3
   13b3c:	47a8      	blx	r5
   13b3e:	2100      	movs	r1, #0
   13b40:	205d      	movs	r0, #93	; 0x5d
   13b42:	47a8      	blx	r5
   13b44:	8aa1      	ldrh	r1, [r4, #20]
   13b46:	2025      	movs	r0, #37	; 0x25
   13b48:	0a09      	lsrs	r1, r1, #8
   13b4a:	47a8      	blx	r5
   13b4c:	7d21      	ldrb	r1, [r4, #20]
   13b4e:	2026      	movs	r0, #38	; 0x26
   13b50:	47a8      	blx	r5
   13b52:	219e      	movs	r1, #158	; 0x9e
   13b54:	200d      	movs	r0, #13
   13b56:	47a8      	blx	r5
   13b58:	21bf      	movs	r1, #191	; 0xbf
   13b5a:	2035      	movs	r0, #53	; 0x35
   13b5c:	47a8      	blx	r5
   13b5e:	200a      	movs	r0, #10
   13b60:	47b0      	blx	r6
   13b62:	0023      	movs	r3, r4
   13b64:	3337      	adds	r3, #55	; 0x37
   13b66:	7819      	ldrb	r1, [r3, #0]
   13b68:	2360      	movs	r3, #96	; 0x60
   13b6a:	0149      	lsls	r1, r1, #5
   13b6c:	4398      	bics	r0, r3
   13b6e:	4301      	orrs	r1, r0
   13b70:	b2c9      	uxtb	r1, r1
   13b72:	200a      	movs	r0, #10
   13b74:	47a8      	blx	r5
   13b76:	1d23      	adds	r3, r4, #4
   13b78:	7fdb      	ldrb	r3, [r3, #31]
   13b7a:	21c0      	movs	r1, #192	; 0xc0
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	d000      	beq.n	13b82 <Radio_WriteConfiguration+0x36e>
   13b80:	3110      	adds	r1, #16
   13b82:	2030      	movs	r0, #48	; 0x30
   13b84:	47a8      	blx	r5
   13b86:	2600      	movs	r6, #0
   13b88:	1ca3      	adds	r3, r4, #2
   13b8a:	7fd9      	ldrb	r1, [r3, #31]
   13b8c:	428e      	cmp	r6, r1
   13b8e:	d30d      	bcc.n	13bac <Radio_WriteConfiguration+0x398>
   13b90:	2900      	cmp	r1, #0
   13b92:	d003      	beq.n	13b9c <Radio_WriteConfiguration+0x388>
   13b94:	2310      	movs	r3, #16
   13b96:	3901      	subs	r1, #1
   13b98:	4319      	orrs	r1, r3
   13b9a:	b2c9      	uxtb	r1, r1
   13b9c:	2027      	movs	r0, #39	; 0x27
   13b9e:	47a8      	blx	r5
   13ba0:	21ff      	movs	r1, #255	; 0xff
   13ba2:	203e      	movs	r0, #62	; 0x3e
   13ba4:	47a8      	blx	r5
   13ba6:	21ff      	movs	r1, #255	; 0xff
   13ba8:	203f      	movs	r0, #63	; 0x3f
   13baa:	e739      	b.n	13a20 <Radio_WriteConfiguration+0x20c>
   13bac:	0030      	movs	r0, r6
   13bae:	19a3      	adds	r3, r4, r6
   13bb0:	3028      	adds	r0, #40	; 0x28
   13bb2:	7e59      	ldrb	r1, [r3, #25]
   13bb4:	b2c0      	uxtb	r0, r0
   13bb6:	3601      	adds	r6, #1
   13bb8:	47a8      	blx	r5
   13bba:	b2f6      	uxtb	r6, r6
   13bbc:	e7e4      	b.n	13b88 <Radio_WriteConfiguration+0x374>
   13bbe:	46c0      	nop			; (mov r8, r8)
   13bc0:	00003d09 	.word	0x00003d09
   13bc4:	00014f51 	.word	0x00014f51
   13bc8:	01e84800 	.word	0x01e84800

00013bcc <RADIO_getMappingAndOpmode>:
   13bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13bce:	0006      	movs	r6, r0
   13bd0:	4d06      	ldr	r5, [pc, #24]	; (13bec <RADIO_getMappingAndOpmode+0x20>)
   13bd2:	2040      	movs	r0, #64	; 0x40
   13bd4:	001f      	movs	r7, r3
   13bd6:	0014      	movs	r4, r2
   13bd8:	9101      	str	r1, [sp, #4]
   13bda:	47a8      	blx	r5
   13bdc:	4004      	ands	r4, r0
   13bde:	413c      	asrs	r4, r7
   13be0:	2001      	movs	r0, #1
   13be2:	7034      	strb	r4, [r6, #0]
   13be4:	47a8      	blx	r5
   13be6:	9b01      	ldr	r3, [sp, #4]
   13be8:	7018      	strb	r0, [r3, #0]
   13bea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   13bec:	0000646d 	.word	0x0000646d

00013bf0 <RADIO_UnhandledInterrupt.part.0>:
   13bf0:	b510      	push	{r4, lr}
   13bf2:	21ff      	movs	r1, #255	; 0xff
   13bf4:	2012      	movs	r0, #18
   13bf6:	4b01      	ldr	r3, [pc, #4]	; (13bfc <RADIO_UnhandledInterrupt.part.0+0xc>)
   13bf8:	4798      	blx	r3
   13bfa:	bd10      	pop	{r4, pc}
   13bfc:	00006445 	.word	0x00006445

00013c00 <RADIO_UnhandledInterrupt>:
   13c00:	b510      	push	{r4, lr}
   13c02:	2801      	cmp	r0, #1
   13c04:	d102      	bne.n	13c0c <RADIO_UnhandledInterrupt+0xc>
   13c06:	4b05      	ldr	r3, [pc, #20]	; (13c1c <RADIO_UnhandledInterrupt+0x1c>)
   13c08:	4798      	blx	r3
   13c0a:	bd10      	pop	{r4, pc}
   13c0c:	21ff      	movs	r1, #255	; 0xff
   13c0e:	203e      	movs	r0, #62	; 0x3e
   13c10:	4c03      	ldr	r4, [pc, #12]	; (13c20 <RADIO_UnhandledInterrupt+0x20>)
   13c12:	47a0      	blx	r4
   13c14:	21ff      	movs	r1, #255	; 0xff
   13c16:	203f      	movs	r0, #63	; 0x3f
   13c18:	47a0      	blx	r4
   13c1a:	e7f6      	b.n	13c0a <RADIO_UnhandledInterrupt+0xa>
   13c1c:	00013bf1 	.word	0x00013bf1
   13c20:	00006445 	.word	0x00006445

00013c24 <RADIO_DIO0>:
   13c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13c26:	466b      	mov	r3, sp
   13c28:	1ddc      	adds	r4, r3, #7
   13c2a:	1d9d      	adds	r5, r3, #6
   13c2c:	22c0      	movs	r2, #192	; 0xc0
   13c2e:	2306      	movs	r3, #6
   13c30:	0028      	movs	r0, r5
   13c32:	0021      	movs	r1, r4
   13c34:	4e12      	ldr	r6, [pc, #72]	; (13c80 <RADIO_DIO0+0x5c>)
   13c36:	47b0      	blx	r6
   13c38:	7823      	ldrb	r3, [r4, #0]
   13c3a:	7828      	ldrb	r0, [r5, #0]
   13c3c:	b25a      	sxtb	r2, r3
   13c3e:	b2c0      	uxtb	r0, r0
   13c40:	2a00      	cmp	r2, #0
   13c42:	da0b      	bge.n	13c5c <RADIO_DIO0+0x38>
   13c44:	2800      	cmp	r0, #0
   13c46:	d004      	beq.n	13c52 <RADIO_DIO0+0x2e>
   13c48:	2801      	cmp	r0, #1
   13c4a:	d005      	beq.n	13c58 <RADIO_DIO0+0x34>
   13c4c:	4b0d      	ldr	r3, [pc, #52]	; (13c84 <RADIO_DIO0+0x60>)
   13c4e:	4798      	blx	r3
   13c50:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13c52:	4b0d      	ldr	r3, [pc, #52]	; (13c88 <RADIO_DIO0+0x64>)
   13c54:	4798      	blx	r3
   13c56:	e7fb      	b.n	13c50 <RADIO_DIO0+0x2c>
   13c58:	4b0c      	ldr	r3, [pc, #48]	; (13c8c <RADIO_DIO0+0x68>)
   13c5a:	e7fb      	b.n	13c54 <RADIO_DIO0+0x30>
   13c5c:	2800      	cmp	r0, #0
   13c5e:	d10a      	bne.n	13c76 <RADIO_DIO0+0x52>
   13c60:	2207      	movs	r2, #7
   13c62:	4013      	ands	r3, r2
   13c64:	7023      	strb	r3, [r4, #0]
   13c66:	2b03      	cmp	r3, #3
   13c68:	d101      	bne.n	13c6e <RADIO_DIO0+0x4a>
   13c6a:	4b09      	ldr	r3, [pc, #36]	; (13c90 <RADIO_DIO0+0x6c>)
   13c6c:	e7f2      	b.n	13c54 <RADIO_DIO0+0x30>
   13c6e:	2b05      	cmp	r3, #5
   13c70:	d102      	bne.n	13c78 <RADIO_DIO0+0x54>
   13c72:	4b08      	ldr	r3, [pc, #32]	; (13c94 <RADIO_DIO0+0x70>)
   13c74:	e7ee      	b.n	13c54 <RADIO_DIO0+0x30>
   13c76:	2000      	movs	r0, #0
   13c78:	4b07      	ldr	r3, [pc, #28]	; (13c98 <RADIO_DIO0+0x74>)
   13c7a:	4798      	blx	r3
   13c7c:	e7e8      	b.n	13c50 <RADIO_DIO0+0x2c>
   13c7e:	46c0      	nop			; (mov r8, r8)
   13c80:	00013bcd 	.word	0x00013bcd
   13c84:	00013bf1 	.word	0x00013bf1
   13c88:	000143a9 	.word	0x000143a9
   13c8c:	000142ad 	.word	0x000142ad
   13c90:	00014329 	.word	0x00014329
   13c94:	00014425 	.word	0x00014425
   13c98:	00013c01 	.word	0x00013c01

00013c9c <RADIO_DIO1>:
   13c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13c9e:	466b      	mov	r3, sp
   13ca0:	1ddc      	adds	r4, r3, #7
   13ca2:	1d9d      	adds	r5, r3, #6
   13ca4:	2230      	movs	r2, #48	; 0x30
   13ca6:	2304      	movs	r3, #4
   13ca8:	0021      	movs	r1, r4
   13caa:	0028      	movs	r0, r5
   13cac:	4e11      	ldr	r6, [pc, #68]	; (13cf4 <RADIO_DIO1+0x58>)
   13cae:	47b0      	blx	r6
   13cb0:	7822      	ldrb	r2, [r4, #0]
   13cb2:	782b      	ldrb	r3, [r5, #0]
   13cb4:	b251      	sxtb	r1, r2
   13cb6:	2900      	cmp	r1, #0
   13cb8:	da0c      	bge.n	13cd4 <RADIO_DIO1+0x38>
   13cba:	b2db      	uxtb	r3, r3
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	d004      	beq.n	13cca <RADIO_DIO1+0x2e>
   13cc0:	2b01      	cmp	r3, #1
   13cc2:	d005      	beq.n	13cd0 <RADIO_DIO1+0x34>
   13cc4:	4b0c      	ldr	r3, [pc, #48]	; (13cf8 <RADIO_DIO1+0x5c>)
   13cc6:	4798      	blx	r3
   13cc8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13cca:	4b0c      	ldr	r3, [pc, #48]	; (13cfc <RADIO_DIO1+0x60>)
   13ccc:	4798      	blx	r3
   13cce:	e7fb      	b.n	13cc8 <RADIO_DIO1+0x2c>
   13cd0:	4b0b      	ldr	r3, [pc, #44]	; (13d00 <RADIO_DIO1+0x64>)
   13cd2:	e7fb      	b.n	13ccc <RADIO_DIO1+0x30>
   13cd4:	2107      	movs	r1, #7
   13cd6:	b2db      	uxtb	r3, r3
   13cd8:	400a      	ands	r2, r1
   13cda:	7022      	strb	r2, [r4, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d005      	beq.n	13cec <RADIO_DIO1+0x50>
   13ce0:	2b01      	cmp	r3, #1
   13ce2:	d1f1      	bne.n	13cc8 <RADIO_DIO1+0x2c>
   13ce4:	2a03      	cmp	r2, #3
   13ce6:	d1ef      	bne.n	13cc8 <RADIO_DIO1+0x2c>
   13ce8:	4b06      	ldr	r3, [pc, #24]	; (13d04 <RADIO_DIO1+0x68>)
   13cea:	e7ef      	b.n	13ccc <RADIO_DIO1+0x30>
   13cec:	4b06      	ldr	r3, [pc, #24]	; (13d08 <RADIO_DIO1+0x6c>)
   13cee:	2a05      	cmp	r2, #5
   13cf0:	d1ea      	bne.n	13cc8 <RADIO_DIO1+0x2c>
   13cf2:	e7eb      	b.n	13ccc <RADIO_DIO1+0x30>
   13cf4:	00013bcd 	.word	0x00013bcd
   13cf8:	00013bf1 	.word	0x00013bf1
   13cfc:	00014231 	.word	0x00014231
   13d00:	0000dd2d 	.word	0x0000dd2d
   13d04:	00014059 	.word	0x00014059
   13d08:	00013fbd 	.word	0x00013fbd

00013d0c <RADIO_DIO2>:
   13d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d0e:	466b      	mov	r3, sp
   13d10:	1ddc      	adds	r4, r3, #7
   13d12:	1d9d      	adds	r5, r3, #6
   13d14:	220c      	movs	r2, #12
   13d16:	2302      	movs	r3, #2
   13d18:	0021      	movs	r1, r4
   13d1a:	0028      	movs	r0, r5
   13d1c:	4e0b      	ldr	r6, [pc, #44]	; (13d4c <RADIO_DIO2+0x40>)
   13d1e:	47b0      	blx	r6
   13d20:	7823      	ldrb	r3, [r4, #0]
   13d22:	782a      	ldrb	r2, [r5, #0]
   13d24:	b259      	sxtb	r1, r3
   13d26:	2900      	cmp	r1, #0
   13d28:	da05      	bge.n	13d36 <RADIO_DIO2+0x2a>
   13d2a:	4b09      	ldr	r3, [pc, #36]	; (13d50 <RADIO_DIO2+0x44>)
   13d2c:	2a02      	cmp	r2, #2
   13d2e:	d90a      	bls.n	13d46 <RADIO_DIO2+0x3a>
   13d30:	4b08      	ldr	r3, [pc, #32]	; (13d54 <RADIO_DIO2+0x48>)
   13d32:	4798      	blx	r3
   13d34:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13d36:	2107      	movs	r1, #7
   13d38:	400b      	ands	r3, r1
   13d3a:	7023      	strb	r3, [r4, #0]
   13d3c:	2a03      	cmp	r2, #3
   13d3e:	d1f9      	bne.n	13d34 <RADIO_DIO2+0x28>
   13d40:	2b05      	cmp	r3, #5
   13d42:	d1f7      	bne.n	13d34 <RADIO_DIO2+0x28>
   13d44:	4b04      	ldr	r3, [pc, #16]	; (13d58 <RADIO_DIO2+0x4c>)
   13d46:	4798      	blx	r3
   13d48:	e7f4      	b.n	13d34 <RADIO_DIO2+0x28>
   13d4a:	46c0      	nop			; (mov r8, r8)
   13d4c:	00013bcd 	.word	0x00013bcd
   13d50:	0000dd2d 	.word	0x0000dd2d
   13d54:	00013bf1 	.word	0x00013bf1
   13d58:	00013f8d 	.word	0x00013f8d

00013d5c <RADIO_DIO3>:
   13d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13d5e:	466b      	mov	r3, sp
   13d60:	4668      	mov	r0, sp
   13d62:	1ddc      	adds	r4, r3, #7
   13d64:	2203      	movs	r2, #3
   13d66:	2300      	movs	r3, #0
   13d68:	0021      	movs	r1, r4
   13d6a:	3006      	adds	r0, #6
   13d6c:	4d03      	ldr	r5, [pc, #12]	; (13d7c <RADIO_DIO3+0x20>)
   13d6e:	47a8      	blx	r5
   13d70:	7823      	ldrb	r3, [r4, #0]
   13d72:	2b7f      	cmp	r3, #127	; 0x7f
   13d74:	d901      	bls.n	13d7a <RADIO_DIO3+0x1e>
   13d76:	4b02      	ldr	r3, [pc, #8]	; (13d80 <RADIO_DIO3+0x24>)
   13d78:	4798      	blx	r3
   13d7a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13d7c:	00013bcd 	.word	0x00013bcd
   13d80:	00013bf1 	.word	0x00013bf1

00013d84 <RADIO_DIO4>:
   13d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13d86:	466b      	mov	r3, sp
   13d88:	4668      	mov	r0, sp
   13d8a:	1ddc      	adds	r4, r3, #7
   13d8c:	2306      	movs	r3, #6
   13d8e:	22c0      	movs	r2, #192	; 0xc0
   13d90:	18c0      	adds	r0, r0, r3
   13d92:	0021      	movs	r1, r4
   13d94:	4d03      	ldr	r5, [pc, #12]	; (13da4 <RADIO_DIO4+0x20>)
   13d96:	47a8      	blx	r5
   13d98:	7823      	ldrb	r3, [r4, #0]
   13d9a:	2b7f      	cmp	r3, #127	; 0x7f
   13d9c:	d901      	bls.n	13da2 <RADIO_DIO4+0x1e>
   13d9e:	4b02      	ldr	r3, [pc, #8]	; (13da8 <RADIO_DIO4+0x24>)
   13da0:	4798      	blx	r3
   13da2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13da4:	00013bcd 	.word	0x00013bcd
   13da8:	00013bf1 	.word	0x00013bf1

00013dac <RADIO_DIO5>:
   13dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13dae:	466b      	mov	r3, sp
   13db0:	4668      	mov	r0, sp
   13db2:	1ddc      	adds	r4, r3, #7
   13db4:	2230      	movs	r2, #48	; 0x30
   13db6:	2304      	movs	r3, #4
   13db8:	0021      	movs	r1, r4
   13dba:	3006      	adds	r0, #6
   13dbc:	4d03      	ldr	r5, [pc, #12]	; (13dcc <RADIO_DIO5+0x20>)
   13dbe:	47a8      	blx	r5
   13dc0:	7823      	ldrb	r3, [r4, #0]
   13dc2:	2b7f      	cmp	r3, #127	; 0x7f
   13dc4:	d901      	bls.n	13dca <RADIO_DIO5+0x1e>
   13dc6:	4b02      	ldr	r3, [pc, #8]	; (13dd0 <RADIO_DIO5+0x24>)
   13dc8:	4798      	blx	r3
   13dca:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13dcc:	00013bcd 	.word	0x00013bcd
   13dd0:	00013bf1 	.word	0x00013bf1

00013dd4 <radioPostTask>:
   13dd4:	b510      	push	{r4, lr}
   13dd6:	0004      	movs	r4, r0
   13dd8:	4b05      	ldr	r3, [pc, #20]	; (13df0 <radioPostTask+0x1c>)
   13dda:	4798      	blx	r3
   13ddc:	4b05      	ldr	r3, [pc, #20]	; (13df4 <radioPostTask+0x20>)
   13dde:	8818      	ldrh	r0, [r3, #0]
   13de0:	4320      	orrs	r0, r4
   13de2:	8018      	strh	r0, [r3, #0]
   13de4:	4b04      	ldr	r3, [pc, #16]	; (13df8 <radioPostTask+0x24>)
   13de6:	4798      	blx	r3
   13de8:	2002      	movs	r0, #2
   13dea:	4b04      	ldr	r3, [pc, #16]	; (13dfc <radioPostTask+0x28>)
   13dec:	4798      	blx	r3
   13dee:	bd10      	pop	{r4, pc}
   13df0:	000066e1 	.word	0x000066e1
   13df4:	20000f62 	.word	0x20000f62
   13df8:	000066ed 	.word	0x000066ed
   13dfc:	0000dc11 	.word	0x0000dc11

00013e00 <radioClearTask>:
   13e00:	b510      	push	{r4, lr}
   13e02:	0004      	movs	r4, r0
   13e04:	4b04      	ldr	r3, [pc, #16]	; (13e18 <radioClearTask+0x18>)
   13e06:	4798      	blx	r3
   13e08:	4a04      	ldr	r2, [pc, #16]	; (13e1c <radioClearTask+0x1c>)
   13e0a:	8813      	ldrh	r3, [r2, #0]
   13e0c:	43a3      	bics	r3, r4
   13e0e:	8013      	strh	r3, [r2, #0]
   13e10:	4b03      	ldr	r3, [pc, #12]	; (13e20 <radioClearTask+0x20>)
   13e12:	4798      	blx	r3
   13e14:	bd10      	pop	{r4, pc}
   13e16:	46c0      	nop			; (mov r8, r8)
   13e18:	000066e1 	.word	0x000066e1
   13e1c:	20000f62 	.word	0x20000f62
   13e20:	000066ed 	.word	0x000066ed

00013e24 <RADIO_TaskHandler>:
   13e24:	b570      	push	{r4, r5, r6, lr}
   13e26:	2400      	movs	r4, #0
   13e28:	4d10      	ldr	r5, [pc, #64]	; (13e6c <RADIO_TaskHandler+0x48>)
   13e2a:	2601      	movs	r6, #1
   13e2c:	882b      	ldrh	r3, [r5, #0]
   13e2e:	42a3      	cmp	r3, r4
   13e30:	d015      	beq.n	13e5e <RADIO_TaskHandler+0x3a>
   13e32:	882b      	ldrh	r3, [r5, #0]
   13e34:	4123      	asrs	r3, r4
   13e36:	4233      	tst	r3, r6
   13e38:	d013      	beq.n	13e62 <RADIO_TaskHandler+0x3e>
   13e3a:	40a6      	lsls	r6, r4
   13e3c:	4b0c      	ldr	r3, [pc, #48]	; (13e70 <RADIO_TaskHandler+0x4c>)
   13e3e:	4798      	blx	r3
   13e40:	882b      	ldrh	r3, [r5, #0]
   13e42:	00a4      	lsls	r4, r4, #2
   13e44:	43b3      	bics	r3, r6
   13e46:	802b      	strh	r3, [r5, #0]
   13e48:	4b0a      	ldr	r3, [pc, #40]	; (13e74 <RADIO_TaskHandler+0x50>)
   13e4a:	4798      	blx	r3
   13e4c:	4b0a      	ldr	r3, [pc, #40]	; (13e78 <RADIO_TaskHandler+0x54>)
   13e4e:	58e3      	ldr	r3, [r4, r3]
   13e50:	4798      	blx	r3
   13e52:	882b      	ldrh	r3, [r5, #0]
   13e54:	2b00      	cmp	r3, #0
   13e56:	d002      	beq.n	13e5e <RADIO_TaskHandler+0x3a>
   13e58:	2002      	movs	r0, #2
   13e5a:	4b08      	ldr	r3, [pc, #32]	; (13e7c <RADIO_TaskHandler+0x58>)
   13e5c:	4798      	blx	r3
   13e5e:	2000      	movs	r0, #0
   13e60:	bd70      	pop	{r4, r5, r6, pc}
   13e62:	3401      	adds	r4, #1
   13e64:	2c05      	cmp	r4, #5
   13e66:	d1e4      	bne.n	13e32 <RADIO_TaskHandler+0xe>
   13e68:	e7f9      	b.n	13e5e <RADIO_TaskHandler+0x3a>
   13e6a:	46c0      	nop			; (mov r8, r8)
   13e6c:	20000f62 	.word	0x20000f62
   13e70:	000066e1 	.word	0x000066e1
   13e74:	000066ed 	.word	0x000066ed
   13e78:	0001eb0c 	.word	0x0001eb0c
   13e7c:	0000dc11 	.word	0x0000dc11

00013e80 <RadioSetState>:
   13e80:	4b01      	ldr	r3, [pc, #4]	; (13e88 <RadioSetState+0x8>)
   13e82:	7018      	strb	r0, [r3, #0]
   13e84:	4770      	bx	lr
   13e86:	46c0      	nop			; (mov r8, r8)
   13e88:	2000304b 	.word	0x2000304b

00013e8c <RADIO_GetState>:
   13e8c:	4b01      	ldr	r3, [pc, #4]	; (13e94 <RADIO_GetState+0x8>)
   13e8e:	7818      	ldrb	r0, [r3, #0]
   13e90:	b2c0      	uxtb	r0, r0
   13e92:	4770      	bx	lr
   13e94:	2000304b 	.word	0x2000304b

00013e98 <RADIO_SetCallbackBitmask>:
   13e98:	4a02      	ldr	r2, [pc, #8]	; (13ea4 <RADIO_SetCallbackBitmask+0xc>)
   13e9a:	7813      	ldrb	r3, [r2, #0]
   13e9c:	4318      	orrs	r0, r3
   13e9e:	7010      	strb	r0, [r2, #0]
   13ea0:	4770      	bx	lr
   13ea2:	46c0      	nop			; (mov r8, r8)
   13ea4:	2000304a 	.word	0x2000304a

00013ea8 <RADIO_Transmit>:
   13ea8:	b570      	push	{r4, r5, r6, lr}
   13eaa:	4d10      	ldr	r5, [pc, #64]	; (13eec <RADIO_Transmit+0x44>)
   13eac:	0006      	movs	r6, r0
   13eae:	782b      	ldrb	r3, [r5, #0]
   13eb0:	2004      	movs	r0, #4
   13eb2:	2b01      	cmp	r3, #1
   13eb4:	d118      	bne.n	13ee8 <RADIO_Transmit+0x40>
   13eb6:	4c0e      	ldr	r4, [pc, #56]	; (13ef0 <RADIO_Transmit+0x48>)
   13eb8:	0023      	movs	r3, r4
   13eba:	332f      	adds	r3, #47	; 0x2f
   13ebc:	7818      	ldrb	r0, [r3, #0]
   13ebe:	4b0d      	ldr	r3, [pc, #52]	; (13ef4 <RADIO_Transmit+0x4c>)
   13ec0:	4798      	blx	r3
   13ec2:	4b0d      	ldr	r3, [pc, #52]	; (13ef8 <RADIO_Transmit+0x50>)
   13ec4:	7832      	ldrb	r2, [r6, #0]
   13ec6:	6871      	ldr	r1, [r6, #4]
   13ec8:	701a      	strb	r2, [r3, #0]
   13eca:	4b0c      	ldr	r3, [pc, #48]	; (13efc <RADIO_Transmit+0x54>)
   13ecc:	3434      	adds	r4, #52	; 0x34
   13ece:	6019      	str	r1, [r3, #0]
   13ed0:	7821      	ldrb	r1, [r4, #0]
   13ed2:	2302      	movs	r3, #2
   13ed4:	2900      	cmp	r1, #0
   13ed6:	d102      	bne.n	13ede <RADIO_Transmit+0x36>
   13ed8:	0018      	movs	r0, r3
   13eda:	2a3f      	cmp	r2, #63	; 0x3f
   13edc:	d804      	bhi.n	13ee8 <RADIO_Transmit+0x40>
   13ede:	702b      	strb	r3, [r5, #0]
   13ee0:	2004      	movs	r0, #4
   13ee2:	4b07      	ldr	r3, [pc, #28]	; (13f00 <RADIO_Transmit+0x58>)
   13ee4:	4798      	blx	r3
   13ee6:	2000      	movs	r0, #0
   13ee8:	bd70      	pop	{r4, r5, r6, pc}
   13eea:	46c0      	nop			; (mov r8, r8)
   13eec:	2000304b 	.word	0x2000304b
   13ef0:	200029f8 	.word	0x200029f8
   13ef4:	0000d895 	.word	0x0000d895
   13ef8:	20000f74 	.word	0x20000f74
   13efc:	20000f70 	.word	0x20000f70
   13f00:	00013dd5 	.word	0x00013dd5

00013f04 <Radio_FSKTxPayloadHandler>:
   13f04:	b570      	push	{r4, r5, r6, lr}
   13f06:	4b1c      	ldr	r3, [pc, #112]	; (13f78 <Radio_FSKTxPayloadHandler+0x74>)
   13f08:	000d      	movs	r5, r1
   13f0a:	4798      	blx	r3
   13f0c:	4c1b      	ldr	r4, [pc, #108]	; (13f7c <Radio_FSKTxPayloadHandler+0x78>)
   13f0e:	3458      	adds	r4, #88	; 0x58
   13f10:	7820      	ldrb	r0, [r4, #0]
   13f12:	b2c0      	uxtb	r0, r0
   13f14:	2800      	cmp	r0, #0
   13f16:	d112      	bne.n	13f3e <Radio_FSKTxPayloadHandler+0x3a>
   13f18:	2d00      	cmp	r5, #0
   13f1a:	d007      	beq.n	13f2c <Radio_FSKTxPayloadHandler+0x28>
   13f1c:	4918      	ldr	r1, [pc, #96]	; (13f80 <Radio_FSKTxPayloadHandler+0x7c>)
   13f1e:	4b19      	ldr	r3, [pc, #100]	; (13f84 <Radio_FSKTxPayloadHandler+0x80>)
   13f20:	2d3e      	cmp	r5, #62	; 0x3e
   13f22:	d806      	bhi.n	13f32 <Radio_FSKTxPayloadHandler+0x2e>
   13f24:	002a      	movs	r2, r5
   13f26:	6809      	ldr	r1, [r1, #0]
   13f28:	4798      	blx	r3
   13f2a:	7025      	strb	r5, [r4, #0]
   13f2c:	4b16      	ldr	r3, [pc, #88]	; (13f88 <Radio_FSKTxPayloadHandler+0x84>)
   13f2e:	4798      	blx	r3
   13f30:	bd70      	pop	{r4, r5, r6, pc}
   13f32:	223f      	movs	r2, #63	; 0x3f
   13f34:	6809      	ldr	r1, [r1, #0]
   13f36:	4798      	blx	r3
   13f38:	233f      	movs	r3, #63	; 0x3f
   13f3a:	7023      	strb	r3, [r4, #0]
   13f3c:	e7f6      	b.n	13f2c <Radio_FSKTxPayloadHandler+0x28>
   13f3e:	7823      	ldrb	r3, [r4, #0]
   13f40:	429d      	cmp	r5, r3
   13f42:	d0f3      	beq.n	13f2c <Radio_FSKTxPayloadHandler+0x28>
   13f44:	7822      	ldrb	r2, [r4, #0]
   13f46:	480e      	ldr	r0, [pc, #56]	; (13f80 <Radio_FSKTxPayloadHandler+0x7c>)
   13f48:	1aaa      	subs	r2, r5, r2
   13f4a:	b2d2      	uxtb	r2, r2
   13f4c:	4b0d      	ldr	r3, [pc, #52]	; (13f84 <Radio_FSKTxPayloadHandler+0x80>)
   13f4e:	2a3f      	cmp	r2, #63	; 0x3f
   13f50:	d807      	bhi.n	13f62 <Radio_FSKTxPayloadHandler+0x5e>
   13f52:	7826      	ldrb	r6, [r4, #0]
   13f54:	7822      	ldrb	r2, [r4, #0]
   13f56:	6801      	ldr	r1, [r0, #0]
   13f58:	1aaa      	subs	r2, r5, r2
   13f5a:	b2d2      	uxtb	r2, r2
   13f5c:	1989      	adds	r1, r1, r6
   13f5e:	2000      	movs	r0, #0
   13f60:	e7e2      	b.n	13f28 <Radio_FSKTxPayloadHandler+0x24>
   13f62:	7822      	ldrb	r2, [r4, #0]
   13f64:	6801      	ldr	r1, [r0, #0]
   13f66:	2000      	movs	r0, #0
   13f68:	1889      	adds	r1, r1, r2
   13f6a:	223f      	movs	r2, #63	; 0x3f
   13f6c:	4798      	blx	r3
   13f6e:	7823      	ldrb	r3, [r4, #0]
   13f70:	333f      	adds	r3, #63	; 0x3f
   13f72:	b2db      	uxtb	r3, r3
   13f74:	e7e1      	b.n	13f3a <Radio_FSKTxPayloadHandler+0x36>
   13f76:	46c0      	nop			; (mov r8, r8)
   13f78:	00002a15 	.word	0x00002a15
   13f7c:	200029f8 	.word	0x200029f8
   13f80:	20000f70 	.word	0x20000f70
   13f84:	00006499 	.word	0x00006499
   13f88:	00002a55 	.word	0x00002a55

00013f8c <RADIO_FSKSyncAddr>:
   13f8c:	4b08      	ldr	r3, [pc, #32]	; (13fb0 <RADIO_FSKSyncAddr+0x24>)
   13f8e:	b510      	push	{r4, lr}
   13f90:	4798      	blx	r3
   13f92:	4b08      	ldr	r3, [pc, #32]	; (13fb4 <RADIO_FSKSyncAddr+0x28>)
   13f94:	001a      	movs	r2, r3
   13f96:	3234      	adds	r2, #52	; 0x34
   13f98:	7812      	ldrb	r2, [r2, #0]
   13f9a:	2a00      	cmp	r2, #0
   13f9c:	d104      	bne.n	13fa8 <RADIO_FSKSyncAddr+0x1c>
   13f9e:	0019      	movs	r1, r3
   13fa0:	3358      	adds	r3, #88	; 0x58
   13fa2:	312c      	adds	r1, #44	; 0x2c
   13fa4:	700a      	strb	r2, [r1, #0]
   13fa6:	701a      	strb	r2, [r3, #0]
   13fa8:	4b03      	ldr	r3, [pc, #12]	; (13fb8 <RADIO_FSKSyncAddr+0x2c>)
   13faa:	4798      	blx	r3
   13fac:	bd10      	pop	{r4, pc}
   13fae:	46c0      	nop			; (mov r8, r8)
   13fb0:	00002a15 	.word	0x00002a15
   13fb4:	200029f8 	.word	0x200029f8
   13fb8:	00002a55 	.word	0x00002a55

00013fbc <RADIO_FSKFifoLevel>:
   13fbc:	b570      	push	{r4, r5, r6, lr}
   13fbe:	4b22      	ldr	r3, [pc, #136]	; (14048 <RADIO_FSKFifoLevel+0x8c>)
   13fc0:	4798      	blx	r3
   13fc2:	4d22      	ldr	r5, [pc, #136]	; (1404c <RADIO_FSKFifoLevel+0x90>)
   13fc4:	002a      	movs	r2, r5
   13fc6:	002b      	movs	r3, r5
   13fc8:	322c      	adds	r2, #44	; 0x2c
   13fca:	3358      	adds	r3, #88	; 0x58
   13fcc:	7810      	ldrb	r0, [r2, #0]
   13fce:	7819      	ldrb	r1, [r3, #0]
   13fd0:	4288      	cmp	r0, r1
   13fd2:	d105      	bne.n	13fe0 <RADIO_FSKFifoLevel+0x24>
   13fd4:	7812      	ldrb	r2, [r2, #0]
   13fd6:	2a00      	cmp	r2, #0
   13fd8:	d002      	beq.n	13fe0 <RADIO_FSKFifoLevel+0x24>
   13fda:	781b      	ldrb	r3, [r3, #0]
   13fdc:	2b00      	cmp	r3, #0
   13fde:	d11f      	bne.n	14020 <RADIO_FSKFifoLevel+0x64>
   13fe0:	0029      	movs	r1, r5
   13fe2:	312c      	adds	r1, #44	; 0x2c
   13fe4:	7808      	ldrb	r0, [r1, #0]
   13fe6:	b2c0      	uxtb	r0, r0
   13fe8:	2800      	cmp	r0, #0
   13fea:	d102      	bne.n	13ff2 <RADIO_FSKFifoLevel+0x36>
   13fec:	2201      	movs	r2, #1
   13fee:	4b18      	ldr	r3, [pc, #96]	; (14050 <RADIO_FSKFifoLevel+0x94>)
   13ff0:	4798      	blx	r3
   13ff2:	002e      	movs	r6, r5
   13ff4:	002c      	movs	r4, r5
   13ff6:	362c      	adds	r6, #44	; 0x2c
   13ff8:	3458      	adds	r4, #88	; 0x58
   13ffa:	7833      	ldrb	r3, [r6, #0]
   13ffc:	7822      	ldrb	r2, [r4, #0]
   13ffe:	1a9b      	subs	r3, r3, r2
   14000:	b2db      	uxtb	r3, r3
   14002:	2b3e      	cmp	r3, #62	; 0x3e
   14004:	d80f      	bhi.n	14026 <RADIO_FSKFifoLevel+0x6a>
   14006:	7823      	ldrb	r3, [r4, #0]
   14008:	7832      	ldrb	r2, [r6, #0]
   1400a:	7821      	ldrb	r1, [r4, #0]
   1400c:	2000      	movs	r0, #0
   1400e:	1a52      	subs	r2, r2, r1
   14010:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   14012:	b2d2      	uxtb	r2, r2
   14014:	18c9      	adds	r1, r1, r3
   14016:	4b0e      	ldr	r3, [pc, #56]	; (14050 <RADIO_FSKFifoLevel+0x94>)
   14018:	4798      	blx	r3
   1401a:	7833      	ldrb	r3, [r6, #0]
   1401c:	b2db      	uxtb	r3, r3
   1401e:	7023      	strb	r3, [r4, #0]
   14020:	4b0c      	ldr	r3, [pc, #48]	; (14054 <RADIO_FSKFifoLevel+0x98>)
   14022:	4798      	blx	r3
   14024:	bd70      	pop	{r4, r5, r6, pc}
   14026:	7833      	ldrb	r3, [r6, #0]
   14028:	7822      	ldrb	r2, [r4, #0]
   1402a:	1a9b      	subs	r3, r3, r2
   1402c:	b2db      	uxtb	r3, r3
   1402e:	2b3f      	cmp	r3, #63	; 0x3f
   14030:	d9f6      	bls.n	14020 <RADIO_FSKFifoLevel+0x64>
   14032:	7823      	ldrb	r3, [r4, #0]
   14034:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   14036:	223f      	movs	r2, #63	; 0x3f
   14038:	18c9      	adds	r1, r1, r3
   1403a:	2000      	movs	r0, #0
   1403c:	4b04      	ldr	r3, [pc, #16]	; (14050 <RADIO_FSKFifoLevel+0x94>)
   1403e:	4798      	blx	r3
   14040:	7823      	ldrb	r3, [r4, #0]
   14042:	333f      	adds	r3, #63	; 0x3f
   14044:	e7ea      	b.n	1401c <RADIO_FSKFifoLevel+0x60>
   14046:	46c0      	nop			; (mov r8, r8)
   14048:	00002a15 	.word	0x00002a15
   1404c:	200029f8 	.word	0x200029f8
   14050:	000064d9 	.word	0x000064d9
   14054:	00002a55 	.word	0x00002a55

00014058 <RADIO_FSKFifoEmpty>:
   14058:	b510      	push	{r4, lr}
   1405a:	4b03      	ldr	r3, [pc, #12]	; (14068 <RADIO_FSKFifoEmpty+0x10>)
   1405c:	7819      	ldrb	r1, [r3, #0]
   1405e:	4b03      	ldr	r3, [pc, #12]	; (1406c <RADIO_FSKFifoEmpty+0x14>)
   14060:	6818      	ldr	r0, [r3, #0]
   14062:	4b03      	ldr	r3, [pc, #12]	; (14070 <RADIO_FSKFifoEmpty+0x18>)
   14064:	4798      	blx	r3
   14066:	bd10      	pop	{r4, pc}
   14068:	20000f74 	.word	0x20000f74
   1406c:	20000f70 	.word	0x20000f70
   14070:	00013f05 	.word	0x00013f05

00014074 <RADIO_GetData>:
   14074:	4b03      	ldr	r3, [pc, #12]	; (14084 <RADIO_GetData+0x10>)
   14076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14078:	332c      	adds	r3, #44	; 0x2c
   1407a:	6002      	str	r2, [r0, #0]
   1407c:	781b      	ldrb	r3, [r3, #0]
   1407e:	2000      	movs	r0, #0
   14080:	800b      	strh	r3, [r1, #0]
   14082:	4770      	bx	lr
   14084:	200029f8 	.word	0x200029f8

00014088 <Radio_EnableRfControl>:
   14088:	b510      	push	{r4, lr}
   1408a:	4b08      	ldr	r3, [pc, #32]	; (140ac <Radio_EnableRfControl+0x24>)
   1408c:	0001      	movs	r1, r0
   1408e:	681a      	ldr	r2, [r3, #0]
   14090:	4807      	ldr	r0, [pc, #28]	; (140b0 <Radio_EnableRfControl+0x28>)
   14092:	4c08      	ldr	r4, [pc, #32]	; (140b4 <Radio_EnableRfControl+0x2c>)
   14094:	1812      	adds	r2, r2, r0
   14096:	2000      	movs	r0, #0
   14098:	42a2      	cmp	r2, r4
   1409a:	d804      	bhi.n	140a6 <Radio_EnableRfControl+0x1e>
   1409c:	3305      	adds	r3, #5
   1409e:	7fdb      	ldrb	r3, [r3, #31]
   140a0:	1e58      	subs	r0, r3, #1
   140a2:	4183      	sbcs	r3, r0
   140a4:	1c58      	adds	r0, r3, #1
   140a6:	4b04      	ldr	r3, [pc, #16]	; (140b8 <Radio_EnableRfControl+0x30>)
   140a8:	4798      	blx	r3
   140aa:	bd10      	pop	{r4, pc}
   140ac:	200029f8 	.word	0x200029f8
   140b0:	cc9eec80 	.word	0xcc9eec80
   140b4:	096ae380 	.word	0x096ae380
   140b8:	00006545 	.word	0x00006545

000140bc <RADIO_RxHandler>:
   140bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   140be:	4b33      	ldr	r3, [pc, #204]	; (1418c <RADIO_RxHandler+0xd0>)
   140c0:	2000      	movs	r0, #0
   140c2:	4798      	blx	r3
   140c4:	4e32      	ldr	r6, [pc, #200]	; (14190 <RADIO_RxHandler+0xd4>)
   140c6:	4b33      	ldr	r3, [pc, #204]	; (14194 <RADIO_RxHandler+0xd8>)
   140c8:	8830      	ldrh	r0, [r6, #0]
   140ca:	2800      	cmp	r0, #0
   140cc:	d100      	bne.n	140d0 <RADIO_RxHandler+0x14>
   140ce:	3004      	adds	r0, #4
   140d0:	4798      	blx	r3
   140d2:	4c31      	ldr	r4, [pc, #196]	; (14198 <RADIO_RxHandler+0xdc>)
   140d4:	4d31      	ldr	r5, [pc, #196]	; (1419c <RADIO_RxHandler+0xe0>)
   140d6:	0023      	movs	r3, r4
   140d8:	3334      	adds	r3, #52	; 0x34
   140da:	7819      	ldrb	r1, [r3, #0]
   140dc:	2901      	cmp	r1, #1
   140de:	d122      	bne.n	14126 <RADIO_RxHandler+0x6a>
   140e0:	2022      	movs	r0, #34	; 0x22
   140e2:	47a8      	blx	r5
   140e4:	2100      	movs	r1, #0
   140e6:	2040      	movs	r0, #64	; 0x40
   140e8:	47a8      	blx	r5
   140ea:	2100      	movs	r1, #0
   140ec:	2041      	movs	r0, #65	; 0x41
   140ee:	47a8      	blx	r5
   140f0:	8832      	ldrh	r2, [r6, #0]
   140f2:	4b2b      	ldr	r3, [pc, #172]	; (141a0 <RADIO_RxHandler+0xe4>)
   140f4:	2a00      	cmp	r2, #0
   140f6:	d131      	bne.n	1415c <RADIO_RxHandler+0xa0>
   140f8:	0021      	movs	r1, r4
   140fa:	2005      	movs	r0, #5
   140fc:	3134      	adds	r1, #52	; 0x34
   140fe:	7809      	ldrb	r1, [r1, #0]
   14100:	4798      	blx	r3
   14102:	68e3      	ldr	r3, [r4, #12]
   14104:	2b00      	cmp	r3, #0
   14106:	d00c      	beq.n	14122 <RADIO_RxHandler+0x66>
   14108:	8832      	ldrh	r2, [r6, #0]
   1410a:	2a00      	cmp	r2, #0
   1410c:	d009      	beq.n	14122 <RADIO_RxHandler+0x66>
   1410e:	21fa      	movs	r1, #250	; 0xfa
   14110:	2200      	movs	r2, #0
   14112:	342f      	adds	r4, #47	; 0x2f
   14114:	0089      	lsls	r1, r1, #2
   14116:	7820      	ldrb	r0, [r4, #0]
   14118:	4359      	muls	r1, r3
   1411a:	9200      	str	r2, [sp, #0]
   1411c:	4b21      	ldr	r3, [pc, #132]	; (141a4 <RADIO_RxHandler+0xe8>)
   1411e:	4c22      	ldr	r4, [pc, #136]	; (141a8 <RADIO_RxHandler+0xec>)
   14120:	47a0      	blx	r4
   14122:	2000      	movs	r0, #0
   14124:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   14126:	0023      	movs	r3, r4
   14128:	3338      	adds	r3, #56	; 0x38
   1412a:	7819      	ldrb	r1, [r3, #0]
   1412c:	2012      	movs	r0, #18
   1412e:	47a8      	blx	r5
   14130:	0023      	movs	r3, r4
   14132:	3339      	adds	r3, #57	; 0x39
   14134:	7819      	ldrb	r1, [r3, #0]
   14136:	2013      	movs	r0, #19
   14138:	47a8      	blx	r5
   1413a:	210c      	movs	r1, #12
   1413c:	2040      	movs	r0, #64	; 0x40
   1413e:	47a8      	blx	r5
   14140:	2100      	movs	r1, #0
   14142:	2041      	movs	r0, #65	; 0x41
   14144:	47a8      	blx	r5
   14146:	0022      	movs	r2, r4
   14148:	2300      	movs	r3, #0
   1414a:	3256      	adds	r2, #86	; 0x56
   1414c:	8013      	strh	r3, [r2, #0]
   1414e:	0022      	movs	r2, r4
   14150:	322c      	adds	r2, #44	; 0x2c
   14152:	7013      	strb	r3, [r2, #0]
   14154:	0022      	movs	r2, r4
   14156:	3258      	adds	r2, #88	; 0x58
   14158:	7013      	strb	r3, [r2, #0]
   1415a:	e7c9      	b.n	140f0 <RADIO_RxHandler+0x34>
   1415c:	0022      	movs	r2, r4
   1415e:	3234      	adds	r2, #52	; 0x34
   14160:	7811      	ldrb	r1, [r2, #0]
   14162:	2200      	movs	r2, #0
   14164:	2901      	cmp	r1, #1
   14166:	d101      	bne.n	1416c <RADIO_RxHandler+0xb0>
   14168:	2006      	movs	r0, #6
   1416a:	e7c9      	b.n	14100 <RADIO_RxHandler+0x44>
   1416c:	0011      	movs	r1, r2
   1416e:	2005      	movs	r0, #5
   14170:	4798      	blx	r3
   14172:	21fa      	movs	r1, #250	; 0xfa
   14174:	8833      	ldrh	r3, [r6, #0]
   14176:	0089      	lsls	r1, r1, #2
   14178:	4359      	muls	r1, r3
   1417a:	0023      	movs	r3, r4
   1417c:	2200      	movs	r2, #0
   1417e:	332e      	adds	r3, #46	; 0x2e
   14180:	7818      	ldrb	r0, [r3, #0]
   14182:	4d09      	ldr	r5, [pc, #36]	; (141a8 <RADIO_RxHandler+0xec>)
   14184:	9200      	str	r2, [sp, #0]
   14186:	4b09      	ldr	r3, [pc, #36]	; (141ac <RADIO_RxHandler+0xf0>)
   14188:	47a8      	blx	r5
   1418a:	e7ba      	b.n	14102 <RADIO_RxHandler+0x46>
   1418c:	00014089 	.word	0x00014089
   14190:	20000f66 	.word	0x20000f66
   14194:	00013815 	.word	0x00013815
   14198:	200029f8 	.word	0x200029f8
   1419c:	00006445 	.word	0x00006445
   141a0:	0000dc49 	.word	0x0000dc49
   141a4:	000141e5 	.word	0x000141e5
   141a8:	0000d57d 	.word	0x0000d57d
   141ac:	00014275 	.word	0x00014275

000141b0 <Radio_DisableRfControl>:
   141b0:	b510      	push	{r4, lr}
   141b2:	4b08      	ldr	r3, [pc, #32]	; (141d4 <Radio_DisableRfControl+0x24>)
   141b4:	0001      	movs	r1, r0
   141b6:	681a      	ldr	r2, [r3, #0]
   141b8:	4807      	ldr	r0, [pc, #28]	; (141d8 <Radio_DisableRfControl+0x28>)
   141ba:	4c08      	ldr	r4, [pc, #32]	; (141dc <Radio_DisableRfControl+0x2c>)
   141bc:	1812      	adds	r2, r2, r0
   141be:	2000      	movs	r0, #0
   141c0:	42a2      	cmp	r2, r4
   141c2:	d804      	bhi.n	141ce <Radio_DisableRfControl+0x1e>
   141c4:	3305      	adds	r3, #5
   141c6:	7fdb      	ldrb	r3, [r3, #31]
   141c8:	1e58      	subs	r0, r3, #1
   141ca:	4183      	sbcs	r3, r0
   141cc:	1c58      	adds	r0, r3, #1
   141ce:	4b04      	ldr	r3, [pc, #16]	; (141e0 <Radio_DisableRfControl+0x30>)
   141d0:	4798      	blx	r3
   141d2:	bd10      	pop	{r4, pc}
   141d4:	200029f8 	.word	0x200029f8
   141d8:	cc9eec80 	.word	0xcc9eec80
   141dc:	096ae380 	.word	0x096ae380
   141e0:	0000656d 	.word	0x0000656d

000141e4 <Radio_WatchdogTimeout>:
   141e4:	b510      	push	{r4, lr}
   141e6:	4b0e      	ldr	r3, [pc, #56]	; (14220 <Radio_WatchdogTimeout+0x3c>)
   141e8:	781a      	ldrb	r2, [r3, #0]
   141ea:	2a04      	cmp	r2, #4
   141ec:	d10b      	bne.n	14206 <Radio_WatchdogTimeout+0x22>
   141ee:	2320      	movs	r3, #32
   141f0:	4a0c      	ldr	r2, [pc, #48]	; (14224 <Radio_WatchdogTimeout+0x40>)
   141f2:	2000      	movs	r0, #0
   141f4:	8811      	ldrh	r1, [r2, #0]
   141f6:	430b      	orrs	r3, r1
   141f8:	8013      	strh	r3, [r2, #0]
   141fa:	4b0b      	ldr	r3, [pc, #44]	; (14228 <Radio_WatchdogTimeout+0x44>)
   141fc:	4798      	blx	r3
   141fe:	2002      	movs	r0, #2
   14200:	4b0a      	ldr	r3, [pc, #40]	; (1422c <Radio_WatchdogTimeout+0x48>)
   14202:	4798      	blx	r3
   14204:	bd10      	pop	{r4, pc}
   14206:	781b      	ldrb	r3, [r3, #0]
   14208:	2b02      	cmp	r3, #2
   1420a:	d1fb      	bne.n	14204 <Radio_WatchdogTimeout+0x20>
   1420c:	4a05      	ldr	r2, [pc, #20]	; (14224 <Radio_WatchdogTimeout+0x40>)
   1420e:	330e      	adds	r3, #14
   14210:	8811      	ldrh	r1, [r2, #0]
   14212:	2001      	movs	r0, #1
   14214:	430b      	orrs	r3, r1
   14216:	8013      	strh	r3, [r2, #0]
   14218:	4b03      	ldr	r3, [pc, #12]	; (14228 <Radio_WatchdogTimeout+0x44>)
   1421a:	4798      	blx	r3
   1421c:	2001      	movs	r0, #1
   1421e:	e7ef      	b.n	14200 <Radio_WatchdogTimeout+0x1c>
   14220:	2000304b 	.word	0x2000304b
   14224:	20003048 	.word	0x20003048
   14228:	000141b1 	.word	0x000141b1
   1422c:	00013dd5 	.word	0x00013dd5

00014230 <RADIO_RxTimeout>:
   14230:	b510      	push	{r4, lr}
   14232:	4b0a      	ldr	r3, [pc, #40]	; (1425c <RADIO_RxTimeout+0x2c>)
   14234:	332f      	adds	r3, #47	; 0x2f
   14236:	7818      	ldrb	r0, [r3, #0]
   14238:	4b09      	ldr	r3, [pc, #36]	; (14260 <RADIO_RxTimeout+0x30>)
   1423a:	4798      	blx	r3
   1423c:	2000      	movs	r0, #0
   1423e:	4b09      	ldr	r3, [pc, #36]	; (14264 <RADIO_RxTimeout+0x34>)
   14240:	4798      	blx	r3
   14242:	2180      	movs	r1, #128	; 0x80
   14244:	2012      	movs	r0, #18
   14246:	4b08      	ldr	r3, [pc, #32]	; (14268 <RADIO_RxTimeout+0x38>)
   14248:	4798      	blx	r3
   1424a:	2340      	movs	r3, #64	; 0x40
   1424c:	4a07      	ldr	r2, [pc, #28]	; (1426c <RADIO_RxTimeout+0x3c>)
   1424e:	2002      	movs	r0, #2
   14250:	8811      	ldrh	r1, [r2, #0]
   14252:	430b      	orrs	r3, r1
   14254:	8013      	strh	r3, [r2, #0]
   14256:	4b06      	ldr	r3, [pc, #24]	; (14270 <RADIO_RxTimeout+0x40>)
   14258:	4798      	blx	r3
   1425a:	bd10      	pop	{r4, pc}
   1425c:	200029f8 	.word	0x200029f8
   14260:	0000d895 	.word	0x0000d895
   14264:	000141b1 	.word	0x000141b1
   14268:	00006445 	.word	0x00006445
   1426c:	20003048 	.word	0x20003048
   14270:	00013dd5 	.word	0x00013dd5

00014274 <Radio_RxFSKTimeout>:
   14274:	b510      	push	{r4, lr}
   14276:	4b08      	ldr	r3, [pc, #32]	; (14298 <Radio_RxFSKTimeout+0x24>)
   14278:	332f      	adds	r3, #47	; 0x2f
   1427a:	7818      	ldrb	r0, [r3, #0]
   1427c:	4b07      	ldr	r3, [pc, #28]	; (1429c <Radio_RxFSKTimeout+0x28>)
   1427e:	4798      	blx	r3
   14280:	2000      	movs	r0, #0
   14282:	4b07      	ldr	r3, [pc, #28]	; (142a0 <Radio_RxFSKTimeout+0x2c>)
   14284:	4798      	blx	r3
   14286:	2380      	movs	r3, #128	; 0x80
   14288:	4a06      	ldr	r2, [pc, #24]	; (142a4 <Radio_RxFSKTimeout+0x30>)
   1428a:	2002      	movs	r0, #2
   1428c:	8811      	ldrh	r1, [r2, #0]
   1428e:	430b      	orrs	r3, r1
   14290:	8013      	strh	r3, [r2, #0]
   14292:	4b05      	ldr	r3, [pc, #20]	; (142a8 <Radio_RxFSKTimeout+0x34>)
   14294:	4798      	blx	r3
   14296:	bd10      	pop	{r4, pc}
   14298:	200029f8 	.word	0x200029f8
   1429c:	0000d895 	.word	0x0000d895
   142a0:	000141b1 	.word	0x000141b1
   142a4:	20003048 	.word	0x20003048
   142a8:	00013dd5 	.word	0x00013dd5

000142ac <RADIO_TxDone>:
   142ac:	b570      	push	{r4, r5, r6, lr}
   142ae:	4b14      	ldr	r3, [pc, #80]	; (14300 <RADIO_TxDone+0x54>)
   142b0:	332f      	adds	r3, #47	; 0x2f
   142b2:	7818      	ldrb	r0, [r3, #0]
   142b4:	4b13      	ldr	r3, [pc, #76]	; (14304 <RADIO_TxDone+0x58>)
   142b6:	4798      	blx	r3
   142b8:	2001      	movs	r0, #1
   142ba:	4b13      	ldr	r3, [pc, #76]	; (14308 <RADIO_TxDone+0x5c>)
   142bc:	4798      	blx	r3
   142be:	4b13      	ldr	r3, [pc, #76]	; (1430c <RADIO_TxDone+0x60>)
   142c0:	2108      	movs	r1, #8
   142c2:	2012      	movs	r0, #18
   142c4:	4798      	blx	r3
   142c6:	4b12      	ldr	r3, [pc, #72]	; (14310 <RADIO_TxDone+0x64>)
   142c8:	781a      	ldrb	r2, [r3, #0]
   142ca:	4b12      	ldr	r3, [pc, #72]	; (14314 <RADIO_TxDone+0x68>)
   142cc:	2a02      	cmp	r2, #2
   142ce:	d002      	beq.n	142d6 <RADIO_TxDone+0x2a>
   142d0:	881a      	ldrh	r2, [r3, #0]
   142d2:	0692      	lsls	r2, r2, #26
   142d4:	d413      	bmi.n	142fe <RADIO_TxDone+0x52>
   142d6:	2001      	movs	r0, #1
   142d8:	881a      	ldrh	r2, [r3, #0]
   142da:	4302      	orrs	r2, r0
   142dc:	801a      	strh	r2, [r3, #0]
   142de:	4b0e      	ldr	r3, [pc, #56]	; (14318 <RADIO_TxDone+0x6c>)
   142e0:	4798      	blx	r3
   142e2:	4b0e      	ldr	r3, [pc, #56]	; (1431c <RADIO_TxDone+0x70>)
   142e4:	4798      	blx	r3
   142e6:	4c0e      	ldr	r4, [pc, #56]	; (14320 <RADIO_TxDone+0x74>)
   142e8:	4d0e      	ldr	r5, [pc, #56]	; (14324 <RADIO_TxDone+0x78>)
   142ea:	6822      	ldr	r2, [r4, #0]
   142ec:	6863      	ldr	r3, [r4, #4]
   142ee:	1a80      	subs	r0, r0, r2
   142f0:	4199      	sbcs	r1, r3
   142f2:	22fa      	movs	r2, #250	; 0xfa
   142f4:	2300      	movs	r3, #0
   142f6:	0092      	lsls	r2, r2, #2
   142f8:	47a8      	blx	r5
   142fa:	6020      	str	r0, [r4, #0]
   142fc:	6061      	str	r1, [r4, #4]
   142fe:	bd70      	pop	{r4, r5, r6, pc}
   14300:	200029f8 	.word	0x200029f8
   14304:	0000d895 	.word	0x0000d895
   14308:	000141b1 	.word	0x000141b1
   1430c:	00006445 	.word	0x00006445
   14310:	2000304b 	.word	0x2000304b
   14314:	20003048 	.word	0x20003048
   14318:	00013dd5 	.word	0x00013dd5
   1431c:	0000d525 	.word	0x0000d525
   14320:	20000f68 	.word	0x20000f68
   14324:	0001532d 	.word	0x0001532d

00014328 <RADIO_FSKPacketSent>:
   14328:	b570      	push	{r4, r5, r6, lr}
   1432a:	4b15      	ldr	r3, [pc, #84]	; (14380 <RADIO_FSKPacketSent+0x58>)
   1432c:	203f      	movs	r0, #63	; 0x3f
   1432e:	4798      	blx	r3
   14330:	0703      	lsls	r3, r0, #28
   14332:	d524      	bpl.n	1437e <RADIO_FSKPacketSent+0x56>
   14334:	4b13      	ldr	r3, [pc, #76]	; (14384 <RADIO_FSKPacketSent+0x5c>)
   14336:	332f      	adds	r3, #47	; 0x2f
   14338:	7818      	ldrb	r0, [r3, #0]
   1433a:	4b13      	ldr	r3, [pc, #76]	; (14388 <RADIO_FSKPacketSent+0x60>)
   1433c:	4798      	blx	r3
   1433e:	4b13      	ldr	r3, [pc, #76]	; (1438c <RADIO_FSKPacketSent+0x64>)
   14340:	2001      	movs	r0, #1
   14342:	4798      	blx	r3
   14344:	4b12      	ldr	r3, [pc, #72]	; (14390 <RADIO_FSKPacketSent+0x68>)
   14346:	4c13      	ldr	r4, [pc, #76]	; (14394 <RADIO_FSKPacketSent+0x6c>)
   14348:	781b      	ldrb	r3, [r3, #0]
   1434a:	2b02      	cmp	r3, #2
   1434c:	d002      	beq.n	14354 <RADIO_FSKPacketSent+0x2c>
   1434e:	8823      	ldrh	r3, [r4, #0]
   14350:	069b      	lsls	r3, r3, #26
   14352:	d414      	bmi.n	1437e <RADIO_FSKPacketSent+0x56>
   14354:	4b10      	ldr	r3, [pc, #64]	; (14398 <RADIO_FSKPacketSent+0x70>)
   14356:	4798      	blx	r3
   14358:	4d10      	ldr	r5, [pc, #64]	; (1439c <RADIO_FSKPacketSent+0x74>)
   1435a:	4e11      	ldr	r6, [pc, #68]	; (143a0 <RADIO_FSKPacketSent+0x78>)
   1435c:	682a      	ldr	r2, [r5, #0]
   1435e:	686b      	ldr	r3, [r5, #4]
   14360:	1a80      	subs	r0, r0, r2
   14362:	4199      	sbcs	r1, r3
   14364:	22fa      	movs	r2, #250	; 0xfa
   14366:	2300      	movs	r3, #0
   14368:	0092      	lsls	r2, r2, #2
   1436a:	47b0      	blx	r6
   1436c:	4b0d      	ldr	r3, [pc, #52]	; (143a4 <RADIO_FSKPacketSent+0x7c>)
   1436e:	6028      	str	r0, [r5, #0]
   14370:	6069      	str	r1, [r5, #4]
   14372:	2001      	movs	r0, #1
   14374:	4798      	blx	r3
   14376:	2304      	movs	r3, #4
   14378:	8822      	ldrh	r2, [r4, #0]
   1437a:	4313      	orrs	r3, r2
   1437c:	8023      	strh	r3, [r4, #0]
   1437e:	bd70      	pop	{r4, r5, r6, pc}
   14380:	0000646d 	.word	0x0000646d
   14384:	200029f8 	.word	0x200029f8
   14388:	0000d895 	.word	0x0000d895
   1438c:	000141b1 	.word	0x000141b1
   14390:	2000304b 	.word	0x2000304b
   14394:	20003048 	.word	0x20003048
   14398:	0000d525 	.word	0x0000d525
   1439c:	20000f68 	.word	0x20000f68
   143a0:	0001532d 	.word	0x0001532d
   143a4:	00013dd5 	.word	0x00013dd5

000143a8 <RADIO_RxDone>:
   143a8:	b570      	push	{r4, r5, r6, lr}
   143aa:	2012      	movs	r0, #18
   143ac:	4e16      	ldr	r6, [pc, #88]	; (14408 <RADIO_RxDone+0x60>)
   143ae:	47b0      	blx	r6
   143b0:	4b16      	ldr	r3, [pc, #88]	; (1440c <RADIO_RxDone+0x64>)
   143b2:	0005      	movs	r5, r0
   143b4:	2170      	movs	r1, #112	; 0x70
   143b6:	2012      	movs	r0, #18
   143b8:	4798      	blx	r3
   143ba:	2350      	movs	r3, #80	; 0x50
   143bc:	402b      	ands	r3, r5
   143be:	2b50      	cmp	r3, #80	; 0x50
   143c0:	d119      	bne.n	143f6 <RADIO_RxDone+0x4e>
   143c2:	4c13      	ldr	r4, [pc, #76]	; (14410 <RADIO_RxDone+0x68>)
   143c4:	0023      	movs	r3, r4
   143c6:	332f      	adds	r3, #47	; 0x2f
   143c8:	7818      	ldrb	r0, [r3, #0]
   143ca:	4b12      	ldr	r3, [pc, #72]	; (14414 <RADIO_RxDone+0x6c>)
   143cc:	4798      	blx	r3
   143ce:	4b12      	ldr	r3, [pc, #72]	; (14418 <RADIO_RxDone+0x70>)
   143d0:	2000      	movs	r0, #0
   143d2:	4798      	blx	r3
   143d4:	3404      	adds	r4, #4
   143d6:	201c      	movs	r0, #28
   143d8:	47b0      	blx	r6
   143da:	7fe2      	ldrb	r2, [r4, #31]
   143dc:	4b0f      	ldr	r3, [pc, #60]	; (1441c <RADIO_RxDone+0x74>)
   143de:	4910      	ldr	r1, [pc, #64]	; (14420 <RADIO_RxDone+0x78>)
   143e0:	2a00      	cmp	r2, #0
   143e2:	d003      	beq.n	143ec <RADIO_RxDone+0x44>
   143e4:	06aa      	lsls	r2, r5, #26
   143e6:	d407      	bmi.n	143f8 <RADIO_RxDone+0x50>
   143e8:	0642      	lsls	r2, r0, #25
   143ea:	d505      	bpl.n	143f8 <RADIO_RxDone+0x50>
   143ec:	2002      	movs	r0, #2
   143ee:	881a      	ldrh	r2, [r3, #0]
   143f0:	4302      	orrs	r2, r0
   143f2:	801a      	strh	r2, [r3, #0]
   143f4:	4788      	blx	r1
   143f6:	bd70      	pop	{r4, r5, r6, pc}
   143f8:	2280      	movs	r2, #128	; 0x80
   143fa:	8818      	ldrh	r0, [r3, #0]
   143fc:	0052      	lsls	r2, r2, #1
   143fe:	4302      	orrs	r2, r0
   14400:	801a      	strh	r2, [r3, #0]
   14402:	2002      	movs	r0, #2
   14404:	e7f6      	b.n	143f4 <RADIO_RxDone+0x4c>
   14406:	46c0      	nop			; (mov r8, r8)
   14408:	0000646d 	.word	0x0000646d
   1440c:	00006445 	.word	0x00006445
   14410:	200029f8 	.word	0x200029f8
   14414:	0000d895 	.word	0x0000d895
   14418:	000141b1 	.word	0x000141b1
   1441c:	20003048 	.word	0x20003048
   14420:	00013dd5 	.word	0x00013dd5

00014424 <RADIO_FSKPayloadReady>:
   14424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14426:	203f      	movs	r0, #63	; 0x3f
   14428:	4b39      	ldr	r3, [pc, #228]	; (14510 <RADIO_FSKPayloadReady+0xec>)
   1442a:	4798      	blx	r3
   1442c:	0743      	lsls	r3, r0, #29
   1442e:	d559      	bpl.n	144e4 <RADIO_FSKPayloadReady+0xc0>
   14430:	4c38      	ldr	r4, [pc, #224]	; (14514 <RADIO_FSKPayloadReady+0xf0>)
   14432:	4d39      	ldr	r5, [pc, #228]	; (14518 <RADIO_FSKPayloadReady+0xf4>)
   14434:	1d23      	adds	r3, r4, #4
   14436:	7fdb      	ldrb	r3, [r3, #31]
   14438:	2b01      	cmp	r3, #1
   1443a:	d154      	bne.n	144e6 <RADIO_FSKPayloadReady+0xc2>
   1443c:	2202      	movs	r2, #2
   1443e:	4210      	tst	r0, r2
   14440:	d048      	beq.n	144d4 <RADIO_FSKPayloadReady+0xb0>
   14442:	0023      	movs	r3, r4
   14444:	332f      	adds	r3, #47	; 0x2f
   14446:	7818      	ldrb	r0, [r3, #0]
   14448:	4e34      	ldr	r6, [pc, #208]	; (1451c <RADIO_FSKPayloadReady+0xf8>)
   1444a:	47b0      	blx	r6
   1444c:	0023      	movs	r3, r4
   1444e:	332e      	adds	r3, #46	; 0x2e
   14450:	7818      	ldrb	r0, [r3, #0]
   14452:	47b0      	blx	r6
   14454:	4b32      	ldr	r3, [pc, #200]	; (14520 <RADIO_FSKPayloadReady+0xfc>)
   14456:	4798      	blx	r3
   14458:	0022      	movs	r2, r4
   1445a:	0023      	movs	r3, r4
   1445c:	322c      	adds	r2, #44	; 0x2c
   1445e:	3358      	adds	r3, #88	; 0x58
   14460:	7810      	ldrb	r0, [r2, #0]
   14462:	7819      	ldrb	r1, [r3, #0]
   14464:	4288      	cmp	r0, r1
   14466:	d105      	bne.n	14474 <RADIO_FSKPayloadReady+0x50>
   14468:	7812      	ldrb	r2, [r2, #0]
   1446a:	2a00      	cmp	r2, #0
   1446c:	d002      	beq.n	14474 <RADIO_FSKPayloadReady+0x50>
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	2b00      	cmp	r3, #0
   14472:	d118      	bne.n	144a6 <RADIO_FSKPayloadReady+0x82>
   14474:	0021      	movs	r1, r4
   14476:	312c      	adds	r1, #44	; 0x2c
   14478:	7808      	ldrb	r0, [r1, #0]
   1447a:	b2c0      	uxtb	r0, r0
   1447c:	2800      	cmp	r0, #0
   1447e:	d102      	bne.n	14486 <RADIO_FSKPayloadReady+0x62>
   14480:	2201      	movs	r2, #1
   14482:	4b28      	ldr	r3, [pc, #160]	; (14524 <RADIO_FSKPayloadReady+0x100>)
   14484:	4798      	blx	r3
   14486:	0026      	movs	r6, r4
   14488:	0027      	movs	r7, r4
   1448a:	3658      	adds	r6, #88	; 0x58
   1448c:	7830      	ldrb	r0, [r6, #0]
   1448e:	372c      	adds	r7, #44	; 0x2c
   14490:	b2c0      	uxtb	r0, r0
   14492:	2800      	cmp	r0, #0
   14494:	d110      	bne.n	144b8 <RADIO_FSKPayloadReady+0x94>
   14496:	783a      	ldrb	r2, [r7, #0]
   14498:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1449a:	b2d2      	uxtb	r2, r2
   1449c:	4b21      	ldr	r3, [pc, #132]	; (14524 <RADIO_FSKPayloadReady+0x100>)
   1449e:	4798      	blx	r3
   144a0:	783b      	ldrb	r3, [r7, #0]
   144a2:	b2db      	uxtb	r3, r3
   144a4:	7033      	strb	r3, [r6, #0]
   144a6:	4b20      	ldr	r3, [pc, #128]	; (14528 <RADIO_FSKPayloadReady+0x104>)
   144a8:	4798      	blx	r3
   144aa:	4b20      	ldr	r3, [pc, #128]	; (1452c <RADIO_FSKPayloadReady+0x108>)
   144ac:	2000      	movs	r0, #0
   144ae:	4798      	blx	r3
   144b0:	2308      	movs	r3, #8
   144b2:	882a      	ldrh	r2, [r5, #0]
   144b4:	4313      	orrs	r3, r2
   144b6:	e011      	b.n	144dc <RADIO_FSKPayloadReady+0xb8>
   144b8:	783b      	ldrb	r3, [r7, #0]
   144ba:	7832      	ldrb	r2, [r6, #0]
   144bc:	1a9b      	subs	r3, r3, r2
   144be:	2b00      	cmp	r3, #0
   144c0:	ddf1      	ble.n	144a6 <RADIO_FSKPayloadReady+0x82>
   144c2:	7833      	ldrb	r3, [r6, #0]
   144c4:	783a      	ldrb	r2, [r7, #0]
   144c6:	7831      	ldrb	r1, [r6, #0]
   144c8:	2000      	movs	r0, #0
   144ca:	1a52      	subs	r2, r2, r1
   144cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   144ce:	b2d2      	uxtb	r2, r2
   144d0:	18c9      	adds	r1, r1, r3
   144d2:	e7e3      	b.n	1449c <RADIO_FSKPayloadReady+0x78>
   144d4:	2380      	movs	r3, #128	; 0x80
   144d6:	8829      	ldrh	r1, [r5, #0]
   144d8:	005b      	lsls	r3, r3, #1
   144da:	430b      	orrs	r3, r1
   144dc:	802b      	strh	r3, [r5, #0]
   144de:	2002      	movs	r0, #2
   144e0:	4b13      	ldr	r3, [pc, #76]	; (14530 <RADIO_FSKPayloadReady+0x10c>)
   144e2:	4798      	blx	r3
   144e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144e6:	0023      	movs	r3, r4
   144e8:	332f      	adds	r3, #47	; 0x2f
   144ea:	4e0c      	ldr	r6, [pc, #48]	; (1451c <RADIO_FSKPayloadReady+0xf8>)
   144ec:	7818      	ldrb	r0, [r3, #0]
   144ee:	47b0      	blx	r6
   144f0:	0023      	movs	r3, r4
   144f2:	332e      	adds	r3, #46	; 0x2e
   144f4:	7818      	ldrb	r0, [r3, #0]
   144f6:	47b0      	blx	r6
   144f8:	4e0e      	ldr	r6, [pc, #56]	; (14534 <RADIO_FSKPayloadReady+0x110>)
   144fa:	2201      	movs	r2, #1
   144fc:	0031      	movs	r1, r6
   144fe:	2000      	movs	r0, #0
   14500:	4f08      	ldr	r7, [pc, #32]	; (14524 <RADIO_FSKPayloadReady+0x100>)
   14502:	47b8      	blx	r7
   14504:	7832      	ldrb	r2, [r6, #0]
   14506:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14508:	b2d2      	uxtb	r2, r2
   1450a:	2000      	movs	r0, #0
   1450c:	47b8      	blx	r7
   1450e:	e7cc      	b.n	144aa <RADIO_FSKPayloadReady+0x86>
   14510:	0000646d 	.word	0x0000646d
   14514:	200029f8 	.word	0x200029f8
   14518:	20003048 	.word	0x20003048
   1451c:	0000d895 	.word	0x0000d895
   14520:	00002a15 	.word	0x00002a15
   14524:	000064d9 	.word	0x000064d9
   14528:	00002a55 	.word	0x00002a55
   1452c:	000141b1 	.word	0x000141b1
   14530:	00013dd5 	.word	0x00013dd5
   14534:	20002a24 	.word	0x20002a24

00014538 <Radio_SetClockInput>:
   14538:	b510      	push	{r4, lr}
   1453a:	4b08      	ldr	r3, [pc, #32]	; (1455c <Radio_SetClockInput+0x24>)
   1453c:	3355      	adds	r3, #85	; 0x55
   1453e:	781b      	ldrb	r3, [r3, #0]
   14540:	2b00      	cmp	r3, #0
   14542:	d10a      	bne.n	1455a <Radio_SetClockInput+0x22>
   14544:	4b06      	ldr	r3, [pc, #24]	; (14560 <Radio_SetClockInput+0x28>)
   14546:	204b      	movs	r0, #75	; 0x4b
   14548:	4798      	blx	r3
   1454a:	2110      	movs	r1, #16
   1454c:	4301      	orrs	r1, r0
   1454e:	4b05      	ldr	r3, [pc, #20]	; (14564 <Radio_SetClockInput+0x2c>)
   14550:	b2c9      	uxtb	r1, r1
   14552:	204b      	movs	r0, #75	; 0x4b
   14554:	4798      	blx	r3
   14556:	4b04      	ldr	r3, [pc, #16]	; (14568 <Radio_SetClockInput+0x30>)
   14558:	4798      	blx	r3
   1455a:	bd10      	pop	{r4, pc}
   1455c:	200029f8 	.word	0x200029f8
   14560:	0000646d 	.word	0x0000646d
   14564:	00006445 	.word	0x00006445
   14568:	0000658d 	.word	0x0000658d

0001456c <Radio_ResetClockInput>:
   1456c:	b510      	push	{r4, lr}
   1456e:	4b04      	ldr	r3, [pc, #16]	; (14580 <Radio_ResetClockInput+0x14>)
   14570:	3355      	adds	r3, #85	; 0x55
   14572:	781b      	ldrb	r3, [r3, #0]
   14574:	2b00      	cmp	r3, #0
   14576:	d101      	bne.n	1457c <Radio_ResetClockInput+0x10>
   14578:	4b02      	ldr	r3, [pc, #8]	; (14584 <Radio_ResetClockInput+0x18>)
   1457a:	4798      	blx	r3
   1457c:	bd10      	pop	{r4, pc}
   1457e:	46c0      	nop			; (mov r8, r8)
   14580:	200029f8 	.word	0x200029f8
   14584:	000065a9 	.word	0x000065a9

00014588 <RADIO_InitDefaultAttributes>:
   14588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1458a:	2501      	movs	r5, #1
   1458c:	4b64      	ldr	r3, [pc, #400]	; (14720 <RADIO_InitDefaultAttributes+0x198>)
   1458e:	4c65      	ldr	r4, [pc, #404]	; (14724 <RADIO_InitDefaultAttributes+0x19c>)
   14590:	701d      	strb	r5, [r3, #0]
   14592:	4b65      	ldr	r3, [pc, #404]	; (14728 <RADIO_InitDefaultAttributes+0x1a0>)
   14594:	2207      	movs	r2, #7
   14596:	6023      	str	r3, [r4, #0]
   14598:	4b64      	ldr	r3, [pc, #400]	; (1472c <RADIO_InitDefaultAttributes+0x1a4>)
   1459a:	18a1      	adds	r1, r4, r2
   1459c:	6063      	str	r3, [r4, #4]
   1459e:	4b64      	ldr	r3, [pc, #400]	; (14730 <RADIO_InitDefaultAttributes+0x1a8>)
   145a0:	0027      	movs	r7, r4
   145a2:	60a3      	str	r3, [r4, #8]
   145a4:	0023      	movs	r3, r4
   145a6:	3334      	adds	r3, #52	; 0x34
   145a8:	701d      	strb	r5, [r3, #0]
   145aa:	0023      	movs	r3, r4
   145ac:	3336      	adds	r3, #54	; 0x36
   145ae:	701a      	strb	r2, [r3, #0]
   145b0:	1ce3      	adds	r3, r4, #3
   145b2:	77dd      	strb	r5, [r3, #31]
   145b4:	0023      	movs	r3, r4
   145b6:	3333      	adds	r3, #51	; 0x33
   145b8:	701d      	strb	r5, [r3, #0]
   145ba:	2300      	movs	r3, #0
   145bc:	77cb      	strb	r3, [r1, #31]
   145be:	2108      	movs	r1, #8
   145c0:	82a1      	strh	r1, [r4, #20]
   145c2:	0021      	movs	r1, r4
   145c4:	3135      	adds	r1, #53	; 0x35
   145c6:	700a      	strb	r2, [r1, #0]
   145c8:	1d22      	adds	r2, r4, #4
   145ca:	77d5      	strb	r5, [r2, #31]
   145cc:	1d62      	adds	r2, r4, #5
   145ce:	77d3      	strb	r3, [r2, #31]
   145d0:	1da2      	adds	r2, r4, #6
   145d2:	77d3      	strb	r3, [r2, #31]
   145d4:	2194      	movs	r1, #148	; 0x94
   145d6:	22c1      	movs	r2, #193	; 0xc1
   145d8:	76a1      	strb	r1, [r4, #26]
   145da:	7662      	strb	r2, [r4, #25]
   145dc:	76e2      	strb	r2, [r4, #27]
   145de:	3991      	subs	r1, #145	; 0x91
   145e0:	1ca2      	adds	r2, r4, #2
   145e2:	77d1      	strb	r1, [r2, #31]
   145e4:	2234      	movs	r2, #52	; 0x34
   145e6:	7622      	strb	r2, [r4, #24]
   145e8:	0022      	movs	r2, r4
   145ea:	317d      	adds	r1, #125	; 0x7d
   145ec:	3232      	adds	r2, #50	; 0x32
   145ee:	7011      	strb	r1, [r2, #0]
   145f0:	4a50      	ldr	r2, [pc, #320]	; (14734 <RADIO_InitDefaultAttributes+0x1ac>)
   145f2:	397e      	subs	r1, #126	; 0x7e
   145f4:	60e2      	str	r2, [r4, #12]
   145f6:	0022      	movs	r2, r4
   145f8:	3237      	adds	r2, #55	; 0x37
   145fa:	7011      	strb	r1, [r2, #0]
   145fc:	0022      	movs	r2, r4
   145fe:	3109      	adds	r1, #9
   14600:	3238      	adds	r2, #56	; 0x38
   14602:	7011      	strb	r1, [r2, #0]
   14604:	0022      	movs	r2, r4
   14606:	3107      	adds	r1, #7
   14608:	3239      	adds	r2, #57	; 0x39
   1460a:	7011      	strb	r1, [r2, #0]
   1460c:	0022      	movs	r2, r4
   1460e:	322c      	adds	r2, #44	; 0x2c
   14610:	7013      	strb	r3, [r2, #0]
   14612:	4a49      	ldr	r2, [pc, #292]	; (14738 <RADIO_InitDefaultAttributes+0x1b0>)
   14614:	82e3      	strh	r3, [r4, #22]
   14616:	62a2      	str	r2, [r4, #40]	; 0x28
   14618:	0022      	movs	r2, r4
   1461a:	324c      	adds	r2, #76	; 0x4c
   1461c:	8013      	strh	r3, [r2, #0]
   1461e:	0022      	movs	r2, r4
   14620:	324e      	adds	r2, #78	; 0x4e
   14622:	7013      	strb	r3, [r2, #0]
   14624:	0022      	movs	r2, r4
   14626:	324f      	adds	r2, #79	; 0x4f
   14628:	7013      	strb	r3, [r2, #0]
   1462a:	0022      	movs	r2, r4
   1462c:	3240      	adds	r2, #64	; 0x40
   1462e:	7013      	strb	r3, [r2, #0]
   14630:	0022      	movs	r2, r4
   14632:	3241      	adds	r2, #65	; 0x41
   14634:	7013      	strb	r3, [r2, #0]
   14636:	0022      	movs	r2, r4
   14638:	3254      	adds	r2, #84	; 0x54
   1463a:	7013      	strb	r3, [r2, #0]
   1463c:	0022      	movs	r2, r4
   1463e:	3255      	adds	r2, #85	; 0x55
   14640:	7015      	strb	r5, [r2, #0]
   14642:	0022      	movs	r2, r4
   14644:	3258      	adds	r2, #88	; 0x58
   14646:	6463      	str	r3, [r4, #68]	; 0x44
   14648:	64a3      	str	r3, [r4, #72]	; 0x48
   1464a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1464c:	87e3      	strh	r3, [r4, #62]	; 0x3e
   1464e:	7013      	strb	r3, [r2, #0]
   14650:	3730      	adds	r7, #48	; 0x30
   14652:	783b      	ldrb	r3, [r7, #0]
   14654:	2b00      	cmp	r3, #0
   14656:	d151      	bne.n	146fc <RADIO_InitDefaultAttributes+0x174>
   14658:	4838      	ldr	r0, [pc, #224]	; (1473c <RADIO_InitDefaultAttributes+0x1b4>)
   1465a:	4e39      	ldr	r6, [pc, #228]	; (14740 <RADIO_InitDefaultAttributes+0x1b8>)
   1465c:	47b0      	blx	r6
   1465e:	2808      	cmp	r0, #8
   14660:	d149      	bne.n	146f6 <RADIO_InitDefaultAttributes+0x16e>
   14662:	4838      	ldr	r0, [pc, #224]	; (14744 <RADIO_InitDefaultAttributes+0x1bc>)
   14664:	47b0      	blx	r6
   14666:	2808      	cmp	r0, #8
   14668:	d145      	bne.n	146f6 <RADIO_InitDefaultAttributes+0x16e>
   1466a:	4837      	ldr	r0, [pc, #220]	; (14748 <RADIO_InitDefaultAttributes+0x1c0>)
   1466c:	47b0      	blx	r6
   1466e:	2808      	cmp	r0, #8
   14670:	d141      	bne.n	146f6 <RADIO_InitDefaultAttributes+0x16e>
   14672:	4836      	ldr	r0, [pc, #216]	; (1474c <RADIO_InitDefaultAttributes+0x1c4>)
   14674:	47b0      	blx	r6
   14676:	2808      	cmp	r0, #8
   14678:	d13d      	bne.n	146f6 <RADIO_InitDefaultAttributes+0x16e>
   1467a:	703d      	strb	r5, [r7, #0]
   1467c:	4b34      	ldr	r3, [pc, #208]	; (14750 <RADIO_InitDefaultAttributes+0x1c8>)
   1467e:	4798      	blx	r3
   14680:	4b34      	ldr	r3, [pc, #208]	; (14754 <RADIO_InitDefaultAttributes+0x1cc>)
   14682:	4798      	blx	r3
   14684:	2800      	cmp	r0, #0
   14686:	d107      	bne.n	14698 <RADIO_InitDefaultAttributes+0x110>
   14688:	0023      	movs	r3, r4
   1468a:	3355      	adds	r3, #85	; 0x55
   1468c:	7018      	strb	r0, [r3, #0]
   1468e:	4b32      	ldr	r3, [pc, #200]	; (14758 <RADIO_InitDefaultAttributes+0x1d0>)
   14690:	4798      	blx	r3
   14692:	0023      	movs	r3, r4
   14694:	3354      	adds	r3, #84	; 0x54
   14696:	7018      	strb	r0, [r3, #0]
   14698:	4b30      	ldr	r3, [pc, #192]	; (1475c <RADIO_InitDefaultAttributes+0x1d4>)
   1469a:	4798      	blx	r3
   1469c:	2201      	movs	r2, #1
   1469e:	2100      	movs	r1, #0
   146a0:	0010      	movs	r0, r2
   146a2:	4f2f      	ldr	r7, [pc, #188]	; (14760 <RADIO_InitDefaultAttributes+0x1d8>)
   146a4:	47b8      	blx	r7
   146a6:	6820      	ldr	r0, [r4, #0]
   146a8:	4b2e      	ldr	r3, [pc, #184]	; (14764 <RADIO_InitDefaultAttributes+0x1dc>)
   146aa:	4798      	blx	r3
   146ac:	2142      	movs	r1, #66	; 0x42
   146ae:	203b      	movs	r0, #59	; 0x3b
   146b0:	4d2d      	ldr	r5, [pc, #180]	; (14768 <RADIO_InitDefaultAttributes+0x1e0>)
   146b2:	47a8      	blx	r5
   146b4:	203b      	movs	r0, #59	; 0x3b
   146b6:	4b2d      	ldr	r3, [pc, #180]	; (1476c <RADIO_InitDefaultAttributes+0x1e4>)
   146b8:	4798      	blx	r3
   146ba:	2620      	movs	r6, #32
   146bc:	4006      	ands	r6, r0
   146be:	d1f9      	bne.n	146b4 <RADIO_InitDefaultAttributes+0x12c>
   146c0:	2123      	movs	r1, #35	; 0x23
   146c2:	200c      	movs	r0, #12
   146c4:	47a8      	blx	r5
   146c6:	21aa      	movs	r1, #170	; 0xaa
   146c8:	201f      	movs	r0, #31
   146ca:	47a8      	blx	r5
   146cc:	21ff      	movs	r1, #255	; 0xff
   146ce:	2032      	movs	r0, #50	; 0x32
   146d0:	47a8      	blx	r5
   146d2:	2140      	movs	r1, #64	; 0x40
   146d4:	2031      	movs	r0, #49	; 0x31
   146d6:	47a8      	blx	r5
   146d8:	2201      	movs	r2, #1
   146da:	0030      	movs	r0, r6
   146dc:	0011      	movs	r1, r2
   146de:	47b8      	blx	r7
   146e0:	21ff      	movs	r1, #255	; 0xff
   146e2:	2023      	movs	r0, #35	; 0x23
   146e4:	47a8      	blx	r5
   146e6:	4b21      	ldr	r3, [pc, #132]	; (1476c <RADIO_InitDefaultAttributes+0x1e4>)
   146e8:	2042      	movs	r0, #66	; 0x42
   146ea:	4798      	blx	r3
   146ec:	3431      	adds	r4, #49	; 0x31
   146ee:	4b20      	ldr	r3, [pc, #128]	; (14770 <RADIO_InitDefaultAttributes+0x1e8>)
   146f0:	7020      	strb	r0, [r4, #0]
   146f2:	4798      	blx	r3
   146f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   146f6:	4b1f      	ldr	r3, [pc, #124]	; (14774 <RADIO_InitDefaultAttributes+0x1ec>)
   146f8:	4798      	blx	r3
   146fa:	e7bf      	b.n	1467c <RADIO_InitDefaultAttributes+0xf4>
   146fc:	0023      	movs	r3, r4
   146fe:	332d      	adds	r3, #45	; 0x2d
   14700:	4d1d      	ldr	r5, [pc, #116]	; (14778 <RADIO_InitDefaultAttributes+0x1f0>)
   14702:	7818      	ldrb	r0, [r3, #0]
   14704:	47a8      	blx	r5
   14706:	0023      	movs	r3, r4
   14708:	332e      	adds	r3, #46	; 0x2e
   1470a:	7818      	ldrb	r0, [r3, #0]
   1470c:	47a8      	blx	r5
   1470e:	0023      	movs	r3, r4
   14710:	332f      	adds	r3, #47	; 0x2f
   14712:	7818      	ldrb	r0, [r3, #0]
   14714:	47a8      	blx	r5
   14716:	0023      	movs	r3, r4
   14718:	3350      	adds	r3, #80	; 0x50
   1471a:	7818      	ldrb	r0, [r3, #0]
   1471c:	47a8      	blx	r5
   1471e:	e7ad      	b.n	1467c <RADIO_InitDefaultAttributes+0xf4>
   14720:	2000304b 	.word	0x2000304b
   14724:	200029f8 	.word	0x200029f8
   14728:	33be27a0 	.word	0x33be27a0
   1472c:	000061a8 	.word	0x000061a8
   14730:	0000c350 	.word	0x0000c350
   14734:	00003a98 	.word	0x00003a98
   14738:	20002f48 	.word	0x20002f48
   1473c:	20002a25 	.word	0x20002a25
   14740:	0000d549 	.word	0x0000d549
   14744:	20002a26 	.word	0x20002a26
   14748:	20002a27 	.word	0x20002a27
   1474c:	20002a48 	.word	0x20002a48
   14750:	00006405 	.word	0x00006405
   14754:	00006589 	.word	0x00006589
   14758:	00006585 	.word	0x00006585
   1475c:	00014539 	.word	0x00014539
   14760:	0000dc49 	.word	0x0000dc49
   14764:	000137cd 	.word	0x000137cd
   14768:	00006445 	.word	0x00006445
   1476c:	0000646d 	.word	0x0000646d
   14770:	0001456d 	.word	0x0001456d
   14774:	0000d48d 	.word	0x0000d48d
   14778:	0000d895 	.word	0x0000d895

0001477c <RADIO_Receive>:
   1477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1477e:	7803      	ldrb	r3, [r0, #0]
   14780:	0006      	movs	r6, r0
   14782:	4d24      	ldr	r5, [pc, #144]	; (14814 <RADIO_Receive+0x98>)
   14784:	2b00      	cmp	r3, #0
   14786:	d11d      	bne.n	147c4 <RADIO_Receive+0x48>
   14788:	782b      	ldrb	r3, [r5, #0]
   1478a:	2004      	movs	r0, #4
   1478c:	2b01      	cmp	r3, #1
   1478e:	d118      	bne.n	147c2 <RADIO_Receive+0x46>
   14790:	4c21      	ldr	r4, [pc, #132]	; (14818 <RADIO_Receive+0x9c>)
   14792:	4f22      	ldr	r7, [pc, #136]	; (1481c <RADIO_Receive+0xa0>)
   14794:	0023      	movs	r3, r4
   14796:	332f      	adds	r3, #47	; 0x2f
   14798:	7818      	ldrb	r0, [r3, #0]
   1479a:	47b8      	blx	r7
   1479c:	0023      	movs	r3, r4
   1479e:	3334      	adds	r3, #52	; 0x34
   147a0:	781b      	ldrb	r3, [r3, #0]
   147a2:	2b00      	cmp	r3, #0
   147a4:	d102      	bne.n	147ac <RADIO_Receive+0x30>
   147a6:	342e      	adds	r4, #46	; 0x2e
   147a8:	7820      	ldrb	r0, [r4, #0]
   147aa:	47b8      	blx	r7
   147ac:	8872      	ldrh	r2, [r6, #2]
   147ae:	4b1c      	ldr	r3, [pc, #112]	; (14820 <RADIO_Receive+0xa4>)
   147b0:	2008      	movs	r0, #8
   147b2:	801a      	strh	r2, [r3, #0]
   147b4:	2304      	movs	r3, #4
   147b6:	702b      	strb	r3, [r5, #0]
   147b8:	4b1a      	ldr	r3, [pc, #104]	; (14824 <RADIO_Receive+0xa8>)
   147ba:	4798      	blx	r3
   147bc:	4b1a      	ldr	r3, [pc, #104]	; (14828 <RADIO_Receive+0xac>)
   147be:	4798      	blx	r3
   147c0:	2000      	movs	r0, #0
   147c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147c4:	782b      	ldrb	r3, [r5, #0]
   147c6:	2000      	movs	r0, #0
   147c8:	2b01      	cmp	r3, #1
   147ca:	d0fa      	beq.n	147c2 <RADIO_Receive+0x46>
   147cc:	782b      	ldrb	r3, [r5, #0]
   147ce:	3003      	adds	r0, #3
   147d0:	2b04      	cmp	r3, #4
   147d2:	d1f6      	bne.n	147c2 <RADIO_Receive+0x46>
   147d4:	4c10      	ldr	r4, [pc, #64]	; (14818 <RADIO_Receive+0x9c>)
   147d6:	4e11      	ldr	r6, [pc, #68]	; (1481c <RADIO_Receive+0xa0>)
   147d8:	0023      	movs	r3, r4
   147da:	332f      	adds	r3, #47	; 0x2f
   147dc:	7818      	ldrb	r0, [r3, #0]
   147de:	47b0      	blx	r6
   147e0:	0023      	movs	r3, r4
   147e2:	3334      	adds	r3, #52	; 0x34
   147e4:	781b      	ldrb	r3, [r3, #0]
   147e6:	2b00      	cmp	r3, #0
   147e8:	d103      	bne.n	147f2 <RADIO_Receive+0x76>
   147ea:	0023      	movs	r3, r4
   147ec:	332e      	adds	r3, #46	; 0x2e
   147ee:	7818      	ldrb	r0, [r3, #0]
   147f0:	47b0      	blx	r6
   147f2:	2200      	movs	r2, #0
   147f4:	3434      	adds	r4, #52	; 0x34
   147f6:	7821      	ldrb	r1, [r4, #0]
   147f8:	0010      	movs	r0, r2
   147fa:	4b0c      	ldr	r3, [pc, #48]	; (1482c <RADIO_Receive+0xb0>)
   147fc:	4798      	blx	r3
   147fe:	4b0c      	ldr	r3, [pc, #48]	; (14830 <RADIO_Receive+0xb4>)
   14800:	4798      	blx	r3
   14802:	2301      	movs	r3, #1
   14804:	2008      	movs	r0, #8
   14806:	4c0b      	ldr	r4, [pc, #44]	; (14834 <RADIO_Receive+0xb8>)
   14808:	702b      	strb	r3, [r5, #0]
   1480a:	47a0      	blx	r4
   1480c:	2002      	movs	r0, #2
   1480e:	47a0      	blx	r4
   14810:	e7d6      	b.n	147c0 <RADIO_Receive+0x44>
   14812:	46c0      	nop			; (mov r8, r8)
   14814:	2000304b 	.word	0x2000304b
   14818:	200029f8 	.word	0x200029f8
   1481c:	0000d895 	.word	0x0000d895
   14820:	20000f66 	.word	0x20000f66
   14824:	00013dd5 	.word	0x00013dd5
   14828:	00014539 	.word	0x00014539
   1482c:	0000dc49 	.word	0x0000dc49
   14830:	0001456d 	.word	0x0001456d
   14834:	00013e01 	.word	0x00013e01

00014838 <RADIO_TxHandler>:
   14838:	b5f0      	push	{r4, r5, r6, r7, lr}
   1483a:	4e56      	ldr	r6, [pc, #344]	; (14994 <RADIO_TxHandler+0x15c>)
   1483c:	b087      	sub	sp, #28
   1483e:	47b0      	blx	r6
   14840:	4c55      	ldr	r4, [pc, #340]	; (14998 <RADIO_TxHandler+0x160>)
   14842:	0023      	movs	r3, r4
   14844:	332d      	adds	r3, #45	; 0x2d
   14846:	7818      	ldrb	r0, [r3, #0]
   14848:	4b54      	ldr	r3, [pc, #336]	; (1499c <RADIO_TxHandler+0x164>)
   1484a:	4798      	blx	r3
   1484c:	0023      	movs	r3, r4
   1484e:	3341      	adds	r3, #65	; 0x41
   14850:	781b      	ldrb	r3, [r3, #0]
   14852:	4d53      	ldr	r5, [pc, #332]	; (149a0 <RADIO_TxHandler+0x168>)
   14854:	2b00      	cmp	r3, #0
   14856:	d022      	beq.n	1489e <RADIO_TxHandler+0x66>
   14858:	2214      	movs	r2, #20
   1485a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   1485c:	4353      	muls	r3, r2
   1485e:	0022      	movs	r2, r4
   14860:	3240      	adds	r2, #64	; 0x40
   14862:	7013      	strb	r3, [r2, #0]
   14864:	47b0      	blx	r6
   14866:	2000      	movs	r0, #0
   14868:	4b4e      	ldr	r3, [pc, #312]	; (149a4 <RADIO_TxHandler+0x16c>)
   1486a:	4798      	blx	r3
   1486c:	6820      	ldr	r0, [r4, #0]
   1486e:	4b4e      	ldr	r3, [pc, #312]	; (149a8 <RADIO_TxHandler+0x170>)
   14870:	4798      	blx	r3
   14872:	0023      	movs	r3, r4
   14874:	2600      	movs	r6, #0
   14876:	334c      	adds	r3, #76	; 0x4c
   14878:	2201      	movs	r2, #1
   1487a:	801e      	strh	r6, [r3, #0]
   1487c:	0031      	movs	r1, r6
   1487e:	4b4b      	ldr	r3, [pc, #300]	; (149ac <RADIO_TxHandler+0x174>)
   14880:	0030      	movs	r0, r6
   14882:	4798      	blx	r3
   14884:	2109      	movs	r1, #9
   14886:	2012      	movs	r0, #18
   14888:	47a8      	blx	r5
   1488a:	2201      	movs	r2, #1
   1488c:	0031      	movs	r1, r6
   1488e:	2005      	movs	r0, #5
   14890:	4b46      	ldr	r3, [pc, #280]	; (149ac <RADIO_TxHandler+0x174>)
   14892:	4798      	blx	r3
   14894:	0023      	movs	r3, r4
   14896:	3340      	adds	r3, #64	; 0x40
   14898:	781b      	ldrb	r3, [r3, #0]
   1489a:	42b3      	cmp	r3, r6
   1489c:	d844      	bhi.n	14928 <RADIO_TxHandler+0xf0>
   1489e:	2001      	movs	r0, #1
   148a0:	4b40      	ldr	r3, [pc, #256]	; (149a4 <RADIO_TxHandler+0x16c>)
   148a2:	4798      	blx	r3
   148a4:	4b42      	ldr	r3, [pc, #264]	; (149b0 <RADIO_TxHandler+0x178>)
   148a6:	2004      	movs	r0, #4
   148a8:	4798      	blx	r3
   148aa:	4b42      	ldr	r3, [pc, #264]	; (149b4 <RADIO_TxHandler+0x17c>)
   148ac:	4e42      	ldr	r6, [pc, #264]	; (149b8 <RADIO_TxHandler+0x180>)
   148ae:	781f      	ldrb	r7, [r3, #0]
   148b0:	2f01      	cmp	r7, #1
   148b2:	d146      	bne.n	14942 <RADIO_TxHandler+0x10a>
   148b4:	7831      	ldrb	r1, [r6, #0]
   148b6:	2022      	movs	r0, #34	; 0x22
   148b8:	47a8      	blx	r5
   148ba:	4b40      	ldr	r3, [pc, #256]	; (149bc <RADIO_TxHandler+0x184>)
   148bc:	200a      	movs	r0, #10
   148be:	4798      	blx	r3
   148c0:	21f0      	movs	r1, #240	; 0xf0
   148c2:	4008      	ands	r0, r1
   148c4:	39e8      	subs	r1, #232	; 0xe8
   148c6:	4301      	orrs	r1, r0
   148c8:	200a      	movs	r0, #10
   148ca:	47a8      	blx	r5
   148cc:	2140      	movs	r1, #64	; 0x40
   148ce:	0008      	movs	r0, r1
   148d0:	47a8      	blx	r5
   148d2:	2100      	movs	r1, #0
   148d4:	2041      	movs	r0, #65	; 0x41
   148d6:	47a8      	blx	r5
   148d8:	4b36      	ldr	r3, [pc, #216]	; (149b4 <RADIO_TxHandler+0x17c>)
   148da:	003a      	movs	r2, r7
   148dc:	7819      	ldrb	r1, [r3, #0]
   148de:	0038      	movs	r0, r7
   148e0:	4b32      	ldr	r3, [pc, #200]	; (149ac <RADIO_TxHandler+0x174>)
   148e2:	4798      	blx	r3
   148e4:	4b36      	ldr	r3, [pc, #216]	; (149c0 <RADIO_TxHandler+0x188>)
   148e6:	7832      	ldrb	r2, [r6, #0]
   148e8:	6819      	ldr	r1, [r3, #0]
   148ea:	2000      	movs	r0, #0
   148ec:	4b35      	ldr	r3, [pc, #212]	; (149c4 <RADIO_TxHandler+0x18c>)
   148ee:	4798      	blx	r3
   148f0:	0023      	movs	r3, r4
   148f2:	3334      	adds	r3, #52	; 0x34
   148f4:	7819      	ldrb	r1, [r3, #0]
   148f6:	2200      	movs	r2, #0
   148f8:	2003      	movs	r0, #3
   148fa:	4b2c      	ldr	r3, [pc, #176]	; (149ac <RADIO_TxHandler+0x174>)
   148fc:	4798      	blx	r3
   148fe:	4b32      	ldr	r3, [pc, #200]	; (149c8 <RADIO_TxHandler+0x190>)
   14900:	4798      	blx	r3
   14902:	4b32      	ldr	r3, [pc, #200]	; (149cc <RADIO_TxHandler+0x194>)
   14904:	6018      	str	r0, [r3, #0]
   14906:	6059      	str	r1, [r3, #4]
   14908:	68e3      	ldr	r3, [r4, #12]
   1490a:	2b00      	cmp	r3, #0
   1490c:	d009      	beq.n	14922 <RADIO_TxHandler+0xea>
   1490e:	21fa      	movs	r1, #250	; 0xfa
   14910:	2200      	movs	r2, #0
   14912:	342f      	adds	r4, #47	; 0x2f
   14914:	0089      	lsls	r1, r1, #2
   14916:	7820      	ldrb	r0, [r4, #0]
   14918:	4359      	muls	r1, r3
   1491a:	9200      	str	r2, [sp, #0]
   1491c:	4b2c      	ldr	r3, [pc, #176]	; (149d0 <RADIO_TxHandler+0x198>)
   1491e:	4c2d      	ldr	r4, [pc, #180]	; (149d4 <RADIO_TxHandler+0x19c>)
   14920:	47a0      	blx	r4
   14922:	2000      	movs	r0, #0
   14924:	b007      	add	sp, #28
   14926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14928:	4f2b      	ldr	r7, [pc, #172]	; (149d8 <RADIO_TxHandler+0x1a0>)
   1492a:	4b2c      	ldr	r3, [pc, #176]	; (149dc <RADIO_TxHandler+0x1a4>)
   1492c:	0038      	movs	r0, r7
   1492e:	4798      	blx	r3
   14930:	233e      	movs	r3, #62	; 0x3e
   14932:	5ee2      	ldrsh	r2, [r4, r3]
   14934:	2100      	movs	r1, #0
   14936:	5e7b      	ldrsh	r3, [r7, r1]
   14938:	429a      	cmp	r2, r3
   1493a:	db14      	blt.n	14966 <RADIO_TxHandler+0x12e>
   1493c:	3601      	adds	r6, #1
   1493e:	b2f6      	uxtb	r6, r6
   14940:	e7a8      	b.n	14894 <RADIO_TxHandler+0x5c>
   14942:	2100      	movs	r1, #0
   14944:	2040      	movs	r0, #64	; 0x40
   14946:	47a8      	blx	r5
   14948:	2100      	movs	r1, #0
   1494a:	2041      	movs	r0, #65	; 0x41
   1494c:	47a8      	blx	r5
   1494e:	0023      	movs	r3, r4
   14950:	2000      	movs	r0, #0
   14952:	3358      	adds	r3, #88	; 0x58
   14954:	7831      	ldrb	r1, [r6, #0]
   14956:	7018      	strb	r0, [r3, #0]
   14958:	47a8      	blx	r5
   1495a:	4b19      	ldr	r3, [pc, #100]	; (149c0 <RADIO_TxHandler+0x188>)
   1495c:	7831      	ldrb	r1, [r6, #0]
   1495e:	6818      	ldr	r0, [r3, #0]
   14960:	4b1f      	ldr	r3, [pc, #124]	; (149e0 <RADIO_TxHandler+0x1a8>)
   14962:	4798      	blx	r3
   14964:	e7c4      	b.n	148f0 <RADIO_TxHandler+0xb8>
   14966:	2000      	movs	r0, #0
   14968:	4b1e      	ldr	r3, [pc, #120]	; (149e4 <RADIO_TxHandler+0x1ac>)
   1496a:	4798      	blx	r3
   1496c:	4b1e      	ldr	r3, [pc, #120]	; (149e8 <RADIO_TxHandler+0x1b0>)
   1496e:	4798      	blx	r3
   14970:	2307      	movs	r3, #7
   14972:	2201      	movs	r2, #1
   14974:	a903      	add	r1, sp, #12
   14976:	700b      	strb	r3, [r1, #0]
   14978:	4b1c      	ldr	r3, [pc, #112]	; (149ec <RADIO_TxHandler+0x1b4>)
   1497a:	701a      	strb	r2, [r3, #0]
   1497c:	4b1c      	ldr	r3, [pc, #112]	; (149f0 <RADIO_TxHandler+0x1b8>)
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	079b      	lsls	r3, r3, #30
   14982:	d400      	bmi.n	14986 <RADIO_TxHandler+0x14e>
   14984:	e78b      	b.n	1489e <RADIO_TxHandler+0x66>
   14986:	6923      	ldr	r3, [r4, #16]
   14988:	2b00      	cmp	r3, #0
   1498a:	d100      	bne.n	1498e <RADIO_TxHandler+0x156>
   1498c:	e787      	b.n	1489e <RADIO_TxHandler+0x66>
   1498e:	2002      	movs	r0, #2
   14990:	4798      	blx	r3
   14992:	e784      	b.n	1489e <RADIO_TxHandler+0x66>
   14994:	00014539 	.word	0x00014539
   14998:	200029f8 	.word	0x200029f8
   1499c:	0000d895 	.word	0x0000d895
   149a0:	00006445 	.word	0x00006445
   149a4:	00014089 	.word	0x00014089
   149a8:	000137cd 	.word	0x000137cd
   149ac:	0000dc49 	.word	0x0000dc49
   149b0:	00013815 	.word	0x00013815
   149b4:	20002a2c 	.word	0x20002a2c
   149b8:	20000f74 	.word	0x20000f74
   149bc:	0000646d 	.word	0x0000646d
   149c0:	20000f70 	.word	0x20000f70
   149c4:	00006499 	.word	0x00006499
   149c8:	0000d525 	.word	0x0000d525
   149cc:	20000f68 	.word	0x20000f68
   149d0:	000141e5 	.word	0x000141e5
   149d4:	0000d57d 	.word	0x0000d57d
   149d8:	20000f64 	.word	0x20000f64
   149dc:	0000de0d 	.word	0x0000de0d
   149e0:	00013f05 	.word	0x00013f05
   149e4:	000141b1 	.word	0x000141b1
   149e8:	0001456d 	.word	0x0001456d
   149ec:	2000304b 	.word	0x2000304b
   149f0:	2000304a 	.word	0x2000304a

000149f4 <RADIO_TxDoneHandler>:
   149f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   149f6:	4b35      	ldr	r3, [pc, #212]	; (14acc <RADIO_TxDoneHandler+0xd8>)
   149f8:	b087      	sub	sp, #28
   149fa:	881a      	ldrh	r2, [r3, #0]
   149fc:	06d2      	lsls	r2, r2, #27
   149fe:	0fd2      	lsrs	r2, r2, #31
   14a00:	9200      	str	r2, [sp, #0]
   14a02:	466a      	mov	r2, sp
   14a04:	7810      	ldrb	r0, [r2, #0]
   14a06:	881a      	ldrh	r2, [r3, #0]
   14a08:	2801      	cmp	r0, #1
   14a0a:	d12b      	bne.n	14a64 <RADIO_TxDoneHandler+0x70>
   14a0c:	4c30      	ldr	r4, [pc, #192]	; (14ad0 <RADIO_TxDoneHandler+0xdc>)
   14a0e:	2110      	movs	r1, #16
   14a10:	0027      	movs	r7, r4
   14a12:	2500      	movs	r5, #0
   14a14:	438a      	bics	r2, r1
   14a16:	801a      	strh	r2, [r3, #0]
   14a18:	3734      	adds	r7, #52	; 0x34
   14a1a:	0002      	movs	r2, r0
   14a1c:	7839      	ldrb	r1, [r7, #0]
   14a1e:	4b2d      	ldr	r3, [pc, #180]	; (14ad4 <RADIO_TxDoneHandler+0xe0>)
   14a20:	4798      	blx	r3
   14a22:	68e3      	ldr	r3, [r4, #12]
   14a24:	ae03      	add	r6, sp, #12
   14a26:	9304      	str	r3, [sp, #16]
   14a28:	7035      	strb	r5, [r6, #0]
   14a2a:	002a      	movs	r2, r5
   14a2c:	4b29      	ldr	r3, [pc, #164]	; (14ad4 <RADIO_TxDoneHandler+0xe0>)
   14a2e:	7839      	ldrb	r1, [r7, #0]
   14a30:	0028      	movs	r0, r5
   14a32:	4798      	blx	r3
   14a34:	466a      	mov	r2, sp
   14a36:	4b28      	ldr	r3, [pc, #160]	; (14ad8 <RADIO_TxDoneHandler+0xe4>)
   14a38:	7812      	ldrb	r2, [r2, #0]
   14a3a:	701a      	strb	r2, [r3, #0]
   14a3c:	0023      	movs	r3, r4
   14a3e:	3358      	adds	r3, #88	; 0x58
   14a40:	701d      	strb	r5, [r3, #0]
   14a42:	4b26      	ldr	r3, [pc, #152]	; (14adc <RADIO_TxDoneHandler+0xe8>)
   14a44:	781b      	ldrb	r3, [r3, #0]
   14a46:	075b      	lsls	r3, r3, #29
   14a48:	d505      	bpl.n	14a56 <RADIO_TxDoneHandler+0x62>
   14a4a:	6923      	ldr	r3, [r4, #16]
   14a4c:	42ab      	cmp	r3, r5
   14a4e:	d002      	beq.n	14a56 <RADIO_TxDoneHandler+0x62>
   14a50:	0031      	movs	r1, r6
   14a52:	2004      	movs	r0, #4
   14a54:	4798      	blx	r3
   14a56:	4b22      	ldr	r3, [pc, #136]	; (14ae0 <RADIO_TxDoneHandler+0xec>)
   14a58:	4798      	blx	r3
   14a5a:	4b22      	ldr	r3, [pc, #136]	; (14ae4 <RADIO_TxDoneHandler+0xf0>)
   14a5c:	4798      	blx	r3
   14a5e:	2000      	movs	r0, #0
   14a60:	b007      	add	sp, #28
   14a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a64:	07d2      	lsls	r2, r2, #31
   14a66:	d402      	bmi.n	14a6e <RADIO_TxDoneHandler+0x7a>
   14a68:	881a      	ldrh	r2, [r3, #0]
   14a6a:	0752      	lsls	r2, r2, #29
   14a6c:	d527      	bpl.n	14abe <RADIO_TxDoneHandler+0xca>
   14a6e:	2601      	movs	r6, #1
   14a70:	2104      	movs	r1, #4
   14a72:	881a      	ldrh	r2, [r3, #0]
   14a74:	4f16      	ldr	r7, [pc, #88]	; (14ad0 <RADIO_TxDoneHandler+0xdc>)
   14a76:	43b2      	bics	r2, r6
   14a78:	801a      	strh	r2, [r3, #0]
   14a7a:	881a      	ldrh	r2, [r3, #0]
   14a7c:	2400      	movs	r4, #0
   14a7e:	438a      	bics	r2, r1
   14a80:	801a      	strh	r2, [r3, #0]
   14a82:	4b19      	ldr	r3, [pc, #100]	; (14ae8 <RADIO_TxDoneHandler+0xf4>)
   14a84:	ad03      	add	r5, sp, #12
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	702c      	strb	r4, [r5, #0]
   14a8a:	9304      	str	r3, [sp, #16]
   14a8c:	003b      	movs	r3, r7
   14a8e:	3334      	adds	r3, #52	; 0x34
   14a90:	7819      	ldrb	r1, [r3, #0]
   14a92:	0022      	movs	r2, r4
   14a94:	0020      	movs	r0, r4
   14a96:	4b0f      	ldr	r3, [pc, #60]	; (14ad4 <RADIO_TxDoneHandler+0xe0>)
   14a98:	4798      	blx	r3
   14a9a:	4b14      	ldr	r3, [pc, #80]	; (14aec <RADIO_TxDoneHandler+0xf8>)
   14a9c:	4798      	blx	r3
   14a9e:	4b0e      	ldr	r3, [pc, #56]	; (14ad8 <RADIO_TxDoneHandler+0xe4>)
   14aa0:	701e      	strb	r6, [r3, #0]
   14aa2:	003b      	movs	r3, r7
   14aa4:	3358      	adds	r3, #88	; 0x58
   14aa6:	701c      	strb	r4, [r3, #0]
   14aa8:	4b0c      	ldr	r3, [pc, #48]	; (14adc <RADIO_TxDoneHandler+0xe8>)
   14aaa:	781b      	ldrb	r3, [r3, #0]
   14aac:	079b      	lsls	r3, r3, #30
   14aae:	d5d6      	bpl.n	14a5e <RADIO_TxDoneHandler+0x6a>
   14ab0:	693b      	ldr	r3, [r7, #16]
   14ab2:	42a3      	cmp	r3, r4
   14ab4:	d0d3      	beq.n	14a5e <RADIO_TxDoneHandler+0x6a>
   14ab6:	0029      	movs	r1, r5
   14ab8:	2002      	movs	r0, #2
   14aba:	4798      	blx	r3
   14abc:	e7cf      	b.n	14a5e <RADIO_TxDoneHandler+0x6a>
   14abe:	881b      	ldrh	r3, [r3, #0]
   14ac0:	059b      	lsls	r3, r3, #22
   14ac2:	d5cc      	bpl.n	14a5e <RADIO_TxDoneHandler+0x6a>
   14ac4:	4b0a      	ldr	r3, [pc, #40]	; (14af0 <RADIO_TxDoneHandler+0xfc>)
   14ac6:	4798      	blx	r3
   14ac8:	e7c9      	b.n	14a5e <RADIO_TxDoneHandler+0x6a>
   14aca:	46c0      	nop			; (mov r8, r8)
   14acc:	20003048 	.word	0x20003048
   14ad0:	200029f8 	.word	0x200029f8
   14ad4:	0000dc49 	.word	0x0000dc49
   14ad8:	2000304b 	.word	0x2000304b
   14adc:	2000304a 	.word	0x2000304a
   14ae0:	00006405 	.word	0x00006405
   14ae4:	00014589 	.word	0x00014589
   14ae8:	20000f68 	.word	0x20000f68
   14aec:	0001456d 	.word	0x0001456d
   14af0:	00014e8d 	.word	0x00014e8d

00014af4 <RADIO_RxDoneHandler>:
   14af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14af6:	4b97      	ldr	r3, [pc, #604]	; (14d54 <RADIO_RxDoneHandler+0x260>)
   14af8:	b085      	sub	sp, #20
   14afa:	881c      	ldrh	r4, [r3, #0]
   14afc:	881a      	ldrh	r2, [r3, #0]
   14afe:	06a4      	lsls	r4, r4, #26
   14b00:	0fe4      	lsrs	r4, r4, #31
   14b02:	b2e0      	uxtb	r0, r4
   14b04:	2801      	cmp	r0, #1
   14b06:	d126      	bne.n	14b56 <RADIO_RxDoneHandler+0x62>
   14b08:	4d93      	ldr	r5, [pc, #588]	; (14d58 <RADIO_RxDoneHandler+0x264>)
   14b0a:	2120      	movs	r1, #32
   14b0c:	002e      	movs	r6, r5
   14b0e:	438a      	bics	r2, r1
   14b10:	801a      	strh	r2, [r3, #0]
   14b12:	3634      	adds	r6, #52	; 0x34
   14b14:	0002      	movs	r2, r0
   14b16:	7831      	ldrb	r1, [r6, #0]
   14b18:	4f90      	ldr	r7, [pc, #576]	; (14d5c <RADIO_RxDoneHandler+0x268>)
   14b1a:	47b8      	blx	r7
   14b1c:	2200      	movs	r2, #0
   14b1e:	7831      	ldrb	r1, [r6, #0]
   14b20:	0010      	movs	r0, r2
   14b22:	47b8      	blx	r7
   14b24:	4b8e      	ldr	r3, [pc, #568]	; (14d60 <RADIO_RxDoneHandler+0x26c>)
   14b26:	4798      	blx	r3
   14b28:	4b8e      	ldr	r3, [pc, #568]	; (14d64 <RADIO_RxDoneHandler+0x270>)
   14b2a:	002a      	movs	r2, r5
   14b2c:	701c      	strb	r4, [r3, #0]
   14b2e:	2300      	movs	r3, #0
   14b30:	322c      	adds	r2, #44	; 0x2c
   14b32:	7013      	strb	r3, [r2, #0]
   14b34:	002a      	movs	r2, r5
   14b36:	a901      	add	r1, sp, #4
   14b38:	3258      	adds	r2, #88	; 0x58
   14b3a:	7013      	strb	r3, [r2, #0]
   14b3c:	700b      	strb	r3, [r1, #0]
   14b3e:	4b8a      	ldr	r3, [pc, #552]	; (14d68 <RADIO_RxDoneHandler+0x274>)
   14b40:	781b      	ldrb	r3, [r3, #0]
   14b42:	071b      	lsls	r3, r3, #28
   14b44:	d504      	bpl.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14b46:	692b      	ldr	r3, [r5, #16]
   14b48:	2008      	movs	r0, #8
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d000      	beq.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14b4e:	e084      	b.n	14c5a <RADIO_RxDoneHandler+0x166>
   14b50:	2000      	movs	r0, #0
   14b52:	b005      	add	sp, #20
   14b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b56:	0652      	lsls	r2, r2, #25
   14b58:	d402      	bmi.n	14b60 <RADIO_RxDoneHandler+0x6c>
   14b5a:	881a      	ldrh	r2, [r3, #0]
   14b5c:	0612      	lsls	r2, r2, #24
   14b5e:	d523      	bpl.n	14ba8 <RADIO_RxDoneHandler+0xb4>
   14b60:	2140      	movs	r1, #64	; 0x40
   14b62:	881a      	ldrh	r2, [r3, #0]
   14b64:	4c7c      	ldr	r4, [pc, #496]	; (14d58 <RADIO_RxDoneHandler+0x264>)
   14b66:	438a      	bics	r2, r1
   14b68:	801a      	strh	r2, [r3, #0]
   14b6a:	881a      	ldrh	r2, [r3, #0]
   14b6c:	1849      	adds	r1, r1, r1
   14b6e:	438a      	bics	r2, r1
   14b70:	801a      	strh	r2, [r3, #0]
   14b72:	0023      	movs	r3, r4
   14b74:	2200      	movs	r2, #0
   14b76:	3334      	adds	r3, #52	; 0x34
   14b78:	7819      	ldrb	r1, [r3, #0]
   14b7a:	0010      	movs	r0, r2
   14b7c:	4b77      	ldr	r3, [pc, #476]	; (14d5c <RADIO_RxDoneHandler+0x268>)
   14b7e:	4798      	blx	r3
   14b80:	4b77      	ldr	r3, [pc, #476]	; (14d60 <RADIO_RxDoneHandler+0x26c>)
   14b82:	4798      	blx	r3
   14b84:	2201      	movs	r2, #1
   14b86:	4b77      	ldr	r3, [pc, #476]	; (14d64 <RADIO_RxDoneHandler+0x270>)
   14b88:	a901      	add	r1, sp, #4
   14b8a:	701a      	strb	r2, [r3, #0]
   14b8c:	0022      	movs	r2, r4
   14b8e:	2300      	movs	r3, #0
   14b90:	322c      	adds	r2, #44	; 0x2c
   14b92:	7013      	strb	r3, [r2, #0]
   14b94:	0022      	movs	r2, r4
   14b96:	3258      	adds	r2, #88	; 0x58
   14b98:	7013      	strb	r3, [r2, #0]
   14b9a:	700b      	strb	r3, [r1, #0]
   14b9c:	4b72      	ldr	r3, [pc, #456]	; (14d68 <RADIO_RxDoneHandler+0x274>)
   14b9e:	781b      	ldrb	r3, [r3, #0]
   14ba0:	071b      	lsls	r3, r3, #28
   14ba2:	d5d5      	bpl.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14ba4:	6923      	ldr	r3, [r4, #16]
   14ba6:	e7cf      	b.n	14b48 <RADIO_RxDoneHandler+0x54>
   14ba8:	881a      	ldrh	r2, [r3, #0]
   14baa:	0792      	lsls	r2, r2, #30
   14bac:	d571      	bpl.n	14c92 <RADIO_RxDoneHandler+0x19e>
   14bae:	2102      	movs	r1, #2
   14bb0:	881a      	ldrh	r2, [r3, #0]
   14bb2:	4d6e      	ldr	r5, [pc, #440]	; (14d6c <RADIO_RxDoneHandler+0x278>)
   14bb4:	438a      	bics	r2, r1
   14bb6:	801a      	strh	r2, [r3, #0]
   14bb8:	2013      	movs	r0, #19
   14bba:	47a8      	blx	r5
   14bbc:	4c66      	ldr	r4, [pc, #408]	; (14d58 <RADIO_RxDoneHandler+0x264>)
   14bbe:	2100      	movs	r1, #0
   14bc0:	0026      	movs	r6, r4
   14bc2:	362c      	adds	r6, #44	; 0x2c
   14bc4:	7030      	strb	r0, [r6, #0]
   14bc6:	4b6a      	ldr	r3, [pc, #424]	; (14d70 <RADIO_RxDoneHandler+0x27c>)
   14bc8:	200d      	movs	r0, #13
   14bca:	4798      	blx	r3
   14bcc:	7832      	ldrb	r2, [r6, #0]
   14bce:	4b69      	ldr	r3, [pc, #420]	; (14d74 <RADIO_RxDoneHandler+0x280>)
   14bd0:	b2d2      	uxtb	r2, r2
   14bd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14bd4:	2000      	movs	r0, #0
   14bd6:	4798      	blx	r3
   14bd8:	2019      	movs	r0, #25
   14bda:	47a8      	blx	r5
   14bdc:	0023      	movs	r3, r4
   14bde:	b240      	sxtb	r0, r0
   14be0:	3332      	adds	r3, #50	; 0x32
   14be2:	2800      	cmp	r0, #0
   14be4:	da3b      	bge.n	14c5e <RADIO_RxDoneHandler+0x16a>
   14be6:	4240      	negs	r0, r0
   14be8:	1080      	asrs	r0, r0, #2
   14bea:	4240      	negs	r0, r0
   14bec:	7018      	strb	r0, [r3, #0]
   14bee:	201a      	movs	r0, #26
   14bf0:	47a8      	blx	r5
   14bf2:	0023      	movs	r3, r4
   14bf4:	3332      	adds	r3, #50	; 0x32
   14bf6:	781b      	ldrb	r3, [r3, #0]
   14bf8:	b202      	sxth	r2, r0
   14bfa:	b25b      	sxtb	r3, r3
   14bfc:	4d5e      	ldr	r5, [pc, #376]	; (14d78 <RADIO_RxDoneHandler+0x284>)
   14bfe:	2b00      	cmp	r3, #0
   14c00:	da36      	bge.n	14c70 <RADIO_RxDoneHandler+0x17c>
   14c02:	6821      	ldr	r1, [r4, #0]
   14c04:	4e5d      	ldr	r6, [pc, #372]	; (14d7c <RADIO_RxDoneHandler+0x288>)
   14c06:	198e      	adds	r6, r1, r6
   14c08:	42ae      	cmp	r6, r5
   14c0a:	d82a      	bhi.n	14c62 <RADIO_RxDoneHandler+0x16e>
   14c0c:	3b9d      	subs	r3, #157	; 0x9d
   14c0e:	181b      	adds	r3, r3, r0
   14c10:	1112      	asrs	r2, r2, #4
   14c12:	189b      	adds	r3, r3, r2
   14c14:	0022      	movs	r2, r4
   14c16:	3256      	adds	r2, #86	; 0x56
   14c18:	8013      	strh	r3, [r2, #0]
   14c1a:	0023      	movs	r3, r4
   14c1c:	2200      	movs	r2, #0
   14c1e:	3334      	adds	r3, #52	; 0x34
   14c20:	7819      	ldrb	r1, [r3, #0]
   14c22:	0010      	movs	r0, r2
   14c24:	4b4d      	ldr	r3, [pc, #308]	; (14d5c <RADIO_RxDoneHandler+0x268>)
   14c26:	4798      	blx	r3
   14c28:	4b4d      	ldr	r3, [pc, #308]	; (14d60 <RADIO_RxDoneHandler+0x26c>)
   14c2a:	4798      	blx	r3
   14c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c2e:	a901      	add	r1, sp, #4
   14c30:	604b      	str	r3, [r1, #4]
   14c32:	0023      	movs	r3, r4
   14c34:	332c      	adds	r3, #44	; 0x2c
   14c36:	781b      	ldrb	r3, [r3, #0]
   14c38:	2201      	movs	r2, #1
   14c3a:	720b      	strb	r3, [r1, #8]
   14c3c:	2300      	movs	r3, #0
   14c3e:	700b      	strb	r3, [r1, #0]
   14c40:	4b48      	ldr	r3, [pc, #288]	; (14d64 <RADIO_RxDoneHandler+0x270>)
   14c42:	701a      	strb	r2, [r3, #0]
   14c44:	4b48      	ldr	r3, [pc, #288]	; (14d68 <RADIO_RxDoneHandler+0x274>)
   14c46:	7818      	ldrb	r0, [r3, #0]
   14c48:	07c0      	lsls	r0, r0, #31
   14c4a:	0fc0      	lsrs	r0, r0, #31
   14c4c:	4290      	cmp	r0, r2
   14c4e:	d000      	beq.n	14c52 <RADIO_RxDoneHandler+0x15e>
   14c50:	e77e      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14c52:	6923      	ldr	r3, [r4, #16]
   14c54:	2b00      	cmp	r3, #0
   14c56:	d100      	bne.n	14c5a <RADIO_RxDoneHandler+0x166>
   14c58:	e77a      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14c5a:	4798      	blx	r3
   14c5c:	e778      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14c5e:	1080      	asrs	r0, r0, #2
   14c60:	e7c4      	b.n	14bec <RADIO_RxDoneHandler+0xf8>
   14c62:	4d47      	ldr	r5, [pc, #284]	; (14d80 <RADIO_RxDoneHandler+0x28c>)
   14c64:	1949      	adds	r1, r1, r5
   14c66:	4d47      	ldr	r5, [pc, #284]	; (14d84 <RADIO_RxDoneHandler+0x290>)
   14c68:	42a9      	cmp	r1, r5
   14c6a:	d8d6      	bhi.n	14c1a <RADIO_RxDoneHandler+0x126>
   14c6c:	3ba4      	subs	r3, #164	; 0xa4
   14c6e:	e7ce      	b.n	14c0e <RADIO_RxDoneHandler+0x11a>
   14c70:	6823      	ldr	r3, [r4, #0]
   14c72:	4942      	ldr	r1, [pc, #264]	; (14d7c <RADIO_RxDoneHandler+0x288>)
   14c74:	1859      	adds	r1, r3, r1
   14c76:	42a9      	cmp	r1, r5
   14c78:	d802      	bhi.n	14c80 <RADIO_RxDoneHandler+0x18c>
   14c7a:	0003      	movs	r3, r0
   14c7c:	3b9d      	subs	r3, #157	; 0x9d
   14c7e:	e7c7      	b.n	14c10 <RADIO_RxDoneHandler+0x11c>
   14c80:	493f      	ldr	r1, [pc, #252]	; (14d80 <RADIO_RxDoneHandler+0x28c>)
   14c82:	185b      	adds	r3, r3, r1
   14c84:	493f      	ldr	r1, [pc, #252]	; (14d84 <RADIO_RxDoneHandler+0x290>)
   14c86:	428b      	cmp	r3, r1
   14c88:	d8c7      	bhi.n	14c1a <RADIO_RxDoneHandler+0x126>
   14c8a:	38a4      	subs	r0, #164	; 0xa4
   14c8c:	1113      	asrs	r3, r2, #4
   14c8e:	18c3      	adds	r3, r0, r3
   14c90:	e7c0      	b.n	14c14 <RADIO_RxDoneHandler+0x120>
   14c92:	881a      	ldrh	r2, [r3, #0]
   14c94:	0712      	lsls	r2, r2, #28
   14c96:	0fd5      	lsrs	r5, r2, #31
   14c98:	2a00      	cmp	r2, #0
   14c9a:	da27      	bge.n	14cec <RADIO_RxDoneHandler+0x1f8>
   14c9c:	2108      	movs	r1, #8
   14c9e:	881a      	ldrh	r2, [r3, #0]
   14ca0:	4c2d      	ldr	r4, [pc, #180]	; (14d58 <RADIO_RxDoneHandler+0x264>)
   14ca2:	438a      	bics	r2, r1
   14ca4:	801a      	strh	r2, [r3, #0]
   14ca6:	0023      	movs	r3, r4
   14ca8:	2280      	movs	r2, #128	; 0x80
   14caa:	3332      	adds	r3, #50	; 0x32
   14cac:	701a      	strb	r2, [r3, #0]
   14cae:	0023      	movs	r3, r4
   14cb0:	2200      	movs	r2, #0
   14cb2:	3334      	adds	r3, #52	; 0x34
   14cb4:	7819      	ldrb	r1, [r3, #0]
   14cb6:	0010      	movs	r0, r2
   14cb8:	4b28      	ldr	r3, [pc, #160]	; (14d5c <RADIO_RxDoneHandler+0x268>)
   14cba:	4798      	blx	r3
   14cbc:	4b28      	ldr	r3, [pc, #160]	; (14d60 <RADIO_RxDoneHandler+0x26c>)
   14cbe:	4798      	blx	r3
   14cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14cc2:	a901      	add	r1, sp, #4
   14cc4:	604b      	str	r3, [r1, #4]
   14cc6:	0023      	movs	r3, r4
   14cc8:	332c      	adds	r3, #44	; 0x2c
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	0022      	movs	r2, r4
   14cce:	720b      	strb	r3, [r1, #8]
   14cd0:	2300      	movs	r3, #0
   14cd2:	3258      	adds	r2, #88	; 0x58
   14cd4:	7013      	strb	r3, [r2, #0]
   14cd6:	700b      	strb	r3, [r1, #0]
   14cd8:	4b22      	ldr	r3, [pc, #136]	; (14d64 <RADIO_RxDoneHandler+0x270>)
   14cda:	701d      	strb	r5, [r3, #0]
   14cdc:	4b22      	ldr	r3, [pc, #136]	; (14d68 <RADIO_RxDoneHandler+0x274>)
   14cde:	7818      	ldrb	r0, [r3, #0]
   14ce0:	07c0      	lsls	r0, r0, #31
   14ce2:	0fc0      	lsrs	r0, r0, #31
   14ce4:	2801      	cmp	r0, #1
   14ce6:	d000      	beq.n	14cea <RADIO_RxDoneHandler+0x1f6>
   14ce8:	e732      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14cea:	e7b2      	b.n	14c52 <RADIO_RxDoneHandler+0x15e>
   14cec:	881a      	ldrh	r2, [r3, #0]
   14cee:	05d2      	lsls	r2, r2, #23
   14cf0:	0fd5      	lsrs	r5, r2, #31
   14cf2:	2a00      	cmp	r2, #0
   14cf4:	db00      	blt.n	14cf8 <RADIO_RxDoneHandler+0x204>
   14cf6:	e72b      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14cf8:	4c17      	ldr	r4, [pc, #92]	; (14d58 <RADIO_RxDoneHandler+0x264>)
   14cfa:	881a      	ldrh	r2, [r3, #0]
   14cfc:	0026      	movs	r6, r4
   14cfe:	4922      	ldr	r1, [pc, #136]	; (14d88 <RADIO_RxDoneHandler+0x294>)
   14d00:	362c      	adds	r6, #44	; 0x2c
   14d02:	400a      	ands	r2, r1
   14d04:	801a      	strh	r2, [r3, #0]
   14d06:	7832      	ldrb	r2, [r6, #0]
   14d08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14d0a:	b2d2      	uxtb	r2, r2
   14d0c:	2000      	movs	r0, #0
   14d0e:	4b19      	ldr	r3, [pc, #100]	; (14d74 <RADIO_RxDoneHandler+0x280>)
   14d10:	4798      	blx	r3
   14d12:	0023      	movs	r3, r4
   14d14:	2200      	movs	r2, #0
   14d16:	3334      	adds	r3, #52	; 0x34
   14d18:	7819      	ldrb	r1, [r3, #0]
   14d1a:	0010      	movs	r0, r2
   14d1c:	4b0f      	ldr	r3, [pc, #60]	; (14d5c <RADIO_RxDoneHandler+0x268>)
   14d1e:	4798      	blx	r3
   14d20:	4b0f      	ldr	r3, [pc, #60]	; (14d60 <RADIO_RxDoneHandler+0x26c>)
   14d22:	4798      	blx	r3
   14d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14d26:	a901      	add	r1, sp, #4
   14d28:	604b      	str	r3, [r1, #4]
   14d2a:	7833      	ldrb	r3, [r6, #0]
   14d2c:	0022      	movs	r2, r4
   14d2e:	720b      	strb	r3, [r1, #8]
   14d30:	2300      	movs	r3, #0
   14d32:	3258      	adds	r2, #88	; 0x58
   14d34:	7013      	strb	r3, [r2, #0]
   14d36:	700b      	strb	r3, [r1, #0]
   14d38:	4b0a      	ldr	r3, [pc, #40]	; (14d64 <RADIO_RxDoneHandler+0x270>)
   14d3a:	701d      	strb	r5, [r3, #0]
   14d3c:	4b0a      	ldr	r3, [pc, #40]	; (14d68 <RADIO_RxDoneHandler+0x274>)
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	06db      	lsls	r3, r3, #27
   14d42:	d400      	bmi.n	14d46 <RADIO_RxDoneHandler+0x252>
   14d44:	e704      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14d46:	6923      	ldr	r3, [r4, #16]
   14d48:	2b00      	cmp	r3, #0
   14d4a:	d100      	bne.n	14d4e <RADIO_RxDoneHandler+0x25a>
   14d4c:	e700      	b.n	14b50 <RADIO_RxDoneHandler+0x5c>
   14d4e:	2010      	movs	r0, #16
   14d50:	e783      	b.n	14c5a <RADIO_RxDoneHandler+0x166>
   14d52:	46c0      	nop			; (mov r8, r8)
   14d54:	20003048 	.word	0x20003048
   14d58:	200029f8 	.word	0x200029f8
   14d5c:	0000dc49 	.word	0x0000dc49
   14d60:	0001456d 	.word	0x0001456d
   14d64:	2000304b 	.word	0x2000304b
   14d68:	2000304a 	.word	0x2000304a
   14d6c:	0000646d 	.word	0x0000646d
   14d70:	00006445 	.word	0x00006445
   14d74:	000064d9 	.word	0x000064d9
   14d78:	096ae380 	.word	0x096ae380
   14d7c:	cc9eec80 	.word	0xcc9eec80
   14d80:	e78fe580 	.word	0xe78fe580
   14d84:	06dac2c0 	.word	0x06dac2c0
   14d88:	fffffeff 	.word	0xfffffeff

00014d8c <Radio_LBTScanTimeout>:
   14d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14d8e:	4c1c      	ldr	r4, [pc, #112]	; (14e00 <Radio_LBTScanTimeout+0x74>)
   14d90:	0025      	movs	r5, r4
   14d92:	0023      	movs	r3, r4
   14d94:	354f      	adds	r5, #79	; 0x4f
   14d96:	7829      	ldrb	r1, [r5, #0]
   14d98:	3340      	adds	r3, #64	; 0x40
   14d9a:	3101      	adds	r1, #1
   14d9c:	b2c9      	uxtb	r1, r1
   14d9e:	7029      	strb	r1, [r5, #0]
   14da0:	781b      	ldrb	r3, [r3, #0]
   14da2:	428b      	cmp	r3, r1
   14da4:	d315      	bcc.n	14dd2 <Radio_LBTScanTimeout+0x46>
   14da6:	260e      	movs	r6, #14
   14da8:	446e      	add	r6, sp
   14daa:	4b16      	ldr	r3, [pc, #88]	; (14e04 <Radio_LBTScanTimeout+0x78>)
   14dac:	0030      	movs	r0, r6
   14dae:	4798      	blx	r3
   14db0:	2300      	movs	r3, #0
   14db2:	5ef2      	ldrsh	r2, [r6, r3]
   14db4:	782b      	ldrb	r3, [r5, #0]
   14db6:	4353      	muls	r3, r2
   14db8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14dba:	189b      	adds	r3, r3, r2
   14dbc:	6463      	str	r3, [r4, #68]	; 0x44
   14dbe:	0023      	movs	r3, r4
   14dc0:	2200      	movs	r2, #0
   14dc2:	3350      	adds	r3, #80	; 0x50
   14dc4:	7818      	ldrb	r0, [r3, #0]
   14dc6:	9200      	str	r2, [sp, #0]
   14dc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   14dca:	4b0f      	ldr	r3, [pc, #60]	; (14e08 <Radio_LBTScanTimeout+0x7c>)
   14dcc:	4c0f      	ldr	r4, [pc, #60]	; (14e0c <Radio_LBTScanTimeout+0x80>)
   14dce:	47a0      	blx	r4
   14dd0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   14dd2:	2380      	movs	r3, #128	; 0x80
   14dd4:	4a0e      	ldr	r2, [pc, #56]	; (14e10 <Radio_LBTScanTimeout+0x84>)
   14dd6:	009b      	lsls	r3, r3, #2
   14dd8:	8810      	ldrh	r0, [r2, #0]
   14dda:	4303      	orrs	r3, r0
   14ddc:	8013      	strh	r3, [r2, #0]
   14dde:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14de0:	0058      	lsls	r0, r3, #1
   14de2:	1e4b      	subs	r3, r1, #1
   14de4:	4359      	muls	r1, r3
   14de6:	4b0b      	ldr	r3, [pc, #44]	; (14e14 <Radio_LBTScanTimeout+0x88>)
   14de8:	b289      	uxth	r1, r1
   14dea:	4798      	blx	r3
   14dec:	0023      	movs	r3, r4
   14dee:	334c      	adds	r3, #76	; 0x4c
   14df0:	8018      	strh	r0, [r3, #0]
   14df2:	2300      	movs	r3, #0
   14df4:	2001      	movs	r0, #1
   14df6:	702b      	strb	r3, [r5, #0]
   14df8:	6463      	str	r3, [r4, #68]	; 0x44
   14dfa:	4b07      	ldr	r3, [pc, #28]	; (14e18 <Radio_LBTScanTimeout+0x8c>)
   14dfc:	4798      	blx	r3
   14dfe:	e7e7      	b.n	14dd0 <Radio_LBTScanTimeout+0x44>
   14e00:	200029f8 	.word	0x200029f8
   14e04:	0000de0d 	.word	0x0000de0d
   14e08:	00014d8d 	.word	0x00014d8d
   14e0c:	0000d57d 	.word	0x0000d57d
   14e10:	20003048 	.word	0x20003048
   14e14:	00015065 	.word	0x00015065
   14e18:	00013dd5 	.word	0x00013dd5

00014e1c <RADIO_ScanHandler>:
   14e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14e1e:	4b12      	ldr	r3, [pc, #72]	; (14e68 <RADIO_ScanHandler+0x4c>)
   14e20:	4798      	blx	r3
   14e22:	2000      	movs	r0, #0
   14e24:	4b11      	ldr	r3, [pc, #68]	; (14e6c <RADIO_ScanHandler+0x50>)
   14e26:	4798      	blx	r3
   14e28:	4d11      	ldr	r5, [pc, #68]	; (14e70 <RADIO_ScanHandler+0x54>)
   14e2a:	4b12      	ldr	r3, [pc, #72]	; (14e74 <RADIO_ScanHandler+0x58>)
   14e2c:	6828      	ldr	r0, [r5, #0]
   14e2e:	2400      	movs	r4, #0
   14e30:	4798      	blx	r3
   14e32:	002b      	movs	r3, r5
   14e34:	4e10      	ldr	r6, [pc, #64]	; (14e78 <RADIO_ScanHandler+0x5c>)
   14e36:	334c      	adds	r3, #76	; 0x4c
   14e38:	2201      	movs	r2, #1
   14e3a:	0021      	movs	r1, r4
   14e3c:	0020      	movs	r0, r4
   14e3e:	801c      	strh	r4, [r3, #0]
   14e40:	47b0      	blx	r6
   14e42:	4b0e      	ldr	r3, [pc, #56]	; (14e7c <RADIO_ScanHandler+0x60>)
   14e44:	2109      	movs	r1, #9
   14e46:	2012      	movs	r0, #18
   14e48:	4798      	blx	r3
   14e4a:	3550      	adds	r5, #80	; 0x50
   14e4c:	0022      	movs	r2, r4
   14e4e:	0021      	movs	r1, r4
   14e50:	2005      	movs	r0, #5
   14e52:	47b0      	blx	r6
   14e54:	7828      	ldrb	r0, [r5, #0]
   14e56:	4b0a      	ldr	r3, [pc, #40]	; (14e80 <RADIO_ScanHandler+0x64>)
   14e58:	4d0a      	ldr	r5, [pc, #40]	; (14e84 <RADIO_ScanHandler+0x68>)
   14e5a:	9400      	str	r4, [sp, #0]
   14e5c:	0022      	movs	r2, r4
   14e5e:	490a      	ldr	r1, [pc, #40]	; (14e88 <RADIO_ScanHandler+0x6c>)
   14e60:	47a8      	blx	r5
   14e62:	0020      	movs	r0, r4
   14e64:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   14e66:	46c0      	nop			; (mov r8, r8)
   14e68:	00014539 	.word	0x00014539
   14e6c:	00014089 	.word	0x00014089
   14e70:	200029f8 	.word	0x200029f8
   14e74:	000137cd 	.word	0x000137cd
   14e78:	0000dc49 	.word	0x0000dc49
   14e7c:	00006445 	.word	0x00006445
   14e80:	00014d8d 	.word	0x00014d8d
   14e84:	0000d57d 	.word	0x0000d57d
   14e88:	00002328 	.word	0x00002328

00014e8c <radioScanDoneHandler>:
   14e8c:	b530      	push	{r4, r5, lr}
   14e8e:	4a18      	ldr	r2, [pc, #96]	; (14ef0 <radioScanDoneHandler+0x64>)
   14e90:	4918      	ldr	r1, [pc, #96]	; (14ef4 <radioScanDoneHandler+0x68>)
   14e92:	8813      	ldrh	r3, [r2, #0]
   14e94:	b085      	sub	sp, #20
   14e96:	400b      	ands	r3, r1
   14e98:	8013      	strh	r3, [r2, #0]
   14e9a:	2200      	movs	r2, #0
   14e9c:	4b16      	ldr	r3, [pc, #88]	; (14ef8 <radioScanDoneHandler+0x6c>)
   14e9e:	0011      	movs	r1, r2
   14ea0:	0010      	movs	r0, r2
   14ea2:	4798      	blx	r3
   14ea4:	2000      	movs	r0, #0
   14ea6:	4b15      	ldr	r3, [pc, #84]	; (14efc <radioScanDoneHandler+0x70>)
   14ea8:	4798      	blx	r3
   14eaa:	4b15      	ldr	r3, [pc, #84]	; (14f00 <radioScanDoneHandler+0x74>)
   14eac:	4798      	blx	r3
   14eae:	4c15      	ldr	r4, [pc, #84]	; (14f04 <radioScanDoneHandler+0x78>)
   14eb0:	0023      	movs	r3, r4
   14eb2:	334c      	adds	r3, #76	; 0x4c
   14eb4:	2100      	movs	r1, #0
   14eb6:	5e59      	ldrsh	r1, [r3, r1]
   14eb8:	233e      	movs	r3, #62	; 0x3e
   14eba:	5ee2      	ldrsh	r2, [r4, r3]
   14ebc:	4b12      	ldr	r3, [pc, #72]	; (14f08 <radioScanDoneHandler+0x7c>)
   14ebe:	4291      	cmp	r1, r2
   14ec0:	da06      	bge.n	14ed0 <radioScanDoneHandler+0x44>
   14ec2:	2002      	movs	r0, #2
   14ec4:	4798      	blx	r3
   14ec6:	4b11      	ldr	r3, [pc, #68]	; (14f0c <radioScanDoneHandler+0x80>)
   14ec8:	4798      	blx	r3
   14eca:	2000      	movs	r0, #0
   14ecc:	b005      	add	sp, #20
   14ece:	bd30      	pop	{r4, r5, pc}
   14ed0:	2207      	movs	r2, #7
   14ed2:	ad01      	add	r5, sp, #4
   14ed4:	2001      	movs	r0, #1
   14ed6:	702a      	strb	r2, [r5, #0]
   14ed8:	4798      	blx	r3
   14eda:	4b0d      	ldr	r3, [pc, #52]	; (14f10 <radioScanDoneHandler+0x84>)
   14edc:	781b      	ldrb	r3, [r3, #0]
   14ede:	079b      	lsls	r3, r3, #30
   14ee0:	d5f3      	bpl.n	14eca <radioScanDoneHandler+0x3e>
   14ee2:	6923      	ldr	r3, [r4, #16]
   14ee4:	2b00      	cmp	r3, #0
   14ee6:	d0f0      	beq.n	14eca <radioScanDoneHandler+0x3e>
   14ee8:	0029      	movs	r1, r5
   14eea:	2002      	movs	r0, #2
   14eec:	4798      	blx	r3
   14eee:	e7ec      	b.n	14eca <radioScanDoneHandler+0x3e>
   14ef0:	20003048 	.word	0x20003048
   14ef4:	fffffdff 	.word	0xfffffdff
   14ef8:	0000dc49 	.word	0x0000dc49
   14efc:	000141b1 	.word	0x000141b1
   14f00:	0001456d 	.word	0x0001456d
   14f04:	200029f8 	.word	0x200029f8
   14f08:	00013e81 	.word	0x00013e81
   14f0c:	00014839 	.word	0x00014839
   14f10:	2000304a 	.word	0x2000304a

00014f14 <__gnu_thumb1_case_uqi>:
   14f14:	b402      	push	{r1}
   14f16:	4671      	mov	r1, lr
   14f18:	0849      	lsrs	r1, r1, #1
   14f1a:	0049      	lsls	r1, r1, #1
   14f1c:	5c09      	ldrb	r1, [r1, r0]
   14f1e:	0049      	lsls	r1, r1, #1
   14f20:	448e      	add	lr, r1
   14f22:	bc02      	pop	{r1}
   14f24:	4770      	bx	lr
   14f26:	46c0      	nop			; (mov r8, r8)

00014f28 <__gnu_thumb1_case_shi>:
   14f28:	b403      	push	{r0, r1}
   14f2a:	4671      	mov	r1, lr
   14f2c:	0849      	lsrs	r1, r1, #1
   14f2e:	0040      	lsls	r0, r0, #1
   14f30:	0049      	lsls	r1, r1, #1
   14f32:	5e09      	ldrsh	r1, [r1, r0]
   14f34:	0049      	lsls	r1, r1, #1
   14f36:	448e      	add	lr, r1
   14f38:	bc03      	pop	{r0, r1}
   14f3a:	4770      	bx	lr

00014f3c <__gnu_thumb1_case_uhi>:
   14f3c:	b403      	push	{r0, r1}
   14f3e:	4671      	mov	r1, lr
   14f40:	0849      	lsrs	r1, r1, #1
   14f42:	0040      	lsls	r0, r0, #1
   14f44:	0049      	lsls	r1, r1, #1
   14f46:	5a09      	ldrh	r1, [r1, r0]
   14f48:	0049      	lsls	r1, r1, #1
   14f4a:	448e      	add	lr, r1
   14f4c:	bc03      	pop	{r0, r1}
   14f4e:	4770      	bx	lr

00014f50 <__udivsi3>:
   14f50:	2200      	movs	r2, #0
   14f52:	0843      	lsrs	r3, r0, #1
   14f54:	428b      	cmp	r3, r1
   14f56:	d374      	bcc.n	15042 <__udivsi3+0xf2>
   14f58:	0903      	lsrs	r3, r0, #4
   14f5a:	428b      	cmp	r3, r1
   14f5c:	d35f      	bcc.n	1501e <__udivsi3+0xce>
   14f5e:	0a03      	lsrs	r3, r0, #8
   14f60:	428b      	cmp	r3, r1
   14f62:	d344      	bcc.n	14fee <__udivsi3+0x9e>
   14f64:	0b03      	lsrs	r3, r0, #12
   14f66:	428b      	cmp	r3, r1
   14f68:	d328      	bcc.n	14fbc <__udivsi3+0x6c>
   14f6a:	0c03      	lsrs	r3, r0, #16
   14f6c:	428b      	cmp	r3, r1
   14f6e:	d30d      	bcc.n	14f8c <__udivsi3+0x3c>
   14f70:	22ff      	movs	r2, #255	; 0xff
   14f72:	0209      	lsls	r1, r1, #8
   14f74:	ba12      	rev	r2, r2
   14f76:	0c03      	lsrs	r3, r0, #16
   14f78:	428b      	cmp	r3, r1
   14f7a:	d302      	bcc.n	14f82 <__udivsi3+0x32>
   14f7c:	1212      	asrs	r2, r2, #8
   14f7e:	0209      	lsls	r1, r1, #8
   14f80:	d065      	beq.n	1504e <__udivsi3+0xfe>
   14f82:	0b03      	lsrs	r3, r0, #12
   14f84:	428b      	cmp	r3, r1
   14f86:	d319      	bcc.n	14fbc <__udivsi3+0x6c>
   14f88:	e000      	b.n	14f8c <__udivsi3+0x3c>
   14f8a:	0a09      	lsrs	r1, r1, #8
   14f8c:	0bc3      	lsrs	r3, r0, #15
   14f8e:	428b      	cmp	r3, r1
   14f90:	d301      	bcc.n	14f96 <__udivsi3+0x46>
   14f92:	03cb      	lsls	r3, r1, #15
   14f94:	1ac0      	subs	r0, r0, r3
   14f96:	4152      	adcs	r2, r2
   14f98:	0b83      	lsrs	r3, r0, #14
   14f9a:	428b      	cmp	r3, r1
   14f9c:	d301      	bcc.n	14fa2 <__udivsi3+0x52>
   14f9e:	038b      	lsls	r3, r1, #14
   14fa0:	1ac0      	subs	r0, r0, r3
   14fa2:	4152      	adcs	r2, r2
   14fa4:	0b43      	lsrs	r3, r0, #13
   14fa6:	428b      	cmp	r3, r1
   14fa8:	d301      	bcc.n	14fae <__udivsi3+0x5e>
   14faa:	034b      	lsls	r3, r1, #13
   14fac:	1ac0      	subs	r0, r0, r3
   14fae:	4152      	adcs	r2, r2
   14fb0:	0b03      	lsrs	r3, r0, #12
   14fb2:	428b      	cmp	r3, r1
   14fb4:	d301      	bcc.n	14fba <__udivsi3+0x6a>
   14fb6:	030b      	lsls	r3, r1, #12
   14fb8:	1ac0      	subs	r0, r0, r3
   14fba:	4152      	adcs	r2, r2
   14fbc:	0ac3      	lsrs	r3, r0, #11
   14fbe:	428b      	cmp	r3, r1
   14fc0:	d301      	bcc.n	14fc6 <__udivsi3+0x76>
   14fc2:	02cb      	lsls	r3, r1, #11
   14fc4:	1ac0      	subs	r0, r0, r3
   14fc6:	4152      	adcs	r2, r2
   14fc8:	0a83      	lsrs	r3, r0, #10
   14fca:	428b      	cmp	r3, r1
   14fcc:	d301      	bcc.n	14fd2 <__udivsi3+0x82>
   14fce:	028b      	lsls	r3, r1, #10
   14fd0:	1ac0      	subs	r0, r0, r3
   14fd2:	4152      	adcs	r2, r2
   14fd4:	0a43      	lsrs	r3, r0, #9
   14fd6:	428b      	cmp	r3, r1
   14fd8:	d301      	bcc.n	14fde <__udivsi3+0x8e>
   14fda:	024b      	lsls	r3, r1, #9
   14fdc:	1ac0      	subs	r0, r0, r3
   14fde:	4152      	adcs	r2, r2
   14fe0:	0a03      	lsrs	r3, r0, #8
   14fe2:	428b      	cmp	r3, r1
   14fe4:	d301      	bcc.n	14fea <__udivsi3+0x9a>
   14fe6:	020b      	lsls	r3, r1, #8
   14fe8:	1ac0      	subs	r0, r0, r3
   14fea:	4152      	adcs	r2, r2
   14fec:	d2cd      	bcs.n	14f8a <__udivsi3+0x3a>
   14fee:	09c3      	lsrs	r3, r0, #7
   14ff0:	428b      	cmp	r3, r1
   14ff2:	d301      	bcc.n	14ff8 <__udivsi3+0xa8>
   14ff4:	01cb      	lsls	r3, r1, #7
   14ff6:	1ac0      	subs	r0, r0, r3
   14ff8:	4152      	adcs	r2, r2
   14ffa:	0983      	lsrs	r3, r0, #6
   14ffc:	428b      	cmp	r3, r1
   14ffe:	d301      	bcc.n	15004 <__udivsi3+0xb4>
   15000:	018b      	lsls	r3, r1, #6
   15002:	1ac0      	subs	r0, r0, r3
   15004:	4152      	adcs	r2, r2
   15006:	0943      	lsrs	r3, r0, #5
   15008:	428b      	cmp	r3, r1
   1500a:	d301      	bcc.n	15010 <__udivsi3+0xc0>
   1500c:	014b      	lsls	r3, r1, #5
   1500e:	1ac0      	subs	r0, r0, r3
   15010:	4152      	adcs	r2, r2
   15012:	0903      	lsrs	r3, r0, #4
   15014:	428b      	cmp	r3, r1
   15016:	d301      	bcc.n	1501c <__udivsi3+0xcc>
   15018:	010b      	lsls	r3, r1, #4
   1501a:	1ac0      	subs	r0, r0, r3
   1501c:	4152      	adcs	r2, r2
   1501e:	08c3      	lsrs	r3, r0, #3
   15020:	428b      	cmp	r3, r1
   15022:	d301      	bcc.n	15028 <__udivsi3+0xd8>
   15024:	00cb      	lsls	r3, r1, #3
   15026:	1ac0      	subs	r0, r0, r3
   15028:	4152      	adcs	r2, r2
   1502a:	0883      	lsrs	r3, r0, #2
   1502c:	428b      	cmp	r3, r1
   1502e:	d301      	bcc.n	15034 <__udivsi3+0xe4>
   15030:	008b      	lsls	r3, r1, #2
   15032:	1ac0      	subs	r0, r0, r3
   15034:	4152      	adcs	r2, r2
   15036:	0843      	lsrs	r3, r0, #1
   15038:	428b      	cmp	r3, r1
   1503a:	d301      	bcc.n	15040 <__udivsi3+0xf0>
   1503c:	004b      	lsls	r3, r1, #1
   1503e:	1ac0      	subs	r0, r0, r3
   15040:	4152      	adcs	r2, r2
   15042:	1a41      	subs	r1, r0, r1
   15044:	d200      	bcs.n	15048 <__udivsi3+0xf8>
   15046:	4601      	mov	r1, r0
   15048:	4152      	adcs	r2, r2
   1504a:	4610      	mov	r0, r2
   1504c:	4770      	bx	lr
   1504e:	e7ff      	b.n	15050 <__udivsi3+0x100>
   15050:	b501      	push	{r0, lr}
   15052:	2000      	movs	r0, #0
   15054:	f000 f8f0 	bl	15238 <__aeabi_idiv0>
   15058:	bd02      	pop	{r1, pc}
   1505a:	46c0      	nop			; (mov r8, r8)

0001505c <__aeabi_uidivmod>:
   1505c:	2900      	cmp	r1, #0
   1505e:	d0f7      	beq.n	15050 <__udivsi3+0x100>
   15060:	e776      	b.n	14f50 <__udivsi3>
   15062:	4770      	bx	lr

00015064 <__divsi3>:
   15064:	4603      	mov	r3, r0
   15066:	430b      	orrs	r3, r1
   15068:	d47f      	bmi.n	1516a <__divsi3+0x106>
   1506a:	2200      	movs	r2, #0
   1506c:	0843      	lsrs	r3, r0, #1
   1506e:	428b      	cmp	r3, r1
   15070:	d374      	bcc.n	1515c <__divsi3+0xf8>
   15072:	0903      	lsrs	r3, r0, #4
   15074:	428b      	cmp	r3, r1
   15076:	d35f      	bcc.n	15138 <__divsi3+0xd4>
   15078:	0a03      	lsrs	r3, r0, #8
   1507a:	428b      	cmp	r3, r1
   1507c:	d344      	bcc.n	15108 <__divsi3+0xa4>
   1507e:	0b03      	lsrs	r3, r0, #12
   15080:	428b      	cmp	r3, r1
   15082:	d328      	bcc.n	150d6 <__divsi3+0x72>
   15084:	0c03      	lsrs	r3, r0, #16
   15086:	428b      	cmp	r3, r1
   15088:	d30d      	bcc.n	150a6 <__divsi3+0x42>
   1508a:	22ff      	movs	r2, #255	; 0xff
   1508c:	0209      	lsls	r1, r1, #8
   1508e:	ba12      	rev	r2, r2
   15090:	0c03      	lsrs	r3, r0, #16
   15092:	428b      	cmp	r3, r1
   15094:	d302      	bcc.n	1509c <__divsi3+0x38>
   15096:	1212      	asrs	r2, r2, #8
   15098:	0209      	lsls	r1, r1, #8
   1509a:	d065      	beq.n	15168 <__divsi3+0x104>
   1509c:	0b03      	lsrs	r3, r0, #12
   1509e:	428b      	cmp	r3, r1
   150a0:	d319      	bcc.n	150d6 <__divsi3+0x72>
   150a2:	e000      	b.n	150a6 <__divsi3+0x42>
   150a4:	0a09      	lsrs	r1, r1, #8
   150a6:	0bc3      	lsrs	r3, r0, #15
   150a8:	428b      	cmp	r3, r1
   150aa:	d301      	bcc.n	150b0 <__divsi3+0x4c>
   150ac:	03cb      	lsls	r3, r1, #15
   150ae:	1ac0      	subs	r0, r0, r3
   150b0:	4152      	adcs	r2, r2
   150b2:	0b83      	lsrs	r3, r0, #14
   150b4:	428b      	cmp	r3, r1
   150b6:	d301      	bcc.n	150bc <__divsi3+0x58>
   150b8:	038b      	lsls	r3, r1, #14
   150ba:	1ac0      	subs	r0, r0, r3
   150bc:	4152      	adcs	r2, r2
   150be:	0b43      	lsrs	r3, r0, #13
   150c0:	428b      	cmp	r3, r1
   150c2:	d301      	bcc.n	150c8 <__divsi3+0x64>
   150c4:	034b      	lsls	r3, r1, #13
   150c6:	1ac0      	subs	r0, r0, r3
   150c8:	4152      	adcs	r2, r2
   150ca:	0b03      	lsrs	r3, r0, #12
   150cc:	428b      	cmp	r3, r1
   150ce:	d301      	bcc.n	150d4 <__divsi3+0x70>
   150d0:	030b      	lsls	r3, r1, #12
   150d2:	1ac0      	subs	r0, r0, r3
   150d4:	4152      	adcs	r2, r2
   150d6:	0ac3      	lsrs	r3, r0, #11
   150d8:	428b      	cmp	r3, r1
   150da:	d301      	bcc.n	150e0 <__divsi3+0x7c>
   150dc:	02cb      	lsls	r3, r1, #11
   150de:	1ac0      	subs	r0, r0, r3
   150e0:	4152      	adcs	r2, r2
   150e2:	0a83      	lsrs	r3, r0, #10
   150e4:	428b      	cmp	r3, r1
   150e6:	d301      	bcc.n	150ec <__divsi3+0x88>
   150e8:	028b      	lsls	r3, r1, #10
   150ea:	1ac0      	subs	r0, r0, r3
   150ec:	4152      	adcs	r2, r2
   150ee:	0a43      	lsrs	r3, r0, #9
   150f0:	428b      	cmp	r3, r1
   150f2:	d301      	bcc.n	150f8 <__divsi3+0x94>
   150f4:	024b      	lsls	r3, r1, #9
   150f6:	1ac0      	subs	r0, r0, r3
   150f8:	4152      	adcs	r2, r2
   150fa:	0a03      	lsrs	r3, r0, #8
   150fc:	428b      	cmp	r3, r1
   150fe:	d301      	bcc.n	15104 <__divsi3+0xa0>
   15100:	020b      	lsls	r3, r1, #8
   15102:	1ac0      	subs	r0, r0, r3
   15104:	4152      	adcs	r2, r2
   15106:	d2cd      	bcs.n	150a4 <__divsi3+0x40>
   15108:	09c3      	lsrs	r3, r0, #7
   1510a:	428b      	cmp	r3, r1
   1510c:	d301      	bcc.n	15112 <__divsi3+0xae>
   1510e:	01cb      	lsls	r3, r1, #7
   15110:	1ac0      	subs	r0, r0, r3
   15112:	4152      	adcs	r2, r2
   15114:	0983      	lsrs	r3, r0, #6
   15116:	428b      	cmp	r3, r1
   15118:	d301      	bcc.n	1511e <__divsi3+0xba>
   1511a:	018b      	lsls	r3, r1, #6
   1511c:	1ac0      	subs	r0, r0, r3
   1511e:	4152      	adcs	r2, r2
   15120:	0943      	lsrs	r3, r0, #5
   15122:	428b      	cmp	r3, r1
   15124:	d301      	bcc.n	1512a <__divsi3+0xc6>
   15126:	014b      	lsls	r3, r1, #5
   15128:	1ac0      	subs	r0, r0, r3
   1512a:	4152      	adcs	r2, r2
   1512c:	0903      	lsrs	r3, r0, #4
   1512e:	428b      	cmp	r3, r1
   15130:	d301      	bcc.n	15136 <__divsi3+0xd2>
   15132:	010b      	lsls	r3, r1, #4
   15134:	1ac0      	subs	r0, r0, r3
   15136:	4152      	adcs	r2, r2
   15138:	08c3      	lsrs	r3, r0, #3
   1513a:	428b      	cmp	r3, r1
   1513c:	d301      	bcc.n	15142 <__divsi3+0xde>
   1513e:	00cb      	lsls	r3, r1, #3
   15140:	1ac0      	subs	r0, r0, r3
   15142:	4152      	adcs	r2, r2
   15144:	0883      	lsrs	r3, r0, #2
   15146:	428b      	cmp	r3, r1
   15148:	d301      	bcc.n	1514e <__divsi3+0xea>
   1514a:	008b      	lsls	r3, r1, #2
   1514c:	1ac0      	subs	r0, r0, r3
   1514e:	4152      	adcs	r2, r2
   15150:	0843      	lsrs	r3, r0, #1
   15152:	428b      	cmp	r3, r1
   15154:	d301      	bcc.n	1515a <__divsi3+0xf6>
   15156:	004b      	lsls	r3, r1, #1
   15158:	1ac0      	subs	r0, r0, r3
   1515a:	4152      	adcs	r2, r2
   1515c:	1a41      	subs	r1, r0, r1
   1515e:	d200      	bcs.n	15162 <__divsi3+0xfe>
   15160:	4601      	mov	r1, r0
   15162:	4152      	adcs	r2, r2
   15164:	4610      	mov	r0, r2
   15166:	4770      	bx	lr
   15168:	e05d      	b.n	15226 <__divsi3+0x1c2>
   1516a:	0fca      	lsrs	r2, r1, #31
   1516c:	d000      	beq.n	15170 <__divsi3+0x10c>
   1516e:	4249      	negs	r1, r1
   15170:	1003      	asrs	r3, r0, #32
   15172:	d300      	bcc.n	15176 <__divsi3+0x112>
   15174:	4240      	negs	r0, r0
   15176:	4053      	eors	r3, r2
   15178:	2200      	movs	r2, #0
   1517a:	469c      	mov	ip, r3
   1517c:	0903      	lsrs	r3, r0, #4
   1517e:	428b      	cmp	r3, r1
   15180:	d32d      	bcc.n	151de <__divsi3+0x17a>
   15182:	0a03      	lsrs	r3, r0, #8
   15184:	428b      	cmp	r3, r1
   15186:	d312      	bcc.n	151ae <__divsi3+0x14a>
   15188:	22fc      	movs	r2, #252	; 0xfc
   1518a:	0189      	lsls	r1, r1, #6
   1518c:	ba12      	rev	r2, r2
   1518e:	0a03      	lsrs	r3, r0, #8
   15190:	428b      	cmp	r3, r1
   15192:	d30c      	bcc.n	151ae <__divsi3+0x14a>
   15194:	0189      	lsls	r1, r1, #6
   15196:	1192      	asrs	r2, r2, #6
   15198:	428b      	cmp	r3, r1
   1519a:	d308      	bcc.n	151ae <__divsi3+0x14a>
   1519c:	0189      	lsls	r1, r1, #6
   1519e:	1192      	asrs	r2, r2, #6
   151a0:	428b      	cmp	r3, r1
   151a2:	d304      	bcc.n	151ae <__divsi3+0x14a>
   151a4:	0189      	lsls	r1, r1, #6
   151a6:	d03a      	beq.n	1521e <__divsi3+0x1ba>
   151a8:	1192      	asrs	r2, r2, #6
   151aa:	e000      	b.n	151ae <__divsi3+0x14a>
   151ac:	0989      	lsrs	r1, r1, #6
   151ae:	09c3      	lsrs	r3, r0, #7
   151b0:	428b      	cmp	r3, r1
   151b2:	d301      	bcc.n	151b8 <__divsi3+0x154>
   151b4:	01cb      	lsls	r3, r1, #7
   151b6:	1ac0      	subs	r0, r0, r3
   151b8:	4152      	adcs	r2, r2
   151ba:	0983      	lsrs	r3, r0, #6
   151bc:	428b      	cmp	r3, r1
   151be:	d301      	bcc.n	151c4 <__divsi3+0x160>
   151c0:	018b      	lsls	r3, r1, #6
   151c2:	1ac0      	subs	r0, r0, r3
   151c4:	4152      	adcs	r2, r2
   151c6:	0943      	lsrs	r3, r0, #5
   151c8:	428b      	cmp	r3, r1
   151ca:	d301      	bcc.n	151d0 <__divsi3+0x16c>
   151cc:	014b      	lsls	r3, r1, #5
   151ce:	1ac0      	subs	r0, r0, r3
   151d0:	4152      	adcs	r2, r2
   151d2:	0903      	lsrs	r3, r0, #4
   151d4:	428b      	cmp	r3, r1
   151d6:	d301      	bcc.n	151dc <__divsi3+0x178>
   151d8:	010b      	lsls	r3, r1, #4
   151da:	1ac0      	subs	r0, r0, r3
   151dc:	4152      	adcs	r2, r2
   151de:	08c3      	lsrs	r3, r0, #3
   151e0:	428b      	cmp	r3, r1
   151e2:	d301      	bcc.n	151e8 <__divsi3+0x184>
   151e4:	00cb      	lsls	r3, r1, #3
   151e6:	1ac0      	subs	r0, r0, r3
   151e8:	4152      	adcs	r2, r2
   151ea:	0883      	lsrs	r3, r0, #2
   151ec:	428b      	cmp	r3, r1
   151ee:	d301      	bcc.n	151f4 <__divsi3+0x190>
   151f0:	008b      	lsls	r3, r1, #2
   151f2:	1ac0      	subs	r0, r0, r3
   151f4:	4152      	adcs	r2, r2
   151f6:	d2d9      	bcs.n	151ac <__divsi3+0x148>
   151f8:	0843      	lsrs	r3, r0, #1
   151fa:	428b      	cmp	r3, r1
   151fc:	d301      	bcc.n	15202 <__divsi3+0x19e>
   151fe:	004b      	lsls	r3, r1, #1
   15200:	1ac0      	subs	r0, r0, r3
   15202:	4152      	adcs	r2, r2
   15204:	1a41      	subs	r1, r0, r1
   15206:	d200      	bcs.n	1520a <__divsi3+0x1a6>
   15208:	4601      	mov	r1, r0
   1520a:	4663      	mov	r3, ip
   1520c:	4152      	adcs	r2, r2
   1520e:	105b      	asrs	r3, r3, #1
   15210:	4610      	mov	r0, r2
   15212:	d301      	bcc.n	15218 <__divsi3+0x1b4>
   15214:	4240      	negs	r0, r0
   15216:	2b00      	cmp	r3, #0
   15218:	d500      	bpl.n	1521c <__divsi3+0x1b8>
   1521a:	4249      	negs	r1, r1
   1521c:	4770      	bx	lr
   1521e:	4663      	mov	r3, ip
   15220:	105b      	asrs	r3, r3, #1
   15222:	d300      	bcc.n	15226 <__divsi3+0x1c2>
   15224:	4240      	negs	r0, r0
   15226:	b501      	push	{r0, lr}
   15228:	2000      	movs	r0, #0
   1522a:	f000 f805 	bl	15238 <__aeabi_idiv0>
   1522e:	bd02      	pop	{r1, pc}

00015230 <__aeabi_idivmod>:
   15230:	2900      	cmp	r1, #0
   15232:	d0f8      	beq.n	15226 <__divsi3+0x1c2>
   15234:	e716      	b.n	15064 <__divsi3>
   15236:	4770      	bx	lr

00015238 <__aeabi_idiv0>:
   15238:	4770      	bx	lr
   1523a:	46c0      	nop			; (mov r8, r8)

0001523c <__aeabi_cdrcmple>:
   1523c:	4684      	mov	ip, r0
   1523e:	1c10      	adds	r0, r2, #0
   15240:	4662      	mov	r2, ip
   15242:	468c      	mov	ip, r1
   15244:	1c19      	adds	r1, r3, #0
   15246:	4663      	mov	r3, ip
   15248:	e000      	b.n	1524c <__aeabi_cdcmpeq>
   1524a:	46c0      	nop			; (mov r8, r8)

0001524c <__aeabi_cdcmpeq>:
   1524c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1524e:	f001 ffa3 	bl	17198 <__ledf2>
   15252:	2800      	cmp	r0, #0
   15254:	d401      	bmi.n	1525a <__aeabi_cdcmpeq+0xe>
   15256:	2100      	movs	r1, #0
   15258:	42c8      	cmn	r0, r1
   1525a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001525c <__aeabi_dcmpeq>:
   1525c:	b510      	push	{r4, lr}
   1525e:	f001 fefd 	bl	1705c <__eqdf2>
   15262:	4240      	negs	r0, r0
   15264:	3001      	adds	r0, #1
   15266:	bd10      	pop	{r4, pc}

00015268 <__aeabi_dcmplt>:
   15268:	b510      	push	{r4, lr}
   1526a:	f001 ff95 	bl	17198 <__ledf2>
   1526e:	2800      	cmp	r0, #0
   15270:	db01      	blt.n	15276 <__aeabi_dcmplt+0xe>
   15272:	2000      	movs	r0, #0
   15274:	bd10      	pop	{r4, pc}
   15276:	2001      	movs	r0, #1
   15278:	bd10      	pop	{r4, pc}
   1527a:	46c0      	nop			; (mov r8, r8)

0001527c <__aeabi_dcmple>:
   1527c:	b510      	push	{r4, lr}
   1527e:	f001 ff8b 	bl	17198 <__ledf2>
   15282:	2800      	cmp	r0, #0
   15284:	dd01      	ble.n	1528a <__aeabi_dcmple+0xe>
   15286:	2000      	movs	r0, #0
   15288:	bd10      	pop	{r4, pc}
   1528a:	2001      	movs	r0, #1
   1528c:	bd10      	pop	{r4, pc}
   1528e:	46c0      	nop			; (mov r8, r8)

00015290 <__aeabi_dcmpgt>:
   15290:	b510      	push	{r4, lr}
   15292:	f001 ff1d 	bl	170d0 <__gedf2>
   15296:	2800      	cmp	r0, #0
   15298:	dc01      	bgt.n	1529e <__aeabi_dcmpgt+0xe>
   1529a:	2000      	movs	r0, #0
   1529c:	bd10      	pop	{r4, pc}
   1529e:	2001      	movs	r0, #1
   152a0:	bd10      	pop	{r4, pc}
   152a2:	46c0      	nop			; (mov r8, r8)

000152a4 <__aeabi_dcmpge>:
   152a4:	b510      	push	{r4, lr}
   152a6:	f001 ff13 	bl	170d0 <__gedf2>
   152aa:	2800      	cmp	r0, #0
   152ac:	da01      	bge.n	152b2 <__aeabi_dcmpge+0xe>
   152ae:	2000      	movs	r0, #0
   152b0:	bd10      	pop	{r4, pc}
   152b2:	2001      	movs	r0, #1
   152b4:	bd10      	pop	{r4, pc}
   152b6:	46c0      	nop			; (mov r8, r8)

000152b8 <__aeabi_cfrcmple>:
   152b8:	4684      	mov	ip, r0
   152ba:	1c08      	adds	r0, r1, #0
   152bc:	4661      	mov	r1, ip
   152be:	e7ff      	b.n	152c0 <__aeabi_cfcmpeq>

000152c0 <__aeabi_cfcmpeq>:
   152c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   152c2:	f000 fcd3 	bl	15c6c <__lesf2>
   152c6:	2800      	cmp	r0, #0
   152c8:	d401      	bmi.n	152ce <__aeabi_cfcmpeq+0xe>
   152ca:	2100      	movs	r1, #0
   152cc:	42c8      	cmn	r0, r1
   152ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000152d0 <__aeabi_fcmpeq>:
   152d0:	b510      	push	{r4, lr}
   152d2:	f000 fc65 	bl	15ba0 <__eqsf2>
   152d6:	4240      	negs	r0, r0
   152d8:	3001      	adds	r0, #1
   152da:	bd10      	pop	{r4, pc}

000152dc <__aeabi_fcmplt>:
   152dc:	b510      	push	{r4, lr}
   152de:	f000 fcc5 	bl	15c6c <__lesf2>
   152e2:	2800      	cmp	r0, #0
   152e4:	db01      	blt.n	152ea <__aeabi_fcmplt+0xe>
   152e6:	2000      	movs	r0, #0
   152e8:	bd10      	pop	{r4, pc}
   152ea:	2001      	movs	r0, #1
   152ec:	bd10      	pop	{r4, pc}
   152ee:	46c0      	nop			; (mov r8, r8)

000152f0 <__aeabi_fcmple>:
   152f0:	b510      	push	{r4, lr}
   152f2:	f000 fcbb 	bl	15c6c <__lesf2>
   152f6:	2800      	cmp	r0, #0
   152f8:	dd01      	ble.n	152fe <__aeabi_fcmple+0xe>
   152fa:	2000      	movs	r0, #0
   152fc:	bd10      	pop	{r4, pc}
   152fe:	2001      	movs	r0, #1
   15300:	bd10      	pop	{r4, pc}
   15302:	46c0      	nop			; (mov r8, r8)

00015304 <__aeabi_fcmpgt>:
   15304:	b510      	push	{r4, lr}
   15306:	f000 fc71 	bl	15bec <__gesf2>
   1530a:	2800      	cmp	r0, #0
   1530c:	dc01      	bgt.n	15312 <__aeabi_fcmpgt+0xe>
   1530e:	2000      	movs	r0, #0
   15310:	bd10      	pop	{r4, pc}
   15312:	2001      	movs	r0, #1
   15314:	bd10      	pop	{r4, pc}
   15316:	46c0      	nop			; (mov r8, r8)

00015318 <__aeabi_fcmpge>:
   15318:	b510      	push	{r4, lr}
   1531a:	f000 fc67 	bl	15bec <__gesf2>
   1531e:	2800      	cmp	r0, #0
   15320:	da01      	bge.n	15326 <__aeabi_fcmpge+0xe>
   15322:	2000      	movs	r0, #0
   15324:	bd10      	pop	{r4, pc}
   15326:	2001      	movs	r0, #1
   15328:	bd10      	pop	{r4, pc}
   1532a:	46c0      	nop			; (mov r8, r8)

0001532c <__aeabi_uldivmod>:
   1532c:	2b00      	cmp	r3, #0
   1532e:	d111      	bne.n	15354 <__aeabi_uldivmod+0x28>
   15330:	2a00      	cmp	r2, #0
   15332:	d10f      	bne.n	15354 <__aeabi_uldivmod+0x28>
   15334:	2900      	cmp	r1, #0
   15336:	d100      	bne.n	1533a <__aeabi_uldivmod+0xe>
   15338:	2800      	cmp	r0, #0
   1533a:	d002      	beq.n	15342 <__aeabi_uldivmod+0x16>
   1533c:	2100      	movs	r1, #0
   1533e:	43c9      	mvns	r1, r1
   15340:	1c08      	adds	r0, r1, #0
   15342:	b407      	push	{r0, r1, r2}
   15344:	4802      	ldr	r0, [pc, #8]	; (15350 <__aeabi_uldivmod+0x24>)
   15346:	a102      	add	r1, pc, #8	; (adr r1, 15350 <__aeabi_uldivmod+0x24>)
   15348:	1840      	adds	r0, r0, r1
   1534a:	9002      	str	r0, [sp, #8]
   1534c:	bd03      	pop	{r0, r1, pc}
   1534e:	46c0      	nop			; (mov r8, r8)
   15350:	fffffee9 	.word	0xfffffee9
   15354:	b403      	push	{r0, r1}
   15356:	4668      	mov	r0, sp
   15358:	b501      	push	{r0, lr}
   1535a:	9802      	ldr	r0, [sp, #8]
   1535c:	f000 f886 	bl	1546c <__udivmoddi4>
   15360:	9b01      	ldr	r3, [sp, #4]
   15362:	469e      	mov	lr, r3
   15364:	b002      	add	sp, #8
   15366:	bc0c      	pop	{r2, r3}
   15368:	4770      	bx	lr
   1536a:	46c0      	nop			; (mov r8, r8)

0001536c <__aeabi_lmul>:
   1536c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1536e:	46ce      	mov	lr, r9
   15370:	4647      	mov	r7, r8
   15372:	0415      	lsls	r5, r2, #16
   15374:	0c2d      	lsrs	r5, r5, #16
   15376:	002e      	movs	r6, r5
   15378:	b580      	push	{r7, lr}
   1537a:	0407      	lsls	r7, r0, #16
   1537c:	0c14      	lsrs	r4, r2, #16
   1537e:	0c3f      	lsrs	r7, r7, #16
   15380:	4699      	mov	r9, r3
   15382:	0c03      	lsrs	r3, r0, #16
   15384:	437e      	muls	r6, r7
   15386:	435d      	muls	r5, r3
   15388:	4367      	muls	r7, r4
   1538a:	4363      	muls	r3, r4
   1538c:	197f      	adds	r7, r7, r5
   1538e:	0c34      	lsrs	r4, r6, #16
   15390:	19e4      	adds	r4, r4, r7
   15392:	469c      	mov	ip, r3
   15394:	42a5      	cmp	r5, r4
   15396:	d903      	bls.n	153a0 <__aeabi_lmul+0x34>
   15398:	2380      	movs	r3, #128	; 0x80
   1539a:	025b      	lsls	r3, r3, #9
   1539c:	4698      	mov	r8, r3
   1539e:	44c4      	add	ip, r8
   153a0:	464b      	mov	r3, r9
   153a2:	4351      	muls	r1, r2
   153a4:	4343      	muls	r3, r0
   153a6:	0436      	lsls	r6, r6, #16
   153a8:	0c36      	lsrs	r6, r6, #16
   153aa:	0c25      	lsrs	r5, r4, #16
   153ac:	0424      	lsls	r4, r4, #16
   153ae:	4465      	add	r5, ip
   153b0:	19a4      	adds	r4, r4, r6
   153b2:	1859      	adds	r1, r3, r1
   153b4:	1949      	adds	r1, r1, r5
   153b6:	0020      	movs	r0, r4
   153b8:	bc0c      	pop	{r2, r3}
   153ba:	4690      	mov	r8, r2
   153bc:	4699      	mov	r9, r3
   153be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000153c0 <__aeabi_f2uiz>:
   153c0:	219e      	movs	r1, #158	; 0x9e
   153c2:	b510      	push	{r4, lr}
   153c4:	05c9      	lsls	r1, r1, #23
   153c6:	1c04      	adds	r4, r0, #0
   153c8:	f7ff ffa6 	bl	15318 <__aeabi_fcmpge>
   153cc:	2800      	cmp	r0, #0
   153ce:	d103      	bne.n	153d8 <__aeabi_f2uiz+0x18>
   153d0:	1c20      	adds	r0, r4, #0
   153d2:	f000 ff49 	bl	16268 <__aeabi_f2iz>
   153d6:	bd10      	pop	{r4, pc}
   153d8:	219e      	movs	r1, #158	; 0x9e
   153da:	1c20      	adds	r0, r4, #0
   153dc:	05c9      	lsls	r1, r1, #23
   153de:	f000 fda7 	bl	15f30 <__aeabi_fsub>
   153e2:	f000 ff41 	bl	16268 <__aeabi_f2iz>
   153e6:	2380      	movs	r3, #128	; 0x80
   153e8:	061b      	lsls	r3, r3, #24
   153ea:	469c      	mov	ip, r3
   153ec:	4460      	add	r0, ip
   153ee:	e7f2      	b.n	153d6 <__aeabi_f2uiz+0x16>

000153f0 <__aeabi_d2uiz>:
   153f0:	b570      	push	{r4, r5, r6, lr}
   153f2:	2200      	movs	r2, #0
   153f4:	4b0c      	ldr	r3, [pc, #48]	; (15428 <__aeabi_d2uiz+0x38>)
   153f6:	0004      	movs	r4, r0
   153f8:	000d      	movs	r5, r1
   153fa:	f7ff ff53 	bl	152a4 <__aeabi_dcmpge>
   153fe:	2800      	cmp	r0, #0
   15400:	d104      	bne.n	1540c <__aeabi_d2uiz+0x1c>
   15402:	0020      	movs	r0, r4
   15404:	0029      	movs	r1, r5
   15406:	f002 fcbf 	bl	17d88 <__aeabi_d2iz>
   1540a:	bd70      	pop	{r4, r5, r6, pc}
   1540c:	4b06      	ldr	r3, [pc, #24]	; (15428 <__aeabi_d2uiz+0x38>)
   1540e:	2200      	movs	r2, #0
   15410:	0020      	movs	r0, r4
   15412:	0029      	movs	r1, r5
   15414:	f002 f9a2 	bl	1775c <__aeabi_dsub>
   15418:	f002 fcb6 	bl	17d88 <__aeabi_d2iz>
   1541c:	2380      	movs	r3, #128	; 0x80
   1541e:	061b      	lsls	r3, r3, #24
   15420:	469c      	mov	ip, r3
   15422:	4460      	add	r0, ip
   15424:	e7f1      	b.n	1540a <__aeabi_d2uiz+0x1a>
   15426:	46c0      	nop			; (mov r8, r8)
   15428:	41e00000 	.word	0x41e00000

0001542c <__aeabi_f2ulz>:
   1542c:	b570      	push	{r4, r5, r6, lr}
   1542e:	f002 fd59 	bl	17ee4 <__aeabi_f2d>
   15432:	2200      	movs	r2, #0
   15434:	4b0b      	ldr	r3, [pc, #44]	; (15464 <__aeabi_f2ulz+0x38>)
   15436:	000d      	movs	r5, r1
   15438:	0004      	movs	r4, r0
   1543a:	f001 ff0f 	bl	1725c <__aeabi_dmul>
   1543e:	f7ff ffd7 	bl	153f0 <__aeabi_d2uiz>
   15442:	0006      	movs	r6, r0
   15444:	f002 fd16 	bl	17e74 <__aeabi_ui2d>
   15448:	2200      	movs	r2, #0
   1544a:	4b07      	ldr	r3, [pc, #28]	; (15468 <__aeabi_f2ulz+0x3c>)
   1544c:	f001 ff06 	bl	1725c <__aeabi_dmul>
   15450:	0002      	movs	r2, r0
   15452:	000b      	movs	r3, r1
   15454:	0020      	movs	r0, r4
   15456:	0029      	movs	r1, r5
   15458:	f002 f980 	bl	1775c <__aeabi_dsub>
   1545c:	f7ff ffc8 	bl	153f0 <__aeabi_d2uiz>
   15460:	0031      	movs	r1, r6
   15462:	bd70      	pop	{r4, r5, r6, pc}
   15464:	3df00000 	.word	0x3df00000
   15468:	41f00000 	.word	0x41f00000

0001546c <__udivmoddi4>:
   1546c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1546e:	4657      	mov	r7, sl
   15470:	464e      	mov	r6, r9
   15472:	4645      	mov	r5, r8
   15474:	46de      	mov	lr, fp
   15476:	b5e0      	push	{r5, r6, r7, lr}
   15478:	0004      	movs	r4, r0
   1547a:	b083      	sub	sp, #12
   1547c:	000d      	movs	r5, r1
   1547e:	4692      	mov	sl, r2
   15480:	4699      	mov	r9, r3
   15482:	428b      	cmp	r3, r1
   15484:	d82f      	bhi.n	154e6 <__udivmoddi4+0x7a>
   15486:	d02c      	beq.n	154e2 <__udivmoddi4+0x76>
   15488:	4649      	mov	r1, r9
   1548a:	4650      	mov	r0, sl
   1548c:	f002 fd9a 	bl	17fc4 <__clzdi2>
   15490:	0029      	movs	r1, r5
   15492:	0006      	movs	r6, r0
   15494:	0020      	movs	r0, r4
   15496:	f002 fd95 	bl	17fc4 <__clzdi2>
   1549a:	1a33      	subs	r3, r6, r0
   1549c:	4698      	mov	r8, r3
   1549e:	3b20      	subs	r3, #32
   154a0:	469b      	mov	fp, r3
   154a2:	d500      	bpl.n	154a6 <__udivmoddi4+0x3a>
   154a4:	e074      	b.n	15590 <__udivmoddi4+0x124>
   154a6:	4653      	mov	r3, sl
   154a8:	465a      	mov	r2, fp
   154aa:	4093      	lsls	r3, r2
   154ac:	001f      	movs	r7, r3
   154ae:	4653      	mov	r3, sl
   154b0:	4642      	mov	r2, r8
   154b2:	4093      	lsls	r3, r2
   154b4:	001e      	movs	r6, r3
   154b6:	42af      	cmp	r7, r5
   154b8:	d829      	bhi.n	1550e <__udivmoddi4+0xa2>
   154ba:	d026      	beq.n	1550a <__udivmoddi4+0x9e>
   154bc:	465b      	mov	r3, fp
   154be:	1ba4      	subs	r4, r4, r6
   154c0:	41bd      	sbcs	r5, r7
   154c2:	2b00      	cmp	r3, #0
   154c4:	da00      	bge.n	154c8 <__udivmoddi4+0x5c>
   154c6:	e079      	b.n	155bc <__udivmoddi4+0x150>
   154c8:	2200      	movs	r2, #0
   154ca:	2300      	movs	r3, #0
   154cc:	9200      	str	r2, [sp, #0]
   154ce:	9301      	str	r3, [sp, #4]
   154d0:	2301      	movs	r3, #1
   154d2:	465a      	mov	r2, fp
   154d4:	4093      	lsls	r3, r2
   154d6:	9301      	str	r3, [sp, #4]
   154d8:	2301      	movs	r3, #1
   154da:	4642      	mov	r2, r8
   154dc:	4093      	lsls	r3, r2
   154de:	9300      	str	r3, [sp, #0]
   154e0:	e019      	b.n	15516 <__udivmoddi4+0xaa>
   154e2:	4282      	cmp	r2, r0
   154e4:	d9d0      	bls.n	15488 <__udivmoddi4+0x1c>
   154e6:	2200      	movs	r2, #0
   154e8:	2300      	movs	r3, #0
   154ea:	9200      	str	r2, [sp, #0]
   154ec:	9301      	str	r3, [sp, #4]
   154ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154f0:	2b00      	cmp	r3, #0
   154f2:	d001      	beq.n	154f8 <__udivmoddi4+0x8c>
   154f4:	601c      	str	r4, [r3, #0]
   154f6:	605d      	str	r5, [r3, #4]
   154f8:	9800      	ldr	r0, [sp, #0]
   154fa:	9901      	ldr	r1, [sp, #4]
   154fc:	b003      	add	sp, #12
   154fe:	bc3c      	pop	{r2, r3, r4, r5}
   15500:	4690      	mov	r8, r2
   15502:	4699      	mov	r9, r3
   15504:	46a2      	mov	sl, r4
   15506:	46ab      	mov	fp, r5
   15508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1550a:	42a3      	cmp	r3, r4
   1550c:	d9d6      	bls.n	154bc <__udivmoddi4+0x50>
   1550e:	2200      	movs	r2, #0
   15510:	2300      	movs	r3, #0
   15512:	9200      	str	r2, [sp, #0]
   15514:	9301      	str	r3, [sp, #4]
   15516:	4643      	mov	r3, r8
   15518:	2b00      	cmp	r3, #0
   1551a:	d0e8      	beq.n	154ee <__udivmoddi4+0x82>
   1551c:	07fb      	lsls	r3, r7, #31
   1551e:	0872      	lsrs	r2, r6, #1
   15520:	431a      	orrs	r2, r3
   15522:	4646      	mov	r6, r8
   15524:	087b      	lsrs	r3, r7, #1
   15526:	e00e      	b.n	15546 <__udivmoddi4+0xda>
   15528:	42ab      	cmp	r3, r5
   1552a:	d101      	bne.n	15530 <__udivmoddi4+0xc4>
   1552c:	42a2      	cmp	r2, r4
   1552e:	d80c      	bhi.n	1554a <__udivmoddi4+0xde>
   15530:	1aa4      	subs	r4, r4, r2
   15532:	419d      	sbcs	r5, r3
   15534:	2001      	movs	r0, #1
   15536:	1924      	adds	r4, r4, r4
   15538:	416d      	adcs	r5, r5
   1553a:	2100      	movs	r1, #0
   1553c:	3e01      	subs	r6, #1
   1553e:	1824      	adds	r4, r4, r0
   15540:	414d      	adcs	r5, r1
   15542:	2e00      	cmp	r6, #0
   15544:	d006      	beq.n	15554 <__udivmoddi4+0xe8>
   15546:	42ab      	cmp	r3, r5
   15548:	d9ee      	bls.n	15528 <__udivmoddi4+0xbc>
   1554a:	3e01      	subs	r6, #1
   1554c:	1924      	adds	r4, r4, r4
   1554e:	416d      	adcs	r5, r5
   15550:	2e00      	cmp	r6, #0
   15552:	d1f8      	bne.n	15546 <__udivmoddi4+0xda>
   15554:	465b      	mov	r3, fp
   15556:	9800      	ldr	r0, [sp, #0]
   15558:	9901      	ldr	r1, [sp, #4]
   1555a:	1900      	adds	r0, r0, r4
   1555c:	4169      	adcs	r1, r5
   1555e:	2b00      	cmp	r3, #0
   15560:	db22      	blt.n	155a8 <__udivmoddi4+0x13c>
   15562:	002b      	movs	r3, r5
   15564:	465a      	mov	r2, fp
   15566:	40d3      	lsrs	r3, r2
   15568:	002a      	movs	r2, r5
   1556a:	4644      	mov	r4, r8
   1556c:	40e2      	lsrs	r2, r4
   1556e:	001c      	movs	r4, r3
   15570:	465b      	mov	r3, fp
   15572:	0015      	movs	r5, r2
   15574:	2b00      	cmp	r3, #0
   15576:	db2c      	blt.n	155d2 <__udivmoddi4+0x166>
   15578:	0026      	movs	r6, r4
   1557a:	409e      	lsls	r6, r3
   1557c:	0033      	movs	r3, r6
   1557e:	0026      	movs	r6, r4
   15580:	4647      	mov	r7, r8
   15582:	40be      	lsls	r6, r7
   15584:	0032      	movs	r2, r6
   15586:	1a80      	subs	r0, r0, r2
   15588:	4199      	sbcs	r1, r3
   1558a:	9000      	str	r0, [sp, #0]
   1558c:	9101      	str	r1, [sp, #4]
   1558e:	e7ae      	b.n	154ee <__udivmoddi4+0x82>
   15590:	4642      	mov	r2, r8
   15592:	2320      	movs	r3, #32
   15594:	1a9b      	subs	r3, r3, r2
   15596:	4652      	mov	r2, sl
   15598:	40da      	lsrs	r2, r3
   1559a:	4641      	mov	r1, r8
   1559c:	0013      	movs	r3, r2
   1559e:	464a      	mov	r2, r9
   155a0:	408a      	lsls	r2, r1
   155a2:	0017      	movs	r7, r2
   155a4:	431f      	orrs	r7, r3
   155a6:	e782      	b.n	154ae <__udivmoddi4+0x42>
   155a8:	4642      	mov	r2, r8
   155aa:	2320      	movs	r3, #32
   155ac:	1a9b      	subs	r3, r3, r2
   155ae:	002a      	movs	r2, r5
   155b0:	4646      	mov	r6, r8
   155b2:	409a      	lsls	r2, r3
   155b4:	0023      	movs	r3, r4
   155b6:	40f3      	lsrs	r3, r6
   155b8:	4313      	orrs	r3, r2
   155ba:	e7d5      	b.n	15568 <__udivmoddi4+0xfc>
   155bc:	4642      	mov	r2, r8
   155be:	2320      	movs	r3, #32
   155c0:	2100      	movs	r1, #0
   155c2:	1a9b      	subs	r3, r3, r2
   155c4:	2200      	movs	r2, #0
   155c6:	9100      	str	r1, [sp, #0]
   155c8:	9201      	str	r2, [sp, #4]
   155ca:	2201      	movs	r2, #1
   155cc:	40da      	lsrs	r2, r3
   155ce:	9201      	str	r2, [sp, #4]
   155d0:	e782      	b.n	154d8 <__udivmoddi4+0x6c>
   155d2:	4642      	mov	r2, r8
   155d4:	2320      	movs	r3, #32
   155d6:	0026      	movs	r6, r4
   155d8:	1a9b      	subs	r3, r3, r2
   155da:	40de      	lsrs	r6, r3
   155dc:	002f      	movs	r7, r5
   155de:	46b4      	mov	ip, r6
   155e0:	4097      	lsls	r7, r2
   155e2:	4666      	mov	r6, ip
   155e4:	003b      	movs	r3, r7
   155e6:	4333      	orrs	r3, r6
   155e8:	e7c9      	b.n	1557e <__udivmoddi4+0x112>
   155ea:	46c0      	nop			; (mov r8, r8)

000155ec <__aeabi_fadd>:
   155ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   155ee:	46c6      	mov	lr, r8
   155f0:	024e      	lsls	r6, r1, #9
   155f2:	0247      	lsls	r7, r0, #9
   155f4:	0a76      	lsrs	r6, r6, #9
   155f6:	0a7b      	lsrs	r3, r7, #9
   155f8:	0044      	lsls	r4, r0, #1
   155fa:	0fc5      	lsrs	r5, r0, #31
   155fc:	00f7      	lsls	r7, r6, #3
   155fe:	0048      	lsls	r0, r1, #1
   15600:	4698      	mov	r8, r3
   15602:	b500      	push	{lr}
   15604:	0e24      	lsrs	r4, r4, #24
   15606:	002a      	movs	r2, r5
   15608:	00db      	lsls	r3, r3, #3
   1560a:	0e00      	lsrs	r0, r0, #24
   1560c:	0fc9      	lsrs	r1, r1, #31
   1560e:	46bc      	mov	ip, r7
   15610:	428d      	cmp	r5, r1
   15612:	d067      	beq.n	156e4 <__aeabi_fadd+0xf8>
   15614:	1a22      	subs	r2, r4, r0
   15616:	2a00      	cmp	r2, #0
   15618:	dc00      	bgt.n	1561c <__aeabi_fadd+0x30>
   1561a:	e0a5      	b.n	15768 <__aeabi_fadd+0x17c>
   1561c:	2800      	cmp	r0, #0
   1561e:	d13a      	bne.n	15696 <__aeabi_fadd+0xaa>
   15620:	2f00      	cmp	r7, #0
   15622:	d100      	bne.n	15626 <__aeabi_fadd+0x3a>
   15624:	e093      	b.n	1574e <__aeabi_fadd+0x162>
   15626:	1e51      	subs	r1, r2, #1
   15628:	2900      	cmp	r1, #0
   1562a:	d000      	beq.n	1562e <__aeabi_fadd+0x42>
   1562c:	e0bc      	b.n	157a8 <__aeabi_fadd+0x1bc>
   1562e:	2401      	movs	r4, #1
   15630:	1bdb      	subs	r3, r3, r7
   15632:	015a      	lsls	r2, r3, #5
   15634:	d546      	bpl.n	156c4 <__aeabi_fadd+0xd8>
   15636:	019b      	lsls	r3, r3, #6
   15638:	099e      	lsrs	r6, r3, #6
   1563a:	0030      	movs	r0, r6
   1563c:	f002 fca4 	bl	17f88 <__clzsi2>
   15640:	3805      	subs	r0, #5
   15642:	4086      	lsls	r6, r0
   15644:	4284      	cmp	r4, r0
   15646:	dd00      	ble.n	1564a <__aeabi_fadd+0x5e>
   15648:	e09d      	b.n	15786 <__aeabi_fadd+0x19a>
   1564a:	1b04      	subs	r4, r0, r4
   1564c:	0032      	movs	r2, r6
   1564e:	2020      	movs	r0, #32
   15650:	3401      	adds	r4, #1
   15652:	40e2      	lsrs	r2, r4
   15654:	1b04      	subs	r4, r0, r4
   15656:	40a6      	lsls	r6, r4
   15658:	0033      	movs	r3, r6
   1565a:	1e5e      	subs	r6, r3, #1
   1565c:	41b3      	sbcs	r3, r6
   1565e:	2400      	movs	r4, #0
   15660:	4313      	orrs	r3, r2
   15662:	075a      	lsls	r2, r3, #29
   15664:	d004      	beq.n	15670 <__aeabi_fadd+0x84>
   15666:	220f      	movs	r2, #15
   15668:	401a      	ands	r2, r3
   1566a:	2a04      	cmp	r2, #4
   1566c:	d000      	beq.n	15670 <__aeabi_fadd+0x84>
   1566e:	3304      	adds	r3, #4
   15670:	015a      	lsls	r2, r3, #5
   15672:	d529      	bpl.n	156c8 <__aeabi_fadd+0xdc>
   15674:	3401      	adds	r4, #1
   15676:	2cff      	cmp	r4, #255	; 0xff
   15678:	d100      	bne.n	1567c <__aeabi_fadd+0x90>
   1567a:	e081      	b.n	15780 <__aeabi_fadd+0x194>
   1567c:	002a      	movs	r2, r5
   1567e:	019b      	lsls	r3, r3, #6
   15680:	0a5b      	lsrs	r3, r3, #9
   15682:	b2e4      	uxtb	r4, r4
   15684:	025b      	lsls	r3, r3, #9
   15686:	05e4      	lsls	r4, r4, #23
   15688:	0a58      	lsrs	r0, r3, #9
   1568a:	07d2      	lsls	r2, r2, #31
   1568c:	4320      	orrs	r0, r4
   1568e:	4310      	orrs	r0, r2
   15690:	bc04      	pop	{r2}
   15692:	4690      	mov	r8, r2
   15694:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15696:	2cff      	cmp	r4, #255	; 0xff
   15698:	d0e3      	beq.n	15662 <__aeabi_fadd+0x76>
   1569a:	2180      	movs	r1, #128	; 0x80
   1569c:	0038      	movs	r0, r7
   1569e:	04c9      	lsls	r1, r1, #19
   156a0:	4308      	orrs	r0, r1
   156a2:	4684      	mov	ip, r0
   156a4:	2a1b      	cmp	r2, #27
   156a6:	dd00      	ble.n	156aa <__aeabi_fadd+0xbe>
   156a8:	e082      	b.n	157b0 <__aeabi_fadd+0x1c4>
   156aa:	2020      	movs	r0, #32
   156ac:	4661      	mov	r1, ip
   156ae:	40d1      	lsrs	r1, r2
   156b0:	1a82      	subs	r2, r0, r2
   156b2:	4660      	mov	r0, ip
   156b4:	4090      	lsls	r0, r2
   156b6:	0002      	movs	r2, r0
   156b8:	1e50      	subs	r0, r2, #1
   156ba:	4182      	sbcs	r2, r0
   156bc:	430a      	orrs	r2, r1
   156be:	1a9b      	subs	r3, r3, r2
   156c0:	015a      	lsls	r2, r3, #5
   156c2:	d4b8      	bmi.n	15636 <__aeabi_fadd+0x4a>
   156c4:	075a      	lsls	r2, r3, #29
   156c6:	d1ce      	bne.n	15666 <__aeabi_fadd+0x7a>
   156c8:	08de      	lsrs	r6, r3, #3
   156ca:	002a      	movs	r2, r5
   156cc:	2cff      	cmp	r4, #255	; 0xff
   156ce:	d13a      	bne.n	15746 <__aeabi_fadd+0x15a>
   156d0:	2e00      	cmp	r6, #0
   156d2:	d100      	bne.n	156d6 <__aeabi_fadd+0xea>
   156d4:	e0ae      	b.n	15834 <__aeabi_fadd+0x248>
   156d6:	2380      	movs	r3, #128	; 0x80
   156d8:	03db      	lsls	r3, r3, #15
   156da:	4333      	orrs	r3, r6
   156dc:	025b      	lsls	r3, r3, #9
   156de:	0a5b      	lsrs	r3, r3, #9
   156e0:	24ff      	movs	r4, #255	; 0xff
   156e2:	e7cf      	b.n	15684 <__aeabi_fadd+0x98>
   156e4:	1a21      	subs	r1, r4, r0
   156e6:	2900      	cmp	r1, #0
   156e8:	dd52      	ble.n	15790 <__aeabi_fadd+0x1a4>
   156ea:	2800      	cmp	r0, #0
   156ec:	d031      	beq.n	15752 <__aeabi_fadd+0x166>
   156ee:	2cff      	cmp	r4, #255	; 0xff
   156f0:	d0b7      	beq.n	15662 <__aeabi_fadd+0x76>
   156f2:	2080      	movs	r0, #128	; 0x80
   156f4:	003e      	movs	r6, r7
   156f6:	04c0      	lsls	r0, r0, #19
   156f8:	4306      	orrs	r6, r0
   156fa:	46b4      	mov	ip, r6
   156fc:	291b      	cmp	r1, #27
   156fe:	dd00      	ble.n	15702 <__aeabi_fadd+0x116>
   15700:	e0aa      	b.n	15858 <__aeabi_fadd+0x26c>
   15702:	2620      	movs	r6, #32
   15704:	4660      	mov	r0, ip
   15706:	40c8      	lsrs	r0, r1
   15708:	1a71      	subs	r1, r6, r1
   1570a:	4666      	mov	r6, ip
   1570c:	408e      	lsls	r6, r1
   1570e:	0031      	movs	r1, r6
   15710:	1e4e      	subs	r6, r1, #1
   15712:	41b1      	sbcs	r1, r6
   15714:	4301      	orrs	r1, r0
   15716:	185b      	adds	r3, r3, r1
   15718:	0159      	lsls	r1, r3, #5
   1571a:	d5d3      	bpl.n	156c4 <__aeabi_fadd+0xd8>
   1571c:	3401      	adds	r4, #1
   1571e:	2cff      	cmp	r4, #255	; 0xff
   15720:	d100      	bne.n	15724 <__aeabi_fadd+0x138>
   15722:	e087      	b.n	15834 <__aeabi_fadd+0x248>
   15724:	2201      	movs	r2, #1
   15726:	4978      	ldr	r1, [pc, #480]	; (15908 <__aeabi_fadd+0x31c>)
   15728:	401a      	ands	r2, r3
   1572a:	085b      	lsrs	r3, r3, #1
   1572c:	400b      	ands	r3, r1
   1572e:	4313      	orrs	r3, r2
   15730:	e797      	b.n	15662 <__aeabi_fadd+0x76>
   15732:	2c00      	cmp	r4, #0
   15734:	d000      	beq.n	15738 <__aeabi_fadd+0x14c>
   15736:	e0a7      	b.n	15888 <__aeabi_fadd+0x29c>
   15738:	2b00      	cmp	r3, #0
   1573a:	d000      	beq.n	1573e <__aeabi_fadd+0x152>
   1573c:	e0b6      	b.n	158ac <__aeabi_fadd+0x2c0>
   1573e:	1e3b      	subs	r3, r7, #0
   15740:	d162      	bne.n	15808 <__aeabi_fadd+0x21c>
   15742:	2600      	movs	r6, #0
   15744:	2200      	movs	r2, #0
   15746:	0273      	lsls	r3, r6, #9
   15748:	0a5b      	lsrs	r3, r3, #9
   1574a:	b2e4      	uxtb	r4, r4
   1574c:	e79a      	b.n	15684 <__aeabi_fadd+0x98>
   1574e:	0014      	movs	r4, r2
   15750:	e787      	b.n	15662 <__aeabi_fadd+0x76>
   15752:	2f00      	cmp	r7, #0
   15754:	d04d      	beq.n	157f2 <__aeabi_fadd+0x206>
   15756:	1e48      	subs	r0, r1, #1
   15758:	2800      	cmp	r0, #0
   1575a:	d157      	bne.n	1580c <__aeabi_fadd+0x220>
   1575c:	4463      	add	r3, ip
   1575e:	2401      	movs	r4, #1
   15760:	015a      	lsls	r2, r3, #5
   15762:	d5af      	bpl.n	156c4 <__aeabi_fadd+0xd8>
   15764:	2402      	movs	r4, #2
   15766:	e7dd      	b.n	15724 <__aeabi_fadd+0x138>
   15768:	2a00      	cmp	r2, #0
   1576a:	d124      	bne.n	157b6 <__aeabi_fadd+0x1ca>
   1576c:	1c62      	adds	r2, r4, #1
   1576e:	b2d2      	uxtb	r2, r2
   15770:	2a01      	cmp	r2, #1
   15772:	ddde      	ble.n	15732 <__aeabi_fadd+0x146>
   15774:	1bde      	subs	r6, r3, r7
   15776:	0172      	lsls	r2, r6, #5
   15778:	d535      	bpl.n	157e6 <__aeabi_fadd+0x1fa>
   1577a:	1afe      	subs	r6, r7, r3
   1577c:	000d      	movs	r5, r1
   1577e:	e75c      	b.n	1563a <__aeabi_fadd+0x4e>
   15780:	002a      	movs	r2, r5
   15782:	2300      	movs	r3, #0
   15784:	e77e      	b.n	15684 <__aeabi_fadd+0x98>
   15786:	0033      	movs	r3, r6
   15788:	4a60      	ldr	r2, [pc, #384]	; (1590c <__aeabi_fadd+0x320>)
   1578a:	1a24      	subs	r4, r4, r0
   1578c:	4013      	ands	r3, r2
   1578e:	e768      	b.n	15662 <__aeabi_fadd+0x76>
   15790:	2900      	cmp	r1, #0
   15792:	d163      	bne.n	1585c <__aeabi_fadd+0x270>
   15794:	1c61      	adds	r1, r4, #1
   15796:	b2c8      	uxtb	r0, r1
   15798:	2801      	cmp	r0, #1
   1579a:	dd4e      	ble.n	1583a <__aeabi_fadd+0x24e>
   1579c:	29ff      	cmp	r1, #255	; 0xff
   1579e:	d049      	beq.n	15834 <__aeabi_fadd+0x248>
   157a0:	4463      	add	r3, ip
   157a2:	085b      	lsrs	r3, r3, #1
   157a4:	000c      	movs	r4, r1
   157a6:	e75c      	b.n	15662 <__aeabi_fadd+0x76>
   157a8:	2aff      	cmp	r2, #255	; 0xff
   157aa:	d041      	beq.n	15830 <__aeabi_fadd+0x244>
   157ac:	000a      	movs	r2, r1
   157ae:	e779      	b.n	156a4 <__aeabi_fadd+0xb8>
   157b0:	2201      	movs	r2, #1
   157b2:	1a9b      	subs	r3, r3, r2
   157b4:	e784      	b.n	156c0 <__aeabi_fadd+0xd4>
   157b6:	2c00      	cmp	r4, #0
   157b8:	d01d      	beq.n	157f6 <__aeabi_fadd+0x20a>
   157ba:	28ff      	cmp	r0, #255	; 0xff
   157bc:	d022      	beq.n	15804 <__aeabi_fadd+0x218>
   157be:	2480      	movs	r4, #128	; 0x80
   157c0:	04e4      	lsls	r4, r4, #19
   157c2:	4252      	negs	r2, r2
   157c4:	4323      	orrs	r3, r4
   157c6:	2a1b      	cmp	r2, #27
   157c8:	dd00      	ble.n	157cc <__aeabi_fadd+0x1e0>
   157ca:	e08a      	b.n	158e2 <__aeabi_fadd+0x2f6>
   157cc:	001c      	movs	r4, r3
   157ce:	2520      	movs	r5, #32
   157d0:	40d4      	lsrs	r4, r2
   157d2:	1aaa      	subs	r2, r5, r2
   157d4:	4093      	lsls	r3, r2
   157d6:	1e5a      	subs	r2, r3, #1
   157d8:	4193      	sbcs	r3, r2
   157da:	4323      	orrs	r3, r4
   157dc:	4662      	mov	r2, ip
   157de:	0004      	movs	r4, r0
   157e0:	1ad3      	subs	r3, r2, r3
   157e2:	000d      	movs	r5, r1
   157e4:	e725      	b.n	15632 <__aeabi_fadd+0x46>
   157e6:	2e00      	cmp	r6, #0
   157e8:	d000      	beq.n	157ec <__aeabi_fadd+0x200>
   157ea:	e726      	b.n	1563a <__aeabi_fadd+0x4e>
   157ec:	2200      	movs	r2, #0
   157ee:	2400      	movs	r4, #0
   157f0:	e7a9      	b.n	15746 <__aeabi_fadd+0x15a>
   157f2:	000c      	movs	r4, r1
   157f4:	e735      	b.n	15662 <__aeabi_fadd+0x76>
   157f6:	2b00      	cmp	r3, #0
   157f8:	d04d      	beq.n	15896 <__aeabi_fadd+0x2aa>
   157fa:	43d2      	mvns	r2, r2
   157fc:	2a00      	cmp	r2, #0
   157fe:	d0ed      	beq.n	157dc <__aeabi_fadd+0x1f0>
   15800:	28ff      	cmp	r0, #255	; 0xff
   15802:	d1e0      	bne.n	157c6 <__aeabi_fadd+0x1da>
   15804:	4663      	mov	r3, ip
   15806:	24ff      	movs	r4, #255	; 0xff
   15808:	000d      	movs	r5, r1
   1580a:	e72a      	b.n	15662 <__aeabi_fadd+0x76>
   1580c:	29ff      	cmp	r1, #255	; 0xff
   1580e:	d00f      	beq.n	15830 <__aeabi_fadd+0x244>
   15810:	0001      	movs	r1, r0
   15812:	e773      	b.n	156fc <__aeabi_fadd+0x110>
   15814:	2b00      	cmp	r3, #0
   15816:	d061      	beq.n	158dc <__aeabi_fadd+0x2f0>
   15818:	24ff      	movs	r4, #255	; 0xff
   1581a:	2f00      	cmp	r7, #0
   1581c:	d100      	bne.n	15820 <__aeabi_fadd+0x234>
   1581e:	e720      	b.n	15662 <__aeabi_fadd+0x76>
   15820:	2280      	movs	r2, #128	; 0x80
   15822:	4641      	mov	r1, r8
   15824:	03d2      	lsls	r2, r2, #15
   15826:	4211      	tst	r1, r2
   15828:	d002      	beq.n	15830 <__aeabi_fadd+0x244>
   1582a:	4216      	tst	r6, r2
   1582c:	d100      	bne.n	15830 <__aeabi_fadd+0x244>
   1582e:	003b      	movs	r3, r7
   15830:	24ff      	movs	r4, #255	; 0xff
   15832:	e716      	b.n	15662 <__aeabi_fadd+0x76>
   15834:	24ff      	movs	r4, #255	; 0xff
   15836:	2300      	movs	r3, #0
   15838:	e724      	b.n	15684 <__aeabi_fadd+0x98>
   1583a:	2c00      	cmp	r4, #0
   1583c:	d1ea      	bne.n	15814 <__aeabi_fadd+0x228>
   1583e:	2b00      	cmp	r3, #0
   15840:	d058      	beq.n	158f4 <__aeabi_fadd+0x308>
   15842:	2f00      	cmp	r7, #0
   15844:	d100      	bne.n	15848 <__aeabi_fadd+0x25c>
   15846:	e70c      	b.n	15662 <__aeabi_fadd+0x76>
   15848:	4463      	add	r3, ip
   1584a:	015a      	lsls	r2, r3, #5
   1584c:	d400      	bmi.n	15850 <__aeabi_fadd+0x264>
   1584e:	e739      	b.n	156c4 <__aeabi_fadd+0xd8>
   15850:	4a2e      	ldr	r2, [pc, #184]	; (1590c <__aeabi_fadd+0x320>)
   15852:	000c      	movs	r4, r1
   15854:	4013      	ands	r3, r2
   15856:	e704      	b.n	15662 <__aeabi_fadd+0x76>
   15858:	2101      	movs	r1, #1
   1585a:	e75c      	b.n	15716 <__aeabi_fadd+0x12a>
   1585c:	2c00      	cmp	r4, #0
   1585e:	d11e      	bne.n	1589e <__aeabi_fadd+0x2b2>
   15860:	2b00      	cmp	r3, #0
   15862:	d040      	beq.n	158e6 <__aeabi_fadd+0x2fa>
   15864:	43c9      	mvns	r1, r1
   15866:	2900      	cmp	r1, #0
   15868:	d00b      	beq.n	15882 <__aeabi_fadd+0x296>
   1586a:	28ff      	cmp	r0, #255	; 0xff
   1586c:	d036      	beq.n	158dc <__aeabi_fadd+0x2f0>
   1586e:	291b      	cmp	r1, #27
   15870:	dc47      	bgt.n	15902 <__aeabi_fadd+0x316>
   15872:	001c      	movs	r4, r3
   15874:	2620      	movs	r6, #32
   15876:	40cc      	lsrs	r4, r1
   15878:	1a71      	subs	r1, r6, r1
   1587a:	408b      	lsls	r3, r1
   1587c:	1e59      	subs	r1, r3, #1
   1587e:	418b      	sbcs	r3, r1
   15880:	4323      	orrs	r3, r4
   15882:	4463      	add	r3, ip
   15884:	0004      	movs	r4, r0
   15886:	e747      	b.n	15718 <__aeabi_fadd+0x12c>
   15888:	2b00      	cmp	r3, #0
   1588a:	d118      	bne.n	158be <__aeabi_fadd+0x2d2>
   1588c:	1e3b      	subs	r3, r7, #0
   1588e:	d02d      	beq.n	158ec <__aeabi_fadd+0x300>
   15890:	000d      	movs	r5, r1
   15892:	24ff      	movs	r4, #255	; 0xff
   15894:	e6e5      	b.n	15662 <__aeabi_fadd+0x76>
   15896:	003b      	movs	r3, r7
   15898:	0004      	movs	r4, r0
   1589a:	000d      	movs	r5, r1
   1589c:	e6e1      	b.n	15662 <__aeabi_fadd+0x76>
   1589e:	28ff      	cmp	r0, #255	; 0xff
   158a0:	d01c      	beq.n	158dc <__aeabi_fadd+0x2f0>
   158a2:	2480      	movs	r4, #128	; 0x80
   158a4:	04e4      	lsls	r4, r4, #19
   158a6:	4249      	negs	r1, r1
   158a8:	4323      	orrs	r3, r4
   158aa:	e7e0      	b.n	1586e <__aeabi_fadd+0x282>
   158ac:	2f00      	cmp	r7, #0
   158ae:	d100      	bne.n	158b2 <__aeabi_fadd+0x2c6>
   158b0:	e6d7      	b.n	15662 <__aeabi_fadd+0x76>
   158b2:	1bde      	subs	r6, r3, r7
   158b4:	0172      	lsls	r2, r6, #5
   158b6:	d51f      	bpl.n	158f8 <__aeabi_fadd+0x30c>
   158b8:	1afb      	subs	r3, r7, r3
   158ba:	000d      	movs	r5, r1
   158bc:	e6d1      	b.n	15662 <__aeabi_fadd+0x76>
   158be:	24ff      	movs	r4, #255	; 0xff
   158c0:	2f00      	cmp	r7, #0
   158c2:	d100      	bne.n	158c6 <__aeabi_fadd+0x2da>
   158c4:	e6cd      	b.n	15662 <__aeabi_fadd+0x76>
   158c6:	2280      	movs	r2, #128	; 0x80
   158c8:	4640      	mov	r0, r8
   158ca:	03d2      	lsls	r2, r2, #15
   158cc:	4210      	tst	r0, r2
   158ce:	d0af      	beq.n	15830 <__aeabi_fadd+0x244>
   158d0:	4216      	tst	r6, r2
   158d2:	d1ad      	bne.n	15830 <__aeabi_fadd+0x244>
   158d4:	003b      	movs	r3, r7
   158d6:	000d      	movs	r5, r1
   158d8:	24ff      	movs	r4, #255	; 0xff
   158da:	e6c2      	b.n	15662 <__aeabi_fadd+0x76>
   158dc:	4663      	mov	r3, ip
   158de:	24ff      	movs	r4, #255	; 0xff
   158e0:	e6bf      	b.n	15662 <__aeabi_fadd+0x76>
   158e2:	2301      	movs	r3, #1
   158e4:	e77a      	b.n	157dc <__aeabi_fadd+0x1f0>
   158e6:	003b      	movs	r3, r7
   158e8:	0004      	movs	r4, r0
   158ea:	e6ba      	b.n	15662 <__aeabi_fadd+0x76>
   158ec:	2680      	movs	r6, #128	; 0x80
   158ee:	2200      	movs	r2, #0
   158f0:	03f6      	lsls	r6, r6, #15
   158f2:	e6f0      	b.n	156d6 <__aeabi_fadd+0xea>
   158f4:	003b      	movs	r3, r7
   158f6:	e6b4      	b.n	15662 <__aeabi_fadd+0x76>
   158f8:	1e33      	subs	r3, r6, #0
   158fa:	d000      	beq.n	158fe <__aeabi_fadd+0x312>
   158fc:	e6e2      	b.n	156c4 <__aeabi_fadd+0xd8>
   158fe:	2200      	movs	r2, #0
   15900:	e721      	b.n	15746 <__aeabi_fadd+0x15a>
   15902:	2301      	movs	r3, #1
   15904:	e7bd      	b.n	15882 <__aeabi_fadd+0x296>
   15906:	46c0      	nop			; (mov r8, r8)
   15908:	7dffffff 	.word	0x7dffffff
   1590c:	fbffffff 	.word	0xfbffffff

00015910 <__aeabi_fdiv>:
   15910:	b5f0      	push	{r4, r5, r6, r7, lr}
   15912:	4657      	mov	r7, sl
   15914:	464e      	mov	r6, r9
   15916:	46de      	mov	lr, fp
   15918:	4645      	mov	r5, r8
   1591a:	b5e0      	push	{r5, r6, r7, lr}
   1591c:	0244      	lsls	r4, r0, #9
   1591e:	0043      	lsls	r3, r0, #1
   15920:	0fc6      	lsrs	r6, r0, #31
   15922:	b083      	sub	sp, #12
   15924:	1c0f      	adds	r7, r1, #0
   15926:	0a64      	lsrs	r4, r4, #9
   15928:	0e1b      	lsrs	r3, r3, #24
   1592a:	46b2      	mov	sl, r6
   1592c:	d053      	beq.n	159d6 <__aeabi_fdiv+0xc6>
   1592e:	2bff      	cmp	r3, #255	; 0xff
   15930:	d027      	beq.n	15982 <__aeabi_fdiv+0x72>
   15932:	2280      	movs	r2, #128	; 0x80
   15934:	00e4      	lsls	r4, r4, #3
   15936:	04d2      	lsls	r2, r2, #19
   15938:	4314      	orrs	r4, r2
   1593a:	227f      	movs	r2, #127	; 0x7f
   1593c:	4252      	negs	r2, r2
   1593e:	4690      	mov	r8, r2
   15940:	4498      	add	r8, r3
   15942:	2300      	movs	r3, #0
   15944:	4699      	mov	r9, r3
   15946:	469b      	mov	fp, r3
   15948:	027d      	lsls	r5, r7, #9
   1594a:	0078      	lsls	r0, r7, #1
   1594c:	0ffb      	lsrs	r3, r7, #31
   1594e:	0a6d      	lsrs	r5, r5, #9
   15950:	0e00      	lsrs	r0, r0, #24
   15952:	9300      	str	r3, [sp, #0]
   15954:	d024      	beq.n	159a0 <__aeabi_fdiv+0x90>
   15956:	28ff      	cmp	r0, #255	; 0xff
   15958:	d046      	beq.n	159e8 <__aeabi_fdiv+0xd8>
   1595a:	2380      	movs	r3, #128	; 0x80
   1595c:	2100      	movs	r1, #0
   1595e:	00ed      	lsls	r5, r5, #3
   15960:	04db      	lsls	r3, r3, #19
   15962:	431d      	orrs	r5, r3
   15964:	387f      	subs	r0, #127	; 0x7f
   15966:	4647      	mov	r7, r8
   15968:	1a38      	subs	r0, r7, r0
   1596a:	464f      	mov	r7, r9
   1596c:	430f      	orrs	r7, r1
   1596e:	00bf      	lsls	r7, r7, #2
   15970:	46b9      	mov	r9, r7
   15972:	0033      	movs	r3, r6
   15974:	9a00      	ldr	r2, [sp, #0]
   15976:	4f87      	ldr	r7, [pc, #540]	; (15b94 <__aeabi_fdiv+0x284>)
   15978:	4053      	eors	r3, r2
   1597a:	464a      	mov	r2, r9
   1597c:	58ba      	ldr	r2, [r7, r2]
   1597e:	9301      	str	r3, [sp, #4]
   15980:	4697      	mov	pc, r2
   15982:	2c00      	cmp	r4, #0
   15984:	d14e      	bne.n	15a24 <__aeabi_fdiv+0x114>
   15986:	2308      	movs	r3, #8
   15988:	4699      	mov	r9, r3
   1598a:	33f7      	adds	r3, #247	; 0xf7
   1598c:	4698      	mov	r8, r3
   1598e:	3bfd      	subs	r3, #253	; 0xfd
   15990:	469b      	mov	fp, r3
   15992:	027d      	lsls	r5, r7, #9
   15994:	0078      	lsls	r0, r7, #1
   15996:	0ffb      	lsrs	r3, r7, #31
   15998:	0a6d      	lsrs	r5, r5, #9
   1599a:	0e00      	lsrs	r0, r0, #24
   1599c:	9300      	str	r3, [sp, #0]
   1599e:	d1da      	bne.n	15956 <__aeabi_fdiv+0x46>
   159a0:	2d00      	cmp	r5, #0
   159a2:	d126      	bne.n	159f2 <__aeabi_fdiv+0xe2>
   159a4:	2000      	movs	r0, #0
   159a6:	2101      	movs	r1, #1
   159a8:	0033      	movs	r3, r6
   159aa:	9a00      	ldr	r2, [sp, #0]
   159ac:	4f7a      	ldr	r7, [pc, #488]	; (15b98 <__aeabi_fdiv+0x288>)
   159ae:	4053      	eors	r3, r2
   159b0:	4642      	mov	r2, r8
   159b2:	1a10      	subs	r0, r2, r0
   159b4:	464a      	mov	r2, r9
   159b6:	430a      	orrs	r2, r1
   159b8:	0092      	lsls	r2, r2, #2
   159ba:	58ba      	ldr	r2, [r7, r2]
   159bc:	001d      	movs	r5, r3
   159be:	4697      	mov	pc, r2
   159c0:	9b00      	ldr	r3, [sp, #0]
   159c2:	002c      	movs	r4, r5
   159c4:	469a      	mov	sl, r3
   159c6:	468b      	mov	fp, r1
   159c8:	465b      	mov	r3, fp
   159ca:	2b02      	cmp	r3, #2
   159cc:	d131      	bne.n	15a32 <__aeabi_fdiv+0x122>
   159ce:	4653      	mov	r3, sl
   159d0:	21ff      	movs	r1, #255	; 0xff
   159d2:	2400      	movs	r4, #0
   159d4:	e038      	b.n	15a48 <__aeabi_fdiv+0x138>
   159d6:	2c00      	cmp	r4, #0
   159d8:	d117      	bne.n	15a0a <__aeabi_fdiv+0xfa>
   159da:	2304      	movs	r3, #4
   159dc:	4699      	mov	r9, r3
   159de:	2300      	movs	r3, #0
   159e0:	4698      	mov	r8, r3
   159e2:	3301      	adds	r3, #1
   159e4:	469b      	mov	fp, r3
   159e6:	e7af      	b.n	15948 <__aeabi_fdiv+0x38>
   159e8:	20ff      	movs	r0, #255	; 0xff
   159ea:	2d00      	cmp	r5, #0
   159ec:	d10b      	bne.n	15a06 <__aeabi_fdiv+0xf6>
   159ee:	2102      	movs	r1, #2
   159f0:	e7da      	b.n	159a8 <__aeabi_fdiv+0x98>
   159f2:	0028      	movs	r0, r5
   159f4:	f002 fac8 	bl	17f88 <__clzsi2>
   159f8:	1f43      	subs	r3, r0, #5
   159fa:	409d      	lsls	r5, r3
   159fc:	2376      	movs	r3, #118	; 0x76
   159fe:	425b      	negs	r3, r3
   15a00:	1a18      	subs	r0, r3, r0
   15a02:	2100      	movs	r1, #0
   15a04:	e7af      	b.n	15966 <__aeabi_fdiv+0x56>
   15a06:	2103      	movs	r1, #3
   15a08:	e7ad      	b.n	15966 <__aeabi_fdiv+0x56>
   15a0a:	0020      	movs	r0, r4
   15a0c:	f002 fabc 	bl	17f88 <__clzsi2>
   15a10:	1f43      	subs	r3, r0, #5
   15a12:	409c      	lsls	r4, r3
   15a14:	2376      	movs	r3, #118	; 0x76
   15a16:	425b      	negs	r3, r3
   15a18:	1a1b      	subs	r3, r3, r0
   15a1a:	4698      	mov	r8, r3
   15a1c:	2300      	movs	r3, #0
   15a1e:	4699      	mov	r9, r3
   15a20:	469b      	mov	fp, r3
   15a22:	e791      	b.n	15948 <__aeabi_fdiv+0x38>
   15a24:	230c      	movs	r3, #12
   15a26:	4699      	mov	r9, r3
   15a28:	33f3      	adds	r3, #243	; 0xf3
   15a2a:	4698      	mov	r8, r3
   15a2c:	3bfc      	subs	r3, #252	; 0xfc
   15a2e:	469b      	mov	fp, r3
   15a30:	e78a      	b.n	15948 <__aeabi_fdiv+0x38>
   15a32:	2b03      	cmp	r3, #3
   15a34:	d100      	bne.n	15a38 <__aeabi_fdiv+0x128>
   15a36:	e0a5      	b.n	15b84 <__aeabi_fdiv+0x274>
   15a38:	4655      	mov	r5, sl
   15a3a:	2b01      	cmp	r3, #1
   15a3c:	d000      	beq.n	15a40 <__aeabi_fdiv+0x130>
   15a3e:	e081      	b.n	15b44 <__aeabi_fdiv+0x234>
   15a40:	2301      	movs	r3, #1
   15a42:	2100      	movs	r1, #0
   15a44:	2400      	movs	r4, #0
   15a46:	402b      	ands	r3, r5
   15a48:	0264      	lsls	r4, r4, #9
   15a4a:	05c9      	lsls	r1, r1, #23
   15a4c:	0a60      	lsrs	r0, r4, #9
   15a4e:	07db      	lsls	r3, r3, #31
   15a50:	4308      	orrs	r0, r1
   15a52:	4318      	orrs	r0, r3
   15a54:	b003      	add	sp, #12
   15a56:	bc3c      	pop	{r2, r3, r4, r5}
   15a58:	4690      	mov	r8, r2
   15a5a:	4699      	mov	r9, r3
   15a5c:	46a2      	mov	sl, r4
   15a5e:	46ab      	mov	fp, r5
   15a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a62:	2480      	movs	r4, #128	; 0x80
   15a64:	2300      	movs	r3, #0
   15a66:	03e4      	lsls	r4, r4, #15
   15a68:	21ff      	movs	r1, #255	; 0xff
   15a6a:	e7ed      	b.n	15a48 <__aeabi_fdiv+0x138>
   15a6c:	21ff      	movs	r1, #255	; 0xff
   15a6e:	2400      	movs	r4, #0
   15a70:	e7ea      	b.n	15a48 <__aeabi_fdiv+0x138>
   15a72:	2301      	movs	r3, #1
   15a74:	1a59      	subs	r1, r3, r1
   15a76:	291b      	cmp	r1, #27
   15a78:	dd66      	ble.n	15b48 <__aeabi_fdiv+0x238>
   15a7a:	9a01      	ldr	r2, [sp, #4]
   15a7c:	4013      	ands	r3, r2
   15a7e:	2100      	movs	r1, #0
   15a80:	2400      	movs	r4, #0
   15a82:	e7e1      	b.n	15a48 <__aeabi_fdiv+0x138>
   15a84:	2380      	movs	r3, #128	; 0x80
   15a86:	03db      	lsls	r3, r3, #15
   15a88:	421c      	tst	r4, r3
   15a8a:	d038      	beq.n	15afe <__aeabi_fdiv+0x1ee>
   15a8c:	421d      	tst	r5, r3
   15a8e:	d051      	beq.n	15b34 <__aeabi_fdiv+0x224>
   15a90:	431c      	orrs	r4, r3
   15a92:	0264      	lsls	r4, r4, #9
   15a94:	0a64      	lsrs	r4, r4, #9
   15a96:	0033      	movs	r3, r6
   15a98:	21ff      	movs	r1, #255	; 0xff
   15a9a:	e7d5      	b.n	15a48 <__aeabi_fdiv+0x138>
   15a9c:	0163      	lsls	r3, r4, #5
   15a9e:	016c      	lsls	r4, r5, #5
   15aa0:	42a3      	cmp	r3, r4
   15aa2:	d23b      	bcs.n	15b1c <__aeabi_fdiv+0x20c>
   15aa4:	261b      	movs	r6, #27
   15aa6:	2100      	movs	r1, #0
   15aa8:	3801      	subs	r0, #1
   15aaa:	2501      	movs	r5, #1
   15aac:	001f      	movs	r7, r3
   15aae:	0049      	lsls	r1, r1, #1
   15ab0:	005b      	lsls	r3, r3, #1
   15ab2:	2f00      	cmp	r7, #0
   15ab4:	db01      	blt.n	15aba <__aeabi_fdiv+0x1aa>
   15ab6:	429c      	cmp	r4, r3
   15ab8:	d801      	bhi.n	15abe <__aeabi_fdiv+0x1ae>
   15aba:	1b1b      	subs	r3, r3, r4
   15abc:	4329      	orrs	r1, r5
   15abe:	3e01      	subs	r6, #1
   15ac0:	2e00      	cmp	r6, #0
   15ac2:	d1f3      	bne.n	15aac <__aeabi_fdiv+0x19c>
   15ac4:	001c      	movs	r4, r3
   15ac6:	1e63      	subs	r3, r4, #1
   15ac8:	419c      	sbcs	r4, r3
   15aca:	430c      	orrs	r4, r1
   15acc:	0001      	movs	r1, r0
   15ace:	317f      	adds	r1, #127	; 0x7f
   15ad0:	2900      	cmp	r1, #0
   15ad2:	ddce      	ble.n	15a72 <__aeabi_fdiv+0x162>
   15ad4:	0763      	lsls	r3, r4, #29
   15ad6:	d004      	beq.n	15ae2 <__aeabi_fdiv+0x1d2>
   15ad8:	230f      	movs	r3, #15
   15ada:	4023      	ands	r3, r4
   15adc:	2b04      	cmp	r3, #4
   15ade:	d000      	beq.n	15ae2 <__aeabi_fdiv+0x1d2>
   15ae0:	3404      	adds	r4, #4
   15ae2:	0123      	lsls	r3, r4, #4
   15ae4:	d503      	bpl.n	15aee <__aeabi_fdiv+0x1de>
   15ae6:	0001      	movs	r1, r0
   15ae8:	4b2c      	ldr	r3, [pc, #176]	; (15b9c <__aeabi_fdiv+0x28c>)
   15aea:	3180      	adds	r1, #128	; 0x80
   15aec:	401c      	ands	r4, r3
   15aee:	29fe      	cmp	r1, #254	; 0xfe
   15af0:	dd0d      	ble.n	15b0e <__aeabi_fdiv+0x1fe>
   15af2:	2301      	movs	r3, #1
   15af4:	9a01      	ldr	r2, [sp, #4]
   15af6:	21ff      	movs	r1, #255	; 0xff
   15af8:	4013      	ands	r3, r2
   15afa:	2400      	movs	r4, #0
   15afc:	e7a4      	b.n	15a48 <__aeabi_fdiv+0x138>
   15afe:	2380      	movs	r3, #128	; 0x80
   15b00:	03db      	lsls	r3, r3, #15
   15b02:	431c      	orrs	r4, r3
   15b04:	0264      	lsls	r4, r4, #9
   15b06:	0a64      	lsrs	r4, r4, #9
   15b08:	0033      	movs	r3, r6
   15b0a:	21ff      	movs	r1, #255	; 0xff
   15b0c:	e79c      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b0e:	2301      	movs	r3, #1
   15b10:	9a01      	ldr	r2, [sp, #4]
   15b12:	01a4      	lsls	r4, r4, #6
   15b14:	0a64      	lsrs	r4, r4, #9
   15b16:	b2c9      	uxtb	r1, r1
   15b18:	4013      	ands	r3, r2
   15b1a:	e795      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b1c:	1b1b      	subs	r3, r3, r4
   15b1e:	261a      	movs	r6, #26
   15b20:	2101      	movs	r1, #1
   15b22:	e7c2      	b.n	15aaa <__aeabi_fdiv+0x19a>
   15b24:	9b00      	ldr	r3, [sp, #0]
   15b26:	468b      	mov	fp, r1
   15b28:	469a      	mov	sl, r3
   15b2a:	2400      	movs	r4, #0
   15b2c:	e74c      	b.n	159c8 <__aeabi_fdiv+0xb8>
   15b2e:	0263      	lsls	r3, r4, #9
   15b30:	d5e5      	bpl.n	15afe <__aeabi_fdiv+0x1ee>
   15b32:	2500      	movs	r5, #0
   15b34:	2480      	movs	r4, #128	; 0x80
   15b36:	03e4      	lsls	r4, r4, #15
   15b38:	432c      	orrs	r4, r5
   15b3a:	0264      	lsls	r4, r4, #9
   15b3c:	0a64      	lsrs	r4, r4, #9
   15b3e:	9b00      	ldr	r3, [sp, #0]
   15b40:	21ff      	movs	r1, #255	; 0xff
   15b42:	e781      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b44:	9501      	str	r5, [sp, #4]
   15b46:	e7c1      	b.n	15acc <__aeabi_fdiv+0x1bc>
   15b48:	0023      	movs	r3, r4
   15b4a:	2020      	movs	r0, #32
   15b4c:	40cb      	lsrs	r3, r1
   15b4e:	1a41      	subs	r1, r0, r1
   15b50:	408c      	lsls	r4, r1
   15b52:	1e61      	subs	r1, r4, #1
   15b54:	418c      	sbcs	r4, r1
   15b56:	431c      	orrs	r4, r3
   15b58:	0763      	lsls	r3, r4, #29
   15b5a:	d004      	beq.n	15b66 <__aeabi_fdiv+0x256>
   15b5c:	230f      	movs	r3, #15
   15b5e:	4023      	ands	r3, r4
   15b60:	2b04      	cmp	r3, #4
   15b62:	d000      	beq.n	15b66 <__aeabi_fdiv+0x256>
   15b64:	3404      	adds	r4, #4
   15b66:	0163      	lsls	r3, r4, #5
   15b68:	d505      	bpl.n	15b76 <__aeabi_fdiv+0x266>
   15b6a:	2301      	movs	r3, #1
   15b6c:	9a01      	ldr	r2, [sp, #4]
   15b6e:	2101      	movs	r1, #1
   15b70:	4013      	ands	r3, r2
   15b72:	2400      	movs	r4, #0
   15b74:	e768      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b76:	2301      	movs	r3, #1
   15b78:	9a01      	ldr	r2, [sp, #4]
   15b7a:	01a4      	lsls	r4, r4, #6
   15b7c:	0a64      	lsrs	r4, r4, #9
   15b7e:	4013      	ands	r3, r2
   15b80:	2100      	movs	r1, #0
   15b82:	e761      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b84:	2380      	movs	r3, #128	; 0x80
   15b86:	03db      	lsls	r3, r3, #15
   15b88:	431c      	orrs	r4, r3
   15b8a:	0264      	lsls	r4, r4, #9
   15b8c:	0a64      	lsrs	r4, r4, #9
   15b8e:	4653      	mov	r3, sl
   15b90:	21ff      	movs	r1, #255	; 0xff
   15b92:	e759      	b.n	15a48 <__aeabi_fdiv+0x138>
   15b94:	0001eb20 	.word	0x0001eb20
   15b98:	0001eb60 	.word	0x0001eb60
   15b9c:	f7ffffff 	.word	0xf7ffffff

00015ba0 <__eqsf2>:
   15ba0:	b570      	push	{r4, r5, r6, lr}
   15ba2:	0042      	lsls	r2, r0, #1
   15ba4:	0245      	lsls	r5, r0, #9
   15ba6:	024e      	lsls	r6, r1, #9
   15ba8:	004c      	lsls	r4, r1, #1
   15baa:	0fc3      	lsrs	r3, r0, #31
   15bac:	0a6d      	lsrs	r5, r5, #9
   15bae:	0e12      	lsrs	r2, r2, #24
   15bb0:	0a76      	lsrs	r6, r6, #9
   15bb2:	0e24      	lsrs	r4, r4, #24
   15bb4:	0fc9      	lsrs	r1, r1, #31
   15bb6:	2001      	movs	r0, #1
   15bb8:	2aff      	cmp	r2, #255	; 0xff
   15bba:	d006      	beq.n	15bca <__eqsf2+0x2a>
   15bbc:	2cff      	cmp	r4, #255	; 0xff
   15bbe:	d003      	beq.n	15bc8 <__eqsf2+0x28>
   15bc0:	42a2      	cmp	r2, r4
   15bc2:	d101      	bne.n	15bc8 <__eqsf2+0x28>
   15bc4:	42b5      	cmp	r5, r6
   15bc6:	d006      	beq.n	15bd6 <__eqsf2+0x36>
   15bc8:	bd70      	pop	{r4, r5, r6, pc}
   15bca:	2d00      	cmp	r5, #0
   15bcc:	d1fc      	bne.n	15bc8 <__eqsf2+0x28>
   15bce:	2cff      	cmp	r4, #255	; 0xff
   15bd0:	d1fa      	bne.n	15bc8 <__eqsf2+0x28>
   15bd2:	2e00      	cmp	r6, #0
   15bd4:	d1f8      	bne.n	15bc8 <__eqsf2+0x28>
   15bd6:	428b      	cmp	r3, r1
   15bd8:	d006      	beq.n	15be8 <__eqsf2+0x48>
   15bda:	2001      	movs	r0, #1
   15bdc:	2a00      	cmp	r2, #0
   15bde:	d1f3      	bne.n	15bc8 <__eqsf2+0x28>
   15be0:	0028      	movs	r0, r5
   15be2:	1e45      	subs	r5, r0, #1
   15be4:	41a8      	sbcs	r0, r5
   15be6:	e7ef      	b.n	15bc8 <__eqsf2+0x28>
   15be8:	2000      	movs	r0, #0
   15bea:	e7ed      	b.n	15bc8 <__eqsf2+0x28>

00015bec <__gesf2>:
   15bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bee:	0042      	lsls	r2, r0, #1
   15bf0:	0245      	lsls	r5, r0, #9
   15bf2:	024c      	lsls	r4, r1, #9
   15bf4:	0fc3      	lsrs	r3, r0, #31
   15bf6:	0048      	lsls	r0, r1, #1
   15bf8:	0a6d      	lsrs	r5, r5, #9
   15bfa:	0e12      	lsrs	r2, r2, #24
   15bfc:	0a64      	lsrs	r4, r4, #9
   15bfe:	0e00      	lsrs	r0, r0, #24
   15c00:	0fc9      	lsrs	r1, r1, #31
   15c02:	2aff      	cmp	r2, #255	; 0xff
   15c04:	d01e      	beq.n	15c44 <__gesf2+0x58>
   15c06:	28ff      	cmp	r0, #255	; 0xff
   15c08:	d021      	beq.n	15c4e <__gesf2+0x62>
   15c0a:	2a00      	cmp	r2, #0
   15c0c:	d10a      	bne.n	15c24 <__gesf2+0x38>
   15c0e:	426e      	negs	r6, r5
   15c10:	416e      	adcs	r6, r5
   15c12:	b2f6      	uxtb	r6, r6
   15c14:	2800      	cmp	r0, #0
   15c16:	d10f      	bne.n	15c38 <__gesf2+0x4c>
   15c18:	2c00      	cmp	r4, #0
   15c1a:	d10d      	bne.n	15c38 <__gesf2+0x4c>
   15c1c:	2000      	movs	r0, #0
   15c1e:	2d00      	cmp	r5, #0
   15c20:	d009      	beq.n	15c36 <__gesf2+0x4a>
   15c22:	e005      	b.n	15c30 <__gesf2+0x44>
   15c24:	2800      	cmp	r0, #0
   15c26:	d101      	bne.n	15c2c <__gesf2+0x40>
   15c28:	2c00      	cmp	r4, #0
   15c2a:	d001      	beq.n	15c30 <__gesf2+0x44>
   15c2c:	428b      	cmp	r3, r1
   15c2e:	d011      	beq.n	15c54 <__gesf2+0x68>
   15c30:	2101      	movs	r1, #1
   15c32:	4258      	negs	r0, r3
   15c34:	4308      	orrs	r0, r1
   15c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c38:	2e00      	cmp	r6, #0
   15c3a:	d0f7      	beq.n	15c2c <__gesf2+0x40>
   15c3c:	2001      	movs	r0, #1
   15c3e:	3901      	subs	r1, #1
   15c40:	4308      	orrs	r0, r1
   15c42:	e7f8      	b.n	15c36 <__gesf2+0x4a>
   15c44:	2d00      	cmp	r5, #0
   15c46:	d0de      	beq.n	15c06 <__gesf2+0x1a>
   15c48:	2002      	movs	r0, #2
   15c4a:	4240      	negs	r0, r0
   15c4c:	e7f3      	b.n	15c36 <__gesf2+0x4a>
   15c4e:	2c00      	cmp	r4, #0
   15c50:	d0db      	beq.n	15c0a <__gesf2+0x1e>
   15c52:	e7f9      	b.n	15c48 <__gesf2+0x5c>
   15c54:	4282      	cmp	r2, r0
   15c56:	dceb      	bgt.n	15c30 <__gesf2+0x44>
   15c58:	db04      	blt.n	15c64 <__gesf2+0x78>
   15c5a:	42a5      	cmp	r5, r4
   15c5c:	d8e8      	bhi.n	15c30 <__gesf2+0x44>
   15c5e:	2000      	movs	r0, #0
   15c60:	42a5      	cmp	r5, r4
   15c62:	d2e8      	bcs.n	15c36 <__gesf2+0x4a>
   15c64:	2101      	movs	r1, #1
   15c66:	1e58      	subs	r0, r3, #1
   15c68:	4308      	orrs	r0, r1
   15c6a:	e7e4      	b.n	15c36 <__gesf2+0x4a>

00015c6c <__lesf2>:
   15c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c6e:	0042      	lsls	r2, r0, #1
   15c70:	024d      	lsls	r5, r1, #9
   15c72:	004c      	lsls	r4, r1, #1
   15c74:	0246      	lsls	r6, r0, #9
   15c76:	0a76      	lsrs	r6, r6, #9
   15c78:	0e12      	lsrs	r2, r2, #24
   15c7a:	0fc3      	lsrs	r3, r0, #31
   15c7c:	0a6d      	lsrs	r5, r5, #9
   15c7e:	0e24      	lsrs	r4, r4, #24
   15c80:	0fc9      	lsrs	r1, r1, #31
   15c82:	2aff      	cmp	r2, #255	; 0xff
   15c84:	d016      	beq.n	15cb4 <__lesf2+0x48>
   15c86:	2cff      	cmp	r4, #255	; 0xff
   15c88:	d018      	beq.n	15cbc <__lesf2+0x50>
   15c8a:	2a00      	cmp	r2, #0
   15c8c:	d10a      	bne.n	15ca4 <__lesf2+0x38>
   15c8e:	4270      	negs	r0, r6
   15c90:	4170      	adcs	r0, r6
   15c92:	b2c0      	uxtb	r0, r0
   15c94:	2c00      	cmp	r4, #0
   15c96:	d015      	beq.n	15cc4 <__lesf2+0x58>
   15c98:	2800      	cmp	r0, #0
   15c9a:	d005      	beq.n	15ca8 <__lesf2+0x3c>
   15c9c:	2001      	movs	r0, #1
   15c9e:	3901      	subs	r1, #1
   15ca0:	4308      	orrs	r0, r1
   15ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ca4:	2c00      	cmp	r4, #0
   15ca6:	d013      	beq.n	15cd0 <__lesf2+0x64>
   15ca8:	4299      	cmp	r1, r3
   15caa:	d014      	beq.n	15cd6 <__lesf2+0x6a>
   15cac:	2001      	movs	r0, #1
   15cae:	425b      	negs	r3, r3
   15cb0:	4318      	orrs	r0, r3
   15cb2:	e7f6      	b.n	15ca2 <__lesf2+0x36>
   15cb4:	2002      	movs	r0, #2
   15cb6:	2e00      	cmp	r6, #0
   15cb8:	d1f3      	bne.n	15ca2 <__lesf2+0x36>
   15cba:	e7e4      	b.n	15c86 <__lesf2+0x1a>
   15cbc:	2002      	movs	r0, #2
   15cbe:	2d00      	cmp	r5, #0
   15cc0:	d1ef      	bne.n	15ca2 <__lesf2+0x36>
   15cc2:	e7e2      	b.n	15c8a <__lesf2+0x1e>
   15cc4:	2d00      	cmp	r5, #0
   15cc6:	d1e7      	bne.n	15c98 <__lesf2+0x2c>
   15cc8:	2000      	movs	r0, #0
   15cca:	2e00      	cmp	r6, #0
   15ccc:	d0e9      	beq.n	15ca2 <__lesf2+0x36>
   15cce:	e7ed      	b.n	15cac <__lesf2+0x40>
   15cd0:	2d00      	cmp	r5, #0
   15cd2:	d1e9      	bne.n	15ca8 <__lesf2+0x3c>
   15cd4:	e7ea      	b.n	15cac <__lesf2+0x40>
   15cd6:	42a2      	cmp	r2, r4
   15cd8:	dc06      	bgt.n	15ce8 <__lesf2+0x7c>
   15cda:	dbdf      	blt.n	15c9c <__lesf2+0x30>
   15cdc:	42ae      	cmp	r6, r5
   15cde:	d803      	bhi.n	15ce8 <__lesf2+0x7c>
   15ce0:	2000      	movs	r0, #0
   15ce2:	42ae      	cmp	r6, r5
   15ce4:	d3da      	bcc.n	15c9c <__lesf2+0x30>
   15ce6:	e7dc      	b.n	15ca2 <__lesf2+0x36>
   15ce8:	2001      	movs	r0, #1
   15cea:	4249      	negs	r1, r1
   15cec:	4308      	orrs	r0, r1
   15cee:	e7d8      	b.n	15ca2 <__lesf2+0x36>

00015cf0 <__aeabi_fmul>:
   15cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cf2:	4657      	mov	r7, sl
   15cf4:	464e      	mov	r6, r9
   15cf6:	4645      	mov	r5, r8
   15cf8:	46de      	mov	lr, fp
   15cfa:	b5e0      	push	{r5, r6, r7, lr}
   15cfc:	0247      	lsls	r7, r0, #9
   15cfe:	0046      	lsls	r6, r0, #1
   15d00:	4688      	mov	r8, r1
   15d02:	0a7f      	lsrs	r7, r7, #9
   15d04:	0e36      	lsrs	r6, r6, #24
   15d06:	0fc4      	lsrs	r4, r0, #31
   15d08:	2e00      	cmp	r6, #0
   15d0a:	d047      	beq.n	15d9c <__aeabi_fmul+0xac>
   15d0c:	2eff      	cmp	r6, #255	; 0xff
   15d0e:	d024      	beq.n	15d5a <__aeabi_fmul+0x6a>
   15d10:	00fb      	lsls	r3, r7, #3
   15d12:	2780      	movs	r7, #128	; 0x80
   15d14:	04ff      	lsls	r7, r7, #19
   15d16:	431f      	orrs	r7, r3
   15d18:	2300      	movs	r3, #0
   15d1a:	4699      	mov	r9, r3
   15d1c:	469a      	mov	sl, r3
   15d1e:	3e7f      	subs	r6, #127	; 0x7f
   15d20:	4643      	mov	r3, r8
   15d22:	025d      	lsls	r5, r3, #9
   15d24:	0058      	lsls	r0, r3, #1
   15d26:	0fdb      	lsrs	r3, r3, #31
   15d28:	0a6d      	lsrs	r5, r5, #9
   15d2a:	0e00      	lsrs	r0, r0, #24
   15d2c:	4698      	mov	r8, r3
   15d2e:	d043      	beq.n	15db8 <__aeabi_fmul+0xc8>
   15d30:	28ff      	cmp	r0, #255	; 0xff
   15d32:	d03b      	beq.n	15dac <__aeabi_fmul+0xbc>
   15d34:	00eb      	lsls	r3, r5, #3
   15d36:	2580      	movs	r5, #128	; 0x80
   15d38:	2200      	movs	r2, #0
   15d3a:	04ed      	lsls	r5, r5, #19
   15d3c:	431d      	orrs	r5, r3
   15d3e:	387f      	subs	r0, #127	; 0x7f
   15d40:	1836      	adds	r6, r6, r0
   15d42:	1c73      	adds	r3, r6, #1
   15d44:	4641      	mov	r1, r8
   15d46:	469b      	mov	fp, r3
   15d48:	464b      	mov	r3, r9
   15d4a:	4061      	eors	r1, r4
   15d4c:	4313      	orrs	r3, r2
   15d4e:	2b0f      	cmp	r3, #15
   15d50:	d864      	bhi.n	15e1c <__aeabi_fmul+0x12c>
   15d52:	4875      	ldr	r0, [pc, #468]	; (15f28 <__aeabi_fmul+0x238>)
   15d54:	009b      	lsls	r3, r3, #2
   15d56:	58c3      	ldr	r3, [r0, r3]
   15d58:	469f      	mov	pc, r3
   15d5a:	2f00      	cmp	r7, #0
   15d5c:	d142      	bne.n	15de4 <__aeabi_fmul+0xf4>
   15d5e:	2308      	movs	r3, #8
   15d60:	4699      	mov	r9, r3
   15d62:	3b06      	subs	r3, #6
   15d64:	26ff      	movs	r6, #255	; 0xff
   15d66:	469a      	mov	sl, r3
   15d68:	e7da      	b.n	15d20 <__aeabi_fmul+0x30>
   15d6a:	4641      	mov	r1, r8
   15d6c:	2a02      	cmp	r2, #2
   15d6e:	d028      	beq.n	15dc2 <__aeabi_fmul+0xd2>
   15d70:	2a03      	cmp	r2, #3
   15d72:	d100      	bne.n	15d76 <__aeabi_fmul+0x86>
   15d74:	e0ce      	b.n	15f14 <__aeabi_fmul+0x224>
   15d76:	2a01      	cmp	r2, #1
   15d78:	d000      	beq.n	15d7c <__aeabi_fmul+0x8c>
   15d7a:	e0ac      	b.n	15ed6 <__aeabi_fmul+0x1e6>
   15d7c:	4011      	ands	r1, r2
   15d7e:	2000      	movs	r0, #0
   15d80:	2200      	movs	r2, #0
   15d82:	b2cc      	uxtb	r4, r1
   15d84:	0240      	lsls	r0, r0, #9
   15d86:	05d2      	lsls	r2, r2, #23
   15d88:	0a40      	lsrs	r0, r0, #9
   15d8a:	07e4      	lsls	r4, r4, #31
   15d8c:	4310      	orrs	r0, r2
   15d8e:	4320      	orrs	r0, r4
   15d90:	bc3c      	pop	{r2, r3, r4, r5}
   15d92:	4690      	mov	r8, r2
   15d94:	4699      	mov	r9, r3
   15d96:	46a2      	mov	sl, r4
   15d98:	46ab      	mov	fp, r5
   15d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d9c:	2f00      	cmp	r7, #0
   15d9e:	d115      	bne.n	15dcc <__aeabi_fmul+0xdc>
   15da0:	2304      	movs	r3, #4
   15da2:	4699      	mov	r9, r3
   15da4:	3b03      	subs	r3, #3
   15da6:	2600      	movs	r6, #0
   15da8:	469a      	mov	sl, r3
   15daa:	e7b9      	b.n	15d20 <__aeabi_fmul+0x30>
   15dac:	20ff      	movs	r0, #255	; 0xff
   15dae:	2202      	movs	r2, #2
   15db0:	2d00      	cmp	r5, #0
   15db2:	d0c5      	beq.n	15d40 <__aeabi_fmul+0x50>
   15db4:	2203      	movs	r2, #3
   15db6:	e7c3      	b.n	15d40 <__aeabi_fmul+0x50>
   15db8:	2d00      	cmp	r5, #0
   15dba:	d119      	bne.n	15df0 <__aeabi_fmul+0x100>
   15dbc:	2000      	movs	r0, #0
   15dbe:	2201      	movs	r2, #1
   15dc0:	e7be      	b.n	15d40 <__aeabi_fmul+0x50>
   15dc2:	2401      	movs	r4, #1
   15dc4:	22ff      	movs	r2, #255	; 0xff
   15dc6:	400c      	ands	r4, r1
   15dc8:	2000      	movs	r0, #0
   15dca:	e7db      	b.n	15d84 <__aeabi_fmul+0x94>
   15dcc:	0038      	movs	r0, r7
   15dce:	f002 f8db 	bl	17f88 <__clzsi2>
   15dd2:	2676      	movs	r6, #118	; 0x76
   15dd4:	1f43      	subs	r3, r0, #5
   15dd6:	409f      	lsls	r7, r3
   15dd8:	2300      	movs	r3, #0
   15dda:	4276      	negs	r6, r6
   15ddc:	1a36      	subs	r6, r6, r0
   15dde:	4699      	mov	r9, r3
   15de0:	469a      	mov	sl, r3
   15de2:	e79d      	b.n	15d20 <__aeabi_fmul+0x30>
   15de4:	230c      	movs	r3, #12
   15de6:	4699      	mov	r9, r3
   15de8:	3b09      	subs	r3, #9
   15dea:	26ff      	movs	r6, #255	; 0xff
   15dec:	469a      	mov	sl, r3
   15dee:	e797      	b.n	15d20 <__aeabi_fmul+0x30>
   15df0:	0028      	movs	r0, r5
   15df2:	f002 f8c9 	bl	17f88 <__clzsi2>
   15df6:	1f43      	subs	r3, r0, #5
   15df8:	409d      	lsls	r5, r3
   15dfa:	2376      	movs	r3, #118	; 0x76
   15dfc:	425b      	negs	r3, r3
   15dfe:	1a18      	subs	r0, r3, r0
   15e00:	2200      	movs	r2, #0
   15e02:	e79d      	b.n	15d40 <__aeabi_fmul+0x50>
   15e04:	2080      	movs	r0, #128	; 0x80
   15e06:	2400      	movs	r4, #0
   15e08:	03c0      	lsls	r0, r0, #15
   15e0a:	22ff      	movs	r2, #255	; 0xff
   15e0c:	e7ba      	b.n	15d84 <__aeabi_fmul+0x94>
   15e0e:	003d      	movs	r5, r7
   15e10:	4652      	mov	r2, sl
   15e12:	e7ab      	b.n	15d6c <__aeabi_fmul+0x7c>
   15e14:	003d      	movs	r5, r7
   15e16:	0021      	movs	r1, r4
   15e18:	4652      	mov	r2, sl
   15e1a:	e7a7      	b.n	15d6c <__aeabi_fmul+0x7c>
   15e1c:	0c3b      	lsrs	r3, r7, #16
   15e1e:	469c      	mov	ip, r3
   15e20:	042a      	lsls	r2, r5, #16
   15e22:	0c12      	lsrs	r2, r2, #16
   15e24:	0c2b      	lsrs	r3, r5, #16
   15e26:	0014      	movs	r4, r2
   15e28:	4660      	mov	r0, ip
   15e2a:	4665      	mov	r5, ip
   15e2c:	043f      	lsls	r7, r7, #16
   15e2e:	0c3f      	lsrs	r7, r7, #16
   15e30:	437c      	muls	r4, r7
   15e32:	4342      	muls	r2, r0
   15e34:	435d      	muls	r5, r3
   15e36:	437b      	muls	r3, r7
   15e38:	0c27      	lsrs	r7, r4, #16
   15e3a:	189b      	adds	r3, r3, r2
   15e3c:	18ff      	adds	r7, r7, r3
   15e3e:	42ba      	cmp	r2, r7
   15e40:	d903      	bls.n	15e4a <__aeabi_fmul+0x15a>
   15e42:	2380      	movs	r3, #128	; 0x80
   15e44:	025b      	lsls	r3, r3, #9
   15e46:	469c      	mov	ip, r3
   15e48:	4465      	add	r5, ip
   15e4a:	0424      	lsls	r4, r4, #16
   15e4c:	043a      	lsls	r2, r7, #16
   15e4e:	0c24      	lsrs	r4, r4, #16
   15e50:	1912      	adds	r2, r2, r4
   15e52:	0193      	lsls	r3, r2, #6
   15e54:	1e5c      	subs	r4, r3, #1
   15e56:	41a3      	sbcs	r3, r4
   15e58:	0c3f      	lsrs	r7, r7, #16
   15e5a:	0e92      	lsrs	r2, r2, #26
   15e5c:	197d      	adds	r5, r7, r5
   15e5e:	431a      	orrs	r2, r3
   15e60:	01ad      	lsls	r5, r5, #6
   15e62:	4315      	orrs	r5, r2
   15e64:	012b      	lsls	r3, r5, #4
   15e66:	d504      	bpl.n	15e72 <__aeabi_fmul+0x182>
   15e68:	2301      	movs	r3, #1
   15e6a:	465e      	mov	r6, fp
   15e6c:	086a      	lsrs	r2, r5, #1
   15e6e:	401d      	ands	r5, r3
   15e70:	4315      	orrs	r5, r2
   15e72:	0032      	movs	r2, r6
   15e74:	327f      	adds	r2, #127	; 0x7f
   15e76:	2a00      	cmp	r2, #0
   15e78:	dd25      	ble.n	15ec6 <__aeabi_fmul+0x1d6>
   15e7a:	076b      	lsls	r3, r5, #29
   15e7c:	d004      	beq.n	15e88 <__aeabi_fmul+0x198>
   15e7e:	230f      	movs	r3, #15
   15e80:	402b      	ands	r3, r5
   15e82:	2b04      	cmp	r3, #4
   15e84:	d000      	beq.n	15e88 <__aeabi_fmul+0x198>
   15e86:	3504      	adds	r5, #4
   15e88:	012b      	lsls	r3, r5, #4
   15e8a:	d503      	bpl.n	15e94 <__aeabi_fmul+0x1a4>
   15e8c:	0032      	movs	r2, r6
   15e8e:	4b27      	ldr	r3, [pc, #156]	; (15f2c <__aeabi_fmul+0x23c>)
   15e90:	3280      	adds	r2, #128	; 0x80
   15e92:	401d      	ands	r5, r3
   15e94:	2afe      	cmp	r2, #254	; 0xfe
   15e96:	dc94      	bgt.n	15dc2 <__aeabi_fmul+0xd2>
   15e98:	2401      	movs	r4, #1
   15e9a:	01a8      	lsls	r0, r5, #6
   15e9c:	0a40      	lsrs	r0, r0, #9
   15e9e:	b2d2      	uxtb	r2, r2
   15ea0:	400c      	ands	r4, r1
   15ea2:	e76f      	b.n	15d84 <__aeabi_fmul+0x94>
   15ea4:	2080      	movs	r0, #128	; 0x80
   15ea6:	03c0      	lsls	r0, r0, #15
   15ea8:	4207      	tst	r7, r0
   15eaa:	d007      	beq.n	15ebc <__aeabi_fmul+0x1cc>
   15eac:	4205      	tst	r5, r0
   15eae:	d105      	bne.n	15ebc <__aeabi_fmul+0x1cc>
   15eb0:	4328      	orrs	r0, r5
   15eb2:	0240      	lsls	r0, r0, #9
   15eb4:	0a40      	lsrs	r0, r0, #9
   15eb6:	4644      	mov	r4, r8
   15eb8:	22ff      	movs	r2, #255	; 0xff
   15eba:	e763      	b.n	15d84 <__aeabi_fmul+0x94>
   15ebc:	4338      	orrs	r0, r7
   15ebe:	0240      	lsls	r0, r0, #9
   15ec0:	0a40      	lsrs	r0, r0, #9
   15ec2:	22ff      	movs	r2, #255	; 0xff
   15ec4:	e75e      	b.n	15d84 <__aeabi_fmul+0x94>
   15ec6:	2401      	movs	r4, #1
   15ec8:	1aa3      	subs	r3, r4, r2
   15eca:	2b1b      	cmp	r3, #27
   15ecc:	dd05      	ble.n	15eda <__aeabi_fmul+0x1ea>
   15ece:	400c      	ands	r4, r1
   15ed0:	2200      	movs	r2, #0
   15ed2:	2000      	movs	r0, #0
   15ed4:	e756      	b.n	15d84 <__aeabi_fmul+0x94>
   15ed6:	465e      	mov	r6, fp
   15ed8:	e7cb      	b.n	15e72 <__aeabi_fmul+0x182>
   15eda:	002a      	movs	r2, r5
   15edc:	2020      	movs	r0, #32
   15ede:	40da      	lsrs	r2, r3
   15ee0:	1ac3      	subs	r3, r0, r3
   15ee2:	409d      	lsls	r5, r3
   15ee4:	002b      	movs	r3, r5
   15ee6:	1e5d      	subs	r5, r3, #1
   15ee8:	41ab      	sbcs	r3, r5
   15eea:	4313      	orrs	r3, r2
   15eec:	075a      	lsls	r2, r3, #29
   15eee:	d004      	beq.n	15efa <__aeabi_fmul+0x20a>
   15ef0:	220f      	movs	r2, #15
   15ef2:	401a      	ands	r2, r3
   15ef4:	2a04      	cmp	r2, #4
   15ef6:	d000      	beq.n	15efa <__aeabi_fmul+0x20a>
   15ef8:	3304      	adds	r3, #4
   15efa:	015a      	lsls	r2, r3, #5
   15efc:	d504      	bpl.n	15f08 <__aeabi_fmul+0x218>
   15efe:	2401      	movs	r4, #1
   15f00:	2201      	movs	r2, #1
   15f02:	400c      	ands	r4, r1
   15f04:	2000      	movs	r0, #0
   15f06:	e73d      	b.n	15d84 <__aeabi_fmul+0x94>
   15f08:	2401      	movs	r4, #1
   15f0a:	019b      	lsls	r3, r3, #6
   15f0c:	0a58      	lsrs	r0, r3, #9
   15f0e:	400c      	ands	r4, r1
   15f10:	2200      	movs	r2, #0
   15f12:	e737      	b.n	15d84 <__aeabi_fmul+0x94>
   15f14:	2080      	movs	r0, #128	; 0x80
   15f16:	2401      	movs	r4, #1
   15f18:	03c0      	lsls	r0, r0, #15
   15f1a:	4328      	orrs	r0, r5
   15f1c:	0240      	lsls	r0, r0, #9
   15f1e:	0a40      	lsrs	r0, r0, #9
   15f20:	400c      	ands	r4, r1
   15f22:	22ff      	movs	r2, #255	; 0xff
   15f24:	e72e      	b.n	15d84 <__aeabi_fmul+0x94>
   15f26:	46c0      	nop			; (mov r8, r8)
   15f28:	0001eba0 	.word	0x0001eba0
   15f2c:	f7ffffff 	.word	0xf7ffffff

00015f30 <__aeabi_fsub>:
   15f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f32:	464f      	mov	r7, r9
   15f34:	46d6      	mov	lr, sl
   15f36:	4646      	mov	r6, r8
   15f38:	0044      	lsls	r4, r0, #1
   15f3a:	b5c0      	push	{r6, r7, lr}
   15f3c:	0fc2      	lsrs	r2, r0, #31
   15f3e:	0247      	lsls	r7, r0, #9
   15f40:	0248      	lsls	r0, r1, #9
   15f42:	0a40      	lsrs	r0, r0, #9
   15f44:	4684      	mov	ip, r0
   15f46:	4666      	mov	r6, ip
   15f48:	0a7b      	lsrs	r3, r7, #9
   15f4a:	0048      	lsls	r0, r1, #1
   15f4c:	0fc9      	lsrs	r1, r1, #31
   15f4e:	469a      	mov	sl, r3
   15f50:	0e24      	lsrs	r4, r4, #24
   15f52:	0015      	movs	r5, r2
   15f54:	00db      	lsls	r3, r3, #3
   15f56:	0e00      	lsrs	r0, r0, #24
   15f58:	4689      	mov	r9, r1
   15f5a:	00f6      	lsls	r6, r6, #3
   15f5c:	28ff      	cmp	r0, #255	; 0xff
   15f5e:	d100      	bne.n	15f62 <__aeabi_fsub+0x32>
   15f60:	e08f      	b.n	16082 <__aeabi_fsub+0x152>
   15f62:	2101      	movs	r1, #1
   15f64:	464f      	mov	r7, r9
   15f66:	404f      	eors	r7, r1
   15f68:	0039      	movs	r1, r7
   15f6a:	4291      	cmp	r1, r2
   15f6c:	d066      	beq.n	1603c <__aeabi_fsub+0x10c>
   15f6e:	1a22      	subs	r2, r4, r0
   15f70:	2a00      	cmp	r2, #0
   15f72:	dc00      	bgt.n	15f76 <__aeabi_fsub+0x46>
   15f74:	e09d      	b.n	160b2 <__aeabi_fsub+0x182>
   15f76:	2800      	cmp	r0, #0
   15f78:	d13d      	bne.n	15ff6 <__aeabi_fsub+0xc6>
   15f7a:	2e00      	cmp	r6, #0
   15f7c:	d100      	bne.n	15f80 <__aeabi_fsub+0x50>
   15f7e:	e08b      	b.n	16098 <__aeabi_fsub+0x168>
   15f80:	1e51      	subs	r1, r2, #1
   15f82:	2900      	cmp	r1, #0
   15f84:	d000      	beq.n	15f88 <__aeabi_fsub+0x58>
   15f86:	e0b5      	b.n	160f4 <__aeabi_fsub+0x1c4>
   15f88:	2401      	movs	r4, #1
   15f8a:	1b9b      	subs	r3, r3, r6
   15f8c:	015a      	lsls	r2, r3, #5
   15f8e:	d544      	bpl.n	1601a <__aeabi_fsub+0xea>
   15f90:	019b      	lsls	r3, r3, #6
   15f92:	099f      	lsrs	r7, r3, #6
   15f94:	0038      	movs	r0, r7
   15f96:	f001 fff7 	bl	17f88 <__clzsi2>
   15f9a:	3805      	subs	r0, #5
   15f9c:	4087      	lsls	r7, r0
   15f9e:	4284      	cmp	r4, r0
   15fa0:	dd00      	ble.n	15fa4 <__aeabi_fsub+0x74>
   15fa2:	e096      	b.n	160d2 <__aeabi_fsub+0x1a2>
   15fa4:	1b04      	subs	r4, r0, r4
   15fa6:	003a      	movs	r2, r7
   15fa8:	2020      	movs	r0, #32
   15faa:	3401      	adds	r4, #1
   15fac:	40e2      	lsrs	r2, r4
   15fae:	1b04      	subs	r4, r0, r4
   15fb0:	40a7      	lsls	r7, r4
   15fb2:	003b      	movs	r3, r7
   15fb4:	1e5f      	subs	r7, r3, #1
   15fb6:	41bb      	sbcs	r3, r7
   15fb8:	2400      	movs	r4, #0
   15fba:	4313      	orrs	r3, r2
   15fbc:	075a      	lsls	r2, r3, #29
   15fbe:	d004      	beq.n	15fca <__aeabi_fsub+0x9a>
   15fc0:	220f      	movs	r2, #15
   15fc2:	401a      	ands	r2, r3
   15fc4:	2a04      	cmp	r2, #4
   15fc6:	d000      	beq.n	15fca <__aeabi_fsub+0x9a>
   15fc8:	3304      	adds	r3, #4
   15fca:	015a      	lsls	r2, r3, #5
   15fcc:	d527      	bpl.n	1601e <__aeabi_fsub+0xee>
   15fce:	3401      	adds	r4, #1
   15fd0:	2cff      	cmp	r4, #255	; 0xff
   15fd2:	d100      	bne.n	15fd6 <__aeabi_fsub+0xa6>
   15fd4:	e079      	b.n	160ca <__aeabi_fsub+0x19a>
   15fd6:	2201      	movs	r2, #1
   15fd8:	019b      	lsls	r3, r3, #6
   15fda:	0a5b      	lsrs	r3, r3, #9
   15fdc:	b2e4      	uxtb	r4, r4
   15fde:	402a      	ands	r2, r5
   15fe0:	025b      	lsls	r3, r3, #9
   15fe2:	05e4      	lsls	r4, r4, #23
   15fe4:	0a58      	lsrs	r0, r3, #9
   15fe6:	07d2      	lsls	r2, r2, #31
   15fe8:	4320      	orrs	r0, r4
   15fea:	4310      	orrs	r0, r2
   15fec:	bc1c      	pop	{r2, r3, r4}
   15fee:	4690      	mov	r8, r2
   15ff0:	4699      	mov	r9, r3
   15ff2:	46a2      	mov	sl, r4
   15ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ff6:	2cff      	cmp	r4, #255	; 0xff
   15ff8:	d0e0      	beq.n	15fbc <__aeabi_fsub+0x8c>
   15ffa:	2180      	movs	r1, #128	; 0x80
   15ffc:	04c9      	lsls	r1, r1, #19
   15ffe:	430e      	orrs	r6, r1
   16000:	2a1b      	cmp	r2, #27
   16002:	dc7b      	bgt.n	160fc <__aeabi_fsub+0x1cc>
   16004:	0031      	movs	r1, r6
   16006:	2020      	movs	r0, #32
   16008:	40d1      	lsrs	r1, r2
   1600a:	1a82      	subs	r2, r0, r2
   1600c:	4096      	lsls	r6, r2
   1600e:	1e72      	subs	r2, r6, #1
   16010:	4196      	sbcs	r6, r2
   16012:	430e      	orrs	r6, r1
   16014:	1b9b      	subs	r3, r3, r6
   16016:	015a      	lsls	r2, r3, #5
   16018:	d4ba      	bmi.n	15f90 <__aeabi_fsub+0x60>
   1601a:	075a      	lsls	r2, r3, #29
   1601c:	d1d0      	bne.n	15fc0 <__aeabi_fsub+0x90>
   1601e:	2201      	movs	r2, #1
   16020:	08df      	lsrs	r7, r3, #3
   16022:	402a      	ands	r2, r5
   16024:	2cff      	cmp	r4, #255	; 0xff
   16026:	d133      	bne.n	16090 <__aeabi_fsub+0x160>
   16028:	2f00      	cmp	r7, #0
   1602a:	d100      	bne.n	1602e <__aeabi_fsub+0xfe>
   1602c:	e0a8      	b.n	16180 <__aeabi_fsub+0x250>
   1602e:	2380      	movs	r3, #128	; 0x80
   16030:	03db      	lsls	r3, r3, #15
   16032:	433b      	orrs	r3, r7
   16034:	025b      	lsls	r3, r3, #9
   16036:	0a5b      	lsrs	r3, r3, #9
   16038:	24ff      	movs	r4, #255	; 0xff
   1603a:	e7d1      	b.n	15fe0 <__aeabi_fsub+0xb0>
   1603c:	1a21      	subs	r1, r4, r0
   1603e:	2900      	cmp	r1, #0
   16040:	dd4c      	ble.n	160dc <__aeabi_fsub+0x1ac>
   16042:	2800      	cmp	r0, #0
   16044:	d02a      	beq.n	1609c <__aeabi_fsub+0x16c>
   16046:	2cff      	cmp	r4, #255	; 0xff
   16048:	d0b8      	beq.n	15fbc <__aeabi_fsub+0x8c>
   1604a:	2080      	movs	r0, #128	; 0x80
   1604c:	04c0      	lsls	r0, r0, #19
   1604e:	4306      	orrs	r6, r0
   16050:	291b      	cmp	r1, #27
   16052:	dd00      	ble.n	16056 <__aeabi_fsub+0x126>
   16054:	e0af      	b.n	161b6 <__aeabi_fsub+0x286>
   16056:	0030      	movs	r0, r6
   16058:	2720      	movs	r7, #32
   1605a:	40c8      	lsrs	r0, r1
   1605c:	1a79      	subs	r1, r7, r1
   1605e:	408e      	lsls	r6, r1
   16060:	1e71      	subs	r1, r6, #1
   16062:	418e      	sbcs	r6, r1
   16064:	4306      	orrs	r6, r0
   16066:	199b      	adds	r3, r3, r6
   16068:	0159      	lsls	r1, r3, #5
   1606a:	d5d6      	bpl.n	1601a <__aeabi_fsub+0xea>
   1606c:	3401      	adds	r4, #1
   1606e:	2cff      	cmp	r4, #255	; 0xff
   16070:	d100      	bne.n	16074 <__aeabi_fsub+0x144>
   16072:	e085      	b.n	16180 <__aeabi_fsub+0x250>
   16074:	2201      	movs	r2, #1
   16076:	497a      	ldr	r1, [pc, #488]	; (16260 <__aeabi_fsub+0x330>)
   16078:	401a      	ands	r2, r3
   1607a:	085b      	lsrs	r3, r3, #1
   1607c:	400b      	ands	r3, r1
   1607e:	4313      	orrs	r3, r2
   16080:	e79c      	b.n	15fbc <__aeabi_fsub+0x8c>
   16082:	2e00      	cmp	r6, #0
   16084:	d000      	beq.n	16088 <__aeabi_fsub+0x158>
   16086:	e770      	b.n	15f6a <__aeabi_fsub+0x3a>
   16088:	e76b      	b.n	15f62 <__aeabi_fsub+0x32>
   1608a:	1e3b      	subs	r3, r7, #0
   1608c:	d1c5      	bne.n	1601a <__aeabi_fsub+0xea>
   1608e:	2200      	movs	r2, #0
   16090:	027b      	lsls	r3, r7, #9
   16092:	0a5b      	lsrs	r3, r3, #9
   16094:	b2e4      	uxtb	r4, r4
   16096:	e7a3      	b.n	15fe0 <__aeabi_fsub+0xb0>
   16098:	0014      	movs	r4, r2
   1609a:	e78f      	b.n	15fbc <__aeabi_fsub+0x8c>
   1609c:	2e00      	cmp	r6, #0
   1609e:	d04d      	beq.n	1613c <__aeabi_fsub+0x20c>
   160a0:	1e48      	subs	r0, r1, #1
   160a2:	2800      	cmp	r0, #0
   160a4:	d157      	bne.n	16156 <__aeabi_fsub+0x226>
   160a6:	199b      	adds	r3, r3, r6
   160a8:	2401      	movs	r4, #1
   160aa:	015a      	lsls	r2, r3, #5
   160ac:	d5b5      	bpl.n	1601a <__aeabi_fsub+0xea>
   160ae:	2402      	movs	r4, #2
   160b0:	e7e0      	b.n	16074 <__aeabi_fsub+0x144>
   160b2:	2a00      	cmp	r2, #0
   160b4:	d125      	bne.n	16102 <__aeabi_fsub+0x1d2>
   160b6:	1c62      	adds	r2, r4, #1
   160b8:	b2d2      	uxtb	r2, r2
   160ba:	2a01      	cmp	r2, #1
   160bc:	dd72      	ble.n	161a4 <__aeabi_fsub+0x274>
   160be:	1b9f      	subs	r7, r3, r6
   160c0:	017a      	lsls	r2, r7, #5
   160c2:	d535      	bpl.n	16130 <__aeabi_fsub+0x200>
   160c4:	1af7      	subs	r7, r6, r3
   160c6:	000d      	movs	r5, r1
   160c8:	e764      	b.n	15f94 <__aeabi_fsub+0x64>
   160ca:	2201      	movs	r2, #1
   160cc:	2300      	movs	r3, #0
   160ce:	402a      	ands	r2, r5
   160d0:	e786      	b.n	15fe0 <__aeabi_fsub+0xb0>
   160d2:	003b      	movs	r3, r7
   160d4:	4a63      	ldr	r2, [pc, #396]	; (16264 <__aeabi_fsub+0x334>)
   160d6:	1a24      	subs	r4, r4, r0
   160d8:	4013      	ands	r3, r2
   160da:	e76f      	b.n	15fbc <__aeabi_fsub+0x8c>
   160dc:	2900      	cmp	r1, #0
   160de:	d16c      	bne.n	161ba <__aeabi_fsub+0x28a>
   160e0:	1c61      	adds	r1, r4, #1
   160e2:	b2c8      	uxtb	r0, r1
   160e4:	2801      	cmp	r0, #1
   160e6:	dd4e      	ble.n	16186 <__aeabi_fsub+0x256>
   160e8:	29ff      	cmp	r1, #255	; 0xff
   160ea:	d049      	beq.n	16180 <__aeabi_fsub+0x250>
   160ec:	199b      	adds	r3, r3, r6
   160ee:	085b      	lsrs	r3, r3, #1
   160f0:	000c      	movs	r4, r1
   160f2:	e763      	b.n	15fbc <__aeabi_fsub+0x8c>
   160f4:	2aff      	cmp	r2, #255	; 0xff
   160f6:	d041      	beq.n	1617c <__aeabi_fsub+0x24c>
   160f8:	000a      	movs	r2, r1
   160fa:	e781      	b.n	16000 <__aeabi_fsub+0xd0>
   160fc:	2601      	movs	r6, #1
   160fe:	1b9b      	subs	r3, r3, r6
   16100:	e789      	b.n	16016 <__aeabi_fsub+0xe6>
   16102:	2c00      	cmp	r4, #0
   16104:	d01c      	beq.n	16140 <__aeabi_fsub+0x210>
   16106:	28ff      	cmp	r0, #255	; 0xff
   16108:	d021      	beq.n	1614e <__aeabi_fsub+0x21e>
   1610a:	2480      	movs	r4, #128	; 0x80
   1610c:	04e4      	lsls	r4, r4, #19
   1610e:	4252      	negs	r2, r2
   16110:	4323      	orrs	r3, r4
   16112:	2a1b      	cmp	r2, #27
   16114:	dd00      	ble.n	16118 <__aeabi_fsub+0x1e8>
   16116:	e096      	b.n	16246 <__aeabi_fsub+0x316>
   16118:	001c      	movs	r4, r3
   1611a:	2520      	movs	r5, #32
   1611c:	40d4      	lsrs	r4, r2
   1611e:	1aaa      	subs	r2, r5, r2
   16120:	4093      	lsls	r3, r2
   16122:	1e5a      	subs	r2, r3, #1
   16124:	4193      	sbcs	r3, r2
   16126:	4323      	orrs	r3, r4
   16128:	1af3      	subs	r3, r6, r3
   1612a:	0004      	movs	r4, r0
   1612c:	000d      	movs	r5, r1
   1612e:	e72d      	b.n	15f8c <__aeabi_fsub+0x5c>
   16130:	2f00      	cmp	r7, #0
   16132:	d000      	beq.n	16136 <__aeabi_fsub+0x206>
   16134:	e72e      	b.n	15f94 <__aeabi_fsub+0x64>
   16136:	2200      	movs	r2, #0
   16138:	2400      	movs	r4, #0
   1613a:	e7a9      	b.n	16090 <__aeabi_fsub+0x160>
   1613c:	000c      	movs	r4, r1
   1613e:	e73d      	b.n	15fbc <__aeabi_fsub+0x8c>
   16140:	2b00      	cmp	r3, #0
   16142:	d058      	beq.n	161f6 <__aeabi_fsub+0x2c6>
   16144:	43d2      	mvns	r2, r2
   16146:	2a00      	cmp	r2, #0
   16148:	d0ee      	beq.n	16128 <__aeabi_fsub+0x1f8>
   1614a:	28ff      	cmp	r0, #255	; 0xff
   1614c:	d1e1      	bne.n	16112 <__aeabi_fsub+0x1e2>
   1614e:	0033      	movs	r3, r6
   16150:	24ff      	movs	r4, #255	; 0xff
   16152:	000d      	movs	r5, r1
   16154:	e732      	b.n	15fbc <__aeabi_fsub+0x8c>
   16156:	29ff      	cmp	r1, #255	; 0xff
   16158:	d010      	beq.n	1617c <__aeabi_fsub+0x24c>
   1615a:	0001      	movs	r1, r0
   1615c:	e778      	b.n	16050 <__aeabi_fsub+0x120>
   1615e:	2b00      	cmp	r3, #0
   16160:	d06e      	beq.n	16240 <__aeabi_fsub+0x310>
   16162:	24ff      	movs	r4, #255	; 0xff
   16164:	2e00      	cmp	r6, #0
   16166:	d100      	bne.n	1616a <__aeabi_fsub+0x23a>
   16168:	e728      	b.n	15fbc <__aeabi_fsub+0x8c>
   1616a:	2280      	movs	r2, #128	; 0x80
   1616c:	4651      	mov	r1, sl
   1616e:	03d2      	lsls	r2, r2, #15
   16170:	4211      	tst	r1, r2
   16172:	d003      	beq.n	1617c <__aeabi_fsub+0x24c>
   16174:	4661      	mov	r1, ip
   16176:	4211      	tst	r1, r2
   16178:	d100      	bne.n	1617c <__aeabi_fsub+0x24c>
   1617a:	0033      	movs	r3, r6
   1617c:	24ff      	movs	r4, #255	; 0xff
   1617e:	e71d      	b.n	15fbc <__aeabi_fsub+0x8c>
   16180:	24ff      	movs	r4, #255	; 0xff
   16182:	2300      	movs	r3, #0
   16184:	e72c      	b.n	15fe0 <__aeabi_fsub+0xb0>
   16186:	2c00      	cmp	r4, #0
   16188:	d1e9      	bne.n	1615e <__aeabi_fsub+0x22e>
   1618a:	2b00      	cmp	r3, #0
   1618c:	d063      	beq.n	16256 <__aeabi_fsub+0x326>
   1618e:	2e00      	cmp	r6, #0
   16190:	d100      	bne.n	16194 <__aeabi_fsub+0x264>
   16192:	e713      	b.n	15fbc <__aeabi_fsub+0x8c>
   16194:	199b      	adds	r3, r3, r6
   16196:	015a      	lsls	r2, r3, #5
   16198:	d400      	bmi.n	1619c <__aeabi_fsub+0x26c>
   1619a:	e73e      	b.n	1601a <__aeabi_fsub+0xea>
   1619c:	4a31      	ldr	r2, [pc, #196]	; (16264 <__aeabi_fsub+0x334>)
   1619e:	000c      	movs	r4, r1
   161a0:	4013      	ands	r3, r2
   161a2:	e70b      	b.n	15fbc <__aeabi_fsub+0x8c>
   161a4:	2c00      	cmp	r4, #0
   161a6:	d11e      	bne.n	161e6 <__aeabi_fsub+0x2b6>
   161a8:	2b00      	cmp	r3, #0
   161aa:	d12f      	bne.n	1620c <__aeabi_fsub+0x2dc>
   161ac:	2e00      	cmp	r6, #0
   161ae:	d04f      	beq.n	16250 <__aeabi_fsub+0x320>
   161b0:	0033      	movs	r3, r6
   161b2:	000d      	movs	r5, r1
   161b4:	e702      	b.n	15fbc <__aeabi_fsub+0x8c>
   161b6:	2601      	movs	r6, #1
   161b8:	e755      	b.n	16066 <__aeabi_fsub+0x136>
   161ba:	2c00      	cmp	r4, #0
   161bc:	d11f      	bne.n	161fe <__aeabi_fsub+0x2ce>
   161be:	2b00      	cmp	r3, #0
   161c0:	d043      	beq.n	1624a <__aeabi_fsub+0x31a>
   161c2:	43c9      	mvns	r1, r1
   161c4:	2900      	cmp	r1, #0
   161c6:	d00b      	beq.n	161e0 <__aeabi_fsub+0x2b0>
   161c8:	28ff      	cmp	r0, #255	; 0xff
   161ca:	d039      	beq.n	16240 <__aeabi_fsub+0x310>
   161cc:	291b      	cmp	r1, #27
   161ce:	dc44      	bgt.n	1625a <__aeabi_fsub+0x32a>
   161d0:	001c      	movs	r4, r3
   161d2:	2720      	movs	r7, #32
   161d4:	40cc      	lsrs	r4, r1
   161d6:	1a79      	subs	r1, r7, r1
   161d8:	408b      	lsls	r3, r1
   161da:	1e59      	subs	r1, r3, #1
   161dc:	418b      	sbcs	r3, r1
   161de:	4323      	orrs	r3, r4
   161e0:	199b      	adds	r3, r3, r6
   161e2:	0004      	movs	r4, r0
   161e4:	e740      	b.n	16068 <__aeabi_fsub+0x138>
   161e6:	2b00      	cmp	r3, #0
   161e8:	d11a      	bne.n	16220 <__aeabi_fsub+0x2f0>
   161ea:	2e00      	cmp	r6, #0
   161ec:	d124      	bne.n	16238 <__aeabi_fsub+0x308>
   161ee:	2780      	movs	r7, #128	; 0x80
   161f0:	2200      	movs	r2, #0
   161f2:	03ff      	lsls	r7, r7, #15
   161f4:	e71b      	b.n	1602e <__aeabi_fsub+0xfe>
   161f6:	0033      	movs	r3, r6
   161f8:	0004      	movs	r4, r0
   161fa:	000d      	movs	r5, r1
   161fc:	e6de      	b.n	15fbc <__aeabi_fsub+0x8c>
   161fe:	28ff      	cmp	r0, #255	; 0xff
   16200:	d01e      	beq.n	16240 <__aeabi_fsub+0x310>
   16202:	2480      	movs	r4, #128	; 0x80
   16204:	04e4      	lsls	r4, r4, #19
   16206:	4249      	negs	r1, r1
   16208:	4323      	orrs	r3, r4
   1620a:	e7df      	b.n	161cc <__aeabi_fsub+0x29c>
   1620c:	2e00      	cmp	r6, #0
   1620e:	d100      	bne.n	16212 <__aeabi_fsub+0x2e2>
   16210:	e6d4      	b.n	15fbc <__aeabi_fsub+0x8c>
   16212:	1b9f      	subs	r7, r3, r6
   16214:	017a      	lsls	r2, r7, #5
   16216:	d400      	bmi.n	1621a <__aeabi_fsub+0x2ea>
   16218:	e737      	b.n	1608a <__aeabi_fsub+0x15a>
   1621a:	1af3      	subs	r3, r6, r3
   1621c:	000d      	movs	r5, r1
   1621e:	e6cd      	b.n	15fbc <__aeabi_fsub+0x8c>
   16220:	24ff      	movs	r4, #255	; 0xff
   16222:	2e00      	cmp	r6, #0
   16224:	d100      	bne.n	16228 <__aeabi_fsub+0x2f8>
   16226:	e6c9      	b.n	15fbc <__aeabi_fsub+0x8c>
   16228:	2280      	movs	r2, #128	; 0x80
   1622a:	4650      	mov	r0, sl
   1622c:	03d2      	lsls	r2, r2, #15
   1622e:	4210      	tst	r0, r2
   16230:	d0a4      	beq.n	1617c <__aeabi_fsub+0x24c>
   16232:	4660      	mov	r0, ip
   16234:	4210      	tst	r0, r2
   16236:	d1a1      	bne.n	1617c <__aeabi_fsub+0x24c>
   16238:	0033      	movs	r3, r6
   1623a:	000d      	movs	r5, r1
   1623c:	24ff      	movs	r4, #255	; 0xff
   1623e:	e6bd      	b.n	15fbc <__aeabi_fsub+0x8c>
   16240:	0033      	movs	r3, r6
   16242:	24ff      	movs	r4, #255	; 0xff
   16244:	e6ba      	b.n	15fbc <__aeabi_fsub+0x8c>
   16246:	2301      	movs	r3, #1
   16248:	e76e      	b.n	16128 <__aeabi_fsub+0x1f8>
   1624a:	0033      	movs	r3, r6
   1624c:	0004      	movs	r4, r0
   1624e:	e6b5      	b.n	15fbc <__aeabi_fsub+0x8c>
   16250:	2700      	movs	r7, #0
   16252:	2200      	movs	r2, #0
   16254:	e71c      	b.n	16090 <__aeabi_fsub+0x160>
   16256:	0033      	movs	r3, r6
   16258:	e6b0      	b.n	15fbc <__aeabi_fsub+0x8c>
   1625a:	2301      	movs	r3, #1
   1625c:	e7c0      	b.n	161e0 <__aeabi_fsub+0x2b0>
   1625e:	46c0      	nop			; (mov r8, r8)
   16260:	7dffffff 	.word	0x7dffffff
   16264:	fbffffff 	.word	0xfbffffff

00016268 <__aeabi_f2iz>:
   16268:	0241      	lsls	r1, r0, #9
   1626a:	0043      	lsls	r3, r0, #1
   1626c:	0fc2      	lsrs	r2, r0, #31
   1626e:	0a49      	lsrs	r1, r1, #9
   16270:	0e1b      	lsrs	r3, r3, #24
   16272:	2000      	movs	r0, #0
   16274:	2b7e      	cmp	r3, #126	; 0x7e
   16276:	dd0d      	ble.n	16294 <__aeabi_f2iz+0x2c>
   16278:	2b9d      	cmp	r3, #157	; 0x9d
   1627a:	dc0c      	bgt.n	16296 <__aeabi_f2iz+0x2e>
   1627c:	2080      	movs	r0, #128	; 0x80
   1627e:	0400      	lsls	r0, r0, #16
   16280:	4301      	orrs	r1, r0
   16282:	2b95      	cmp	r3, #149	; 0x95
   16284:	dc0a      	bgt.n	1629c <__aeabi_f2iz+0x34>
   16286:	2096      	movs	r0, #150	; 0x96
   16288:	1ac3      	subs	r3, r0, r3
   1628a:	40d9      	lsrs	r1, r3
   1628c:	4248      	negs	r0, r1
   1628e:	2a00      	cmp	r2, #0
   16290:	d100      	bne.n	16294 <__aeabi_f2iz+0x2c>
   16292:	0008      	movs	r0, r1
   16294:	4770      	bx	lr
   16296:	4b03      	ldr	r3, [pc, #12]	; (162a4 <__aeabi_f2iz+0x3c>)
   16298:	18d0      	adds	r0, r2, r3
   1629a:	e7fb      	b.n	16294 <__aeabi_f2iz+0x2c>
   1629c:	3b96      	subs	r3, #150	; 0x96
   1629e:	4099      	lsls	r1, r3
   162a0:	e7f4      	b.n	1628c <__aeabi_f2iz+0x24>
   162a2:	46c0      	nop			; (mov r8, r8)
   162a4:	7fffffff 	.word	0x7fffffff

000162a8 <__aeabi_i2f>:
   162a8:	b570      	push	{r4, r5, r6, lr}
   162aa:	2800      	cmp	r0, #0
   162ac:	d030      	beq.n	16310 <__aeabi_i2f+0x68>
   162ae:	17c3      	asrs	r3, r0, #31
   162b0:	18c4      	adds	r4, r0, r3
   162b2:	405c      	eors	r4, r3
   162b4:	0fc5      	lsrs	r5, r0, #31
   162b6:	0020      	movs	r0, r4
   162b8:	f001 fe66 	bl	17f88 <__clzsi2>
   162bc:	239e      	movs	r3, #158	; 0x9e
   162be:	1a1b      	subs	r3, r3, r0
   162c0:	2b96      	cmp	r3, #150	; 0x96
   162c2:	dc0d      	bgt.n	162e0 <__aeabi_i2f+0x38>
   162c4:	2296      	movs	r2, #150	; 0x96
   162c6:	1ad2      	subs	r2, r2, r3
   162c8:	4094      	lsls	r4, r2
   162ca:	002a      	movs	r2, r5
   162cc:	0264      	lsls	r4, r4, #9
   162ce:	0a64      	lsrs	r4, r4, #9
   162d0:	b2db      	uxtb	r3, r3
   162d2:	0264      	lsls	r4, r4, #9
   162d4:	05db      	lsls	r3, r3, #23
   162d6:	0a60      	lsrs	r0, r4, #9
   162d8:	07d2      	lsls	r2, r2, #31
   162da:	4318      	orrs	r0, r3
   162dc:	4310      	orrs	r0, r2
   162de:	bd70      	pop	{r4, r5, r6, pc}
   162e0:	2b99      	cmp	r3, #153	; 0x99
   162e2:	dc19      	bgt.n	16318 <__aeabi_i2f+0x70>
   162e4:	2299      	movs	r2, #153	; 0x99
   162e6:	1ad2      	subs	r2, r2, r3
   162e8:	2a00      	cmp	r2, #0
   162ea:	dd29      	ble.n	16340 <__aeabi_i2f+0x98>
   162ec:	4094      	lsls	r4, r2
   162ee:	0022      	movs	r2, r4
   162f0:	4c14      	ldr	r4, [pc, #80]	; (16344 <__aeabi_i2f+0x9c>)
   162f2:	4014      	ands	r4, r2
   162f4:	0751      	lsls	r1, r2, #29
   162f6:	d004      	beq.n	16302 <__aeabi_i2f+0x5a>
   162f8:	210f      	movs	r1, #15
   162fa:	400a      	ands	r2, r1
   162fc:	2a04      	cmp	r2, #4
   162fe:	d000      	beq.n	16302 <__aeabi_i2f+0x5a>
   16300:	3404      	adds	r4, #4
   16302:	0162      	lsls	r2, r4, #5
   16304:	d413      	bmi.n	1632e <__aeabi_i2f+0x86>
   16306:	01a4      	lsls	r4, r4, #6
   16308:	0a64      	lsrs	r4, r4, #9
   1630a:	b2db      	uxtb	r3, r3
   1630c:	002a      	movs	r2, r5
   1630e:	e7e0      	b.n	162d2 <__aeabi_i2f+0x2a>
   16310:	2200      	movs	r2, #0
   16312:	2300      	movs	r3, #0
   16314:	2400      	movs	r4, #0
   16316:	e7dc      	b.n	162d2 <__aeabi_i2f+0x2a>
   16318:	2205      	movs	r2, #5
   1631a:	0021      	movs	r1, r4
   1631c:	1a12      	subs	r2, r2, r0
   1631e:	40d1      	lsrs	r1, r2
   16320:	22b9      	movs	r2, #185	; 0xb9
   16322:	1ad2      	subs	r2, r2, r3
   16324:	4094      	lsls	r4, r2
   16326:	1e62      	subs	r2, r4, #1
   16328:	4194      	sbcs	r4, r2
   1632a:	430c      	orrs	r4, r1
   1632c:	e7da      	b.n	162e4 <__aeabi_i2f+0x3c>
   1632e:	4b05      	ldr	r3, [pc, #20]	; (16344 <__aeabi_i2f+0x9c>)
   16330:	002a      	movs	r2, r5
   16332:	401c      	ands	r4, r3
   16334:	239f      	movs	r3, #159	; 0x9f
   16336:	01a4      	lsls	r4, r4, #6
   16338:	1a1b      	subs	r3, r3, r0
   1633a:	0a64      	lsrs	r4, r4, #9
   1633c:	b2db      	uxtb	r3, r3
   1633e:	e7c8      	b.n	162d2 <__aeabi_i2f+0x2a>
   16340:	0022      	movs	r2, r4
   16342:	e7d5      	b.n	162f0 <__aeabi_i2f+0x48>
   16344:	fbffffff 	.word	0xfbffffff

00016348 <__aeabi_ui2f>:
   16348:	b510      	push	{r4, lr}
   1634a:	1e04      	subs	r4, r0, #0
   1634c:	d027      	beq.n	1639e <__aeabi_ui2f+0x56>
   1634e:	f001 fe1b 	bl	17f88 <__clzsi2>
   16352:	239e      	movs	r3, #158	; 0x9e
   16354:	1a1b      	subs	r3, r3, r0
   16356:	2b96      	cmp	r3, #150	; 0x96
   16358:	dc0a      	bgt.n	16370 <__aeabi_ui2f+0x28>
   1635a:	2296      	movs	r2, #150	; 0x96
   1635c:	1ad2      	subs	r2, r2, r3
   1635e:	4094      	lsls	r4, r2
   16360:	0264      	lsls	r4, r4, #9
   16362:	0a64      	lsrs	r4, r4, #9
   16364:	b2db      	uxtb	r3, r3
   16366:	0264      	lsls	r4, r4, #9
   16368:	05db      	lsls	r3, r3, #23
   1636a:	0a60      	lsrs	r0, r4, #9
   1636c:	4318      	orrs	r0, r3
   1636e:	bd10      	pop	{r4, pc}
   16370:	2b99      	cmp	r3, #153	; 0x99
   16372:	dc17      	bgt.n	163a4 <__aeabi_ui2f+0x5c>
   16374:	2299      	movs	r2, #153	; 0x99
   16376:	1ad2      	subs	r2, r2, r3
   16378:	2a00      	cmp	r2, #0
   1637a:	dd27      	ble.n	163cc <__aeabi_ui2f+0x84>
   1637c:	4094      	lsls	r4, r2
   1637e:	0022      	movs	r2, r4
   16380:	4c13      	ldr	r4, [pc, #76]	; (163d0 <__aeabi_ui2f+0x88>)
   16382:	4014      	ands	r4, r2
   16384:	0751      	lsls	r1, r2, #29
   16386:	d004      	beq.n	16392 <__aeabi_ui2f+0x4a>
   16388:	210f      	movs	r1, #15
   1638a:	400a      	ands	r2, r1
   1638c:	2a04      	cmp	r2, #4
   1638e:	d000      	beq.n	16392 <__aeabi_ui2f+0x4a>
   16390:	3404      	adds	r4, #4
   16392:	0162      	lsls	r2, r4, #5
   16394:	d412      	bmi.n	163bc <__aeabi_ui2f+0x74>
   16396:	01a4      	lsls	r4, r4, #6
   16398:	0a64      	lsrs	r4, r4, #9
   1639a:	b2db      	uxtb	r3, r3
   1639c:	e7e3      	b.n	16366 <__aeabi_ui2f+0x1e>
   1639e:	2300      	movs	r3, #0
   163a0:	2400      	movs	r4, #0
   163a2:	e7e0      	b.n	16366 <__aeabi_ui2f+0x1e>
   163a4:	22b9      	movs	r2, #185	; 0xb9
   163a6:	0021      	movs	r1, r4
   163a8:	1ad2      	subs	r2, r2, r3
   163aa:	4091      	lsls	r1, r2
   163ac:	000a      	movs	r2, r1
   163ae:	1e51      	subs	r1, r2, #1
   163b0:	418a      	sbcs	r2, r1
   163b2:	2105      	movs	r1, #5
   163b4:	1a09      	subs	r1, r1, r0
   163b6:	40cc      	lsrs	r4, r1
   163b8:	4314      	orrs	r4, r2
   163ba:	e7db      	b.n	16374 <__aeabi_ui2f+0x2c>
   163bc:	4b04      	ldr	r3, [pc, #16]	; (163d0 <__aeabi_ui2f+0x88>)
   163be:	401c      	ands	r4, r3
   163c0:	239f      	movs	r3, #159	; 0x9f
   163c2:	01a4      	lsls	r4, r4, #6
   163c4:	1a1b      	subs	r3, r3, r0
   163c6:	0a64      	lsrs	r4, r4, #9
   163c8:	b2db      	uxtb	r3, r3
   163ca:	e7cc      	b.n	16366 <__aeabi_ui2f+0x1e>
   163cc:	0022      	movs	r2, r4
   163ce:	e7d7      	b.n	16380 <__aeabi_ui2f+0x38>
   163d0:	fbffffff 	.word	0xfbffffff

000163d4 <__aeabi_dadd>:
   163d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163d6:	4645      	mov	r5, r8
   163d8:	46de      	mov	lr, fp
   163da:	4657      	mov	r7, sl
   163dc:	464e      	mov	r6, r9
   163de:	030c      	lsls	r4, r1, #12
   163e0:	b5e0      	push	{r5, r6, r7, lr}
   163e2:	004e      	lsls	r6, r1, #1
   163e4:	0fc9      	lsrs	r1, r1, #31
   163e6:	4688      	mov	r8, r1
   163e8:	000d      	movs	r5, r1
   163ea:	0a61      	lsrs	r1, r4, #9
   163ec:	0f44      	lsrs	r4, r0, #29
   163ee:	430c      	orrs	r4, r1
   163f0:	00c7      	lsls	r7, r0, #3
   163f2:	0319      	lsls	r1, r3, #12
   163f4:	0058      	lsls	r0, r3, #1
   163f6:	0fdb      	lsrs	r3, r3, #31
   163f8:	469b      	mov	fp, r3
   163fa:	0a4b      	lsrs	r3, r1, #9
   163fc:	0f51      	lsrs	r1, r2, #29
   163fe:	430b      	orrs	r3, r1
   16400:	0d76      	lsrs	r6, r6, #21
   16402:	0d40      	lsrs	r0, r0, #21
   16404:	0019      	movs	r1, r3
   16406:	00d2      	lsls	r2, r2, #3
   16408:	45d8      	cmp	r8, fp
   1640a:	d100      	bne.n	1640e <__aeabi_dadd+0x3a>
   1640c:	e0ae      	b.n	1656c <__aeabi_dadd+0x198>
   1640e:	1a35      	subs	r5, r6, r0
   16410:	2d00      	cmp	r5, #0
   16412:	dc00      	bgt.n	16416 <__aeabi_dadd+0x42>
   16414:	e0f6      	b.n	16604 <__aeabi_dadd+0x230>
   16416:	2800      	cmp	r0, #0
   16418:	d10f      	bne.n	1643a <__aeabi_dadd+0x66>
   1641a:	4313      	orrs	r3, r2
   1641c:	d100      	bne.n	16420 <__aeabi_dadd+0x4c>
   1641e:	e0db      	b.n	165d8 <__aeabi_dadd+0x204>
   16420:	1e6b      	subs	r3, r5, #1
   16422:	2b00      	cmp	r3, #0
   16424:	d000      	beq.n	16428 <__aeabi_dadd+0x54>
   16426:	e137      	b.n	16698 <__aeabi_dadd+0x2c4>
   16428:	1aba      	subs	r2, r7, r2
   1642a:	4297      	cmp	r7, r2
   1642c:	41bf      	sbcs	r7, r7
   1642e:	1a64      	subs	r4, r4, r1
   16430:	427f      	negs	r7, r7
   16432:	1be4      	subs	r4, r4, r7
   16434:	2601      	movs	r6, #1
   16436:	0017      	movs	r7, r2
   16438:	e024      	b.n	16484 <__aeabi_dadd+0xb0>
   1643a:	4bc6      	ldr	r3, [pc, #792]	; (16754 <__aeabi_dadd+0x380>)
   1643c:	429e      	cmp	r6, r3
   1643e:	d04d      	beq.n	164dc <__aeabi_dadd+0x108>
   16440:	2380      	movs	r3, #128	; 0x80
   16442:	041b      	lsls	r3, r3, #16
   16444:	4319      	orrs	r1, r3
   16446:	2d38      	cmp	r5, #56	; 0x38
   16448:	dd00      	ble.n	1644c <__aeabi_dadd+0x78>
   1644a:	e107      	b.n	1665c <__aeabi_dadd+0x288>
   1644c:	2d1f      	cmp	r5, #31
   1644e:	dd00      	ble.n	16452 <__aeabi_dadd+0x7e>
   16450:	e138      	b.n	166c4 <__aeabi_dadd+0x2f0>
   16452:	2020      	movs	r0, #32
   16454:	1b43      	subs	r3, r0, r5
   16456:	469a      	mov	sl, r3
   16458:	000b      	movs	r3, r1
   1645a:	4650      	mov	r0, sl
   1645c:	4083      	lsls	r3, r0
   1645e:	4699      	mov	r9, r3
   16460:	0013      	movs	r3, r2
   16462:	4648      	mov	r0, r9
   16464:	40eb      	lsrs	r3, r5
   16466:	4318      	orrs	r0, r3
   16468:	0003      	movs	r3, r0
   1646a:	4650      	mov	r0, sl
   1646c:	4082      	lsls	r2, r0
   1646e:	1e50      	subs	r0, r2, #1
   16470:	4182      	sbcs	r2, r0
   16472:	40e9      	lsrs	r1, r5
   16474:	431a      	orrs	r2, r3
   16476:	1aba      	subs	r2, r7, r2
   16478:	1a61      	subs	r1, r4, r1
   1647a:	4297      	cmp	r7, r2
   1647c:	41a4      	sbcs	r4, r4
   1647e:	0017      	movs	r7, r2
   16480:	4264      	negs	r4, r4
   16482:	1b0c      	subs	r4, r1, r4
   16484:	0223      	lsls	r3, r4, #8
   16486:	d562      	bpl.n	1654e <__aeabi_dadd+0x17a>
   16488:	0264      	lsls	r4, r4, #9
   1648a:	0a65      	lsrs	r5, r4, #9
   1648c:	2d00      	cmp	r5, #0
   1648e:	d100      	bne.n	16492 <__aeabi_dadd+0xbe>
   16490:	e0df      	b.n	16652 <__aeabi_dadd+0x27e>
   16492:	0028      	movs	r0, r5
   16494:	f001 fd78 	bl	17f88 <__clzsi2>
   16498:	0003      	movs	r3, r0
   1649a:	3b08      	subs	r3, #8
   1649c:	2b1f      	cmp	r3, #31
   1649e:	dd00      	ble.n	164a2 <__aeabi_dadd+0xce>
   164a0:	e0d2      	b.n	16648 <__aeabi_dadd+0x274>
   164a2:	2220      	movs	r2, #32
   164a4:	003c      	movs	r4, r7
   164a6:	1ad2      	subs	r2, r2, r3
   164a8:	409d      	lsls	r5, r3
   164aa:	40d4      	lsrs	r4, r2
   164ac:	409f      	lsls	r7, r3
   164ae:	4325      	orrs	r5, r4
   164b0:	429e      	cmp	r6, r3
   164b2:	dd00      	ble.n	164b6 <__aeabi_dadd+0xe2>
   164b4:	e0c4      	b.n	16640 <__aeabi_dadd+0x26c>
   164b6:	1b9e      	subs	r6, r3, r6
   164b8:	1c73      	adds	r3, r6, #1
   164ba:	2b1f      	cmp	r3, #31
   164bc:	dd00      	ble.n	164c0 <__aeabi_dadd+0xec>
   164be:	e0f1      	b.n	166a4 <__aeabi_dadd+0x2d0>
   164c0:	2220      	movs	r2, #32
   164c2:	0038      	movs	r0, r7
   164c4:	0029      	movs	r1, r5
   164c6:	1ad2      	subs	r2, r2, r3
   164c8:	40d8      	lsrs	r0, r3
   164ca:	4091      	lsls	r1, r2
   164cc:	4097      	lsls	r7, r2
   164ce:	002c      	movs	r4, r5
   164d0:	4301      	orrs	r1, r0
   164d2:	1e78      	subs	r0, r7, #1
   164d4:	4187      	sbcs	r7, r0
   164d6:	40dc      	lsrs	r4, r3
   164d8:	2600      	movs	r6, #0
   164da:	430f      	orrs	r7, r1
   164dc:	077b      	lsls	r3, r7, #29
   164de:	d009      	beq.n	164f4 <__aeabi_dadd+0x120>
   164e0:	230f      	movs	r3, #15
   164e2:	403b      	ands	r3, r7
   164e4:	2b04      	cmp	r3, #4
   164e6:	d005      	beq.n	164f4 <__aeabi_dadd+0x120>
   164e8:	1d3b      	adds	r3, r7, #4
   164ea:	42bb      	cmp	r3, r7
   164ec:	41bf      	sbcs	r7, r7
   164ee:	427f      	negs	r7, r7
   164f0:	19e4      	adds	r4, r4, r7
   164f2:	001f      	movs	r7, r3
   164f4:	0223      	lsls	r3, r4, #8
   164f6:	d52c      	bpl.n	16552 <__aeabi_dadd+0x17e>
   164f8:	4b96      	ldr	r3, [pc, #600]	; (16754 <__aeabi_dadd+0x380>)
   164fa:	3601      	adds	r6, #1
   164fc:	429e      	cmp	r6, r3
   164fe:	d100      	bne.n	16502 <__aeabi_dadd+0x12e>
   16500:	e09a      	b.n	16638 <__aeabi_dadd+0x264>
   16502:	4645      	mov	r5, r8
   16504:	4b94      	ldr	r3, [pc, #592]	; (16758 <__aeabi_dadd+0x384>)
   16506:	08ff      	lsrs	r7, r7, #3
   16508:	401c      	ands	r4, r3
   1650a:	0760      	lsls	r0, r4, #29
   1650c:	0576      	lsls	r6, r6, #21
   1650e:	0264      	lsls	r4, r4, #9
   16510:	4307      	orrs	r7, r0
   16512:	0b24      	lsrs	r4, r4, #12
   16514:	0d76      	lsrs	r6, r6, #21
   16516:	2100      	movs	r1, #0
   16518:	0324      	lsls	r4, r4, #12
   1651a:	0b23      	lsrs	r3, r4, #12
   1651c:	0d0c      	lsrs	r4, r1, #20
   1651e:	4a8f      	ldr	r2, [pc, #572]	; (1675c <__aeabi_dadd+0x388>)
   16520:	0524      	lsls	r4, r4, #20
   16522:	431c      	orrs	r4, r3
   16524:	4014      	ands	r4, r2
   16526:	0533      	lsls	r3, r6, #20
   16528:	4323      	orrs	r3, r4
   1652a:	005b      	lsls	r3, r3, #1
   1652c:	07ed      	lsls	r5, r5, #31
   1652e:	085b      	lsrs	r3, r3, #1
   16530:	432b      	orrs	r3, r5
   16532:	0038      	movs	r0, r7
   16534:	0019      	movs	r1, r3
   16536:	bc3c      	pop	{r2, r3, r4, r5}
   16538:	4690      	mov	r8, r2
   1653a:	4699      	mov	r9, r3
   1653c:	46a2      	mov	sl, r4
   1653e:	46ab      	mov	fp, r5
   16540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16542:	4664      	mov	r4, ip
   16544:	4304      	orrs	r4, r0
   16546:	d100      	bne.n	1654a <__aeabi_dadd+0x176>
   16548:	e211      	b.n	1696e <__aeabi_dadd+0x59a>
   1654a:	0004      	movs	r4, r0
   1654c:	4667      	mov	r7, ip
   1654e:	077b      	lsls	r3, r7, #29
   16550:	d1c6      	bne.n	164e0 <__aeabi_dadd+0x10c>
   16552:	4645      	mov	r5, r8
   16554:	0760      	lsls	r0, r4, #29
   16556:	08ff      	lsrs	r7, r7, #3
   16558:	4307      	orrs	r7, r0
   1655a:	08e4      	lsrs	r4, r4, #3
   1655c:	4b7d      	ldr	r3, [pc, #500]	; (16754 <__aeabi_dadd+0x380>)
   1655e:	429e      	cmp	r6, r3
   16560:	d030      	beq.n	165c4 <__aeabi_dadd+0x1f0>
   16562:	0324      	lsls	r4, r4, #12
   16564:	0576      	lsls	r6, r6, #21
   16566:	0b24      	lsrs	r4, r4, #12
   16568:	0d76      	lsrs	r6, r6, #21
   1656a:	e7d4      	b.n	16516 <__aeabi_dadd+0x142>
   1656c:	1a33      	subs	r3, r6, r0
   1656e:	469a      	mov	sl, r3
   16570:	2b00      	cmp	r3, #0
   16572:	dd78      	ble.n	16666 <__aeabi_dadd+0x292>
   16574:	2800      	cmp	r0, #0
   16576:	d031      	beq.n	165dc <__aeabi_dadd+0x208>
   16578:	4876      	ldr	r0, [pc, #472]	; (16754 <__aeabi_dadd+0x380>)
   1657a:	4286      	cmp	r6, r0
   1657c:	d0ae      	beq.n	164dc <__aeabi_dadd+0x108>
   1657e:	2080      	movs	r0, #128	; 0x80
   16580:	0400      	lsls	r0, r0, #16
   16582:	4301      	orrs	r1, r0
   16584:	4653      	mov	r3, sl
   16586:	2b38      	cmp	r3, #56	; 0x38
   16588:	dc00      	bgt.n	1658c <__aeabi_dadd+0x1b8>
   1658a:	e0e9      	b.n	16760 <__aeabi_dadd+0x38c>
   1658c:	430a      	orrs	r2, r1
   1658e:	1e51      	subs	r1, r2, #1
   16590:	418a      	sbcs	r2, r1
   16592:	2100      	movs	r1, #0
   16594:	19d2      	adds	r2, r2, r7
   16596:	42ba      	cmp	r2, r7
   16598:	41bf      	sbcs	r7, r7
   1659a:	1909      	adds	r1, r1, r4
   1659c:	427c      	negs	r4, r7
   1659e:	0017      	movs	r7, r2
   165a0:	190c      	adds	r4, r1, r4
   165a2:	0223      	lsls	r3, r4, #8
   165a4:	d5d3      	bpl.n	1654e <__aeabi_dadd+0x17a>
   165a6:	4b6b      	ldr	r3, [pc, #428]	; (16754 <__aeabi_dadd+0x380>)
   165a8:	3601      	adds	r6, #1
   165aa:	429e      	cmp	r6, r3
   165ac:	d100      	bne.n	165b0 <__aeabi_dadd+0x1dc>
   165ae:	e13a      	b.n	16826 <__aeabi_dadd+0x452>
   165b0:	2001      	movs	r0, #1
   165b2:	4b69      	ldr	r3, [pc, #420]	; (16758 <__aeabi_dadd+0x384>)
   165b4:	401c      	ands	r4, r3
   165b6:	087b      	lsrs	r3, r7, #1
   165b8:	4007      	ands	r7, r0
   165ba:	431f      	orrs	r7, r3
   165bc:	07e0      	lsls	r0, r4, #31
   165be:	4307      	orrs	r7, r0
   165c0:	0864      	lsrs	r4, r4, #1
   165c2:	e78b      	b.n	164dc <__aeabi_dadd+0x108>
   165c4:	0023      	movs	r3, r4
   165c6:	433b      	orrs	r3, r7
   165c8:	d100      	bne.n	165cc <__aeabi_dadd+0x1f8>
   165ca:	e1cb      	b.n	16964 <__aeabi_dadd+0x590>
   165cc:	2280      	movs	r2, #128	; 0x80
   165ce:	0312      	lsls	r2, r2, #12
   165d0:	4314      	orrs	r4, r2
   165d2:	0324      	lsls	r4, r4, #12
   165d4:	0b24      	lsrs	r4, r4, #12
   165d6:	e79e      	b.n	16516 <__aeabi_dadd+0x142>
   165d8:	002e      	movs	r6, r5
   165da:	e77f      	b.n	164dc <__aeabi_dadd+0x108>
   165dc:	0008      	movs	r0, r1
   165de:	4310      	orrs	r0, r2
   165e0:	d100      	bne.n	165e4 <__aeabi_dadd+0x210>
   165e2:	e0b4      	b.n	1674e <__aeabi_dadd+0x37a>
   165e4:	1e58      	subs	r0, r3, #1
   165e6:	2800      	cmp	r0, #0
   165e8:	d000      	beq.n	165ec <__aeabi_dadd+0x218>
   165ea:	e0de      	b.n	167aa <__aeabi_dadd+0x3d6>
   165ec:	18ba      	adds	r2, r7, r2
   165ee:	42ba      	cmp	r2, r7
   165f0:	419b      	sbcs	r3, r3
   165f2:	1864      	adds	r4, r4, r1
   165f4:	425b      	negs	r3, r3
   165f6:	18e4      	adds	r4, r4, r3
   165f8:	0017      	movs	r7, r2
   165fa:	2601      	movs	r6, #1
   165fc:	0223      	lsls	r3, r4, #8
   165fe:	d5a6      	bpl.n	1654e <__aeabi_dadd+0x17a>
   16600:	2602      	movs	r6, #2
   16602:	e7d5      	b.n	165b0 <__aeabi_dadd+0x1dc>
   16604:	2d00      	cmp	r5, #0
   16606:	d16e      	bne.n	166e6 <__aeabi_dadd+0x312>
   16608:	1c70      	adds	r0, r6, #1
   1660a:	0540      	lsls	r0, r0, #21
   1660c:	0d40      	lsrs	r0, r0, #21
   1660e:	2801      	cmp	r0, #1
   16610:	dc00      	bgt.n	16614 <__aeabi_dadd+0x240>
   16612:	e0f9      	b.n	16808 <__aeabi_dadd+0x434>
   16614:	1ab8      	subs	r0, r7, r2
   16616:	4684      	mov	ip, r0
   16618:	4287      	cmp	r7, r0
   1661a:	4180      	sbcs	r0, r0
   1661c:	1ae5      	subs	r5, r4, r3
   1661e:	4240      	negs	r0, r0
   16620:	1a2d      	subs	r5, r5, r0
   16622:	0228      	lsls	r0, r5, #8
   16624:	d400      	bmi.n	16628 <__aeabi_dadd+0x254>
   16626:	e089      	b.n	1673c <__aeabi_dadd+0x368>
   16628:	1bd7      	subs	r7, r2, r7
   1662a:	42ba      	cmp	r2, r7
   1662c:	4192      	sbcs	r2, r2
   1662e:	1b1c      	subs	r4, r3, r4
   16630:	4252      	negs	r2, r2
   16632:	1aa5      	subs	r5, r4, r2
   16634:	46d8      	mov	r8, fp
   16636:	e729      	b.n	1648c <__aeabi_dadd+0xb8>
   16638:	4645      	mov	r5, r8
   1663a:	2400      	movs	r4, #0
   1663c:	2700      	movs	r7, #0
   1663e:	e76a      	b.n	16516 <__aeabi_dadd+0x142>
   16640:	4c45      	ldr	r4, [pc, #276]	; (16758 <__aeabi_dadd+0x384>)
   16642:	1af6      	subs	r6, r6, r3
   16644:	402c      	ands	r4, r5
   16646:	e749      	b.n	164dc <__aeabi_dadd+0x108>
   16648:	003d      	movs	r5, r7
   1664a:	3828      	subs	r0, #40	; 0x28
   1664c:	4085      	lsls	r5, r0
   1664e:	2700      	movs	r7, #0
   16650:	e72e      	b.n	164b0 <__aeabi_dadd+0xdc>
   16652:	0038      	movs	r0, r7
   16654:	f001 fc98 	bl	17f88 <__clzsi2>
   16658:	3020      	adds	r0, #32
   1665a:	e71d      	b.n	16498 <__aeabi_dadd+0xc4>
   1665c:	430a      	orrs	r2, r1
   1665e:	1e51      	subs	r1, r2, #1
   16660:	418a      	sbcs	r2, r1
   16662:	2100      	movs	r1, #0
   16664:	e707      	b.n	16476 <__aeabi_dadd+0xa2>
   16666:	2b00      	cmp	r3, #0
   16668:	d000      	beq.n	1666c <__aeabi_dadd+0x298>
   1666a:	e0f3      	b.n	16854 <__aeabi_dadd+0x480>
   1666c:	1c70      	adds	r0, r6, #1
   1666e:	0543      	lsls	r3, r0, #21
   16670:	0d5b      	lsrs	r3, r3, #21
   16672:	2b01      	cmp	r3, #1
   16674:	dc00      	bgt.n	16678 <__aeabi_dadd+0x2a4>
   16676:	e0ad      	b.n	167d4 <__aeabi_dadd+0x400>
   16678:	4b36      	ldr	r3, [pc, #216]	; (16754 <__aeabi_dadd+0x380>)
   1667a:	4298      	cmp	r0, r3
   1667c:	d100      	bne.n	16680 <__aeabi_dadd+0x2ac>
   1667e:	e0d1      	b.n	16824 <__aeabi_dadd+0x450>
   16680:	18ba      	adds	r2, r7, r2
   16682:	42ba      	cmp	r2, r7
   16684:	41bf      	sbcs	r7, r7
   16686:	1864      	adds	r4, r4, r1
   16688:	427f      	negs	r7, r7
   1668a:	19e4      	adds	r4, r4, r7
   1668c:	07e7      	lsls	r7, r4, #31
   1668e:	0852      	lsrs	r2, r2, #1
   16690:	4317      	orrs	r7, r2
   16692:	0864      	lsrs	r4, r4, #1
   16694:	0006      	movs	r6, r0
   16696:	e721      	b.n	164dc <__aeabi_dadd+0x108>
   16698:	482e      	ldr	r0, [pc, #184]	; (16754 <__aeabi_dadd+0x380>)
   1669a:	4285      	cmp	r5, r0
   1669c:	d100      	bne.n	166a0 <__aeabi_dadd+0x2cc>
   1669e:	e093      	b.n	167c8 <__aeabi_dadd+0x3f4>
   166a0:	001d      	movs	r5, r3
   166a2:	e6d0      	b.n	16446 <__aeabi_dadd+0x72>
   166a4:	0029      	movs	r1, r5
   166a6:	3e1f      	subs	r6, #31
   166a8:	40f1      	lsrs	r1, r6
   166aa:	2b20      	cmp	r3, #32
   166ac:	d100      	bne.n	166b0 <__aeabi_dadd+0x2dc>
   166ae:	e08d      	b.n	167cc <__aeabi_dadd+0x3f8>
   166b0:	2240      	movs	r2, #64	; 0x40
   166b2:	1ad3      	subs	r3, r2, r3
   166b4:	409d      	lsls	r5, r3
   166b6:	432f      	orrs	r7, r5
   166b8:	1e7d      	subs	r5, r7, #1
   166ba:	41af      	sbcs	r7, r5
   166bc:	2400      	movs	r4, #0
   166be:	430f      	orrs	r7, r1
   166c0:	2600      	movs	r6, #0
   166c2:	e744      	b.n	1654e <__aeabi_dadd+0x17a>
   166c4:	002b      	movs	r3, r5
   166c6:	0008      	movs	r0, r1
   166c8:	3b20      	subs	r3, #32
   166ca:	40d8      	lsrs	r0, r3
   166cc:	0003      	movs	r3, r0
   166ce:	2d20      	cmp	r5, #32
   166d0:	d100      	bne.n	166d4 <__aeabi_dadd+0x300>
   166d2:	e07d      	b.n	167d0 <__aeabi_dadd+0x3fc>
   166d4:	2040      	movs	r0, #64	; 0x40
   166d6:	1b45      	subs	r5, r0, r5
   166d8:	40a9      	lsls	r1, r5
   166da:	430a      	orrs	r2, r1
   166dc:	1e51      	subs	r1, r2, #1
   166de:	418a      	sbcs	r2, r1
   166e0:	2100      	movs	r1, #0
   166e2:	431a      	orrs	r2, r3
   166e4:	e6c7      	b.n	16476 <__aeabi_dadd+0xa2>
   166e6:	2e00      	cmp	r6, #0
   166e8:	d050      	beq.n	1678c <__aeabi_dadd+0x3b8>
   166ea:	4e1a      	ldr	r6, [pc, #104]	; (16754 <__aeabi_dadd+0x380>)
   166ec:	42b0      	cmp	r0, r6
   166ee:	d057      	beq.n	167a0 <__aeabi_dadd+0x3cc>
   166f0:	2680      	movs	r6, #128	; 0x80
   166f2:	426b      	negs	r3, r5
   166f4:	4699      	mov	r9, r3
   166f6:	0436      	lsls	r6, r6, #16
   166f8:	4334      	orrs	r4, r6
   166fa:	464b      	mov	r3, r9
   166fc:	2b38      	cmp	r3, #56	; 0x38
   166fe:	dd00      	ble.n	16702 <__aeabi_dadd+0x32e>
   16700:	e0d6      	b.n	168b0 <__aeabi_dadd+0x4dc>
   16702:	2b1f      	cmp	r3, #31
   16704:	dd00      	ble.n	16708 <__aeabi_dadd+0x334>
   16706:	e135      	b.n	16974 <__aeabi_dadd+0x5a0>
   16708:	2620      	movs	r6, #32
   1670a:	1af5      	subs	r5, r6, r3
   1670c:	0026      	movs	r6, r4
   1670e:	40ae      	lsls	r6, r5
   16710:	46b2      	mov	sl, r6
   16712:	003e      	movs	r6, r7
   16714:	40de      	lsrs	r6, r3
   16716:	46ac      	mov	ip, r5
   16718:	0035      	movs	r5, r6
   1671a:	4656      	mov	r6, sl
   1671c:	432e      	orrs	r6, r5
   1671e:	4665      	mov	r5, ip
   16720:	40af      	lsls	r7, r5
   16722:	1e7d      	subs	r5, r7, #1
   16724:	41af      	sbcs	r7, r5
   16726:	40dc      	lsrs	r4, r3
   16728:	4337      	orrs	r7, r6
   1672a:	1bd7      	subs	r7, r2, r7
   1672c:	42ba      	cmp	r2, r7
   1672e:	4192      	sbcs	r2, r2
   16730:	1b0c      	subs	r4, r1, r4
   16732:	4252      	negs	r2, r2
   16734:	1aa4      	subs	r4, r4, r2
   16736:	0006      	movs	r6, r0
   16738:	46d8      	mov	r8, fp
   1673a:	e6a3      	b.n	16484 <__aeabi_dadd+0xb0>
   1673c:	4664      	mov	r4, ip
   1673e:	4667      	mov	r7, ip
   16740:	432c      	orrs	r4, r5
   16742:	d000      	beq.n	16746 <__aeabi_dadd+0x372>
   16744:	e6a2      	b.n	1648c <__aeabi_dadd+0xb8>
   16746:	2500      	movs	r5, #0
   16748:	2600      	movs	r6, #0
   1674a:	2700      	movs	r7, #0
   1674c:	e706      	b.n	1655c <__aeabi_dadd+0x188>
   1674e:	001e      	movs	r6, r3
   16750:	e6c4      	b.n	164dc <__aeabi_dadd+0x108>
   16752:	46c0      	nop			; (mov r8, r8)
   16754:	000007ff 	.word	0x000007ff
   16758:	ff7fffff 	.word	0xff7fffff
   1675c:	800fffff 	.word	0x800fffff
   16760:	2b1f      	cmp	r3, #31
   16762:	dc63      	bgt.n	1682c <__aeabi_dadd+0x458>
   16764:	2020      	movs	r0, #32
   16766:	1ac3      	subs	r3, r0, r3
   16768:	0008      	movs	r0, r1
   1676a:	4098      	lsls	r0, r3
   1676c:	469c      	mov	ip, r3
   1676e:	4683      	mov	fp, r0
   16770:	4653      	mov	r3, sl
   16772:	0010      	movs	r0, r2
   16774:	40d8      	lsrs	r0, r3
   16776:	0003      	movs	r3, r0
   16778:	4658      	mov	r0, fp
   1677a:	4318      	orrs	r0, r3
   1677c:	4663      	mov	r3, ip
   1677e:	409a      	lsls	r2, r3
   16780:	1e53      	subs	r3, r2, #1
   16782:	419a      	sbcs	r2, r3
   16784:	4653      	mov	r3, sl
   16786:	4302      	orrs	r2, r0
   16788:	40d9      	lsrs	r1, r3
   1678a:	e703      	b.n	16594 <__aeabi_dadd+0x1c0>
   1678c:	0026      	movs	r6, r4
   1678e:	433e      	orrs	r6, r7
   16790:	d006      	beq.n	167a0 <__aeabi_dadd+0x3cc>
   16792:	43eb      	mvns	r3, r5
   16794:	4699      	mov	r9, r3
   16796:	2b00      	cmp	r3, #0
   16798:	d0c7      	beq.n	1672a <__aeabi_dadd+0x356>
   1679a:	4e94      	ldr	r6, [pc, #592]	; (169ec <__aeabi_dadd+0x618>)
   1679c:	42b0      	cmp	r0, r6
   1679e:	d1ac      	bne.n	166fa <__aeabi_dadd+0x326>
   167a0:	000c      	movs	r4, r1
   167a2:	0017      	movs	r7, r2
   167a4:	0006      	movs	r6, r0
   167a6:	46d8      	mov	r8, fp
   167a8:	e698      	b.n	164dc <__aeabi_dadd+0x108>
   167aa:	4b90      	ldr	r3, [pc, #576]	; (169ec <__aeabi_dadd+0x618>)
   167ac:	459a      	cmp	sl, r3
   167ae:	d00b      	beq.n	167c8 <__aeabi_dadd+0x3f4>
   167b0:	4682      	mov	sl, r0
   167b2:	e6e7      	b.n	16584 <__aeabi_dadd+0x1b0>
   167b4:	2800      	cmp	r0, #0
   167b6:	d000      	beq.n	167ba <__aeabi_dadd+0x3e6>
   167b8:	e09e      	b.n	168f8 <__aeabi_dadd+0x524>
   167ba:	0018      	movs	r0, r3
   167bc:	4310      	orrs	r0, r2
   167be:	d100      	bne.n	167c2 <__aeabi_dadd+0x3ee>
   167c0:	e0e9      	b.n	16996 <__aeabi_dadd+0x5c2>
   167c2:	001c      	movs	r4, r3
   167c4:	0017      	movs	r7, r2
   167c6:	46d8      	mov	r8, fp
   167c8:	4e88      	ldr	r6, [pc, #544]	; (169ec <__aeabi_dadd+0x618>)
   167ca:	e687      	b.n	164dc <__aeabi_dadd+0x108>
   167cc:	2500      	movs	r5, #0
   167ce:	e772      	b.n	166b6 <__aeabi_dadd+0x2e2>
   167d0:	2100      	movs	r1, #0
   167d2:	e782      	b.n	166da <__aeabi_dadd+0x306>
   167d4:	0023      	movs	r3, r4
   167d6:	433b      	orrs	r3, r7
   167d8:	2e00      	cmp	r6, #0
   167da:	d000      	beq.n	167de <__aeabi_dadd+0x40a>
   167dc:	e0ab      	b.n	16936 <__aeabi_dadd+0x562>
   167de:	2b00      	cmp	r3, #0
   167e0:	d100      	bne.n	167e4 <__aeabi_dadd+0x410>
   167e2:	e0e7      	b.n	169b4 <__aeabi_dadd+0x5e0>
   167e4:	000b      	movs	r3, r1
   167e6:	4313      	orrs	r3, r2
   167e8:	d100      	bne.n	167ec <__aeabi_dadd+0x418>
   167ea:	e677      	b.n	164dc <__aeabi_dadd+0x108>
   167ec:	18ba      	adds	r2, r7, r2
   167ee:	42ba      	cmp	r2, r7
   167f0:	41bf      	sbcs	r7, r7
   167f2:	1864      	adds	r4, r4, r1
   167f4:	427f      	negs	r7, r7
   167f6:	19e4      	adds	r4, r4, r7
   167f8:	0223      	lsls	r3, r4, #8
   167fa:	d400      	bmi.n	167fe <__aeabi_dadd+0x42a>
   167fc:	e0f2      	b.n	169e4 <__aeabi_dadd+0x610>
   167fe:	4b7c      	ldr	r3, [pc, #496]	; (169f0 <__aeabi_dadd+0x61c>)
   16800:	0017      	movs	r7, r2
   16802:	401c      	ands	r4, r3
   16804:	0006      	movs	r6, r0
   16806:	e669      	b.n	164dc <__aeabi_dadd+0x108>
   16808:	0020      	movs	r0, r4
   1680a:	4338      	orrs	r0, r7
   1680c:	2e00      	cmp	r6, #0
   1680e:	d1d1      	bne.n	167b4 <__aeabi_dadd+0x3e0>
   16810:	2800      	cmp	r0, #0
   16812:	d15b      	bne.n	168cc <__aeabi_dadd+0x4f8>
   16814:	001c      	movs	r4, r3
   16816:	4314      	orrs	r4, r2
   16818:	d100      	bne.n	1681c <__aeabi_dadd+0x448>
   1681a:	e0a8      	b.n	1696e <__aeabi_dadd+0x59a>
   1681c:	001c      	movs	r4, r3
   1681e:	0017      	movs	r7, r2
   16820:	46d8      	mov	r8, fp
   16822:	e65b      	b.n	164dc <__aeabi_dadd+0x108>
   16824:	0006      	movs	r6, r0
   16826:	2400      	movs	r4, #0
   16828:	2700      	movs	r7, #0
   1682a:	e697      	b.n	1655c <__aeabi_dadd+0x188>
   1682c:	4650      	mov	r0, sl
   1682e:	000b      	movs	r3, r1
   16830:	3820      	subs	r0, #32
   16832:	40c3      	lsrs	r3, r0
   16834:	4699      	mov	r9, r3
   16836:	4653      	mov	r3, sl
   16838:	2b20      	cmp	r3, #32
   1683a:	d100      	bne.n	1683e <__aeabi_dadd+0x46a>
   1683c:	e095      	b.n	1696a <__aeabi_dadd+0x596>
   1683e:	2340      	movs	r3, #64	; 0x40
   16840:	4650      	mov	r0, sl
   16842:	1a1b      	subs	r3, r3, r0
   16844:	4099      	lsls	r1, r3
   16846:	430a      	orrs	r2, r1
   16848:	1e51      	subs	r1, r2, #1
   1684a:	418a      	sbcs	r2, r1
   1684c:	464b      	mov	r3, r9
   1684e:	2100      	movs	r1, #0
   16850:	431a      	orrs	r2, r3
   16852:	e69f      	b.n	16594 <__aeabi_dadd+0x1c0>
   16854:	2e00      	cmp	r6, #0
   16856:	d130      	bne.n	168ba <__aeabi_dadd+0x4e6>
   16858:	0026      	movs	r6, r4
   1685a:	433e      	orrs	r6, r7
   1685c:	d067      	beq.n	1692e <__aeabi_dadd+0x55a>
   1685e:	43db      	mvns	r3, r3
   16860:	469a      	mov	sl, r3
   16862:	2b00      	cmp	r3, #0
   16864:	d01c      	beq.n	168a0 <__aeabi_dadd+0x4cc>
   16866:	4e61      	ldr	r6, [pc, #388]	; (169ec <__aeabi_dadd+0x618>)
   16868:	42b0      	cmp	r0, r6
   1686a:	d060      	beq.n	1692e <__aeabi_dadd+0x55a>
   1686c:	4653      	mov	r3, sl
   1686e:	2b38      	cmp	r3, #56	; 0x38
   16870:	dd00      	ble.n	16874 <__aeabi_dadd+0x4a0>
   16872:	e096      	b.n	169a2 <__aeabi_dadd+0x5ce>
   16874:	2b1f      	cmp	r3, #31
   16876:	dd00      	ble.n	1687a <__aeabi_dadd+0x4a6>
   16878:	e09f      	b.n	169ba <__aeabi_dadd+0x5e6>
   1687a:	2620      	movs	r6, #32
   1687c:	1af3      	subs	r3, r6, r3
   1687e:	0026      	movs	r6, r4
   16880:	409e      	lsls	r6, r3
   16882:	469c      	mov	ip, r3
   16884:	46b3      	mov	fp, r6
   16886:	4653      	mov	r3, sl
   16888:	003e      	movs	r6, r7
   1688a:	40de      	lsrs	r6, r3
   1688c:	0033      	movs	r3, r6
   1688e:	465e      	mov	r6, fp
   16890:	431e      	orrs	r6, r3
   16892:	4663      	mov	r3, ip
   16894:	409f      	lsls	r7, r3
   16896:	1e7b      	subs	r3, r7, #1
   16898:	419f      	sbcs	r7, r3
   1689a:	4653      	mov	r3, sl
   1689c:	40dc      	lsrs	r4, r3
   1689e:	4337      	orrs	r7, r6
   168a0:	18bf      	adds	r7, r7, r2
   168a2:	4297      	cmp	r7, r2
   168a4:	4192      	sbcs	r2, r2
   168a6:	1864      	adds	r4, r4, r1
   168a8:	4252      	negs	r2, r2
   168aa:	18a4      	adds	r4, r4, r2
   168ac:	0006      	movs	r6, r0
   168ae:	e678      	b.n	165a2 <__aeabi_dadd+0x1ce>
   168b0:	4327      	orrs	r7, r4
   168b2:	1e7c      	subs	r4, r7, #1
   168b4:	41a7      	sbcs	r7, r4
   168b6:	2400      	movs	r4, #0
   168b8:	e737      	b.n	1672a <__aeabi_dadd+0x356>
   168ba:	4e4c      	ldr	r6, [pc, #304]	; (169ec <__aeabi_dadd+0x618>)
   168bc:	42b0      	cmp	r0, r6
   168be:	d036      	beq.n	1692e <__aeabi_dadd+0x55a>
   168c0:	2680      	movs	r6, #128	; 0x80
   168c2:	425b      	negs	r3, r3
   168c4:	0436      	lsls	r6, r6, #16
   168c6:	469a      	mov	sl, r3
   168c8:	4334      	orrs	r4, r6
   168ca:	e7cf      	b.n	1686c <__aeabi_dadd+0x498>
   168cc:	0018      	movs	r0, r3
   168ce:	4310      	orrs	r0, r2
   168d0:	d100      	bne.n	168d4 <__aeabi_dadd+0x500>
   168d2:	e603      	b.n	164dc <__aeabi_dadd+0x108>
   168d4:	1ab8      	subs	r0, r7, r2
   168d6:	4684      	mov	ip, r0
   168d8:	4567      	cmp	r7, ip
   168da:	41ad      	sbcs	r5, r5
   168dc:	1ae0      	subs	r0, r4, r3
   168de:	426d      	negs	r5, r5
   168e0:	1b40      	subs	r0, r0, r5
   168e2:	0205      	lsls	r5, r0, #8
   168e4:	d400      	bmi.n	168e8 <__aeabi_dadd+0x514>
   168e6:	e62c      	b.n	16542 <__aeabi_dadd+0x16e>
   168e8:	1bd7      	subs	r7, r2, r7
   168ea:	42ba      	cmp	r2, r7
   168ec:	4192      	sbcs	r2, r2
   168ee:	1b1c      	subs	r4, r3, r4
   168f0:	4252      	negs	r2, r2
   168f2:	1aa4      	subs	r4, r4, r2
   168f4:	46d8      	mov	r8, fp
   168f6:	e5f1      	b.n	164dc <__aeabi_dadd+0x108>
   168f8:	0018      	movs	r0, r3
   168fa:	4310      	orrs	r0, r2
   168fc:	d100      	bne.n	16900 <__aeabi_dadd+0x52c>
   168fe:	e763      	b.n	167c8 <__aeabi_dadd+0x3f4>
   16900:	08f8      	lsrs	r0, r7, #3
   16902:	0767      	lsls	r7, r4, #29
   16904:	4307      	orrs	r7, r0
   16906:	2080      	movs	r0, #128	; 0x80
   16908:	08e4      	lsrs	r4, r4, #3
   1690a:	0300      	lsls	r0, r0, #12
   1690c:	4204      	tst	r4, r0
   1690e:	d008      	beq.n	16922 <__aeabi_dadd+0x54e>
   16910:	08dd      	lsrs	r5, r3, #3
   16912:	4205      	tst	r5, r0
   16914:	d105      	bne.n	16922 <__aeabi_dadd+0x54e>
   16916:	08d2      	lsrs	r2, r2, #3
   16918:	0759      	lsls	r1, r3, #29
   1691a:	4311      	orrs	r1, r2
   1691c:	000f      	movs	r7, r1
   1691e:	002c      	movs	r4, r5
   16920:	46d8      	mov	r8, fp
   16922:	0f7b      	lsrs	r3, r7, #29
   16924:	00e4      	lsls	r4, r4, #3
   16926:	431c      	orrs	r4, r3
   16928:	00ff      	lsls	r7, r7, #3
   1692a:	4e30      	ldr	r6, [pc, #192]	; (169ec <__aeabi_dadd+0x618>)
   1692c:	e5d6      	b.n	164dc <__aeabi_dadd+0x108>
   1692e:	000c      	movs	r4, r1
   16930:	0017      	movs	r7, r2
   16932:	0006      	movs	r6, r0
   16934:	e5d2      	b.n	164dc <__aeabi_dadd+0x108>
   16936:	2b00      	cmp	r3, #0
   16938:	d038      	beq.n	169ac <__aeabi_dadd+0x5d8>
   1693a:	000b      	movs	r3, r1
   1693c:	4313      	orrs	r3, r2
   1693e:	d100      	bne.n	16942 <__aeabi_dadd+0x56e>
   16940:	e742      	b.n	167c8 <__aeabi_dadd+0x3f4>
   16942:	08f8      	lsrs	r0, r7, #3
   16944:	0767      	lsls	r7, r4, #29
   16946:	4307      	orrs	r7, r0
   16948:	2080      	movs	r0, #128	; 0x80
   1694a:	08e4      	lsrs	r4, r4, #3
   1694c:	0300      	lsls	r0, r0, #12
   1694e:	4204      	tst	r4, r0
   16950:	d0e7      	beq.n	16922 <__aeabi_dadd+0x54e>
   16952:	08cb      	lsrs	r3, r1, #3
   16954:	4203      	tst	r3, r0
   16956:	d1e4      	bne.n	16922 <__aeabi_dadd+0x54e>
   16958:	08d2      	lsrs	r2, r2, #3
   1695a:	0749      	lsls	r1, r1, #29
   1695c:	4311      	orrs	r1, r2
   1695e:	000f      	movs	r7, r1
   16960:	001c      	movs	r4, r3
   16962:	e7de      	b.n	16922 <__aeabi_dadd+0x54e>
   16964:	2700      	movs	r7, #0
   16966:	2400      	movs	r4, #0
   16968:	e5d5      	b.n	16516 <__aeabi_dadd+0x142>
   1696a:	2100      	movs	r1, #0
   1696c:	e76b      	b.n	16846 <__aeabi_dadd+0x472>
   1696e:	2500      	movs	r5, #0
   16970:	2700      	movs	r7, #0
   16972:	e5f3      	b.n	1655c <__aeabi_dadd+0x188>
   16974:	464e      	mov	r6, r9
   16976:	0025      	movs	r5, r4
   16978:	3e20      	subs	r6, #32
   1697a:	40f5      	lsrs	r5, r6
   1697c:	464b      	mov	r3, r9
   1697e:	002e      	movs	r6, r5
   16980:	2b20      	cmp	r3, #32
   16982:	d02d      	beq.n	169e0 <__aeabi_dadd+0x60c>
   16984:	2540      	movs	r5, #64	; 0x40
   16986:	1aed      	subs	r5, r5, r3
   16988:	40ac      	lsls	r4, r5
   1698a:	4327      	orrs	r7, r4
   1698c:	1e7c      	subs	r4, r7, #1
   1698e:	41a7      	sbcs	r7, r4
   16990:	2400      	movs	r4, #0
   16992:	4337      	orrs	r7, r6
   16994:	e6c9      	b.n	1672a <__aeabi_dadd+0x356>
   16996:	2480      	movs	r4, #128	; 0x80
   16998:	2500      	movs	r5, #0
   1699a:	0324      	lsls	r4, r4, #12
   1699c:	4e13      	ldr	r6, [pc, #76]	; (169ec <__aeabi_dadd+0x618>)
   1699e:	2700      	movs	r7, #0
   169a0:	e5dc      	b.n	1655c <__aeabi_dadd+0x188>
   169a2:	4327      	orrs	r7, r4
   169a4:	1e7c      	subs	r4, r7, #1
   169a6:	41a7      	sbcs	r7, r4
   169a8:	2400      	movs	r4, #0
   169aa:	e779      	b.n	168a0 <__aeabi_dadd+0x4cc>
   169ac:	000c      	movs	r4, r1
   169ae:	0017      	movs	r7, r2
   169b0:	4e0e      	ldr	r6, [pc, #56]	; (169ec <__aeabi_dadd+0x618>)
   169b2:	e593      	b.n	164dc <__aeabi_dadd+0x108>
   169b4:	000c      	movs	r4, r1
   169b6:	0017      	movs	r7, r2
   169b8:	e590      	b.n	164dc <__aeabi_dadd+0x108>
   169ba:	4656      	mov	r6, sl
   169bc:	0023      	movs	r3, r4
   169be:	3e20      	subs	r6, #32
   169c0:	40f3      	lsrs	r3, r6
   169c2:	4699      	mov	r9, r3
   169c4:	4653      	mov	r3, sl
   169c6:	2b20      	cmp	r3, #32
   169c8:	d00e      	beq.n	169e8 <__aeabi_dadd+0x614>
   169ca:	2340      	movs	r3, #64	; 0x40
   169cc:	4656      	mov	r6, sl
   169ce:	1b9b      	subs	r3, r3, r6
   169d0:	409c      	lsls	r4, r3
   169d2:	4327      	orrs	r7, r4
   169d4:	1e7c      	subs	r4, r7, #1
   169d6:	41a7      	sbcs	r7, r4
   169d8:	464b      	mov	r3, r9
   169da:	2400      	movs	r4, #0
   169dc:	431f      	orrs	r7, r3
   169de:	e75f      	b.n	168a0 <__aeabi_dadd+0x4cc>
   169e0:	2400      	movs	r4, #0
   169e2:	e7d2      	b.n	1698a <__aeabi_dadd+0x5b6>
   169e4:	0017      	movs	r7, r2
   169e6:	e5b2      	b.n	1654e <__aeabi_dadd+0x17a>
   169e8:	2400      	movs	r4, #0
   169ea:	e7f2      	b.n	169d2 <__aeabi_dadd+0x5fe>
   169ec:	000007ff 	.word	0x000007ff
   169f0:	ff7fffff 	.word	0xff7fffff

000169f4 <__aeabi_ddiv>:
   169f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   169f6:	4657      	mov	r7, sl
   169f8:	4645      	mov	r5, r8
   169fa:	46de      	mov	lr, fp
   169fc:	464e      	mov	r6, r9
   169fe:	b5e0      	push	{r5, r6, r7, lr}
   16a00:	004c      	lsls	r4, r1, #1
   16a02:	030e      	lsls	r6, r1, #12
   16a04:	b087      	sub	sp, #28
   16a06:	4683      	mov	fp, r0
   16a08:	4692      	mov	sl, r2
   16a0a:	001d      	movs	r5, r3
   16a0c:	4680      	mov	r8, r0
   16a0e:	0b36      	lsrs	r6, r6, #12
   16a10:	0d64      	lsrs	r4, r4, #21
   16a12:	0fcf      	lsrs	r7, r1, #31
   16a14:	2c00      	cmp	r4, #0
   16a16:	d04f      	beq.n	16ab8 <__aeabi_ddiv+0xc4>
   16a18:	4b6f      	ldr	r3, [pc, #444]	; (16bd8 <__aeabi_ddiv+0x1e4>)
   16a1a:	429c      	cmp	r4, r3
   16a1c:	d035      	beq.n	16a8a <__aeabi_ddiv+0x96>
   16a1e:	2380      	movs	r3, #128	; 0x80
   16a20:	0f42      	lsrs	r2, r0, #29
   16a22:	041b      	lsls	r3, r3, #16
   16a24:	00f6      	lsls	r6, r6, #3
   16a26:	4313      	orrs	r3, r2
   16a28:	4333      	orrs	r3, r6
   16a2a:	4699      	mov	r9, r3
   16a2c:	00c3      	lsls	r3, r0, #3
   16a2e:	4698      	mov	r8, r3
   16a30:	4b6a      	ldr	r3, [pc, #424]	; (16bdc <__aeabi_ddiv+0x1e8>)
   16a32:	2600      	movs	r6, #0
   16a34:	469c      	mov	ip, r3
   16a36:	2300      	movs	r3, #0
   16a38:	4464      	add	r4, ip
   16a3a:	9303      	str	r3, [sp, #12]
   16a3c:	032b      	lsls	r3, r5, #12
   16a3e:	0b1b      	lsrs	r3, r3, #12
   16a40:	469b      	mov	fp, r3
   16a42:	006b      	lsls	r3, r5, #1
   16a44:	0fed      	lsrs	r5, r5, #31
   16a46:	4650      	mov	r0, sl
   16a48:	0d5b      	lsrs	r3, r3, #21
   16a4a:	9501      	str	r5, [sp, #4]
   16a4c:	d05e      	beq.n	16b0c <__aeabi_ddiv+0x118>
   16a4e:	4a62      	ldr	r2, [pc, #392]	; (16bd8 <__aeabi_ddiv+0x1e4>)
   16a50:	4293      	cmp	r3, r2
   16a52:	d053      	beq.n	16afc <__aeabi_ddiv+0x108>
   16a54:	465a      	mov	r2, fp
   16a56:	00d1      	lsls	r1, r2, #3
   16a58:	2280      	movs	r2, #128	; 0x80
   16a5a:	0f40      	lsrs	r0, r0, #29
   16a5c:	0412      	lsls	r2, r2, #16
   16a5e:	4302      	orrs	r2, r0
   16a60:	430a      	orrs	r2, r1
   16a62:	4693      	mov	fp, r2
   16a64:	4652      	mov	r2, sl
   16a66:	00d1      	lsls	r1, r2, #3
   16a68:	4a5c      	ldr	r2, [pc, #368]	; (16bdc <__aeabi_ddiv+0x1e8>)
   16a6a:	4694      	mov	ip, r2
   16a6c:	2200      	movs	r2, #0
   16a6e:	4463      	add	r3, ip
   16a70:	0038      	movs	r0, r7
   16a72:	4068      	eors	r0, r5
   16a74:	4684      	mov	ip, r0
   16a76:	9002      	str	r0, [sp, #8]
   16a78:	1ae4      	subs	r4, r4, r3
   16a7a:	4316      	orrs	r6, r2
   16a7c:	2e0f      	cmp	r6, #15
   16a7e:	d900      	bls.n	16a82 <__aeabi_ddiv+0x8e>
   16a80:	e0b4      	b.n	16bec <__aeabi_ddiv+0x1f8>
   16a82:	4b57      	ldr	r3, [pc, #348]	; (16be0 <__aeabi_ddiv+0x1ec>)
   16a84:	00b6      	lsls	r6, r6, #2
   16a86:	599b      	ldr	r3, [r3, r6]
   16a88:	469f      	mov	pc, r3
   16a8a:	0003      	movs	r3, r0
   16a8c:	4333      	orrs	r3, r6
   16a8e:	4699      	mov	r9, r3
   16a90:	d16c      	bne.n	16b6c <__aeabi_ddiv+0x178>
   16a92:	2300      	movs	r3, #0
   16a94:	4698      	mov	r8, r3
   16a96:	3302      	adds	r3, #2
   16a98:	2608      	movs	r6, #8
   16a9a:	9303      	str	r3, [sp, #12]
   16a9c:	e7ce      	b.n	16a3c <__aeabi_ddiv+0x48>
   16a9e:	46cb      	mov	fp, r9
   16aa0:	4641      	mov	r1, r8
   16aa2:	9a03      	ldr	r2, [sp, #12]
   16aa4:	9701      	str	r7, [sp, #4]
   16aa6:	2a02      	cmp	r2, #2
   16aa8:	d165      	bne.n	16b76 <__aeabi_ddiv+0x182>
   16aaa:	9b01      	ldr	r3, [sp, #4]
   16aac:	4c4a      	ldr	r4, [pc, #296]	; (16bd8 <__aeabi_ddiv+0x1e4>)
   16aae:	469c      	mov	ip, r3
   16ab0:	2300      	movs	r3, #0
   16ab2:	2200      	movs	r2, #0
   16ab4:	4698      	mov	r8, r3
   16ab6:	e06b      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16ab8:	0003      	movs	r3, r0
   16aba:	4333      	orrs	r3, r6
   16abc:	4699      	mov	r9, r3
   16abe:	d04e      	beq.n	16b5e <__aeabi_ddiv+0x16a>
   16ac0:	2e00      	cmp	r6, #0
   16ac2:	d100      	bne.n	16ac6 <__aeabi_ddiv+0xd2>
   16ac4:	e1bc      	b.n	16e40 <__aeabi_ddiv+0x44c>
   16ac6:	0030      	movs	r0, r6
   16ac8:	f001 fa5e 	bl	17f88 <__clzsi2>
   16acc:	0003      	movs	r3, r0
   16ace:	3b0b      	subs	r3, #11
   16ad0:	2b1c      	cmp	r3, #28
   16ad2:	dd00      	ble.n	16ad6 <__aeabi_ddiv+0xe2>
   16ad4:	e1ac      	b.n	16e30 <__aeabi_ddiv+0x43c>
   16ad6:	221d      	movs	r2, #29
   16ad8:	1ad3      	subs	r3, r2, r3
   16ada:	465a      	mov	r2, fp
   16adc:	0001      	movs	r1, r0
   16ade:	40da      	lsrs	r2, r3
   16ae0:	3908      	subs	r1, #8
   16ae2:	408e      	lsls	r6, r1
   16ae4:	0013      	movs	r3, r2
   16ae6:	4333      	orrs	r3, r6
   16ae8:	4699      	mov	r9, r3
   16aea:	465b      	mov	r3, fp
   16aec:	408b      	lsls	r3, r1
   16aee:	4698      	mov	r8, r3
   16af0:	2300      	movs	r3, #0
   16af2:	4c3c      	ldr	r4, [pc, #240]	; (16be4 <__aeabi_ddiv+0x1f0>)
   16af4:	2600      	movs	r6, #0
   16af6:	1a24      	subs	r4, r4, r0
   16af8:	9303      	str	r3, [sp, #12]
   16afa:	e79f      	b.n	16a3c <__aeabi_ddiv+0x48>
   16afc:	4651      	mov	r1, sl
   16afe:	465a      	mov	r2, fp
   16b00:	4311      	orrs	r1, r2
   16b02:	d129      	bne.n	16b58 <__aeabi_ddiv+0x164>
   16b04:	2200      	movs	r2, #0
   16b06:	4693      	mov	fp, r2
   16b08:	3202      	adds	r2, #2
   16b0a:	e7b1      	b.n	16a70 <__aeabi_ddiv+0x7c>
   16b0c:	4659      	mov	r1, fp
   16b0e:	4301      	orrs	r1, r0
   16b10:	d01e      	beq.n	16b50 <__aeabi_ddiv+0x15c>
   16b12:	465b      	mov	r3, fp
   16b14:	2b00      	cmp	r3, #0
   16b16:	d100      	bne.n	16b1a <__aeabi_ddiv+0x126>
   16b18:	e19e      	b.n	16e58 <__aeabi_ddiv+0x464>
   16b1a:	4658      	mov	r0, fp
   16b1c:	f001 fa34 	bl	17f88 <__clzsi2>
   16b20:	0003      	movs	r3, r0
   16b22:	3b0b      	subs	r3, #11
   16b24:	2b1c      	cmp	r3, #28
   16b26:	dd00      	ble.n	16b2a <__aeabi_ddiv+0x136>
   16b28:	e18f      	b.n	16e4a <__aeabi_ddiv+0x456>
   16b2a:	0002      	movs	r2, r0
   16b2c:	4659      	mov	r1, fp
   16b2e:	3a08      	subs	r2, #8
   16b30:	4091      	lsls	r1, r2
   16b32:	468b      	mov	fp, r1
   16b34:	211d      	movs	r1, #29
   16b36:	1acb      	subs	r3, r1, r3
   16b38:	4651      	mov	r1, sl
   16b3a:	40d9      	lsrs	r1, r3
   16b3c:	000b      	movs	r3, r1
   16b3e:	4659      	mov	r1, fp
   16b40:	430b      	orrs	r3, r1
   16b42:	4651      	mov	r1, sl
   16b44:	469b      	mov	fp, r3
   16b46:	4091      	lsls	r1, r2
   16b48:	4b26      	ldr	r3, [pc, #152]	; (16be4 <__aeabi_ddiv+0x1f0>)
   16b4a:	2200      	movs	r2, #0
   16b4c:	1a1b      	subs	r3, r3, r0
   16b4e:	e78f      	b.n	16a70 <__aeabi_ddiv+0x7c>
   16b50:	2300      	movs	r3, #0
   16b52:	2201      	movs	r2, #1
   16b54:	469b      	mov	fp, r3
   16b56:	e78b      	b.n	16a70 <__aeabi_ddiv+0x7c>
   16b58:	4651      	mov	r1, sl
   16b5a:	2203      	movs	r2, #3
   16b5c:	e788      	b.n	16a70 <__aeabi_ddiv+0x7c>
   16b5e:	2300      	movs	r3, #0
   16b60:	4698      	mov	r8, r3
   16b62:	3301      	adds	r3, #1
   16b64:	2604      	movs	r6, #4
   16b66:	2400      	movs	r4, #0
   16b68:	9303      	str	r3, [sp, #12]
   16b6a:	e767      	b.n	16a3c <__aeabi_ddiv+0x48>
   16b6c:	2303      	movs	r3, #3
   16b6e:	46b1      	mov	r9, r6
   16b70:	9303      	str	r3, [sp, #12]
   16b72:	260c      	movs	r6, #12
   16b74:	e762      	b.n	16a3c <__aeabi_ddiv+0x48>
   16b76:	2a03      	cmp	r2, #3
   16b78:	d100      	bne.n	16b7c <__aeabi_ddiv+0x188>
   16b7a:	e25c      	b.n	17036 <__aeabi_ddiv+0x642>
   16b7c:	9b01      	ldr	r3, [sp, #4]
   16b7e:	2a01      	cmp	r2, #1
   16b80:	d000      	beq.n	16b84 <__aeabi_ddiv+0x190>
   16b82:	e1e4      	b.n	16f4e <__aeabi_ddiv+0x55a>
   16b84:	4013      	ands	r3, r2
   16b86:	469c      	mov	ip, r3
   16b88:	2300      	movs	r3, #0
   16b8a:	2400      	movs	r4, #0
   16b8c:	2200      	movs	r2, #0
   16b8e:	4698      	mov	r8, r3
   16b90:	2100      	movs	r1, #0
   16b92:	0312      	lsls	r2, r2, #12
   16b94:	0b13      	lsrs	r3, r2, #12
   16b96:	0d0a      	lsrs	r2, r1, #20
   16b98:	0512      	lsls	r2, r2, #20
   16b9a:	431a      	orrs	r2, r3
   16b9c:	0523      	lsls	r3, r4, #20
   16b9e:	4c12      	ldr	r4, [pc, #72]	; (16be8 <__aeabi_ddiv+0x1f4>)
   16ba0:	4640      	mov	r0, r8
   16ba2:	4022      	ands	r2, r4
   16ba4:	4313      	orrs	r3, r2
   16ba6:	4662      	mov	r2, ip
   16ba8:	005b      	lsls	r3, r3, #1
   16baa:	07d2      	lsls	r2, r2, #31
   16bac:	085b      	lsrs	r3, r3, #1
   16bae:	4313      	orrs	r3, r2
   16bb0:	0019      	movs	r1, r3
   16bb2:	b007      	add	sp, #28
   16bb4:	bc3c      	pop	{r2, r3, r4, r5}
   16bb6:	4690      	mov	r8, r2
   16bb8:	4699      	mov	r9, r3
   16bba:	46a2      	mov	sl, r4
   16bbc:	46ab      	mov	fp, r5
   16bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bc0:	2300      	movs	r3, #0
   16bc2:	2280      	movs	r2, #128	; 0x80
   16bc4:	469c      	mov	ip, r3
   16bc6:	0312      	lsls	r2, r2, #12
   16bc8:	4698      	mov	r8, r3
   16bca:	4c03      	ldr	r4, [pc, #12]	; (16bd8 <__aeabi_ddiv+0x1e4>)
   16bcc:	e7e0      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16bce:	2300      	movs	r3, #0
   16bd0:	4c01      	ldr	r4, [pc, #4]	; (16bd8 <__aeabi_ddiv+0x1e4>)
   16bd2:	2200      	movs	r2, #0
   16bd4:	4698      	mov	r8, r3
   16bd6:	e7db      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16bd8:	000007ff 	.word	0x000007ff
   16bdc:	fffffc01 	.word	0xfffffc01
   16be0:	0001ebe0 	.word	0x0001ebe0
   16be4:	fffffc0d 	.word	0xfffffc0d
   16be8:	800fffff 	.word	0x800fffff
   16bec:	45d9      	cmp	r9, fp
   16bee:	d900      	bls.n	16bf2 <__aeabi_ddiv+0x1fe>
   16bf0:	e139      	b.n	16e66 <__aeabi_ddiv+0x472>
   16bf2:	d100      	bne.n	16bf6 <__aeabi_ddiv+0x202>
   16bf4:	e134      	b.n	16e60 <__aeabi_ddiv+0x46c>
   16bf6:	2300      	movs	r3, #0
   16bf8:	4646      	mov	r6, r8
   16bfa:	464d      	mov	r5, r9
   16bfc:	469a      	mov	sl, r3
   16bfe:	3c01      	subs	r4, #1
   16c00:	465b      	mov	r3, fp
   16c02:	0e0a      	lsrs	r2, r1, #24
   16c04:	021b      	lsls	r3, r3, #8
   16c06:	431a      	orrs	r2, r3
   16c08:	020b      	lsls	r3, r1, #8
   16c0a:	0c17      	lsrs	r7, r2, #16
   16c0c:	9303      	str	r3, [sp, #12]
   16c0e:	0413      	lsls	r3, r2, #16
   16c10:	0c1b      	lsrs	r3, r3, #16
   16c12:	0039      	movs	r1, r7
   16c14:	0028      	movs	r0, r5
   16c16:	4690      	mov	r8, r2
   16c18:	9301      	str	r3, [sp, #4]
   16c1a:	f7fe f999 	bl	14f50 <__udivsi3>
   16c1e:	0002      	movs	r2, r0
   16c20:	9b01      	ldr	r3, [sp, #4]
   16c22:	4683      	mov	fp, r0
   16c24:	435a      	muls	r2, r3
   16c26:	0028      	movs	r0, r5
   16c28:	0039      	movs	r1, r7
   16c2a:	4691      	mov	r9, r2
   16c2c:	f7fe fa16 	bl	1505c <__aeabi_uidivmod>
   16c30:	0c35      	lsrs	r5, r6, #16
   16c32:	0409      	lsls	r1, r1, #16
   16c34:	430d      	orrs	r5, r1
   16c36:	45a9      	cmp	r9, r5
   16c38:	d90d      	bls.n	16c56 <__aeabi_ddiv+0x262>
   16c3a:	465b      	mov	r3, fp
   16c3c:	4445      	add	r5, r8
   16c3e:	3b01      	subs	r3, #1
   16c40:	45a8      	cmp	r8, r5
   16c42:	d900      	bls.n	16c46 <__aeabi_ddiv+0x252>
   16c44:	e13a      	b.n	16ebc <__aeabi_ddiv+0x4c8>
   16c46:	45a9      	cmp	r9, r5
   16c48:	d800      	bhi.n	16c4c <__aeabi_ddiv+0x258>
   16c4a:	e137      	b.n	16ebc <__aeabi_ddiv+0x4c8>
   16c4c:	2302      	movs	r3, #2
   16c4e:	425b      	negs	r3, r3
   16c50:	469c      	mov	ip, r3
   16c52:	4445      	add	r5, r8
   16c54:	44e3      	add	fp, ip
   16c56:	464b      	mov	r3, r9
   16c58:	1aeb      	subs	r3, r5, r3
   16c5a:	0039      	movs	r1, r7
   16c5c:	0018      	movs	r0, r3
   16c5e:	9304      	str	r3, [sp, #16]
   16c60:	f7fe f976 	bl	14f50 <__udivsi3>
   16c64:	9b01      	ldr	r3, [sp, #4]
   16c66:	0005      	movs	r5, r0
   16c68:	4343      	muls	r3, r0
   16c6a:	0039      	movs	r1, r7
   16c6c:	9804      	ldr	r0, [sp, #16]
   16c6e:	4699      	mov	r9, r3
   16c70:	f7fe f9f4 	bl	1505c <__aeabi_uidivmod>
   16c74:	0433      	lsls	r3, r6, #16
   16c76:	0409      	lsls	r1, r1, #16
   16c78:	0c1b      	lsrs	r3, r3, #16
   16c7a:	430b      	orrs	r3, r1
   16c7c:	4599      	cmp	r9, r3
   16c7e:	d909      	bls.n	16c94 <__aeabi_ddiv+0x2a0>
   16c80:	4443      	add	r3, r8
   16c82:	1e6a      	subs	r2, r5, #1
   16c84:	4598      	cmp	r8, r3
   16c86:	d900      	bls.n	16c8a <__aeabi_ddiv+0x296>
   16c88:	e11a      	b.n	16ec0 <__aeabi_ddiv+0x4cc>
   16c8a:	4599      	cmp	r9, r3
   16c8c:	d800      	bhi.n	16c90 <__aeabi_ddiv+0x29c>
   16c8e:	e117      	b.n	16ec0 <__aeabi_ddiv+0x4cc>
   16c90:	3d02      	subs	r5, #2
   16c92:	4443      	add	r3, r8
   16c94:	464a      	mov	r2, r9
   16c96:	1a9b      	subs	r3, r3, r2
   16c98:	465a      	mov	r2, fp
   16c9a:	0412      	lsls	r2, r2, #16
   16c9c:	432a      	orrs	r2, r5
   16c9e:	9903      	ldr	r1, [sp, #12]
   16ca0:	4693      	mov	fp, r2
   16ca2:	0c10      	lsrs	r0, r2, #16
   16ca4:	0c0a      	lsrs	r2, r1, #16
   16ca6:	4691      	mov	r9, r2
   16ca8:	0409      	lsls	r1, r1, #16
   16caa:	465a      	mov	r2, fp
   16cac:	0c09      	lsrs	r1, r1, #16
   16cae:	464e      	mov	r6, r9
   16cb0:	000d      	movs	r5, r1
   16cb2:	0412      	lsls	r2, r2, #16
   16cb4:	0c12      	lsrs	r2, r2, #16
   16cb6:	4345      	muls	r5, r0
   16cb8:	9105      	str	r1, [sp, #20]
   16cba:	4351      	muls	r1, r2
   16cbc:	4372      	muls	r2, r6
   16cbe:	4370      	muls	r0, r6
   16cc0:	1952      	adds	r2, r2, r5
   16cc2:	0c0e      	lsrs	r6, r1, #16
   16cc4:	18b2      	adds	r2, r6, r2
   16cc6:	4295      	cmp	r5, r2
   16cc8:	d903      	bls.n	16cd2 <__aeabi_ddiv+0x2de>
   16cca:	2580      	movs	r5, #128	; 0x80
   16ccc:	026d      	lsls	r5, r5, #9
   16cce:	46ac      	mov	ip, r5
   16cd0:	4460      	add	r0, ip
   16cd2:	0c15      	lsrs	r5, r2, #16
   16cd4:	0409      	lsls	r1, r1, #16
   16cd6:	0412      	lsls	r2, r2, #16
   16cd8:	0c09      	lsrs	r1, r1, #16
   16cda:	1828      	adds	r0, r5, r0
   16cdc:	1852      	adds	r2, r2, r1
   16cde:	4283      	cmp	r3, r0
   16ce0:	d200      	bcs.n	16ce4 <__aeabi_ddiv+0x2f0>
   16ce2:	e0ce      	b.n	16e82 <__aeabi_ddiv+0x48e>
   16ce4:	d100      	bne.n	16ce8 <__aeabi_ddiv+0x2f4>
   16ce6:	e0c8      	b.n	16e7a <__aeabi_ddiv+0x486>
   16ce8:	1a1d      	subs	r5, r3, r0
   16cea:	4653      	mov	r3, sl
   16cec:	1a9e      	subs	r6, r3, r2
   16cee:	45b2      	cmp	sl, r6
   16cf0:	4192      	sbcs	r2, r2
   16cf2:	4252      	negs	r2, r2
   16cf4:	1aab      	subs	r3, r5, r2
   16cf6:	469a      	mov	sl, r3
   16cf8:	4598      	cmp	r8, r3
   16cfa:	d100      	bne.n	16cfe <__aeabi_ddiv+0x30a>
   16cfc:	e117      	b.n	16f2e <__aeabi_ddiv+0x53a>
   16cfe:	0039      	movs	r1, r7
   16d00:	0018      	movs	r0, r3
   16d02:	f7fe f925 	bl	14f50 <__udivsi3>
   16d06:	9b01      	ldr	r3, [sp, #4]
   16d08:	0005      	movs	r5, r0
   16d0a:	4343      	muls	r3, r0
   16d0c:	0039      	movs	r1, r7
   16d0e:	4650      	mov	r0, sl
   16d10:	9304      	str	r3, [sp, #16]
   16d12:	f7fe f9a3 	bl	1505c <__aeabi_uidivmod>
   16d16:	9804      	ldr	r0, [sp, #16]
   16d18:	040b      	lsls	r3, r1, #16
   16d1a:	0c31      	lsrs	r1, r6, #16
   16d1c:	4319      	orrs	r1, r3
   16d1e:	4288      	cmp	r0, r1
   16d20:	d909      	bls.n	16d36 <__aeabi_ddiv+0x342>
   16d22:	4441      	add	r1, r8
   16d24:	1e6b      	subs	r3, r5, #1
   16d26:	4588      	cmp	r8, r1
   16d28:	d900      	bls.n	16d2c <__aeabi_ddiv+0x338>
   16d2a:	e107      	b.n	16f3c <__aeabi_ddiv+0x548>
   16d2c:	4288      	cmp	r0, r1
   16d2e:	d800      	bhi.n	16d32 <__aeabi_ddiv+0x33e>
   16d30:	e104      	b.n	16f3c <__aeabi_ddiv+0x548>
   16d32:	3d02      	subs	r5, #2
   16d34:	4441      	add	r1, r8
   16d36:	9b04      	ldr	r3, [sp, #16]
   16d38:	1acb      	subs	r3, r1, r3
   16d3a:	0018      	movs	r0, r3
   16d3c:	0039      	movs	r1, r7
   16d3e:	9304      	str	r3, [sp, #16]
   16d40:	f7fe f906 	bl	14f50 <__udivsi3>
   16d44:	9b01      	ldr	r3, [sp, #4]
   16d46:	4682      	mov	sl, r0
   16d48:	4343      	muls	r3, r0
   16d4a:	0039      	movs	r1, r7
   16d4c:	9804      	ldr	r0, [sp, #16]
   16d4e:	9301      	str	r3, [sp, #4]
   16d50:	f7fe f984 	bl	1505c <__aeabi_uidivmod>
   16d54:	9801      	ldr	r0, [sp, #4]
   16d56:	040b      	lsls	r3, r1, #16
   16d58:	0431      	lsls	r1, r6, #16
   16d5a:	0c09      	lsrs	r1, r1, #16
   16d5c:	4319      	orrs	r1, r3
   16d5e:	4288      	cmp	r0, r1
   16d60:	d90d      	bls.n	16d7e <__aeabi_ddiv+0x38a>
   16d62:	4653      	mov	r3, sl
   16d64:	4441      	add	r1, r8
   16d66:	3b01      	subs	r3, #1
   16d68:	4588      	cmp	r8, r1
   16d6a:	d900      	bls.n	16d6e <__aeabi_ddiv+0x37a>
   16d6c:	e0e8      	b.n	16f40 <__aeabi_ddiv+0x54c>
   16d6e:	4288      	cmp	r0, r1
   16d70:	d800      	bhi.n	16d74 <__aeabi_ddiv+0x380>
   16d72:	e0e5      	b.n	16f40 <__aeabi_ddiv+0x54c>
   16d74:	2302      	movs	r3, #2
   16d76:	425b      	negs	r3, r3
   16d78:	469c      	mov	ip, r3
   16d7a:	4441      	add	r1, r8
   16d7c:	44e2      	add	sl, ip
   16d7e:	9b01      	ldr	r3, [sp, #4]
   16d80:	042d      	lsls	r5, r5, #16
   16d82:	1ace      	subs	r6, r1, r3
   16d84:	4651      	mov	r1, sl
   16d86:	4329      	orrs	r1, r5
   16d88:	9d05      	ldr	r5, [sp, #20]
   16d8a:	464f      	mov	r7, r9
   16d8c:	002a      	movs	r2, r5
   16d8e:	040b      	lsls	r3, r1, #16
   16d90:	0c08      	lsrs	r0, r1, #16
   16d92:	0c1b      	lsrs	r3, r3, #16
   16d94:	435a      	muls	r2, r3
   16d96:	4345      	muls	r5, r0
   16d98:	437b      	muls	r3, r7
   16d9a:	4378      	muls	r0, r7
   16d9c:	195b      	adds	r3, r3, r5
   16d9e:	0c17      	lsrs	r7, r2, #16
   16da0:	18fb      	adds	r3, r7, r3
   16da2:	429d      	cmp	r5, r3
   16da4:	d903      	bls.n	16dae <__aeabi_ddiv+0x3ba>
   16da6:	2580      	movs	r5, #128	; 0x80
   16da8:	026d      	lsls	r5, r5, #9
   16daa:	46ac      	mov	ip, r5
   16dac:	4460      	add	r0, ip
   16dae:	0c1d      	lsrs	r5, r3, #16
   16db0:	0412      	lsls	r2, r2, #16
   16db2:	041b      	lsls	r3, r3, #16
   16db4:	0c12      	lsrs	r2, r2, #16
   16db6:	1828      	adds	r0, r5, r0
   16db8:	189b      	adds	r3, r3, r2
   16dba:	4286      	cmp	r6, r0
   16dbc:	d200      	bcs.n	16dc0 <__aeabi_ddiv+0x3cc>
   16dbe:	e093      	b.n	16ee8 <__aeabi_ddiv+0x4f4>
   16dc0:	d100      	bne.n	16dc4 <__aeabi_ddiv+0x3d0>
   16dc2:	e08e      	b.n	16ee2 <__aeabi_ddiv+0x4ee>
   16dc4:	2301      	movs	r3, #1
   16dc6:	4319      	orrs	r1, r3
   16dc8:	4ba0      	ldr	r3, [pc, #640]	; (1704c <__aeabi_ddiv+0x658>)
   16dca:	18e3      	adds	r3, r4, r3
   16dcc:	2b00      	cmp	r3, #0
   16dce:	dc00      	bgt.n	16dd2 <__aeabi_ddiv+0x3de>
   16dd0:	e099      	b.n	16f06 <__aeabi_ddiv+0x512>
   16dd2:	074a      	lsls	r2, r1, #29
   16dd4:	d000      	beq.n	16dd8 <__aeabi_ddiv+0x3e4>
   16dd6:	e09e      	b.n	16f16 <__aeabi_ddiv+0x522>
   16dd8:	465a      	mov	r2, fp
   16dda:	01d2      	lsls	r2, r2, #7
   16ddc:	d506      	bpl.n	16dec <__aeabi_ddiv+0x3f8>
   16dde:	465a      	mov	r2, fp
   16de0:	4b9b      	ldr	r3, [pc, #620]	; (17050 <__aeabi_ddiv+0x65c>)
   16de2:	401a      	ands	r2, r3
   16de4:	2380      	movs	r3, #128	; 0x80
   16de6:	4693      	mov	fp, r2
   16de8:	00db      	lsls	r3, r3, #3
   16dea:	18e3      	adds	r3, r4, r3
   16dec:	4a99      	ldr	r2, [pc, #612]	; (17054 <__aeabi_ddiv+0x660>)
   16dee:	4293      	cmp	r3, r2
   16df0:	dd68      	ble.n	16ec4 <__aeabi_ddiv+0x4d0>
   16df2:	2301      	movs	r3, #1
   16df4:	9a02      	ldr	r2, [sp, #8]
   16df6:	4c98      	ldr	r4, [pc, #608]	; (17058 <__aeabi_ddiv+0x664>)
   16df8:	401a      	ands	r2, r3
   16dfa:	2300      	movs	r3, #0
   16dfc:	4694      	mov	ip, r2
   16dfe:	4698      	mov	r8, r3
   16e00:	2200      	movs	r2, #0
   16e02:	e6c5      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16e04:	2280      	movs	r2, #128	; 0x80
   16e06:	464b      	mov	r3, r9
   16e08:	0312      	lsls	r2, r2, #12
   16e0a:	4213      	tst	r3, r2
   16e0c:	d00a      	beq.n	16e24 <__aeabi_ddiv+0x430>
   16e0e:	465b      	mov	r3, fp
   16e10:	4213      	tst	r3, r2
   16e12:	d106      	bne.n	16e22 <__aeabi_ddiv+0x42e>
   16e14:	431a      	orrs	r2, r3
   16e16:	0312      	lsls	r2, r2, #12
   16e18:	0b12      	lsrs	r2, r2, #12
   16e1a:	46ac      	mov	ip, r5
   16e1c:	4688      	mov	r8, r1
   16e1e:	4c8e      	ldr	r4, [pc, #568]	; (17058 <__aeabi_ddiv+0x664>)
   16e20:	e6b6      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16e22:	464b      	mov	r3, r9
   16e24:	431a      	orrs	r2, r3
   16e26:	0312      	lsls	r2, r2, #12
   16e28:	0b12      	lsrs	r2, r2, #12
   16e2a:	46bc      	mov	ip, r7
   16e2c:	4c8a      	ldr	r4, [pc, #552]	; (17058 <__aeabi_ddiv+0x664>)
   16e2e:	e6af      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16e30:	0003      	movs	r3, r0
   16e32:	465a      	mov	r2, fp
   16e34:	3b28      	subs	r3, #40	; 0x28
   16e36:	409a      	lsls	r2, r3
   16e38:	2300      	movs	r3, #0
   16e3a:	4691      	mov	r9, r2
   16e3c:	4698      	mov	r8, r3
   16e3e:	e657      	b.n	16af0 <__aeabi_ddiv+0xfc>
   16e40:	4658      	mov	r0, fp
   16e42:	f001 f8a1 	bl	17f88 <__clzsi2>
   16e46:	3020      	adds	r0, #32
   16e48:	e640      	b.n	16acc <__aeabi_ddiv+0xd8>
   16e4a:	0003      	movs	r3, r0
   16e4c:	4652      	mov	r2, sl
   16e4e:	3b28      	subs	r3, #40	; 0x28
   16e50:	409a      	lsls	r2, r3
   16e52:	2100      	movs	r1, #0
   16e54:	4693      	mov	fp, r2
   16e56:	e677      	b.n	16b48 <__aeabi_ddiv+0x154>
   16e58:	f001 f896 	bl	17f88 <__clzsi2>
   16e5c:	3020      	adds	r0, #32
   16e5e:	e65f      	b.n	16b20 <__aeabi_ddiv+0x12c>
   16e60:	4588      	cmp	r8, r1
   16e62:	d200      	bcs.n	16e66 <__aeabi_ddiv+0x472>
   16e64:	e6c7      	b.n	16bf6 <__aeabi_ddiv+0x202>
   16e66:	464b      	mov	r3, r9
   16e68:	07de      	lsls	r6, r3, #31
   16e6a:	085d      	lsrs	r5, r3, #1
   16e6c:	4643      	mov	r3, r8
   16e6e:	085b      	lsrs	r3, r3, #1
   16e70:	431e      	orrs	r6, r3
   16e72:	4643      	mov	r3, r8
   16e74:	07db      	lsls	r3, r3, #31
   16e76:	469a      	mov	sl, r3
   16e78:	e6c2      	b.n	16c00 <__aeabi_ddiv+0x20c>
   16e7a:	2500      	movs	r5, #0
   16e7c:	4592      	cmp	sl, r2
   16e7e:	d300      	bcc.n	16e82 <__aeabi_ddiv+0x48e>
   16e80:	e733      	b.n	16cea <__aeabi_ddiv+0x2f6>
   16e82:	9e03      	ldr	r6, [sp, #12]
   16e84:	4659      	mov	r1, fp
   16e86:	46b4      	mov	ip, r6
   16e88:	44e2      	add	sl, ip
   16e8a:	45b2      	cmp	sl, r6
   16e8c:	41ad      	sbcs	r5, r5
   16e8e:	426d      	negs	r5, r5
   16e90:	4445      	add	r5, r8
   16e92:	18eb      	adds	r3, r5, r3
   16e94:	3901      	subs	r1, #1
   16e96:	4598      	cmp	r8, r3
   16e98:	d207      	bcs.n	16eaa <__aeabi_ddiv+0x4b6>
   16e9a:	4298      	cmp	r0, r3
   16e9c:	d900      	bls.n	16ea0 <__aeabi_ddiv+0x4ac>
   16e9e:	e07f      	b.n	16fa0 <__aeabi_ddiv+0x5ac>
   16ea0:	d100      	bne.n	16ea4 <__aeabi_ddiv+0x4b0>
   16ea2:	e0bc      	b.n	1701e <__aeabi_ddiv+0x62a>
   16ea4:	1a1d      	subs	r5, r3, r0
   16ea6:	468b      	mov	fp, r1
   16ea8:	e71f      	b.n	16cea <__aeabi_ddiv+0x2f6>
   16eaa:	4598      	cmp	r8, r3
   16eac:	d1fa      	bne.n	16ea4 <__aeabi_ddiv+0x4b0>
   16eae:	9d03      	ldr	r5, [sp, #12]
   16eb0:	4555      	cmp	r5, sl
   16eb2:	d9f2      	bls.n	16e9a <__aeabi_ddiv+0x4a6>
   16eb4:	4643      	mov	r3, r8
   16eb6:	468b      	mov	fp, r1
   16eb8:	1a1d      	subs	r5, r3, r0
   16eba:	e716      	b.n	16cea <__aeabi_ddiv+0x2f6>
   16ebc:	469b      	mov	fp, r3
   16ebe:	e6ca      	b.n	16c56 <__aeabi_ddiv+0x262>
   16ec0:	0015      	movs	r5, r2
   16ec2:	e6e7      	b.n	16c94 <__aeabi_ddiv+0x2a0>
   16ec4:	465a      	mov	r2, fp
   16ec6:	08c9      	lsrs	r1, r1, #3
   16ec8:	0752      	lsls	r2, r2, #29
   16eca:	430a      	orrs	r2, r1
   16ecc:	055b      	lsls	r3, r3, #21
   16ece:	4690      	mov	r8, r2
   16ed0:	0d5c      	lsrs	r4, r3, #21
   16ed2:	465a      	mov	r2, fp
   16ed4:	2301      	movs	r3, #1
   16ed6:	9902      	ldr	r1, [sp, #8]
   16ed8:	0252      	lsls	r2, r2, #9
   16eda:	4019      	ands	r1, r3
   16edc:	0b12      	lsrs	r2, r2, #12
   16ede:	468c      	mov	ip, r1
   16ee0:	e656      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16ee2:	2b00      	cmp	r3, #0
   16ee4:	d100      	bne.n	16ee8 <__aeabi_ddiv+0x4f4>
   16ee6:	e76f      	b.n	16dc8 <__aeabi_ddiv+0x3d4>
   16ee8:	4446      	add	r6, r8
   16eea:	1e4a      	subs	r2, r1, #1
   16eec:	45b0      	cmp	r8, r6
   16eee:	d929      	bls.n	16f44 <__aeabi_ddiv+0x550>
   16ef0:	0011      	movs	r1, r2
   16ef2:	4286      	cmp	r6, r0
   16ef4:	d000      	beq.n	16ef8 <__aeabi_ddiv+0x504>
   16ef6:	e765      	b.n	16dc4 <__aeabi_ddiv+0x3d0>
   16ef8:	9a03      	ldr	r2, [sp, #12]
   16efa:	4293      	cmp	r3, r2
   16efc:	d000      	beq.n	16f00 <__aeabi_ddiv+0x50c>
   16efe:	e761      	b.n	16dc4 <__aeabi_ddiv+0x3d0>
   16f00:	e762      	b.n	16dc8 <__aeabi_ddiv+0x3d4>
   16f02:	2101      	movs	r1, #1
   16f04:	4249      	negs	r1, r1
   16f06:	2001      	movs	r0, #1
   16f08:	1ac2      	subs	r2, r0, r3
   16f0a:	2a38      	cmp	r2, #56	; 0x38
   16f0c:	dd21      	ble.n	16f52 <__aeabi_ddiv+0x55e>
   16f0e:	9b02      	ldr	r3, [sp, #8]
   16f10:	4003      	ands	r3, r0
   16f12:	469c      	mov	ip, r3
   16f14:	e638      	b.n	16b88 <__aeabi_ddiv+0x194>
   16f16:	220f      	movs	r2, #15
   16f18:	400a      	ands	r2, r1
   16f1a:	2a04      	cmp	r2, #4
   16f1c:	d100      	bne.n	16f20 <__aeabi_ddiv+0x52c>
   16f1e:	e75b      	b.n	16dd8 <__aeabi_ddiv+0x3e4>
   16f20:	000a      	movs	r2, r1
   16f22:	1d11      	adds	r1, r2, #4
   16f24:	4291      	cmp	r1, r2
   16f26:	4192      	sbcs	r2, r2
   16f28:	4252      	negs	r2, r2
   16f2a:	4493      	add	fp, r2
   16f2c:	e754      	b.n	16dd8 <__aeabi_ddiv+0x3e4>
   16f2e:	4b47      	ldr	r3, [pc, #284]	; (1704c <__aeabi_ddiv+0x658>)
   16f30:	18e3      	adds	r3, r4, r3
   16f32:	2b00      	cmp	r3, #0
   16f34:	dde5      	ble.n	16f02 <__aeabi_ddiv+0x50e>
   16f36:	2201      	movs	r2, #1
   16f38:	4252      	negs	r2, r2
   16f3a:	e7f2      	b.n	16f22 <__aeabi_ddiv+0x52e>
   16f3c:	001d      	movs	r5, r3
   16f3e:	e6fa      	b.n	16d36 <__aeabi_ddiv+0x342>
   16f40:	469a      	mov	sl, r3
   16f42:	e71c      	b.n	16d7e <__aeabi_ddiv+0x38a>
   16f44:	42b0      	cmp	r0, r6
   16f46:	d839      	bhi.n	16fbc <__aeabi_ddiv+0x5c8>
   16f48:	d06e      	beq.n	17028 <__aeabi_ddiv+0x634>
   16f4a:	0011      	movs	r1, r2
   16f4c:	e73a      	b.n	16dc4 <__aeabi_ddiv+0x3d0>
   16f4e:	9302      	str	r3, [sp, #8]
   16f50:	e73a      	b.n	16dc8 <__aeabi_ddiv+0x3d4>
   16f52:	2a1f      	cmp	r2, #31
   16f54:	dc3c      	bgt.n	16fd0 <__aeabi_ddiv+0x5dc>
   16f56:	2320      	movs	r3, #32
   16f58:	1a9b      	subs	r3, r3, r2
   16f5a:	000c      	movs	r4, r1
   16f5c:	4658      	mov	r0, fp
   16f5e:	4099      	lsls	r1, r3
   16f60:	4098      	lsls	r0, r3
   16f62:	1e4b      	subs	r3, r1, #1
   16f64:	4199      	sbcs	r1, r3
   16f66:	465b      	mov	r3, fp
   16f68:	40d4      	lsrs	r4, r2
   16f6a:	40d3      	lsrs	r3, r2
   16f6c:	4320      	orrs	r0, r4
   16f6e:	4308      	orrs	r0, r1
   16f70:	001a      	movs	r2, r3
   16f72:	0743      	lsls	r3, r0, #29
   16f74:	d009      	beq.n	16f8a <__aeabi_ddiv+0x596>
   16f76:	230f      	movs	r3, #15
   16f78:	4003      	ands	r3, r0
   16f7a:	2b04      	cmp	r3, #4
   16f7c:	d005      	beq.n	16f8a <__aeabi_ddiv+0x596>
   16f7e:	0001      	movs	r1, r0
   16f80:	1d08      	adds	r0, r1, #4
   16f82:	4288      	cmp	r0, r1
   16f84:	419b      	sbcs	r3, r3
   16f86:	425b      	negs	r3, r3
   16f88:	18d2      	adds	r2, r2, r3
   16f8a:	0213      	lsls	r3, r2, #8
   16f8c:	d53a      	bpl.n	17004 <__aeabi_ddiv+0x610>
   16f8e:	2301      	movs	r3, #1
   16f90:	9a02      	ldr	r2, [sp, #8]
   16f92:	2401      	movs	r4, #1
   16f94:	401a      	ands	r2, r3
   16f96:	2300      	movs	r3, #0
   16f98:	4694      	mov	ip, r2
   16f9a:	4698      	mov	r8, r3
   16f9c:	2200      	movs	r2, #0
   16f9e:	e5f7      	b.n	16b90 <__aeabi_ddiv+0x19c>
   16fa0:	2102      	movs	r1, #2
   16fa2:	4249      	negs	r1, r1
   16fa4:	468c      	mov	ip, r1
   16fa6:	9d03      	ldr	r5, [sp, #12]
   16fa8:	44e3      	add	fp, ip
   16faa:	46ac      	mov	ip, r5
   16fac:	44e2      	add	sl, ip
   16fae:	45aa      	cmp	sl, r5
   16fb0:	41ad      	sbcs	r5, r5
   16fb2:	426d      	negs	r5, r5
   16fb4:	4445      	add	r5, r8
   16fb6:	18ed      	adds	r5, r5, r3
   16fb8:	1a2d      	subs	r5, r5, r0
   16fba:	e696      	b.n	16cea <__aeabi_ddiv+0x2f6>
   16fbc:	1e8a      	subs	r2, r1, #2
   16fbe:	9903      	ldr	r1, [sp, #12]
   16fc0:	004d      	lsls	r5, r1, #1
   16fc2:	428d      	cmp	r5, r1
   16fc4:	4189      	sbcs	r1, r1
   16fc6:	4249      	negs	r1, r1
   16fc8:	4441      	add	r1, r8
   16fca:	1876      	adds	r6, r6, r1
   16fcc:	9503      	str	r5, [sp, #12]
   16fce:	e78f      	b.n	16ef0 <__aeabi_ddiv+0x4fc>
   16fd0:	201f      	movs	r0, #31
   16fd2:	4240      	negs	r0, r0
   16fd4:	1ac3      	subs	r3, r0, r3
   16fd6:	4658      	mov	r0, fp
   16fd8:	40d8      	lsrs	r0, r3
   16fda:	0003      	movs	r3, r0
   16fdc:	2a20      	cmp	r2, #32
   16fde:	d028      	beq.n	17032 <__aeabi_ddiv+0x63e>
   16fe0:	2040      	movs	r0, #64	; 0x40
   16fe2:	465d      	mov	r5, fp
   16fe4:	1a82      	subs	r2, r0, r2
   16fe6:	4095      	lsls	r5, r2
   16fe8:	4329      	orrs	r1, r5
   16fea:	1e4a      	subs	r2, r1, #1
   16fec:	4191      	sbcs	r1, r2
   16fee:	4319      	orrs	r1, r3
   16ff0:	2307      	movs	r3, #7
   16ff2:	2200      	movs	r2, #0
   16ff4:	400b      	ands	r3, r1
   16ff6:	d009      	beq.n	1700c <__aeabi_ddiv+0x618>
   16ff8:	230f      	movs	r3, #15
   16ffa:	2200      	movs	r2, #0
   16ffc:	400b      	ands	r3, r1
   16ffe:	0008      	movs	r0, r1
   17000:	2b04      	cmp	r3, #4
   17002:	d1bd      	bne.n	16f80 <__aeabi_ddiv+0x58c>
   17004:	0001      	movs	r1, r0
   17006:	0753      	lsls	r3, r2, #29
   17008:	0252      	lsls	r2, r2, #9
   1700a:	0b12      	lsrs	r2, r2, #12
   1700c:	08c9      	lsrs	r1, r1, #3
   1700e:	4319      	orrs	r1, r3
   17010:	2301      	movs	r3, #1
   17012:	4688      	mov	r8, r1
   17014:	9902      	ldr	r1, [sp, #8]
   17016:	2400      	movs	r4, #0
   17018:	4019      	ands	r1, r3
   1701a:	468c      	mov	ip, r1
   1701c:	e5b8      	b.n	16b90 <__aeabi_ddiv+0x19c>
   1701e:	4552      	cmp	r2, sl
   17020:	d8be      	bhi.n	16fa0 <__aeabi_ddiv+0x5ac>
   17022:	468b      	mov	fp, r1
   17024:	2500      	movs	r5, #0
   17026:	e660      	b.n	16cea <__aeabi_ddiv+0x2f6>
   17028:	9d03      	ldr	r5, [sp, #12]
   1702a:	429d      	cmp	r5, r3
   1702c:	d3c6      	bcc.n	16fbc <__aeabi_ddiv+0x5c8>
   1702e:	0011      	movs	r1, r2
   17030:	e762      	b.n	16ef8 <__aeabi_ddiv+0x504>
   17032:	2500      	movs	r5, #0
   17034:	e7d8      	b.n	16fe8 <__aeabi_ddiv+0x5f4>
   17036:	2280      	movs	r2, #128	; 0x80
   17038:	465b      	mov	r3, fp
   1703a:	0312      	lsls	r2, r2, #12
   1703c:	431a      	orrs	r2, r3
   1703e:	9b01      	ldr	r3, [sp, #4]
   17040:	0312      	lsls	r2, r2, #12
   17042:	0b12      	lsrs	r2, r2, #12
   17044:	469c      	mov	ip, r3
   17046:	4688      	mov	r8, r1
   17048:	4c03      	ldr	r4, [pc, #12]	; (17058 <__aeabi_ddiv+0x664>)
   1704a:	e5a1      	b.n	16b90 <__aeabi_ddiv+0x19c>
   1704c:	000003ff 	.word	0x000003ff
   17050:	feffffff 	.word	0xfeffffff
   17054:	000007fe 	.word	0x000007fe
   17058:	000007ff 	.word	0x000007ff

0001705c <__eqdf2>:
   1705c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1705e:	464f      	mov	r7, r9
   17060:	4646      	mov	r6, r8
   17062:	46d6      	mov	lr, sl
   17064:	005c      	lsls	r4, r3, #1
   17066:	b5c0      	push	{r6, r7, lr}
   17068:	031f      	lsls	r7, r3, #12
   1706a:	0fdb      	lsrs	r3, r3, #31
   1706c:	469a      	mov	sl, r3
   1706e:	4b17      	ldr	r3, [pc, #92]	; (170cc <__eqdf2+0x70>)
   17070:	030e      	lsls	r6, r1, #12
   17072:	004d      	lsls	r5, r1, #1
   17074:	4684      	mov	ip, r0
   17076:	4680      	mov	r8, r0
   17078:	0b36      	lsrs	r6, r6, #12
   1707a:	0d6d      	lsrs	r5, r5, #21
   1707c:	0fc9      	lsrs	r1, r1, #31
   1707e:	4691      	mov	r9, r2
   17080:	0b3f      	lsrs	r7, r7, #12
   17082:	0d64      	lsrs	r4, r4, #21
   17084:	2001      	movs	r0, #1
   17086:	429d      	cmp	r5, r3
   17088:	d008      	beq.n	1709c <__eqdf2+0x40>
   1708a:	429c      	cmp	r4, r3
   1708c:	d001      	beq.n	17092 <__eqdf2+0x36>
   1708e:	42a5      	cmp	r5, r4
   17090:	d00b      	beq.n	170aa <__eqdf2+0x4e>
   17092:	bc1c      	pop	{r2, r3, r4}
   17094:	4690      	mov	r8, r2
   17096:	4699      	mov	r9, r3
   17098:	46a2      	mov	sl, r4
   1709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1709c:	4663      	mov	r3, ip
   1709e:	4333      	orrs	r3, r6
   170a0:	d1f7      	bne.n	17092 <__eqdf2+0x36>
   170a2:	42ac      	cmp	r4, r5
   170a4:	d1f5      	bne.n	17092 <__eqdf2+0x36>
   170a6:	433a      	orrs	r2, r7
   170a8:	d1f3      	bne.n	17092 <__eqdf2+0x36>
   170aa:	2001      	movs	r0, #1
   170ac:	42be      	cmp	r6, r7
   170ae:	d1f0      	bne.n	17092 <__eqdf2+0x36>
   170b0:	45c8      	cmp	r8, r9
   170b2:	d1ee      	bne.n	17092 <__eqdf2+0x36>
   170b4:	4551      	cmp	r1, sl
   170b6:	d007      	beq.n	170c8 <__eqdf2+0x6c>
   170b8:	2d00      	cmp	r5, #0
   170ba:	d1ea      	bne.n	17092 <__eqdf2+0x36>
   170bc:	4663      	mov	r3, ip
   170be:	431e      	orrs	r6, r3
   170c0:	0030      	movs	r0, r6
   170c2:	1e46      	subs	r6, r0, #1
   170c4:	41b0      	sbcs	r0, r6
   170c6:	e7e4      	b.n	17092 <__eqdf2+0x36>
   170c8:	2000      	movs	r0, #0
   170ca:	e7e2      	b.n	17092 <__eqdf2+0x36>
   170cc:	000007ff 	.word	0x000007ff

000170d0 <__gedf2>:
   170d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   170d2:	4645      	mov	r5, r8
   170d4:	46de      	mov	lr, fp
   170d6:	4657      	mov	r7, sl
   170d8:	464e      	mov	r6, r9
   170da:	b5e0      	push	{r5, r6, r7, lr}
   170dc:	031f      	lsls	r7, r3, #12
   170de:	0b3d      	lsrs	r5, r7, #12
   170e0:	4f2c      	ldr	r7, [pc, #176]	; (17194 <__gedf2+0xc4>)
   170e2:	030e      	lsls	r6, r1, #12
   170e4:	004c      	lsls	r4, r1, #1
   170e6:	46ab      	mov	fp, r5
   170e8:	005d      	lsls	r5, r3, #1
   170ea:	4684      	mov	ip, r0
   170ec:	0b36      	lsrs	r6, r6, #12
   170ee:	0d64      	lsrs	r4, r4, #21
   170f0:	0fc9      	lsrs	r1, r1, #31
   170f2:	4690      	mov	r8, r2
   170f4:	0d6d      	lsrs	r5, r5, #21
   170f6:	0fdb      	lsrs	r3, r3, #31
   170f8:	42bc      	cmp	r4, r7
   170fa:	d02a      	beq.n	17152 <__gedf2+0x82>
   170fc:	4f25      	ldr	r7, [pc, #148]	; (17194 <__gedf2+0xc4>)
   170fe:	42bd      	cmp	r5, r7
   17100:	d02d      	beq.n	1715e <__gedf2+0x8e>
   17102:	2c00      	cmp	r4, #0
   17104:	d10f      	bne.n	17126 <__gedf2+0x56>
   17106:	4330      	orrs	r0, r6
   17108:	0007      	movs	r7, r0
   1710a:	4681      	mov	r9, r0
   1710c:	4278      	negs	r0, r7
   1710e:	4178      	adcs	r0, r7
   17110:	b2c0      	uxtb	r0, r0
   17112:	2d00      	cmp	r5, #0
   17114:	d117      	bne.n	17146 <__gedf2+0x76>
   17116:	465f      	mov	r7, fp
   17118:	433a      	orrs	r2, r7
   1711a:	d114      	bne.n	17146 <__gedf2+0x76>
   1711c:	464b      	mov	r3, r9
   1711e:	2000      	movs	r0, #0
   17120:	2b00      	cmp	r3, #0
   17122:	d00a      	beq.n	1713a <__gedf2+0x6a>
   17124:	e006      	b.n	17134 <__gedf2+0x64>
   17126:	2d00      	cmp	r5, #0
   17128:	d102      	bne.n	17130 <__gedf2+0x60>
   1712a:	4658      	mov	r0, fp
   1712c:	4302      	orrs	r2, r0
   1712e:	d001      	beq.n	17134 <__gedf2+0x64>
   17130:	4299      	cmp	r1, r3
   17132:	d018      	beq.n	17166 <__gedf2+0x96>
   17134:	4248      	negs	r0, r1
   17136:	2101      	movs	r1, #1
   17138:	4308      	orrs	r0, r1
   1713a:	bc3c      	pop	{r2, r3, r4, r5}
   1713c:	4690      	mov	r8, r2
   1713e:	4699      	mov	r9, r3
   17140:	46a2      	mov	sl, r4
   17142:	46ab      	mov	fp, r5
   17144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17146:	2800      	cmp	r0, #0
   17148:	d0f2      	beq.n	17130 <__gedf2+0x60>
   1714a:	2001      	movs	r0, #1
   1714c:	3b01      	subs	r3, #1
   1714e:	4318      	orrs	r0, r3
   17150:	e7f3      	b.n	1713a <__gedf2+0x6a>
   17152:	0037      	movs	r7, r6
   17154:	4307      	orrs	r7, r0
   17156:	d0d1      	beq.n	170fc <__gedf2+0x2c>
   17158:	2002      	movs	r0, #2
   1715a:	4240      	negs	r0, r0
   1715c:	e7ed      	b.n	1713a <__gedf2+0x6a>
   1715e:	465f      	mov	r7, fp
   17160:	4317      	orrs	r7, r2
   17162:	d0ce      	beq.n	17102 <__gedf2+0x32>
   17164:	e7f8      	b.n	17158 <__gedf2+0x88>
   17166:	42ac      	cmp	r4, r5
   17168:	dce4      	bgt.n	17134 <__gedf2+0x64>
   1716a:	da03      	bge.n	17174 <__gedf2+0xa4>
   1716c:	1e48      	subs	r0, r1, #1
   1716e:	2101      	movs	r1, #1
   17170:	4308      	orrs	r0, r1
   17172:	e7e2      	b.n	1713a <__gedf2+0x6a>
   17174:	455e      	cmp	r6, fp
   17176:	d8dd      	bhi.n	17134 <__gedf2+0x64>
   17178:	d006      	beq.n	17188 <__gedf2+0xb8>
   1717a:	2000      	movs	r0, #0
   1717c:	455e      	cmp	r6, fp
   1717e:	d2dc      	bcs.n	1713a <__gedf2+0x6a>
   17180:	2301      	movs	r3, #1
   17182:	1e48      	subs	r0, r1, #1
   17184:	4318      	orrs	r0, r3
   17186:	e7d8      	b.n	1713a <__gedf2+0x6a>
   17188:	45c4      	cmp	ip, r8
   1718a:	d8d3      	bhi.n	17134 <__gedf2+0x64>
   1718c:	2000      	movs	r0, #0
   1718e:	45c4      	cmp	ip, r8
   17190:	d3f6      	bcc.n	17180 <__gedf2+0xb0>
   17192:	e7d2      	b.n	1713a <__gedf2+0x6a>
   17194:	000007ff 	.word	0x000007ff

00017198 <__ledf2>:
   17198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1719a:	464e      	mov	r6, r9
   1719c:	4645      	mov	r5, r8
   1719e:	46de      	mov	lr, fp
   171a0:	4657      	mov	r7, sl
   171a2:	005c      	lsls	r4, r3, #1
   171a4:	b5e0      	push	{r5, r6, r7, lr}
   171a6:	031f      	lsls	r7, r3, #12
   171a8:	0fdb      	lsrs	r3, r3, #31
   171aa:	4699      	mov	r9, r3
   171ac:	4b2a      	ldr	r3, [pc, #168]	; (17258 <__ledf2+0xc0>)
   171ae:	030e      	lsls	r6, r1, #12
   171b0:	004d      	lsls	r5, r1, #1
   171b2:	0fc9      	lsrs	r1, r1, #31
   171b4:	4684      	mov	ip, r0
   171b6:	0b36      	lsrs	r6, r6, #12
   171b8:	0d6d      	lsrs	r5, r5, #21
   171ba:	468b      	mov	fp, r1
   171bc:	4690      	mov	r8, r2
   171be:	0b3f      	lsrs	r7, r7, #12
   171c0:	0d64      	lsrs	r4, r4, #21
   171c2:	429d      	cmp	r5, r3
   171c4:	d020      	beq.n	17208 <__ledf2+0x70>
   171c6:	4b24      	ldr	r3, [pc, #144]	; (17258 <__ledf2+0xc0>)
   171c8:	429c      	cmp	r4, r3
   171ca:	d022      	beq.n	17212 <__ledf2+0x7a>
   171cc:	2d00      	cmp	r5, #0
   171ce:	d112      	bne.n	171f6 <__ledf2+0x5e>
   171d0:	4330      	orrs	r0, r6
   171d2:	4243      	negs	r3, r0
   171d4:	4143      	adcs	r3, r0
   171d6:	b2db      	uxtb	r3, r3
   171d8:	2c00      	cmp	r4, #0
   171da:	d01f      	beq.n	1721c <__ledf2+0x84>
   171dc:	2b00      	cmp	r3, #0
   171de:	d00c      	beq.n	171fa <__ledf2+0x62>
   171e0:	464b      	mov	r3, r9
   171e2:	2001      	movs	r0, #1
   171e4:	3b01      	subs	r3, #1
   171e6:	4303      	orrs	r3, r0
   171e8:	0018      	movs	r0, r3
   171ea:	bc3c      	pop	{r2, r3, r4, r5}
   171ec:	4690      	mov	r8, r2
   171ee:	4699      	mov	r9, r3
   171f0:	46a2      	mov	sl, r4
   171f2:	46ab      	mov	fp, r5
   171f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171f6:	2c00      	cmp	r4, #0
   171f8:	d016      	beq.n	17228 <__ledf2+0x90>
   171fa:	45cb      	cmp	fp, r9
   171fc:	d017      	beq.n	1722e <__ledf2+0x96>
   171fe:	465b      	mov	r3, fp
   17200:	4259      	negs	r1, r3
   17202:	2301      	movs	r3, #1
   17204:	430b      	orrs	r3, r1
   17206:	e7ef      	b.n	171e8 <__ledf2+0x50>
   17208:	0031      	movs	r1, r6
   1720a:	2302      	movs	r3, #2
   1720c:	4301      	orrs	r1, r0
   1720e:	d1eb      	bne.n	171e8 <__ledf2+0x50>
   17210:	e7d9      	b.n	171c6 <__ledf2+0x2e>
   17212:	0039      	movs	r1, r7
   17214:	2302      	movs	r3, #2
   17216:	4311      	orrs	r1, r2
   17218:	d1e6      	bne.n	171e8 <__ledf2+0x50>
   1721a:	e7d7      	b.n	171cc <__ledf2+0x34>
   1721c:	433a      	orrs	r2, r7
   1721e:	d1dd      	bne.n	171dc <__ledf2+0x44>
   17220:	2300      	movs	r3, #0
   17222:	2800      	cmp	r0, #0
   17224:	d0e0      	beq.n	171e8 <__ledf2+0x50>
   17226:	e7ea      	b.n	171fe <__ledf2+0x66>
   17228:	433a      	orrs	r2, r7
   1722a:	d1e6      	bne.n	171fa <__ledf2+0x62>
   1722c:	e7e7      	b.n	171fe <__ledf2+0x66>
   1722e:	42a5      	cmp	r5, r4
   17230:	dce5      	bgt.n	171fe <__ledf2+0x66>
   17232:	db05      	blt.n	17240 <__ledf2+0xa8>
   17234:	42be      	cmp	r6, r7
   17236:	d8e2      	bhi.n	171fe <__ledf2+0x66>
   17238:	d007      	beq.n	1724a <__ledf2+0xb2>
   1723a:	2300      	movs	r3, #0
   1723c:	42be      	cmp	r6, r7
   1723e:	d2d3      	bcs.n	171e8 <__ledf2+0x50>
   17240:	4659      	mov	r1, fp
   17242:	2301      	movs	r3, #1
   17244:	3901      	subs	r1, #1
   17246:	430b      	orrs	r3, r1
   17248:	e7ce      	b.n	171e8 <__ledf2+0x50>
   1724a:	45c4      	cmp	ip, r8
   1724c:	d8d7      	bhi.n	171fe <__ledf2+0x66>
   1724e:	2300      	movs	r3, #0
   17250:	45c4      	cmp	ip, r8
   17252:	d3f5      	bcc.n	17240 <__ledf2+0xa8>
   17254:	e7c8      	b.n	171e8 <__ledf2+0x50>
   17256:	46c0      	nop			; (mov r8, r8)
   17258:	000007ff 	.word	0x000007ff

0001725c <__aeabi_dmul>:
   1725c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1725e:	4657      	mov	r7, sl
   17260:	4645      	mov	r5, r8
   17262:	46de      	mov	lr, fp
   17264:	464e      	mov	r6, r9
   17266:	b5e0      	push	{r5, r6, r7, lr}
   17268:	030c      	lsls	r4, r1, #12
   1726a:	4698      	mov	r8, r3
   1726c:	004e      	lsls	r6, r1, #1
   1726e:	0b23      	lsrs	r3, r4, #12
   17270:	b087      	sub	sp, #28
   17272:	0007      	movs	r7, r0
   17274:	4692      	mov	sl, r2
   17276:	469b      	mov	fp, r3
   17278:	0d76      	lsrs	r6, r6, #21
   1727a:	0fcd      	lsrs	r5, r1, #31
   1727c:	2e00      	cmp	r6, #0
   1727e:	d06b      	beq.n	17358 <__aeabi_dmul+0xfc>
   17280:	4b6d      	ldr	r3, [pc, #436]	; (17438 <__aeabi_dmul+0x1dc>)
   17282:	429e      	cmp	r6, r3
   17284:	d035      	beq.n	172f2 <__aeabi_dmul+0x96>
   17286:	2480      	movs	r4, #128	; 0x80
   17288:	465b      	mov	r3, fp
   1728a:	0f42      	lsrs	r2, r0, #29
   1728c:	0424      	lsls	r4, r4, #16
   1728e:	00db      	lsls	r3, r3, #3
   17290:	4314      	orrs	r4, r2
   17292:	431c      	orrs	r4, r3
   17294:	00c3      	lsls	r3, r0, #3
   17296:	4699      	mov	r9, r3
   17298:	4b68      	ldr	r3, [pc, #416]	; (1743c <__aeabi_dmul+0x1e0>)
   1729a:	46a3      	mov	fp, r4
   1729c:	469c      	mov	ip, r3
   1729e:	2300      	movs	r3, #0
   172a0:	2700      	movs	r7, #0
   172a2:	4466      	add	r6, ip
   172a4:	9302      	str	r3, [sp, #8]
   172a6:	4643      	mov	r3, r8
   172a8:	031c      	lsls	r4, r3, #12
   172aa:	005a      	lsls	r2, r3, #1
   172ac:	0fdb      	lsrs	r3, r3, #31
   172ae:	4650      	mov	r0, sl
   172b0:	0b24      	lsrs	r4, r4, #12
   172b2:	0d52      	lsrs	r2, r2, #21
   172b4:	4698      	mov	r8, r3
   172b6:	d100      	bne.n	172ba <__aeabi_dmul+0x5e>
   172b8:	e076      	b.n	173a8 <__aeabi_dmul+0x14c>
   172ba:	4b5f      	ldr	r3, [pc, #380]	; (17438 <__aeabi_dmul+0x1dc>)
   172bc:	429a      	cmp	r2, r3
   172be:	d06d      	beq.n	1739c <__aeabi_dmul+0x140>
   172c0:	2380      	movs	r3, #128	; 0x80
   172c2:	0f41      	lsrs	r1, r0, #29
   172c4:	041b      	lsls	r3, r3, #16
   172c6:	430b      	orrs	r3, r1
   172c8:	495c      	ldr	r1, [pc, #368]	; (1743c <__aeabi_dmul+0x1e0>)
   172ca:	00e4      	lsls	r4, r4, #3
   172cc:	468c      	mov	ip, r1
   172ce:	431c      	orrs	r4, r3
   172d0:	00c3      	lsls	r3, r0, #3
   172d2:	2000      	movs	r0, #0
   172d4:	4462      	add	r2, ip
   172d6:	4641      	mov	r1, r8
   172d8:	18b6      	adds	r6, r6, r2
   172da:	4069      	eors	r1, r5
   172dc:	1c72      	adds	r2, r6, #1
   172de:	9101      	str	r1, [sp, #4]
   172e0:	4694      	mov	ip, r2
   172e2:	4307      	orrs	r7, r0
   172e4:	2f0f      	cmp	r7, #15
   172e6:	d900      	bls.n	172ea <__aeabi_dmul+0x8e>
   172e8:	e0b0      	b.n	1744c <__aeabi_dmul+0x1f0>
   172ea:	4a55      	ldr	r2, [pc, #340]	; (17440 <__aeabi_dmul+0x1e4>)
   172ec:	00bf      	lsls	r7, r7, #2
   172ee:	59d2      	ldr	r2, [r2, r7]
   172f0:	4697      	mov	pc, r2
   172f2:	465b      	mov	r3, fp
   172f4:	4303      	orrs	r3, r0
   172f6:	4699      	mov	r9, r3
   172f8:	d000      	beq.n	172fc <__aeabi_dmul+0xa0>
   172fa:	e087      	b.n	1740c <__aeabi_dmul+0x1b0>
   172fc:	2300      	movs	r3, #0
   172fe:	469b      	mov	fp, r3
   17300:	3302      	adds	r3, #2
   17302:	2708      	movs	r7, #8
   17304:	9302      	str	r3, [sp, #8]
   17306:	e7ce      	b.n	172a6 <__aeabi_dmul+0x4a>
   17308:	4642      	mov	r2, r8
   1730a:	9201      	str	r2, [sp, #4]
   1730c:	2802      	cmp	r0, #2
   1730e:	d067      	beq.n	173e0 <__aeabi_dmul+0x184>
   17310:	2803      	cmp	r0, #3
   17312:	d100      	bne.n	17316 <__aeabi_dmul+0xba>
   17314:	e20e      	b.n	17734 <__aeabi_dmul+0x4d8>
   17316:	2801      	cmp	r0, #1
   17318:	d000      	beq.n	1731c <__aeabi_dmul+0xc0>
   1731a:	e162      	b.n	175e2 <__aeabi_dmul+0x386>
   1731c:	2300      	movs	r3, #0
   1731e:	2400      	movs	r4, #0
   17320:	2200      	movs	r2, #0
   17322:	4699      	mov	r9, r3
   17324:	9901      	ldr	r1, [sp, #4]
   17326:	4001      	ands	r1, r0
   17328:	b2cd      	uxtb	r5, r1
   1732a:	2100      	movs	r1, #0
   1732c:	0312      	lsls	r2, r2, #12
   1732e:	0d0b      	lsrs	r3, r1, #20
   17330:	0b12      	lsrs	r2, r2, #12
   17332:	051b      	lsls	r3, r3, #20
   17334:	4313      	orrs	r3, r2
   17336:	4a43      	ldr	r2, [pc, #268]	; (17444 <__aeabi_dmul+0x1e8>)
   17338:	0524      	lsls	r4, r4, #20
   1733a:	4013      	ands	r3, r2
   1733c:	431c      	orrs	r4, r3
   1733e:	0064      	lsls	r4, r4, #1
   17340:	07ed      	lsls	r5, r5, #31
   17342:	0864      	lsrs	r4, r4, #1
   17344:	432c      	orrs	r4, r5
   17346:	4648      	mov	r0, r9
   17348:	0021      	movs	r1, r4
   1734a:	b007      	add	sp, #28
   1734c:	bc3c      	pop	{r2, r3, r4, r5}
   1734e:	4690      	mov	r8, r2
   17350:	4699      	mov	r9, r3
   17352:	46a2      	mov	sl, r4
   17354:	46ab      	mov	fp, r5
   17356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17358:	4303      	orrs	r3, r0
   1735a:	4699      	mov	r9, r3
   1735c:	d04f      	beq.n	173fe <__aeabi_dmul+0x1a2>
   1735e:	465b      	mov	r3, fp
   17360:	2b00      	cmp	r3, #0
   17362:	d100      	bne.n	17366 <__aeabi_dmul+0x10a>
   17364:	e189      	b.n	1767a <__aeabi_dmul+0x41e>
   17366:	4658      	mov	r0, fp
   17368:	f000 fe0e 	bl	17f88 <__clzsi2>
   1736c:	0003      	movs	r3, r0
   1736e:	3b0b      	subs	r3, #11
   17370:	2b1c      	cmp	r3, #28
   17372:	dd00      	ble.n	17376 <__aeabi_dmul+0x11a>
   17374:	e17a      	b.n	1766c <__aeabi_dmul+0x410>
   17376:	221d      	movs	r2, #29
   17378:	1ad3      	subs	r3, r2, r3
   1737a:	003a      	movs	r2, r7
   1737c:	0001      	movs	r1, r0
   1737e:	465c      	mov	r4, fp
   17380:	40da      	lsrs	r2, r3
   17382:	3908      	subs	r1, #8
   17384:	408c      	lsls	r4, r1
   17386:	0013      	movs	r3, r2
   17388:	408f      	lsls	r7, r1
   1738a:	4323      	orrs	r3, r4
   1738c:	469b      	mov	fp, r3
   1738e:	46b9      	mov	r9, r7
   17390:	2300      	movs	r3, #0
   17392:	4e2d      	ldr	r6, [pc, #180]	; (17448 <__aeabi_dmul+0x1ec>)
   17394:	2700      	movs	r7, #0
   17396:	1a36      	subs	r6, r6, r0
   17398:	9302      	str	r3, [sp, #8]
   1739a:	e784      	b.n	172a6 <__aeabi_dmul+0x4a>
   1739c:	4653      	mov	r3, sl
   1739e:	4323      	orrs	r3, r4
   173a0:	d12a      	bne.n	173f8 <__aeabi_dmul+0x19c>
   173a2:	2400      	movs	r4, #0
   173a4:	2002      	movs	r0, #2
   173a6:	e796      	b.n	172d6 <__aeabi_dmul+0x7a>
   173a8:	4653      	mov	r3, sl
   173aa:	4323      	orrs	r3, r4
   173ac:	d020      	beq.n	173f0 <__aeabi_dmul+0x194>
   173ae:	2c00      	cmp	r4, #0
   173b0:	d100      	bne.n	173b4 <__aeabi_dmul+0x158>
   173b2:	e157      	b.n	17664 <__aeabi_dmul+0x408>
   173b4:	0020      	movs	r0, r4
   173b6:	f000 fde7 	bl	17f88 <__clzsi2>
   173ba:	0003      	movs	r3, r0
   173bc:	3b0b      	subs	r3, #11
   173be:	2b1c      	cmp	r3, #28
   173c0:	dd00      	ble.n	173c4 <__aeabi_dmul+0x168>
   173c2:	e149      	b.n	17658 <__aeabi_dmul+0x3fc>
   173c4:	211d      	movs	r1, #29
   173c6:	1acb      	subs	r3, r1, r3
   173c8:	4651      	mov	r1, sl
   173ca:	0002      	movs	r2, r0
   173cc:	40d9      	lsrs	r1, r3
   173ce:	4653      	mov	r3, sl
   173d0:	3a08      	subs	r2, #8
   173d2:	4094      	lsls	r4, r2
   173d4:	4093      	lsls	r3, r2
   173d6:	430c      	orrs	r4, r1
   173d8:	4a1b      	ldr	r2, [pc, #108]	; (17448 <__aeabi_dmul+0x1ec>)
   173da:	1a12      	subs	r2, r2, r0
   173dc:	2000      	movs	r0, #0
   173de:	e77a      	b.n	172d6 <__aeabi_dmul+0x7a>
   173e0:	2501      	movs	r5, #1
   173e2:	9b01      	ldr	r3, [sp, #4]
   173e4:	4c14      	ldr	r4, [pc, #80]	; (17438 <__aeabi_dmul+0x1dc>)
   173e6:	401d      	ands	r5, r3
   173e8:	2300      	movs	r3, #0
   173ea:	2200      	movs	r2, #0
   173ec:	4699      	mov	r9, r3
   173ee:	e79c      	b.n	1732a <__aeabi_dmul+0xce>
   173f0:	2400      	movs	r4, #0
   173f2:	2200      	movs	r2, #0
   173f4:	2001      	movs	r0, #1
   173f6:	e76e      	b.n	172d6 <__aeabi_dmul+0x7a>
   173f8:	4653      	mov	r3, sl
   173fa:	2003      	movs	r0, #3
   173fc:	e76b      	b.n	172d6 <__aeabi_dmul+0x7a>
   173fe:	2300      	movs	r3, #0
   17400:	469b      	mov	fp, r3
   17402:	3301      	adds	r3, #1
   17404:	2704      	movs	r7, #4
   17406:	2600      	movs	r6, #0
   17408:	9302      	str	r3, [sp, #8]
   1740a:	e74c      	b.n	172a6 <__aeabi_dmul+0x4a>
   1740c:	2303      	movs	r3, #3
   1740e:	4681      	mov	r9, r0
   17410:	270c      	movs	r7, #12
   17412:	9302      	str	r3, [sp, #8]
   17414:	e747      	b.n	172a6 <__aeabi_dmul+0x4a>
   17416:	2280      	movs	r2, #128	; 0x80
   17418:	2300      	movs	r3, #0
   1741a:	2500      	movs	r5, #0
   1741c:	0312      	lsls	r2, r2, #12
   1741e:	4699      	mov	r9, r3
   17420:	4c05      	ldr	r4, [pc, #20]	; (17438 <__aeabi_dmul+0x1dc>)
   17422:	e782      	b.n	1732a <__aeabi_dmul+0xce>
   17424:	465c      	mov	r4, fp
   17426:	464b      	mov	r3, r9
   17428:	9802      	ldr	r0, [sp, #8]
   1742a:	e76f      	b.n	1730c <__aeabi_dmul+0xb0>
   1742c:	465c      	mov	r4, fp
   1742e:	464b      	mov	r3, r9
   17430:	9501      	str	r5, [sp, #4]
   17432:	9802      	ldr	r0, [sp, #8]
   17434:	e76a      	b.n	1730c <__aeabi_dmul+0xb0>
   17436:	46c0      	nop			; (mov r8, r8)
   17438:	000007ff 	.word	0x000007ff
   1743c:	fffffc01 	.word	0xfffffc01
   17440:	0001ec20 	.word	0x0001ec20
   17444:	800fffff 	.word	0x800fffff
   17448:	fffffc0d 	.word	0xfffffc0d
   1744c:	464a      	mov	r2, r9
   1744e:	4649      	mov	r1, r9
   17450:	0c17      	lsrs	r7, r2, #16
   17452:	0c1a      	lsrs	r2, r3, #16
   17454:	041b      	lsls	r3, r3, #16
   17456:	0c1b      	lsrs	r3, r3, #16
   17458:	0408      	lsls	r0, r1, #16
   1745a:	0019      	movs	r1, r3
   1745c:	0c00      	lsrs	r0, r0, #16
   1745e:	4341      	muls	r1, r0
   17460:	0015      	movs	r5, r2
   17462:	4688      	mov	r8, r1
   17464:	0019      	movs	r1, r3
   17466:	437d      	muls	r5, r7
   17468:	4379      	muls	r1, r7
   1746a:	9503      	str	r5, [sp, #12]
   1746c:	4689      	mov	r9, r1
   1746e:	0029      	movs	r1, r5
   17470:	0015      	movs	r5, r2
   17472:	4345      	muls	r5, r0
   17474:	444d      	add	r5, r9
   17476:	9502      	str	r5, [sp, #8]
   17478:	4645      	mov	r5, r8
   1747a:	0c2d      	lsrs	r5, r5, #16
   1747c:	46aa      	mov	sl, r5
   1747e:	9d02      	ldr	r5, [sp, #8]
   17480:	4455      	add	r5, sl
   17482:	45a9      	cmp	r9, r5
   17484:	d906      	bls.n	17494 <__aeabi_dmul+0x238>
   17486:	468a      	mov	sl, r1
   17488:	2180      	movs	r1, #128	; 0x80
   1748a:	0249      	lsls	r1, r1, #9
   1748c:	4689      	mov	r9, r1
   1748e:	44ca      	add	sl, r9
   17490:	4651      	mov	r1, sl
   17492:	9103      	str	r1, [sp, #12]
   17494:	0c29      	lsrs	r1, r5, #16
   17496:	9104      	str	r1, [sp, #16]
   17498:	4641      	mov	r1, r8
   1749a:	0409      	lsls	r1, r1, #16
   1749c:	042d      	lsls	r5, r5, #16
   1749e:	0c09      	lsrs	r1, r1, #16
   174a0:	4688      	mov	r8, r1
   174a2:	0029      	movs	r1, r5
   174a4:	0c25      	lsrs	r5, r4, #16
   174a6:	0424      	lsls	r4, r4, #16
   174a8:	4441      	add	r1, r8
   174aa:	0c24      	lsrs	r4, r4, #16
   174ac:	9105      	str	r1, [sp, #20]
   174ae:	0021      	movs	r1, r4
   174b0:	4341      	muls	r1, r0
   174b2:	4688      	mov	r8, r1
   174b4:	0021      	movs	r1, r4
   174b6:	4379      	muls	r1, r7
   174b8:	468a      	mov	sl, r1
   174ba:	4368      	muls	r0, r5
   174bc:	4641      	mov	r1, r8
   174be:	4450      	add	r0, sl
   174c0:	4681      	mov	r9, r0
   174c2:	0c08      	lsrs	r0, r1, #16
   174c4:	4448      	add	r0, r9
   174c6:	436f      	muls	r7, r5
   174c8:	4582      	cmp	sl, r0
   174ca:	d903      	bls.n	174d4 <__aeabi_dmul+0x278>
   174cc:	2180      	movs	r1, #128	; 0x80
   174ce:	0249      	lsls	r1, r1, #9
   174d0:	4689      	mov	r9, r1
   174d2:	444f      	add	r7, r9
   174d4:	0c01      	lsrs	r1, r0, #16
   174d6:	4689      	mov	r9, r1
   174d8:	0039      	movs	r1, r7
   174da:	4449      	add	r1, r9
   174dc:	9102      	str	r1, [sp, #8]
   174de:	4641      	mov	r1, r8
   174e0:	040f      	lsls	r7, r1, #16
   174e2:	9904      	ldr	r1, [sp, #16]
   174e4:	0c3f      	lsrs	r7, r7, #16
   174e6:	4688      	mov	r8, r1
   174e8:	0400      	lsls	r0, r0, #16
   174ea:	19c0      	adds	r0, r0, r7
   174ec:	4480      	add	r8, r0
   174ee:	4641      	mov	r1, r8
   174f0:	9104      	str	r1, [sp, #16]
   174f2:	4659      	mov	r1, fp
   174f4:	0c0f      	lsrs	r7, r1, #16
   174f6:	0409      	lsls	r1, r1, #16
   174f8:	0c09      	lsrs	r1, r1, #16
   174fa:	4688      	mov	r8, r1
   174fc:	4359      	muls	r1, r3
   174fe:	468a      	mov	sl, r1
   17500:	0039      	movs	r1, r7
   17502:	4351      	muls	r1, r2
   17504:	4689      	mov	r9, r1
   17506:	4641      	mov	r1, r8
   17508:	434a      	muls	r2, r1
   1750a:	4651      	mov	r1, sl
   1750c:	0c09      	lsrs	r1, r1, #16
   1750e:	468b      	mov	fp, r1
   17510:	437b      	muls	r3, r7
   17512:	18d2      	adds	r2, r2, r3
   17514:	445a      	add	r2, fp
   17516:	4293      	cmp	r3, r2
   17518:	d903      	bls.n	17522 <__aeabi_dmul+0x2c6>
   1751a:	2380      	movs	r3, #128	; 0x80
   1751c:	025b      	lsls	r3, r3, #9
   1751e:	469b      	mov	fp, r3
   17520:	44d9      	add	r9, fp
   17522:	4651      	mov	r1, sl
   17524:	0409      	lsls	r1, r1, #16
   17526:	0c09      	lsrs	r1, r1, #16
   17528:	468a      	mov	sl, r1
   1752a:	4641      	mov	r1, r8
   1752c:	4361      	muls	r1, r4
   1752e:	437c      	muls	r4, r7
   17530:	0c13      	lsrs	r3, r2, #16
   17532:	0412      	lsls	r2, r2, #16
   17534:	444b      	add	r3, r9
   17536:	4452      	add	r2, sl
   17538:	46a1      	mov	r9, r4
   1753a:	468a      	mov	sl, r1
   1753c:	003c      	movs	r4, r7
   1753e:	4641      	mov	r1, r8
   17540:	436c      	muls	r4, r5
   17542:	434d      	muls	r5, r1
   17544:	4651      	mov	r1, sl
   17546:	444d      	add	r5, r9
   17548:	0c0f      	lsrs	r7, r1, #16
   1754a:	197d      	adds	r5, r7, r5
   1754c:	45a9      	cmp	r9, r5
   1754e:	d903      	bls.n	17558 <__aeabi_dmul+0x2fc>
   17550:	2180      	movs	r1, #128	; 0x80
   17552:	0249      	lsls	r1, r1, #9
   17554:	4688      	mov	r8, r1
   17556:	4444      	add	r4, r8
   17558:	9f04      	ldr	r7, [sp, #16]
   1755a:	9903      	ldr	r1, [sp, #12]
   1755c:	46b8      	mov	r8, r7
   1755e:	4441      	add	r1, r8
   17560:	468b      	mov	fp, r1
   17562:	4583      	cmp	fp, r0
   17564:	4180      	sbcs	r0, r0
   17566:	4241      	negs	r1, r0
   17568:	4688      	mov	r8, r1
   1756a:	4651      	mov	r1, sl
   1756c:	0408      	lsls	r0, r1, #16
   1756e:	042f      	lsls	r7, r5, #16
   17570:	0c00      	lsrs	r0, r0, #16
   17572:	183f      	adds	r7, r7, r0
   17574:	4658      	mov	r0, fp
   17576:	9902      	ldr	r1, [sp, #8]
   17578:	1810      	adds	r0, r2, r0
   1757a:	4689      	mov	r9, r1
   1757c:	4290      	cmp	r0, r2
   1757e:	4192      	sbcs	r2, r2
   17580:	444f      	add	r7, r9
   17582:	46ba      	mov	sl, r7
   17584:	4252      	negs	r2, r2
   17586:	4699      	mov	r9, r3
   17588:	4693      	mov	fp, r2
   1758a:	44c2      	add	sl, r8
   1758c:	44d1      	add	r9, sl
   1758e:	44cb      	add	fp, r9
   17590:	428f      	cmp	r7, r1
   17592:	41bf      	sbcs	r7, r7
   17594:	45c2      	cmp	sl, r8
   17596:	4189      	sbcs	r1, r1
   17598:	4599      	cmp	r9, r3
   1759a:	419b      	sbcs	r3, r3
   1759c:	4593      	cmp	fp, r2
   1759e:	4192      	sbcs	r2, r2
   175a0:	427f      	negs	r7, r7
   175a2:	4249      	negs	r1, r1
   175a4:	0c2d      	lsrs	r5, r5, #16
   175a6:	4252      	negs	r2, r2
   175a8:	430f      	orrs	r7, r1
   175aa:	425b      	negs	r3, r3
   175ac:	4313      	orrs	r3, r2
   175ae:	197f      	adds	r7, r7, r5
   175b0:	18ff      	adds	r7, r7, r3
   175b2:	465b      	mov	r3, fp
   175b4:	193c      	adds	r4, r7, r4
   175b6:	0ddb      	lsrs	r3, r3, #23
   175b8:	9a05      	ldr	r2, [sp, #20]
   175ba:	0264      	lsls	r4, r4, #9
   175bc:	431c      	orrs	r4, r3
   175be:	0243      	lsls	r3, r0, #9
   175c0:	4313      	orrs	r3, r2
   175c2:	1e5d      	subs	r5, r3, #1
   175c4:	41ab      	sbcs	r3, r5
   175c6:	465a      	mov	r2, fp
   175c8:	0dc0      	lsrs	r0, r0, #23
   175ca:	4303      	orrs	r3, r0
   175cc:	0252      	lsls	r2, r2, #9
   175ce:	4313      	orrs	r3, r2
   175d0:	01e2      	lsls	r2, r4, #7
   175d2:	d556      	bpl.n	17682 <__aeabi_dmul+0x426>
   175d4:	2001      	movs	r0, #1
   175d6:	085a      	lsrs	r2, r3, #1
   175d8:	4003      	ands	r3, r0
   175da:	4313      	orrs	r3, r2
   175dc:	07e2      	lsls	r2, r4, #31
   175de:	4313      	orrs	r3, r2
   175e0:	0864      	lsrs	r4, r4, #1
   175e2:	485a      	ldr	r0, [pc, #360]	; (1774c <__aeabi_dmul+0x4f0>)
   175e4:	4460      	add	r0, ip
   175e6:	2800      	cmp	r0, #0
   175e8:	dd4d      	ble.n	17686 <__aeabi_dmul+0x42a>
   175ea:	075a      	lsls	r2, r3, #29
   175ec:	d009      	beq.n	17602 <__aeabi_dmul+0x3a6>
   175ee:	220f      	movs	r2, #15
   175f0:	401a      	ands	r2, r3
   175f2:	2a04      	cmp	r2, #4
   175f4:	d005      	beq.n	17602 <__aeabi_dmul+0x3a6>
   175f6:	1d1a      	adds	r2, r3, #4
   175f8:	429a      	cmp	r2, r3
   175fa:	419b      	sbcs	r3, r3
   175fc:	425b      	negs	r3, r3
   175fe:	18e4      	adds	r4, r4, r3
   17600:	0013      	movs	r3, r2
   17602:	01e2      	lsls	r2, r4, #7
   17604:	d504      	bpl.n	17610 <__aeabi_dmul+0x3b4>
   17606:	2080      	movs	r0, #128	; 0x80
   17608:	4a51      	ldr	r2, [pc, #324]	; (17750 <__aeabi_dmul+0x4f4>)
   1760a:	00c0      	lsls	r0, r0, #3
   1760c:	4014      	ands	r4, r2
   1760e:	4460      	add	r0, ip
   17610:	4a50      	ldr	r2, [pc, #320]	; (17754 <__aeabi_dmul+0x4f8>)
   17612:	4290      	cmp	r0, r2
   17614:	dd00      	ble.n	17618 <__aeabi_dmul+0x3bc>
   17616:	e6e3      	b.n	173e0 <__aeabi_dmul+0x184>
   17618:	2501      	movs	r5, #1
   1761a:	08db      	lsrs	r3, r3, #3
   1761c:	0762      	lsls	r2, r4, #29
   1761e:	431a      	orrs	r2, r3
   17620:	0264      	lsls	r4, r4, #9
   17622:	9b01      	ldr	r3, [sp, #4]
   17624:	4691      	mov	r9, r2
   17626:	0b22      	lsrs	r2, r4, #12
   17628:	0544      	lsls	r4, r0, #21
   1762a:	0d64      	lsrs	r4, r4, #21
   1762c:	401d      	ands	r5, r3
   1762e:	e67c      	b.n	1732a <__aeabi_dmul+0xce>
   17630:	2280      	movs	r2, #128	; 0x80
   17632:	4659      	mov	r1, fp
   17634:	0312      	lsls	r2, r2, #12
   17636:	4211      	tst	r1, r2
   17638:	d008      	beq.n	1764c <__aeabi_dmul+0x3f0>
   1763a:	4214      	tst	r4, r2
   1763c:	d106      	bne.n	1764c <__aeabi_dmul+0x3f0>
   1763e:	4322      	orrs	r2, r4
   17640:	0312      	lsls	r2, r2, #12
   17642:	0b12      	lsrs	r2, r2, #12
   17644:	4645      	mov	r5, r8
   17646:	4699      	mov	r9, r3
   17648:	4c43      	ldr	r4, [pc, #268]	; (17758 <__aeabi_dmul+0x4fc>)
   1764a:	e66e      	b.n	1732a <__aeabi_dmul+0xce>
   1764c:	465b      	mov	r3, fp
   1764e:	431a      	orrs	r2, r3
   17650:	0312      	lsls	r2, r2, #12
   17652:	0b12      	lsrs	r2, r2, #12
   17654:	4c40      	ldr	r4, [pc, #256]	; (17758 <__aeabi_dmul+0x4fc>)
   17656:	e668      	b.n	1732a <__aeabi_dmul+0xce>
   17658:	0003      	movs	r3, r0
   1765a:	4654      	mov	r4, sl
   1765c:	3b28      	subs	r3, #40	; 0x28
   1765e:	409c      	lsls	r4, r3
   17660:	2300      	movs	r3, #0
   17662:	e6b9      	b.n	173d8 <__aeabi_dmul+0x17c>
   17664:	f000 fc90 	bl	17f88 <__clzsi2>
   17668:	3020      	adds	r0, #32
   1766a:	e6a6      	b.n	173ba <__aeabi_dmul+0x15e>
   1766c:	0003      	movs	r3, r0
   1766e:	3b28      	subs	r3, #40	; 0x28
   17670:	409f      	lsls	r7, r3
   17672:	2300      	movs	r3, #0
   17674:	46bb      	mov	fp, r7
   17676:	4699      	mov	r9, r3
   17678:	e68a      	b.n	17390 <__aeabi_dmul+0x134>
   1767a:	f000 fc85 	bl	17f88 <__clzsi2>
   1767e:	3020      	adds	r0, #32
   17680:	e674      	b.n	1736c <__aeabi_dmul+0x110>
   17682:	46b4      	mov	ip, r6
   17684:	e7ad      	b.n	175e2 <__aeabi_dmul+0x386>
   17686:	2501      	movs	r5, #1
   17688:	1a2a      	subs	r2, r5, r0
   1768a:	2a38      	cmp	r2, #56	; 0x38
   1768c:	dd06      	ble.n	1769c <__aeabi_dmul+0x440>
   1768e:	9b01      	ldr	r3, [sp, #4]
   17690:	2400      	movs	r4, #0
   17692:	401d      	ands	r5, r3
   17694:	2300      	movs	r3, #0
   17696:	2200      	movs	r2, #0
   17698:	4699      	mov	r9, r3
   1769a:	e646      	b.n	1732a <__aeabi_dmul+0xce>
   1769c:	2a1f      	cmp	r2, #31
   1769e:	dc21      	bgt.n	176e4 <__aeabi_dmul+0x488>
   176a0:	2520      	movs	r5, #32
   176a2:	0020      	movs	r0, r4
   176a4:	1aad      	subs	r5, r5, r2
   176a6:	001e      	movs	r6, r3
   176a8:	40ab      	lsls	r3, r5
   176aa:	40a8      	lsls	r0, r5
   176ac:	40d6      	lsrs	r6, r2
   176ae:	1e5d      	subs	r5, r3, #1
   176b0:	41ab      	sbcs	r3, r5
   176b2:	4330      	orrs	r0, r6
   176b4:	4318      	orrs	r0, r3
   176b6:	40d4      	lsrs	r4, r2
   176b8:	0743      	lsls	r3, r0, #29
   176ba:	d009      	beq.n	176d0 <__aeabi_dmul+0x474>
   176bc:	230f      	movs	r3, #15
   176be:	4003      	ands	r3, r0
   176c0:	2b04      	cmp	r3, #4
   176c2:	d005      	beq.n	176d0 <__aeabi_dmul+0x474>
   176c4:	0003      	movs	r3, r0
   176c6:	1d18      	adds	r0, r3, #4
   176c8:	4298      	cmp	r0, r3
   176ca:	419b      	sbcs	r3, r3
   176cc:	425b      	negs	r3, r3
   176ce:	18e4      	adds	r4, r4, r3
   176d0:	0223      	lsls	r3, r4, #8
   176d2:	d521      	bpl.n	17718 <__aeabi_dmul+0x4bc>
   176d4:	2501      	movs	r5, #1
   176d6:	9b01      	ldr	r3, [sp, #4]
   176d8:	2401      	movs	r4, #1
   176da:	401d      	ands	r5, r3
   176dc:	2300      	movs	r3, #0
   176de:	2200      	movs	r2, #0
   176e0:	4699      	mov	r9, r3
   176e2:	e622      	b.n	1732a <__aeabi_dmul+0xce>
   176e4:	251f      	movs	r5, #31
   176e6:	0021      	movs	r1, r4
   176e8:	426d      	negs	r5, r5
   176ea:	1a28      	subs	r0, r5, r0
   176ec:	40c1      	lsrs	r1, r0
   176ee:	0008      	movs	r0, r1
   176f0:	2a20      	cmp	r2, #32
   176f2:	d01d      	beq.n	17730 <__aeabi_dmul+0x4d4>
   176f4:	355f      	adds	r5, #95	; 0x5f
   176f6:	1aaa      	subs	r2, r5, r2
   176f8:	4094      	lsls	r4, r2
   176fa:	4323      	orrs	r3, r4
   176fc:	1e5c      	subs	r4, r3, #1
   176fe:	41a3      	sbcs	r3, r4
   17700:	2507      	movs	r5, #7
   17702:	4303      	orrs	r3, r0
   17704:	401d      	ands	r5, r3
   17706:	2200      	movs	r2, #0
   17708:	2d00      	cmp	r5, #0
   1770a:	d009      	beq.n	17720 <__aeabi_dmul+0x4c4>
   1770c:	220f      	movs	r2, #15
   1770e:	2400      	movs	r4, #0
   17710:	401a      	ands	r2, r3
   17712:	0018      	movs	r0, r3
   17714:	2a04      	cmp	r2, #4
   17716:	d1d6      	bne.n	176c6 <__aeabi_dmul+0x46a>
   17718:	0003      	movs	r3, r0
   1771a:	0765      	lsls	r5, r4, #29
   1771c:	0264      	lsls	r4, r4, #9
   1771e:	0b22      	lsrs	r2, r4, #12
   17720:	08db      	lsrs	r3, r3, #3
   17722:	432b      	orrs	r3, r5
   17724:	2501      	movs	r5, #1
   17726:	4699      	mov	r9, r3
   17728:	9b01      	ldr	r3, [sp, #4]
   1772a:	2400      	movs	r4, #0
   1772c:	401d      	ands	r5, r3
   1772e:	e5fc      	b.n	1732a <__aeabi_dmul+0xce>
   17730:	2400      	movs	r4, #0
   17732:	e7e2      	b.n	176fa <__aeabi_dmul+0x49e>
   17734:	2280      	movs	r2, #128	; 0x80
   17736:	2501      	movs	r5, #1
   17738:	0312      	lsls	r2, r2, #12
   1773a:	4322      	orrs	r2, r4
   1773c:	9901      	ldr	r1, [sp, #4]
   1773e:	0312      	lsls	r2, r2, #12
   17740:	0b12      	lsrs	r2, r2, #12
   17742:	400d      	ands	r5, r1
   17744:	4699      	mov	r9, r3
   17746:	4c04      	ldr	r4, [pc, #16]	; (17758 <__aeabi_dmul+0x4fc>)
   17748:	e5ef      	b.n	1732a <__aeabi_dmul+0xce>
   1774a:	46c0      	nop			; (mov r8, r8)
   1774c:	000003ff 	.word	0x000003ff
   17750:	feffffff 	.word	0xfeffffff
   17754:	000007fe 	.word	0x000007fe
   17758:	000007ff 	.word	0x000007ff

0001775c <__aeabi_dsub>:
   1775c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1775e:	4646      	mov	r6, r8
   17760:	46d6      	mov	lr, sl
   17762:	464f      	mov	r7, r9
   17764:	030c      	lsls	r4, r1, #12
   17766:	b5c0      	push	{r6, r7, lr}
   17768:	0fcd      	lsrs	r5, r1, #31
   1776a:	004e      	lsls	r6, r1, #1
   1776c:	0a61      	lsrs	r1, r4, #9
   1776e:	0f44      	lsrs	r4, r0, #29
   17770:	430c      	orrs	r4, r1
   17772:	00c1      	lsls	r1, r0, #3
   17774:	0058      	lsls	r0, r3, #1
   17776:	0d40      	lsrs	r0, r0, #21
   17778:	4684      	mov	ip, r0
   1777a:	468a      	mov	sl, r1
   1777c:	000f      	movs	r7, r1
   1777e:	0319      	lsls	r1, r3, #12
   17780:	0f50      	lsrs	r0, r2, #29
   17782:	0a49      	lsrs	r1, r1, #9
   17784:	4301      	orrs	r1, r0
   17786:	48c6      	ldr	r0, [pc, #792]	; (17aa0 <__aeabi_dsub+0x344>)
   17788:	0d76      	lsrs	r6, r6, #21
   1778a:	46a8      	mov	r8, r5
   1778c:	0fdb      	lsrs	r3, r3, #31
   1778e:	00d2      	lsls	r2, r2, #3
   17790:	4584      	cmp	ip, r0
   17792:	d100      	bne.n	17796 <__aeabi_dsub+0x3a>
   17794:	e0d8      	b.n	17948 <__aeabi_dsub+0x1ec>
   17796:	2001      	movs	r0, #1
   17798:	4043      	eors	r3, r0
   1779a:	42ab      	cmp	r3, r5
   1779c:	d100      	bne.n	177a0 <__aeabi_dsub+0x44>
   1779e:	e0a6      	b.n	178ee <__aeabi_dsub+0x192>
   177a0:	4660      	mov	r0, ip
   177a2:	1a35      	subs	r5, r6, r0
   177a4:	2d00      	cmp	r5, #0
   177a6:	dc00      	bgt.n	177aa <__aeabi_dsub+0x4e>
   177a8:	e105      	b.n	179b6 <__aeabi_dsub+0x25a>
   177aa:	2800      	cmp	r0, #0
   177ac:	d110      	bne.n	177d0 <__aeabi_dsub+0x74>
   177ae:	000b      	movs	r3, r1
   177b0:	4313      	orrs	r3, r2
   177b2:	d100      	bne.n	177b6 <__aeabi_dsub+0x5a>
   177b4:	e0d7      	b.n	17966 <__aeabi_dsub+0x20a>
   177b6:	1e6b      	subs	r3, r5, #1
   177b8:	2b00      	cmp	r3, #0
   177ba:	d000      	beq.n	177be <__aeabi_dsub+0x62>
   177bc:	e14b      	b.n	17a56 <__aeabi_dsub+0x2fa>
   177be:	4653      	mov	r3, sl
   177c0:	1a9f      	subs	r7, r3, r2
   177c2:	45ba      	cmp	sl, r7
   177c4:	4180      	sbcs	r0, r0
   177c6:	1a64      	subs	r4, r4, r1
   177c8:	4240      	negs	r0, r0
   177ca:	1a24      	subs	r4, r4, r0
   177cc:	2601      	movs	r6, #1
   177ce:	e01e      	b.n	1780e <__aeabi_dsub+0xb2>
   177d0:	4bb3      	ldr	r3, [pc, #716]	; (17aa0 <__aeabi_dsub+0x344>)
   177d2:	429e      	cmp	r6, r3
   177d4:	d048      	beq.n	17868 <__aeabi_dsub+0x10c>
   177d6:	2380      	movs	r3, #128	; 0x80
   177d8:	041b      	lsls	r3, r3, #16
   177da:	4319      	orrs	r1, r3
   177dc:	2d38      	cmp	r5, #56	; 0x38
   177de:	dd00      	ble.n	177e2 <__aeabi_dsub+0x86>
   177e0:	e119      	b.n	17a16 <__aeabi_dsub+0x2ba>
   177e2:	2d1f      	cmp	r5, #31
   177e4:	dd00      	ble.n	177e8 <__aeabi_dsub+0x8c>
   177e6:	e14c      	b.n	17a82 <__aeabi_dsub+0x326>
   177e8:	2320      	movs	r3, #32
   177ea:	000f      	movs	r7, r1
   177ec:	1b5b      	subs	r3, r3, r5
   177ee:	0010      	movs	r0, r2
   177f0:	409a      	lsls	r2, r3
   177f2:	409f      	lsls	r7, r3
   177f4:	40e8      	lsrs	r0, r5
   177f6:	1e53      	subs	r3, r2, #1
   177f8:	419a      	sbcs	r2, r3
   177fa:	40e9      	lsrs	r1, r5
   177fc:	4307      	orrs	r7, r0
   177fe:	4317      	orrs	r7, r2
   17800:	4653      	mov	r3, sl
   17802:	1bdf      	subs	r7, r3, r7
   17804:	1a61      	subs	r1, r4, r1
   17806:	45ba      	cmp	sl, r7
   17808:	41a4      	sbcs	r4, r4
   1780a:	4264      	negs	r4, r4
   1780c:	1b0c      	subs	r4, r1, r4
   1780e:	0223      	lsls	r3, r4, #8
   17810:	d400      	bmi.n	17814 <__aeabi_dsub+0xb8>
   17812:	e0c5      	b.n	179a0 <__aeabi_dsub+0x244>
   17814:	0264      	lsls	r4, r4, #9
   17816:	0a65      	lsrs	r5, r4, #9
   17818:	2d00      	cmp	r5, #0
   1781a:	d100      	bne.n	1781e <__aeabi_dsub+0xc2>
   1781c:	e0f6      	b.n	17a0c <__aeabi_dsub+0x2b0>
   1781e:	0028      	movs	r0, r5
   17820:	f000 fbb2 	bl	17f88 <__clzsi2>
   17824:	0003      	movs	r3, r0
   17826:	3b08      	subs	r3, #8
   17828:	2b1f      	cmp	r3, #31
   1782a:	dd00      	ble.n	1782e <__aeabi_dsub+0xd2>
   1782c:	e0e9      	b.n	17a02 <__aeabi_dsub+0x2a6>
   1782e:	2220      	movs	r2, #32
   17830:	003c      	movs	r4, r7
   17832:	1ad2      	subs	r2, r2, r3
   17834:	409d      	lsls	r5, r3
   17836:	40d4      	lsrs	r4, r2
   17838:	409f      	lsls	r7, r3
   1783a:	4325      	orrs	r5, r4
   1783c:	429e      	cmp	r6, r3
   1783e:	dd00      	ble.n	17842 <__aeabi_dsub+0xe6>
   17840:	e0db      	b.n	179fa <__aeabi_dsub+0x29e>
   17842:	1b9e      	subs	r6, r3, r6
   17844:	1c73      	adds	r3, r6, #1
   17846:	2b1f      	cmp	r3, #31
   17848:	dd00      	ble.n	1784c <__aeabi_dsub+0xf0>
   1784a:	e10a      	b.n	17a62 <__aeabi_dsub+0x306>
   1784c:	2220      	movs	r2, #32
   1784e:	0038      	movs	r0, r7
   17850:	1ad2      	subs	r2, r2, r3
   17852:	0029      	movs	r1, r5
   17854:	4097      	lsls	r7, r2
   17856:	002c      	movs	r4, r5
   17858:	4091      	lsls	r1, r2
   1785a:	40d8      	lsrs	r0, r3
   1785c:	1e7a      	subs	r2, r7, #1
   1785e:	4197      	sbcs	r7, r2
   17860:	40dc      	lsrs	r4, r3
   17862:	2600      	movs	r6, #0
   17864:	4301      	orrs	r1, r0
   17866:	430f      	orrs	r7, r1
   17868:	077b      	lsls	r3, r7, #29
   1786a:	d009      	beq.n	17880 <__aeabi_dsub+0x124>
   1786c:	230f      	movs	r3, #15
   1786e:	403b      	ands	r3, r7
   17870:	2b04      	cmp	r3, #4
   17872:	d005      	beq.n	17880 <__aeabi_dsub+0x124>
   17874:	1d3b      	adds	r3, r7, #4
   17876:	42bb      	cmp	r3, r7
   17878:	41bf      	sbcs	r7, r7
   1787a:	427f      	negs	r7, r7
   1787c:	19e4      	adds	r4, r4, r7
   1787e:	001f      	movs	r7, r3
   17880:	0223      	lsls	r3, r4, #8
   17882:	d525      	bpl.n	178d0 <__aeabi_dsub+0x174>
   17884:	4b86      	ldr	r3, [pc, #536]	; (17aa0 <__aeabi_dsub+0x344>)
   17886:	3601      	adds	r6, #1
   17888:	429e      	cmp	r6, r3
   1788a:	d100      	bne.n	1788e <__aeabi_dsub+0x132>
   1788c:	e0af      	b.n	179ee <__aeabi_dsub+0x292>
   1788e:	4b85      	ldr	r3, [pc, #532]	; (17aa4 <__aeabi_dsub+0x348>)
   17890:	2501      	movs	r5, #1
   17892:	401c      	ands	r4, r3
   17894:	4643      	mov	r3, r8
   17896:	0762      	lsls	r2, r4, #29
   17898:	08ff      	lsrs	r7, r7, #3
   1789a:	0264      	lsls	r4, r4, #9
   1789c:	0576      	lsls	r6, r6, #21
   1789e:	4317      	orrs	r7, r2
   178a0:	0b24      	lsrs	r4, r4, #12
   178a2:	0d76      	lsrs	r6, r6, #21
   178a4:	401d      	ands	r5, r3
   178a6:	2100      	movs	r1, #0
   178a8:	0324      	lsls	r4, r4, #12
   178aa:	0b23      	lsrs	r3, r4, #12
   178ac:	0d0c      	lsrs	r4, r1, #20
   178ae:	4a7e      	ldr	r2, [pc, #504]	; (17aa8 <__aeabi_dsub+0x34c>)
   178b0:	0524      	lsls	r4, r4, #20
   178b2:	431c      	orrs	r4, r3
   178b4:	4014      	ands	r4, r2
   178b6:	0533      	lsls	r3, r6, #20
   178b8:	4323      	orrs	r3, r4
   178ba:	005b      	lsls	r3, r3, #1
   178bc:	07ed      	lsls	r5, r5, #31
   178be:	085b      	lsrs	r3, r3, #1
   178c0:	432b      	orrs	r3, r5
   178c2:	0038      	movs	r0, r7
   178c4:	0019      	movs	r1, r3
   178c6:	bc1c      	pop	{r2, r3, r4}
   178c8:	4690      	mov	r8, r2
   178ca:	4699      	mov	r9, r3
   178cc:	46a2      	mov	sl, r4
   178ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   178d0:	2501      	movs	r5, #1
   178d2:	4643      	mov	r3, r8
   178d4:	0762      	lsls	r2, r4, #29
   178d6:	08ff      	lsrs	r7, r7, #3
   178d8:	4317      	orrs	r7, r2
   178da:	08e4      	lsrs	r4, r4, #3
   178dc:	401d      	ands	r5, r3
   178de:	4b70      	ldr	r3, [pc, #448]	; (17aa0 <__aeabi_dsub+0x344>)
   178e0:	429e      	cmp	r6, r3
   178e2:	d036      	beq.n	17952 <__aeabi_dsub+0x1f6>
   178e4:	0324      	lsls	r4, r4, #12
   178e6:	0576      	lsls	r6, r6, #21
   178e8:	0b24      	lsrs	r4, r4, #12
   178ea:	0d76      	lsrs	r6, r6, #21
   178ec:	e7db      	b.n	178a6 <__aeabi_dsub+0x14a>
   178ee:	4663      	mov	r3, ip
   178f0:	1af3      	subs	r3, r6, r3
   178f2:	2b00      	cmp	r3, #0
   178f4:	dc00      	bgt.n	178f8 <__aeabi_dsub+0x19c>
   178f6:	e094      	b.n	17a22 <__aeabi_dsub+0x2c6>
   178f8:	4660      	mov	r0, ip
   178fa:	2800      	cmp	r0, #0
   178fc:	d035      	beq.n	1796a <__aeabi_dsub+0x20e>
   178fe:	4868      	ldr	r0, [pc, #416]	; (17aa0 <__aeabi_dsub+0x344>)
   17900:	4286      	cmp	r6, r0
   17902:	d0b1      	beq.n	17868 <__aeabi_dsub+0x10c>
   17904:	2780      	movs	r7, #128	; 0x80
   17906:	043f      	lsls	r7, r7, #16
   17908:	4339      	orrs	r1, r7
   1790a:	2b38      	cmp	r3, #56	; 0x38
   1790c:	dc00      	bgt.n	17910 <__aeabi_dsub+0x1b4>
   1790e:	e0fd      	b.n	17b0c <__aeabi_dsub+0x3b0>
   17910:	430a      	orrs	r2, r1
   17912:	0017      	movs	r7, r2
   17914:	2100      	movs	r1, #0
   17916:	1e7a      	subs	r2, r7, #1
   17918:	4197      	sbcs	r7, r2
   1791a:	4457      	add	r7, sl
   1791c:	4557      	cmp	r7, sl
   1791e:	4180      	sbcs	r0, r0
   17920:	1909      	adds	r1, r1, r4
   17922:	4244      	negs	r4, r0
   17924:	190c      	adds	r4, r1, r4
   17926:	0223      	lsls	r3, r4, #8
   17928:	d53a      	bpl.n	179a0 <__aeabi_dsub+0x244>
   1792a:	4b5d      	ldr	r3, [pc, #372]	; (17aa0 <__aeabi_dsub+0x344>)
   1792c:	3601      	adds	r6, #1
   1792e:	429e      	cmp	r6, r3
   17930:	d100      	bne.n	17934 <__aeabi_dsub+0x1d8>
   17932:	e14b      	b.n	17bcc <__aeabi_dsub+0x470>
   17934:	2201      	movs	r2, #1
   17936:	4b5b      	ldr	r3, [pc, #364]	; (17aa4 <__aeabi_dsub+0x348>)
   17938:	401c      	ands	r4, r3
   1793a:	087b      	lsrs	r3, r7, #1
   1793c:	4017      	ands	r7, r2
   1793e:	431f      	orrs	r7, r3
   17940:	07e2      	lsls	r2, r4, #31
   17942:	4317      	orrs	r7, r2
   17944:	0864      	lsrs	r4, r4, #1
   17946:	e78f      	b.n	17868 <__aeabi_dsub+0x10c>
   17948:	0008      	movs	r0, r1
   1794a:	4310      	orrs	r0, r2
   1794c:	d000      	beq.n	17950 <__aeabi_dsub+0x1f4>
   1794e:	e724      	b.n	1779a <__aeabi_dsub+0x3e>
   17950:	e721      	b.n	17796 <__aeabi_dsub+0x3a>
   17952:	0023      	movs	r3, r4
   17954:	433b      	orrs	r3, r7
   17956:	d100      	bne.n	1795a <__aeabi_dsub+0x1fe>
   17958:	e1b9      	b.n	17cce <__aeabi_dsub+0x572>
   1795a:	2280      	movs	r2, #128	; 0x80
   1795c:	0312      	lsls	r2, r2, #12
   1795e:	4314      	orrs	r4, r2
   17960:	0324      	lsls	r4, r4, #12
   17962:	0b24      	lsrs	r4, r4, #12
   17964:	e79f      	b.n	178a6 <__aeabi_dsub+0x14a>
   17966:	002e      	movs	r6, r5
   17968:	e77e      	b.n	17868 <__aeabi_dsub+0x10c>
   1796a:	0008      	movs	r0, r1
   1796c:	4310      	orrs	r0, r2
   1796e:	d100      	bne.n	17972 <__aeabi_dsub+0x216>
   17970:	e0ca      	b.n	17b08 <__aeabi_dsub+0x3ac>
   17972:	1e58      	subs	r0, r3, #1
   17974:	4684      	mov	ip, r0
   17976:	2800      	cmp	r0, #0
   17978:	d000      	beq.n	1797c <__aeabi_dsub+0x220>
   1797a:	e0e7      	b.n	17b4c <__aeabi_dsub+0x3f0>
   1797c:	4452      	add	r2, sl
   1797e:	4552      	cmp	r2, sl
   17980:	4180      	sbcs	r0, r0
   17982:	1864      	adds	r4, r4, r1
   17984:	4240      	negs	r0, r0
   17986:	1824      	adds	r4, r4, r0
   17988:	0017      	movs	r7, r2
   1798a:	2601      	movs	r6, #1
   1798c:	0223      	lsls	r3, r4, #8
   1798e:	d507      	bpl.n	179a0 <__aeabi_dsub+0x244>
   17990:	2602      	movs	r6, #2
   17992:	e7cf      	b.n	17934 <__aeabi_dsub+0x1d8>
   17994:	4664      	mov	r4, ip
   17996:	432c      	orrs	r4, r5
   17998:	d100      	bne.n	1799c <__aeabi_dsub+0x240>
   1799a:	e1b3      	b.n	17d04 <__aeabi_dsub+0x5a8>
   1799c:	002c      	movs	r4, r5
   1799e:	4667      	mov	r7, ip
   179a0:	077b      	lsls	r3, r7, #29
   179a2:	d000      	beq.n	179a6 <__aeabi_dsub+0x24a>
   179a4:	e762      	b.n	1786c <__aeabi_dsub+0x110>
   179a6:	0763      	lsls	r3, r4, #29
   179a8:	08ff      	lsrs	r7, r7, #3
   179aa:	431f      	orrs	r7, r3
   179ac:	2501      	movs	r5, #1
   179ae:	4643      	mov	r3, r8
   179b0:	08e4      	lsrs	r4, r4, #3
   179b2:	401d      	ands	r5, r3
   179b4:	e793      	b.n	178de <__aeabi_dsub+0x182>
   179b6:	2d00      	cmp	r5, #0
   179b8:	d178      	bne.n	17aac <__aeabi_dsub+0x350>
   179ba:	1c75      	adds	r5, r6, #1
   179bc:	056d      	lsls	r5, r5, #21
   179be:	0d6d      	lsrs	r5, r5, #21
   179c0:	2d01      	cmp	r5, #1
   179c2:	dc00      	bgt.n	179c6 <__aeabi_dsub+0x26a>
   179c4:	e0f2      	b.n	17bac <__aeabi_dsub+0x450>
   179c6:	4650      	mov	r0, sl
   179c8:	1a80      	subs	r0, r0, r2
   179ca:	4582      	cmp	sl, r0
   179cc:	41bf      	sbcs	r7, r7
   179ce:	1a65      	subs	r5, r4, r1
   179d0:	427f      	negs	r7, r7
   179d2:	1bed      	subs	r5, r5, r7
   179d4:	4684      	mov	ip, r0
   179d6:	0228      	lsls	r0, r5, #8
   179d8:	d400      	bmi.n	179dc <__aeabi_dsub+0x280>
   179da:	e08c      	b.n	17af6 <__aeabi_dsub+0x39a>
   179dc:	4650      	mov	r0, sl
   179de:	1a17      	subs	r7, r2, r0
   179e0:	42ba      	cmp	r2, r7
   179e2:	4192      	sbcs	r2, r2
   179e4:	1b0c      	subs	r4, r1, r4
   179e6:	4255      	negs	r5, r2
   179e8:	1b65      	subs	r5, r4, r5
   179ea:	4698      	mov	r8, r3
   179ec:	e714      	b.n	17818 <__aeabi_dsub+0xbc>
   179ee:	2501      	movs	r5, #1
   179f0:	4643      	mov	r3, r8
   179f2:	2400      	movs	r4, #0
   179f4:	401d      	ands	r5, r3
   179f6:	2700      	movs	r7, #0
   179f8:	e755      	b.n	178a6 <__aeabi_dsub+0x14a>
   179fa:	4c2a      	ldr	r4, [pc, #168]	; (17aa4 <__aeabi_dsub+0x348>)
   179fc:	1af6      	subs	r6, r6, r3
   179fe:	402c      	ands	r4, r5
   17a00:	e732      	b.n	17868 <__aeabi_dsub+0x10c>
   17a02:	003d      	movs	r5, r7
   17a04:	3828      	subs	r0, #40	; 0x28
   17a06:	4085      	lsls	r5, r0
   17a08:	2700      	movs	r7, #0
   17a0a:	e717      	b.n	1783c <__aeabi_dsub+0xe0>
   17a0c:	0038      	movs	r0, r7
   17a0e:	f000 fabb 	bl	17f88 <__clzsi2>
   17a12:	3020      	adds	r0, #32
   17a14:	e706      	b.n	17824 <__aeabi_dsub+0xc8>
   17a16:	430a      	orrs	r2, r1
   17a18:	0017      	movs	r7, r2
   17a1a:	2100      	movs	r1, #0
   17a1c:	1e7a      	subs	r2, r7, #1
   17a1e:	4197      	sbcs	r7, r2
   17a20:	e6ee      	b.n	17800 <__aeabi_dsub+0xa4>
   17a22:	2b00      	cmp	r3, #0
   17a24:	d000      	beq.n	17a28 <__aeabi_dsub+0x2cc>
   17a26:	e0e5      	b.n	17bf4 <__aeabi_dsub+0x498>
   17a28:	1c73      	adds	r3, r6, #1
   17a2a:	469c      	mov	ip, r3
   17a2c:	055b      	lsls	r3, r3, #21
   17a2e:	0d5b      	lsrs	r3, r3, #21
   17a30:	2b01      	cmp	r3, #1
   17a32:	dc00      	bgt.n	17a36 <__aeabi_dsub+0x2da>
   17a34:	e09f      	b.n	17b76 <__aeabi_dsub+0x41a>
   17a36:	4b1a      	ldr	r3, [pc, #104]	; (17aa0 <__aeabi_dsub+0x344>)
   17a38:	459c      	cmp	ip, r3
   17a3a:	d100      	bne.n	17a3e <__aeabi_dsub+0x2e2>
   17a3c:	e0c5      	b.n	17bca <__aeabi_dsub+0x46e>
   17a3e:	4452      	add	r2, sl
   17a40:	4552      	cmp	r2, sl
   17a42:	4180      	sbcs	r0, r0
   17a44:	1864      	adds	r4, r4, r1
   17a46:	4240      	negs	r0, r0
   17a48:	1824      	adds	r4, r4, r0
   17a4a:	07e7      	lsls	r7, r4, #31
   17a4c:	0852      	lsrs	r2, r2, #1
   17a4e:	4317      	orrs	r7, r2
   17a50:	0864      	lsrs	r4, r4, #1
   17a52:	4666      	mov	r6, ip
   17a54:	e708      	b.n	17868 <__aeabi_dsub+0x10c>
   17a56:	4812      	ldr	r0, [pc, #72]	; (17aa0 <__aeabi_dsub+0x344>)
   17a58:	4285      	cmp	r5, r0
   17a5a:	d100      	bne.n	17a5e <__aeabi_dsub+0x302>
   17a5c:	e085      	b.n	17b6a <__aeabi_dsub+0x40e>
   17a5e:	001d      	movs	r5, r3
   17a60:	e6bc      	b.n	177dc <__aeabi_dsub+0x80>
   17a62:	0029      	movs	r1, r5
   17a64:	3e1f      	subs	r6, #31
   17a66:	40f1      	lsrs	r1, r6
   17a68:	2b20      	cmp	r3, #32
   17a6a:	d100      	bne.n	17a6e <__aeabi_dsub+0x312>
   17a6c:	e07f      	b.n	17b6e <__aeabi_dsub+0x412>
   17a6e:	2240      	movs	r2, #64	; 0x40
   17a70:	1ad3      	subs	r3, r2, r3
   17a72:	409d      	lsls	r5, r3
   17a74:	432f      	orrs	r7, r5
   17a76:	1e7d      	subs	r5, r7, #1
   17a78:	41af      	sbcs	r7, r5
   17a7a:	2400      	movs	r4, #0
   17a7c:	430f      	orrs	r7, r1
   17a7e:	2600      	movs	r6, #0
   17a80:	e78e      	b.n	179a0 <__aeabi_dsub+0x244>
   17a82:	002b      	movs	r3, r5
   17a84:	000f      	movs	r7, r1
   17a86:	3b20      	subs	r3, #32
   17a88:	40df      	lsrs	r7, r3
   17a8a:	2d20      	cmp	r5, #32
   17a8c:	d071      	beq.n	17b72 <__aeabi_dsub+0x416>
   17a8e:	2340      	movs	r3, #64	; 0x40
   17a90:	1b5d      	subs	r5, r3, r5
   17a92:	40a9      	lsls	r1, r5
   17a94:	430a      	orrs	r2, r1
   17a96:	1e51      	subs	r1, r2, #1
   17a98:	418a      	sbcs	r2, r1
   17a9a:	2100      	movs	r1, #0
   17a9c:	4317      	orrs	r7, r2
   17a9e:	e6af      	b.n	17800 <__aeabi_dsub+0xa4>
   17aa0:	000007ff 	.word	0x000007ff
   17aa4:	ff7fffff 	.word	0xff7fffff
   17aa8:	800fffff 	.word	0x800fffff
   17aac:	2e00      	cmp	r6, #0
   17aae:	d03e      	beq.n	17b2e <__aeabi_dsub+0x3d2>
   17ab0:	4eb3      	ldr	r6, [pc, #716]	; (17d80 <__aeabi_dsub+0x624>)
   17ab2:	45b4      	cmp	ip, r6
   17ab4:	d045      	beq.n	17b42 <__aeabi_dsub+0x3e6>
   17ab6:	2680      	movs	r6, #128	; 0x80
   17ab8:	0436      	lsls	r6, r6, #16
   17aba:	426d      	negs	r5, r5
   17abc:	4334      	orrs	r4, r6
   17abe:	2d38      	cmp	r5, #56	; 0x38
   17ac0:	dd00      	ble.n	17ac4 <__aeabi_dsub+0x368>
   17ac2:	e0a8      	b.n	17c16 <__aeabi_dsub+0x4ba>
   17ac4:	2d1f      	cmp	r5, #31
   17ac6:	dd00      	ble.n	17aca <__aeabi_dsub+0x36e>
   17ac8:	e11f      	b.n	17d0a <__aeabi_dsub+0x5ae>
   17aca:	2620      	movs	r6, #32
   17acc:	0027      	movs	r7, r4
   17ace:	4650      	mov	r0, sl
   17ad0:	1b76      	subs	r6, r6, r5
   17ad2:	40b7      	lsls	r7, r6
   17ad4:	40e8      	lsrs	r0, r5
   17ad6:	4307      	orrs	r7, r0
   17ad8:	4650      	mov	r0, sl
   17ada:	40b0      	lsls	r0, r6
   17adc:	1e46      	subs	r6, r0, #1
   17ade:	41b0      	sbcs	r0, r6
   17ae0:	40ec      	lsrs	r4, r5
   17ae2:	4338      	orrs	r0, r7
   17ae4:	1a17      	subs	r7, r2, r0
   17ae6:	42ba      	cmp	r2, r7
   17ae8:	4192      	sbcs	r2, r2
   17aea:	1b0c      	subs	r4, r1, r4
   17aec:	4252      	negs	r2, r2
   17aee:	1aa4      	subs	r4, r4, r2
   17af0:	4666      	mov	r6, ip
   17af2:	4698      	mov	r8, r3
   17af4:	e68b      	b.n	1780e <__aeabi_dsub+0xb2>
   17af6:	4664      	mov	r4, ip
   17af8:	4667      	mov	r7, ip
   17afa:	432c      	orrs	r4, r5
   17afc:	d000      	beq.n	17b00 <__aeabi_dsub+0x3a4>
   17afe:	e68b      	b.n	17818 <__aeabi_dsub+0xbc>
   17b00:	2500      	movs	r5, #0
   17b02:	2600      	movs	r6, #0
   17b04:	2700      	movs	r7, #0
   17b06:	e6ea      	b.n	178de <__aeabi_dsub+0x182>
   17b08:	001e      	movs	r6, r3
   17b0a:	e6ad      	b.n	17868 <__aeabi_dsub+0x10c>
   17b0c:	2b1f      	cmp	r3, #31
   17b0e:	dc60      	bgt.n	17bd2 <__aeabi_dsub+0x476>
   17b10:	2720      	movs	r7, #32
   17b12:	1af8      	subs	r0, r7, r3
   17b14:	000f      	movs	r7, r1
   17b16:	4684      	mov	ip, r0
   17b18:	4087      	lsls	r7, r0
   17b1a:	0010      	movs	r0, r2
   17b1c:	40d8      	lsrs	r0, r3
   17b1e:	4307      	orrs	r7, r0
   17b20:	4660      	mov	r0, ip
   17b22:	4082      	lsls	r2, r0
   17b24:	1e50      	subs	r0, r2, #1
   17b26:	4182      	sbcs	r2, r0
   17b28:	40d9      	lsrs	r1, r3
   17b2a:	4317      	orrs	r7, r2
   17b2c:	e6f5      	b.n	1791a <__aeabi_dsub+0x1be>
   17b2e:	0026      	movs	r6, r4
   17b30:	4650      	mov	r0, sl
   17b32:	4306      	orrs	r6, r0
   17b34:	d005      	beq.n	17b42 <__aeabi_dsub+0x3e6>
   17b36:	43ed      	mvns	r5, r5
   17b38:	2d00      	cmp	r5, #0
   17b3a:	d0d3      	beq.n	17ae4 <__aeabi_dsub+0x388>
   17b3c:	4e90      	ldr	r6, [pc, #576]	; (17d80 <__aeabi_dsub+0x624>)
   17b3e:	45b4      	cmp	ip, r6
   17b40:	d1bd      	bne.n	17abe <__aeabi_dsub+0x362>
   17b42:	000c      	movs	r4, r1
   17b44:	0017      	movs	r7, r2
   17b46:	4666      	mov	r6, ip
   17b48:	4698      	mov	r8, r3
   17b4a:	e68d      	b.n	17868 <__aeabi_dsub+0x10c>
   17b4c:	488c      	ldr	r0, [pc, #560]	; (17d80 <__aeabi_dsub+0x624>)
   17b4e:	4283      	cmp	r3, r0
   17b50:	d00b      	beq.n	17b6a <__aeabi_dsub+0x40e>
   17b52:	4663      	mov	r3, ip
   17b54:	e6d9      	b.n	1790a <__aeabi_dsub+0x1ae>
   17b56:	2d00      	cmp	r5, #0
   17b58:	d000      	beq.n	17b5c <__aeabi_dsub+0x400>
   17b5a:	e096      	b.n	17c8a <__aeabi_dsub+0x52e>
   17b5c:	0008      	movs	r0, r1
   17b5e:	4310      	orrs	r0, r2
   17b60:	d100      	bne.n	17b64 <__aeabi_dsub+0x408>
   17b62:	e0e2      	b.n	17d2a <__aeabi_dsub+0x5ce>
   17b64:	000c      	movs	r4, r1
   17b66:	0017      	movs	r7, r2
   17b68:	4698      	mov	r8, r3
   17b6a:	4e85      	ldr	r6, [pc, #532]	; (17d80 <__aeabi_dsub+0x624>)
   17b6c:	e67c      	b.n	17868 <__aeabi_dsub+0x10c>
   17b6e:	2500      	movs	r5, #0
   17b70:	e780      	b.n	17a74 <__aeabi_dsub+0x318>
   17b72:	2100      	movs	r1, #0
   17b74:	e78e      	b.n	17a94 <__aeabi_dsub+0x338>
   17b76:	0023      	movs	r3, r4
   17b78:	4650      	mov	r0, sl
   17b7a:	4303      	orrs	r3, r0
   17b7c:	2e00      	cmp	r6, #0
   17b7e:	d000      	beq.n	17b82 <__aeabi_dsub+0x426>
   17b80:	e0a8      	b.n	17cd4 <__aeabi_dsub+0x578>
   17b82:	2b00      	cmp	r3, #0
   17b84:	d100      	bne.n	17b88 <__aeabi_dsub+0x42c>
   17b86:	e0de      	b.n	17d46 <__aeabi_dsub+0x5ea>
   17b88:	000b      	movs	r3, r1
   17b8a:	4313      	orrs	r3, r2
   17b8c:	d100      	bne.n	17b90 <__aeabi_dsub+0x434>
   17b8e:	e66b      	b.n	17868 <__aeabi_dsub+0x10c>
   17b90:	4452      	add	r2, sl
   17b92:	4552      	cmp	r2, sl
   17b94:	4180      	sbcs	r0, r0
   17b96:	1864      	adds	r4, r4, r1
   17b98:	4240      	negs	r0, r0
   17b9a:	1824      	adds	r4, r4, r0
   17b9c:	0017      	movs	r7, r2
   17b9e:	0223      	lsls	r3, r4, #8
   17ba0:	d400      	bmi.n	17ba4 <__aeabi_dsub+0x448>
   17ba2:	e6fd      	b.n	179a0 <__aeabi_dsub+0x244>
   17ba4:	4b77      	ldr	r3, [pc, #476]	; (17d84 <__aeabi_dsub+0x628>)
   17ba6:	4666      	mov	r6, ip
   17ba8:	401c      	ands	r4, r3
   17baa:	e65d      	b.n	17868 <__aeabi_dsub+0x10c>
   17bac:	0025      	movs	r5, r4
   17bae:	4650      	mov	r0, sl
   17bb0:	4305      	orrs	r5, r0
   17bb2:	2e00      	cmp	r6, #0
   17bb4:	d1cf      	bne.n	17b56 <__aeabi_dsub+0x3fa>
   17bb6:	2d00      	cmp	r5, #0
   17bb8:	d14f      	bne.n	17c5a <__aeabi_dsub+0x4fe>
   17bba:	000c      	movs	r4, r1
   17bbc:	4314      	orrs	r4, r2
   17bbe:	d100      	bne.n	17bc2 <__aeabi_dsub+0x466>
   17bc0:	e0a0      	b.n	17d04 <__aeabi_dsub+0x5a8>
   17bc2:	000c      	movs	r4, r1
   17bc4:	0017      	movs	r7, r2
   17bc6:	4698      	mov	r8, r3
   17bc8:	e64e      	b.n	17868 <__aeabi_dsub+0x10c>
   17bca:	4666      	mov	r6, ip
   17bcc:	2400      	movs	r4, #0
   17bce:	2700      	movs	r7, #0
   17bd0:	e685      	b.n	178de <__aeabi_dsub+0x182>
   17bd2:	001f      	movs	r7, r3
   17bd4:	0008      	movs	r0, r1
   17bd6:	3f20      	subs	r7, #32
   17bd8:	40f8      	lsrs	r0, r7
   17bda:	0007      	movs	r7, r0
   17bdc:	2b20      	cmp	r3, #32
   17bde:	d100      	bne.n	17be2 <__aeabi_dsub+0x486>
   17be0:	e08e      	b.n	17d00 <__aeabi_dsub+0x5a4>
   17be2:	2040      	movs	r0, #64	; 0x40
   17be4:	1ac3      	subs	r3, r0, r3
   17be6:	4099      	lsls	r1, r3
   17be8:	430a      	orrs	r2, r1
   17bea:	1e51      	subs	r1, r2, #1
   17bec:	418a      	sbcs	r2, r1
   17bee:	2100      	movs	r1, #0
   17bf0:	4317      	orrs	r7, r2
   17bf2:	e692      	b.n	1791a <__aeabi_dsub+0x1be>
   17bf4:	2e00      	cmp	r6, #0
   17bf6:	d114      	bne.n	17c22 <__aeabi_dsub+0x4c6>
   17bf8:	0026      	movs	r6, r4
   17bfa:	4650      	mov	r0, sl
   17bfc:	4306      	orrs	r6, r0
   17bfe:	d062      	beq.n	17cc6 <__aeabi_dsub+0x56a>
   17c00:	43db      	mvns	r3, r3
   17c02:	2b00      	cmp	r3, #0
   17c04:	d15c      	bne.n	17cc0 <__aeabi_dsub+0x564>
   17c06:	1887      	adds	r7, r0, r2
   17c08:	4297      	cmp	r7, r2
   17c0a:	4192      	sbcs	r2, r2
   17c0c:	1864      	adds	r4, r4, r1
   17c0e:	4252      	negs	r2, r2
   17c10:	18a4      	adds	r4, r4, r2
   17c12:	4666      	mov	r6, ip
   17c14:	e687      	b.n	17926 <__aeabi_dsub+0x1ca>
   17c16:	4650      	mov	r0, sl
   17c18:	4320      	orrs	r0, r4
   17c1a:	1e44      	subs	r4, r0, #1
   17c1c:	41a0      	sbcs	r0, r4
   17c1e:	2400      	movs	r4, #0
   17c20:	e760      	b.n	17ae4 <__aeabi_dsub+0x388>
   17c22:	4e57      	ldr	r6, [pc, #348]	; (17d80 <__aeabi_dsub+0x624>)
   17c24:	45b4      	cmp	ip, r6
   17c26:	d04e      	beq.n	17cc6 <__aeabi_dsub+0x56a>
   17c28:	2680      	movs	r6, #128	; 0x80
   17c2a:	0436      	lsls	r6, r6, #16
   17c2c:	425b      	negs	r3, r3
   17c2e:	4334      	orrs	r4, r6
   17c30:	2b38      	cmp	r3, #56	; 0x38
   17c32:	dd00      	ble.n	17c36 <__aeabi_dsub+0x4da>
   17c34:	e07f      	b.n	17d36 <__aeabi_dsub+0x5da>
   17c36:	2b1f      	cmp	r3, #31
   17c38:	dd00      	ble.n	17c3c <__aeabi_dsub+0x4e0>
   17c3a:	e08b      	b.n	17d54 <__aeabi_dsub+0x5f8>
   17c3c:	2620      	movs	r6, #32
   17c3e:	0027      	movs	r7, r4
   17c40:	4650      	mov	r0, sl
   17c42:	1af6      	subs	r6, r6, r3
   17c44:	40b7      	lsls	r7, r6
   17c46:	40d8      	lsrs	r0, r3
   17c48:	4307      	orrs	r7, r0
   17c4a:	4650      	mov	r0, sl
   17c4c:	40b0      	lsls	r0, r6
   17c4e:	1e46      	subs	r6, r0, #1
   17c50:	41b0      	sbcs	r0, r6
   17c52:	4307      	orrs	r7, r0
   17c54:	40dc      	lsrs	r4, r3
   17c56:	18bf      	adds	r7, r7, r2
   17c58:	e7d6      	b.n	17c08 <__aeabi_dsub+0x4ac>
   17c5a:	000d      	movs	r5, r1
   17c5c:	4315      	orrs	r5, r2
   17c5e:	d100      	bne.n	17c62 <__aeabi_dsub+0x506>
   17c60:	e602      	b.n	17868 <__aeabi_dsub+0x10c>
   17c62:	4650      	mov	r0, sl
   17c64:	1a80      	subs	r0, r0, r2
   17c66:	4582      	cmp	sl, r0
   17c68:	41bf      	sbcs	r7, r7
   17c6a:	1a65      	subs	r5, r4, r1
   17c6c:	427f      	negs	r7, r7
   17c6e:	1bed      	subs	r5, r5, r7
   17c70:	4684      	mov	ip, r0
   17c72:	0228      	lsls	r0, r5, #8
   17c74:	d400      	bmi.n	17c78 <__aeabi_dsub+0x51c>
   17c76:	e68d      	b.n	17994 <__aeabi_dsub+0x238>
   17c78:	4650      	mov	r0, sl
   17c7a:	1a17      	subs	r7, r2, r0
   17c7c:	42ba      	cmp	r2, r7
   17c7e:	4192      	sbcs	r2, r2
   17c80:	1b0c      	subs	r4, r1, r4
   17c82:	4252      	negs	r2, r2
   17c84:	1aa4      	subs	r4, r4, r2
   17c86:	4698      	mov	r8, r3
   17c88:	e5ee      	b.n	17868 <__aeabi_dsub+0x10c>
   17c8a:	000d      	movs	r5, r1
   17c8c:	4315      	orrs	r5, r2
   17c8e:	d100      	bne.n	17c92 <__aeabi_dsub+0x536>
   17c90:	e76b      	b.n	17b6a <__aeabi_dsub+0x40e>
   17c92:	4650      	mov	r0, sl
   17c94:	0767      	lsls	r7, r4, #29
   17c96:	08c0      	lsrs	r0, r0, #3
   17c98:	4307      	orrs	r7, r0
   17c9a:	2080      	movs	r0, #128	; 0x80
   17c9c:	08e4      	lsrs	r4, r4, #3
   17c9e:	0300      	lsls	r0, r0, #12
   17ca0:	4204      	tst	r4, r0
   17ca2:	d007      	beq.n	17cb4 <__aeabi_dsub+0x558>
   17ca4:	08cd      	lsrs	r5, r1, #3
   17ca6:	4205      	tst	r5, r0
   17ca8:	d104      	bne.n	17cb4 <__aeabi_dsub+0x558>
   17caa:	002c      	movs	r4, r5
   17cac:	4698      	mov	r8, r3
   17cae:	08d7      	lsrs	r7, r2, #3
   17cb0:	0749      	lsls	r1, r1, #29
   17cb2:	430f      	orrs	r7, r1
   17cb4:	0f7b      	lsrs	r3, r7, #29
   17cb6:	00e4      	lsls	r4, r4, #3
   17cb8:	431c      	orrs	r4, r3
   17cba:	00ff      	lsls	r7, r7, #3
   17cbc:	4e30      	ldr	r6, [pc, #192]	; (17d80 <__aeabi_dsub+0x624>)
   17cbe:	e5d3      	b.n	17868 <__aeabi_dsub+0x10c>
   17cc0:	4e2f      	ldr	r6, [pc, #188]	; (17d80 <__aeabi_dsub+0x624>)
   17cc2:	45b4      	cmp	ip, r6
   17cc4:	d1b4      	bne.n	17c30 <__aeabi_dsub+0x4d4>
   17cc6:	000c      	movs	r4, r1
   17cc8:	0017      	movs	r7, r2
   17cca:	4666      	mov	r6, ip
   17ccc:	e5cc      	b.n	17868 <__aeabi_dsub+0x10c>
   17cce:	2700      	movs	r7, #0
   17cd0:	2400      	movs	r4, #0
   17cd2:	e5e8      	b.n	178a6 <__aeabi_dsub+0x14a>
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	d039      	beq.n	17d4c <__aeabi_dsub+0x5f0>
   17cd8:	000b      	movs	r3, r1
   17cda:	4313      	orrs	r3, r2
   17cdc:	d100      	bne.n	17ce0 <__aeabi_dsub+0x584>
   17cde:	e744      	b.n	17b6a <__aeabi_dsub+0x40e>
   17ce0:	08c0      	lsrs	r0, r0, #3
   17ce2:	0767      	lsls	r7, r4, #29
   17ce4:	4307      	orrs	r7, r0
   17ce6:	2080      	movs	r0, #128	; 0x80
   17ce8:	08e4      	lsrs	r4, r4, #3
   17cea:	0300      	lsls	r0, r0, #12
   17cec:	4204      	tst	r4, r0
   17cee:	d0e1      	beq.n	17cb4 <__aeabi_dsub+0x558>
   17cf0:	08cb      	lsrs	r3, r1, #3
   17cf2:	4203      	tst	r3, r0
   17cf4:	d1de      	bne.n	17cb4 <__aeabi_dsub+0x558>
   17cf6:	08d7      	lsrs	r7, r2, #3
   17cf8:	0749      	lsls	r1, r1, #29
   17cfa:	430f      	orrs	r7, r1
   17cfc:	001c      	movs	r4, r3
   17cfe:	e7d9      	b.n	17cb4 <__aeabi_dsub+0x558>
   17d00:	2100      	movs	r1, #0
   17d02:	e771      	b.n	17be8 <__aeabi_dsub+0x48c>
   17d04:	2500      	movs	r5, #0
   17d06:	2700      	movs	r7, #0
   17d08:	e5e9      	b.n	178de <__aeabi_dsub+0x182>
   17d0a:	002e      	movs	r6, r5
   17d0c:	0027      	movs	r7, r4
   17d0e:	3e20      	subs	r6, #32
   17d10:	40f7      	lsrs	r7, r6
   17d12:	2d20      	cmp	r5, #32
   17d14:	d02f      	beq.n	17d76 <__aeabi_dsub+0x61a>
   17d16:	2640      	movs	r6, #64	; 0x40
   17d18:	1b75      	subs	r5, r6, r5
   17d1a:	40ac      	lsls	r4, r5
   17d1c:	4650      	mov	r0, sl
   17d1e:	4320      	orrs	r0, r4
   17d20:	1e44      	subs	r4, r0, #1
   17d22:	41a0      	sbcs	r0, r4
   17d24:	2400      	movs	r4, #0
   17d26:	4338      	orrs	r0, r7
   17d28:	e6dc      	b.n	17ae4 <__aeabi_dsub+0x388>
   17d2a:	2480      	movs	r4, #128	; 0x80
   17d2c:	2500      	movs	r5, #0
   17d2e:	0324      	lsls	r4, r4, #12
   17d30:	4e13      	ldr	r6, [pc, #76]	; (17d80 <__aeabi_dsub+0x624>)
   17d32:	2700      	movs	r7, #0
   17d34:	e5d3      	b.n	178de <__aeabi_dsub+0x182>
   17d36:	4650      	mov	r0, sl
   17d38:	4320      	orrs	r0, r4
   17d3a:	0007      	movs	r7, r0
   17d3c:	1e78      	subs	r0, r7, #1
   17d3e:	4187      	sbcs	r7, r0
   17d40:	2400      	movs	r4, #0
   17d42:	18bf      	adds	r7, r7, r2
   17d44:	e760      	b.n	17c08 <__aeabi_dsub+0x4ac>
   17d46:	000c      	movs	r4, r1
   17d48:	0017      	movs	r7, r2
   17d4a:	e58d      	b.n	17868 <__aeabi_dsub+0x10c>
   17d4c:	000c      	movs	r4, r1
   17d4e:	0017      	movs	r7, r2
   17d50:	4e0b      	ldr	r6, [pc, #44]	; (17d80 <__aeabi_dsub+0x624>)
   17d52:	e589      	b.n	17868 <__aeabi_dsub+0x10c>
   17d54:	001e      	movs	r6, r3
   17d56:	0027      	movs	r7, r4
   17d58:	3e20      	subs	r6, #32
   17d5a:	40f7      	lsrs	r7, r6
   17d5c:	2b20      	cmp	r3, #32
   17d5e:	d00c      	beq.n	17d7a <__aeabi_dsub+0x61e>
   17d60:	2640      	movs	r6, #64	; 0x40
   17d62:	1af3      	subs	r3, r6, r3
   17d64:	409c      	lsls	r4, r3
   17d66:	4650      	mov	r0, sl
   17d68:	4320      	orrs	r0, r4
   17d6a:	1e44      	subs	r4, r0, #1
   17d6c:	41a0      	sbcs	r0, r4
   17d6e:	4307      	orrs	r7, r0
   17d70:	2400      	movs	r4, #0
   17d72:	18bf      	adds	r7, r7, r2
   17d74:	e748      	b.n	17c08 <__aeabi_dsub+0x4ac>
   17d76:	2400      	movs	r4, #0
   17d78:	e7d0      	b.n	17d1c <__aeabi_dsub+0x5c0>
   17d7a:	2400      	movs	r4, #0
   17d7c:	e7f3      	b.n	17d66 <__aeabi_dsub+0x60a>
   17d7e:	46c0      	nop			; (mov r8, r8)
   17d80:	000007ff 	.word	0x000007ff
   17d84:	ff7fffff 	.word	0xff7fffff

00017d88 <__aeabi_d2iz>:
   17d88:	b530      	push	{r4, r5, lr}
   17d8a:	4d13      	ldr	r5, [pc, #76]	; (17dd8 <__aeabi_d2iz+0x50>)
   17d8c:	030a      	lsls	r2, r1, #12
   17d8e:	004b      	lsls	r3, r1, #1
   17d90:	0b12      	lsrs	r2, r2, #12
   17d92:	0d5b      	lsrs	r3, r3, #21
   17d94:	0fc9      	lsrs	r1, r1, #31
   17d96:	2400      	movs	r4, #0
   17d98:	42ab      	cmp	r3, r5
   17d9a:	dd10      	ble.n	17dbe <__aeabi_d2iz+0x36>
   17d9c:	4c0f      	ldr	r4, [pc, #60]	; (17ddc <__aeabi_d2iz+0x54>)
   17d9e:	42a3      	cmp	r3, r4
   17da0:	dc0f      	bgt.n	17dc2 <__aeabi_d2iz+0x3a>
   17da2:	2480      	movs	r4, #128	; 0x80
   17da4:	4d0e      	ldr	r5, [pc, #56]	; (17de0 <__aeabi_d2iz+0x58>)
   17da6:	0364      	lsls	r4, r4, #13
   17da8:	4322      	orrs	r2, r4
   17daa:	1aed      	subs	r5, r5, r3
   17dac:	2d1f      	cmp	r5, #31
   17dae:	dd0b      	ble.n	17dc8 <__aeabi_d2iz+0x40>
   17db0:	480c      	ldr	r0, [pc, #48]	; (17de4 <__aeabi_d2iz+0x5c>)
   17db2:	1ac3      	subs	r3, r0, r3
   17db4:	40da      	lsrs	r2, r3
   17db6:	4254      	negs	r4, r2
   17db8:	2900      	cmp	r1, #0
   17dba:	d100      	bne.n	17dbe <__aeabi_d2iz+0x36>
   17dbc:	0014      	movs	r4, r2
   17dbe:	0020      	movs	r0, r4
   17dc0:	bd30      	pop	{r4, r5, pc}
   17dc2:	4b09      	ldr	r3, [pc, #36]	; (17de8 <__aeabi_d2iz+0x60>)
   17dc4:	18cc      	adds	r4, r1, r3
   17dc6:	e7fa      	b.n	17dbe <__aeabi_d2iz+0x36>
   17dc8:	4c08      	ldr	r4, [pc, #32]	; (17dec <__aeabi_d2iz+0x64>)
   17dca:	40e8      	lsrs	r0, r5
   17dcc:	46a4      	mov	ip, r4
   17dce:	4463      	add	r3, ip
   17dd0:	409a      	lsls	r2, r3
   17dd2:	4302      	orrs	r2, r0
   17dd4:	e7ef      	b.n	17db6 <__aeabi_d2iz+0x2e>
   17dd6:	46c0      	nop			; (mov r8, r8)
   17dd8:	000003fe 	.word	0x000003fe
   17ddc:	0000041d 	.word	0x0000041d
   17de0:	00000433 	.word	0x00000433
   17de4:	00000413 	.word	0x00000413
   17de8:	7fffffff 	.word	0x7fffffff
   17dec:	fffffbed 	.word	0xfffffbed

00017df0 <__aeabi_i2d>:
   17df0:	b570      	push	{r4, r5, r6, lr}
   17df2:	2800      	cmp	r0, #0
   17df4:	d030      	beq.n	17e58 <__aeabi_i2d+0x68>
   17df6:	17c3      	asrs	r3, r0, #31
   17df8:	18c4      	adds	r4, r0, r3
   17dfa:	405c      	eors	r4, r3
   17dfc:	0fc5      	lsrs	r5, r0, #31
   17dfe:	0020      	movs	r0, r4
   17e00:	f000 f8c2 	bl	17f88 <__clzsi2>
   17e04:	4b17      	ldr	r3, [pc, #92]	; (17e64 <__aeabi_i2d+0x74>)
   17e06:	4a18      	ldr	r2, [pc, #96]	; (17e68 <__aeabi_i2d+0x78>)
   17e08:	1a1b      	subs	r3, r3, r0
   17e0a:	1ad2      	subs	r2, r2, r3
   17e0c:	2a1f      	cmp	r2, #31
   17e0e:	dd18      	ble.n	17e42 <__aeabi_i2d+0x52>
   17e10:	4a16      	ldr	r2, [pc, #88]	; (17e6c <__aeabi_i2d+0x7c>)
   17e12:	1ad2      	subs	r2, r2, r3
   17e14:	4094      	lsls	r4, r2
   17e16:	2200      	movs	r2, #0
   17e18:	0324      	lsls	r4, r4, #12
   17e1a:	055b      	lsls	r3, r3, #21
   17e1c:	0b24      	lsrs	r4, r4, #12
   17e1e:	0d5b      	lsrs	r3, r3, #21
   17e20:	2100      	movs	r1, #0
   17e22:	0010      	movs	r0, r2
   17e24:	0324      	lsls	r4, r4, #12
   17e26:	0d0a      	lsrs	r2, r1, #20
   17e28:	0b24      	lsrs	r4, r4, #12
   17e2a:	0512      	lsls	r2, r2, #20
   17e2c:	4322      	orrs	r2, r4
   17e2e:	4c10      	ldr	r4, [pc, #64]	; (17e70 <__aeabi_i2d+0x80>)
   17e30:	051b      	lsls	r3, r3, #20
   17e32:	4022      	ands	r2, r4
   17e34:	4313      	orrs	r3, r2
   17e36:	005b      	lsls	r3, r3, #1
   17e38:	07ed      	lsls	r5, r5, #31
   17e3a:	085b      	lsrs	r3, r3, #1
   17e3c:	432b      	orrs	r3, r5
   17e3e:	0019      	movs	r1, r3
   17e40:	bd70      	pop	{r4, r5, r6, pc}
   17e42:	0021      	movs	r1, r4
   17e44:	4091      	lsls	r1, r2
   17e46:	000a      	movs	r2, r1
   17e48:	210b      	movs	r1, #11
   17e4a:	1a08      	subs	r0, r1, r0
   17e4c:	40c4      	lsrs	r4, r0
   17e4e:	055b      	lsls	r3, r3, #21
   17e50:	0324      	lsls	r4, r4, #12
   17e52:	0b24      	lsrs	r4, r4, #12
   17e54:	0d5b      	lsrs	r3, r3, #21
   17e56:	e7e3      	b.n	17e20 <__aeabi_i2d+0x30>
   17e58:	2500      	movs	r5, #0
   17e5a:	2300      	movs	r3, #0
   17e5c:	2400      	movs	r4, #0
   17e5e:	2200      	movs	r2, #0
   17e60:	e7de      	b.n	17e20 <__aeabi_i2d+0x30>
   17e62:	46c0      	nop			; (mov r8, r8)
   17e64:	0000041e 	.word	0x0000041e
   17e68:	00000433 	.word	0x00000433
   17e6c:	00000413 	.word	0x00000413
   17e70:	800fffff 	.word	0x800fffff

00017e74 <__aeabi_ui2d>:
   17e74:	b510      	push	{r4, lr}
   17e76:	1e04      	subs	r4, r0, #0
   17e78:	d028      	beq.n	17ecc <__aeabi_ui2d+0x58>
   17e7a:	f000 f885 	bl	17f88 <__clzsi2>
   17e7e:	4b15      	ldr	r3, [pc, #84]	; (17ed4 <__aeabi_ui2d+0x60>)
   17e80:	4a15      	ldr	r2, [pc, #84]	; (17ed8 <__aeabi_ui2d+0x64>)
   17e82:	1a1b      	subs	r3, r3, r0
   17e84:	1ad2      	subs	r2, r2, r3
   17e86:	2a1f      	cmp	r2, #31
   17e88:	dd15      	ble.n	17eb6 <__aeabi_ui2d+0x42>
   17e8a:	4a14      	ldr	r2, [pc, #80]	; (17edc <__aeabi_ui2d+0x68>)
   17e8c:	1ad2      	subs	r2, r2, r3
   17e8e:	4094      	lsls	r4, r2
   17e90:	2200      	movs	r2, #0
   17e92:	0324      	lsls	r4, r4, #12
   17e94:	055b      	lsls	r3, r3, #21
   17e96:	0b24      	lsrs	r4, r4, #12
   17e98:	0d5b      	lsrs	r3, r3, #21
   17e9a:	2100      	movs	r1, #0
   17e9c:	0010      	movs	r0, r2
   17e9e:	0324      	lsls	r4, r4, #12
   17ea0:	0d0a      	lsrs	r2, r1, #20
   17ea2:	0b24      	lsrs	r4, r4, #12
   17ea4:	0512      	lsls	r2, r2, #20
   17ea6:	4322      	orrs	r2, r4
   17ea8:	4c0d      	ldr	r4, [pc, #52]	; (17ee0 <__aeabi_ui2d+0x6c>)
   17eaa:	051b      	lsls	r3, r3, #20
   17eac:	4022      	ands	r2, r4
   17eae:	4313      	orrs	r3, r2
   17eb0:	005b      	lsls	r3, r3, #1
   17eb2:	0859      	lsrs	r1, r3, #1
   17eb4:	bd10      	pop	{r4, pc}
   17eb6:	0021      	movs	r1, r4
   17eb8:	4091      	lsls	r1, r2
   17eba:	000a      	movs	r2, r1
   17ebc:	210b      	movs	r1, #11
   17ebe:	1a08      	subs	r0, r1, r0
   17ec0:	40c4      	lsrs	r4, r0
   17ec2:	055b      	lsls	r3, r3, #21
   17ec4:	0324      	lsls	r4, r4, #12
   17ec6:	0b24      	lsrs	r4, r4, #12
   17ec8:	0d5b      	lsrs	r3, r3, #21
   17eca:	e7e6      	b.n	17e9a <__aeabi_ui2d+0x26>
   17ecc:	2300      	movs	r3, #0
   17ece:	2400      	movs	r4, #0
   17ed0:	2200      	movs	r2, #0
   17ed2:	e7e2      	b.n	17e9a <__aeabi_ui2d+0x26>
   17ed4:	0000041e 	.word	0x0000041e
   17ed8:	00000433 	.word	0x00000433
   17edc:	00000413 	.word	0x00000413
   17ee0:	800fffff 	.word	0x800fffff

00017ee4 <__aeabi_f2d>:
   17ee4:	0041      	lsls	r1, r0, #1
   17ee6:	0e09      	lsrs	r1, r1, #24
   17ee8:	1c4b      	adds	r3, r1, #1
   17eea:	b570      	push	{r4, r5, r6, lr}
   17eec:	b2db      	uxtb	r3, r3
   17eee:	0246      	lsls	r6, r0, #9
   17ef0:	0a75      	lsrs	r5, r6, #9
   17ef2:	0fc4      	lsrs	r4, r0, #31
   17ef4:	2b01      	cmp	r3, #1
   17ef6:	dd14      	ble.n	17f22 <__aeabi_f2d+0x3e>
   17ef8:	23e0      	movs	r3, #224	; 0xe0
   17efa:	009b      	lsls	r3, r3, #2
   17efc:	076d      	lsls	r5, r5, #29
   17efe:	0b36      	lsrs	r6, r6, #12
   17f00:	18cb      	adds	r3, r1, r3
   17f02:	2100      	movs	r1, #0
   17f04:	0d0a      	lsrs	r2, r1, #20
   17f06:	0028      	movs	r0, r5
   17f08:	0512      	lsls	r2, r2, #20
   17f0a:	4d1c      	ldr	r5, [pc, #112]	; (17f7c <__aeabi_f2d+0x98>)
   17f0c:	4332      	orrs	r2, r6
   17f0e:	055b      	lsls	r3, r3, #21
   17f10:	402a      	ands	r2, r5
   17f12:	085b      	lsrs	r3, r3, #1
   17f14:	4313      	orrs	r3, r2
   17f16:	005b      	lsls	r3, r3, #1
   17f18:	07e4      	lsls	r4, r4, #31
   17f1a:	085b      	lsrs	r3, r3, #1
   17f1c:	4323      	orrs	r3, r4
   17f1e:	0019      	movs	r1, r3
   17f20:	bd70      	pop	{r4, r5, r6, pc}
   17f22:	2900      	cmp	r1, #0
   17f24:	d114      	bne.n	17f50 <__aeabi_f2d+0x6c>
   17f26:	2d00      	cmp	r5, #0
   17f28:	d01e      	beq.n	17f68 <__aeabi_f2d+0x84>
   17f2a:	0028      	movs	r0, r5
   17f2c:	f000 f82c 	bl	17f88 <__clzsi2>
   17f30:	280a      	cmp	r0, #10
   17f32:	dc1c      	bgt.n	17f6e <__aeabi_f2d+0x8a>
   17f34:	230b      	movs	r3, #11
   17f36:	002a      	movs	r2, r5
   17f38:	1a1b      	subs	r3, r3, r0
   17f3a:	40da      	lsrs	r2, r3
   17f3c:	0003      	movs	r3, r0
   17f3e:	3315      	adds	r3, #21
   17f40:	409d      	lsls	r5, r3
   17f42:	4b0f      	ldr	r3, [pc, #60]	; (17f80 <__aeabi_f2d+0x9c>)
   17f44:	0312      	lsls	r2, r2, #12
   17f46:	1a1b      	subs	r3, r3, r0
   17f48:	055b      	lsls	r3, r3, #21
   17f4a:	0b16      	lsrs	r6, r2, #12
   17f4c:	0d5b      	lsrs	r3, r3, #21
   17f4e:	e7d8      	b.n	17f02 <__aeabi_f2d+0x1e>
   17f50:	2d00      	cmp	r5, #0
   17f52:	d006      	beq.n	17f62 <__aeabi_f2d+0x7e>
   17f54:	0b32      	lsrs	r2, r6, #12
   17f56:	2680      	movs	r6, #128	; 0x80
   17f58:	0336      	lsls	r6, r6, #12
   17f5a:	076d      	lsls	r5, r5, #29
   17f5c:	4316      	orrs	r6, r2
   17f5e:	4b09      	ldr	r3, [pc, #36]	; (17f84 <__aeabi_f2d+0xa0>)
   17f60:	e7cf      	b.n	17f02 <__aeabi_f2d+0x1e>
   17f62:	4b08      	ldr	r3, [pc, #32]	; (17f84 <__aeabi_f2d+0xa0>)
   17f64:	2600      	movs	r6, #0
   17f66:	e7cc      	b.n	17f02 <__aeabi_f2d+0x1e>
   17f68:	2300      	movs	r3, #0
   17f6a:	2600      	movs	r6, #0
   17f6c:	e7c9      	b.n	17f02 <__aeabi_f2d+0x1e>
   17f6e:	0003      	movs	r3, r0
   17f70:	002a      	movs	r2, r5
   17f72:	3b0b      	subs	r3, #11
   17f74:	409a      	lsls	r2, r3
   17f76:	2500      	movs	r5, #0
   17f78:	e7e3      	b.n	17f42 <__aeabi_f2d+0x5e>
   17f7a:	46c0      	nop			; (mov r8, r8)
   17f7c:	800fffff 	.word	0x800fffff
   17f80:	00000389 	.word	0x00000389
   17f84:	000007ff 	.word	0x000007ff

00017f88 <__clzsi2>:
   17f88:	211c      	movs	r1, #28
   17f8a:	2301      	movs	r3, #1
   17f8c:	041b      	lsls	r3, r3, #16
   17f8e:	4298      	cmp	r0, r3
   17f90:	d301      	bcc.n	17f96 <__clzsi2+0xe>
   17f92:	0c00      	lsrs	r0, r0, #16
   17f94:	3910      	subs	r1, #16
   17f96:	0a1b      	lsrs	r3, r3, #8
   17f98:	4298      	cmp	r0, r3
   17f9a:	d301      	bcc.n	17fa0 <__clzsi2+0x18>
   17f9c:	0a00      	lsrs	r0, r0, #8
   17f9e:	3908      	subs	r1, #8
   17fa0:	091b      	lsrs	r3, r3, #4
   17fa2:	4298      	cmp	r0, r3
   17fa4:	d301      	bcc.n	17faa <__clzsi2+0x22>
   17fa6:	0900      	lsrs	r0, r0, #4
   17fa8:	3904      	subs	r1, #4
   17faa:	a202      	add	r2, pc, #8	; (adr r2, 17fb4 <__clzsi2+0x2c>)
   17fac:	5c10      	ldrb	r0, [r2, r0]
   17fae:	1840      	adds	r0, r0, r1
   17fb0:	4770      	bx	lr
   17fb2:	46c0      	nop			; (mov r8, r8)
   17fb4:	02020304 	.word	0x02020304
   17fb8:	01010101 	.word	0x01010101
	...

00017fc4 <__clzdi2>:
   17fc4:	b510      	push	{r4, lr}
   17fc6:	2900      	cmp	r1, #0
   17fc8:	d103      	bne.n	17fd2 <__clzdi2+0xe>
   17fca:	f7ff ffdd 	bl	17f88 <__clzsi2>
   17fce:	3020      	adds	r0, #32
   17fd0:	e002      	b.n	17fd8 <__clzdi2+0x14>
   17fd2:	1c08      	adds	r0, r1, #0
   17fd4:	f7ff ffd8 	bl	17f88 <__clzsi2>
   17fd8:	bd10      	pop	{r4, pc}
   17fda:	46c0      	nop			; (mov r8, r8)

00017fdc <atoi>:
   17fdc:	b510      	push	{r4, lr}
   17fde:	220a      	movs	r2, #10
   17fe0:	2100      	movs	r1, #0
   17fe2:	f000 fead 	bl	18d40 <strtol>
   17fe6:	bd10      	pop	{r4, pc}

00017fe8 <__libc_init_array>:
   17fe8:	b570      	push	{r4, r5, r6, lr}
   17fea:	4e0d      	ldr	r6, [pc, #52]	; (18020 <__libc_init_array+0x38>)
   17fec:	4d0d      	ldr	r5, [pc, #52]	; (18024 <__libc_init_array+0x3c>)
   17fee:	2400      	movs	r4, #0
   17ff0:	1bad      	subs	r5, r5, r6
   17ff2:	10ad      	asrs	r5, r5, #2
   17ff4:	d005      	beq.n	18002 <__libc_init_array+0x1a>
   17ff6:	00a3      	lsls	r3, r4, #2
   17ff8:	58f3      	ldr	r3, [r6, r3]
   17ffa:	3401      	adds	r4, #1
   17ffc:	4798      	blx	r3
   17ffe:	42a5      	cmp	r5, r4
   18000:	d1f9      	bne.n	17ff6 <__libc_init_array+0xe>
   18002:	f007 f837 	bl	1f074 <_init>
   18006:	4e08      	ldr	r6, [pc, #32]	; (18028 <__libc_init_array+0x40>)
   18008:	4d08      	ldr	r5, [pc, #32]	; (1802c <__libc_init_array+0x44>)
   1800a:	2400      	movs	r4, #0
   1800c:	1bad      	subs	r5, r5, r6
   1800e:	10ad      	asrs	r5, r5, #2
   18010:	d005      	beq.n	1801e <__libc_init_array+0x36>
   18012:	00a3      	lsls	r3, r4, #2
   18014:	58f3      	ldr	r3, [r6, r3]
   18016:	3401      	adds	r4, #1
   18018:	4798      	blx	r3
   1801a:	42a5      	cmp	r5, r4
   1801c:	d1f9      	bne.n	18012 <__libc_init_array+0x2a>
   1801e:	bd70      	pop	{r4, r5, r6, pc}
   18020:	0001f080 	.word	0x0001f080
   18024:	0001f080 	.word	0x0001f080
   18028:	0001f080 	.word	0x0001f080
   1802c:	0001f088 	.word	0x0001f088

00018030 <__itoa>:
   18030:	1e93      	subs	r3, r2, #2
   18032:	b510      	push	{r4, lr}
   18034:	000c      	movs	r4, r1
   18036:	2b22      	cmp	r3, #34	; 0x22
   18038:	d80e      	bhi.n	18058 <__itoa+0x28>
   1803a:	2a0a      	cmp	r2, #10
   1803c:	d005      	beq.n	1804a <__itoa+0x1a>
   1803e:	2100      	movs	r1, #0
   18040:	1861      	adds	r1, r4, r1
   18042:	f000 ff4f 	bl	18ee4 <__utoa>
   18046:	0020      	movs	r0, r4
   18048:	bd10      	pop	{r4, pc}
   1804a:	2800      	cmp	r0, #0
   1804c:	daf7      	bge.n	1803e <__itoa+0xe>
   1804e:	232d      	movs	r3, #45	; 0x2d
   18050:	4240      	negs	r0, r0
   18052:	700b      	strb	r3, [r1, #0]
   18054:	2101      	movs	r1, #1
   18056:	e7f3      	b.n	18040 <__itoa+0x10>
   18058:	2300      	movs	r3, #0
   1805a:	2000      	movs	r0, #0
   1805c:	700b      	strb	r3, [r1, #0]
   1805e:	e7f3      	b.n	18048 <__itoa+0x18>

00018060 <itoa>:
   18060:	b510      	push	{r4, lr}
   18062:	f7ff ffe5 	bl	18030 <__itoa>
   18066:	bd10      	pop	{r4, pc}

00018068 <__locale_mb_cur_max>:
   18068:	4b05      	ldr	r3, [pc, #20]	; (18080 <__locale_mb_cur_max+0x18>)
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1806e:	2b00      	cmp	r3, #0
   18070:	d003      	beq.n	1807a <__locale_mb_cur_max+0x12>
   18072:	2294      	movs	r2, #148	; 0x94
   18074:	0052      	lsls	r2, r2, #1
   18076:	5c98      	ldrb	r0, [r3, r2]
   18078:	4770      	bx	lr
   1807a:	4b02      	ldr	r3, [pc, #8]	; (18084 <__locale_mb_cur_max+0x1c>)
   1807c:	e7f9      	b.n	18072 <__locale_mb_cur_max+0xa>
   1807e:	46c0      	nop			; (mov r8, r8)
   18080:	2000001c 	.word	0x2000001c
   18084:	20000448 	.word	0x20000448

00018088 <__locale_ctype_ptr_l>:
   18088:	23ec      	movs	r3, #236	; 0xec
   1808a:	58c0      	ldr	r0, [r0, r3]
   1808c:	4770      	bx	lr
   1808e:	46c0      	nop			; (mov r8, r8)

00018090 <__locale_ctype_ptr>:
   18090:	4b04      	ldr	r3, [pc, #16]	; (180a4 <__locale_ctype_ptr+0x14>)
   18092:	681b      	ldr	r3, [r3, #0]
   18094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18096:	2b00      	cmp	r3, #0
   18098:	d002      	beq.n	180a0 <__locale_ctype_ptr+0x10>
   1809a:	22ec      	movs	r2, #236	; 0xec
   1809c:	5898      	ldr	r0, [r3, r2]
   1809e:	4770      	bx	lr
   180a0:	4b01      	ldr	r3, [pc, #4]	; (180a8 <__locale_ctype_ptr+0x18>)
   180a2:	e7fa      	b.n	1809a <__locale_ctype_ptr+0xa>
   180a4:	2000001c 	.word	0x2000001c
   180a8:	20000448 	.word	0x20000448

000180ac <malloc>:
   180ac:	b510      	push	{r4, lr}
   180ae:	4b03      	ldr	r3, [pc, #12]	; (180bc <malloc+0x10>)
   180b0:	0001      	movs	r1, r0
   180b2:	6818      	ldr	r0, [r3, #0]
   180b4:	f000 f804 	bl	180c0 <_malloc_r>
   180b8:	bd10      	pop	{r4, pc}
   180ba:	46c0      	nop			; (mov r8, r8)
   180bc:	2000001c 	.word	0x2000001c

000180c0 <_malloc_r>:
   180c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   180c2:	4657      	mov	r7, sl
   180c4:	4645      	mov	r5, r8
   180c6:	46de      	mov	lr, fp
   180c8:	464e      	mov	r6, r9
   180ca:	b5e0      	push	{r5, r6, r7, lr}
   180cc:	000d      	movs	r5, r1
   180ce:	350b      	adds	r5, #11
   180d0:	b083      	sub	sp, #12
   180d2:	0007      	movs	r7, r0
   180d4:	2d16      	cmp	r5, #22
   180d6:	d800      	bhi.n	180da <_malloc_r+0x1a>
   180d8:	e09f      	b.n	1821a <_malloc_r+0x15a>
   180da:	2307      	movs	r3, #7
   180dc:	439d      	bics	r5, r3
   180de:	d500      	bpl.n	180e2 <_malloc_r+0x22>
   180e0:	e0c4      	b.n	1826c <_malloc_r+0x1ac>
   180e2:	42a9      	cmp	r1, r5
   180e4:	d900      	bls.n	180e8 <_malloc_r+0x28>
   180e6:	e0c1      	b.n	1826c <_malloc_r+0x1ac>
   180e8:	f000 fb90 	bl	1880c <__malloc_lock>
   180ec:	23f8      	movs	r3, #248	; 0xf8
   180ee:	33ff      	adds	r3, #255	; 0xff
   180f0:	429d      	cmp	r5, r3
   180f2:	d800      	bhi.n	180f6 <_malloc_r+0x36>
   180f4:	e28f      	b.n	18616 <_malloc_r+0x556>
   180f6:	0a68      	lsrs	r0, r5, #9
   180f8:	d100      	bne.n	180fc <_malloc_r+0x3c>
   180fa:	e0bb      	b.n	18274 <_malloc_r+0x1b4>
   180fc:	2804      	cmp	r0, #4
   180fe:	d900      	bls.n	18102 <_malloc_r+0x42>
   18100:	e162      	b.n	183c8 <_malloc_r+0x308>
   18102:	2338      	movs	r3, #56	; 0x38
   18104:	4698      	mov	r8, r3
   18106:	09a8      	lsrs	r0, r5, #6
   18108:	4480      	add	r8, r0
   1810a:	3039      	adds	r0, #57	; 0x39
   1810c:	00c1      	lsls	r1, r0, #3
   1810e:	4ed2      	ldr	r6, [pc, #840]	; (18458 <_malloc_r+0x398>)
   18110:	1871      	adds	r1, r6, r1
   18112:	3908      	subs	r1, #8
   18114:	68cc      	ldr	r4, [r1, #12]
   18116:	42a1      	cmp	r1, r4
   18118:	d019      	beq.n	1814e <_malloc_r+0x8e>
   1811a:	2303      	movs	r3, #3
   1811c:	6862      	ldr	r2, [r4, #4]
   1811e:	439a      	bics	r2, r3
   18120:	0013      	movs	r3, r2
   18122:	1b52      	subs	r2, r2, r5
   18124:	2a0f      	cmp	r2, #15
   18126:	dd00      	ble.n	1812a <_malloc_r+0x6a>
   18128:	e0aa      	b.n	18280 <_malloc_r+0x1c0>
   1812a:	2a00      	cmp	r2, #0
   1812c:	db00      	blt.n	18130 <_malloc_r+0x70>
   1812e:	e088      	b.n	18242 <_malloc_r+0x182>
   18130:	2303      	movs	r3, #3
   18132:	469c      	mov	ip, r3
   18134:	e008      	b.n	18148 <_malloc_r+0x88>
   18136:	4662      	mov	r2, ip
   18138:	6863      	ldr	r3, [r4, #4]
   1813a:	4393      	bics	r3, r2
   1813c:	1b5a      	subs	r2, r3, r5
   1813e:	2a0f      	cmp	r2, #15
   18140:	dd00      	ble.n	18144 <_malloc_r+0x84>
   18142:	e09d      	b.n	18280 <_malloc_r+0x1c0>
   18144:	2a00      	cmp	r2, #0
   18146:	da7c      	bge.n	18242 <_malloc_r+0x182>
   18148:	68e4      	ldr	r4, [r4, #12]
   1814a:	42a1      	cmp	r1, r4
   1814c:	d1f3      	bne.n	18136 <_malloc_r+0x76>
   1814e:	0032      	movs	r2, r6
   18150:	6934      	ldr	r4, [r6, #16]
   18152:	3208      	adds	r2, #8
   18154:	4294      	cmp	r4, r2
   18156:	d100      	bne.n	1815a <_malloc_r+0x9a>
   18158:	e190      	b.n	1847c <_malloc_r+0x3bc>
   1815a:	2303      	movs	r3, #3
   1815c:	6861      	ldr	r1, [r4, #4]
   1815e:	4399      	bics	r1, r3
   18160:	4689      	mov	r9, r1
   18162:	1b49      	subs	r1, r1, r5
   18164:	290f      	cmp	r1, #15
   18166:	dd00      	ble.n	1816a <_malloc_r+0xaa>
   18168:	e162      	b.n	18430 <_malloc_r+0x370>
   1816a:	6172      	str	r2, [r6, #20]
   1816c:	6132      	str	r2, [r6, #16]
   1816e:	2900      	cmp	r1, #0
   18170:	db00      	blt.n	18174 <_malloc_r+0xb4>
   18172:	e087      	b.n	18284 <_malloc_r+0x1c4>
   18174:	4ab9      	ldr	r2, [pc, #740]	; (1845c <_malloc_r+0x39c>)
   18176:	464b      	mov	r3, r9
   18178:	4591      	cmp	r9, r2
   1817a:	d900      	bls.n	1817e <_malloc_r+0xbe>
   1817c:	e130      	b.n	183e0 <_malloc_r+0x320>
   1817e:	08db      	lsrs	r3, r3, #3
   18180:	3aff      	subs	r2, #255	; 0xff
   18182:	1099      	asrs	r1, r3, #2
   18184:	3aff      	subs	r2, #255	; 0xff
   18186:	408a      	lsls	r2, r1
   18188:	00db      	lsls	r3, r3, #3
   1818a:	6871      	ldr	r1, [r6, #4]
   1818c:	199b      	adds	r3, r3, r6
   1818e:	430a      	orrs	r2, r1
   18190:	6899      	ldr	r1, [r3, #8]
   18192:	6072      	str	r2, [r6, #4]
   18194:	60e3      	str	r3, [r4, #12]
   18196:	60a1      	str	r1, [r4, #8]
   18198:	609c      	str	r4, [r3, #8]
   1819a:	0013      	movs	r3, r2
   1819c:	60cc      	str	r4, [r1, #12]
   1819e:	2101      	movs	r1, #1
   181a0:	1082      	asrs	r2, r0, #2
   181a2:	4091      	lsls	r1, r2
   181a4:	4299      	cmp	r1, r3
   181a6:	d86f      	bhi.n	18288 <_malloc_r+0x1c8>
   181a8:	420b      	tst	r3, r1
   181aa:	d105      	bne.n	181b8 <_malloc_r+0xf8>
   181ac:	2203      	movs	r2, #3
   181ae:	4390      	bics	r0, r2
   181b0:	0049      	lsls	r1, r1, #1
   181b2:	3004      	adds	r0, #4
   181b4:	420b      	tst	r3, r1
   181b6:	d0fb      	beq.n	181b0 <_malloc_r+0xf0>
   181b8:	2303      	movs	r3, #3
   181ba:	4698      	mov	r8, r3
   181bc:	00c3      	lsls	r3, r0, #3
   181be:	4699      	mov	r9, r3
   181c0:	44b1      	add	r9, r6
   181c2:	46cc      	mov	ip, r9
   181c4:	4682      	mov	sl, r0
   181c6:	4663      	mov	r3, ip
   181c8:	68dc      	ldr	r4, [r3, #12]
   181ca:	45a4      	cmp	ip, r4
   181cc:	d107      	bne.n	181de <_malloc_r+0x11e>
   181ce:	e157      	b.n	18480 <_malloc_r+0x3c0>
   181d0:	2a00      	cmp	r2, #0
   181d2:	db00      	blt.n	181d6 <_malloc_r+0x116>
   181d4:	e166      	b.n	184a4 <_malloc_r+0x3e4>
   181d6:	68e4      	ldr	r4, [r4, #12]
   181d8:	45a4      	cmp	ip, r4
   181da:	d100      	bne.n	181de <_malloc_r+0x11e>
   181dc:	e150      	b.n	18480 <_malloc_r+0x3c0>
   181de:	4642      	mov	r2, r8
   181e0:	6863      	ldr	r3, [r4, #4]
   181e2:	4393      	bics	r3, r2
   181e4:	1b5a      	subs	r2, r3, r5
   181e6:	2a0f      	cmp	r2, #15
   181e8:	ddf2      	ble.n	181d0 <_malloc_r+0x110>
   181ea:	2001      	movs	r0, #1
   181ec:	4680      	mov	r8, r0
   181ee:	1961      	adds	r1, r4, r5
   181f0:	4305      	orrs	r5, r0
   181f2:	6065      	str	r5, [r4, #4]
   181f4:	68a0      	ldr	r0, [r4, #8]
   181f6:	68e5      	ldr	r5, [r4, #12]
   181f8:	3608      	adds	r6, #8
   181fa:	60c5      	str	r5, [r0, #12]
   181fc:	60a8      	str	r0, [r5, #8]
   181fe:	4640      	mov	r0, r8
   18200:	60f1      	str	r1, [r6, #12]
   18202:	60b1      	str	r1, [r6, #8]
   18204:	4310      	orrs	r0, r2
   18206:	6048      	str	r0, [r1, #4]
   18208:	60ce      	str	r6, [r1, #12]
   1820a:	608e      	str	r6, [r1, #8]
   1820c:	0038      	movs	r0, r7
   1820e:	50e2      	str	r2, [r4, r3]
   18210:	f000 fb04 	bl	1881c <__malloc_unlock>
   18214:	0020      	movs	r0, r4
   18216:	3008      	adds	r0, #8
   18218:	e021      	b.n	1825e <_malloc_r+0x19e>
   1821a:	2910      	cmp	r1, #16
   1821c:	d826      	bhi.n	1826c <_malloc_r+0x1ac>
   1821e:	0038      	movs	r0, r7
   18220:	f000 faf4 	bl	1880c <__malloc_lock>
   18224:	2510      	movs	r5, #16
   18226:	2318      	movs	r3, #24
   18228:	2002      	movs	r0, #2
   1822a:	4e8b      	ldr	r6, [pc, #556]	; (18458 <_malloc_r+0x398>)
   1822c:	18f3      	adds	r3, r6, r3
   1822e:	001a      	movs	r2, r3
   18230:	685c      	ldr	r4, [r3, #4]
   18232:	3a08      	subs	r2, #8
   18234:	4294      	cmp	r4, r2
   18236:	d100      	bne.n	1823a <_malloc_r+0x17a>
   18238:	e12e      	b.n	18498 <_malloc_r+0x3d8>
   1823a:	2303      	movs	r3, #3
   1823c:	6862      	ldr	r2, [r4, #4]
   1823e:	439a      	bics	r2, r3
   18240:	0013      	movs	r3, r2
   18242:	68e2      	ldr	r2, [r4, #12]
   18244:	68a1      	ldr	r1, [r4, #8]
   18246:	60ca      	str	r2, [r1, #12]
   18248:	6091      	str	r1, [r2, #8]
   1824a:	2201      	movs	r2, #1
   1824c:	18e3      	adds	r3, r4, r3
   1824e:	6859      	ldr	r1, [r3, #4]
   18250:	0038      	movs	r0, r7
   18252:	430a      	orrs	r2, r1
   18254:	605a      	str	r2, [r3, #4]
   18256:	f000 fae1 	bl	1881c <__malloc_unlock>
   1825a:	0020      	movs	r0, r4
   1825c:	3008      	adds	r0, #8
   1825e:	b003      	add	sp, #12
   18260:	bc3c      	pop	{r2, r3, r4, r5}
   18262:	4690      	mov	r8, r2
   18264:	4699      	mov	r9, r3
   18266:	46a2      	mov	sl, r4
   18268:	46ab      	mov	fp, r5
   1826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1826c:	230c      	movs	r3, #12
   1826e:	2000      	movs	r0, #0
   18270:	603b      	str	r3, [r7, #0]
   18272:	e7f4      	b.n	1825e <_malloc_r+0x19e>
   18274:	2180      	movs	r1, #128	; 0x80
   18276:	233f      	movs	r3, #63	; 0x3f
   18278:	2040      	movs	r0, #64	; 0x40
   1827a:	0089      	lsls	r1, r1, #2
   1827c:	4698      	mov	r8, r3
   1827e:	e746      	b.n	1810e <_malloc_r+0x4e>
   18280:	4640      	mov	r0, r8
   18282:	e764      	b.n	1814e <_malloc_r+0x8e>
   18284:	464b      	mov	r3, r9
   18286:	e7e0      	b.n	1824a <_malloc_r+0x18a>
   18288:	2303      	movs	r3, #3
   1828a:	68b4      	ldr	r4, [r6, #8]
   1828c:	6862      	ldr	r2, [r4, #4]
   1828e:	439a      	bics	r2, r3
   18290:	4690      	mov	r8, r2
   18292:	42aa      	cmp	r2, r5
   18294:	d303      	bcc.n	1829e <_malloc_r+0x1de>
   18296:	1b53      	subs	r3, r2, r5
   18298:	2b0f      	cmp	r3, #15
   1829a:	dd00      	ble.n	1829e <_malloc_r+0x1de>
   1829c:	e086      	b.n	183ac <_malloc_r+0x2ec>
   1829e:	0023      	movs	r3, r4
   182a0:	4443      	add	r3, r8
   182a2:	4a6f      	ldr	r2, [pc, #444]	; (18460 <_malloc_r+0x3a0>)
   182a4:	9301      	str	r3, [sp, #4]
   182a6:	4b6f      	ldr	r3, [pc, #444]	; (18464 <_malloc_r+0x3a4>)
   182a8:	4693      	mov	fp, r2
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	6812      	ldr	r2, [r2, #0]
   182ae:	18eb      	adds	r3, r5, r3
   182b0:	3201      	adds	r2, #1
   182b2:	d100      	bne.n	182b6 <_malloc_r+0x1f6>
   182b4:	e168      	b.n	18588 <_malloc_r+0x4c8>
   182b6:	4a6c      	ldr	r2, [pc, #432]	; (18468 <_malloc_r+0x3a8>)
   182b8:	4694      	mov	ip, r2
   182ba:	4463      	add	r3, ip
   182bc:	0b1b      	lsrs	r3, r3, #12
   182be:	031b      	lsls	r3, r3, #12
   182c0:	9300      	str	r3, [sp, #0]
   182c2:	9900      	ldr	r1, [sp, #0]
   182c4:	0038      	movs	r0, r7
   182c6:	f000 fb41 	bl	1894c <_sbrk_r>
   182ca:	0003      	movs	r3, r0
   182cc:	4681      	mov	r9, r0
   182ce:	3301      	adds	r3, #1
   182d0:	d061      	beq.n	18396 <_malloc_r+0x2d6>
   182d2:	9b01      	ldr	r3, [sp, #4]
   182d4:	4283      	cmp	r3, r0
   182d6:	d900      	bls.n	182da <_malloc_r+0x21a>
   182d8:	e0ff      	b.n	184da <_malloc_r+0x41a>
   182da:	4b64      	ldr	r3, [pc, #400]	; (1846c <_malloc_r+0x3ac>)
   182dc:	9a00      	ldr	r2, [sp, #0]
   182de:	469a      	mov	sl, r3
   182e0:	681b      	ldr	r3, [r3, #0]
   182e2:	469c      	mov	ip, r3
   182e4:	4653      	mov	r3, sl
   182e6:	4462      	add	r2, ip
   182e8:	601a      	str	r2, [r3, #0]
   182ea:	9b01      	ldr	r3, [sp, #4]
   182ec:	0011      	movs	r1, r2
   182ee:	4283      	cmp	r3, r0
   182f0:	d100      	bne.n	182f4 <_malloc_r+0x234>
   182f2:	e155      	b.n	185a0 <_malloc_r+0x4e0>
   182f4:	465b      	mov	r3, fp
   182f6:	681b      	ldr	r3, [r3, #0]
   182f8:	3301      	adds	r3, #1
   182fa:	d100      	bne.n	182fe <_malloc_r+0x23e>
   182fc:	e16c      	b.n	185d8 <_malloc_r+0x518>
   182fe:	464b      	mov	r3, r9
   18300:	9a01      	ldr	r2, [sp, #4]
   18302:	1a9b      	subs	r3, r3, r2
   18304:	1859      	adds	r1, r3, r1
   18306:	4653      	mov	r3, sl
   18308:	6019      	str	r1, [r3, #0]
   1830a:	2307      	movs	r3, #7
   1830c:	464a      	mov	r2, r9
   1830e:	4013      	ands	r3, r2
   18310:	d100      	bne.n	18314 <_malloc_r+0x254>
   18312:	e124      	b.n	1855e <_malloc_r+0x49e>
   18314:	2108      	movs	r1, #8
   18316:	4689      	mov	r9, r1
   18318:	4955      	ldr	r1, [pc, #340]	; (18470 <_malloc_r+0x3b0>)
   1831a:	1ad2      	subs	r2, r2, r3
   1831c:	4491      	add	r9, r2
   1831e:	1acb      	subs	r3, r1, r3
   18320:	9a00      	ldr	r2, [sp, #0]
   18322:	0038      	movs	r0, r7
   18324:	444a      	add	r2, r9
   18326:	0511      	lsls	r1, r2, #20
   18328:	0d09      	lsrs	r1, r1, #20
   1832a:	1a5b      	subs	r3, r3, r1
   1832c:	0019      	movs	r1, r3
   1832e:	469b      	mov	fp, r3
   18330:	f000 fb0c 	bl	1894c <_sbrk_r>
   18334:	1c43      	adds	r3, r0, #1
   18336:	d100      	bne.n	1833a <_malloc_r+0x27a>
   18338:	e142      	b.n	185c0 <_malloc_r+0x500>
   1833a:	464b      	mov	r3, r9
   1833c:	1ac0      	subs	r0, r0, r3
   1833e:	2301      	movs	r3, #1
   18340:	4458      	add	r0, fp
   18342:	4318      	orrs	r0, r3
   18344:	4653      	mov	r3, sl
   18346:	681b      	ldr	r3, [r3, #0]
   18348:	445b      	add	r3, fp
   1834a:	0019      	movs	r1, r3
   1834c:	4653      	mov	r3, sl
   1834e:	6019      	str	r1, [r3, #0]
   18350:	464b      	mov	r3, r9
   18352:	60b3      	str	r3, [r6, #8]
   18354:	6058      	str	r0, [r3, #4]
   18356:	42b4      	cmp	r4, r6
   18358:	d013      	beq.n	18382 <_malloc_r+0x2c2>
   1835a:	4643      	mov	r3, r8
   1835c:	2b0f      	cmp	r3, #15
   1835e:	d800      	bhi.n	18362 <_malloc_r+0x2a2>
   18360:	e0e8      	b.n	18534 <_malloc_r+0x474>
   18362:	4643      	mov	r3, r8
   18364:	2207      	movs	r2, #7
   18366:	6860      	ldr	r0, [r4, #4]
   18368:	3b0c      	subs	r3, #12
   1836a:	4393      	bics	r3, r2
   1836c:	3a06      	subs	r2, #6
   1836e:	4002      	ands	r2, r0
   18370:	2005      	movs	r0, #5
   18372:	431a      	orrs	r2, r3
   18374:	6062      	str	r2, [r4, #4]
   18376:	18e2      	adds	r2, r4, r3
   18378:	6050      	str	r0, [r2, #4]
   1837a:	6090      	str	r0, [r2, #8]
   1837c:	2b0f      	cmp	r3, #15
   1837e:	d900      	bls.n	18382 <_malloc_r+0x2c2>
   18380:	e122      	b.n	185c8 <_malloc_r+0x508>
   18382:	4b3c      	ldr	r3, [pc, #240]	; (18474 <_malloc_r+0x3b4>)
   18384:	681a      	ldr	r2, [r3, #0]
   18386:	4291      	cmp	r1, r2
   18388:	d900      	bls.n	1838c <_malloc_r+0x2cc>
   1838a:	6019      	str	r1, [r3, #0]
   1838c:	4b3a      	ldr	r3, [pc, #232]	; (18478 <_malloc_r+0x3b8>)
   1838e:	681a      	ldr	r2, [r3, #0]
   18390:	4291      	cmp	r1, r2
   18392:	d900      	bls.n	18396 <_malloc_r+0x2d6>
   18394:	6019      	str	r1, [r3, #0]
   18396:	2303      	movs	r3, #3
   18398:	68b4      	ldr	r4, [r6, #8]
   1839a:	6862      	ldr	r2, [r4, #4]
   1839c:	439a      	bics	r2, r3
   1839e:	1b53      	subs	r3, r2, r5
   183a0:	4295      	cmp	r5, r2
   183a2:	d900      	bls.n	183a6 <_malloc_r+0x2e6>
   183a4:	e0c9      	b.n	1853a <_malloc_r+0x47a>
   183a6:	2b0f      	cmp	r3, #15
   183a8:	dc00      	bgt.n	183ac <_malloc_r+0x2ec>
   183aa:	e0c6      	b.n	1853a <_malloc_r+0x47a>
   183ac:	2201      	movs	r2, #1
   183ae:	0029      	movs	r1, r5
   183b0:	4313      	orrs	r3, r2
   183b2:	4311      	orrs	r1, r2
   183b4:	1965      	adds	r5, r4, r5
   183b6:	6061      	str	r1, [r4, #4]
   183b8:	0038      	movs	r0, r7
   183ba:	60b5      	str	r5, [r6, #8]
   183bc:	606b      	str	r3, [r5, #4]
   183be:	f000 fa2d 	bl	1881c <__malloc_unlock>
   183c2:	0020      	movs	r0, r4
   183c4:	3008      	adds	r0, #8
   183c6:	e74a      	b.n	1825e <_malloc_r+0x19e>
   183c8:	2814      	cmp	r0, #20
   183ca:	d97a      	bls.n	184c2 <_malloc_r+0x402>
   183cc:	2854      	cmp	r0, #84	; 0x54
   183ce:	d900      	bls.n	183d2 <_malloc_r+0x312>
   183d0:	e0ba      	b.n	18548 <_malloc_r+0x488>
   183d2:	236e      	movs	r3, #110	; 0x6e
   183d4:	4698      	mov	r8, r3
   183d6:	0b28      	lsrs	r0, r5, #12
   183d8:	4480      	add	r8, r0
   183da:	306f      	adds	r0, #111	; 0x6f
   183dc:	00c1      	lsls	r1, r0, #3
   183de:	e696      	b.n	1810e <_malloc_r+0x4e>
   183e0:	0a5a      	lsrs	r2, r3, #9
   183e2:	2a04      	cmp	r2, #4
   183e4:	d973      	bls.n	184ce <_malloc_r+0x40e>
   183e6:	2a14      	cmp	r2, #20
   183e8:	d900      	bls.n	183ec <_malloc_r+0x32c>
   183ea:	e0d0      	b.n	1858e <_malloc_r+0x4ce>
   183ec:	0011      	movs	r1, r2
   183ee:	325c      	adds	r2, #92	; 0x5c
   183f0:	315b      	adds	r1, #91	; 0x5b
   183f2:	00d2      	lsls	r2, r2, #3
   183f4:	2308      	movs	r3, #8
   183f6:	425b      	negs	r3, r3
   183f8:	469c      	mov	ip, r3
   183fa:	18b2      	adds	r2, r6, r2
   183fc:	4494      	add	ip, r2
   183fe:	4663      	mov	r3, ip
   18400:	689a      	ldr	r2, [r3, #8]
   18402:	2303      	movs	r3, #3
   18404:	4698      	mov	r8, r3
   18406:	4594      	cmp	ip, r2
   18408:	d100      	bne.n	1840c <_malloc_r+0x34c>
   1840a:	e0ab      	b.n	18564 <_malloc_r+0x4a4>
   1840c:	4643      	mov	r3, r8
   1840e:	6851      	ldr	r1, [r2, #4]
   18410:	4399      	bics	r1, r3
   18412:	4589      	cmp	r9, r1
   18414:	d300      	bcc.n	18418 <_malloc_r+0x358>
   18416:	e095      	b.n	18544 <_malloc_r+0x484>
   18418:	6892      	ldr	r2, [r2, #8]
   1841a:	4594      	cmp	ip, r2
   1841c:	d1f6      	bne.n	1840c <_malloc_r+0x34c>
   1841e:	4663      	mov	r3, ip
   18420:	68da      	ldr	r2, [r3, #12]
   18422:	6873      	ldr	r3, [r6, #4]
   18424:	4661      	mov	r1, ip
   18426:	60e2      	str	r2, [r4, #12]
   18428:	60a1      	str	r1, [r4, #8]
   1842a:	6094      	str	r4, [r2, #8]
   1842c:	60cc      	str	r4, [r1, #12]
   1842e:	e6b6      	b.n	1819e <_malloc_r+0xde>
   18430:	2301      	movs	r3, #1
   18432:	1960      	adds	r0, r4, r5
   18434:	431d      	orrs	r5, r3
   18436:	6065      	str	r5, [r4, #4]
   18438:	6170      	str	r0, [r6, #20]
   1843a:	6130      	str	r0, [r6, #16]
   1843c:	60c2      	str	r2, [r0, #12]
   1843e:	6082      	str	r2, [r0, #8]
   18440:	001a      	movs	r2, r3
   18442:	464b      	mov	r3, r9
   18444:	430a      	orrs	r2, r1
   18446:	6042      	str	r2, [r0, #4]
   18448:	0038      	movs	r0, r7
   1844a:	50e1      	str	r1, [r4, r3]
   1844c:	f000 f9e6 	bl	1881c <__malloc_unlock>
   18450:	0020      	movs	r0, r4
   18452:	3008      	adds	r0, #8
   18454:	e703      	b.n	1825e <_malloc_r+0x19e>
   18456:	46c0      	nop			; (mov r8, r8)
   18458:	200005b4 	.word	0x200005b4
   1845c:	000001ff 	.word	0x000001ff
   18460:	200009bc 	.word	0x200009bc
   18464:	20000fa8 	.word	0x20000fa8
   18468:	0000100f 	.word	0x0000100f
   1846c:	20000f78 	.word	0x20000f78
   18470:	00001008 	.word	0x00001008
   18474:	20000fa0 	.word	0x20000fa0
   18478:	20000fa4 	.word	0x20000fa4
   1847c:	6873      	ldr	r3, [r6, #4]
   1847e:	e68e      	b.n	1819e <_malloc_r+0xde>
   18480:	2308      	movs	r3, #8
   18482:	469b      	mov	fp, r3
   18484:	3b07      	subs	r3, #7
   18486:	44dc      	add	ip, fp
   18488:	469b      	mov	fp, r3
   1848a:	44da      	add	sl, fp
   1848c:	4643      	mov	r3, r8
   1848e:	4652      	mov	r2, sl
   18490:	4213      	tst	r3, r2
   18492:	d000      	beq.n	18496 <_malloc_r+0x3d6>
   18494:	e697      	b.n	181c6 <_malloc_r+0x106>
   18496:	e037      	b.n	18508 <_malloc_r+0x448>
   18498:	68dc      	ldr	r4, [r3, #12]
   1849a:	3002      	adds	r0, #2
   1849c:	42a3      	cmp	r3, r4
   1849e:	d100      	bne.n	184a2 <_malloc_r+0x3e2>
   184a0:	e655      	b.n	1814e <_malloc_r+0x8e>
   184a2:	e6ca      	b.n	1823a <_malloc_r+0x17a>
   184a4:	2201      	movs	r2, #1
   184a6:	18e3      	adds	r3, r4, r3
   184a8:	6859      	ldr	r1, [r3, #4]
   184aa:	0038      	movs	r0, r7
   184ac:	430a      	orrs	r2, r1
   184ae:	605a      	str	r2, [r3, #4]
   184b0:	68e3      	ldr	r3, [r4, #12]
   184b2:	68a2      	ldr	r2, [r4, #8]
   184b4:	60d3      	str	r3, [r2, #12]
   184b6:	609a      	str	r2, [r3, #8]
   184b8:	f000 f9b0 	bl	1881c <__malloc_unlock>
   184bc:	0020      	movs	r0, r4
   184be:	3008      	adds	r0, #8
   184c0:	e6cd      	b.n	1825e <_malloc_r+0x19e>
   184c2:	235b      	movs	r3, #91	; 0x5b
   184c4:	4698      	mov	r8, r3
   184c6:	4480      	add	r8, r0
   184c8:	305c      	adds	r0, #92	; 0x5c
   184ca:	00c1      	lsls	r1, r0, #3
   184cc:	e61f      	b.n	1810e <_malloc_r+0x4e>
   184ce:	099a      	lsrs	r2, r3, #6
   184d0:	0011      	movs	r1, r2
   184d2:	3239      	adds	r2, #57	; 0x39
   184d4:	3138      	adds	r1, #56	; 0x38
   184d6:	00d2      	lsls	r2, r2, #3
   184d8:	e78c      	b.n	183f4 <_malloc_r+0x334>
   184da:	42b4      	cmp	r4, r6
   184dc:	d000      	beq.n	184e0 <_malloc_r+0x420>
   184de:	e75a      	b.n	18396 <_malloc_r+0x2d6>
   184e0:	4b4f      	ldr	r3, [pc, #316]	; (18620 <_malloc_r+0x560>)
   184e2:	9a00      	ldr	r2, [sp, #0]
   184e4:	469a      	mov	sl, r3
   184e6:	681b      	ldr	r3, [r3, #0]
   184e8:	469c      	mov	ip, r3
   184ea:	4653      	mov	r3, sl
   184ec:	4462      	add	r2, ip
   184ee:	0011      	movs	r1, r2
   184f0:	601a      	str	r2, [r3, #0]
   184f2:	e6ff      	b.n	182f4 <_malloc_r+0x234>
   184f4:	2308      	movs	r3, #8
   184f6:	425b      	negs	r3, r3
   184f8:	469c      	mov	ip, r3
   184fa:	44e1      	add	r9, ip
   184fc:	464b      	mov	r3, r9
   184fe:	689b      	ldr	r3, [r3, #8]
   18500:	3801      	subs	r0, #1
   18502:	4599      	cmp	r9, r3
   18504:	d000      	beq.n	18508 <_malloc_r+0x448>
   18506:	e084      	b.n	18612 <_malloc_r+0x552>
   18508:	4643      	mov	r3, r8
   1850a:	4203      	tst	r3, r0
   1850c:	d1f2      	bne.n	184f4 <_malloc_r+0x434>
   1850e:	6873      	ldr	r3, [r6, #4]
   18510:	438b      	bics	r3, r1
   18512:	6073      	str	r3, [r6, #4]
   18514:	0049      	lsls	r1, r1, #1
   18516:	4299      	cmp	r1, r3
   18518:	d900      	bls.n	1851c <_malloc_r+0x45c>
   1851a:	e6b5      	b.n	18288 <_malloc_r+0x1c8>
   1851c:	2900      	cmp	r1, #0
   1851e:	d100      	bne.n	18522 <_malloc_r+0x462>
   18520:	e6b2      	b.n	18288 <_malloc_r+0x1c8>
   18522:	4650      	mov	r0, sl
   18524:	420b      	tst	r3, r1
   18526:	d000      	beq.n	1852a <_malloc_r+0x46a>
   18528:	e648      	b.n	181bc <_malloc_r+0xfc>
   1852a:	0049      	lsls	r1, r1, #1
   1852c:	3004      	adds	r0, #4
   1852e:	420b      	tst	r3, r1
   18530:	d0fb      	beq.n	1852a <_malloc_r+0x46a>
   18532:	e643      	b.n	181bc <_malloc_r+0xfc>
   18534:	2301      	movs	r3, #1
   18536:	464a      	mov	r2, r9
   18538:	6053      	str	r3, [r2, #4]
   1853a:	0038      	movs	r0, r7
   1853c:	f000 f96e 	bl	1881c <__malloc_unlock>
   18540:	2000      	movs	r0, #0
   18542:	e68c      	b.n	1825e <_malloc_r+0x19e>
   18544:	4694      	mov	ip, r2
   18546:	e76a      	b.n	1841e <_malloc_r+0x35e>
   18548:	23aa      	movs	r3, #170	; 0xaa
   1854a:	005b      	lsls	r3, r3, #1
   1854c:	4298      	cmp	r0, r3
   1854e:	d811      	bhi.n	18574 <_malloc_r+0x4b4>
   18550:	3bdd      	subs	r3, #221	; 0xdd
   18552:	4698      	mov	r8, r3
   18554:	0be8      	lsrs	r0, r5, #15
   18556:	4480      	add	r8, r0
   18558:	3078      	adds	r0, #120	; 0x78
   1855a:	00c1      	lsls	r1, r0, #3
   1855c:	e5d7      	b.n	1810e <_malloc_r+0x4e>
   1855e:	2380      	movs	r3, #128	; 0x80
   18560:	015b      	lsls	r3, r3, #5
   18562:	e6dd      	b.n	18320 <_malloc_r+0x260>
   18564:	1089      	asrs	r1, r1, #2
   18566:	3b02      	subs	r3, #2
   18568:	408b      	lsls	r3, r1
   1856a:	6872      	ldr	r2, [r6, #4]
   1856c:	4313      	orrs	r3, r2
   1856e:	6073      	str	r3, [r6, #4]
   18570:	4662      	mov	r2, ip
   18572:	e757      	b.n	18424 <_malloc_r+0x364>
   18574:	4b2b      	ldr	r3, [pc, #172]	; (18624 <_malloc_r+0x564>)
   18576:	4298      	cmp	r0, r3
   18578:	d81c      	bhi.n	185b4 <_malloc_r+0x4f4>
   1857a:	237c      	movs	r3, #124	; 0x7c
   1857c:	4698      	mov	r8, r3
   1857e:	0ca8      	lsrs	r0, r5, #18
   18580:	4480      	add	r8, r0
   18582:	307d      	adds	r0, #125	; 0x7d
   18584:	00c1      	lsls	r1, r0, #3
   18586:	e5c2      	b.n	1810e <_malloc_r+0x4e>
   18588:	3310      	adds	r3, #16
   1858a:	9300      	str	r3, [sp, #0]
   1858c:	e699      	b.n	182c2 <_malloc_r+0x202>
   1858e:	2a54      	cmp	r2, #84	; 0x54
   18590:	d826      	bhi.n	185e0 <_malloc_r+0x520>
   18592:	464b      	mov	r3, r9
   18594:	0b1a      	lsrs	r2, r3, #12
   18596:	0011      	movs	r1, r2
   18598:	326f      	adds	r2, #111	; 0x6f
   1859a:	316e      	adds	r1, #110	; 0x6e
   1859c:	00d2      	lsls	r2, r2, #3
   1859e:	e729      	b.n	183f4 <_malloc_r+0x334>
   185a0:	051b      	lsls	r3, r3, #20
   185a2:	d000      	beq.n	185a6 <_malloc_r+0x4e6>
   185a4:	e6a6      	b.n	182f4 <_malloc_r+0x234>
   185a6:	2001      	movs	r0, #1
   185a8:	9b00      	ldr	r3, [sp, #0]
   185aa:	68b2      	ldr	r2, [r6, #8]
   185ac:	4443      	add	r3, r8
   185ae:	4303      	orrs	r3, r0
   185b0:	6053      	str	r3, [r2, #4]
   185b2:	e6e6      	b.n	18382 <_malloc_r+0x2c2>
   185b4:	21fe      	movs	r1, #254	; 0xfe
   185b6:	237e      	movs	r3, #126	; 0x7e
   185b8:	207f      	movs	r0, #127	; 0x7f
   185ba:	0089      	lsls	r1, r1, #2
   185bc:	4698      	mov	r8, r3
   185be:	e5a6      	b.n	1810e <_malloc_r+0x4e>
   185c0:	2300      	movs	r3, #0
   185c2:	2001      	movs	r0, #1
   185c4:	469b      	mov	fp, r3
   185c6:	e6bd      	b.n	18344 <_malloc_r+0x284>
   185c8:	0021      	movs	r1, r4
   185ca:	0038      	movs	r0, r7
   185cc:	3108      	adds	r1, #8
   185ce:	f003 fb29 	bl	1bc24 <_free_r>
   185d2:	4653      	mov	r3, sl
   185d4:	6819      	ldr	r1, [r3, #0]
   185d6:	e6d4      	b.n	18382 <_malloc_r+0x2c2>
   185d8:	465b      	mov	r3, fp
   185da:	464a      	mov	r2, r9
   185dc:	601a      	str	r2, [r3, #0]
   185de:	e694      	b.n	1830a <_malloc_r+0x24a>
   185e0:	21aa      	movs	r1, #170	; 0xaa
   185e2:	0049      	lsls	r1, r1, #1
   185e4:	428a      	cmp	r2, r1
   185e6:	d806      	bhi.n	185f6 <_malloc_r+0x536>
   185e8:	464b      	mov	r3, r9
   185ea:	0bda      	lsrs	r2, r3, #15
   185ec:	0011      	movs	r1, r2
   185ee:	3278      	adds	r2, #120	; 0x78
   185f0:	3177      	adds	r1, #119	; 0x77
   185f2:	00d2      	lsls	r2, r2, #3
   185f4:	e6fe      	b.n	183f4 <_malloc_r+0x334>
   185f6:	490b      	ldr	r1, [pc, #44]	; (18624 <_malloc_r+0x564>)
   185f8:	428a      	cmp	r2, r1
   185fa:	d806      	bhi.n	1860a <_malloc_r+0x54a>
   185fc:	464b      	mov	r3, r9
   185fe:	0c9a      	lsrs	r2, r3, #18
   18600:	0011      	movs	r1, r2
   18602:	327d      	adds	r2, #125	; 0x7d
   18604:	317c      	adds	r1, #124	; 0x7c
   18606:	00d2      	lsls	r2, r2, #3
   18608:	e6f4      	b.n	183f4 <_malloc_r+0x334>
   1860a:	22fe      	movs	r2, #254	; 0xfe
   1860c:	217e      	movs	r1, #126	; 0x7e
   1860e:	0092      	lsls	r2, r2, #2
   18610:	e6f0      	b.n	183f4 <_malloc_r+0x334>
   18612:	6873      	ldr	r3, [r6, #4]
   18614:	e77e      	b.n	18514 <_malloc_r+0x454>
   18616:	002b      	movs	r3, r5
   18618:	08e8      	lsrs	r0, r5, #3
   1861a:	3308      	adds	r3, #8
   1861c:	e605      	b.n	1822a <_malloc_r+0x16a>
   1861e:	46c0      	nop			; (mov r8, r8)
   18620:	20000f78 	.word	0x20000f78
   18624:	00000554 	.word	0x00000554

00018628 <__ascii_mbtowc>:
   18628:	b082      	sub	sp, #8
   1862a:	2900      	cmp	r1, #0
   1862c:	d00a      	beq.n	18644 <__ascii_mbtowc+0x1c>
   1862e:	2a00      	cmp	r2, #0
   18630:	d00b      	beq.n	1864a <__ascii_mbtowc+0x22>
   18632:	2b00      	cmp	r3, #0
   18634:	d00b      	beq.n	1864e <__ascii_mbtowc+0x26>
   18636:	7813      	ldrb	r3, [r2, #0]
   18638:	600b      	str	r3, [r1, #0]
   1863a:	7810      	ldrb	r0, [r2, #0]
   1863c:	1e43      	subs	r3, r0, #1
   1863e:	4198      	sbcs	r0, r3
   18640:	b002      	add	sp, #8
   18642:	4770      	bx	lr
   18644:	a901      	add	r1, sp, #4
   18646:	2a00      	cmp	r2, #0
   18648:	d1f3      	bne.n	18632 <__ascii_mbtowc+0xa>
   1864a:	2000      	movs	r0, #0
   1864c:	e7f8      	b.n	18640 <__ascii_mbtowc+0x18>
   1864e:	2002      	movs	r0, #2
   18650:	4240      	negs	r0, r0
   18652:	e7f5      	b.n	18640 <__ascii_mbtowc+0x18>

00018654 <memcpy>:
   18654:	b5f0      	push	{r4, r5, r6, r7, lr}
   18656:	0005      	movs	r5, r0
   18658:	2a0f      	cmp	r2, #15
   1865a:	d92f      	bls.n	186bc <memcpy+0x68>
   1865c:	000b      	movs	r3, r1
   1865e:	4303      	orrs	r3, r0
   18660:	079b      	lsls	r3, r3, #30
   18662:	d134      	bne.n	186ce <memcpy+0x7a>
   18664:	0016      	movs	r6, r2
   18666:	000c      	movs	r4, r1
   18668:	0003      	movs	r3, r0
   1866a:	3e10      	subs	r6, #16
   1866c:	0935      	lsrs	r5, r6, #4
   1866e:	3501      	adds	r5, #1
   18670:	012d      	lsls	r5, r5, #4
   18672:	1945      	adds	r5, r0, r5
   18674:	6827      	ldr	r7, [r4, #0]
   18676:	601f      	str	r7, [r3, #0]
   18678:	6867      	ldr	r7, [r4, #4]
   1867a:	605f      	str	r7, [r3, #4]
   1867c:	68a7      	ldr	r7, [r4, #8]
   1867e:	609f      	str	r7, [r3, #8]
   18680:	68e7      	ldr	r7, [r4, #12]
   18682:	3410      	adds	r4, #16
   18684:	60df      	str	r7, [r3, #12]
   18686:	3310      	adds	r3, #16
   18688:	429d      	cmp	r5, r3
   1868a:	d1f3      	bne.n	18674 <memcpy+0x20>
   1868c:	230f      	movs	r3, #15
   1868e:	439e      	bics	r6, r3
   18690:	3610      	adds	r6, #16
   18692:	1985      	adds	r5, r0, r6
   18694:	1989      	adds	r1, r1, r6
   18696:	4013      	ands	r3, r2
   18698:	2b03      	cmp	r3, #3
   1869a:	d91a      	bls.n	186d2 <memcpy+0x7e>
   1869c:	1f1e      	subs	r6, r3, #4
   1869e:	2300      	movs	r3, #0
   186a0:	08b4      	lsrs	r4, r6, #2
   186a2:	3401      	adds	r4, #1
   186a4:	00a4      	lsls	r4, r4, #2
   186a6:	58cf      	ldr	r7, [r1, r3]
   186a8:	50ef      	str	r7, [r5, r3]
   186aa:	3304      	adds	r3, #4
   186ac:	42a3      	cmp	r3, r4
   186ae:	d1fa      	bne.n	186a6 <memcpy+0x52>
   186b0:	2403      	movs	r4, #3
   186b2:	43a6      	bics	r6, r4
   186b4:	1d33      	adds	r3, r6, #4
   186b6:	4022      	ands	r2, r4
   186b8:	18c9      	adds	r1, r1, r3
   186ba:	18ed      	adds	r5, r5, r3
   186bc:	2a00      	cmp	r2, #0
   186be:	d005      	beq.n	186cc <memcpy+0x78>
   186c0:	2300      	movs	r3, #0
   186c2:	5ccc      	ldrb	r4, [r1, r3]
   186c4:	54ec      	strb	r4, [r5, r3]
   186c6:	3301      	adds	r3, #1
   186c8:	4293      	cmp	r3, r2
   186ca:	d1fa      	bne.n	186c2 <memcpy+0x6e>
   186cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186ce:	0005      	movs	r5, r0
   186d0:	e7f6      	b.n	186c0 <memcpy+0x6c>
   186d2:	001a      	movs	r2, r3
   186d4:	e7f2      	b.n	186bc <memcpy+0x68>
   186d6:	46c0      	nop			; (mov r8, r8)

000186d8 <memmove>:
   186d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   186da:	4288      	cmp	r0, r1
   186dc:	d90a      	bls.n	186f4 <memmove+0x1c>
   186de:	188b      	adds	r3, r1, r2
   186e0:	4298      	cmp	r0, r3
   186e2:	d207      	bcs.n	186f4 <memmove+0x1c>
   186e4:	1e53      	subs	r3, r2, #1
   186e6:	2a00      	cmp	r2, #0
   186e8:	d003      	beq.n	186f2 <memmove+0x1a>
   186ea:	5cca      	ldrb	r2, [r1, r3]
   186ec:	54c2      	strb	r2, [r0, r3]
   186ee:	3b01      	subs	r3, #1
   186f0:	d2fb      	bcs.n	186ea <memmove+0x12>
   186f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186f4:	0005      	movs	r5, r0
   186f6:	2a0f      	cmp	r2, #15
   186f8:	d808      	bhi.n	1870c <memmove+0x34>
   186fa:	2a00      	cmp	r2, #0
   186fc:	d0f9      	beq.n	186f2 <memmove+0x1a>
   186fe:	2300      	movs	r3, #0
   18700:	5ccc      	ldrb	r4, [r1, r3]
   18702:	54ec      	strb	r4, [r5, r3]
   18704:	3301      	adds	r3, #1
   18706:	4293      	cmp	r3, r2
   18708:	d1fa      	bne.n	18700 <memmove+0x28>
   1870a:	e7f2      	b.n	186f2 <memmove+0x1a>
   1870c:	000b      	movs	r3, r1
   1870e:	4303      	orrs	r3, r0
   18710:	079b      	lsls	r3, r3, #30
   18712:	d12d      	bne.n	18770 <memmove+0x98>
   18714:	0015      	movs	r5, r2
   18716:	000c      	movs	r4, r1
   18718:	0003      	movs	r3, r0
   1871a:	3d10      	subs	r5, #16
   1871c:	092f      	lsrs	r7, r5, #4
   1871e:	3701      	adds	r7, #1
   18720:	013f      	lsls	r7, r7, #4
   18722:	19c7      	adds	r7, r0, r7
   18724:	6826      	ldr	r6, [r4, #0]
   18726:	601e      	str	r6, [r3, #0]
   18728:	6866      	ldr	r6, [r4, #4]
   1872a:	605e      	str	r6, [r3, #4]
   1872c:	68a6      	ldr	r6, [r4, #8]
   1872e:	609e      	str	r6, [r3, #8]
   18730:	68e6      	ldr	r6, [r4, #12]
   18732:	3410      	adds	r4, #16
   18734:	60de      	str	r6, [r3, #12]
   18736:	3310      	adds	r3, #16
   18738:	429f      	cmp	r7, r3
   1873a:	d1f3      	bne.n	18724 <memmove+0x4c>
   1873c:	240f      	movs	r4, #15
   1873e:	43a5      	bics	r5, r4
   18740:	3510      	adds	r5, #16
   18742:	1949      	adds	r1, r1, r5
   18744:	4014      	ands	r4, r2
   18746:	1945      	adds	r5, r0, r5
   18748:	2c03      	cmp	r4, #3
   1874a:	d913      	bls.n	18774 <memmove+0x9c>
   1874c:	2300      	movs	r3, #0
   1874e:	1f27      	subs	r7, r4, #4
   18750:	08be      	lsrs	r6, r7, #2
   18752:	3601      	adds	r6, #1
   18754:	00b6      	lsls	r6, r6, #2
   18756:	58cc      	ldr	r4, [r1, r3]
   18758:	50ec      	str	r4, [r5, r3]
   1875a:	3304      	adds	r3, #4
   1875c:	42b3      	cmp	r3, r6
   1875e:	d1fa      	bne.n	18756 <memmove+0x7e>
   18760:	2603      	movs	r6, #3
   18762:	43b7      	bics	r7, r6
   18764:	1d3c      	adds	r4, r7, #4
   18766:	1909      	adds	r1, r1, r4
   18768:	192d      	adds	r5, r5, r4
   1876a:	4032      	ands	r2, r6
   1876c:	d1c7      	bne.n	186fe <memmove+0x26>
   1876e:	e7c0      	b.n	186f2 <memmove+0x1a>
   18770:	0005      	movs	r5, r0
   18772:	e7c4      	b.n	186fe <memmove+0x26>
   18774:	0022      	movs	r2, r4
   18776:	e7c0      	b.n	186fa <memmove+0x22>

00018778 <memset>:
   18778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1877a:	0783      	lsls	r3, r0, #30
   1877c:	d043      	beq.n	18806 <memset+0x8e>
   1877e:	1e54      	subs	r4, r2, #1
   18780:	2a00      	cmp	r2, #0
   18782:	d03f      	beq.n	18804 <memset+0x8c>
   18784:	b2ce      	uxtb	r6, r1
   18786:	0002      	movs	r2, r0
   18788:	2503      	movs	r5, #3
   1878a:	e002      	b.n	18792 <memset+0x1a>
   1878c:	001a      	movs	r2, r3
   1878e:	3c01      	subs	r4, #1
   18790:	d338      	bcc.n	18804 <memset+0x8c>
   18792:	1c53      	adds	r3, r2, #1
   18794:	7016      	strb	r6, [r2, #0]
   18796:	422b      	tst	r3, r5
   18798:	d1f8      	bne.n	1878c <memset+0x14>
   1879a:	2c03      	cmp	r4, #3
   1879c:	d92a      	bls.n	187f4 <memset+0x7c>
   1879e:	22ff      	movs	r2, #255	; 0xff
   187a0:	400a      	ands	r2, r1
   187a2:	0215      	lsls	r5, r2, #8
   187a4:	4315      	orrs	r5, r2
   187a6:	042a      	lsls	r2, r5, #16
   187a8:	4315      	orrs	r5, r2
   187aa:	2c0f      	cmp	r4, #15
   187ac:	d914      	bls.n	187d8 <memset+0x60>
   187ae:	0027      	movs	r7, r4
   187b0:	001a      	movs	r2, r3
   187b2:	3f10      	subs	r7, #16
   187b4:	093e      	lsrs	r6, r7, #4
   187b6:	3601      	adds	r6, #1
   187b8:	0136      	lsls	r6, r6, #4
   187ba:	199e      	adds	r6, r3, r6
   187bc:	6015      	str	r5, [r2, #0]
   187be:	6055      	str	r5, [r2, #4]
   187c0:	6095      	str	r5, [r2, #8]
   187c2:	60d5      	str	r5, [r2, #12]
   187c4:	3210      	adds	r2, #16
   187c6:	4296      	cmp	r6, r2
   187c8:	d1f8      	bne.n	187bc <memset+0x44>
   187ca:	220f      	movs	r2, #15
   187cc:	4397      	bics	r7, r2
   187ce:	3710      	adds	r7, #16
   187d0:	19db      	adds	r3, r3, r7
   187d2:	4014      	ands	r4, r2
   187d4:	2c03      	cmp	r4, #3
   187d6:	d90d      	bls.n	187f4 <memset+0x7c>
   187d8:	001a      	movs	r2, r3
   187da:	1f27      	subs	r7, r4, #4
   187dc:	08be      	lsrs	r6, r7, #2
   187de:	3601      	adds	r6, #1
   187e0:	00b6      	lsls	r6, r6, #2
   187e2:	199e      	adds	r6, r3, r6
   187e4:	c220      	stmia	r2!, {r5}
   187e6:	42b2      	cmp	r2, r6
   187e8:	d1fc      	bne.n	187e4 <memset+0x6c>
   187ea:	2203      	movs	r2, #3
   187ec:	4397      	bics	r7, r2
   187ee:	3704      	adds	r7, #4
   187f0:	19db      	adds	r3, r3, r7
   187f2:	4014      	ands	r4, r2
   187f4:	2c00      	cmp	r4, #0
   187f6:	d005      	beq.n	18804 <memset+0x8c>
   187f8:	b2c9      	uxtb	r1, r1
   187fa:	191c      	adds	r4, r3, r4
   187fc:	7019      	strb	r1, [r3, #0]
   187fe:	3301      	adds	r3, #1
   18800:	429c      	cmp	r4, r3
   18802:	d1fb      	bne.n	187fc <memset+0x84>
   18804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18806:	0014      	movs	r4, r2
   18808:	0003      	movs	r3, r0
   1880a:	e7c6      	b.n	1879a <memset+0x22>

0001880c <__malloc_lock>:
   1880c:	b510      	push	{r4, lr}
   1880e:	4802      	ldr	r0, [pc, #8]	; (18818 <__malloc_lock+0xc>)
   18810:	f003 fca0 	bl	1c154 <__retarget_lock_acquire_recursive>
   18814:	bd10      	pop	{r4, pc}
   18816:	46c0      	nop			; (mov r8, r8)
   18818:	2000305c 	.word	0x2000305c

0001881c <__malloc_unlock>:
   1881c:	b510      	push	{r4, lr}
   1881e:	4802      	ldr	r0, [pc, #8]	; (18828 <__malloc_unlock+0xc>)
   18820:	f003 fc9a 	bl	1c158 <__retarget_lock_release_recursive>
   18824:	bd10      	pop	{r4, pc}
   18826:	46c0      	nop			; (mov r8, r8)
   18828:	2000305c 	.word	0x2000305c

0001882c <printf>:
   1882c:	b40f      	push	{r0, r1, r2, r3}
   1882e:	b500      	push	{lr}
   18830:	4906      	ldr	r1, [pc, #24]	; (1884c <printf+0x20>)
   18832:	b083      	sub	sp, #12
   18834:	ab04      	add	r3, sp, #16
   18836:	6808      	ldr	r0, [r1, #0]
   18838:	cb04      	ldmia	r3!, {r2}
   1883a:	6881      	ldr	r1, [r0, #8]
   1883c:	9301      	str	r3, [sp, #4]
   1883e:	f000 fb9b 	bl	18f78 <_vfprintf_r>
   18842:	b003      	add	sp, #12
   18844:	bc08      	pop	{r3}
   18846:	b004      	add	sp, #16
   18848:	4718      	bx	r3
   1884a:	46c0      	nop			; (mov r8, r8)
   1884c:	2000001c 	.word	0x2000001c

00018850 <_puts_r>:
   18850:	b530      	push	{r4, r5, lr}
   18852:	0004      	movs	r4, r0
   18854:	b089      	sub	sp, #36	; 0x24
   18856:	0008      	movs	r0, r1
   18858:	000d      	movs	r5, r1
   1885a:	f000 f9a7 	bl	18bac <strlen>
   1885e:	ab04      	add	r3, sp, #16
   18860:	4a21      	ldr	r2, [pc, #132]	; (188e8 <_puts_r+0x98>)
   18862:	9301      	str	r3, [sp, #4]
   18864:	2302      	movs	r3, #2
   18866:	9206      	str	r2, [sp, #24]
   18868:	2201      	movs	r2, #1
   1886a:	9302      	str	r3, [sp, #8]
   1886c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1886e:	9005      	str	r0, [sp, #20]
   18870:	3001      	adds	r0, #1
   18872:	9504      	str	r5, [sp, #16]
   18874:	9207      	str	r2, [sp, #28]
   18876:	9003      	str	r0, [sp, #12]
   18878:	68a5      	ldr	r5, [r4, #8]
   1887a:	2b00      	cmp	r3, #0
   1887c:	d02f      	beq.n	188de <_puts_r+0x8e>
   1887e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18880:	07db      	lsls	r3, r3, #31
   18882:	d424      	bmi.n	188ce <_puts_r+0x7e>
   18884:	230c      	movs	r3, #12
   18886:	5eea      	ldrsh	r2, [r5, r3]
   18888:	b291      	uxth	r1, r2
   1888a:	058b      	lsls	r3, r1, #22
   1888c:	d51c      	bpl.n	188c8 <_puts_r+0x78>
   1888e:	2380      	movs	r3, #128	; 0x80
   18890:	019b      	lsls	r3, r3, #6
   18892:	4219      	tst	r1, r3
   18894:	d105      	bne.n	188a2 <_puts_r+0x52>
   18896:	4313      	orrs	r3, r2
   18898:	81ab      	strh	r3, [r5, #12]
   1889a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   1889c:	4b13      	ldr	r3, [pc, #76]	; (188ec <_puts_r+0x9c>)
   1889e:	4013      	ands	r3, r2
   188a0:	666b      	str	r3, [r5, #100]	; 0x64
   188a2:	0020      	movs	r0, r4
   188a4:	aa01      	add	r2, sp, #4
   188a6:	0029      	movs	r1, r5
   188a8:	f003 fa9a 	bl	1bde0 <__sfvwrite_r>
   188ac:	1e44      	subs	r4, r0, #1
   188ae:	41a0      	sbcs	r0, r4
   188b0:	4244      	negs	r4, r0
   188b2:	200a      	movs	r0, #10
   188b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   188b6:	4304      	orrs	r4, r0
   188b8:	07db      	lsls	r3, r3, #31
   188ba:	d402      	bmi.n	188c2 <_puts_r+0x72>
   188bc:	89ab      	ldrh	r3, [r5, #12]
   188be:	059b      	lsls	r3, r3, #22
   188c0:	d509      	bpl.n	188d6 <_puts_r+0x86>
   188c2:	0020      	movs	r0, r4
   188c4:	b009      	add	sp, #36	; 0x24
   188c6:	bd30      	pop	{r4, r5, pc}
   188c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   188ca:	f003 fc43 	bl	1c154 <__retarget_lock_acquire_recursive>
   188ce:	230c      	movs	r3, #12
   188d0:	5eea      	ldrsh	r2, [r5, r3]
   188d2:	b291      	uxth	r1, r2
   188d4:	e7db      	b.n	1888e <_puts_r+0x3e>
   188d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   188d8:	f003 fc3e 	bl	1c158 <__retarget_lock_release_recursive>
   188dc:	e7f1      	b.n	188c2 <_puts_r+0x72>
   188de:	0020      	movs	r0, r4
   188e0:	f003 f8f6 	bl	1bad0 <__sinit>
   188e4:	e7cb      	b.n	1887e <_puts_r+0x2e>
   188e6:	46c0      	nop			; (mov r8, r8)
   188e8:	0001ec74 	.word	0x0001ec74
   188ec:	ffffdfff 	.word	0xffffdfff

000188f0 <puts>:
   188f0:	b510      	push	{r4, lr}
   188f2:	4b03      	ldr	r3, [pc, #12]	; (18900 <puts+0x10>)
   188f4:	0001      	movs	r1, r0
   188f6:	6818      	ldr	r0, [r3, #0]
   188f8:	f7ff ffaa 	bl	18850 <_puts_r>
   188fc:	bd10      	pop	{r4, pc}
   188fe:	46c0      	nop			; (mov r8, r8)
   18900:	2000001c 	.word	0x2000001c

00018904 <srand>:
   18904:	2200      	movs	r2, #0
   18906:	4b03      	ldr	r3, [pc, #12]	; (18914 <srand+0x10>)
   18908:	681b      	ldr	r3, [r3, #0]
   1890a:	33a8      	adds	r3, #168	; 0xa8
   1890c:	6018      	str	r0, [r3, #0]
   1890e:	605a      	str	r2, [r3, #4]
   18910:	4770      	bx	lr
   18912:	46c0      	nop			; (mov r8, r8)
   18914:	2000001c 	.word	0x2000001c

00018918 <rand>:
   18918:	b510      	push	{r4, lr}
   1891a:	4b09      	ldr	r3, [pc, #36]	; (18940 <rand+0x28>)
   1891c:	4a09      	ldr	r2, [pc, #36]	; (18944 <rand+0x2c>)
   1891e:	681c      	ldr	r4, [r3, #0]
   18920:	4b09      	ldr	r3, [pc, #36]	; (18948 <rand+0x30>)
   18922:	34a8      	adds	r4, #168	; 0xa8
   18924:	6820      	ldr	r0, [r4, #0]
   18926:	6861      	ldr	r1, [r4, #4]
   18928:	f7fc fd20 	bl	1536c <__aeabi_lmul>
   1892c:	2201      	movs	r2, #1
   1892e:	2300      	movs	r3, #0
   18930:	1880      	adds	r0, r0, r2
   18932:	4159      	adcs	r1, r3
   18934:	6020      	str	r0, [r4, #0]
   18936:	6061      	str	r1, [r4, #4]
   18938:	0048      	lsls	r0, r1, #1
   1893a:	0840      	lsrs	r0, r0, #1
   1893c:	bd10      	pop	{r4, pc}
   1893e:	46c0      	nop			; (mov r8, r8)
   18940:	2000001c 	.word	0x2000001c
   18944:	4c957f2d 	.word	0x4c957f2d
   18948:	5851f42d 	.word	0x5851f42d

0001894c <_sbrk_r>:
   1894c:	2300      	movs	r3, #0
   1894e:	b570      	push	{r4, r5, r6, lr}
   18950:	4c06      	ldr	r4, [pc, #24]	; (1896c <_sbrk_r+0x20>)
   18952:	0005      	movs	r5, r0
   18954:	0008      	movs	r0, r1
   18956:	6023      	str	r3, [r4, #0]
   18958:	f7ed fa12 	bl	5d80 <_sbrk>
   1895c:	1c43      	adds	r3, r0, #1
   1895e:	d000      	beq.n	18962 <_sbrk_r+0x16>
   18960:	bd70      	pop	{r4, r5, r6, pc}
   18962:	6823      	ldr	r3, [r4, #0]
   18964:	2b00      	cmp	r3, #0
   18966:	d0fb      	beq.n	18960 <_sbrk_r+0x14>
   18968:	602b      	str	r3, [r5, #0]
   1896a:	e7f9      	b.n	18960 <_sbrk_r+0x14>
   1896c:	20003070 	.word	0x20003070

00018970 <setbuf>:
   18970:	424a      	negs	r2, r1
   18972:	414a      	adcs	r2, r1
   18974:	2380      	movs	r3, #128	; 0x80
   18976:	b510      	push	{r4, lr}
   18978:	0052      	lsls	r2, r2, #1
   1897a:	00db      	lsls	r3, r3, #3
   1897c:	f000 f802 	bl	18984 <setvbuf>
   18980:	bd10      	pop	{r4, pc}
   18982:	46c0      	nop			; (mov r8, r8)

00018984 <setvbuf>:
   18984:	b5f0      	push	{r4, r5, r6, r7, lr}
   18986:	4647      	mov	r7, r8
   18988:	46ce      	mov	lr, r9
   1898a:	b580      	push	{r7, lr}
   1898c:	001f      	movs	r7, r3
   1898e:	4b63      	ldr	r3, [pc, #396]	; (18b1c <setvbuf+0x198>)
   18990:	b083      	sub	sp, #12
   18992:	681d      	ldr	r5, [r3, #0]
   18994:	0004      	movs	r4, r0
   18996:	4688      	mov	r8, r1
   18998:	0016      	movs	r6, r2
   1899a:	2d00      	cmp	r5, #0
   1899c:	d002      	beq.n	189a4 <setvbuf+0x20>
   1899e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   189a0:	2b00      	cmp	r3, #0
   189a2:	d066      	beq.n	18a72 <setvbuf+0xee>
   189a4:	2e02      	cmp	r6, #2
   189a6:	d005      	beq.n	189b4 <setvbuf+0x30>
   189a8:	2e01      	cmp	r6, #1
   189aa:	d900      	bls.n	189ae <setvbuf+0x2a>
   189ac:	e0a1      	b.n	18af2 <setvbuf+0x16e>
   189ae:	2f00      	cmp	r7, #0
   189b0:	da00      	bge.n	189b4 <setvbuf+0x30>
   189b2:	e09e      	b.n	18af2 <setvbuf+0x16e>
   189b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   189b6:	07db      	lsls	r3, r3, #31
   189b8:	d533      	bpl.n	18a22 <setvbuf+0x9e>
   189ba:	0021      	movs	r1, r4
   189bc:	0028      	movs	r0, r5
   189be:	f003 f82d 	bl	1ba1c <_fflush_r>
   189c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   189c4:	2900      	cmp	r1, #0
   189c6:	d008      	beq.n	189da <setvbuf+0x56>
   189c8:	0023      	movs	r3, r4
   189ca:	3340      	adds	r3, #64	; 0x40
   189cc:	4299      	cmp	r1, r3
   189ce:	d002      	beq.n	189d6 <setvbuf+0x52>
   189d0:	0028      	movs	r0, r5
   189d2:	f003 f927 	bl	1bc24 <_free_r>
   189d6:	2300      	movs	r3, #0
   189d8:	6323      	str	r3, [r4, #48]	; 0x30
   189da:	2300      	movs	r3, #0
   189dc:	61a3      	str	r3, [r4, #24]
   189de:	6063      	str	r3, [r4, #4]
   189e0:	220c      	movs	r2, #12
   189e2:	5ea3      	ldrsh	r3, [r4, r2]
   189e4:	061a      	lsls	r2, r3, #24
   189e6:	d43d      	bmi.n	18a64 <setvbuf+0xe0>
   189e8:	4a4d      	ldr	r2, [pc, #308]	; (18b20 <setvbuf+0x19c>)
   189ea:	4013      	ands	r3, r2
   189ec:	81a3      	strh	r3, [r4, #12]
   189ee:	2e02      	cmp	r6, #2
   189f0:	d01e      	beq.n	18a30 <setvbuf+0xac>
   189f2:	ab01      	add	r3, sp, #4
   189f4:	466a      	mov	r2, sp
   189f6:	0021      	movs	r1, r4
   189f8:	0028      	movs	r0, r5
   189fa:	f003 fbaf 	bl	1c15c <__swhatbuf_r>
   189fe:	89a3      	ldrh	r3, [r4, #12]
   18a00:	4318      	orrs	r0, r3
   18a02:	81a0      	strh	r0, [r4, #12]
   18a04:	2f00      	cmp	r7, #0
   18a06:	d138      	bne.n	18a7a <setvbuf+0xf6>
   18a08:	9f00      	ldr	r7, [sp, #0]
   18a0a:	0038      	movs	r0, r7
   18a0c:	f7ff fb4e 	bl	180ac <malloc>
   18a10:	4680      	mov	r8, r0
   18a12:	2800      	cmp	r0, #0
   18a14:	d100      	bne.n	18a18 <setvbuf+0x94>
   18a16:	e06f      	b.n	18af8 <setvbuf+0x174>
   18a18:	2280      	movs	r2, #128	; 0x80
   18a1a:	89a3      	ldrh	r3, [r4, #12]
   18a1c:	4313      	orrs	r3, r2
   18a1e:	81a3      	strh	r3, [r4, #12]
   18a20:	e02e      	b.n	18a80 <setvbuf+0xfc>
   18a22:	89a3      	ldrh	r3, [r4, #12]
   18a24:	059b      	lsls	r3, r3, #22
   18a26:	d4c8      	bmi.n	189ba <setvbuf+0x36>
   18a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18a2a:	f003 fb93 	bl	1c154 <__retarget_lock_acquire_recursive>
   18a2e:	e7c4      	b.n	189ba <setvbuf+0x36>
   18a30:	2500      	movs	r5, #0
   18a32:	2202      	movs	r2, #2
   18a34:	4313      	orrs	r3, r2
   18a36:	2200      	movs	r2, #0
   18a38:	60a2      	str	r2, [r4, #8]
   18a3a:	0022      	movs	r2, r4
   18a3c:	3243      	adds	r2, #67	; 0x43
   18a3e:	6022      	str	r2, [r4, #0]
   18a40:	6122      	str	r2, [r4, #16]
   18a42:	2201      	movs	r2, #1
   18a44:	6e61      	ldr	r1, [r4, #100]	; 0x64
   18a46:	81a3      	strh	r3, [r4, #12]
   18a48:	6162      	str	r2, [r4, #20]
   18a4a:	4211      	tst	r1, r2
   18a4c:	d104      	bne.n	18a58 <setvbuf+0xd4>
   18a4e:	059b      	lsls	r3, r3, #22
   18a50:	d402      	bmi.n	18a58 <setvbuf+0xd4>
   18a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18a54:	f003 fb80 	bl	1c158 <__retarget_lock_release_recursive>
   18a58:	0028      	movs	r0, r5
   18a5a:	b003      	add	sp, #12
   18a5c:	bc0c      	pop	{r2, r3}
   18a5e:	4690      	mov	r8, r2
   18a60:	4699      	mov	r9, r3
   18a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a64:	6921      	ldr	r1, [r4, #16]
   18a66:	0028      	movs	r0, r5
   18a68:	f003 f8dc 	bl	1bc24 <_free_r>
   18a6c:	220c      	movs	r2, #12
   18a6e:	5ea3      	ldrsh	r3, [r4, r2]
   18a70:	e7ba      	b.n	189e8 <setvbuf+0x64>
   18a72:	0028      	movs	r0, r5
   18a74:	f003 f82c 	bl	1bad0 <__sinit>
   18a78:	e794      	b.n	189a4 <setvbuf+0x20>
   18a7a:	4643      	mov	r3, r8
   18a7c:	2b00      	cmp	r3, #0
   18a7e:	d0c4      	beq.n	18a0a <setvbuf+0x86>
   18a80:	6bab      	ldr	r3, [r5, #56]	; 0x38
   18a82:	2b00      	cmp	r3, #0
   18a84:	d027      	beq.n	18ad6 <setvbuf+0x152>
   18a86:	9b00      	ldr	r3, [sp, #0]
   18a88:	429f      	cmp	r7, r3
   18a8a:	d02a      	beq.n	18ae2 <setvbuf+0x15e>
   18a8c:	2380      	movs	r3, #128	; 0x80
   18a8e:	89a2      	ldrh	r2, [r4, #12]
   18a90:	011b      	lsls	r3, r3, #4
   18a92:	4313      	orrs	r3, r2
   18a94:	b21b      	sxth	r3, r3
   18a96:	81a3      	strh	r3, [r4, #12]
   18a98:	2e01      	cmp	r6, #1
   18a9a:	d026      	beq.n	18aea <setvbuf+0x166>
   18a9c:	4642      	mov	r2, r8
   18a9e:	6022      	str	r2, [r4, #0]
   18aa0:	6122      	str	r2, [r4, #16]
   18aa2:	2208      	movs	r2, #8
   18aa4:	b29b      	uxth	r3, r3
   18aa6:	6167      	str	r7, [r4, #20]
   18aa8:	401a      	ands	r2, r3
   18aaa:	d00b      	beq.n	18ac4 <setvbuf+0x140>
   18aac:	07da      	lsls	r2, r3, #31
   18aae:	d510      	bpl.n	18ad2 <setvbuf+0x14e>
   18ab0:	2200      	movs	r2, #0
   18ab2:	2501      	movs	r5, #1
   18ab4:	60a2      	str	r2, [r4, #8]
   18ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   18ab8:	427f      	negs	r7, r7
   18aba:	61a7      	str	r7, [r4, #24]
   18abc:	4015      	ands	r5, r2
   18abe:	d0c6      	beq.n	18a4e <setvbuf+0xca>
   18ac0:	2500      	movs	r5, #0
   18ac2:	e7c9      	b.n	18a58 <setvbuf+0xd4>
   18ac4:	60a2      	str	r2, [r4, #8]
   18ac6:	2501      	movs	r5, #1
   18ac8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   18aca:	4015      	ands	r5, r2
   18acc:	d0bf      	beq.n	18a4e <setvbuf+0xca>
   18ace:	2500      	movs	r5, #0
   18ad0:	e7c2      	b.n	18a58 <setvbuf+0xd4>
   18ad2:	60a7      	str	r7, [r4, #8]
   18ad4:	e7f7      	b.n	18ac6 <setvbuf+0x142>
   18ad6:	0028      	movs	r0, r5
   18ad8:	f002 fffa 	bl	1bad0 <__sinit>
   18adc:	9b00      	ldr	r3, [sp, #0]
   18ade:	429f      	cmp	r7, r3
   18ae0:	d1d4      	bne.n	18a8c <setvbuf+0x108>
   18ae2:	220c      	movs	r2, #12
   18ae4:	5ea3      	ldrsh	r3, [r4, r2]
   18ae6:	2e01      	cmp	r6, #1
   18ae8:	d1d8      	bne.n	18a9c <setvbuf+0x118>
   18aea:	2201      	movs	r2, #1
   18aec:	4313      	orrs	r3, r2
   18aee:	81a3      	strh	r3, [r4, #12]
   18af0:	e7d4      	b.n	18a9c <setvbuf+0x118>
   18af2:	2501      	movs	r5, #1
   18af4:	426d      	negs	r5, r5
   18af6:	e7af      	b.n	18a58 <setvbuf+0xd4>
   18af8:	9b00      	ldr	r3, [sp, #0]
   18afa:	4699      	mov	r9, r3
   18afc:	42bb      	cmp	r3, r7
   18afe:	d005      	beq.n	18b0c <setvbuf+0x188>
   18b00:	0018      	movs	r0, r3
   18b02:	f7ff fad3 	bl	180ac <malloc>
   18b06:	4680      	mov	r8, r0
   18b08:	2800      	cmp	r0, #0
   18b0a:	d104      	bne.n	18b16 <setvbuf+0x192>
   18b0c:	2501      	movs	r5, #1
   18b0e:	220c      	movs	r2, #12
   18b10:	5ea3      	ldrsh	r3, [r4, r2]
   18b12:	426d      	negs	r5, r5
   18b14:	e78d      	b.n	18a32 <setvbuf+0xae>
   18b16:	464f      	mov	r7, r9
   18b18:	e77e      	b.n	18a18 <setvbuf+0x94>
   18b1a:	46c0      	nop			; (mov r8, r8)
   18b1c:	2000001c 	.word	0x2000001c
   18b20:	fffff35c 	.word	0xfffff35c

00018b24 <strcmp>:
   18b24:	4602      	mov	r2, r0
   18b26:	b570      	push	{r4, r5, r6, lr}
   18b28:	430a      	orrs	r2, r1
   18b2a:	0792      	lsls	r2, r2, #30
   18b2c:	d12a      	bne.n	18b84 <strcmp+0x60>
   18b2e:	4d1e      	ldr	r5, [pc, #120]	; (18ba8 <strcmp+0x84>)
   18b30:	01ee      	lsls	r6, r5, #7
   18b32:	c804      	ldmia	r0!, {r2}
   18b34:	c908      	ldmia	r1!, {r3}
   18b36:	1b54      	subs	r4, r2, r5
   18b38:	4394      	bics	r4, r2
   18b3a:	4034      	ands	r4, r6
   18b3c:	d017      	beq.n	18b6e <strcmp+0x4a>
   18b3e:	b2d0      	uxtb	r0, r2
   18b40:	b2d9      	uxtb	r1, r3
   18b42:	1a40      	subs	r0, r0, r1
   18b44:	0621      	lsls	r1, r4, #24
   18b46:	4301      	orrs	r1, r0
   18b48:	d110      	bne.n	18b6c <strcmp+0x48>
   18b4a:	b290      	uxth	r0, r2
   18b4c:	b299      	uxth	r1, r3
   18b4e:	1a40      	subs	r0, r0, r1
   18b50:	0421      	lsls	r1, r4, #16
   18b52:	4301      	orrs	r1, r0
   18b54:	d10a      	bne.n	18b6c <strcmp+0x48>
   18b56:	0210      	lsls	r0, r2, #8
   18b58:	0219      	lsls	r1, r3, #8
   18b5a:	0a00      	lsrs	r0, r0, #8
   18b5c:	0a09      	lsrs	r1, r1, #8
   18b5e:	1a40      	subs	r0, r0, r1
   18b60:	0221      	lsls	r1, r4, #8
   18b62:	4301      	orrs	r1, r0
   18b64:	d102      	bne.n	18b6c <strcmp+0x48>
   18b66:	0e10      	lsrs	r0, r2, #24
   18b68:	0e19      	lsrs	r1, r3, #24
   18b6a:	1a40      	subs	r0, r0, r1
   18b6c:	bd70      	pop	{r4, r5, r6, pc}
   18b6e:	429a      	cmp	r2, r3
   18b70:	d0df      	beq.n	18b32 <strcmp+0xe>
   18b72:	ba10      	rev	r0, r2
   18b74:	ba19      	rev	r1, r3
   18b76:	4288      	cmp	r0, r1
   18b78:	d901      	bls.n	18b7e <strcmp+0x5a>
   18b7a:	2001      	movs	r0, #1
   18b7c:	bd70      	pop	{r4, r5, r6, pc}
   18b7e:	2000      	movs	r0, #0
   18b80:	43c0      	mvns	r0, r0
   18b82:	bd70      	pop	{r4, r5, r6, pc}
   18b84:	7802      	ldrb	r2, [r0, #0]
   18b86:	780b      	ldrb	r3, [r1, #0]
   18b88:	3001      	adds	r0, #1
   18b8a:	3101      	adds	r1, #1
   18b8c:	2a00      	cmp	r2, #0
   18b8e:	d009      	beq.n	18ba4 <strcmp+0x80>
   18b90:	429a      	cmp	r2, r3
   18b92:	d107      	bne.n	18ba4 <strcmp+0x80>
   18b94:	7802      	ldrb	r2, [r0, #0]
   18b96:	780b      	ldrb	r3, [r1, #0]
   18b98:	3001      	adds	r0, #1
   18b9a:	3101      	adds	r1, #1
   18b9c:	2a00      	cmp	r2, #0
   18b9e:	d001      	beq.n	18ba4 <strcmp+0x80>
   18ba0:	429a      	cmp	r2, r3
   18ba2:	d0ef      	beq.n	18b84 <strcmp+0x60>
   18ba4:	1ad0      	subs	r0, r2, r3
   18ba6:	bd70      	pop	{r4, r5, r6, pc}
   18ba8:	01010101 	.word	0x01010101

00018bac <strlen>:
   18bac:	b510      	push	{r4, lr}
   18bae:	0783      	lsls	r3, r0, #30
   18bb0:	d025      	beq.n	18bfe <strlen+0x52>
   18bb2:	7803      	ldrb	r3, [r0, #0]
   18bb4:	2b00      	cmp	r3, #0
   18bb6:	d024      	beq.n	18c02 <strlen+0x56>
   18bb8:	0003      	movs	r3, r0
   18bba:	2103      	movs	r1, #3
   18bbc:	e002      	b.n	18bc4 <strlen+0x18>
   18bbe:	781a      	ldrb	r2, [r3, #0]
   18bc0:	2a00      	cmp	r2, #0
   18bc2:	d01a      	beq.n	18bfa <strlen+0x4e>
   18bc4:	3301      	adds	r3, #1
   18bc6:	420b      	tst	r3, r1
   18bc8:	d1f9      	bne.n	18bbe <strlen+0x12>
   18bca:	6819      	ldr	r1, [r3, #0]
   18bcc:	4a0e      	ldr	r2, [pc, #56]	; (18c08 <strlen+0x5c>)
   18bce:	4c0f      	ldr	r4, [pc, #60]	; (18c0c <strlen+0x60>)
   18bd0:	188a      	adds	r2, r1, r2
   18bd2:	438a      	bics	r2, r1
   18bd4:	4222      	tst	r2, r4
   18bd6:	d106      	bne.n	18be6 <strlen+0x3a>
   18bd8:	3304      	adds	r3, #4
   18bda:	6819      	ldr	r1, [r3, #0]
   18bdc:	4a0a      	ldr	r2, [pc, #40]	; (18c08 <strlen+0x5c>)
   18bde:	188a      	adds	r2, r1, r2
   18be0:	438a      	bics	r2, r1
   18be2:	4222      	tst	r2, r4
   18be4:	d0f8      	beq.n	18bd8 <strlen+0x2c>
   18be6:	001a      	movs	r2, r3
   18be8:	781b      	ldrb	r3, [r3, #0]
   18bea:	2b00      	cmp	r3, #0
   18bec:	d003      	beq.n	18bf6 <strlen+0x4a>
   18bee:	3201      	adds	r2, #1
   18bf0:	7811      	ldrb	r1, [r2, #0]
   18bf2:	2900      	cmp	r1, #0
   18bf4:	d1fb      	bne.n	18bee <strlen+0x42>
   18bf6:	1a10      	subs	r0, r2, r0
   18bf8:	bd10      	pop	{r4, pc}
   18bfa:	1a18      	subs	r0, r3, r0
   18bfc:	e7fc      	b.n	18bf8 <strlen+0x4c>
   18bfe:	0003      	movs	r3, r0
   18c00:	e7e3      	b.n	18bca <strlen+0x1e>
   18c02:	2000      	movs	r0, #0
   18c04:	e7f8      	b.n	18bf8 <strlen+0x4c>
   18c06:	46c0      	nop			; (mov r8, r8)
   18c08:	fefefeff 	.word	0xfefefeff
   18c0c:	80808080 	.word	0x80808080

00018c10 <_strtol_l.isra.0>:
   18c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c12:	4657      	mov	r7, sl
   18c14:	464e      	mov	r6, r9
   18c16:	46de      	mov	lr, fp
   18c18:	4645      	mov	r5, r8
   18c1a:	b5e0      	push	{r5, r6, r7, lr}
   18c1c:	001e      	movs	r6, r3
   18c1e:	2308      	movs	r3, #8
   18c20:	b083      	sub	sp, #12
   18c22:	9001      	str	r0, [sp, #4]
   18c24:	9100      	str	r1, [sp, #0]
   18c26:	4692      	mov	sl, r2
   18c28:	000f      	movs	r7, r1
   18c2a:	4699      	mov	r9, r3
   18c2c:	e000      	b.n	18c30 <_strtol_l.isra.0+0x20>
   18c2e:	002f      	movs	r7, r5
   18c30:	980c      	ldr	r0, [sp, #48]	; 0x30
   18c32:	783c      	ldrb	r4, [r7, #0]
   18c34:	f7ff fa28 	bl	18088 <__locale_ctype_ptr_l>
   18c38:	464a      	mov	r2, r9
   18c3a:	1900      	adds	r0, r0, r4
   18c3c:	7843      	ldrb	r3, [r0, #1]
   18c3e:	1c7d      	adds	r5, r7, #1
   18c40:	421a      	tst	r2, r3
   18c42:	d1f4      	bne.n	18c2e <_strtol_l.isra.0+0x1e>
   18c44:	2c2d      	cmp	r4, #45	; 0x2d
   18c46:	d04f      	beq.n	18ce8 <_strtol_l.isra.0+0xd8>
   18c48:	2300      	movs	r3, #0
   18c4a:	4698      	mov	r8, r3
   18c4c:	2c2b      	cmp	r4, #43	; 0x2b
   18c4e:	d05c      	beq.n	18d0a <_strtol_l.isra.0+0xfa>
   18c50:	2e00      	cmp	r6, #0
   18c52:	d003      	beq.n	18c5c <_strtol_l.isra.0+0x4c>
   18c54:	2e10      	cmp	r6, #16
   18c56:	d05b      	beq.n	18d10 <_strtol_l.isra.0+0x100>
   18c58:	0037      	movs	r7, r6
   18c5a:	e003      	b.n	18c64 <_strtol_l.isra.0+0x54>
   18c5c:	2c30      	cmp	r4, #48	; 0x30
   18c5e:	d063      	beq.n	18d28 <_strtol_l.isra.0+0x118>
   18c60:	270a      	movs	r7, #10
   18c62:	260a      	movs	r6, #10
   18c64:	4b35      	ldr	r3, [pc, #212]	; (18d3c <_strtol_l.isra.0+0x12c>)
   18c66:	0039      	movs	r1, r7
   18c68:	4443      	add	r3, r8
   18c6a:	0018      	movs	r0, r3
   18c6c:	4699      	mov	r9, r3
   18c6e:	f7fc f9f5 	bl	1505c <__aeabi_uidivmod>
   18c72:	4648      	mov	r0, r9
   18c74:	468b      	mov	fp, r1
   18c76:	0039      	movs	r1, r7
   18c78:	f7fc f96a 	bl	14f50 <__udivsi3>
   18c7c:	2200      	movs	r2, #0
   18c7e:	0001      	movs	r1, r0
   18c80:	2000      	movs	r0, #0
   18c82:	0023      	movs	r3, r4
   18c84:	3b30      	subs	r3, #48	; 0x30
   18c86:	2b09      	cmp	r3, #9
   18c88:	d907      	bls.n	18c9a <_strtol_l.isra.0+0x8a>
   18c8a:	3b11      	subs	r3, #17
   18c8c:	2b19      	cmp	r3, #25
   18c8e:	d903      	bls.n	18c98 <_strtol_l.isra.0+0x88>
   18c90:	0023      	movs	r3, r4
   18c92:	3b61      	subs	r3, #97	; 0x61
   18c94:	2b19      	cmp	r3, #25
   18c96:	d80d      	bhi.n	18cb4 <_strtol_l.isra.0+0xa4>
   18c98:	330a      	adds	r3, #10
   18c9a:	429e      	cmp	r6, r3
   18c9c:	dd0a      	ble.n	18cb4 <_strtol_l.isra.0+0xa4>
   18c9e:	1c54      	adds	r4, r2, #1
   18ca0:	d005      	beq.n	18cae <_strtol_l.isra.0+0x9e>
   18ca2:	4281      	cmp	r1, r0
   18ca4:	d31d      	bcc.n	18ce2 <_strtol_l.isra.0+0xd2>
   18ca6:	d01a      	beq.n	18cde <_strtol_l.isra.0+0xce>
   18ca8:	2201      	movs	r2, #1
   18caa:	4378      	muls	r0, r7
   18cac:	1818      	adds	r0, r3, r0
   18cae:	782c      	ldrb	r4, [r5, #0]
   18cb0:	3501      	adds	r5, #1
   18cb2:	e7e6      	b.n	18c82 <_strtol_l.isra.0+0x72>
   18cb4:	1c53      	adds	r3, r2, #1
   18cb6:	d01c      	beq.n	18cf2 <_strtol_l.isra.0+0xe2>
   18cb8:	4643      	mov	r3, r8
   18cba:	2b00      	cmp	r3, #0
   18cbc:	d000      	beq.n	18cc0 <_strtol_l.isra.0+0xb0>
   18cbe:	4240      	negs	r0, r0
   18cc0:	4653      	mov	r3, sl
   18cc2:	2b00      	cmp	r3, #0
   18cc4:	d004      	beq.n	18cd0 <_strtol_l.isra.0+0xc0>
   18cc6:	9b00      	ldr	r3, [sp, #0]
   18cc8:	2a00      	cmp	r2, #0
   18cca:	d11c      	bne.n	18d06 <_strtol_l.isra.0+0xf6>
   18ccc:	4652      	mov	r2, sl
   18cce:	6013      	str	r3, [r2, #0]
   18cd0:	b003      	add	sp, #12
   18cd2:	bc3c      	pop	{r2, r3, r4, r5}
   18cd4:	4690      	mov	r8, r2
   18cd6:	4699      	mov	r9, r3
   18cd8:	46a2      	mov	sl, r4
   18cda:	46ab      	mov	fp, r5
   18cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cde:	459b      	cmp	fp, r3
   18ce0:	dae2      	bge.n	18ca8 <_strtol_l.isra.0+0x98>
   18ce2:	2201      	movs	r2, #1
   18ce4:	4252      	negs	r2, r2
   18ce6:	e7e2      	b.n	18cae <_strtol_l.isra.0+0x9e>
   18ce8:	2301      	movs	r3, #1
   18cea:	782c      	ldrb	r4, [r5, #0]
   18cec:	4698      	mov	r8, r3
   18cee:	1cbd      	adds	r5, r7, #2
   18cf0:	e7ae      	b.n	18c50 <_strtol_l.isra.0+0x40>
   18cf2:	2322      	movs	r3, #34	; 0x22
   18cf4:	9a01      	ldr	r2, [sp, #4]
   18cf6:	4648      	mov	r0, r9
   18cf8:	6013      	str	r3, [r2, #0]
   18cfa:	4653      	mov	r3, sl
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	d0e7      	beq.n	18cd0 <_strtol_l.isra.0+0xc0>
   18d00:	1e6b      	subs	r3, r5, #1
   18d02:	4648      	mov	r0, r9
   18d04:	e7e2      	b.n	18ccc <_strtol_l.isra.0+0xbc>
   18d06:	4681      	mov	r9, r0
   18d08:	e7fa      	b.n	18d00 <_strtol_l.isra.0+0xf0>
   18d0a:	782c      	ldrb	r4, [r5, #0]
   18d0c:	1cbd      	adds	r5, r7, #2
   18d0e:	e79f      	b.n	18c50 <_strtol_l.isra.0+0x40>
   18d10:	2c30      	cmp	r4, #48	; 0x30
   18d12:	d111      	bne.n	18d38 <_strtol_l.isra.0+0x128>
   18d14:	2220      	movs	r2, #32
   18d16:	782b      	ldrb	r3, [r5, #0]
   18d18:	4393      	bics	r3, r2
   18d1a:	2b58      	cmp	r3, #88	; 0x58
   18d1c:	d10c      	bne.n	18d38 <_strtol_l.isra.0+0x128>
   18d1e:	786c      	ldrb	r4, [r5, #1]
   18d20:	2710      	movs	r7, #16
   18d22:	3502      	adds	r5, #2
   18d24:	2610      	movs	r6, #16
   18d26:	e79d      	b.n	18c64 <_strtol_l.isra.0+0x54>
   18d28:	2220      	movs	r2, #32
   18d2a:	782b      	ldrb	r3, [r5, #0]
   18d2c:	4393      	bics	r3, r2
   18d2e:	2b58      	cmp	r3, #88	; 0x58
   18d30:	d0f5      	beq.n	18d1e <_strtol_l.isra.0+0x10e>
   18d32:	2708      	movs	r7, #8
   18d34:	2608      	movs	r6, #8
   18d36:	e795      	b.n	18c64 <_strtol_l.isra.0+0x54>
   18d38:	2710      	movs	r7, #16
   18d3a:	e793      	b.n	18c64 <_strtol_l.isra.0+0x54>
   18d3c:	7fffffff 	.word	0x7fffffff

00018d40 <strtol>:
   18d40:	0013      	movs	r3, r2
   18d42:	4a08      	ldr	r2, [pc, #32]	; (18d64 <strtol+0x24>)
   18d44:	b530      	push	{r4, r5, lr}
   18d46:	0005      	movs	r5, r0
   18d48:	6810      	ldr	r0, [r2, #0]
   18d4a:	b083      	sub	sp, #12
   18d4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
   18d4e:	2c00      	cmp	r4, #0
   18d50:	d006      	beq.n	18d60 <strtol+0x20>
   18d52:	000a      	movs	r2, r1
   18d54:	9400      	str	r4, [sp, #0]
   18d56:	0029      	movs	r1, r5
   18d58:	f7ff ff5a 	bl	18c10 <_strtol_l.isra.0>
   18d5c:	b003      	add	sp, #12
   18d5e:	bd30      	pop	{r4, r5, pc}
   18d60:	4c01      	ldr	r4, [pc, #4]	; (18d68 <strtol+0x28>)
   18d62:	e7f6      	b.n	18d52 <strtol+0x12>
   18d64:	2000001c 	.word	0x2000001c
   18d68:	20000448 	.word	0x20000448

00018d6c <_strtoul_l.isra.0>:
   18d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d6e:	4657      	mov	r7, sl
   18d70:	464e      	mov	r6, r9
   18d72:	46de      	mov	lr, fp
   18d74:	4645      	mov	r5, r8
   18d76:	b5e0      	push	{r5, r6, r7, lr}
   18d78:	001e      	movs	r6, r3
   18d7a:	2308      	movs	r3, #8
   18d7c:	b083      	sub	sp, #12
   18d7e:	4683      	mov	fp, r0
   18d80:	4689      	mov	r9, r1
   18d82:	4692      	mov	sl, r2
   18d84:	000f      	movs	r7, r1
   18d86:	4698      	mov	r8, r3
   18d88:	e000      	b.n	18d8c <_strtoul_l.isra.0+0x20>
   18d8a:	002f      	movs	r7, r5
   18d8c:	980c      	ldr	r0, [sp, #48]	; 0x30
   18d8e:	783c      	ldrb	r4, [r7, #0]
   18d90:	f7ff f97a 	bl	18088 <__locale_ctype_ptr_l>
   18d94:	4642      	mov	r2, r8
   18d96:	1900      	adds	r0, r0, r4
   18d98:	7843      	ldrb	r3, [r0, #1]
   18d9a:	1c7d      	adds	r5, r7, #1
   18d9c:	421a      	tst	r2, r3
   18d9e:	d1f4      	bne.n	18d8a <_strtoul_l.isra.0+0x1e>
   18da0:	2c2d      	cmp	r4, #45	; 0x2d
   18da2:	d05b      	beq.n	18e5c <_strtoul_l.isra.0+0xf0>
   18da4:	2300      	movs	r3, #0
   18da6:	9301      	str	r3, [sp, #4]
   18da8:	2c2b      	cmp	r4, #43	; 0x2b
   18daa:	d05c      	beq.n	18e66 <_strtoul_l.isra.0+0xfa>
   18dac:	2e00      	cmp	r6, #0
   18dae:	d00e      	beq.n	18dce <_strtoul_l.isra.0+0x62>
   18db0:	2e10      	cmp	r6, #16
   18db2:	d05b      	beq.n	18e6c <_strtoul_l.isra.0+0x100>
   18db4:	2001      	movs	r0, #1
   18db6:	0031      	movs	r1, r6
   18db8:	4240      	negs	r0, r0
   18dba:	f7fc f8c9 	bl	14f50 <__udivsi3>
   18dbe:	0007      	movs	r7, r0
   18dc0:	2001      	movs	r0, #1
   18dc2:	0031      	movs	r1, r6
   18dc4:	4240      	negs	r0, r0
   18dc6:	46b0      	mov	r8, r6
   18dc8:	f7fc f948 	bl	1505c <__aeabi_uidivmod>
   18dcc:	e006      	b.n	18ddc <_strtoul_l.isra.0+0x70>
   18dce:	2c30      	cmp	r4, #48	; 0x30
   18dd0:	d05b      	beq.n	18e8a <_strtoul_l.isra.0+0x11e>
   18dd2:	230a      	movs	r3, #10
   18dd4:	2105      	movs	r1, #5
   18dd6:	4698      	mov	r8, r3
   18dd8:	260a      	movs	r6, #10
   18dda:	4f34      	ldr	r7, [pc, #208]	; (18eac <_strtoul_l.isra.0+0x140>)
   18ddc:	2200      	movs	r2, #0
   18dde:	2000      	movs	r0, #0
   18de0:	0023      	movs	r3, r4
   18de2:	3b30      	subs	r3, #48	; 0x30
   18de4:	2b09      	cmp	r3, #9
   18de6:	d907      	bls.n	18df8 <_strtoul_l.isra.0+0x8c>
   18de8:	3b11      	subs	r3, #17
   18dea:	2b19      	cmp	r3, #25
   18dec:	d903      	bls.n	18df6 <_strtoul_l.isra.0+0x8a>
   18dee:	0023      	movs	r3, r4
   18df0:	3b61      	subs	r3, #97	; 0x61
   18df2:	2b19      	cmp	r3, #25
   18df4:	d80e      	bhi.n	18e14 <_strtoul_l.isra.0+0xa8>
   18df6:	330a      	adds	r3, #10
   18df8:	429e      	cmp	r6, r3
   18dfa:	dd0b      	ble.n	18e14 <_strtoul_l.isra.0+0xa8>
   18dfc:	2a00      	cmp	r2, #0
   18dfe:	db20      	blt.n	18e42 <_strtoul_l.isra.0+0xd6>
   18e00:	42b8      	cmp	r0, r7
   18e02:	d81e      	bhi.n	18e42 <_strtoul_l.isra.0+0xd6>
   18e04:	d01b      	beq.n	18e3e <_strtoul_l.isra.0+0xd2>
   18e06:	4642      	mov	r2, r8
   18e08:	4350      	muls	r0, r2
   18e0a:	2201      	movs	r2, #1
   18e0c:	1818      	adds	r0, r3, r0
   18e0e:	782c      	ldrb	r4, [r5, #0]
   18e10:	3501      	adds	r5, #1
   18e12:	e7e5      	b.n	18de0 <_strtoul_l.isra.0+0x74>
   18e14:	2a00      	cmp	r2, #0
   18e16:	db17      	blt.n	18e48 <_strtoul_l.isra.0+0xdc>
   18e18:	9b01      	ldr	r3, [sp, #4]
   18e1a:	2b00      	cmp	r3, #0
   18e1c:	d000      	beq.n	18e20 <_strtoul_l.isra.0+0xb4>
   18e1e:	4240      	negs	r0, r0
   18e20:	4653      	mov	r3, sl
   18e22:	2b00      	cmp	r3, #0
   18e24:	d004      	beq.n	18e30 <_strtoul_l.isra.0+0xc4>
   18e26:	464b      	mov	r3, r9
   18e28:	2a00      	cmp	r2, #0
   18e2a:	d115      	bne.n	18e58 <_strtoul_l.isra.0+0xec>
   18e2c:	4652      	mov	r2, sl
   18e2e:	6013      	str	r3, [r2, #0]
   18e30:	b003      	add	sp, #12
   18e32:	bc3c      	pop	{r2, r3, r4, r5}
   18e34:	4690      	mov	r8, r2
   18e36:	4699      	mov	r9, r3
   18e38:	46a2      	mov	sl, r4
   18e3a:	46ab      	mov	fp, r5
   18e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e3e:	428b      	cmp	r3, r1
   18e40:	dde1      	ble.n	18e06 <_strtoul_l.isra.0+0x9a>
   18e42:	2201      	movs	r2, #1
   18e44:	4252      	negs	r2, r2
   18e46:	e7e2      	b.n	18e0e <_strtoul_l.isra.0+0xa2>
   18e48:	2322      	movs	r3, #34	; 0x22
   18e4a:	465a      	mov	r2, fp
   18e4c:	2001      	movs	r0, #1
   18e4e:	6013      	str	r3, [r2, #0]
   18e50:	4653      	mov	r3, sl
   18e52:	4240      	negs	r0, r0
   18e54:	2b00      	cmp	r3, #0
   18e56:	d0eb      	beq.n	18e30 <_strtoul_l.isra.0+0xc4>
   18e58:	1e6b      	subs	r3, r5, #1
   18e5a:	e7e7      	b.n	18e2c <_strtoul_l.isra.0+0xc0>
   18e5c:	2301      	movs	r3, #1
   18e5e:	782c      	ldrb	r4, [r5, #0]
   18e60:	9301      	str	r3, [sp, #4]
   18e62:	1cbd      	adds	r5, r7, #2
   18e64:	e7a2      	b.n	18dac <_strtoul_l.isra.0+0x40>
   18e66:	782c      	ldrb	r4, [r5, #0]
   18e68:	1cbd      	adds	r5, r7, #2
   18e6a:	e79f      	b.n	18dac <_strtoul_l.isra.0+0x40>
   18e6c:	2c30      	cmp	r4, #48	; 0x30
   18e6e:	d117      	bne.n	18ea0 <_strtoul_l.isra.0+0x134>
   18e70:	2220      	movs	r2, #32
   18e72:	782b      	ldrb	r3, [r5, #0]
   18e74:	4393      	bics	r3, r2
   18e76:	2b58      	cmp	r3, #88	; 0x58
   18e78:	d112      	bne.n	18ea0 <_strtoul_l.isra.0+0x134>
   18e7a:	2310      	movs	r3, #16
   18e7c:	786c      	ldrb	r4, [r5, #1]
   18e7e:	210f      	movs	r1, #15
   18e80:	3502      	adds	r5, #2
   18e82:	4f0b      	ldr	r7, [pc, #44]	; (18eb0 <_strtoul_l.isra.0+0x144>)
   18e84:	4698      	mov	r8, r3
   18e86:	2610      	movs	r6, #16
   18e88:	e7a8      	b.n	18ddc <_strtoul_l.isra.0+0x70>
   18e8a:	2220      	movs	r2, #32
   18e8c:	782b      	ldrb	r3, [r5, #0]
   18e8e:	4393      	bics	r3, r2
   18e90:	2b58      	cmp	r3, #88	; 0x58
   18e92:	d0f2      	beq.n	18e7a <_strtoul_l.isra.0+0x10e>
   18e94:	2308      	movs	r3, #8
   18e96:	2107      	movs	r1, #7
   18e98:	4f06      	ldr	r7, [pc, #24]	; (18eb4 <_strtoul_l.isra.0+0x148>)
   18e9a:	4698      	mov	r8, r3
   18e9c:	2608      	movs	r6, #8
   18e9e:	e79d      	b.n	18ddc <_strtoul_l.isra.0+0x70>
   18ea0:	2310      	movs	r3, #16
   18ea2:	210f      	movs	r1, #15
   18ea4:	4f02      	ldr	r7, [pc, #8]	; (18eb0 <_strtoul_l.isra.0+0x144>)
   18ea6:	4698      	mov	r8, r3
   18ea8:	e798      	b.n	18ddc <_strtoul_l.isra.0+0x70>
   18eaa:	46c0      	nop			; (mov r8, r8)
   18eac:	19999999 	.word	0x19999999
   18eb0:	0fffffff 	.word	0x0fffffff
   18eb4:	1fffffff 	.word	0x1fffffff

00018eb8 <strtoul>:
   18eb8:	0013      	movs	r3, r2
   18eba:	4a08      	ldr	r2, [pc, #32]	; (18edc <strtoul+0x24>)
   18ebc:	b530      	push	{r4, r5, lr}
   18ebe:	0005      	movs	r5, r0
   18ec0:	6810      	ldr	r0, [r2, #0]
   18ec2:	b083      	sub	sp, #12
   18ec4:	6b44      	ldr	r4, [r0, #52]	; 0x34
   18ec6:	2c00      	cmp	r4, #0
   18ec8:	d006      	beq.n	18ed8 <strtoul+0x20>
   18eca:	000a      	movs	r2, r1
   18ecc:	9400      	str	r4, [sp, #0]
   18ece:	0029      	movs	r1, r5
   18ed0:	f7ff ff4c 	bl	18d6c <_strtoul_l.isra.0>
   18ed4:	b003      	add	sp, #12
   18ed6:	bd30      	pop	{r4, r5, pc}
   18ed8:	4c01      	ldr	r4, [pc, #4]	; (18ee0 <strtoul+0x28>)
   18eda:	e7f6      	b.n	18eca <strtoul+0x12>
   18edc:	2000001c 	.word	0x2000001c
   18ee0:	20000448 	.word	0x20000448

00018ee4 <__utoa>:
   18ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ee6:	4646      	mov	r6, r8
   18ee8:	46d6      	mov	lr, sl
   18eea:	464f      	mov	r7, r9
   18eec:	b5c0      	push	{r6, r7, lr}
   18eee:	b08a      	sub	sp, #40	; 0x28
   18ef0:	4690      	mov	r8, r2
   18ef2:	466a      	mov	r2, sp
   18ef4:	4b1d      	ldr	r3, [pc, #116]	; (18f6c <__utoa+0x88>)
   18ef6:	000d      	movs	r5, r1
   18ef8:	0006      	movs	r6, r0
   18efa:	cb13      	ldmia	r3!, {r0, r1, r4}
   18efc:	c213      	stmia	r2!, {r0, r1, r4}
   18efe:	cb13      	ldmia	r3!, {r0, r1, r4}
   18f00:	c213      	stmia	r2!, {r0, r1, r4}
   18f02:	cb13      	ldmia	r3!, {r0, r1, r4}
   18f04:	c213      	stmia	r2!, {r0, r1, r4}
   18f06:	781b      	ldrb	r3, [r3, #0]
   18f08:	46ea      	mov	sl, sp
   18f0a:	7013      	strb	r3, [r2, #0]
   18f0c:	4643      	mov	r3, r8
   18f0e:	3b02      	subs	r3, #2
   18f10:	002f      	movs	r7, r5
   18f12:	2400      	movs	r4, #0
   18f14:	2b22      	cmp	r3, #34	; 0x22
   18f16:	d901      	bls.n	18f1c <__utoa+0x38>
   18f18:	e024      	b.n	18f64 <__utoa+0x80>
   18f1a:	464c      	mov	r4, r9
   18f1c:	1c63      	adds	r3, r4, #1
   18f1e:	0030      	movs	r0, r6
   18f20:	4641      	mov	r1, r8
   18f22:	4699      	mov	r9, r3
   18f24:	f7fc f89a 	bl	1505c <__aeabi_uidivmod>
   18f28:	4653      	mov	r3, sl
   18f2a:	5c5b      	ldrb	r3, [r3, r1]
   18f2c:	0030      	movs	r0, r6
   18f2e:	703b      	strb	r3, [r7, #0]
   18f30:	4641      	mov	r1, r8
   18f32:	f7fc f80d 	bl	14f50 <__udivsi3>
   18f36:	3701      	adds	r7, #1
   18f38:	1e06      	subs	r6, r0, #0
   18f3a:	d1ee      	bne.n	18f1a <__utoa+0x36>
   18f3c:	464b      	mov	r3, r9
   18f3e:	54e8      	strb	r0, [r5, r3]
   18f40:	2300      	movs	r3, #0
   18f42:	2c00      	cmp	r4, #0
   18f44:	d007      	beq.n	18f56 <__utoa+0x72>
   18f46:	5cea      	ldrb	r2, [r5, r3]
   18f48:	5d29      	ldrb	r1, [r5, r4]
   18f4a:	54e9      	strb	r1, [r5, r3]
   18f4c:	552a      	strb	r2, [r5, r4]
   18f4e:	3301      	adds	r3, #1
   18f50:	3c01      	subs	r4, #1
   18f52:	42a3      	cmp	r3, r4
   18f54:	dbf7      	blt.n	18f46 <__utoa+0x62>
   18f56:	0028      	movs	r0, r5
   18f58:	b00a      	add	sp, #40	; 0x28
   18f5a:	bc1c      	pop	{r2, r3, r4}
   18f5c:	4690      	mov	r8, r2
   18f5e:	4699      	mov	r9, r3
   18f60:	46a2      	mov	sl, r4
   18f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f64:	702c      	strb	r4, [r5, #0]
   18f66:	2000      	movs	r0, #0
   18f68:	e7f6      	b.n	18f58 <__utoa+0x74>
   18f6a:	46c0      	nop			; (mov r8, r8)
   18f6c:	0001ec78 	.word	0x0001ec78

00018f70 <utoa>:
   18f70:	b510      	push	{r4, lr}
   18f72:	f7ff ffb7 	bl	18ee4 <__utoa>
   18f76:	bd10      	pop	{r4, pc}

00018f78 <_vfprintf_r>:
   18f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f7a:	46de      	mov	lr, fp
   18f7c:	464e      	mov	r6, r9
   18f7e:	4645      	mov	r5, r8
   18f80:	4657      	mov	r7, sl
   18f82:	b5e0      	push	{r5, r6, r7, lr}
   18f84:	b0c3      	sub	sp, #268	; 0x10c
   18f86:	4689      	mov	r9, r1
   18f88:	0014      	movs	r4, r2
   18f8a:	001d      	movs	r5, r3
   18f8c:	930f      	str	r3, [sp, #60]	; 0x3c
   18f8e:	0006      	movs	r6, r0
   18f90:	9006      	str	r0, [sp, #24]
   18f92:	f003 f8cd 	bl	1c130 <_localeconv_r>
   18f96:	6803      	ldr	r3, [r0, #0]
   18f98:	0018      	movs	r0, r3
   18f9a:	9318      	str	r3, [sp, #96]	; 0x60
   18f9c:	f7ff fe06 	bl	18bac <strlen>
   18fa0:	9017      	str	r0, [sp, #92]	; 0x5c
   18fa2:	2e00      	cmp	r6, #0
   18fa4:	d004      	beq.n	18fb0 <_vfprintf_r+0x38>
   18fa6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18fa8:	9307      	str	r3, [sp, #28]
   18faa:	2b00      	cmp	r3, #0
   18fac:	d100      	bne.n	18fb0 <_vfprintf_r+0x38>
   18fae:	e0a7      	b.n	19100 <_vfprintf_r+0x188>
   18fb0:	464b      	mov	r3, r9
   18fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   18fb4:	07db      	lsls	r3, r3, #31
   18fb6:	d478      	bmi.n	190aa <_vfprintf_r+0x132>
   18fb8:	464b      	mov	r3, r9
   18fba:	210c      	movs	r1, #12
   18fbc:	5e59      	ldrsh	r1, [r3, r1]
   18fbe:	b28b      	uxth	r3, r1
   18fc0:	059a      	lsls	r2, r3, #22
   18fc2:	d56e      	bpl.n	190a2 <_vfprintf_r+0x12a>
   18fc4:	2280      	movs	r2, #128	; 0x80
   18fc6:	0192      	lsls	r2, r2, #6
   18fc8:	4213      	tst	r3, r2
   18fca:	d109      	bne.n	18fe0 <_vfprintf_r+0x68>
   18fcc:	430a      	orrs	r2, r1
   18fce:	464b      	mov	r3, r9
   18fd0:	4649      	mov	r1, r9
   18fd2:	819a      	strh	r2, [r3, #12]
   18fd4:	6e49      	ldr	r1, [r1, #100]	; 0x64
   18fd6:	4bcc      	ldr	r3, [pc, #816]	; (19308 <_vfprintf_r+0x390>)
   18fd8:	400b      	ands	r3, r1
   18fda:	4649      	mov	r1, r9
   18fdc:	664b      	str	r3, [r1, #100]	; 0x64
   18fde:	b293      	uxth	r3, r2
   18fe0:	071a      	lsls	r2, r3, #28
   18fe2:	d567      	bpl.n	190b4 <_vfprintf_r+0x13c>
   18fe4:	464a      	mov	r2, r9
   18fe6:	6912      	ldr	r2, [r2, #16]
   18fe8:	2a00      	cmp	r2, #0
   18fea:	d063      	beq.n	190b4 <_vfprintf_r+0x13c>
   18fec:	221a      	movs	r2, #26
   18fee:	401a      	ands	r2, r3
   18ff0:	2a0a      	cmp	r2, #10
   18ff2:	d100      	bne.n	18ff6 <_vfprintf_r+0x7e>
   18ff4:	e088      	b.n	19108 <_vfprintf_r+0x190>
   18ff6:	ab32      	add	r3, sp, #200	; 0xc8
   18ff8:	9325      	str	r3, [sp, #148]	; 0x94
   18ffa:	2300      	movs	r3, #0
   18ffc:	46cb      	mov	fp, r9
   18ffe:	af25      	add	r7, sp, #148	; 0x94
   19000:	60bb      	str	r3, [r7, #8]
   19002:	607b      	str	r3, [r7, #4]
   19004:	9407      	str	r4, [sp, #28]
   19006:	9314      	str	r3, [sp, #80]	; 0x50
   19008:	9316      	str	r3, [sp, #88]	; 0x58
   1900a:	9315      	str	r3, [sp, #84]	; 0x54
   1900c:	ae32      	add	r6, sp, #200	; 0xc8
   1900e:	9319      	str	r3, [sp, #100]	; 0x64
   19010:	931a      	str	r3, [sp, #104]	; 0x68
   19012:	930a      	str	r3, [sp, #40]	; 0x28
   19014:	9c07      	ldr	r4, [sp, #28]
   19016:	7823      	ldrb	r3, [r4, #0]
   19018:	2b00      	cmp	r3, #0
   1901a:	d101      	bne.n	19020 <_vfprintf_r+0xa8>
   1901c:	f000 fd9e 	bl	19b5c <_vfprintf_r+0xbe4>
   19020:	2b25      	cmp	r3, #37	; 0x25
   19022:	d103      	bne.n	1902c <_vfprintf_r+0xb4>
   19024:	f000 fd9a 	bl	19b5c <_vfprintf_r+0xbe4>
   19028:	2b25      	cmp	r3, #37	; 0x25
   1902a:	d003      	beq.n	19034 <_vfprintf_r+0xbc>
   1902c:	3401      	adds	r4, #1
   1902e:	7823      	ldrb	r3, [r4, #0]
   19030:	2b00      	cmp	r3, #0
   19032:	d1f9      	bne.n	19028 <_vfprintf_r+0xb0>
   19034:	9b07      	ldr	r3, [sp, #28]
   19036:	1ae5      	subs	r5, r4, r3
   19038:	d010      	beq.n	1905c <_vfprintf_r+0xe4>
   1903a:	9b07      	ldr	r3, [sp, #28]
   1903c:	6075      	str	r5, [r6, #4]
   1903e:	6033      	str	r3, [r6, #0]
   19040:	68bb      	ldr	r3, [r7, #8]
   19042:	195b      	adds	r3, r3, r5
   19044:	60bb      	str	r3, [r7, #8]
   19046:	687b      	ldr	r3, [r7, #4]
   19048:	3301      	adds	r3, #1
   1904a:	607b      	str	r3, [r7, #4]
   1904c:	2b07      	cmp	r3, #7
   1904e:	dc4c      	bgt.n	190ea <_vfprintf_r+0x172>
   19050:	3608      	adds	r6, #8
   19052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19054:	469c      	mov	ip, r3
   19056:	44ac      	add	ip, r5
   19058:	4663      	mov	r3, ip
   1905a:	930a      	str	r3, [sp, #40]	; 0x28
   1905c:	7823      	ldrb	r3, [r4, #0]
   1905e:	2b00      	cmp	r3, #0
   19060:	d101      	bne.n	19066 <_vfprintf_r+0xee>
   19062:	f000 fc99 	bl	19998 <_vfprintf_r+0xa20>
   19066:	1c63      	adds	r3, r4, #1
   19068:	9307      	str	r3, [sp, #28]
   1906a:	2300      	movs	r3, #0
   1906c:	aa16      	add	r2, sp, #88	; 0x58
   1906e:	77d3      	strb	r3, [r2, #31]
   19070:	2201      	movs	r2, #1
   19072:	4252      	negs	r2, r2
   19074:	4692      	mov	sl, r2
   19076:	2200      	movs	r2, #0
   19078:	920b      	str	r2, [sp, #44]	; 0x2c
   1907a:	3220      	adds	r2, #32
   1907c:	4691      	mov	r9, r2
   1907e:	3220      	adds	r2, #32
   19080:	7863      	ldrb	r3, [r4, #1]
   19082:	2100      	movs	r1, #0
   19084:	2000      	movs	r0, #0
   19086:	2400      	movs	r4, #0
   19088:	4694      	mov	ip, r2
   1908a:	9a07      	ldr	r2, [sp, #28]
   1908c:	3201      	adds	r2, #1
   1908e:	9207      	str	r2, [sp, #28]
   19090:	001a      	movs	r2, r3
   19092:	3a20      	subs	r2, #32
   19094:	2a58      	cmp	r2, #88	; 0x58
   19096:	d900      	bls.n	1909a <_vfprintf_r+0x122>
   19098:	e2e7      	b.n	1966a <_vfprintf_r+0x6f2>
   1909a:	4d9c      	ldr	r5, [pc, #624]	; (1930c <_vfprintf_r+0x394>)
   1909c:	0092      	lsls	r2, r2, #2
   1909e:	58aa      	ldr	r2, [r5, r2]
   190a0:	4697      	mov	pc, r2
   190a2:	464b      	mov	r3, r9
   190a4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   190a6:	f003 f855 	bl	1c154 <__retarget_lock_acquire_recursive>
   190aa:	464b      	mov	r3, r9
   190ac:	210c      	movs	r1, #12
   190ae:	5e59      	ldrsh	r1, [r3, r1]
   190b0:	b28b      	uxth	r3, r1
   190b2:	e787      	b.n	18fc4 <_vfprintf_r+0x4c>
   190b4:	4649      	mov	r1, r9
   190b6:	9806      	ldr	r0, [sp, #24]
   190b8:	f001 fb1c 	bl	1a6f4 <__swsetup_r>
   190bc:	464b      	mov	r3, r9
   190be:	2800      	cmp	r0, #0
   190c0:	d03a      	beq.n	19138 <_vfprintf_r+0x1c0>
   190c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   190c4:	07db      	lsls	r3, r3, #31
   190c6:	d405      	bmi.n	190d4 <_vfprintf_r+0x15c>
   190c8:	464b      	mov	r3, r9
   190ca:	899b      	ldrh	r3, [r3, #12]
   190cc:	059b      	lsls	r3, r3, #22
   190ce:	d401      	bmi.n	190d4 <_vfprintf_r+0x15c>
   190d0:	f000 ffcf 	bl	1a072 <_vfprintf_r+0x10fa>
   190d4:	2301      	movs	r3, #1
   190d6:	425b      	negs	r3, r3
   190d8:	930a      	str	r3, [sp, #40]	; 0x28
   190da:	980a      	ldr	r0, [sp, #40]	; 0x28
   190dc:	b043      	add	sp, #268	; 0x10c
   190de:	bc3c      	pop	{r2, r3, r4, r5}
   190e0:	4690      	mov	r8, r2
   190e2:	4699      	mov	r9, r3
   190e4:	46a2      	mov	sl, r4
   190e6:	46ab      	mov	fp, r5
   190e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190ea:	003a      	movs	r2, r7
   190ec:	4659      	mov	r1, fp
   190ee:	9806      	ldr	r0, [sp, #24]
   190f0:	f003 fe82 	bl	1cdf8 <__sprint_r>
   190f4:	2800      	cmp	r0, #0
   190f6:	d001      	beq.n	190fc <_vfprintf_r+0x184>
   190f8:	f000 fcce 	bl	19a98 <_vfprintf_r+0xb20>
   190fc:	ae32      	add	r6, sp, #200	; 0xc8
   190fe:	e7a8      	b.n	19052 <_vfprintf_r+0xda>
   19100:	9806      	ldr	r0, [sp, #24]
   19102:	f002 fce5 	bl	1bad0 <__sinit>
   19106:	e753      	b.n	18fb0 <_vfprintf_r+0x38>
   19108:	464a      	mov	r2, r9
   1910a:	210e      	movs	r1, #14
   1910c:	5e52      	ldrsh	r2, [r2, r1]
   1910e:	2a00      	cmp	r2, #0
   19110:	da00      	bge.n	19114 <_vfprintf_r+0x19c>
   19112:	e770      	b.n	18ff6 <_vfprintf_r+0x7e>
   19114:	464a      	mov	r2, r9
   19116:	6e52      	ldr	r2, [r2, #100]	; 0x64
   19118:	07d2      	lsls	r2, r2, #31
   1911a:	d405      	bmi.n	19128 <_vfprintf_r+0x1b0>
   1911c:	059b      	lsls	r3, r3, #22
   1911e:	d403      	bmi.n	19128 <_vfprintf_r+0x1b0>
   19120:	464b      	mov	r3, r9
   19122:	6d98      	ldr	r0, [r3, #88]	; 0x58
   19124:	f003 f818 	bl	1c158 <__retarget_lock_release_recursive>
   19128:	002b      	movs	r3, r5
   1912a:	0022      	movs	r2, r4
   1912c:	4649      	mov	r1, r9
   1912e:	9806      	ldr	r0, [sp, #24]
   19130:	f001 fa8e 	bl	1a650 <__sbprintf>
   19134:	900a      	str	r0, [sp, #40]	; 0x28
   19136:	e7d0      	b.n	190da <_vfprintf_r+0x162>
   19138:	899b      	ldrh	r3, [r3, #12]
   1913a:	e757      	b.n	18fec <_vfprintf_r+0x74>
   1913c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1913e:	920f      	str	r2, [sp, #60]	; 0x3c
   19140:	425b      	negs	r3, r3
   19142:	930b      	str	r3, [sp, #44]	; 0x2c
   19144:	2304      	movs	r3, #4
   19146:	431c      	orrs	r4, r3
   19148:	9b07      	ldr	r3, [sp, #28]
   1914a:	781b      	ldrb	r3, [r3, #0]
   1914c:	e79d      	b.n	1908a <_vfprintf_r+0x112>
   1914e:	9b07      	ldr	r3, [sp, #28]
   19150:	2101      	movs	r1, #1
   19152:	781b      	ldrb	r3, [r3, #0]
   19154:	202b      	movs	r0, #43	; 0x2b
   19156:	e798      	b.n	1908a <_vfprintf_r+0x112>
   19158:	9b07      	ldr	r3, [sp, #28]
   1915a:	1c5a      	adds	r2, r3, #1
   1915c:	781b      	ldrb	r3, [r3, #0]
   1915e:	4690      	mov	r8, r2
   19160:	2b2a      	cmp	r3, #42	; 0x2a
   19162:	d101      	bne.n	19168 <_vfprintf_r+0x1f0>
   19164:	f001 fa38 	bl	1a5d8 <_vfprintf_r+0x1660>
   19168:	001a      	movs	r2, r3
   1916a:	2500      	movs	r5, #0
   1916c:	3a30      	subs	r2, #48	; 0x30
   1916e:	46aa      	mov	sl, r5
   19170:	2a09      	cmp	r2, #9
   19172:	d901      	bls.n	19178 <_vfprintf_r+0x200>
   19174:	f001 f96d 	bl	1a452 <_vfprintf_r+0x14da>
   19178:	0025      	movs	r5, r4
   1917a:	4643      	mov	r3, r8
   1917c:	4654      	mov	r4, sl
   1917e:	4688      	mov	r8, r1
   19180:	4682      	mov	sl, r0
   19182:	00a1      	lsls	r1, r4, #2
   19184:	190c      	adds	r4, r1, r4
   19186:	7818      	ldrb	r0, [r3, #0]
   19188:	0064      	lsls	r4, r4, #1
   1918a:	18a4      	adds	r4, r4, r2
   1918c:	0002      	movs	r2, r0
   1918e:	1c59      	adds	r1, r3, #1
   19190:	3a30      	subs	r2, #48	; 0x30
   19192:	000b      	movs	r3, r1
   19194:	2a09      	cmp	r2, #9
   19196:	d9f4      	bls.n	19182 <_vfprintf_r+0x20a>
   19198:	9107      	str	r1, [sp, #28]
   1919a:	0003      	movs	r3, r0
   1919c:	4641      	mov	r1, r8
   1919e:	4650      	mov	r0, sl
   191a0:	46a2      	mov	sl, r4
   191a2:	002c      	movs	r4, r5
   191a4:	e774      	b.n	19090 <_vfprintf_r+0x118>
   191a6:	9312      	str	r3, [sp, #72]	; 0x48
   191a8:	2900      	cmp	r1, #0
   191aa:	d001      	beq.n	191b0 <_vfprintf_r+0x238>
   191ac:	f001 fa2e 	bl	1a60c <_vfprintf_r+0x1694>
   191b0:	4b57      	ldr	r3, [pc, #348]	; (19310 <_vfprintf_r+0x398>)
   191b2:	9319      	str	r3, [sp, #100]	; 0x64
   191b4:	06a3      	lsls	r3, r4, #26
   191b6:	d501      	bpl.n	191bc <_vfprintf_r+0x244>
   191b8:	f000 fe9a 	bl	19ef0 <_vfprintf_r+0xf78>
   191bc:	06e3      	lsls	r3, r4, #27
   191be:	d501      	bpl.n	191c4 <_vfprintf_r+0x24c>
   191c0:	f000 fd9a 	bl	19cf8 <_vfprintf_r+0xd80>
   191c4:	0663      	lsls	r3, r4, #25
   191c6:	d401      	bmi.n	191cc <_vfprintf_r+0x254>
   191c8:	f000 fd96 	bl	19cf8 <_vfprintf_r+0xd80>
   191cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   191ce:	881a      	ldrh	r2, [r3, #0]
   191d0:	920c      	str	r2, [sp, #48]	; 0x30
   191d2:	2200      	movs	r2, #0
   191d4:	3304      	adds	r3, #4
   191d6:	920d      	str	r2, [sp, #52]	; 0x34
   191d8:	930f      	str	r3, [sp, #60]	; 0x3c
   191da:	07e3      	lsls	r3, r4, #31
   191dc:	d401      	bmi.n	191e2 <_vfprintf_r+0x26a>
   191de:	f000 fd76 	bl	19cce <_vfprintf_r+0xd56>
   191e2:	990c      	ldr	r1, [sp, #48]	; 0x30
   191e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   191e6:	000b      	movs	r3, r1
   191e8:	4313      	orrs	r3, r2
   191ea:	001a      	movs	r2, r3
   191ec:	2302      	movs	r3, #2
   191ee:	2a00      	cmp	r2, #0
   191f0:	d008      	beq.n	19204 <_vfprintf_r+0x28c>
   191f2:	2030      	movs	r0, #48	; 0x30
   191f4:	a91e      	add	r1, sp, #120	; 0x78
   191f6:	7008      	strb	r0, [r1, #0]
   191f8:	2548      	movs	r5, #72	; 0x48
   191fa:	4668      	mov	r0, sp
   191fc:	1940      	adds	r0, r0, r5
   191fe:	7800      	ldrb	r0, [r0, #0]
   19200:	431c      	orrs	r4, r3
   19202:	7048      	strb	r0, [r1, #1]
   19204:	2100      	movs	r1, #0
   19206:	4688      	mov	r8, r1
   19208:	a816      	add	r0, sp, #88	; 0x58
   1920a:	77c1      	strb	r1, [r0, #31]
   1920c:	4651      	mov	r1, sl
   1920e:	3101      	adds	r1, #1
   19210:	d100      	bne.n	19214 <_vfprintf_r+0x29c>
   19212:	e0e6      	b.n	193e2 <_vfprintf_r+0x46a>
   19214:	2180      	movs	r1, #128	; 0x80
   19216:	0020      	movs	r0, r4
   19218:	4388      	bics	r0, r1
   1921a:	9009      	str	r0, [sp, #36]	; 0x24
   1921c:	2a00      	cmp	r2, #0
   1921e:	d000      	beq.n	19222 <_vfprintf_r+0x2aa>
   19220:	e0e3      	b.n	193ea <_vfprintf_r+0x472>
   19222:	4652      	mov	r2, sl
   19224:	2a00      	cmp	r2, #0
   19226:	d001      	beq.n	1922c <_vfprintf_r+0x2b4>
   19228:	f000 fc38 	bl	19a9c <_vfprintf_r+0xb24>
   1922c:	2b00      	cmp	r3, #0
   1922e:	d001      	beq.n	19234 <_vfprintf_r+0x2bc>
   19230:	f000 fd0c 	bl	19c4c <_vfprintf_r+0xcd4>
   19234:	2001      	movs	r0, #1
   19236:	ab32      	add	r3, sp, #200	; 0xc8
   19238:	4020      	ands	r0, r4
   1923a:	900e      	str	r0, [sp, #56]	; 0x38
   1923c:	9311      	str	r3, [sp, #68]	; 0x44
   1923e:	d008      	beq.n	19252 <_vfprintf_r+0x2da>
   19240:	2327      	movs	r3, #39	; 0x27
   19242:	2130      	movs	r1, #48	; 0x30
   19244:	aa28      	add	r2, sp, #160	; 0xa0
   19246:	54d1      	strb	r1, [r2, r3]
   19248:	aa16      	add	r2, sp, #88	; 0x58
   1924a:	4694      	mov	ip, r2
   1924c:	3348      	adds	r3, #72	; 0x48
   1924e:	4463      	add	r3, ip
   19250:	9311      	str	r3, [sp, #68]	; 0x44
   19252:	4653      	mov	r3, sl
   19254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19256:	9308      	str	r3, [sp, #32]
   19258:	4592      	cmp	sl, r2
   1925a:	da00      	bge.n	1925e <_vfprintf_r+0x2e6>
   1925c:	9208      	str	r2, [sp, #32]
   1925e:	2300      	movs	r3, #0
   19260:	9313      	str	r3, [sp, #76]	; 0x4c
   19262:	4643      	mov	r3, r8
   19264:	2b00      	cmp	r3, #0
   19266:	d002      	beq.n	1926e <_vfprintf_r+0x2f6>
   19268:	9b08      	ldr	r3, [sp, #32]
   1926a:	3301      	adds	r3, #1
   1926c:	9308      	str	r3, [sp, #32]
   1926e:	2302      	movs	r3, #2
   19270:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19272:	401a      	ands	r2, r3
   19274:	4691      	mov	r9, r2
   19276:	d002      	beq.n	1927e <_vfprintf_r+0x306>
   19278:	9b08      	ldr	r3, [sp, #32]
   1927a:	3302      	adds	r3, #2
   1927c:	9308      	str	r3, [sp, #32]
   1927e:	2384      	movs	r3, #132	; 0x84
   19280:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19282:	401a      	ands	r2, r3
   19284:	9210      	str	r2, [sp, #64]	; 0x40
   19286:	d000      	beq.n	1928a <_vfprintf_r+0x312>
   19288:	e207      	b.n	1969a <_vfprintf_r+0x722>
   1928a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1928c:	9a08      	ldr	r2, [sp, #32]
   1928e:	1a9c      	subs	r4, r3, r2
   19290:	2c00      	cmp	r4, #0
   19292:	dc00      	bgt.n	19296 <_vfprintf_r+0x31e>
   19294:	e201      	b.n	1969a <_vfprintf_r+0x722>
   19296:	491f      	ldr	r1, [pc, #124]	; (19314 <_vfprintf_r+0x39c>)
   19298:	68ba      	ldr	r2, [r7, #8]
   1929a:	687b      	ldr	r3, [r7, #4]
   1929c:	4688      	mov	r8, r1
   1929e:	2c10      	cmp	r4, #16
   192a0:	dd21      	ble.n	192e6 <_vfprintf_r+0x36e>
   192a2:	0031      	movs	r1, r6
   192a4:	2510      	movs	r5, #16
   192a6:	465e      	mov	r6, fp
   192a8:	e003      	b.n	192b2 <_vfprintf_r+0x33a>
   192aa:	3c10      	subs	r4, #16
   192ac:	3108      	adds	r1, #8
   192ae:	2c10      	cmp	r4, #16
   192b0:	dd17      	ble.n	192e2 <_vfprintf_r+0x36a>
   192b2:	4640      	mov	r0, r8
   192b4:	3210      	adds	r2, #16
   192b6:	3301      	adds	r3, #1
   192b8:	6008      	str	r0, [r1, #0]
   192ba:	604d      	str	r5, [r1, #4]
   192bc:	60ba      	str	r2, [r7, #8]
   192be:	607b      	str	r3, [r7, #4]
   192c0:	2b07      	cmp	r3, #7
   192c2:	ddf2      	ble.n	192aa <_vfprintf_r+0x332>
   192c4:	003a      	movs	r2, r7
   192c6:	0031      	movs	r1, r6
   192c8:	9806      	ldr	r0, [sp, #24]
   192ca:	f003 fd95 	bl	1cdf8 <__sprint_r>
   192ce:	2800      	cmp	r0, #0
   192d0:	d001      	beq.n	192d6 <_vfprintf_r+0x35e>
   192d2:	f000 fccf 	bl	19c74 <_vfprintf_r+0xcfc>
   192d6:	3c10      	subs	r4, #16
   192d8:	68ba      	ldr	r2, [r7, #8]
   192da:	687b      	ldr	r3, [r7, #4]
   192dc:	a932      	add	r1, sp, #200	; 0xc8
   192de:	2c10      	cmp	r4, #16
   192e0:	dce7      	bgt.n	192b2 <_vfprintf_r+0x33a>
   192e2:	46b3      	mov	fp, r6
   192e4:	000e      	movs	r6, r1
   192e6:	4641      	mov	r1, r8
   192e8:	6074      	str	r4, [r6, #4]
   192ea:	3301      	adds	r3, #1
   192ec:	18a4      	adds	r4, r4, r2
   192ee:	6031      	str	r1, [r6, #0]
   192f0:	60bc      	str	r4, [r7, #8]
   192f2:	607b      	str	r3, [r7, #4]
   192f4:	2b07      	cmp	r3, #7
   192f6:	dd01      	ble.n	192fc <_vfprintf_r+0x384>
   192f8:	f000 fcae 	bl	19c58 <_vfprintf_r+0xce0>
   192fc:	ab16      	add	r3, sp, #88	; 0x58
   192fe:	7fdb      	ldrb	r3, [r3, #31]
   19300:	3608      	adds	r6, #8
   19302:	4698      	mov	r8, r3
   19304:	e1ca      	b.n	1969c <_vfprintf_r+0x724>
   19306:	46c0      	nop			; (mov r8, r8)
   19308:	ffffdfff 	.word	0xffffdfff
   1930c:	0001eca0 	.word	0x0001eca0
   19310:	0001ee28 	.word	0x0001ee28
   19314:	0001ee44 	.word	0x0001ee44
   19318:	2200      	movs	r2, #0
   1931a:	9d07      	ldr	r5, [sp, #28]
   1931c:	3b30      	subs	r3, #48	; 0x30
   1931e:	46a8      	mov	r8, r5
   19320:	920b      	str	r2, [sp, #44]	; 0x2c
   19322:	001a      	movs	r2, r3
   19324:	9408      	str	r4, [sp, #32]
   19326:	002c      	movs	r4, r5
   19328:	4655      	mov	r5, sl
   1932a:	4682      	mov	sl, r0
   1932c:	4640      	mov	r0, r8
   1932e:	4688      	mov	r8, r1
   19330:	0011      	movs	r1, r2
   19332:	2200      	movs	r2, #0
   19334:	0093      	lsls	r3, r2, #2
   19336:	189a      	adds	r2, r3, r2
   19338:	7803      	ldrb	r3, [r0, #0]
   1933a:	0052      	lsls	r2, r2, #1
   1933c:	188a      	adds	r2, r1, r2
   1933e:	0019      	movs	r1, r3
   19340:	3401      	adds	r4, #1
   19342:	3930      	subs	r1, #48	; 0x30
   19344:	0020      	movs	r0, r4
   19346:	2909      	cmp	r1, #9
   19348:	d9f4      	bls.n	19334 <_vfprintf_r+0x3bc>
   1934a:	9407      	str	r4, [sp, #28]
   1934c:	4650      	mov	r0, sl
   1934e:	9c08      	ldr	r4, [sp, #32]
   19350:	920b      	str	r2, [sp, #44]	; 0x2c
   19352:	4641      	mov	r1, r8
   19354:	46aa      	mov	sl, r5
   19356:	e69b      	b.n	19090 <_vfprintf_r+0x118>
   19358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1935a:	9312      	str	r3, [sp, #72]	; 0x48
   1935c:	6813      	ldr	r3, [r2, #0]
   1935e:	2120      	movs	r1, #32
   19360:	9308      	str	r3, [sp, #32]
   19362:	466b      	mov	r3, sp
   19364:	185b      	adds	r3, r3, r1
   19366:	781b      	ldrb	r3, [r3, #0]
   19368:	ad28      	add	r5, sp, #160	; 0xa0
   1936a:	702b      	strb	r3, [r5, #0]
   1936c:	2300      	movs	r3, #0
   1936e:	a916      	add	r1, sp, #88	; 0x58
   19370:	77cb      	strb	r3, [r1, #31]
   19372:	0013      	movs	r3, r2
   19374:	3304      	adds	r3, #4
   19376:	930f      	str	r3, [sp, #60]	; 0x3c
   19378:	2300      	movs	r3, #0
   1937a:	9409      	str	r4, [sp, #36]	; 0x24
   1937c:	4698      	mov	r8, r3
   1937e:	3301      	adds	r3, #1
   19380:	9308      	str	r3, [sp, #32]
   19382:	930e      	str	r3, [sp, #56]	; 0x38
   19384:	2300      	movs	r3, #0
   19386:	9511      	str	r5, [sp, #68]	; 0x44
   19388:	469a      	mov	sl, r3
   1938a:	9313      	str	r3, [sp, #76]	; 0x4c
   1938c:	e76f      	b.n	1926e <_vfprintf_r+0x2f6>
   1938e:	9312      	str	r3, [sp, #72]	; 0x48
   19390:	2900      	cmp	r1, #0
   19392:	d001      	beq.n	19398 <_vfprintf_r+0x420>
   19394:	f001 f94d 	bl	1a632 <_vfprintf_r+0x16ba>
   19398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1939a:	06a3      	lsls	r3, r4, #26
   1939c:	d501      	bpl.n	193a2 <_vfprintf_r+0x42a>
   1939e:	f000 fd5a 	bl	19e56 <_vfprintf_r+0xede>
   193a2:	06e3      	lsls	r3, r4, #27
   193a4:	d501      	bpl.n	193aa <_vfprintf_r+0x432>
   193a6:	f000 fcab 	bl	19d00 <_vfprintf_r+0xd88>
   193aa:	0663      	lsls	r3, r4, #25
   193ac:	d401      	bmi.n	193b2 <_vfprintf_r+0x43a>
   193ae:	f000 fca7 	bl	19d00 <_vfprintf_r+0xd88>
   193b2:	2100      	movs	r1, #0
   193b4:	5e53      	ldrsh	r3, [r2, r1]
   193b6:	930c      	str	r3, [sp, #48]	; 0x30
   193b8:	3204      	adds	r2, #4
   193ba:	17db      	asrs	r3, r3, #31
   193bc:	930d      	str	r3, [sp, #52]	; 0x34
   193be:	920f      	str	r2, [sp, #60]	; 0x3c
   193c0:	2b00      	cmp	r3, #0
   193c2:	da01      	bge.n	193c8 <_vfprintf_r+0x450>
   193c4:	f000 fdb2 	bl	19f2c <_vfprintf_r+0xfb4>
   193c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   193ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   193cc:	0008      	movs	r0, r1
   193ce:	4651      	mov	r1, sl
   193d0:	ab16      	add	r3, sp, #88	; 0x58
   193d2:	7fdb      	ldrb	r3, [r3, #31]
   193d4:	4310      	orrs	r0, r2
   193d6:	4698      	mov	r8, r3
   193d8:	0002      	movs	r2, r0
   193da:	2301      	movs	r3, #1
   193dc:	3101      	adds	r1, #1
   193de:	d000      	beq.n	193e2 <_vfprintf_r+0x46a>
   193e0:	e718      	b.n	19214 <_vfprintf_r+0x29c>
   193e2:	2a00      	cmp	r2, #0
   193e4:	d100      	bne.n	193e8 <_vfprintf_r+0x470>
   193e6:	e35a      	b.n	19a9e <_vfprintf_r+0xb26>
   193e8:	9409      	str	r4, [sp, #36]	; 0x24
   193ea:	2b01      	cmp	r3, #1
   193ec:	d101      	bne.n	193f2 <_vfprintf_r+0x47a>
   193ee:	f000 fc06 	bl	19bfe <_vfprintf_r+0xc86>
   193f2:	2b02      	cmp	r3, #2
   193f4:	d000      	beq.n	193f8 <_vfprintf_r+0x480>
   193f6:	e380      	b.n	19afa <_vfprintf_r+0xb82>
   193f8:	9c19      	ldr	r4, [sp, #100]	; 0x64
   193fa:	200f      	movs	r0, #15
   193fc:	46a1      	mov	r9, r4
   193fe:	46b4      	mov	ip, r6
   19400:	ab32      	add	r3, sp, #200	; 0xc8
   19402:	0019      	movs	r1, r3
   19404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19408:	0004      	movs	r4, r0
   1940a:	464d      	mov	r5, r9
   1940c:	4014      	ands	r4, r2
   1940e:	5d2c      	ldrb	r4, [r5, r4]
   19410:	071e      	lsls	r6, r3, #28
   19412:	0915      	lsrs	r5, r2, #4
   19414:	3901      	subs	r1, #1
   19416:	432e      	orrs	r6, r5
   19418:	700c      	strb	r4, [r1, #0]
   1941a:	091c      	lsrs	r4, r3, #4
   1941c:	0023      	movs	r3, r4
   1941e:	0034      	movs	r4, r6
   19420:	0032      	movs	r2, r6
   19422:	431c      	orrs	r4, r3
   19424:	d1f0      	bne.n	19408 <_vfprintf_r+0x490>
   19426:	920c      	str	r2, [sp, #48]	; 0x30
   19428:	930d      	str	r3, [sp, #52]	; 0x34
   1942a:	ab32      	add	r3, sp, #200	; 0xc8
   1942c:	1a5b      	subs	r3, r3, r1
   1942e:	9111      	str	r1, [sp, #68]	; 0x44
   19430:	4666      	mov	r6, ip
   19432:	930e      	str	r3, [sp, #56]	; 0x38
   19434:	e70d      	b.n	19252 <_vfprintf_r+0x2da>
   19436:	4663      	mov	r3, ip
   19438:	431c      	orrs	r4, r3
   1943a:	9b07      	ldr	r3, [sp, #28]
   1943c:	781b      	ldrb	r3, [r3, #0]
   1943e:	e624      	b.n	1908a <_vfprintf_r+0x112>
   19440:	9b07      	ldr	r3, [sp, #28]
   19442:	781b      	ldrb	r3, [r3, #0]
   19444:	2b6c      	cmp	r3, #108	; 0x6c
   19446:	d101      	bne.n	1944c <_vfprintf_r+0x4d4>
   19448:	f000 fe8c 	bl	1a164 <_vfprintf_r+0x11ec>
   1944c:	2210      	movs	r2, #16
   1944e:	4314      	orrs	r4, r2
   19450:	e61b      	b.n	1908a <_vfprintf_r+0x112>
   19452:	2900      	cmp	r1, #0
   19454:	d001      	beq.n	1945a <_vfprintf_r+0x4e2>
   19456:	f001 f8d5 	bl	1a604 <_vfprintf_r+0x168c>
   1945a:	06a3      	lsls	r3, r4, #26
   1945c:	d501      	bpl.n	19462 <_vfprintf_r+0x4ea>
   1945e:	f000 fe76 	bl	1a14e <_vfprintf_r+0x11d6>
   19462:	06e3      	lsls	r3, r4, #27
   19464:	d500      	bpl.n	19468 <_vfprintf_r+0x4f0>
   19466:	e110      	b.n	1968a <_vfprintf_r+0x712>
   19468:	0663      	lsls	r3, r4, #25
   1946a:	d400      	bmi.n	1946e <_vfprintf_r+0x4f6>
   1946c:	e10d      	b.n	1968a <_vfprintf_r+0x712>
   1946e:	4669      	mov	r1, sp
   19470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   19474:	681a      	ldr	r2, [r3, #0]
   19476:	3304      	adds	r3, #4
   19478:	9208      	str	r2, [sp, #32]
   1947a:	8011      	strh	r1, [r2, #0]
   1947c:	930f      	str	r3, [sp, #60]	; 0x3c
   1947e:	e5c9      	b.n	19014 <_vfprintf_r+0x9c>
   19480:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19482:	2230      	movs	r2, #48	; 0x30
   19484:	680b      	ldr	r3, [r1, #0]
   19486:	930c      	str	r3, [sp, #48]	; 0x30
   19488:	2300      	movs	r3, #0
   1948a:	930d      	str	r3, [sp, #52]	; 0x34
   1948c:	3302      	adds	r3, #2
   1948e:	431c      	orrs	r4, r3
   19490:	ab1e      	add	r3, sp, #120	; 0x78
   19492:	701a      	strb	r2, [r3, #0]
   19494:	3248      	adds	r2, #72	; 0x48
   19496:	705a      	strb	r2, [r3, #1]
   19498:	000b      	movs	r3, r1
   1949a:	3304      	adds	r3, #4
   1949c:	930f      	str	r3, [sp, #60]	; 0x3c
   1949e:	4bc1      	ldr	r3, [pc, #772]	; (197a4 <_vfprintf_r+0x82c>)
   194a0:	9212      	str	r2, [sp, #72]	; 0x48
   194a2:	9319      	str	r3, [sp, #100]	; 0x64
   194a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   194a6:	2302      	movs	r3, #2
   194a8:	e6ac      	b.n	19204 <_vfprintf_r+0x28c>
   194aa:	464b      	mov	r3, r9
   194ac:	431c      	orrs	r4, r3
   194ae:	9b07      	ldr	r3, [sp, #28]
   194b0:	781b      	ldrb	r3, [r3, #0]
   194b2:	e5ea      	b.n	1908a <_vfprintf_r+0x112>
   194b4:	9312      	str	r3, [sp, #72]	; 0x48
   194b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   194b8:	a916      	add	r1, sp, #88	; 0x58
   194ba:	1d1d      	adds	r5, r3, #4
   194bc:	681b      	ldr	r3, [r3, #0]
   194be:	001a      	movs	r2, r3
   194c0:	9311      	str	r3, [sp, #68]	; 0x44
   194c2:	2300      	movs	r3, #0
   194c4:	77cb      	strb	r3, [r1, #31]
   194c6:	2a00      	cmp	r2, #0
   194c8:	d101      	bne.n	194ce <_vfprintf_r+0x556>
   194ca:	f000 ff01 	bl	1a2d0 <_vfprintf_r+0x1358>
   194ce:	4653      	mov	r3, sl
   194d0:	3301      	adds	r3, #1
   194d2:	d101      	bne.n	194d8 <_vfprintf_r+0x560>
   194d4:	f000 fe64 	bl	1a1a0 <_vfprintf_r+0x1228>
   194d8:	4652      	mov	r2, sl
   194da:	2100      	movs	r1, #0
   194dc:	9811      	ldr	r0, [sp, #68]	; 0x44
   194de:	f002 feb5 	bl	1c24c <memchr>
   194e2:	2800      	cmp	r0, #0
   194e4:	d101      	bne.n	194ea <_vfprintf_r+0x572>
   194e6:	f000 ff78 	bl	1a3da <_vfprintf_r+0x1462>
   194ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   194ec:	1ac3      	subs	r3, r0, r3
   194ee:	001a      	movs	r2, r3
   194f0:	930e      	str	r3, [sp, #56]	; 0x38
   194f2:	43db      	mvns	r3, r3
   194f4:	17db      	asrs	r3, r3, #31
   194f6:	401a      	ands	r2, r3
   194f8:	ab16      	add	r3, sp, #88	; 0x58
   194fa:	7fdb      	ldrb	r3, [r3, #31]
   194fc:	9208      	str	r2, [sp, #32]
   194fe:	4698      	mov	r8, r3
   19500:	2300      	movs	r3, #0
   19502:	950f      	str	r5, [sp, #60]	; 0x3c
   19504:	9409      	str	r4, [sp, #36]	; 0x24
   19506:	469a      	mov	sl, r3
   19508:	9313      	str	r3, [sp, #76]	; 0x4c
   1950a:	e6aa      	b.n	19262 <_vfprintf_r+0x2ea>
   1950c:	2308      	movs	r3, #8
   1950e:	431c      	orrs	r4, r3
   19510:	9b07      	ldr	r3, [sp, #28]
   19512:	781b      	ldrb	r3, [r3, #0]
   19514:	e5b9      	b.n	1908a <_vfprintf_r+0x112>
   19516:	9312      	str	r3, [sp, #72]	; 0x48
   19518:	2310      	movs	r3, #16
   1951a:	431c      	orrs	r4, r3
   1951c:	06a3      	lsls	r3, r4, #26
   1951e:	d501      	bpl.n	19524 <_vfprintf_r+0x5ac>
   19520:	f000 fca7 	bl	19e72 <_vfprintf_r+0xefa>
   19524:	06e3      	lsls	r3, r4, #27
   19526:	d500      	bpl.n	1952a <_vfprintf_r+0x5b2>
   19528:	e3ee      	b.n	19d08 <_vfprintf_r+0xd90>
   1952a:	0663      	lsls	r3, r4, #25
   1952c:	d400      	bmi.n	19530 <_vfprintf_r+0x5b8>
   1952e:	e3eb      	b.n	19d08 <_vfprintf_r+0xd90>
   19530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19532:	881a      	ldrh	r2, [r3, #0]
   19534:	920c      	str	r2, [sp, #48]	; 0x30
   19536:	2200      	movs	r2, #0
   19538:	3304      	adds	r3, #4
   1953a:	920d      	str	r2, [sp, #52]	; 0x34
   1953c:	930f      	str	r3, [sp, #60]	; 0x3c
   1953e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19540:	2300      	movs	r3, #0
   19542:	e65f      	b.n	19204 <_vfprintf_r+0x28c>
   19544:	9312      	str	r3, [sp, #72]	; 0x48
   19546:	2310      	movs	r3, #16
   19548:	431c      	orrs	r4, r3
   1954a:	06a3      	lsls	r3, r4, #26
   1954c:	d501      	bpl.n	19552 <_vfprintf_r+0x5da>
   1954e:	f000 fcba 	bl	19ec6 <_vfprintf_r+0xf4e>
   19552:	06e3      	lsls	r3, r4, #27
   19554:	d500      	bpl.n	19558 <_vfprintf_r+0x5e0>
   19556:	e3da      	b.n	19d0e <_vfprintf_r+0xd96>
   19558:	0663      	lsls	r3, r4, #25
   1955a:	d400      	bmi.n	1955e <_vfprintf_r+0x5e6>
   1955c:	e3d7      	b.n	19d0e <_vfprintf_r+0xd96>
   1955e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19560:	881a      	ldrh	r2, [r3, #0]
   19562:	920c      	str	r2, [sp, #48]	; 0x30
   19564:	2200      	movs	r2, #0
   19566:	3304      	adds	r3, #4
   19568:	920d      	str	r2, [sp, #52]	; 0x34
   1956a:	930f      	str	r3, [sp, #60]	; 0x3c
   1956c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1956e:	2301      	movs	r3, #1
   19570:	e648      	b.n	19204 <_vfprintf_r+0x28c>
   19572:	9312      	str	r3, [sp, #72]	; 0x48
   19574:	2900      	cmp	r1, #0
   19576:	d001      	beq.n	1957c <_vfprintf_r+0x604>
   19578:	f001 f857 	bl	1a62a <_vfprintf_r+0x16b2>
   1957c:	4b8a      	ldr	r3, [pc, #552]	; (197a8 <_vfprintf_r+0x830>)
   1957e:	9319      	str	r3, [sp, #100]	; 0x64
   19580:	e618      	b.n	191b4 <_vfprintf_r+0x23c>
   19582:	2301      	movs	r3, #1
   19584:	431c      	orrs	r4, r3
   19586:	9b07      	ldr	r3, [sp, #28]
   19588:	781b      	ldrb	r3, [r3, #0]
   1958a:	e57e      	b.n	1908a <_vfprintf_r+0x112>
   1958c:	2380      	movs	r3, #128	; 0x80
   1958e:	431c      	orrs	r4, r3
   19590:	9b07      	ldr	r3, [sp, #28]
   19592:	781b      	ldrb	r3, [r3, #0]
   19594:	e579      	b.n	1908a <_vfprintf_r+0x112>
   19596:	9b07      	ldr	r3, [sp, #28]
   19598:	781b      	ldrb	r3, [r3, #0]
   1959a:	2800      	cmp	r0, #0
   1959c:	d000      	beq.n	195a0 <_vfprintf_r+0x628>
   1959e:	e574      	b.n	1908a <_vfprintf_r+0x112>
   195a0:	2101      	movs	r1, #1
   195a2:	3020      	adds	r0, #32
   195a4:	e571      	b.n	1908a <_vfprintf_r+0x112>
   195a6:	9312      	str	r3, [sp, #72]	; 0x48
   195a8:	2900      	cmp	r1, #0
   195aa:	d001      	beq.n	195b0 <_vfprintf_r+0x638>
   195ac:	f001 f839 	bl	1a622 <_vfprintf_r+0x16aa>
   195b0:	2207      	movs	r2, #7
   195b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   195b4:	3307      	adds	r3, #7
   195b6:	4393      	bics	r3, r2
   195b8:	3201      	adds	r2, #1
   195ba:	4694      	mov	ip, r2
   195bc:	449c      	add	ip, r3
   195be:	4662      	mov	r2, ip
   195c0:	920f      	str	r2, [sp, #60]	; 0x3c
   195c2:	681a      	ldr	r2, [r3, #0]
   195c4:	9216      	str	r2, [sp, #88]	; 0x58
   195c6:	685b      	ldr	r3, [r3, #4]
   195c8:	2201      	movs	r2, #1
   195ca:	9315      	str	r3, [sp, #84]	; 0x54
   195cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   195ce:	9d16      	ldr	r5, [sp, #88]	; 0x58
   195d0:	005b      	lsls	r3, r3, #1
   195d2:	085b      	lsrs	r3, r3, #1
   195d4:	4698      	mov	r8, r3
   195d6:	4252      	negs	r2, r2
   195d8:	4b74      	ldr	r3, [pc, #464]	; (197ac <_vfprintf_r+0x834>)
   195da:	0028      	movs	r0, r5
   195dc:	4641      	mov	r1, r8
   195de:	f003 fe97 	bl	1d310 <__aeabi_dcmpun>
   195e2:	2800      	cmp	r0, #0
   195e4:	d001      	beq.n	195ea <_vfprintf_r+0x672>
   195e6:	f000 fcb4 	bl	19f52 <_vfprintf_r+0xfda>
   195ea:	2201      	movs	r2, #1
   195ec:	4b6f      	ldr	r3, [pc, #444]	; (197ac <_vfprintf_r+0x834>)
   195ee:	4252      	negs	r2, r2
   195f0:	0028      	movs	r0, r5
   195f2:	4641      	mov	r1, r8
   195f4:	f7fb fe42 	bl	1527c <__aeabi_dcmple>
   195f8:	2800      	cmp	r0, #0
   195fa:	d001      	beq.n	19600 <_vfprintf_r+0x688>
   195fc:	f000 fca9 	bl	19f52 <_vfprintf_r+0xfda>
   19600:	2200      	movs	r2, #0
   19602:	2300      	movs	r3, #0
   19604:	9816      	ldr	r0, [sp, #88]	; 0x58
   19606:	9915      	ldr	r1, [sp, #84]	; 0x54
   19608:	f7fb fe2e 	bl	15268 <__aeabi_dcmplt>
   1960c:	2800      	cmp	r0, #0
   1960e:	d001      	beq.n	19614 <_vfprintf_r+0x69c>
   19610:	f000 fd55 	bl	1a0be <_vfprintf_r+0x1146>
   19614:	ab16      	add	r3, sp, #88	; 0x58
   19616:	7fdb      	ldrb	r3, [r3, #31]
   19618:	4698      	mov	r8, r3
   1961a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1961c:	2b47      	cmp	r3, #71	; 0x47
   1961e:	dd01      	ble.n	19624 <_vfprintf_r+0x6ac>
   19620:	f000 fdb4 	bl	1a18c <_vfprintf_r+0x1214>
   19624:	4b62      	ldr	r3, [pc, #392]	; (197b0 <_vfprintf_r+0x838>)
   19626:	9311      	str	r3, [sp, #68]	; 0x44
   19628:	2380      	movs	r3, #128	; 0x80
   1962a:	439c      	bics	r4, r3
   1962c:	3b7d      	subs	r3, #125	; 0x7d
   1962e:	9308      	str	r3, [sp, #32]
   19630:	930e      	str	r3, [sp, #56]	; 0x38
   19632:	2300      	movs	r3, #0
   19634:	9409      	str	r4, [sp, #36]	; 0x24
   19636:	469a      	mov	sl, r3
   19638:	9313      	str	r3, [sp, #76]	; 0x4c
   1963a:	e612      	b.n	19262 <_vfprintf_r+0x2ea>
   1963c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1963e:	1d1a      	adds	r2, r3, #4
   19640:	681b      	ldr	r3, [r3, #0]
   19642:	930b      	str	r3, [sp, #44]	; 0x2c
   19644:	2b00      	cmp	r3, #0
   19646:	da00      	bge.n	1964a <_vfprintf_r+0x6d2>
   19648:	e578      	b.n	1913c <_vfprintf_r+0x1c4>
   1964a:	9b07      	ldr	r3, [sp, #28]
   1964c:	920f      	str	r2, [sp, #60]	; 0x3c
   1964e:	781b      	ldrb	r3, [r3, #0]
   19650:	e51b      	b.n	1908a <_vfprintf_r+0x112>
   19652:	9312      	str	r3, [sp, #72]	; 0x48
   19654:	2900      	cmp	r1, #0
   19656:	d001      	beq.n	1965c <_vfprintf_r+0x6e4>
   19658:	f000 ffcc 	bl	1a5f4 <_vfprintf_r+0x167c>
   1965c:	2310      	movs	r3, #16
   1965e:	431c      	orrs	r4, r3
   19660:	e69a      	b.n	19398 <_vfprintf_r+0x420>
   19662:	9312      	str	r3, [sp, #72]	; 0x48
   19664:	e771      	b.n	1954a <_vfprintf_r+0x5d2>
   19666:	9312      	str	r3, [sp, #72]	; 0x48
   19668:	e758      	b.n	1951c <_vfprintf_r+0x5a4>
   1966a:	9312      	str	r3, [sp, #72]	; 0x48
   1966c:	2900      	cmp	r1, #0
   1966e:	d001      	beq.n	19674 <_vfprintf_r+0x6fc>
   19670:	f000 ffd3 	bl	1a61a <_vfprintf_r+0x16a2>
   19674:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19676:	2b00      	cmp	r3, #0
   19678:	d100      	bne.n	1967c <_vfprintf_r+0x704>
   1967a:	e18d      	b.n	19998 <_vfprintf_r+0xa20>
   1967c:	ad28      	add	r5, sp, #160	; 0xa0
   1967e:	702b      	strb	r3, [r5, #0]
   19680:	2300      	movs	r3, #0
   19682:	aa16      	add	r2, sp, #88	; 0x58
   19684:	77d3      	strb	r3, [r2, #31]
   19686:	9409      	str	r4, [sp, #36]	; 0x24
   19688:	e678      	b.n	1937c <_vfprintf_r+0x404>
   1968a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1968c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1968e:	6813      	ldr	r3, [r2, #0]
   19690:	6019      	str	r1, [r3, #0]
   19692:	0013      	movs	r3, r2
   19694:	3304      	adds	r3, #4
   19696:	930f      	str	r3, [sp, #60]	; 0x3c
   19698:	e4bc      	b.n	19014 <_vfprintf_r+0x9c>
   1969a:	68bc      	ldr	r4, [r7, #8]
   1969c:	4643      	mov	r3, r8
   1969e:	2b00      	cmp	r3, #0
   196a0:	d00f      	beq.n	196c2 <_vfprintf_r+0x74a>
   196a2:	aa16      	add	r2, sp, #88	; 0x58
   196a4:	231f      	movs	r3, #31
   196a6:	4694      	mov	ip, r2
   196a8:	4463      	add	r3, ip
   196aa:	6033      	str	r3, [r6, #0]
   196ac:	2301      	movs	r3, #1
   196ae:	6073      	str	r3, [r6, #4]
   196b0:	687b      	ldr	r3, [r7, #4]
   196b2:	3401      	adds	r4, #1
   196b4:	3301      	adds	r3, #1
   196b6:	60bc      	str	r4, [r7, #8]
   196b8:	607b      	str	r3, [r7, #4]
   196ba:	2b07      	cmp	r3, #7
   196bc:	dd00      	ble.n	196c0 <_vfprintf_r+0x748>
   196be:	e203      	b.n	19ac8 <_vfprintf_r+0xb50>
   196c0:	3608      	adds	r6, #8
   196c2:	464b      	mov	r3, r9
   196c4:	2b00      	cmp	r3, #0
   196c6:	d00c      	beq.n	196e2 <_vfprintf_r+0x76a>
   196c8:	ab1e      	add	r3, sp, #120	; 0x78
   196ca:	6033      	str	r3, [r6, #0]
   196cc:	2302      	movs	r3, #2
   196ce:	6073      	str	r3, [r6, #4]
   196d0:	687b      	ldr	r3, [r7, #4]
   196d2:	3402      	adds	r4, #2
   196d4:	3301      	adds	r3, #1
   196d6:	60bc      	str	r4, [r7, #8]
   196d8:	607b      	str	r3, [r7, #4]
   196da:	2b07      	cmp	r3, #7
   196dc:	dd00      	ble.n	196e0 <_vfprintf_r+0x768>
   196de:	e1fd      	b.n	19adc <_vfprintf_r+0xb64>
   196e0:	3608      	adds	r6, #8
   196e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   196e4:	2b80      	cmp	r3, #128	; 0x80
   196e6:	d100      	bne.n	196ea <_vfprintf_r+0x772>
   196e8:	e173      	b.n	199d2 <_vfprintf_r+0xa5a>
   196ea:	4653      	mov	r3, sl
   196ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   196ee:	1a9d      	subs	r5, r3, r2
   196f0:	2d00      	cmp	r5, #0
   196f2:	dd32      	ble.n	1975a <_vfprintf_r+0x7e2>
   196f4:	4a2f      	ldr	r2, [pc, #188]	; (197b4 <_vfprintf_r+0x83c>)
   196f6:	687b      	ldr	r3, [r7, #4]
   196f8:	4691      	mov	r9, r2
   196fa:	2d10      	cmp	r5, #16
   196fc:	dd22      	ble.n	19744 <_vfprintf_r+0x7cc>
   196fe:	2210      	movs	r2, #16
   19700:	4692      	mov	sl, r2
   19702:	0022      	movs	r2, r4
   19704:	465c      	mov	r4, fp
   19706:	e003      	b.n	19710 <_vfprintf_r+0x798>
   19708:	3d10      	subs	r5, #16
   1970a:	3608      	adds	r6, #8
   1970c:	2d10      	cmp	r5, #16
   1970e:	dd17      	ble.n	19740 <_vfprintf_r+0x7c8>
   19710:	4649      	mov	r1, r9
   19712:	6031      	str	r1, [r6, #0]
   19714:	4651      	mov	r1, sl
   19716:	3210      	adds	r2, #16
   19718:	3301      	adds	r3, #1
   1971a:	6071      	str	r1, [r6, #4]
   1971c:	60ba      	str	r2, [r7, #8]
   1971e:	607b      	str	r3, [r7, #4]
   19720:	2b07      	cmp	r3, #7
   19722:	ddf1      	ble.n	19708 <_vfprintf_r+0x790>
   19724:	003a      	movs	r2, r7
   19726:	0021      	movs	r1, r4
   19728:	9806      	ldr	r0, [sp, #24]
   1972a:	f003 fb65 	bl	1cdf8 <__sprint_r>
   1972e:	2800      	cmp	r0, #0
   19730:	d000      	beq.n	19734 <_vfprintf_r+0x7bc>
   19732:	e18a      	b.n	19a4a <_vfprintf_r+0xad2>
   19734:	3d10      	subs	r5, #16
   19736:	68ba      	ldr	r2, [r7, #8]
   19738:	687b      	ldr	r3, [r7, #4]
   1973a:	ae32      	add	r6, sp, #200	; 0xc8
   1973c:	2d10      	cmp	r5, #16
   1973e:	dce7      	bgt.n	19710 <_vfprintf_r+0x798>
   19740:	46a3      	mov	fp, r4
   19742:	0014      	movs	r4, r2
   19744:	464a      	mov	r2, r9
   19746:	1964      	adds	r4, r4, r5
   19748:	3301      	adds	r3, #1
   1974a:	6032      	str	r2, [r6, #0]
   1974c:	6075      	str	r5, [r6, #4]
   1974e:	60bc      	str	r4, [r7, #8]
   19750:	607b      	str	r3, [r7, #4]
   19752:	2b07      	cmp	r3, #7
   19754:	dd00      	ble.n	19758 <_vfprintf_r+0x7e0>
   19756:	e1ad      	b.n	19ab4 <_vfprintf_r+0xb3c>
   19758:	3608      	adds	r6, #8
   1975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1975c:	05db      	lsls	r3, r3, #23
   1975e:	d500      	bpl.n	19762 <_vfprintf_r+0x7ea>
   19760:	e0be      	b.n	198e0 <_vfprintf_r+0x968>
   19762:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19764:	6033      	str	r3, [r6, #0]
   19766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19768:	469c      	mov	ip, r3
   1976a:	6073      	str	r3, [r6, #4]
   1976c:	687b      	ldr	r3, [r7, #4]
   1976e:	4464      	add	r4, ip
   19770:	3301      	adds	r3, #1
   19772:	60bc      	str	r4, [r7, #8]
   19774:	607b      	str	r3, [r7, #4]
   19776:	2b07      	cmp	r3, #7
   19778:	dd00      	ble.n	1977c <_vfprintf_r+0x804>
   1977a:	e0a6      	b.n	198ca <_vfprintf_r+0x952>
   1977c:	3608      	adds	r6, #8
   1977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19780:	075b      	lsls	r3, r3, #29
   19782:	d54a      	bpl.n	1981a <_vfprintf_r+0x8a2>
   19784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19786:	9a08      	ldr	r2, [sp, #32]
   19788:	1a9d      	subs	r5, r3, r2
   1978a:	2d00      	cmp	r5, #0
   1978c:	dd45      	ble.n	1981a <_vfprintf_r+0x8a2>
   1978e:	4a0a      	ldr	r2, [pc, #40]	; (197b8 <_vfprintf_r+0x840>)
   19790:	687b      	ldr	r3, [r7, #4]
   19792:	4690      	mov	r8, r2
   19794:	2d10      	cmp	r5, #16
   19796:	dd2f      	ble.n	197f8 <_vfprintf_r+0x880>
   19798:	2210      	movs	r2, #16
   1979a:	4691      	mov	r9, r2
   1979c:	0022      	movs	r2, r4
   1979e:	465c      	mov	r4, fp
   197a0:	e010      	b.n	197c4 <_vfprintf_r+0x84c>
   197a2:	46c0      	nop			; (mov r8, r8)
   197a4:	0001ee28 	.word	0x0001ee28
   197a8:	0001ee14 	.word	0x0001ee14
   197ac:	7fefffff 	.word	0x7fefffff
   197b0:	0001ee04 	.word	0x0001ee04
   197b4:	0001ee54 	.word	0x0001ee54
   197b8:	0001ee44 	.word	0x0001ee44
   197bc:	3d10      	subs	r5, #16
   197be:	3608      	adds	r6, #8
   197c0:	2d10      	cmp	r5, #16
   197c2:	dd17      	ble.n	197f4 <_vfprintf_r+0x87c>
   197c4:	49d1      	ldr	r1, [pc, #836]	; (19b0c <_vfprintf_r+0xb94>)
   197c6:	3210      	adds	r2, #16
   197c8:	6031      	str	r1, [r6, #0]
   197ca:	4649      	mov	r1, r9
   197cc:	3301      	adds	r3, #1
   197ce:	6071      	str	r1, [r6, #4]
   197d0:	60ba      	str	r2, [r7, #8]
   197d2:	607b      	str	r3, [r7, #4]
   197d4:	2b07      	cmp	r3, #7
   197d6:	ddf1      	ble.n	197bc <_vfprintf_r+0x844>
   197d8:	003a      	movs	r2, r7
   197da:	0021      	movs	r1, r4
   197dc:	9806      	ldr	r0, [sp, #24]
   197de:	f003 fb0b 	bl	1cdf8 <__sprint_r>
   197e2:	2800      	cmp	r0, #0
   197e4:	d000      	beq.n	197e8 <_vfprintf_r+0x870>
   197e6:	e130      	b.n	19a4a <_vfprintf_r+0xad2>
   197e8:	3d10      	subs	r5, #16
   197ea:	68ba      	ldr	r2, [r7, #8]
   197ec:	687b      	ldr	r3, [r7, #4]
   197ee:	ae32      	add	r6, sp, #200	; 0xc8
   197f0:	2d10      	cmp	r5, #16
   197f2:	dce7      	bgt.n	197c4 <_vfprintf_r+0x84c>
   197f4:	46a3      	mov	fp, r4
   197f6:	0014      	movs	r4, r2
   197f8:	4642      	mov	r2, r8
   197fa:	1964      	adds	r4, r4, r5
   197fc:	3301      	adds	r3, #1
   197fe:	c624      	stmia	r6!, {r2, r5}
   19800:	60bc      	str	r4, [r7, #8]
   19802:	607b      	str	r3, [r7, #4]
   19804:	2b07      	cmp	r3, #7
   19806:	dd08      	ble.n	1981a <_vfprintf_r+0x8a2>
   19808:	003a      	movs	r2, r7
   1980a:	4659      	mov	r1, fp
   1980c:	9806      	ldr	r0, [sp, #24]
   1980e:	f003 faf3 	bl	1cdf8 <__sprint_r>
   19812:	2800      	cmp	r0, #0
   19814:	d000      	beq.n	19818 <_vfprintf_r+0x8a0>
   19816:	e13f      	b.n	19a98 <_vfprintf_r+0xb20>
   19818:	68bc      	ldr	r4, [r7, #8]
   1981a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1981c:	9908      	ldr	r1, [sp, #32]
   1981e:	428b      	cmp	r3, r1
   19820:	da00      	bge.n	19824 <_vfprintf_r+0x8ac>
   19822:	000b      	movs	r3, r1
   19824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19826:	4694      	mov	ip, r2
   19828:	449c      	add	ip, r3
   1982a:	4663      	mov	r3, ip
   1982c:	930a      	str	r3, [sp, #40]	; 0x28
   1982e:	2c00      	cmp	r4, #0
   19830:	d000      	beq.n	19834 <_vfprintf_r+0x8bc>
   19832:	e129      	b.n	19a88 <_vfprintf_r+0xb10>
   19834:	2300      	movs	r3, #0
   19836:	ae32      	add	r6, sp, #200	; 0xc8
   19838:	607b      	str	r3, [r7, #4]
   1983a:	f7ff fbeb 	bl	19014 <_vfprintf_r+0x9c>
   1983e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19840:	2b01      	cmp	r3, #1
   19842:	dc00      	bgt.n	19846 <_vfprintf_r+0x8ce>
   19844:	e103      	b.n	19a4e <_vfprintf_r+0xad6>
   19846:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19848:	3401      	adds	r4, #1
   1984a:	6033      	str	r3, [r6, #0]
   1984c:	2301      	movs	r3, #1
   1984e:	6073      	str	r3, [r6, #4]
   19850:	687b      	ldr	r3, [r7, #4]
   19852:	60bc      	str	r4, [r7, #8]
   19854:	3301      	adds	r3, #1
   19856:	607b      	str	r3, [r7, #4]
   19858:	2b07      	cmp	r3, #7
   1985a:	dd00      	ble.n	1985e <_vfprintf_r+0x8e6>
   1985c:	e2ef      	b.n	19e3e <_vfprintf_r+0xec6>
   1985e:	3608      	adds	r6, #8
   19860:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19862:	3301      	adds	r3, #1
   19864:	6032      	str	r2, [r6, #0]
   19866:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19868:	4698      	mov	r8, r3
   1986a:	4694      	mov	ip, r2
   1986c:	4464      	add	r4, ip
   1986e:	6072      	str	r2, [r6, #4]
   19870:	60bc      	str	r4, [r7, #8]
   19872:	607b      	str	r3, [r7, #4]
   19874:	2b07      	cmp	r3, #7
   19876:	dd00      	ble.n	1987a <_vfprintf_r+0x902>
   19878:	e318      	b.n	19eac <_vfprintf_r+0xf34>
   1987a:	3608      	adds	r6, #8
   1987c:	2200      	movs	r2, #0
   1987e:	2300      	movs	r3, #0
   19880:	9816      	ldr	r0, [sp, #88]	; 0x58
   19882:	9915      	ldr	r1, [sp, #84]	; 0x54
   19884:	f7fb fcea 	bl	1525c <__aeabi_dcmpeq>
   19888:	2800      	cmp	r0, #0
   1988a:	d000      	beq.n	1988e <_vfprintf_r+0x916>
   1988c:	e1f4      	b.n	19c78 <_vfprintf_r+0xd00>
   1988e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   19890:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19892:	3501      	adds	r5, #1
   19894:	3b01      	subs	r3, #1
   19896:	6035      	str	r5, [r6, #0]
   19898:	6073      	str	r3, [r6, #4]
   1989a:	18e4      	adds	r4, r4, r3
   1989c:	2301      	movs	r3, #1
   1989e:	469c      	mov	ip, r3
   198a0:	44e0      	add	r8, ip
   198a2:	4643      	mov	r3, r8
   198a4:	60bc      	str	r4, [r7, #8]
   198a6:	607b      	str	r3, [r7, #4]
   198a8:	2b07      	cmp	r3, #7
   198aa:	dd00      	ble.n	198ae <_vfprintf_r+0x936>
   198ac:	e0e0      	b.n	19a70 <_vfprintf_r+0xaf8>
   198ae:	3608      	adds	r6, #8
   198b0:	ab21      	add	r3, sp, #132	; 0x84
   198b2:	6033      	str	r3, [r6, #0]
   198b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   198b6:	469c      	mov	ip, r3
   198b8:	6073      	str	r3, [r6, #4]
   198ba:	4643      	mov	r3, r8
   198bc:	4464      	add	r4, ip
   198be:	3301      	adds	r3, #1
   198c0:	60bc      	str	r4, [r7, #8]
   198c2:	607b      	str	r3, [r7, #4]
   198c4:	2b07      	cmp	r3, #7
   198c6:	dc00      	bgt.n	198ca <_vfprintf_r+0x952>
   198c8:	e758      	b.n	1977c <_vfprintf_r+0x804>
   198ca:	003a      	movs	r2, r7
   198cc:	4659      	mov	r1, fp
   198ce:	9806      	ldr	r0, [sp, #24]
   198d0:	f003 fa92 	bl	1cdf8 <__sprint_r>
   198d4:	2800      	cmp	r0, #0
   198d6:	d000      	beq.n	198da <_vfprintf_r+0x962>
   198d8:	e0de      	b.n	19a98 <_vfprintf_r+0xb20>
   198da:	68bc      	ldr	r4, [r7, #8]
   198dc:	ae32      	add	r6, sp, #200	; 0xc8
   198de:	e74e      	b.n	1977e <_vfprintf_r+0x806>
   198e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   198e2:	2b65      	cmp	r3, #101	; 0x65
   198e4:	ddab      	ble.n	1983e <_vfprintf_r+0x8c6>
   198e6:	2200      	movs	r2, #0
   198e8:	2300      	movs	r3, #0
   198ea:	9816      	ldr	r0, [sp, #88]	; 0x58
   198ec:	9915      	ldr	r1, [sp, #84]	; 0x54
   198ee:	f7fb fcb5 	bl	1525c <__aeabi_dcmpeq>
   198f2:	2800      	cmp	r0, #0
   198f4:	d100      	bne.n	198f8 <_vfprintf_r+0x980>
   198f6:	e134      	b.n	19b62 <_vfprintf_r+0xbea>
   198f8:	4b85      	ldr	r3, [pc, #532]	; (19b10 <_vfprintf_r+0xb98>)
   198fa:	3401      	adds	r4, #1
   198fc:	6033      	str	r3, [r6, #0]
   198fe:	2301      	movs	r3, #1
   19900:	6073      	str	r3, [r6, #4]
   19902:	687b      	ldr	r3, [r7, #4]
   19904:	60bc      	str	r4, [r7, #8]
   19906:	3301      	adds	r3, #1
   19908:	607b      	str	r3, [r7, #4]
   1990a:	2b07      	cmp	r3, #7
   1990c:	dd00      	ble.n	19910 <_vfprintf_r+0x998>
   1990e:	e3dc      	b.n	1a0ca <_vfprintf_r+0x1152>
   19910:	3608      	adds	r6, #8
   19912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19914:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19916:	4293      	cmp	r3, r2
   19918:	db03      	blt.n	19922 <_vfprintf_r+0x9aa>
   1991a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1991c:	07db      	lsls	r3, r3, #31
   1991e:	d400      	bmi.n	19922 <_vfprintf_r+0x9aa>
   19920:	e3b7      	b.n	1a092 <_vfprintf_r+0x111a>
   19922:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19924:	68ba      	ldr	r2, [r7, #8]
   19926:	6033      	str	r3, [r6, #0]
   19928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1992a:	469c      	mov	ip, r3
   1992c:	6073      	str	r3, [r6, #4]
   1992e:	687b      	ldr	r3, [r7, #4]
   19930:	4462      	add	r2, ip
   19932:	3301      	adds	r3, #1
   19934:	0014      	movs	r4, r2
   19936:	60ba      	str	r2, [r7, #8]
   19938:	607b      	str	r3, [r7, #4]
   1993a:	2b07      	cmp	r3, #7
   1993c:	dd01      	ble.n	19942 <_vfprintf_r+0x9ca>
   1993e:	f000 fc19 	bl	1a174 <_vfprintf_r+0x11fc>
   19942:	3608      	adds	r6, #8
   19944:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19946:	1e5d      	subs	r5, r3, #1
   19948:	2d00      	cmp	r5, #0
   1994a:	dc00      	bgt.n	1994e <_vfprintf_r+0x9d6>
   1994c:	e717      	b.n	1977e <_vfprintf_r+0x806>
   1994e:	4a71      	ldr	r2, [pc, #452]	; (19b14 <_vfprintf_r+0xb9c>)
   19950:	687b      	ldr	r3, [r7, #4]
   19952:	4691      	mov	r9, r2
   19954:	2d10      	cmp	r5, #16
   19956:	dc00      	bgt.n	1995a <_vfprintf_r+0x9e2>
   19958:	e1c3      	b.n	19ce2 <_vfprintf_r+0xd6a>
   1995a:	2210      	movs	r2, #16
   1995c:	4690      	mov	r8, r2
   1995e:	0022      	movs	r2, r4
   19960:	464c      	mov	r4, r9
   19962:	46d9      	mov	r9, fp
   19964:	e004      	b.n	19970 <_vfprintf_r+0x9f8>
   19966:	3608      	adds	r6, #8
   19968:	3d10      	subs	r5, #16
   1996a:	2d10      	cmp	r5, #16
   1996c:	dc00      	bgt.n	19970 <_vfprintf_r+0x9f8>
   1996e:	e37c      	b.n	1a06a <_vfprintf_r+0x10f2>
   19970:	4641      	mov	r1, r8
   19972:	3210      	adds	r2, #16
   19974:	3301      	adds	r3, #1
   19976:	6034      	str	r4, [r6, #0]
   19978:	6071      	str	r1, [r6, #4]
   1997a:	60ba      	str	r2, [r7, #8]
   1997c:	607b      	str	r3, [r7, #4]
   1997e:	2b07      	cmp	r3, #7
   19980:	ddf1      	ble.n	19966 <_vfprintf_r+0x9ee>
   19982:	003a      	movs	r2, r7
   19984:	4649      	mov	r1, r9
   19986:	9806      	ldr	r0, [sp, #24]
   19988:	f003 fa36 	bl	1cdf8 <__sprint_r>
   1998c:	2800      	cmp	r0, #0
   1998e:	d10b      	bne.n	199a8 <_vfprintf_r+0xa30>
   19990:	68ba      	ldr	r2, [r7, #8]
   19992:	687b      	ldr	r3, [r7, #4]
   19994:	ae32      	add	r6, sp, #200	; 0xc8
   19996:	e7e7      	b.n	19968 <_vfprintf_r+0x9f0>
   19998:	68bb      	ldr	r3, [r7, #8]
   1999a:	46d9      	mov	r9, fp
   1999c:	2b00      	cmp	r3, #0
   1999e:	d001      	beq.n	199a4 <_vfprintf_r+0xa2c>
   199a0:	f000 fd4c 	bl	1a43c <_vfprintf_r+0x14c4>
   199a4:	2300      	movs	r3, #0
   199a6:	607b      	str	r3, [r7, #4]
   199a8:	464b      	mov	r3, r9
   199aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   199ac:	07db      	lsls	r3, r3, #31
   199ae:	d40d      	bmi.n	199cc <_vfprintf_r+0xa54>
   199b0:	464b      	mov	r3, r9
   199b2:	899b      	ldrh	r3, [r3, #12]
   199b4:	059a      	lsls	r2, r3, #22
   199b6:	d505      	bpl.n	199c4 <_vfprintf_r+0xa4c>
   199b8:	065b      	lsls	r3, r3, #25
   199ba:	d401      	bmi.n	199c0 <_vfprintf_r+0xa48>
   199bc:	f7ff fb8d 	bl	190da <_vfprintf_r+0x162>
   199c0:	f7ff fb88 	bl	190d4 <_vfprintf_r+0x15c>
   199c4:	464b      	mov	r3, r9
   199c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   199c8:	f002 fbc6 	bl	1c158 <__retarget_lock_release_recursive>
   199cc:	464b      	mov	r3, r9
   199ce:	899b      	ldrh	r3, [r3, #12]
   199d0:	e7f2      	b.n	199b8 <_vfprintf_r+0xa40>
   199d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   199d4:	9a08      	ldr	r2, [sp, #32]
   199d6:	1a9d      	subs	r5, r3, r2
   199d8:	2d00      	cmp	r5, #0
   199da:	dc00      	bgt.n	199de <_vfprintf_r+0xa66>
   199dc:	e685      	b.n	196ea <_vfprintf_r+0x772>
   199de:	4a4d      	ldr	r2, [pc, #308]	; (19b14 <_vfprintf_r+0xb9c>)
   199e0:	687b      	ldr	r3, [r7, #4]
   199e2:	4691      	mov	r9, r2
   199e4:	2d10      	cmp	r5, #16
   199e6:	dd24      	ble.n	19a32 <_vfprintf_r+0xaba>
   199e8:	2210      	movs	r2, #16
   199ea:	0021      	movs	r1, r4
   199ec:	4690      	mov	r8, r2
   199ee:	465c      	mov	r4, fp
   199f0:	0032      	movs	r2, r6
   199f2:	464e      	mov	r6, r9
   199f4:	e003      	b.n	199fe <_vfprintf_r+0xa86>
   199f6:	3d10      	subs	r5, #16
   199f8:	3208      	adds	r2, #8
   199fa:	2d10      	cmp	r5, #16
   199fc:	dd15      	ble.n	19a2a <_vfprintf_r+0xab2>
   199fe:	4640      	mov	r0, r8
   19a00:	3110      	adds	r1, #16
   19a02:	3301      	adds	r3, #1
   19a04:	6016      	str	r6, [r2, #0]
   19a06:	6050      	str	r0, [r2, #4]
   19a08:	60b9      	str	r1, [r7, #8]
   19a0a:	607b      	str	r3, [r7, #4]
   19a0c:	2b07      	cmp	r3, #7
   19a0e:	ddf2      	ble.n	199f6 <_vfprintf_r+0xa7e>
   19a10:	003a      	movs	r2, r7
   19a12:	0021      	movs	r1, r4
   19a14:	9806      	ldr	r0, [sp, #24]
   19a16:	f003 f9ef 	bl	1cdf8 <__sprint_r>
   19a1a:	2800      	cmp	r0, #0
   19a1c:	d115      	bne.n	19a4a <_vfprintf_r+0xad2>
   19a1e:	3d10      	subs	r5, #16
   19a20:	68b9      	ldr	r1, [r7, #8]
   19a22:	687b      	ldr	r3, [r7, #4]
   19a24:	aa32      	add	r2, sp, #200	; 0xc8
   19a26:	2d10      	cmp	r5, #16
   19a28:	dce9      	bgt.n	199fe <_vfprintf_r+0xa86>
   19a2a:	46a3      	mov	fp, r4
   19a2c:	46b1      	mov	r9, r6
   19a2e:	000c      	movs	r4, r1
   19a30:	0016      	movs	r6, r2
   19a32:	464a      	mov	r2, r9
   19a34:	1964      	adds	r4, r4, r5
   19a36:	3301      	adds	r3, #1
   19a38:	6032      	str	r2, [r6, #0]
   19a3a:	6075      	str	r5, [r6, #4]
   19a3c:	60bc      	str	r4, [r7, #8]
   19a3e:	607b      	str	r3, [r7, #4]
   19a40:	2b07      	cmp	r3, #7
   19a42:	dd00      	ble.n	19a46 <_vfprintf_r+0xace>
   19a44:	e263      	b.n	19f0e <_vfprintf_r+0xf96>
   19a46:	3608      	adds	r6, #8
   19a48:	e64f      	b.n	196ea <_vfprintf_r+0x772>
   19a4a:	46a1      	mov	r9, r4
   19a4c:	e7ac      	b.n	199a8 <_vfprintf_r+0xa30>
   19a4e:	2301      	movs	r3, #1
   19a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19a52:	4213      	tst	r3, r2
   19a54:	d000      	beq.n	19a58 <_vfprintf_r+0xae0>
   19a56:	e6f6      	b.n	19846 <_vfprintf_r+0x8ce>
   19a58:	6073      	str	r3, [r6, #4]
   19a5a:	687b      	ldr	r3, [r7, #4]
   19a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19a5e:	3301      	adds	r3, #1
   19a60:	3401      	adds	r4, #1
   19a62:	6032      	str	r2, [r6, #0]
   19a64:	60bc      	str	r4, [r7, #8]
   19a66:	4698      	mov	r8, r3
   19a68:	607b      	str	r3, [r7, #4]
   19a6a:	2b07      	cmp	r3, #7
   19a6c:	dc00      	bgt.n	19a70 <_vfprintf_r+0xaf8>
   19a6e:	e71e      	b.n	198ae <_vfprintf_r+0x936>
   19a70:	003a      	movs	r2, r7
   19a72:	4659      	mov	r1, fp
   19a74:	9806      	ldr	r0, [sp, #24]
   19a76:	f003 f9bf 	bl	1cdf8 <__sprint_r>
   19a7a:	2800      	cmp	r0, #0
   19a7c:	d10c      	bne.n	19a98 <_vfprintf_r+0xb20>
   19a7e:	687b      	ldr	r3, [r7, #4]
   19a80:	68bc      	ldr	r4, [r7, #8]
   19a82:	4698      	mov	r8, r3
   19a84:	ae32      	add	r6, sp, #200	; 0xc8
   19a86:	e713      	b.n	198b0 <_vfprintf_r+0x938>
   19a88:	003a      	movs	r2, r7
   19a8a:	4659      	mov	r1, fp
   19a8c:	9806      	ldr	r0, [sp, #24]
   19a8e:	f003 f9b3 	bl	1cdf8 <__sprint_r>
   19a92:	2800      	cmp	r0, #0
   19a94:	d100      	bne.n	19a98 <_vfprintf_r+0xb20>
   19a96:	e6cd      	b.n	19834 <_vfprintf_r+0x8bc>
   19a98:	46d9      	mov	r9, fp
   19a9a:	e785      	b.n	199a8 <_vfprintf_r+0xa30>
   19a9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19a9e:	2b01      	cmp	r3, #1
   19aa0:	d100      	bne.n	19aa4 <_vfprintf_r+0xb2c>
   19aa2:	e148      	b.n	19d36 <_vfprintf_r+0xdbe>
   19aa4:	2b02      	cmp	r3, #2
   19aa6:	d123      	bne.n	19af0 <_vfprintf_r+0xb78>
   19aa8:	9409      	str	r4, [sp, #36]	; 0x24
   19aaa:	2300      	movs	r3, #0
   19aac:	2400      	movs	r4, #0
   19aae:	930c      	str	r3, [sp, #48]	; 0x30
   19ab0:	940d      	str	r4, [sp, #52]	; 0x34
   19ab2:	e4a1      	b.n	193f8 <_vfprintf_r+0x480>
   19ab4:	003a      	movs	r2, r7
   19ab6:	4659      	mov	r1, fp
   19ab8:	9806      	ldr	r0, [sp, #24]
   19aba:	f003 f99d 	bl	1cdf8 <__sprint_r>
   19abe:	2800      	cmp	r0, #0
   19ac0:	d1ea      	bne.n	19a98 <_vfprintf_r+0xb20>
   19ac2:	68bc      	ldr	r4, [r7, #8]
   19ac4:	ae32      	add	r6, sp, #200	; 0xc8
   19ac6:	e648      	b.n	1975a <_vfprintf_r+0x7e2>
   19ac8:	003a      	movs	r2, r7
   19aca:	4659      	mov	r1, fp
   19acc:	9806      	ldr	r0, [sp, #24]
   19ace:	f003 f993 	bl	1cdf8 <__sprint_r>
   19ad2:	2800      	cmp	r0, #0
   19ad4:	d1e0      	bne.n	19a98 <_vfprintf_r+0xb20>
   19ad6:	68bc      	ldr	r4, [r7, #8]
   19ad8:	ae32      	add	r6, sp, #200	; 0xc8
   19ada:	e5f2      	b.n	196c2 <_vfprintf_r+0x74a>
   19adc:	003a      	movs	r2, r7
   19ade:	4659      	mov	r1, fp
   19ae0:	9806      	ldr	r0, [sp, #24]
   19ae2:	f003 f989 	bl	1cdf8 <__sprint_r>
   19ae6:	2800      	cmp	r0, #0
   19ae8:	d1d6      	bne.n	19a98 <_vfprintf_r+0xb20>
   19aea:	68bc      	ldr	r4, [r7, #8]
   19aec:	ae32      	add	r6, sp, #200	; 0xc8
   19aee:	e5f8      	b.n	196e2 <_vfprintf_r+0x76a>
   19af0:	9409      	str	r4, [sp, #36]	; 0x24
   19af2:	2300      	movs	r3, #0
   19af4:	2400      	movs	r4, #0
   19af6:	930c      	str	r3, [sp, #48]	; 0x30
   19af8:	940d      	str	r4, [sp, #52]	; 0x34
   19afa:	980c      	ldr	r0, [sp, #48]	; 0x30
   19afc:	990d      	ldr	r1, [sp, #52]	; 0x34
   19afe:	4653      	mov	r3, sl
   19b00:	aa32      	add	r2, sp, #200	; 0xc8
   19b02:	4691      	mov	r9, r2
   19b04:	9308      	str	r3, [sp, #32]
   19b06:	46b2      	mov	sl, r6
   19b08:	e007      	b.n	19b1a <_vfprintf_r+0xba2>
   19b0a:	46c0      	nop			; (mov r8, r8)
   19b0c:	0001ee44 	.word	0x0001ee44
   19b10:	0001e0a0 	.word	0x0001e0a0
   19b14:	0001ee54 	.word	0x0001ee54
   19b18:	46a1      	mov	r9, r4
   19b1a:	074a      	lsls	r2, r1, #29
   19b1c:	4694      	mov	ip, r2
   19b1e:	464b      	mov	r3, r9
   19b20:	4665      	mov	r5, ip
   19b22:	1e5c      	subs	r4, r3, #1
   19b24:	08c6      	lsrs	r6, r0, #3
   19b26:	2307      	movs	r3, #7
   19b28:	08ca      	lsrs	r2, r1, #3
   19b2a:	4335      	orrs	r5, r6
   19b2c:	0011      	movs	r1, r2
   19b2e:	002a      	movs	r2, r5
   19b30:	4003      	ands	r3, r0
   19b32:	3330      	adds	r3, #48	; 0x30
   19b34:	7023      	strb	r3, [r4, #0]
   19b36:	0028      	movs	r0, r5
   19b38:	430a      	orrs	r2, r1
   19b3a:	d1ed      	bne.n	19b18 <_vfprintf_r+0xba0>
   19b3c:	900c      	str	r0, [sp, #48]	; 0x30
   19b3e:	910d      	str	r1, [sp, #52]	; 0x34
   19b40:	9908      	ldr	r1, [sp, #32]
   19b42:	4656      	mov	r6, sl
   19b44:	468a      	mov	sl, r1
   19b46:	9909      	ldr	r1, [sp, #36]	; 0x24
   19b48:	464a      	mov	r2, r9
   19b4a:	9411      	str	r4, [sp, #68]	; 0x44
   19b4c:	07c9      	lsls	r1, r1, #31
   19b4e:	d500      	bpl.n	19b52 <_vfprintf_r+0xbda>
   19b50:	e0e0      	b.n	19d14 <_vfprintf_r+0xd9c>
   19b52:	ab32      	add	r3, sp, #200	; 0xc8
   19b54:	1b1b      	subs	r3, r3, r4
   19b56:	930e      	str	r3, [sp, #56]	; 0x38
   19b58:	f7ff fb7b 	bl	19252 <_vfprintf_r+0x2da>
   19b5c:	9c07      	ldr	r4, [sp, #28]
   19b5e:	f7ff fa7d 	bl	1905c <_vfprintf_r+0xe4>
   19b62:	981f      	ldr	r0, [sp, #124]	; 0x7c
   19b64:	2800      	cmp	r0, #0
   19b66:	dc00      	bgt.n	19b6a <_vfprintf_r+0xbf2>
   19b68:	e2b9      	b.n	1a0de <_vfprintf_r+0x1166>
   19b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19b6c:	9914      	ldr	r1, [sp, #80]	; 0x50
   19b6e:	0013      	movs	r3, r2
   19b70:	4690      	mov	r8, r2
   19b72:	428b      	cmp	r3, r1
   19b74:	dd00      	ble.n	19b78 <_vfprintf_r+0xc00>
   19b76:	4688      	mov	r8, r1
   19b78:	4643      	mov	r3, r8
   19b7a:	2b00      	cmp	r3, #0
   19b7c:	dd0c      	ble.n	19b98 <_vfprintf_r+0xc20>
   19b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19b80:	4444      	add	r4, r8
   19b82:	6033      	str	r3, [r6, #0]
   19b84:	4643      	mov	r3, r8
   19b86:	6073      	str	r3, [r6, #4]
   19b88:	687b      	ldr	r3, [r7, #4]
   19b8a:	60bc      	str	r4, [r7, #8]
   19b8c:	3301      	adds	r3, #1
   19b8e:	607b      	str	r3, [r7, #4]
   19b90:	2b07      	cmp	r3, #7
   19b92:	dd00      	ble.n	19b96 <_vfprintf_r+0xc1e>
   19b94:	e389      	b.n	1a2aa <_vfprintf_r+0x1332>
   19b96:	3608      	adds	r6, #8
   19b98:	4643      	mov	r3, r8
   19b9a:	43db      	mvns	r3, r3
   19b9c:	4642      	mov	r2, r8
   19b9e:	17db      	asrs	r3, r3, #31
   19ba0:	4013      	ands	r3, r2
   19ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19ba4:	1ad3      	subs	r3, r2, r3
   19ba6:	4698      	mov	r8, r3
   19ba8:	2b00      	cmp	r3, #0
   19baa:	dc00      	bgt.n	19bae <_vfprintf_r+0xc36>
   19bac:	e0eb      	b.n	19d86 <_vfprintf_r+0xe0e>
   19bae:	2b10      	cmp	r3, #16
   19bb0:	dc01      	bgt.n	19bb6 <_vfprintf_r+0xc3e>
   19bb2:	f000 fcd9 	bl	1a568 <_vfprintf_r+0x15f0>
   19bb6:	4adc      	ldr	r2, [pc, #880]	; (19f28 <_vfprintf_r+0xfb0>)
   19bb8:	687b      	ldr	r3, [r7, #4]
   19bba:	4691      	mov	r9, r2
   19bbc:	2210      	movs	r2, #16
   19bbe:	464d      	mov	r5, r9
   19bc0:	4692      	mov	sl, r2
   19bc2:	0022      	movs	r2, r4
   19bc4:	4644      	mov	r4, r8
   19bc6:	46d8      	mov	r8, fp
   19bc8:	e004      	b.n	19bd4 <_vfprintf_r+0xc5c>
   19bca:	3608      	adds	r6, #8
   19bcc:	3c10      	subs	r4, #16
   19bce:	2c10      	cmp	r4, #16
   19bd0:	dc00      	bgt.n	19bd4 <_vfprintf_r+0xc5c>
   19bd2:	e0bf      	b.n	19d54 <_vfprintf_r+0xddc>
   19bd4:	4651      	mov	r1, sl
   19bd6:	3210      	adds	r2, #16
   19bd8:	3301      	adds	r3, #1
   19bda:	6035      	str	r5, [r6, #0]
   19bdc:	6071      	str	r1, [r6, #4]
   19bde:	60ba      	str	r2, [r7, #8]
   19be0:	607b      	str	r3, [r7, #4]
   19be2:	2b07      	cmp	r3, #7
   19be4:	ddf1      	ble.n	19bca <_vfprintf_r+0xc52>
   19be6:	003a      	movs	r2, r7
   19be8:	4641      	mov	r1, r8
   19bea:	9806      	ldr	r0, [sp, #24]
   19bec:	f003 f904 	bl	1cdf8 <__sprint_r>
   19bf0:	2800      	cmp	r0, #0
   19bf2:	d000      	beq.n	19bf6 <_vfprintf_r+0xc7e>
   19bf4:	e3b6      	b.n	1a364 <_vfprintf_r+0x13ec>
   19bf6:	68ba      	ldr	r2, [r7, #8]
   19bf8:	687b      	ldr	r3, [r7, #4]
   19bfa:	ae32      	add	r6, sp, #200	; 0xc8
   19bfc:	e7e6      	b.n	19bcc <_vfprintf_r+0xc54>
   19bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19c00:	2b00      	cmp	r3, #0
   19c02:	d100      	bne.n	19c06 <_vfprintf_r+0xc8e>
   19c04:	e092      	b.n	19d2c <_vfprintf_r+0xdb4>
   19c06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19c08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19c0a:	ab32      	add	r3, sp, #200	; 0xc8
   19c0c:	46b1      	mov	r9, r6
   19c0e:	001e      	movs	r6, r3
   19c10:	0020      	movs	r0, r4
   19c12:	0029      	movs	r1, r5
   19c14:	220a      	movs	r2, #10
   19c16:	2300      	movs	r3, #0
   19c18:	f7fb fb88 	bl	1532c <__aeabi_uldivmod>
   19c1c:	3e01      	subs	r6, #1
   19c1e:	3230      	adds	r2, #48	; 0x30
   19c20:	7032      	strb	r2, [r6, #0]
   19c22:	2300      	movs	r3, #0
   19c24:	0020      	movs	r0, r4
   19c26:	0029      	movs	r1, r5
   19c28:	220a      	movs	r2, #10
   19c2a:	f7fb fb7f 	bl	1532c <__aeabi_uldivmod>
   19c2e:	0003      	movs	r3, r0
   19c30:	0004      	movs	r4, r0
   19c32:	000d      	movs	r5, r1
   19c34:	430b      	orrs	r3, r1
   19c36:	d1eb      	bne.n	19c10 <_vfprintf_r+0xc98>
   19c38:	0032      	movs	r2, r6
   19c3a:	ab32      	add	r3, sp, #200	; 0xc8
   19c3c:	1a9b      	subs	r3, r3, r2
   19c3e:	9611      	str	r6, [sp, #68]	; 0x44
   19c40:	940c      	str	r4, [sp, #48]	; 0x30
   19c42:	950d      	str	r5, [sp, #52]	; 0x34
   19c44:	464e      	mov	r6, r9
   19c46:	930e      	str	r3, [sp, #56]	; 0x38
   19c48:	f7ff fb03 	bl	19252 <_vfprintf_r+0x2da>
   19c4c:	2300      	movs	r3, #0
   19c4e:	930e      	str	r3, [sp, #56]	; 0x38
   19c50:	ab32      	add	r3, sp, #200	; 0xc8
   19c52:	9311      	str	r3, [sp, #68]	; 0x44
   19c54:	f7ff fafd 	bl	19252 <_vfprintf_r+0x2da>
   19c58:	003a      	movs	r2, r7
   19c5a:	4659      	mov	r1, fp
   19c5c:	9806      	ldr	r0, [sp, #24]
   19c5e:	f003 f8cb 	bl	1cdf8 <__sprint_r>
   19c62:	2800      	cmp	r0, #0
   19c64:	d000      	beq.n	19c68 <_vfprintf_r+0xcf0>
   19c66:	e717      	b.n	19a98 <_vfprintf_r+0xb20>
   19c68:	ab16      	add	r3, sp, #88	; 0x58
   19c6a:	7fdb      	ldrb	r3, [r3, #31]
   19c6c:	68bc      	ldr	r4, [r7, #8]
   19c6e:	4698      	mov	r8, r3
   19c70:	ae32      	add	r6, sp, #200	; 0xc8
   19c72:	e513      	b.n	1969c <_vfprintf_r+0x724>
   19c74:	46b1      	mov	r9, r6
   19c76:	e697      	b.n	199a8 <_vfprintf_r+0xa30>
   19c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19c7a:	1e5d      	subs	r5, r3, #1
   19c7c:	2d00      	cmp	r5, #0
   19c7e:	dc00      	bgt.n	19c82 <_vfprintf_r+0xd0a>
   19c80:	e616      	b.n	198b0 <_vfprintf_r+0x938>
   19c82:	4ba9      	ldr	r3, [pc, #676]	; (19f28 <_vfprintf_r+0xfb0>)
   19c84:	4699      	mov	r9, r3
   19c86:	2d10      	cmp	r5, #16
   19c88:	dc00      	bgt.n	19c8c <_vfprintf_r+0xd14>
   19c8a:	e10a      	b.n	19ea2 <_vfprintf_r+0xf2a>
   19c8c:	2310      	movs	r3, #16
   19c8e:	0022      	movs	r2, r4
   19c90:	469a      	mov	sl, r3
   19c92:	465c      	mov	r4, fp
   19c94:	4643      	mov	r3, r8
   19c96:	e004      	b.n	19ca2 <_vfprintf_r+0xd2a>
   19c98:	3608      	adds	r6, #8
   19c9a:	3d10      	subs	r5, #16
   19c9c:	2d10      	cmp	r5, #16
   19c9e:	dc00      	bgt.n	19ca2 <_vfprintf_r+0xd2a>
   19ca0:	e0fc      	b.n	19e9c <_vfprintf_r+0xf24>
   19ca2:	4649      	mov	r1, r9
   19ca4:	6031      	str	r1, [r6, #0]
   19ca6:	4651      	mov	r1, sl
   19ca8:	3210      	adds	r2, #16
   19caa:	3301      	adds	r3, #1
   19cac:	6071      	str	r1, [r6, #4]
   19cae:	60ba      	str	r2, [r7, #8]
   19cb0:	607b      	str	r3, [r7, #4]
   19cb2:	2b07      	cmp	r3, #7
   19cb4:	ddf0      	ble.n	19c98 <_vfprintf_r+0xd20>
   19cb6:	003a      	movs	r2, r7
   19cb8:	0021      	movs	r1, r4
   19cba:	9806      	ldr	r0, [sp, #24]
   19cbc:	f003 f89c 	bl	1cdf8 <__sprint_r>
   19cc0:	2800      	cmp	r0, #0
   19cc2:	d000      	beq.n	19cc6 <_vfprintf_r+0xd4e>
   19cc4:	e6c1      	b.n	19a4a <_vfprintf_r+0xad2>
   19cc6:	68ba      	ldr	r2, [r7, #8]
   19cc8:	687b      	ldr	r3, [r7, #4]
   19cca:	ae32      	add	r6, sp, #200	; 0xc8
   19ccc:	e7e5      	b.n	19c9a <_vfprintf_r+0xd22>
   19cce:	990c      	ldr	r1, [sp, #48]	; 0x30
   19cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19cd2:	0008      	movs	r0, r1
   19cd4:	4310      	orrs	r0, r2
   19cd6:	2302      	movs	r3, #2
   19cd8:	0002      	movs	r2, r0
   19cda:	f7ff fa93 	bl	19204 <_vfprintf_r+0x28c>
   19cde:	46a3      	mov	fp, r4
   19ce0:	0014      	movs	r4, r2
   19ce2:	464a      	mov	r2, r9
   19ce4:	1964      	adds	r4, r4, r5
   19ce6:	3301      	adds	r3, #1
   19ce8:	6032      	str	r2, [r6, #0]
   19cea:	6075      	str	r5, [r6, #4]
   19cec:	60bc      	str	r4, [r7, #8]
   19cee:	607b      	str	r3, [r7, #4]
   19cf0:	2b07      	cmp	r3, #7
   19cf2:	dc00      	bgt.n	19cf6 <_vfprintf_r+0xd7e>
   19cf4:	e542      	b.n	1977c <_vfprintf_r+0x804>
   19cf6:	e5e8      	b.n	198ca <_vfprintf_r+0x952>
   19cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19cfa:	681a      	ldr	r2, [r3, #0]
   19cfc:	f7ff fa68 	bl	191d0 <_vfprintf_r+0x258>
   19d00:	6813      	ldr	r3, [r2, #0]
   19d02:	9308      	str	r3, [sp, #32]
   19d04:	f7ff fb57 	bl	193b6 <_vfprintf_r+0x43e>
   19d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19d0a:	681a      	ldr	r2, [r3, #0]
   19d0c:	e412      	b.n	19534 <_vfprintf_r+0x5bc>
   19d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19d10:	681a      	ldr	r2, [r3, #0]
   19d12:	e426      	b.n	19562 <_vfprintf_r+0x5ea>
   19d14:	2b30      	cmp	r3, #48	; 0x30
   19d16:	d100      	bne.n	19d1a <_vfprintf_r+0xda2>
   19d18:	e23c      	b.n	1a194 <_vfprintf_r+0x121c>
   19d1a:	2330      	movs	r3, #48	; 0x30
   19d1c:	3a02      	subs	r2, #2
   19d1e:	7013      	strb	r3, [r2, #0]
   19d20:	ab32      	add	r3, sp, #200	; 0xc8
   19d22:	1a9b      	subs	r3, r3, r2
   19d24:	930e      	str	r3, [sp, #56]	; 0x38
   19d26:	9211      	str	r2, [sp, #68]	; 0x44
   19d28:	f7ff fa93 	bl	19252 <_vfprintf_r+0x2da>
   19d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19d2e:	2b09      	cmp	r3, #9
   19d30:	d900      	bls.n	19d34 <_vfprintf_r+0xdbc>
   19d32:	e768      	b.n	19c06 <_vfprintf_r+0xc8e>
   19d34:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19d36:	2227      	movs	r2, #39	; 0x27
   19d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19d3a:	a928      	add	r1, sp, #160	; 0xa0
   19d3c:	3330      	adds	r3, #48	; 0x30
   19d3e:	548b      	strb	r3, [r1, r2]
   19d40:	2301      	movs	r3, #1
   19d42:	aa16      	add	r2, sp, #88	; 0x58
   19d44:	4694      	mov	ip, r2
   19d46:	930e      	str	r3, [sp, #56]	; 0x38
   19d48:	336e      	adds	r3, #110	; 0x6e
   19d4a:	4463      	add	r3, ip
   19d4c:	9409      	str	r4, [sp, #36]	; 0x24
   19d4e:	9311      	str	r3, [sp, #68]	; 0x44
   19d50:	f7ff fa7f 	bl	19252 <_vfprintf_r+0x2da>
   19d54:	46c3      	mov	fp, r8
   19d56:	46a9      	mov	r9, r5
   19d58:	46a0      	mov	r8, r4
   19d5a:	0014      	movs	r4, r2
   19d5c:	464a      	mov	r2, r9
   19d5e:	6032      	str	r2, [r6, #0]
   19d60:	4642      	mov	r2, r8
   19d62:	4444      	add	r4, r8
   19d64:	3301      	adds	r3, #1
   19d66:	6072      	str	r2, [r6, #4]
   19d68:	60bc      	str	r4, [r7, #8]
   19d6a:	607b      	str	r3, [r7, #4]
   19d6c:	2b07      	cmp	r3, #7
   19d6e:	dc00      	bgt.n	19d72 <_vfprintf_r+0xdfa>
   19d70:	e18d      	b.n	1a08e <_vfprintf_r+0x1116>
   19d72:	003a      	movs	r2, r7
   19d74:	4659      	mov	r1, fp
   19d76:	9806      	ldr	r0, [sp, #24]
   19d78:	f003 f83e 	bl	1cdf8 <__sprint_r>
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d000      	beq.n	19d82 <_vfprintf_r+0xe0a>
   19d80:	e68a      	b.n	19a98 <_vfprintf_r+0xb20>
   19d82:	68bc      	ldr	r4, [r7, #8]
   19d84:	ae32      	add	r6, sp, #200	; 0xc8
   19d86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19d88:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19d8a:	4293      	cmp	r3, r2
   19d8c:	db00      	blt.n	19d90 <_vfprintf_r+0xe18>
   19d8e:	e179      	b.n	1a084 <_vfprintf_r+0x110c>
   19d90:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19d92:	6032      	str	r2, [r6, #0]
   19d94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19d96:	4694      	mov	ip, r2
   19d98:	6072      	str	r2, [r6, #4]
   19d9a:	687a      	ldr	r2, [r7, #4]
   19d9c:	4464      	add	r4, ip
   19d9e:	3201      	adds	r2, #1
   19da0:	60bc      	str	r4, [r7, #8]
   19da2:	607a      	str	r2, [r7, #4]
   19da4:	2a07      	cmp	r2, #7
   19da6:	dd00      	ble.n	19daa <_vfprintf_r+0xe32>
   19da8:	e176      	b.n	1a098 <_vfprintf_r+0x1120>
   19daa:	3608      	adds	r6, #8
   19dac:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19dae:	9913      	ldr	r1, [sp, #76]	; 0x4c
   19db0:	1ad3      	subs	r3, r2, r3
   19db2:	1a52      	subs	r2, r2, r1
   19db4:	4690      	mov	r8, r2
   19db6:	429a      	cmp	r2, r3
   19db8:	dd00      	ble.n	19dbc <_vfprintf_r+0xe44>
   19dba:	4698      	mov	r8, r3
   19dbc:	4642      	mov	r2, r8
   19dbe:	2a00      	cmp	r2, #0
   19dc0:	dd0f      	ble.n	19de2 <_vfprintf_r+0xe6a>
   19dc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   19dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19dc6:	468c      	mov	ip, r1
   19dc8:	4462      	add	r2, ip
   19dca:	6032      	str	r2, [r6, #0]
   19dcc:	4642      	mov	r2, r8
   19dce:	6072      	str	r2, [r6, #4]
   19dd0:	687a      	ldr	r2, [r7, #4]
   19dd2:	4444      	add	r4, r8
   19dd4:	3201      	adds	r2, #1
   19dd6:	60bc      	str	r4, [r7, #8]
   19dd8:	607a      	str	r2, [r7, #4]
   19dda:	2a07      	cmp	r2, #7
   19ddc:	dd00      	ble.n	19de0 <_vfprintf_r+0xe68>
   19dde:	e289      	b.n	1a2f4 <_vfprintf_r+0x137c>
   19de0:	3608      	adds	r6, #8
   19de2:	4642      	mov	r2, r8
   19de4:	43d5      	mvns	r5, r2
   19de6:	17ed      	asrs	r5, r5, #31
   19de8:	4015      	ands	r5, r2
   19dea:	1b5d      	subs	r5, r3, r5
   19dec:	2d00      	cmp	r5, #0
   19dee:	dc00      	bgt.n	19df2 <_vfprintf_r+0xe7a>
   19df0:	e4c5      	b.n	1977e <_vfprintf_r+0x806>
   19df2:	4a4d      	ldr	r2, [pc, #308]	; (19f28 <_vfprintf_r+0xfb0>)
   19df4:	687b      	ldr	r3, [r7, #4]
   19df6:	4691      	mov	r9, r2
   19df8:	2d10      	cmp	r5, #16
   19dfa:	dc00      	bgt.n	19dfe <_vfprintf_r+0xe86>
   19dfc:	e771      	b.n	19ce2 <_vfprintf_r+0xd6a>
   19dfe:	2210      	movs	r2, #16
   19e00:	4690      	mov	r8, r2
   19e02:	0022      	movs	r2, r4
   19e04:	465c      	mov	r4, fp
   19e06:	e004      	b.n	19e12 <_vfprintf_r+0xe9a>
   19e08:	3608      	adds	r6, #8
   19e0a:	3d10      	subs	r5, #16
   19e0c:	2d10      	cmp	r5, #16
   19e0e:	dc00      	bgt.n	19e12 <_vfprintf_r+0xe9a>
   19e10:	e765      	b.n	19cde <_vfprintf_r+0xd66>
   19e12:	4649      	mov	r1, r9
   19e14:	6031      	str	r1, [r6, #0]
   19e16:	4641      	mov	r1, r8
   19e18:	3210      	adds	r2, #16
   19e1a:	3301      	adds	r3, #1
   19e1c:	6071      	str	r1, [r6, #4]
   19e1e:	60ba      	str	r2, [r7, #8]
   19e20:	607b      	str	r3, [r7, #4]
   19e22:	2b07      	cmp	r3, #7
   19e24:	ddf0      	ble.n	19e08 <_vfprintf_r+0xe90>
   19e26:	003a      	movs	r2, r7
   19e28:	0021      	movs	r1, r4
   19e2a:	9806      	ldr	r0, [sp, #24]
   19e2c:	f002 ffe4 	bl	1cdf8 <__sprint_r>
   19e30:	2800      	cmp	r0, #0
   19e32:	d000      	beq.n	19e36 <_vfprintf_r+0xebe>
   19e34:	e609      	b.n	19a4a <_vfprintf_r+0xad2>
   19e36:	68ba      	ldr	r2, [r7, #8]
   19e38:	687b      	ldr	r3, [r7, #4]
   19e3a:	ae32      	add	r6, sp, #200	; 0xc8
   19e3c:	e7e5      	b.n	19e0a <_vfprintf_r+0xe92>
   19e3e:	003a      	movs	r2, r7
   19e40:	4659      	mov	r1, fp
   19e42:	9806      	ldr	r0, [sp, #24]
   19e44:	f002 ffd8 	bl	1cdf8 <__sprint_r>
   19e48:	2800      	cmp	r0, #0
   19e4a:	d000      	beq.n	19e4e <_vfprintf_r+0xed6>
   19e4c:	e624      	b.n	19a98 <_vfprintf_r+0xb20>
   19e4e:	68bc      	ldr	r4, [r7, #8]
   19e50:	687b      	ldr	r3, [r7, #4]
   19e52:	ae32      	add	r6, sp, #200	; 0xc8
   19e54:	e504      	b.n	19860 <_vfprintf_r+0x8e8>
   19e56:	2307      	movs	r3, #7
   19e58:	3207      	adds	r2, #7
   19e5a:	439a      	bics	r2, r3
   19e5c:	3301      	adds	r3, #1
   19e5e:	469c      	mov	ip, r3
   19e60:	4494      	add	ip, r2
   19e62:	4663      	mov	r3, ip
   19e64:	930f      	str	r3, [sp, #60]	; 0x3c
   19e66:	6853      	ldr	r3, [r2, #4]
   19e68:	6812      	ldr	r2, [r2, #0]
   19e6a:	930d      	str	r3, [sp, #52]	; 0x34
   19e6c:	920c      	str	r2, [sp, #48]	; 0x30
   19e6e:	f7ff faa7 	bl	193c0 <_vfprintf_r+0x448>
   19e72:	2207      	movs	r2, #7
   19e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19e76:	3307      	adds	r3, #7
   19e78:	4393      	bics	r3, r2
   19e7a:	3201      	adds	r2, #1
   19e7c:	4694      	mov	ip, r2
   19e7e:	449c      	add	ip, r3
   19e80:	4662      	mov	r2, ip
   19e82:	920f      	str	r2, [sp, #60]	; 0x3c
   19e84:	681a      	ldr	r2, [r3, #0]
   19e86:	685b      	ldr	r3, [r3, #4]
   19e88:	0011      	movs	r1, r2
   19e8a:	001a      	movs	r2, r3
   19e8c:	0008      	movs	r0, r1
   19e8e:	4310      	orrs	r0, r2
   19e90:	910c      	str	r1, [sp, #48]	; 0x30
   19e92:	920d      	str	r2, [sp, #52]	; 0x34
   19e94:	2300      	movs	r3, #0
   19e96:	0002      	movs	r2, r0
   19e98:	f7ff f9b4 	bl	19204 <_vfprintf_r+0x28c>
   19e9c:	46a3      	mov	fp, r4
   19e9e:	4698      	mov	r8, r3
   19ea0:	0014      	movs	r4, r2
   19ea2:	464b      	mov	r3, r9
   19ea4:	6075      	str	r5, [r6, #4]
   19ea6:	6033      	str	r3, [r6, #0]
   19ea8:	1964      	adds	r4, r4, r5
   19eaa:	e4f7      	b.n	1989c <_vfprintf_r+0x924>
   19eac:	003a      	movs	r2, r7
   19eae:	4659      	mov	r1, fp
   19eb0:	9806      	ldr	r0, [sp, #24]
   19eb2:	f002 ffa1 	bl	1cdf8 <__sprint_r>
   19eb6:	2800      	cmp	r0, #0
   19eb8:	d000      	beq.n	19ebc <_vfprintf_r+0xf44>
   19eba:	e5ed      	b.n	19a98 <_vfprintf_r+0xb20>
   19ebc:	687b      	ldr	r3, [r7, #4]
   19ebe:	68bc      	ldr	r4, [r7, #8]
   19ec0:	4698      	mov	r8, r3
   19ec2:	ae32      	add	r6, sp, #200	; 0xc8
   19ec4:	e4da      	b.n	1987c <_vfprintf_r+0x904>
   19ec6:	2207      	movs	r2, #7
   19ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19eca:	3307      	adds	r3, #7
   19ecc:	4393      	bics	r3, r2
   19ece:	3201      	adds	r2, #1
   19ed0:	4694      	mov	ip, r2
   19ed2:	449c      	add	ip, r3
   19ed4:	4662      	mov	r2, ip
   19ed6:	920f      	str	r2, [sp, #60]	; 0x3c
   19ed8:	681a      	ldr	r2, [r3, #0]
   19eda:	685b      	ldr	r3, [r3, #4]
   19edc:	0011      	movs	r1, r2
   19ede:	001a      	movs	r2, r3
   19ee0:	0008      	movs	r0, r1
   19ee2:	4310      	orrs	r0, r2
   19ee4:	910c      	str	r1, [sp, #48]	; 0x30
   19ee6:	920d      	str	r2, [sp, #52]	; 0x34
   19ee8:	2301      	movs	r3, #1
   19eea:	0002      	movs	r2, r0
   19eec:	f7ff f98a 	bl	19204 <_vfprintf_r+0x28c>
   19ef0:	2207      	movs	r2, #7
   19ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19ef4:	3307      	adds	r3, #7
   19ef6:	4393      	bics	r3, r2
   19ef8:	3201      	adds	r2, #1
   19efa:	4694      	mov	ip, r2
   19efc:	449c      	add	ip, r3
   19efe:	4662      	mov	r2, ip
   19f00:	920f      	str	r2, [sp, #60]	; 0x3c
   19f02:	681a      	ldr	r2, [r3, #0]
   19f04:	685b      	ldr	r3, [r3, #4]
   19f06:	920c      	str	r2, [sp, #48]	; 0x30
   19f08:	930d      	str	r3, [sp, #52]	; 0x34
   19f0a:	f7ff f966 	bl	191da <_vfprintf_r+0x262>
   19f0e:	003a      	movs	r2, r7
   19f10:	4659      	mov	r1, fp
   19f12:	9806      	ldr	r0, [sp, #24]
   19f14:	f002 ff70 	bl	1cdf8 <__sprint_r>
   19f18:	2800      	cmp	r0, #0
   19f1a:	d000      	beq.n	19f1e <_vfprintf_r+0xfa6>
   19f1c:	e5bc      	b.n	19a98 <_vfprintf_r+0xb20>
   19f1e:	68bc      	ldr	r4, [r7, #8]
   19f20:	ae32      	add	r6, sp, #200	; 0xc8
   19f22:	f7ff fbe2 	bl	196ea <_vfprintf_r+0x772>
   19f26:	46c0      	nop			; (mov r8, r8)
   19f28:	0001ee54 	.word	0x0001ee54
   19f2c:	980c      	ldr	r0, [sp, #48]	; 0x30
   19f2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   19f30:	2300      	movs	r3, #0
   19f32:	4242      	negs	r2, r0
   19f34:	418b      	sbcs	r3, r1
   19f36:	0011      	movs	r1, r2
   19f38:	001a      	movs	r2, r3
   19f3a:	232d      	movs	r3, #45	; 0x2d
   19f3c:	a816      	add	r0, sp, #88	; 0x58
   19f3e:	77c3      	strb	r3, [r0, #31]
   19f40:	0008      	movs	r0, r1
   19f42:	4310      	orrs	r0, r2
   19f44:	910c      	str	r1, [sp, #48]	; 0x30
   19f46:	920d      	str	r2, [sp, #52]	; 0x34
   19f48:	4698      	mov	r8, r3
   19f4a:	0002      	movs	r2, r0
   19f4c:	3b2c      	subs	r3, #44	; 0x2c
   19f4e:	f7ff f95d 	bl	1920c <_vfprintf_r+0x294>
   19f52:	9916      	ldr	r1, [sp, #88]	; 0x58
   19f54:	9d15      	ldr	r5, [sp, #84]	; 0x54
   19f56:	000a      	movs	r2, r1
   19f58:	0008      	movs	r0, r1
   19f5a:	002b      	movs	r3, r5
   19f5c:	0029      	movs	r1, r5
   19f5e:	f003 f9d7 	bl	1d310 <__aeabi_dcmpun>
   19f62:	2800      	cmp	r0, #0
   19f64:	d000      	beq.n	19f68 <_vfprintf_r+0xff0>
   19f66:	e2c6      	b.n	1a4f6 <_vfprintf_r+0x157e>
   19f68:	4653      	mov	r3, sl
   19f6a:	3301      	adds	r3, #1
   19f6c:	d100      	bne.n	19f70 <_vfprintf_r+0xff8>
   19f6e:	e09f      	b.n	1a0b0 <_vfprintf_r+0x1138>
   19f70:	2320      	movs	r3, #32
   19f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19f74:	439a      	bics	r2, r3
   19f76:	920e      	str	r2, [sp, #56]	; 0x38
   19f78:	2a47      	cmp	r2, #71	; 0x47
   19f7a:	d100      	bne.n	19f7e <_vfprintf_r+0x1006>
   19f7c:	e1a1      	b.n	1a2c2 <_vfprintf_r+0x134a>
   19f7e:	2380      	movs	r3, #128	; 0x80
   19f80:	005b      	lsls	r3, r3, #1
   19f82:	4323      	orrs	r3, r4
   19f84:	9309      	str	r3, [sp, #36]	; 0x24
   19f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19f88:	2b00      	cmp	r3, #0
   19f8a:	da00      	bge.n	19f8e <_vfprintf_r+0x1016>
   19f8c:	e1ed      	b.n	1a36a <_vfprintf_r+0x13f2>
   19f8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19f90:	9308      	str	r3, [sp, #32]
   19f92:	2300      	movs	r3, #0
   19f94:	4691      	mov	r9, r2
   19f96:	9310      	str	r3, [sp, #64]	; 0x40
   19f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f9a:	2b66      	cmp	r3, #102	; 0x66
   19f9c:	d100      	bne.n	19fa0 <_vfprintf_r+0x1028>
   19f9e:	e1b8      	b.n	1a312 <_vfprintf_r+0x139a>
   19fa0:	2b46      	cmp	r3, #70	; 0x46
   19fa2:	d100      	bne.n	19fa6 <_vfprintf_r+0x102e>
   19fa4:	e237      	b.n	1a416 <_vfprintf_r+0x149e>
   19fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fa8:	9806      	ldr	r0, [sp, #24]
   19faa:	3a45      	subs	r2, #69	; 0x45
   19fac:	0013      	movs	r3, r2
   19fae:	4259      	negs	r1, r3
   19fb0:	4159      	adcs	r1, r3
   19fb2:	ab20      	add	r3, sp, #128	; 0x80
   19fb4:	000d      	movs	r5, r1
   19fb6:	9303      	str	r3, [sp, #12]
   19fb8:	ab1f      	add	r3, sp, #124	; 0x7c
   19fba:	9302      	str	r3, [sp, #8]
   19fbc:	2302      	movs	r3, #2
   19fbe:	aa23      	add	r2, sp, #140	; 0x8c
   19fc0:	4455      	add	r5, sl
   19fc2:	921b      	str	r2, [sp, #108]	; 0x6c
   19fc4:	9204      	str	r2, [sp, #16]
   19fc6:	9300      	str	r3, [sp, #0]
   19fc8:	9501      	str	r5, [sp, #4]
   19fca:	9b08      	ldr	r3, [sp, #32]
   19fcc:	464a      	mov	r2, r9
   19fce:	f000 fcb9 	bl	1a944 <_dtoa_r>
   19fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19fd4:	9011      	str	r0, [sp, #68]	; 0x44
   19fd6:	2b67      	cmp	r3, #103	; 0x67
   19fd8:	d000      	beq.n	19fdc <_vfprintf_r+0x1064>
   19fda:	e20b      	b.n	1a3f4 <_vfprintf_r+0x147c>
   19fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19fde:	4698      	mov	r8, r3
   19fe0:	44a8      	add	r8, r5
   19fe2:	07e3      	lsls	r3, r4, #31
   19fe4:	d400      	bmi.n	19fe8 <_vfprintf_r+0x1070>
   19fe6:	e277      	b.n	1a4d8 <_vfprintf_r+0x1560>
   19fe8:	2300      	movs	r3, #0
   19fea:	2200      	movs	r2, #0
   19fec:	4648      	mov	r0, r9
   19fee:	9908      	ldr	r1, [sp, #32]
   19ff0:	f7fb f934 	bl	1525c <__aeabi_dcmpeq>
   19ff4:	4643      	mov	r3, r8
   19ff6:	2800      	cmp	r0, #0
   19ff8:	d10a      	bne.n	1a010 <_vfprintf_r+0x1098>
   19ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19ffc:	4543      	cmp	r3, r8
   19ffe:	d207      	bcs.n	1a010 <_vfprintf_r+0x1098>
   1a000:	2130      	movs	r1, #48	; 0x30
   1a002:	4640      	mov	r0, r8
   1a004:	1c5a      	adds	r2, r3, #1
   1a006:	9223      	str	r2, [sp, #140]	; 0x8c
   1a008:	7019      	strb	r1, [r3, #0]
   1a00a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a00c:	4298      	cmp	r0, r3
   1a00e:	d8f9      	bhi.n	1a004 <_vfprintf_r+0x108c>
   1a010:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a012:	1a9b      	subs	r3, r3, r2
   1a014:	9314      	str	r3, [sp, #80]	; 0x50
   1a016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a018:	2b47      	cmp	r3, #71	; 0x47
   1a01a:	d100      	bne.n	1a01e <_vfprintf_r+0x10a6>
   1a01c:	e0d0      	b.n	1a1c0 <_vfprintf_r+0x1248>
   1a01e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a020:	2b65      	cmp	r3, #101	; 0x65
   1a022:	dc00      	bgt.n	1a026 <_vfprintf_r+0x10ae>
   1a024:	e2d5      	b.n	1a5d2 <_vfprintf_r+0x165a>
   1a026:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a028:	2b66      	cmp	r3, #102	; 0x66
   1a02a:	d100      	bne.n	1a02e <_vfprintf_r+0x10b6>
   1a02c:	e1c6      	b.n	1a3bc <_vfprintf_r+0x1444>
   1a02e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a030:	9313      	str	r3, [sp, #76]	; 0x4c
   1a032:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a034:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a036:	0019      	movs	r1, r3
   1a038:	4291      	cmp	r1, r2
   1a03a:	dd00      	ble.n	1a03e <_vfprintf_r+0x10c6>
   1a03c:	e1a0      	b.n	1a380 <_vfprintf_r+0x1408>
   1a03e:	07e3      	lsls	r3, r4, #31
   1a040:	d500      	bpl.n	1a044 <_vfprintf_r+0x10cc>
   1a042:	e242      	b.n	1a4ca <_vfprintf_r+0x1552>
   1a044:	43d3      	mvns	r3, r2
   1a046:	17db      	asrs	r3, r3, #31
   1a048:	0011      	movs	r1, r2
   1a04a:	401a      	ands	r2, r3
   1a04c:	2367      	movs	r3, #103	; 0x67
   1a04e:	9208      	str	r2, [sp, #32]
   1a050:	910e      	str	r1, [sp, #56]	; 0x38
   1a052:	9312      	str	r3, [sp, #72]	; 0x48
   1a054:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a056:	2b00      	cmp	r3, #0
   1a058:	d000      	beq.n	1a05c <_vfprintf_r+0x10e4>
   1a05a:	e0a9      	b.n	1a1b0 <_vfprintf_r+0x1238>
   1a05c:	ab16      	add	r3, sp, #88	; 0x58
   1a05e:	7fdb      	ldrb	r3, [r3, #31]
   1a060:	4698      	mov	r8, r3
   1a062:	2300      	movs	r3, #0
   1a064:	469a      	mov	sl, r3
   1a066:	f7ff f8fc 	bl	19262 <_vfprintf_r+0x2ea>
   1a06a:	46cb      	mov	fp, r9
   1a06c:	46a1      	mov	r9, r4
   1a06e:	0014      	movs	r4, r2
   1a070:	e637      	b.n	19ce2 <_vfprintf_r+0xd6a>
   1a072:	464b      	mov	r3, r9
   1a074:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a076:	f002 f86f 	bl	1c158 <__retarget_lock_release_recursive>
   1a07a:	2301      	movs	r3, #1
   1a07c:	425b      	negs	r3, r3
   1a07e:	930a      	str	r3, [sp, #40]	; 0x28
   1a080:	f7ff f82b 	bl	190da <_vfprintf_r+0x162>
   1a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a086:	07d2      	lsls	r2, r2, #31
   1a088:	d400      	bmi.n	1a08c <_vfprintf_r+0x1114>
   1a08a:	e68f      	b.n	19dac <_vfprintf_r+0xe34>
   1a08c:	e680      	b.n	19d90 <_vfprintf_r+0xe18>
   1a08e:	3608      	adds	r6, #8
   1a090:	e679      	b.n	19d86 <_vfprintf_r+0xe0e>
   1a092:	68bc      	ldr	r4, [r7, #8]
   1a094:	f7ff fb73 	bl	1977e <_vfprintf_r+0x806>
   1a098:	003a      	movs	r2, r7
   1a09a:	4659      	mov	r1, fp
   1a09c:	9806      	ldr	r0, [sp, #24]
   1a09e:	f002 feab 	bl	1cdf8 <__sprint_r>
   1a0a2:	2800      	cmp	r0, #0
   1a0a4:	d000      	beq.n	1a0a8 <_vfprintf_r+0x1130>
   1a0a6:	e4f7      	b.n	19a98 <_vfprintf_r+0xb20>
   1a0a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a0aa:	68bc      	ldr	r4, [r7, #8]
   1a0ac:	ae32      	add	r6, sp, #200	; 0xc8
   1a0ae:	e67d      	b.n	19dac <_vfprintf_r+0xe34>
   1a0b0:	2320      	movs	r3, #32
   1a0b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a0b4:	439a      	bics	r2, r3
   1a0b6:	3b1a      	subs	r3, #26
   1a0b8:	920e      	str	r2, [sp, #56]	; 0x38
   1a0ba:	469a      	mov	sl, r3
   1a0bc:	e75f      	b.n	19f7e <_vfprintf_r+0x1006>
   1a0be:	232d      	movs	r3, #45	; 0x2d
   1a0c0:	aa16      	add	r2, sp, #88	; 0x58
   1a0c2:	77d3      	strb	r3, [r2, #31]
   1a0c4:	4698      	mov	r8, r3
   1a0c6:	f7ff faa8 	bl	1961a <_vfprintf_r+0x6a2>
   1a0ca:	003a      	movs	r2, r7
   1a0cc:	4659      	mov	r1, fp
   1a0ce:	9806      	ldr	r0, [sp, #24]
   1a0d0:	f002 fe92 	bl	1cdf8 <__sprint_r>
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d000      	beq.n	1a0da <_vfprintf_r+0x1162>
   1a0d8:	e4de      	b.n	19a98 <_vfprintf_r+0xb20>
   1a0da:	ae32      	add	r6, sp, #200	; 0xc8
   1a0dc:	e419      	b.n	19912 <_vfprintf_r+0x99a>
   1a0de:	4be3      	ldr	r3, [pc, #908]	; (1a46c <_vfprintf_r+0x14f4>)
   1a0e0:	3401      	adds	r4, #1
   1a0e2:	6033      	str	r3, [r6, #0]
   1a0e4:	2301      	movs	r3, #1
   1a0e6:	6073      	str	r3, [r6, #4]
   1a0e8:	687b      	ldr	r3, [r7, #4]
   1a0ea:	60bc      	str	r4, [r7, #8]
   1a0ec:	3301      	adds	r3, #1
   1a0ee:	607b      	str	r3, [r7, #4]
   1a0f0:	2b07      	cmp	r3, #7
   1a0f2:	dd00      	ble.n	1a0f6 <_vfprintf_r+0x117e>
   1a0f4:	e155      	b.n	1a3a2 <_vfprintf_r+0x142a>
   1a0f6:	3608      	adds	r6, #8
   1a0f8:	2800      	cmp	r0, #0
   1a0fa:	d107      	bne.n	1a10c <_vfprintf_r+0x1194>
   1a0fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a0fe:	2b00      	cmp	r3, #0
   1a100:	d104      	bne.n	1a10c <_vfprintf_r+0x1194>
   1a102:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a104:	07db      	lsls	r3, r3, #31
   1a106:	d401      	bmi.n	1a10c <_vfprintf_r+0x1194>
   1a108:	f7ff fb39 	bl	1977e <_vfprintf_r+0x806>
   1a10c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1a10e:	6033      	str	r3, [r6, #0]
   1a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a112:	1919      	adds	r1, r3, r4
   1a114:	6073      	str	r3, [r6, #4]
   1a116:	687b      	ldr	r3, [r7, #4]
   1a118:	60b9      	str	r1, [r7, #8]
   1a11a:	3301      	adds	r3, #1
   1a11c:	607b      	str	r3, [r7, #4]
   1a11e:	2b07      	cmp	r3, #7
   1a120:	dd00      	ble.n	1a124 <_vfprintf_r+0x11ac>
   1a122:	e1c4      	b.n	1a4ae <_vfprintf_r+0x1536>
   1a124:	0032      	movs	r2, r6
   1a126:	3208      	adds	r2, #8
   1a128:	2800      	cmp	r0, #0
   1a12a:	da00      	bge.n	1a12e <_vfprintf_r+0x11b6>
   1a12c:	e195      	b.n	1a45a <_vfprintf_r+0x14e2>
   1a12e:	9811      	ldr	r0, [sp, #68]	; 0x44
   1a130:	3301      	adds	r3, #1
   1a132:	6010      	str	r0, [r2, #0]
   1a134:	9814      	ldr	r0, [sp, #80]	; 0x50
   1a136:	607b      	str	r3, [r7, #4]
   1a138:	1844      	adds	r4, r0, r1
   1a13a:	6050      	str	r0, [r2, #4]
   1a13c:	60bc      	str	r4, [r7, #8]
   1a13e:	2b07      	cmp	r3, #7
   1a140:	dd01      	ble.n	1a146 <_vfprintf_r+0x11ce>
   1a142:	f7ff fbc2 	bl	198ca <_vfprintf_r+0x952>
   1a146:	3208      	adds	r2, #8
   1a148:	0016      	movs	r6, r2
   1a14a:	f7ff fb18 	bl	1977e <_vfprintf_r+0x806>
   1a14e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a152:	680b      	ldr	r3, [r1, #0]
   1a154:	601a      	str	r2, [r3, #0]
   1a156:	17d2      	asrs	r2, r2, #31
   1a158:	605a      	str	r2, [r3, #4]
   1a15a:	000b      	movs	r3, r1
   1a15c:	3304      	adds	r3, #4
   1a15e:	930f      	str	r3, [sp, #60]	; 0x3c
   1a160:	f7fe ff58 	bl	19014 <_vfprintf_r+0x9c>
   1a164:	464b      	mov	r3, r9
   1a166:	9a07      	ldr	r2, [sp, #28]
   1a168:	431c      	orrs	r4, r3
   1a16a:	3201      	adds	r2, #1
   1a16c:	7813      	ldrb	r3, [r2, #0]
   1a16e:	9207      	str	r2, [sp, #28]
   1a170:	f7fe ff8b 	bl	1908a <_vfprintf_r+0x112>
   1a174:	003a      	movs	r2, r7
   1a176:	4659      	mov	r1, fp
   1a178:	9806      	ldr	r0, [sp, #24]
   1a17a:	f002 fe3d 	bl	1cdf8 <__sprint_r>
   1a17e:	2800      	cmp	r0, #0
   1a180:	d000      	beq.n	1a184 <_vfprintf_r+0x120c>
   1a182:	e489      	b.n	19a98 <_vfprintf_r+0xb20>
   1a184:	68bc      	ldr	r4, [r7, #8]
   1a186:	ae32      	add	r6, sp, #200	; 0xc8
   1a188:	f7ff fbdc 	bl	19944 <_vfprintf_r+0x9cc>
   1a18c:	4bb8      	ldr	r3, [pc, #736]	; (1a470 <_vfprintf_r+0x14f8>)
   1a18e:	9311      	str	r3, [sp, #68]	; 0x44
   1a190:	f7ff fa4a 	bl	19628 <_vfprintf_r+0x6b0>
   1a194:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a196:	ab32      	add	r3, sp, #200	; 0xc8
   1a198:	1a9b      	subs	r3, r3, r2
   1a19a:	930e      	str	r3, [sp, #56]	; 0x38
   1a19c:	f7ff f859 	bl	19252 <_vfprintf_r+0x2da>
   1a1a0:	9811      	ldr	r0, [sp, #68]	; 0x44
   1a1a2:	f7fe fd03 	bl	18bac <strlen>
   1a1a6:	0002      	movs	r2, r0
   1a1a8:	900e      	str	r0, [sp, #56]	; 0x38
   1a1aa:	0003      	movs	r3, r0
   1a1ac:	f7ff f9a1 	bl	194f2 <_vfprintf_r+0x57a>
   1a1b0:	232d      	movs	r3, #45	; 0x2d
   1a1b2:	aa16      	add	r2, sp, #88	; 0x58
   1a1b4:	77d3      	strb	r3, [r2, #31]
   1a1b6:	4698      	mov	r8, r3
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	469a      	mov	sl, r3
   1a1bc:	f7ff f854 	bl	19268 <_vfprintf_r+0x2f0>
   1a1c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a1c2:	9313      	str	r3, [sp, #76]	; 0x4c
   1a1c4:	1cda      	adds	r2, r3, #3
   1a1c6:	db02      	blt.n	1a1ce <_vfprintf_r+0x1256>
   1a1c8:	459a      	cmp	sl, r3
   1a1ca:	db00      	blt.n	1a1ce <_vfprintf_r+0x1256>
   1a1cc:	e731      	b.n	1a032 <_vfprintf_r+0x10ba>
   1a1ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a1d0:	3b02      	subs	r3, #2
   1a1d2:	9312      	str	r3, [sp, #72]	; 0x48
   1a1d4:	222c      	movs	r2, #44	; 0x2c
   1a1d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a1d8:	2148      	movs	r1, #72	; 0x48
   1a1da:	1e5d      	subs	r5, r3, #1
   1a1dc:	ab16      	add	r3, sp, #88	; 0x58
   1a1de:	189b      	adds	r3, r3, r2
   1a1e0:	466a      	mov	r2, sp
   1a1e2:	1852      	adds	r2, r2, r1
   1a1e4:	7812      	ldrb	r2, [r2, #0]
   1a1e6:	951f      	str	r5, [sp, #124]	; 0x7c
   1a1e8:	701a      	strb	r2, [r3, #0]
   1a1ea:	2d00      	cmp	r5, #0
   1a1ec:	da00      	bge.n	1a1f0 <_vfprintf_r+0x1278>
   1a1ee:	e1cb      	b.n	1a588 <_vfprintf_r+0x1610>
   1a1f0:	212d      	movs	r1, #45	; 0x2d
   1a1f2:	232b      	movs	r3, #43	; 0x2b
   1a1f4:	aa16      	add	r2, sp, #88	; 0x58
   1a1f6:	1852      	adds	r2, r2, r1
   1a1f8:	7013      	strb	r3, [r2, #0]
   1a1fa:	2d09      	cmp	r5, #9
   1a1fc:	dc00      	bgt.n	1a200 <_vfprintf_r+0x1288>
   1a1fe:	e16d      	b.n	1a4dc <_vfprintf_r+0x1564>
   1a200:	aa16      	add	r2, sp, #88	; 0x58
   1a202:	233b      	movs	r3, #59	; 0x3b
   1a204:	4694      	mov	ip, r2
   1a206:	4463      	add	r3, ip
   1a208:	469a      	mov	sl, r3
   1a20a:	46b1      	mov	r9, r6
   1a20c:	46a0      	mov	r8, r4
   1a20e:	4656      	mov	r6, sl
   1a210:	e000      	b.n	1a214 <_vfprintf_r+0x129c>
   1a212:	0026      	movs	r6, r4
   1a214:	0028      	movs	r0, r5
   1a216:	210a      	movs	r1, #10
   1a218:	f7fb f80a 	bl	15230 <__aeabi_idivmod>
   1a21c:	1e74      	subs	r4, r6, #1
   1a21e:	3130      	adds	r1, #48	; 0x30
   1a220:	7021      	strb	r1, [r4, #0]
   1a222:	0028      	movs	r0, r5
   1a224:	210a      	movs	r1, #10
   1a226:	f7fa ff1d 	bl	15064 <__divsi3>
   1a22a:	0005      	movs	r5, r0
   1a22c:	2809      	cmp	r0, #9
   1a22e:	dcf0      	bgt.n	1a212 <_vfprintf_r+0x129a>
   1a230:	0023      	movs	r3, r4
   1a232:	4644      	mov	r4, r8
   1a234:	46b0      	mov	r8, r6
   1a236:	464e      	mov	r6, r9
   1a238:	4699      	mov	r9, r3
   1a23a:	0003      	movs	r3, r0
   1a23c:	3330      	adds	r3, #48	; 0x30
   1a23e:	b2d8      	uxtb	r0, r3
   1a240:	4643      	mov	r3, r8
   1a242:	3b02      	subs	r3, #2
   1a244:	7018      	strb	r0, [r3, #0]
   1a246:	459a      	cmp	sl, r3
   1a248:	d800      	bhi.n	1a24c <_vfprintf_r+0x12d4>
   1a24a:	e1f6      	b.n	1a63a <_vfprintf_r+0x16c2>
   1a24c:	4642      	mov	r2, r8
   1a24e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a250:	4645      	mov	r5, r8
   1a252:	1a99      	subs	r1, r3, r2
   1a254:	2301      	movs	r3, #1
   1a256:	3107      	adds	r1, #7
   1a258:	425b      	negs	r3, r3
   1a25a:	e001      	b.n	1a260 <_vfprintf_r+0x12e8>
   1a25c:	5ce8      	ldrb	r0, [r5, r3]
   1a25e:	3301      	adds	r3, #1
   1a260:	aa21      	add	r2, sp, #132	; 0x84
   1a262:	18d2      	adds	r2, r2, r3
   1a264:	70d0      	strb	r0, [r2, #3]
   1a266:	428b      	cmp	r3, r1
   1a268:	d1f8      	bne.n	1a25c <_vfprintf_r+0x12e4>
   1a26a:	a916      	add	r1, sp, #88	; 0x58
   1a26c:	468c      	mov	ip, r1
   1a26e:	222e      	movs	r2, #46	; 0x2e
   1a270:	464b      	mov	r3, r9
   1a272:	4462      	add	r2, ip
   1a274:	4694      	mov	ip, r2
   1a276:	1afb      	subs	r3, r7, r3
   1a278:	4463      	add	r3, ip
   1a27a:	aa21      	add	r2, sp, #132	; 0x84
   1a27c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1a27e:	1a9b      	subs	r3, r3, r2
   1a280:	469c      	mov	ip, r3
   1a282:	000a      	movs	r2, r1
   1a284:	4462      	add	r2, ip
   1a286:	931a      	str	r3, [sp, #104]	; 0x68
   1a288:	920e      	str	r2, [sp, #56]	; 0x38
   1a28a:	2901      	cmp	r1, #1
   1a28c:	dc00      	bgt.n	1a290 <_vfprintf_r+0x1318>
   1a28e:	e170      	b.n	1a572 <_vfprintf_r+0x15fa>
   1a290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a294:	4694      	mov	ip, r2
   1a296:	4463      	add	r3, ip
   1a298:	001a      	movs	r2, r3
   1a29a:	930e      	str	r3, [sp, #56]	; 0x38
   1a29c:	43db      	mvns	r3, r3
   1a29e:	17db      	asrs	r3, r3, #31
   1a2a0:	401a      	ands	r2, r3
   1a2a2:	2300      	movs	r3, #0
   1a2a4:	9208      	str	r2, [sp, #32]
   1a2a6:	9313      	str	r3, [sp, #76]	; 0x4c
   1a2a8:	e6d4      	b.n	1a054 <_vfprintf_r+0x10dc>
   1a2aa:	003a      	movs	r2, r7
   1a2ac:	4659      	mov	r1, fp
   1a2ae:	9806      	ldr	r0, [sp, #24]
   1a2b0:	f002 fda2 	bl	1cdf8 <__sprint_r>
   1a2b4:	2800      	cmp	r0, #0
   1a2b6:	d001      	beq.n	1a2bc <_vfprintf_r+0x1344>
   1a2b8:	f7ff fbee 	bl	19a98 <_vfprintf_r+0xb20>
   1a2bc:	68bc      	ldr	r4, [r7, #8]
   1a2be:	ae32      	add	r6, sp, #200	; 0xc8
   1a2c0:	e46a      	b.n	19b98 <_vfprintf_r+0xc20>
   1a2c2:	4653      	mov	r3, sl
   1a2c4:	2b00      	cmp	r3, #0
   1a2c6:	d000      	beq.n	1a2ca <_vfprintf_r+0x1352>
   1a2c8:	e659      	b.n	19f7e <_vfprintf_r+0x1006>
   1a2ca:	3301      	adds	r3, #1
   1a2cc:	469a      	mov	sl, r3
   1a2ce:	e656      	b.n	19f7e <_vfprintf_r+0x1006>
   1a2d0:	4653      	mov	r3, sl
   1a2d2:	9308      	str	r3, [sp, #32]
   1a2d4:	2b06      	cmp	r3, #6
   1a2d6:	d901      	bls.n	1a2dc <_vfprintf_r+0x1364>
   1a2d8:	2306      	movs	r3, #6
   1a2da:	9308      	str	r3, [sp, #32]
   1a2dc:	9b08      	ldr	r3, [sp, #32]
   1a2de:	950f      	str	r5, [sp, #60]	; 0x3c
   1a2e0:	930e      	str	r3, [sp, #56]	; 0x38
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	4698      	mov	r8, r3
   1a2e6:	469a      	mov	sl, r3
   1a2e8:	9313      	str	r3, [sp, #76]	; 0x4c
   1a2ea:	4b62      	ldr	r3, [pc, #392]	; (1a474 <_vfprintf_r+0x14fc>)
   1a2ec:	9409      	str	r4, [sp, #36]	; 0x24
   1a2ee:	9311      	str	r3, [sp, #68]	; 0x44
   1a2f0:	f7fe ffbd 	bl	1926e <_vfprintf_r+0x2f6>
   1a2f4:	003a      	movs	r2, r7
   1a2f6:	4659      	mov	r1, fp
   1a2f8:	9806      	ldr	r0, [sp, #24]
   1a2fa:	f002 fd7d 	bl	1cdf8 <__sprint_r>
   1a2fe:	2800      	cmp	r0, #0
   1a300:	d001      	beq.n	1a306 <_vfprintf_r+0x138e>
   1a302:	f7ff fbc9 	bl	19a98 <_vfprintf_r+0xb20>
   1a306:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1a30a:	68bc      	ldr	r4, [r7, #8]
   1a30c:	1a9b      	subs	r3, r3, r2
   1a30e:	ae32      	add	r6, sp, #200	; 0xc8
   1a310:	e567      	b.n	19de2 <_vfprintf_r+0xe6a>
   1a312:	ab23      	add	r3, sp, #140	; 0x8c
   1a314:	931b      	str	r3, [sp, #108]	; 0x6c
   1a316:	9304      	str	r3, [sp, #16]
   1a318:	ab20      	add	r3, sp, #128	; 0x80
   1a31a:	9303      	str	r3, [sp, #12]
   1a31c:	ab1f      	add	r3, sp, #124	; 0x7c
   1a31e:	9302      	str	r3, [sp, #8]
   1a320:	4653      	mov	r3, sl
   1a322:	9301      	str	r3, [sp, #4]
   1a324:	2303      	movs	r3, #3
   1a326:	464a      	mov	r2, r9
   1a328:	9300      	str	r3, [sp, #0]
   1a32a:	9806      	ldr	r0, [sp, #24]
   1a32c:	9b08      	ldr	r3, [sp, #32]
   1a32e:	f000 fb09 	bl	1a944 <_dtoa_r>
   1a332:	0003      	movs	r3, r0
   1a334:	4453      	add	r3, sl
   1a336:	4698      	mov	r8, r3
   1a338:	4655      	mov	r5, sl
   1a33a:	9011      	str	r0, [sp, #68]	; 0x44
   1a33c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a33e:	781b      	ldrb	r3, [r3, #0]
   1a340:	2b30      	cmp	r3, #48	; 0x30
   1a342:	d002      	beq.n	1a34a <_vfprintf_r+0x13d2>
   1a344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a346:	4498      	add	r8, r3
   1a348:	e64e      	b.n	19fe8 <_vfprintf_r+0x1070>
   1a34a:	2200      	movs	r2, #0
   1a34c:	2300      	movs	r3, #0
   1a34e:	4648      	mov	r0, r9
   1a350:	9908      	ldr	r1, [sp, #32]
   1a352:	f7fa ff83 	bl	1525c <__aeabi_dcmpeq>
   1a356:	2800      	cmp	r0, #0
   1a358:	d1f4      	bne.n	1a344 <_vfprintf_r+0x13cc>
   1a35a:	2301      	movs	r3, #1
   1a35c:	1b5b      	subs	r3, r3, r5
   1a35e:	931f      	str	r3, [sp, #124]	; 0x7c
   1a360:	4498      	add	r8, r3
   1a362:	e641      	b.n	19fe8 <_vfprintf_r+0x1070>
   1a364:	46c1      	mov	r9, r8
   1a366:	f7ff fb1f 	bl	199a8 <_vfprintf_r+0xa30>
   1a36a:	2280      	movs	r2, #128	; 0x80
   1a36c:	0612      	lsls	r2, r2, #24
   1a36e:	4694      	mov	ip, r2
   1a370:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a372:	4699      	mov	r9, r3
   1a374:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a376:	4463      	add	r3, ip
   1a378:	9308      	str	r3, [sp, #32]
   1a37a:	232d      	movs	r3, #45	; 0x2d
   1a37c:	9310      	str	r3, [sp, #64]	; 0x40
   1a37e:	e60b      	b.n	19f98 <_vfprintf_r+0x1020>
   1a380:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a382:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a384:	4694      	mov	ip, r2
   1a386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a388:	4463      	add	r3, ip
   1a38a:	930e      	str	r3, [sp, #56]	; 0x38
   1a38c:	2a00      	cmp	r2, #0
   1a38e:	dc00      	bgt.n	1a392 <_vfprintf_r+0x141a>
   1a390:	e0e3      	b.n	1a55a <_vfprintf_r+0x15e2>
   1a392:	001a      	movs	r2, r3
   1a394:	43db      	mvns	r3, r3
   1a396:	17db      	asrs	r3, r3, #31
   1a398:	401a      	ands	r2, r3
   1a39a:	2367      	movs	r3, #103	; 0x67
   1a39c:	9208      	str	r2, [sp, #32]
   1a39e:	9312      	str	r3, [sp, #72]	; 0x48
   1a3a0:	e658      	b.n	1a054 <_vfprintf_r+0x10dc>
   1a3a2:	003a      	movs	r2, r7
   1a3a4:	4659      	mov	r1, fp
   1a3a6:	9806      	ldr	r0, [sp, #24]
   1a3a8:	f002 fd26 	bl	1cdf8 <__sprint_r>
   1a3ac:	2800      	cmp	r0, #0
   1a3ae:	d001      	beq.n	1a3b4 <_vfprintf_r+0x143c>
   1a3b0:	f7ff fb72 	bl	19a98 <_vfprintf_r+0xb20>
   1a3b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1a3b6:	68bc      	ldr	r4, [r7, #8]
   1a3b8:	ae32      	add	r6, sp, #200	; 0xc8
   1a3ba:	e69d      	b.n	1a0f8 <_vfprintf_r+0x1180>
   1a3bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a3be:	9313      	str	r3, [sp, #76]	; 0x4c
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	dc00      	bgt.n	1a3c6 <_vfprintf_r+0x144e>
   1a3c4:	e0f2      	b.n	1a5ac <_vfprintf_r+0x1634>
   1a3c6:	4652      	mov	r2, sl
   1a3c8:	2a00      	cmp	r2, #0
   1a3ca:	d000      	beq.n	1a3ce <_vfprintf_r+0x1456>
   1a3cc:	e0a0      	b.n	1a510 <_vfprintf_r+0x1598>
   1a3ce:	07e2      	lsls	r2, r4, #31
   1a3d0:	d500      	bpl.n	1a3d4 <_vfprintf_r+0x145c>
   1a3d2:	e09d      	b.n	1a510 <_vfprintf_r+0x1598>
   1a3d4:	9308      	str	r3, [sp, #32]
   1a3d6:	930e      	str	r3, [sp, #56]	; 0x38
   1a3d8:	e63c      	b.n	1a054 <_vfprintf_r+0x10dc>
   1a3da:	ab16      	add	r3, sp, #88	; 0x58
   1a3dc:	7fdb      	ldrb	r3, [r3, #31]
   1a3de:	950f      	str	r5, [sp, #60]	; 0x3c
   1a3e0:	4698      	mov	r8, r3
   1a3e2:	4653      	mov	r3, sl
   1a3e4:	9308      	str	r3, [sp, #32]
   1a3e6:	930e      	str	r3, [sp, #56]	; 0x38
   1a3e8:	2300      	movs	r3, #0
   1a3ea:	9409      	str	r4, [sp, #36]	; 0x24
   1a3ec:	469a      	mov	sl, r3
   1a3ee:	9313      	str	r3, [sp, #76]	; 0x4c
   1a3f0:	f7fe ff37 	bl	19262 <_vfprintf_r+0x2ea>
   1a3f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a3f6:	4698      	mov	r8, r3
   1a3f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a3fa:	44a8      	add	r8, r5
   1a3fc:	2b47      	cmp	r3, #71	; 0x47
   1a3fe:	d000      	beq.n	1a402 <_vfprintf_r+0x148a>
   1a400:	e5f2      	b.n	19fe8 <_vfprintf_r+0x1070>
   1a402:	07e3      	lsls	r3, r4, #31
   1a404:	d400      	bmi.n	1a408 <_vfprintf_r+0x1490>
   1a406:	e0dc      	b.n	1a5c2 <_vfprintf_r+0x164a>
   1a408:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a40a:	4698      	mov	r8, r3
   1a40c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a40e:	44a8      	add	r8, r5
   1a410:	2b46      	cmp	r3, #70	; 0x46
   1a412:	d093      	beq.n	1a33c <_vfprintf_r+0x13c4>
   1a414:	e5e8      	b.n	19fe8 <_vfprintf_r+0x1070>
   1a416:	ab23      	add	r3, sp, #140	; 0x8c
   1a418:	931b      	str	r3, [sp, #108]	; 0x6c
   1a41a:	9304      	str	r3, [sp, #16]
   1a41c:	ab20      	add	r3, sp, #128	; 0x80
   1a41e:	9303      	str	r3, [sp, #12]
   1a420:	ab1f      	add	r3, sp, #124	; 0x7c
   1a422:	9302      	str	r3, [sp, #8]
   1a424:	4653      	mov	r3, sl
   1a426:	9301      	str	r3, [sp, #4]
   1a428:	2303      	movs	r3, #3
   1a42a:	464a      	mov	r2, r9
   1a42c:	9300      	str	r3, [sp, #0]
   1a42e:	9806      	ldr	r0, [sp, #24]
   1a430:	9b08      	ldr	r3, [sp, #32]
   1a432:	f000 fa87 	bl	1a944 <_dtoa_r>
   1a436:	4655      	mov	r5, sl
   1a438:	9011      	str	r0, [sp, #68]	; 0x44
   1a43a:	e7e5      	b.n	1a408 <_vfprintf_r+0x1490>
   1a43c:	003a      	movs	r2, r7
   1a43e:	4659      	mov	r1, fp
   1a440:	9806      	ldr	r0, [sp, #24]
   1a442:	f002 fcd9 	bl	1cdf8 <__sprint_r>
   1a446:	2800      	cmp	r0, #0
   1a448:	d101      	bne.n	1a44e <_vfprintf_r+0x14d6>
   1a44a:	f7ff faab 	bl	199a4 <_vfprintf_r+0xa2c>
   1a44e:	f7ff faab 	bl	199a8 <_vfprintf_r+0xa30>
   1a452:	4642      	mov	r2, r8
   1a454:	9207      	str	r2, [sp, #28]
   1a456:	f7fe fe1b 	bl	19090 <_vfprintf_r+0x118>
   1a45a:	4244      	negs	r4, r0
   1a45c:	3010      	adds	r0, #16
   1a45e:	db00      	blt.n	1a462 <_vfprintf_r+0x14ea>
   1a460:	e0d8      	b.n	1a614 <_vfprintf_r+0x169c>
   1a462:	4805      	ldr	r0, [pc, #20]	; (1a478 <_vfprintf_r+0x1500>)
   1a464:	2610      	movs	r6, #16
   1a466:	0005      	movs	r5, r0
   1a468:	e00c      	b.n	1a484 <_vfprintf_r+0x150c>
   1a46a:	46c0      	nop			; (mov r8, r8)
   1a46c:	0001e0a0 	.word	0x0001e0a0
   1a470:	0001ee08 	.word	0x0001ee08
   1a474:	0001ee3c 	.word	0x0001ee3c
   1a478:	0001ee54 	.word	0x0001ee54
   1a47c:	3208      	adds	r2, #8
   1a47e:	3c10      	subs	r4, #16
   1a480:	2c10      	cmp	r4, #16
   1a482:	dd51      	ble.n	1a528 <_vfprintf_r+0x15b0>
   1a484:	3110      	adds	r1, #16
   1a486:	3301      	adds	r3, #1
   1a488:	6015      	str	r5, [r2, #0]
   1a48a:	6056      	str	r6, [r2, #4]
   1a48c:	60b9      	str	r1, [r7, #8]
   1a48e:	607b      	str	r3, [r7, #4]
   1a490:	2b07      	cmp	r3, #7
   1a492:	ddf3      	ble.n	1a47c <_vfprintf_r+0x1504>
   1a494:	003a      	movs	r2, r7
   1a496:	4659      	mov	r1, fp
   1a498:	9806      	ldr	r0, [sp, #24]
   1a49a:	f002 fcad 	bl	1cdf8 <__sprint_r>
   1a49e:	2800      	cmp	r0, #0
   1a4a0:	d001      	beq.n	1a4a6 <_vfprintf_r+0x152e>
   1a4a2:	f7ff faf9 	bl	19a98 <_vfprintf_r+0xb20>
   1a4a6:	68b9      	ldr	r1, [r7, #8]
   1a4a8:	687b      	ldr	r3, [r7, #4]
   1a4aa:	aa32      	add	r2, sp, #200	; 0xc8
   1a4ac:	e7e7      	b.n	1a47e <_vfprintf_r+0x1506>
   1a4ae:	003a      	movs	r2, r7
   1a4b0:	4659      	mov	r1, fp
   1a4b2:	9806      	ldr	r0, [sp, #24]
   1a4b4:	f002 fca0 	bl	1cdf8 <__sprint_r>
   1a4b8:	2800      	cmp	r0, #0
   1a4ba:	d001      	beq.n	1a4c0 <_vfprintf_r+0x1548>
   1a4bc:	f7ff faec 	bl	19a98 <_vfprintf_r+0xb20>
   1a4c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1a4c2:	68b9      	ldr	r1, [r7, #8]
   1a4c4:	687b      	ldr	r3, [r7, #4]
   1a4c6:	aa32      	add	r2, sp, #200	; 0xc8
   1a4c8:	e62e      	b.n	1a128 <_vfprintf_r+0x11b0>
   1a4ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a4cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a4ce:	4694      	mov	ip, r2
   1a4d0:	4463      	add	r3, ip
   1a4d2:	001a      	movs	r2, r3
   1a4d4:	930e      	str	r3, [sp, #56]	; 0x38
   1a4d6:	e75d      	b.n	1a394 <_vfprintf_r+0x141c>
   1a4d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a4da:	e599      	b.n	1a010 <_vfprintf_r+0x1098>
   1a4dc:	212e      	movs	r1, #46	; 0x2e
   1a4de:	2330      	movs	r3, #48	; 0x30
   1a4e0:	aa16      	add	r2, sp, #88	; 0x58
   1a4e2:	1852      	adds	r2, r2, r1
   1a4e4:	7013      	strb	r3, [r2, #0]
   1a4e6:	002b      	movs	r3, r5
   1a4e8:	aa16      	add	r2, sp, #88	; 0x58
   1a4ea:	3101      	adds	r1, #1
   1a4ec:	3330      	adds	r3, #48	; 0x30
   1a4ee:	1852      	adds	r2, r2, r1
   1a4f0:	7013      	strb	r3, [r2, #0]
   1a4f2:	ab22      	add	r3, sp, #136	; 0x88
   1a4f4:	e6c1      	b.n	1a27a <_vfprintf_r+0x1302>
   1a4f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	db52      	blt.n	1a5a2 <_vfprintf_r+0x162a>
   1a4fc:	ab16      	add	r3, sp, #88	; 0x58
   1a4fe:	7fdb      	ldrb	r3, [r3, #31]
   1a500:	4698      	mov	r8, r3
   1a502:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a504:	2b47      	cmp	r3, #71	; 0x47
   1a506:	dc48      	bgt.n	1a59a <_vfprintf_r+0x1622>
   1a508:	4b4e      	ldr	r3, [pc, #312]	; (1a644 <_vfprintf_r+0x16cc>)
   1a50a:	9311      	str	r3, [sp, #68]	; 0x44
   1a50c:	f7ff f88c 	bl	19628 <_vfprintf_r+0x6b0>
   1a510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a514:	4694      	mov	ip, r2
   1a516:	4463      	add	r3, ip
   1a518:	4453      	add	r3, sl
   1a51a:	001a      	movs	r2, r3
   1a51c:	930e      	str	r3, [sp, #56]	; 0x38
   1a51e:	43db      	mvns	r3, r3
   1a520:	17db      	asrs	r3, r3, #31
   1a522:	401a      	ands	r2, r3
   1a524:	9208      	str	r2, [sp, #32]
   1a526:	e595      	b.n	1a054 <_vfprintf_r+0x10dc>
   1a528:	46a9      	mov	r9, r5
   1a52a:	4648      	mov	r0, r9
   1a52c:	1909      	adds	r1, r1, r4
   1a52e:	3301      	adds	r3, #1
   1a530:	6010      	str	r0, [r2, #0]
   1a532:	6054      	str	r4, [r2, #4]
   1a534:	60b9      	str	r1, [r7, #8]
   1a536:	3208      	adds	r2, #8
   1a538:	607b      	str	r3, [r7, #4]
   1a53a:	2b07      	cmp	r3, #7
   1a53c:	dc00      	bgt.n	1a540 <_vfprintf_r+0x15c8>
   1a53e:	e5f6      	b.n	1a12e <_vfprintf_r+0x11b6>
   1a540:	003a      	movs	r2, r7
   1a542:	4659      	mov	r1, fp
   1a544:	9806      	ldr	r0, [sp, #24]
   1a546:	f002 fc57 	bl	1cdf8 <__sprint_r>
   1a54a:	2800      	cmp	r0, #0
   1a54c:	d001      	beq.n	1a552 <_vfprintf_r+0x15da>
   1a54e:	f7ff faa3 	bl	19a98 <_vfprintf_r+0xb20>
   1a552:	68b9      	ldr	r1, [r7, #8]
   1a554:	687b      	ldr	r3, [r7, #4]
   1a556:	aa32      	add	r2, sp, #200	; 0xc8
   1a558:	e5e9      	b.n	1a12e <_vfprintf_r+0x11b6>
   1a55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a55c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a55e:	1a98      	subs	r0, r3, r2
   1a560:	1c43      	adds	r3, r0, #1
   1a562:	001a      	movs	r2, r3
   1a564:	930e      	str	r3, [sp, #56]	; 0x38
   1a566:	e715      	b.n	1a394 <_vfprintf_r+0x141c>
   1a568:	4a37      	ldr	r2, [pc, #220]	; (1a648 <_vfprintf_r+0x16d0>)
   1a56a:	687b      	ldr	r3, [r7, #4]
   1a56c:	4691      	mov	r9, r2
   1a56e:	f7ff fbf5 	bl	19d5c <_vfprintf_r+0xde4>
   1a572:	2301      	movs	r3, #1
   1a574:	4023      	ands	r3, r4
   1a576:	9313      	str	r3, [sp, #76]	; 0x4c
   1a578:	d000      	beq.n	1a57c <_vfprintf_r+0x1604>
   1a57a:	e689      	b.n	1a290 <_vfprintf_r+0x1318>
   1a57c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a57e:	43d3      	mvns	r3, r2
   1a580:	17db      	asrs	r3, r3, #31
   1a582:	401a      	ands	r2, r3
   1a584:	9208      	str	r2, [sp, #32]
   1a586:	e565      	b.n	1a054 <_vfprintf_r+0x10dc>
   1a588:	2301      	movs	r3, #1
   1a58a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a58c:	391b      	subs	r1, #27
   1a58e:	1a9d      	subs	r5, r3, r2
   1a590:	aa16      	add	r2, sp, #88	; 0x58
   1a592:	332c      	adds	r3, #44	; 0x2c
   1a594:	1852      	adds	r2, r2, r1
   1a596:	7013      	strb	r3, [r2, #0]
   1a598:	e62f      	b.n	1a1fa <_vfprintf_r+0x1282>
   1a59a:	4b2c      	ldr	r3, [pc, #176]	; (1a64c <_vfprintf_r+0x16d4>)
   1a59c:	9311      	str	r3, [sp, #68]	; 0x44
   1a59e:	f7ff f843 	bl	19628 <_vfprintf_r+0x6b0>
   1a5a2:	232d      	movs	r3, #45	; 0x2d
   1a5a4:	aa16      	add	r2, sp, #88	; 0x58
   1a5a6:	77d3      	strb	r3, [r2, #31]
   1a5a8:	4698      	mov	r8, r3
   1a5aa:	e7aa      	b.n	1a502 <_vfprintf_r+0x158a>
   1a5ac:	4653      	mov	r3, sl
   1a5ae:	2b00      	cmp	r3, #0
   1a5b0:	d101      	bne.n	1a5b6 <_vfprintf_r+0x163e>
   1a5b2:	07e3      	lsls	r3, r4, #31
   1a5b4:	d503      	bpl.n	1a5be <_vfprintf_r+0x1646>
   1a5b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a5b8:	1c58      	adds	r0, r3, #1
   1a5ba:	0003      	movs	r3, r0
   1a5bc:	e7ac      	b.n	1a518 <_vfprintf_r+0x15a0>
   1a5be:	2301      	movs	r3, #1
   1a5c0:	e708      	b.n	1a3d4 <_vfprintf_r+0x145c>
   1a5c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a5c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a5c6:	1a9b      	subs	r3, r3, r2
   1a5c8:	9314      	str	r3, [sp, #80]	; 0x50
   1a5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a5cc:	2b47      	cmp	r3, #71	; 0x47
   1a5ce:	d100      	bne.n	1a5d2 <_vfprintf_r+0x165a>
   1a5d0:	e5f6      	b.n	1a1c0 <_vfprintf_r+0x1248>
   1a5d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a5d4:	9313      	str	r3, [sp, #76]	; 0x4c
   1a5d6:	e5fd      	b.n	1a1d4 <_vfprintf_r+0x125c>
   1a5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a5da:	1d1d      	adds	r5, r3, #4
   1a5dc:	681b      	ldr	r3, [r3, #0]
   1a5de:	46a8      	mov	r8, r5
   1a5e0:	469a      	mov	sl, r3
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	db0a      	blt.n	1a5fc <_vfprintf_r+0x1684>
   1a5e6:	4645      	mov	r5, r8
   1a5e8:	9b07      	ldr	r3, [sp, #28]
   1a5ea:	950f      	str	r5, [sp, #60]	; 0x3c
   1a5ec:	785b      	ldrb	r3, [r3, #1]
   1a5ee:	9207      	str	r2, [sp, #28]
   1a5f0:	f7fe fd4b 	bl	1908a <_vfprintf_r+0x112>
   1a5f4:	ab16      	add	r3, sp, #88	; 0x58
   1a5f6:	77d8      	strb	r0, [r3, #31]
   1a5f8:	f7ff f830 	bl	1965c <_vfprintf_r+0x6e4>
   1a5fc:	2301      	movs	r3, #1
   1a5fe:	425b      	negs	r3, r3
   1a600:	469a      	mov	sl, r3
   1a602:	e7f0      	b.n	1a5e6 <_vfprintf_r+0x166e>
   1a604:	ab16      	add	r3, sp, #88	; 0x58
   1a606:	77d8      	strb	r0, [r3, #31]
   1a608:	f7fe ff27 	bl	1945a <_vfprintf_r+0x4e2>
   1a60c:	ab16      	add	r3, sp, #88	; 0x58
   1a60e:	77d8      	strb	r0, [r3, #31]
   1a610:	f7fe fdce 	bl	191b0 <_vfprintf_r+0x238>
   1a614:	480c      	ldr	r0, [pc, #48]	; (1a648 <_vfprintf_r+0x16d0>)
   1a616:	4681      	mov	r9, r0
   1a618:	e787      	b.n	1a52a <_vfprintf_r+0x15b2>
   1a61a:	ab16      	add	r3, sp, #88	; 0x58
   1a61c:	77d8      	strb	r0, [r3, #31]
   1a61e:	f7ff f829 	bl	19674 <_vfprintf_r+0x6fc>
   1a622:	ab16      	add	r3, sp, #88	; 0x58
   1a624:	77d8      	strb	r0, [r3, #31]
   1a626:	f7fe ffc3 	bl	195b0 <_vfprintf_r+0x638>
   1a62a:	ab16      	add	r3, sp, #88	; 0x58
   1a62c:	77d8      	strb	r0, [r3, #31]
   1a62e:	f7fe ffa5 	bl	1957c <_vfprintf_r+0x604>
   1a632:	ab16      	add	r3, sp, #88	; 0x58
   1a634:	77d8      	strb	r0, [r3, #31]
   1a636:	f7fe feaf 	bl	19398 <_vfprintf_r+0x420>
   1a63a:	aa16      	add	r2, sp, #88	; 0x58
   1a63c:	232e      	movs	r3, #46	; 0x2e
   1a63e:	4694      	mov	ip, r2
   1a640:	4463      	add	r3, ip
   1a642:	e61a      	b.n	1a27a <_vfprintf_r+0x1302>
   1a644:	0001ee0c 	.word	0x0001ee0c
   1a648:	0001ee54 	.word	0x0001ee54
   1a64c:	0001ee10 	.word	0x0001ee10

0001a650 <__sbprintf>:
   1a650:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a652:	0015      	movs	r5, r2
   1a654:	2202      	movs	r2, #2
   1a656:	4c1e      	ldr	r4, [pc, #120]	; (1a6d0 <__sbprintf+0x80>)
   1a658:	001f      	movs	r7, r3
   1a65a:	898b      	ldrh	r3, [r1, #12]
   1a65c:	44a5      	add	sp, r4
   1a65e:	4393      	bics	r3, r2
   1a660:	466a      	mov	r2, sp
   1a662:	8193      	strh	r3, [r2, #12]
   1a664:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1a666:	0006      	movs	r6, r0
   1a668:	9319      	str	r3, [sp, #100]	; 0x64
   1a66a:	89cb      	ldrh	r3, [r1, #14]
   1a66c:	a816      	add	r0, sp, #88	; 0x58
   1a66e:	81d3      	strh	r3, [r2, #14]
   1a670:	69cb      	ldr	r3, [r1, #28]
   1a672:	000c      	movs	r4, r1
   1a674:	9307      	str	r3, [sp, #28]
   1a676:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1a678:	9309      	str	r3, [sp, #36]	; 0x24
   1a67a:	ab1a      	add	r3, sp, #104	; 0x68
   1a67c:	9300      	str	r3, [sp, #0]
   1a67e:	9304      	str	r3, [sp, #16]
   1a680:	2380      	movs	r3, #128	; 0x80
   1a682:	00db      	lsls	r3, r3, #3
   1a684:	9302      	str	r3, [sp, #8]
   1a686:	9305      	str	r3, [sp, #20]
   1a688:	2300      	movs	r3, #0
   1a68a:	9306      	str	r3, [sp, #24]
   1a68c:	f001 fd5e 	bl	1c14c <__retarget_lock_init_recursive>
   1a690:	002a      	movs	r2, r5
   1a692:	003b      	movs	r3, r7
   1a694:	4669      	mov	r1, sp
   1a696:	0030      	movs	r0, r6
   1a698:	f7fe fc6e 	bl	18f78 <_vfprintf_r>
   1a69c:	1e05      	subs	r5, r0, #0
   1a69e:	db05      	blt.n	1a6ac <__sbprintf+0x5c>
   1a6a0:	4669      	mov	r1, sp
   1a6a2:	0030      	movs	r0, r6
   1a6a4:	f001 f9ba 	bl	1ba1c <_fflush_r>
   1a6a8:	2800      	cmp	r0, #0
   1a6aa:	d10e      	bne.n	1a6ca <__sbprintf+0x7a>
   1a6ac:	466b      	mov	r3, sp
   1a6ae:	899b      	ldrh	r3, [r3, #12]
   1a6b0:	065b      	lsls	r3, r3, #25
   1a6b2:	d503      	bpl.n	1a6bc <__sbprintf+0x6c>
   1a6b4:	2240      	movs	r2, #64	; 0x40
   1a6b6:	89a3      	ldrh	r3, [r4, #12]
   1a6b8:	4313      	orrs	r3, r2
   1a6ba:	81a3      	strh	r3, [r4, #12]
   1a6bc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a6be:	f001 fd47 	bl	1c150 <__retarget_lock_close_recursive>
   1a6c2:	0028      	movs	r0, r5
   1a6c4:	4b03      	ldr	r3, [pc, #12]	; (1a6d4 <__sbprintf+0x84>)
   1a6c6:	449d      	add	sp, r3
   1a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a6ca:	2501      	movs	r5, #1
   1a6cc:	426d      	negs	r5, r5
   1a6ce:	e7ed      	b.n	1a6ac <__sbprintf+0x5c>
   1a6d0:	fffffb94 	.word	0xfffffb94
   1a6d4:	0000046c 	.word	0x0000046c

0001a6d8 <__ascii_wctomb>:
   1a6d8:	2900      	cmp	r1, #0
   1a6da:	d004      	beq.n	1a6e6 <__ascii_wctomb+0xe>
   1a6dc:	2aff      	cmp	r2, #255	; 0xff
   1a6de:	d804      	bhi.n	1a6ea <__ascii_wctomb+0x12>
   1a6e0:	2001      	movs	r0, #1
   1a6e2:	700a      	strb	r2, [r1, #0]
   1a6e4:	4770      	bx	lr
   1a6e6:	2000      	movs	r0, #0
   1a6e8:	e7fc      	b.n	1a6e4 <__ascii_wctomb+0xc>
   1a6ea:	238a      	movs	r3, #138	; 0x8a
   1a6ec:	6003      	str	r3, [r0, #0]
   1a6ee:	2001      	movs	r0, #1
   1a6f0:	4240      	negs	r0, r0
   1a6f2:	e7f7      	b.n	1a6e4 <__ascii_wctomb+0xc>

0001a6f4 <__swsetup_r>:
   1a6f4:	4b33      	ldr	r3, [pc, #204]	; (1a7c4 <__swsetup_r+0xd0>)
   1a6f6:	b570      	push	{r4, r5, r6, lr}
   1a6f8:	0005      	movs	r5, r0
   1a6fa:	6818      	ldr	r0, [r3, #0]
   1a6fc:	000c      	movs	r4, r1
   1a6fe:	2800      	cmp	r0, #0
   1a700:	d002      	beq.n	1a708 <__swsetup_r+0x14>
   1a702:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a704:	2b00      	cmp	r3, #0
   1a706:	d03c      	beq.n	1a782 <__swsetup_r+0x8e>
   1a708:	230c      	movs	r3, #12
   1a70a:	5ee2      	ldrsh	r2, [r4, r3]
   1a70c:	b293      	uxth	r3, r2
   1a70e:	0719      	lsls	r1, r3, #28
   1a710:	d50d      	bpl.n	1a72e <__swsetup_r+0x3a>
   1a712:	6921      	ldr	r1, [r4, #16]
   1a714:	2900      	cmp	r1, #0
   1a716:	d015      	beq.n	1a744 <__swsetup_r+0x50>
   1a718:	07da      	lsls	r2, r3, #31
   1a71a:	d521      	bpl.n	1a760 <__swsetup_r+0x6c>
   1a71c:	2300      	movs	r3, #0
   1a71e:	60a3      	str	r3, [r4, #8]
   1a720:	6963      	ldr	r3, [r4, #20]
   1a722:	2000      	movs	r0, #0
   1a724:	425b      	negs	r3, r3
   1a726:	61a3      	str	r3, [r4, #24]
   1a728:	2900      	cmp	r1, #0
   1a72a:	d021      	beq.n	1a770 <__swsetup_r+0x7c>
   1a72c:	bd70      	pop	{r4, r5, r6, pc}
   1a72e:	06d9      	lsls	r1, r3, #27
   1a730:	d53f      	bpl.n	1a7b2 <__swsetup_r+0xbe>
   1a732:	075b      	lsls	r3, r3, #29
   1a734:	d428      	bmi.n	1a788 <__swsetup_r+0x94>
   1a736:	6921      	ldr	r1, [r4, #16]
   1a738:	2308      	movs	r3, #8
   1a73a:	4313      	orrs	r3, r2
   1a73c:	81a3      	strh	r3, [r4, #12]
   1a73e:	b29b      	uxth	r3, r3
   1a740:	2900      	cmp	r1, #0
   1a742:	d1e9      	bne.n	1a718 <__swsetup_r+0x24>
   1a744:	22a0      	movs	r2, #160	; 0xa0
   1a746:	2080      	movs	r0, #128	; 0x80
   1a748:	0092      	lsls	r2, r2, #2
   1a74a:	0080      	lsls	r0, r0, #2
   1a74c:	401a      	ands	r2, r3
   1a74e:	4282      	cmp	r2, r0
   1a750:	d0e2      	beq.n	1a718 <__swsetup_r+0x24>
   1a752:	0021      	movs	r1, r4
   1a754:	0028      	movs	r0, r5
   1a756:	f001 fd31 	bl	1c1bc <__smakebuf_r>
   1a75a:	89a3      	ldrh	r3, [r4, #12]
   1a75c:	6921      	ldr	r1, [r4, #16]
   1a75e:	e7db      	b.n	1a718 <__swsetup_r+0x24>
   1a760:	2200      	movs	r2, #0
   1a762:	079b      	lsls	r3, r3, #30
   1a764:	d400      	bmi.n	1a768 <__swsetup_r+0x74>
   1a766:	6962      	ldr	r2, [r4, #20]
   1a768:	60a2      	str	r2, [r4, #8]
   1a76a:	2000      	movs	r0, #0
   1a76c:	2900      	cmp	r1, #0
   1a76e:	d1dd      	bne.n	1a72c <__swsetup_r+0x38>
   1a770:	220c      	movs	r2, #12
   1a772:	5ea3      	ldrsh	r3, [r4, r2]
   1a774:	061a      	lsls	r2, r3, #24
   1a776:	d5d9      	bpl.n	1a72c <__swsetup_r+0x38>
   1a778:	2240      	movs	r2, #64	; 0x40
   1a77a:	4313      	orrs	r3, r2
   1a77c:	81a3      	strh	r3, [r4, #12]
   1a77e:	3801      	subs	r0, #1
   1a780:	e7d4      	b.n	1a72c <__swsetup_r+0x38>
   1a782:	f001 f9a5 	bl	1bad0 <__sinit>
   1a786:	e7bf      	b.n	1a708 <__swsetup_r+0x14>
   1a788:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a78a:	2900      	cmp	r1, #0
   1a78c:	d00a      	beq.n	1a7a4 <__swsetup_r+0xb0>
   1a78e:	0023      	movs	r3, r4
   1a790:	3340      	adds	r3, #64	; 0x40
   1a792:	4299      	cmp	r1, r3
   1a794:	d004      	beq.n	1a7a0 <__swsetup_r+0xac>
   1a796:	0028      	movs	r0, r5
   1a798:	f001 fa44 	bl	1bc24 <_free_r>
   1a79c:	230c      	movs	r3, #12
   1a79e:	5ee2      	ldrsh	r2, [r4, r3]
   1a7a0:	2300      	movs	r3, #0
   1a7a2:	6323      	str	r3, [r4, #48]	; 0x30
   1a7a4:	2324      	movs	r3, #36	; 0x24
   1a7a6:	439a      	bics	r2, r3
   1a7a8:	2300      	movs	r3, #0
   1a7aa:	6921      	ldr	r1, [r4, #16]
   1a7ac:	6063      	str	r3, [r4, #4]
   1a7ae:	6021      	str	r1, [r4, #0]
   1a7b0:	e7c2      	b.n	1a738 <__swsetup_r+0x44>
   1a7b2:	2309      	movs	r3, #9
   1a7b4:	602b      	str	r3, [r5, #0]
   1a7b6:	2340      	movs	r3, #64	; 0x40
   1a7b8:	2001      	movs	r0, #1
   1a7ba:	431a      	orrs	r2, r3
   1a7bc:	81a2      	strh	r2, [r4, #12]
   1a7be:	4240      	negs	r0, r0
   1a7c0:	e7b4      	b.n	1a72c <__swsetup_r+0x38>
   1a7c2:	46c0      	nop			; (mov r8, r8)
   1a7c4:	2000001c 	.word	0x2000001c

0001a7c8 <register_fini>:
   1a7c8:	4b03      	ldr	r3, [pc, #12]	; (1a7d8 <register_fini+0x10>)
   1a7ca:	b510      	push	{r4, lr}
   1a7cc:	2b00      	cmp	r3, #0
   1a7ce:	d002      	beq.n	1a7d6 <register_fini+0xe>
   1a7d0:	4802      	ldr	r0, [pc, #8]	; (1a7dc <register_fini+0x14>)
   1a7d2:	f000 f805 	bl	1a7e0 <atexit>
   1a7d6:	bd10      	pop	{r4, pc}
   1a7d8:	00000000 	.word	0x00000000
   1a7dc:	0001bb51 	.word	0x0001bb51

0001a7e0 <atexit>:
   1a7e0:	b510      	push	{r4, lr}
   1a7e2:	0001      	movs	r1, r0
   1a7e4:	2300      	movs	r3, #0
   1a7e6:	2200      	movs	r2, #0
   1a7e8:	2000      	movs	r0, #0
   1a7ea:	f002 fb23 	bl	1ce34 <__register_exitproc>
   1a7ee:	bd10      	pop	{r4, pc}

0001a7f0 <quorem>:
   1a7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7f2:	4645      	mov	r5, r8
   1a7f4:	4680      	mov	r8, r0
   1a7f6:	46de      	mov	lr, fp
   1a7f8:	4657      	mov	r7, sl
   1a7fa:	464e      	mov	r6, r9
   1a7fc:	4642      	mov	r2, r8
   1a7fe:	b5e0      	push	{r5, r6, r7, lr}
   1a800:	690c      	ldr	r4, [r1, #16]
   1a802:	6912      	ldr	r2, [r2, #16]
   1a804:	b085      	sub	sp, #20
   1a806:	000b      	movs	r3, r1
   1a808:	9102      	str	r1, [sp, #8]
   1a80a:	2000      	movs	r0, #0
   1a80c:	4294      	cmp	r4, r2
   1a80e:	dd00      	ble.n	1a812 <quorem+0x22>
   1a810:	e090      	b.n	1a934 <quorem+0x144>
   1a812:	2214      	movs	r2, #20
   1a814:	4694      	mov	ip, r2
   1a816:	4463      	add	r3, ip
   1a818:	4699      	mov	r9, r3
   1a81a:	464a      	mov	r2, r9
   1a81c:	3c01      	subs	r4, #1
   1a81e:	00a3      	lsls	r3, r4, #2
   1a820:	18d6      	adds	r6, r2, r3
   1a822:	2214      	movs	r2, #20
   1a824:	4442      	add	r2, r8
   1a826:	4693      	mov	fp, r2
   1a828:	449b      	add	fp, r3
   1a82a:	6833      	ldr	r3, [r6, #0]
   1a82c:	0015      	movs	r5, r2
   1a82e:	1c59      	adds	r1, r3, #1
   1a830:	465b      	mov	r3, fp
   1a832:	6818      	ldr	r0, [r3, #0]
   1a834:	9201      	str	r2, [sp, #4]
   1a836:	f7fa fb8b 	bl	14f50 <__udivsi3>
   1a83a:	1e03      	subs	r3, r0, #0
   1a83c:	9000      	str	r0, [sp, #0]
   1a83e:	d042      	beq.n	1a8c6 <quorem+0xd6>
   1a840:	0029      	movs	r1, r5
   1a842:	2700      	movs	r7, #0
   1a844:	464d      	mov	r5, r9
   1a846:	2000      	movs	r0, #0
   1a848:	46b1      	mov	r9, r6
   1a84a:	46a2      	mov	sl, r4
   1a84c:	003e      	movs	r6, r7
   1a84e:	0004      	movs	r4, r0
   1a850:	469c      	mov	ip, r3
   1a852:	002f      	movs	r7, r5
   1a854:	0008      	movs	r0, r1
   1a856:	9503      	str	r5, [sp, #12]
   1a858:	4663      	mov	r3, ip
   1a85a:	cf04      	ldmia	r7!, {r2}
   1a85c:	0415      	lsls	r5, r2, #16
   1a85e:	0c2d      	lsrs	r5, r5, #16
   1a860:	435d      	muls	r5, r3
   1a862:	0c12      	lsrs	r2, r2, #16
   1a864:	435a      	muls	r2, r3
   1a866:	19ad      	adds	r5, r5, r6
   1a868:	0c2b      	lsrs	r3, r5, #16
   1a86a:	18d2      	adds	r2, r2, r3
   1a86c:	6803      	ldr	r3, [r0, #0]
   1a86e:	042d      	lsls	r5, r5, #16
   1a870:	0419      	lsls	r1, r3, #16
   1a872:	0c09      	lsrs	r1, r1, #16
   1a874:	1909      	adds	r1, r1, r4
   1a876:	0c16      	lsrs	r6, r2, #16
   1a878:	0c2d      	lsrs	r5, r5, #16
   1a87a:	0412      	lsls	r2, r2, #16
   1a87c:	1b49      	subs	r1, r1, r5
   1a87e:	0c12      	lsrs	r2, r2, #16
   1a880:	0c1b      	lsrs	r3, r3, #16
   1a882:	1a9b      	subs	r3, r3, r2
   1a884:	140a      	asrs	r2, r1, #16
   1a886:	189b      	adds	r3, r3, r2
   1a888:	0409      	lsls	r1, r1, #16
   1a88a:	141c      	asrs	r4, r3, #16
   1a88c:	0c09      	lsrs	r1, r1, #16
   1a88e:	041b      	lsls	r3, r3, #16
   1a890:	4319      	orrs	r1, r3
   1a892:	c002      	stmia	r0!, {r1}
   1a894:	45b9      	cmp	r9, r7
   1a896:	d2df      	bcs.n	1a858 <quorem+0x68>
   1a898:	9b03      	ldr	r3, [sp, #12]
   1a89a:	464e      	mov	r6, r9
   1a89c:	4699      	mov	r9, r3
   1a89e:	465b      	mov	r3, fp
   1a8a0:	681b      	ldr	r3, [r3, #0]
   1a8a2:	4654      	mov	r4, sl
   1a8a4:	2b00      	cmp	r3, #0
   1a8a6:	d10e      	bne.n	1a8c6 <quorem+0xd6>
   1a8a8:	465b      	mov	r3, fp
   1a8aa:	9a01      	ldr	r2, [sp, #4]
   1a8ac:	3b04      	subs	r3, #4
   1a8ae:	429a      	cmp	r2, r3
   1a8b0:	d304      	bcc.n	1a8bc <quorem+0xcc>
   1a8b2:	e006      	b.n	1a8c2 <quorem+0xd2>
   1a8b4:	3b04      	subs	r3, #4
   1a8b6:	3c01      	subs	r4, #1
   1a8b8:	429a      	cmp	r2, r3
   1a8ba:	d202      	bcs.n	1a8c2 <quorem+0xd2>
   1a8bc:	6819      	ldr	r1, [r3, #0]
   1a8be:	2900      	cmp	r1, #0
   1a8c0:	d0f8      	beq.n	1a8b4 <quorem+0xc4>
   1a8c2:	4643      	mov	r3, r8
   1a8c4:	611c      	str	r4, [r3, #16]
   1a8c6:	9902      	ldr	r1, [sp, #8]
   1a8c8:	4640      	mov	r0, r8
   1a8ca:	f001 ff33 	bl	1c734 <__mcmp>
   1a8ce:	2800      	cmp	r0, #0
   1a8d0:	db2f      	blt.n	1a932 <quorem+0x142>
   1a8d2:	464f      	mov	r7, r9
   1a8d4:	2000      	movs	r0, #0
   1a8d6:	9b00      	ldr	r3, [sp, #0]
   1a8d8:	9d01      	ldr	r5, [sp, #4]
   1a8da:	3301      	adds	r3, #1
   1a8dc:	9300      	str	r3, [sp, #0]
   1a8de:	682b      	ldr	r3, [r5, #0]
   1a8e0:	cf02      	ldmia	r7!, {r1}
   1a8e2:	041a      	lsls	r2, r3, #16
   1a8e4:	0c12      	lsrs	r2, r2, #16
   1a8e6:	1810      	adds	r0, r2, r0
   1a8e8:	040a      	lsls	r2, r1, #16
   1a8ea:	0c12      	lsrs	r2, r2, #16
   1a8ec:	1a82      	subs	r2, r0, r2
   1a8ee:	0c09      	lsrs	r1, r1, #16
   1a8f0:	0c1b      	lsrs	r3, r3, #16
   1a8f2:	1a5b      	subs	r3, r3, r1
   1a8f4:	1411      	asrs	r1, r2, #16
   1a8f6:	185b      	adds	r3, r3, r1
   1a8f8:	0412      	lsls	r2, r2, #16
   1a8fa:	1418      	asrs	r0, r3, #16
   1a8fc:	0c12      	lsrs	r2, r2, #16
   1a8fe:	041b      	lsls	r3, r3, #16
   1a900:	4313      	orrs	r3, r2
   1a902:	c508      	stmia	r5!, {r3}
   1a904:	42be      	cmp	r6, r7
   1a906:	d2ea      	bcs.n	1a8de <quorem+0xee>
   1a908:	9901      	ldr	r1, [sp, #4]
   1a90a:	00a3      	lsls	r3, r4, #2
   1a90c:	468c      	mov	ip, r1
   1a90e:	4463      	add	r3, ip
   1a910:	681a      	ldr	r2, [r3, #0]
   1a912:	2a00      	cmp	r2, #0
   1a914:	d10d      	bne.n	1a932 <quorem+0x142>
   1a916:	3b04      	subs	r3, #4
   1a918:	000a      	movs	r2, r1
   1a91a:	4299      	cmp	r1, r3
   1a91c:	d304      	bcc.n	1a928 <quorem+0x138>
   1a91e:	e006      	b.n	1a92e <quorem+0x13e>
   1a920:	3b04      	subs	r3, #4
   1a922:	3c01      	subs	r4, #1
   1a924:	429a      	cmp	r2, r3
   1a926:	d202      	bcs.n	1a92e <quorem+0x13e>
   1a928:	6819      	ldr	r1, [r3, #0]
   1a92a:	2900      	cmp	r1, #0
   1a92c:	d0f8      	beq.n	1a920 <quorem+0x130>
   1a92e:	4643      	mov	r3, r8
   1a930:	611c      	str	r4, [r3, #16]
   1a932:	9800      	ldr	r0, [sp, #0]
   1a934:	b005      	add	sp, #20
   1a936:	bc3c      	pop	{r2, r3, r4, r5}
   1a938:	4690      	mov	r8, r2
   1a93a:	4699      	mov	r9, r3
   1a93c:	46a2      	mov	sl, r4
   1a93e:	46ab      	mov	fp, r5
   1a940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a942:	46c0      	nop			; (mov r8, r8)

0001a944 <_dtoa_r>:
   1a944:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a946:	4657      	mov	r7, sl
   1a948:	464e      	mov	r6, r9
   1a94a:	4645      	mov	r5, r8
   1a94c:	46de      	mov	lr, fp
   1a94e:	b5e0      	push	{r5, r6, r7, lr}
   1a950:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1a952:	b099      	sub	sp, #100	; 0x64
   1a954:	4682      	mov	sl, r0
   1a956:	001d      	movs	r5, r3
   1a958:	0016      	movs	r6, r2
   1a95a:	001f      	movs	r7, r3
   1a95c:	2900      	cmp	r1, #0
   1a95e:	d009      	beq.n	1a974 <_dtoa_r+0x30>
   1a960:	2301      	movs	r3, #1
   1a962:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a964:	4093      	lsls	r3, r2
   1a966:	604a      	str	r2, [r1, #4]
   1a968:	608b      	str	r3, [r1, #8]
   1a96a:	f001 fcd7 	bl	1c31c <_Bfree>
   1a96e:	2300      	movs	r3, #0
   1a970:	4652      	mov	r2, sl
   1a972:	6413      	str	r3, [r2, #64]	; 0x40
   1a974:	46b8      	mov	r8, r7
   1a976:	2f00      	cmp	r7, #0
   1a978:	db37      	blt.n	1a9ea <_dtoa_r+0xa6>
   1a97a:	2300      	movs	r3, #0
   1a97c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a97e:	6013      	str	r3, [r2, #0]
   1a980:	4642      	mov	r2, r8
   1a982:	4bd6      	ldr	r3, [pc, #856]	; (1acdc <_dtoa_r+0x398>)
   1a984:	401a      	ands	r2, r3
   1a986:	429a      	cmp	r2, r3
   1a988:	d018      	beq.n	1a9bc <_dtoa_r+0x78>
   1a98a:	2200      	movs	r2, #0
   1a98c:	2300      	movs	r3, #0
   1a98e:	0030      	movs	r0, r6
   1a990:	0039      	movs	r1, r7
   1a992:	f7fa fc63 	bl	1525c <__aeabi_dcmpeq>
   1a996:	2800      	cmp	r0, #0
   1a998:	d02f      	beq.n	1a9fa <_dtoa_r+0xb6>
   1a99a:	2301      	movs	r3, #1
   1a99c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a99e:	6013      	str	r3, [r2, #0]
   1a9a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a9a2:	2b00      	cmp	r3, #0
   1a9a4:	d100      	bne.n	1a9a8 <_dtoa_r+0x64>
   1a9a6:	e22a      	b.n	1adfe <_dtoa_r+0x4ba>
   1a9a8:	48cd      	ldr	r0, [pc, #820]	; (1ace0 <_dtoa_r+0x39c>)
   1a9aa:	6018      	str	r0, [r3, #0]
   1a9ac:	3801      	subs	r0, #1
   1a9ae:	b019      	add	sp, #100	; 0x64
   1a9b0:	bc3c      	pop	{r2, r3, r4, r5}
   1a9b2:	4690      	mov	r8, r2
   1a9b4:	4699      	mov	r9, r3
   1a9b6:	46a2      	mov	sl, r4
   1a9b8:	46ab      	mov	fp, r5
   1a9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9bc:	4bc9      	ldr	r3, [pc, #804]	; (1ace4 <_dtoa_r+0x3a0>)
   1a9be:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a9c0:	6013      	str	r3, [r2, #0]
   1a9c2:	2e00      	cmp	r6, #0
   1a9c4:	d10b      	bne.n	1a9de <_dtoa_r+0x9a>
   1a9c6:	4643      	mov	r3, r8
   1a9c8:	0318      	lsls	r0, r3, #12
   1a9ca:	d108      	bne.n	1a9de <_dtoa_r+0x9a>
   1a9cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a9ce:	48c6      	ldr	r0, [pc, #792]	; (1ace8 <_dtoa_r+0x3a4>)
   1a9d0:	2b00      	cmp	r3, #0
   1a9d2:	d0ec      	beq.n	1a9ae <_dtoa_r+0x6a>
   1a9d4:	0003      	movs	r3, r0
   1a9d6:	3308      	adds	r3, #8
   1a9d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a9da:	6013      	str	r3, [r2, #0]
   1a9dc:	e7e7      	b.n	1a9ae <_dtoa_r+0x6a>
   1a9de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a9e0:	48c2      	ldr	r0, [pc, #776]	; (1acec <_dtoa_r+0x3a8>)
   1a9e2:	2b00      	cmp	r3, #0
   1a9e4:	d0e3      	beq.n	1a9ae <_dtoa_r+0x6a>
   1a9e6:	1cc3      	adds	r3, r0, #3
   1a9e8:	e7f6      	b.n	1a9d8 <_dtoa_r+0x94>
   1a9ea:	2301      	movs	r3, #1
   1a9ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a9ee:	0068      	lsls	r0, r5, #1
   1a9f0:	6013      	str	r3, [r2, #0]
   1a9f2:	0843      	lsrs	r3, r0, #1
   1a9f4:	4698      	mov	r8, r3
   1a9f6:	001f      	movs	r7, r3
   1a9f8:	e7c2      	b.n	1a980 <_dtoa_r+0x3c>
   1a9fa:	ab16      	add	r3, sp, #88	; 0x58
   1a9fc:	9301      	str	r3, [sp, #4]
   1a9fe:	ab17      	add	r3, sp, #92	; 0x5c
   1aa00:	9300      	str	r3, [sp, #0]
   1aa02:	0032      	movs	r2, r6
   1aa04:	003b      	movs	r3, r7
   1aa06:	4650      	mov	r0, sl
   1aa08:	f001 ff4a 	bl	1c8a0 <__d2b>
   1aa0c:	4643      	mov	r3, r8
   1aa0e:	4683      	mov	fp, r0
   1aa10:	0d1a      	lsrs	r2, r3, #20
   1aa12:	d100      	bne.n	1aa16 <_dtoa_r+0xd2>
   1aa14:	e1d6      	b.n	1adc4 <_dtoa_r+0x480>
   1aa16:	033b      	lsls	r3, r7, #12
   1aa18:	4cb5      	ldr	r4, [pc, #724]	; (1acf0 <_dtoa_r+0x3ac>)
   1aa1a:	0b1b      	lsrs	r3, r3, #12
   1aa1c:	431c      	orrs	r4, r3
   1aa1e:	4bb5      	ldr	r3, [pc, #724]	; (1acf4 <_dtoa_r+0x3b0>)
   1aa20:	0030      	movs	r0, r6
   1aa22:	4698      	mov	r8, r3
   1aa24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1aa26:	0021      	movs	r1, r4
   1aa28:	4699      	mov	r9, r3
   1aa2a:	2300      	movs	r3, #0
   1aa2c:	4490      	add	r8, r2
   1aa2e:	930f      	str	r3, [sp, #60]	; 0x3c
   1aa30:	2200      	movs	r2, #0
   1aa32:	4bb1      	ldr	r3, [pc, #708]	; (1acf8 <_dtoa_r+0x3b4>)
   1aa34:	f7fc fe92 	bl	1775c <__aeabi_dsub>
   1aa38:	4ab0      	ldr	r2, [pc, #704]	; (1acfc <_dtoa_r+0x3b8>)
   1aa3a:	4bb1      	ldr	r3, [pc, #708]	; (1ad00 <_dtoa_r+0x3bc>)
   1aa3c:	f7fc fc0e 	bl	1725c <__aeabi_dmul>
   1aa40:	4ab0      	ldr	r2, [pc, #704]	; (1ad04 <_dtoa_r+0x3c0>)
   1aa42:	4bb1      	ldr	r3, [pc, #708]	; (1ad08 <_dtoa_r+0x3c4>)
   1aa44:	f7fb fcc6 	bl	163d4 <__aeabi_dadd>
   1aa48:	0004      	movs	r4, r0
   1aa4a:	4640      	mov	r0, r8
   1aa4c:	000d      	movs	r5, r1
   1aa4e:	f7fd f9cf 	bl	17df0 <__aeabi_i2d>
   1aa52:	4aae      	ldr	r2, [pc, #696]	; (1ad0c <_dtoa_r+0x3c8>)
   1aa54:	4bae      	ldr	r3, [pc, #696]	; (1ad10 <_dtoa_r+0x3cc>)
   1aa56:	f7fc fc01 	bl	1725c <__aeabi_dmul>
   1aa5a:	0002      	movs	r2, r0
   1aa5c:	000b      	movs	r3, r1
   1aa5e:	0020      	movs	r0, r4
   1aa60:	0029      	movs	r1, r5
   1aa62:	f7fb fcb7 	bl	163d4 <__aeabi_dadd>
   1aa66:	0004      	movs	r4, r0
   1aa68:	000d      	movs	r5, r1
   1aa6a:	f7fd f98d 	bl	17d88 <__aeabi_d2iz>
   1aa6e:	2200      	movs	r2, #0
   1aa70:	9003      	str	r0, [sp, #12]
   1aa72:	2300      	movs	r3, #0
   1aa74:	0020      	movs	r0, r4
   1aa76:	0029      	movs	r1, r5
   1aa78:	f7fa fbf6 	bl	15268 <__aeabi_dcmplt>
   1aa7c:	2800      	cmp	r0, #0
   1aa7e:	d000      	beq.n	1aa82 <_dtoa_r+0x13e>
   1aa80:	e2b1      	b.n	1afe6 <_dtoa_r+0x6a2>
   1aa82:	2301      	movs	r3, #1
   1aa84:	9c03      	ldr	r4, [sp, #12]
   1aa86:	930c      	str	r3, [sp, #48]	; 0x30
   1aa88:	2c16      	cmp	r4, #22
   1aa8a:	d810      	bhi.n	1aaae <_dtoa_r+0x16a>
   1aa8c:	49a1      	ldr	r1, [pc, #644]	; (1ad14 <_dtoa_r+0x3d0>)
   1aa8e:	00e3      	lsls	r3, r4, #3
   1aa90:	18c9      	adds	r1, r1, r3
   1aa92:	0032      	movs	r2, r6
   1aa94:	6808      	ldr	r0, [r1, #0]
   1aa96:	6849      	ldr	r1, [r1, #4]
   1aa98:	003b      	movs	r3, r7
   1aa9a:	f7fa fbf9 	bl	15290 <__aeabi_dcmpgt>
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	d100      	bne.n	1aaa4 <_dtoa_r+0x160>
   1aaa2:	e31d      	b.n	1b0e0 <_dtoa_r+0x79c>
   1aaa4:	0023      	movs	r3, r4
   1aaa6:	3b01      	subs	r3, #1
   1aaa8:	9303      	str	r3, [sp, #12]
   1aaaa:	2300      	movs	r3, #0
   1aaac:	930c      	str	r3, [sp, #48]	; 0x30
   1aaae:	464b      	mov	r3, r9
   1aab0:	4642      	mov	r2, r8
   1aab2:	1a9a      	subs	r2, r3, r2
   1aab4:	2300      	movs	r3, #0
   1aab6:	9306      	str	r3, [sp, #24]
   1aab8:	0013      	movs	r3, r2
   1aaba:	3b01      	subs	r3, #1
   1aabc:	9304      	str	r3, [sp, #16]
   1aabe:	d500      	bpl.n	1aac2 <_dtoa_r+0x17e>
   1aac0:	e2a1      	b.n	1b006 <_dtoa_r+0x6c2>
   1aac2:	9b03      	ldr	r3, [sp, #12]
   1aac4:	2b00      	cmp	r3, #0
   1aac6:	da00      	bge.n	1aaca <_dtoa_r+0x186>
   1aac8:	e284      	b.n	1afd4 <_dtoa_r+0x690>
   1aaca:	469c      	mov	ip, r3
   1aacc:	930d      	str	r3, [sp, #52]	; 0x34
   1aace:	2300      	movs	r3, #0
   1aad0:	9a04      	ldr	r2, [sp, #16]
   1aad2:	4699      	mov	r9, r3
   1aad4:	0011      	movs	r1, r2
   1aad6:	4461      	add	r1, ip
   1aad8:	9104      	str	r1, [sp, #16]
   1aada:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1aadc:	2b09      	cmp	r3, #9
   1aade:	d900      	bls.n	1aae2 <_dtoa_r+0x19e>
   1aae0:	e18f      	b.n	1ae02 <_dtoa_r+0x4be>
   1aae2:	2401      	movs	r4, #1
   1aae4:	2b05      	cmp	r3, #5
   1aae6:	dd02      	ble.n	1aaee <_dtoa_r+0x1aa>
   1aae8:	2400      	movs	r4, #0
   1aaea:	3b04      	subs	r3, #4
   1aaec:	9322      	str	r3, [sp, #136]	; 0x88
   1aaee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1aaf0:	2b03      	cmp	r3, #3
   1aaf2:	d101      	bne.n	1aaf8 <_dtoa_r+0x1b4>
   1aaf4:	f000 fcce 	bl	1b494 <_dtoa_r+0xb50>
   1aaf8:	dc01      	bgt.n	1aafe <_dtoa_r+0x1ba>
   1aafa:	f000 fc92 	bl	1b422 <_dtoa_r+0xade>
   1aafe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ab00:	2b04      	cmp	r3, #4
   1ab02:	d101      	bne.n	1ab08 <_dtoa_r+0x1c4>
   1ab04:	f000 fc40 	bl	1b388 <_dtoa_r+0xa44>
   1ab08:	2301      	movs	r3, #1
   1ab0a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ab0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ab0e:	2b05      	cmp	r3, #5
   1ab10:	d001      	beq.n	1ab16 <_dtoa_r+0x1d2>
   1ab12:	f000 fc8b 	bl	1b42c <_dtoa_r+0xae8>
   1ab16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1ab18:	9b03      	ldr	r3, [sp, #12]
   1ab1a:	4694      	mov	ip, r2
   1ab1c:	4463      	add	r3, ip
   1ab1e:	930e      	str	r3, [sp, #56]	; 0x38
   1ab20:	3301      	adds	r3, #1
   1ab22:	9307      	str	r3, [sp, #28]
   1ab24:	1e1d      	subs	r5, r3, #0
   1ab26:	dc01      	bgt.n	1ab2c <_dtoa_r+0x1e8>
   1ab28:	f000 fd49 	bl	1b5be <_dtoa_r+0xc7a>
   1ab2c:	9b07      	ldr	r3, [sp, #28]
   1ab2e:	4698      	mov	r8, r3
   1ab30:	2300      	movs	r3, #0
   1ab32:	4652      	mov	r2, sl
   1ab34:	2100      	movs	r1, #0
   1ab36:	6453      	str	r3, [r2, #68]	; 0x44
   1ab38:	2d17      	cmp	r5, #23
   1ab3a:	d90a      	bls.n	1ab52 <_dtoa_r+0x20e>
   1ab3c:	2201      	movs	r2, #1
   1ab3e:	3304      	adds	r3, #4
   1ab40:	005b      	lsls	r3, r3, #1
   1ab42:	0018      	movs	r0, r3
   1ab44:	3014      	adds	r0, #20
   1ab46:	0011      	movs	r1, r2
   1ab48:	3201      	adds	r2, #1
   1ab4a:	4285      	cmp	r5, r0
   1ab4c:	d2f8      	bcs.n	1ab40 <_dtoa_r+0x1fc>
   1ab4e:	4653      	mov	r3, sl
   1ab50:	6459      	str	r1, [r3, #68]	; 0x44
   1ab52:	4650      	mov	r0, sl
   1ab54:	f001 fbba 	bl	1c2cc <_Balloc>
   1ab58:	4653      	mov	r3, sl
   1ab5a:	6418      	str	r0, [r3, #64]	; 0x40
   1ab5c:	4643      	mov	r3, r8
   1ab5e:	900a      	str	r0, [sp, #40]	; 0x28
   1ab60:	2b0e      	cmp	r3, #14
   1ab62:	d900      	bls.n	1ab66 <_dtoa_r+0x222>
   1ab64:	e161      	b.n	1ae2a <_dtoa_r+0x4e6>
   1ab66:	2c00      	cmp	r4, #0
   1ab68:	d100      	bne.n	1ab6c <_dtoa_r+0x228>
   1ab6a:	e15e      	b.n	1ae2a <_dtoa_r+0x4e6>
   1ab6c:	9610      	str	r6, [sp, #64]	; 0x40
   1ab6e:	9711      	str	r7, [sp, #68]	; 0x44
   1ab70:	9e03      	ldr	r6, [sp, #12]
   1ab72:	2e00      	cmp	r6, #0
   1ab74:	dc01      	bgt.n	1ab7a <_dtoa_r+0x236>
   1ab76:	f000 fd25 	bl	1b5c4 <_dtoa_r+0xc80>
   1ab7a:	0032      	movs	r2, r6
   1ab7c:	210f      	movs	r1, #15
   1ab7e:	4b65      	ldr	r3, [pc, #404]	; (1ad14 <_dtoa_r+0x3d0>)
   1ab80:	400a      	ands	r2, r1
   1ab82:	00d2      	lsls	r2, r2, #3
   1ab84:	189b      	adds	r3, r3, r2
   1ab86:	1136      	asrs	r6, r6, #4
   1ab88:	681c      	ldr	r4, [r3, #0]
   1ab8a:	685d      	ldr	r5, [r3, #4]
   1ab8c:	06f3      	lsls	r3, r6, #27
   1ab8e:	d401      	bmi.n	1ab94 <_dtoa_r+0x250>
   1ab90:	f000 fcca 	bl	1b528 <_dtoa_r+0xbe4>
   1ab94:	4b60      	ldr	r3, [pc, #384]	; (1ad18 <_dtoa_r+0x3d4>)
   1ab96:	400e      	ands	r6, r1
   1ab98:	6a1a      	ldr	r2, [r3, #32]
   1ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab9c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1ab9e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1aba0:	f7fb ff28 	bl	169f4 <__aeabi_ddiv>
   1aba4:	2303      	movs	r3, #3
   1aba6:	4698      	mov	r8, r3
   1aba8:	9008      	str	r0, [sp, #32]
   1abaa:	9109      	str	r1, [sp, #36]	; 0x24
   1abac:	2e00      	cmp	r6, #0
   1abae:	d011      	beq.n	1abd4 <_dtoa_r+0x290>
   1abb0:	4f59      	ldr	r7, [pc, #356]	; (1ad18 <_dtoa_r+0x3d4>)
   1abb2:	2301      	movs	r3, #1
   1abb4:	4233      	tst	r3, r6
   1abb6:	d009      	beq.n	1abcc <_dtoa_r+0x288>
   1abb8:	469c      	mov	ip, r3
   1abba:	683a      	ldr	r2, [r7, #0]
   1abbc:	687b      	ldr	r3, [r7, #4]
   1abbe:	0020      	movs	r0, r4
   1abc0:	0029      	movs	r1, r5
   1abc2:	44e0      	add	r8, ip
   1abc4:	f7fc fb4a 	bl	1725c <__aeabi_dmul>
   1abc8:	0004      	movs	r4, r0
   1abca:	000d      	movs	r5, r1
   1abcc:	1076      	asrs	r6, r6, #1
   1abce:	3708      	adds	r7, #8
   1abd0:	2e00      	cmp	r6, #0
   1abd2:	d1ee      	bne.n	1abb2 <_dtoa_r+0x26e>
   1abd4:	0022      	movs	r2, r4
   1abd6:	9808      	ldr	r0, [sp, #32]
   1abd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1abda:	002b      	movs	r3, r5
   1abdc:	f7fb ff0a 	bl	169f4 <__aeabi_ddiv>
   1abe0:	0006      	movs	r6, r0
   1abe2:	000f      	movs	r7, r1
   1abe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1abe6:	2b00      	cmp	r3, #0
   1abe8:	d009      	beq.n	1abfe <_dtoa_r+0x2ba>
   1abea:	2200      	movs	r2, #0
   1abec:	4b40      	ldr	r3, [pc, #256]	; (1acf0 <_dtoa_r+0x3ac>)
   1abee:	0030      	movs	r0, r6
   1abf0:	0039      	movs	r1, r7
   1abf2:	f7fa fb39 	bl	15268 <__aeabi_dcmplt>
   1abf6:	2800      	cmp	r0, #0
   1abf8:	d001      	beq.n	1abfe <_dtoa_r+0x2ba>
   1abfa:	f000 fdc2 	bl	1b782 <_dtoa_r+0xe3e>
   1abfe:	4640      	mov	r0, r8
   1ac00:	f7fd f8f6 	bl	17df0 <__aeabi_i2d>
   1ac04:	0032      	movs	r2, r6
   1ac06:	003b      	movs	r3, r7
   1ac08:	f7fc fb28 	bl	1725c <__aeabi_dmul>
   1ac0c:	2200      	movs	r2, #0
   1ac0e:	4b43      	ldr	r3, [pc, #268]	; (1ad1c <_dtoa_r+0x3d8>)
   1ac10:	f7fb fbe0 	bl	163d4 <__aeabi_dadd>
   1ac14:	4a42      	ldr	r2, [pc, #264]	; (1ad20 <_dtoa_r+0x3dc>)
   1ac16:	000b      	movs	r3, r1
   1ac18:	4694      	mov	ip, r2
   1ac1a:	4463      	add	r3, ip
   1ac1c:	9008      	str	r0, [sp, #32]
   1ac1e:	9109      	str	r1, [sp, #36]	; 0x24
   1ac20:	9309      	str	r3, [sp, #36]	; 0x24
   1ac22:	9b07      	ldr	r3, [sp, #28]
   1ac24:	2b00      	cmp	r3, #0
   1ac26:	d101      	bne.n	1ac2c <_dtoa_r+0x2e8>
   1ac28:	f000 fc50 	bl	1b4cc <_dtoa_r+0xb88>
   1ac2c:	9b03      	ldr	r3, [sp, #12]
   1ac2e:	9313      	str	r3, [sp, #76]	; 0x4c
   1ac30:	9b07      	ldr	r3, [sp, #28]
   1ac32:	9312      	str	r3, [sp, #72]	; 0x48
   1ac34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	d101      	bne.n	1ac3e <_dtoa_r+0x2fa>
   1ac3a:	f000 fd1d 	bl	1b678 <_dtoa_r+0xd34>
   1ac3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ac40:	2000      	movs	r0, #0
   1ac42:	1e5a      	subs	r2, r3, #1
   1ac44:	4b33      	ldr	r3, [pc, #204]	; (1ad14 <_dtoa_r+0x3d0>)
   1ac46:	00d2      	lsls	r2, r2, #3
   1ac48:	189b      	adds	r3, r3, r2
   1ac4a:	681a      	ldr	r2, [r3, #0]
   1ac4c:	685b      	ldr	r3, [r3, #4]
   1ac4e:	4935      	ldr	r1, [pc, #212]	; (1ad24 <_dtoa_r+0x3e0>)
   1ac50:	f7fb fed0 	bl	169f4 <__aeabi_ddiv>
   1ac54:	9a08      	ldr	r2, [sp, #32]
   1ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac58:	f7fc fd80 	bl	1775c <__aeabi_dsub>
   1ac5c:	9008      	str	r0, [sp, #32]
   1ac5e:	9109      	str	r1, [sp, #36]	; 0x24
   1ac60:	0039      	movs	r1, r7
   1ac62:	0030      	movs	r0, r6
   1ac64:	f7fd f890 	bl	17d88 <__aeabi_d2iz>
   1ac68:	0004      	movs	r4, r0
   1ac6a:	f7fd f8c1 	bl	17df0 <__aeabi_i2d>
   1ac6e:	0002      	movs	r2, r0
   1ac70:	000b      	movs	r3, r1
   1ac72:	0030      	movs	r0, r6
   1ac74:	0039      	movs	r1, r7
   1ac76:	f7fc fd71 	bl	1775c <__aeabi_dsub>
   1ac7a:	0005      	movs	r5, r0
   1ac7c:	000e      	movs	r6, r1
   1ac7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ac80:	3430      	adds	r4, #48	; 0x30
   1ac82:	1c51      	adds	r1, r2, #1
   1ac84:	b2e7      	uxtb	r7, r4
   1ac86:	9114      	str	r1, [sp, #80]	; 0x50
   1ac88:	7017      	strb	r7, [r2, #0]
   1ac8a:	0033      	movs	r3, r6
   1ac8c:	9808      	ldr	r0, [sp, #32]
   1ac8e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ac90:	002a      	movs	r2, r5
   1ac92:	f7fa fafd 	bl	15290 <__aeabi_dcmpgt>
   1ac96:	2800      	cmp	r0, #0
   1ac98:	d001      	beq.n	1ac9e <_dtoa_r+0x35a>
   1ac9a:	f000 fdfe 	bl	1b89a <_dtoa_r+0xf56>
   1ac9e:	002a      	movs	r2, r5
   1aca0:	0033      	movs	r3, r6
   1aca2:	2000      	movs	r0, #0
   1aca4:	4912      	ldr	r1, [pc, #72]	; (1acf0 <_dtoa_r+0x3ac>)
   1aca6:	f7fc fd59 	bl	1775c <__aeabi_dsub>
   1acaa:	0002      	movs	r2, r0
   1acac:	000b      	movs	r3, r1
   1acae:	9808      	ldr	r0, [sp, #32]
   1acb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   1acb2:	f7fa faed 	bl	15290 <__aeabi_dcmpgt>
   1acb6:	2800      	cmp	r0, #0
   1acb8:	d001      	beq.n	1acbe <_dtoa_r+0x37a>
   1acba:	f000 fde7 	bl	1b88c <_dtoa_r+0xf48>
   1acbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1acc0:	2b01      	cmp	r3, #1
   1acc2:	d101      	bne.n	1acc8 <_dtoa_r+0x384>
   1acc4:	f000 fc78 	bl	1b5b8 <_dtoa_r+0xc74>
   1acc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1acca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1accc:	4694      	mov	ip, r2
   1acce:	4463      	add	r3, ip
   1acd0:	4698      	mov	r8, r3
   1acd2:	464b      	mov	r3, r9
   1acd4:	9312      	str	r3, [sp, #72]	; 0x48
   1acd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1acd8:	4699      	mov	r9, r3
   1acda:	e038      	b.n	1ad4e <_dtoa_r+0x40a>
   1acdc:	7ff00000 	.word	0x7ff00000
   1ace0:	0001e0a1 	.word	0x0001e0a1
   1ace4:	0000270f 	.word	0x0000270f
   1ace8:	0001ef68 	.word	0x0001ef68
   1acec:	0001ef74 	.word	0x0001ef74
   1acf0:	3ff00000 	.word	0x3ff00000
   1acf4:	fffffc01 	.word	0xfffffc01
   1acf8:	3ff80000 	.word	0x3ff80000
   1acfc:	636f4361 	.word	0x636f4361
   1ad00:	3fd287a7 	.word	0x3fd287a7
   1ad04:	8b60c8b3 	.word	0x8b60c8b3
   1ad08:	3fc68a28 	.word	0x3fc68a28
   1ad0c:	509f79fb 	.word	0x509f79fb
   1ad10:	3fd34413 	.word	0x3fd34413
   1ad14:	0001efa0 	.word	0x0001efa0
   1ad18:	0001ef78 	.word	0x0001ef78
   1ad1c:	401c0000 	.word	0x401c0000
   1ad20:	fcc00000 	.word	0xfcc00000
   1ad24:	3fe00000 	.word	0x3fe00000
   1ad28:	002a      	movs	r2, r5
   1ad2a:	0033      	movs	r3, r6
   1ad2c:	2000      	movs	r0, #0
   1ad2e:	49b9      	ldr	r1, [pc, #740]	; (1b014 <_dtoa_r+0x6d0>)
   1ad30:	f7fc fd14 	bl	1775c <__aeabi_dsub>
   1ad34:	9a08      	ldr	r2, [sp, #32]
   1ad36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ad38:	f7fa fa96 	bl	15268 <__aeabi_dcmplt>
   1ad3c:	2800      	cmp	r0, #0
   1ad3e:	d001      	beq.n	1ad44 <_dtoa_r+0x400>
   1ad40:	f000 fd74 	bl	1b82c <_dtoa_r+0xee8>
   1ad44:	46a1      	mov	r9, r4
   1ad46:	4544      	cmp	r4, r8
   1ad48:	d101      	bne.n	1ad4e <_dtoa_r+0x40a>
   1ad4a:	f000 fc33 	bl	1b5b4 <_dtoa_r+0xc70>
   1ad4e:	9808      	ldr	r0, [sp, #32]
   1ad50:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ad52:	2200      	movs	r2, #0
   1ad54:	4bb0      	ldr	r3, [pc, #704]	; (1b018 <_dtoa_r+0x6d4>)
   1ad56:	f7fc fa81 	bl	1725c <__aeabi_dmul>
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	4bae      	ldr	r3, [pc, #696]	; (1b018 <_dtoa_r+0x6d4>)
   1ad5e:	9008      	str	r0, [sp, #32]
   1ad60:	9109      	str	r1, [sp, #36]	; 0x24
   1ad62:	0028      	movs	r0, r5
   1ad64:	0031      	movs	r1, r6
   1ad66:	f7fc fa79 	bl	1725c <__aeabi_dmul>
   1ad6a:	000d      	movs	r5, r1
   1ad6c:	0004      	movs	r4, r0
   1ad6e:	f7fd f80b 	bl	17d88 <__aeabi_d2iz>
   1ad72:	0007      	movs	r7, r0
   1ad74:	f7fd f83c 	bl	17df0 <__aeabi_i2d>
   1ad78:	0002      	movs	r2, r0
   1ad7a:	000b      	movs	r3, r1
   1ad7c:	0020      	movs	r0, r4
   1ad7e:	0029      	movs	r1, r5
   1ad80:	f7fc fcec 	bl	1775c <__aeabi_dsub>
   1ad84:	464b      	mov	r3, r9
   1ad86:	3730      	adds	r7, #48	; 0x30
   1ad88:	b2ff      	uxtb	r7, r7
   1ad8a:	1c5c      	adds	r4, r3, #1
   1ad8c:	701f      	strb	r7, [r3, #0]
   1ad8e:	9a08      	ldr	r2, [sp, #32]
   1ad90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ad92:	0005      	movs	r5, r0
   1ad94:	000e      	movs	r6, r1
   1ad96:	f7fa fa67 	bl	15268 <__aeabi_dcmplt>
   1ad9a:	2800      	cmp	r0, #0
   1ad9c:	d0c4      	beq.n	1ad28 <_dtoa_r+0x3e4>
   1ad9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ada0:	9303      	str	r3, [sp, #12]
   1ada2:	4659      	mov	r1, fp
   1ada4:	4650      	mov	r0, sl
   1ada6:	f001 fab9 	bl	1c31c <_Bfree>
   1adaa:	2300      	movs	r3, #0
   1adac:	7023      	strb	r3, [r4, #0]
   1adae:	9b03      	ldr	r3, [sp, #12]
   1adb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1adb2:	3301      	adds	r3, #1
   1adb4:	6013      	str	r3, [r2, #0]
   1adb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1adb8:	2b00      	cmp	r3, #0
   1adba:	d100      	bne.n	1adbe <_dtoa_r+0x47a>
   1adbc:	e3a8      	b.n	1b510 <_dtoa_r+0xbcc>
   1adbe:	601c      	str	r4, [r3, #0]
   1adc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1adc2:	e5f4      	b.n	1a9ae <_dtoa_r+0x6a>
   1adc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1adc6:	4699      	mov	r9, r3
   1adc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1adca:	444b      	add	r3, r9
   1adcc:	001c      	movs	r4, r3
   1adce:	4b93      	ldr	r3, [pc, #588]	; (1b01c <_dtoa_r+0x6d8>)
   1add0:	18e3      	adds	r3, r4, r3
   1add2:	2b20      	cmp	r3, #32
   1add4:	dc00      	bgt.n	1add8 <_dtoa_r+0x494>
   1add6:	e17e      	b.n	1b0d6 <_dtoa_r+0x792>
   1add8:	0031      	movs	r1, r6
   1adda:	4a91      	ldr	r2, [pc, #580]	; (1b020 <_dtoa_r+0x6dc>)
   1addc:	4640      	mov	r0, r8
   1adde:	18a2      	adds	r2, r4, r2
   1ade0:	40d1      	lsrs	r1, r2
   1ade2:	000a      	movs	r2, r1
   1ade4:	2140      	movs	r1, #64	; 0x40
   1ade6:	1acb      	subs	r3, r1, r3
   1ade8:	4098      	lsls	r0, r3
   1adea:	4310      	orrs	r0, r2
   1adec:	f7fd f842 	bl	17e74 <__aeabi_ui2d>
   1adf0:	1e63      	subs	r3, r4, #1
   1adf2:	4698      	mov	r8, r3
   1adf4:	2301      	movs	r3, #1
   1adf6:	4d8b      	ldr	r5, [pc, #556]	; (1b024 <_dtoa_r+0x6e0>)
   1adf8:	930f      	str	r3, [sp, #60]	; 0x3c
   1adfa:	1949      	adds	r1, r1, r5
   1adfc:	e618      	b.n	1aa30 <_dtoa_r+0xec>
   1adfe:	488a      	ldr	r0, [pc, #552]	; (1b028 <_dtoa_r+0x6e4>)
   1ae00:	e5d5      	b.n	1a9ae <_dtoa_r+0x6a>
   1ae02:	2300      	movs	r3, #0
   1ae04:	4652      	mov	r2, sl
   1ae06:	2100      	movs	r1, #0
   1ae08:	6453      	str	r3, [r2, #68]	; 0x44
   1ae0a:	4650      	mov	r0, sl
   1ae0c:	f001 fa5e 	bl	1c2cc <_Balloc>
   1ae10:	4653      	mov	r3, sl
   1ae12:	6418      	str	r0, [r3, #64]	; 0x40
   1ae14:	2301      	movs	r3, #1
   1ae16:	425b      	negs	r3, r3
   1ae18:	9307      	str	r3, [sp, #28]
   1ae1a:	930e      	str	r3, [sp, #56]	; 0x38
   1ae1c:	3302      	adds	r3, #2
   1ae1e:	2200      	movs	r2, #0
   1ae20:	930b      	str	r3, [sp, #44]	; 0x2c
   1ae22:	2300      	movs	r3, #0
   1ae24:	900a      	str	r0, [sp, #40]	; 0x28
   1ae26:	9223      	str	r2, [sp, #140]	; 0x8c
   1ae28:	9322      	str	r3, [sp, #136]	; 0x88
   1ae2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ae2c:	2b00      	cmp	r3, #0
   1ae2e:	da00      	bge.n	1ae32 <_dtoa_r+0x4ee>
   1ae30:	e0ab      	b.n	1af8a <_dtoa_r+0x646>
   1ae32:	9a03      	ldr	r2, [sp, #12]
   1ae34:	2a0e      	cmp	r2, #14
   1ae36:	dd00      	ble.n	1ae3a <_dtoa_r+0x4f6>
   1ae38:	e0a7      	b.n	1af8a <_dtoa_r+0x646>
   1ae3a:	4b7c      	ldr	r3, [pc, #496]	; (1b02c <_dtoa_r+0x6e8>)
   1ae3c:	00d2      	lsls	r2, r2, #3
   1ae3e:	189b      	adds	r3, r3, r2
   1ae40:	685c      	ldr	r4, [r3, #4]
   1ae42:	681b      	ldr	r3, [r3, #0]
   1ae44:	9304      	str	r3, [sp, #16]
   1ae46:	9405      	str	r4, [sp, #20]
   1ae48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ae4a:	2b00      	cmp	r3, #0
   1ae4c:	da00      	bge.n	1ae50 <_dtoa_r+0x50c>
   1ae4e:	e2a7      	b.n	1b3a0 <_dtoa_r+0xa5c>
   1ae50:	9c04      	ldr	r4, [sp, #16]
   1ae52:	9d05      	ldr	r5, [sp, #20]
   1ae54:	0030      	movs	r0, r6
   1ae56:	0022      	movs	r2, r4
   1ae58:	002b      	movs	r3, r5
   1ae5a:	0039      	movs	r1, r7
   1ae5c:	f7fb fdca 	bl	169f4 <__aeabi_ddiv>
   1ae60:	f7fc ff92 	bl	17d88 <__aeabi_d2iz>
   1ae64:	4680      	mov	r8, r0
   1ae66:	f7fc ffc3 	bl	17df0 <__aeabi_i2d>
   1ae6a:	0022      	movs	r2, r4
   1ae6c:	002b      	movs	r3, r5
   1ae6e:	f7fc f9f5 	bl	1725c <__aeabi_dmul>
   1ae72:	0002      	movs	r2, r0
   1ae74:	000b      	movs	r3, r1
   1ae76:	0030      	movs	r0, r6
   1ae78:	0039      	movs	r1, r7
   1ae7a:	f7fc fc6f 	bl	1775c <__aeabi_dsub>
   1ae7e:	4643      	mov	r3, r8
   1ae80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ae82:	3330      	adds	r3, #48	; 0x30
   1ae84:	7013      	strb	r3, [r2, #0]
   1ae86:	9b07      	ldr	r3, [sp, #28]
   1ae88:	0006      	movs	r6, r0
   1ae8a:	000f      	movs	r7, r1
   1ae8c:	1c54      	adds	r4, r2, #1
   1ae8e:	2b01      	cmp	r3, #1
   1ae90:	d04e      	beq.n	1af30 <_dtoa_r+0x5ec>
   1ae92:	2200      	movs	r2, #0
   1ae94:	4b60      	ldr	r3, [pc, #384]	; (1b018 <_dtoa_r+0x6d4>)
   1ae96:	f7fc f9e1 	bl	1725c <__aeabi_dmul>
   1ae9a:	2200      	movs	r2, #0
   1ae9c:	2300      	movs	r3, #0
   1ae9e:	0006      	movs	r6, r0
   1aea0:	000f      	movs	r7, r1
   1aea2:	f7fa f9db 	bl	1525c <__aeabi_dcmpeq>
   1aea6:	2800      	cmp	r0, #0
   1aea8:	d000      	beq.n	1aeac <_dtoa_r+0x568>
   1aeaa:	e77a      	b.n	1ada2 <_dtoa_r+0x45e>
   1aeac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aeae:	9a07      	ldr	r2, [sp, #28]
   1aeb0:	1c9d      	adds	r5, r3, #2
   1aeb2:	469c      	mov	ip, r3
   1aeb4:	465b      	mov	r3, fp
   1aeb6:	9306      	str	r3, [sp, #24]
   1aeb8:	4653      	mov	r3, sl
   1aeba:	4462      	add	r2, ip
   1aebc:	46aa      	mov	sl, r5
   1aebe:	9c04      	ldr	r4, [sp, #16]
   1aec0:	9d05      	ldr	r5, [sp, #20]
   1aec2:	4691      	mov	r9, r2
   1aec4:	9307      	str	r3, [sp, #28]
   1aec6:	e00f      	b.n	1aee8 <_dtoa_r+0x5a4>
   1aec8:	2200      	movs	r2, #0
   1aeca:	4b53      	ldr	r3, [pc, #332]	; (1b018 <_dtoa_r+0x6d4>)
   1aecc:	f7fc f9c6 	bl	1725c <__aeabi_dmul>
   1aed0:	2301      	movs	r3, #1
   1aed2:	469c      	mov	ip, r3
   1aed4:	2200      	movs	r2, #0
   1aed6:	2300      	movs	r3, #0
   1aed8:	0006      	movs	r6, r0
   1aeda:	000f      	movs	r7, r1
   1aedc:	44e2      	add	sl, ip
   1aede:	f7fa f9bd 	bl	1525c <__aeabi_dcmpeq>
   1aee2:	2800      	cmp	r0, #0
   1aee4:	d000      	beq.n	1aee8 <_dtoa_r+0x5a4>
   1aee6:	e2d9      	b.n	1b49c <_dtoa_r+0xb58>
   1aee8:	0022      	movs	r2, r4
   1aeea:	002b      	movs	r3, r5
   1aeec:	0030      	movs	r0, r6
   1aeee:	0039      	movs	r1, r7
   1aef0:	f7fb fd80 	bl	169f4 <__aeabi_ddiv>
   1aef4:	f7fc ff48 	bl	17d88 <__aeabi_d2iz>
   1aef8:	4680      	mov	r8, r0
   1aefa:	f7fc ff79 	bl	17df0 <__aeabi_i2d>
   1aefe:	0022      	movs	r2, r4
   1af00:	002b      	movs	r3, r5
   1af02:	f7fc f9ab 	bl	1725c <__aeabi_dmul>
   1af06:	0002      	movs	r2, r0
   1af08:	000b      	movs	r3, r1
   1af0a:	0030      	movs	r0, r6
   1af0c:	0039      	movs	r1, r7
   1af0e:	f7fc fc25 	bl	1775c <__aeabi_dsub>
   1af12:	4653      	mov	r3, sl
   1af14:	4642      	mov	r2, r8
   1af16:	3b01      	subs	r3, #1
   1af18:	3230      	adds	r2, #48	; 0x30
   1af1a:	0006      	movs	r6, r0
   1af1c:	000f      	movs	r7, r1
   1af1e:	46d3      	mov	fp, sl
   1af20:	701a      	strb	r2, [r3, #0]
   1af22:	45d1      	cmp	r9, sl
   1af24:	d1d0      	bne.n	1aec8 <_dtoa_r+0x584>
   1af26:	9b06      	ldr	r3, [sp, #24]
   1af28:	4654      	mov	r4, sl
   1af2a:	469b      	mov	fp, r3
   1af2c:	9b07      	ldr	r3, [sp, #28]
   1af2e:	469a      	mov	sl, r3
   1af30:	0032      	movs	r2, r6
   1af32:	003b      	movs	r3, r7
   1af34:	0030      	movs	r0, r6
   1af36:	0039      	movs	r1, r7
   1af38:	f7fb fa4c 	bl	163d4 <__aeabi_dadd>
   1af3c:	0006      	movs	r6, r0
   1af3e:	000f      	movs	r7, r1
   1af40:	0002      	movs	r2, r0
   1af42:	000b      	movs	r3, r1
   1af44:	9804      	ldr	r0, [sp, #16]
   1af46:	9905      	ldr	r1, [sp, #20]
   1af48:	f7fa f98e 	bl	15268 <__aeabi_dcmplt>
   1af4c:	2800      	cmp	r0, #0
   1af4e:	d10c      	bne.n	1af6a <_dtoa_r+0x626>
   1af50:	9804      	ldr	r0, [sp, #16]
   1af52:	9905      	ldr	r1, [sp, #20]
   1af54:	0032      	movs	r2, r6
   1af56:	003b      	movs	r3, r7
   1af58:	f7fa f980 	bl	1525c <__aeabi_dcmpeq>
   1af5c:	2800      	cmp	r0, #0
   1af5e:	d100      	bne.n	1af62 <_dtoa_r+0x61e>
   1af60:	e71f      	b.n	1ada2 <_dtoa_r+0x45e>
   1af62:	4643      	mov	r3, r8
   1af64:	07db      	lsls	r3, r3, #31
   1af66:	d400      	bmi.n	1af6a <_dtoa_r+0x626>
   1af68:	e71b      	b.n	1ada2 <_dtoa_r+0x45e>
   1af6a:	1e65      	subs	r5, r4, #1
   1af6c:	782f      	ldrb	r7, [r5, #0]
   1af6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1af70:	e006      	b.n	1af80 <_dtoa_r+0x63c>
   1af72:	429d      	cmp	r5, r3
   1af74:	d100      	bne.n	1af78 <_dtoa_r+0x634>
   1af76:	e351      	b.n	1b61c <_dtoa_r+0xcd8>
   1af78:	3c02      	subs	r4, #2
   1af7a:	7827      	ldrb	r7, [r4, #0]
   1af7c:	002c      	movs	r4, r5
   1af7e:	3d01      	subs	r5, #1
   1af80:	2f39      	cmp	r7, #57	; 0x39
   1af82:	d0f6      	beq.n	1af72 <_dtoa_r+0x62e>
   1af84:	3701      	adds	r7, #1
   1af86:	702f      	strb	r7, [r5, #0]
   1af88:	e70b      	b.n	1ada2 <_dtoa_r+0x45e>
   1af8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1af8c:	2a00      	cmp	r2, #0
   1af8e:	d04f      	beq.n	1b030 <_dtoa_r+0x6ec>
   1af90:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1af92:	2a01      	cmp	r2, #1
   1af94:	dc00      	bgt.n	1af98 <_dtoa_r+0x654>
   1af96:	e22c      	b.n	1b3f2 <_dtoa_r+0xaae>
   1af98:	9b07      	ldr	r3, [sp, #28]
   1af9a:	1e5c      	subs	r4, r3, #1
   1af9c:	464b      	mov	r3, r9
   1af9e:	45a1      	cmp	r9, r4
   1afa0:	da00      	bge.n	1afa4 <_dtoa_r+0x660>
   1afa2:	e2b8      	b.n	1b516 <_dtoa_r+0xbd2>
   1afa4:	1b1c      	subs	r4, r3, r4
   1afa6:	9b07      	ldr	r3, [sp, #28]
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	da00      	bge.n	1afae <_dtoa_r+0x66a>
   1afac:	e3d4      	b.n	1b758 <_dtoa_r+0xe14>
   1afae:	9b06      	ldr	r3, [sp, #24]
   1afb0:	9308      	str	r3, [sp, #32]
   1afb2:	9b07      	ldr	r3, [sp, #28]
   1afb4:	9a06      	ldr	r2, [sp, #24]
   1afb6:	2101      	movs	r1, #1
   1afb8:	4694      	mov	ip, r2
   1afba:	449c      	add	ip, r3
   1afbc:	4662      	mov	r2, ip
   1afbe:	9206      	str	r2, [sp, #24]
   1afc0:	9a04      	ldr	r2, [sp, #16]
   1afc2:	4650      	mov	r0, sl
   1afc4:	4694      	mov	ip, r2
   1afc6:	449c      	add	ip, r3
   1afc8:	4663      	mov	r3, ip
   1afca:	9304      	str	r3, [sp, #16]
   1afcc:	f001 fa3e 	bl	1c44c <__i2b>
   1afd0:	4680      	mov	r8, r0
   1afd2:	e032      	b.n	1b03a <_dtoa_r+0x6f6>
   1afd4:	9a06      	ldr	r2, [sp, #24]
   1afd6:	9b03      	ldr	r3, [sp, #12]
   1afd8:	1ad2      	subs	r2, r2, r3
   1afda:	425b      	negs	r3, r3
   1afdc:	4699      	mov	r9, r3
   1afde:	2300      	movs	r3, #0
   1afe0:	9206      	str	r2, [sp, #24]
   1afe2:	930d      	str	r3, [sp, #52]	; 0x34
   1afe4:	e579      	b.n	1aada <_dtoa_r+0x196>
   1afe6:	9803      	ldr	r0, [sp, #12]
   1afe8:	f7fc ff02 	bl	17df0 <__aeabi_i2d>
   1afec:	000b      	movs	r3, r1
   1afee:	0002      	movs	r2, r0
   1aff0:	0029      	movs	r1, r5
   1aff2:	0020      	movs	r0, r4
   1aff4:	f7fa f932 	bl	1525c <__aeabi_dcmpeq>
   1aff8:	0002      	movs	r2, r0
   1affa:	4250      	negs	r0, r2
   1affc:	4150      	adcs	r0, r2
   1affe:	9b03      	ldr	r3, [sp, #12]
   1b000:	1a1b      	subs	r3, r3, r0
   1b002:	9303      	str	r3, [sp, #12]
   1b004:	e53d      	b.n	1aa82 <_dtoa_r+0x13e>
   1b006:	2301      	movs	r3, #1
   1b008:	1a9b      	subs	r3, r3, r2
   1b00a:	9306      	str	r3, [sp, #24]
   1b00c:	2300      	movs	r3, #0
   1b00e:	9304      	str	r3, [sp, #16]
   1b010:	e557      	b.n	1aac2 <_dtoa_r+0x17e>
   1b012:	46c0      	nop			; (mov r8, r8)
   1b014:	3ff00000 	.word	0x3ff00000
   1b018:	40240000 	.word	0x40240000
   1b01c:	00000432 	.word	0x00000432
   1b020:	00000412 	.word	0x00000412
   1b024:	fe100000 	.word	0xfe100000
   1b028:	0001e0a0 	.word	0x0001e0a0
   1b02c:	0001efa0 	.word	0x0001efa0
   1b030:	9b06      	ldr	r3, [sp, #24]
   1b032:	464c      	mov	r4, r9
   1b034:	9308      	str	r3, [sp, #32]
   1b036:	2300      	movs	r3, #0
   1b038:	4698      	mov	r8, r3
   1b03a:	9908      	ldr	r1, [sp, #32]
   1b03c:	1e0b      	subs	r3, r1, #0
   1b03e:	dd0e      	ble.n	1b05e <_dtoa_r+0x71a>
   1b040:	9a04      	ldr	r2, [sp, #16]
   1b042:	2a00      	cmp	r2, #0
   1b044:	dd0b      	ble.n	1b05e <_dtoa_r+0x71a>
   1b046:	4293      	cmp	r3, r2
   1b048:	dd00      	ble.n	1b04c <_dtoa_r+0x708>
   1b04a:	e187      	b.n	1b35c <_dtoa_r+0xa18>
   1b04c:	9a06      	ldr	r2, [sp, #24]
   1b04e:	1ad2      	subs	r2, r2, r3
   1b050:	9206      	str	r2, [sp, #24]
   1b052:	9a08      	ldr	r2, [sp, #32]
   1b054:	1ad2      	subs	r2, r2, r3
   1b056:	9208      	str	r2, [sp, #32]
   1b058:	9a04      	ldr	r2, [sp, #16]
   1b05a:	1ad3      	subs	r3, r2, r3
   1b05c:	9304      	str	r3, [sp, #16]
   1b05e:	464b      	mov	r3, r9
   1b060:	2b00      	cmp	r3, #0
   1b062:	d01a      	beq.n	1b09a <_dtoa_r+0x756>
   1b064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b066:	2b00      	cmp	r3, #0
   1b068:	d100      	bne.n	1b06c <_dtoa_r+0x728>
   1b06a:	e1bb      	b.n	1b3e4 <_dtoa_r+0xaa0>
   1b06c:	2c00      	cmp	r4, #0
   1b06e:	dd10      	ble.n	1b092 <_dtoa_r+0x74e>
   1b070:	4641      	mov	r1, r8
   1b072:	0022      	movs	r2, r4
   1b074:	4650      	mov	r0, sl
   1b076:	f001 fa9d 	bl	1c5b4 <__pow5mult>
   1b07a:	465a      	mov	r2, fp
   1b07c:	0001      	movs	r1, r0
   1b07e:	4680      	mov	r8, r0
   1b080:	4650      	mov	r0, sl
   1b082:	f001 f9ed 	bl	1c460 <__multiply>
   1b086:	0005      	movs	r5, r0
   1b088:	4659      	mov	r1, fp
   1b08a:	4650      	mov	r0, sl
   1b08c:	f001 f946 	bl	1c31c <_Bfree>
   1b090:	46ab      	mov	fp, r5
   1b092:	464b      	mov	r3, r9
   1b094:	1b1a      	subs	r2, r3, r4
   1b096:	d000      	beq.n	1b09a <_dtoa_r+0x756>
   1b098:	e1a5      	b.n	1b3e6 <_dtoa_r+0xaa2>
   1b09a:	2101      	movs	r1, #1
   1b09c:	4650      	mov	r0, sl
   1b09e:	f001 f9d5 	bl	1c44c <__i2b>
   1b0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b0a4:	4681      	mov	r9, r0
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	dd1d      	ble.n	1b0e6 <_dtoa_r+0x7a2>
   1b0aa:	001a      	movs	r2, r3
   1b0ac:	0001      	movs	r1, r0
   1b0ae:	4650      	mov	r0, sl
   1b0b0:	f001 fa80 	bl	1c5b4 <__pow5mult>
   1b0b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b0b6:	4681      	mov	r9, r0
   1b0b8:	2b01      	cmp	r3, #1
   1b0ba:	dc00      	bgt.n	1b0be <_dtoa_r+0x77a>
   1b0bc:	e150      	b.n	1b360 <_dtoa_r+0xa1c>
   1b0be:	2400      	movs	r4, #0
   1b0c0:	464b      	mov	r3, r9
   1b0c2:	691b      	ldr	r3, [r3, #16]
   1b0c4:	3303      	adds	r3, #3
   1b0c6:	009b      	lsls	r3, r3, #2
   1b0c8:	444b      	add	r3, r9
   1b0ca:	6858      	ldr	r0, [r3, #4]
   1b0cc:	f001 f976 	bl	1c3bc <__hi0bits>
   1b0d0:	2320      	movs	r3, #32
   1b0d2:	1a1b      	subs	r3, r3, r0
   1b0d4:	e010      	b.n	1b0f8 <_dtoa_r+0x7b4>
   1b0d6:	2220      	movs	r2, #32
   1b0d8:	0030      	movs	r0, r6
   1b0da:	1ad3      	subs	r3, r2, r3
   1b0dc:	4098      	lsls	r0, r3
   1b0de:	e685      	b.n	1adec <_dtoa_r+0x4a8>
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	930c      	str	r3, [sp, #48]	; 0x30
   1b0e4:	e4e3      	b.n	1aaae <_dtoa_r+0x16a>
   1b0e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b0e8:	2400      	movs	r4, #0
   1b0ea:	2b01      	cmp	r3, #1
   1b0ec:	dc00      	bgt.n	1b0f0 <_dtoa_r+0x7ac>
   1b0ee:	e18b      	b.n	1b408 <_dtoa_r+0xac4>
   1b0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b0f2:	2301      	movs	r3, #1
   1b0f4:	2a00      	cmp	r2, #0
   1b0f6:	d1e3      	bne.n	1b0c0 <_dtoa_r+0x77c>
   1b0f8:	9904      	ldr	r1, [sp, #16]
   1b0fa:	201f      	movs	r0, #31
   1b0fc:	468c      	mov	ip, r1
   1b0fe:	4463      	add	r3, ip
   1b100:	4018      	ands	r0, r3
   1b102:	d100      	bne.n	1b106 <_dtoa_r+0x7c2>
   1b104:	e0ae      	b.n	1b264 <_dtoa_r+0x920>
   1b106:	2320      	movs	r3, #32
   1b108:	1a1b      	subs	r3, r3, r0
   1b10a:	2b04      	cmp	r3, #4
   1b10c:	dc00      	bgt.n	1b110 <_dtoa_r+0x7cc>
   1b10e:	e3cc      	b.n	1b8aa <_dtoa_r+0xf66>
   1b110:	231c      	movs	r3, #28
   1b112:	1a18      	subs	r0, r3, r0
   1b114:	9b06      	ldr	r3, [sp, #24]
   1b116:	469c      	mov	ip, r3
   1b118:	4484      	add	ip, r0
   1b11a:	4663      	mov	r3, ip
   1b11c:	9306      	str	r3, [sp, #24]
   1b11e:	9b08      	ldr	r3, [sp, #32]
   1b120:	469c      	mov	ip, r3
   1b122:	4484      	add	ip, r0
   1b124:	4663      	mov	r3, ip
   1b126:	468c      	mov	ip, r1
   1b128:	4484      	add	ip, r0
   1b12a:	9308      	str	r3, [sp, #32]
   1b12c:	4663      	mov	r3, ip
   1b12e:	9304      	str	r3, [sp, #16]
   1b130:	9b06      	ldr	r3, [sp, #24]
   1b132:	2b00      	cmp	r3, #0
   1b134:	dd05      	ble.n	1b142 <_dtoa_r+0x7fe>
   1b136:	4659      	mov	r1, fp
   1b138:	001a      	movs	r2, r3
   1b13a:	4650      	mov	r0, sl
   1b13c:	f001 fa9a 	bl	1c674 <__lshift>
   1b140:	4683      	mov	fp, r0
   1b142:	9b04      	ldr	r3, [sp, #16]
   1b144:	2b00      	cmp	r3, #0
   1b146:	dd05      	ble.n	1b154 <_dtoa_r+0x810>
   1b148:	4649      	mov	r1, r9
   1b14a:	001a      	movs	r2, r3
   1b14c:	4650      	mov	r0, sl
   1b14e:	f001 fa91 	bl	1c674 <__lshift>
   1b152:	4681      	mov	r9, r0
   1b154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b156:	2b00      	cmp	r3, #0
   1b158:	d000      	beq.n	1b15c <_dtoa_r+0x818>
   1b15a:	e094      	b.n	1b286 <_dtoa_r+0x942>
   1b15c:	9b07      	ldr	r3, [sp, #28]
   1b15e:	2b00      	cmp	r3, #0
   1b160:	dc00      	bgt.n	1b164 <_dtoa_r+0x820>
   1b162:	e175      	b.n	1b450 <_dtoa_r+0xb0c>
   1b164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b166:	2b00      	cmp	r3, #0
   1b168:	d100      	bne.n	1b16c <_dtoa_r+0x828>
   1b16a:	e0a6      	b.n	1b2ba <_dtoa_r+0x976>
   1b16c:	9b08      	ldr	r3, [sp, #32]
   1b16e:	2b00      	cmp	r3, #0
   1b170:	dd05      	ble.n	1b17e <_dtoa_r+0x83a>
   1b172:	4641      	mov	r1, r8
   1b174:	001a      	movs	r2, r3
   1b176:	4650      	mov	r0, sl
   1b178:	f001 fa7c 	bl	1c674 <__lshift>
   1b17c:	4680      	mov	r8, r0
   1b17e:	4643      	mov	r3, r8
   1b180:	930c      	str	r3, [sp, #48]	; 0x30
   1b182:	2c00      	cmp	r4, #0
   1b184:	d000      	beq.n	1b188 <_dtoa_r+0x844>
   1b186:	e250      	b.n	1b62a <_dtoa_r+0xce6>
   1b188:	9c07      	ldr	r4, [sp, #28]
   1b18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b18c:	3c01      	subs	r4, #1
   1b18e:	0023      	movs	r3, r4
   1b190:	4694      	mov	ip, r2
   1b192:	4463      	add	r3, ip
   1b194:	9308      	str	r3, [sp, #32]
   1b196:	2301      	movs	r3, #1
   1b198:	4033      	ands	r3, r6
   1b19a:	9307      	str	r3, [sp, #28]
   1b19c:	464b      	mov	r3, r9
   1b19e:	9306      	str	r3, [sp, #24]
   1b1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1a2:	4657      	mov	r7, sl
   1b1a4:	4645      	mov	r5, r8
   1b1a6:	465e      	mov	r6, fp
   1b1a8:	4692      	mov	sl, r2
   1b1aa:	4698      	mov	r8, r3
   1b1ac:	9b06      	ldr	r3, [sp, #24]
   1b1ae:	0030      	movs	r0, r6
   1b1b0:	0019      	movs	r1, r3
   1b1b2:	4699      	mov	r9, r3
   1b1b4:	f7ff fb1c 	bl	1a7f0 <quorem>
   1b1b8:	0003      	movs	r3, r0
   1b1ba:	900b      	str	r0, [sp, #44]	; 0x2c
   1b1bc:	3330      	adds	r3, #48	; 0x30
   1b1be:	0029      	movs	r1, r5
   1b1c0:	0030      	movs	r0, r6
   1b1c2:	9304      	str	r3, [sp, #16]
   1b1c4:	f001 fab6 	bl	1c734 <__mcmp>
   1b1c8:	4649      	mov	r1, r9
   1b1ca:	0004      	movs	r4, r0
   1b1cc:	4642      	mov	r2, r8
   1b1ce:	0038      	movs	r0, r7
   1b1d0:	f001 faca 	bl	1c768 <__mdiff>
   1b1d4:	68c3      	ldr	r3, [r0, #12]
   1b1d6:	4681      	mov	r9, r0
   1b1d8:	2b00      	cmp	r3, #0
   1b1da:	d000      	beq.n	1b1de <_dtoa_r+0x89a>
   1b1dc:	e11e      	b.n	1b41c <_dtoa_r+0xad8>
   1b1de:	0001      	movs	r1, r0
   1b1e0:	0030      	movs	r0, r6
   1b1e2:	f001 faa7 	bl	1c734 <__mcmp>
   1b1e6:	4683      	mov	fp, r0
   1b1e8:	4649      	mov	r1, r9
   1b1ea:	0038      	movs	r0, r7
   1b1ec:	f001 f896 	bl	1c31c <_Bfree>
   1b1f0:	465b      	mov	r3, fp
   1b1f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1b1f4:	4313      	orrs	r3, r2
   1b1f6:	d103      	bne.n	1b200 <_dtoa_r+0x8bc>
   1b1f8:	9b07      	ldr	r3, [sp, #28]
   1b1fa:	2b00      	cmp	r3, #0
   1b1fc:	d100      	bne.n	1b200 <_dtoa_r+0x8bc>
   1b1fe:	e306      	b.n	1b80e <_dtoa_r+0xeca>
   1b200:	2c00      	cmp	r4, #0
   1b202:	da00      	bge.n	1b206 <_dtoa_r+0x8c2>
   1b204:	e1a8      	b.n	1b558 <_dtoa_r+0xc14>
   1b206:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b208:	431c      	orrs	r4, r3
   1b20a:	d103      	bne.n	1b214 <_dtoa_r+0x8d0>
   1b20c:	9b07      	ldr	r3, [sp, #28]
   1b20e:	2b00      	cmp	r3, #0
   1b210:	d100      	bne.n	1b214 <_dtoa_r+0x8d0>
   1b212:	e1a1      	b.n	1b558 <_dtoa_r+0xc14>
   1b214:	465b      	mov	r3, fp
   1b216:	2b00      	cmp	r3, #0
   1b218:	dd00      	ble.n	1b21c <_dtoa_r+0x8d8>
   1b21a:	e282      	b.n	1b722 <_dtoa_r+0xdde>
   1b21c:	4669      	mov	r1, sp
   1b21e:	4652      	mov	r2, sl
   1b220:	4653      	mov	r3, sl
   1b222:	7c09      	ldrb	r1, [r1, #16]
   1b224:	1c5c      	adds	r4, r3, #1
   1b226:	7011      	strb	r1, [r2, #0]
   1b228:	9a08      	ldr	r2, [sp, #32]
   1b22a:	4552      	cmp	r2, sl
   1b22c:	d100      	bne.n	1b230 <_dtoa_r+0x8ec>
   1b22e:	e28a      	b.n	1b746 <_dtoa_r+0xe02>
   1b230:	0031      	movs	r1, r6
   1b232:	2300      	movs	r3, #0
   1b234:	220a      	movs	r2, #10
   1b236:	0038      	movs	r0, r7
   1b238:	f001 f87a 	bl	1c330 <__multadd>
   1b23c:	2300      	movs	r3, #0
   1b23e:	0006      	movs	r6, r0
   1b240:	220a      	movs	r2, #10
   1b242:	0029      	movs	r1, r5
   1b244:	0038      	movs	r0, r7
   1b246:	4545      	cmp	r5, r8
   1b248:	d100      	bne.n	1b24c <_dtoa_r+0x908>
   1b24a:	e0e1      	b.n	1b410 <_dtoa_r+0xacc>
   1b24c:	f001 f870 	bl	1c330 <__multadd>
   1b250:	4641      	mov	r1, r8
   1b252:	0005      	movs	r5, r0
   1b254:	2300      	movs	r3, #0
   1b256:	220a      	movs	r2, #10
   1b258:	0038      	movs	r0, r7
   1b25a:	f001 f869 	bl	1c330 <__multadd>
   1b25e:	46a2      	mov	sl, r4
   1b260:	4680      	mov	r8, r0
   1b262:	e7a3      	b.n	1b1ac <_dtoa_r+0x868>
   1b264:	201c      	movs	r0, #28
   1b266:	9b06      	ldr	r3, [sp, #24]
   1b268:	469c      	mov	ip, r3
   1b26a:	4484      	add	ip, r0
   1b26c:	4663      	mov	r3, ip
   1b26e:	9306      	str	r3, [sp, #24]
   1b270:	9b08      	ldr	r3, [sp, #32]
   1b272:	469c      	mov	ip, r3
   1b274:	4484      	add	ip, r0
   1b276:	4663      	mov	r3, ip
   1b278:	9308      	str	r3, [sp, #32]
   1b27a:	9b04      	ldr	r3, [sp, #16]
   1b27c:	469c      	mov	ip, r3
   1b27e:	4484      	add	ip, r0
   1b280:	4663      	mov	r3, ip
   1b282:	9304      	str	r3, [sp, #16]
   1b284:	e754      	b.n	1b130 <_dtoa_r+0x7ec>
   1b286:	4649      	mov	r1, r9
   1b288:	4658      	mov	r0, fp
   1b28a:	f001 fa53 	bl	1c734 <__mcmp>
   1b28e:	2800      	cmp	r0, #0
   1b290:	db00      	blt.n	1b294 <_dtoa_r+0x950>
   1b292:	e763      	b.n	1b15c <_dtoa_r+0x818>
   1b294:	9b03      	ldr	r3, [sp, #12]
   1b296:	4659      	mov	r1, fp
   1b298:	3b01      	subs	r3, #1
   1b29a:	9303      	str	r3, [sp, #12]
   1b29c:	220a      	movs	r2, #10
   1b29e:	2300      	movs	r3, #0
   1b2a0:	4650      	mov	r0, sl
   1b2a2:	f001 f845 	bl	1c330 <__multadd>
   1b2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b2a8:	4683      	mov	fp, r0
   1b2aa:	2b00      	cmp	r3, #0
   1b2ac:	d000      	beq.n	1b2b0 <_dtoa_r+0x96c>
   1b2ae:	e2ca      	b.n	1b846 <_dtoa_r+0xf02>
   1b2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b2b2:	2b00      	cmp	r3, #0
   1b2b4:	dc00      	bgt.n	1b2b8 <_dtoa_r+0x974>
   1b2b6:	e2d8      	b.n	1b86a <_dtoa_r+0xf26>
   1b2b8:	9307      	str	r3, [sp, #28]
   1b2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b2bc:	465d      	mov	r5, fp
   1b2be:	2400      	movs	r4, #0
   1b2c0:	9f07      	ldr	r7, [sp, #28]
   1b2c2:	469b      	mov	fp, r3
   1b2c4:	e006      	b.n	1b2d4 <_dtoa_r+0x990>
   1b2c6:	0029      	movs	r1, r5
   1b2c8:	2300      	movs	r3, #0
   1b2ca:	220a      	movs	r2, #10
   1b2cc:	4650      	mov	r0, sl
   1b2ce:	f001 f82f 	bl	1c330 <__multadd>
   1b2d2:	0005      	movs	r5, r0
   1b2d4:	4649      	mov	r1, r9
   1b2d6:	0028      	movs	r0, r5
   1b2d8:	f7ff fa8a 	bl	1a7f0 <quorem>
   1b2dc:	465b      	mov	r3, fp
   1b2de:	3030      	adds	r0, #48	; 0x30
   1b2e0:	5518      	strb	r0, [r3, r4]
   1b2e2:	3401      	adds	r4, #1
   1b2e4:	42bc      	cmp	r4, r7
   1b2e6:	dbee      	blt.n	1b2c6 <_dtoa_r+0x982>
   1b2e8:	46ab      	mov	fp, r5
   1b2ea:	0006      	movs	r6, r0
   1b2ec:	9c07      	ldr	r4, [sp, #28]
   1b2ee:	2c00      	cmp	r4, #0
   1b2f0:	dc00      	bgt.n	1b2f4 <_dtoa_r+0x9b0>
   1b2f2:	e237      	b.n	1b764 <_dtoa_r+0xe20>
   1b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b2f6:	2700      	movs	r7, #0
   1b2f8:	469c      	mov	ip, r3
   1b2fa:	4464      	add	r4, ip
   1b2fc:	4659      	mov	r1, fp
   1b2fe:	2201      	movs	r2, #1
   1b300:	4650      	mov	r0, sl
   1b302:	f001 f9b7 	bl	1c674 <__lshift>
   1b306:	4649      	mov	r1, r9
   1b308:	4683      	mov	fp, r0
   1b30a:	f001 fa13 	bl	1c734 <__mcmp>
   1b30e:	2800      	cmp	r0, #0
   1b310:	dc00      	bgt.n	1b314 <_dtoa_r+0x9d0>
   1b312:	e144      	b.n	1b59e <_dtoa_r+0xc5a>
   1b314:	1e65      	subs	r5, r4, #1
   1b316:	782b      	ldrb	r3, [r5, #0]
   1b318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b31a:	e006      	b.n	1b32a <_dtoa_r+0x9e6>
   1b31c:	4295      	cmp	r5, r2
   1b31e:	d100      	bne.n	1b322 <_dtoa_r+0x9de>
   1b320:	e0b1      	b.n	1b486 <_dtoa_r+0xb42>
   1b322:	3c02      	subs	r4, #2
   1b324:	7823      	ldrb	r3, [r4, #0]
   1b326:	002c      	movs	r4, r5
   1b328:	3d01      	subs	r5, #1
   1b32a:	2b39      	cmp	r3, #57	; 0x39
   1b32c:	d0f6      	beq.n	1b31c <_dtoa_r+0x9d8>
   1b32e:	3301      	adds	r3, #1
   1b330:	702b      	strb	r3, [r5, #0]
   1b332:	4649      	mov	r1, r9
   1b334:	4650      	mov	r0, sl
   1b336:	f000 fff1 	bl	1c31c <_Bfree>
   1b33a:	4643      	mov	r3, r8
   1b33c:	2b00      	cmp	r3, #0
   1b33e:	d100      	bne.n	1b342 <_dtoa_r+0x9fe>
   1b340:	e52f      	b.n	1ada2 <_dtoa_r+0x45e>
   1b342:	2f00      	cmp	r7, #0
   1b344:	d005      	beq.n	1b352 <_dtoa_r+0xa0e>
   1b346:	4547      	cmp	r7, r8
   1b348:	d003      	beq.n	1b352 <_dtoa_r+0xa0e>
   1b34a:	0039      	movs	r1, r7
   1b34c:	4650      	mov	r0, sl
   1b34e:	f000 ffe5 	bl	1c31c <_Bfree>
   1b352:	4641      	mov	r1, r8
   1b354:	4650      	mov	r0, sl
   1b356:	f000 ffe1 	bl	1c31c <_Bfree>
   1b35a:	e522      	b.n	1ada2 <_dtoa_r+0x45e>
   1b35c:	0013      	movs	r3, r2
   1b35e:	e675      	b.n	1b04c <_dtoa_r+0x708>
   1b360:	2e00      	cmp	r6, #0
   1b362:	d000      	beq.n	1b366 <_dtoa_r+0xa22>
   1b364:	e6ab      	b.n	1b0be <_dtoa_r+0x77a>
   1b366:	033b      	lsls	r3, r7, #12
   1b368:	2400      	movs	r4, #0
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d000      	beq.n	1b370 <_dtoa_r+0xa2c>
   1b36e:	e6bf      	b.n	1b0f0 <_dtoa_r+0x7ac>
   1b370:	4bba      	ldr	r3, [pc, #744]	; (1b65c <_dtoa_r+0xd18>)
   1b372:	423b      	tst	r3, r7
   1b374:	d100      	bne.n	1b378 <_dtoa_r+0xa34>
   1b376:	e6bb      	b.n	1b0f0 <_dtoa_r+0x7ac>
   1b378:	9b06      	ldr	r3, [sp, #24]
   1b37a:	3401      	adds	r4, #1
   1b37c:	3301      	adds	r3, #1
   1b37e:	9306      	str	r3, [sp, #24]
   1b380:	9b04      	ldr	r3, [sp, #16]
   1b382:	3301      	adds	r3, #1
   1b384:	9304      	str	r3, [sp, #16]
   1b386:	e6b3      	b.n	1b0f0 <_dtoa_r+0x7ac>
   1b388:	2301      	movs	r3, #1
   1b38a:	930b      	str	r3, [sp, #44]	; 0x2c
   1b38c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b38e:	2b00      	cmp	r3, #0
   1b390:	dc00      	bgt.n	1b394 <_dtoa_r+0xa50>
   1b392:	e0d1      	b.n	1b538 <_dtoa_r+0xbf4>
   1b394:	001d      	movs	r5, r3
   1b396:	4698      	mov	r8, r3
   1b398:	930e      	str	r3, [sp, #56]	; 0x38
   1b39a:	9307      	str	r3, [sp, #28]
   1b39c:	f7ff fbc8 	bl	1ab30 <_dtoa_r+0x1ec>
   1b3a0:	9b07      	ldr	r3, [sp, #28]
   1b3a2:	2b00      	cmp	r3, #0
   1b3a4:	dd00      	ble.n	1b3a8 <_dtoa_r+0xa64>
   1b3a6:	e553      	b.n	1ae50 <_dtoa_r+0x50c>
   1b3a8:	d000      	beq.n	1b3ac <_dtoa_r+0xa68>
   1b3aa:	e0ad      	b.n	1b508 <_dtoa_r+0xbc4>
   1b3ac:	9804      	ldr	r0, [sp, #16]
   1b3ae:	9905      	ldr	r1, [sp, #20]
   1b3b0:	2200      	movs	r2, #0
   1b3b2:	4bab      	ldr	r3, [pc, #684]	; (1b660 <_dtoa_r+0xd1c>)
   1b3b4:	f7fb ff52 	bl	1725c <__aeabi_dmul>
   1b3b8:	003b      	movs	r3, r7
   1b3ba:	0032      	movs	r2, r6
   1b3bc:	f7f9 ff72 	bl	152a4 <__aeabi_dcmpge>
   1b3c0:	2300      	movs	r3, #0
   1b3c2:	4699      	mov	r9, r3
   1b3c4:	4698      	mov	r8, r3
   1b3c6:	2800      	cmp	r0, #0
   1b3c8:	d055      	beq.n	1b476 <_dtoa_r+0xb32>
   1b3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b3cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1b3ce:	43db      	mvns	r3, r3
   1b3d0:	9303      	str	r3, [sp, #12]
   1b3d2:	4649      	mov	r1, r9
   1b3d4:	4650      	mov	r0, sl
   1b3d6:	f000 ffa1 	bl	1c31c <_Bfree>
   1b3da:	4643      	mov	r3, r8
   1b3dc:	2b00      	cmp	r3, #0
   1b3de:	d100      	bne.n	1b3e2 <_dtoa_r+0xa9e>
   1b3e0:	e4df      	b.n	1ada2 <_dtoa_r+0x45e>
   1b3e2:	e7b6      	b.n	1b352 <_dtoa_r+0xa0e>
   1b3e4:	464a      	mov	r2, r9
   1b3e6:	4659      	mov	r1, fp
   1b3e8:	4650      	mov	r0, sl
   1b3ea:	f001 f8e3 	bl	1c5b4 <__pow5mult>
   1b3ee:	4683      	mov	fp, r0
   1b3f0:	e653      	b.n	1b09a <_dtoa_r+0x756>
   1b3f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b3f4:	2a00      	cmp	r2, #0
   1b3f6:	d100      	bne.n	1b3fa <_dtoa_r+0xab6>
   1b3f8:	e1b6      	b.n	1b768 <_dtoa_r+0xe24>
   1b3fa:	4a9a      	ldr	r2, [pc, #616]	; (1b664 <_dtoa_r+0xd20>)
   1b3fc:	464c      	mov	r4, r9
   1b3fe:	4694      	mov	ip, r2
   1b400:	9a06      	ldr	r2, [sp, #24]
   1b402:	4463      	add	r3, ip
   1b404:	9208      	str	r2, [sp, #32]
   1b406:	e5d5      	b.n	1afb4 <_dtoa_r+0x670>
   1b408:	2e00      	cmp	r6, #0
   1b40a:	d000      	beq.n	1b40e <_dtoa_r+0xaca>
   1b40c:	e670      	b.n	1b0f0 <_dtoa_r+0x7ac>
   1b40e:	e7aa      	b.n	1b366 <_dtoa_r+0xa22>
   1b410:	f000 ff8e 	bl	1c330 <__multadd>
   1b414:	46a2      	mov	sl, r4
   1b416:	0005      	movs	r5, r0
   1b418:	4680      	mov	r8, r0
   1b41a:	e6c7      	b.n	1b1ac <_dtoa_r+0x868>
   1b41c:	2301      	movs	r3, #1
   1b41e:	469b      	mov	fp, r3
   1b420:	e6e2      	b.n	1b1e8 <_dtoa_r+0x8a4>
   1b422:	2300      	movs	r3, #0
   1b424:	930b      	str	r3, [sp, #44]	; 0x2c
   1b426:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b428:	2b02      	cmp	r3, #2
   1b42a:	d0af      	beq.n	1b38c <_dtoa_r+0xa48>
   1b42c:	2400      	movs	r4, #0
   1b42e:	4653      	mov	r3, sl
   1b430:	0021      	movs	r1, r4
   1b432:	645c      	str	r4, [r3, #68]	; 0x44
   1b434:	4650      	mov	r0, sl
   1b436:	f000 ff49 	bl	1c2cc <_Balloc>
   1b43a:	4653      	mov	r3, sl
   1b43c:	6418      	str	r0, [r3, #64]	; 0x40
   1b43e:	2301      	movs	r3, #1
   1b440:	425b      	negs	r3, r3
   1b442:	9307      	str	r3, [sp, #28]
   1b444:	930e      	str	r3, [sp, #56]	; 0x38
   1b446:	3302      	adds	r3, #2
   1b448:	900a      	str	r0, [sp, #40]	; 0x28
   1b44a:	9423      	str	r4, [sp, #140]	; 0x8c
   1b44c:	930b      	str	r3, [sp, #44]	; 0x2c
   1b44e:	e4ec      	b.n	1ae2a <_dtoa_r+0x4e6>
   1b450:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b452:	2b02      	cmp	r3, #2
   1b454:	dc00      	bgt.n	1b458 <_dtoa_r+0xb14>
   1b456:	e685      	b.n	1b164 <_dtoa_r+0x820>
   1b458:	9b07      	ldr	r3, [sp, #28]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d1b5      	bne.n	1b3ca <_dtoa_r+0xa86>
   1b45e:	4649      	mov	r1, r9
   1b460:	2205      	movs	r2, #5
   1b462:	4650      	mov	r0, sl
   1b464:	f000 ff64 	bl	1c330 <__multadd>
   1b468:	4681      	mov	r9, r0
   1b46a:	0001      	movs	r1, r0
   1b46c:	4658      	mov	r0, fp
   1b46e:	f001 f961 	bl	1c734 <__mcmp>
   1b472:	2800      	cmp	r0, #0
   1b474:	dda9      	ble.n	1b3ca <_dtoa_r+0xa86>
   1b476:	2331      	movs	r3, #49	; 0x31
   1b478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b47a:	7013      	strb	r3, [r2, #0]
   1b47c:	9b03      	ldr	r3, [sp, #12]
   1b47e:	1c54      	adds	r4, r2, #1
   1b480:	3301      	adds	r3, #1
   1b482:	9303      	str	r3, [sp, #12]
   1b484:	e7a5      	b.n	1b3d2 <_dtoa_r+0xa8e>
   1b486:	9b03      	ldr	r3, [sp, #12]
   1b488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b48a:	3301      	adds	r3, #1
   1b48c:	9303      	str	r3, [sp, #12]
   1b48e:	2331      	movs	r3, #49	; 0x31
   1b490:	7013      	strb	r3, [r2, #0]
   1b492:	e74e      	b.n	1b332 <_dtoa_r+0x9ee>
   1b494:	2300      	movs	r3, #0
   1b496:	930b      	str	r3, [sp, #44]	; 0x2c
   1b498:	f7ff fb3d 	bl	1ab16 <_dtoa_r+0x1d2>
   1b49c:	9b06      	ldr	r3, [sp, #24]
   1b49e:	465c      	mov	r4, fp
   1b4a0:	469b      	mov	fp, r3
   1b4a2:	9b07      	ldr	r3, [sp, #28]
   1b4a4:	469a      	mov	sl, r3
   1b4a6:	e47c      	b.n	1ada2 <_dtoa_r+0x45e>
   1b4a8:	4640      	mov	r0, r8
   1b4aa:	f7fc fca1 	bl	17df0 <__aeabi_i2d>
   1b4ae:	0032      	movs	r2, r6
   1b4b0:	003b      	movs	r3, r7
   1b4b2:	f7fb fed3 	bl	1725c <__aeabi_dmul>
   1b4b6:	2200      	movs	r2, #0
   1b4b8:	4b6b      	ldr	r3, [pc, #428]	; (1b668 <_dtoa_r+0xd24>)
   1b4ba:	f7fa ff8b 	bl	163d4 <__aeabi_dadd>
   1b4be:	4a6b      	ldr	r2, [pc, #428]	; (1b66c <_dtoa_r+0xd28>)
   1b4c0:	000b      	movs	r3, r1
   1b4c2:	4694      	mov	ip, r2
   1b4c4:	4463      	add	r3, ip
   1b4c6:	9008      	str	r0, [sp, #32]
   1b4c8:	9109      	str	r1, [sp, #36]	; 0x24
   1b4ca:	9309      	str	r3, [sp, #36]	; 0x24
   1b4cc:	2200      	movs	r2, #0
   1b4ce:	4b64      	ldr	r3, [pc, #400]	; (1b660 <_dtoa_r+0xd1c>)
   1b4d0:	0030      	movs	r0, r6
   1b4d2:	0039      	movs	r1, r7
   1b4d4:	f7fc f942 	bl	1775c <__aeabi_dsub>
   1b4d8:	9e08      	ldr	r6, [sp, #32]
   1b4da:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1b4dc:	0032      	movs	r2, r6
   1b4de:	003b      	movs	r3, r7
   1b4e0:	0004      	movs	r4, r0
   1b4e2:	000d      	movs	r5, r1
   1b4e4:	f7f9 fed4 	bl	15290 <__aeabi_dcmpgt>
   1b4e8:	2800      	cmp	r0, #0
   1b4ea:	d000      	beq.n	1b4ee <_dtoa_r+0xbaa>
   1b4ec:	e0b2      	b.n	1b654 <_dtoa_r+0xd10>
   1b4ee:	2080      	movs	r0, #128	; 0x80
   1b4f0:	0600      	lsls	r0, r0, #24
   1b4f2:	4684      	mov	ip, r0
   1b4f4:	0039      	movs	r1, r7
   1b4f6:	4461      	add	r1, ip
   1b4f8:	000b      	movs	r3, r1
   1b4fa:	0032      	movs	r2, r6
   1b4fc:	0020      	movs	r0, r4
   1b4fe:	0029      	movs	r1, r5
   1b500:	f7f9 feb2 	bl	15268 <__aeabi_dcmplt>
   1b504:	2800      	cmp	r0, #0
   1b506:	d057      	beq.n	1b5b8 <_dtoa_r+0xc74>
   1b508:	2300      	movs	r3, #0
   1b50a:	4699      	mov	r9, r3
   1b50c:	4698      	mov	r8, r3
   1b50e:	e75c      	b.n	1b3ca <_dtoa_r+0xa86>
   1b510:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b512:	f7ff fa4c 	bl	1a9ae <_dtoa_r+0x6a>
   1b516:	1ae2      	subs	r2, r4, r3
   1b518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b51a:	46a1      	mov	r9, r4
   1b51c:	469c      	mov	ip, r3
   1b51e:	4494      	add	ip, r2
   1b520:	4663      	mov	r3, ip
   1b522:	2400      	movs	r4, #0
   1b524:	930d      	str	r3, [sp, #52]	; 0x34
   1b526:	e53e      	b.n	1afa6 <_dtoa_r+0x662>
   1b528:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1b52a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b52c:	9208      	str	r2, [sp, #32]
   1b52e:	9309      	str	r3, [sp, #36]	; 0x24
   1b530:	2302      	movs	r3, #2
   1b532:	4698      	mov	r8, r3
   1b534:	f7ff fb3a 	bl	1abac <_dtoa_r+0x268>
   1b538:	2300      	movs	r3, #0
   1b53a:	4652      	mov	r2, sl
   1b53c:	2100      	movs	r1, #0
   1b53e:	6453      	str	r3, [r2, #68]	; 0x44
   1b540:	4650      	mov	r0, sl
   1b542:	f000 fec3 	bl	1c2cc <_Balloc>
   1b546:	4653      	mov	r3, sl
   1b548:	6418      	str	r0, [r3, #64]	; 0x40
   1b54a:	2301      	movs	r3, #1
   1b54c:	900a      	str	r0, [sp, #40]	; 0x28
   1b54e:	9307      	str	r3, [sp, #28]
   1b550:	9323      	str	r3, [sp, #140]	; 0x8c
   1b552:	930e      	str	r3, [sp, #56]	; 0x38
   1b554:	f7ff fb07 	bl	1ab66 <_dtoa_r+0x222>
   1b558:	4643      	mov	r3, r8
   1b55a:	930c      	str	r3, [sp, #48]	; 0x30
   1b55c:	465b      	mov	r3, fp
   1b55e:	9a06      	ldr	r2, [sp, #24]
   1b560:	46a8      	mov	r8, r5
   1b562:	46b3      	mov	fp, r6
   1b564:	4655      	mov	r5, sl
   1b566:	9e04      	ldr	r6, [sp, #16]
   1b568:	4691      	mov	r9, r2
   1b56a:	46ba      	mov	sl, r7
   1b56c:	2b00      	cmp	r3, #0
   1b56e:	dd10      	ble.n	1b592 <_dtoa_r+0xc4e>
   1b570:	4659      	mov	r1, fp
   1b572:	2201      	movs	r2, #1
   1b574:	0038      	movs	r0, r7
   1b576:	f001 f87d 	bl	1c674 <__lshift>
   1b57a:	4649      	mov	r1, r9
   1b57c:	4683      	mov	fp, r0
   1b57e:	f001 f8d9 	bl	1c734 <__mcmp>
   1b582:	2800      	cmp	r0, #0
   1b584:	dc00      	bgt.n	1b588 <_dtoa_r+0xc44>
   1b586:	e157      	b.n	1b838 <_dtoa_r+0xef4>
   1b588:	2e39      	cmp	r6, #57	; 0x39
   1b58a:	d100      	bne.n	1b58e <_dtoa_r+0xc4a>
   1b58c:	e122      	b.n	1b7d4 <_dtoa_r+0xe90>
   1b58e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1b590:	3631      	adds	r6, #49	; 0x31
   1b592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b594:	4647      	mov	r7, r8
   1b596:	1c6c      	adds	r4, r5, #1
   1b598:	702e      	strb	r6, [r5, #0]
   1b59a:	4698      	mov	r8, r3
   1b59c:	e6c9      	b.n	1b332 <_dtoa_r+0x9ee>
   1b59e:	2800      	cmp	r0, #0
   1b5a0:	d103      	bne.n	1b5aa <_dtoa_r+0xc66>
   1b5a2:	07f3      	lsls	r3, r6, #31
   1b5a4:	d501      	bpl.n	1b5aa <_dtoa_r+0xc66>
   1b5a6:	e6b5      	b.n	1b314 <_dtoa_r+0x9d0>
   1b5a8:	001c      	movs	r4, r3
   1b5aa:	1e63      	subs	r3, r4, #1
   1b5ac:	781a      	ldrb	r2, [r3, #0]
   1b5ae:	2a30      	cmp	r2, #48	; 0x30
   1b5b0:	d0fa      	beq.n	1b5a8 <_dtoa_r+0xc64>
   1b5b2:	e6be      	b.n	1b332 <_dtoa_r+0x9ee>
   1b5b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b5b6:	4699      	mov	r9, r3
   1b5b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1b5ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1b5bc:	e435      	b.n	1ae2a <_dtoa_r+0x4e6>
   1b5be:	2501      	movs	r5, #1
   1b5c0:	f7ff fab4 	bl	1ab2c <_dtoa_r+0x1e8>
   1b5c4:	9b03      	ldr	r3, [sp, #12]
   1b5c6:	2b00      	cmp	r3, #0
   1b5c8:	d100      	bne.n	1b5cc <_dtoa_r+0xc88>
   1b5ca:	e0d4      	b.n	1b776 <_dtoa_r+0xe32>
   1b5cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b5ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   1b5d0:	425c      	negs	r4, r3
   1b5d2:	230f      	movs	r3, #15
   1b5d4:	4a26      	ldr	r2, [pc, #152]	; (1b670 <_dtoa_r+0xd2c>)
   1b5d6:	4023      	ands	r3, r4
   1b5d8:	00db      	lsls	r3, r3, #3
   1b5da:	18d3      	adds	r3, r2, r3
   1b5dc:	681a      	ldr	r2, [r3, #0]
   1b5de:	685b      	ldr	r3, [r3, #4]
   1b5e0:	f7fb fe3c 	bl	1725c <__aeabi_dmul>
   1b5e4:	1124      	asrs	r4, r4, #4
   1b5e6:	0006      	movs	r6, r0
   1b5e8:	000f      	movs	r7, r1
   1b5ea:	2c00      	cmp	r4, #0
   1b5ec:	d100      	bne.n	1b5f0 <_dtoa_r+0xcac>
   1b5ee:	e149      	b.n	1b884 <_dtoa_r+0xf40>
   1b5f0:	2302      	movs	r3, #2
   1b5f2:	4698      	mov	r8, r3
   1b5f4:	4d1f      	ldr	r5, [pc, #124]	; (1b674 <_dtoa_r+0xd30>)
   1b5f6:	2301      	movs	r3, #1
   1b5f8:	4223      	tst	r3, r4
   1b5fa:	d009      	beq.n	1b610 <_dtoa_r+0xccc>
   1b5fc:	469c      	mov	ip, r3
   1b5fe:	682a      	ldr	r2, [r5, #0]
   1b600:	686b      	ldr	r3, [r5, #4]
   1b602:	0030      	movs	r0, r6
   1b604:	0039      	movs	r1, r7
   1b606:	44e0      	add	r8, ip
   1b608:	f7fb fe28 	bl	1725c <__aeabi_dmul>
   1b60c:	0006      	movs	r6, r0
   1b60e:	000f      	movs	r7, r1
   1b610:	1064      	asrs	r4, r4, #1
   1b612:	3508      	adds	r5, #8
   1b614:	2c00      	cmp	r4, #0
   1b616:	d1ee      	bne.n	1b5f6 <_dtoa_r+0xcb2>
   1b618:	f7ff fae4 	bl	1abe4 <_dtoa_r+0x2a0>
   1b61c:	9b03      	ldr	r3, [sp, #12]
   1b61e:	2730      	movs	r7, #48	; 0x30
   1b620:	3301      	adds	r3, #1
   1b622:	9303      	str	r3, [sp, #12]
   1b624:	2330      	movs	r3, #48	; 0x30
   1b626:	702b      	strb	r3, [r5, #0]
   1b628:	e4ac      	b.n	1af84 <_dtoa_r+0x640>
   1b62a:	6859      	ldr	r1, [r3, #4]
   1b62c:	4650      	mov	r0, sl
   1b62e:	f000 fe4d 	bl	1c2cc <_Balloc>
   1b632:	4643      	mov	r3, r8
   1b634:	4641      	mov	r1, r8
   1b636:	0004      	movs	r4, r0
   1b638:	691b      	ldr	r3, [r3, #16]
   1b63a:	310c      	adds	r1, #12
   1b63c:	1c9a      	adds	r2, r3, #2
   1b63e:	0092      	lsls	r2, r2, #2
   1b640:	300c      	adds	r0, #12
   1b642:	f7fd f807 	bl	18654 <memcpy>
   1b646:	2201      	movs	r2, #1
   1b648:	0021      	movs	r1, r4
   1b64a:	4650      	mov	r0, sl
   1b64c:	f001 f812 	bl	1c674 <__lshift>
   1b650:	900c      	str	r0, [sp, #48]	; 0x30
   1b652:	e599      	b.n	1b188 <_dtoa_r+0x844>
   1b654:	2300      	movs	r3, #0
   1b656:	4699      	mov	r9, r3
   1b658:	4698      	mov	r8, r3
   1b65a:	e70c      	b.n	1b476 <_dtoa_r+0xb32>
   1b65c:	7ff00000 	.word	0x7ff00000
   1b660:	40140000 	.word	0x40140000
   1b664:	00000433 	.word	0x00000433
   1b668:	401c0000 	.word	0x401c0000
   1b66c:	fcc00000 	.word	0xfcc00000
   1b670:	0001efa0 	.word	0x0001efa0
   1b674:	0001ef78 	.word	0x0001ef78
   1b678:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b67a:	498f      	ldr	r1, [pc, #572]	; (1b8b8 <_dtoa_r+0xf74>)
   1b67c:	3b01      	subs	r3, #1
   1b67e:	00db      	lsls	r3, r3, #3
   1b680:	18c9      	adds	r1, r1, r3
   1b682:	6808      	ldr	r0, [r1, #0]
   1b684:	6849      	ldr	r1, [r1, #4]
   1b686:	9a08      	ldr	r2, [sp, #32]
   1b688:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b68a:	f7fb fde7 	bl	1725c <__aeabi_dmul>
   1b68e:	9014      	str	r0, [sp, #80]	; 0x50
   1b690:	9115      	str	r1, [sp, #84]	; 0x54
   1b692:	0039      	movs	r1, r7
   1b694:	0030      	movs	r0, r6
   1b696:	f7fc fb77 	bl	17d88 <__aeabi_d2iz>
   1b69a:	0005      	movs	r5, r0
   1b69c:	f7fc fba8 	bl	17df0 <__aeabi_i2d>
   1b6a0:	0002      	movs	r2, r0
   1b6a2:	000b      	movs	r3, r1
   1b6a4:	0030      	movs	r0, r6
   1b6a6:	0039      	movs	r1, r7
   1b6a8:	f7fc f858 	bl	1775c <__aeabi_dsub>
   1b6ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6ae:	9008      	str	r0, [sp, #32]
   1b6b0:	9109      	str	r1, [sp, #36]	; 0x24
   1b6b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b6b4:	001a      	movs	r2, r3
   1b6b6:	468c      	mov	ip, r1
   1b6b8:	3530      	adds	r5, #48	; 0x30
   1b6ba:	4462      	add	r2, ip
   1b6bc:	1c4c      	adds	r4, r1, #1
   1b6be:	700d      	strb	r5, [r1, #0]
   1b6c0:	4690      	mov	r8, r2
   1b6c2:	2b01      	cmp	r3, #1
   1b6c4:	d01b      	beq.n	1b6fe <_dtoa_r+0xdba>
   1b6c6:	9808      	ldr	r0, [sp, #32]
   1b6c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b6ca:	0025      	movs	r5, r4
   1b6cc:	2200      	movs	r2, #0
   1b6ce:	4b7b      	ldr	r3, [pc, #492]	; (1b8bc <_dtoa_r+0xf78>)
   1b6d0:	f7fb fdc4 	bl	1725c <__aeabi_dmul>
   1b6d4:	000f      	movs	r7, r1
   1b6d6:	0006      	movs	r6, r0
   1b6d8:	f7fc fb56 	bl	17d88 <__aeabi_d2iz>
   1b6dc:	0004      	movs	r4, r0
   1b6de:	f7fc fb87 	bl	17df0 <__aeabi_i2d>
   1b6e2:	3430      	adds	r4, #48	; 0x30
   1b6e4:	0002      	movs	r2, r0
   1b6e6:	000b      	movs	r3, r1
   1b6e8:	0030      	movs	r0, r6
   1b6ea:	0039      	movs	r1, r7
   1b6ec:	f7fc f836 	bl	1775c <__aeabi_dsub>
   1b6f0:	702c      	strb	r4, [r5, #0]
   1b6f2:	3501      	adds	r5, #1
   1b6f4:	45a8      	cmp	r8, r5
   1b6f6:	d1e9      	bne.n	1b6cc <_dtoa_r+0xd88>
   1b6f8:	4644      	mov	r4, r8
   1b6fa:	9008      	str	r0, [sp, #32]
   1b6fc:	9109      	str	r1, [sp, #36]	; 0x24
   1b6fe:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b700:	9915      	ldr	r1, [sp, #84]	; 0x54
   1b702:	2200      	movs	r2, #0
   1b704:	4b6e      	ldr	r3, [pc, #440]	; (1b8c0 <_dtoa_r+0xf7c>)
   1b706:	f7fa fe65 	bl	163d4 <__aeabi_dadd>
   1b70a:	9a08      	ldr	r2, [sp, #32]
   1b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b70e:	f7f9 fdab 	bl	15268 <__aeabi_dcmplt>
   1b712:	2800      	cmp	r0, #0
   1b714:	d067      	beq.n	1b7e6 <_dtoa_r+0xea2>
   1b716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b718:	1e65      	subs	r5, r4, #1
   1b71a:	9303      	str	r3, [sp, #12]
   1b71c:	782f      	ldrb	r7, [r5, #0]
   1b71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b720:	e42e      	b.n	1af80 <_dtoa_r+0x63c>
   1b722:	4643      	mov	r3, r8
   1b724:	46b3      	mov	fp, r6
   1b726:	930c      	str	r3, [sp, #48]	; 0x30
   1b728:	9e04      	ldr	r6, [sp, #16]
   1b72a:	9b06      	ldr	r3, [sp, #24]
   1b72c:	46a8      	mov	r8, r5
   1b72e:	4699      	mov	r9, r3
   1b730:	4655      	mov	r5, sl
   1b732:	46ba      	mov	sl, r7
   1b734:	2e39      	cmp	r6, #57	; 0x39
   1b736:	d04d      	beq.n	1b7d4 <_dtoa_r+0xe90>
   1b738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b73a:	3601      	adds	r6, #1
   1b73c:	4647      	mov	r7, r8
   1b73e:	1c6c      	adds	r4, r5, #1
   1b740:	702e      	strb	r6, [r5, #0]
   1b742:	4698      	mov	r8, r3
   1b744:	e5f5      	b.n	1b332 <_dtoa_r+0x9ee>
   1b746:	4642      	mov	r2, r8
   1b748:	9b06      	ldr	r3, [sp, #24]
   1b74a:	46b3      	mov	fp, r6
   1b74c:	46ba      	mov	sl, r7
   1b74e:	9e04      	ldr	r6, [sp, #16]
   1b750:	4699      	mov	r9, r3
   1b752:	002f      	movs	r7, r5
   1b754:	4690      	mov	r8, r2
   1b756:	e5d1      	b.n	1b2fc <_dtoa_r+0x9b8>
   1b758:	9b06      	ldr	r3, [sp, #24]
   1b75a:	9a07      	ldr	r2, [sp, #28]
   1b75c:	1a9b      	subs	r3, r3, r2
   1b75e:	9308      	str	r3, [sp, #32]
   1b760:	2300      	movs	r3, #0
   1b762:	e427      	b.n	1afb4 <_dtoa_r+0x670>
   1b764:	2401      	movs	r4, #1
   1b766:	e5c5      	b.n	1b2f4 <_dtoa_r+0x9b0>
   1b768:	2336      	movs	r3, #54	; 0x36
   1b76a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b76c:	464c      	mov	r4, r9
   1b76e:	1a9b      	subs	r3, r3, r2
   1b770:	9a06      	ldr	r2, [sp, #24]
   1b772:	9208      	str	r2, [sp, #32]
   1b774:	e41e      	b.n	1afb4 <_dtoa_r+0x670>
   1b776:	2302      	movs	r3, #2
   1b778:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1b77a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1b77c:	4698      	mov	r8, r3
   1b77e:	f7ff fa31 	bl	1abe4 <_dtoa_r+0x2a0>
   1b782:	9b07      	ldr	r3, [sp, #28]
   1b784:	2b00      	cmp	r3, #0
   1b786:	d100      	bne.n	1b78a <_dtoa_r+0xe46>
   1b788:	e68e      	b.n	1b4a8 <_dtoa_r+0xb64>
   1b78a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1b78c:	2c00      	cmp	r4, #0
   1b78e:	dc00      	bgt.n	1b792 <_dtoa_r+0xe4e>
   1b790:	e712      	b.n	1b5b8 <_dtoa_r+0xc74>
   1b792:	9b03      	ldr	r3, [sp, #12]
   1b794:	2200      	movs	r2, #0
   1b796:	3b01      	subs	r3, #1
   1b798:	9313      	str	r3, [sp, #76]	; 0x4c
   1b79a:	0030      	movs	r0, r6
   1b79c:	4b47      	ldr	r3, [pc, #284]	; (1b8bc <_dtoa_r+0xf78>)
   1b79e:	0039      	movs	r1, r7
   1b7a0:	f7fb fd5c 	bl	1725c <__aeabi_dmul>
   1b7a4:	0006      	movs	r6, r0
   1b7a6:	4640      	mov	r0, r8
   1b7a8:	000f      	movs	r7, r1
   1b7aa:	3001      	adds	r0, #1
   1b7ac:	f7fc fb20 	bl	17df0 <__aeabi_i2d>
   1b7b0:	0032      	movs	r2, r6
   1b7b2:	003b      	movs	r3, r7
   1b7b4:	f7fb fd52 	bl	1725c <__aeabi_dmul>
   1b7b8:	2200      	movs	r2, #0
   1b7ba:	4b42      	ldr	r3, [pc, #264]	; (1b8c4 <_dtoa_r+0xf80>)
   1b7bc:	f7fa fe0a 	bl	163d4 <__aeabi_dadd>
   1b7c0:	4a41      	ldr	r2, [pc, #260]	; (1b8c8 <_dtoa_r+0xf84>)
   1b7c2:	000b      	movs	r3, r1
   1b7c4:	4694      	mov	ip, r2
   1b7c6:	4463      	add	r3, ip
   1b7c8:	9008      	str	r0, [sp, #32]
   1b7ca:	9109      	str	r1, [sp, #36]	; 0x24
   1b7cc:	9412      	str	r4, [sp, #72]	; 0x48
   1b7ce:	9309      	str	r3, [sp, #36]	; 0x24
   1b7d0:	f7ff fa30 	bl	1ac34 <_dtoa_r+0x2f0>
   1b7d4:	2339      	movs	r3, #57	; 0x39
   1b7d6:	702b      	strb	r3, [r5, #0]
   1b7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b7da:	4647      	mov	r7, r8
   1b7dc:	1c6c      	adds	r4, r5, #1
   1b7de:	4698      	mov	r8, r3
   1b7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b7e2:	2339      	movs	r3, #57	; 0x39
   1b7e4:	e5a1      	b.n	1b32a <_dtoa_r+0x9e6>
   1b7e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b7ea:	2000      	movs	r0, #0
   1b7ec:	4934      	ldr	r1, [pc, #208]	; (1b8c0 <_dtoa_r+0xf7c>)
   1b7ee:	f7fb ffb5 	bl	1775c <__aeabi_dsub>
   1b7f2:	9a08      	ldr	r2, [sp, #32]
   1b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b7f6:	f7f9 fd4b 	bl	15290 <__aeabi_dcmpgt>
   1b7fa:	2800      	cmp	r0, #0
   1b7fc:	d101      	bne.n	1b802 <_dtoa_r+0xebe>
   1b7fe:	e6db      	b.n	1b5b8 <_dtoa_r+0xc74>
   1b800:	001c      	movs	r4, r3
   1b802:	1e63      	subs	r3, r4, #1
   1b804:	781a      	ldrb	r2, [r3, #0]
   1b806:	2a30      	cmp	r2, #48	; 0x30
   1b808:	d0fa      	beq.n	1b800 <_dtoa_r+0xebc>
   1b80a:	f7ff fac8 	bl	1ad9e <_dtoa_r+0x45a>
   1b80e:	4643      	mov	r3, r8
   1b810:	46b3      	mov	fp, r6
   1b812:	930c      	str	r3, [sp, #48]	; 0x30
   1b814:	9e04      	ldr	r6, [sp, #16]
   1b816:	9b06      	ldr	r3, [sp, #24]
   1b818:	46a8      	mov	r8, r5
   1b81a:	4699      	mov	r9, r3
   1b81c:	4655      	mov	r5, sl
   1b81e:	46ba      	mov	sl, r7
   1b820:	2e39      	cmp	r6, #57	; 0x39
   1b822:	d0d7      	beq.n	1b7d4 <_dtoa_r+0xe90>
   1b824:	2c00      	cmp	r4, #0
   1b826:	dd00      	ble.n	1b82a <_dtoa_r+0xee6>
   1b828:	e6b1      	b.n	1b58e <_dtoa_r+0xc4a>
   1b82a:	e6b2      	b.n	1b592 <_dtoa_r+0xc4e>
   1b82c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b82e:	464d      	mov	r5, r9
   1b830:	9203      	str	r2, [sp, #12]
   1b832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b834:	f7ff fba4 	bl	1af80 <_dtoa_r+0x63c>
   1b838:	2800      	cmp	r0, #0
   1b83a:	d000      	beq.n	1b83e <_dtoa_r+0xefa>
   1b83c:	e6a9      	b.n	1b592 <_dtoa_r+0xc4e>
   1b83e:	07f3      	lsls	r3, r6, #31
   1b840:	d400      	bmi.n	1b844 <_dtoa_r+0xf00>
   1b842:	e6a6      	b.n	1b592 <_dtoa_r+0xc4e>
   1b844:	e6a0      	b.n	1b588 <_dtoa_r+0xc44>
   1b846:	2300      	movs	r3, #0
   1b848:	4641      	mov	r1, r8
   1b84a:	220a      	movs	r2, #10
   1b84c:	4650      	mov	r0, sl
   1b84e:	f000 fd6f 	bl	1c330 <__multadd>
   1b852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b854:	4680      	mov	r8, r0
   1b856:	2b00      	cmp	r3, #0
   1b858:	dd01      	ble.n	1b85e <_dtoa_r+0xf1a>
   1b85a:	9307      	str	r3, [sp, #28]
   1b85c:	e486      	b.n	1b16c <_dtoa_r+0x828>
   1b85e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b860:	2b02      	cmp	r3, #2
   1b862:	dc1f      	bgt.n	1b8a4 <_dtoa_r+0xf60>
   1b864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b866:	9307      	str	r3, [sp, #28]
   1b868:	e480      	b.n	1b16c <_dtoa_r+0x828>
   1b86a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b86c:	2b02      	cmp	r3, #2
   1b86e:	dc19      	bgt.n	1b8a4 <_dtoa_r+0xf60>
   1b870:	4649      	mov	r1, r9
   1b872:	f7fe ffbd 	bl	1a7f0 <quorem>
   1b876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b878:	3030      	adds	r0, #48	; 0x30
   1b87a:	7018      	strb	r0, [r3, #0]
   1b87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b87e:	0006      	movs	r6, r0
   1b880:	9307      	str	r3, [sp, #28]
   1b882:	e533      	b.n	1b2ec <_dtoa_r+0x9a8>
   1b884:	2302      	movs	r3, #2
   1b886:	4698      	mov	r8, r3
   1b888:	f7ff f9ac 	bl	1abe4 <_dtoa_r+0x2a0>
   1b88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b88e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b890:	9303      	str	r3, [sp, #12]
   1b892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b894:	001d      	movs	r5, r3
   1b896:	f7ff fb73 	bl	1af80 <_dtoa_r+0x63c>
   1b89a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b89c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b89e:	9303      	str	r3, [sp, #12]
   1b8a0:	f7ff fa7f 	bl	1ada2 <_dtoa_r+0x45e>
   1b8a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b8a6:	9307      	str	r3, [sp, #28]
   1b8a8:	e5d6      	b.n	1b458 <_dtoa_r+0xb14>
   1b8aa:	2b04      	cmp	r3, #4
   1b8ac:	d100      	bne.n	1b8b0 <_dtoa_r+0xf6c>
   1b8ae:	e43f      	b.n	1b130 <_dtoa_r+0x7ec>
   1b8b0:	233c      	movs	r3, #60	; 0x3c
   1b8b2:	1a18      	subs	r0, r3, r0
   1b8b4:	e4d7      	b.n	1b266 <_dtoa_r+0x922>
   1b8b6:	46c0      	nop			; (mov r8, r8)
   1b8b8:	0001efa0 	.word	0x0001efa0
   1b8bc:	40240000 	.word	0x40240000
   1b8c0:	3fe00000 	.word	0x3fe00000
   1b8c4:	401c0000 	.word	0x401c0000
   1b8c8:	fcc00000 	.word	0xfcc00000

0001b8cc <__sflush_r>:
   1b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8ce:	46c6      	mov	lr, r8
   1b8d0:	b500      	push	{lr}
   1b8d2:	230c      	movs	r3, #12
   1b8d4:	5eca      	ldrsh	r2, [r1, r3]
   1b8d6:	4680      	mov	r8, r0
   1b8d8:	b293      	uxth	r3, r2
   1b8da:	000c      	movs	r4, r1
   1b8dc:	0719      	lsls	r1, r3, #28
   1b8de:	d440      	bmi.n	1b962 <__sflush_r+0x96>
   1b8e0:	2380      	movs	r3, #128	; 0x80
   1b8e2:	011b      	lsls	r3, r3, #4
   1b8e4:	4313      	orrs	r3, r2
   1b8e6:	6862      	ldr	r2, [r4, #4]
   1b8e8:	81a3      	strh	r3, [r4, #12]
   1b8ea:	2a00      	cmp	r2, #0
   1b8ec:	dc00      	bgt.n	1b8f0 <__sflush_r+0x24>
   1b8ee:	e070      	b.n	1b9d2 <__sflush_r+0x106>
   1b8f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b8f2:	2e00      	cmp	r6, #0
   1b8f4:	d031      	beq.n	1b95a <__sflush_r+0x8e>
   1b8f6:	4642      	mov	r2, r8
   1b8f8:	4641      	mov	r1, r8
   1b8fa:	6815      	ldr	r5, [r2, #0]
   1b8fc:	2200      	movs	r2, #0
   1b8fe:	b29b      	uxth	r3, r3
   1b900:	600a      	str	r2, [r1, #0]
   1b902:	04da      	lsls	r2, r3, #19
   1b904:	d400      	bmi.n	1b908 <__sflush_r+0x3c>
   1b906:	e069      	b.n	1b9dc <__sflush_r+0x110>
   1b908:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1b90a:	075b      	lsls	r3, r3, #29
   1b90c:	d506      	bpl.n	1b91c <__sflush_r+0x50>
   1b90e:	6863      	ldr	r3, [r4, #4]
   1b910:	1ad2      	subs	r2, r2, r3
   1b912:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b914:	2b00      	cmp	r3, #0
   1b916:	d001      	beq.n	1b91c <__sflush_r+0x50>
   1b918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b91a:	1ad2      	subs	r2, r2, r3
   1b91c:	2300      	movs	r3, #0
   1b91e:	69e1      	ldr	r1, [r4, #28]
   1b920:	4640      	mov	r0, r8
   1b922:	47b0      	blx	r6
   1b924:	1c43      	adds	r3, r0, #1
   1b926:	d03d      	beq.n	1b9a4 <__sflush_r+0xd8>
   1b928:	89a3      	ldrh	r3, [r4, #12]
   1b92a:	4a3a      	ldr	r2, [pc, #232]	; (1ba14 <__sflush_r+0x148>)
   1b92c:	4013      	ands	r3, r2
   1b92e:	2200      	movs	r2, #0
   1b930:	6062      	str	r2, [r4, #4]
   1b932:	6922      	ldr	r2, [r4, #16]
   1b934:	b21b      	sxth	r3, r3
   1b936:	81a3      	strh	r3, [r4, #12]
   1b938:	6022      	str	r2, [r4, #0]
   1b93a:	04db      	lsls	r3, r3, #19
   1b93c:	d447      	bmi.n	1b9ce <__sflush_r+0x102>
   1b93e:	4643      	mov	r3, r8
   1b940:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1b942:	601d      	str	r5, [r3, #0]
   1b944:	2900      	cmp	r1, #0
   1b946:	d008      	beq.n	1b95a <__sflush_r+0x8e>
   1b948:	0023      	movs	r3, r4
   1b94a:	3340      	adds	r3, #64	; 0x40
   1b94c:	4299      	cmp	r1, r3
   1b94e:	d002      	beq.n	1b956 <__sflush_r+0x8a>
   1b950:	4640      	mov	r0, r8
   1b952:	f000 f967 	bl	1bc24 <_free_r>
   1b956:	2300      	movs	r3, #0
   1b958:	6323      	str	r3, [r4, #48]	; 0x30
   1b95a:	2000      	movs	r0, #0
   1b95c:	bc04      	pop	{r2}
   1b95e:	4690      	mov	r8, r2
   1b960:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b962:	6926      	ldr	r6, [r4, #16]
   1b964:	2e00      	cmp	r6, #0
   1b966:	d0f8      	beq.n	1b95a <__sflush_r+0x8e>
   1b968:	6822      	ldr	r2, [r4, #0]
   1b96a:	6026      	str	r6, [r4, #0]
   1b96c:	1b95      	subs	r5, r2, r6
   1b96e:	2200      	movs	r2, #0
   1b970:	079b      	lsls	r3, r3, #30
   1b972:	d100      	bne.n	1b976 <__sflush_r+0xaa>
   1b974:	6962      	ldr	r2, [r4, #20]
   1b976:	60a2      	str	r2, [r4, #8]
   1b978:	2d00      	cmp	r5, #0
   1b97a:	dc04      	bgt.n	1b986 <__sflush_r+0xba>
   1b97c:	e7ed      	b.n	1b95a <__sflush_r+0x8e>
   1b97e:	1836      	adds	r6, r6, r0
   1b980:	1a2d      	subs	r5, r5, r0
   1b982:	2d00      	cmp	r5, #0
   1b984:	dde9      	ble.n	1b95a <__sflush_r+0x8e>
   1b986:	002b      	movs	r3, r5
   1b988:	0032      	movs	r2, r6
   1b98a:	69e1      	ldr	r1, [r4, #28]
   1b98c:	4640      	mov	r0, r8
   1b98e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1b990:	47b8      	blx	r7
   1b992:	2800      	cmp	r0, #0
   1b994:	dcf3      	bgt.n	1b97e <__sflush_r+0xb2>
   1b996:	2240      	movs	r2, #64	; 0x40
   1b998:	2001      	movs	r0, #1
   1b99a:	89a3      	ldrh	r3, [r4, #12]
   1b99c:	4240      	negs	r0, r0
   1b99e:	4313      	orrs	r3, r2
   1b9a0:	81a3      	strh	r3, [r4, #12]
   1b9a2:	e7db      	b.n	1b95c <__sflush_r+0x90>
   1b9a4:	4643      	mov	r3, r8
   1b9a6:	6819      	ldr	r1, [r3, #0]
   1b9a8:	291d      	cmp	r1, #29
   1b9aa:	d8f4      	bhi.n	1b996 <__sflush_r+0xca>
   1b9ac:	4b1a      	ldr	r3, [pc, #104]	; (1ba18 <__sflush_r+0x14c>)
   1b9ae:	2201      	movs	r2, #1
   1b9b0:	40cb      	lsrs	r3, r1
   1b9b2:	439a      	bics	r2, r3
   1b9b4:	d1ef      	bne.n	1b996 <__sflush_r+0xca>
   1b9b6:	89a3      	ldrh	r3, [r4, #12]
   1b9b8:	4e16      	ldr	r6, [pc, #88]	; (1ba14 <__sflush_r+0x148>)
   1b9ba:	6062      	str	r2, [r4, #4]
   1b9bc:	4033      	ands	r3, r6
   1b9be:	6922      	ldr	r2, [r4, #16]
   1b9c0:	b21b      	sxth	r3, r3
   1b9c2:	81a3      	strh	r3, [r4, #12]
   1b9c4:	6022      	str	r2, [r4, #0]
   1b9c6:	04db      	lsls	r3, r3, #19
   1b9c8:	d5b9      	bpl.n	1b93e <__sflush_r+0x72>
   1b9ca:	2900      	cmp	r1, #0
   1b9cc:	d1b7      	bne.n	1b93e <__sflush_r+0x72>
   1b9ce:	6520      	str	r0, [r4, #80]	; 0x50
   1b9d0:	e7b5      	b.n	1b93e <__sflush_r+0x72>
   1b9d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b9d4:	2a00      	cmp	r2, #0
   1b9d6:	dd00      	ble.n	1b9da <__sflush_r+0x10e>
   1b9d8:	e78a      	b.n	1b8f0 <__sflush_r+0x24>
   1b9da:	e7be      	b.n	1b95a <__sflush_r+0x8e>
   1b9dc:	2200      	movs	r2, #0
   1b9de:	2301      	movs	r3, #1
   1b9e0:	69e1      	ldr	r1, [r4, #28]
   1b9e2:	4640      	mov	r0, r8
   1b9e4:	47b0      	blx	r6
   1b9e6:	0002      	movs	r2, r0
   1b9e8:	1c43      	adds	r3, r0, #1
   1b9ea:	d002      	beq.n	1b9f2 <__sflush_r+0x126>
   1b9ec:	89a3      	ldrh	r3, [r4, #12]
   1b9ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b9f0:	e78b      	b.n	1b90a <__sflush_r+0x3e>
   1b9f2:	4643      	mov	r3, r8
   1b9f4:	681b      	ldr	r3, [r3, #0]
   1b9f6:	2b00      	cmp	r3, #0
   1b9f8:	d0f8      	beq.n	1b9ec <__sflush_r+0x120>
   1b9fa:	2b1d      	cmp	r3, #29
   1b9fc:	d001      	beq.n	1ba02 <__sflush_r+0x136>
   1b9fe:	2b16      	cmp	r3, #22
   1ba00:	d103      	bne.n	1ba0a <__sflush_r+0x13e>
   1ba02:	4643      	mov	r3, r8
   1ba04:	2000      	movs	r0, #0
   1ba06:	601d      	str	r5, [r3, #0]
   1ba08:	e7a8      	b.n	1b95c <__sflush_r+0x90>
   1ba0a:	2140      	movs	r1, #64	; 0x40
   1ba0c:	89a3      	ldrh	r3, [r4, #12]
   1ba0e:	430b      	orrs	r3, r1
   1ba10:	81a3      	strh	r3, [r4, #12]
   1ba12:	e7a3      	b.n	1b95c <__sflush_r+0x90>
   1ba14:	fffff7ff 	.word	0xfffff7ff
   1ba18:	20400001 	.word	0x20400001

0001ba1c <_fflush_r>:
   1ba1c:	b570      	push	{r4, r5, r6, lr}
   1ba1e:	0005      	movs	r5, r0
   1ba20:	000c      	movs	r4, r1
   1ba22:	2800      	cmp	r0, #0
   1ba24:	d002      	beq.n	1ba2c <_fflush_r+0x10>
   1ba26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ba28:	2b00      	cmp	r3, #0
   1ba2a:	d016      	beq.n	1ba5a <_fflush_r+0x3e>
   1ba2c:	220c      	movs	r2, #12
   1ba2e:	5ea3      	ldrsh	r3, [r4, r2]
   1ba30:	2600      	movs	r6, #0
   1ba32:	2b00      	cmp	r3, #0
   1ba34:	d00f      	beq.n	1ba56 <_fflush_r+0x3a>
   1ba36:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1ba38:	07d2      	lsls	r2, r2, #31
   1ba3a:	d401      	bmi.n	1ba40 <_fflush_r+0x24>
   1ba3c:	059b      	lsls	r3, r3, #22
   1ba3e:	d513      	bpl.n	1ba68 <_fflush_r+0x4c>
   1ba40:	0021      	movs	r1, r4
   1ba42:	0028      	movs	r0, r5
   1ba44:	f7ff ff42 	bl	1b8cc <__sflush_r>
   1ba48:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ba4a:	0006      	movs	r6, r0
   1ba4c:	07db      	lsls	r3, r3, #31
   1ba4e:	d402      	bmi.n	1ba56 <_fflush_r+0x3a>
   1ba50:	89a3      	ldrh	r3, [r4, #12]
   1ba52:	059b      	lsls	r3, r3, #22
   1ba54:	d504      	bpl.n	1ba60 <_fflush_r+0x44>
   1ba56:	0030      	movs	r0, r6
   1ba58:	bd70      	pop	{r4, r5, r6, pc}
   1ba5a:	f000 f839 	bl	1bad0 <__sinit>
   1ba5e:	e7e5      	b.n	1ba2c <_fflush_r+0x10>
   1ba60:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ba62:	f000 fb79 	bl	1c158 <__retarget_lock_release_recursive>
   1ba66:	e7f6      	b.n	1ba56 <_fflush_r+0x3a>
   1ba68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ba6a:	f000 fb73 	bl	1c154 <__retarget_lock_acquire_recursive>
   1ba6e:	e7e7      	b.n	1ba40 <_fflush_r+0x24>

0001ba70 <_cleanup_r>:
   1ba70:	b510      	push	{r4, lr}
   1ba72:	4902      	ldr	r1, [pc, #8]	; (1ba7c <_cleanup_r+0xc>)
   1ba74:	f000 fb36 	bl	1c0e4 <_fwalk_reent>
   1ba78:	bd10      	pop	{r4, pc}
   1ba7a:	46c0      	nop			; (mov r8, r8)
   1ba7c:	0001cfa5 	.word	0x0001cfa5

0001ba80 <std.isra.0>:
   1ba80:	2300      	movs	r3, #0
   1ba82:	b510      	push	{r4, lr}
   1ba84:	0004      	movs	r4, r0
   1ba86:	6003      	str	r3, [r0, #0]
   1ba88:	6043      	str	r3, [r0, #4]
   1ba8a:	6083      	str	r3, [r0, #8]
   1ba8c:	8181      	strh	r1, [r0, #12]
   1ba8e:	6643      	str	r3, [r0, #100]	; 0x64
   1ba90:	81c2      	strh	r2, [r0, #14]
   1ba92:	6103      	str	r3, [r0, #16]
   1ba94:	6143      	str	r3, [r0, #20]
   1ba96:	6183      	str	r3, [r0, #24]
   1ba98:	2208      	movs	r2, #8
   1ba9a:	2100      	movs	r1, #0
   1ba9c:	305c      	adds	r0, #92	; 0x5c
   1ba9e:	f7fc fe6b 	bl	18778 <memset>
   1baa2:	0020      	movs	r0, r4
   1baa4:	4b06      	ldr	r3, [pc, #24]	; (1bac0 <std.isra.0+0x40>)
   1baa6:	61e4      	str	r4, [r4, #28]
   1baa8:	6223      	str	r3, [r4, #32]
   1baaa:	4b06      	ldr	r3, [pc, #24]	; (1bac4 <std.isra.0+0x44>)
   1baac:	3058      	adds	r0, #88	; 0x58
   1baae:	6263      	str	r3, [r4, #36]	; 0x24
   1bab0:	4b05      	ldr	r3, [pc, #20]	; (1bac8 <std.isra.0+0x48>)
   1bab2:	62a3      	str	r3, [r4, #40]	; 0x28
   1bab4:	4b05      	ldr	r3, [pc, #20]	; (1bacc <std.isra.0+0x4c>)
   1bab6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bab8:	f000 fb48 	bl	1c14c <__retarget_lock_init_recursive>
   1babc:	bd10      	pop	{r4, pc}
   1babe:	46c0      	nop			; (mov r8, r8)
   1bac0:	0001ccd9 	.word	0x0001ccd9
   1bac4:	0001cd01 	.word	0x0001cd01
   1bac8:	0001cd3d 	.word	0x0001cd3d
   1bacc:	0001cd69 	.word	0x0001cd69

0001bad0 <__sinit>:
   1bad0:	b570      	push	{r4, r5, r6, lr}
   1bad2:	0004      	movs	r4, r0
   1bad4:	4d14      	ldr	r5, [pc, #80]	; (1bb28 <__sinit+0x58>)
   1bad6:	0028      	movs	r0, r5
   1bad8:	f000 fb3c 	bl	1c154 <__retarget_lock_acquire_recursive>
   1badc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bade:	2b00      	cmp	r3, #0
   1bae0:	d11d      	bne.n	1bb1e <__sinit+0x4e>
   1bae2:	4a12      	ldr	r2, [pc, #72]	; (1bb2c <__sinit+0x5c>)
   1bae4:	2104      	movs	r1, #4
   1bae6:	63e2      	str	r2, [r4, #60]	; 0x3c
   1bae8:	22b8      	movs	r2, #184	; 0xb8
   1baea:	0092      	lsls	r2, r2, #2
   1baec:	50a3      	str	r3, [r4, r2]
   1baee:	23b9      	movs	r3, #185	; 0xb9
   1baf0:	2203      	movs	r2, #3
   1baf2:	009b      	lsls	r3, r3, #2
   1baf4:	50e2      	str	r2, [r4, r3]
   1baf6:	3308      	adds	r3, #8
   1baf8:	18e2      	adds	r2, r4, r3
   1bafa:	3b04      	subs	r3, #4
   1bafc:	50e2      	str	r2, [r4, r3]
   1bafe:	6860      	ldr	r0, [r4, #4]
   1bb00:	2200      	movs	r2, #0
   1bb02:	f7ff ffbd 	bl	1ba80 <std.isra.0>
   1bb06:	2201      	movs	r2, #1
   1bb08:	2109      	movs	r1, #9
   1bb0a:	68a0      	ldr	r0, [r4, #8]
   1bb0c:	f7ff ffb8 	bl	1ba80 <std.isra.0>
   1bb10:	2202      	movs	r2, #2
   1bb12:	2112      	movs	r1, #18
   1bb14:	68e0      	ldr	r0, [r4, #12]
   1bb16:	f7ff ffb3 	bl	1ba80 <std.isra.0>
   1bb1a:	2301      	movs	r3, #1
   1bb1c:	63a3      	str	r3, [r4, #56]	; 0x38
   1bb1e:	0028      	movs	r0, r5
   1bb20:	f000 fb1a 	bl	1c158 <__retarget_lock_release_recursive>
   1bb24:	bd70      	pop	{r4, r5, r6, pc}
   1bb26:	46c0      	nop			; (mov r8, r8)
   1bb28:	20003058 	.word	0x20003058
   1bb2c:	0001ba71 	.word	0x0001ba71

0001bb30 <__sfp_lock_acquire>:
   1bb30:	b510      	push	{r4, lr}
   1bb32:	4802      	ldr	r0, [pc, #8]	; (1bb3c <__sfp_lock_acquire+0xc>)
   1bb34:	f000 fb0e 	bl	1c154 <__retarget_lock_acquire_recursive>
   1bb38:	bd10      	pop	{r4, pc}
   1bb3a:	46c0      	nop			; (mov r8, r8)
   1bb3c:	2000306c 	.word	0x2000306c

0001bb40 <__sfp_lock_release>:
   1bb40:	b510      	push	{r4, lr}
   1bb42:	4802      	ldr	r0, [pc, #8]	; (1bb4c <__sfp_lock_release+0xc>)
   1bb44:	f000 fb08 	bl	1c158 <__retarget_lock_release_recursive>
   1bb48:	bd10      	pop	{r4, pc}
   1bb4a:	46c0      	nop			; (mov r8, r8)
   1bb4c:	2000306c 	.word	0x2000306c

0001bb50 <__libc_fini_array>:
   1bb50:	b570      	push	{r4, r5, r6, lr}
   1bb52:	4b09      	ldr	r3, [pc, #36]	; (1bb78 <__libc_fini_array+0x28>)
   1bb54:	4c09      	ldr	r4, [pc, #36]	; (1bb7c <__libc_fini_array+0x2c>)
   1bb56:	1ae4      	subs	r4, r4, r3
   1bb58:	10a4      	asrs	r4, r4, #2
   1bb5a:	d009      	beq.n	1bb70 <__libc_fini_array+0x20>
   1bb5c:	4a08      	ldr	r2, [pc, #32]	; (1bb80 <__libc_fini_array+0x30>)
   1bb5e:	18a5      	adds	r5, r4, r2
   1bb60:	00ad      	lsls	r5, r5, #2
   1bb62:	18ed      	adds	r5, r5, r3
   1bb64:	682b      	ldr	r3, [r5, #0]
   1bb66:	3c01      	subs	r4, #1
   1bb68:	4798      	blx	r3
   1bb6a:	3d04      	subs	r5, #4
   1bb6c:	2c00      	cmp	r4, #0
   1bb6e:	d1f9      	bne.n	1bb64 <__libc_fini_array+0x14>
   1bb70:	f003 fa8a 	bl	1f088 <_fini>
   1bb74:	bd70      	pop	{r4, r5, r6, pc}
   1bb76:	46c0      	nop			; (mov r8, r8)
   1bb78:	0001f094 	.word	0x0001f094
   1bb7c:	0001f098 	.word	0x0001f098
   1bb80:	3fffffff 	.word	0x3fffffff

0001bb84 <_malloc_trim_r>:
   1bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb86:	000c      	movs	r4, r1
   1bb88:	0006      	movs	r6, r0
   1bb8a:	f7fc fe3f 	bl	1880c <__malloc_lock>
   1bb8e:	4f20      	ldr	r7, [pc, #128]	; (1bc10 <_malloc_trim_r+0x8c>)
   1bb90:	68bb      	ldr	r3, [r7, #8]
   1bb92:	685d      	ldr	r5, [r3, #4]
   1bb94:	2303      	movs	r3, #3
   1bb96:	439d      	bics	r5, r3
   1bb98:	4b1e      	ldr	r3, [pc, #120]	; (1bc14 <_malloc_trim_r+0x90>)
   1bb9a:	1b2c      	subs	r4, r5, r4
   1bb9c:	469c      	mov	ip, r3
   1bb9e:	4464      	add	r4, ip
   1bba0:	0b24      	lsrs	r4, r4, #12
   1bba2:	4b1d      	ldr	r3, [pc, #116]	; (1bc18 <_malloc_trim_r+0x94>)
   1bba4:	3c01      	subs	r4, #1
   1bba6:	0324      	lsls	r4, r4, #12
   1bba8:	429c      	cmp	r4, r3
   1bbaa:	dd07      	ble.n	1bbbc <_malloc_trim_r+0x38>
   1bbac:	2100      	movs	r1, #0
   1bbae:	0030      	movs	r0, r6
   1bbb0:	f7fc fecc 	bl	1894c <_sbrk_r>
   1bbb4:	68bb      	ldr	r3, [r7, #8]
   1bbb6:	195b      	adds	r3, r3, r5
   1bbb8:	4298      	cmp	r0, r3
   1bbba:	d004      	beq.n	1bbc6 <_malloc_trim_r+0x42>
   1bbbc:	0030      	movs	r0, r6
   1bbbe:	f7fc fe2d 	bl	1881c <__malloc_unlock>
   1bbc2:	2000      	movs	r0, #0
   1bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbc6:	4261      	negs	r1, r4
   1bbc8:	0030      	movs	r0, r6
   1bbca:	f7fc febf 	bl	1894c <_sbrk_r>
   1bbce:	1c43      	adds	r3, r0, #1
   1bbd0:	d00d      	beq.n	1bbee <_malloc_trim_r+0x6a>
   1bbd2:	2201      	movs	r2, #1
   1bbd4:	68bb      	ldr	r3, [r7, #8]
   1bbd6:	1b2d      	subs	r5, r5, r4
   1bbd8:	4315      	orrs	r5, r2
   1bbda:	605d      	str	r5, [r3, #4]
   1bbdc:	4b0f      	ldr	r3, [pc, #60]	; (1bc1c <_malloc_trim_r+0x98>)
   1bbde:	0030      	movs	r0, r6
   1bbe0:	681a      	ldr	r2, [r3, #0]
   1bbe2:	1b14      	subs	r4, r2, r4
   1bbe4:	601c      	str	r4, [r3, #0]
   1bbe6:	f7fc fe19 	bl	1881c <__malloc_unlock>
   1bbea:	2001      	movs	r0, #1
   1bbec:	e7ea      	b.n	1bbc4 <_malloc_trim_r+0x40>
   1bbee:	2100      	movs	r1, #0
   1bbf0:	0030      	movs	r0, r6
   1bbf2:	f7fc feab 	bl	1894c <_sbrk_r>
   1bbf6:	68ba      	ldr	r2, [r7, #8]
   1bbf8:	1a83      	subs	r3, r0, r2
   1bbfa:	2b0f      	cmp	r3, #15
   1bbfc:	ddde      	ble.n	1bbbc <_malloc_trim_r+0x38>
   1bbfe:	4908      	ldr	r1, [pc, #32]	; (1bc20 <_malloc_trim_r+0x9c>)
   1bc00:	6809      	ldr	r1, [r1, #0]
   1bc02:	1a40      	subs	r0, r0, r1
   1bc04:	4905      	ldr	r1, [pc, #20]	; (1bc1c <_malloc_trim_r+0x98>)
   1bc06:	6008      	str	r0, [r1, #0]
   1bc08:	2101      	movs	r1, #1
   1bc0a:	430b      	orrs	r3, r1
   1bc0c:	6053      	str	r3, [r2, #4]
   1bc0e:	e7d5      	b.n	1bbbc <_malloc_trim_r+0x38>
   1bc10:	200005b4 	.word	0x200005b4
   1bc14:	00000fef 	.word	0x00000fef
   1bc18:	00000fff 	.word	0x00000fff
   1bc1c:	20000f78 	.word	0x20000f78
   1bc20:	200009bc 	.word	0x200009bc

0001bc24 <_free_r>:
   1bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc26:	0004      	movs	r4, r0
   1bc28:	1e0d      	subs	r5, r1, #0
   1bc2a:	d03c      	beq.n	1bca6 <_free_r+0x82>
   1bc2c:	f7fc fdee 	bl	1880c <__malloc_lock>
   1bc30:	0029      	movs	r1, r5
   1bc32:	3908      	subs	r1, #8
   1bc34:	6848      	ldr	r0, [r1, #4]
   1bc36:	2301      	movs	r3, #1
   1bc38:	0005      	movs	r5, r0
   1bc3a:	2603      	movs	r6, #3
   1bc3c:	439d      	bics	r5, r3
   1bc3e:	194a      	adds	r2, r1, r5
   1bc40:	469c      	mov	ip, r3
   1bc42:	4f61      	ldr	r7, [pc, #388]	; (1bdc8 <_free_r+0x1a4>)
   1bc44:	6853      	ldr	r3, [r2, #4]
   1bc46:	43b3      	bics	r3, r6
   1bc48:	68be      	ldr	r6, [r7, #8]
   1bc4a:	42b2      	cmp	r2, r6
   1bc4c:	d056      	beq.n	1bcfc <_free_r+0xd8>
   1bc4e:	4666      	mov	r6, ip
   1bc50:	6053      	str	r3, [r2, #4]
   1bc52:	4206      	tst	r6, r0
   1bc54:	d10a      	bne.n	1bc6c <_free_r+0x48>
   1bc56:	003e      	movs	r6, r7
   1bc58:	6808      	ldr	r0, [r1, #0]
   1bc5a:	3608      	adds	r6, #8
   1bc5c:	1a09      	subs	r1, r1, r0
   1bc5e:	182d      	adds	r5, r5, r0
   1bc60:	6888      	ldr	r0, [r1, #8]
   1bc62:	42b0      	cmp	r0, r6
   1bc64:	d065      	beq.n	1bd32 <_free_r+0x10e>
   1bc66:	68ce      	ldr	r6, [r1, #12]
   1bc68:	60c6      	str	r6, [r0, #12]
   1bc6a:	60b0      	str	r0, [r6, #8]
   1bc6c:	2001      	movs	r0, #1
   1bc6e:	18d6      	adds	r6, r2, r3
   1bc70:	6876      	ldr	r6, [r6, #4]
   1bc72:	4206      	tst	r6, r0
   1bc74:	d033      	beq.n	1bcde <_free_r+0xba>
   1bc76:	4b55      	ldr	r3, [pc, #340]	; (1bdcc <_free_r+0x1a8>)
   1bc78:	4328      	orrs	r0, r5
   1bc7a:	6048      	str	r0, [r1, #4]
   1bc7c:	514d      	str	r5, [r1, r5]
   1bc7e:	429d      	cmp	r5, r3
   1bc80:	d812      	bhi.n	1bca8 <_free_r+0x84>
   1bc82:	08ed      	lsrs	r5, r5, #3
   1bc84:	3bff      	subs	r3, #255	; 0xff
   1bc86:	10aa      	asrs	r2, r5, #2
   1bc88:	3bff      	subs	r3, #255	; 0xff
   1bc8a:	4093      	lsls	r3, r2
   1bc8c:	687a      	ldr	r2, [r7, #4]
   1bc8e:	00ed      	lsls	r5, r5, #3
   1bc90:	4313      	orrs	r3, r2
   1bc92:	607b      	str	r3, [r7, #4]
   1bc94:	19ef      	adds	r7, r5, r7
   1bc96:	68bb      	ldr	r3, [r7, #8]
   1bc98:	60cf      	str	r7, [r1, #12]
   1bc9a:	608b      	str	r3, [r1, #8]
   1bc9c:	60b9      	str	r1, [r7, #8]
   1bc9e:	60d9      	str	r1, [r3, #12]
   1bca0:	0020      	movs	r0, r4
   1bca2:	f7fc fdbb 	bl	1881c <__malloc_unlock>
   1bca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bca8:	0a68      	lsrs	r0, r5, #9
   1bcaa:	2804      	cmp	r0, #4
   1bcac:	d850      	bhi.n	1bd50 <_free_r+0x12c>
   1bcae:	09a8      	lsrs	r0, r5, #6
   1bcb0:	0002      	movs	r2, r0
   1bcb2:	3039      	adds	r0, #57	; 0x39
   1bcb4:	3238      	adds	r2, #56	; 0x38
   1bcb6:	00c0      	lsls	r0, r0, #3
   1bcb8:	1838      	adds	r0, r7, r0
   1bcba:	3808      	subs	r0, #8
   1bcbc:	6883      	ldr	r3, [r0, #8]
   1bcbe:	2603      	movs	r6, #3
   1bcc0:	4298      	cmp	r0, r3
   1bcc2:	d04c      	beq.n	1bd5e <_free_r+0x13a>
   1bcc4:	685a      	ldr	r2, [r3, #4]
   1bcc6:	43b2      	bics	r2, r6
   1bcc8:	4295      	cmp	r5, r2
   1bcca:	d230      	bcs.n	1bd2e <_free_r+0x10a>
   1bccc:	689b      	ldr	r3, [r3, #8]
   1bcce:	4298      	cmp	r0, r3
   1bcd0:	d1f8      	bne.n	1bcc4 <_free_r+0xa0>
   1bcd2:	68c3      	ldr	r3, [r0, #12]
   1bcd4:	60cb      	str	r3, [r1, #12]
   1bcd6:	6088      	str	r0, [r1, #8]
   1bcd8:	6099      	str	r1, [r3, #8]
   1bcda:	60c1      	str	r1, [r0, #12]
   1bcdc:	e7e0      	b.n	1bca0 <_free_r+0x7c>
   1bcde:	18ed      	adds	r5, r5, r3
   1bce0:	4e3b      	ldr	r6, [pc, #236]	; (1bdd0 <_free_r+0x1ac>)
   1bce2:	6893      	ldr	r3, [r2, #8]
   1bce4:	42b3      	cmp	r3, r6
   1bce6:	d042      	beq.n	1bd6e <_free_r+0x14a>
   1bce8:	68d2      	ldr	r2, [r2, #12]
   1bcea:	4328      	orrs	r0, r5
   1bcec:	60da      	str	r2, [r3, #12]
   1bcee:	6093      	str	r3, [r2, #8]
   1bcf0:	4b36      	ldr	r3, [pc, #216]	; (1bdcc <_free_r+0x1a8>)
   1bcf2:	6048      	str	r0, [r1, #4]
   1bcf4:	514d      	str	r5, [r1, r5]
   1bcf6:	429d      	cmp	r5, r3
   1bcf8:	d8d6      	bhi.n	1bca8 <_free_r+0x84>
   1bcfa:	e7c2      	b.n	1bc82 <_free_r+0x5e>
   1bcfc:	4662      	mov	r2, ip
   1bcfe:	18eb      	adds	r3, r5, r3
   1bd00:	4202      	tst	r2, r0
   1bd02:	d106      	bne.n	1bd12 <_free_r+0xee>
   1bd04:	680a      	ldr	r2, [r1, #0]
   1bd06:	1a89      	subs	r1, r1, r2
   1bd08:	6888      	ldr	r0, [r1, #8]
   1bd0a:	189b      	adds	r3, r3, r2
   1bd0c:	68ca      	ldr	r2, [r1, #12]
   1bd0e:	60c2      	str	r2, [r0, #12]
   1bd10:	6090      	str	r0, [r2, #8]
   1bd12:	2201      	movs	r2, #1
   1bd14:	431a      	orrs	r2, r3
   1bd16:	604a      	str	r2, [r1, #4]
   1bd18:	4a2e      	ldr	r2, [pc, #184]	; (1bdd4 <_free_r+0x1b0>)
   1bd1a:	60b9      	str	r1, [r7, #8]
   1bd1c:	6812      	ldr	r2, [r2, #0]
   1bd1e:	4293      	cmp	r3, r2
   1bd20:	d3be      	bcc.n	1bca0 <_free_r+0x7c>
   1bd22:	4b2d      	ldr	r3, [pc, #180]	; (1bdd8 <_free_r+0x1b4>)
   1bd24:	0020      	movs	r0, r4
   1bd26:	6819      	ldr	r1, [r3, #0]
   1bd28:	f7ff ff2c 	bl	1bb84 <_malloc_trim_r>
   1bd2c:	e7b8      	b.n	1bca0 <_free_r+0x7c>
   1bd2e:	0018      	movs	r0, r3
   1bd30:	e7cf      	b.n	1bcd2 <_free_r+0xae>
   1bd32:	4666      	mov	r6, ip
   1bd34:	18d0      	adds	r0, r2, r3
   1bd36:	6840      	ldr	r0, [r0, #4]
   1bd38:	4230      	tst	r0, r6
   1bd3a:	d13f      	bne.n	1bdbc <_free_r+0x198>
   1bd3c:	6890      	ldr	r0, [r2, #8]
   1bd3e:	195d      	adds	r5, r3, r5
   1bd40:	68d3      	ldr	r3, [r2, #12]
   1bd42:	60c3      	str	r3, [r0, #12]
   1bd44:	6098      	str	r0, [r3, #8]
   1bd46:	4663      	mov	r3, ip
   1bd48:	432b      	orrs	r3, r5
   1bd4a:	604b      	str	r3, [r1, #4]
   1bd4c:	514d      	str	r5, [r1, r5]
   1bd4e:	e7a7      	b.n	1bca0 <_free_r+0x7c>
   1bd50:	2814      	cmp	r0, #20
   1bd52:	d814      	bhi.n	1bd7e <_free_r+0x15a>
   1bd54:	0002      	movs	r2, r0
   1bd56:	305c      	adds	r0, #92	; 0x5c
   1bd58:	325b      	adds	r2, #91	; 0x5b
   1bd5a:	00c0      	lsls	r0, r0, #3
   1bd5c:	e7ac      	b.n	1bcb8 <_free_r+0x94>
   1bd5e:	2301      	movs	r3, #1
   1bd60:	1092      	asrs	r2, r2, #2
   1bd62:	4093      	lsls	r3, r2
   1bd64:	687a      	ldr	r2, [r7, #4]
   1bd66:	4313      	orrs	r3, r2
   1bd68:	607b      	str	r3, [r7, #4]
   1bd6a:	0003      	movs	r3, r0
   1bd6c:	e7b2      	b.n	1bcd4 <_free_r+0xb0>
   1bd6e:	4328      	orrs	r0, r5
   1bd70:	60d9      	str	r1, [r3, #12]
   1bd72:	6099      	str	r1, [r3, #8]
   1bd74:	60cb      	str	r3, [r1, #12]
   1bd76:	608b      	str	r3, [r1, #8]
   1bd78:	6048      	str	r0, [r1, #4]
   1bd7a:	514d      	str	r5, [r1, r5]
   1bd7c:	e790      	b.n	1bca0 <_free_r+0x7c>
   1bd7e:	2854      	cmp	r0, #84	; 0x54
   1bd80:	d805      	bhi.n	1bd8e <_free_r+0x16a>
   1bd82:	0b28      	lsrs	r0, r5, #12
   1bd84:	0002      	movs	r2, r0
   1bd86:	306f      	adds	r0, #111	; 0x6f
   1bd88:	326e      	adds	r2, #110	; 0x6e
   1bd8a:	00c0      	lsls	r0, r0, #3
   1bd8c:	e794      	b.n	1bcb8 <_free_r+0x94>
   1bd8e:	22aa      	movs	r2, #170	; 0xaa
   1bd90:	0052      	lsls	r2, r2, #1
   1bd92:	4290      	cmp	r0, r2
   1bd94:	d805      	bhi.n	1bda2 <_free_r+0x17e>
   1bd96:	0be8      	lsrs	r0, r5, #15
   1bd98:	0002      	movs	r2, r0
   1bd9a:	3078      	adds	r0, #120	; 0x78
   1bd9c:	3277      	adds	r2, #119	; 0x77
   1bd9e:	00c0      	lsls	r0, r0, #3
   1bda0:	e78a      	b.n	1bcb8 <_free_r+0x94>
   1bda2:	4a0e      	ldr	r2, [pc, #56]	; (1bddc <_free_r+0x1b8>)
   1bda4:	4290      	cmp	r0, r2
   1bda6:	d805      	bhi.n	1bdb4 <_free_r+0x190>
   1bda8:	0ca8      	lsrs	r0, r5, #18
   1bdaa:	0002      	movs	r2, r0
   1bdac:	307d      	adds	r0, #125	; 0x7d
   1bdae:	327c      	adds	r2, #124	; 0x7c
   1bdb0:	00c0      	lsls	r0, r0, #3
   1bdb2:	e781      	b.n	1bcb8 <_free_r+0x94>
   1bdb4:	20fe      	movs	r0, #254	; 0xfe
   1bdb6:	227e      	movs	r2, #126	; 0x7e
   1bdb8:	0080      	lsls	r0, r0, #2
   1bdba:	e77d      	b.n	1bcb8 <_free_r+0x94>
   1bdbc:	4663      	mov	r3, ip
   1bdbe:	432b      	orrs	r3, r5
   1bdc0:	604b      	str	r3, [r1, #4]
   1bdc2:	6015      	str	r5, [r2, #0]
   1bdc4:	e76c      	b.n	1bca0 <_free_r+0x7c>
   1bdc6:	46c0      	nop			; (mov r8, r8)
   1bdc8:	200005b4 	.word	0x200005b4
   1bdcc:	000001ff 	.word	0x000001ff
   1bdd0:	200005bc 	.word	0x200005bc
   1bdd4:	200009c0 	.word	0x200009c0
   1bdd8:	20000fa8 	.word	0x20000fa8
   1bddc:	00000554 	.word	0x00000554

0001bde0 <__sfvwrite_r>:
   1bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bde2:	464e      	mov	r6, r9
   1bde4:	46de      	mov	lr, fp
   1bde6:	4657      	mov	r7, sl
   1bde8:	4645      	mov	r5, r8
   1bdea:	b5e0      	push	{r5, r6, r7, lr}
   1bdec:	6893      	ldr	r3, [r2, #8]
   1bdee:	b083      	sub	sp, #12
   1bdf0:	9000      	str	r0, [sp, #0]
   1bdf2:	000c      	movs	r4, r1
   1bdf4:	0016      	movs	r6, r2
   1bdf6:	2b00      	cmp	r3, #0
   1bdf8:	d025      	beq.n	1be46 <__sfvwrite_r+0x66>
   1bdfa:	898b      	ldrh	r3, [r1, #12]
   1bdfc:	071a      	lsls	r2, r3, #28
   1bdfe:	d52a      	bpl.n	1be56 <__sfvwrite_r+0x76>
   1be00:	690a      	ldr	r2, [r1, #16]
   1be02:	2a00      	cmp	r2, #0
   1be04:	d027      	beq.n	1be56 <__sfvwrite_r+0x76>
   1be06:	6832      	ldr	r2, [r6, #0]
   1be08:	4693      	mov	fp, r2
   1be0a:	079a      	lsls	r2, r3, #30
   1be0c:	d52f      	bpl.n	1be6e <__sfvwrite_r+0x8e>
   1be0e:	4bb2      	ldr	r3, [pc, #712]	; (1c0d8 <__sfvwrite_r+0x2f8>)
   1be10:	2700      	movs	r7, #0
   1be12:	2500      	movs	r5, #0
   1be14:	4698      	mov	r8, r3
   1be16:	46b1      	mov	r9, r6
   1be18:	2d00      	cmp	r5, #0
   1be1a:	d100      	bne.n	1be1e <__sfvwrite_r+0x3e>
   1be1c:	e072      	b.n	1bf04 <__sfvwrite_r+0x124>
   1be1e:	002b      	movs	r3, r5
   1be20:	4545      	cmp	r5, r8
   1be22:	d900      	bls.n	1be26 <__sfvwrite_r+0x46>
   1be24:	4bac      	ldr	r3, [pc, #688]	; (1c0d8 <__sfvwrite_r+0x2f8>)
   1be26:	003a      	movs	r2, r7
   1be28:	69e1      	ldr	r1, [r4, #28]
   1be2a:	9800      	ldr	r0, [sp, #0]
   1be2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1be2e:	47b0      	blx	r6
   1be30:	2800      	cmp	r0, #0
   1be32:	dc00      	bgt.n	1be36 <__sfvwrite_r+0x56>
   1be34:	e073      	b.n	1bf1e <__sfvwrite_r+0x13e>
   1be36:	464b      	mov	r3, r9
   1be38:	689b      	ldr	r3, [r3, #8]
   1be3a:	183f      	adds	r7, r7, r0
   1be3c:	1a2d      	subs	r5, r5, r0
   1be3e:	1a18      	subs	r0, r3, r0
   1be40:	464b      	mov	r3, r9
   1be42:	6098      	str	r0, [r3, #8]
   1be44:	d1e8      	bne.n	1be18 <__sfvwrite_r+0x38>
   1be46:	2000      	movs	r0, #0
   1be48:	b003      	add	sp, #12
   1be4a:	bc3c      	pop	{r2, r3, r4, r5}
   1be4c:	4690      	mov	r8, r2
   1be4e:	4699      	mov	r9, r3
   1be50:	46a2      	mov	sl, r4
   1be52:	46ab      	mov	fp, r5
   1be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be56:	0021      	movs	r1, r4
   1be58:	9800      	ldr	r0, [sp, #0]
   1be5a:	f7fe fc4b 	bl	1a6f4 <__swsetup_r>
   1be5e:	2800      	cmp	r0, #0
   1be60:	d000      	beq.n	1be64 <__sfvwrite_r+0x84>
   1be62:	e130      	b.n	1c0c6 <__sfvwrite_r+0x2e6>
   1be64:	6832      	ldr	r2, [r6, #0]
   1be66:	89a3      	ldrh	r3, [r4, #12]
   1be68:	4693      	mov	fp, r2
   1be6a:	079a      	lsls	r2, r3, #30
   1be6c:	d4cf      	bmi.n	1be0e <__sfvwrite_r+0x2e>
   1be6e:	07da      	lsls	r2, r3, #31
   1be70:	d55d      	bpl.n	1bf2e <__sfvwrite_r+0x14e>
   1be72:	2300      	movs	r3, #0
   1be74:	2000      	movs	r0, #0
   1be76:	469a      	mov	sl, r3
   1be78:	2700      	movs	r7, #0
   1be7a:	001d      	movs	r5, r3
   1be7c:	46b1      	mov	r9, r6
   1be7e:	e029      	b.n	1bed4 <__sfvwrite_r+0xf4>
   1be80:	2800      	cmp	r0, #0
   1be82:	d033      	beq.n	1beec <__sfvwrite_r+0x10c>
   1be84:	46a8      	mov	r8, r5
   1be86:	42bd      	cmp	r5, r7
   1be88:	d900      	bls.n	1be8c <__sfvwrite_r+0xac>
   1be8a:	46b8      	mov	r8, r7
   1be8c:	6820      	ldr	r0, [r4, #0]
   1be8e:	6922      	ldr	r2, [r4, #16]
   1be90:	4646      	mov	r6, r8
   1be92:	6963      	ldr	r3, [r4, #20]
   1be94:	4290      	cmp	r0, r2
   1be96:	d907      	bls.n	1bea8 <__sfvwrite_r+0xc8>
   1be98:	68a2      	ldr	r2, [r4, #8]
   1be9a:	4694      	mov	ip, r2
   1be9c:	449c      	add	ip, r3
   1be9e:	4662      	mov	r2, ip
   1bea0:	9201      	str	r2, [sp, #4]
   1bea2:	45e0      	cmp	r8, ip
   1bea4:	dd00      	ble.n	1bea8 <__sfvwrite_r+0xc8>
   1bea6:	e0e9      	b.n	1c07c <__sfvwrite_r+0x29c>
   1bea8:	4598      	cmp	r8, r3
   1beaa:	da00      	bge.n	1beae <__sfvwrite_r+0xce>
   1beac:	e08f      	b.n	1bfce <__sfvwrite_r+0x1ee>
   1beae:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1beb0:	4652      	mov	r2, sl
   1beb2:	69e1      	ldr	r1, [r4, #28]
   1beb4:	9800      	ldr	r0, [sp, #0]
   1beb6:	47b0      	blx	r6
   1beb8:	1e06      	subs	r6, r0, #0
   1beba:	dd30      	ble.n	1bf1e <__sfvwrite_r+0x13e>
   1bebc:	1bad      	subs	r5, r5, r6
   1bebe:	2001      	movs	r0, #1
   1bec0:	2d00      	cmp	r5, #0
   1bec2:	d026      	beq.n	1bf12 <__sfvwrite_r+0x132>
   1bec4:	464b      	mov	r3, r9
   1bec6:	689b      	ldr	r3, [r3, #8]
   1bec8:	44b2      	add	sl, r6
   1beca:	1bbf      	subs	r7, r7, r6
   1becc:	1b9e      	subs	r6, r3, r6
   1bece:	464b      	mov	r3, r9
   1bed0:	609e      	str	r6, [r3, #8]
   1bed2:	d0b8      	beq.n	1be46 <__sfvwrite_r+0x66>
   1bed4:	2f00      	cmp	r7, #0
   1bed6:	d1d3      	bne.n	1be80 <__sfvwrite_r+0xa0>
   1bed8:	465b      	mov	r3, fp
   1beda:	681b      	ldr	r3, [r3, #0]
   1bedc:	469a      	mov	sl, r3
   1bede:	465b      	mov	r3, fp
   1bee0:	685f      	ldr	r7, [r3, #4]
   1bee2:	2308      	movs	r3, #8
   1bee4:	469c      	mov	ip, r3
   1bee6:	44e3      	add	fp, ip
   1bee8:	2f00      	cmp	r7, #0
   1beea:	d0f5      	beq.n	1bed8 <__sfvwrite_r+0xf8>
   1beec:	003a      	movs	r2, r7
   1beee:	210a      	movs	r1, #10
   1bef0:	4650      	mov	r0, sl
   1bef2:	f000 f9ab 	bl	1c24c <memchr>
   1bef6:	2800      	cmp	r0, #0
   1bef8:	d100      	bne.n	1befc <__sfvwrite_r+0x11c>
   1befa:	e0e2      	b.n	1c0c2 <__sfvwrite_r+0x2e2>
   1befc:	4653      	mov	r3, sl
   1befe:	3001      	adds	r0, #1
   1bf00:	1ac5      	subs	r5, r0, r3
   1bf02:	e7bf      	b.n	1be84 <__sfvwrite_r+0xa4>
   1bf04:	465b      	mov	r3, fp
   1bf06:	681f      	ldr	r7, [r3, #0]
   1bf08:	685d      	ldr	r5, [r3, #4]
   1bf0a:	2308      	movs	r3, #8
   1bf0c:	469c      	mov	ip, r3
   1bf0e:	44e3      	add	fp, ip
   1bf10:	e782      	b.n	1be18 <__sfvwrite_r+0x38>
   1bf12:	0021      	movs	r1, r4
   1bf14:	9800      	ldr	r0, [sp, #0]
   1bf16:	f7ff fd81 	bl	1ba1c <_fflush_r>
   1bf1a:	2800      	cmp	r0, #0
   1bf1c:	d0d2      	beq.n	1bec4 <__sfvwrite_r+0xe4>
   1bf1e:	220c      	movs	r2, #12
   1bf20:	5ea3      	ldrsh	r3, [r4, r2]
   1bf22:	2240      	movs	r2, #64	; 0x40
   1bf24:	2001      	movs	r0, #1
   1bf26:	4313      	orrs	r3, r2
   1bf28:	81a3      	strh	r3, [r4, #12]
   1bf2a:	4240      	negs	r0, r0
   1bf2c:	e78c      	b.n	1be48 <__sfvwrite_r+0x68>
   1bf2e:	2200      	movs	r2, #0
   1bf30:	4691      	mov	r9, r2
   1bf32:	464d      	mov	r5, r9
   1bf34:	2d00      	cmp	r5, #0
   1bf36:	d023      	beq.n	1bf80 <__sfvwrite_r+0x1a0>
   1bf38:	68a2      	ldr	r2, [r4, #8]
   1bf3a:	4690      	mov	r8, r2
   1bf3c:	2280      	movs	r2, #128	; 0x80
   1bf3e:	0092      	lsls	r2, r2, #2
   1bf40:	4213      	tst	r3, r2
   1bf42:	d026      	beq.n	1bf92 <__sfvwrite_r+0x1b2>
   1bf44:	46c2      	mov	sl, r8
   1bf46:	4545      	cmp	r5, r8
   1bf48:	d34d      	bcc.n	1bfe6 <__sfvwrite_r+0x206>
   1bf4a:	2290      	movs	r2, #144	; 0x90
   1bf4c:	00d2      	lsls	r2, r2, #3
   1bf4e:	4213      	tst	r3, r2
   1bf50:	d14e      	bne.n	1bff0 <__sfvwrite_r+0x210>
   1bf52:	002f      	movs	r7, r5
   1bf54:	6820      	ldr	r0, [r4, #0]
   1bf56:	4652      	mov	r2, sl
   1bf58:	4649      	mov	r1, r9
   1bf5a:	f7fc fbbd 	bl	186d8 <memmove>
   1bf5e:	4642      	mov	r2, r8
   1bf60:	68a3      	ldr	r3, [r4, #8]
   1bf62:	1a98      	subs	r0, r3, r2
   1bf64:	6823      	ldr	r3, [r4, #0]
   1bf66:	60a0      	str	r0, [r4, #8]
   1bf68:	4453      	add	r3, sl
   1bf6a:	6023      	str	r3, [r4, #0]
   1bf6c:	68b3      	ldr	r3, [r6, #8]
   1bf6e:	44b9      	add	r9, r7
   1bf70:	1bed      	subs	r5, r5, r7
   1bf72:	1bdf      	subs	r7, r3, r7
   1bf74:	60b7      	str	r7, [r6, #8]
   1bf76:	d100      	bne.n	1bf7a <__sfvwrite_r+0x19a>
   1bf78:	e765      	b.n	1be46 <__sfvwrite_r+0x66>
   1bf7a:	89a3      	ldrh	r3, [r4, #12]
   1bf7c:	2d00      	cmp	r5, #0
   1bf7e:	d1db      	bne.n	1bf38 <__sfvwrite_r+0x158>
   1bf80:	465a      	mov	r2, fp
   1bf82:	6812      	ldr	r2, [r2, #0]
   1bf84:	4691      	mov	r9, r2
   1bf86:	465a      	mov	r2, fp
   1bf88:	6855      	ldr	r5, [r2, #4]
   1bf8a:	2208      	movs	r2, #8
   1bf8c:	4694      	mov	ip, r2
   1bf8e:	44e3      	add	fp, ip
   1bf90:	e7d0      	b.n	1bf34 <__sfvwrite_r+0x154>
   1bf92:	6820      	ldr	r0, [r4, #0]
   1bf94:	6923      	ldr	r3, [r4, #16]
   1bf96:	4298      	cmp	r0, r3
   1bf98:	d802      	bhi.n	1bfa0 <__sfvwrite_r+0x1c0>
   1bf9a:	6967      	ldr	r7, [r4, #20]
   1bf9c:	42bd      	cmp	r5, r7
   1bf9e:	d259      	bcs.n	1c054 <__sfvwrite_r+0x274>
   1bfa0:	4647      	mov	r7, r8
   1bfa2:	42af      	cmp	r7, r5
   1bfa4:	d900      	bls.n	1bfa8 <__sfvwrite_r+0x1c8>
   1bfa6:	002f      	movs	r7, r5
   1bfa8:	003a      	movs	r2, r7
   1bfaa:	4649      	mov	r1, r9
   1bfac:	f7fc fb94 	bl	186d8 <memmove>
   1bfb0:	68a3      	ldr	r3, [r4, #8]
   1bfb2:	6822      	ldr	r2, [r4, #0]
   1bfb4:	1bdb      	subs	r3, r3, r7
   1bfb6:	19d2      	adds	r2, r2, r7
   1bfb8:	60a3      	str	r3, [r4, #8]
   1bfba:	6022      	str	r2, [r4, #0]
   1bfbc:	2b00      	cmp	r3, #0
   1bfbe:	d1d5      	bne.n	1bf6c <__sfvwrite_r+0x18c>
   1bfc0:	0021      	movs	r1, r4
   1bfc2:	9800      	ldr	r0, [sp, #0]
   1bfc4:	f7ff fd2a 	bl	1ba1c <_fflush_r>
   1bfc8:	2800      	cmp	r0, #0
   1bfca:	d0cf      	beq.n	1bf6c <__sfvwrite_r+0x18c>
   1bfcc:	e7a7      	b.n	1bf1e <__sfvwrite_r+0x13e>
   1bfce:	4642      	mov	r2, r8
   1bfd0:	4651      	mov	r1, sl
   1bfd2:	f7fc fb81 	bl	186d8 <memmove>
   1bfd6:	4642      	mov	r2, r8
   1bfd8:	68a3      	ldr	r3, [r4, #8]
   1bfda:	1a9b      	subs	r3, r3, r2
   1bfdc:	60a3      	str	r3, [r4, #8]
   1bfde:	6823      	ldr	r3, [r4, #0]
   1bfe0:	4443      	add	r3, r8
   1bfe2:	6023      	str	r3, [r4, #0]
   1bfe4:	e76a      	b.n	1bebc <__sfvwrite_r+0xdc>
   1bfe6:	46a8      	mov	r8, r5
   1bfe8:	6820      	ldr	r0, [r4, #0]
   1bfea:	002f      	movs	r7, r5
   1bfec:	46aa      	mov	sl, r5
   1bfee:	e7b2      	b.n	1bf56 <__sfvwrite_r+0x176>
   1bff0:	6921      	ldr	r1, [r4, #16]
   1bff2:	6822      	ldr	r2, [r4, #0]
   1bff4:	1a52      	subs	r2, r2, r1
   1bff6:	4692      	mov	sl, r2
   1bff8:	6962      	ldr	r2, [r4, #20]
   1bffa:	0057      	lsls	r7, r2, #1
   1bffc:	18bf      	adds	r7, r7, r2
   1bffe:	0ffa      	lsrs	r2, r7, #31
   1c000:	19d7      	adds	r7, r2, r7
   1c002:	4652      	mov	r2, sl
   1c004:	1c50      	adds	r0, r2, #1
   1c006:	107f      	asrs	r7, r7, #1
   1c008:	1940      	adds	r0, r0, r5
   1c00a:	003a      	movs	r2, r7
   1c00c:	42b8      	cmp	r0, r7
   1c00e:	d901      	bls.n	1c014 <__sfvwrite_r+0x234>
   1c010:	0007      	movs	r7, r0
   1c012:	0002      	movs	r2, r0
   1c014:	055b      	lsls	r3, r3, #21
   1c016:	d542      	bpl.n	1c09e <__sfvwrite_r+0x2be>
   1c018:	0011      	movs	r1, r2
   1c01a:	9800      	ldr	r0, [sp, #0]
   1c01c:	f7fc f850 	bl	180c0 <_malloc_r>
   1c020:	4680      	mov	r8, r0
   1c022:	1e03      	subs	r3, r0, #0
   1c024:	d052      	beq.n	1c0cc <__sfvwrite_r+0x2ec>
   1c026:	4652      	mov	r2, sl
   1c028:	6921      	ldr	r1, [r4, #16]
   1c02a:	f7fc fb13 	bl	18654 <memcpy>
   1c02e:	89a3      	ldrh	r3, [r4, #12]
   1c030:	4a2a      	ldr	r2, [pc, #168]	; (1c0dc <__sfvwrite_r+0x2fc>)
   1c032:	4013      	ands	r3, r2
   1c034:	2280      	movs	r2, #128	; 0x80
   1c036:	4313      	orrs	r3, r2
   1c038:	81a3      	strh	r3, [r4, #12]
   1c03a:	4643      	mov	r3, r8
   1c03c:	4640      	mov	r0, r8
   1c03e:	6123      	str	r3, [r4, #16]
   1c040:	4653      	mov	r3, sl
   1c042:	4450      	add	r0, sl
   1c044:	6167      	str	r7, [r4, #20]
   1c046:	1aff      	subs	r7, r7, r3
   1c048:	60a7      	str	r7, [r4, #8]
   1c04a:	6020      	str	r0, [r4, #0]
   1c04c:	46a8      	mov	r8, r5
   1c04e:	002f      	movs	r7, r5
   1c050:	46aa      	mov	sl, r5
   1c052:	e780      	b.n	1bf56 <__sfvwrite_r+0x176>
   1c054:	4b22      	ldr	r3, [pc, #136]	; (1c0e0 <__sfvwrite_r+0x300>)
   1c056:	0028      	movs	r0, r5
   1c058:	429d      	cmp	r5, r3
   1c05a:	d900      	bls.n	1c05e <__sfvwrite_r+0x27e>
   1c05c:	0018      	movs	r0, r3
   1c05e:	0039      	movs	r1, r7
   1c060:	f7f9 f800 	bl	15064 <__divsi3>
   1c064:	003b      	movs	r3, r7
   1c066:	464a      	mov	r2, r9
   1c068:	4343      	muls	r3, r0
   1c06a:	69e1      	ldr	r1, [r4, #28]
   1c06c:	9800      	ldr	r0, [sp, #0]
   1c06e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1c070:	47b8      	blx	r7
   1c072:	2800      	cmp	r0, #0
   1c074:	dc00      	bgt.n	1c078 <__sfvwrite_r+0x298>
   1c076:	e752      	b.n	1bf1e <__sfvwrite_r+0x13e>
   1c078:	0007      	movs	r7, r0
   1c07a:	e777      	b.n	1bf6c <__sfvwrite_r+0x18c>
   1c07c:	4666      	mov	r6, ip
   1c07e:	4651      	mov	r1, sl
   1c080:	f7fc fb2a 	bl	186d8 <memmove>
   1c084:	46b4      	mov	ip, r6
   1c086:	6823      	ldr	r3, [r4, #0]
   1c088:	0021      	movs	r1, r4
   1c08a:	4463      	add	r3, ip
   1c08c:	6023      	str	r3, [r4, #0]
   1c08e:	9800      	ldr	r0, [sp, #0]
   1c090:	f7ff fcc4 	bl	1ba1c <_fflush_r>
   1c094:	2800      	cmp	r0, #0
   1c096:	d000      	beq.n	1c09a <__sfvwrite_r+0x2ba>
   1c098:	e741      	b.n	1bf1e <__sfvwrite_r+0x13e>
   1c09a:	9e01      	ldr	r6, [sp, #4]
   1c09c:	e70e      	b.n	1bebc <__sfvwrite_r+0xdc>
   1c09e:	9800      	ldr	r0, [sp, #0]
   1c0a0:	f000 fc5c 	bl	1c95c <_realloc_r>
   1c0a4:	4680      	mov	r8, r0
   1c0a6:	2800      	cmp	r0, #0
   1c0a8:	d1c7      	bne.n	1c03a <__sfvwrite_r+0x25a>
   1c0aa:	9d00      	ldr	r5, [sp, #0]
   1c0ac:	6921      	ldr	r1, [r4, #16]
   1c0ae:	0028      	movs	r0, r5
   1c0b0:	f7ff fdb8 	bl	1bc24 <_free_r>
   1c0b4:	2280      	movs	r2, #128	; 0x80
   1c0b6:	89a3      	ldrh	r3, [r4, #12]
   1c0b8:	4393      	bics	r3, r2
   1c0ba:	3a74      	subs	r2, #116	; 0x74
   1c0bc:	b21b      	sxth	r3, r3
   1c0be:	602a      	str	r2, [r5, #0]
   1c0c0:	e72f      	b.n	1bf22 <__sfvwrite_r+0x142>
   1c0c2:	1c7d      	adds	r5, r7, #1
   1c0c4:	e6de      	b.n	1be84 <__sfvwrite_r+0xa4>
   1c0c6:	2001      	movs	r0, #1
   1c0c8:	4240      	negs	r0, r0
   1c0ca:	e6bd      	b.n	1be48 <__sfvwrite_r+0x68>
   1c0cc:	9a00      	ldr	r2, [sp, #0]
   1c0ce:	330c      	adds	r3, #12
   1c0d0:	6013      	str	r3, [r2, #0]
   1c0d2:	220c      	movs	r2, #12
   1c0d4:	5ea3      	ldrsh	r3, [r4, r2]
   1c0d6:	e724      	b.n	1bf22 <__sfvwrite_r+0x142>
   1c0d8:	7ffffc00 	.word	0x7ffffc00
   1c0dc:	fffffb7f 	.word	0xfffffb7f
   1c0e0:	7fffffff 	.word	0x7fffffff

0001c0e4 <_fwalk_reent>:
   1c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0e6:	4647      	mov	r7, r8
   1c0e8:	46ce      	mov	lr, r9
   1c0ea:	b580      	push	{r7, lr}
   1c0ec:	27b8      	movs	r7, #184	; 0xb8
   1c0ee:	4680      	mov	r8, r0
   1c0f0:	00bf      	lsls	r7, r7, #2
   1c0f2:	4447      	add	r7, r8
   1c0f4:	4689      	mov	r9, r1
   1c0f6:	2600      	movs	r6, #0
   1c0f8:	2f00      	cmp	r7, #0
   1c0fa:	d014      	beq.n	1c126 <_fwalk_reent+0x42>
   1c0fc:	687b      	ldr	r3, [r7, #4]
   1c0fe:	68bc      	ldr	r4, [r7, #8]
   1c100:	1e5d      	subs	r5, r3, #1
   1c102:	d40d      	bmi.n	1c120 <_fwalk_reent+0x3c>
   1c104:	89a3      	ldrh	r3, [r4, #12]
   1c106:	2b01      	cmp	r3, #1
   1c108:	d907      	bls.n	1c11a <_fwalk_reent+0x36>
   1c10a:	220e      	movs	r2, #14
   1c10c:	5ea3      	ldrsh	r3, [r4, r2]
   1c10e:	3301      	adds	r3, #1
   1c110:	d003      	beq.n	1c11a <_fwalk_reent+0x36>
   1c112:	0021      	movs	r1, r4
   1c114:	4640      	mov	r0, r8
   1c116:	47c8      	blx	r9
   1c118:	4306      	orrs	r6, r0
   1c11a:	3468      	adds	r4, #104	; 0x68
   1c11c:	3d01      	subs	r5, #1
   1c11e:	d2f1      	bcs.n	1c104 <_fwalk_reent+0x20>
   1c120:	683f      	ldr	r7, [r7, #0]
   1c122:	2f00      	cmp	r7, #0
   1c124:	d1ea      	bne.n	1c0fc <_fwalk_reent+0x18>
   1c126:	0030      	movs	r0, r6
   1c128:	bc0c      	pop	{r2, r3}
   1c12a:	4690      	mov	r8, r2
   1c12c:	4699      	mov	r9, r3
   1c12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c130 <_localeconv_r>:
   1c130:	4b04      	ldr	r3, [pc, #16]	; (1c144 <_localeconv_r+0x14>)
   1c132:	681b      	ldr	r3, [r3, #0]
   1c134:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1c136:	2800      	cmp	r0, #0
   1c138:	d001      	beq.n	1c13e <_localeconv_r+0xe>
   1c13a:	30f0      	adds	r0, #240	; 0xf0
   1c13c:	4770      	bx	lr
   1c13e:	4802      	ldr	r0, [pc, #8]	; (1c148 <_localeconv_r+0x18>)
   1c140:	e7fb      	b.n	1c13a <_localeconv_r+0xa>
   1c142:	46c0      	nop			; (mov r8, r8)
   1c144:	2000001c 	.word	0x2000001c
   1c148:	20000448 	.word	0x20000448

0001c14c <__retarget_lock_init_recursive>:
   1c14c:	4770      	bx	lr
   1c14e:	46c0      	nop			; (mov r8, r8)

0001c150 <__retarget_lock_close_recursive>:
   1c150:	4770      	bx	lr
   1c152:	46c0      	nop			; (mov r8, r8)

0001c154 <__retarget_lock_acquire_recursive>:
   1c154:	4770      	bx	lr
   1c156:	46c0      	nop			; (mov r8, r8)

0001c158 <__retarget_lock_release_recursive>:
   1c158:	4770      	bx	lr
   1c15a:	46c0      	nop			; (mov r8, r8)

0001c15c <__swhatbuf_r>:
   1c15c:	b570      	push	{r4, r5, r6, lr}
   1c15e:	000c      	movs	r4, r1
   1c160:	001e      	movs	r6, r3
   1c162:	230e      	movs	r3, #14
   1c164:	5ec9      	ldrsh	r1, [r1, r3]
   1c166:	b090      	sub	sp, #64	; 0x40
   1c168:	0015      	movs	r5, r2
   1c16a:	2900      	cmp	r1, #0
   1c16c:	db15      	blt.n	1c19a <__swhatbuf_r+0x3e>
   1c16e:	aa01      	add	r2, sp, #4
   1c170:	f000 fff8 	bl	1d164 <_fstat_r>
   1c174:	2800      	cmp	r0, #0
   1c176:	db10      	blt.n	1c19a <__swhatbuf_r+0x3e>
   1c178:	22f0      	movs	r2, #240	; 0xf0
   1c17a:	9b02      	ldr	r3, [sp, #8]
   1c17c:	0212      	lsls	r2, r2, #8
   1c17e:	4013      	ands	r3, r2
   1c180:	4a0d      	ldr	r2, [pc, #52]	; (1c1b8 <__swhatbuf_r+0x5c>)
   1c182:	2080      	movs	r0, #128	; 0x80
   1c184:	4694      	mov	ip, r2
   1c186:	4463      	add	r3, ip
   1c188:	425a      	negs	r2, r3
   1c18a:	4153      	adcs	r3, r2
   1c18c:	6033      	str	r3, [r6, #0]
   1c18e:	2380      	movs	r3, #128	; 0x80
   1c190:	00db      	lsls	r3, r3, #3
   1c192:	602b      	str	r3, [r5, #0]
   1c194:	0100      	lsls	r0, r0, #4
   1c196:	b010      	add	sp, #64	; 0x40
   1c198:	bd70      	pop	{r4, r5, r6, pc}
   1c19a:	2300      	movs	r3, #0
   1c19c:	6033      	str	r3, [r6, #0]
   1c19e:	89a3      	ldrh	r3, [r4, #12]
   1c1a0:	061b      	lsls	r3, r3, #24
   1c1a2:	d503      	bpl.n	1c1ac <__swhatbuf_r+0x50>
   1c1a4:	2340      	movs	r3, #64	; 0x40
   1c1a6:	2000      	movs	r0, #0
   1c1a8:	602b      	str	r3, [r5, #0]
   1c1aa:	e7f4      	b.n	1c196 <__swhatbuf_r+0x3a>
   1c1ac:	2380      	movs	r3, #128	; 0x80
   1c1ae:	00db      	lsls	r3, r3, #3
   1c1b0:	602b      	str	r3, [r5, #0]
   1c1b2:	2000      	movs	r0, #0
   1c1b4:	e7ef      	b.n	1c196 <__swhatbuf_r+0x3a>
   1c1b6:	46c0      	nop			; (mov r8, r8)
   1c1b8:	ffffe000 	.word	0xffffe000

0001c1bc <__smakebuf_r>:
   1c1bc:	b570      	push	{r4, r5, r6, lr}
   1c1be:	898b      	ldrh	r3, [r1, #12]
   1c1c0:	b082      	sub	sp, #8
   1c1c2:	0006      	movs	r6, r0
   1c1c4:	000c      	movs	r4, r1
   1c1c6:	079b      	lsls	r3, r3, #30
   1c1c8:	d507      	bpl.n	1c1da <__smakebuf_r+0x1e>
   1c1ca:	0023      	movs	r3, r4
   1c1cc:	3343      	adds	r3, #67	; 0x43
   1c1ce:	6023      	str	r3, [r4, #0]
   1c1d0:	6123      	str	r3, [r4, #16]
   1c1d2:	2301      	movs	r3, #1
   1c1d4:	6163      	str	r3, [r4, #20]
   1c1d6:	b002      	add	sp, #8
   1c1d8:	bd70      	pop	{r4, r5, r6, pc}
   1c1da:	ab01      	add	r3, sp, #4
   1c1dc:	466a      	mov	r2, sp
   1c1de:	f7ff ffbd 	bl	1c15c <__swhatbuf_r>
   1c1e2:	9900      	ldr	r1, [sp, #0]
   1c1e4:	0005      	movs	r5, r0
   1c1e6:	0030      	movs	r0, r6
   1c1e8:	f7fb ff6a 	bl	180c0 <_malloc_r>
   1c1ec:	2800      	cmp	r0, #0
   1c1ee:	d01e      	beq.n	1c22e <__smakebuf_r+0x72>
   1c1f0:	2280      	movs	r2, #128	; 0x80
   1c1f2:	4b15      	ldr	r3, [pc, #84]	; (1c248 <__smakebuf_r+0x8c>)
   1c1f4:	63f3      	str	r3, [r6, #60]	; 0x3c
   1c1f6:	89a3      	ldrh	r3, [r4, #12]
   1c1f8:	6020      	str	r0, [r4, #0]
   1c1fa:	4313      	orrs	r3, r2
   1c1fc:	9a00      	ldr	r2, [sp, #0]
   1c1fe:	b21b      	sxth	r3, r3
   1c200:	6162      	str	r2, [r4, #20]
   1c202:	9a01      	ldr	r2, [sp, #4]
   1c204:	81a3      	strh	r3, [r4, #12]
   1c206:	6120      	str	r0, [r4, #16]
   1c208:	2a00      	cmp	r2, #0
   1c20a:	d102      	bne.n	1c212 <__smakebuf_r+0x56>
   1c20c:	432b      	orrs	r3, r5
   1c20e:	81a3      	strh	r3, [r4, #12]
   1c210:	e7e1      	b.n	1c1d6 <__smakebuf_r+0x1a>
   1c212:	230e      	movs	r3, #14
   1c214:	5ee1      	ldrsh	r1, [r4, r3]
   1c216:	0030      	movs	r0, r6
   1c218:	f000 ffb8 	bl	1d18c <_isatty_r>
   1c21c:	2800      	cmp	r0, #0
   1c21e:	d010      	beq.n	1c242 <__smakebuf_r+0x86>
   1c220:	2203      	movs	r2, #3
   1c222:	89a3      	ldrh	r3, [r4, #12]
   1c224:	4393      	bics	r3, r2
   1c226:	2201      	movs	r2, #1
   1c228:	4313      	orrs	r3, r2
   1c22a:	b21b      	sxth	r3, r3
   1c22c:	e7ee      	b.n	1c20c <__smakebuf_r+0x50>
   1c22e:	220c      	movs	r2, #12
   1c230:	5ea3      	ldrsh	r3, [r4, r2]
   1c232:	059a      	lsls	r2, r3, #22
   1c234:	d4cf      	bmi.n	1c1d6 <__smakebuf_r+0x1a>
   1c236:	2203      	movs	r2, #3
   1c238:	4393      	bics	r3, r2
   1c23a:	2202      	movs	r2, #2
   1c23c:	4313      	orrs	r3, r2
   1c23e:	81a3      	strh	r3, [r4, #12]
   1c240:	e7c3      	b.n	1c1ca <__smakebuf_r+0xe>
   1c242:	220c      	movs	r2, #12
   1c244:	5ea3      	ldrsh	r3, [r4, r2]
   1c246:	e7e1      	b.n	1c20c <__smakebuf_r+0x50>
   1c248:	0001ba71 	.word	0x0001ba71

0001c24c <memchr>:
   1c24c:	b570      	push	{r4, r5, r6, lr}
   1c24e:	b2cd      	uxtb	r5, r1
   1c250:	0783      	lsls	r3, r0, #30
   1c252:	d034      	beq.n	1c2be <memchr+0x72>
   1c254:	1e54      	subs	r4, r2, #1
   1c256:	2a00      	cmp	r2, #0
   1c258:	d01b      	beq.n	1c292 <memchr+0x46>
   1c25a:	7803      	ldrb	r3, [r0, #0]
   1c25c:	42ab      	cmp	r3, r5
   1c25e:	d019      	beq.n	1c294 <memchr+0x48>
   1c260:	2203      	movs	r2, #3
   1c262:	e004      	b.n	1c26e <memchr+0x22>
   1c264:	3c01      	subs	r4, #1
   1c266:	d314      	bcc.n	1c292 <memchr+0x46>
   1c268:	7803      	ldrb	r3, [r0, #0]
   1c26a:	42ab      	cmp	r3, r5
   1c26c:	d012      	beq.n	1c294 <memchr+0x48>
   1c26e:	3001      	adds	r0, #1
   1c270:	4210      	tst	r0, r2
   1c272:	d1f7      	bne.n	1c264 <memchr+0x18>
   1c274:	2c03      	cmp	r4, #3
   1c276:	d80e      	bhi.n	1c296 <memchr+0x4a>
   1c278:	2c00      	cmp	r4, #0
   1c27a:	d00a      	beq.n	1c292 <memchr+0x46>
   1c27c:	7803      	ldrb	r3, [r0, #0]
   1c27e:	42ab      	cmp	r3, r5
   1c280:	d008      	beq.n	1c294 <memchr+0x48>
   1c282:	1904      	adds	r4, r0, r4
   1c284:	e002      	b.n	1c28c <memchr+0x40>
   1c286:	7803      	ldrb	r3, [r0, #0]
   1c288:	42ab      	cmp	r3, r5
   1c28a:	d003      	beq.n	1c294 <memchr+0x48>
   1c28c:	3001      	adds	r0, #1
   1c28e:	4284      	cmp	r4, r0
   1c290:	d1f9      	bne.n	1c286 <memchr+0x3a>
   1c292:	2000      	movs	r0, #0
   1c294:	bd70      	pop	{r4, r5, r6, pc}
   1c296:	22ff      	movs	r2, #255	; 0xff
   1c298:	060b      	lsls	r3, r1, #24
   1c29a:	0c1b      	lsrs	r3, r3, #16
   1c29c:	4011      	ands	r1, r2
   1c29e:	4319      	orrs	r1, r3
   1c2a0:	040b      	lsls	r3, r1, #16
   1c2a2:	4e08      	ldr	r6, [pc, #32]	; (1c2c4 <memchr+0x78>)
   1c2a4:	4319      	orrs	r1, r3
   1c2a6:	6803      	ldr	r3, [r0, #0]
   1c2a8:	4a07      	ldr	r2, [pc, #28]	; (1c2c8 <memchr+0x7c>)
   1c2aa:	404b      	eors	r3, r1
   1c2ac:	189a      	adds	r2, r3, r2
   1c2ae:	439a      	bics	r2, r3
   1c2b0:	4232      	tst	r2, r6
   1c2b2:	d1e3      	bne.n	1c27c <memchr+0x30>
   1c2b4:	3c04      	subs	r4, #4
   1c2b6:	3004      	adds	r0, #4
   1c2b8:	2c03      	cmp	r4, #3
   1c2ba:	d8f4      	bhi.n	1c2a6 <memchr+0x5a>
   1c2bc:	e7dc      	b.n	1c278 <memchr+0x2c>
   1c2be:	0014      	movs	r4, r2
   1c2c0:	e7d8      	b.n	1c274 <memchr+0x28>
   1c2c2:	46c0      	nop			; (mov r8, r8)
   1c2c4:	80808080 	.word	0x80808080
   1c2c8:	fefefeff 	.word	0xfefefeff

0001c2cc <_Balloc>:
   1c2cc:	b570      	push	{r4, r5, r6, lr}
   1c2ce:	0004      	movs	r4, r0
   1c2d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1c2d2:	000d      	movs	r5, r1
   1c2d4:	2800      	cmp	r0, #0
   1c2d6:	d00a      	beq.n	1c2ee <_Balloc+0x22>
   1c2d8:	00ab      	lsls	r3, r5, #2
   1c2da:	18c3      	adds	r3, r0, r3
   1c2dc:	6818      	ldr	r0, [r3, #0]
   1c2de:	2800      	cmp	r0, #0
   1c2e0:	d00f      	beq.n	1c302 <_Balloc+0x36>
   1c2e2:	6802      	ldr	r2, [r0, #0]
   1c2e4:	601a      	str	r2, [r3, #0]
   1c2e6:	2300      	movs	r3, #0
   1c2e8:	6103      	str	r3, [r0, #16]
   1c2ea:	60c3      	str	r3, [r0, #12]
   1c2ec:	bd70      	pop	{r4, r5, r6, pc}
   1c2ee:	2221      	movs	r2, #33	; 0x21
   1c2f0:	2104      	movs	r1, #4
   1c2f2:	0020      	movs	r0, r4
   1c2f4:	f000 fe18 	bl	1cf28 <_calloc_r>
   1c2f8:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c2fa:	2800      	cmp	r0, #0
   1c2fc:	d1ec      	bne.n	1c2d8 <_Balloc+0xc>
   1c2fe:	2000      	movs	r0, #0
   1c300:	e7f4      	b.n	1c2ec <_Balloc+0x20>
   1c302:	2601      	movs	r6, #1
   1c304:	40ae      	lsls	r6, r5
   1c306:	1d72      	adds	r2, r6, #5
   1c308:	0092      	lsls	r2, r2, #2
   1c30a:	2101      	movs	r1, #1
   1c30c:	0020      	movs	r0, r4
   1c30e:	f000 fe0b 	bl	1cf28 <_calloc_r>
   1c312:	2800      	cmp	r0, #0
   1c314:	d0f3      	beq.n	1c2fe <_Balloc+0x32>
   1c316:	6045      	str	r5, [r0, #4]
   1c318:	6086      	str	r6, [r0, #8]
   1c31a:	e7e4      	b.n	1c2e6 <_Balloc+0x1a>

0001c31c <_Bfree>:
   1c31c:	2900      	cmp	r1, #0
   1c31e:	d006      	beq.n	1c32e <_Bfree+0x12>
   1c320:	684b      	ldr	r3, [r1, #4]
   1c322:	009a      	lsls	r2, r3, #2
   1c324:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1c326:	189b      	adds	r3, r3, r2
   1c328:	681a      	ldr	r2, [r3, #0]
   1c32a:	600a      	str	r2, [r1, #0]
   1c32c:	6019      	str	r1, [r3, #0]
   1c32e:	4770      	bx	lr

0001c330 <__multadd>:
   1c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c332:	46ce      	mov	lr, r9
   1c334:	4647      	mov	r7, r8
   1c336:	4681      	mov	r9, r0
   1c338:	0008      	movs	r0, r1
   1c33a:	b580      	push	{r7, lr}
   1c33c:	000d      	movs	r5, r1
   1c33e:	690c      	ldr	r4, [r1, #16]
   1c340:	001f      	movs	r7, r3
   1c342:	2100      	movs	r1, #0
   1c344:	3014      	adds	r0, #20
   1c346:	6803      	ldr	r3, [r0, #0]
   1c348:	3101      	adds	r1, #1
   1c34a:	041e      	lsls	r6, r3, #16
   1c34c:	0c36      	lsrs	r6, r6, #16
   1c34e:	4356      	muls	r6, r2
   1c350:	0c1b      	lsrs	r3, r3, #16
   1c352:	4353      	muls	r3, r2
   1c354:	19f6      	adds	r6, r6, r7
   1c356:	0c37      	lsrs	r7, r6, #16
   1c358:	19db      	adds	r3, r3, r7
   1c35a:	0436      	lsls	r6, r6, #16
   1c35c:	0c1f      	lsrs	r7, r3, #16
   1c35e:	0c36      	lsrs	r6, r6, #16
   1c360:	041b      	lsls	r3, r3, #16
   1c362:	199b      	adds	r3, r3, r6
   1c364:	c008      	stmia	r0!, {r3}
   1c366:	428c      	cmp	r4, r1
   1c368:	dced      	bgt.n	1c346 <__multadd+0x16>
   1c36a:	2f00      	cmp	r7, #0
   1c36c:	d008      	beq.n	1c380 <__multadd+0x50>
   1c36e:	68ab      	ldr	r3, [r5, #8]
   1c370:	429c      	cmp	r4, r3
   1c372:	da0a      	bge.n	1c38a <__multadd+0x5a>
   1c374:	1d23      	adds	r3, r4, #4
   1c376:	009b      	lsls	r3, r3, #2
   1c378:	18eb      	adds	r3, r5, r3
   1c37a:	3401      	adds	r4, #1
   1c37c:	605f      	str	r7, [r3, #4]
   1c37e:	612c      	str	r4, [r5, #16]
   1c380:	0028      	movs	r0, r5
   1c382:	bc0c      	pop	{r2, r3}
   1c384:	4690      	mov	r8, r2
   1c386:	4699      	mov	r9, r3
   1c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c38a:	686b      	ldr	r3, [r5, #4]
   1c38c:	4648      	mov	r0, r9
   1c38e:	1c59      	adds	r1, r3, #1
   1c390:	f7ff ff9c 	bl	1c2cc <_Balloc>
   1c394:	0029      	movs	r1, r5
   1c396:	692b      	ldr	r3, [r5, #16]
   1c398:	4680      	mov	r8, r0
   1c39a:	1c9a      	adds	r2, r3, #2
   1c39c:	0092      	lsls	r2, r2, #2
   1c39e:	310c      	adds	r1, #12
   1c3a0:	300c      	adds	r0, #12
   1c3a2:	f7fc f957 	bl	18654 <memcpy>
   1c3a6:	686b      	ldr	r3, [r5, #4]
   1c3a8:	009a      	lsls	r2, r3, #2
   1c3aa:	464b      	mov	r3, r9
   1c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c3ae:	189b      	adds	r3, r3, r2
   1c3b0:	681a      	ldr	r2, [r3, #0]
   1c3b2:	602a      	str	r2, [r5, #0]
   1c3b4:	601d      	str	r5, [r3, #0]
   1c3b6:	4645      	mov	r5, r8
   1c3b8:	e7dc      	b.n	1c374 <__multadd+0x44>
   1c3ba:	46c0      	nop			; (mov r8, r8)

0001c3bc <__hi0bits>:
   1c3bc:	0003      	movs	r3, r0
   1c3be:	0c02      	lsrs	r2, r0, #16
   1c3c0:	2000      	movs	r0, #0
   1c3c2:	2a00      	cmp	r2, #0
   1c3c4:	d101      	bne.n	1c3ca <__hi0bits+0xe>
   1c3c6:	041b      	lsls	r3, r3, #16
   1c3c8:	3010      	adds	r0, #16
   1c3ca:	0e1a      	lsrs	r2, r3, #24
   1c3cc:	d101      	bne.n	1c3d2 <__hi0bits+0x16>
   1c3ce:	3008      	adds	r0, #8
   1c3d0:	021b      	lsls	r3, r3, #8
   1c3d2:	0f1a      	lsrs	r2, r3, #28
   1c3d4:	d101      	bne.n	1c3da <__hi0bits+0x1e>
   1c3d6:	3004      	adds	r0, #4
   1c3d8:	011b      	lsls	r3, r3, #4
   1c3da:	0f9a      	lsrs	r2, r3, #30
   1c3dc:	d101      	bne.n	1c3e2 <__hi0bits+0x26>
   1c3de:	3002      	adds	r0, #2
   1c3e0:	009b      	lsls	r3, r3, #2
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	db03      	blt.n	1c3ee <__hi0bits+0x32>
   1c3e6:	3001      	adds	r0, #1
   1c3e8:	005b      	lsls	r3, r3, #1
   1c3ea:	d400      	bmi.n	1c3ee <__hi0bits+0x32>
   1c3ec:	2020      	movs	r0, #32
   1c3ee:	4770      	bx	lr

0001c3f0 <__lo0bits>:
   1c3f0:	6803      	ldr	r3, [r0, #0]
   1c3f2:	075a      	lsls	r2, r3, #29
   1c3f4:	d009      	beq.n	1c40a <__lo0bits+0x1a>
   1c3f6:	2200      	movs	r2, #0
   1c3f8:	07d9      	lsls	r1, r3, #31
   1c3fa:	d404      	bmi.n	1c406 <__lo0bits+0x16>
   1c3fc:	079a      	lsls	r2, r3, #30
   1c3fe:	d420      	bmi.n	1c442 <__lo0bits+0x52>
   1c400:	2202      	movs	r2, #2
   1c402:	089b      	lsrs	r3, r3, #2
   1c404:	6003      	str	r3, [r0, #0]
   1c406:	0010      	movs	r0, r2
   1c408:	4770      	bx	lr
   1c40a:	0419      	lsls	r1, r3, #16
   1c40c:	2200      	movs	r2, #0
   1c40e:	2900      	cmp	r1, #0
   1c410:	d101      	bne.n	1c416 <__lo0bits+0x26>
   1c412:	0c1b      	lsrs	r3, r3, #16
   1c414:	3210      	adds	r2, #16
   1c416:	21ff      	movs	r1, #255	; 0xff
   1c418:	4219      	tst	r1, r3
   1c41a:	d101      	bne.n	1c420 <__lo0bits+0x30>
   1c41c:	3208      	adds	r2, #8
   1c41e:	0a1b      	lsrs	r3, r3, #8
   1c420:	0719      	lsls	r1, r3, #28
   1c422:	d101      	bne.n	1c428 <__lo0bits+0x38>
   1c424:	3204      	adds	r2, #4
   1c426:	091b      	lsrs	r3, r3, #4
   1c428:	0799      	lsls	r1, r3, #30
   1c42a:	d101      	bne.n	1c430 <__lo0bits+0x40>
   1c42c:	3202      	adds	r2, #2
   1c42e:	089b      	lsrs	r3, r3, #2
   1c430:	07d9      	lsls	r1, r3, #31
   1c432:	d404      	bmi.n	1c43e <__lo0bits+0x4e>
   1c434:	085b      	lsrs	r3, r3, #1
   1c436:	d101      	bne.n	1c43c <__lo0bits+0x4c>
   1c438:	2220      	movs	r2, #32
   1c43a:	e7e4      	b.n	1c406 <__lo0bits+0x16>
   1c43c:	3201      	adds	r2, #1
   1c43e:	6003      	str	r3, [r0, #0]
   1c440:	e7e1      	b.n	1c406 <__lo0bits+0x16>
   1c442:	085b      	lsrs	r3, r3, #1
   1c444:	6003      	str	r3, [r0, #0]
   1c446:	2201      	movs	r2, #1
   1c448:	e7dd      	b.n	1c406 <__lo0bits+0x16>
   1c44a:	46c0      	nop			; (mov r8, r8)

0001c44c <__i2b>:
   1c44c:	b510      	push	{r4, lr}
   1c44e:	000c      	movs	r4, r1
   1c450:	2101      	movs	r1, #1
   1c452:	f7ff ff3b 	bl	1c2cc <_Balloc>
   1c456:	2301      	movs	r3, #1
   1c458:	6144      	str	r4, [r0, #20]
   1c45a:	6103      	str	r3, [r0, #16]
   1c45c:	bd10      	pop	{r4, pc}
   1c45e:	46c0      	nop			; (mov r8, r8)

0001c460 <__multiply>:
   1c460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c462:	4657      	mov	r7, sl
   1c464:	464e      	mov	r6, r9
   1c466:	4645      	mov	r5, r8
   1c468:	46de      	mov	lr, fp
   1c46a:	b5e0      	push	{r5, r6, r7, lr}
   1c46c:	6914      	ldr	r4, [r2, #16]
   1c46e:	690e      	ldr	r6, [r1, #16]
   1c470:	b085      	sub	sp, #20
   1c472:	000f      	movs	r7, r1
   1c474:	0015      	movs	r5, r2
   1c476:	42a6      	cmp	r6, r4
   1c478:	da04      	bge.n	1c484 <__multiply+0x24>
   1c47a:	0033      	movs	r3, r6
   1c47c:	0017      	movs	r7, r2
   1c47e:	0026      	movs	r6, r4
   1c480:	000d      	movs	r5, r1
   1c482:	001c      	movs	r4, r3
   1c484:	1933      	adds	r3, r6, r4
   1c486:	4698      	mov	r8, r3
   1c488:	68bb      	ldr	r3, [r7, #8]
   1c48a:	6879      	ldr	r1, [r7, #4]
   1c48c:	4598      	cmp	r8, r3
   1c48e:	dd00      	ble.n	1c492 <__multiply+0x32>
   1c490:	3101      	adds	r1, #1
   1c492:	f7ff ff1b 	bl	1c2cc <_Balloc>
   1c496:	2214      	movs	r2, #20
   1c498:	0003      	movs	r3, r0
   1c49a:	4694      	mov	ip, r2
   1c49c:	4463      	add	r3, ip
   1c49e:	469b      	mov	fp, r3
   1c4a0:	4643      	mov	r3, r8
   1c4a2:	009b      	lsls	r3, r3, #2
   1c4a4:	445b      	add	r3, fp
   1c4a6:	0019      	movs	r1, r3
   1c4a8:	9302      	str	r3, [sp, #8]
   1c4aa:	9003      	str	r0, [sp, #12]
   1c4ac:	465b      	mov	r3, fp
   1c4ae:	2200      	movs	r2, #0
   1c4b0:	458b      	cmp	fp, r1
   1c4b2:	d203      	bcs.n	1c4bc <__multiply+0x5c>
   1c4b4:	9902      	ldr	r1, [sp, #8]
   1c4b6:	c304      	stmia	r3!, {r2}
   1c4b8:	4299      	cmp	r1, r3
   1c4ba:	d8fc      	bhi.n	1c4b6 <__multiply+0x56>
   1c4bc:	2314      	movs	r3, #20
   1c4be:	00a4      	lsls	r4, r4, #2
   1c4c0:	469a      	mov	sl, r3
   1c4c2:	3714      	adds	r7, #20
   1c4c4:	0023      	movs	r3, r4
   1c4c6:	46bc      	mov	ip, r7
   1c4c8:	44aa      	add	sl, r5
   1c4ca:	00b6      	lsls	r6, r6, #2
   1c4cc:	4453      	add	r3, sl
   1c4ce:	9700      	str	r7, [sp, #0]
   1c4d0:	44b4      	add	ip, r6
   1c4d2:	9301      	str	r3, [sp, #4]
   1c4d4:	459a      	cmp	sl, r3
   1c4d6:	d24f      	bcs.n	1c578 <__multiply+0x118>
   1c4d8:	4653      	mov	r3, sl
   1c4da:	681b      	ldr	r3, [r3, #0]
   1c4dc:	041e      	lsls	r6, r3, #16
   1c4de:	0c36      	lsrs	r6, r6, #16
   1c4e0:	d020      	beq.n	1c524 <__multiply+0xc4>
   1c4e2:	465c      	mov	r4, fp
   1c4e4:	2700      	movs	r7, #0
   1c4e6:	9d00      	ldr	r5, [sp, #0]
   1c4e8:	0021      	movs	r1, r4
   1c4ea:	cc08      	ldmia	r4!, {r3}
   1c4ec:	cd04      	ldmia	r5!, {r2}
   1c4ee:	4699      	mov	r9, r3
   1c4f0:	4648      	mov	r0, r9
   1c4f2:	0413      	lsls	r3, r2, #16
   1c4f4:	0c1b      	lsrs	r3, r3, #16
   1c4f6:	4373      	muls	r3, r6
   1c4f8:	0400      	lsls	r0, r0, #16
   1c4fa:	0c00      	lsrs	r0, r0, #16
   1c4fc:	181b      	adds	r3, r3, r0
   1c4fe:	19d8      	adds	r0, r3, r7
   1c500:	0c13      	lsrs	r3, r2, #16
   1c502:	464a      	mov	r2, r9
   1c504:	4373      	muls	r3, r6
   1c506:	0c12      	lsrs	r2, r2, #16
   1c508:	189b      	adds	r3, r3, r2
   1c50a:	0c02      	lsrs	r2, r0, #16
   1c50c:	189b      	adds	r3, r3, r2
   1c50e:	0402      	lsls	r2, r0, #16
   1c510:	0c1f      	lsrs	r7, r3, #16
   1c512:	0c12      	lsrs	r2, r2, #16
   1c514:	041b      	lsls	r3, r3, #16
   1c516:	4313      	orrs	r3, r2
   1c518:	600b      	str	r3, [r1, #0]
   1c51a:	45ac      	cmp	ip, r5
   1c51c:	d8e4      	bhi.n	1c4e8 <__multiply+0x88>
   1c51e:	4653      	mov	r3, sl
   1c520:	6027      	str	r7, [r4, #0]
   1c522:	681b      	ldr	r3, [r3, #0]
   1c524:	0c1e      	lsrs	r6, r3, #16
   1c526:	d020      	beq.n	1c56a <__multiply+0x10a>
   1c528:	465b      	mov	r3, fp
   1c52a:	2100      	movs	r1, #0
   1c52c:	681b      	ldr	r3, [r3, #0]
   1c52e:	465c      	mov	r4, fp
   1c530:	0018      	movs	r0, r3
   1c532:	000f      	movs	r7, r1
   1c534:	4662      	mov	r2, ip
   1c536:	9d00      	ldr	r5, [sp, #0]
   1c538:	8829      	ldrh	r1, [r5, #0]
   1c53a:	0c00      	lsrs	r0, r0, #16
   1c53c:	4371      	muls	r1, r6
   1c53e:	1809      	adds	r1, r1, r0
   1c540:	19c9      	adds	r1, r1, r7
   1c542:	041b      	lsls	r3, r3, #16
   1c544:	0408      	lsls	r0, r1, #16
   1c546:	0c1b      	lsrs	r3, r3, #16
   1c548:	4303      	orrs	r3, r0
   1c54a:	6023      	str	r3, [r4, #0]
   1c54c:	cd08      	ldmia	r5!, {r3}
   1c54e:	6860      	ldr	r0, [r4, #4]
   1c550:	0c1b      	lsrs	r3, r3, #16
   1c552:	4373      	muls	r3, r6
   1c554:	0407      	lsls	r7, r0, #16
   1c556:	0c3f      	lsrs	r7, r7, #16
   1c558:	19db      	adds	r3, r3, r7
   1c55a:	0c09      	lsrs	r1, r1, #16
   1c55c:	185b      	adds	r3, r3, r1
   1c55e:	0c1f      	lsrs	r7, r3, #16
   1c560:	3404      	adds	r4, #4
   1c562:	42aa      	cmp	r2, r5
   1c564:	d8e8      	bhi.n	1c538 <__multiply+0xd8>
   1c566:	4694      	mov	ip, r2
   1c568:	6023      	str	r3, [r4, #0]
   1c56a:	2304      	movs	r3, #4
   1c56c:	4699      	mov	r9, r3
   1c56e:	9b01      	ldr	r3, [sp, #4]
   1c570:	44ca      	add	sl, r9
   1c572:	44cb      	add	fp, r9
   1c574:	4553      	cmp	r3, sl
   1c576:	d8af      	bhi.n	1c4d8 <__multiply+0x78>
   1c578:	4643      	mov	r3, r8
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	dd0e      	ble.n	1c59c <__multiply+0x13c>
   1c57e:	9b02      	ldr	r3, [sp, #8]
   1c580:	3b04      	subs	r3, #4
   1c582:	681a      	ldr	r2, [r3, #0]
   1c584:	2a00      	cmp	r2, #0
   1c586:	d109      	bne.n	1c59c <__multiply+0x13c>
   1c588:	4642      	mov	r2, r8
   1c58a:	e003      	b.n	1c594 <__multiply+0x134>
   1c58c:	3b04      	subs	r3, #4
   1c58e:	6819      	ldr	r1, [r3, #0]
   1c590:	2900      	cmp	r1, #0
   1c592:	d102      	bne.n	1c59a <__multiply+0x13a>
   1c594:	3a01      	subs	r2, #1
   1c596:	2a00      	cmp	r2, #0
   1c598:	d1f8      	bne.n	1c58c <__multiply+0x12c>
   1c59a:	4690      	mov	r8, r2
   1c59c:	9b03      	ldr	r3, [sp, #12]
   1c59e:	4642      	mov	r2, r8
   1c5a0:	0018      	movs	r0, r3
   1c5a2:	611a      	str	r2, [r3, #16]
   1c5a4:	b005      	add	sp, #20
   1c5a6:	bc3c      	pop	{r2, r3, r4, r5}
   1c5a8:	4690      	mov	r8, r2
   1c5aa:	4699      	mov	r9, r3
   1c5ac:	46a2      	mov	sl, r4
   1c5ae:	46ab      	mov	fp, r5
   1c5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5b2:	46c0      	nop			; (mov r8, r8)

0001c5b4 <__pow5mult>:
   1c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5b6:	4647      	mov	r7, r8
   1c5b8:	46ce      	mov	lr, r9
   1c5ba:	2303      	movs	r3, #3
   1c5bc:	b580      	push	{r7, lr}
   1c5be:	4680      	mov	r8, r0
   1c5c0:	000f      	movs	r7, r1
   1c5c2:	0014      	movs	r4, r2
   1c5c4:	4013      	ands	r3, r2
   1c5c6:	d13a      	bne.n	1c63e <__pow5mult+0x8a>
   1c5c8:	10a4      	asrs	r4, r4, #2
   1c5ca:	003e      	movs	r6, r7
   1c5cc:	2c00      	cmp	r4, #0
   1c5ce:	d025      	beq.n	1c61c <__pow5mult+0x68>
   1c5d0:	4643      	mov	r3, r8
   1c5d2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1c5d4:	2d00      	cmp	r5, #0
   1c5d6:	d03b      	beq.n	1c650 <__pow5mult+0x9c>
   1c5d8:	003e      	movs	r6, r7
   1c5da:	2300      	movs	r3, #0
   1c5dc:	2701      	movs	r7, #1
   1c5de:	4699      	mov	r9, r3
   1c5e0:	4227      	tst	r7, r4
   1c5e2:	d107      	bne.n	1c5f4 <__pow5mult+0x40>
   1c5e4:	1064      	asrs	r4, r4, #1
   1c5e6:	d019      	beq.n	1c61c <__pow5mult+0x68>
   1c5e8:	6828      	ldr	r0, [r5, #0]
   1c5ea:	2800      	cmp	r0, #0
   1c5ec:	d01b      	beq.n	1c626 <__pow5mult+0x72>
   1c5ee:	0005      	movs	r5, r0
   1c5f0:	4227      	tst	r7, r4
   1c5f2:	d0f7      	beq.n	1c5e4 <__pow5mult+0x30>
   1c5f4:	002a      	movs	r2, r5
   1c5f6:	0031      	movs	r1, r6
   1c5f8:	4640      	mov	r0, r8
   1c5fa:	f7ff ff31 	bl	1c460 <__multiply>
   1c5fe:	2e00      	cmp	r6, #0
   1c600:	d01b      	beq.n	1c63a <__pow5mult+0x86>
   1c602:	4642      	mov	r2, r8
   1c604:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1c606:	6873      	ldr	r3, [r6, #4]
   1c608:	4694      	mov	ip, r2
   1c60a:	009b      	lsls	r3, r3, #2
   1c60c:	4463      	add	r3, ip
   1c60e:	681a      	ldr	r2, [r3, #0]
   1c610:	1064      	asrs	r4, r4, #1
   1c612:	6032      	str	r2, [r6, #0]
   1c614:	601e      	str	r6, [r3, #0]
   1c616:	0006      	movs	r6, r0
   1c618:	2c00      	cmp	r4, #0
   1c61a:	d1e5      	bne.n	1c5e8 <__pow5mult+0x34>
   1c61c:	0030      	movs	r0, r6
   1c61e:	bc0c      	pop	{r2, r3}
   1c620:	4690      	mov	r8, r2
   1c622:	4699      	mov	r9, r3
   1c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c626:	002a      	movs	r2, r5
   1c628:	0029      	movs	r1, r5
   1c62a:	4640      	mov	r0, r8
   1c62c:	f7ff ff18 	bl	1c460 <__multiply>
   1c630:	464b      	mov	r3, r9
   1c632:	6028      	str	r0, [r5, #0]
   1c634:	6003      	str	r3, [r0, #0]
   1c636:	0005      	movs	r5, r0
   1c638:	e7da      	b.n	1c5f0 <__pow5mult+0x3c>
   1c63a:	0006      	movs	r6, r0
   1c63c:	e7d2      	b.n	1c5e4 <__pow5mult+0x30>
   1c63e:	4a0b      	ldr	r2, [pc, #44]	; (1c66c <__pow5mult+0xb8>)
   1c640:	3b01      	subs	r3, #1
   1c642:	009b      	lsls	r3, r3, #2
   1c644:	589a      	ldr	r2, [r3, r2]
   1c646:	2300      	movs	r3, #0
   1c648:	f7ff fe72 	bl	1c330 <__multadd>
   1c64c:	0007      	movs	r7, r0
   1c64e:	e7bb      	b.n	1c5c8 <__pow5mult+0x14>
   1c650:	2101      	movs	r1, #1
   1c652:	4640      	mov	r0, r8
   1c654:	f7ff fe3a 	bl	1c2cc <_Balloc>
   1c658:	4b05      	ldr	r3, [pc, #20]	; (1c670 <__pow5mult+0xbc>)
   1c65a:	0005      	movs	r5, r0
   1c65c:	6143      	str	r3, [r0, #20]
   1c65e:	2301      	movs	r3, #1
   1c660:	6103      	str	r3, [r0, #16]
   1c662:	4643      	mov	r3, r8
   1c664:	6498      	str	r0, [r3, #72]	; 0x48
   1c666:	2300      	movs	r3, #0
   1c668:	6003      	str	r3, [r0, #0]
   1c66a:	e7b5      	b.n	1c5d8 <__pow5mult+0x24>
   1c66c:	0001f068 	.word	0x0001f068
   1c670:	00000271 	.word	0x00000271

0001c674 <__lshift>:
   1c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c676:	464e      	mov	r6, r9
   1c678:	4645      	mov	r5, r8
   1c67a:	46de      	mov	lr, fp
   1c67c:	4657      	mov	r7, sl
   1c67e:	b5e0      	push	{r5, r6, r7, lr}
   1c680:	000e      	movs	r6, r1
   1c682:	6933      	ldr	r3, [r6, #16]
   1c684:	1154      	asrs	r4, r2, #5
   1c686:	4698      	mov	r8, r3
   1c688:	44a0      	add	r8, r4
   1c68a:	4643      	mov	r3, r8
   1c68c:	1c5d      	adds	r5, r3, #1
   1c68e:	68b3      	ldr	r3, [r6, #8]
   1c690:	4683      	mov	fp, r0
   1c692:	4691      	mov	r9, r2
   1c694:	6849      	ldr	r1, [r1, #4]
   1c696:	429d      	cmp	r5, r3
   1c698:	dd03      	ble.n	1c6a2 <__lshift+0x2e>
   1c69a:	3101      	adds	r1, #1
   1c69c:	005b      	lsls	r3, r3, #1
   1c69e:	429d      	cmp	r5, r3
   1c6a0:	dcfb      	bgt.n	1c69a <__lshift+0x26>
   1c6a2:	4658      	mov	r0, fp
   1c6a4:	f7ff fe12 	bl	1c2cc <_Balloc>
   1c6a8:	0003      	movs	r3, r0
   1c6aa:	4684      	mov	ip, r0
   1c6ac:	3314      	adds	r3, #20
   1c6ae:	2c00      	cmp	r4, #0
   1c6b0:	dd06      	ble.n	1c6c0 <__lshift+0x4c>
   1c6b2:	2100      	movs	r1, #0
   1c6b4:	00a4      	lsls	r4, r4, #2
   1c6b6:	001a      	movs	r2, r3
   1c6b8:	191b      	adds	r3, r3, r4
   1c6ba:	c202      	stmia	r2!, {r1}
   1c6bc:	4293      	cmp	r3, r2
   1c6be:	d1fc      	bne.n	1c6ba <__lshift+0x46>
   1c6c0:	6932      	ldr	r2, [r6, #16]
   1c6c2:	4648      	mov	r0, r9
   1c6c4:	0097      	lsls	r7, r2, #2
   1c6c6:	0031      	movs	r1, r6
   1c6c8:	221f      	movs	r2, #31
   1c6ca:	3114      	adds	r1, #20
   1c6cc:	4010      	ands	r0, r2
   1c6ce:	19cf      	adds	r7, r1, r7
   1c6d0:	4681      	mov	r9, r0
   1c6d2:	2800      	cmp	r0, #0
   1c6d4:	d025      	beq.n	1c722 <__lshift+0xae>
   1c6d6:	2220      	movs	r2, #32
   1c6d8:	1a12      	subs	r2, r2, r0
   1c6da:	4692      	mov	sl, r2
   1c6dc:	2200      	movs	r2, #0
   1c6de:	4648      	mov	r0, r9
   1c6e0:	680c      	ldr	r4, [r1, #0]
   1c6e2:	4084      	lsls	r4, r0
   1c6e4:	4650      	mov	r0, sl
   1c6e6:	4314      	orrs	r4, r2
   1c6e8:	601c      	str	r4, [r3, #0]
   1c6ea:	c904      	ldmia	r1!, {r2}
   1c6ec:	3304      	adds	r3, #4
   1c6ee:	40c2      	lsrs	r2, r0
   1c6f0:	428f      	cmp	r7, r1
   1c6f2:	d8f4      	bhi.n	1c6de <__lshift+0x6a>
   1c6f4:	601a      	str	r2, [r3, #0]
   1c6f6:	2a00      	cmp	r2, #0
   1c6f8:	d001      	beq.n	1c6fe <__lshift+0x8a>
   1c6fa:	4645      	mov	r5, r8
   1c6fc:	3502      	adds	r5, #2
   1c6fe:	4663      	mov	r3, ip
   1c700:	3d01      	subs	r5, #1
   1c702:	611d      	str	r5, [r3, #16]
   1c704:	6873      	ldr	r3, [r6, #4]
   1c706:	4660      	mov	r0, ip
   1c708:	009a      	lsls	r2, r3, #2
   1c70a:	465b      	mov	r3, fp
   1c70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c70e:	189b      	adds	r3, r3, r2
   1c710:	681a      	ldr	r2, [r3, #0]
   1c712:	6032      	str	r2, [r6, #0]
   1c714:	601e      	str	r6, [r3, #0]
   1c716:	bc3c      	pop	{r2, r3, r4, r5}
   1c718:	4690      	mov	r8, r2
   1c71a:	4699      	mov	r9, r3
   1c71c:	46a2      	mov	sl, r4
   1c71e:	46ab      	mov	fp, r5
   1c720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c722:	c904      	ldmia	r1!, {r2}
   1c724:	c304      	stmia	r3!, {r2}
   1c726:	428f      	cmp	r7, r1
   1c728:	d9e9      	bls.n	1c6fe <__lshift+0x8a>
   1c72a:	c904      	ldmia	r1!, {r2}
   1c72c:	c304      	stmia	r3!, {r2}
   1c72e:	428f      	cmp	r7, r1
   1c730:	d8f7      	bhi.n	1c722 <__lshift+0xae>
   1c732:	e7e4      	b.n	1c6fe <__lshift+0x8a>

0001c734 <__mcmp>:
   1c734:	690a      	ldr	r2, [r1, #16]
   1c736:	6903      	ldr	r3, [r0, #16]
   1c738:	b530      	push	{r4, r5, lr}
   1c73a:	0005      	movs	r5, r0
   1c73c:	1a98      	subs	r0, r3, r2
   1c73e:	d111      	bne.n	1c764 <__mcmp+0x30>
   1c740:	0092      	lsls	r2, r2, #2
   1c742:	3514      	adds	r5, #20
   1c744:	3114      	adds	r1, #20
   1c746:	18ab      	adds	r3, r5, r2
   1c748:	1889      	adds	r1, r1, r2
   1c74a:	e001      	b.n	1c750 <__mcmp+0x1c>
   1c74c:	429d      	cmp	r5, r3
   1c74e:	d209      	bcs.n	1c764 <__mcmp+0x30>
   1c750:	3b04      	subs	r3, #4
   1c752:	3904      	subs	r1, #4
   1c754:	681c      	ldr	r4, [r3, #0]
   1c756:	680a      	ldr	r2, [r1, #0]
   1c758:	4294      	cmp	r4, r2
   1c75a:	d0f7      	beq.n	1c74c <__mcmp+0x18>
   1c75c:	4294      	cmp	r4, r2
   1c75e:	4180      	sbcs	r0, r0
   1c760:	2201      	movs	r2, #1
   1c762:	4310      	orrs	r0, r2
   1c764:	bd30      	pop	{r4, r5, pc}
   1c766:	46c0      	nop			; (mov r8, r8)

0001c768 <__mdiff>:
   1c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c76a:	4645      	mov	r5, r8
   1c76c:	46de      	mov	lr, fp
   1c76e:	4657      	mov	r7, sl
   1c770:	464e      	mov	r6, r9
   1c772:	0014      	movs	r4, r2
   1c774:	690b      	ldr	r3, [r1, #16]
   1c776:	6912      	ldr	r2, [r2, #16]
   1c778:	b5e0      	push	{r5, r6, r7, lr}
   1c77a:	4688      	mov	r8, r1
   1c77c:	1a9d      	subs	r5, r3, r2
   1c77e:	d11a      	bne.n	1c7b6 <__mdiff+0x4e>
   1c780:	000f      	movs	r7, r1
   1c782:	2114      	movs	r1, #20
   1c784:	468c      	mov	ip, r1
   1c786:	0092      	lsls	r2, r2, #2
   1c788:	3714      	adds	r7, #20
   1c78a:	44a4      	add	ip, r4
   1c78c:	18bb      	adds	r3, r7, r2
   1c78e:	4462      	add	r2, ip
   1c790:	e002      	b.n	1c798 <__mdiff+0x30>
   1c792:	429f      	cmp	r7, r3
   1c794:	d300      	bcc.n	1c798 <__mdiff+0x30>
   1c796:	e070      	b.n	1c87a <__mdiff+0x112>
   1c798:	3b04      	subs	r3, #4
   1c79a:	3a04      	subs	r2, #4
   1c79c:	681e      	ldr	r6, [r3, #0]
   1c79e:	6811      	ldr	r1, [r2, #0]
   1c7a0:	428e      	cmp	r6, r1
   1c7a2:	d0f6      	beq.n	1c792 <__mdiff+0x2a>
   1c7a4:	d300      	bcc.n	1c7a8 <__mdiff+0x40>
   1c7a6:	e071      	b.n	1c88c <__mdiff+0x124>
   1c7a8:	4643      	mov	r3, r8
   1c7aa:	003e      	movs	r6, r7
   1c7ac:	46a0      	mov	r8, r4
   1c7ae:	4667      	mov	r7, ip
   1c7b0:	001c      	movs	r4, r3
   1c7b2:	2501      	movs	r5, #1
   1c7b4:	e006      	b.n	1c7c4 <__mdiff+0x5c>
   1c7b6:	2d00      	cmp	r5, #0
   1c7b8:	db6a      	blt.n	1c890 <__mdiff+0x128>
   1c7ba:	4647      	mov	r7, r8
   1c7bc:	0026      	movs	r6, r4
   1c7be:	2500      	movs	r5, #0
   1c7c0:	3714      	adds	r7, #20
   1c7c2:	3614      	adds	r6, #20
   1c7c4:	4643      	mov	r3, r8
   1c7c6:	6859      	ldr	r1, [r3, #4]
   1c7c8:	f7ff fd80 	bl	1c2cc <_Balloc>
   1c7cc:	4643      	mov	r3, r8
   1c7ce:	4681      	mov	r9, r0
   1c7d0:	60c5      	str	r5, [r0, #12]
   1c7d2:	6918      	ldr	r0, [r3, #16]
   1c7d4:	464d      	mov	r5, r9
   1c7d6:	0083      	lsls	r3, r0, #2
   1c7d8:	469c      	mov	ip, r3
   1c7da:	6923      	ldr	r3, [r4, #16]
   1c7dc:	44bc      	add	ip, r7
   1c7de:	009b      	lsls	r3, r3, #2
   1c7e0:	4698      	mov	r8, r3
   1c7e2:	2300      	movs	r3, #0
   1c7e4:	44b0      	add	r8, r6
   1c7e6:	3514      	adds	r5, #20
   1c7e8:	469a      	mov	sl, r3
   1c7ea:	e000      	b.n	1c7ee <__mdiff+0x86>
   1c7ec:	0027      	movs	r7, r4
   1c7ee:	ce04      	ldmia	r6!, {r2}
   1c7f0:	003c      	movs	r4, r7
   1c7f2:	4693      	mov	fp, r2
   1c7f4:	4659      	mov	r1, fp
   1c7f6:	cc08      	ldmia	r4!, {r3}
   1c7f8:	0409      	lsls	r1, r1, #16
   1c7fa:	041a      	lsls	r2, r3, #16
   1c7fc:	0c12      	lsrs	r2, r2, #16
   1c7fe:	4452      	add	r2, sl
   1c800:	0c09      	lsrs	r1, r1, #16
   1c802:	1a52      	subs	r2, r2, r1
   1c804:	0c19      	lsrs	r1, r3, #16
   1c806:	465b      	mov	r3, fp
   1c808:	0c1b      	lsrs	r3, r3, #16
   1c80a:	1acb      	subs	r3, r1, r3
   1c80c:	1411      	asrs	r1, r2, #16
   1c80e:	185b      	adds	r3, r3, r1
   1c810:	0412      	lsls	r2, r2, #16
   1c812:	1419      	asrs	r1, r3, #16
   1c814:	0c12      	lsrs	r2, r2, #16
   1c816:	041b      	lsls	r3, r3, #16
   1c818:	468a      	mov	sl, r1
   1c81a:	4313      	orrs	r3, r2
   1c81c:	1d29      	adds	r1, r5, #4
   1c81e:	602b      	str	r3, [r5, #0]
   1c820:	000d      	movs	r5, r1
   1c822:	45b0      	cmp	r8, r6
   1c824:	d8e2      	bhi.n	1c7ec <__mdiff+0x84>
   1c826:	45a4      	cmp	ip, r4
   1c828:	d916      	bls.n	1c858 <__mdiff+0xf0>
   1c82a:	cc08      	ldmia	r4!, {r3}
   1c82c:	041a      	lsls	r2, r3, #16
   1c82e:	0c12      	lsrs	r2, r2, #16
   1c830:	4452      	add	r2, sl
   1c832:	1416      	asrs	r6, r2, #16
   1c834:	0c1b      	lsrs	r3, r3, #16
   1c836:	199b      	adds	r3, r3, r6
   1c838:	0412      	lsls	r2, r2, #16
   1c83a:	141e      	asrs	r6, r3, #16
   1c83c:	0c12      	lsrs	r2, r2, #16
   1c83e:	041b      	lsls	r3, r3, #16
   1c840:	4313      	orrs	r3, r2
   1c842:	46b2      	mov	sl, r6
   1c844:	c508      	stmia	r5!, {r3}
   1c846:	45a4      	cmp	ip, r4
   1c848:	d8ef      	bhi.n	1c82a <__mdiff+0xc2>
   1c84a:	4662      	mov	r2, ip
   1c84c:	2403      	movs	r4, #3
   1c84e:	1bd2      	subs	r2, r2, r7
   1c850:	3a05      	subs	r2, #5
   1c852:	43a2      	bics	r2, r4
   1c854:	3204      	adds	r2, #4
   1c856:	1889      	adds	r1, r1, r2
   1c858:	3904      	subs	r1, #4
   1c85a:	2b00      	cmp	r3, #0
   1c85c:	d104      	bne.n	1c868 <__mdiff+0x100>
   1c85e:	3904      	subs	r1, #4
   1c860:	680b      	ldr	r3, [r1, #0]
   1c862:	3801      	subs	r0, #1
   1c864:	2b00      	cmp	r3, #0
   1c866:	d0fa      	beq.n	1c85e <__mdiff+0xf6>
   1c868:	464b      	mov	r3, r9
   1c86a:	6118      	str	r0, [r3, #16]
   1c86c:	4648      	mov	r0, r9
   1c86e:	bc3c      	pop	{r2, r3, r4, r5}
   1c870:	4690      	mov	r8, r2
   1c872:	4699      	mov	r9, r3
   1c874:	46a2      	mov	sl, r4
   1c876:	46ab      	mov	fp, r5
   1c878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c87a:	2100      	movs	r1, #0
   1c87c:	f7ff fd26 	bl	1c2cc <_Balloc>
   1c880:	2301      	movs	r3, #1
   1c882:	6103      	str	r3, [r0, #16]
   1c884:	2300      	movs	r3, #0
   1c886:	4681      	mov	r9, r0
   1c888:	6143      	str	r3, [r0, #20]
   1c88a:	e7ef      	b.n	1c86c <__mdiff+0x104>
   1c88c:	4666      	mov	r6, ip
   1c88e:	e799      	b.n	1c7c4 <__mdiff+0x5c>
   1c890:	0027      	movs	r7, r4
   1c892:	000e      	movs	r6, r1
   1c894:	46a0      	mov	r8, r4
   1c896:	3714      	adds	r7, #20
   1c898:	3614      	adds	r6, #20
   1c89a:	000c      	movs	r4, r1
   1c89c:	2501      	movs	r5, #1
   1c89e:	e791      	b.n	1c7c4 <__mdiff+0x5c>

0001c8a0 <__d2b>:
   1c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8a2:	2101      	movs	r1, #1
   1c8a4:	001c      	movs	r4, r3
   1c8a6:	b083      	sub	sp, #12
   1c8a8:	9e08      	ldr	r6, [sp, #32]
   1c8aa:	0015      	movs	r5, r2
   1c8ac:	f7ff fd0e 	bl	1c2cc <_Balloc>
   1c8b0:	0323      	lsls	r3, r4, #12
   1c8b2:	0064      	lsls	r4, r4, #1
   1c8b4:	0007      	movs	r7, r0
   1c8b6:	0b1b      	lsrs	r3, r3, #12
   1c8b8:	0d64      	lsrs	r4, r4, #21
   1c8ba:	d002      	beq.n	1c8c2 <__d2b+0x22>
   1c8bc:	2280      	movs	r2, #128	; 0x80
   1c8be:	0352      	lsls	r2, r2, #13
   1c8c0:	4313      	orrs	r3, r2
   1c8c2:	9301      	str	r3, [sp, #4]
   1c8c4:	2d00      	cmp	r5, #0
   1c8c6:	d019      	beq.n	1c8fc <__d2b+0x5c>
   1c8c8:	4668      	mov	r0, sp
   1c8ca:	9500      	str	r5, [sp, #0]
   1c8cc:	f7ff fd90 	bl	1c3f0 <__lo0bits>
   1c8d0:	2800      	cmp	r0, #0
   1c8d2:	d130      	bne.n	1c936 <__d2b+0x96>
   1c8d4:	9b00      	ldr	r3, [sp, #0]
   1c8d6:	617b      	str	r3, [r7, #20]
   1c8d8:	9b01      	ldr	r3, [sp, #4]
   1c8da:	61bb      	str	r3, [r7, #24]
   1c8dc:	1e5a      	subs	r2, r3, #1
   1c8de:	4193      	sbcs	r3, r2
   1c8e0:	1c5d      	adds	r5, r3, #1
   1c8e2:	613d      	str	r5, [r7, #16]
   1c8e4:	2c00      	cmp	r4, #0
   1c8e6:	d014      	beq.n	1c912 <__d2b+0x72>
   1c8e8:	4b19      	ldr	r3, [pc, #100]	; (1c950 <__d2b+0xb0>)
   1c8ea:	469c      	mov	ip, r3
   1c8ec:	2335      	movs	r3, #53	; 0x35
   1c8ee:	4464      	add	r4, ip
   1c8f0:	1824      	adds	r4, r4, r0
   1c8f2:	1a18      	subs	r0, r3, r0
   1c8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c8f6:	6034      	str	r4, [r6, #0]
   1c8f8:	6018      	str	r0, [r3, #0]
   1c8fa:	e019      	b.n	1c930 <__d2b+0x90>
   1c8fc:	a801      	add	r0, sp, #4
   1c8fe:	f7ff fd77 	bl	1c3f0 <__lo0bits>
   1c902:	9b01      	ldr	r3, [sp, #4]
   1c904:	3020      	adds	r0, #32
   1c906:	617b      	str	r3, [r7, #20]
   1c908:	2301      	movs	r3, #1
   1c90a:	2501      	movs	r5, #1
   1c90c:	613b      	str	r3, [r7, #16]
   1c90e:	2c00      	cmp	r4, #0
   1c910:	d1ea      	bne.n	1c8e8 <__d2b+0x48>
   1c912:	4b10      	ldr	r3, [pc, #64]	; (1c954 <__d2b+0xb4>)
   1c914:	469c      	mov	ip, r3
   1c916:	4b10      	ldr	r3, [pc, #64]	; (1c958 <__d2b+0xb8>)
   1c918:	4460      	add	r0, ip
   1c91a:	18eb      	adds	r3, r5, r3
   1c91c:	009b      	lsls	r3, r3, #2
   1c91e:	18fb      	adds	r3, r7, r3
   1c920:	6030      	str	r0, [r6, #0]
   1c922:	6958      	ldr	r0, [r3, #20]
   1c924:	f7ff fd4a 	bl	1c3bc <__hi0bits>
   1c928:	016b      	lsls	r3, r5, #5
   1c92a:	1a18      	subs	r0, r3, r0
   1c92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c92e:	6018      	str	r0, [r3, #0]
   1c930:	0038      	movs	r0, r7
   1c932:	b003      	add	sp, #12
   1c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c936:	9b01      	ldr	r3, [sp, #4]
   1c938:	2220      	movs	r2, #32
   1c93a:	0019      	movs	r1, r3
   1c93c:	1a12      	subs	r2, r2, r0
   1c93e:	4091      	lsls	r1, r2
   1c940:	000a      	movs	r2, r1
   1c942:	40c3      	lsrs	r3, r0
   1c944:	9900      	ldr	r1, [sp, #0]
   1c946:	9301      	str	r3, [sp, #4]
   1c948:	430a      	orrs	r2, r1
   1c94a:	617a      	str	r2, [r7, #20]
   1c94c:	e7c5      	b.n	1c8da <__d2b+0x3a>
   1c94e:	46c0      	nop			; (mov r8, r8)
   1c950:	fffffbcd 	.word	0xfffffbcd
   1c954:	fffffbce 	.word	0xfffffbce
   1c958:	3fffffff 	.word	0x3fffffff

0001c95c <_realloc_r>:
   1c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c95e:	464e      	mov	r6, r9
   1c960:	4645      	mov	r5, r8
   1c962:	46de      	mov	lr, fp
   1c964:	4657      	mov	r7, sl
   1c966:	b5e0      	push	{r5, r6, r7, lr}
   1c968:	b085      	sub	sp, #20
   1c96a:	9001      	str	r0, [sp, #4]
   1c96c:	000e      	movs	r6, r1
   1c96e:	0015      	movs	r5, r2
   1c970:	2900      	cmp	r1, #0
   1c972:	d100      	bne.n	1c976 <_realloc_r+0x1a>
   1c974:	e09e      	b.n	1cab4 <_realloc_r+0x158>
   1c976:	0037      	movs	r7, r6
   1c978:	9801      	ldr	r0, [sp, #4]
   1c97a:	3f08      	subs	r7, #8
   1c97c:	f7fb ff46 	bl	1880c <__malloc_lock>
   1c980:	687a      	ldr	r2, [r7, #4]
   1c982:	2303      	movs	r3, #3
   1c984:	0014      	movs	r4, r2
   1c986:	439c      	bics	r4, r3
   1c988:	002b      	movs	r3, r5
   1c98a:	330b      	adds	r3, #11
   1c98c:	46b9      	mov	r9, r7
   1c98e:	2b16      	cmp	r3, #22
   1c990:	d847      	bhi.n	1ca22 <_realloc_r+0xc6>
   1c992:	2110      	movs	r1, #16
   1c994:	2310      	movs	r3, #16
   1c996:	4688      	mov	r8, r1
   1c998:	4545      	cmp	r5, r8
   1c99a:	d846      	bhi.n	1ca2a <_realloc_r+0xce>
   1c99c:	429c      	cmp	r4, r3
   1c99e:	da49      	bge.n	1ca34 <_realloc_r+0xd8>
   1c9a0:	49cc      	ldr	r1, [pc, #816]	; (1ccd4 <_realloc_r+0x378>)
   1c9a2:	1938      	adds	r0, r7, r4
   1c9a4:	468b      	mov	fp, r1
   1c9a6:	6889      	ldr	r1, [r1, #8]
   1c9a8:	9002      	str	r0, [sp, #8]
   1c9aa:	4288      	cmp	r0, r1
   1c9ac:	d100      	bne.n	1c9b0 <_realloc_r+0x54>
   1c9ae:	e0c2      	b.n	1cb36 <_realloc_r+0x1da>
   1c9b0:	2101      	movs	r1, #1
   1c9b2:	468a      	mov	sl, r1
   1c9b4:	6840      	ldr	r0, [r0, #4]
   1c9b6:	0001      	movs	r1, r0
   1c9b8:	9003      	str	r0, [sp, #12]
   1c9ba:	4650      	mov	r0, sl
   1c9bc:	4381      	bics	r1, r0
   1c9be:	468c      	mov	ip, r1
   1c9c0:	9902      	ldr	r1, [sp, #8]
   1c9c2:	468b      	mov	fp, r1
   1c9c4:	44dc      	add	ip, fp
   1c9c6:	4661      	mov	r1, ip
   1c9c8:	6849      	ldr	r1, [r1, #4]
   1c9ca:	4201      	tst	r1, r0
   1c9cc:	d04d      	beq.n	1ca6a <_realloc_r+0x10e>
   1c9ce:	4210      	tst	r0, r2
   1c9d0:	d100      	bne.n	1c9d4 <_realloc_r+0x78>
   1c9d2:	e0a2      	b.n	1cb1a <_realloc_r+0x1be>
   1c9d4:	0029      	movs	r1, r5
   1c9d6:	9801      	ldr	r0, [sp, #4]
   1c9d8:	f7fb fb72 	bl	180c0 <_malloc_r>
   1c9dc:	1e05      	subs	r5, r0, #0
   1c9de:	d039      	beq.n	1ca54 <_realloc_r+0xf8>
   1c9e0:	2301      	movs	r3, #1
   1c9e2:	0002      	movs	r2, r0
   1c9e4:	6879      	ldr	r1, [r7, #4]
   1c9e6:	3a08      	subs	r2, #8
   1c9e8:	4399      	bics	r1, r3
   1c9ea:	187f      	adds	r7, r7, r1
   1c9ec:	42ba      	cmp	r2, r7
   1c9ee:	d100      	bne.n	1c9f2 <_realloc_r+0x96>
   1c9f0:	e12e      	b.n	1cc50 <_realloc_r+0x2f4>
   1c9f2:	1f22      	subs	r2, r4, #4
   1c9f4:	2a24      	cmp	r2, #36	; 0x24
   1c9f6:	d900      	bls.n	1c9fa <_realloc_r+0x9e>
   1c9f8:	e114      	b.n	1cc24 <_realloc_r+0x2c8>
   1c9fa:	2a13      	cmp	r2, #19
   1c9fc:	d900      	bls.n	1ca00 <_realloc_r+0xa4>
   1c9fe:	e0e8      	b.n	1cbd2 <_realloc_r+0x276>
   1ca00:	0003      	movs	r3, r0
   1ca02:	0032      	movs	r2, r6
   1ca04:	6811      	ldr	r1, [r2, #0]
   1ca06:	6019      	str	r1, [r3, #0]
   1ca08:	6851      	ldr	r1, [r2, #4]
   1ca0a:	6059      	str	r1, [r3, #4]
   1ca0c:	6892      	ldr	r2, [r2, #8]
   1ca0e:	609a      	str	r2, [r3, #8]
   1ca10:	9c01      	ldr	r4, [sp, #4]
   1ca12:	0031      	movs	r1, r6
   1ca14:	0020      	movs	r0, r4
   1ca16:	f7ff f905 	bl	1bc24 <_free_r>
   1ca1a:	0020      	movs	r0, r4
   1ca1c:	f7fb fefe 	bl	1881c <__malloc_unlock>
   1ca20:	e01b      	b.n	1ca5a <_realloc_r+0xfe>
   1ca22:	2107      	movs	r1, #7
   1ca24:	438b      	bics	r3, r1
   1ca26:	4698      	mov	r8, r3
   1ca28:	d5b6      	bpl.n	1c998 <_realloc_r+0x3c>
   1ca2a:	230c      	movs	r3, #12
   1ca2c:	9a01      	ldr	r2, [sp, #4]
   1ca2e:	2500      	movs	r5, #0
   1ca30:	6013      	str	r3, [r2, #0]
   1ca32:	e012      	b.n	1ca5a <_realloc_r+0xfe>
   1ca34:	0035      	movs	r5, r6
   1ca36:	4643      	mov	r3, r8
   1ca38:	1ae3      	subs	r3, r4, r3
   1ca3a:	2b0f      	cmp	r3, #15
   1ca3c:	d825      	bhi.n	1ca8a <_realloc_r+0x12e>
   1ca3e:	464b      	mov	r3, r9
   1ca40:	2201      	movs	r2, #1
   1ca42:	4649      	mov	r1, r9
   1ca44:	685b      	ldr	r3, [r3, #4]
   1ca46:	4013      	ands	r3, r2
   1ca48:	4323      	orrs	r3, r4
   1ca4a:	604b      	str	r3, [r1, #4]
   1ca4c:	444c      	add	r4, r9
   1ca4e:	6863      	ldr	r3, [r4, #4]
   1ca50:	431a      	orrs	r2, r3
   1ca52:	6062      	str	r2, [r4, #4]
   1ca54:	9801      	ldr	r0, [sp, #4]
   1ca56:	f7fb fee1 	bl	1881c <__malloc_unlock>
   1ca5a:	0028      	movs	r0, r5
   1ca5c:	b005      	add	sp, #20
   1ca5e:	bc3c      	pop	{r2, r3, r4, r5}
   1ca60:	4690      	mov	r8, r2
   1ca62:	4699      	mov	r9, r3
   1ca64:	46a2      	mov	sl, r4
   1ca66:	46ab      	mov	fp, r5
   1ca68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca6a:	2103      	movs	r1, #3
   1ca6c:	9803      	ldr	r0, [sp, #12]
   1ca6e:	468c      	mov	ip, r1
   1ca70:	4388      	bics	r0, r1
   1ca72:	1821      	adds	r1, r4, r0
   1ca74:	468b      	mov	fp, r1
   1ca76:	4299      	cmp	r1, r3
   1ca78:	db21      	blt.n	1cabe <_realloc_r+0x162>
   1ca7a:	9a02      	ldr	r2, [sp, #8]
   1ca7c:	0035      	movs	r5, r6
   1ca7e:	68d3      	ldr	r3, [r2, #12]
   1ca80:	6892      	ldr	r2, [r2, #8]
   1ca82:	465c      	mov	r4, fp
   1ca84:	60d3      	str	r3, [r2, #12]
   1ca86:	609a      	str	r2, [r3, #8]
   1ca88:	e7d5      	b.n	1ca36 <_realloc_r+0xda>
   1ca8a:	464a      	mov	r2, r9
   1ca8c:	2001      	movs	r0, #1
   1ca8e:	4646      	mov	r6, r8
   1ca90:	6852      	ldr	r2, [r2, #4]
   1ca92:	4649      	mov	r1, r9
   1ca94:	4002      	ands	r2, r0
   1ca96:	4332      	orrs	r2, r6
   1ca98:	464e      	mov	r6, r9
   1ca9a:	4441      	add	r1, r8
   1ca9c:	4303      	orrs	r3, r0
   1ca9e:	6072      	str	r2, [r6, #4]
   1caa0:	444c      	add	r4, r9
   1caa2:	604b      	str	r3, [r1, #4]
   1caa4:	6863      	ldr	r3, [r4, #4]
   1caa6:	3108      	adds	r1, #8
   1caa8:	4318      	orrs	r0, r3
   1caaa:	6060      	str	r0, [r4, #4]
   1caac:	9801      	ldr	r0, [sp, #4]
   1caae:	f7ff f8b9 	bl	1bc24 <_free_r>
   1cab2:	e7cf      	b.n	1ca54 <_realloc_r+0xf8>
   1cab4:	0011      	movs	r1, r2
   1cab6:	f7fb fb03 	bl	180c0 <_malloc_r>
   1caba:	0005      	movs	r5, r0
   1cabc:	e7cd      	b.n	1ca5a <_realloc_r+0xfe>
   1cabe:	4651      	mov	r1, sl
   1cac0:	4211      	tst	r1, r2
   1cac2:	d000      	beq.n	1cac6 <_realloc_r+0x16a>
   1cac4:	e786      	b.n	1c9d4 <_realloc_r+0x78>
   1cac6:	4661      	mov	r1, ip
   1cac8:	683a      	ldr	r2, [r7, #0]
   1caca:	1aba      	subs	r2, r7, r2
   1cacc:	4692      	mov	sl, r2
   1cace:	6852      	ldr	r2, [r2, #4]
   1cad0:	438a      	bics	r2, r1
   1cad2:	1880      	adds	r0, r0, r2
   1cad4:	4683      	mov	fp, r0
   1cad6:	44a3      	add	fp, r4
   1cad8:	459b      	cmp	fp, r3
   1cada:	db26      	blt.n	1cb2a <_realloc_r+0x1ce>
   1cadc:	9a02      	ldr	r2, [sp, #8]
   1cade:	68d3      	ldr	r3, [r2, #12]
   1cae0:	6892      	ldr	r2, [r2, #8]
   1cae2:	60d3      	str	r3, [r2, #12]
   1cae4:	609a      	str	r2, [r3, #8]
   1cae6:	4653      	mov	r3, sl
   1cae8:	4652      	mov	r2, sl
   1caea:	4655      	mov	r5, sl
   1caec:	6892      	ldr	r2, [r2, #8]
   1caee:	68db      	ldr	r3, [r3, #12]
   1caf0:	3508      	adds	r5, #8
   1caf2:	60d3      	str	r3, [r2, #12]
   1caf4:	609a      	str	r2, [r3, #8]
   1caf6:	1f22      	subs	r2, r4, #4
   1caf8:	2a24      	cmp	r2, #36	; 0x24
   1cafa:	d900      	bls.n	1cafe <_realloc_r+0x1a2>
   1cafc:	e096      	b.n	1cc2c <_realloc_r+0x2d0>
   1cafe:	2a13      	cmp	r2, #19
   1cb00:	d972      	bls.n	1cbe8 <_realloc_r+0x28c>
   1cb02:	4653      	mov	r3, sl
   1cb04:	6831      	ldr	r1, [r6, #0]
   1cb06:	6099      	str	r1, [r3, #8]
   1cb08:	6871      	ldr	r1, [r6, #4]
   1cb0a:	60d9      	str	r1, [r3, #12]
   1cb0c:	2a1b      	cmp	r2, #27
   1cb0e:	d900      	bls.n	1cb12 <_realloc_r+0x1b6>
   1cb10:	e0a4      	b.n	1cc5c <_realloc_r+0x300>
   1cb12:	0032      	movs	r2, r6
   1cb14:	3310      	adds	r3, #16
   1cb16:	3208      	adds	r2, #8
   1cb18:	e068      	b.n	1cbec <_realloc_r+0x290>
   1cb1a:	683a      	ldr	r2, [r7, #0]
   1cb1c:	1aba      	subs	r2, r7, r2
   1cb1e:	4692      	mov	sl, r2
   1cb20:	4651      	mov	r1, sl
   1cb22:	2203      	movs	r2, #3
   1cb24:	6849      	ldr	r1, [r1, #4]
   1cb26:	4391      	bics	r1, r2
   1cb28:	000a      	movs	r2, r1
   1cb2a:	4693      	mov	fp, r2
   1cb2c:	44a3      	add	fp, r4
   1cb2e:	459b      	cmp	fp, r3
   1cb30:	da00      	bge.n	1cb34 <_realloc_r+0x1d8>
   1cb32:	e74f      	b.n	1c9d4 <_realloc_r+0x78>
   1cb34:	e7d7      	b.n	1cae6 <_realloc_r+0x18a>
   1cb36:	2003      	movs	r0, #3
   1cb38:	9902      	ldr	r1, [sp, #8]
   1cb3a:	4684      	mov	ip, r0
   1cb3c:	6849      	ldr	r1, [r1, #4]
   1cb3e:	4381      	bics	r1, r0
   1cb40:	4640      	mov	r0, r8
   1cb42:	1909      	adds	r1, r1, r4
   1cb44:	3010      	adds	r0, #16
   1cb46:	9002      	str	r0, [sp, #8]
   1cb48:	4281      	cmp	r1, r0
   1cb4a:	da58      	bge.n	1cbfe <_realloc_r+0x2a2>
   1cb4c:	07d2      	lsls	r2, r2, #31
   1cb4e:	d500      	bpl.n	1cb52 <_realloc_r+0x1f6>
   1cb50:	e740      	b.n	1c9d4 <_realloc_r+0x78>
   1cb52:	4660      	mov	r0, ip
   1cb54:	683a      	ldr	r2, [r7, #0]
   1cb56:	1aba      	subs	r2, r7, r2
   1cb58:	4692      	mov	sl, r2
   1cb5a:	6852      	ldr	r2, [r2, #4]
   1cb5c:	4382      	bics	r2, r0
   1cb5e:	9802      	ldr	r0, [sp, #8]
   1cb60:	1851      	adds	r1, r2, r1
   1cb62:	9103      	str	r1, [sp, #12]
   1cb64:	4288      	cmp	r0, r1
   1cb66:	dce0      	bgt.n	1cb2a <_realloc_r+0x1ce>
   1cb68:	4653      	mov	r3, sl
   1cb6a:	4652      	mov	r2, sl
   1cb6c:	4655      	mov	r5, sl
   1cb6e:	6892      	ldr	r2, [r2, #8]
   1cb70:	68db      	ldr	r3, [r3, #12]
   1cb72:	3508      	adds	r5, #8
   1cb74:	60d3      	str	r3, [r2, #12]
   1cb76:	609a      	str	r2, [r3, #8]
   1cb78:	1f22      	subs	r2, r4, #4
   1cb7a:	2a24      	cmp	r2, #36	; 0x24
   1cb7c:	d900      	bls.n	1cb80 <_realloc_r+0x224>
   1cb7e:	e08e      	b.n	1cc9e <_realloc_r+0x342>
   1cb80:	2a13      	cmp	r2, #19
   1cb82:	d800      	bhi.n	1cb86 <_realloc_r+0x22a>
   1cb84:	e088      	b.n	1cc98 <_realloc_r+0x33c>
   1cb86:	4653      	mov	r3, sl
   1cb88:	6831      	ldr	r1, [r6, #0]
   1cb8a:	6099      	str	r1, [r3, #8]
   1cb8c:	6871      	ldr	r1, [r6, #4]
   1cb8e:	60d9      	str	r1, [r3, #12]
   1cb90:	2a1b      	cmp	r2, #27
   1cb92:	d900      	bls.n	1cb96 <_realloc_r+0x23a>
   1cb94:	e088      	b.n	1cca8 <_realloc_r+0x34c>
   1cb96:	0032      	movs	r2, r6
   1cb98:	3310      	adds	r3, #16
   1cb9a:	3208      	adds	r2, #8
   1cb9c:	6811      	ldr	r1, [r2, #0]
   1cb9e:	6019      	str	r1, [r3, #0]
   1cba0:	6851      	ldr	r1, [r2, #4]
   1cba2:	6059      	str	r1, [r3, #4]
   1cba4:	6892      	ldr	r2, [r2, #8]
   1cba6:	609a      	str	r2, [r3, #8]
   1cba8:	4651      	mov	r1, sl
   1cbaa:	465b      	mov	r3, fp
   1cbac:	4642      	mov	r2, r8
   1cbae:	4441      	add	r1, r8
   1cbb0:	6099      	str	r1, [r3, #8]
   1cbb2:	9b03      	ldr	r3, [sp, #12]
   1cbb4:	9801      	ldr	r0, [sp, #4]
   1cbb6:	1a9a      	subs	r2, r3, r2
   1cbb8:	2301      	movs	r3, #1
   1cbba:	431a      	orrs	r2, r3
   1cbbc:	604a      	str	r2, [r1, #4]
   1cbbe:	4652      	mov	r2, sl
   1cbc0:	6852      	ldr	r2, [r2, #4]
   1cbc2:	4013      	ands	r3, r2
   1cbc4:	4642      	mov	r2, r8
   1cbc6:	4313      	orrs	r3, r2
   1cbc8:	4652      	mov	r2, sl
   1cbca:	6053      	str	r3, [r2, #4]
   1cbcc:	f7fb fe26 	bl	1881c <__malloc_unlock>
   1cbd0:	e743      	b.n	1ca5a <_realloc_r+0xfe>
   1cbd2:	6833      	ldr	r3, [r6, #0]
   1cbd4:	6003      	str	r3, [r0, #0]
   1cbd6:	6873      	ldr	r3, [r6, #4]
   1cbd8:	6043      	str	r3, [r0, #4]
   1cbda:	2a1b      	cmp	r2, #27
   1cbdc:	d82d      	bhi.n	1cc3a <_realloc_r+0x2de>
   1cbde:	0003      	movs	r3, r0
   1cbe0:	0032      	movs	r2, r6
   1cbe2:	3308      	adds	r3, #8
   1cbe4:	3208      	adds	r2, #8
   1cbe6:	e70d      	b.n	1ca04 <_realloc_r+0xa8>
   1cbe8:	002b      	movs	r3, r5
   1cbea:	0032      	movs	r2, r6
   1cbec:	6811      	ldr	r1, [r2, #0]
   1cbee:	465c      	mov	r4, fp
   1cbf0:	6019      	str	r1, [r3, #0]
   1cbf2:	6851      	ldr	r1, [r2, #4]
   1cbf4:	46d1      	mov	r9, sl
   1cbf6:	6059      	str	r1, [r3, #4]
   1cbf8:	6892      	ldr	r2, [r2, #8]
   1cbfa:	609a      	str	r2, [r3, #8]
   1cbfc:	e71b      	b.n	1ca36 <_realloc_r+0xda>
   1cbfe:	4643      	mov	r3, r8
   1cc00:	18fa      	adds	r2, r7, r3
   1cc02:	465b      	mov	r3, fp
   1cc04:	609a      	str	r2, [r3, #8]
   1cc06:	4643      	mov	r3, r8
   1cc08:	1ac9      	subs	r1, r1, r3
   1cc0a:	2301      	movs	r3, #1
   1cc0c:	4319      	orrs	r1, r3
   1cc0e:	6051      	str	r1, [r2, #4]
   1cc10:	687a      	ldr	r2, [r7, #4]
   1cc12:	9801      	ldr	r0, [sp, #4]
   1cc14:	4013      	ands	r3, r2
   1cc16:	4642      	mov	r2, r8
   1cc18:	4313      	orrs	r3, r2
   1cc1a:	607b      	str	r3, [r7, #4]
   1cc1c:	f7fb fdfe 	bl	1881c <__malloc_unlock>
   1cc20:	0035      	movs	r5, r6
   1cc22:	e71a      	b.n	1ca5a <_realloc_r+0xfe>
   1cc24:	0031      	movs	r1, r6
   1cc26:	f7fb fd57 	bl	186d8 <memmove>
   1cc2a:	e6f1      	b.n	1ca10 <_realloc_r+0xb4>
   1cc2c:	0031      	movs	r1, r6
   1cc2e:	0028      	movs	r0, r5
   1cc30:	f7fb fd52 	bl	186d8 <memmove>
   1cc34:	465c      	mov	r4, fp
   1cc36:	46d1      	mov	r9, sl
   1cc38:	e6fd      	b.n	1ca36 <_realloc_r+0xda>
   1cc3a:	68b3      	ldr	r3, [r6, #8]
   1cc3c:	6083      	str	r3, [r0, #8]
   1cc3e:	68f3      	ldr	r3, [r6, #12]
   1cc40:	60c3      	str	r3, [r0, #12]
   1cc42:	2a24      	cmp	r2, #36	; 0x24
   1cc44:	d015      	beq.n	1cc72 <_realloc_r+0x316>
   1cc46:	0003      	movs	r3, r0
   1cc48:	0032      	movs	r2, r6
   1cc4a:	3310      	adds	r3, #16
   1cc4c:	3210      	adds	r2, #16
   1cc4e:	e6d9      	b.n	1ca04 <_realloc_r+0xa8>
   1cc50:	6853      	ldr	r3, [r2, #4]
   1cc52:	2203      	movs	r2, #3
   1cc54:	4393      	bics	r3, r2
   1cc56:	18e4      	adds	r4, r4, r3
   1cc58:	0035      	movs	r5, r6
   1cc5a:	e6ec      	b.n	1ca36 <_realloc_r+0xda>
   1cc5c:	4653      	mov	r3, sl
   1cc5e:	68b1      	ldr	r1, [r6, #8]
   1cc60:	6119      	str	r1, [r3, #16]
   1cc62:	68f1      	ldr	r1, [r6, #12]
   1cc64:	6159      	str	r1, [r3, #20]
   1cc66:	2a24      	cmp	r2, #36	; 0x24
   1cc68:	d00c      	beq.n	1cc84 <_realloc_r+0x328>
   1cc6a:	0032      	movs	r2, r6
   1cc6c:	3318      	adds	r3, #24
   1cc6e:	3210      	adds	r2, #16
   1cc70:	e7bc      	b.n	1cbec <_realloc_r+0x290>
   1cc72:	6933      	ldr	r3, [r6, #16]
   1cc74:	0032      	movs	r2, r6
   1cc76:	6103      	str	r3, [r0, #16]
   1cc78:	0003      	movs	r3, r0
   1cc7a:	6971      	ldr	r1, [r6, #20]
   1cc7c:	3318      	adds	r3, #24
   1cc7e:	3218      	adds	r2, #24
   1cc80:	6141      	str	r1, [r0, #20]
   1cc82:	e6bf      	b.n	1ca04 <_realloc_r+0xa8>
   1cc84:	4653      	mov	r3, sl
   1cc86:	6932      	ldr	r2, [r6, #16]
   1cc88:	4651      	mov	r1, sl
   1cc8a:	619a      	str	r2, [r3, #24]
   1cc8c:	0032      	movs	r2, r6
   1cc8e:	6970      	ldr	r0, [r6, #20]
   1cc90:	3320      	adds	r3, #32
   1cc92:	3218      	adds	r2, #24
   1cc94:	61c8      	str	r0, [r1, #28]
   1cc96:	e7a9      	b.n	1cbec <_realloc_r+0x290>
   1cc98:	002b      	movs	r3, r5
   1cc9a:	0032      	movs	r2, r6
   1cc9c:	e77e      	b.n	1cb9c <_realloc_r+0x240>
   1cc9e:	0031      	movs	r1, r6
   1cca0:	0028      	movs	r0, r5
   1cca2:	f7fb fd19 	bl	186d8 <memmove>
   1cca6:	e77f      	b.n	1cba8 <_realloc_r+0x24c>
   1cca8:	4653      	mov	r3, sl
   1ccaa:	68b1      	ldr	r1, [r6, #8]
   1ccac:	6119      	str	r1, [r3, #16]
   1ccae:	68f1      	ldr	r1, [r6, #12]
   1ccb0:	6159      	str	r1, [r3, #20]
   1ccb2:	2a24      	cmp	r2, #36	; 0x24
   1ccb4:	d003      	beq.n	1ccbe <_realloc_r+0x362>
   1ccb6:	0032      	movs	r2, r6
   1ccb8:	3318      	adds	r3, #24
   1ccba:	3210      	adds	r2, #16
   1ccbc:	e76e      	b.n	1cb9c <_realloc_r+0x240>
   1ccbe:	4653      	mov	r3, sl
   1ccc0:	6932      	ldr	r2, [r6, #16]
   1ccc2:	4651      	mov	r1, sl
   1ccc4:	619a      	str	r2, [r3, #24]
   1ccc6:	0032      	movs	r2, r6
   1ccc8:	6970      	ldr	r0, [r6, #20]
   1ccca:	3320      	adds	r3, #32
   1cccc:	3218      	adds	r2, #24
   1ccce:	61c8      	str	r0, [r1, #28]
   1ccd0:	e764      	b.n	1cb9c <_realloc_r+0x240>
   1ccd2:	46c0      	nop			; (mov r8, r8)
   1ccd4:	200005b4 	.word	0x200005b4

0001ccd8 <__sread>:
   1ccd8:	b570      	push	{r4, r5, r6, lr}
   1ccda:	000c      	movs	r4, r1
   1ccdc:	250e      	movs	r5, #14
   1ccde:	5f49      	ldrsh	r1, [r1, r5]
   1cce0:	f000 fa7a 	bl	1d1d8 <_read_r>
   1cce4:	2800      	cmp	r0, #0
   1cce6:	db03      	blt.n	1ccf0 <__sread+0x18>
   1cce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1ccea:	181b      	adds	r3, r3, r0
   1ccec:	6523      	str	r3, [r4, #80]	; 0x50
   1ccee:	bd70      	pop	{r4, r5, r6, pc}
   1ccf0:	89a3      	ldrh	r3, [r4, #12]
   1ccf2:	4a02      	ldr	r2, [pc, #8]	; (1ccfc <__sread+0x24>)
   1ccf4:	4013      	ands	r3, r2
   1ccf6:	81a3      	strh	r3, [r4, #12]
   1ccf8:	e7f9      	b.n	1ccee <__sread+0x16>
   1ccfa:	46c0      	nop			; (mov r8, r8)
   1ccfc:	ffffefff 	.word	0xffffefff

0001cd00 <__swrite>:
   1cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd02:	0016      	movs	r6, r2
   1cd04:	001f      	movs	r7, r3
   1cd06:	220c      	movs	r2, #12
   1cd08:	5e8b      	ldrsh	r3, [r1, r2]
   1cd0a:	0005      	movs	r5, r0
   1cd0c:	000c      	movs	r4, r1
   1cd0e:	05da      	lsls	r2, r3, #23
   1cd10:	d507      	bpl.n	1cd22 <__swrite+0x22>
   1cd12:	230e      	movs	r3, #14
   1cd14:	5ec9      	ldrsh	r1, [r1, r3]
   1cd16:	2200      	movs	r2, #0
   1cd18:	2302      	movs	r3, #2
   1cd1a:	f000 fa49 	bl	1d1b0 <_lseek_r>
   1cd1e:	220c      	movs	r2, #12
   1cd20:	5ea3      	ldrsh	r3, [r4, r2]
   1cd22:	4a05      	ldr	r2, [pc, #20]	; (1cd38 <__swrite+0x38>)
   1cd24:	0028      	movs	r0, r5
   1cd26:	4013      	ands	r3, r2
   1cd28:	81a3      	strh	r3, [r4, #12]
   1cd2a:	0032      	movs	r2, r6
   1cd2c:	230e      	movs	r3, #14
   1cd2e:	5ee1      	ldrsh	r1, [r4, r3]
   1cd30:	003b      	movs	r3, r7
   1cd32:	f000 f86b 	bl	1ce0c <_write_r>
   1cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cd38:	ffffefff 	.word	0xffffefff

0001cd3c <__sseek>:
   1cd3c:	b570      	push	{r4, r5, r6, lr}
   1cd3e:	000c      	movs	r4, r1
   1cd40:	250e      	movs	r5, #14
   1cd42:	5f49      	ldrsh	r1, [r1, r5]
   1cd44:	f000 fa34 	bl	1d1b0 <_lseek_r>
   1cd48:	1c43      	adds	r3, r0, #1
   1cd4a:	d006      	beq.n	1cd5a <__sseek+0x1e>
   1cd4c:	2380      	movs	r3, #128	; 0x80
   1cd4e:	89a2      	ldrh	r2, [r4, #12]
   1cd50:	015b      	lsls	r3, r3, #5
   1cd52:	4313      	orrs	r3, r2
   1cd54:	81a3      	strh	r3, [r4, #12]
   1cd56:	6520      	str	r0, [r4, #80]	; 0x50
   1cd58:	bd70      	pop	{r4, r5, r6, pc}
   1cd5a:	89a3      	ldrh	r3, [r4, #12]
   1cd5c:	4a01      	ldr	r2, [pc, #4]	; (1cd64 <__sseek+0x28>)
   1cd5e:	4013      	ands	r3, r2
   1cd60:	81a3      	strh	r3, [r4, #12]
   1cd62:	e7f9      	b.n	1cd58 <__sseek+0x1c>
   1cd64:	ffffefff 	.word	0xffffefff

0001cd68 <__sclose>:
   1cd68:	b510      	push	{r4, lr}
   1cd6a:	230e      	movs	r3, #14
   1cd6c:	5ec9      	ldrsh	r1, [r1, r3]
   1cd6e:	f000 f907 	bl	1cf80 <_close_r>
   1cd72:	bd10      	pop	{r4, pc}

0001cd74 <__sprint_r.part.0>:
   1cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd76:	464e      	mov	r6, r9
   1cd78:	4645      	mov	r5, r8
   1cd7a:	46de      	mov	lr, fp
   1cd7c:	4657      	mov	r7, sl
   1cd7e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1cd80:	b5e0      	push	{r5, r6, r7, lr}
   1cd82:	4680      	mov	r8, r0
   1cd84:	000e      	movs	r6, r1
   1cd86:	4691      	mov	r9, r2
   1cd88:	049b      	lsls	r3, r3, #18
   1cd8a:	d531      	bpl.n	1cdf0 <__sprint_r.part.0+0x7c>
   1cd8c:	6813      	ldr	r3, [r2, #0]
   1cd8e:	469a      	mov	sl, r3
   1cd90:	6893      	ldr	r3, [r2, #8]
   1cd92:	2b00      	cmp	r3, #0
   1cd94:	d02a      	beq.n	1cdec <__sprint_r.part.0+0x78>
   1cd96:	4652      	mov	r2, sl
   1cd98:	6852      	ldr	r2, [r2, #4]
   1cd9a:	2500      	movs	r5, #0
   1cd9c:	4693      	mov	fp, r2
   1cd9e:	0897      	lsrs	r7, r2, #2
   1cda0:	4652      	mov	r2, sl
   1cda2:	6814      	ldr	r4, [r2, #0]
   1cda4:	d104      	bne.n	1cdb0 <__sprint_r.part.0+0x3c>
   1cda6:	e016      	b.n	1cdd6 <__sprint_r.part.0+0x62>
   1cda8:	3501      	adds	r5, #1
   1cdaa:	3404      	adds	r4, #4
   1cdac:	42af      	cmp	r7, r5
   1cdae:	d010      	beq.n	1cdd2 <__sprint_r.part.0+0x5e>
   1cdb0:	0032      	movs	r2, r6
   1cdb2:	6821      	ldr	r1, [r4, #0]
   1cdb4:	4640      	mov	r0, r8
   1cdb6:	f000 f9a7 	bl	1d108 <_fputwc_r>
   1cdba:	1c43      	adds	r3, r0, #1
   1cdbc:	d1f4      	bne.n	1cda8 <__sprint_r.part.0+0x34>
   1cdbe:	464a      	mov	r2, r9
   1cdc0:	2300      	movs	r3, #0
   1cdc2:	6093      	str	r3, [r2, #8]
   1cdc4:	6053      	str	r3, [r2, #4]
   1cdc6:	bc3c      	pop	{r2, r3, r4, r5}
   1cdc8:	4690      	mov	r8, r2
   1cdca:	4699      	mov	r9, r3
   1cdcc:	46a2      	mov	sl, r4
   1cdce:	46ab      	mov	fp, r5
   1cdd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cdd2:	464b      	mov	r3, r9
   1cdd4:	689b      	ldr	r3, [r3, #8]
   1cdd6:	465a      	mov	r2, fp
   1cdd8:	2103      	movs	r1, #3
   1cdda:	438a      	bics	r2, r1
   1cddc:	1a9b      	subs	r3, r3, r2
   1cdde:	464a      	mov	r2, r9
   1cde0:	6093      	str	r3, [r2, #8]
   1cde2:	2208      	movs	r2, #8
   1cde4:	4694      	mov	ip, r2
   1cde6:	44e2      	add	sl, ip
   1cde8:	2b00      	cmp	r3, #0
   1cdea:	d1d4      	bne.n	1cd96 <__sprint_r.part.0+0x22>
   1cdec:	2000      	movs	r0, #0
   1cdee:	e7e6      	b.n	1cdbe <__sprint_r.part.0+0x4a>
   1cdf0:	f7fe fff6 	bl	1bde0 <__sfvwrite_r>
   1cdf4:	e7e3      	b.n	1cdbe <__sprint_r.part.0+0x4a>
   1cdf6:	46c0      	nop			; (mov r8, r8)

0001cdf8 <__sprint_r>:
   1cdf8:	6893      	ldr	r3, [r2, #8]
   1cdfa:	b510      	push	{r4, lr}
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d002      	beq.n	1ce06 <__sprint_r+0xe>
   1ce00:	f7ff ffb8 	bl	1cd74 <__sprint_r.part.0>
   1ce04:	bd10      	pop	{r4, pc}
   1ce06:	6053      	str	r3, [r2, #4]
   1ce08:	2000      	movs	r0, #0
   1ce0a:	e7fb      	b.n	1ce04 <__sprint_r+0xc>

0001ce0c <_write_r>:
   1ce0c:	b570      	push	{r4, r5, r6, lr}
   1ce0e:	0005      	movs	r5, r0
   1ce10:	0008      	movs	r0, r1
   1ce12:	0011      	movs	r1, r2
   1ce14:	2200      	movs	r2, #0
   1ce16:	4c06      	ldr	r4, [pc, #24]	; (1ce30 <_write_r+0x24>)
   1ce18:	6022      	str	r2, [r4, #0]
   1ce1a:	001a      	movs	r2, r3
   1ce1c:	f7e8 ff88 	bl	5d30 <_write>
   1ce20:	1c43      	adds	r3, r0, #1
   1ce22:	d000      	beq.n	1ce26 <_write_r+0x1a>
   1ce24:	bd70      	pop	{r4, r5, r6, pc}
   1ce26:	6823      	ldr	r3, [r4, #0]
   1ce28:	2b00      	cmp	r3, #0
   1ce2a:	d0fb      	beq.n	1ce24 <_write_r+0x18>
   1ce2c:	602b      	str	r3, [r5, #0]
   1ce2e:	e7f9      	b.n	1ce24 <_write_r+0x18>
   1ce30:	20003070 	.word	0x20003070

0001ce34 <__register_exitproc>:
   1ce34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce36:	464e      	mov	r6, r9
   1ce38:	4645      	mov	r5, r8
   1ce3a:	46de      	mov	lr, fp
   1ce3c:	4657      	mov	r7, sl
   1ce3e:	b5e0      	push	{r5, r6, r7, lr}
   1ce40:	4d36      	ldr	r5, [pc, #216]	; (1cf1c <__register_exitproc+0xe8>)
   1ce42:	b083      	sub	sp, #12
   1ce44:	0006      	movs	r6, r0
   1ce46:	6828      	ldr	r0, [r5, #0]
   1ce48:	4698      	mov	r8, r3
   1ce4a:	000f      	movs	r7, r1
   1ce4c:	4691      	mov	r9, r2
   1ce4e:	f7ff f981 	bl	1c154 <__retarget_lock_acquire_recursive>
   1ce52:	4b33      	ldr	r3, [pc, #204]	; (1cf20 <__register_exitproc+0xec>)
   1ce54:	681c      	ldr	r4, [r3, #0]
   1ce56:	23a4      	movs	r3, #164	; 0xa4
   1ce58:	005b      	lsls	r3, r3, #1
   1ce5a:	58e0      	ldr	r0, [r4, r3]
   1ce5c:	2800      	cmp	r0, #0
   1ce5e:	d052      	beq.n	1cf06 <__register_exitproc+0xd2>
   1ce60:	6843      	ldr	r3, [r0, #4]
   1ce62:	2b1f      	cmp	r3, #31
   1ce64:	dc13      	bgt.n	1ce8e <__register_exitproc+0x5a>
   1ce66:	1c5a      	adds	r2, r3, #1
   1ce68:	9201      	str	r2, [sp, #4]
   1ce6a:	2e00      	cmp	r6, #0
   1ce6c:	d128      	bne.n	1cec0 <__register_exitproc+0x8c>
   1ce6e:	9a01      	ldr	r2, [sp, #4]
   1ce70:	3302      	adds	r3, #2
   1ce72:	009b      	lsls	r3, r3, #2
   1ce74:	6042      	str	r2, [r0, #4]
   1ce76:	501f      	str	r7, [r3, r0]
   1ce78:	6828      	ldr	r0, [r5, #0]
   1ce7a:	f7ff f96d 	bl	1c158 <__retarget_lock_release_recursive>
   1ce7e:	2000      	movs	r0, #0
   1ce80:	b003      	add	sp, #12
   1ce82:	bc3c      	pop	{r2, r3, r4, r5}
   1ce84:	4690      	mov	r8, r2
   1ce86:	4699      	mov	r9, r3
   1ce88:	46a2      	mov	sl, r4
   1ce8a:	46ab      	mov	fp, r5
   1ce8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce8e:	4b25      	ldr	r3, [pc, #148]	; (1cf24 <__register_exitproc+0xf0>)
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	d03d      	beq.n	1cf10 <__register_exitproc+0xdc>
   1ce94:	20c8      	movs	r0, #200	; 0xc8
   1ce96:	0040      	lsls	r0, r0, #1
   1ce98:	f7fb f908 	bl	180ac <malloc>
   1ce9c:	2800      	cmp	r0, #0
   1ce9e:	d037      	beq.n	1cf10 <__register_exitproc+0xdc>
   1cea0:	22a4      	movs	r2, #164	; 0xa4
   1cea2:	2300      	movs	r3, #0
   1cea4:	0052      	lsls	r2, r2, #1
   1cea6:	58a1      	ldr	r1, [r4, r2]
   1cea8:	6043      	str	r3, [r0, #4]
   1ceaa:	6001      	str	r1, [r0, #0]
   1ceac:	50a0      	str	r0, [r4, r2]
   1ceae:	3240      	adds	r2, #64	; 0x40
   1ceb0:	5083      	str	r3, [r0, r2]
   1ceb2:	3204      	adds	r2, #4
   1ceb4:	5083      	str	r3, [r0, r2]
   1ceb6:	3301      	adds	r3, #1
   1ceb8:	9301      	str	r3, [sp, #4]
   1ceba:	2300      	movs	r3, #0
   1cebc:	2e00      	cmp	r6, #0
   1cebe:	d0d6      	beq.n	1ce6e <__register_exitproc+0x3a>
   1cec0:	009a      	lsls	r2, r3, #2
   1cec2:	4692      	mov	sl, r2
   1cec4:	4482      	add	sl, r0
   1cec6:	464a      	mov	r2, r9
   1cec8:	2188      	movs	r1, #136	; 0x88
   1ceca:	4654      	mov	r4, sl
   1cecc:	5062      	str	r2, [r4, r1]
   1cece:	22c4      	movs	r2, #196	; 0xc4
   1ced0:	0052      	lsls	r2, r2, #1
   1ced2:	4691      	mov	r9, r2
   1ced4:	4481      	add	r9, r0
   1ced6:	464a      	mov	r2, r9
   1ced8:	3987      	subs	r1, #135	; 0x87
   1ceda:	4099      	lsls	r1, r3
   1cedc:	6812      	ldr	r2, [r2, #0]
   1cede:	468b      	mov	fp, r1
   1cee0:	430a      	orrs	r2, r1
   1cee2:	4694      	mov	ip, r2
   1cee4:	464a      	mov	r2, r9
   1cee6:	4661      	mov	r1, ip
   1cee8:	6011      	str	r1, [r2, #0]
   1ceea:	2284      	movs	r2, #132	; 0x84
   1ceec:	4641      	mov	r1, r8
   1ceee:	0052      	lsls	r2, r2, #1
   1cef0:	50a1      	str	r1, [r4, r2]
   1cef2:	2e02      	cmp	r6, #2
   1cef4:	d1bb      	bne.n	1ce6e <__register_exitproc+0x3a>
   1cef6:	0002      	movs	r2, r0
   1cef8:	465c      	mov	r4, fp
   1cefa:	328d      	adds	r2, #141	; 0x8d
   1cefc:	32ff      	adds	r2, #255	; 0xff
   1cefe:	6811      	ldr	r1, [r2, #0]
   1cf00:	430c      	orrs	r4, r1
   1cf02:	6014      	str	r4, [r2, #0]
   1cf04:	e7b3      	b.n	1ce6e <__register_exitproc+0x3a>
   1cf06:	0020      	movs	r0, r4
   1cf08:	304d      	adds	r0, #77	; 0x4d
   1cf0a:	30ff      	adds	r0, #255	; 0xff
   1cf0c:	50e0      	str	r0, [r4, r3]
   1cf0e:	e7a7      	b.n	1ce60 <__register_exitproc+0x2c>
   1cf10:	6828      	ldr	r0, [r5, #0]
   1cf12:	f7ff f921 	bl	1c158 <__retarget_lock_release_recursive>
   1cf16:	2001      	movs	r0, #1
   1cf18:	4240      	negs	r0, r0
   1cf1a:	e7b1      	b.n	1ce80 <__register_exitproc+0x4c>
   1cf1c:	200009c4 	.word	0x200009c4
   1cf20:	0001ec60 	.word	0x0001ec60
   1cf24:	000180ad 	.word	0x000180ad

0001cf28 <_calloc_r>:
   1cf28:	b510      	push	{r4, lr}
   1cf2a:	4351      	muls	r1, r2
   1cf2c:	f7fb f8c8 	bl	180c0 <_malloc_r>
   1cf30:	1e04      	subs	r4, r0, #0
   1cf32:	d01c      	beq.n	1cf6e <_calloc_r+0x46>
   1cf34:	0003      	movs	r3, r0
   1cf36:	3b08      	subs	r3, #8
   1cf38:	685a      	ldr	r2, [r3, #4]
   1cf3a:	2303      	movs	r3, #3
   1cf3c:	439a      	bics	r2, r3
   1cf3e:	3a04      	subs	r2, #4
   1cf40:	2a24      	cmp	r2, #36	; 0x24
   1cf42:	d816      	bhi.n	1cf72 <_calloc_r+0x4a>
   1cf44:	0003      	movs	r3, r0
   1cf46:	2a13      	cmp	r2, #19
   1cf48:	d90d      	bls.n	1cf66 <_calloc_r+0x3e>
   1cf4a:	2100      	movs	r1, #0
   1cf4c:	3308      	adds	r3, #8
   1cf4e:	6001      	str	r1, [r0, #0]
   1cf50:	6041      	str	r1, [r0, #4]
   1cf52:	2a1b      	cmp	r2, #27
   1cf54:	d907      	bls.n	1cf66 <_calloc_r+0x3e>
   1cf56:	6081      	str	r1, [r0, #8]
   1cf58:	60c1      	str	r1, [r0, #12]
   1cf5a:	2a24      	cmp	r2, #36	; 0x24
   1cf5c:	d10d      	bne.n	1cf7a <_calloc_r+0x52>
   1cf5e:	0003      	movs	r3, r0
   1cf60:	6101      	str	r1, [r0, #16]
   1cf62:	3318      	adds	r3, #24
   1cf64:	6141      	str	r1, [r0, #20]
   1cf66:	2200      	movs	r2, #0
   1cf68:	601a      	str	r2, [r3, #0]
   1cf6a:	605a      	str	r2, [r3, #4]
   1cf6c:	609a      	str	r2, [r3, #8]
   1cf6e:	0020      	movs	r0, r4
   1cf70:	bd10      	pop	{r4, pc}
   1cf72:	2100      	movs	r1, #0
   1cf74:	f7fb fc00 	bl	18778 <memset>
   1cf78:	e7f9      	b.n	1cf6e <_calloc_r+0x46>
   1cf7a:	0003      	movs	r3, r0
   1cf7c:	3310      	adds	r3, #16
   1cf7e:	e7f2      	b.n	1cf66 <_calloc_r+0x3e>

0001cf80 <_close_r>:
   1cf80:	2300      	movs	r3, #0
   1cf82:	b570      	push	{r4, r5, r6, lr}
   1cf84:	4c06      	ldr	r4, [pc, #24]	; (1cfa0 <_close_r+0x20>)
   1cf86:	0005      	movs	r5, r0
   1cf88:	0008      	movs	r0, r1
   1cf8a:	6023      	str	r3, [r4, #0]
   1cf8c:	f7e8 ff0a 	bl	5da4 <_close>
   1cf90:	1c43      	adds	r3, r0, #1
   1cf92:	d000      	beq.n	1cf96 <_close_r+0x16>
   1cf94:	bd70      	pop	{r4, r5, r6, pc}
   1cf96:	6823      	ldr	r3, [r4, #0]
   1cf98:	2b00      	cmp	r3, #0
   1cf9a:	d0fb      	beq.n	1cf94 <_close_r+0x14>
   1cf9c:	602b      	str	r3, [r5, #0]
   1cf9e:	e7f9      	b.n	1cf94 <_close_r+0x14>
   1cfa0:	20003070 	.word	0x20003070

0001cfa4 <_fclose_r>:
   1cfa4:	b570      	push	{r4, r5, r6, lr}
   1cfa6:	0005      	movs	r5, r0
   1cfa8:	1e0c      	subs	r4, r1, #0
   1cfaa:	d040      	beq.n	1d02e <_fclose_r+0x8a>
   1cfac:	2800      	cmp	r0, #0
   1cfae:	d002      	beq.n	1cfb6 <_fclose_r+0x12>
   1cfb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1cfb2:	2b00      	cmp	r3, #0
   1cfb4:	d03e      	beq.n	1d034 <_fclose_r+0x90>
   1cfb6:	2601      	movs	r6, #1
   1cfb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1cfba:	4233      	tst	r3, r6
   1cfbc:	d133      	bne.n	1d026 <_fclose_r+0x82>
   1cfbe:	89a3      	ldrh	r3, [r4, #12]
   1cfc0:	059b      	lsls	r3, r3, #22
   1cfc2:	d543      	bpl.n	1d04c <_fclose_r+0xa8>
   1cfc4:	0021      	movs	r1, r4
   1cfc6:	0028      	movs	r0, r5
   1cfc8:	f7fe fc80 	bl	1b8cc <__sflush_r>
   1cfcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfce:	0006      	movs	r6, r0
   1cfd0:	2b00      	cmp	r3, #0
   1cfd2:	d004      	beq.n	1cfde <_fclose_r+0x3a>
   1cfd4:	69e1      	ldr	r1, [r4, #28]
   1cfd6:	0028      	movs	r0, r5
   1cfd8:	4798      	blx	r3
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	db44      	blt.n	1d068 <_fclose_r+0xc4>
   1cfde:	89a3      	ldrh	r3, [r4, #12]
   1cfe0:	061b      	lsls	r3, r3, #24
   1cfe2:	d42a      	bmi.n	1d03a <_fclose_r+0x96>
   1cfe4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1cfe6:	2900      	cmp	r1, #0
   1cfe8:	d008      	beq.n	1cffc <_fclose_r+0x58>
   1cfea:	0023      	movs	r3, r4
   1cfec:	3340      	adds	r3, #64	; 0x40
   1cfee:	4299      	cmp	r1, r3
   1cff0:	d002      	beq.n	1cff8 <_fclose_r+0x54>
   1cff2:	0028      	movs	r0, r5
   1cff4:	f7fe fe16 	bl	1bc24 <_free_r>
   1cff8:	2300      	movs	r3, #0
   1cffa:	6323      	str	r3, [r4, #48]	; 0x30
   1cffc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1cffe:	2900      	cmp	r1, #0
   1d000:	d004      	beq.n	1d00c <_fclose_r+0x68>
   1d002:	0028      	movs	r0, r5
   1d004:	f7fe fe0e 	bl	1bc24 <_free_r>
   1d008:	2300      	movs	r3, #0
   1d00a:	6463      	str	r3, [r4, #68]	; 0x44
   1d00c:	f7fe fd90 	bl	1bb30 <__sfp_lock_acquire>
   1d010:	2300      	movs	r3, #0
   1d012:	81a3      	strh	r3, [r4, #12]
   1d014:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d016:	07db      	lsls	r3, r3, #31
   1d018:	d514      	bpl.n	1d044 <_fclose_r+0xa0>
   1d01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d01c:	f7ff f898 	bl	1c150 <__retarget_lock_close_recursive>
   1d020:	f7fe fd8e 	bl	1bb40 <__sfp_lock_release>
   1d024:	e004      	b.n	1d030 <_fclose_r+0x8c>
   1d026:	220c      	movs	r2, #12
   1d028:	5ea3      	ldrsh	r3, [r4, r2]
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	d1ca      	bne.n	1cfc4 <_fclose_r+0x20>
   1d02e:	2600      	movs	r6, #0
   1d030:	0030      	movs	r0, r6
   1d032:	bd70      	pop	{r4, r5, r6, pc}
   1d034:	f7fe fd4c 	bl	1bad0 <__sinit>
   1d038:	e7bd      	b.n	1cfb6 <_fclose_r+0x12>
   1d03a:	6921      	ldr	r1, [r4, #16]
   1d03c:	0028      	movs	r0, r5
   1d03e:	f7fe fdf1 	bl	1bc24 <_free_r>
   1d042:	e7cf      	b.n	1cfe4 <_fclose_r+0x40>
   1d044:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d046:	f7ff f887 	bl	1c158 <__retarget_lock_release_recursive>
   1d04a:	e7e6      	b.n	1d01a <_fclose_r+0x76>
   1d04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d04e:	f7ff f881 	bl	1c154 <__retarget_lock_acquire_recursive>
   1d052:	220c      	movs	r2, #12
   1d054:	5ea3      	ldrsh	r3, [r4, r2]
   1d056:	2b00      	cmp	r3, #0
   1d058:	d1b4      	bne.n	1cfc4 <_fclose_r+0x20>
   1d05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d05c:	401e      	ands	r6, r3
   1d05e:	d1e6      	bne.n	1d02e <_fclose_r+0x8a>
   1d060:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d062:	f7ff f879 	bl	1c158 <__retarget_lock_release_recursive>
   1d066:	e7e3      	b.n	1d030 <_fclose_r+0x8c>
   1d068:	2601      	movs	r6, #1
   1d06a:	4276      	negs	r6, r6
   1d06c:	e7b7      	b.n	1cfde <_fclose_r+0x3a>
   1d06e:	46c0      	nop			; (mov r8, r8)

0001d070 <__fputwc>:
   1d070:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d072:	46ce      	mov	lr, r9
   1d074:	4647      	mov	r7, r8
   1d076:	b580      	push	{r7, lr}
   1d078:	b085      	sub	sp, #20
   1d07a:	4680      	mov	r8, r0
   1d07c:	4689      	mov	r9, r1
   1d07e:	0014      	movs	r4, r2
   1d080:	f7fa fff2 	bl	18068 <__locale_mb_cur_max>
   1d084:	2801      	cmp	r0, #1
   1d086:	d031      	beq.n	1d0ec <__fputwc+0x7c>
   1d088:	0023      	movs	r3, r4
   1d08a:	af03      	add	r7, sp, #12
   1d08c:	335c      	adds	r3, #92	; 0x5c
   1d08e:	464a      	mov	r2, r9
   1d090:	0039      	movs	r1, r7
   1d092:	4640      	mov	r0, r8
   1d094:	f000 f912 	bl	1d2bc <_wcrtomb_r>
   1d098:	0006      	movs	r6, r0
   1d09a:	1c43      	adds	r3, r0, #1
   1d09c:	d021      	beq.n	1d0e2 <__fputwc+0x72>
   1d09e:	2800      	cmp	r0, #0
   1d0a0:	d030      	beq.n	1d104 <__fputwc+0x94>
   1d0a2:	7839      	ldrb	r1, [r7, #0]
   1d0a4:	2500      	movs	r5, #0
   1d0a6:	e007      	b.n	1d0b8 <__fputwc+0x48>
   1d0a8:	6823      	ldr	r3, [r4, #0]
   1d0aa:	1c5a      	adds	r2, r3, #1
   1d0ac:	6022      	str	r2, [r4, #0]
   1d0ae:	7019      	strb	r1, [r3, #0]
   1d0b0:	3501      	adds	r5, #1
   1d0b2:	42b5      	cmp	r5, r6
   1d0b4:	d226      	bcs.n	1d104 <__fputwc+0x94>
   1d0b6:	5d79      	ldrb	r1, [r7, r5]
   1d0b8:	68a3      	ldr	r3, [r4, #8]
   1d0ba:	3b01      	subs	r3, #1
   1d0bc:	60a3      	str	r3, [r4, #8]
   1d0be:	2b00      	cmp	r3, #0
   1d0c0:	daf2      	bge.n	1d0a8 <__fputwc+0x38>
   1d0c2:	69a2      	ldr	r2, [r4, #24]
   1d0c4:	4293      	cmp	r3, r2
   1d0c6:	db01      	blt.n	1d0cc <__fputwc+0x5c>
   1d0c8:	290a      	cmp	r1, #10
   1d0ca:	d1ed      	bne.n	1d0a8 <__fputwc+0x38>
   1d0cc:	0022      	movs	r2, r4
   1d0ce:	4640      	mov	r0, r8
   1d0d0:	f000 f896 	bl	1d200 <__swbuf_r>
   1d0d4:	1c43      	adds	r3, r0, #1
   1d0d6:	d1eb      	bne.n	1d0b0 <__fputwc+0x40>
   1d0d8:	b005      	add	sp, #20
   1d0da:	bc0c      	pop	{r2, r3}
   1d0dc:	4690      	mov	r8, r2
   1d0de:	4699      	mov	r9, r3
   1d0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0e2:	2240      	movs	r2, #64	; 0x40
   1d0e4:	89a3      	ldrh	r3, [r4, #12]
   1d0e6:	4313      	orrs	r3, r2
   1d0e8:	81a3      	strh	r3, [r4, #12]
   1d0ea:	e7f5      	b.n	1d0d8 <__fputwc+0x68>
   1d0ec:	464b      	mov	r3, r9
   1d0ee:	3b01      	subs	r3, #1
   1d0f0:	2bfe      	cmp	r3, #254	; 0xfe
   1d0f2:	d8c9      	bhi.n	1d088 <__fputwc+0x18>
   1d0f4:	466a      	mov	r2, sp
   1d0f6:	464b      	mov	r3, r9
   1d0f8:	71d3      	strb	r3, [r2, #7]
   1d0fa:	79d1      	ldrb	r1, [r2, #7]
   1d0fc:	af03      	add	r7, sp, #12
   1d0fe:	7039      	strb	r1, [r7, #0]
   1d100:	2601      	movs	r6, #1
   1d102:	e7cf      	b.n	1d0a4 <__fputwc+0x34>
   1d104:	4648      	mov	r0, r9
   1d106:	e7e7      	b.n	1d0d8 <__fputwc+0x68>

0001d108 <_fputwc_r>:
   1d108:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1d10a:	b570      	push	{r4, r5, r6, lr}
   1d10c:	0005      	movs	r5, r0
   1d10e:	000e      	movs	r6, r1
   1d110:	0014      	movs	r4, r2
   1d112:	07db      	lsls	r3, r3, #31
   1d114:	d41e      	bmi.n	1d154 <_fputwc_r+0x4c>
   1d116:	230c      	movs	r3, #12
   1d118:	5ed2      	ldrsh	r2, [r2, r3]
   1d11a:	b291      	uxth	r1, r2
   1d11c:	058b      	lsls	r3, r1, #22
   1d11e:	d516      	bpl.n	1d14e <_fputwc_r+0x46>
   1d120:	2380      	movs	r3, #128	; 0x80
   1d122:	019b      	lsls	r3, r3, #6
   1d124:	4219      	tst	r1, r3
   1d126:	d104      	bne.n	1d132 <_fputwc_r+0x2a>
   1d128:	431a      	orrs	r2, r3
   1d12a:	81a2      	strh	r2, [r4, #12]
   1d12c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d12e:	4313      	orrs	r3, r2
   1d130:	6663      	str	r3, [r4, #100]	; 0x64
   1d132:	0028      	movs	r0, r5
   1d134:	0022      	movs	r2, r4
   1d136:	0031      	movs	r1, r6
   1d138:	f7ff ff9a 	bl	1d070 <__fputwc>
   1d13c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d13e:	0005      	movs	r5, r0
   1d140:	07db      	lsls	r3, r3, #31
   1d142:	d402      	bmi.n	1d14a <_fputwc_r+0x42>
   1d144:	89a3      	ldrh	r3, [r4, #12]
   1d146:	059b      	lsls	r3, r3, #22
   1d148:	d508      	bpl.n	1d15c <_fputwc_r+0x54>
   1d14a:	0028      	movs	r0, r5
   1d14c:	bd70      	pop	{r4, r5, r6, pc}
   1d14e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d150:	f7ff f800 	bl	1c154 <__retarget_lock_acquire_recursive>
   1d154:	230c      	movs	r3, #12
   1d156:	5ee2      	ldrsh	r2, [r4, r3]
   1d158:	b291      	uxth	r1, r2
   1d15a:	e7e1      	b.n	1d120 <_fputwc_r+0x18>
   1d15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d15e:	f7fe fffb 	bl	1c158 <__retarget_lock_release_recursive>
   1d162:	e7f2      	b.n	1d14a <_fputwc_r+0x42>

0001d164 <_fstat_r>:
   1d164:	2300      	movs	r3, #0
   1d166:	b570      	push	{r4, r5, r6, lr}
   1d168:	4c07      	ldr	r4, [pc, #28]	; (1d188 <_fstat_r+0x24>)
   1d16a:	0005      	movs	r5, r0
   1d16c:	0008      	movs	r0, r1
   1d16e:	0011      	movs	r1, r2
   1d170:	6023      	str	r3, [r4, #0]
   1d172:	f7e8 fe1a 	bl	5daa <_fstat>
   1d176:	1c43      	adds	r3, r0, #1
   1d178:	d000      	beq.n	1d17c <_fstat_r+0x18>
   1d17a:	bd70      	pop	{r4, r5, r6, pc}
   1d17c:	6823      	ldr	r3, [r4, #0]
   1d17e:	2b00      	cmp	r3, #0
   1d180:	d0fb      	beq.n	1d17a <_fstat_r+0x16>
   1d182:	602b      	str	r3, [r5, #0]
   1d184:	e7f9      	b.n	1d17a <_fstat_r+0x16>
   1d186:	46c0      	nop			; (mov r8, r8)
   1d188:	20003070 	.word	0x20003070

0001d18c <_isatty_r>:
   1d18c:	2300      	movs	r3, #0
   1d18e:	b570      	push	{r4, r5, r6, lr}
   1d190:	4c06      	ldr	r4, [pc, #24]	; (1d1ac <_isatty_r+0x20>)
   1d192:	0005      	movs	r5, r0
   1d194:	0008      	movs	r0, r1
   1d196:	6023      	str	r3, [r4, #0]
   1d198:	f7e8 fe0c 	bl	5db4 <_isatty>
   1d19c:	1c43      	adds	r3, r0, #1
   1d19e:	d000      	beq.n	1d1a2 <_isatty_r+0x16>
   1d1a0:	bd70      	pop	{r4, r5, r6, pc}
   1d1a2:	6823      	ldr	r3, [r4, #0]
   1d1a4:	2b00      	cmp	r3, #0
   1d1a6:	d0fb      	beq.n	1d1a0 <_isatty_r+0x14>
   1d1a8:	602b      	str	r3, [r5, #0]
   1d1aa:	e7f9      	b.n	1d1a0 <_isatty_r+0x14>
   1d1ac:	20003070 	.word	0x20003070

0001d1b0 <_lseek_r>:
   1d1b0:	b570      	push	{r4, r5, r6, lr}
   1d1b2:	0005      	movs	r5, r0
   1d1b4:	0008      	movs	r0, r1
   1d1b6:	0011      	movs	r1, r2
   1d1b8:	2200      	movs	r2, #0
   1d1ba:	4c06      	ldr	r4, [pc, #24]	; (1d1d4 <_lseek_r+0x24>)
   1d1bc:	6022      	str	r2, [r4, #0]
   1d1be:	001a      	movs	r2, r3
   1d1c0:	f7e8 fdfa 	bl	5db8 <_lseek>
   1d1c4:	1c43      	adds	r3, r0, #1
   1d1c6:	d000      	beq.n	1d1ca <_lseek_r+0x1a>
   1d1c8:	bd70      	pop	{r4, r5, r6, pc}
   1d1ca:	6823      	ldr	r3, [r4, #0]
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	d0fb      	beq.n	1d1c8 <_lseek_r+0x18>
   1d1d0:	602b      	str	r3, [r5, #0]
   1d1d2:	e7f9      	b.n	1d1c8 <_lseek_r+0x18>
   1d1d4:	20003070 	.word	0x20003070

0001d1d8 <_read_r>:
   1d1d8:	b570      	push	{r4, r5, r6, lr}
   1d1da:	0005      	movs	r5, r0
   1d1dc:	0008      	movs	r0, r1
   1d1de:	0011      	movs	r1, r2
   1d1e0:	2200      	movs	r2, #0
   1d1e2:	4c06      	ldr	r4, [pc, #24]	; (1d1fc <_read_r+0x24>)
   1d1e4:	6022      	str	r2, [r4, #0]
   1d1e6:	001a      	movs	r2, r3
   1d1e8:	f7e8 fd80 	bl	5cec <_read>
   1d1ec:	1c43      	adds	r3, r0, #1
   1d1ee:	d000      	beq.n	1d1f2 <_read_r+0x1a>
   1d1f0:	bd70      	pop	{r4, r5, r6, pc}
   1d1f2:	6823      	ldr	r3, [r4, #0]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d0fb      	beq.n	1d1f0 <_read_r+0x18>
   1d1f8:	602b      	str	r3, [r5, #0]
   1d1fa:	e7f9      	b.n	1d1f0 <_read_r+0x18>
   1d1fc:	20003070 	.word	0x20003070

0001d200 <__swbuf_r>:
   1d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d202:	0006      	movs	r6, r0
   1d204:	000d      	movs	r5, r1
   1d206:	0014      	movs	r4, r2
   1d208:	2800      	cmp	r0, #0
   1d20a:	d002      	beq.n	1d212 <__swbuf_r+0x12>
   1d20c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d04e      	beq.n	1d2b0 <__swbuf_r+0xb0>
   1d212:	69a3      	ldr	r3, [r4, #24]
   1d214:	60a3      	str	r3, [r4, #8]
   1d216:	230c      	movs	r3, #12
   1d218:	5ee0      	ldrsh	r0, [r4, r3]
   1d21a:	b281      	uxth	r1, r0
   1d21c:	070b      	lsls	r3, r1, #28
   1d21e:	d53c      	bpl.n	1d29a <__swbuf_r+0x9a>
   1d220:	6923      	ldr	r3, [r4, #16]
   1d222:	2b00      	cmp	r3, #0
   1d224:	d039      	beq.n	1d29a <__swbuf_r+0x9a>
   1d226:	22ff      	movs	r2, #255	; 0xff
   1d228:	b2ef      	uxtb	r7, r5
   1d22a:	4015      	ands	r5, r2
   1d22c:	2280      	movs	r2, #128	; 0x80
   1d22e:	0192      	lsls	r2, r2, #6
   1d230:	4211      	tst	r1, r2
   1d232:	d015      	beq.n	1d260 <__swbuf_r+0x60>
   1d234:	6822      	ldr	r2, [r4, #0]
   1d236:	6961      	ldr	r1, [r4, #20]
   1d238:	1ad3      	subs	r3, r2, r3
   1d23a:	428b      	cmp	r3, r1
   1d23c:	da1b      	bge.n	1d276 <__swbuf_r+0x76>
   1d23e:	3301      	adds	r3, #1
   1d240:	68a1      	ldr	r1, [r4, #8]
   1d242:	3901      	subs	r1, #1
   1d244:	60a1      	str	r1, [r4, #8]
   1d246:	1c51      	adds	r1, r2, #1
   1d248:	6021      	str	r1, [r4, #0]
   1d24a:	7017      	strb	r7, [r2, #0]
   1d24c:	6962      	ldr	r2, [r4, #20]
   1d24e:	429a      	cmp	r2, r3
   1d250:	d01a      	beq.n	1d288 <__swbuf_r+0x88>
   1d252:	89a3      	ldrh	r3, [r4, #12]
   1d254:	07db      	lsls	r3, r3, #31
   1d256:	d501      	bpl.n	1d25c <__swbuf_r+0x5c>
   1d258:	2d0a      	cmp	r5, #10
   1d25a:	d015      	beq.n	1d288 <__swbuf_r+0x88>
   1d25c:	0028      	movs	r0, r5
   1d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d260:	4302      	orrs	r2, r0
   1d262:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1d264:	81a2      	strh	r2, [r4, #12]
   1d266:	4a14      	ldr	r2, [pc, #80]	; (1d2b8 <__swbuf_r+0xb8>)
   1d268:	400a      	ands	r2, r1
   1d26a:	6662      	str	r2, [r4, #100]	; 0x64
   1d26c:	6961      	ldr	r1, [r4, #20]
   1d26e:	6822      	ldr	r2, [r4, #0]
   1d270:	1ad3      	subs	r3, r2, r3
   1d272:	428b      	cmp	r3, r1
   1d274:	dbe3      	blt.n	1d23e <__swbuf_r+0x3e>
   1d276:	0021      	movs	r1, r4
   1d278:	0030      	movs	r0, r6
   1d27a:	f7fe fbcf 	bl	1ba1c <_fflush_r>
   1d27e:	2800      	cmp	r0, #0
   1d280:	d108      	bne.n	1d294 <__swbuf_r+0x94>
   1d282:	6822      	ldr	r2, [r4, #0]
   1d284:	2301      	movs	r3, #1
   1d286:	e7db      	b.n	1d240 <__swbuf_r+0x40>
   1d288:	0021      	movs	r1, r4
   1d28a:	0030      	movs	r0, r6
   1d28c:	f7fe fbc6 	bl	1ba1c <_fflush_r>
   1d290:	2800      	cmp	r0, #0
   1d292:	d0e3      	beq.n	1d25c <__swbuf_r+0x5c>
   1d294:	2501      	movs	r5, #1
   1d296:	426d      	negs	r5, r5
   1d298:	e7e0      	b.n	1d25c <__swbuf_r+0x5c>
   1d29a:	0021      	movs	r1, r4
   1d29c:	0030      	movs	r0, r6
   1d29e:	f7fd fa29 	bl	1a6f4 <__swsetup_r>
   1d2a2:	2800      	cmp	r0, #0
   1d2a4:	d1f6      	bne.n	1d294 <__swbuf_r+0x94>
   1d2a6:	230c      	movs	r3, #12
   1d2a8:	5ee0      	ldrsh	r0, [r4, r3]
   1d2aa:	6923      	ldr	r3, [r4, #16]
   1d2ac:	b281      	uxth	r1, r0
   1d2ae:	e7ba      	b.n	1d226 <__swbuf_r+0x26>
   1d2b0:	f7fe fc0e 	bl	1bad0 <__sinit>
   1d2b4:	e7ad      	b.n	1d212 <__swbuf_r+0x12>
   1d2b6:	46c0      	nop			; (mov r8, r8)
   1d2b8:	ffffdfff 	.word	0xffffdfff

0001d2bc <_wcrtomb_r>:
   1d2bc:	b570      	push	{r4, r5, r6, lr}
   1d2be:	001d      	movs	r5, r3
   1d2c0:	4b11      	ldr	r3, [pc, #68]	; (1d308 <_wcrtomb_r+0x4c>)
   1d2c2:	b084      	sub	sp, #16
   1d2c4:	681b      	ldr	r3, [r3, #0]
   1d2c6:	0004      	movs	r4, r0
   1d2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1d2ca:	2900      	cmp	r1, #0
   1d2cc:	d00e      	beq.n	1d2ec <_wcrtomb_r+0x30>
   1d2ce:	2b00      	cmp	r3, #0
   1d2d0:	d016      	beq.n	1d300 <_wcrtomb_r+0x44>
   1d2d2:	20e0      	movs	r0, #224	; 0xe0
   1d2d4:	581e      	ldr	r6, [r3, r0]
   1d2d6:	002b      	movs	r3, r5
   1d2d8:	0020      	movs	r0, r4
   1d2da:	47b0      	blx	r6
   1d2dc:	1c43      	adds	r3, r0, #1
   1d2de:	d103      	bne.n	1d2e8 <_wcrtomb_r+0x2c>
   1d2e0:	2300      	movs	r3, #0
   1d2e2:	602b      	str	r3, [r5, #0]
   1d2e4:	338a      	adds	r3, #138	; 0x8a
   1d2e6:	6023      	str	r3, [r4, #0]
   1d2e8:	b004      	add	sp, #16
   1d2ea:	bd70      	pop	{r4, r5, r6, pc}
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	d009      	beq.n	1d304 <_wcrtomb_r+0x48>
   1d2f0:	22e0      	movs	r2, #224	; 0xe0
   1d2f2:	a901      	add	r1, sp, #4
   1d2f4:	589e      	ldr	r6, [r3, r2]
   1d2f6:	0020      	movs	r0, r4
   1d2f8:	002b      	movs	r3, r5
   1d2fa:	2200      	movs	r2, #0
   1d2fc:	47b0      	blx	r6
   1d2fe:	e7ed      	b.n	1d2dc <_wcrtomb_r+0x20>
   1d300:	4b02      	ldr	r3, [pc, #8]	; (1d30c <_wcrtomb_r+0x50>)
   1d302:	e7e6      	b.n	1d2d2 <_wcrtomb_r+0x16>
   1d304:	4b01      	ldr	r3, [pc, #4]	; (1d30c <_wcrtomb_r+0x50>)
   1d306:	e7f3      	b.n	1d2f0 <_wcrtomb_r+0x34>
   1d308:	2000001c 	.word	0x2000001c
   1d30c:	20000448 	.word	0x20000448

0001d310 <__aeabi_dcmpun>:
   1d310:	b570      	push	{r4, r5, r6, lr}
   1d312:	4e0e      	ldr	r6, [pc, #56]	; (1d34c <__aeabi_dcmpun+0x3c>)
   1d314:	030d      	lsls	r5, r1, #12
   1d316:	031c      	lsls	r4, r3, #12
   1d318:	0049      	lsls	r1, r1, #1
   1d31a:	005b      	lsls	r3, r3, #1
   1d31c:	0b2d      	lsrs	r5, r5, #12
   1d31e:	0d49      	lsrs	r1, r1, #21
   1d320:	0b24      	lsrs	r4, r4, #12
   1d322:	0d5b      	lsrs	r3, r3, #21
   1d324:	42b1      	cmp	r1, r6
   1d326:	d004      	beq.n	1d332 <__aeabi_dcmpun+0x22>
   1d328:	4908      	ldr	r1, [pc, #32]	; (1d34c <__aeabi_dcmpun+0x3c>)
   1d32a:	2000      	movs	r0, #0
   1d32c:	428b      	cmp	r3, r1
   1d32e:	d008      	beq.n	1d342 <__aeabi_dcmpun+0x32>
   1d330:	bd70      	pop	{r4, r5, r6, pc}
   1d332:	4305      	orrs	r5, r0
   1d334:	2001      	movs	r0, #1
   1d336:	2d00      	cmp	r5, #0
   1d338:	d1fa      	bne.n	1d330 <__aeabi_dcmpun+0x20>
   1d33a:	4904      	ldr	r1, [pc, #16]	; (1d34c <__aeabi_dcmpun+0x3c>)
   1d33c:	2000      	movs	r0, #0
   1d33e:	428b      	cmp	r3, r1
   1d340:	d1f6      	bne.n	1d330 <__aeabi_dcmpun+0x20>
   1d342:	4314      	orrs	r4, r2
   1d344:	0020      	movs	r0, r4
   1d346:	1e44      	subs	r4, r0, #1
   1d348:	41a0      	sbcs	r0, r4
   1d34a:	e7f1      	b.n	1d330 <__aeabi_dcmpun+0x20>
   1d34c:	000007ff 	.word	0x000007ff
   1d350:	52455355 	.word	0x52455355
   1d354:	414f4220 	.word	0x414f4220
   1d358:	00004452 	.word	0x00004452
   1d35c:	5f534c4d 	.word	0x5f534c4d
   1d360:	5f4b4453 	.word	0x5f4b4453
   1d364:	5f305f31 	.word	0x5f305f31
   1d368:	00355f50 	.word	0x00355f50
   1d36c:	2074634f 	.word	0x2074634f
   1d370:	32203033 	.word	0x32203033
   1d374:	00303230 	.word	0x00303230
   1d378:	303a3731 	.word	0x303a3731
   1d37c:	32333a34 	.word	0x32333a34
   1d380:	00000000 	.word	0x00000000
   1d384:	61766e69 	.word	0x61766e69
   1d388:	5f64696c 	.word	0x5f64696c
   1d38c:	61726170 	.word	0x61726170
   1d390:	006d      	.short	0x006d

0001d392 <gParserStartCmdSize>:
   1d392:	0002                                        ..

0001d394 <maParserBaseCmd>:
   1d394:	d9e4 0001 d3b4 0001 0000 0000 0009 0000     ................
   1d3a4:	d9e8 0001 d954 0001 0000 0000 0005 0000     ....T...........

0001d3b4 <maParserLoraCmd>:
   1d3b4:	da00 0001 0000 0000 07b5 0000 0100 0000     ................
   1d3c4:	da2c 0001 0000 0000 08b1 0000 0100 0000     ,...............
   1d3d4:	da34 0001 0000 0000 08ed 0000 0300 0000     4...............
   1d3e4:	d9ec 0001 d734 0001 0000 0000 0021 0000     ....4.......!...
   1d3f4:	da08 0001 d474 0001 0000 0000 0028 0000     ....t.......(...
   1d404:	da38 0001 0000 0000 118d 0000 0000 0000     8...............
   1d414:	da40 0001 0000 0000 11b1 0000 0000 0000     @...............
   1d424:	da48 0001 0000 0000 11c9 0000 0000 0000     H...............
   1d434:	da50 0001 0000 0000 13bd 0000 0000 0000     P...............

0001d444 <maParserLoraGetChCmd>:
   1d444:	dc3c 0001 0000 0000 0db1 0000 0100 0000     <...............
   1d454:	da94 0001 0000 0000 0fbd 0000 0100 0000     ................
   1d464:	dc44 0001 0000 0000 1099 0000 0100 0000     D...............

0001d474 <maParserLoraGetCmd>:
   1d474:	da5c 0001 0000 0000 09d5 0000 0000 0000     \...............
   1d484:	da60 0001 0000 0000 0a45 0000 0000 0000     `.......E.......
   1d494:	da64 0001 0000 0000 0ae1 0000 0000 0000     d...............
   1d4a4:	da6c 0001 0000 0000 0b79 0000 0000 0000     l.......y.......
   1d4b4:	da74 0001 0000 0000 0c01 0000 0000 0000     t...............
   1d4c4:	ddec 0001 d444 0001 0000 0000 0003 0000     ....D...........
   1d4d4:	da7c 0001 0000 0000 1159 0000 0000 0000     |.......Y.......
   1d4e4:	da84 0001 0000 0000 1241 0000 0000 0000     ........A.......
   1d4f4:	da88 0001 0000 0000 15b9 0000 0000 0000     ................
   1d504:	da94 0001 0000 0000 1675 0000 0000 0000     ........u.......
   1d514:	da9c 0001 0000 0000 1799 0000 0000 0000     ................
   1d524:	daa4 0001 0000 0000 17cd 0000 0000 0000     ................
   1d534:	daac 0001 0000 0000 1801 0000 0000 0000     ................
   1d544:	dab4 0001 0000 0000 1835 0000 0000 0000     ........5.......
   1d554:	dabc 0001 0000 0000 18a5 0000 0000 0000     ................
   1d564:	dac0 0001 0000 0000 1921 0000 0000 0000     ........!.......
   1d574:	dacc 0001 0000 0000 1955 0000 0000 0000     ........U.......
   1d584:	e07c 0001 0000 0000 1989 0000 0000 0000     |...............
   1d594:	dad8 0001 0000 0000 14d1 0000 0000 0000     ................
   1d5a4:	dae0 0001 0000 0000 1505 0000 0000 0000     ................
   1d5b4:	dae8 0001 0000 0000 1535 0000 0000 0000     ........5.......
   1d5c4:	daf0 0001 0000 0000 12f5 0000 0000 0000     ................
   1d5d4:	daf4 0001 0000 0000 1a01 0000 0000 0000     ................
   1d5e4:	dafc 0001 0000 0000 1a45 0000 0000 0000     ........E.......
   1d5f4:	db10 0001 0000 0000 1af1 0000 0100 0000     ................
   1d604:	db1c 0001 0000 0000 1b3d 0000 0100 0000     ........=.......
   1d614:	db28 0001 0000 0000 1c0d 0000 0100 0000     (...............
   1d624:	db38 0001 0000 0000 1da5 0000 0100 0000     8...............
   1d634:	db44 0001 0000 0000 1e3d 0000 0100 0000     D.......=.......
   1d644:	db4c 0001 d6f4 0001 0000 0000 0001 0000     L...............
   1d654:	db54 0001 0000 0000 1e8d 0000 0000 0000     T...............
   1d664:	db5c 0001 0000 0000 1ec1 0000 0000 0000     \...............
   1d674:	db68 0001 0000 0000 1eed 0000 0000 0000     h...............
   1d684:	db70 0001 0000 0000 1f19 0000 0000 0000     p...............
   1d694:	dbac 0001 0000 0000 1f4d 0000 0000 0000     ........M.......
   1d6a4:	db7c 0001 0000 0000 1f7d 0000 0000 0000     |.......}.......
   1d6b4:	db88 0001 0000 0000 1fb1 0000 0000 0000     ................
   1d6c4:	db98 0001 0000 0000 1fe5 0000 0000 0000     ................
   1d6d4:	dba8 0001 0000 0000 2019 0000 0000 0000     ......... ......
   1d6e4:	dbbc 0001 0000 0000 20c5 0000 0000 0000     ......... ......

0001d6f4 <maParserLoraGetSubBandCmd>:
   1d6f4:	da94 0001 0000 0000 0ead 0000 0100 0000     ................

0001d704 <maParserLoraSetChCmd>:
   1d704:	dc3c 0001 0000 0000 0d39 0000 0200 0000     <.......9.......
   1d714:	da94 0001 0000 0000 0f55 0000 0200 0000     ........U.......
   1d724:	dc44 0001 0000 0000 1009 0000 0300 0000     D...............

0001d734 <maParserLoraSetCmd>:
   1d734:	da5c 0001 0000 0000 0999 0000 0100 0000     \...............
   1d744:	da60 0001 0000 0000 0a09 0000 0100 0000     `...............
   1d754:	da64 0001 0000 0000 0a71 0000 0100 0000     d.......q.......
   1d764:	da6c 0001 0000 0000 0b21 0000 0100 0000     l.......!.......
   1d774:	da74 0001 0000 0000 0ba9 0000 0100 0000     t...............
   1d784:	dbd0 0001 0000 0000 0c31 0000 0100 0000     ........1.......
   1d794:	dbd8 0001 0000 0000 0c89 0000 0100 0000     ................
   1d7a4:	dbe0 0001 0000 0000 0ce1 0000 0100 0000     ................
   1d7b4:	da7c 0001 0000 0000 110d 0000 0100 0000     |...............
   1d7c4:	ddec 0001 d704 0001 0000 0000 0003 0000     ................
   1d7d4:	da84 0001 0000 0000 11d5 0000 0200 0000     ................
   1d7e4:	dbe8 0001 0000 0000 16b5 0000 0100 0000     ................
   1d7f4:	da9c 0001 0000 0000 1701 0000 0100 0000     ................
   1d804:	daa4 0001 0000 0000 174d 0000 0100 0000     ........M.......
   1d814:	dabc 0001 0000 0000 1869 0000 0100 0000     ........i.......
   1d824:	dac0 0001 0000 0000 18d1 0000 0100 0000     ................
   1d834:	dbec 0001 0000 0000 1565 0000 0100 0000     ........e.......
   1d844:	dad8 0001 0000 0000 146d 0000 0100 0000     ........m.......
   1d854:	dae0 0001 0000 0000 13d5 0000 0100 0000     ................
   1d864:	dae8 0001 0000 0000 1421 0000 0100 0000     ........!.......
   1d874:	daf0 0001 0000 0000 12a1 0000 0500 0000     ................
   1d884:	daf4 0001 0000 0000 19b5 0000 0100 0000     ................
   1d894:	db10 0001 0000 0000 1aa5 0000 0200 0000     ................
   1d8a4:	db28 0001 0000 0000 1b8d 0000 0200 0000     (...............
   1d8b4:	dbf4 0001 0000 0000 1c6d 0000 0200 0000     ........m.......
   1d8c4:	dc04 0001 0000 0000 1cd5 0000 0200 0000     ................
   1d8d4:	db38 0001 0000 0000 1d3d 0000 0200 0000     8.......=.......
   1d8e4:	db44 0001 0000 0000 1df5 0000 0200 0000     D...............
   1d8f4:	da88 0001 0000 0000 15ed 0000 0100 0000     ................
   1d904:	dc14 0001 0000 0000 1639 0000 0100 0000     ........9.......
   1d914:	db4c 0001 d944 0001 0000 0000 0001 0000     L...D...........
   1d924:	dbbc 0001 0000 0000 2049 0000 0100 0000     ........I ......
   1d934:	dc28 0001 0000 0000 2089 0000 0100 0000     (........ ......

0001d944 <maParserLoraSetSubBandCmd>:
   1d944:	da94 0001 0000 0000 0e01 0000 0200 0000     ................

0001d954 <maParserSysCmd>:
   1d954:	d9ec 0001 d9d4 0001 0000 0000 0001 0000     ................
   1d964:	d9f0 0001 0000 0000 225d 0000 0000 0000     ........]"......
   1d974:	da00 0001 0000 0000 2241 0000 0000 0000     ........A"......
   1d984:	da08 0001 d9a4 0001 0000 0000 0003 0000     ................
   1d994:	da0c 0001 0000 0000 2281 0000 0200 0000     ........."......

0001d9a4 <maParserSysGetCmd>:
   1d9a4:	da14 0001 0000 0000 2199 0000 0000 0000     .........!......
   1d9b4:	da18 0001 0000 0000 216d 0000 0000 0000     ........m!......
   1d9c4:	da20 0001 0000 0000 21b1 0000 0000 0000      ........!......

0001d9d4 <maParserSysSetCmd>:
   1d9d4:	da20 0001 0000 0000 21e1 0000 0100 0000      ........!......
   1d9e4:	616d 0063 7973 0073 6573 0074 6166 7463     mac.sys.set.fact
   1d9f4:	726f 5279 5345 5445 0000 0000 6572 6573     oryRESET....rese
   1da04:	0074 0000 6567 0074 6c73 6565 0070 0000     t...get.sleep...
   1da14:	6576 0072 7768 7565 0069 0000 7563 7473     ver.hweui...cust
   1da24:	6d6f 6170 6172 006d 6f6a 6e69 0000 0000     omparam.join....
   1da34:	7874 0000 6170 7375 0065 0000 6572 7573     tx..pause...resu
   1da44:	656d 0000 6173 6576 0000 0000 6f66 6372     me..save....forc
   1da54:	4565 414e 4c42 0045 7264 0000 6461 0072     eENABLE.dr..adr.
   1da64:	6564 6176 6464 0072 6564 6576 6975 0000     devaddr.deveui..
   1da74:	6f6a 6e69 7565 0069 7770 6972 7864 0000     joineui.pwridx..
   1da84:	7872 0032 6761 6467 7963 6c63 0065 0000     rx2.aggdcycle...
   1da94:	7473 7461 7375 0000 6572 7874 0000 0000     status..retx....
   1daa4:	6572 7370 0000 0000 726d 6e67 0000 0000     reps....mrgn....
   1dab4:	7767 626e 0000 0000 7261 0000 7872 6564     gwnb....ar..rxde
   1dac4:	616c 3179 0000 0000 7872 6564 616c 3279     lay1....rxdelay2
   1dad4:	0000 0000 7973 636e 0000 0000 7075 7463     ....sync....upct
   1dae4:	0072 0000 6e64 7463 0072 0000 626c 0074     r...dnctr...lbt.
   1daf4:	6465 6c63 7361 0073 6465 6c63 7361 7373     edclass.edclasss
   1db04:	7075 6f70 7472 6465 0000 0000 636d 7361     upported....mcas
   1db14:	6574 616e 6c62 0065 636d 7361 6474 636e     tenable.mcastdnc
   1db24:	7274 0000 636d 7361 6474 7665 6461 7264     tr..mcastdevaddr
   1db34:	0000 0000 636d 7361 6674 6572 0071 0000     ....mcastfreq...
   1db44:	636d 7361 6474 0072 7573 6262 6e61 0064     mcastdr.subband.
   1db54:	6b70 7274 7373 0069 7369 7066 6e65 6964     pktrssi.isfpendi
   1db64:	676e 0000 7369 6c64 6361 006b 616c 7473     ng..isdlack.last
   1db74:	6863 6469 0000 0000 6e63 7266 7465 7972     chid....cnfretry
   1db84:	6e63 0074 6e75 6e63 7266 7465 7972 6e63     cnt.uncnfretrycn
   1db94:	0074 0000 786e 5074 7961 6f6c 6461 6953     t...nxtPayloadSi
   1dba4:	657a 0000 6f6a 6e69 7564 7974 7963 6c63     ze..joindutycycl
   1dbb4:	7465 6d69 0065 0000 6f6a 6e69 6162 6b63     etime...joinback
   1dbc4:	666f 6566 616e 6c62 0065 0000 776e 736b     offenable...nwks
   1dbd4:	656b 0079 7061 7370 656b 0079 7061 6b70     key.appskey.appk
   1dbe4:	7965 0000 6162 0074 696c 6b6e 6863 006b     ey..bat.linkchk.
   1dbf4:	636d 7361 6e74 6b77 6b73 7965 0000 0000     mcastnwkskey....
   1dc04:	636d 7361 6174 7070 6b73 7965 0000 0000     mcastappskey....
   1dc14:	7263 7079 6f74 6564 6576 616e 6c62 6465     cryptodevenabled
   1dc24:	0000 0000 616d 4678 6e63 5074 7364 7055     ....maxFcntPdsUp
   1dc34:	7464 6156 006c 0000 7266 7165 0000 0000     dtVal...freq....
   1dc44:	7264 6172 676e 0065 048a 0000 04fc 0000     drrange.........
   1dc54:	0506 0000 0510 0000 051a 0000 0524 0000     ............$...
   1dc64:	054c 0000 0556 0000 056a 0000 0574 0000     L...V...j...t...
   1dc74:	057e 0000 0588 0000 0592 0000 059c 0000     ~...............
   1dc84:	0476 0000 052e 0000 0538 0000 0542 0000     v.......8...B...
   1dc94:	0560 0000 0476 0000 0476 0000 0476 0000     `...v...v...v...
   1dca4:	05a6 0000 05ca 0000 05d4 0000 05f2 0000     ................
   1dcb4:	05fc 0000 0606 0000 0610 0000 061a 0000     ................
   1dcc4:	0624 0000 05c0 0000 062e 0000 0638 0000     $...........8...
   1dcd4:	0642 0000 064c 0000 0656 0000 067e 0000     B...L...V...~...
   1dce4:	0688 0000 069c 0000 06a6 0000 06b0 0000     ................
   1dcf4:	06ba 0000 06c4 0000 06ce 0000 0476 0000     ............v...
   1dd04:	0660 0000 066a 0000 0674 0000 0692 0000     `...j...t.......
   1dd14:	05e8 0000 05de 0000 0476 0000 06d8 0000     ........v.......
   1dd24:	616d 5f63 7872 0020 6361 5f6b 6572 6563     mac_rx .ack_rece
   1dd34:	7669 6465 0000 0000 6f6e 5f74 6f6a 6e69     ived....not_join
   1dd44:	6465 0000 656b 7379 6e5f 746f 695f 696e     ed..keys_not_ini
   1dd54:	0074 0000 6973 656c 746e 0000 7266 6d61     t...silent..fram
   1dd64:	635f 756f 746e 7265 655f 7272 725f 6a65     _counter_err_rej
   1dd74:	696f 5f6e 656e 6465 6465 0000 6e69 6176     oin_needed..inva
   1dd84:	696c 5f64 6366 746e 0072 0000 696d 5f63     lid_fcntr...mic_
   1dd94:	7265 6f72 0072 0000 6e69 6176 696c 5f64     error...invalid_
   1dda4:	746d 7079 0065 0000 6e69 6176 696c 5f64     mtype...invalid_
   1ddb4:	7562 6666 7265 6c5f 6e65 7467 0068 0000     buffer_length...
   1ddc4:	616d 5f63 6170 7375 6465 0000 636d 7361     mac_paused..mcas
   1ddd4:	5f74 6468 5f72 6e69 6176 696c 0064 0000     t_hdr_invalid...
   1dde4:	6f6e 665f 6572 5f65 6863 0000 7562 7973     no_free_ch..busy
   1ddf4:	0000 0000 6f6e 615f 6b63 0020 6f6a 6e69     ....no_ack .join
   1de04:	695f 5f6e 7270 676f 6572 7373 0000 0000     _in_progress....
   1de14:	6572 6f73 7275 6563 755f 616e 6176 6c69     resource_unavail
   1de24:	6261 656c 0000 0000 6e69 6176 696c 5f64     able....invalid_
   1de34:	6572 7571 7365 0074 6e69 6176 696c 5f64     request.invalid_
   1de44:	6170 6b63 7465 0000 616d 5f63 7874 6f5f     packet..mac_tx_o
   1de54:	006b 0000 6172 6964 5f6f 7874 6f5f 006b     k...radio_tx_ok.
   1de64:	6172 6964 5f6f 6f6e 645f 7461 0061 0000     radio_no_data...
   1de74:	6172 6964 5f6f 7874 745f 6d69 6f65 7475     radio_tx_timeout
   1de84:	0000 0000 7874 745f 6d69 6f65 7475 0000     ....tx_timeout..
   1de94:	6172 6964 5f6f 6164 6174 735f 7a69 0065     radio_data_size.
   1dea4:	6172 6964 5f6f 6e69 6176 696c 5f64 6572     radio_invalid_re
   1deb4:	0071 0000 6172 6964 5f6f 7562 7973 0000     q...radio_busy..
   1dec4:	6172 6964 5f6f 756f 5f74 666f 725f 6e61     radio_out_of_ran
   1ded4:	6567 0000 6172 6964 5f6f 6e75 7573 5f70     ge..radio_unsup_
   1dee4:	7461 7274 0000 0000 6172 6964 5f6f 6863     attr....radio_ch
   1def4:	6e61 656e 5f6c 7562 7973 0000 6261 0070     annel_busy..abp.
   1df04:	746f 6161 0000 0000 6142 646e 2520 2073     otaa....Band %s 
   1df14:	6f6e 2074 7573 7070 726f 6574 0d64 000a     not supported...
   1df24:	6b6f 0000 6e63 0066 6e75 6e63 0066 0000     ok..cnf.uncnf...

0001df34 <gapParseIsmBand>:
   1df34:	e084 0001 e088 0001 e08c 0001 e094 0001     ................
   1df44:	e09c 0001 e0a4 0001 e0ac 0001 e0b4 0001     ................
   1df54:	e0bc 0001 e0c4 0001 e0cc 0001 e0d4 0001     ................
   1df64:	e0dc 0001 e0e4 0001 e0ec 0001 e0f4 0001     ................

0001df74 <gapParseJoinStatus>:
   1df74:	e104 0001 e10c 0001 dde4 0001 de88 0001     ................
   1df84:	dd90 0001                                   ....

0001df88 <gapParseOnOff>:
   1df88:	e0fc 0001 e100 0001                         ........

0001df90 <gapParserBool>:
   1df90:	e010 0001 e018 0001                         ........

0001df98 <gapParserEdClass>:
   1df98:	e020 0001 e028 0001 e030 0001 e038 0001      ...(...0...8...

0001dfa8 <gapParserLorawanStatus>:
   1dfa8:	e048 0001 de64 0001 de94 0001 dea4 0001     H...d...........
   1dfb8:	deb8 0001 dec4 0001 ded8 0001 deec 0001     ................
   1dfc8:	df24 0001 dd3c 0001 d384 0001 dd48 0001     $...<.......H...
   1dfd8:	dd58 0001 dd60 0001 e054 0001 ddc4 0001     X...`...T.......
   1dfe8:	dde4 0001 ddf0 0001 e068 0001 de00 0001     ........h.......
   1dff8:	de14 0001 de2c 0001 e070 0001 de88 0001     ....,...p.......
   1e008:	de74 0001 de3c 0001 6166 736c 0065 0000     t...<...false...
   1e018:	7274 6575 0000 0000 4c43 5341 2053 0041     true....CLASS A.
   1e028:	4c43 5341 2053 0042 4c43 5341 2053 0043     CLASS B.CLASS C.
   1e038:	4c43 5341 2053 4e49 4156 494c 0044 0000     CLASS INVALID...
   1e048:	6172 6964 5f6f 6b6f 0000 0000 6e69 6176     radio_ok....inva
   1e058:	696c 5f64 6164 6174 6c5f 6e65 0000 0000     lid_data_len....
   1e068:	6f6e 615f 6b63 0000 6e75 7573 7070 726f     no_ack..unsuppor
   1e078:	6574 5f64 6162 646e 0000 0000 3638 0038     ted_band....868.
   1e088:	3334 0033 616e 3139 0035 0000 7561 3139     433.na915...au91
   1e098:	0035 0000 726b 3239 0030 0000 706a 396e     5...kr920...jpn9
   1e0a8:	3332 0000 7262 396e 3332 0000 6d63 3962     23..brn923..cmb9
   1e0b8:	3332 0000 6e69 3973 3332 0000 616c 736f     23..ins923..laos
   1e0c8:	3239 0033 7a6e 3239 0033 0000 7073 3239     923.nz923...sp92
   1e0d8:	0033 0000 7774 396e 3332 0000 6874 6961     3...twn923..thai
   1e0e8:	3239 0033 7476 396d 3332 0000 6e69 3864     923.vtm923..ind8
   1e0f8:	3536 0000 666f 0066 6e6f 0000 6564 696e     65..off.on..deni
   1e108:	6465 0000 6361 6563 7470 6465 0000 0000     ed..accepted....
   1e118:	0a0d 6c25 0d64 000a 7473 6e61 6264 0079     ..%ld...standby.
   1e128:	6162 6b63 7075 0000 7265 0072 450a 6978     backup..err..Exi
   1e138:	6974 676e 5320 656c 7065 0d0a 0000 0000     ting Sleep......

0001e148 <gapParserSysStatus>:
   1e148:	df24 0001 d384 0001 e130 0001 730a 656c     $.......0....sle
   1e158:	7065 6f5f 206b 6c25 2064 736d 0d0a 0000     ep_ok %ld ms....
   1e168:	0a0d 0000 3060 0000 3060 0000 302e 0000     ....`0..`0...0..
   1e178:	3060 0000 302e 0000 3014 0000 3014 0000     `0...0...0...0..
   1e188:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e198:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e1a8:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e1b8:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e1c8:	3060 0000 3060 0000 3060 0000 302e 0000     `0..`0..`0...0..
   1e1d8:	3060 0000 302e 0000 3060 0000 3060 0000     `0...0..`0..`0..
   1e1e8:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e1f8:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e208:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e218:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e228:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e238:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e248:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e258:	3060 0000 3060 0000 3060 0000 3060 0000     `0..`0..`0..`0..
   1e268:	3060 0000 302e 0000 302e 0000 3036 0000     `0...0...0..60..
   1e278:	3036 0000 3036 0000 3036 0000 0000 4200     60..60..60.....B
   1e288:	0400 4200 0800 4200 0c00 4200 1000 4200     ...B...B...B...B
   1e298:	0400 4300 4ee2 0000 4ede 0000 4ede 0000     ...C.N...N...N..
   1e2a8:	4f44 0000 4f44 0000 4ef8 0000 4ee8 0000     DO..DO...N...N..
   1e2b8:	4efe 0000 4f32 0000 50e8 0000 50c8 0000     .N..2O...P...P..
   1e2c8:	50c8 0000 5162 0000 50da 0000 50f6 0000     .P..bQ...P...P..
   1e2d8:	50cc 0000 5104 0000 5146 0000 51a0 0000     .P...Q..FQ...Q..
   1e2e8:	51e2 0000 51e2 0000 51e2 0000 5192 0000     .Q...Q...Q...Q..
   1e2f8:	51ae 0000 5184 0000 51bc 0000 51d2 0000     .Q...Q...Q...Q..
   1e308:	598a 0000 5a80 0000 5a8a 0000 5a94 0000     .Y...Z...Z...Z..
   1e318:	5a9e 0000 5ad0 0000 5ada 0000 5ae4 0000     .Z...Z...Z...Z..
   1e328:	5aee 0000 5af8 0000 2000 4200 2400 4200     .Z...Z... .B.$.B
   1e338:	2800 4200 2c00 4200 0800 4300 0002 0000     .(.B.,.B...C....
   1e348:	0100 0000 0002 0000 0200 0000 0002 0000     ................
   1e358:	0400 0000 0002 0000 0800 0000 0003 0000     ................
   1e368:	0004 0000                                   ....

0001e36c <AdvChannels923>:
   1e36c:	ea00 3706 ea00 3706 0100 ff10 f740 3709     ...7...7....@..7
   1e37c:	f740 3709 0100 ff10                         @..7....

0001e384 <DefaultChannels923>:
   1e384:	5001 5001                                   .P.P

0001e388 <DefaultDrParamsAS>:
   1e388:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1e398:	000e 0b33 0ac6 0107 001a 3573 09c2 0107     ..3.......s5....
   1e3a8:	0031 7df2 08be 0107 0053 f2f2 07bc 0107     1..}....S.......
   1e3b8:	003c f2f2 07f1 0108 0064 f2f2 00ce 000a     <.......d.......

0001e3c8 <SubBandDutyCycle923>:
   1e3c8:	0064 0000                                   d...

0001e3cc <SubBandParams923>:
   1e3cc:	6d80 35c3 2800 3750 0000 0000               .m.5.(P7....

0001e3d8 <pds_reg_as_item_list>:
   1e3d8:	2394 2000 0004 0020 23b4 2000 0104 25c0     .#. .. ..#. ...%
   1e3e8:	233f 2000 0204 ea01                         ?#. ....

0001e3f0 <DefaultChannels915AU>:
   1e3f0:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e400:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e410:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e420:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e430:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e440:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e450:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e460:	5001 5001 5001 5001 5001 5001 5001 5001     .P.P.P.P.P.P.P.P
   1e470:	6601 6601 6601 6601 6601 6601 6601 6601     .f.f.f.f.f.f.f.f

0001e480 <DefaultDrParamsAU>:
   1e480:	0008 0033 0cdf 0107 000b 0033 0bce 0107     ..3.......3.....
   1e490:	0012 0033 0ac6 0107 001c 0073 09c2 0107     ..3.......s.....
   1e4a0:	003d 00f2 08be 0107 0053 00f2 07bc 0107     =.......S.......
   1e4b0:	003d 00f2 08be 0109 0000 0000 0000 010a     =...............
   1e4c0:	0007 0035 0c0c 0109 0005 0081 0b06 0109     ..5.............
   1e4d0:	0007 00f2 0a01 0109 000c 00f2 09fe 0109     ................
   1e4e0:	0016 00f2 08fc 0109 002a 00f2 07fc 0109     ........*.......

0001e4f0 <pds_reg_au_item_list>:
   1e4f0:	23c4 2000 0008 0090 2468 2000 0108 9501     .#. ....h$. ....

0001e500 <AdvChannels433>:
   1e500:	b9d8 19d1 b9d8 19d1 0101 ff0c c718 19d4     ................
   1e510:	c718 19d4 0101 ff0c d458 19d7 d458 19d7     ........X...X...
   1e520:	0101 ff0c                                   ....

0001e524 <AdvChannels868>:
   1e524:	27a0 33be 27a0 33be 0101 ff10 34e0 33c1     .'.3.'.3.....4.3
   1e534:	34e0 33c1 0101 ff10 4220 33c4 4220 33c4     .4.3.... B.3 B.3
   1e544:	0101 ff10                                   ....

0001e548 <DefaultChannels433>:
   1e548:	5001 5001 5001 0000                         .P.P.P..

0001e550 <DefaultChannels868>:
   1e550:	5001 5001 5001 0000                         .P.P.P..

0001e558 <DefaultDrparamsEU>:
   1e558:	0008 0033 0cdf 0107 000b 0033 0bd3 0107     ..3.......3.....
   1e568:	0017 0033 0acc 0107 001c 0073 09c2 0107     ..3.......s.....
   1e578:	003d 00f2 08be 0107 0053 00f2 07bc 0107     =.......S.......
   1e588:	003c 00f2 07f1 0108 0064 00f2 00ce 000a     <.......d.......

0001e598 <SubBandDutyCycle868>:
   1e598:	03e8 0064 0064 03e8 000a 0064               ..d.d.....d.

0001e5a4 <SubBandParams433>:
   1e5a4:	0e40 19cf 8580 19ea 0000 0000               @...........

0001e5b0 <SubBandParams868>:
   1e5b0:	55c0 3370 da40 338e 0000 0000 da41 338e     .Up3@..3....A..3
   1e5c0:	a100 33bc 0000 0000 a101 33bc c8c0 33c5     ...3.......3...3
   1e5d0:	0000 0000 4f60 33c7 f080 33ce 0000 0000     ....`O.3...3....
   1e5e0:	fdc0 33d1 ce50 33d5 0000 0000 91a0 33d6     ...3P..3.......3
   1e5f0:	2580 33db 0000 0000                         .%.3....

0001e5f8 <pds_reg_eu868_fid1_item_list>:
   1e5f8:	2394 2000 0003 0020                         .#. .. .

0001e600 <pds_reg_eu868_fid2_item_list>:
   1e600:	23b4 2000 000b 00c0                         .#. ....

0001e608 <AdvChannels865>:
   1e608:	ce64 338f ce64 338f 0100 ff1e fe84 3394     d..3d..3.......3
   1e618:	fe84 3394 0100 ff1e e1e8 339d e1e8 339d     ...3.......3...3
   1e628:	0100 ff1e                                   ....

0001e62c <DefaultChannels865>:
   1e62c:	5001 5001 5001 0000                         .P.P.P..

0001e634 <DefaultDrParamsIN>:
   1e634:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1e644:	000e 0033 0ac6 0107 001a 0073 09c2 0107     ..3.......s.....
   1e654:	0031 00f2 08be 0107 0053 00f2 07bc 0107     1.......S.......
   1e664:	0000 0000 0000 010a 0008 00f2 00fe 000a     ................

0001e674 <pds_reg_ind_item_list>:
   1e674:	2394 2000 0006 0020 23b4 2000 0106 25c0     .#. .. ..#. ...%

0001e684 <AdvChannels923JP>:
   1e684:	ea00 3706 ea00 3706 0101 ff10 f740 3709     ...7...7....@..7
   1e694:	f740 3709 0101 ff10                         @..7....

0001e69c <DefaultChannels923JP>:
   1e69c:	5001 5001                                   .P.P

0001e6a0 <DefaultDrParamsJP>:
   1e6a0:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1e6b0:	000e 0b33 0ac6 0107 001a 3573 09c2 0107     ..3.......s5....
   1e6c0:	0031 7df2 08be 0107 0053 f2f2 07bc 0107     1..}....S.......
   1e6d0:	003c f2f2 07f1 0108 0064 f2f2 00ce 000a     <.......d.......

0001e6e0 <SubBandDutyCycleJP923>:
   1e6e0:	0064 000a                                   d...

0001e6e4 <SubBandParamsJP923>:
   1e6e4:	1600 36d6 a7c0 36f7 0000 0000 b500 36fa     ...6...6.......6
   1e6f4:	2800 3750 0000 0000                         .(P7....

0001e6fc <pds_reg_jpn_fid1_item_list>:
   1e6fc:	2394 2000 0007 0020 23b4 2000 0107 25c0     .#. .. ..#. ...%

0001e70c <AdvChannels920KR>:
   1e70c:	2120 36f6 2120 36f6 0100 ff0e 2e60 36f9      !.6 !.6....`..6
   1e71c:	2e60 36f9 0100 ff0e 3ba0 36fc 3ba0 36fc     `..6.....;.6.;.6
   1e72c:	0100 ff0e                                   ....

0001e730 <DefaultChannels920KR>:
   1e730:	5001 5001 5001 0000                         .P.P.P..

0001e738 <DefaultDrParamsKR>:
   1e738:	0008 0033 0cdf 0107 000a 0033 0bce 0107     ..3.......3.....
   1e748:	000e 0033 0ac6 0107 001a 0073 09c2 0107     ..3.......s.....
   1e758:	0031 00f2 08be 0107 0053 00f2 07bc 0107     1.......S.......

0001e768 <pds_reg_kr_fid1_item_list>:
   1e768:	2394 2000 0005 0020 23b4 2000 0105 25c0     .#. .. ..#. ...%

0001e778 <DefaultChannels915>:
   1e778:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e788:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e798:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7a8:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7b8:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7c8:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7d8:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7e8:	3001 3001 3001 3001 3001 3001 3001 3001     .0.0.0.0.0.0.0.0
   1e7f8:	4401 4401 4401 4401 4401 4401 4401 4401     .D.D.D.D.D.D.D.D

0001e808 <DefaultDrParamsNA>:
   1e808:	0012 000b 0ac6 0107 0005 0035 0906 0107     ..........5.....
   1e818:	0007 007d 0801 0107 000c 00f2 07fe 0107     ..}.............
   1e828:	0016 00f2 08fc 0109 0000 0000 0000 010a     ................
   1e838:	0000 0000 0000 010a 0000 0000 0000 010a     ................
   1e848:	0023 0035 0cd5 0109 0007 0081 0b06 0109     #.5.............
   1e858:	0007 00f2 0a01 0109 000c 00f2 09fe 0109     ................
   1e868:	0016 00f2 08fc 0109 002a 00f2 07fc 0109     ........*.......

0001e878 <pds_reg_na_item_list>:
   1e878:	23c4 2000 0002 0090 2468 2000 0102 9501     .#. ....h$. ....
   1e888:	9054 0000 9054 0000 9054 0000 9054 0000     T...T...T...T...
   1e898:	90ba 0000 9120 0000 90d2 0000 90ba 0000     .... ...........

0001e8a8 <taskHandlers>:
   1e8a8:	d885 0000 3e25 0001 3439 0001 cefd 0000     ....%>..94......
   1e8b8:	e335 0000                                   5...

0001e8bc <tc_interrupt_vectors.13496>:
   1e8bc:	1211 1413 0015 0000 0a0d 614c 7473 7220     ..........Last r
   1e8cc:	7365 7465 6320 7561 6573 203a 0000 0000     eset cause: ....
   1e8dc:	7953 7473 6d65 5220 7365 7465 5220 7165     System Reset Req
   1e8ec:	6575 7473 000d 0000 6157 6374 6468 676f     uest....Watchdog
   1e8fc:	5220 7365 7465 000d 7845 6574 6e72 6c61      Reset..External
   1e90c:	5220 7365 7465 000d 7242 776f 206e 754f      Reset..Brown Ou
   1e91c:	2074 3333 4420 7465 6365 6f74 2072 6552     t 33 Detector Re
   1e92c:	6573 0d74 0000 0000 7242 776f 206e 754f     set.....Brown Ou
   1e93c:	2074 3231 4420 7465 6365 6f74 2072 6552     t 12 Detector Re
   1e94c:	6573 0d74 0000 0000 6f50 6577 2d72 6e4f     set.....Power-On
   1e95c:	5220 7365 7465 000d 6f4c 6152 4157 204e      Reset..LoRaWAN 
   1e96c:	7453 6361 206b 5055 000d 0000               Stack UP....

0001e978 <CSWTCH.152>:
   1e978:	0000 0000 8480 40fe 0000 0000 8480 410e     .......@.......A
   1e988:	0000 0000 8480 411e                         .......A

0001e990 <FskSyncWordBuff>:
   1e990:	94c1 02c1                                        ...

0001e993 <macEndDevCmdInputLen>:
   1e993:	0402 0401 0500 0101 0004 0500               ............

0001e99f <macEndDevCmdReplyLen>:
   1e99f:	0201 0201 0203 0101 0002 0100 0000 0202     ................
   1e9af:	0200                                        ..

0001e9b1 <maxEIRPTable>:
   1e9b1:	0a08 0d0c 100e 1412 1815 1b1a 1e1d 2421     ..............!$
   1e9c1:	0000 d300                                        ...

0001e9c4 <pds_mac_fid1_item_list>:
   1e9c4:	2cd3 2000 0000 0001 2cd1 2000 0100 0601     .,. .....,. ....
   1e9d4:	2c64 2000 0200 0c04 2cd4 2000 0300 1501     d,. .....,. ....
   1e9e4:	2cd8 2000 0400 1b04 2d28 2000 0500 2404     .,. ....(-. ...$
   1e9f4:	2d04 2000 0600 2d04 2d18 2000 0700 3610     .-. ...-.-. ...6
   1ea04:	2d08 2000 0800 4b10 2cf2 2000 0900 6004     .-. ...K.,. ...`
   1ea14:	2cbd 2000 0b00 6901 2c6c 2000 0a00 6f01     .,. ...il,. ...o
   1ea24:	2ca4 2000 0c00 7502 2ca6 2000 0d00 7c02     .,. ...u.,. ...|
   1ea34:	2ca8 2000 0e00 8302 2caa 2000 0f00 8a02     .,. .....,. ....
   1ea44:	2cae 2000 1000 9102 2cb0 2000 1100 9801     .,. .....,. ....
   1ea54:	2cb1 2000 1200 9e01 2cb6 2000 1400 aa01     .,. .....,. ....
   1ea64:	2cb5 2000 1300 a401 2c5c 2000 1500 b004     .,. ....\,. ....
   1ea74:	2ca0 2000 1600 b902                         .,. ....

0001ea7c <pds_mac_fid2_item_list>:
   1ea7c:	2c3e 2000 0001 0005 2ccb 2000 0101 0a01     >,. .....,. ....
   1ea8c:	2bd4 2000 0201 1001 2bd5 2000 0301 1604     .+. .....+. ....
   1ea9c:	2bd9 2000 0401 1f10 2be9 2000 0501 3410     .+. .....+. ...4
   1eaac:	2c19 2000 0601 4910 2c29 2000 0701 5e08     .,. ...I),. ...^
   1eabc:	2c31 2000 0801 6b08 2cb2 2000 0901 7802     1,. ...k.,. ...x
   1eacc:	2c60 2000 0a01 7f04 2c58 2000 0b01 8804     `,. ....X,. ....
   1eadc:	2cbb 2000 0c01 9101 2e00 2000 0d01 9701     .,. ....... ....
   1eaec:	2e01 2000 0e01 9d01 2e18 2000 0f01 a304     ... ....... ....

0001eafc <lorawanHandlers>:
   1eafc:	32fd 0001 3211 0001 33c1 0001 00fd 0000     .2...2...3......

0001eb0c <radioTaskHandlers>:
   1eb0c:	49f5 0001 4af5 0001 4839 0001 40bd 0001     .I...J..9H...@..
   1eb1c:	4e1d 0001 5a9c 0001 5a6c 0001 5a7e 0001     .N...Z..lZ..~Z..
   1eb2c:	59c0 0001 5a7e 0001 5a62 0001 5a7e 0001     .Y..~Z..bZ..~Z..
   1eb3c:	59c0 0001 5a6c 0001 5a6c 0001 5a62 0001     .Y..lZ..lZ..bZ..
   1eb4c:	59c0 0001 59c8 0001 59c8 0001 59c8 0001     .Y...Y...Y...Y..
   1eb5c:	5a84 0001 5a6c 0001 5a6c 0001 5a40 0001     .Z..lZ..lZ..@Z..
   1eb6c:	5b24 0001 5a40 0001 5a62 0001 5a40 0001     $[..@Z..bZ..@Z..
   1eb7c:	5b24 0001 5a6c 0001 5a6c 0001 5a62 0001     $[..lZ..lZ..bZ..
   1eb8c:	5b24 0001 59c8 0001 59c8 0001 59c8 0001     $[...Y...Y...Y..
   1eb9c:	5b2e 0001 5e1c 0001 5d6c 0001 5d6c 0001     .[...^..l]..l]..
   1ebac:	5d6a 0001 5e0e 0001 5e0e 0001 5e04 0001     j]...^...^...^..
   1ebbc:	5d6a 0001 5e0e 0001 5e04 0001 5e0e 0001     j]...^...^...^..
   1ebcc:	5d6a 0001 5e14 0001 5e14 0001 5e14 0001     j]...^...^...^..
   1ebdc:	5ea4 0001 6bec 0001 6bce 0001 6b88 0001     .^...k...k...k..
   1ebec:	6aa6 0001 6b88 0001 6bc0 0001 6b88 0001     .j...k...k...k..
   1ebfc:	6aa6 0001 6bce 0001 6bce 0001 6bc0 0001     .j...k...k...k..
   1ec0c:	6aa6 0001 6a9e 0001 6a9e 0001 6a9e 0001     .j...j...j...j..
   1ec1c:	6e04 0001 744c 0001 730c 0001 730c 0001     .n..Lt...s...s..
   1ec2c:	7308 0001 7424 0001 7424 0001 7416 0001     .s..$t..$t...t..
   1ec3c:	7308 0001 7424 0001 7416 0001 7424 0001     .s..$t...t..$t..
   1ec4c:	7308 0001 742c 0001 742c 0001 742c 0001     .s..,t..,t..,t..
   1ec5c:	7630 0001                                   0v..

0001ec60 <_global_impure_ptr>:
   1ec60:	0020 2000 0043 0000 4f50 4953 0058 0000      .. C...POSIX...
   1ec70:	002e 0000 000a 0000 3130 3332 3534 3736     ........01234567
   1ec80:	3938 6261 6463 6665 6867 6a69 6c6b 6e6d     89abcdefghijklmn
   1ec90:	706f 7271 7473 7675 7877 7a79 0000 0000     opqrstuvwxyz....
   1eca0:	9596 0001 966a 0001 966a 0001 9582 0001     ....j...j.......
   1ecb0:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1ecc0:	966a 0001 966a 0001 963c 0001 914e 0001     j...j...<...N...
   1ecd0:	966a 0001 9144 0001 9158 0001 966a 0001     j...D...X...j...
   1ece0:	958c 0001 9318 0001 9318 0001 9318 0001     ................
   1ecf0:	9318 0001 9318 0001 9318 0001 9318 0001     ................
   1ed00:	9318 0001 9318 0001 966a 0001 966a 0001     ........j...j...
   1ed10:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1ed20:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1ed30:	9652 0001 95a6 0001 966a 0001 95a6 0001     R.......j.......
   1ed40:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1ed50:	950c 0001 966a 0001 966a 0001 9516 0001     ....j...j.......
   1ed60:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1ed70:	966a 0001 9544 0001 966a 0001 966a 0001     j...D...j...j...
   1ed80:	9572 0001 966a 0001 966a 0001 966a 0001     r...j...j...j...
   1ed90:	966a 0001 966a 0001 966a 0001 966a 0001     j...j...j...j...
   1eda0:	966a 0001 966a 0001 966a 0001 9358 0001     j...j...j...X...
   1edb0:	938e 0001 95a6 0001 95a6 0001 95a6 0001     ................
   1edc0:	9436 0001 938e 0001 966a 0001 966a 0001     6.......j...j...
   1edd0:	9440 0001 966a 0001 9452 0001 9666 0001     @...j...R...f...
   1ede0:	9480 0001 94aa 0001 966a 0001 94b4 0001     ........j.......
   1edf0:	966a 0001 9662 0001 966a 0001 966a 0001     j...b...j...j...
   1ee00:	91a6 0001 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
   1ee10:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   1ee20:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   1ee30:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   1ee40:	296c 0000                                   l)..

0001ee44 <blanks.7238>:
   1ee44:	2020 2020 2020 2020 2020 2020 2020 2020                     

0001ee54 <zeroes.7239>:
   1ee54:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0001ee64 <_ctype_>:
   1ee64:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1ee74:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1ee84:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1ee94:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1eea4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1eeb4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1eec4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1eed4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1eee4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   1ef68:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0001ef78 <__mprec_bigtens>:
   1ef78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   1ef88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   1ef98:	bf3c 7f73 4fdd 7515                         <.s..O.u

0001efa0 <__mprec_tens>:
   1efa0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   1efb0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   1efc0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   1efd0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   1efe0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   1eff0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   1f000:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   1f010:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   1f020:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   1f030:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   1f040:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   1f050:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   1f060:	9db4 79d9 7843 44ea                         ...yCx.D

0001f068 <p05.6055>:
   1f068:	0005 0000 0019 0000 007d 0000               ........}...

0001f074 <_init>:
   1f074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f076:	46c0      	nop			; (mov r8, r8)
   1f078:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1f07a:	bc08      	pop	{r3}
   1f07c:	469e      	mov	lr, r3
   1f07e:	4770      	bx	lr

0001f080 <__init_array_start>:
   1f080:	0001a7c9 	.word	0x0001a7c9

0001f084 <__frame_dummy_init_array_entry>:
   1f084:	000000dd                                ....

0001f088 <_fini>:
   1f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f08a:	46c0      	nop			; (mov r8, r8)
   1f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1f08e:	bc08      	pop	{r3}
   1f090:	469e      	mov	lr, r3
   1f092:	4770      	bx	lr

0001f094 <__fini_array_start>:
   1f094:	000000b5 	.word	0x000000b5
